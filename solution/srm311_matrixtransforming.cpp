/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=6431
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class MatrixTransforming {
public:
    int minPushes(vector<string> a, vector<string> b);
};

int MatrixTransforming::minPushes(vector<string> a, vector<string> b) {
    int ret;
    return ret;
}


int test0() {
    vector<string> a = {"111", "111", "111"};
    vector<string> b = {"000", "000", "000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> a = {"1"};
    vector<string> b = {"0"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> a = {"0010100111000100100101100000011100000011001011", "0011110111001100001101110011101101001110111101", "1101100110110111110110110010101101011000101101", "1000000000001100010110111110100111000010101001", "0000001010001011010110010001101001011111100101", "0001100001010110111000100100100111101010001110", "0100101100011111101010110001110011010100000100", "1011010111011011010000101101011001110011111101", "1111101001111011011100010101100000010001110010", "0100000011111011111111111000110011100110001001", "0010101000010010011110001011100000110111101101", "0010111100110100011000011011100011011100000010", "0100101110011110011001100010000010110001011111", "0000011110100110101001111001011111110110100111", "1111001111000101000111101111111010111111011100", "1001110101111001111101011000011000110100101110", "1000110111100110100101111101011111010101011101", "0000111011000000001110000101010110110001110101", "0110111101110010101001000011010101111001010101", "1111101110101100010000100001110000100000100011", "0111101100011010010010000101110011001100011011", "0011101010010000001100110110001010101001000011", "0010000111010011101101000000011010011001110000", "0110011100100100010001000000111100011001100001", "1100111010100111100100110011110101100101110011", "1010101001011000001110000111001100111000101101", "0100010011101111100110000011101111011111111110", "1001011000010001000100101110101001001100101001", "0100100000101001010010101110000011110101001010", "1000111100000000111011001000100011111011101001", "0100010110010000010001000100011010111111010011", "1101001101001000011011110010110001000110011000", "1001001000110110010100100110110010000011001001", "1110011110010010101100010100111100100110110111", "1101000100000110101001101001000111010011000000", "0111011001100010000001100000111011101110101000"};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 497;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> a = {"100011110000000", "101110111111101", "110101110100100", "100000110111100", "011100100000000", "001100001011101", "101010100111011", "010110010110010", "111101000101010", "000000110101000", "100101010000101", "111011100001111", "101101100111000", "001010001110010", "100010001011011", "110011001100000", "011100011101011", "010000010100101", "001110110000100", "010011111010110", "011011100100110", "001000101011001", "101011101100011", "011101001101000", "000100000011001", "001111000110100", "111011010111111", "011000110110010", "010100110010001", "001000101000000", "001110110110100", "000010010111111", "100100011100110", "101010001011010", "101111011001001", "101100010010010", "110011110111011", "100010011101111", "110111110111010", "010110101101001", "100000010000010", "011111011000100", "111001010010100", "011101011000011", "110010011111101", "110110010011011", "011011010000111", "110000110110000"};
    vector<string> b = {"000100101001110", "111111110011011", "100111000001000", "011100100100110", "000101110001110", "101100001010111", "001011101111000", "101101111000010", "110001110110101", "111001101101010", "111110010000010", "111000100111101", "010000010100000", "001110110100011", "001111100111101", "010000100001111", "011011010011011", "101100000111111", "110011011101001", "000100010111100", "011010011010001", "100101110010011", "011110010111011", "000000001101001", "011111101110001", "011110100101000", "011110001000010", "101000110111010", "111001100000001", "100001101110101", "010000110100011", "001111010001101", "100100101010110", "100110001000011", "100101000000000", "001100101010110", "100000110000010", "101110100111000", "001001111010000", "001111010101011", "001001011001001", "010101111110010", "110100010001011", "110101001101001", "101010000010111", "010011000000100", "110010111011010", "010110100101011"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 258;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> a = {"10101001001011110000110101010101001001010", "11101110100001101100000011100010110001101", "10111111100011100101101000100100011110000", "10000001001100110100001100110111100110010", "01011101011000101111011011011111100101001", "10010100011100111101011110000010001011010", "10111000011010010101011111100110111100001", "11101110111101000001100001100010010101100", "10110000110000101000101010001011011010111", "01000111100100000001000000001000111010011", "10010011011101110010000111010100000001000", "01010110010110000100011100111101110110101", "00100100101000101011010101111111101111111", "00111111011001101001101010010101110111100", "11110111110001101101111000011000011000110", "10010101110100011010001101000101000110000", "00110101011101000011110001010101011011100", "01100000000111100010000100001001010111110", "11010110110010100001111010010101011000100", "00111101010010110110011000100010010111111", "11011000001001011010110011000011010100101", "00110001010010010000000011110000101111100", "10000110001110001111001010110001101110101", "00001111101000111111100001101001110111011", "01001110101100101101010100100011011101111", "01100001000011111111011101110100011110111", "01011110100100101111110010101100000110100", "11000010110001000010110101000111010100100", "10010111110001001100100100011100110100111", "11011110110110000011110001011100001010011", "01010101100110010110110100100101011001110", "11111111110101110101110110111001010010100", "11000101101011001101011011011110101011001", "00011010010011111010001100000111110101101", "00101011010011000001101111100010010001011", "11011110011110110111110010010110100110000", "01001010111011101011101011011010101101110", "11110011101100100010100010011011110001001", "00000000110011010000110001010010011110100", "11111110101011010110010101011100110000100", "10011101010001101001110110101010110100001", "10000111110011100110111110100011010100110", "00111000010111011101010100000111011100101"};
    vector<string> b = {"10101001001100110000101001101010110001010", "11101111010110110111011000011101001001101", "10111110010100111110110011000111100110000", "10000000111111001111001011101000000001101", "01011101011011001111000111000011100010110", "11100100011111000001000010000010000010101", "11110011111010110000110100111001010011111", "11101101011101100100010110111110011011100", "11000011001100010001000101110111011010111", "00000001111000111000100001101001010111101", "10011101000001001011111010110101101101111", "01011000011000111110011000010001100100010", "00100100100110101000101011110010001101000", "00111111001011101010010100011000010101100", "11110111101101101101100000111000000100110", "10010101101000011010011000000101000110000", "00110101100101000011111000010101011011100", "01100000111111100010010110101110111001110", "11010110010001100110100001110010110110100", "00111010001001110010100011000101111010100", "11011100110010011110011101000100010111110", "00111011001010010011110001110111010100111", "10011001001010001111100000110110010110101", "00010011001100111111000010101001001101001", "01011100110000110001100010100000111111010", "01100001000011100011010011110100011100010", "01011110111000110011110010101100111110011", "11000011000111110101111011000101111100100", "10010001000001001011101010011111101011111", "10101000011011110100110000101111110010111", "00100001000001010110110101010111011100110", "10001101100100000010111001001000110000100", "11000111111011001010010010011111010110010", "00011011111111111101001001010110000100100", "00010011001111000001100011110001110111101", "00001000000010110100011010100101000111001", "10011100111011100101101111111001001101001", "00011101101100101100111010100000001110001", "00000000110011011101001010001001100110100", "11111110101011010110000000000111110000100", "10011101010001101001111000101010001011001", "10000111110011100110110000100011101011110", "00111000010111011101010100000111011011101"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 142;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> a = {"100001011010101001001101111", "001001001110000100011000000", "011110100010011111010000011", "110001111011111100101101111", "011111010101101000100001010", "100000101100011111001010011", "001101001001100111100011101", "010011011001101111101101011", "101111100101110100000001001", "011000000111110100001000000", "111011000011000001000010111", "100100011101101100110110111", "010000011011111010100110011", "110000111110000100000011110", "111110100110011000001000110", "001010010011101101111111010", "000001110000100010000111100", "001011010100001100110110111", "100111001010010011000001111", "011010101000110000011101100", "011001111111000001001011110", "011111111100010011110101110", "101111101111110110111001100", "000101010000011110110001001", "101011111100111101101110000", "101100011011101000111011111", "010110111011010001111010011", "001011010100111010101000001", "000110010010101001001111001"};
    vector<string> b = {"010101111101011000000011001", "100010001001100001011101010", "111100101101000010110100101", "011110100111001001110111000", "110111011011001001100000100", "110110000100001011001001111", "110111001001101010110011001", "001010110110001010110001010", "110010010111100111100000111", "001000010010001111100110010", "000101101110011000111011010", "100110010001100000011100101", "001010001010100000010010010", "111001001001101111110101110", "000001000110111101101110001", "110010001111000111100011101", "111000100100111110111111011", "010001001001010100010000001", "100110111100100101010000010", "010010011000011101001011111", "001100000011101101110010010", "010010001000001111100110001", "011110011011011011001010011", "101110010110001010110011010", "001111100100001001001010001", "000101110010100101111110110", "001011111000101010111000000", "011101110000001110011001000", "101111001010000011010101000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 277;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> a = {"000000001100010011110001001010", "000101110111111110011101101110", "111001000111100101101100011111", "001101000011000010010111010011", "010101001000011111010101100001", "110000001001100000110011011100", "001011011010011100110010100000", "001110100000011001100000010001", "001100001010000111111001101110", "010110010001111101001101010000", "101111011010111001111100110110", "000100101111010010010100011100", "001011111010110010111010111011", "001001100101000011110101010011", "101011100110010001101100010001", "111001000111111011011001101011", "110010100101101111101011010001", "111001110011110111101010101011", "001000111011001000101001111011", "011001110110000001011110010100", "000111001110110101101011001101", "110101100100011001011001000011", "010010010111100101000001001101", "100110110111011111100110001100", "100111010110101100011111000110", "111101010010000111111000111001", "101111111111100000000100010010", "010101001111101100000001010010"};
    vector<string> b = {"000001111100000001110001001010", "100000111111100001101110011001", "011101111111111001111110011111", "011100000100010100000100100100", "110010110010111110001101100001", "010110000010110010000100101011", "010111010000010111110100011000", "001110101111010001100011010101", "010000000111100111110100101010", "000100010011101100001000101100", "110011001010010010101101110110", "111100101110100000001101100100", "110011110101000010001100001101", "110001111111010100101010101011", "101011101110001001001010010110", "111001000000010001101000100010", "001101101100100000110001010110", "000110110011111000000110101011", "010011111011000000011001000011", "111101110101010110000011001000", "100011000111001100110001010110", "110101101110000100111111111100", "010010101110010110011000111010", "011001110100110101111100011100", "000100010001100101011011111101", "011110110000000110000100011110", "110011100100011000111011010101", "010101010011010100000000100010"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 129;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> a = {"000111011111011011101000111100111100", "010101110100110111101110100010111000", "000101101101110001011101000000000011", "001001001101101111010010111101011101", "101111000011001110101010100110100001", "111111110111100000000001011111010111", "011110110111111111110011100100111101", "101001011101110111011101010110010101", "100101000001011110111011010111000100", "011101011110001111100000010010101100", "000111010101000101011110110011110110", "011010111111000111111111000101111111", "111111010110001100110111000100110011", "010101100110111100010110110100001111", "100011010001010110100010110101001001", "000101100010110001100011100101001001", "011100001101100111100001101101110010", "011110010011101011100000010010000111", "010101001010001011011100101101010010", "110011111111011011000100100011001111", "111011111011011100001000110000010101", "001001100111010011011001000011001001", "101100110010001110110110010110111100", "100111000111000110010000000101101110", "000010111110111111110011011010111000", "111100101011100001101111101011000110", "101011000101100011011100111111110000", "111000001111001111000000011011101010", "111010010001110011001100101010111000", "111111011101010101111011010111111011", "010111000110100011010101111110111110", "011110010000011001010110101010000000", "110011110001100010011011100111100101", "001011011101001100001100100001011000", "100000101110000011000101101011010111", "010010110100011100101000010001011100", "100110101111100101001100010000001011", "100101010000100111110101000000010001", "001101000111010011011001000101111011", "101010010111001000001000100010010000", "001000011000111010110010010010011110"};
    vector<string> b = {"001001011111011111001001001101101000", "011010000100111010001111011100011100", "110010101011111101001100000110101001", "010101111011101001100011111010111111", "110010000110011001011011010110101111", "011010000100110110010001111101110000", "010000101011001110111110101010110000", "001001100010111110110111100011100011", "111110100110001011010101001001100101", "000110000001001111100100010000111011", "110010111111101011000111100001111010", "101100110101101111001111011110100100", "001001001011011110110001011111101000", "111111101110100000010010111100101000", "111111100001011110010100110010101101", "010111111110000110101000000001101001", "010110110000111100010010010010010010", "100001001001100010001100001010000011", "101000111000111010111010010110001110", "000100010010111011011111110000110011", "001001010011100011111011101110111001", "111001111010011101011101011101100101", "010011111000101101001101101011110000", "011110101101110101010110010101110010", "111011001111001111001000011111011101", "000100101110000111010010010111100011", "101011111010010001010100100000011100", "000110010100111000000011101110101101", "011111010100110000001011110110000111", "010101010000010010011000001000001010", "000011110101010001111101010100010001", "010000011101111010011110000000101111", "110010000010000010011010101010101001", "111011101110011000011111000100010100", "001101100000110011110101101001100011", "110010010111001100000111100110110100", "101011010000111101001010110101000101", "000000110101101110111111001010011111", "100101000000101111100011011101000011", "011110001100001011110100001010011110", "001000011001101111000001110010010000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 290;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> a = {"001110110010001", "110100001001001", "001101100011101", "011111000000101", "010111101011000", "101101100010111", "001110011101110", "101001100111001", "000010111011110", "111011111001001", "000101000111010", "000000010100111", "111110001101011", "010011101011001", "001110010011001", "010110110110010", "111110001010001", "111101101110011", "100110110011010", "011001100111001", "101111100001101", "011011110001001", "110010110010101"};
    vector<string> b = {"011000011111010", "110001001110100", "000010101011101", "011101001110000", "100011110011110", "000010010111001", "100001100111001", "011011100101111", "111001010101110", "100110100110100", "110000010110010", "100100000010100", "101010101011000", "110010100100010", "000100011011100", "101011001011010", "111111010011010", "100000100011001", "001010011001011", "111111011100000", "010011001111101", "101100101000101", "010110111101011"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 135;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> a = {"1100110111001000111110011000010001011011101", "1000001110011010111101000000101100011001111", "0001100101011100111110110110111100111000101", "0001110110110001101110101111011100101110100", "0010101010011000101000111110010000011100110", "0010011110110110110101101110001100100000000", "1100110011111001111001111100100101000110110", "1101001111110111000010001010101000101000011", "1101110010000110000011101110011100110101001", "1010000000101110111001000010110111101000001", "1001011101011010000111011101101011001000111", "1001110110101001000101010010101010101010000", "0010111010100110100110110100011010100111101", "0101111001001001100000110010110000010110101", "0110110000010100111111111100100000100101000", "1000111001101001100110000011111011101101010", "0101011101001111111100100110001001011101110", "1011100010001011110111010100100001101101010", "0010000101100110010100100011101110001000110", "1110010010100011000001100110111110000100100", "0010111100001000100000101000010000001110101", "1101100011101110010110111110001111010001011", "1100101000111110110100010100110011001001011", "1001110011111001001111110000010000011010010", "0001010100011001001011101100010010101111110", "1001011110100110111110001011010011101110000", "1100101100111100100101110101011100110100010", "0001101010111000101100111101001101111110001", "1000001011000111000111011000101111011110110", "1001000101110111011100111111111100110110111", "0010110000100101011100100111101110001100101", "1010001011100011110000111111011001001011000", "0100101101010001010101110010010100101011110"};
    vector<string> b = {"0100001001111011110010011000001010000010111", "0111101001011100000001111000000010100000010", "1001100101100011011010111110101011000110001", "0011011111100001011000100101010001000010110", "0111000001001101000011010000010011001001011", "0000101001000011110110010110011111001110110", "1001101111000111010010100111011000000110110", "0001011010000100001111100111011111010000001", "0011111000111000101011100001000010000111110", "1011101111000100001010011100011110001110011", "0110100011111111100011010110110111101100011", "0100110111011111111100101110011000111110101", "0100100101100010000100110110100100100110111", "0100100101001101110000001111111110011000111", "1000100010100111011010011011010100100000111", "0000110000110000001000001100011011010001011", "1110110111111110101011101111010100010111011", "0111100000100100101011101111101011101110011", "0111001000100111011100001100101001010010011", "1101010101001000111110101010011111000011001", "1001000111111110010100101010000010110110011", "1011100010100101111011101010111100011110011", "0001100101110100011011111001100001111010111", "0111011101110000011010000110101000000100100", "1010011000001110011111111001111001100110011", "0100110000001011001011001000101110101001101", "1001110100000010001000111000111001011110111", "1101101101101011101001011011100010010000011", "1111111011110011010110011000001111001001111", "1011101001100101001010110010110000011001011", "0001001000101000000110100010001000000000001", "1010000011000010111101010110101000001011011", "1010101101110101000000010110001011101000110"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 463;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> a = {"0110011", "0111111", "1101001", "1111011", "0011100", "1110000", "0100100", "1010001", "1001000", "0001111", "0000100", "0001111", "0101110", "0111111", "1011101", "0101011", "1000110", "1000011", "0100011", "0010001", "0111011"};
    vector<string> b = {"1111011", "1101100", "1111100", "1110101", "1001000", "1110000", "1111001", "0111010", "0010010", "0101011", "1001011", "1111111", "1111101", "1110111", "1110111", "1011011", "0011100", "0010000", "1111001", "1100110", "0111011"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> a = {"110001101111", "101110101011", "000001111001", "101011100001", "011011010110", "001111001110", "011001111000", "011011101001", "100011101111", "101101100100", "101010001010", "100101001110", "100000011000", "010010001111", "101111100000", "110010000000", "111011011100", "001111111101", "101000101011", "010110011101", "000100110100", "010010011010", "100101101000", "110100000010", "101000001100", "111001100110", "110000101110", "100001111011"};
    vector<string> b = {"110000010110", "010101011110", "100110101000", "101111110111", "110100101100", "011111001100", "110000000100", "110111011001", "101011110101", "110100001011", "111110101111", "110111101010", "100101110000", "001111111111", "111100111010", "111110110100", "000100010010", "111010001000", "000100010101", "111110111100", "101001010111", "001000111000", "101110001110", "011001111010", "010000010000", "011001111001", "110110001011", "011110100111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 109;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> a = {"110001111101110001", "000101000010101000", "011101010011100001", "110011101101110001", "000001011000011000", "010001101110001111", "000111011011101010", "000001010101100111", "011100100111001000", "111000110110110110", "000100110011100111", "011100011000010000", "011010010110000001", "110000010011011110", "011000000100101001", "011011000111111000"};
    vector<string> b = {"101010110100100011", "101111000101111101", "111110001100110111", "100011101000000111", "010101111010101001", "011010111010010000", "000101100011001011", "110110011000011010", "010000000011001101", "011011001001010010", "010011101111101011", "001100001011011101", "000101100010001110", "110101101011111111", "110111110100011100", "110101110100100010"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 109;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> a = {"010101101001111111100100110010000100", "110000000110111011110011100000000000", "101101101001110110110000010001011001", "111000001101100100001000101111010011", "011011101001110000101111111100110001", "011101000111111010000110100101001111", "001101100111011111000101101001101110", "100100111101001001110110011110000010", "001100111010100010011110010101001100", "111010110001100100010000110101000101", "100001111000000110010010101100010111", "101110111111110101100111110001110011", "111001010011101000101111111001110100", "000111001011000101111101101100101110", "111111100001100101000110100101100001", "100010110000011010001110001011011100", "001110111100011111101110101111101110", "000110111011100010100010000111010000", "010010100110110111010101110100111001", "010110010000001100101111101110110010", "001011110111101110111011110000100010", "100000101101001000101111111000000110", "010111001110101110001111000101111010", "001111111101000010101100000001100010", "010001011010000000001100101101111110", "101010100010110111001001110110001000", "011101111110100111011111001101000011", "010110110000111011001001111111111101", "101000101001011100101010100101111110", "011100010110000101000110111101101100", "110011110110100000011100100011101100", "010100001101101111011001011000010110", "011001111001100000011101010001111101", "001110111011000111001000001110000000"};
    vector<string> b = {"001010010001001011010010000010110101", "101110001101111010100010110001111110", "110000111010100100001101010001000111", "000111010011110101000010001110101100", "101100101110011000011100110011010010", "101000100110010100011000111100111100", "000001011000010111101011011000000011", "000010110011001010100001010001010010", "001001101000111000000101101101111110", "010011000111101000111101101000000101", "110111101000111000010100111010110001", "010001010100001000110001011100010111", "110010110010101110101011000000111110", "010011011011000011100001001111101011", "101111100011010000011011101110010111", "011111110100011110001000011011000001", "001001001010101110111011010101010011", "001110010100110111010010001000000001", "010111010010101111110000010011101010", "000011111011100000000100101001111010", "010010101000000011111111101000010101", "111101100100110101010010000111111000", "011010000100010111011111100000001110", "001110011101111100110111011010100001", "000011011000011000010110101111100111", "001001110000101111111100100111100001", "101000001101100111010010001111100111", "001000110011011111100110001001000001", "111000110111000110001010100101000100", "011101001010010100110100111110100000", "111111011011001010010101111011010010", "010001100011011101101011000111001111", "011011111000011111011000101001011000", "000001010111010001110111011100100111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 416;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> a = {"1101100111100011101011110000", "0110001111010000110111110110", "1010110011101101001010010001", "1101010110111110011110011010", "1011010100111100111111010110", "0010010101101000001100101111", "0000110101010010011100101000", "0010111011111110110011100010", "1001101011110001001001101100"};
    vector<string> b = {"1111111001100000001000001100", "1000011110110110111011110101", "0000011111111010001111111110", "0110001110110011111110110001", "1111011011100010110011101011", "0010111100100101011010110000", "1101111010100010101101111001", "1100101100111000000001011010", "0111100111010101101000011010"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 65;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> a = {"01001111000001110111101", "11010100111101000010111", "00111000100010111111110", "10110111100011100011001", "10110100111101110111010", "00011100011101100001000", "00001000000100101000011", "01010001111100100111010", "10111101000111101101011", "10100011000000011111011", "00101101110110101110010"};
    vector<string> b = {"00100101111001011011101", "01111001010011010011101", "11000101100100000011010", "00011000011010010100110", "01010010100110011100101", "01001111000101011011110", "11010111010011000010110", "01001111111110101001101", "01110010101011010001011", "11011000100100010100011", "00011001110011100000010"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> a = {};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 301;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> a = {"11001", "11111", "00111", "11110", "01000", "11010", "11111", "00101", "11001", "10110", "11110", "11100", "11010"};
    vector<string> b = {"10000", "11111", "10101", "11001", "01000", "01111", "11000", "10000", "11110", "01010", "00101", "10010", "00001"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> a = {};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 209;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> a = {"011111110001", "100001000011", "000100111011", "001001000000", "011110000111", "110001100010", "111000110010", "000101101010", "110011011110", "011101110000", "010100111011", "111010101001", "110111010110", "100101111011", "011011101101", "100010100110", "001010000100", "010000000001", "101010110010", "101110101010", "110100100110", "110001110000", "010000000100", "011111110111", "000101111010", "100000101010", "010110000010", "000000111100", "111110011111", "010110110000", "110101101000", "011110011000", "010000111100", "001010010000", "100010011101", "111110100100", "110101100001", "001001101010", "110100101110", "000111010110", "111110001011", "001101110011", "101100111101", "110110101001", "010000001001", "010010111001"};
    vector<string> b = {"011000000000", "010000100111", "011010100010", "001101110010", "111100110000", "001001100101", "010101110101", "000011011101", "100110100110", "111101010111", "000111101000", "001001111110", "100111010011", "111111111101", "100100101101", "111000111100", "011000110101", "111011010101", "000111010001", "101011110100", "100101110000", "010100111111", "110100000011", "101111011011", "110010100000", "000101111110", "100100101011", "110011000110", "101111110001", "010111001001", "000110001110", "100010000000", "001001000110", "000110111111", "010101001001", "100111101000", "000110101010", "111111000000", "110001001111", "011101101000", "010001000000", "001111110110", "100101011110", "000011101101", "101101011110", "111001011100"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 226;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> a = {};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 180;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> a = {"11000110001011101100011001001101111111101001001110"};
    vector<string> b = {"11000110001011101100011001001101111111101001001110"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> a = {"0010001000000000011010001", "0011000011000011011001011", "0111111111001100111000010", "1111001111001001011010010", "0111000011001111011111100", "0000101111010011111001010", "1101000001010010110110100", "0110001100011101101000011", "0110100100000010101011010", "1100000111011011100000010", "1100100101111011001111100", "1100100000010100011100111", "1001000000010100111110111"};
    vector<string> b = {"1010111011101111010010110", "1110101111011111100011011", "0000001000010100110100010", "1110111001100110111010101", "1111111100101100110111111", "1100001011111010111000101", "1100000010000010111001010", "0000000010100011111100010", "1100111110010010100101101", "0100001001101000000000010", "0101101011111110001110111", "0111111010110001011000110", "0011011011110011111110000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> a = {"1100110110010100111", "1101000000110011011", "0111110010111011000", "0100011101011001110", "0000011000001010110", "0001011101011111001", "1011011010100111000", "0111111011010010111", "0100010110010011000", "0000110110011011010", "1111111101110111100", "1111011001110111000", "1010011101011110101", "0011000100011011100", "0001110100001111101", "0110111011010011101", "0010010001010000101", "0100110100010000101", "1010101001110000010", "0101010010110100111", "0101001000010010011", "1011111100111101100", "1010101110100011001", "0110101010011100001", "1101110010101010001", "1100000101000110100", "0010011101101011111", "1010101111111101110", "1101111001011010101", "1110001010110110001", "1010001011011110010", "1010100111101011000", "1110001110101111111", "0010111110001110111", "1011111100111000001", "1110101011101011011", "1110100000110010010", "0110001000011001011", "0111000100100001001", "1111100000000111010", "0010111100101111011", "0011101100100010110", "1110010110001000100", "0101101010111111011", "0010101100010100100", "1000010100010001110", "1101110010001000111", "0100011111001000101"};
    vector<string> b = {"1111010110100010111", "1001111100010111011", "0101101000101101000", "0101100101011111110", "0001011001011000001", "0111001100000010010", "1100110111101011101", "0110000000111011001", "0000101100010001100", "0001010011000010111", "1101111011010001010", "1001010000111011100", "1000101101011110110", "0000111110001011000", "1110100110111111101", "0100101001100111101", "0011011110101110100", "1001100110010000110", "1001000000001100001", "0100101101111101001", "1010111100001111001", "1001110111110111000", "1010101000001111001", "1000010101100101000", "0001000110011010000", "0100001100100010101", "1001010111010111101", "1110010011111001010", "1110000111111111110", "0000001011001100010", "0111010011100010001", "1011010100110111011", "0010001100010100100", "0000000100001100010", "1011111100111010100", "0011011010100000101", "0001000110000111101", "0101101100100000001", "1010110001010101011", "1001011000110010111", "0101001011010110100", "0100001111001010100", "1110001111100000100", "0110100100100111100", "0111010011011101001", "1110101100101110000", "1000100010000111110", "0111111000000000100"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 211;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> a = {"0110101000000011011", "0100110111001011110", "1101110011001100000", "1111011001111111001", "0011100010010010100", "0101110100110011111", "1100101000110000110", "0010100000010010101", "0101011000100110111", "1101100100110101101", "0001101010010110001", "0010010010110011011", "0101101101000011000", "1001101100111100000", "0111011101001100001", "1010110101100010101", "0010101000100110101", "1001010010000100010", "0000100011111101011", "1111110001001111110", "1010001000000011110", "1111011111111101110", "1101101001110100100", "1000101101010001010", "1011101111000001011", "1010001111010001110", "1111001010000101010", "0000101010000001110", "1010110010111001101", "1111010010000100010", "1010100100000001110", "1100100110000010010", "1000101001011111010", "0011001010001011111", "1100100101010101110", "0101001001001111110", "1001010110000100001"};
    vector<string> b = {"0101111110100111011", "1011101101000000011", "0111100000000010010", "0001010000110001001", "0101000110111100001", "0000101100001011001", "0101100111001010010", "0000100000000011100", "0001110100001100101", "1010110111010100110", "1010001001010011001", "1110100110111100101", "1000010101111000111", "1010000011100111001", "0000001001100101100", "0101001111100010001", "1100010111110111110", "1010101100001110100", "0001101010100001101", "0110011111100110001", "0110100000000101000", "0011010100101011101", "0011101111010110011", "1001011110100100101", "0011000010010000110", "0011001111111001011", "0100111101011011100", "0101000011010011000", "0100010000001101110", "1110011100111100011", "0011001110111001110", "1110001110000010010", "0101010101011001100", "1001100011001010110", "0000011110110000110", "1111111010100101000", "1000000110110111111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 290;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> a = {"01000011001001100110001101110001100110000011", "10011001100000111100010010001101101110000001", "00111001110111001000100110100001101101101001", "01011110000010000110000100100110010011010010", "11110110110101010011111011001011000011000110", "10101010000101110110110000010000010001100010", "11100111001010110000001001101100010111010101", "11011111101110010110010101010011010101111101", "11000001000000100001001111001101001011010111", "00010001011001010001100000010010011110110011", "00010000000010011000010111100111011001101001", "11000110100001110111001011101001100001010100", "00101001110011011000111000100000001000110000", "01111001000100101001000111101101100101011110", "00000100100010101110100100100100101010000101", "11000010101001101011010111100101101110000010", "11000110101011011101001010000110100011011110", "10101111011000011111100110011000010001100111", "10010110010010001101001100001010100001000100", "01100000001011101011011110010010111110001110", "00101001010000101101010000001010000101001011", "01011010101100101011010001110100111110010000", "01110011011011011010001010010010011001111010", "01010101010100100001001001011011011000101101", "10101000101011101100011001010000010010000100", "11000101111001110101001100100001111000111111", "01011010011111011101111100110110111011100100", "11011101010000101010001110010001010101011100", "10011000001001101010101001100101000101110110", "10000100100111110100101111000111001001001110", "11011110101110100000011100111101011100101010"};
    vector<string> b = {"01000011001001100110001101001001100111110011", "01000010000000111100010011000101110011111111", "11011010010111001000011111101001110000010111", "10111101100010000110111101010110001111011100", "11001110110101010011111011001011000011000001", "10101010000101110110001000010000010001100101", "11100111001010110000110001101100010111010010", "11011111101110010110001001010011010101111101", "11000001000001010001010011001101001011010111", "00010001011000100001111100010010011110110011", "00010000000011101000010111100111000101101001", "11000110100001110111001100101001111101010100", "00101001001011011000111111101111100100110000", "01111001111100101001000000100010011011011110", "00000100011010101110100100101011010100000101", "10101110101001101011010111100101100000000010", "10101010101000111101001010000110100011010000", "11000011100011111100000110011000010001101110", "10010110101010001110101100001010100001001101", "01100000110000001000111110010010111110001001", "00101001101011001101010000001010000101001011", "01011010010100101011010001110100111110010000", "01001011100011011010001010001110011000001010", "01101101010100100001001001000111011001011101", "10010000101000001100011001001100010011110100", "11000101111010010101001100100001110111010011", "10111010011100111101110010110110110100001111", "00111101010000111000000000010000101010110111", "01111000001001111000100111100100110101110001", "10000100100111100110101111000110111001001110", "11011110101110100000011100111101011100101010"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 42;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> a = {"0010001100100111111000100101", "0000100100010110110000110101", "1010111101011100100000100101", "0111010001100011111110100001", "0000110000101001100111111001", "1110010111110001100111110000", "1010010110001000101011001001"};
    vector<string> b = {"0000010110111101000010010100", "0000010011011101001111011100", "1011000011110010111001010101", "1110001110101100010110011110", "0011011100000011111110011010", "1100110010111110011000001010", "0010001000111100011111001101"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 65;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> a = {"1011101110111101001100000110000101101111", "1001111100111110111011110101000110101000", "0001010011011010100111101011000011101011", "1101110001000001000110111100001111011111", "1001011110011010011001110100001011100001", "0010110111110011110111001010001101101111", "1100011001010001110111001110110011001111", "0011101100101110010001100001011010001101", "0100101000101110000001000111111100100010", "1001011110101111010100001011010101100111", "0010100010100100010001000011101001001111", "0111000111010101100000011110001101111001", "0001110101000000000010011011110010000000", "0000101000100100111010110110111111000110", "1111110110111111111010101011011100111001", "0111000011011100111100000111100110001001", "1111110000000100111101111111000000000101", "1110001010111010000010010001111010001010", "1110011100101100001000110100011100011111", "0111010100100001011110001010111110010001", "0110110000111110110111001000101001110100", "1011101000111101110101001110001011101111", "0100010001000101110010011111000001011100", "0011101000000100000110111001000100101010", "1011110000010111110111111000001011011111", "1010000011001011101000110111110100001101", "0100000001010111101011011010011000000110", "1110100011010111001000000010110101110001", "0101111010001000100100101100000000010111"};
    vector<string> b = {"1011101110100001001100000110000101101111", "1001111100100010111011110101000110101000", "0001010011000110100111101000100011101011", "1101110001000001001000111111101111011111", "1001011110011010010111110111101011100001", "0010110111110011111001001010001101101111", "1100011001010001110111001110110011001111", "0011101100101110010001100001011010001101", "0100101000101110111001000111111100100010", "1001011001101111101100001011010010100111", "0010100101100100101001000011101110001111", "0111000000010110000000011110001010111001", "1111110101000011100001111011110010000000", "1110101000100111011001010110111111001000", "0001110110111111111001001011011100110111", "0111000011011100111100000111100110000111", "1111110000000100111010111111000000000101", "1110001010111010000101010001111010001010", "1110011100101100001111110100011100011111", "0111010100100001011110001010111110010001", "0110110000111111000111001000101001110100", "1011101000111100000101001110001011101111", "0100010001000100000010011111000001011100", "1101101000000100000110111001000011101010", "0101110000010111110111111000001100011111", "0100000011001011101111110111110011001101", "0100000001010111101100011010011000000110", "1110100011010111001111000010110101110001", "0101111010001000100100101100000000010111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> a = {"01100011", "00100011", "10000100", "01110011", "10110001", "01010000", "01101100", "00110001", "11110110", "10000101", "11000011", "10011100", "11110110", "01001101", "10111100", "10011010", "10010101", "11111011", "01110001", "00110001", "10100111", "00100111", "01010100"};
    vector<string> b = {"11011001", "01100010", "01111111", "11111111", "01111011", "10011101", "00100011", "00011100", "01111010", "10010000", "10101000", "10001110", "01011001", "11110111", "01011011", "11011011", "00101000", "11111100", "00010011", "10010000", "10100111", "10001111", "01110111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> a = {"001", "100", "100", "000", "011", "010", "100", "100", "010", "010", "010", "110", "101", "101", "000", "110", "000", "110"};
    vector<string> b = {"001", "100", "011", "000", "100", "010", "011", "100", "101", "101", "010", "001", "010", "010", "111", "110", "111", "001"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> a = {"0010000100101", "1010111111100", "0111011011110", "0110100001101", "0000111011111", "1110010101111", "0100101101111", "0011010110011", "1100010011010", "1011001110000", "1100001000001", "0101011001011", "1000101110010", "1100001111111", "0000110110000", "1001010100101", "1000000101011", "1100101011011", "0001011010110", "0010001010000", "0001100100010", "1101011010011", "0011111011010", "1011101011010", "1011110101101", "1011000111001", "0000100010000"};
    vector<string> b = {"1000111010111", "0010111101111", "1001101100000", "0101010000110", "1100111111110", "0010000001100", "1111110100000", "1010010110011", "0000101000100", "0110000011111", "0101100111100", "0101110011011", "1100000111101", "0111000010001", "1101011001110", "0001000001011", "1001101001100", "1101111110010", "0110111010010", "1011011011100", "0100101100110", "0101110100001", "1011110011101", "0111111000110", "0110010010101", "0101011000010", "1010111111010"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 142;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> a = {"111100111011101011111111110011010000001111110", "011010110100000100100010010101110000001101100", "101101000100100010000011010101111111110000001", "101011101001101010011100111111000111000111001", "010011101000000111100000110010101000000110111", "001000011000001001011111011100001010110001001", "010011001100011110100110101111101011000110101", "101000111110111110000011111000011000000010110", "010100011011000001011100100111000110101011110", "001111110110100101101101001111110001011010111", "110101010011001000001100110110110111100101010", "010111110000111000100011001010010111101101111", "001001001011010101001110100011101110000001001", "111000101000111001101010011000001000111101010", "110011110010001100110101010001100000000010000", "101101000010001000110000011011000000101000100", "111101000010001111111001001101101100111001111", "110110000111110010100110110000010000101000011", "101101011001100111001111100010001010011111011", "100101010010111101000011001111011101111100010", "100000100010100111001110000010011111000011101", "100101001010010110010100000110011001100001000", "110001110101100011100011011111110101011111010", "110101010100111101011101110010110001100011011", "001011101011100101100001100010000000101001111", "010111110000001101011011000001110011000010101", "010000000111100100010000111011111001001000111", "100100101010011001111001100111100000100111001", "000101111000110111110100110110111101011010010", "001000101101000000000111001010110010001110100", "110110000110111011000101110010110010101001110", "010010111101010111101001110101001000111111100", "111101011001000101111010100100100101111111110", "100100000000111100100110101110001000010100100", "111011111010001000101010100101111101011111001", "110011100001110111100110000111100001010011000", "010100010010000000001101111010111000001110110", "010000001001101000111010010010100101100000111"};
    vector<string> b = {"110000110111101010010011111010011001010011110", "011000111000000101010010101100001000011001100", "101111110001010010001101010100011011100100110", "100110110111011011101100110111100100001111110", "010000110110110110001101111001011010000001000", "110010001110100100011000101111100110100010101", "100101001111100011111000110111010010110101001", "011010011101000000100100110011010011001110010", "011111101101010010101110101010010010000010111", "010000111100100110001011111011100100000011001", "101001100010001011110010010111010011111011000", "001011100101000011011000001101101100010010011", "010011010110100000010010100100010011100011001", "100100100111110010110110101010000100100011010", "101000000101111000101101000001111001010000111", "010100110010000010010011111110111101110100100", "000110100010010100111010101011100011101001101", "001001110110101110100101000101110100100010000", "101110110001000100111111110000010001010110100", "101001100000000010110110001110100001111010011", "110100000101000001001011011101101000000011010", "101110110101111000011001001010011001100011101", "100101111010000001100101100111111100100100001", "000101100110110111000110110101000000101001001", "011110101001010001111100110111110110011110000", "101010100101110111001110001110001000101101010", "010011100000001111010100111011000111010110110", "011110000101111101011111111101101000110110111", "001010110011100010110101011001011000101010010", "000101111010000010011110011010001000000111010", "111011101110010011111001010110010000111001010", "011111010010111111010100101100100000110011111", "110001001000101010010010111111001011010011101", "101000011000010000010111111110111011000111010", "100010100010101001110010010001110001010001110", "100110100100100100101100110010000101001010001", "000001011001001100100111101011011000000001000", "011110000101101010011001010001011110101110111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 330;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> a = {"0000", "0010", "0000"};
    vector<string> b = {"1001", "1011", "1001"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> a = {"00101001110001001001011000000111000000110010110011", "11011100110000110111001110110100111011110111011001", "10110111110110110010101101011000101101100000000000", "11000101101111101001110000101010010000001010001011", "01011001000110100101111110010100011000010101101110", "00100100100111101010001110010010110001111110101011", "00011100110101000001001011010111011011010000101101", "01100111001111110111111010011110110111000101011000", "00010001110010010000001111101111111111100011001110", "01100010010010101000010010011110001011100000110111", "10110100101111001101000110000110111000110111000000", "10010010111001111001100110001000001011000101111100", "00011110100110101001111001011111110110100111111100", "11110001010001111011111110101111110111001001110101", "11100111110101100001100011010010111010001101111001", "10100101111101011111010101011101000011101100000000", "11100001010101101100011101010110111101110010101001", "00001101010111100101010111111011101011000100001000", "01110000100000100011011110110001101001001000010111", "00110011000110110011101010010000001100110110001010", "10100100001100100001110100111011010000000110100110", "01110000011001110010010001000100000011110001100110", "00011100111010100111100100110011110101100101110011", "10101010010110000011100001110011001110001011010100", "01001110111110011000001110111101111111111010010110", "00010001000100101110101001001100101001010010000010", "10010100101011100000111101010010101000111100000000", "11101100100010001111101110100101000101100100000100", "01000100011010111111010011110100110100100001101111", "00101100010001100110001001001000110110010100100110", "11001000001100100111100111100100101011000101001111", "00100110110111110100010000011010100110100100011101", "00110000000111011001100010000001100000111011101110", "10100010001000010101111101100010100110011101001110", "10010011011011110010101011010110011111100101001110", "01000111011000011101100101001010111000000011001111", "00010001110010011111001111101001111101100011011101", "10100011111101110011101011010001100001100011111111", "10100000110001001010100111011010100011000110111000", "11000100010010110010101000100110100110000000101010", "10000101010101011000000010000100111000110010011000", "11000101100001100011001100001100010001110011111100", "11001101100111001100000001010011101100111000100010", "00100110001000010111010101101001011000010000010100", "10111011111011001011000111111111111000101001000110", "01000100001000101111101000111011100010010001010110", "11000011100101000101100111100101010011101000010100", "01110111111111111100011011100100101100011000010001", "10001110011100011110000110011101011010111111000000", "00110000001101000111000000111111100100110001111001"};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 2304;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> a = {"10", "01", "11", "00"};
    vector<string> b = {"10", "01", "11", "00"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> a = {"10", "01", "11", "00"};
    vector<string> b = {"10", "01", "10", "00"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> a = {"00101001110001001001011000000111000000110010110010", "11011100110000110111001110110100111011110111011001", "10110111110110110010101101011000101101100000000000", "11000101101111101001110000101010010000001010001011", "01011001000110100101111110010100011000010101101110", "00100100100111101010001110010010110001111110101011", "00011100110101000001001011010111011011010000101101", "01100111001111110111111010011110110111000101011000", "00010001110010010000001111101111111111100011001110", "01100010010010101000010010011110001011100000110111", "10110100101111001101000110000110111000110111000000", "10010010111001111001100110001000001011000101111100", "00011110100110101001111001011111110110100111111100", "11110001010001111011111110101111110111001001110101", "11100111110101100001100011010010111010001101111001", "10100101111101011111010101011101000011101100000000", "11100001010101101100011101010110111101110010101001", "00001101010111100101010111111011101011000100001000", "01110000100000100011011110110001101001001000010111", "00110011000110110011101010010000001100110110001010", "10100100001100100001110100111011010000000110100110", "01110000011001110010010001000100000011110001100110", "00011100111010100111100100110011110101100101110011", "10101010010110000011100001110011001110001011010100", "01001110111110011000001110111101111111111010010110", "00010001000100101110101001001100101001010010000010", "10010100101011100000111101010010101000111100000000", "11101100100010001111101110100101000101100100000100", "01000100011010111111010011110100110100100001101111", "00101100010001100110001001001000110110010100100110", "11001000001100100111100111100100101011000101001111", "00100110110111110100010000011010100110100100011101", "00110000000111011001100010000001100000111011101110", "10100010001000010101111101100010100110011101001110", "10010011011011110010101011010110011111100101001110", "01000111011000011101100101001010111000000011001111", "00010001110010011111001111101001111101100011011101", "10100011111101110011101011010001100001100011111111", "10100000110001001010100111011010100011000110111000", "11000100010010110010101000100110100110000000101010", "10000101010101011000000010000100111000110010011000", "11000101100001100011001100001100010001110011111100", "11001101100111001100000001010011101100111000100010", "00100110001000010111010101101001011000010000010100", "10111011111011001011000111111111111000101001000110", "01000100001000101111101000111011100010010001010110", "11000011100101000101100111100101010011101000010100", "01110111111111111100011011100100101100011000010001", "10001110011100011110000110011101011010111111000000", "00110000001101000111000000111111100100110001111001"};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> a = {"10101001110001001001011000000111000000110010110011", "11011100110000110111001110110100111011110111011001", "10110111110110110010101101011000101101100000000000", "11000101101111101001110000101010010000001010001011", "01011001000110100101111110010100011000010101101110", "00100100100111101010001110010010110001111110101011", "00011100110101000001001011010111011011010000101101", "01100111001111110111111010011110110111000101011000", "00010001110010010000001111101111111111100011001110", "01100010010010101000010010011110001011100000110111", "10110100101111001101000110000110111000110111000000", "10010010111001111001100110001000001011000101111100", "00011110100110101001111001011111110110100111111100", "11110001010001111011111110101111110111001001110101", "11100111110101100001100011010010111010001101111001", "10100101111101011111010101011101000011101100000000", "11100001010101101100011101010110111101110010101001", "00001101010111100101010111111011101011000100001000", "01110000100000100011011110110001101001001000010111", "00110011000110110011101010010000001100110110001010", "10100100001100100001110100111011010000000110100110", "01110000011001110010010001000100000011110001100110", "00011100111010100111100100110011110101100101110011", "10101010010110000011100001110011001110001011010100", "01001110111110011000001110111101111111111010010110", "00010001000100101110101001001100101001010010000010", "10010100101011100000111101010010101000111100000000", "11101100100010001111101110100101000101100100000100", "01000100011010111111010011110100110100100001101111", "00101100010001100110001001001000110110010100100110", "11001000001100100111100111100100101011000101001111", "00100110110111110100010000011010100110100100011101", "00110000000111011001100010000001100000111011101110", "10100010001000010101111101100010100110011101001110", "10010011011011110010101011010110011111100101001110", "01000111011000011101100101001010111000000011001111", "00010001110010011111001111101001111101100011011101", "10100011111101110011101011010001100001100011111111", "10100000110001001010100111011010100011000110111000", "11000100010010110010101000100110100110000000101010", "10000101010101011000000010000100111000110010011000", "11000101100001100011001100001100010001110011111100", "11001101100111001100000001010011101100111000100010", "00100110001000010111010101101001011000010000010100", "10111011111011001011000111111111111000101001000110", "01000100001000101111101000111011100010010001010110", "11000011100101000101100111100101010011101000010100", "01110111111111111100011011100100101100011000010001", "10001110011100011110000110011101011010111111000000", "00110000001101000111000000111111100100110001111001"};
    vector<string> b = {"10010110001110110110100111111000111111001101001110", "11011100110000110111001110110100111011110111011001", "00001000001001001101010010100111010010011111111101", "01111010010000010110001111010101101111110101110110", "11100110111001011010000001101011100111101010010011", "10011011011000010101110001101101001110000001010110", "10100011001010111110110100101000100100101111010000", "11011000110000001000000101100001001000111010100101", "10101110001101101111110000010000000000011100110011", "11011101101101010111101101100001110100011111001010", "00001011010000110010111001111001000111001000111101", "00101101000110000110011001110111110100111010000001", "10100001011001010110000110100000001001011000000001", "01001110101110000100000001010000001000110110001000", "01011000001010011110011100101101000101110010000100", "00011010000010100000101010100010111100010011111101", "01011110101010010011100010101001000010001101010100", "10110010101000011010101000000100010100111011110101", "11001111011111011100100001001110010110110111101010", "10001100111001001100010101101111110011001001110111", "00011011110011011110001011000100101111111001011011", "11001111100110001101101110111011111100001110011011", "10100011000101011000011011001100001010011010001110", "00010101101001111100011110001100110001110100101001", "11110001000001100111110001000010000000000101101011", "10101110111011010001010110110011010110101101111111", "00101011010100011111000010101101010111000011111101", "01010011011101110000010001011010111010011011111001", "11111011100101000000101100001011001011011110010010", "10010011101110011001110110110111001001101011011011", "01110111110011011000011000011011010100111010110010", "10011001001000001011101111100101011001011011100000", "10001111111000100110011101111110011111000100010011", "00011101110111101010000010011101011001100010110011", "00101100100100001101010100101001100000011010110011", "11111000100111100010011010110101000111111100110010", "10101110001101100000110000010110000010011100100000", "00011100000010001100010100101110011110011100000010", "00011111001110110101011000100101011100111001000101", "01111011101101001101010111011001011001111111010111", "00111010101010100111111101111011000111001101100101", "01111010011110011100110011110011101110001100000001", "01110010011000110011111110101100010011000111011111", "10011001110111101000101010010110100111101111101001", "00000100000100110100111000000000000111010110111011", "11111011110111010000010111000100011101101110101011", "01111100011010111010011000011010101100010111101001", "11001000000000000011100100011011010011100111101100", "10001110011100011110000110011101011010111111000000", "10001111110010111000111111000000011011001110000100"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> a = {"00101001110001001001011000000111000000110010110011", "11011100110000110111001110110100111011110111011001", "10110111110110110010101101011000101101100000000000", "11000101101111101001110000101010010000001010001011", "01011001000110100101111110010100011000010101101110", "00100100100111101010001110010010110001111110101011", "00011100110101000001001011010111011011010000101101", "01100111001111110111111010011110110111000101011000", "00010001110010010000001111101111111111100011001110", "01100010010010101000010010011110001011100000110111", "10110100101111001101000110000110111000110111000000", "10010010111001111001100110001000001011000101111100", "00011110100110101001111001011111110110100111111100", "11110001010001111011111110101111110111001001110101", "11100111110101100001100011010010111010001101111001", "10100101111101011111010101011101000011101100000000", "11100001010101101100011101010110111101110010101001", "00001101010111100101010111111011101011000100001000", "01110000100000100011011110110001101001001000010111", "00110011000110110011101010010000001100110110001010", "10100100001100100001110100111011010000000110100110", "01110000011001110010010001000100000011110001100110", "00011100111010100111100100110011110101100101110011", "10101010010110000011100001110011001110001011010100", "01001110111110011000001110111101111111111010010110", "00010001000100101110101001001100101001010010000010", "10010100101011100000111101010010101000111100000000", "11101100100010001111101110100101000101100100000100", "01000100011010111111010011110100110100100001101111", "00101100010001100110001001001000110110010100100110", "11001000001100100111100111100100101011000101001111", "00100110110111110100010000011010100110100100011101", "00110000000111011001100010000001100000111011101110", "10100010001000010101111101100010100110011101001110", "10010011011011110010101011010110011111100101001110", "01000111011000011101100101001010111000000011001111", "00010001110010011111001111101001111101100011011101", "10100011111101110011101011010001100001100011111111", "10100000110001001010100111011010100011000110111000", "11000100010010110010101000100110100110000000101010", "10000101010101011000000010000100111000110010011000", "11000101100001100011001100001100010001110011111100", "11001101100111001100000001010011101100111000100010", "00100110001000010111010101101001011000010000010100", "10111011111011001011000111111111111000101001000110", "01000100001000101111101000111011100010010001010110", "11000011100101000101100111100101010011101000010100", "01110111111111111100011011100100101100011000010001", "10001110011100011110000110011101011010111111000000", "00110000001101000111000000111101100100110001111001"};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> a = {"00101001110001001001011000000111000000110010110011", "11011100110000110111001110110100111011110111011001", "10110111110110110010101101011000101101100000000000", "11000101101111101001110000101010010000001010001011", "01011001000110100101111110010100011000010101101110", "00100100100111101010001110010010110001111110101011", "00011100110101000001001011010111011011010000101101", "01100111001111110111111010011110110111000101011000", "00010001110010010000001111101111111111100011001110", "01100010010010101000010010011110001011100000110111", "10110100101111001101000110000110111000110111000000", "10010010111001111001100110001000001011000101111100", "00011110100110101001111001011111110110100111111100", "11110001010001111011111110101111110111001001110101", "11100111110101100001100011010010111010001101111001", "10100101111101011111010101011101000011101100000000", "11100001010101101100011101010110111101110010101001", "00001101010111100101010111111011101011000100001000", "01110000100000100011011110110001101001001000010111", "00110011000110110011101010010000001100110110001010", "10100100001100100001110100111011010000000110100110", "01110000011001110010010001000100000011110001100110", "00011100111010100111100100110011110101100101110011", "10101010010110000011100001110011001110001011010100", "01001110111110011000001110111101111111111010010110", "00010001000100101110101001001100101001010010000010", "10010100101011100000111101010010101000111100000000", "11101100100010001111101110100101000101100100000100", "01000100011010111111010011110100110100100001101111", "00101100010001100110001001001000110110010100100110", "11001000001100100111100111100100101011000101001111", "00100110110111110100010000011010100110100100011101", "00110000000111011001100010000001100000111011101110", "10100010001000010101111101100010100110011101001110", "10010011011011110010101011010110011111100101001110", "01000111011000011101100101001010111000000011001111", "00010001110010011111001111101001111101100011011101", "10100011111101110011101011010001100001100011111111", "10100000110001001010100111011010100011000110111000", "11000100010010110010101000100110100110000000101010", "10000101010101011000000010000100111000110010011000", "11000101100001100011001100001100010001110011111100", "11001101100111001100000001010011101100111000100010", "00100110001000010111010101101001011000010000010100", "10111011111011001011000111111111111000101001000110", "01000100001000101111101000111011100010010001010110", "11000011100101000101100111100101010011101000010100", "01110111111111111100011011100100101100011000010001", "10001110011100011110000110011101011010111111000000", "10110000001101000111000000111111100100110001111001"};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> a = {"00101001110001001001011000000111000000110010110011", "11011100110000110111001110110100111011110111011001", "10110111110110110010101101011000101101100000000000", "11000101101111101001110000101010010000001010001011", "01011001000110100101111110010100011000010101101110", "00100100100111101010001110010010110001111110101011", "00011100110101000001001011010111011011010000101101", "01100111001111110111111010011110110111000101011000", "00010001110010010000001111101111111111100011001110", "01100010010010101000010010011110001011100000110111", "10110100101111001101000110000110111000110111000000", "10010010111001111001100110001000001011000101111100", "00011110100110101001111001011111110110100111111100", "11110001010001111011111110101111110111001001110101", "11100111110101100001100011010010111010001101111001", "10100101111101011111010101011101000011101100000000", "11100001010101101100011101010110111101110010101001", "00001101010111100101010111111011101011000100001000", "01110000100000100011011110110001101001001000010111", "00110011000110110011101010010000001100110110001010", "10100100001100100001110100111011010000000110100110", "01110000011001110010010001000100000011110001100110", "00011100111010100111100100110011110101100101110011", "10101010010110000011100001110011001110001011010100", "01001110111110011000001110111101111111111010010110", "00010001000100101110101001001100101001010010000010", "10010100101011100000111101010010101000111100000000", "11101100100010001111101110100101000101100100000100", "01000100011010111111010011110100110100100001101111", "00101100010001100110001001001000110110010100100110", "11001000001100100111100111100100101011000101001111", "00100110110111110100010000011010100110100100011101", "00110000000111011001100010000001100000111011101110", "10100010001000010101111101100010100110011101001110", "10010011011011110010101011010110011111100101001110", "01000111011000011101100101001010111000000011001111", "00010001110010011111001111101001111101100011011101", "10100011111101110011101011010001100001100011111111", "10100000110001001010100111011010100011000110111000", "11000100010010110010101000100110100110000000101010", "10000101010101011000000010000100111000110010011000", "11000101100001100011001100001100010001110011111100", "11001101100111001100000001010011101100111000100010", "00100110001000010111010101101001011000010000010100", "10111011111011001011000111111111111000101001000110", "01000100001000101111101000111011100010010001010110", "11000011100101000101100111100101010011101000010100", "01110111111111111100011011100100101100011000010001", "10001110011100011110000110011101011010111111000000", "00110000001101000111000000111111100100110001111000"};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> a = {"001", "001", "001"};
    vector<string> b = {"000", "000", "000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> a = {"001", "100", "100", "000", "011", "010", "100", "100", "010", "010", "010", "110", "101", "101", "000", "110", "000", "110"};
    vector<string> b = {"001", "100", "011", "000", "100", "010", "011", "100", "101", "101", "010", "001", "010", "010", "111", "110", "111", "001"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> a = {"1001", "0000", "0000", "1001"};
    vector<string> b = {"0000", "0000", "0000", "0000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> a = {"1110", "1110", "1110"};
    vector<string> b = {"1101", "1101", "1101"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> a = {"1"};
    vector<string> b = {"1"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> a = {"001", "000", "000"};
    vector<string> b = {"000", "000", "000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> a = {"1110", "1110", "1111"};
    vector<string> b = {"1110", "1110", "1110"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> a = {"0"};
    vector<string> b = {"0"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> a = {};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> a = {"111", "111", "111", "111", "111"};
    vector<string> b = {"110", "111", "111", "111", "111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> a = {"11", "11"};
    vector<string> b = {"00", "00"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> a = {"0111", "1010", "1001"};
    vector<string> b = {"1000", "1111", "0101"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> a = {"11", "11"};
    vector<string> b = {"11", "11"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> a = {"00", "00"};
    vector<string> b = {"00", "00"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> a = {};
    vector<string> b = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000111000000000000000000000000000000000", "00000000000000111000000000000000000000000000000000", "00000000000000001110000000000000000000000000000000", "00000000000000110110000000000000000000000000000000", "00000000000000110110000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000111", "00000000000000000000000000000000000000000000000111", "00000000000000000000000000000000000000000000000111"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> a = {"000111", "000111", "000111"};
    vector<string> b = {"000000", "000000", "000000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> a = {"11", "11", "11", "11"};
    vector<string> b = {"00", "00", "00", "00"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> a = {};
    vector<string> b = {};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> a = {"0", "0"};
    vector<string> b = {"0", "0"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> a = {"0000000000", "0001110001", "0010001111", "0001110000", "0000000001", "0000000000", "0001110001", "0010001111", "0001110000", "0000000001", "0000000000", "0001110001", "0010001111", "0001110000", "0000000001", "0000000000", "0001110001", "0010001111", "0001110000", "0000000001"};
    vector<string> b = {"1110000000", "1111110001", "1111010111", "0010101000", "0011011001", "1110000000", "1111110001", "1111010111", "0010101000", "0011011001", "1110000000", "1111110001", "1111010111", "0010101000", "0011011001", "1110000000", "1111110001", "1111010111", "0010101000", "0011011001"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> a = {"000000000011", "000000000011"};
    vector<string> b = {"000010000011", "000000000011"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> a = {"0000", "0000", "0000"};
    vector<string> b = {"1010", "1010", "1010"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> a = {"100", "000", "000"};
    vector<string> b = {"000", "000", "000"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> a = {"10", "01"};
    vector<string> b = {"10", "01"};
    MatrixTransforming* pObj = new MatrixTransforming();
    clock_t start = clock();
    int result = pObj->minPushes(a, b);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8547850&rd=9991&pm=6431
********************************************************************************
#define FR(i,a,b) for (int i = (a); i < (b); i++)
#define FOR(i,n) FR(i,0,n)
#define FORI(i,n) FOR(i,n.size())
#include <string>
#include <vector>
#define SZ size()
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <setjmp.h>
#include <regex.h>
#include <utility>
#define ll long long
#define ld long double
#define EPS 1e-9
using namespace std;
 
struct MatrixTransforming {
int minPushes(vector <string> a, vector <string> b) {
 int ans=0;
 FORI(i,a) FORI(j,a[i]) if (a[i][j] != b[i][j]) {
  if (i+2 >= a.SZ || j+2 >= a[i].SZ) return -1;
  FOR(k,3) FOR(l,3) a[i+k][j+l] = ((a[i+k][j+l] == '0') ? '1' : '0');
  ans++;
 }
 return ans;
}};
// Powered by ted

********************************************************************************
*******************************************************************************/