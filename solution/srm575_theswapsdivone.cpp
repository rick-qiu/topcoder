/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=12498
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TheSwapsDivOne {
public:
    double find(vector<string> sequence, int k);
};

double TheSwapsDivOne::find(vector<string> sequence, int k) {
    double ret;
    return ret;
}


int test0() {
    vector<string> sequence = {"4", "77"};
    int k = 1;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 10.0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> sequence = {"4", "77"};
    int k = 47;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 10.0;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> sequence = {"1", "1", "1", "1", "1", "1", "1"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3.0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> sequence = {"572685085149095989026478064633266980348504469", "19720257361", "9", "69"};
    int k = 7;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 98.3238536775161;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> sequence = {"1652032429911007", "547420218806349319256", "0163197091083813015782", "45886495561569867943", "71858041493356764841426836575808", "316625261873581203866991044993470248548647", "315167", "041479578798", "5813855100465408673907745961503719014103", "1339492822022683257344", "917074984523152384501095786", "9996138678622894935145757540553475217415796544", "478868905", "11873099891526193114937789648327683529116", "433347", "206504728324689215908815", "63706", "6", "8209877114319", "14853", "879031633374148493762638533329", "453659180159552453943568", "298893659564697923600054452", "54248943558227734556538762532351241553", "0897169365545393630469914685037394336558351624", "71440977", "99", "17893815059146271523024434632056482965116749", "845109", "659271053948657342659219311121775858685738483", "11114395317835840375202777013255835", "910681218357650846946", "62366447413", "690306575831679853", "71324059566096657933123793076021398685873936979", "570672685794269958", "1239437891746781633967520838878238", "8734595290108757695279433833304893784096290", "13355594072205852861049111757", "2582765453926897625323"};
    int k = 249874;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1499.7912317327769;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> sequence = {"91755028432946073020748442944", "714489892860739115499437928", "262735652524169157169", "48164092742010833819377218868785956505", "879555389999858228564460772892882226544970660", "94266729", "592571933425896779052684129736380108775", "349659742584387736922867279549690419935", "217754366245200475942984242847305990042126", "27813154", "5553962", "4585114900685", "99347009044775309553426566381994944447035", "07446250113561971496421744061358530500878958557", "406114865253514131169", "26292931414860188502982", "6263575491798201061269"};
    int k = 335301;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 741.1404255319151;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> sequence = {"004632377870864721939215510128479948897", "0174906632712337808533420145359", "375761604850969252822324968302162", "95392935920058096694090", "269086527420618377798114610845138263635338", "246505155072267516809445301859529422238266079", "0210454638080985372287378100463", "6784580431464263446", "101198301580904279380056791", "899015277952322299", "0863849969073061840314640475684546", "269208658993840333414480982900144433", "042017066104", "107849609064113008143757495", "374", "9314908637520094278", "74518892441160", "059366634236234", "28741598483134524", "058880055221950661", "904214434070816", "792096566232555367503985135", "388238905956012214254874", "2915666777481088", "26584445499320417503408618804627", "8959024955268926366744786817694362", "389513499051", "39374146632589148870498698810469114423512350066", "69624952", "170287598510849884062314397662795280724", "069461644534543262740591475197", "19542789876713982476452", "5229780539026165", "9183604807", "2596937810157055667046407617", "3810401554796469241002846333383277386715693113", "51346", "514549755228406740322255256", "6809071", "7092487694635", "643494188", "97247610229453778126", "1210912868463244816111547997", "48790315197967348873514311743682818204847587", "78405893154740236338914009056742813877034427", "5333272001092778662423064430313"};
    int k = 119321;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1691.9683655535998;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> sequence = {"462123717654081695", "5132046922683794996900674993", "27688925333034400560025639304935", "00696056937014", "144239598435709", "80298248981171630885499914114718154399242612422", "77815473295691194", "4229039150740041862614771600731802162787936", "203420571482553670666622405", "3955658109", "999105127727505", "3406652086799037051615491378519012573141", "6264502750371204357050622587732908481", "791400553", "112070760290959301", "197269532196350537303886137668", "6599529365305132897373031752304456944132311", "825534", "84005221085280434597084353659463"};
    int k = 3275;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 686.5093501120697;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> sequence = {"29367596099", "79", "2555035291091174328017324490159", "8752570531647", "15366", "35435285619633477188657", "012044528760580027637144", "7710192790346334577205575", "6855547943705919236443310083011132111970859", "0033564893567", "43729123722978785352940649623", "494604565572561680374314794972111", "06911244394519155259394124859520454557345139196", "9024371", "065192738336", "76399843676373836006722388728485255309418", "355011", "11435697586459582852251135763390670801396", "4308555011999980526471746699745903129", "057388383453923922016848076865", "8587070648375857677457", "019468573032582161353549580128270540", "96635413975074416", "23350023603772132", "3111908867238265728612022070205960892", "2648797175877297388985897569800", "141776567964", "738747257922952925554360881055303092075", "7136199183466452228297001628268076079322881", "88058331507359152250701110582429695987827201", "74169499928564383714986243057903", "980393533477798748243684853701947208367523", "16408966083831598379", "236260567730", "2862922150322582699958171946696016", "7447844856955492486547711257758380699240257"};
    int k = 854;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1462.7335126521937;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> sequence = {"1036289617", "9", "384291788", "96335541573832682", "4", "1145886696298818414409133853", "14003669829889666632945210664529577317996900453", "82693945549422703149770409756645099919935", "63848", "54920232068520940146620831532", "7972648441263043822510844454622945596963728168", "77924812773987462545137418685572685085149", "9598902647806463326698034850", "469219720257361086076072438401", "4608219002506398", "295887240155846949391897815", "313541402779220386738561", "449204598080091286340588122261239768475745", "004580988", "64297948069966", "38", "99634652276403970661097710570754719", "0900457768474418456", "702766459586239506910468", "966801", "7190", "83", "30584", "41406007382355862157884964760302924733292", "222545775097", "33815114706414507938", "982760962164611308051945360486494228129358", "69572722063648288572177822973844324122", "283406552987622181313437819833302", "480561611800320964348782093106451343386"};
    int k = 6491;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1209.7331644291628;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> sequence = {"838247705932267198570661460474752119466", "172891", "67863605462357189612108993057539297584", "714125177040828966", "4231065554403276916540488948", "18113238711437003882249855050342015581582", "522542486837916367956231067933396", "3685739565315296084722680"};
    int k = 6799;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 347.3538011695906;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> sequence = {"69278405853158124638120914", "8983658629366349642785931436685876574488", "274466367193455752", "6990", "17739", "257020151741933456820100642075456726450", "7592568494932531863458386777", "930788498559945648523559056064180263035992599", "46492690331652032", "2991100755474202188063493", "9256201", "319709108381301578204588649556156986794337185", "0414933567648414268365758087", "1662526", "8735812038669910449934", "02485486", "783151674041479", "78798", "5813855100465408673907745961503719014103", "1339492822022683257344", "917074984523152384501095786", "9996138678622894935145757540553475217415796544", "478868905", "11873099891526193114937789648327683529116", "433347", "206504728324689215908815", "63706", "6", "8209877114319", "14853"};
    int k = 620;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 978.4448380181036;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> sequence = {"90316333741484937626385333299453659180159552453", "435689", "988936595646979236000544528542", "89435582277345565", "8762532351241553408971693655"};
    int k = 1659;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 208.20312500001918;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> sequence = {"93630469914685", "3739", "33655835162497144", "97789981789381505914627", "52302443463205648296", "1167495845109765927105394865734265921", "31112177585868573848341111", "39531783584037520277701325583569106", "12183576508469465623664474137690306575", "3167985367132405956609665793312", "7930760", "13986858739369799570672685794269958112", "943789", "7467816339675208", "88782386873459529010875769527", "4338333048937840962909133", "5594072", "05852861049111757", "2582765453926897625323", "09917550284329460730207484429", "44714489892860739115", "9943792892627", "56525241691571695481640927", "2010833819", "7721886", "7859565054879555", "899998582285644", "0772892882226544970660894266729559", "5719334258967790526841", "973638010877503496", "974258438773692286727954969041993552177", "4366245200475942984242", "47305990042126427", "13154755539627458511", "9006850993", "7009044775309553426566", "8199494444703550744", "25011356197149642", "74406135853050087895855704061148652535141311696", "62", "29314148601885", "2982562635754917982010612692010046", "23778708647219392155101284799488973017490", "6"};
    int k = 7366;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1473.8396287936769;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> sequence = {"12337", "0853342", "145359537576160485096925282232496830216", "69", "39293592005809669409002690865", "7420618377798", "1461084513826363533892465051550722675168094453", "185952942", "238", "66079802104546380809853722873781004636", "784580431464263446210119830158090", "2793800567913899015277", "52322299708638499690730618403146404", "5684546926920865899", "840333414480982", "00144", "3340420170661045107849609064", "1300814375749543743931490863", "5200942786745188924411", "0805936", "63423623482874159848313452480588800552", "195066199042144340708162792096", "662325553675039851350388238905956012214254", "74029156", "67774810886265844454993204175034", "8", "188046270895902495526892636674478", "81769", "36203895134", "905183937414663258914887049", "69881046911442351235006626962495271702875985", "0849884062314397", "62795280724706946164453454326274059147519781", "542789876713982476452452", "97805390261658918360480782596937", "1015705", "667046407617838104015547", "6469241002846333383277386715693", "1", "2513463514549755228406740", "22255256568090", "1", "7092487694635"};
    int k = 2283;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1356.328204186212;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> sequence = {"34941882972476102294537781268121091", "8684632448", "6111547997548790315197967348873514311743682818", "0484758707", "405893154740236338914009056742813", "77034427053332720010927786624230644", "0313505517688308969954784", "88219718555583226452086761", "91", "52265631750", "54434", "30733282692684319", "930720134317905620727333632240584603", "39360337904054098599292", "3664599086955014286502607655130926070", "13563563", "89", "49530000524", "8195459497097815138361610959107", "6824488650737404953840162341592966544691"};
    int k = 9777;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 656.6177577125657;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> sequence = {"673109048460888361333296515215598192550533", "9500081822673715987383149112057995239334562", "1278219819968639727", "68", "769570748265697766855", "61340981864527595", "391318297723705165", "79874263516221213732750914137881573324379819", "854162550157062931278480300348540025895740851", "63188309407", "0991447111500599857033273558962671562", "16559749585181756269", "7120559", "55421497411697140019509682250450078288707594", "29952752154714390119408957446538813313635730", "800355260309773659", "172695048159084993251213815415842", "8", "839501208276872834068309110703288752", "7635", "190119646979666740111935079150960", "377", "82727775071553", "8858607518649", "367981765543790658705712520801205", "47224730975618986995275815", "550531628573", "825", "2357951471768502811786812879705599234458", "4931662374", "31871295073186067678143188054226", "5286", "506292342427153394750316", "992285196789221415937", "992656885252665609"};
    int k = 125;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1212.247260247146;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> sequence = {"713923863890517", "8818071503507751370880905240514633642886", "0", "576264814404", "613196331757229834515656202365178923924131"};
    int k = 2903;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 158.4969696969697;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> sequence = {"327572235098", "5981444810131", "5678699519345371656000740283198", "540262407801318002568"};
    int k = 56;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 110.09215386372018;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> sequence = {"89553895", "39106", "65411161862834", "55212430245767638914267"};
    int k = 5451;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 78.34666666666668;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> sequence = {"46212371765408169585132046922683794996900674993", "27688925333034400560025639304935300696056937014", "14423959843570928029824898117163088549991411471", "15439924261242257781547329569119494229039150740", "41862614771600731802162787936320342057148255367", "66662240583955658109899910512772750573406652086", "99037051615491378519012573141462645027503712043", "70506225877329084810791400553211207076029095930", "71972695321963505373038861376687659952936530513", "89737303175230445694413231148255347840052210852", "04345970843536594632322936759609997922555035291", "91174328017324490159787525705316475153661354352", "56196334771886577012044528760580027637144277101", "27903463345772055752685554794370591923644331008", "01113211197085920033564893567343729123722978785", "52940649623849460456557256168037431479497211100", "91124439451915525939412485952045455734513919619", "24371806519273833677639984367637383600672238872", "48525530941823550118114356975864595828522511357", "33906708013966430855501199998052647174669974590", "12930573883834539239220168480768657858707064837", "85767745780194685730325821613535495801282705408", "66354139750744167233500236037721323311190886723", "26572861202207020596089212648797175877297388985", "97569800614177656796477387472579229529255543608", "10553030920753713619918346645222829700162826807", "07932288128805833150735915225070111058242969598", "82720177416949992856438371498624305790329803935", "34777987482436848537019472083675239164089660838", "15983799236260567730128629221503225826999581719", "66960167744784485695549248654771125775838069924", "25730910362896174913842917884963355415738326821", "71145886696298818414409133853114003669829889666", "32945210664529577317996900453182693945549422703", "49770409756645099919935163848654920232068520940", "46620831532179726484412630438225108444546229455", "69637281682779248127739874625451374186855726850", "51490959890264780646332669803485044692197202573", "10860760724384017460821900250639852958872401558", "69493918978152313541402779220386738561344920459", "08009128634058812226123976847574500045809881642", "79480699660380996346522764039706610977105707547", "95090045776847441845627027664595862395069104686", "66801471902837305848414060073823558621578849647", "03029247332923222545775097833815114706414507938", "98276096216461130805194536048649422812935846957", "72206364828857217782297384432412272834065529876"};
    int k = 275;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3352.2818372553234;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> sequence = {"81313437819833302548056161180032096434878209310", "45134338628883824770593226719857066146047475211", "46671728916678636054623571896121089930575392975", "49714125177040828966542310655544032769165404889", "85181132387114370038822498550503420155815820522", "42486837916367956231067933396536857395653152960", "47226806916927840585315812463812091448983658629", "66349642785931436685876574488827446636719345575", "46990717739125702015174193345682010064207545672", "45057592568494932531863458386777493078849855994", "64852355905606418026303599259994649269033165203", "42991100755474202188063493192562016319709108381", "01578204588649556156986794337185804149335676484", "42683657580873166252618735812038669910449934702", "85486478315167404147957879855813855100465408673", "07745961503719014103013394928220226832573446917", "74984523152384501095786099961386786228949351457", "75405534752174157965448478868905511873099891526", "93114937789648327683529116843334722065047283246", "92159088157637067678209877114319314853787903163", "37414849376263853332994536591801595524539435689", "98893659564697923600054452854248943558227734556", "38762532351241553408971693655453936304699146850", "73943365583516249714409778998178938150591462715", "30244346320564829651167495845109765927105394865", "34265921931112177585868573848341111439531783584", "37520277701325583569106812183576508469465623664", "74137690306575831679853671324059566096657933123", "93076021398685873936979957067268579426995811239", "37891746781633967520838878238687345952901087576", "52794338333048937840962909133555940722058528610", "91117573258276545392689762532350991755028432946", "73020748442944471448989286073911549943792892627", "56525241691571695481640927420108338193772188687", "59565054879555389999858228564460772892882226544", "70660894266729559257193342589677905268412973638", "10877503496597425843877369228672795496904199355", "17754366245200475942984242847305990042126427813", "54755539627458511490068509934700904477530955342", "56638199494444703550744625011356197149642174406", "35853050087895855704061148652535141311696262929", "14148601885029825626357549179820106126920100463", "37787086472193921551012847994889730174906632712", "37808533420145359537576160485096925282232496830", "16269539293592005809669409002690865274206183777", "81146108451382636353389246505155072267516809445", "01859529422238266079802104546380809853722873781"};
    int k = 563;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3476.6851728427337;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> sequence = {"63667845804314642634462101198301580904279380056", "91389901527795232229970863849969073061840314640", "75684546926920865899384033341448098290014443340", "20170661045107849609064113008143757495437439314", "08637520094278674518892441160805936663423623482", "74159848313452480588800552219506619904214434070", "16279209656623255536750398513503882389059560122", "42548740291566677748108862658444549932041750340", "61880462708959024955268926366744786817694362038", "51349905183937414663258914887049869881046911442", "51235006626962495271702875985108498840623143976", "27952807247069461644534543262740591475197819542", "89876713982476452452297805390261658918360480782", "96937810157055667046407617838104015547964692410", "28463333832773867156931132513463514549755228406", "40322255256568090719709248769463526434941882972", "76102294537781268121091286846324481611154799754", "79031519796734887351431174368281820484758707840", "89315474023633891400905674281387703442705333272", "01092778662423064430313505517688308969954784188", "19718555583226452086761191252265631750354434130", "33282692684319293072013431790562072733363224058", "60343936033790405409859929243664599086955014286", "02607655130926070113563563389549530000524881954", "94970978151383616109591078682448865073740495384", "16234159296654469174867310904846088836133329651", "21559819255053399500081822673715987383149112057", "95239334562012782198199686397278686769570748265", "97766855561340981864527595639131829772370516537", "87426351622121373275091413788157332437981968541", "25501570629312784803003485400258957408517631883", "94073099144711150059985703327355896267156221655", "74958518175626957120559055421497411697140019509", "82250450078288707594629952752154714390119408957", "46538813313635730780035526030977365931726950481", "90849932512138154158423818395012082768728340683", "91107032887521763581901196469796667401119350791", "09608377082727775071553188586075186493367981765", "43790658705712520801205447224730975618986995275", "15855053162857388250235795147176850281178681287", "70559923445824931662374631871295073186067678143", "88054226452867506292342427153394750316699228519", "78922141593769926568852526656091277139238638905", "72881807150350775137088090524051463364288690257", "26481440436131963317572298345156562023651789239", "41310563275722350981598144481013185678699519345", "71656000740283198854026240780131800256880789553"};
    int k = 401;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3319.740276278519;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> sequence = {"73910676541116186283415521243024576763891426782", "81574902863259743062852337989711258026300441358", "56980434314959264237824707917275730722001257921", "28896651812838823775693754061225675049426890711", "70400381171271738368053760411583709264507147730", "65950601275734555743826072111016042724560122302", "71578517348232854212636808389076522063695353797", "09286755246569095094209431696964273146896259837", "13272066522648936221285001244272793385113450028", "80324980611842609600636779818314872047156667057", "50914954377587864979806100318545334906883882821", "44692054674422523370445992544023441689262718080", "55686966512907342104877742498979925147501171896", "29758229041469039005824938280999062586580568087", "59780873587422010878234607918247776467625821627", "25024171468783739053293475714384250508918498634", "32456005910609596856886245460270315408517894282", "20202414619962093504698274816474813125670641853", "38158394935387262701475240144168926764695120073", "23584006618666985158247598306803060886170157044", "99824342540342908897672928070877169509963952092", "63010792241821285689646937662179251694824646817", "57561815127520882048925167292663710457245441060", "86799543493724115453399475106131610999306268652", "56427189774621016356744686946174591854993079649", "28669231776522896161924880296684707531453755843", "81951377679663517323577238022344840617890102658", "99743424147543564832989068370950742812751741288", "23693648684944603659376193360893031997574654609", "19659534704463624668938163066783937814001851015", "86241602291125921484105931478801239790502665286", "32337647599624560769518384180095796431721684256", "06149111690869031594538398992531060056226393499", "53697059392100258115521222232226549994487552245", "63655989085860111440517436862444225231758929678", "53363161523125554668382047914130556976713505930", "87577636880858011675940099563462874731414662789", "90285734790456706212153723515500195891073091796", "00297540456577967305381356633195673538964632382", "70579280977090624926564586023477724619507740723", "89307332257115229532176310317125684971266743773", "99471697386571954879545104585187181178221956180", "81809629660832933482195033617038015271902315784", "75583769529515638627578421079950957574411880715", "06113633455437271843561033969642656436492022183", "74183268936770152176133040515406572775531673530", "00893320254759507197750118041790465516996912758"};
    int k = 40;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3367.6895292237045;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> sequence = {"68187039961248098458610044521194341681532390154", "74791808997682320379379673720362635546472431789", "37736270441978263574152590390531009650133011882", "46048126895072547808811585565925742950429934183", "89017999057283422723226780970553938944309271344", "96619343703733392282161084770663204281840914261", "58204513193471619762763253709442456933258578079", "47830735285543259545420294913010340193759253534", "62227444201962300882803629956082986867815310993", "73269094999818600109958940368913414521152238690", "93456022521712185267319992359943406030460151499", "32881871279982881462250799945953494206583754922", "69203983665488937909533286584967346962623833785", "62458773527151010027362281778736708476756595244", "97022781511037130702821859525244810416850438269", "33431792289825847405682490143458424545537375598", "82813784851143525682521743792283156007639155371", "61482050506694424142940168046859372959388042698", "76676841902664348809017161877423602777246521931", "78287019354340091940034415272759230220108480338", "65227887686670373660591612666182928962479680645", "44058413852718016601116887237710170936115145080", "53240306592363920540253466445364458856610022743", "38083110566083823083464353802079048524910562928", "60633188050135345785701117654449338421205045845", "65600139600591641786006922669071322659569204476", "88033681174605538249201263007427176527200125755", "57011051554562218505512670654494270029356823976", "10826209080872111282773078068146208439477144493", "08256412856218625189296261031338170918711407282", "89857066988700902184257748811565504026870865589", "92409376910807246296794937668995047564984142128", "19578541898437325913743994073767651332488425401", "41702357466181031896604818611433905435505380566", "62123741030627370734881683882806515981473166972", "73715123786757972155983268834088009529816643897", "50966836328336405690584237685818005097150366874", "29948460050868569535891778283925773775271482717", "29797870660782264455654902696937163286585127738", "16381229990972562210333527220701999296282906209", "59574391328698856179656018447735661112502083204", "72957909400723775473421079277508641602259909905", "23167179476443817114504001848816331602373266126", "89596386722455168435961606212242361539610685293", "52112132370513240898860537659031097215318187296", "59345284084842985392623314965861017307429632997", "46339459609824043015176753914019181125587571452"};
    int k = 604;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3274.6826282405914;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> sequence = {"96680905533497857053908315978731327248127463787", "18807592520067649267666258731068577651601278681", "77354575576873727721963139014401736685039150718", "50953683917184957471627832897475366299323086492", "30812864343950829114996556924530957805337222553", "73893699970562295948298335585741949514063738481", "72358338914170751206397818628908728700865819761", "77461941129389383336683358887563751772917725866", "19462949715839171901944073726093567927365141768", "90961510120043205449246058117810764511875677673", "95186437586012875375129751850881532667293732717", "31681680753628531837257433819120105231527968256", "92076443181534101289172338536752357440597224720", "69191773946748870542032651395511234814341118203", "82792598351771062278948897624126000504037482123", "86879931121143192458445196567263093779255829086", "85448720334715594748209039985098455133789573258", "60500288570894804628926578828452244983353213779", "68109819143442232179270410839989656775443869671", "67840056155074162535351033530160849082035124326", "80009323714606748061299774971573463074931654246", "89950742142277598715146058290173418640101196768", "23479996139109468590002777833870285237011920829", "44250113309311672606949318700285465889083886353", "67915642908908520382863673743024278595783955472", "25352829978798702256194577442799688961155537572", "82049418341242438610856890887137691712441029467", "41008470663472868541537967748126051740018791745", "66723791654843796401087549295985264610846433240", "62506328625877904259101624076610696267922026128", "21491143251025648719606541135291879635178342215", "24434079898392050463582246752461689663460454373", "66557096084382584742415680045968234677454058432", "87190409271576776758753543224353224906980949700", "88899860695522498458018200761178841934760669682", "27144599428379282584766344906394670348694935725", "09943157052647852193269681889441446939486977843", "60866786607295984217903840696880287047198443978", "63825001827488510549262961993891239011710984438", "41764258810236496003978447314930642029084116333", "44553857888982868417897122277164898874216298867", "21650667643150155758599627470909997660166366124", "92817380074709321242261449543178703110554494466", "92574161848313619060782968800077154705390611929", "37549330611725891774822243847648156547082381397", "30425010651862961092249588121066121191816481094", "94248625602652337361991540310993773147506813750"};
    int k = 95;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3405.683866777557;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> sequence = {"52746229248404390783224989913614403897435246909", "34681587361686121131094041416172822623084418131", "69353484380529332160544437510531185048652624361", "37472269253336978234176977468418400931017876815", "93938728238551387026894048923536251734441643653", "29847866155422993272020524087055392304830373781", "87925125394668582027774758112774755163878981133", "34046242487055584059582694610373032458441754249", "18182022000654377365273905713417217891117128683", "66253115145343187338891191851794964218142156357", "24915272200143932328483633384459509764161044967", "31897355029790130118193525866711446365337899651", "13764397732633123904925045969952085178942601629", "07266616535842537851007230695853342973398295729", "09921137238689510247811592914956777220517588997", "11469433895699748671189844290296834284723116227", "32132314532314135024331888118053753853918326059", "06434179903995326978003998461550792378776376447", "52917698086540326582643417961018401925127149583", "76409794401067571390173765624111828529551653155", "66924419382231303983307701170236185952744047049", "69602990315034126711471437675835784235744214053", "77123792234823716801401934731767081680735004316", "97231093875168463036305746030442670861128014122", "89795716798512233044931058782789339147968166436", "00278653677399294850781778665489736712951573046", "14546435065728268218473820203084850933165597950", "14143992564049455969891809350581079760976565772", "44469099509034877159349131294462780009956850628", "24342579082256266743191879319920343679303002818", "71014632847525474772421865611743846032179012088", "89515035958100665846053963907020309907918046198", "87457132175325606636557890846104954144322873138", "17704470818916618262701950720603039350757547024", "31620735617652247457413328893108614179709919616", "48581318704881627861643266799509559004920124928", "26461830761226452955315959054447932649436176964", "70310149420997422168192953936524067808465380270", "98878066301711459710926045805065682778686458266", "05152181764744291960234517965163381311250421192", "49281321897147862470400677806340102726049455588", "31385280474476818863986422158461201301431827044", "99440381353633031079932104833188672234676990832", "65500647534247465267248496797662353472664522344", "44631100615920898834692456858403150663831392134", "18111541420143845168704380700386473728433106504", "60058882185712483914968269066040528579280513004"};
    int k = 510;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3268.267676387547;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> sequence = {"96498856491783058805875154174190517569802947819", "86346324520546897502233541742048430280309956825", "90724063644822112957884137480128920348526691098", "80230817105749707558614883414152483047683887482", "79244133611652880668873899143217167180260284941", "81236469392099845621206844797547417126917835333", "15386197636115582204434618609745938461250138148", "80526752531892515017643402223459318568016367502", "66092448985711699171081783573151039027175381531", "36866988622297018764896773507042743525784410167", "40398196766634373149600503071608822142407259158", "75960055491353332436221151217952984401440806956", "89848383519456487679811922865222871587587822945", "99016805659310384845208850571801171200384521710", "86148433530633365046650244563559614887257910118", "76376591046692044997091459057431752146274553327", "26894600109554005590263467433769267442913800757", "32668420069093112381096379509545169709534268922", "69374336154572319967132763159612840696013459566", "97941400854957252668721390089914938498360438971", "29915926573039099679512506899948438137147565501", "92617799477338346092520916595228771812286542924", "46447633304215381362341669587718051991265354916", "14979541464935042721799813259695962555770673183", "46965747389356267974384083801001080234111860155", "55431674637651380557360271727923761517230009192", "67095998751378635264397668593879491053857849963", "13565024494272056844189978349446794710778910959", "26335006154353571613772548499184018113749335110", "56043132421170770570774193025414991232484744124", "46481439743638831701369903903332009170025809159", "70995883868575600528199271737548142877900659565", "29505367778676921596354001202203860538761658026", "53091275051821506857521834016175712552418081812", "03649705757923827854577644908551297275935904243", "10005346618026632025784098982427117370718915823", "78139458686101310929506515212307974459010955650", "40985334705281599974775187624292446493485680608", "94677504845002050539781351978656103732148827899", "41065041154105077546980565796700881457107858819", "79703951696402760607532994340232112357486454448", "61711035714160463473723462416835498436429755495", "70021287457463240238957032084547793017556706095", "02217927505600903587758803538805875130339545664", "58719414024762504540520419310739322094296452850", "26109276580809217511737345248391424397835416267", "73473988055566678375373773056808321260728429803"};
    int k = 295;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3321.9673783446306;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> sequence = {"88060873194331768224636014612085948460922683497", "47215281840119262523513856645079770384815566058", "95276931694646766668394047089241844852311464717", "36246166586522655660823960050053298910214849156", "03035718772558775503046791006320330329502100653", "06023344018090294804185790261112582001641407028", "57462239288184118708742120239568452595507941509", "95658441998809625421603629206133284351029946402", "82807897308011349466012666297485398647954421409", "41427641994723842901155019855251590788456367532", "52054432896047176067194954206001280010359220579", "94662528660691835980431324050014658214007347474", "27077972996594515087826149217862984502302926859", "28231905122200234449349390861976154821480090790", "97468755487340740100726451992945056417301937183", "98015527035572026847465645904139868581895254664", "54455437741817985764744088169967874221954916221", "65020044537723299988596611173541340715998179767", "44436260245525058629099732166218988714863836166", "31449478487695730544030525564804470648769771837", "34627767375597631082995167117094464788646279634", "40236951927262307929930696741665932910566412935", "01600361177256208140003651178771988870096515694", "32643397661390922003220696337505882323957611281", "73815508683222253709185047925331678483839538766", "81824830759628555048906169790768782873366037501", "80016680523577036689877578992310158153488618426", "57453433697037558525214597189200608246707352063", "74101685491929629032397886573855807860867477538", "91370439309369509151276644548087275574996916111", "43953989975098647234639619562435187848652616890", "08521990043958114294726670399327157520395813215", "59314782631746250315767129545770875977621354398", "30506330759484599692460526968168881679546811969", "65141447747914295138227352332532991943020351000", "25337431217473720897128859569307185503547752023", "56540283083609408216355290190613235819475419762", "75366637491359763917854025332607695996115733631", "24377842313817499895451404581897503662690890298", "44305592767687598734592574951468779466766995795", "55752302611148870799989555734674425194685930134", "14974119045676957891482360502902477633187654213", "65945905709972241110843847277997919227426743224", "22317337734780383659188859843749705999370804901", "44992047208625624556269418206917753053853308546", "99547630258933198936072663232607287523393749262", "50557298146979797859738508625666443346306000427"};
    int k = 77;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3406.278465412515;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> sequence = {"32408430660909995815399748903079129882276711276", "12231963616713601207655189624056535234582573573", "77572762429262415580586486807145518408308449657", "36539557645696515454826949398908188413594137908", "54296399678404323178120287033594775323886734006", "53213032823493051706023988272995701775814686965", "38520889867823487242573181519848580724904148001", "33909446292513307535454285590063992974520898972", "59624191806307311359934544201096321408452096832", "94261177233992867265409427808692867894804587331", "61960108835364676731981420567395296663176661465", "29091701082412868259664924322548689671502857381", "88254270212081966440740203093525291083604533604", "65799899451893338306853348258695272570098889122", "82358423483063068834319026393812066166942382051", "06483962430471494458032269536225499314772778557", "21806973200944722743980588673028679348470256652", "82369536049392728885668621928379028937620504944", "68940358250588270133763747949975456009670335621", "41027489468553260331043848282922845499986499745", "40236008643841370465758863083201865660350703840", "45793451473457770708692747786070674698838081196", "45558936204489284356319668597437666362268899057", "62233986812898838872427969818821489714971374379", "09436185137026360368584352879322030143185448287", "61967370785398798650204674370563822195897046166", "60802859734369750299947595587972233549071938820", "85005464350143604701155412603858077864583074605", "66369206147337630607616996840803842058379109515", "44974397533505724057376991307886498664485963870", "87235952926212536934885858524813253290225899930", "26234181506042634626329573833390247649819743225", "42137783739034220120263499778968434779383588963", "41196044328447378916562150751187642345991836204", "86403855146317740672674593456096265372423350766", "87466014599907022967919057259471293188621820071", "09787503905979854761471792728062086854799060573", "06346363938504340235346473709282424664521711676", "53253138550132799113422674466157735235893039926", "77936353765084901803723530869114748627213963662", "18313286931855467452845419110971536651729345143", "57072867956649095598994552131463515568997215867", "78075411982255167464436218816862189930203136970", "98162772539625133364719253257057534500479706858", "93507389585596249195601552512852576112135208715", "92206506320324283279180013145963747523721196261", "96825106397178997505626391282989179051317829382"};
    int k = 271;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3447.155443637532;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> sequence = {"46212371765408169585132046922683794996900674993", "27688925333034400560025639304935300696056937014", "14423959843570928029824898117163088549991411471", "15439924261242257781547329569119494229039150740", "41862614771600731802162787936320342057148255367", "66662240583955658109899910512772750573406652086", "99037051615491378519012573141462645027503712043", "70506225877329084810791400553211207076029095930", "71972695321963505373038861376687659952936530513", "89737303175230445694413231148255347840052210852", "04345970843536594632322936759609997922555035291", "91174328017324490159787525705316475153661354352", "56196334771886577012044528760580027637144277101", "27903463345772055752685554794370591923644331008", "01113211197085920033564893567343729123722978785", "52940649623849460456557256168037431479497211100", "91124439451915525939412485952045455734513919619", "24371806519273833677639984367637383600672238872", "48525530941823550118114356975864595828522511357", "33906708013966430855501199998052647174669974590", "12930573883834539239220168480768657858707064837", "85767745780194685730325821613535495801282705408", "66354139750744167233500236037721323311190886723", "26572861202207020596089212648797175877297388985", "97569800614177656796477387472579229529255543608", "10553030920753713619918346645222829700162826807", "07932288128805833150735915225070111058242969598", "82720177416949992856438371498624305790329803935", "34777987482436848537019472083675239164089660838", "15983799236260567730128629221503225826999581719", "66960167744784485695549248654771125775838069924", "25730910362896174913842917884963355415738326821", "71145886696298818414409133853114003669829889666", "32945210664529577317996900453182693945549422703", "49770409756645099919935163848654920232068520940", "46620831532179726484412630438225108444546229455", "69637281682779248127739874625451374186855726850", "51490959890264780646332669803485044692197202573", "10860760724384017460821900250639852958872401558", "69493918978152313541402779220386738561344920459", "08009128634058812226123976847574500045809881642", "79480699660380996346522764039706610977105707547", "95090045776847441845627027664595862395069104686", "66801471902837305848414060073823558621578849647", "03029247332923222545775097833815114706414507938", "98276096216461130805194536048649422812935846957", "72206364828857217782297384432412272834065529876"};
    int k = 833067;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3335.350384789501;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> sequence = {"81313437819833302548056161180032096434878209310", "45134338628883824770593226719857066146047475211", "46671728916678636054623571896121089930575392975", "49714125177040828966542310655544032769165404889", "85181132387114370038822498550503420155815820522", "42486837916367956231067933396536857395653152960", "47226806916927840585315812463812091448983658629", "66349642785931436685876574488827446636719345575", "46990717739125702015174193345682010064207545672", "45057592568494932531863458386777493078849855994", "64852355905606418026303599259994649269033165203", "42991100755474202188063493192562016319709108381", "01578204588649556156986794337185804149335676484", "42683657580873166252618735812038669910449934702", "85486478315167404147957879855813855100465408673", "07745961503719014103013394928220226832573446917", "74984523152384501095786099961386786228949351457", "75405534752174157965448478868905511873099891526", "93114937789648327683529116843334722065047283246", "92159088157637067678209877114319314853787903163", "37414849376263853332994536591801595524539435689", "98893659564697923600054452854248943558227734556", "38762532351241553408971693655453936304699146850", "73943365583516249714409778998178938150591462715", "30244346320564829651167495845109765927105394865", "34265921931112177585868573848341111439531783584", "37520277701325583569106812183576508469465623664", "74137690306575831679853671324059566096657933123", "93076021398685873936979957067268579426995811239", "37891746781633967520838878238687345952901087576", "52794338333048937840962909133555940722058528610", "91117573258276545392689762532350991755028432946", "73020748442944471448989286073911549943792892627", "56525241691571695481640927420108338193772188687", "59565054879555389999858228564460772892882226544", "70660894266729559257193342589677905268412973638", "10877503496597425843877369228672795496904199355", "17754366245200475942984242847305990042126427813", "54755539627458511490068509934700904477530955342", "56638199494444703550744625011356197149642174406", "35853050087895855704061148652535141311696262929", "14148601885029825626357549179820106126920100463", "37787086472193921551012847994889730174906632712", "37808533420145359537576160485096925282232496830", "16269539293592005809669409002690865274206183777", "81146108451382636353389246505155072267516809445", "01859529422238266079802104546380809853722873781"};
    int k = 196301;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3444.44907197827;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> sequence = {"63667845804314642634462101198301580904279380056", "91389901527795232229970863849969073061840314640", "75684546926920865899384033341448098290014443340", "20170661045107849609064113008143757495437439314", "08637520094278674518892441160805936663423623482", "74159848313452480588800552219506619904214434070", "16279209656623255536750398513503882389059560122", "42548740291566677748108862658444549932041750340", "61880462708959024955268926366744786817694362038", "51349905183937414663258914887049869881046911442", "51235006626962495271702875985108498840623143976", "27952807247069461644534543262740591475197819542", "89876713982476452452297805390261658918360480782", "96937810157055667046407617838104015547964692410", "28463333832773867156931132513463514549755228406", "40322255256568090719709248769463526434941882972", "76102294537781268121091286846324481611154799754", "79031519796734887351431174368281820484758707840", "89315474023633891400905674281387703442705333272", "01092778662423064430313505517688308969954784188", "19718555583226452086761191252265631750354434130", "33282692684319293072013431790562072733363224058", "60343936033790405409859929243664599086955014286", "02607655130926070113563563389549530000524881954", "94970978151383616109591078682448865073740495384", "16234159296654469174867310904846088836133329651", "21559819255053399500081822673715987383149112057", "95239334562012782198199686397278686769570748265", "97766855561340981864527595639131829772370516537", "87426351622121373275091413788157332437981968541", "25501570629312784803003485400258957408517631883", "94073099144711150059985703327355896267156221655", "74958518175626957120559055421497411697140019509", "82250450078288707594629952752154714390119408957", "46538813313635730780035526030977365931726950481", "90849932512138154158423818395012082768728340683", "91107032887521763581901196469796667401119350791", "09608377082727775071553188586075186493367981765", "43790658705712520801205447224730975618986995275", "15855053162857388250235795147176850281178681287", "70559923445824931662374631871295073186067678143", "88054226452867506292342427153394750316699228519", "78922141593769926568852526656091277139238638905", "72881807150350775137088090524051463364288690257", "26481440436131963317572298345156562023651789239", "41310563275722350981598144481013185678699519345", "71656000740283198854026240780131800256880789553"};
    int k = 765090;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3311.662290629243;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> sequence = {"73910676541116186283415521243024576763891426782", "81574902863259743062852337989711258026300441358", "56980434314959264237824707917275730722001257921", "28896651812838823775693754061225675049426890711", "70400381171271738368053760411583709264507147730", "65950601275734555743826072111016042724560122302", "71578517348232854212636808389076522063695353797", "09286755246569095094209431696964273146896259837", "13272066522648936221285001244272793385113450028", "80324980611842609600636779818314872047156667057", "50914954377587864979806100318545334906883882821", "44692054674422523370445992544023441689262718080", "55686966512907342104877742498979925147501171896", "29758229041469039005824938280999062586580568087", "59780873587422010878234607918247776467625821627", "25024171468783739053293475714384250508918498634", "32456005910609596856886245460270315408517894282", "20202414619962093504698274816474813125670641853", "38158394935387262701475240144168926764695120073", "23584006618666985158247598306803060886170157044", "99824342540342908897672928070877169509963952092", "63010792241821285689646937662179251694824646817", "57561815127520882048925167292663710457245441060", "86799543493724115453399475106131610999306268652", "56427189774621016356744686946174591854993079649", "28669231776522896161924880296684707531453755843", "81951377679663517323577238022344840617890102658", "99743424147543564832989068370950742812751741288", "23693648684944603659376193360893031997574654609", "19659534704463624668938163066783937814001851015", "86241602291125921484105931478801239790502665286", "32337647599624560769518384180095796431721684256", "06149111690869031594538398992531060056226393499", "53697059392100258115521222232226549994487552245", "63655989085860111440517436862444225231758929678", "53363161523125554668382047914130556976713505930", "87577636880858011675940099563462874731414662789", "90285734790456706212153723515500195891073091796", "00297540456577967305381356633195673538964632382", "70579280977090624926564586023477724619507740723", "89307332257115229532176310317125684971266743773", "99471697386571954879545104585187181178221956180", "81809629660832933482195033617038015271902315784", "75583769529515638627578421079950957574411880715", "06113633455437271843561033969642656436492022183", "74183268936770152176133040515406572775531673530", "00893320254759507197750118041790465516996912758"};
    int k = 621852;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3332.3476686283416;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> sequence = {"68187039961248098458610044521194341681532390154", "74791808997682320379379673720362635546472431789", "37736270441978263574152590390531009650133011882", "46048126895072547808811585565925742950429934183", "89017999057283422723226780970553938944309271344", "96619343703733392282161084770663204281840914261", "58204513193471619762763253709442456933258578079", "47830735285543259545420294913010340193759253534", "62227444201962300882803629956082986867815310993", "73269094999818600109958940368913414521152238690", "93456022521712185267319992359943406030460151499", "32881871279982881462250799945953494206583754922", "69203983665488937909533286584967346962623833785", "62458773527151010027362281778736708476756595244", "97022781511037130702821859525244810416850438269", "33431792289825847405682490143458424545537375598", "82813784851143525682521743792283156007639155371", "61482050506694424142940168046859372959388042698", "76676841902664348809017161877423602777246521931", "78287019354340091940034415272759230220108480338", "65227887686670373660591612666182928962479680645", "44058413852718016601116887237710170936115145080", "53240306592363920540253466445364458856610022743", "38083110566083823083464353802079048524910562928", "60633188050135345785701117654449338421205045845", "65600139600591641786006922669071322659569204476", "88033681174605538249201263007427176527200125755", "57011051554562218505512670654494270029356823976", "10826209080872111282773078068146208439477144493", "08256412856218625189296261031338170918711407282", "89857066988700902184257748811565504026870865589", "92409376910807246296794937668995047564984142128", "19578541898437325913743994073767651332488425401", "41702357466181031896604818611433905435505380566", "62123741030627370734881683882806515981473166972", "73715123786757972155983268834088009529816643897", "50966836328336405690584237685818005097150366874", "29948460050868569535891778283925773775271482717", "29797870660782264455654902696937163286585127738", "16381229990972562210333527220701999296282906209", "59574391328698856179656018447735661112502083204", "72957909400723775473421079277508641602259909905", "23167179476443817114504001848816331602373266126", "89596386722455168435961606212242361539610685293", "52112132370513240898860537659031097215318187296", "59345284084842985392623314965861017307429632997", "46339459609824043015176753914019181125587571452"};
    int k = 537970;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3283.3033046627374;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> sequence = {"46212371765408169585132046922683794996900674993", "27688925333034400560025639304935300696056937014", "14423959843570928029824898117163088549991411471", "15439924261242257781547329569119494229039150740", "41862614771600731802162787936320342057148255367", "66662240583955658109899910512772750573406652086", "99037051615491378519012573141462645027503712043", "70506225877329084810791400553211207076029095930", "71972695321963505373038861376687659952936530513", "89737303175230445694413231148255347840052210852", "04345970843536594632322936759609997922555035291", "91174328017324490159787525705316475153661354352", "56196334771886577012044528760580027637144277101", "27903463345772055752685554794370591923644331008", "01113211197085920033564893567343729123722978785", "52940649623849460456557256168037431479497211100", "91124439451915525939412485952045455734513919619", "24371806519273833677639984367637383600672238872", "48525530941823550118114356975864595828522511357", "33906708013966430855501199998052647174669974590", "12930573883834539239220168480768657858707064837", "85767745780194685730325821613535495801282705408", "66354139750744167233500236037721323311190886723", "26572861202207020596089212648797175877297388985", "97569800614177656796477387472579229529255543608", "10553030920753713619918346645222829700162826807", "07932288128805833150735915225070111058242969598", "82720177416949992856438371498624305790329803935", "34777987482436848537019472083675239164089660838", "15983799236260567730128629221503225826999581719", "66960167744784485695549248654771125775838069924", "25730910362896174913842917884963355415738326821", "71145886696298818414409133853114003669829889666", "32945210664529577317996900453182693945549422703", "49770409756645099919935163848654920232068520940", "46620831532179726484412630438225108444546229455", "69637281682779248127739874625451374186855726850", "51490959890264780646332669803485044692197202573", "10860760724384017460821900250639852958872401558", "69493918978152313541402779220386738561344920459", "08009128634058812226123976847574500045809881642", "79480699660380996346522764039706610977105707547", "95090045776847441845627027664595862395069104686", "66801471902837305848414060073823558621578849647", "03029247332923222545775097833815114706414507938", "98276096216461130805194536048649422812935846957", "72206364828857217782297384432412272834065529876"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3335.350384789501;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 5159.0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> sequence = {"44676775547466745747556644744665554556566", "565575674647475554564445666454777465777464", "64765774546544477554655567646676664545557456", "45657756756756574755466454446577457475657475574", "4447455574746447446454557464775644544567776764", "4667556445574564644444676577767476767577475", "576754555444456664555655475475657574555674757", "67644667665767756647756544667475547666656757", "447574774454766676577765557564755457677457", "767646757644545755657675655546555776757767", "44765647767554467754764665465447666656555666", "7545744745447765554675577665556756554555767646", "5544476557767747767574675575645556754476774574", "7764475767644674474676466567556665754776574746", "7477744557564675745767547575456667554667457556", "577744554667776645776574756774554457674775", "5446676454656446747774565646556554774756557444", "75646574775755657756746475564456755747555754574", "6575464775475657457455566545657567644674456456", "46767554765667774576576774775444575644766775", "55477766564657764474655747555754474667776", "657545765565545576656545754556665664465444574", "6565444455565545567746556467556567447677777", "574454647454665447745777765645654755444764", "55657455577546647476667564476664476465544476", "466457575765547756454545774764465475745477", "4577456567774655654577656646545576547667555", "745577674664764666576654466646546575446656", "465477576777577665474575676644765574566544", "7765674555467665655545466476577654544577777", "77756764445646457765747644747747576444564", "676775747555676446767774544467445547445464557", "45755666764545544746467455547664674557565577676", "477666457765745464745547554647754667477754755", "6766665655545666654674656656447557477776647667", "65647664656565674446747757557756566655544455", "45767464747765554467776447677777757545666", "5676447466456674476446465557475754446467645465", "447744644566665677747657665446777464567755", "5664545575474647754665447745455567666474646", "7546474454656464767554465774764467665667644556", "666776645465747475645464777464767575457455", "5755676447554647445765675647644754464455446", "64744746447455744477747446476656674465754", "645546456675476476454667574665675756776776", "757474445754465467645665465464575464557665744", "44566667477546677747444454444477447776467756465"};
    int k = 557;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3787.6662334200705;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> sequence = {"6656654455545476467475554574774575767444565655", "447645667467464577446755477666664544665477766", "75767466656666645767554665556665467465665664556", "674467675774576754775445644767477446744564744", "44655764655565764464474465545574447556576", "45644674754555666757447566544544564657574", "474766777477777475544577654755764464676456", "756475566454747565466665665567774745576754", "5444665477456744457565564454656466665775474", "55667544557757477445577567555656646746664677656", "64674555767464567447764656747664556476766676", "5756764474567544664456464767557455756647567", "5757565766657574555547664476666465747456445", "777545666767567776674747647776756566656575", "6766654557567664476464567775477576445465655", "47645646775546755656666544665657774566676", "5574756654754757446654466575455674455457776566", "5675756566447444456755446557646564567774766544", "575464777654666764447675774546474777567745745", "45774666544465756774756574577545654547757676", "44664467457764457547476454577654674547774", "477747766546664747557677557465554776574755565", "44456644567755675477675564775574775767446", "474455457746457767464454674456644767556467", "54774656744674757765575766755677477675776544455", "466765755677675657544555574677745744765647", "457746675547666674454454446747754447776754", "54766576575645557646775657657455776744475", "464565775455455455746657546457765545565745547", "5646777454444546746564667677545677665545565747", "457566677744657675555747777456465756467677774", "755774754465776645774554576754574645474557", "5646676456654666565556545667776556774576577446", "55464564575575457754544475564676775547777", "74476645776445574754776754555645454775477", "667645465666576755454546557677675655657744", "7756447667455775555445646547446764575577574744", "676575646756677677455575744645674645544476", "46476665746454766667577776756777445646575676", "46745555765746766654746476457655775474466747774", "4546577557657756766645646667544746466467645764", "46546665475574555777447674575474646547576564744", "77476767756656674757654644545556565465775", "74755567444474464555645644466477475564445"};
    int k = 383;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3542.5544569534864;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> sequence = {"476757547755576474567574744645475545665446555", "47775644546765574546647475547666654555547575454", "677466457767547464547767556446576465477576", "5574566445477567446674674676476467557655776", "454676676476464745556544445677774777547466", "554647776774546676756775446757646765557755754", "466654547454664546544544746675556775544474474", "764566465646745446654555556556456447756445455", "745664547577454467554467467745475565664656666", "776645447665666454555464575676446744766766457", "6646566467677747655647444555666565775655475", "755765444777444764754765764746655644665766", "56656676666547574647554766645467647666754666", "77644546556746566746455766454555565565765555", "7464777466566746545566766475666457544454676", "54464545556445776544447444645564555466555444", "44546544766756674764454777747545747775454467", "76577647667445467446777446755467646446766467", "577464755674664744444656677564677566674454", "764746457456546454777567767767575476665474", "54445467465647466557464557657466444766455675546", "57745764654666665765776447754645667447445666574", "67466544575455555475566545476775766674656656", "554457746454745567446445665767754567754756", "54646674554745666775657644544744446457554567", "544557455555655564775676777566466476474645", "67456465477576766474744554445476744675647", "76447455574746476547546446476666767775657577", "4576557577745746455754555545444456666645567476", "67475556766474776574645454764477657656447655756", "46454765544666656666745575675754665467457", "65467646755745575474644744667675776546476", "77767564547567556664766665556754764754775745464", "477576764645646656755447757646566765754566546", "775446555476464564667657576564474775545747567", "477546447466455547747747565557476547477774566", "6444465655564677566454674557654474445574665576", "44466446456557767655765755477475475775546", "6764667757754574556775647777745777654665654475", "57546475747446656755474446767554445554554674746", "74757565577744555655655657774766655764656", "5754554556555445557746775655667474675477546", "5554546467665647446456577646755455465656477", "755447575766555657675675556746455766654575547", "67745774445577465756776656554576775464777456", "6476674656444547774465556774556774774557646775", "6477667575767755474447576447657556557756455"};
    int k = 456;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3772.0945750778915;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> sequence = {"46212371765408169585132046922683794996900", "749937276889253330344005600256393049353006", "60569370148144239598435709280298248981171630", "85499914114718154399242612422577815473295691194", "4229039150740041862614771600731802162787936320", "4205714825536706666224058395565810989991051", "772750573406652086799037051615491378519012573", "41462645027503712043570506225877329084810791", "005532112070760290959301719726953219635053", "303886137668765995293653051328973730317523", "44569441323114825534784005221085280434597084", "5365946323229367596099979225550352910911743280", "7324490159787525705316475153661354352856196334", "7188657701204452876058002763714427710192790346", "3457720557526855547943705919236443310083011132", "119708592003356489356734372912372297878535", "9406496238494604565572561680374314794972111006", "11244394519155259394124859520454557345139196190", "4371806519273833677639984367637383600672238872", "48525530941823550118114356975864595828522511", "57633906708013966430855501199998052647174", "699745903129305738838345392392201684807686578", "8707064837585767745780194685730325821613535", "958012827054089663541397507441672335002360", "77213233111908867238265728612022070205960892", "264879717587729738898589756980061417765679", "4773874725792295292555436088105530309207537", "361991834664522282970016282680760793228812", "805833150735915225070111058242969598782720", "7741694999285643837149862430579032980393533", "77798748243684853701947208367523916408966", "838315983799236260567730128629221503225826999", "81719466960167744784485695549248654771125775838", "699240257309103628961749138429178849633554157", "8326821471145886696298818414409133853114003669", "29889666632945210664529577317996900453182693", "45549422703149770409756645099919935163848", "5492023206852094014662083153217972648441263043", "225108444546229455969637281682779248127739", "7462545137418685572685085149095989026478064", "3326698034850446921972025736108607607243840174", "082190025063985295887240155846949391897815", "3135414027792203867385613449204598080091286", "40588122261239768475745000458098816429794", "069966038099634652276403970661097710570754", "195090045776847441845627027664595862395069104", "86966801471902837305848414060073823558621578849"};
    int k = 41897;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3122.6925315227872;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> sequence = {"6030292473329232225457750978338151147064145079", "829827609621646113080519453604864942281293584", "95727220636482885721778229738443241227283406552", "876221813134378198333025480561611800320964348", "82093106451343386288838247705932267198570", "61460474752119466717289166786360546235718", "612108993057539297584971412517704082896654", "310655544032769165404889485181132387114370", "3882249855050342015581582052254248683791636", "95623106793339653685739565315296084722680691692", "84058531581246381209144898365862936634964278", "9314366858765744888274466367193455752469907", "7739125702015174193345682010064207545672645", "575925684949325318634583867774930788498559", "4564852355905606418026303599259994649269033", "65203242991100755474202188063493192562016", "1970910838130157820458864955615698679433718580", "1493356764841426836575808731662526187358120386", "991044993470248548647831516740414795787985581", "85510046540867390774596150371901410301339492", "22022683257344691707498452315238450109578", "099961386786228949351457575405534752174157965", "48478868905511873099891526193114937789648", "276835291168433347220650472832468921590881", "76370676782098771143193148537879031633374148493", "626385333299453659180159552453943568929889", "659564697923600054452854248943558227734556", "38762532351241553408971693655453936304699", "468503739433655835162497144097789981789381505", "1462715230244346320564829651167495845109765927", "053948657342659219311121775858685738483411114", "953178358403752027770132558356910681218357", "5084694656236644741376903065758316798536713240", "95660966579331237930760213986858739369799", "70672685794269958112394378917467816339675", "083887823868734595290108757695279433833304", "9378409629091335559407220585286104911175732582", "654539268976253235099175502843294607302074", "44294447144898928607391154994379289262735652", "24169157169548164092742010833819377218868785956", "0548795553899998582285644607728928822265449706", "08942667295592571933425896779052684129736380108", "75034965974258438773692286727954969041993", "52177543662452004759429842428473059900421"};
    int k = 10268;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3010.8015843770886;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> sequence = {"278131547555396274585114900685099347009044775", "09553426566381994944447035507446250113561971496", "217440613585305008789585570406114865253514", "3116962629293141486018850298256263575491798", "010612692010046323778708647219392155101284", "994889730174906632712337808533420145359537576", "604850969252822324968302162695392935920058096", "940900269086527420618377798114610845138263635", "389246505155072267516809445301859529422238266", "798021045463808098537228737810046366784580431", "6426344621011983015809042793800567913899015", "779523222997086384996907306184031464047568", "54692692086589938403334144809829001444334042", "17066104510784960906411300814375749543743931", "9086375200942786745188924411608059366634236", "34828741598483134524805888005522195066199042", "44340708162792096566232555367503985135038823", "90595601221425487402915666777481088626584445", "993204175034086188046270895902495526892636", "744786817694362038951349905183937414663258", "14887049869881046911442351235006626962495271702", "75985108498840623143976627952807247069461644534", "43262740591475197819542789876713982476452452", "978053902616589183604807825969378101570556", "70464076178381040155479646924100284633338327", "386715693113251346351454975522840674032225", "25656809071970924876946352643494188297247", "10229453778126812109128684632448161115479975", "8790315197967348873514311743682818204847587078", "05893154740236338914009056742813877034427053332", "20010927786624230644303135055176883089699", "47841882197185555832264520867611912522656", "17503544341307332826926843192930720134317905620", "273336322405846034393603379040540985992924366", "599086955014286502607655130926070113563563389", "495300005248819545949709781513836161095910786", "2448865073740495384016234159296654469174867310", "04846088836133329651521559819255053399500", "8182267371598738314911205799523933456201278219", "19968639727868676957074826569776685556134098186", "52759563913182977237051653798742635162212", "3732750914137881573324379819685416255015706", "9312784803003485400258957408517631883094073", "991447111500599857033273558962671562216559749", "85181756269571205590554214974116971400195096", "2250450078288707594629952752154714390119408957", "4653881331363573078003552603097736593172695"};
    int k = 38497;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3088.983083615271;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> sequence = {"1590849932512138154158423818395012082768728340", "830911070328875217635819011964697966674011", "93507915096083770827277750715531885860751864", "33679817655437906587057125208012054472247", "09756189869952758158550531628573882502357951471", "685028117868128797055992344582493166237463", "8712950731860676781431880542264528675062923424", "71533947503166992285196789221415937699265", "885252665609127713923863890517288180715035", "7751370880905240514633642886902576264814404", "613196331757229834515656202365178923924131", "56327572235098159814448101318567869951934", "37165600074028319885402624078013180025688", "78955389573910676541116186283415521243024576763", "9142678278157490286325974306285233798971125802", "3004413583569804343149592642378247079172757307", "2001257921028896651812838823775693754061225675", "4942689071127040038117127173836805376041158370", "264507147730265950601275734555743826072111016", "4272456012230267157851734823285421263680838", "0765220636953537977092867552465690950942094", "1696964273146896259837113272066522648936221285", "01244272793385113450028780324980611842609600636", "79818314872047156667057950914954377587864", "79806100318545334906883882821144692054674", "22523370445992544023441689262718080055686", "66512907342104877742498979925147501171896629758", "2904146903900582493828099906258658056808705", "78087358742201087823460791824777646762582162", "62502417146878373905329347571438425050891849863", "4324560059106095968568862454602703154085178942", "2520202414619962093504698274816474813125670", "41853538158394935387262701475240144168926", "64695120073323584006618666985158247598306", "03060886170157044999824342540342908897672928", "7087716950996395209246301079224182128568964693", "66217925169482464681725756181512752088204892516", "29266371045724544106008679954349372411545", "399475106131610999306268652456427189774621016", "567446869461745918549930796490286692317765", "2896161924880296684707531453755843981951377679", "6351732357723802234484061789010265859974342", "14754356483298906837095074281275174128892"};
    int k = 47294;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 2840.346964064433;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> sequence = {"364868494460365937619336089303199757465460911", "65953470446362466893816306678393781400185", "01518624160229112592148410593147880123979050266", "28683233764759962456076951838418009579643172", "68425680614911169086903159453839899253106005", "22639349905369705939210025811552122223222654999", "487552245863655989085860111440517436862444", "2523175892967835336316152312555466838204791413", "5569767135059303875776368808580116759400995634", "287473141466278959028573479045670621215372", "515500195891073091796500297540456577967305", "8135663319567353896463238257057928097709062492", "564586023477724619507740723489307332257115229", "3217631031712568497126674377349947169738657195", "87954510458518718117822195618028180962966083293", "48219503361703801527190231578427558376952", "5156386275784210799509575744118807152061136", "3455437271843561033969642656436492022183974", "832689367701521761330405154065727755316735307", "08933202547595071977501180417904655169969127", "853368187039961248098458610044521194341681532", "90154574791808997682320379379673720362635546", "7243178993773627044197826357415259039053100965", "13301188254604812689507254780881158556592", "742950429934183689017999057283422723226780", "7055393894430927134429661934370373339228216108", "77066320428184091426125820451319347161976276325", "70944245693325857807954783073528554325954542", "294913010340193759253534962227444201962300882", "0362995608298686781531099317326909499981860010", "9589403689134145211522386901934560225217121852", "73199923599434060304601514996328818712799828", "146225079994595349420658375492226920398366", "488937909533286584967346962623833785262458", "7352715101002736228177873670847675659524419702", "7815110371307028218595252448104168504382693334", "17922898258474056824901434584245455373755989828", "37848511435256825217437922831560076391553715", "1482050506694424142940168046859372959388042", "986766768419026643488090171618774236027772", "6521931478287019354340091940034415272759230", "20108480338665227887686670373660591612666", "82928962479680645744058413852718016601116887", "377101709361151450807532403065923639205402534", "644536445885661002274313808311056608382308"};
    int k = 22734;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 2974.3210993813427;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> sequence = {};
    int k = 41897;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3336378864017059;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> sequence = {};
    int k = 38209;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 0.33363677742375947;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> sequence = {"53241845388809200299074898230783156026983794239", "70075911526673031313597574731938292733112228280", "44447340127349421676936215905664181723894461115", "95850962505920633799149806375543676720177090844", "11784635581924233937427205946897408563018884759", "03902116717251573498439492545800140134957553134", "94961929222585935418482030350203651494371998715", "65425991922951976992608674929163893051569245550", "92262912767565577927341313251497401115139754399", "81270378057060603611378911311325857822858387423", "83104086515982885479974257451060626172503228363", "16115912043586323814695626719796886087131347874", "85045009595704544740972092394109508051696695505", "27141111622436140863747510509717532486896968721", "03183083462347961593786440002303166424979795759", "28978286010058017250768395979975419904632382742", "46984459967403908081668547415614754709675108104", "00380954513712542301076993323501242137722462833", "58092219541864701624582602441577783396122427815", "35371983946880329278866206590266277561377382858", "53431100151126491674869505059840971115192886613", "74245261894363257643089351434563756177635873235", "56629751382372129532048114094137694359348702660", "96752825759329665504212668174791745095496204016", "49382093656297512348318342456796347757180704620", "94041001775768820980151865810858725467146283835", "36773775666811128528976020010005595706069610316", "61190850296593783529986757343263483142181854962", "39884836684960728857886544742437318304593418915", "25806211693256534043062277769199305042462529520", "82354373624600933070932649102258926727428397881", "42482771805890523586742799370937021409666632353", "79484108159731706242451274238803390640655122607", "57552723116251869372236426396884304334064144900", "00358278205498824508779374192664872685779831342", "69751240858297678602545279341614330627120509618", "40186310672304682370095333196303878062577117732", "63926244718489001096203719374450189532533195082", "52390087011209811596938135952416474786026134809", "43621040512529108045505688788429728660634108866", "29324502065593174205812284867025573407776764194", "15062546950801743995476184773938174965416272210", "07586529906429330821362431531537038807833139964", "15388578227383677251182765162738279703957587091", "05976437752053529214052596147508235568532676611", "56602826995176173032748785979448291849521629134", "36877605107575238939373899331423414687419749116"};
    int k = 4242;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3301.7182154243324;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> sequence = {"36753562912709360626187920237592289736129319478", "45036106320615547656937452547443078688431492068", "92664950487172722610615949091771159776736563948", "12939088509638561159848103044447631759621785741", "85975388318964333860488897764303092540594692247", "75481289368021051108506462586284724062990813110", "34039196933805664004626756987282996027613215991", "49107587048042961042220552902838040919625449936", "05029435174314694226412889288868383338047689068", "79033373265265879604104870862479392830178915492", "57499459357081997825349020196212073119056774064", "74858260664628960701013772645202909945103788604", "67609759785338379378741909885843713809799324371", "22021751741711170408516621964808102297564637974", "91706085394154155498385222703463633443972589024", "76571333851087635080411359341508356599076376150", "65081226910427403280370034927425244386089223183", "42245175716981333798670484816852199606499089314", "89677371221509040137411303217565422172416578592", "73647972216302156500346602589506083782105855073", "82307776911908988037069217797627158845656848838", "75245057327213494195741221620229743561403127798", "10760102519713120687492445912896064094546639952", "13099134585733895538603361870511030045424999498", "16393346156172292812478637723725376813640358509", "98024901200639083873100503180179103594846929030", "33794991942065956114372733924449938329543949557", "39072729050417936212539188705279196368466727410", "06443734721795689552159916210532197682064336904", "85129738092318741638550126485625269133152694460", "74379002269035587170604130296093543643191094562", "59177411913874931387938840086823850592685283678", "72662970372351789416435487335014570789939464555", "60626992965538673602693087652400685494683236224", "70496546425161377121089013485822063610574200339", "04334245381131581339754496721013776391041186434", "77074530729930279952083596563020747301675788907", "80310367322153382858086933743713964202957464912", "31813892451001330002224798547860064375810930264", "38670819816485015970628950272817797988980520243", "73001580004753142013004822024584084254275752286", "60091269482827867709454223965743944060228431119", "00025769198765114857669143676976090766877665376", "97264075401280152071649535110070816414986225232", "73901506979289989363604496641980490550160288498", "34491757624255052977681203287463804979751378095", "21327332386160919150949682465347471404833461554"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3296.3150746944284;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> sequence = {"95130297163690131579628109596342987761993260626", "60600555035441353164538912358273393811509009438", "16782954928176051696214877286256984029684394618", "87075331097612211366700265327708317356419606764", "07596646127116998104358204756047601368019965839", "68159453179241250947263907512406207908060895936", "37838594029663175080154625539289341694189099837", "04367025577421914740077303516049395931700146534", "58136740942104762593131218411830021736058773129", "07797616689015605701377337202083595033648318560", "71858973185230745349553110022227232644928855680", "15847679513530059782952045100966129893363185794", "28131760501547736231561446485385638656704494679", "59493327283206194347800879075913819691772457156", "33842533276264468020037115018282968325337501741", "78432332919586563931561182717192207414827719433", "90003141410722391165964696814581281759805669221", "26732334657418056001722027630702921598844149914", "25929813975735887510596231962306198542864787675", "91614978605122679584363589816871853750616020055", "46427441832548368288396485336526820618028963882", "61179973383988595001562822368499127443941971395", "02488165326298277921184605294516092048923695820", "32216575886121323872039308117235472079092607829", "71974634107406753865796952238042255761078518488", "87596251363362608899981271776831257418577914740", "78154026415354444964587898938795214579622364036", "02636915951712173130905106673142734274801719920", "30731910010873487259077825033839767958117473796", "22206826215033305177384166660292554593220722137", "80205223753665844578640193302641039797341470642", "39988991402634305371637018779507209941605412319", "36489363873035212944431152337706377506574844484", "22971165095029788236592589682350844228062835867", "33490627842783913949666141434672986696012959446", "66670188611994523270933051266583121509764807370", "81554945961431789696598328799836807988739216792", "24533397201764551591727309224108455966816259613", "17783989254438678733446306966304040877463482737", "95851586971942516398171540923009857134063761379", "60641088904087123670568471290955922565464738581", "75052922943096804504163538214485188129057596900", "68054904237424034824059739337474902066512803048", "20910893524424804636420399823885567902640211583", "99867843806108489153917911874998911377414829285", "36100067976172113421102472547087873358723616145", "88109818794776681801586314107896425081159776769"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3336.6849253055716;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> sequence = {"5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646339803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264746332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850850959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5750851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485048", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669885044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890260646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490990264780646332669803485044698", "5726850851490959890264780646332669803485044698", "5726850851490959890264780646332669803485044698"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3412.6807396498166;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> sequence = {"59740026857326999213276424915873807807757969041", "76325111473316427435586471205449571521208941901", "74101775210470704392116136581057441900584145640", "51780397228255532056413465348877751825665361973", "74886148403546184021427937386532806502073147383", "89153897699493763171797766720125349265183589745", "68923536027786731244719755503971909108500012661", "89998679183547557319346168839316866786360096022", "94153866972178755972002348080497632465823127535", "56455068339768984497947361930431115753240688039", "59920829666413356956428624621685227152778992158", "74314872386067406215342129486676613521011763949", "82222542681898525646312052660209656792992103773", "26496900757583488017220408253693417912146313071", "60736176736918215150165903830252354261935489429", "73192807429930134038045703279518027853424745652", "04685087651331938304361539626298890182579663694", "95313014466954297013180095664280178176712118126", "06964908464998284496730275211096850003711640555", "42112377798643051325616450858093168921062710830", "74493063939069429028940393013017778211155144957", "34185211986692305367264545810994490211377918257", "18162321552009266418277933815167152822564590492", "61436321795869390621020112512194264635280761323", "95348027952359872891733045921297253864590272119", "54791112675531386585963797432427784982304922161", "70920653750014050077035816801957647232971116195", "10154524189669373118075054509857790560065721109", "08575777218121914024192682008235162775006074041", "20504783424831817755790316386406085280375105117", "64990052497738418593250271621080207102512560680", "61474598961014634025792018930211710271740363657", "73622013960339597810288084103114394204003330426", "92006101901894976777076784573053616171858530394", "25640263974341206837064962449004834299836506168", "29726450247058380887379160346853932560626200413", "80627425185088150633621825066852221148565217335", "93156898756817911741127457871596856667746879045", "81297751285081646013251454525520020238787552926", "85768334388896767229842748186084577900332961856", "84254842866278006374209928169755166607482796967", "40237046605467768698382333453673655284318417144", "23087284179146529594739167858922434086534492359", "86640810679750081380872884085958980530257720477", "15126311287548960691087429985797870213637724380", "22588257971141634398129568363475292540866777385", "60579393962188793782148473743816003617247098307"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3273.9615210502475;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3261.6170212766037;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 2979.361702127671;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3378.3333333333335;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3324.340425531918;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1597.5435203094798;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> sequence = {};
    int k = 444444;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1724.8936170212828;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 862.4468085106414;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3685.0;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1636.863247863253;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> sequence = {"32777583035609148423614342460717037227836774709", "42723660528505188596592220484154823845459300198", "46740431516192807325583368066051243563157917436", "16411596421534672240606236080764125715673613918", "37038634431149673457784793542131598134832602412", "07484409650856483050833390427590089099059731373", "88945470700542125167182726907655080398627243954", "11805063528483252226461715310936265809628241831", "10371762289819308441635970702315916518432758837", "47813489405661797036191224822748456857880744023", "15040616443345907296800630957462102717343288780", "05316242190460048164129554407065690792012352497", "95937062972976190513821026624948836568999719553", "27206911827175206914670084151102406546804083550", "22455304072506673547094142558984072334792980478", "90086642688135810554756072792026841537584105142", "98310923435777671630728858921730781648653065287", "68075381327186655345644594984512749943680489584", "06837401081660264546774190065209820836345152814", "69553920070969174057095891882376051229976919618", "14622819291596227081208949055364436248980958505", "59579955540789187514293887373583940624648474865", "51723687061337559111919476710351511831302173031", "79147651301626883307512722246907316381458016204", "12301395905198928121666458840334303033223067082", "07385441143629383549911106767791759478921437224", "51333966364286432873227655671717162740839520235", "01597199973107590157243977190067262213198061454", "05971172196133984426759620682185748096254970313", "81360933033459746414348140057732716121689458864", "15097277040317819399976502926674048043642603738", "81501141292341775710824378030730336454524943431", "36266306561620357566760493244174089938269065978", "59152911945216598065813623246291721654414777928", "08802670176852628171468127488932387648309859610", "48208651116389173513718975233830558936588962283", "43110730256916949864397360365990346905943662109", "93147660156055037819070295406529290897466984600", "91708166257873209480326307343033314864731771058", "21997987547670998755179831870001097472979248014", "57249385895811525639709342192706817769301425056", "91921007500499846237597710347586769258551150311", "73396394370916708911367110173471368166533708018", "90363935247216462864346388826376041029688270408", "21595028634350896428576692660994514320264875295", "68135702662379522555067329261877292830413035787", "08150802473898664511051598333822387363245848387"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3268.289723856948;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> sequence = {"1232439479864973924823094793275983284023", "347982374982374837849372980473473", "3493274923740987390573984793247398479234", "4923798739873294759345793470397423947", "237498723957239570934875394793847", "4354324913874923748932748932748362583254732894", "3249732857329847982374923749823759823", "394879327598327498327592375392572398", "2359873295639847398275983275983275893", "239748932749837598237498723984798324", "23957329857392489023759238749327598237", "2375985923759823759287598237", "2359723957398275982375893275"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 843.5820895522388;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> sequence = {"07570467078484696920428046317340357568851192388", "41295759899052433645905658305524691310191503119", "70244405815769917581290600439433211130863305398", "63721221990871846311367313037084218242168058243", "10221343806306788445922487753307172120294378089", "62452965808768483687825006527141174169512978578", "18899983779581233848930838502747563265865242545", "40159246365330307054947396855242258624049133741", "82953430021644977437089077687635366124135981708", "47876912725140545891014713684866470366582444817", "39880631585801138895823722875194629311707328250", "01445779352899008163200395785472580732004121879", "20260372965213137120939373235351299035272442761", "20986327198289844681137701214905932334746519015", "74426180389111603238300791853373627964302341269", "51480706181225564010958968260798946341468578010", "30773930887897946219869230808680939504721110775", "76924752877869468556531329193872906393040607156", "06661936118838688246560696545097817269461103049", "20527149627660096380191904925377134007658198522", "13916757185931877249880415337867242680799480346", "47271565728190765024775931321447695181486949752", "48899081935670954522032825089774585858484161191", "45816542799013892347036581326142593007162653361", "79034650885185447091169004426173439752057224021", "70102739385056051518949479069657227726943588031", "76975425493929457271438811113356206092545479551", "34028666282639959488999626225021382165048136518", "60446008766613981623731783041988550658731567332", "76835397792703574043408437019526314442693110533", "90793108757904919353692978922174912139566295794", "70394057119679729956048736355719750939624848342", "00118980991128047023277434728226383406443122813", "08776817506956405215014656961468120095925982810", "56670327553461264357989229413460459194251925976", "76380787130655463933376324327945685349131657768", "83970182412386732843753882556892540832973447360", "44532233457416014193510126562398296587758126144", "02179604537819067878617660645829804055330731290", "13515164196904098051889425173811804391708924894", "01402884039892765377615705385518709855312844883", "20770447798086757134066018801596264877717957488", "62699942239138851365880357343699764671155785514", "13668369227776360829262725631763023441415209425", "14909676943271196138797391195196688160595943902", "73341550525982623803479134971793614585260610513", "29274060443620699308324759443425110953820125505"};
    int k = 5001;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3331.2129095757473;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> sequence = {"7938024839052273790239970398657627039991", "7236558147138480460326941378838153543659", "5491755418835226678417187877449155582982", "0748583062252271521101876009562859439056", "3630840464643840093757297565304855542192", "4586251397375021871558567941612044597539", "0556326891488719311495909340757506478400", "6247418589993377325634060405685376867184", "9731023718937480405700567806573430487595", "3273977953338589604233700103003836040924", "9291093003019869016448614081031150849305", "2387804571060335023271009717451782545301", "9459396640820607298116118115008370134377", "5126654171348615065310195768547966667041", "0814884579845889470406538512467550520779", "7539949159830907683861967897552494479556", "1591388943951745146032214770957297682998", "3712617650451237241826039496513269003953", "1126919061738703691414610240431794701152", "2249772090716092960284480151115170853796", "3158092433905544382264000817671481853193", "9104900032824835006707332140087384529098", "0535545116193479807584250707682390383100", "8047616149642844981037434812839996173984", "0634697494196709731564512880779601232110", "1380094240297922313216810604994506908828", "0209535989128401081495902359013690402441", "9021549020382168329734861156980226761213", "6573632503735918408958232666344292892567", "2800825803233219163917966644457677021143", "7443079994412947309031153963181308762914", "1250426763419598887388968695968694768138", "0811876188356889937238351542291588040855", "9577376435456943634740750254215160023050", "5748060592837629859255911442636910458216", "0847817046953294166023358181130723583561", "7924839647731749698036654231212564801054", "2679591089979690572201505645230647118520", "1124552323119809524235845110416145233684", "8392309272279309015825028399301527396492", "3597242467592629699803637587716134322111", "2330045701863096284662517184077122747573", "8937157572449960162359191636408195517780", "4453965372184210603784795336089745975745", "8795966852839333914452695030283178686740", "0876463784682304433297971339047418088172", "3060480394511070451424067159150059434444"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 2782.2900709219907;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> sequence = {"572685085149095989026478064633266980348504469", "19720257361", "9", "69", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361", "572685085149095989026478064633266980348504469", "19720257361"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 1873.1721798133992;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> sequence = {"572685085149095989026478064633266980348504469", "19720257361", "9", "69"};
    int k = 7;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 98.3238536775161;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> sequence = {"028602486509006", "138934460661849"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 45.51111111111111;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> sequence = {};
    int k = 1000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 600.6666666666666;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> sequence = {};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 3151.85106382977;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> sequence = {"1", "1", "1", "1", "1", "1", "1", "123213", "897412398721", "4123678126312", "321312"};
    int k = 1000000;
    TheSwapsDivOne* pObj = new TheSwapsDivOne();
    clock_t start = clock();
    double result = pObj->find(sequence, k);
    clock_t end = clock();
    delete pObj;
    double expected = 48.090909090909086;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22263204&rd=15495&pm=12498
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
class TheSwapsDivOne {
public:
  double find(vector <string>, int);
};
 
double place[1010101];
 
double TheSwapsDivOne::find(vector <string> sequence, int k) {
  string s = "";
  int len = sequence.size();
  for (int i=0;i<len;i++) s += sequence[i];
  int n = s.length();
  place[0] = 1.0;
  for (int i=0;i<k;i++) {
    place[i+1] = place[i]*(n-2.0)/n + (1 - place[i])*(2.0 / n)*(1.0 / (n-1));
  }
  double exp = 0.0;
  for (int i=0;i<n;i++)
    for (int j=0;j<n;j++) {
      double prob;
      if (i == j) prob = place[k]*(n-1);
      else prob = (1.0-place[k]);
      exp += prob*(j+1)*(n-j)*(s[i]-48);
    }
  return exp / (n-1) / (n*(n+1)/2);
}
 
 
//Powered by [KawigiEdit] 2.0!

********************************************************************************
*******************************************************************************/