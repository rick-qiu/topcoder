/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=7593
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class StarsInGraphs {
public:
    int starryPaths(vector<string> adjacencyMatrix, int C);
};

int StarsInGraphs::starryPaths(vector<string> adjacencyMatrix, int C) {
    int ret;
    return ret;
}


int test0() {
    vector<string> adjacencyMatrix = {"01110", "10111", "00000", "00000", "00000"};
    int C = 1000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> adjacencyMatrix = {"01011", "00111", "10011", "00000", "00000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> adjacencyMatrix = {"0111", "0000", "0000", "0000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> adjacencyMatrix = {"01111", "00000", "00000", "00000", "00000"};
    int C = 4;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> adjacencyMatrix = {"010001100", "001001100", "000101110", "000010111", "000001111", "010000000", "000110000", "000100001", "100001000"};
    int C = 10;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> adjacencyMatrix = {"00", "00"};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> adjacencyMatrix = {"011", "101", "110"};
    int C = 999999;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> adjacencyMatrix = {};
    int C = 1980;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> adjacencyMatrix = {"0101100", "1011011", "0001110", "1110001", "0010000", "0000100", "1000110"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> adjacencyMatrix = {};
    int C = 42;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> adjacencyMatrix = {"000011000000000001100001100101000000000101010", "001100000000000001100000000001000000000000001", "000001000000111101010000000000100101000000000", "101001100000001100001000000000000011000000000", "000100000000000000000101000101001100000000000", "000100001001000000001000010111000001010000011", "000001011101001100000000000001100000001001001", "000010000000110010000011100010010100000110011", "010001000001001000000000000000000010010000000", "000001000000010000000000000000100000000000010", "101110000000000010001000000001010000001000001", "010111010000000010000001010001001000100000000", "010000000000000000010010000000000100110001100", "000100001000001000101001100011100010000000000", "000100000100010000000000000000011100000000000", "000001000000000001100011000001101000110101101", "000000010000000100000010000101000001001011000", "100001010101000000100010000000000011000010000", "000100001100000000010000000001001000000101000", "000000000010010001100000101001010001000001111", "000000000010110000000010101000000001000010000", "100000100000000000000000010000000010001001000", "001001000000000001011100000000000000010010100", "010000100000000001110000000000010000000000000", "000010000000000000000000000001000000000000000", "000000011100010000100000100000000110000010100", "011000100000100000001100010100000000000000100", "011100000001110000100001000010010000001010001", "000001100011000010101001000000000000000011010", "100000001000100011000000100000100010000100101", "000000000110000000100000101010000010000010000", "000100010000000000011000000100001000000000000", "100010100000010001000001000001000000000000100", "000000001000000010010000000000000000000100000", "000000000000001000000000000000100000000000000", "010010000000011110010000010000010100101010100", "000001110000101000000010011000110101010000000", "000010100000000001000000011000001100000000000", "001000011000000000001001000001110000000001010", "101000001010000100000100000101000001100000000", "000010000111010010000011001000000001100000000", "000010000000000000000001000000001101000000010", "010000000000001010000100101001010010000000010", "000010000000100000000000000000000000101110101", "000000000010000101010000100001000000000101000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> adjacencyMatrix = {"0010000000000000000000000001", "0000100110000000000000000000", "0000010100000000000000000000", "0000000000000010000000001000", "0000000000000000100100000000", "0000100000010001010100000000", "0010000000010110000000110100", "0001000000000000000000000000", "0010000000001100001001000000", "0000000000000010001000000000", "0001000001000000000000100000", "1000000000000000000000000000", "1000000000100000000000000000", "0100000110000000000000100000", "0000000010000100001001000000", "0010000100000000000010100000", "0000110000000000000000010000", "0100000000000000000000000000", "0000000000000000010000000000", "0000100000000000000000000001", "0000010000000000000000000000", "0001000000000000000100000000", "0000000000000000000000000000", "0100001000110010000010000000", "0010001000000000000000100000", "0010001000000001000000000000", "0100000000000000000000000100", "0001010000010010000100100000"};
    int C = 99;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> adjacencyMatrix = {"0100000000000010000000000011000000000000", "0000000000000000000100000000000001000100", "0000100000000010000000000000000000000000", "0000100010000000000000000000000000110000", "0000000100100000000001000000000001000000", "0010001001100100000000001000000000001000", "0000000000000000000001000000000000000000", "0000000000000000000000000000010001001100", "0000000000000011000000000000100000100000", "1000000000000001001000001000000000000000", "0000000000000000000000000000000000000000", "0001011010000000001000001000001001000000", "0000000000000010000001010000100011000000", "0000000000000010000000000000000010000010", "0000000000010000001000000001000000001000", "0001000000000010000000010000000000000000", "0000000000101000000000000000000000000001", "0000000100010000100000000000000000000001", "0000000000011000000001000000000000001000", "1000000000000000000000000000000000001000", "0110000100000000000000000000010001000000", "0111000000100000000000000000100000000000", "0000000010000001000000000000010100000000", "0100000000000000001000000000000000000000", "0000000000100000000100000000010000000100", "0100000000000000010010000000000000000000", "0000000000000000000010000000000000100001", "0000000000000000000110000000000000000001", "0000000001000000000000001100000000100000", "0000000000000000010000000010000000000000", "0000000001001000100000000010000000010000", "0000001000000000000000000000100000000000", "0000000000100000100000100100001000010000", "0010000000000000000000100010000000000000", "0000000000010000000000000000000000000110", "0010000000000000000000100000101000000000", "0000000000000000000000000000101100000000", "0010000000100000010000000010100000000010", "0000000010000000000000000000000000000001", "0000010000001100100000000000010000000000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> adjacencyMatrix = {"00010100", "10110001", "11001011", "10101011", "00010111", "00111001", "10100101", "10111110"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> adjacencyMatrix = {"0111000100", "0001000110", "0101100011", "0010000111", "0100010000", "0000100000", "0001100000", "0100001010", "0001001000", "1000000000"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> adjacencyMatrix = {"011111010", "101101101", "110111111", "110011011", "111101111", "111110111", "011111011", "111111101", "101001110"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> adjacencyMatrix = {};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> adjacencyMatrix = {"01111110000110100001110000111011100000", "10000110111000111111101000011100111111", "10001000100000010101000100001111000100", "00101001100110110000011010000011011101", "11110011010000110110100100010110110110", "01010001000001001011101010110010101000", "10000101101110010101001001001101010000", "01010000111011110011000110100110100011", "11000011000000110111111100101001011011", "00101101001010101010110000101100010010", "10010110110000001000001111100001000000", "00101110110001011100001001101001111101", "11010110000101110110111010011110010010", "11001010001010111000110100110100111001", "11111111100001010110011111010110011101", "10010001100100000000001101001101111010", "01010111100001100011010110011111100001", "11101100100011110010110010000000011101", "10101000100110000000000101010011100001", "01011010101111010100011010111110010000", "10010011000000011000011011101100100000", "10010011110100100101101011001111000000", "10010010010011001000000011011100111101", "10101000011000010111001001001111011101", "10111100101001010111001100101011100001", "01111011000011001100010000001011111011", "00001001101101011100111001010010110010", "10111110010000110100001110100110011000", "10000011111011100011100111110011100001", "00111100100011000010101000011001100000", "00010000011001010110101110110101011011", "01000011111110111001110010000110010100", "10111101011110111010101111010010001111", "00011111001011010101010100101101001001", "01100000001110001111100000111110010001", "11110101100000110011111101011111011010", "01010001011101100000110100001101001001", "00000001110000100100010100010001011000"};
    int C = 131513;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> adjacencyMatrix = {"00", "00"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> adjacencyMatrix = {"00011111111111", "10111111110101", "11010111111111", "11100111111010", "11100111111111", "11110011101111", "00111001101111", "11111110111111", "01111111011110", "11111101001111", "11011111010111", "11111111111011", "11111111011101", "11111111111110"};
    int C = 969;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> adjacencyMatrix = {"00000101000000000000", "00000000110010001001", "00011000000000010010", "01000000000010100001", "00000100000100000001", "00000000000000100000", "00000000000000000000", "00000110000000000000", "00010000000001000001", "00000001000100000000", "00000000000100100001", "00000000000000000000", "00100000000000000000", "00100000000110000001", "00000010000000000010", "00001100010011000000", "00001000001100000001", "10000000000000000000", "00000000000000000001", "00010100101010000000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> adjacencyMatrix = {"00010110010101100000000011110010001000001", "10010010100000110011101100110111110000010", "00010001000110101010001100000011100000111", "10001010001111111010000000010010101011100", "01110000001111010000000010000111110100001", "00000011001100001010100010111001101100101", "10001000000110001010000010110100010010010", "10110010010011001000000100101010101111110", "01000111000100000010110000110010011010010", "10011001100000001010000010000011011000111", "11000111010000011110100010011000111001000", "00001111001010001010101101001011000010000", "00100111011000000110100000100010010011010", "10101001010000000001010010100000010100001", "00000001101011000000001010101100011110001", "10011010010100000001110001100010011100011", "00110001101010100001000110110110000100010", "10010111010100000001011100000000010001110", "01101000000000110000110101000000100010111", "10111001111100000010001000100101100101101", "00100000000000101111000000110010000000100", "00000110100010101001101111100010000010010", "01110010001111100100010000110110101000001", "01100101000000101110110001001101000101110", "00001100010000010110111000100110101000111", "10101100110011001101110000110001111101000", "00011011101001001110010010011001011101001", "00010000100000110001100100000001100110000", "01000111111100110001001100000010000100000", "00000100101000110000101000101010000011000", "10001010010000010001010100101101100000100", "00000110000110100001000100111010100100000", "00000100111001010011001001100000000000000", "10111001010000101001100000111100001011010", "00001101000111011011001000100001100100001", "01011000110011001000001111100001010010100", "00100000000000100100001100001010100101001", "11001000010000111001100100000111100110100", "10100000011101000101011010101101111000010", "01001111000111111010001011001011100010100", "11101011011011111000100000110011010100000"};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> adjacencyMatrix = {"000110110001011110100111", "100101011011000111101101", "110100111110111111001001", "110001101011110111111101", "011001111001101111111111", "111110110010011011100001", "100101010010010011111001", "100110101111010110111111", "111101010101011111100010", "001011010011010111101111", "111100011000101110011111", "001111001010111101001111", "000011110110000111000111", "011011100111101011010101", "100010100010010101000111", "100111010101001011110111", "011111111110100000011001", "100101110101110000010001", "001001001101100110001111", "111010101100010110000110", "101011010110001001010101", "111111101101110011101011", "111110011011001101000101", "010010000011001010101110"};
    int C = 42;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> adjacencyMatrix = {"00010001001001100001110011000", "00000100100001010110000110000", "11000111010101000011010010110", "01000101111100010001011111010", "01000111011100000100110110110", "10101001010101000001101000010", "01100001110101101101000100100", "01101100010011001011111110011", "00000010001100100001000010010", "01000001000101100000001010100", "00110100000010010100011000110", "01001101000011001100100011001", "01010010110100110101101000000", "11011000100110010001001110010", "00000010010001001100100101001", "01010110110101001100110110000", "00111001110000000011100101100", "01111000111010001010110000010", "11011110101000000000011110000", "01001010001000001100001110000", "00010111001110110101010110110", "10100000010100001000001000101", "00111011110110110001010111110", "10011000001001101010000011001", "00110011100000100101010000000", "00100110111000010100000010000", "00110100010010110110101011001", "10110011010001100010100011100", "01000011100100000001011011000"};
    int C = 4028;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> adjacencyMatrix = {};
    int C = 1986;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> adjacencyMatrix = {};
    int C = 974;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> adjacencyMatrix = {"0101011100110010111001111101110101111", "0010010110011000101110111010101110111", "1100011110111111101011110011011101000", "0010111011011001000100000110101101010", "1101000110101100100011110111101011111", "0010001101011000001100001101111001000", "0100100100010010001011011100001101110", "0011001000101011000011011110001100101", "1110111001010000010110000010110110011", "1111000000111111001110001101011011100", "0000011010001001001101110101001010110", "1110100000001110011000000010001001000", "1001110100010111111100100110001110010", "0111101001110001010100101110110110011", "0011110100101001101110101110010011011", "0010110010111100010100010110101110111", "0100001101110110001110001001101101011", "0011110001101011001001110110001110110", "0010010100110110010111010010011100011", "1011111110000001011001000110100110111", "0111101000111011000000101111101101011", "1000101100001010100000111000100111010", "1100110011000001100110001010001001001", "1011011010111101000010100111101010001", "0100011011110010110100010101100100101", "0111000000100101000110010011101010101", "1010111000000101100000101000010010010", "0111100101010001010000101010001110100", "1000101100011110001011001111001101111", "0011010110100000010001110001101001000", "1001111100000011101000011010100000110", "1000100010010011011011111111000011001", "0000001011011001111111100010110101001", "1100101111111011010110001101111100101", "0100011100101100100011100100101011010", "1100001000001111111010101001111100000", "0010110101101110010111111110010011100"};
    int C = 465;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> adjacencyMatrix = {"00111011011011100111101111", "10110001111111110111001111", "01001101110110011101110010", "11101111111011011111111101", "00010010010101101010010001", "11111010111011100111100101", "11111001101110001101011111", "11111010101111111101001111", "01001010010110111111110001", "10110111101111111110111111", "11011111110110101101101110", "11101111110000111010111111", "01111100111101011110110011", "11111111110110111111110101", "10010001001100001111100100", "10111011111100101110111110", "11110100011101010111001110", "01111110110111011011100101", "11110001011111010000101111", "11101000111111111100111111", "10101111110111010011001111", "11010101111101111101101111", "10110011111111101110010111", "11111110011101000101110011", "01010111100011100011101100", "01101111101111110110111110"};
    int C = 218;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> adjacencyMatrix = {"010100110010000011110000001", "101101011110010100101100111", "010010111111110001110011011", "010011111011011111001010111", "001001010011010001110010111", "100100110111110110111110101", "000010010011110101110110101", "111100101101000110001000100", "110100010000111011101101010", "011010000011110011101011111", "111110010101100010100111110", "011001100100010101100001000", "110001101010011010100100010", "001011100111100011101011001", "110111111010110110100011111", "001111111011111011011001100", "001101011110011001111011100", "000001001110111010000000111", "000101000111111111001111010", "111011111010011001001110110", "111011000000010100100111010", "011100111010011101101001010", "011110101101010111010101100", "010101101111001011110100100", "111110100110101010001111010", "101110100111111110101101100", "011010100110101111101101110"};
    int C = 263222;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> adjacencyMatrix = {"00000000000100011101", "00000001011000000000", "00001100000010001000", "10000010000101000000", "00000010001010100000", "00000000000000010101", "11000000000000001110", "01010000010010000000", "00000100000100000101", "00001000100100000010", "00001000000000000001", "00000000000010110000", "01000000000100000000", "01000110000000000001", "10111010101010000001", "00000000001101000001", "00000000000011110000", "01100100010000100010", "00000000000000000000", "10000000000000000000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> adjacencyMatrix = {"0110", "1011", "1100", "1100"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> adjacencyMatrix = {"00", "00"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> adjacencyMatrix = {"00111101", "00101101", "01011110", "10101111", "00100101", "01011010", "00111101", "10100010"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> adjacencyMatrix = {"01101101111011111000111111101101", "10010110001010011111110111110100", "10011111001111101110010101010000", "01100101011101111110111011000111", "11010101111100111100100110110011", "10110000111101110001110111110010", "11100000000000111011100101001010", "01101010101010010000001111111010", "10000101011111110110110100000111", "10101100101110101011100011100111", "01000100010011100001000100111111", "11111101111011100111110100001010", "11101100100100100100010011111111", "00101101100110111100001011100111", "11010101000010001011111110101010", "11001111011001001111111001011001", "11101001000100110111111101101100", "11011010111001101011011111010111", "01011000100011011101111110010110", "01100111111110110010011101010111", "00011001011101100111001010110001", "10001011101111101111000110010111", "11011011010110100100110111110101", "11100110101100100110010011101110", "10110111011001100110100101101110", "11000010000110100000111110010011", "00000011110001111011100100001011", "10001101000110101110001000100111", "01111001111101100001100111100111", "11010001101111110010100111011010", "10101010111010110011101100110001", "01011000101101110011100001110110"};
    int C = 4019;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> adjacencyMatrix = {"000110100110001110011", "000011000010001000001", "000010000000000000000", "111000000000000000101", "001000000001111011000", "101100101011011110100", "000101000001001100001", "000110100000010110110", "001000010010101101011", "000101000000100011000", "110100000100000110010", "000010100000000100100", "001010100000000000110", "100100011100001011010", "100010100011110000000", "000010111000000011101", "010010001000010000010", "000010000000100000000", "101010000001000100010", "000010010001000010001", "011100000000000000110"};
    int C = 99;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> adjacencyMatrix = {};
    int C = 467;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> adjacencyMatrix = {"0100011010011011101000111101110110011010", "0011101000101000111111101110010110100010", "0000101001011011011000110010110010110110", "0000010100110011000010001110101011011110", "0010001010110011100100011000000111011001", "1000100000010000100011111110010010100100", "1100010100110011010000110010011100101111", "1111111011100011010111000101100101101011", "1100100000010010001110101111110111111111", "1100100100101110000110111001001101101101", "0001101100001010000000001110000100011001", "0110011111100101001011100000001111000010", "1100000100010110000110111111110101001011", "1010000001111011111011101001000100110011", "1010111010101000000111101111000100100000", "0111000011000010010011010101000000001001", "1101101010011100001100101111111101101100", "1111000010101000000011111111000000001001", "1111000111110110010111000111001001011011", "1111010101110000100010010100011100000101", "0010000111010001001101010010110101011100", "1010100000001101010000111101111000100011", "0010110110001011010101000101100001010101", "1101001010101000110010100000010100111011", "1111100101010111111100110001011011001000", "0010001001110111010110011010000000110000", "0111001001111000000110111000111011100001", "0000100100110101101010011110111101101010", "0001101101010100001101110110000000110111", "1111000011101100110000111101000010010001", "0101100101010100101000101101100001101010", "1010100010100001010011100100011011000111", "0010100000011011110000100101000101010111", "1110010111100000010000011010000000000101", "0000100100110000011110000001001000000011", "1011011000111001000111011001010010100011", "0111010100110111000111100000101111110111", "0010000111101011001011101010100010001001", "1110010101111111000011000011001000001101", "0100101011110111110011010101110000101110"};
    int C = 64787;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> adjacencyMatrix = {"011", "101", "100"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> adjacencyMatrix = {"01000001000000001100110100000100110101000", "00100011010000101010100010100101000101000", "11000000000000100001100001100010101101101", "01001010101110000000001001100001011000100", "11010000011001001100000101000000001000001", "00100000011110010100011110110101000000000", "01001100010101000001101111011100010011100", "00100000111010111010110100110001010011001", "01011001010111001111010110000111001000001", "00101011100001011100100011100000100000100", "01000110110000100000010111001011111000110", "10100100010001001100011101001010011100110", "00001011010100000010110100110001100110001", "00000101010000001010100010010110111011000", "01000101010000000000101001010000010010000", "01011001010000100111000101001111100000010", "10000100001000110011100000010000100111010", "00010000101101100001011010000100000101110", "00010001000010011000010000110010000001001", "00000010000100000110101111111010000011001", "01010011011010000000001001000101101001101", "01001000110101110101001011001011100000000", "00110001110001000001000010011010111000000", "11000001011001000100000001010101001001000", "00000000010101000001001101110000110000010", "00100100000101010101010100011101011010011", "00101100111000000001011110000100100010010", "10100010101000010010010010000100100000000", "00010100011110011010010110010001100010100", "01010010011100000011110001000000010010000", "10010000010100011000011000001100100011110", "00001001000010010000100010000000000000000", "00000011101010010000101111010001001000010", "01000100000101110100110010000010001000100", "10000010000000001000000110001011010001010", "01011101100001010000011001010000001000100", "10010100111010001011001001100001001100000", "00110010001100011110100101101001110000000", "00010000100111010001000001010001010000001", "10101000100100101010111110100000111100000", "00000011000001110101001101010011000000110"};
    int C = 219;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> adjacencyMatrix = {"01110010010110001100010100000", "10101101001001100010010011111", "00010001100111111011011011111", "10100010011011011000010111100", "01100011101011010110101010000", "01001010001100001001011011111", "10110001111011001111000100101", "10010010101100110000010011100", "10111101000011101100001111100", "10010000000100111110100110000", "10010001000010100110001010100", "01010100011011111111000001000", "11110010011101010110000101011", "01000000100110100100111100111", "10011110000000000100001100000", "01010100111001000101100000000", "11100101001001110110011001000", "10111000100101001001000101101", "10101000000101101101011100111", "11100111010000100110000111010", "11010101110000000011001110100", "00110011000000101111101011111", "10011110110001100111110101010", "01001110111011101101110011100", "10100010000010100101100000100", "11001010100101100011110110111", "10011111101111011110001010001", "10000101111000111000001010000", "11101000001100001010011011010"};
    int C = 466;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> adjacencyMatrix = {"00000000000000001010000100000000000110", "00000100000100000010000000000000100001", "00000100000000000011000000000000011010", "00001000000000000000000000000000001010", "00000001000000010000000000000000000000", "00000010000000000000000001000000000000", "00000001000000101010000000000000000000", "01000000000000000000000000000000000000", "10000010001000000000001000001000000110", "10010000001101100001000000000000000000", "00010010000000000000000000001000000000", "00000000000000010001000000000000000000", "00000000000000000000000000000000010000", "00000001000000000000000000000000000000", "00100000000000000000000101000000010100", "00000000100000000000000100000000000000", "00000000100000000100000000010000001000", "00000000000000100000001000000001100000", "10000100000000100000000010000000000000", "00011001000000000000000000001010000001", "00000000001000000000000000000000000000", "10000000000000000000101000011000011000", "00010000000001000000000000000000000000", "01100001000000000011000000110000010001", "00000010000010000100000100000000000000", "10000000010010000000001000000000000010", "01000000100000000000000100000000000000", "10000000000000001000000010001000000001", "00010110000010000000001000000001001000", "01000100000000000000000000000010000000", "00000000000000000010000001001100110100", "01010000100000000000000000000000000000", "00001000000000100010000000000001000000", "00000010000000000000001000000000100000", "10000000000010000001000010000010000000", "00000000001000000010000100000001000000", "00100000100000000101000000000001000000", "00000001010100000000001000000000010000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> adjacencyMatrix = {"0001010110110000", "1001100011010001", "0100001010100100", "0110000011010001", "0001011101010001", "0011100111110111", "0100010000100111", "0000100000001101", "1100000000000100", "0011010100100110", "1001010111010010", "1101001000100010", "1100010110100000", "0010001010111001", "0001001000011100", "1101000110001110"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> adjacencyMatrix = {"0000011000000000000001000001", "0000000000000010000000000000", "0000001100000000000000000000", "0000000010000000001000000000", "0000000000000000000000000000", "0000000000000001000000000100", "0000000000000000010000000000", "0001000000100000000000000001", "0000000000000000100000000000", "0001000000000000000000000101", "0000000000010000010000000100", "0000000000000100100000000000", "1000100010000000000000000000", "0000000000000000000000000000", "0000100101001000110000110001", "0000000010001000000000010100", "0010000110000010000000000000", "0010000010000000100000100000", "0000000000010000010000100000", "0110000000010000000000000001", "0000100001000100000000000000", "0000000000000000001010010000", "0000000100000100000000010001", "0000000001000000000000001000", "0000000000000000100100000000", "0000000100100000000000001001", "1000000000000001000000000000", "0000000000000010001010000010"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> adjacencyMatrix = {};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> adjacencyMatrix = {"000001001000000", "000001000000000", "000001000101000", "000000000000000", "000000000000001", "000000010000000", "000010000010000", "000000100000000", "000010000001000", "000010000000000", "000000000000000", "000100000000000", "000000000000000", "000000000100000", "000000001000000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> adjacencyMatrix = {"01110101101111111101", "10110111111011111111", "11011111111111011101", "11101111111111011111", "01110111111111111111", "11111011111110111011", "11111101111011111111", "11111100111011111111", "11111111011111111111", "11111111101111111111", "11010110110111111111", "11111111110011001111", "10111111111101111111", "11111101111110111111", "11111111111111011111", "10111010111111001111", "11111111111111010111", "11111111111101111011", "11111111011101011101", "11111111111111111110"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> adjacencyMatrix = {"011110100111011000011", "101011011110011100101", "000000010000111100100", "100001100000000000111", "101101010110101001010", "010000001111000100101", "110101000101011010011", "101011101001001010001", "010001000010011010000", "110011001001010101100", "011111010000011100101", "101110101010110100110", "101111101100010000011", "011001001111101110110", "011011111101010001011", "000010101010110000110", "010100111100110101010", "010100011010000010010", "101011010000101110010", "110011101100111011100", "010010000000101000110"};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> adjacencyMatrix = {"01111111010100011110011010111110111111100111", "10001111111011100110101110101101101101101011", "10011101110111111111001101101111111100011111", "01101111110101111101111111101111011011011111", "11010110111111000100101111111011110110111011", "11011010111101100111111010110111011111101011", "00111101110110110100011010010100101010111101", "11000110111101111011011100101010111111111111", "11111111010011111010111010101011111101111110", "00101011101111111100101100111111111011110010", "11010100110110000011111110001101000110001011", "11111010110011011000111100101111010101010110", "10110111111101111110111101101110101111111100", "10100001110010111100100111101111111100110110", "00110111111111000111010110111111101001101011", "11111011101010100111111101111110010111101001", "11111111011111110011011011111110011101110101", "11011001110101000001110000011101001000110111", "11001110011001001101101111000101110111100011", "11011100111111111110110111100111100011110011", "01011001100110111101001110011011010010110111", "10110011100101100111100011011000111101011011", "11111111110010101000110111111111111011010111", "10011011011011100111011010011010111101110110", "11111111100111110101101100000011111111110100", "11110101101111011111011110111110110111011111", "11111110011111100110111011011010101111110011", "11110111011100101111011100101100010110101101", "01111111110010111111111110110110110110111101", "11101111111011001101111011111011100001010111", "11110111110011111101001111110101111111101111", "10101001111100101011110110001100111110110110", "10011111111111101011011010100111011101111011", "01111111000111111110011111011011101111110011", "11111101011111000111111011011111110111111000", "11111110110110111100010111111111101011110101", "11111110111111011110111110110000110100101110", "11111101111111011111101101111101111110110011", "11101111011000111101110001110111110011011101", "01001100111011110101001110011010111101000100", "11101111111010100011011111111111011010000001", "11111011001111010101110101110011101100100011", "01111000110010011111111111101111111011111100", "10000101011101100111101011001100111111110010"};
    int C = 420000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> adjacencyMatrix = {"000011000000000001100001100101000000000101010", "001100000000000001100000000001000000000000001", "000001000000111101010000000000100101000000000", "101001100000001100001000000000000011000000000", "000100000000000000000101000101001100000000000", "000100001001000000001000010111000001010000011", "000001011101001100000000000001100000001001001", "000010000000110010000011100010010100000110011", "010001000001001000000000000000000010010000000", "000001000000010000000000000000100000000000010", "101110000000000010001000000001010000001000001", "010111010000000010000001010001001000100000000", "010000000000000000010010000000000100110001100", "000100001000001000101001100011100010000000000", "000100000100010000000000000000011100000000000", "000001000000000001100011000001101000110101101", "000000010000000100000010000101000001001011000", "100001010101000000100010000000000011000010000", "000100001100000000010000000001001000000101000", "000000000010010001100000101001010001000001111", "000000000010110000000010101000000001000010000", "100000100000000000000000010000000010001001000", "001001000000000001011100000000000000010010100", "010000100000000001110000000000010000000000000", "000010000000000000000000000001000000000000000", "000000011100010000100000100000000110000010100", "011000100000100000001100010100000000000000100", "011100000001110000100001000010010000001010001", "000001100011000010101001000000000000000011010", "100000001000100011000000100000100010000100101", "000000000110000000100000101010000010000010000", "000100010000000000011000000100001000000000000", "100010100000010001000001000001000000000000100", "000000001000000010010000000000000000000100000", "000000000000001000000000000000100000000000000", "010010000000011110010000010000010100101010100", "000001110000101000000010011000110101010000000", "000010100000000001000000011000001100000000000", "001000011000000000001001000001110000000001010", "101000001010000100000100000101000001100000000", "000010000111010010000011001000000001100000000", "000010000000000000000001000000001101000000010", "010000000000001010000100101001010010000000010", "000010000000100000000000000000000000101110101", "000000000010000101010000100001000000000101000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> adjacencyMatrix = {"0010000000000000000000000001", "0000100110000000000000000000", "0000010100000000000000000000", "0000000000000010000000001000", "0000000000000000100100000000", "0000100000010001010100000000", "0010000000010110000000110100", "0001000000000000000000000000", "0010000000001100001001000000", "0000000000000010001000000000", "0001000001000000000000100000", "1000000000000000000000000000", "1000000000100000000000000000", "0100000110000000000000100000", "0000000010000100001001000000", "0010000100000000000010100000", "0000110000000000000000010000", "0100000000000000000000000000", "0000000000000000010000000000", "0000100000000000000000000001", "0000010000000000000000000000", "0001000000000000000100000000", "0000000000000000000000000000", "0100001000110010000010000000", "0010001000000000000000100000", "0010001000000001000000000000", "0100000000000000000000000100", "0001010000010010000100100000"};
    int C = 99;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> adjacencyMatrix = {"0100000000000010000000000011000000000000", "0000000000000000000100000000000001000100", "0000100000000010000000000000000000000000", "0000100010000000000000000000000000110000", "0000000100100000000001000000000001000000", "0010001001100100000000001000000000001000", "0000000000000000000001000000000000000000", "0000000000000000000000000000010001001100", "0000000000000011000000000000100000100000", "1000000000000001001000001000000000000000", "0000000000000000000000000000000000000000", "0001011010000000001000001000001001000000", "0000000000000010000001010000100011000000", "0000000000000010000000000000000010000010", "0000000000010000001000000001000000001000", "0001000000000010000000010000000000000000", "0000000000101000000000000000000000000001", "0000000100010000100000000000000000000001", "0000000000011000000001000000000000001000", "1000000000000000000000000000000000001000", "0110000100000000000000000000010001000000", "0111000000100000000000000000100000000000", "0000000010000001000000000000010100000000", "0100000000000000001000000000000000000000", "0000000000100000000100000000010000000100", "0100000000000000010010000000000000000000", "0000000000000000000010000000000000100001", "0000000000000000000110000000000000000001", "0000000001000000000000001100000000100000", "0000000000000000010000000010000000000000", "0000000001001000100000000010000000010000", "0000001000000000000000000000100000000000", "0000000000100000100000100100001000010000", "0010000000000000000000100010000000000000", "0000000000010000000000000000000000000110", "0010000000000000000000100000101000000000", "0000000000000000000000000000101100000000", "0010000000100000010000000010100000000010", "0000000010000000000000000000000000000001", "0000010000001100100000000000010000000000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> adjacencyMatrix = {"0111000100", "0001000110", "0101100011", "0010000111", "0100010000", "0000100000", "0001100000", "0100001010", "0001001000", "1000000000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> adjacencyMatrix = {"011111010", "101101101", "110111111", "110011011", "111101111", "111110111", "011111011", "111111101", "101001110"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> adjacencyMatrix = {};
    int C = 4;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> adjacencyMatrix = {"01111110000110100001110000111011100000", "10000110111000111111101000011100111111", "10001000100000010101000100001111000100", "00101001100110110000011010000011011101", "11110011010000110110100100010110110110", "01010001000001001011101010110010101000", "10000101101110010101001001001101010000", "01010000111011110011000110100110100011", "11000011000000110111111100101001011011", "00101101001010101010110000101100010010", "10010110110000001000001111100001000000", "00101110110001011100001001101001111101", "11010110000101110110111010011110010010", "11001010001010111000110100110100111001", "11111111100001010110011111010110011101", "10010001100100000000001101001101111010", "01010111100001100011010110011111100001", "11101100100011110010110010000000011101", "10101000100110000000000101010011100001", "01011010101111010100011010111110010000", "10010011000000011000011011101100100000", "10010011110100100101101011001111000000", "10010010010011001000000011011100111101", "10101000011000010111001001001111011101", "10111100101001010111001100101011100001", "01111011000011001100010000001011111011", "00001001101101011100111001010010110010", "10111110010000110100001110100110011000", "10000011111011100011100111110011100001", "00111100100011000010101000011001100000", "00010000011001010110101110110101011011", "01000011111110111001110010000110010100", "10111101011110111010101111010010001111", "00011111001011010101010100101101001001", "01100000001110001111100000111110010001", "11110101100000110011111101011111011010", "01010001011101100000110100001101001001", "00000001110000100100010100010001011000"};
    int C = 2517;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> adjacencyMatrix = {"00000000000000", "00100000000000", "00000000010001", "00000000000000", "00000000010000", "00000000000010", "10000000000100", "00000000000010", "00000000000000", "00000000000000", "00000000000000", "00010000000000", "00000001000000", "00011111111110"};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> adjacencyMatrix = {"00001100110000000010011111111100110", "00101101101110000010110000101000001", "00011010000010100101001010000000110", "11100000010010110101000001100100011", "01010101100010011101000111000100111", "01001000011110000011101011101100000", "10001101111000000100100100000110111", "11000000000001010001111010001000010", "00000000000001000101100000101001010", "01000110001011101000001010001000111", "10110000010000010111100100001100001", "10010100110000101000111000100000001", "00000001110000110000011100110010010", "00100001111000100001000100000000000", "10000010101100011010010001011011001", "00000001101010101110100001100010111", "10001000010001010001000001000011110", "10110000000000001010111100011000011", "00000100101010110000011001000110110", "11010000001101111110100001011000010", "01101001000010110100000110001001100", "11100000111000110000101101100000010", "00001100000000001010110010101001011", "10101000000001100111110000001100100", "00011000000100111000110101000001101", "00010100110010010000000000001101001", "00101010101010011001000101010000011", "10101010110101001001011000000001100", "01000000011000010001101111000111100", "11000100000010000110001000000001011", "00001010000000110001101001000001110", "00011000010000100011001001110000000", "11101000010000001110011010000100000", "10000010100100000100110100011010000", "10010001000001001110100111111001010"};
    int C = 48930;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> adjacencyMatrix = {"00001010110000101000010000010001100", "10000000110000001000111100100000000", "01011010000001110010001110111011100", "11101001010010110110111010101000110", "00000000000000011111100101011100000", "01100010100000001001001101001000001", "01000101000010110011110010000000000", "01000010100111010101110101100000010", "00010011001011100000011001000010110", "10000000100010000010111001001111000", "00101000110101011100101000001001111", "00001001110001010100111000101000010", "00110000000101110001000101100000011", "01110110000100000101000000100001001", "00001111000010010000100100000000000", "00111100000010100001000110001100000", "10001011000011000010000100010001001", "00101110101011110011000100010100100", "10000100110110100001110101111100100", "01110000011100111010000100001100010", "10111100100100110001001010101000101", "00111011000010011001100101010111100", "10010100100100100100110111000101101", "10101110100111000011111000000010111", "00001101111010100010001000010011100", "00100010000100001010110000110011000", "10000001001111110110000001010000000", "00111010001011010000000101001010110", "01000101100100001010110101000100000", "00101100010000000000001001001000011", "00000001110001100011011010100001001", "01100000010000010101000010000110010", "00100100000001000000111100100111001", "10110001001100100100000010011000101", "00101001000001010011000001011100010"};
    int C = 1000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> adjacencyMatrix = {"01000", "00010", "01000", "11001", "01010"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> adjacencyMatrix = {"000001000000000", "000001000000000", "000000000100000", "000000000000000", "000000000000000", "000000010000000", "000000000010000", "000000000000000", "000010000000000", "000010000000000", "000000000000000", "000100000000000", "000000000000000", "000000000100000", "000000001000000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> adjacencyMatrix = {"000000000000000000000000000000000000000000", "000010000000000000000000000000000000000000", "000000000010000000000000000000000000000000", "000000000000000000000000010000100000000000", "000000000000000100000000000000000000000000", "000000000000000000000000000010000000000000", "000000000000000000100000010000000000000000", "001000000000000000000001000000000000000000", "000000000100100000000000000100000000000000", "000000000010000000000000000000000000000000", "100000000000000000000000000000000000000000", "000000000000000000000000000000000000100000", "000000000000010000100000000000000000000000", "000100000000000000100000000000000000000000", "001000000000000000000000001000000000000000", "000000000000000000000000000000000000000000", "000000100000000000000110000000000000000000", "000000000000000000000010001000000000000000", "000000010000000000000000000000000000000010", "010000100000000001000000000000001000000000", "000000000001000001000000000000000000000000", "000000000000000000000000010000000000100000", "000000100000000000000000100000000000000000", "000000000000000000000000000000000000000000", "010000100000001100000000000010000000000000", "000001000000000000010000000000000000000000", "000000100000000000000000000000000000000000", "000000010100000000000000000000000000001000", "000000000000000000000000000000100000000010", "000000000000100000000000000000000000100000", "000000100001000000000000000000000000000000", "000001000000110000000000000000000000000000", "000000000000001000000000000100100000000000", "000000000000000000100000000000000000000000", "000000000000000001000010000000100000000000", "000000000000100000000000000000000010000000", "000000000000000000000000010000000010000001", "000000000000000110000100001000000000000000", "000000000000000000000000000000000000000010", "000001000000000000000000000000000000000000", "000000000000000000000000000001100100000000", "000000000000000000000000100000000000010000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> adjacencyMatrix = {"0000000001000000000", "0000000010000010000", "0000000000000010000", "0000000100000000010", "0001000000010000001", "1000000000001001000", "0000000000000000001", "0000000011100000010", "0000000000000010000", "1010001000000000000", "0000001000001000000", "0001000000000010001", "0000000000000000000", "0000000000000000001", "0000000000001000000", "1000000000000000001", "0011000011000000000", "0010000000000000000", "0000000000000001000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> adjacencyMatrix = {"010010100100001000000", "100000001110011000101", "000000010000001100100", "000000100000000000000", "000000010100000000000", "010000000011000000101", "000000000000010010001", "101001100000000000001", "010000000010011000000", "110001000001010101100", "011110010000011100001", "000100000000010100110", "001110000000000000011", "010001000000001110100", "000000110100000001010", "000000100010010000110", "010000100100110101000", "000000011010000000010", "101011010000101100000", "110011100000011010000", "010000000000000000110"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> adjacencyMatrix = {"0010000000000000000000000001", "0000000010000000000000000000", "0000010000000000000000000000", "0000000000000000000000001000", "0000000000000000000100000000", "0000000000010001000000000000", "0010000000000010000000110100", "0000000000000000000000000000", "0000000000001000000000000000", "0000000000000010001000000000", "0001000001000000000000100000", "0000000000000000000000000000", "1000000000000000000000000000", "0000000110000000000000000000", "0000000010000100000000000000", "0010000100000000000010100000", "0000100000000000000000000000", "0100000000000000000000000000", "0000000000000000000000000000", "0000000000000000000000000000", "0000000000000000000000000000", "0001000000000000000000000000", "0000000000000000000000000000", "0000000000010010000000000000", "0000001000000000000000000000", "0010001000000000000000000000", "0100000000000000000000000100", "0000010000000010000100100000"};
    int C = 20000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> adjacencyMatrix = {"0000000000000010000000000001000000000000", "0000000000000000000000000000000001000100", "0000100000000000000000000000000000000000", "0000100000000000000000000000000000100000", "0000000100100000000001000000000000000000", "0010000000100000000000001000000000001000", "0000000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000000000000000000000100000100000", "1000000000000000001000000000000000000000", "0000000000000000000000000000000000000000", "0000010010000000000000000000000001000000", "0000000000000010000000010000100000000000", "0000000000000000000000000000000000000000", "0000000000010000001000000000000000000000", "0000000000000010000000010000000000000000", "0000000000000000000000000000000000000001", "0000000000010000100000000000000000000001", "0000000000011000000001000000000000001000", "0000000000000000000000000000000000000000", "0100000000000000000000000000010001000000", "0100000000000000000000000000100000000000", "0000000000000000000000000000010000000000", "0000000000000000001000000000000000000000", "0000000000000000000100000000000000000100", "0100000000000000010000000000000000000000", "0000000000000000000010000000000000100000", "0000000000000000000000000000000000000001", "0000000000000000000000000000000000100000", "0000000000000000000000000000000000000000", "0000000000000000100000000000000000000000", "0000001000000000000000000000000000000000", "0000000000000000100000100000001000010000", "0010000000000000000000100010000000000000", "0000000000010000000000000000000000000110", "0010000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "0000000000100000010000000010100000000010", "0000000010000000000000000000000000000001", "0000010000001000000000000000000000000000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> adjacencyMatrix = {"00010100", "00110000", "01000001", "00101011", "00010001", "00111000", "10100000", "10101110"};
    int C = 16;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> adjacencyMatrix = {"010001010", "101100000", "100010010", "010000001", "101001000", "000010101", "010001011", "111011101", "101001100"};
    int C = 99;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> adjacencyMatrix = {};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> adjacencyMatrix = {"01011000000010000001000000100000100000", "10000010000000110011001000000100010101", "00000000100000010000000000001000000100", "00001001100100000000010010000011010001", "10110000000000010000000000000100110000", "01010000000000000010101000100010100000", "00000001100000010101001001000001010000", "01010000110001000000000100000110100000", "01000001000000110011001100000000000010", "00100100001000000000100000101000010000", "10000000000000000000000011100001000000", "00001100110000011100000001100001101000", "00000100000001010010100000011000010010", "00000000001000000000110100100100011001", "00011001000000010000010000000000001100", "00010000000100000000000000001000111010", "00010001000000100001010000001010000000", "00100000100001110010110010000000010001", "00000000100000000000000000010001100000", "01001000100000000000011010111010010000", "00010010000000010000010001100000000000", "10000011000000100001100010001001000000", "00010010010010000000000010010100111001", "00101000001000000000000000001010010001", "10101100100000000100000000001001100000", "01100001000011000000010000001010000010", "00001000100000011000011000010010100010", "00001110010000100000001000000010011000", "10000000010000000000100100110011000001", "00111100000011000000001000011000000000", "00000000001000000010001100010101011010", "01000001101110000000010000000000000100", "10111001001100101000101000000000001011", "00011101001000000101000000000101000001", "01000000001000001010000000000000000001", "10010001000000010000010001001100001000", "00010000001101000000000000000101000001", "00000000100000000100000000000000000000"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> adjacencyMatrix = {"00011100111101", "10001011110100", "00000011011001", "11000001101010", "10000110111001", "10110010100011", "00111001100010", "00110110101100", "01110110001010", "11101101000010", "01010000010000", "11110010011011", "01000010001101", "00111011011110"};
    int C = 85;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> adjacencyMatrix = {};
    int C = 578954;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> adjacencyMatrix = {"00000000000010000000000000000000000111", "10000000000000010000000000000000000111", "00000000100000000000000000000000000111", "00000000100000000000010000000000000111", "00000000000000000000000000000000000111", "00000000000100000000000000000000000111", "00000000000000001000000000000000000111", "00000000000000000000000100000000000111", "00000000000000000000000000000000000111", "00000000100000000000000000000000000111", "00000000000000010000000000000000000111", "00000000000000000000000000000000000111", "00010000000000000000000000000000000111", "00001000000000000000001010000010000111", "01000000000000000000000000000100010111", "00000001000000000000000000000000000111", "00000000000000000001000000000000000111", "00000000000000000000000000000000100111", "00000000000000000000000000000000000111", "00000000000000000000100001000000000111", "00000000000000001000000000000000000111", "00000000000000000000000000000000000111", "00100000000000000000000000000000001111", "00000010000000000000000000100000000111", "00000000000100000000000000000000000111", "00001001000000000000001000000000000111", "00000000000010000000000000000000000111", "00000000001000000000000000000000000111", "00000000000000000000000000000000000111", "00000000000000000010000000000000000111", "00100001000000000000000000000000000111", "10000000000000100000000000000000000111", "00000010000000000000000000000100000111", "00000000000000000000000000000000000111", "00000000000000000000000010000000000111", "00000000000000000000000000000000000000", "00000000000000000000000000000000000000", "00000000000000000000000000000000000000"};
    int C = 500;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> adjacencyMatrix = {"010000000000000000000000000000000000111", "000000010001000000000000000000000010111", "000000000000000000000000000000010010111", "000010000000000100000000000001000000111", "000000000000000100000100000000000000111", "000000000000000000000000000000000010111", "000000000010000000000010000000000000111", "000100000000000000000000000000000000111", "000000000000000000000000000001000010111", "000000110000000000001000000000000000111", "000100000000000000100000000000000000111", "000000000010000000000000000000000000111", "000000000000000000101000000000000000111", "000000000000100000000000000000000000111", "000000000010000000000100000000000001111", "000000000000000000000001000000000001111", "000010000000000000000000000000000000111", "000010000001100000000000000000000000111", "000000000000000000001000000000000100111", "100000000000000000000000000000100000111", "000000000000000000000000000000000001111", "000010000000100000000000000000000000111", "100000000000000000000001000000000000111", "000000000000000000010000000001000001111", "000000000000000110000100000100000000111", "000000000000000000000000000000000000111", "000000000010000001000000000000000000111", "000000000000000000000000000000000000111", "000000000000110010000000000000000000111", "000000000000010000000000001000000000111", "000000000000000000001000000000000000111", "000000000010010001000000000000000000111", "000000000000000011000000000000000000111", "000000000001000000000000000000000000111", "000010001000000000000000000010000000111", "000000000000000000000000100000000000111", "000000000000000000000000000000000000000", "000000000000000000000000000000000000000", "000000000000000000000000000000000000000"};
    int C = 1;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> adjacencyMatrix = {"01001100000011010110011000000000000100111", "00101001111100100100011100010011010101111", "01010000011011001000110111000100110001111", "01100101011110001101010000101100010000111", "01100010010110001100100010101100001000111", "00011001000001001101101100101110010001111", "01110000111100100100110110111000011000111", "10101100100000010001000110110000111010111", "11111101001110000000001110101011100000111", "10000100000100111010110101101110000011111", "01110010100101100000110001000000001010111", "10101100101000100111010101111100010001111", "00001100010000001100000011011001100010111", "11101011001100100010110000100111101010111", "11010000111001001101101110001001110100111", "00100111000101100001001111101111100001111", "10011110111000010010011000111001001111111", "00110101110100011011101000100110100001111", "10001001000100000000100111010110110001111", "01111000000100010000011011110000000101111", "11000000100100100010000101010100100000111", "00011101001110111011000111000011100101111", "11111010000001110111100001010100000010111", "11100001001101000101100010111110000111111", "00101011000011001000000001110000011001111", "10111000101000110010111110110001010000111", "00010000010000110101010010010011010001111", "11110101000010010001110001101000011110111", "01111111001000011111110100000000000101111", "10110000100000010100011000011010000111111", "00100000011111001011010111100100100000111", "00000001111111011011101100011000101111111", "11010100001101111010001111000001011101111", "01101000010000100000110001100110100000111", "11000011100001111010010100110101010010111", "10000101011010111000000001010001010001111", "00010110011011000001111100101101001101111", "01100011100101001100001100001001101000111", "00000000000000000000000000000000000000000", "00000000000000000000000000000000000000000", "00000000000000000000000000000000000000000"};
    int C = 16987;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> adjacencyMatrix = {"0000010000100001010011000111000010111001111", "0000011001000101100000011000000000101011111", "0000101010100000001010011000100000001001111", "0100001000010010100000000011011100001110111", "1110001000010010001001010011100000111010111", "0010001111010101010000010000110010000001111", "0011000010100101101001000001100000000000111", "0001000001000001000100000001000011011010111", "0100010000000001000001000000010010011010111", "0000010100000000110110001001101000001100111", "1000110000000000100110001001000100100010111", "1001001000100100110110100000000010100011111", "1001011110000001001001001011101010000001111", "0100000110000000110010101011101100000100111", "0110011110000100000000000100101010000100111", "1000100010000100000000111000000000010000111", "0100101000000000001000000000000000010110111", "0001010000000011001010110100100000110001111", "0010001110101011000001010001101000100000111", "0100000100000011000000111100000011000100111", "0100000000101010010001000010010001000000111", "0111000011010001011100000010010001110101111", "0100000010000111111100000000000000010000111", "0100100101001011000101001001000100010100111", "0100000010001011010100000100101001011000111", "0100101000010000100000001001001011000000111", "0000111000100001100100001100000100101010111", "0000101010000100001000000100000001001000111", "0100000111110110100100100001000100010001111", "0001100110100000000110000110001000000000111", "1101000010000010000100000000000010000000111", "1000001001001001000000010010000010100100111", "0100000010000010000010010100000100000011111", "0010010001011001000010000001001110100000111", "1101000110010000101000001010001001000101111", "1001000110011000000010000001001000100100111", "0000001000101010101001100001100100000010111", "0001001000000111110001010000010011010000111", "0000011101000000100100101001000000000101111", "0000000001100000000101000011010000010000111", "0000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000"};
    int C = 1609;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> adjacencyMatrix = {};
    int C = 10000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> adjacencyMatrix = {};
    int C = 833401;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> adjacencyMatrix = {"01101100111100", "00110000011000", "11010101101011", "10001001100011", "00110100010000", "11000000100101", "00000000000000", "00010000100001", "00000000000000", "00011100101010", "00000000000000", "10110001010000", "11000100011101", "01110111011110"};
    int C = 41;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> adjacencyMatrix = {"010000001000000000100000000", "101101001110010110001111101", "010001000000000000010001001", "101010100100110000100111010", "001100111010100100111111110", "011100100111001101010010000", "001000001000010000000000000", "100100001000100100010011111", "001001010010000000000100010", "001100111000000101111000010", "010100100101000001000100001", "000000001000001000000000100", "100010000010000011001101100", "010001001000000000010110110", "011011111100100111011101001", "101111111001111000010000010", "010001001011110100000011011", "000001110000000000000010100", "011001000011101010011001110", "010101000110001100001000001", "101111010111000010110100010", "001011001001100000000000101", "000000000000000000000000000", "011001010000010001110000001", "111110100100010110011011000", "011000100101000000010000000", "000010000000101100000100000"};
    int C = 6353;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> adjacencyMatrix = {"0010000001100001010", "0000000000000000000", "0101101011001010011", "0000000000000000000", "1000010000001000000", "1010100100000000000", "0010100001000100000", "0100001011110010000", "0001111101110101011", "0100000000110000000", "0000000000000000000", "0000100100000000000", "0001011010000000000", "1010100100001000110", "0000111000000101000", "0000000000000000000", "0001000000100001010", "0011101001000011001", "0000000000000000000"};
    int C = 26426;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> adjacencyMatrix = {"0111100101000", "0010010001100", "0000000001000", "1010000011100", "0100011010110", "0000000000000", "0000000000000", "1100010010010", "1110000000000", "0100001100010", "1100111101000", "0100000110001", "1000000000000"};
    int C = 19252;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> adjacencyMatrix = {"0111010000000101", "1000000010001000", "0101000010000100", "0100001001010100", "0100001010001100", "1110001000010001", "0110100101101011", "0010110000000001", "0100011000110011", "1111101010000001", "0000010000010010", "1111010000001000", "0011101011010100", "0000000000000000", "1110000110010001", "0001000000000000"};
    int C = 15620;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> adjacencyMatrix = {};
    int C = 11570;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> adjacencyMatrix = {"00000100000000000001000010", "10011101001001011101100110", "01000001001111110010010000", "00000111000010001110101000", "10110111100111001110000110", "10100000111010000000010010", "10000000111000001010100000", "00010110000100010100001001", "10100001000010000000000000", "00010101001110110111001000", "10000000100001000100001000", "10000000111000100100001010", "00100000000001000011100000", "00000000000000000000000000", "00000000000010000000000000", "01100000100000000100000000", "00101000000010000110010000", "10010000000100101011010100", "00010001000101001100100001", "10111001000110000100001011", "11110010000010100111011000", "00000000011000101000000100", "11001011111001101110010100", "00000111000001111001111010", "01001010011000101011101101", "10000001101000101110100010"};
    int C = 29515;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> adjacencyMatrix = {"0101011000000", "0000000001000", "0001000000100", "0000011101101", "1101001110110", "0010000000100", "0000000000011", "1001000000010", "1101001100001", "1111110100011", "1000100000000", "0000000000000", "1011000000000"};
    int C = 27118;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> adjacencyMatrix = {"001110100001001001110000001000110", "100100010101100010110011010001110", "000110010111100111010010001011111", "001011011010010011000111100010001", "000100100011000110100000000101000", "000000000000001000101010001000001", "000000000010000111000110100000101", "000000101000000000000001000100000", "000001000001001000000001000101101", "010010010000100100001000001001001", "111011001000001011010100001001011", "000001010000110100110100110001010", "000000000000000000000000000000000", "001110101100101110000101101100010", "000000010000110101010011101000010", "000000000000100000000000000000000", "000110010010110000000100100000110", "000010110110010110110001001000000", "110011000110101000011100011000111", "001011000011000010001000110001100", "101000101100000100000000010101100", "001111000000110001000000000111101", "100000000000000000000000010000000", "101100110010000011011010100101101", "111111010101111101100101010011011", "001011110001010101011100101101101", "010000000000100010111010010000000", "010001000000000000100101000000001", "000000010000000000000000000000000", "001010101001100100000000111110100", "000000000000000000100000000000000", "011010110000001001001101001110000", "110001110010101100000110100010010"};
    int C = 24592;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> adjacencyMatrix = {};
    int C = 5674;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> adjacencyMatrix = {"0011000010001010001000001111001011", "1001011100010011101110000101101110", "0101111000000010000000011100001001", "0000000100001000001000000100000000", "1000001000000000011000000111000000", "1011000100010011010100011101110000", "0101010110000001001010000001010100", "0010001001011000000100011101100101", "1100000001000001000001100000000001", "0100011000100001000000000000100010", "0010000101000000001000001001000000", "0001000001000000000000000000000001", "1001111000000110101110001110100001", "0000000000000000000000001000000000", "0100101000111000100001100000000000", "0001001000100000001001001100101010", "0010001000111000000111101001100001", "0000000110010000000110011000000001", "0110000000100100100000111100100110", "1111100001000010111000010101000001", "0011001100001111100000101010001001", "0111101101000010000100110100000101", "1111110111110000010001011000010010", "0000000000000000000000000000000000", "0001101101010011011111000101000100", "0100001111111101010100010011000101", "0001000000100010001110011000010000", "1011010001111110001000110000010100", "0100000000100110000010000011001000", "1000011000110101101000110011100000", "0010100101101101010001000100010001", "0000111000100011010001000000000010", "1000001100001100111010010000101100", "0000000000000000000000000000000000"};
    int C = 28034;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> adjacencyMatrix = {"0000000111110110011101", "0010111100110111010010", "0000000000000000000111", "0000000100110000000000", "1100000100001000101100", "1101100110110100000011", "0110000101100000100101", "1001100010010001010110", "0010111000111111011010", "0100101000010110111011", "1011101011010100100011", "0001100011101000011100", "0000000110000000010011", "0000000000000000000000", "1111000011010001010100", "0000000101000000010010", "1011011110010101000000", "1000011000111100001011", "0000000000000000000000", "0111101100011111010010", "0110000001110011000101", "0000001000010011111000"};
    int C = 23136;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> adjacencyMatrix = {"00000000010010000000001011010000000000001", "00001000001110000011000011011000010010001", "11000101000100000001101101001011100000101", "01001111110001110010011001001111000101110", "10000010000000000000010010000000001000000", "01000001011001001000100100101001011110000", "10000000000010001011100010000000000000000", "01010000000100000011011000100001100010000", "01000000010100111001100110000100100100011", "00011100101010111111010110110001001000010", "00000001000001000010000101110001011011000", "00000000000000000000000000000000000000000", "00100101100001101111000110100000111000000", "00000000111000001010100101011110001011011", "00110001011110000101110110000011000011100", "00000011000000000000000000001010001010000", "11100011101000000000111011011101010010000", "00101110101111100001100100011101011010110", "01001000100000000001101000010000000001010", "00111100001110110010100000110000101101111", "00010001000000010000000100000001001000011", "00010000000000000010000000000000000000010", "00011101010011100010100000110101110010000", "10000000010101000011100001100000100000000", "00110101011100000000000000001011011100100", "00000000000000000000000000000000010000000", "00000000000000000000000000000000000000000", "01110110011101010111110000000111110011100", "00110000011010001001001000000100111000101", "00000000000001110010010100000001100100111", "00000000000000001000000101010000001011000", "00100100000001010010001100000100000010011", "01000110110000101011011000010101001010000", "00100010010000001001110000000000100000000", "00000000001110000000000000000000000000010", "00111000010000000000001000001100000000001", "01100101010100100100010100000010100100001", "11101111100000010010110000000010110100110", "01000000100000010000000000100000000000000", "00000100001000000101000000000000000000100", "01010011100000011011101100111000011010010"};
    int C = 16930;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> adjacencyMatrix = {"000000000000000001100001100", "001011110000001001010010101", "000000000010010000100000000", "000001000000000100001000010", "000000000101100001000110010", "001000001011110100000001100", "001101010100110101111110010", "010001100000010111000010000", "000000010001000111101011001", "101111010010001001001001101", "001010001001010000001010000", "010000001110111101001000110", "100011011010010101000100101", "000000000000000000000000000", "000000000000000000000000000", "011100111100111001111001101", "000111110001100001001011111", "100010100111010010000100001", "110010010100101100000011110", "111010101110110010100100111", "010100010010110001000101100", "101110011001101000111000010", "010111001101001110001000000", "000011010001100100100000000", "001100000001001000001010001", "100000010001000000000000001", "101010011000110101111100100"};
    int C = 9895;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> adjacencyMatrix = {};
    int C = 494;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> adjacencyMatrix = {"0101111011100001010000001010", "1010110000111011001101001011", "0000000001000000000000001000", "0000000000000000010100000000", "0101001000100000001010011000", "1100100001100000111111001010", "0000000000100000000000100010", "1011101000100011001100100110", "0000100000000000000000000000", "1000000100100000111001001000", "0000100000010000010000010000", "0000001000000010000000000000", "0001000000110000001011110000", "0100000011010000110000100001", "0110100110011100011000000110", "0001000001010010001100110011", "1000101000111011010101001111", "0011010100000011001100110010", "0100000010110001010000000011", "0010000000000000000010100110", "1101010011011011100000010110", "1001100000111011000100110111", "0000101000101010100100010001", "1001110011100100000000100001", "0000000000000000000000000000", "0000100000000000000010000000", "0111001011100000000111100000", "0101110111100110001010110000"};
    int C = 3002;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> adjacencyMatrix = {};
    int C = 12007;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> adjacencyMatrix = {"0100000010111000000101001110000101000101011", "0000000000000010010100100100011010001001011", "0000000000000000000000000000000000000000000", "1010010011100011101101111011011000010000001", "0011010010011100111000101001000111010010010", "1100000110110100011110100000101101000100000", "0100000010000000000000000000010000000000000", "1010100000011001000000000001010111000010010", "1000000100000100000000001000000011010000001", "1000010000010100101000011100000000000000000", "1000100010010000100100000000000000000011010", "0110001010101100111100011001000110011000010", "0001000001010000001000011000001100001000111", "0100000000000000010000000000010000100010001", "0000000000000000000000000000000000000000000", "1000000010000000001000010000001000100101001", "0000101110111101001101010100101100011101000", "0000100000000000000000000000010000000000010", "0000000001000000000000000000000000000010000", "0110000110000100000011110101101100110000110", "0111001001101000000000110010011000000001000", "0000101100010010100000000000010010001101010", "1000010100010010110110000010101000010010000", "0010000000000000000000000000000000000001000", "0001010101010000010001010101000100100000010", "1011011110110111000101010000111001010001100", "0010000100100010100000000000100000100000000", "0000000010001000000101010000010000101000010", "1000000000000000000000000000001000000000000", "0011000100100100001100100010000000000100000", "0101000001010001011000100000000110000000000", "0000000000000000100000100000000000000000000", "0100101100111011110100000110110100011101001", "0000110111000001011110011011000110100000101", "1010000001000000001000000100000010000000000", "1000000001000010011010000100000000000000000", "1000011000001101000110010110011101010110011", "0000000000000100000000000000000000000000000", "0101011000000101000100000000010001100101001", "1000000100000000010000000010000000101000001", "0010000010000000000000010100111100010010000", "0001100001001010001100011000110110000110100", "0000000000000110011000010000010100100000010"};
    int C = 4868;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> adjacencyMatrix = {"010000100101110", "101110111100011", "000000000000000", "000001000101101", "110001110010000", "010100101111001", "010001011000001", "001110000010001", "101001110110000", "000000000000000", "000000101101110", "000000000000000", "101011101001000", "011110101100000", "100010000001000"};
    int C = 5475;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> adjacencyMatrix = {"0000000000000000000000000000000", "1000000101110000000000000001001", "1100000000000100101011101000101", "0000101011111110000000111111010", "1011001000100100110100100001100", "0000001000100010001000000100000", "0000000000000000000000000000000", "0000001000000000011001000100000", "1000000000000000000000000000100", "0100111010110001000001111011000", "1001000000000010001100111111100", "0001001000100011100001001100011", "0110000100000010000010001000110", "0001111100001000010011001110111", "0100000000100100000001000001000", "0100011011101110101111000110010", "0000000000100000000000100100000", "0011100000100000000000000000000", "1000001110000111100110110000000", "0000000000000000000000000000000", "0110010111011001000001001000111", "1001001111010111111100100011100", "1110000110001000101100010110010", "1100000001000001000100001001010", "0000000000010000000000000000000", "0010000000000110001010000010000", "0000101010011000000000011100010", "1001100111111111001101100110011", "0011000000110000100111010000001", "0101100110101010001110101000101", "1100111101010101101110100001010"};
    int C = 32213;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> adjacencyMatrix = {"001011100000001100010", "000000100000000010100", "110001000000000010101", "100000000100010000000", "100100010100101001110", "001110101111110110010", "011100011001100010001", "100000000000000000000", "101000000111000100001", "000010000000000000001", "110000001101010001001", "000000010000000000000", "000000011000000000100", "001101111101101101000", "100100001111110010000", "000000010001010000000", "000011011101000100101", "010101100110101110001", "000000000101010011001", "001000010110100001000", "000110100011011101100"};
    int C = 14526;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> adjacencyMatrix = {"0101111000011001111111000101", "0001011011001000000000001101", "0100001001011100000000100111", "1100111110110001000100000000", "0000010000001000000000000000", "0000100001010010010000000000", "0000000001000000000000000000", "0000111010000000000100010010", "0100000000000000000110010000", "0010010100000011100010100010", "1011001111001000110110100010", "0101010000100000001000110000", "0100000000000010000010000001", "0011010010111000001111100000", "0000000000000000000000000000", "1100110000001110000000010000", "0100011001001000000100101011", "0001010010010111101000001010", "1100100011001010000000000000", "0101100110101101011011001100", "0010100000000010110101110000", "1001001100001010111000010110", "0000010001000100000011001000", "1110001010100000110100000001", "0001100001000000000000000000", "1100100010001111101000100000", "1001001011001001101110111101", "0011100101001001000000001000"};
    int C = 3876;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> adjacencyMatrix = {"011100110101111010111000101", "000001010100001001110010000", "000000000110110100101100110", "001001010000111000000000000", "000001001001000100000101000", "100100001011100100101000100", "100001011100100000101100000", "001000000000010000100001000", "111010000100000100010000011", "000001010010001100001000000", "000000000000001000000000000", "011010010100100100000000100", "001000000000000000000000000", "010000000000000111000100010", "001001010010000001000001000", "000100010001010001000010001", "000010001011001100100000010", "010100100010001000000100100", "001001100110101110000001110", "000100101101100010101000100", "000001000000000000000001000", "101000010110110101110010010", "001111010101001100000100010", "000000000000000000000000000", "000000100100000000000001010", "000100000110010010000011000", "100000100110011101000111000"};
    int C = 153;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> adjacencyMatrix = {"000000000000000000000000000000", "100100011000001010010101111000", "000000000000100000100010010001", "000000000011000100000000110001", "000000000000000000000000010010", "011000010110001111011111101110", "101000001011100100011101110000", "111011000101100010010111110001", "001000010001000001000000000000", "011110110000010011000001111000", "101111110100001100010001010100", "010001010110011001101001011100", "000001001110010010100000100010", "011010001000100100101100010101", "100100010110100000011100010100", "110001111000110010110110011100", "011010010110011000011101010101", "000000000000000000000000000000", "100101000110110010000010011011", "000100101001000010000000001001", "001010010000000100000100001000", "001010000000010001100010000000", "100010010010000001111100010001", "100110101110011001111010000110", "010001110100000001000101000000", "000000000000001000100010000000", "010000000000000000000000000000", "000000011000100100000000000010", "111010010111110001010000000000", "000011000000000001000000000000"};
    int C = 292;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> adjacencyMatrix = {};
    int C = 12457;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> adjacencyMatrix = {};
    int C = 18859;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> adjacencyMatrix = {"000100010100000000111000010000000100101000000", "001010000101111001001111010100101011101010111", "110100001000010100001010000100101010010001001", "100000001100110000000010101000000000101000001", "000000100000111000001011000100000000000000000", "000110110011000101100011110100010101110011110", "000010011000000010001010000010001000100000100", "011110000011111011111011011001001101110000100", "111111110110100101000111011011101010110011010", "100001000011110000101100110011000010001000001", "001000001101001000000100000010000001000000000", "000000000110000010000010000100000000010110011", "000110000110001010011001010001110100101110101", "010000000100001011100001110000001010100101000", "000010000001100000000010000100100010010000011", "001000001100010011010001100110010111010001110", "111100011000011101010000011011100011010110010", "001000000000000010000000001100000000000100000", "001010010011000110011010101000000001000001100", "100001010011001000000000100010001010111000001", "001000011101100001000010101010010001111001000", "000000010001011001100000110100000010111100100", "110000010000000000001100010010100101001010010", "101000011010000111010010101000100000000001001", "101001001010011100001001011011001110100011001", "000100000000000000010100000010010000000000000", "001000000100100000001001010010000011111101101", "000100000010000110000000011000001000000000000", "100011110010101101110100001000110000010011011", "000000010000100000010010100010000100001010000", "001001001000000100010000000001000011010010011", "100110010100000111010001100111101110110100100", "001100000000000000010000000000000000000000000", "000111000100011000101100100100010010110001011", "101000010001111111110101111000111100111000100", "100010001100100100100010100001010100000010100", "001110000100000001101000111000011001011110011", "000000000000000000000000000000000000000000000", "000000001001100000010000011000000001000000010", "010000010110101000001000001000001001100000001", "001001011110010101000001000100001000010001100", "000000000000000000000000000000000011000000000", "001010101100011101100110100110100000010110010", "110100100110001100000101001110000100100100001", "000000000000000000000000000000000000000000000"};
    int C = 19841;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> adjacencyMatrix = {"0000000000000000000000", "1010000000000011000000", "0000000000000000000000", "0000010000000000010010", "1000010000000100111100", "0001101111111011110011", "1000010000011101011111", "0011100001000000111100", "0000010100000010001000", "0100111100001010100110", "1111001000010011001000", "0000000100000000000000", "0100010010100010110001", "1100111010010010010111", "1000010100011001100110", "0010001110001100001010", "0000000100010000000000", "0100001100001000100001", "0011101110001010100001", "0000000000000000000000", "0100001000100001110100", "0000000000000000000000"};
    int C = 19885;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> adjacencyMatrix = {"0011000101000000000", "1000100010000011110", "0000000000011010000", "0010101000000011010", "0001001101111010001", "0000000000011000000", "1111110100001011110", "0010011000101001100", "1101100000000001001", "0101100000001000110", "1000000011010101000", "1001110000000001000", "1111000011000100101", "1101110001101001100", "0010001001000000101", "0000101100000000001", "0111011111111011011", "0000001000100010000", "1010000110000100000"};
    int C = 18530;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> adjacencyMatrix = {"00110101101010010101110011101011", "00100010010000000110010001110000", "00011010101101101100010110010000", "10000000001010000100100010000000", "01000100110000000001011011100001", "11101011100110111101110100100011", "10110000100001100001000001010001", "01000110101111110000101111110110", "00000011000000000000001000010000", "01100100001110101001100111001010", "01000100000000010000100000101000", "10010000010000100010000001000000", "00101101110100001001000011011100", "00000000000010010101000000100010", "01100101000001000011000100000010", "11111010010001001001101100011000", "11101011010110110101010000111110", "11110010111010110011000000010010", "10101101110011000001111000000100", "01000010111100000000000001000000", "00011001000100100011010000000010", "01010100011101010100100101001110", "00001011000010000000000000000000", "00010010100000000001000000110100", "10111001000110001111110000101100", "00010110001001010100101010010001", "00111010010000110111011011000110", "01111001010001011110011010100011", "00101000011000011010100110000100", "01100100000001000000001011010010", "10101001110000010010010001000100", "01000100101101001110100011101110"};
    int C = 6304;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> adjacencyMatrix = {"00000000000000001010000", "00111010000100101000001", "11011100011011001011110", "00000000000000000000000", "00000000010000000100101", "10100000100110110101000", "10010101100011111000010", "10011000111110011001000", "00000111011111010111011", "10000100101101110101000", "11010101000000011001101", "00000100001000000100000", "00001000000000000100001", "01100000001100110000010", "00000001000000000011100", "00000110000010000000000", "00000000000010000010100", "00000101100000001000000", "10111010111111001000010", "10000000111101001010100", "10110111001110110100000", "00010101010110110111001", "10000000101001000100000"};
    int C = 19040;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> adjacencyMatrix = {"00010000001100111010111010110101100", "00000010000000011100001000110010000", "01001111100110110000100100110100111", "11101101100001101101010000100101111", "00110101010110110010010111110101011", "00001010100011011000000110000001011", "00000100000011110101001110100001001", "00011010011011000010010110000001101", "11001101011011111011100001100010111", "01001000001000000001000000000000000", "00101100000100001000100011000110001", "10100010110010010000000001010110000", "00110100000001000100000000001110100", "10110011000000001101101111010010101", "10011001011111011000010001000101101", "11000100010101100110000110001000001", "01101111000101010101111011110110100", "01000101000000001011110101000000100", "00101010100110010000000011111110010", "01101111000000100110110100111000001", "11000110001010110010011110101011001", "10100111111111011011001101100100011", "10011000110001000011100010101101010", "01100010110011011100001010101100100", "00000000001000000000000000000000100", "01000000001001000100000100000000001", "01001110010110010001000001011111101", "01111110010110010111011010100100010", "00001000000000100010100110100000001", "00000100100000110000000000010000100", "00101100111100111001001111100100110", "11010010011111110110011000011010100", "10000011010101000000101000000101001", "00110001101001001010101000000010100", "01010101100011100010011110111111010"};
    int C = 11449;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> adjacencyMatrix = {"000001010011011010000000010000001000000011", "000101111011110100011110111010110111001101", "000000010000000000000000000000000000101000", "001011011111001001100111001111100000000001", "001000101001000010110001100110100000011001", "100000010100110100000000000000000000000001", "000000000000010000000000111000000000010110", "100001001100001100001001101110000100111001", "000000000000000001010010000000000000010001", "110110110011000010000000111000001000101111", "011001111001101111011110111111000010101110", "111000000100111110100101100001001010000000", "100100001000000000100000011101100110000100", "100101110001001110111000010110111010100101", "011111110000000000101001110000100100111001", "101000111000100001100001011100000010101001", "000000000001000001000000010010000000000001", "111111010001101100110000100101000000001001", "001101111001100010001001100110010101101100", "110000000110000100000110010100010001001011", "011001110110000100100000100110001000101010", "100101100100011000110000111010000110100111", "100010100111101010101100100000000100100001", "001100100011100010100110110010101111111000", "001000000011100000011100000110000101100010", "000000011001001000011001100000010100010000", "001000000000000010010101110000010010000000", "011100000110011011110011010010001101101001", "100010000000000100000000010000000000000001", "001100110000101110000000101000100000001111", "001100000100000000000010010000000000001001", "001010000000000000010011000000000100001110", "110010010000001000000011000000010000001010", "001111011111000001000100100001001001100000", "000000010001000000000000000000000000001000", "000110110101001101111100110101010010001101", "010000101111010101010001001100010001010000", "000100010000101000100000101000000110000110", "101101000111111000110011000001010010110111", "110000100010011110001010001100101010011000", "000001000001010110100011011010000100011100", "001010010010010101000100000001000000010100"};
    int C = 29433;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> adjacencyMatrix = {"0000001000000000000000000000000010000001100", "1000011100101111111010010000101100000101100", "1000010000000110001000000110010101101010101", "0010000001110010010101000000000001101011000", "0100011100110111000110001011100100111010010", "0000000000000000000111110000000100100001001", "1101000100111100101110111111101100111000011", "0110101010100000100111001100101101001111110", "0100000101110001000000010011001001000101110", "1001111110100011111110000010101101011001111", "0010000000001000000010010010000111100100000", "0100000000000100000000010100010000101000000", "0000000000000110011000000100000101000101000", "0000100000000010001000000001001000000000000", "0000001000010100100111010001000000000000100", "1011001000100000100011010000100100000001011", "0011111011111100011000001101101110011010011", "1100010110000001000011000011000001000000011", "0011000111010001010110111000111011110101100", "1011011010010101000000101010110010100110001", "0000001010111000001000010000100000000000000", "1010010000001100001010101010000010100000001", "0000001100011101010000010101001000000001111", "0111000101100001000010001000000010000001110", "0010000000100000000100000000000000010000100", "0100000000100010000101000000110100000000000", "0010001101011011111001101101110110100001101", "1010110100111000001100111100101111001010110", "0100011110000110000011000000000100000111011", "1000101001000001001001101110000000111101001", "0100001100100100100010010010100111111000000", "1000000000001000101110001000000000000000000", "0101000100110011101101101010010000010001101", "0001000001010000100110000001000010000000011", "0000100001101011110001011010000100000000010", "0000010000000100001000000111000001000001000", "0010010110100110111100111010010011100100000", "0000000011000000001010000000110000001000100", "0000000001000000000100011101000000100101001", "0011001110111010011011111000101101101110010", "1110000110100000100000001101000100001000001", "0110101010111100000110010001110001100011001", "0110110010111011001110110001010110111101010"};
    int C = 27074;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> adjacencyMatrix = {"0001110100001001001010110011010111110011", "0000100001010110001110010000000100001000", "1001010101110000100000000110101101110110", "0010001000100000001001000000001000001000", "0111010001110101010110000000010011000110", "0001000001101000000100000000000111100110", "0010000001000110100000110000010101000010", "0000000000000111000001010100010100010101", "0010010000000100111000110001010000101001", "0100000000000000001101100000000100001000", "0011111011011010100111100001110010101001", "0000000100000010000001010000001000010000", "1110111111010011011011000000001011010011", "0110010010100001111100001010001000000010", "0101011110000001011110110011100000101000", "0000000000000000001000001001000000001000", "0010111100110111011111101110111111001011", "1000000001011100000001101100010100100001", "0010010010111001010000010101011010010001", "0001000101000100001011100101000000110000", "0100011000000100110000000000000000000001", "0000000100010101011010010001000000000000", "0001000000000010110000000011100001100010", "1010110101100000010011000001011000100001", "0110100111111110010011100110010011011000", "1010110110100101111011001011001101001100", "0111111111011110011110010101100001010001", "1000111101101000000001101010000000000000", "1000100001010100110001000000001001000000", "1100100101101011001000011100100110111001", "1011101001101000000101100110000001000100", "1100000000000100101000000000100000011010", "0100000110101000010001000100100000101001", "0111000100011000000010011101111110011011", "1111110011011011101110100011011001000100", "0010110100011011001000110000001101001101", "0000000000000000000010001010000000000000", "1011100100011000010110101010011011011011", "1011100010011101110111111010001100110100", "0010101001010111101001010000111100101010"};
    int C = 24699;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> adjacencyMatrix = {"0011000010000000001011000100000100000110010", "0000010010001110110000111001011100001000011", "1000001011000000010000110100110011010100011", "1000011001010011011111100111111111010011010", "0100011101011100111011111000101011111011000", "1111001001000000000001000001010011100000010", "1100110010001111110111010110001011110101010", "1110111000110011000010101100101111010111111", "1000101101100101100110111011010011100110000", "0001000000000000011100000010000000000000010", "1001001100010100001010001000001110010111111", "0101001011000101110011111011110111101011011", "1011000111010000010001111111010000100110111", "1010100000100010100000001100010100010010101", "0000000000100000001000001000000100110000000", "0000110100111100000010000000010000101100100", "0100100000010010000110001000000000100100000", "0010010011000001000001000011000010110110010", "0000000110010000000010000000010110000000001", "0100100100100000001000010000010011100010011", "0000000010000010000000010000100010000000000", "0000001101010101000000100001000000001011000", "0010001000110000100010000001001010000010000", "0101000100000000010000000011100111111000001", "1110100100011000011010000000010010111000001", "0010010001001000010100100001101100100000000", "0000001100101010100100010001000011110110010", "0000100100100001010000000010101100000000000", "0111000001000001101000101001000000001111101", "0000010001000100100010111000100000000000000", "0001001000000001000000011011000001101000011", "1111011011000100100101011011001010101010010", "0001111000111001110010001111110001010010000", "1101111011111001011001001011001110111011111", "1010100001000011000101001000100110001110110", "0101101011100000111111011000110010101000111", "1000000001000000001000000000000010000100000", "1111101000100011001100101110111011000010001", "0000100100000000000001001000000100001000010", "0000000000100000011000000000000000000000100", "1001101000110010111011111001001011101100001", "0100000011000000110000100101010000110011101", "0000100000001100000000000111010010101000010"};
    int C = 57460000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> adjacencyMatrix = {"01110010111110110111101110111101101", "10001010000010001001000000100000100", "10000100000000110000010011100000000", "01100001101110110111101101111010101", "10000000000000001000000100000001101", "10011000111110110001101101111111101", "10011100111011101001001100011000010", "11001110111000100000111000101111101", "00110100010001001011100000001010100", "01000101101000100000001100000001000", "00000100010100011000100000110010001", "01000101000000011000000010001000000", "00111111100101010011001110111100100", "01110011110010011000110100000110011", "11000110111001010011011011000100100", "10011011010110100000000001100010010", "00100101000100000101000110101000100", "01100000000110000000000001100010000", "00000001110011001100111111011101000", "00111000110010110000101000101010111", "00110110010001100101000110101101110", "00001110011100110000001010101101101", "01110001100000000110000001110001101", "00011000011000101110010011101011010", "11111001000011001001001001010111110", "00000001000000001100001000001100000", "00001001000100000010100010000111000", "11101111110011011000010110001100001", "10001101001000100111000000000101001", "10111111000010100101011001111011111", "10110010100001110101111111010001010", "01000001001100000010000000000100100", "10010000000100101000010100101001011", "01001011010000110000001001011000001", "11101100101000110101011110101100010"};
    int C = 27931;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> adjacencyMatrix = {"0100000000000110000000111", "0011100100000001000000111", "0000010001011000000000111", "0000000010000000000010111", "0000001000100000000000111", "0000000000000000100001111", "0000000000000000000001111", "0000000000000000000001111", "0000000000000000000001111", "0000000000000000000001111", "0000000000000000000011111", "0000000000000000010011111", "0000000000000000000011111", "0000000000000000000011111", "0000000000000000000011111", "0000000000000000000111111", "0000000000000000001111111", "0000000000000000000111111", "0000000000000000000100000", "0000000000000000000011111", "0000000000000000001100000", "0000000000000000001110000", "0000000000000000001111000", "0000000000000000001111100", "0000000000000000001111110"};
    int C = 41;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> adjacencyMatrix = {"0100000000000110000000111", "0011100100000001000000111", "0000010001011000000000111", "0000000010000000000010111", "0000001000100000000000111", "0000000000000000100001111", "0000000000000000000001111", "0000000000000000000001111", "0000000000000000000001111", "0000000000000000000001111", "0000000000000000000011111", "0000000000000000010011111", "0000000000000000000011111", "0000000000000000000011111", "0000000000000000000011111", "0000000000000000000111111", "0000000000000000001111111", "0000000000000000000111111", "0000000000000000000111111", "0000000000000000000011111", "0000000000000000000000000", "0000000000000000000000000", "0000000000000000000000000", "0000000000000000000000000", "0000000000000000000000000"};
    int C = 415;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> adjacencyMatrix = {};
    int C = 18306;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> adjacencyMatrix = {"011000100101111", "001110111000111", "000011001101111", "000001011011111", "000000110111111", "000000000001111", "000000000011111", "000000000011111", "000000000011111", "000000000011111", "000000000000100", "000000000000010", "000000000000000", "000000000000000", "000000000000000"};
    int C = 6326;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> adjacencyMatrix = {"0100000000000000000000111", "0010000000000000000000111", "0001000000000000000000111", "0000100000000000000000111", "0000010000000000000000111", "0000001000000000000001111", "0000000100000000000001111", "0000000010000000000001111", "0000000001000000000001111", "0000000000100000000001111", "0000000000010000000011111", "0000000000001000000011111", "0000000000000100000011111", "0000000000000010000011111", "0000000000000001000011111", "0000000000000000100111111", "0000000000000000010111111", "0000000000000000001111111", "0000000000000000000111111", "0000000000000000000011111", "0000000000000000000001000", "0000000000000000000000100", "0000000000000000000000010", "0000000000000000000000001", "0000000000000000000000000"};
    int C = 41;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> adjacencyMatrix = {};
    int C = 18306;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> adjacencyMatrix = {"010000000000111", "001000000000111", "000100000000111", "000010000001111", "000001000001111", "000000100001111", "000000010011111", "000000001011111", "000000000111111", "000000000011111", "000000000001000", "000000000000100", "000000000000010", "000000000000001", "000000000000000"};
    int C = 6326;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> adjacencyMatrix = {};
    int C = 41925;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> adjacencyMatrix = {};
    int C = 18648;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 40;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> adjacencyMatrix = {};
    int C = 6322;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> adjacencyMatrix = {"01111111111111111111111111111111111111111111111111", "00111111111111111111111111111111111111111111111111", "00011111111111111111111111111111111111111111111111", "00001111111111111111111111111111111111111111111111", "00000111111111111111111111111111111111111111111111", "00000011111111111111111111111111111111111111111111", "00000001111111111111111111111111111111111111111111", "00000000111111111111111111111111111111111111111111", "00000000011111111111111111111111111111111111111111", "00000000001111111111111111111111111111111111111111", "00000000000111111111111111111111111111111111111111", "00000000000011111111111111111111111111111111111111", "00000000000001111111111111111111111111111111111111", "00000000000000111111111111111111111111111111111111", "00000000000000011111111111111111111111111111111111", "00000000000000001111111111111111111111111111111111", "00000000000000000111111111111111111111111111111111", "00000000000000000011111111111111111111111111111111", "00000000000000000001111111111111111111111111111111", "00000000000000000000111111111111111111111111111111", "00000000000000000000011111111111111111111111111111", "00000000000000000000001111111111111111111111111111", "00000000000000000000000111111111111111111111111111", "00000000000000000000000011111111111111111111111111", "00000000000000000000000001111111111111111111111111", "00000000000000000000000000111111111111111111111111", "00000000000000000000000000011111111111111111111111", "00000000000000000000000000001111111111111111111111", "00000000000000000000000000000111111111111111111111", "00000000000000000000000000000011111111111111111111", "00000000000000000000000000000001111111111111111111", "00000000000000000000000000000000111111111111111111", "00000000000000000000000000000000011111111111111111", "00000000000000000000000000000000001111111111111111", "00000000000000000000000000000000000111111111111111", "00000000000000000000000000000000000011111111111111", "00000000000000000000000000000000000001111111111111", "00000000000000000000000000000000000000111111111111", "00000000000000000000000000000000000000011111111111", "00000000000000000000000000000000000000001111111111", "00000000000000000000000000000000000000000111111111", "00000000000000000000000000000000000000000011111111", "00000000000000000000000000000000000000000001111111", "00000000000000000000000000000000000000000000111111", "00000000000000000000000000000000000000000000011111", "00000000000000000000000000000000000000000000001111", "00000000000000000000000000000000000000000000000111", "00000000000000000000000000000000000000000000000011", "00000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000"};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> adjacencyMatrix = {"010001100", "001001100", "000101110", "000010111", "000001111", "010000000", "000110000", "000100001", "100001000"};
    int C = 10;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> adjacencyMatrix = {"01110100110010010100100110000011010010001111101000", "00111000000010011101011101010000001101010101001101", "11001000000011101101001011111000110011000000101010", "11101001101001010011111010010000001011000100011001", "01010001011101001010110001011000101001000100000100", "00000001100001011110111011110000010111010011010101", "01001000100110001110001010111001101111101010010000", "00101100110010000000010100110111110110011010000000", "11101011000010111101110110010111111111000111000000", "10001011001000011001101101000001011001001101001100", "11010011010100101100011001111010111101010010111101", "00000010100011111110100010010011000111101101000010", "00011010101101100100011000000001100110110110011111", "01001000000000011001111001010101010010111101000011", "01110010101100011010011111100011010000110110111000", "01110001100100101100100011110111000111101100000010", "01111001110001110000101101000101101001010110001000", "11011101011110000010001101000010100011110001100010", "00011110011110111101011010100001000010111111101010", "01100101101101001110110000111011000010001000110110", "10100110010111011010001011100001001110101001000110", "10100111011101110111000111000010100111001011100101", "11000000010011000011010111000101011110011110110010", "11100000000110010011100011010001111100010110100001", "10100010101110101111100100010011000111000010110000", "11000111101100010111000000100101110010011010011001", "00101110111100111001001111000101111001010101011110", "10111111101000001110000011001001001001011110110010", "10111111000101111001000011010111000010010111011001", "00001000100101000101010100101001011010001100011011", "10110111111101000110001111001001000010101100010010", "00110010111100101000110100010100000111001011000100", "11100110100000011011110001101110011010101001001000", "01001111111011011111001110011101101010111100101000", "10110101100111011010111011011010000011011001100110", "01100011011100100110111000001100010000000001011010", "00001101101001100000110110111010001101011011110001", "01000001100100101110100010011111111110010100110000", "10111101001010000110100111000101110001010000011011", "11000110010100111110110011000101100111000010011111", "01100100001000001011001111011101111110000110111110", "10101001010101111001111001100111100000010001000001", "10101010001011001011000110011111101100100000011011", "10010010000001010101110011001000011010101000110010", "10100000101011000000000010110010110111100100010110", "10100010111011010011100010110011011001111101101100", "10001001101001001000001000101011100010110100100110", "11001000001110110110010111000100000000110100010010", "10111111001010100101101000110010010111111000110101", "01000111000001111010101011011110001100010001001100"};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> adjacencyMatrix = {};
    int C = 15;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> adjacencyMatrix = {};
    int C = 50000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> adjacencyMatrix = {"001100001001111111111100010001010100101101010", "001111111001111010110111011110100001001011011", "100010100011111011011100010000111011111110000", "011001110010010111111011010000111001100110001", "000101011110001011111100000000111010010000110", "011000100110100110001100111001100100100000011", "001011000101101000111101110111110101101101110", "110111101101100001111111001101100100101110111", "000110010101100000101000110000010100001010100", "111010100011001001000111111110000001011001111", "001011010001011000111100100100100101101100101", "101101011000110110001001100000000010100000100", "100000010110011001010001000010101000000101100", "000110000111001100001111100001011000000100111", "011000001000110110010010100000111001010010011", "001101010001001001100100110101110001000101100", "111100100011110100111110111011000100011000111", "001111010110110110110010101111010011011101110", "100000110111010000010000010010001000101000011", "010000100000111101000010101100000101011000101", "101101101111111110100111100111101110100000110", "000100100011111111001010110011000110000001100", "010101101001100011100101101001011011101111011", "011000010100110000011100111101000101100110110", "001001001110001110001000001111110010101110101", "110001011001100100110010101001110101000001010", "000110000010100110101011100111011010001011111", "000000011110011011101110100010000111011110110", "001101101011100101000000101000010000101100011", "110110101011111111000011100000001000011110101", "110100111110001010000000001011001100000001001", "001000111111011010110000111000101011101100101", "100111110110111000110101111101100001001101000", "010000110001101110101001111000001001001111111", "010111011000110001000010001100011001101111101", "100100010010111101000110011100011010000001110", "011011100010010111100000010001000000000101101", "111001100011111101110110100011110101100111000", "101110100010110111101111100100101010110001111", "100001000101000101111010101011011110000000111", "011111010111101001100001011001101010110100001", "111100000100010101001101100000001110100100011", "010100111010011010000000110011001010011011000", "000011111111010000101000011001101010100000001", "100011111010101011111111110011010101100101010"};
    int C = 4039;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> adjacencyMatrix = {};
    int C = 10;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 43;
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> adjacencyMatrix = {};
    int C = 12000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> adjacencyMatrix = {"01111111111111111111111111111100000000000000000000", "00111111111111111111111111111111000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> adjacencyMatrix = {};
    int C = 100;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> adjacencyMatrix = {"00111", "00111", "00000", "00000", "00000"};
    int C = 1000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> adjacencyMatrix = {"0001010111101001101110111010000011011101000001", "0000010010001000101000011010000100000111101010", "0101011000001010110001011011011011111111101011", "1110011110111010000011000010010001111111100111", "0110011000110000001100010101101001100011100101", "1010000110111011110110110000101001100000111001", "1110100010110011011000100100111000111000100010", "1111110010101110101110001011001100100110010111", "0011101000000010100001100000101001101010111011", "1101101000101111100000001111001101110111010001", "0000111011010110001101101011100101000000101010", "0100001011000111101101010111111110000111000010", "0100001111010111010011111000101000000000101110", "1100000001001001000111111011010110000111000111", "0111011001011001111101101110001101011111011000", "0100110100001000011000110111010100111100000110", "1001111111010111011000110001000010001100011011", "1011111011001000100101111010001100111000110100", "0000111001101110000001011110000001000100000000", "0101101111001100011011101110110100011110101110", "1110001011101000101101111011111001001010101100", "0111110000100010100010111101010101101111000000", "0111011111010111101001000001011001101010110100", "0011111000001000101010001011000000011101001010", "1101010011101001101000000011001100101001101100", "0000011111111010000101000011001101010100000001", "1000111110101010111111111100110101011001010110", "1000100101100010111011101000011111000010000011", "0000001110000100100001111110001110100001001011", "1110101101101110100110011101100000111010110100", "1101100110100101010111011010100101101000000110", "0101000000100101000100001110111001001110000111", "0000100101111100011001001110001100100100100000", "0111010000110101100110011110011100100000000010", "0000000001101110111010000001110100001011110101", "1001011001110011100100110110011111101100000000", "1101110110111010101000000101110100100000011110", "1101010101001101011001111001110001000001111001", "1001100010100101010011101101011111001001010110", "0010110011001101101101011010101100111010001100", "0110000111010000100101001000101010011101010111", "1101100000110101101010100011010011011111101000", "1000101110010011010100011001011111110100000100", "0111000000000001100001010011010001001110100001", "0100110001111001000110101011101000010101100001", "0001110111011001101111001011100101010111011100"};
    int C = 6822;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<string> adjacencyMatrix = {};
    int C = 208488;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    vector<string> adjacencyMatrix = {"01111111111111111111111111111111111111111111111111", "10111111111111111111111111111111111111111111111111", "11011111111111111111111111111111111111111111111111", "11101111111111111111111111111111111111111111111111", "11110111111111111111111111111111111111111111111111", "11111011111111111111111111111111111111111111111111", "11111101111111111111111111111111111111111111111111", "11111110111111111111111111111111111111111111111111", "11111111011111111111111111111111111111111111111111", "11111111101111111111111111111111111111111111111111", "11111111110111111111111111111111111111111111111111", "11111111111011111111111111111111111111111111111111", "11111111111101111111111111111111111111111111111111", "11111111111110111111111111111111111111111111111111", "11111111111111011111111111111111111111111111111111", "11111111111111101111111111111111111111111111111111", "11111111111111110111111111111111111111111111111111", "11111111111111111011111111111111111111111111111111", "11111111111111111101111111111111111111111111111111", "11111111111111111110111111111111111111111111111111", "11111111111111111111011111111111111111111111111111", "11111111111111111111101111111111111111111111111111", "11111111111111111111110111111111111111111111111111", "11111111111111111111111011111111111111111111111111", "11111111111111111111111101111111111111111111111111", "11111111111111111111111110111111111111111111111111", "11111111111111111111111111011111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111110111111111111111111111", "11111111111111111111111111111011111111111111111111", "11111111111111111111111111111101111111111111111111", "11111111111111111111111111111110111111111111111111", "11111111111111111111111111111111011111111111111111", "11111111111111111111111111111111101111111111111111", "11111111111111111111111111111111110111111111111111", "11111111111111111111111111111111111011111111111111", "11111111111111111111111111111111111101111111111111", "11111111111111111111111111111111111110111111111111", "11111111111111111111111111111111111111011111111111", "11111111111111111111111111111111111111101111111111", "11111111111111111111111111111111111111110111111111", "11111111111111111111111111111111111111111011111111", "11111111111111111111111111111111111111111101111111", "11111111111111111111111111111111111111111110111111", "11111111111111111111111111111111111111111111011111", "11111111111111111111111111111111111111111111101111", "11111111111111111111111111111111111111111111110111", "11111111111111111111111111111111111111111111111011", "11111111111111111111111111111111111111111111111101", "11111111111111111111111111111111111111111111111110"};
    int C = 1000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    vector<string> adjacencyMatrix = {"0111000", "0000111", "0000111", "0000111", "0000000", "0000000", "0000000"};
    int C = 10;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    vector<string> adjacencyMatrix = {"011100", "000111", "010110", "000000", "000000", "000000"};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    vector<string> adjacencyMatrix = {"0110001", "0001111", "1100001", "0000000", "0000000", "0000000", "0000000"};
    int C = 1000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    vector<string> adjacencyMatrix = {"00000000000000000000000000000000000000001000", "00000000010000000000000000000000000000000000", "00000000000000000000000000000000000000000000", "10000100000000000000000000000000000000000000", "00000000000000001000000000100000001000000000", "00000000000000000000000010000000001000000000", "00000000000000000000000000000000000000000000", "01000000000000000000000100000000001000000100", "00000010000000001001000000000000000000000100", "00100010000000000000000100000000000000000000", "00100000000000000000000000000000000001000010", "00000000001000000000000000000010000001000000", "00000000100000000000000000000000000000000000", "00000000000000000000000000000001000000010010", "00000000000001000000000000000100000000000010", "00000010000000000000000000000000000101000000", "00000000000000000000000000000000000000001000", "00100001000000000000000100000000000000100000", "00000000000000000000001000000000000000000000", "11100000000000000000000000100000000000000000", "00000000100000000001000001000010000000000000", "00000000001000000000100000001000000100000000", "00000000000010000100000000000000000000000100", "00001100000000100000000000000000000000000000", "00000000000010000100000000000000001000000000", "00000001000000000000100010000000000000000000", "00000000000000000000000110000010000000000100", "00000000000010000000000000000000010000000000", "00001000000001000000000000000000000000000010", "00000001000000000000000000000000001000000000", "00000000000000000000010000100000000000000000", "00000100000100000000000000000000000000000000", "00000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000", "00000000000000000000001000000000000001000000", "01001000000000000000000100000000000000001000", "00010000010000000000000000010000000000000000", "10000000000000000000000000000000000000000000", "00000000101000000000000000000000000000000000", "00000000000000000000000000000000000000000000", "00000000000000000000000000000000000100000000", "00000000010000000000000100000000000000000000", "00000000000000000000000000000001100000000000", "00000000000000100000000000000000000100000000"};
    int C = 540047;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    vector<string> adjacencyMatrix = {};
    int C = 123456789;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    vector<string> adjacencyMatrix = {"01110000", "10110000", "00001111", "00000000", "00000000", "00000000", "00000000", "00000000"};
    int C = 10;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test160() {
    vector<string> adjacencyMatrix = {};
    int C = 100000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 160: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 160: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test161() {
    vector<string> adjacencyMatrix = {"010", "001", "100"};
    int C = 5;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 161: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 161: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test162() {
    vector<string> adjacencyMatrix = {"00100010101000000001101110111001101101101101101100", "10010001001111101001011101010111111111110011001101", "10010101111101110110101111100101101111101101111010", "10101111111011011101111011111001110110110111101110", "11110010011111001110001011111111011111111010001101", "11111010111111111111111111111111111111111101111111", "11111101101110111110101111111001111011011110100101", "00110100011010101110110111101110111101011001000111", "00000010010101100000000110100100101011000100000000", "01101100100100011111111110110001110111010110110011", "11001110110111111111011111010111010001010111010001", "01111111110011101111111101101111011101101110111101", "00000011100000100101010001101010110111000010110000", "11110111111110111111111111111111111111111011110111", "11111101011011011111110111010110011110010111101100", "10111111011101100101111010111110101111111011111110", "00000011110000010000100000010000101000000001110101", "10101111101010101011111101010111011000001011100111", "10100011101000100001110000001100011011011011010011", "10011100100000110100111111110111100010001001111110", "11110111111101101100011110011101110010011101000001", "00001010000000000011100000000000000000000000000000", "00001000111000000000010000001100000100101010000100", "01111000101001011111010011111101001111111101110111", "00000100000100000011000100010000000011110100010001", "01100100110111100101011000110111111000110001001110", "11111111111101110001100111011111011110111111101101", "11010110101010000000000100000000000000000000000001", "01001010010011000000000101000010100100000000000000", "00110100010010001010010011010000001000000001010111", "00010100000010100000000001101001010011100000100010", "10100110111100001001011000110010000000101000000000", "01110111111011110111111101111010011111111111101010", "11111010010111110111111110111111101111111111101110", "00111110001011100011010111111001110110011011111010", "00100000000000010000101001000010000001010100001000", "10100011000000001111110111110000101001111101011101", "11111100111100111111111111111111110110111111111111", "00010101110001010111000111001010000000001100100010", "01000100001000000100101100100101010011000100000000", "10111101111111110000110111111100111111110010001111", "01000000000010001010000100100001010000110000100010", "01110110111011111110110110001110100110010101001011", "00001000011000000000000001000000000000000000000100", "11111111111111111111111111111111111111111111011111", "11111011111111011111111111000110111111101111101111", "11111111101110101110111111111111111111011111110011", "00101110100000000011000000010001100010100000100010", "11111111111111111111111111111111111111111111111101", "10111111111011111111111111011111111111111101111110"};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 162: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 162: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test163() {
    vector<string> adjacencyMatrix = {"01110000000000000000000000000000000000000000000000", "00000000000001100001111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 163: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 163: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test164() {
    vector<string> adjacencyMatrix = {"011111", "000000", "000000", "000000", "000000", "000000"};
    int C = 15;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 164: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 164: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test165() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 165: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 165: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test166() {
    vector<string> adjacencyMatrix = {"0110000101", "0000100111", "0001000111", "0000100111", "0000010111", "0000001111", "0000000111", "0000000000", "0000000000", "0000000000"};
    int C = 10000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 166: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 166: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test167() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 167: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 167: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test168() {
    vector<string> adjacencyMatrix = {"01111111111111111111111111000000000000000000000000", "00111111111111111111111111100000000000000000000000", "00011111111111111111111111110000000000000000000000", "00001111111111111111111111111000000000000000000000", "00000111111111111111111111111100000000000000000000", "00000011111111111111111111111110000000000000000000", "00000001111111111111111111111111000000000000000000", "00000000111111111111111111111111100000000000000000", "00000000011111111111111111111111110000000000000000", "00000000001111111111111111111111111000000000000000", "00000000000111111111111111111111111100000000000000", "00000000000011111111111111111111111110000000000000", "00000000000001111111111111111111111111000000000000", "00000000000000111111111111111111111111100000000000", "00000000000000011111111111111111111111110000000000", "00000000000000001111111111111111111111111000000000", "00000000000000000111111111111111111111111100000000", "00000000000000000011111111111111111111111110000000", "00000000000000000001111111111111111111111111000000", "00000000000000000000111111111111111111111111100000", "00000000000000000000011111111111111111111111110000", "00000000000000000000001111111111111111111111111000", "00000000000000000000000111111111111111111111111100", "00000000000000000000000011111111111111111111111110", "00000000000000000000000001111111111111111111111111", "00000000000000000000000000111111111111111111111111", "00000000000000000000000000011111111111111111111111", "00000000000000000000000000001111111111111111111111", "00000000000000000000000000000111111111111111111111", "00000000000000000000000000000011111111111111111111", "00000000000000000000000000000001111111111111111111", "00000000000000000000000000000000111111111111111111", "00000000000000000000000000000000011111111111111111", "00000000000000000000000000000000001111111111111111", "00000000000000000000000000000000000111111111111111", "00000000000000000000000000000000000011111111111111", "00000000000000000000000000000000000001111111111111", "00000000000000000000000000000000000000111111111111", "00000000000000000000000000000000000000011111111111", "00000000000000000000000000000000000000001111111111", "00000000000000000000000000000000000000000111111111", "00000000000000000000000000000000000000000011111111", "00000000000000000000000000000000000000000001111111", "00000000000000000000000000000000000000000000111111", "00000000000000000000000000000000000000000000011111", "00000000000000000000000000000000000000000000001111", "00000000000000000000000000000000000000000000000111", "00000000000000000000000000000000000000000000000011", "00000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000"};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 168: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 168: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test169() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 169: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 169: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test170() {
    vector<string> adjacencyMatrix = {"011100", "001110", "000111", "000000", "000000", "000000"};
    int C = 1000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 170: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 170: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test171() {
    vector<string> adjacencyMatrix = {"001101010100000010000111010100011000111", "100111101011101111111001001011110110110", "000010110101000011011000000111010100010", "110000010010010101001101010000010011011", "111000011001010111111100111001001111110", "110010111000011110000001101000101101011", "001100010010000110110111111011100100100", "101110001111011110010010000010111000110", "100110100010111110010010111100111100100", "010110011011011000101111111010011011111", "001000001101001001011001001100111000101", "101100000100110010100011010001110111110", "011100110110000001010010010001001010101", "111110010010001001001110110011000000110", "010100111011010000101100001000011101110", "100011110101101011110001111001100101110", "110001000001001000110001111000000001000", "001111100101000010100011010011100010001", "110100010011100110001110001101111110011", "110000011100101000100000101001101100010", "000010001111110000100100000101011110010", "111001001001100110001010011101011110110", "100101111010001011011001000110111010000", "100010111011010101000110011111001110111", "001111110100001110111011000100111110011", "000110001011001111001111100111110100010", "100010111101111100111100100011100111011", "000010000100001010101110010010010010010", "110001000100001001000111111001101011111", "111011010110110000010100110100001001010", "101000001001000010000010111101011001101", "011000011111101000011010010101100000101", "110000010101010100100110110111110110110", "110111011101101010110001000010011000111", "010110001110001011111110101000010101110", "111011111100001000000011111111111100011", "010010011000000000111111010111001011011", "001111011010101111010011000101010100101", "100111011110000101110010000110101111010"};
    int C = 4;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 171: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 171: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test172() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 172: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 172: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test173() {
    vector<string> adjacencyMatrix = {"0101010", "0010101", "0000010", "0110111", "1101001", "1001000", "1111110"};
    int C = 45;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 173: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 173: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test174() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 174: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 174: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test175() {
    vector<string> adjacencyMatrix = {};
    int C = 536870475;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 175: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 175: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test176() {
    vector<string> adjacencyMatrix = {};
    int C = 1000000000;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 176: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 176: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test177() {
    vector<string> adjacencyMatrix = {"0111111", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000"};
    int C = 40;
    StarsInGraphs* pObj = new StarsInGraphs();
    clock_t start = clock();
    int result = pObj->starryPaths(adjacencyMatrix, C);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 177: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 177: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    test160() == 0 ? ++passed : ++failed;
    test161() == 0 ? ++passed : ++failed;
    test162() == 0 ? ++passed : ++failed;
    test163() == 0 ? ++passed : ++failed;
    test164() == 0 ? ++passed : ++failed;
    test165() == 0 ? ++passed : ++failed;
    test166() == 0 ? ++passed : ++failed;
    test167() == 0 ? ++passed : ++failed;
    test168() == 0 ? ++passed : ++failed;
    test169() == 0 ? ++passed : ++failed;
    test170() == 0 ? ++passed : ++failed;
    test171() == 0 ? ++passed : ++failed;
    test172() == 0 ? ++passed : ++failed;
    test173() == 0 ? ++passed : ++failed;
    test174() == 0 ? ++passed : ++failed;
    test175() == 0 ? ++passed : ++failed;
    test176() == 0 ? ++passed : ++failed;
    test177() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=19849563&rd=10674&pm=7593
********************************************************************************
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <cstring> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 
 
using namespace std; 
 
typedef long long int64; 
typedef unsigned long long uint64; 
#define two(X) (1<<(X)) 
#define twoL(X) (((int64)(1))<<(X)) 
#define contain(S,X) (((S)&two(X))!=0) 
#define containL(S,X) (((S)&twoL(X))!=0) 
const double pi=acos(-1.0); 
const double eps=1e-11; 
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;} 
template<class T> inline void checkmax(T &a,T b){if(b>a) a=b;} 
template<class T> inline T sqr(T x){return x*x;} 
typedef pair<int,int> ipair; 
 
class StarsInGraphs 
{ 
public: 
  int n; 
  int64 A[60],C[60][60]; 
  int f[60]; 
  int starryPaths(vector <string> G, int L) 
  { 
    memset(C,0,sizeof(C)); 
    for (int i=0;i<60;i++) 
      for (int j=0;j<60;j++) 
        C[i][j]=(j==0)?1:(C[i-1][j-1]+C[i-1][j]); 
    n=G.size(); 
    for (int i=0;i<n;i++) 
    { 
      int deg=0; 
      for (int j=0;j<n;j++) 
        if (G[i][j]=='1') 
          deg++; 
      A[i]=0; 
      for (int k=3;k<=deg;k++) 
        A[i]+=C[deg][k]; 
    } 
    memset(f,0,sizeof(f)); 
    for (int i=0;i<n;i++) 
      if (A[i]>0 && A[i]<=L) 
        f[i]=1; 
    bool changed=false; 
    for (int step=0;step<n+n;step++) 
    { 
      changed=false; 
      for (int i=0;i<n;i++) if (A[i]>0 && A[i]<=L) 
        for (int j=0;j<n;j++) if (A[j]>0 && A[j]<=L) 
          if (G[i][j]=='1' && A[i]<=A[j] && f[i]+1>f[j]) 
          { 
            f[j]=f[i]+1; 
            changed=true; 
          } 
      if (!changed) break; 
    } 
    if (changed) return -1; 
    int result=0; 
    for (int i=0;i<n;i++) 
      checkmax(result,f[i]); 
    return result; 
  } 
};

********************************************************************************
*******************************************************************************/