/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2287
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class RandomFA {
public:
    double getProbability(vector<string> rulesa, vector<string> rulesb, vector<string> rulesc, int finalState, int maxLength);
};

double RandomFA::getProbability(vector<string> rulesa, vector<string> rulesb, vector<string> rulesc, int finalState, int maxLength) {
    double ret;
    return ret;
}


int test0() {
    vector<string> rulesa = {"0:100"};
    vector<string> rulesb = {""};
    vector<string> rulesc = {""};
    int finalState = 999;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> rulesa = {"1:100", "0:100"};
    vector<string> rulesb = {"1:100", "0:100"};
    vector<string> rulesc = {"1:100", "0:100"};
    int finalState = 1;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.75;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> rulesa = {"1:25 2:25 3:25 4:25", "0:100", "0:100", "0:100", "0:100"};
    vector<string> rulesb = {"", "", "", "", ""};
    vector<string> rulesc = {"", "", "", "", ""};
    int finalState = 3;
    int maxLength = 5;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0020604395604395605;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> rulesa = {"1:25 2:25 3:25 4:25", "0:100", "0:100", "0:100", "0:100"};
    vector<string> rulesb = {"", "", "", "", ""};
    vector<string> rulesc = {"", "", "", "", ""};
    int finalState = 999;
    int maxLength = 5;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9835164835164837;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> rulesa = {"2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35"};
    vector<string> rulesb = {"0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "3:79 2:10"};
    vector<string> rulesc = {"1:100", "2:100", "3:100", "4:100", "5:100", "0:100"};
    int finalState = 3;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.002676338903044717;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> rulesa = {"2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35"};
    vector<string> rulesb = {"0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "3:79 2:10"};
    vector<string> rulesc = {"1:100", "2:100", "3:100", "4:100", "5:100", "0:100"};
    int finalState = 3;
    int maxLength = 0;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> rulesa = {"0:54"};
    vector<string> rulesb = {"0:77"};
    vector<string> rulesc = {"0:89"};
    int finalState = 0;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.054965800470734884;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> rulesa = {"41:8 43:8 7:4 2:9 27:1 37:3 46:10 31:3 44:1 32:10", "48:1 40:3 43:1 16:9 15:3 41:3 23:9 38:3 37:4 21:9", "23:2 39:10 16:2 41:10 26:2 2:6 47:8 40:10 30:9 5:4", "31:3 47:2 17:9 24:2 44:1 15:8 29:1 38:3 20:9 6:9", "39:10 9:2 26:7 15:4 5:4 7:6 37:5 2:5 36:3 0:5 40:2", "13:8 49:2 23:9 11:7 42:1 8:8 44:5 39:5 4:5 3:3 1:7", "29:9 42:6 15:4 17:8 20:7 12:9 19:10 28:9 38:3 40:3", "31:8 46:2 30:10 11:3 27:9 29:4 49:5 23:2 20:7 12:6", "2:8 26:5 49:6 4:2 1:10 46:1 28:10 40:10 31:9 5:4", "49:10 25:7 28:3 21:9 39:7 37:5 42:7 31:5 4:1 2:7", "5:8 19:10 34:7 44:6 2:5 42:1 26:2 4:4 24:8 27:6", "23:2 16:10 5:3 27:7 3:7 8:10 12:8 30:5 36:7 37:8", "37:10 34:1 33:2 10:1 18:1 36:7 3:4 25:3 27:10 8:6", "37:8 23:8 16:3 44:10 8:3 3:1 11:5 21:5 6:5 28:7", "15:10 36:1 34:1 11:6 29:10 38:6 25:2 44:2 16:10", "45:4 9:2 47:1 14:3 25:6 12:7 37:10 10:2 38:10 13:1", "42:4 7:6 21:2 45:10 17:6 46:6 33:5 38:6 24:10 19:9", "29:3 7:2 16:7 34:3 19:4 14:5 48:1 45:6 49:6 43:3", "23:9 10:5 11:10 18:5 8:9 2:7 21:7 19:6 32:5 40:4", "18:1 38:1 33:10 2:5 24:2 32:10 37:7 4:8 6:6 14:4", "31:8 40:4 30:7 47:4 43:5 42:2 12:1 18:4 19:7 33:7", "21:10 5:6 35:3 42:7 48:10 49:10 3:1 37:8 6:7 9:6", "21:10 20:10 7:6 5:4 40:5 44:9 14:2 10:2 18:8 35:10", "20:1 41:3 33:4 38:6 10:6 27:9 13:4 21:4 23:8 7:5", "7:8 5:5 28:5 13:7 19:6 14:8 26:5 35:3 4:6 9:4 0:8", "35:8 34:4 37:6 7:9 46:1 26:10 29:7 49:4 6:5 31:9", "14:5 38:7 40:8 43:3 10:4 42:9 47:8 11:4 33:6 7:10", "33:10 9:8 38:8 27:8 43:10 36:2 12:9 37:7 15:2 47:1", "12:9 10:2 16:3 47:2 25:8 23:5 20:6 18:1 32:4 11:3", "22:7 33:9 23:7 4:10 3:3 48:5 35:1 32:6 19:5 16:9", "20:6 12:3 38:1 33:5 10:8 9:2 22:3 15:7 7:4 28:7", "38:7 30:4 48:6 43:10 18:7 45:3 25:6 26:3 49:1 7:1", "33:7 2:3 22:2 24:6 9:4 28:5 20:5 21:5 6:5 27:5 0:6", "13:6 16:7 34:8 8:2 37:4 30:6 15:5 11:6 48:10 6:3", "34:7 20:9 48:6 23:3 35:1 26:7 33:10 49:8 7:6 0:3", "37:8 44:9 33:8 42:7 0:4 21:1 24:6 6:10 1:1 7:3 4:5", "17:2 20:9 8:7 43:10 14:1 38:2 33:3 32:5 48:9 1:7", "0:3 26:4 10:7 15:5 43:6 38:5 17:5 20:7 6:3 12:8", "2:2 33:6 43:9 36:1 31:1 26:3 39:7 19:8 18:8 40:7", "29:8 6:9 46:6 43:9 38:3 4:8 2:9 10:9 13:1 34:10", "5:9 9:5 4:10 46:5 41:8 32:2 1:3 29:9 33:9 49:4 6:8", "11:7 12:10 13:5 29:4 3:10 39:10 33:10 28:4 9:2 5:2", "8:2 40:5 4:6 17:4 42:7 20:9 43:8 6:5 34:6 7:9 3:2", "1:8 15:9 7:5 25:6 33:7 18:6 45:1 12:1 0:10 21:9", "26:4 1:9 38:8 16:6 42:9 49:1 47:8 28:1 32:10 22:1", "16:4 11:6 15:8 17:5 20:10 26:3 24:7 0:6 13:1 47:1", "27:4 35:4 3:8 43:3 6:10 32:5 16:9 23:9 49:1 9:8", "28:10 9:4 38:2 27:2 15:7 36:1 44:5 4:5 30:4 33:10", "2:9 4:8 31:3 3:1 12:9 49:4 7:1 41:1 6:9 25:4 10:9", "28:6 48:2 43:3 7:4 31:8 46:2 9:9 37:7 47:8 1:1 2:3"};
    vector<string> rulesb = {"34:1 23:10 13:3 25:8 2:5 36:6 22:8 12:4 44:1 29:9", "45:3 16:2 25:4 21:5 39:9 34:6 9:3 14:5 37:8 22:8", "18:3 5:8 37:3 47:6 4:9 27:5 24:9 21:6 2:9 12:8 1:3", "34:1 47:6 46:7 32:8 1:5 27:1 10:2 8:6 17:10 40:9", "30:10 26:8 14:4 48:4 49:10 40:7 35:2 45:8 7:10 8:8", "21:2 23:8 33:10 39:8 46:1 44:9 6:4 34:7 12:10 16:7", "1:4 49:6 8:2 35:6 12:2 27:9 33:2 29:7 47:4 45:9", "20:4 1:5 11:2 0:4 41:7 43:9 17:2 12:5 42:2 15:1", "32:7 14:6 24:4 2:3 49:3 18:3 9:1 38:4 27:7 11:9", "49:3 33:8 17:10 22:4 40:9 36:10 28:10 19:1 48:8", "18:7 40:7 39:4 21:7 33:8 7:5 15:5 32:3 4:10 22:9", "24:4 7:8 4:1 2:7 8:1 20:6 16:5 13:5 10:5 14:9 32:4", "19:3 44:10 38:3 31:10 39:4 12:10 46:9 47:9 17:8", "2:10 46:6 49:8 3:7 37:1 29:3 0:10 22:6 5:8 24:3", "29:4 20:4 0:1 21:2 31:6 40:9 2:7 25:5 9:3 10:8 5:2", "45:3 18:6 19:3 34:7 3:4 31:4 39:10 42:9 9:5 17:4", "48:4 5:7 28:6 43:4 31:3 9:6 25:7 11:3 32:3 45:4", "46:4 45:5 7:5 20:3 39:7 22:3 33:4 10:2 1:2 21:5", "5:2 9:10 49:10 4:9 16:9 25:2 37:10 42:4 10:8 3:8", "13:4 48:10 35:9 1:6 31:6 44:7 28:8 45:6 0:1 5:4", "26:8 39:1 8:5 41:7 17:1 36:8 47:2 21:1 34:5 9:1", "20:2 24:3 8:9 1:7 5:10 13:2 30:5 26:1 42:8 15:10", "12:9 37:7 25:6 28:2 41:6 2:5 26:10 21:5 45:4 23:2", "23:5 49:1 43:2 0:9 47:6 4:1 31:10 40:9 11:8 36:5", "3:3 10:3 35:8 24:7 38:10 8:3 22:9 30:2 48:10 44:5", "27:5 40:5 4:10 31:3 13:6 33:6 0:5 14:9 9:3 21:8", "6:2 26:1 27:2 23:10 29:7 28:2 33:3 30:10 19:4 14:1", "34:5 42:7 28:2 21:8 48:4 14:1 37:6 19:3 0:8 35:6", "14:9 47:4 24:5 20:9 43:4 6:8 4:3 29:3 30:5 22:2", "35:3 19:3 42:4 49:8 23:8 21:3 36:3 6:1 32:10 31:5", "33:5 35:6 12:4 8:3 3:2 28:2 42:9 39:8 26:5 9:9 2:3", "28:2 20:8 24:4 32:8 2:2 4:9 46:5 1:1 31:2 44:7 6:1", "48:1 41:5 0:10 43:4 16:5 36:5 24:7 35:9 14:7 38:3", "44:5 7:4 16:6 23:10 1:5 26:5 11:5 39:2 46:6 40:7", "3:3 18:9 49:9 39:1 23:5 4:1 7:8 42:1 8:1 22:2 24:4", "32:10 2:6 18:5 42:9 26:9 39:1 45:7 19:9 34:8 12:3", "20:6 14:6 11:8 29:7 44:7 41:8 0:1 48:9 19:9 27:6", "14:7 42:7 39:6 22:7 30:8 4:3 21:6 32:1 31:10 26:9", "23:4 42:2 46:4 44:6 2:7 33:3 34:6 30:6 0:4 24:10", "0:7 12:7 29:7 33:9 7:2 21:2 13:10 49:9 44:10 9:8", "11:8 37:6 29:2 43:5 49:8 46:4 41:2 6:2 25:6 20:8", "8:3 28:3 19:8 18:2 14:1 17:5 45:7 4:2 38:6 20:10", "35:4 22:5 26:5 16:9 18:5 33:5 15:2 24:5 12:1 10:4", "13:8 7:5 40:1 14:10 17:5 2:10 35:4 9:5 25:5 44:4", "15:5 26:6 16:1 24:4 21:7 35:9 28:6 42:1 45:5 22:3", "40:4 29:3 2:7 33:10 25:9 15:8 12:10 26:4 36:5 23:9", "24:1 11:4 27:6 26:10 6:6 2:3 30:10 41:2 49:7 35:7", "37:2 33:7 49:10 28:10 10:7 9:5 26:2 27:9 14:8 8:2", "3:7 38:4 24:1 43:2 29:5 18:7 10:5 12:5 16:3 15:4", "44:4 21:4 27:7 14:1 43:10 5:1 35:8 37:3 2:8 7:9"};
    vector<string> rulesc = {"42:2 9:6 7:3 44:4 3:10 49:2 36:6 0:2 29:10 35:4", "44:4 30:7 28:5 15:2 33:6 24:10 31:9 26:6 29:5 1:6", "0:5 36:7 10:4 35:4 28:6 7:10 32:4 24:10 22:1 21:2", "5:5 13:8 44:1 8:10 25:4 38:8 1:2 49:9 3:6 10:9 7:1", "33:4 36:6 16:9 17:9 5:9 13:5 45:2 27:1 6:8 29:8", "1:6 2:4 49:1 23:1 31:4 38:9 24:6 25:7 48:2 47:7", "17:7 14:5 13:6 37:3 21:9 29:5 7:7 3:10 39:5 38:5", "41:8 19:2 42:10 10:1 34:8 5:2 22:10 37:7 6:3 48:9", "28:2 10:5 21:1 42:8 22:5 3:4 41:5 13:6 19:10 43:2", "10:5 12:6 17:2 6:7 3:4 38:1 13:8 32:3 34:2 31:9", "9:4 37:2 42:7 41:2 18:8 17:3 33:4 16:10 5:6 29:2", "17:4 5:4 43:6 13:9 12:1 15:7 8:8 38:9 49:5 44:6", "5:5 41:9 38:5 17:7 10:9 8:2 9:2 6:7 28:4 7:10 36:1", "22:9 18:9 21:7 35:8 9:10 41:1 47:9 39:9 23:8 45:5", "31:8 40:7 28:6 8:9 15:5 24:1 2:9 48:10 46:10 10:4", "3:6 42:9 5:5 32:5 29:7 20:2 2:2 28:6 41:8 25:3 4:5", "3:4 42:6 17:10 25:2 20:3 15:8 16:5 28:10 21:9 5:9", "8:8 43:5 45:6 2:5 9:8 22:6 37:6 25:1 21:6 46:4 1:5", "14:10 42:10 39:8 46:9 3:7 10:10 7:3 33:10 16:3 5:5", "3:1 20:5 42:4 30:1 36:6 18:8 22:5 15:2 1:7 26:1", "7:7 45:2 34:1 1:1 22:2 31:6 39:10 29:7 30:5 12:10", "44:7 41:5 38:8 16:3 9:9 5:3 14:7 2:9 6:4 31:10 1:3", "6:9 22:10 4:10 1:4 27:5 25:9 31:7 8:7 3:1 21:10", "0:2 29:9 1:3 13:8 37:9 23:7 9:9 43:8 26:6 11:4 4:5", "39:2 36:6 41:6 42:10 1:10 18:3 33:2 30:8 16:7 7:8", "6:10 35:2 4:8 5:10 21:5 24:9 19:5 48:1 11:2 32:10", "19:6 8:5 6:8 7:1 21:4 3:1 45:3 31:5 40:5 4:4 11:2", "5:6 1:9 4:3 35:5 17:4 31:5 11:10 9:8 42:4 18:10", "17:4 47:5 14:4 37:9 10:5 9:2 15:5 16:4 20:9 28:6", "31:2 16:8 0:8 29:5 20:8 32:2 39:8 15:2 6:6 22:5", "42:8 25:2 30:3 3:8 46:1 32:8 41:1 13:10 36:9 5:5", "24:4 12:5 5:2 17:7 39:9 20:3 33:10 15:2 44:10 27:1", "21:8 14:8 44:2 6:10 48:9 12:10 30:4 5:9 0:5 27:2", "38:3 0:4 43:4 1:8 6:1 23:6 28:4 30:6 37:2 45:4 5:6", "19:8 14:4 30:5 9:7 41:5 5:6 17:10 7:8 28:6 33:2", "36:10 0:10 6:5 24:7 47:8 23:7 17:8 37:8 49:5 30:2", "27:6 48:8 6:2 18:8 8:3 20:7 30:5 44:7 42:1 4:4 1:8", "15:6 3:10 40:1 27:2 7:2 49:10 37:2 16:10 26:2 41:6", "30:9 0:9 3:5 18:9 43:5 34:10 33:5 27:6 16:7 39:9", "34:9 42:9 38:8 14:6 49:2 33:5 21:7 11:9 44:9 8:4", "48:7 14:4 42:10 13:8 49:1 24:8 38:2 23:9 1:7 8:2", "12:2 26:3 18:9 3:8 29:6 49:4 11:6 48:6 42:4 39:9", "49:7 38:6 31:4 44:4 10:4 39:10 20:2 27:9 18:7 43:6", "29:9 48:10 1:5 38:2 41:4 27:6 12:1 45:6 22:4 26:4", "43:9 29:2 8:8 35:5 20:9 26:4 22:10 19:9 3:4 17:8", "3:5 1:10 26:1 29:2 35:9 25:6 10:10 14:6 19:10 33:9", "49:6 8:1 30:9 43:10 17:7 36:8 47:5 31:8 25:9 34:10", "13:4 14:8 19:9 11:7 38:1 28:4 49:4 26:3 10:7 23:7", "34:5 17:8 29:4 19:10 33:8 3:2 39:8 6:2 11:6 10:6", "6:4 4:9 44:1 29:4 37:1 27:4 15:9 1:9 19:1 34:2 2:9"};
    int finalState = 33;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0015074223141445565;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> rulesa = {"41:8 43:8 7:4 2:9 27:1 37:3 46:10 31:3 44:1 32:10", "48:1 40:3 43:1 16:9 15:3 41:3 23:9 38:3 37:4 21:9", "23:2 39:10 16:2 41:10 26:2 2:6 47:8 40:10 30:9 5:4", "31:3 47:2 17:9 24:2 44:1 15:8 29:1 38:3 20:9 6:9", "39:10 9:2 26:7 15:4 5:4 7:6 37:5 2:5 36:3 0:5 40:2", "13:8 49:2 23:9 11:7 42:1 8:8 44:5 39:5 4:5 3:3 1:7", "29:9 42:6 15:4 17:8 20:7 12:9 19:10 28:9 38:3 40:3", "31:8 46:2 30:10 11:3 27:9 29:4 49:5 23:2 20:7 12:6", "2:8 26:5 49:6 4:2 1:10 46:1 28:10 40:10 31:9 5:4", "49:10 25:7 28:3 21:9 39:7 37:5 42:7 31:5 4:1 2:7", "5:8 19:10 34:7 44:6 2:5 42:1 26:2 4:4 24:8 27:6", "23:2 16:10 5:3 27:7 3:7 8:10 12:8 30:5 36:7 37:8", "37:10 34:1 33:2 10:1 18:1 36:7 3:4 25:3 27:10 8:6", "37:8 23:8 16:3 44:10 8:3 3:1 11:5 21:5 6:5 28:7", "15:10 36:1 34:1 11:6 29:10 38:6 25:2 44:2 16:10", "45:4 9:2 47:1 14:3 25:6 12:7 37:10 10:2 38:10 13:1", "42:4 7:6 21:2 45:10 17:6 46:6 33:5 38:6 24:10 19:9", "29:3 7:2 16:7 34:3 19:4 14:5 48:1 45:6 49:6 43:3", "23:9 10:5 11:10 18:5 8:9 2:7 21:7 19:6 32:5 40:4", "18:1 38:1 33:10 2:5 24:2 32:10 37:7 4:8 6:6 14:4", "31:8 40:4 30:7 47:4 43:5 42:2 12:1 18:4 19:7 33:7", "21:10 5:6 35:3 42:7 48:10 49:10 3:1 37:8 6:7 9:6", "21:10 20:10 7:6 5:4 40:5 44:9 14:2 10:2 18:8 35:10", "20:1 41:3 33:4 38:6 10:6 27:9 13:4 21:4 23:8 7:5", "7:8 5:5 28:5 13:7 19:6 14:8 26:5 35:3 4:6 9:4 0:8", "35:8 34:4 37:6 7:9 46:1 26:10 29:7 49:4 6:5 31:9", "14:5 38:7 40:8 43:3 10:4 42:9 47:8 11:4 33:6 7:10", "33:10 9:8 38:8 27:8 43:10 36:2 12:9 37:7 15:2 47:1", "12:9 10:2 16:3 47:2 25:8 23:5 20:6 18:1 32:4 11:3", "22:7 33:9 23:7 4:10 3:3 48:5 35:1 32:6 19:5 16:9", "20:6 12:3 38:1 33:5 10:8 9:2 22:3 15:7 7:4 28:7", "38:7 30:4 48:6 43:10 18:7 45:3 25:6 26:3 49:1 7:1", "33:7 2:3 22:2 24:6 9:4 28:5 20:5 21:5 6:5 27:5 0:6", "13:6 16:7 34:8 8:2 37:4 30:6 15:5 11:6 48:10 6:3", "34:7 20:9 48:6 23:3 35:1 26:7 33:10 49:8 7:6 0:3", "37:8 44:9 33:8 42:7 0:4 21:1 24:6 6:10 1:1 7:3 4:5", "17:2 20:9 8:7 43:10 14:1 38:2 33:3 32:5 48:9 1:7", "0:3 26:4 10:7 15:5 43:6 38:5 17:5 20:7 6:3 12:8", "2:2 33:6 43:9 36:1 31:1 26:3 39:7 19:8 18:8 40:7", "29:8 6:9 46:6 43:9 38:3 4:8 2:9 10:9 13:1 34:10", "5:9 9:5 4:10 46:5 41:8 32:2 1:3 29:9 33:9 49:4 6:8", "11:7 12:10 13:5 29:4 3:10 39:10 33:10 28:4 9:2 5:2", "8:2 40:5 4:6 17:4 42:7 20:9 43:8 6:5 34:6 7:9 3:2", "1:8 15:9 7:5 25:6 33:7 18:6 45:1 12:1 0:10 21:9", "26:4 1:9 38:8 16:6 42:9 49:1 47:8 28:1 32:10 22:1", "16:4 11:6 15:8 17:5 20:10 26:3 24:7 0:6 13:1 47:1", "27:4 35:4 3:8 43:3 6:10 32:5 16:9 23:9 49:1 9:8", "28:10 9:4 38:2 27:2 15:7 36:1 44:5 4:5 30:4 33:10", "2:9 4:8 31:3 3:1 12:9 49:4 7:1 41:1 6:9 25:4 10:9", "28:6 48:2 43:3 7:4 31:8 46:2 9:9 37:7 47:8 1:1 2:3"};
    vector<string> rulesb = {"34:1 23:10 13:3 25:8 2:5 36:6 22:8 12:4 44:1 29:9", "45:3 16:2 25:4 21:5 39:9 34:6 9:3 14:5 37:8 22:8", "18:3 5:8 37:3 47:6 4:9 27:5 24:9 21:6 2:9 12:8 1:3", "34:1 47:6 46:7 32:8 1:5 27:1 10:2 8:6 17:10 40:9", "30:10 26:8 14:4 48:4 49:10 40:7 35:2 45:8 7:10 8:8", "21:2 23:8 33:10 39:8 46:1 44:9 6:4 34:7 12:10 16:7", "1:4 49:6 8:2 35:6 12:2 27:9 33:2 29:7 47:4 45:9", "20:4 1:5 11:2 0:4 41:7 43:9 17:2 12:5 42:2 15:1", "32:7 14:6 24:4 2:3 49:3 18:3 9:1 38:4 27:7 11:9", "49:3 33:8 17:10 22:4 40:9 36:10 28:10 19:1 48:8", "18:7 40:7 39:4 21:7 33:8 7:5 15:5 32:3 4:10 22:9", "24:4 7:8 4:1 2:7 8:1 20:6 16:5 13:5 10:5 14:9 32:4", "19:3 44:10 38:3 31:10 39:4 12:10 46:9 47:9 17:8", "2:10 46:6 49:8 3:7 37:1 29:3 0:10 22:6 5:8 24:3", "29:4 20:4 0:1 21:2 31:6 40:9 2:7 25:5 9:3 10:8 5:2", "45:3 18:6 19:3 34:7 3:4 31:4 39:10 42:9 9:5 17:4", "48:4 5:7 28:6 43:4 31:3 9:6 25:7 11:3 32:3 45:4", "46:4 45:5 7:5 20:3 39:7 22:3 33:4 10:2 1:2 21:5", "5:2 9:10 49:10 4:9 16:9 25:2 37:10 42:4 10:8 3:8", "13:4 48:10 35:9 1:6 31:6 44:7 28:8 45:6 0:1 5:4", "26:8 39:1 8:5 41:7 17:1 36:8 47:2 21:1 34:5 9:1", "20:2 24:3 8:9 1:7 5:10 13:2 30:5 26:1 42:8 15:10", "12:9 37:7 25:6 28:2 41:6 2:5 26:10 21:5 45:4 23:2", "23:5 49:1 43:2 0:9 47:6 4:1 31:10 40:9 11:8 36:5", "3:3 10:3 35:8 24:7 38:10 8:3 22:9 30:2 48:10 44:5", "27:5 40:5 4:10 31:3 13:6 33:6 0:5 14:9 9:3 21:8", "6:2 26:1 27:2 23:10 29:7 28:2 33:3 30:10 19:4 14:1", "34:5 42:7 28:2 21:8 48:4 14:1 37:6 19:3 0:8 35:6", "14:9 47:4 24:5 20:9 43:4 6:8 4:3 29:3 30:5 22:2", "35:3 19:3 42:4 49:8 23:8 21:3 36:3 6:1 32:10 31:5", "33:5 35:6 12:4 8:3 3:2 28:2 42:9 39:8 26:5 9:9 2:3", "28:2 20:8 24:4 32:8 2:2 4:9 46:5 1:1 31:2 44:7 6:1", "48:1 41:5 0:10 43:4 16:5 36:5 24:7 35:9 14:7 38:3", "44:5 7:4 16:6 23:10 1:5 26:5 11:5 39:2 46:6 40:7", "3:3 18:9 49:9 39:1 23:5 4:1 7:8 42:1 8:1 22:2 24:4", "32:10 2:6 18:5 42:9 26:9 39:1 45:7 19:9 34:8 12:3", "20:6 14:6 11:8 29:7 44:7 41:8 0:1 48:9 19:9 27:6", "14:7 42:7 39:6 22:7 30:8 4:3 21:6 32:1 31:10 26:9", "23:4 42:2 46:4 44:6 2:7 33:3 34:6 30:6 0:4 24:10", "0:7 12:7 29:7 33:9 7:2 21:2 13:10 49:9 44:10 9:8", "11:8 37:6 29:2 43:5 49:8 46:4 41:2 6:2 25:6 20:8", "8:3 28:3 19:8 18:2 14:1 17:5 45:7 4:2 38:6 20:10", "35:4 22:5 26:5 16:9 18:5 33:5 15:2 24:5 12:1 10:4", "13:8 7:5 40:1 14:10 17:5 2:10 35:4 9:5 25:5 44:4", "15:5 26:6 16:1 24:4 21:7 35:9 28:6 42:1 45:5 22:3", "40:4 29:3 2:7 33:10 25:9 15:8 12:10 26:4 36:5 23:9", "24:1 11:4 27:6 26:10 6:6 2:3 30:10 41:2 49:7 35:7", "37:2 33:7 49:10 28:10 10:7 9:5 26:2 27:9 14:8 8:2", "3:7 38:4 24:1 43:2 29:5 18:7 10:5 12:5 16:3 15:4", "44:4 21:4 27:7 14:1 43:10 5:1 35:8 37:3 2:8 7:9"};
    vector<string> rulesc = {"42:2 9:6 7:3 44:4 3:10 49:2 36:6 0:2 29:10 35:4", "44:4 30:7 28:5 15:2 33:6 24:10 31:9 26:6 29:5 1:6", "0:5 36:7 10:4 35:4 28:6 7:10 32:4 24:10 22:1 21:2", "5:5 13:8 44:1 8:10 25:4 38:8 1:2 49:9 3:6 10:9 7:1", "33:4 36:6 16:9 17:9 5:9 13:5 45:2 27:1 6:8 29:8", "1:6 2:4 49:1 23:1 31:4 38:9 24:6 25:7 48:2 47:7", "17:7 14:5 13:6 37:3 21:9 29:5 7:7 3:10 39:5 38:5", "41:8 19:2 42:10 10:1 34:8 5:2 22:10 37:7 6:3 48:9", "28:2 10:5 21:1 42:8 22:5 3:4 41:5 13:6 19:10 43:2", "10:5 12:6 17:2 6:7 3:4 38:1 13:8 32:3 34:2 31:9", "9:4 37:2 42:7 41:2 18:8 17:3 33:4 16:10 5:6 29:2", "17:4 5:4 43:6 13:9 12:1 15:7 8:8 38:9 49:5 44:6", "5:5 41:9 38:5 17:7 10:9 8:2 9:2 6:7 28:4 7:10 36:1", "22:9 18:9 21:7 35:8 9:10 41:1 47:9 39:9 23:8 45:5", "31:8 40:7 28:6 8:9 15:5 24:1 2:9 48:10 46:10 10:4", "3:6 42:9 5:5 32:5 29:7 20:2 2:2 28:6 41:8 25:3 4:5", "3:4 42:6 17:10 25:2 20:3 15:8 16:5 28:10 21:9 5:9", "8:8 43:5 45:6 2:5 9:8 22:6 37:6 25:1 21:6 46:4 1:5", "14:10 42:10 39:8 46:9 3:7 10:10 7:3 33:10 16:3 5:5", "3:1 20:5 42:4 30:1 36:6 18:8 22:5 15:2 1:7 26:1", "7:7 45:2 34:1 1:1 22:2 31:6 39:10 29:7 30:5 12:10", "44:7 41:5 38:8 16:3 9:9 5:3 14:7 2:9 6:4 31:10 1:3", "6:9 22:10 4:10 1:4 27:5 25:9 31:7 8:7 3:1 21:10", "0:2 29:9 1:3 13:8 37:9 23:7 9:9 43:8 26:6 11:4 4:5", "39:2 36:6 41:6 42:10 1:10 18:3 33:2 30:8 16:7 7:8", "6:10 35:2 4:8 5:10 21:5 24:9 19:5 48:1 11:2 32:10", "19:6 8:5 6:8 7:1 21:4 3:1 45:3 31:5 40:5 4:4 11:2", "5:6 1:9 4:3 35:5 17:4 31:5 11:10 9:8 42:4 18:10", "17:4 47:5 14:4 37:9 10:5 9:2 15:5 16:4 20:9 28:6", "31:2 16:8 0:8 29:5 20:8 32:2 39:8 15:2 6:6 22:5", "42:8 25:2 30:3 3:8 46:1 32:8 41:1 13:10 36:9 5:5", "24:4 12:5 5:2 17:7 39:9 20:3 33:10 15:2 44:10 27:1", "21:8 14:8 44:2 6:10 48:9 12:10 30:4 5:9 0:5 27:2", "38:3 0:4 43:4 1:8 6:1 23:6 28:4 30:6 37:2 45:4 5:6", "19:8 14:4 30:5 9:7 41:5 5:6 17:10 7:8 28:6 33:2", "36:10 0:10 6:5 24:7 47:8 23:7 17:8 37:8 49:5 30:2", "27:6 48:8 6:2 18:8 8:3 20:7 30:5 44:7 42:1 4:4 1:8", "15:6 3:10 40:1 27:2 7:2 49:10 37:2 16:10 26:2 41:6", "30:9 0:9 3:5 18:9 43:5 34:10 33:5 27:6 16:7 39:9", "34:9 42:9 38:8 14:6 49:2 33:5 21:7 11:9 44:9 8:4", "48:7 14:4 42:10 13:8 49:1 24:8 38:2 23:9 1:7 8:2", "12:2 26:3 18:9 3:8 29:6 49:4 11:6 48:6 42:4 39:9", "49:7 38:6 31:4 44:4 10:4 39:10 20:2 27:9 18:7 43:6", "29:9 48:10 1:5 38:2 41:4 27:6 12:1 45:6 22:4 26:4", "43:9 29:2 8:8 35:5 20:9 26:4 22:10 19:9 3:4 17:8", "3:5 1:10 26:1 29:2 35:9 25:6 10:10 14:6 19:10 33:9", "49:6 8:1 30:9 43:10 17:7 36:8 47:5 31:8 25:9 34:10", "13:4 14:8 19:9 11:7 38:1 28:4 49:4 26:3 10:7 23:7", "34:5 17:8 29:4 19:10 33:8 3:2 39:8 6:2 11:6 10:6", "6:4 4:9 44:1 29:4 37:1 27:4 15:9 1:9 19:1 34:2 2:9"};
    int finalState = 999;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.8466816822314046;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> rulesa = {"35:3 21:7 3:1 29:5 0:7 16:1 10:3 8:7 44:2 1:3 33:2", "30:2 47:9 38:3 45:10 12:4 2:9 24:8 4:6 6:6 7:3 0:7", "15:9 5:2 41:10 31:10 32:1 6:5 9:10 35:7 2:1 40:6", "0:2 19:9 6:4 30:1 34:8 15:1 38:5 21:3 29:9 7:8 8:4", "1:6 41:10 22:10 12:5 38:6 25:9 32:9 47:6 27:5 23:4", "6:3 28:5 23:2 16:8 8:6 14:6 44:1 37:6 42:2 45:8", "29:5 40:10 41:1 49:8 34:10 21:6 45:4 8:6 38:7 9:3", "10:10 16:6 6:9 22:7 21:1 2:10 45:8 1:1 37:6 42:5", "3:4 35:3 15:8 42:2 9:5 30:8 32:7 7:7 39:6 18:1 0:7", "33:6 13:10 20:10 39:4 7:2 8:6 16:9 38:5 34:1 30:10", "45:10 7:1 16:6 42:9 6:9 3:5 21:8 5:6 13:8 29:5 8:1", "29:5 30:1 7:4 49:5 28:7 25:7 5:3 47:8 1:2 19:9 6:3", "47:4 19:9 35:10 49:9 9:6 44:5 25:4 45:3 12:10 18:9", "7:6 47:2 49:2 19:6 12:10 2:3 32:10 36:2 39:7 17:3", "27:7 44:6 14:4 47:2 41:3 38:2 2:1 28:9 20:10 0:4", "29:3 38:10 23:4 36:10 44:9 28:7 1:9 41:6 32:2 39:8", "17:5 5:9 3:8 9:3 19:8 27:3 37:3 33:4 35:5 34:2 2:9", "4:6 27:10 0:5 46:6 31:1 11:10 22:9 43:3 3:7 32:6", "22:1 4:6 19:4 11:7 5:10 16:8 7:1 3:6 46:7 32:7 1:8", "6:1 3:6 32:2 0:10 24:8 11:9 14:3 27:2 43:7 1:10", "7:9 18:4 49:4 46:10 26:4 0:6 4:7 38:5 11:6 24:1", "45:8 47:7 38:4 16:7 9:10 28:10 40:6 48:10 7:1 41:7", "49:10 29:9 26:5 9:2 44:10 36:2 47:9 35:1 34:9 45:4", "3:9 27:7 24:6 31:5 44:3 37:3 2:9 43:6 5:7 9:7 30:5", "24:8 26:2 48:10 49:2 11:2 38:9 7:10 28:6 39:7 5:8", "26:1 7:7 4:5 3:7 9:9 42:9 12:5 39:2 15:2 46:10 0:5", "6:10 38:6 15:6 17:5 13:6 35:6 5:2 16:3 18:4 19:4", "40:1 16:3 7:2 10:8 39:10 48:3 2:10 31:4 8:6 47:2", "1:3 37:3 40:5 47:5 43:7 18:3 49:6 19:3 29:4 15:5", "7:2 39:2 33:6 11:1 2:10 4:6 24:7 32:8 0:5 10:2 3:4", "41:7 29:8 4:2 32:7 34:1 47:9 14:3 9:1 21:8 22:9", "16:2 11:7 39:10 32:4 36:10 49:5 27:1 23:7 43:3 5:3", "18:6 5:4 30:6 34:3 26:4 6:10 46:4 33:8 32:8 39:1", "14:7 39:5 34:2 31:6 1:2 35:3 5:6 44:8 37:8 9:2 4:4", "28:2 40:1 1:10 42:7 30:8 12:2 18:7 38:9 9:1 27:1", "15:8 25:2 2:10 3:8 29:8 0:5 21:7 49:10 13:10 16:5", "44:9 47:8 10:3 48:5 25:4 13:2 27:10 20:3 6:6 26:3", "5:2 15:3 29:10 33:8 41:10 20:8 36:9 8:9 3:5 37:10", "14:9 26:5 49:7 20:6 10:10 47:4 4:2 32:6 3:7 29:9", "25:9 0:5 11:3 44:10 14:9 20:5 10:3 17:3 24:10 2:1", "32:8 27:2 42:2 31:5 47:9 24:7 33:3 17:6 37:6 34:2", "48:5 47:10 13:2 43:8 22:6 1:6 39:6 21:8 34:8 24:1", "27:9 47:8 46:1 11:6 31:9 0:9 44:8 16:8 40:7 38:1", "30:1 23:5 17:3 9:9 29:1 35:10 24:5 0:10 5:7 19:2", "35:6 0:3 49:2 47:2 14:6 8:7 25:5 16:6 22:1 9:1 7:1", "12:4 8:3 15:7 25:1 47:1 0:8 35:7 33:10 34:9 3:9", "37:9 17:10 13:7 44:4 14:5 26:8 35:4 32:5 10:5 8:2", "46:9 1:1 35:2 14:10 31:7 22:3 12:9 7:9 10:4 20:8", "27:3 18:1 44:10 43:6 48:3 49:3 30:7 4:3 16:2 7:10", "17:2 2:3 29:10 9:4 32:3 39:9 4:10 37:10 33:8 27:7"};
    vector<string> rulesb = {"44:8 18:6 29:2 34:6 37:9 30:2 7:8 1:4 47:2 17:3", "40:9 6:7 26:10 30:6 38:5 41:4 3:8 45:5 23:10 5:8", "43:5 0:8 13:3 17:1 25:9 33:8 15:9 20:1 27:7 35:7", "4:4 8:1 46:6 23:8 19:5 24:7 14:4 17:10 2:4 40:5", "19:10 25:9 12:7 16:2 22:10 31:4 7:1 18:8 15:4 14:5", "43:7 27:2 48:9 41:8 9:1 12:7 2:3 18:1 8:1 49:2 7:7", "28:8 11:9 0:4 12:3 40:3 34:7 33:3 17:10 10:10 19:8", "6:2 42:9 17:4 26:4 37:5 33:5 40:5 43:6 27:10 38:2", "8:2 45:1 29:7 15:10 11:1 19:4 21:7 31:1 13:6 35:6", "42:9 38:7 13:3 5:5 39:3 33:8 36:6 20:6 2:7 46:10", "48:2 11:3 31:10 20:9 49:1 32:5 9:1 14:7 37:9 25:4", "46:1 27:4 49:7 6:5 1:10 18:2 34:9 47:8 7:2 11:4", "4:1 15:8 41:8 44:5 34:1 3:8 24:1 46:10 5:7 36:5", "19:2 22:10 15:5 43:4 30:1 28:6 2:1 36:5 18:6 14:10", "16:1 8:2 44:7 1:10 23:10 47:10 11:9 20:2 13:5 10:2", "34:6 31:7 4:5 40:4 20:9 24:3 9:6 33:7 38:3 32:3", "25:3 18:2 13:5 22:10 44:9 34:1 6:8 29:5 40:1 47:5", "16:10 15:5 11:5 22:9 7:5 47:4 3:7 24:9 33:3 28:9", "29:8 28:5 16:9 12:8 27:2 41:5 40:8 10:4 37:7 5:9", "34:5 10:5 36:5 33:5 30:10 41:8 4:7 48:7 26:3 6:5", "8:7 6:8 28:8 48:4 13:4 26:1 15:9 37:9 18:5 17:3", "3:8 11:3 22:6 20:6 23:1 33:6 43:7 4:1 37:9 39:10", "18:7 45:2 10:10 17:7 43:6 46:8 8:9 3:2 7:5 49:8", "44:2 24:1 47:7 1:10 41:7 49:9 14:8 35:10 42:7 16:8", "16:8 40:8 27:7 45:8 41:8 9:4 14:6 22:3 29:7 24:10", "13:7 27:9 42:2 35:4 5:2 44:3 14:8 29:4 39:4 49:9", "7:8 31:4 45:7 11:9 15:6 16:5 32:5 20:8 12:5 8:6", "32:1 2:7 16:9 33:8 15:3 7:5 9:8 0:4 27:4 34:8 12:4", "6:1 39:2 46:3 7:6 31:10 15:5 11:6 23:10 10:10 21:2", "40:3 28:4 13:10 20:7 38:3 42:8 34:8 44:3 27:2 3:4", "42:3 6:10 28:1 11:10 37:5 15:1 27:5 20:8 47:8 30:1", "44:6 34:1 19:5 32:7 21:4 36:7 7:10 41:8 10:5 15:10", "11:3 41:7 31:1 15:9 9:1 20:3 37:4 7:2 24:8 26:3", "45:9 23:6 7:5 24:1 16:1 35:9 12:5 1:6 27:8 3:5 4:4", "26:2 11:5 47:10 19:6 22:1 45:2 21:5 38:6 37:10 8:3", "13:3 11:6 25:8 7:2 26:3 42:9 14:9 5:10 22:4 32:5", "28:6 34:6 3:10 18:8 12:8 32:7 43:10 25:4 38:6 47:7", "30:10 18:6 28:7 48:1 25:1 34:4 44:5 33:2 2:3 39:9", "20:7 37:1 39:9 12:6 3:7 18:1 22:5 23:6 24:2 44:8", "42:1 1:9 43:6 28:8 47:4 45:8 31:10 21:3 24:2 30:1", "31:3 40:1 44:6 15:4 24:9 41:4 10:7 14:5 4:1 32:1", "23:3 28:1 22:6 12:7 13:9 27:5 33:3 6:7 32:10 49:5", "2:6 22:8 39:3 29:6 0:9 16:9 7:9 19:6 6:4 25:9 42:4", "44:10 21:2 25:7 16:5 41:1 19:1 31:4 0:6 47:10 8:6", "37:7 14:1 36:5 15:6 19:5 47:7 31:10 9:6 12:10 45:1", "19:8 10:4 46:2 36:5 41:3 48:3 34:9 32:8 18:9 33:4", "45:5 8:1 22:5 36:1 46:4 18:3 21:3 2:2 14:4 16:1", "41:9 14:3 19:2 35:9 10:5 20:4 24:4 33:3 40:9 17:1", "35:8 11:10 26:10 46:9 9:9 20:3 22:8 17:10 24:9 3:9", "47:7 2:2 9:1 30:3 18:2 25:7 16:4 13:4 4:7 14:7 7:2"};
    vector<string> rulesc = {"3:2 7:9 21:1 44:6 31:8 25:5 12:7 11:5 14:6 45:3", "32:5 7:9 42:1 40:6 26:1 28:8 6:10 27:6 10:3 38:1", "30:4 9:3 42:4 32:1 45:3 37:9 14:9 0:6 25:3 13:9", "34:4 27:5 19:5 3:8 22:6 17:2 12:1 21:8 14:6 6:10", "11:7 33:2 4:4 40:4 48:6 34:8 36:5 12:1 29:2 37:1", "21:9 14:3 37:3 12:8 36:2 35:10 22:7 25:1 49:1 41:7", "1:9 47:9 25:3 38:10 33:1 34:4 36:4 4:2 3:2 35:8", "45:1 8:3 38:3 27:7 44:10 35:4 1:10 9:4 39:2 21:6", "45:8 0:7 9:1 37:7 17:1 3:9 22:10 4:1 19:6 33:4 2:9", "5:2 1:3 8:5 49:6 35:8 28:9 47:4 36:7 38:9 15:1 4:2", "17:2 27:8 26:3 16:8 48:5 18:2 12:3 33:4 0:4 1:10", "25:7 49:1 14:9 21:6 6:10 41:4 5:7 43:7 48:7 12:5", "0:1 26:4 31:2 5:7 18:6 11:3 21:7 43:8 48:10 40:9", "32:1 18:5 41:10 49:4 27:6 21:3 29:2 23:1 31:7 39:6", "20:5 24:3 10:4 5:9 7:8 37:8 6:2 40:7 23:7 33:10", "11:5 24:1 10:5 38:3 34:3 40:3 4:4 27:7 31:1 41:9", "25:8 2:1 27:8 20:3 21:6 41:2 1:8 11:5 26:10 37:10", "8:1 2:6 0:3 11:1 40:2 7:2 21:1 15:7 29:7 5:9 16:2", "17:7 15:3 31:10 38:7 44:9 43:8 35:8 18:9 26:5 40:3", "3:6 30:4 28:5 27:7 31:5 19:5 34:9 36:6 44:2 22:3", "25:9 23:7 5:2 39:4 17:7 20:1 48:9 3:9 10:8 26:10", "34:2 29:8 30:3 49:6 6:5 25:4 33:7 4:7 40:6 15:4", "36:4 13:1 10:3 27:2 8:5 7:8 14:10 45:7 9:3 17:1", "46:2 7:1 49:8 47:9 0:1 30:1 41:1 28:1 40:10 23:9", "18:2 35:3 48:1 4:2 3:7 26:9 25:6 24:1 42:9 40:6", "37:7 43:1 26:7 10:6 6:1 27:6 25:4 16:6 20:4 1:10", "44:10 23:4 34:3 15:10 45:3 2:8 18:9 47:9 35:10 1:8", "29:5 11:2 0:9 44:6 27:3 4:10 1:4 9:9 48:10 23:4", "15:4 39:9 26:2 23:10 27:1 1:2 48:8 47:4 42:6 12:1", "33:9 38:10 8:9 16:8 26:7 25:3 31:4 9:9 48:6 49:9", "30:3 48:4 9:10 19:5 4:10 27:8 39:5 41:3 42:10 6:10", "44:6 10:3 43:5 0:4 8:2 9:7 5:1 25:3 12:3 14:8 47:7", "6:8 12:3 27:7 13:4 35:2 47:3 23:4 11:3 39:9 15:10", "32:7 5:1 17:2 9:1 26:8 37:5 16:6 29:10 22:6 27:3", "46:9 20:8 33:1 17:7 47:3 7:7 2:8 9:7 29:9 5:7 34:1", "6:6 33:2 49:6 48:9 14:8 11:6 31:6 5:2 19:10 46:5", "7:1 37:8 30:3 39:10 10:2 47:10 46:5 24:2 43:2 41:6", "24:10 43:5 17:8 13:1 19:3 47:10 6:1 16:5 49:7 11:6", "15:1 36:5 28:10 42:8 9:3 31:4 12:6 38:10 27:5 10:9", "36:4 41:4 31:7 18:10 29:7 47:2 25:10 44:8 19:3 8:9", "26:2 0:7 47:7 3:4 21:3 34:3 1:9 41:4 40:7 13:4 7:6", "13:4 30:9 15:2 11:10 14:2 38:9 44:4 4:7 32:5 17:3", "45:3 7:4 34:6 32:2 20:4 6:6 42:9 26:2 29:8 37:8", "12:8 2:10 18:2 16:4 26:9 28:8 23:3 33:3 43:1 0:8", "33:8 41:10 24:6 6:7 13:7 30:10 49:7 40:5 18:7 45:8", "26:2 8:5 33:7 27:7 22:3 32:4 44:1 49:1 18:1 4:7", "18:4 24:2 45:7 38:4 26:10 0:4 4:1 21:7 39:5 43:8", "23:4 32:5 41:10 16:8 10:4 15:4 34:9 40:1 0:8 26:4", "3:6 31:10 4:3 19:1 21:7 32:4 13:10 28:1 12:7 1:2", "21:8 34:7 11:9 29:9 41:9 48:7 25:7 28:9 10:6 18:2"};
    int finalState = 26;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 7.695757348828912E-4;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> rulesa = {"35:3 21:7 3:1 29:5 0:7 16:1 10:3 8:7 44:2 1:3 33:2", "30:2 47:9 38:3 45:10 12:4 2:9 24:8 4:6 6:6 7:3 0:7", "15:9 5:2 41:10 31:10 32:1 6:5 9:10 35:7 2:1 40:6", "0:2 19:9 6:4 30:1 34:8 15:1 38:5 21:3 29:9 7:8 8:4", "1:6 41:10 22:10 12:5 38:6 25:9 32:9 47:6 27:5 23:4", "6:3 28:5 23:2 16:8 8:6 14:6 44:1 37:6 42:2 45:8", "29:5 40:10 41:1 49:8 34:10 21:6 45:4 8:6 38:7 9:3", "10:10 16:6 6:9 22:7 21:1 2:10 45:8 1:1 37:6 42:5", "3:4 35:3 15:8 42:2 9:5 30:8 32:7 7:7 39:6 18:1 0:7", "33:6 13:10 20:10 39:4 7:2 8:6 16:9 38:5 34:1 30:10", "45:10 7:1 16:6 42:9 6:9 3:5 21:8 5:6 13:8 29:5 8:1", "29:5 30:1 7:4 49:5 28:7 25:7 5:3 47:8 1:2 19:9 6:3", "47:4 19:9 35:10 49:9 9:6 44:5 25:4 45:3 12:10 18:9", "7:6 47:2 49:2 19:6 12:10 2:3 32:10 36:2 39:7 17:3", "27:7 44:6 14:4 47:2 41:3 38:2 2:1 28:9 20:10 0:4", "29:3 38:10 23:4 36:10 44:9 28:7 1:9 41:6 32:2 39:8", "17:5 5:9 3:8 9:3 19:8 27:3 37:3 33:4 35:5 34:2 2:9", "4:6 27:10 0:5 46:6 31:1 11:10 22:9 43:3 3:7 32:6", "22:1 4:6 19:4 11:7 5:10 16:8 7:1 3:6 46:7 32:7 1:8", "6:1 3:6 32:2 0:10 24:8 11:9 14:3 27:2 43:7 1:10", "7:9 18:4 49:4 46:10 26:4 0:6 4:7 38:5 11:6 24:1", "45:8 47:7 38:4 16:7 9:10 28:10 40:6 48:10 7:1 41:7", "49:10 29:9 26:5 9:2 44:10 36:2 47:9 35:1 34:9 45:4", "3:9 27:7 24:6 31:5 44:3 37:3 2:9 43:6 5:7 9:7 30:5", "24:8 26:2 48:10 49:2 11:2 38:9 7:10 28:6 39:7 5:8", "26:1 7:7 4:5 3:7 9:9 42:9 12:5 39:2 15:2 46:10 0:5", "6:10 38:6 15:6 17:5 13:6 35:6 5:2 16:3 18:4 19:4", "40:1 16:3 7:2 10:8 39:10 48:3 2:10 31:4 8:6 47:2", "1:3 37:3 40:5 47:5 43:7 18:3 49:6 19:3 29:4 15:5", "7:2 39:2 33:6 11:1 2:10 4:6 24:7 32:8 0:5 10:2 3:4", "41:7 29:8 4:2 32:7 34:1 47:9 14:3 9:1 21:8 22:9", "16:2 11:7 39:10 32:4 36:10 49:5 27:1 23:7 43:3 5:3", "18:6 5:4 30:6 34:3 26:4 6:10 46:4 33:8 32:8 39:1", "14:7 39:5 34:2 31:6 1:2 35:3 5:6 44:8 37:8 9:2 4:4", "28:2 40:1 1:10 42:7 30:8 12:2 18:7 38:9 9:1 27:1", "15:8 25:2 2:10 3:8 29:8 0:5 21:7 49:10 13:10 16:5", "44:9 47:8 10:3 48:5 25:4 13:2 27:10 20:3 6:6 26:3", "5:2 15:3 29:10 33:8 41:10 20:8 36:9 8:9 3:5 37:10", "14:9 26:5 49:7 20:6 10:10 47:4 4:2 32:6 3:7 29:9", "25:9 0:5 11:3 44:10 14:9 20:5 10:3 17:3 24:10 2:1", "32:8 27:2 42:2 31:5 47:9 24:7 33:3 17:6 37:6 34:2", "48:5 47:10 13:2 43:8 22:6 1:6 39:6 21:8 34:8 24:1", "27:9 47:8 46:1 11:6 31:9 0:9 44:8 16:8 40:7 38:1", "30:1 23:5 17:3 9:9 29:1 35:10 24:5 0:10 5:7 19:2", "35:6 0:3 49:2 47:2 14:6 8:7 25:5 16:6 22:1 9:1 7:1", "12:4 8:3 15:7 25:1 47:1 0:8 35:7 33:10 34:9 3:9", "37:9 17:10 13:7 44:4 14:5 26:8 35:4 32:5 10:5 8:2", "46:9 1:1 35:2 14:10 31:7 22:3 12:9 7:9 10:4 20:8", "27:3 18:1 44:10 43:6 48:3 49:3 30:7 4:3 16:2 7:10", "17:2 2:3 29:10 9:4 32:3 39:9 4:10 37:10 33:8 27:7"};
    vector<string> rulesb = {"44:8 18:6 29:2 34:6 37:9 30:2 7:8 1:4 47:2 17:3", "40:9 6:7 26:10 30:6 38:5 41:4 3:8 45:5 23:10 5:8", "43:5 0:8 13:3 17:1 25:9 33:8 15:9 20:1 27:7 35:7", "4:4 8:1 46:6 23:8 19:5 24:7 14:4 17:10 2:4 40:5", "19:10 25:9 12:7 16:2 22:10 31:4 7:1 18:8 15:4 14:5", "43:7 27:2 48:9 41:8 9:1 12:7 2:3 18:1 8:1 49:2 7:7", "28:8 11:9 0:4 12:3 40:3 34:7 33:3 17:10 10:10 19:8", "6:2 42:9 17:4 26:4 37:5 33:5 40:5 43:6 27:10 38:2", "8:2 45:1 29:7 15:10 11:1 19:4 21:7 31:1 13:6 35:6", "42:9 38:7 13:3 5:5 39:3 33:8 36:6 20:6 2:7 46:10", "48:2 11:3 31:10 20:9 49:1 32:5 9:1 14:7 37:9 25:4", "46:1 27:4 49:7 6:5 1:10 18:2 34:9 47:8 7:2 11:4", "4:1 15:8 41:8 44:5 34:1 3:8 24:1 46:10 5:7 36:5", "19:2 22:10 15:5 43:4 30:1 28:6 2:1 36:5 18:6 14:10", "16:1 8:2 44:7 1:10 23:10 47:10 11:9 20:2 13:5 10:2", "34:6 31:7 4:5 40:4 20:9 24:3 9:6 33:7 38:3 32:3", "25:3 18:2 13:5 22:10 44:9 34:1 6:8 29:5 40:1 47:5", "16:10 15:5 11:5 22:9 7:5 47:4 3:7 24:9 33:3 28:9", "29:8 28:5 16:9 12:8 27:2 41:5 40:8 10:4 37:7 5:9", "34:5 10:5 36:5 33:5 30:10 41:8 4:7 48:7 26:3 6:5", "8:7 6:8 28:8 48:4 13:4 26:1 15:9 37:9 18:5 17:3", "3:8 11:3 22:6 20:6 23:1 33:6 43:7 4:1 37:9 39:10", "18:7 45:2 10:10 17:7 43:6 46:8 8:9 3:2 7:5 49:8", "44:2 24:1 47:7 1:10 41:7 49:9 14:8 35:10 42:7 16:8", "16:8 40:8 27:7 45:8 41:8 9:4 14:6 22:3 29:7 24:10", "13:7 27:9 42:2 35:4 5:2 44:3 14:8 29:4 39:4 49:9", "7:8 31:4 45:7 11:9 15:6 16:5 32:5 20:8 12:5 8:6", "32:1 2:7 16:9 33:8 15:3 7:5 9:8 0:4 27:4 34:8 12:4", "6:1 39:2 46:3 7:6 31:10 15:5 11:6 23:10 10:10 21:2", "40:3 28:4 13:10 20:7 38:3 42:8 34:8 44:3 27:2 3:4", "42:3 6:10 28:1 11:10 37:5 15:1 27:5 20:8 47:8 30:1", "44:6 34:1 19:5 32:7 21:4 36:7 7:10 41:8 10:5 15:10", "11:3 41:7 31:1 15:9 9:1 20:3 37:4 7:2 24:8 26:3", "45:9 23:6 7:5 24:1 16:1 35:9 12:5 1:6 27:8 3:5 4:4", "26:2 11:5 47:10 19:6 22:1 45:2 21:5 38:6 37:10 8:3", "13:3 11:6 25:8 7:2 26:3 42:9 14:9 5:10 22:4 32:5", "28:6 34:6 3:10 18:8 12:8 32:7 43:10 25:4 38:6 47:7", "30:10 18:6 28:7 48:1 25:1 34:4 44:5 33:2 2:3 39:9", "20:7 37:1 39:9 12:6 3:7 18:1 22:5 23:6 24:2 44:8", "42:1 1:9 43:6 28:8 47:4 45:8 31:10 21:3 24:2 30:1", "31:3 40:1 44:6 15:4 24:9 41:4 10:7 14:5 4:1 32:1", "23:3 28:1 22:6 12:7 13:9 27:5 33:3 6:7 32:10 49:5", "2:6 22:8 39:3 29:6 0:9 16:9 7:9 19:6 6:4 25:9 42:4", "44:10 21:2 25:7 16:5 41:1 19:1 31:4 0:6 47:10 8:6", "37:7 14:1 36:5 15:6 19:5 47:7 31:10 9:6 12:10 45:1", "19:8 10:4 46:2 36:5 41:3 48:3 34:9 32:8 18:9 33:4", "45:5 8:1 22:5 36:1 46:4 18:3 21:3 2:2 14:4 16:1", "41:9 14:3 19:2 35:9 10:5 20:4 24:4 33:3 40:9 17:1", "35:8 11:10 26:10 46:9 9:9 20:3 22:8 17:10 24:9 3:9", "47:7 2:2 9:1 30:3 18:2 25:7 16:4 13:4 4:7 14:7 7:2"};
    vector<string> rulesc = {"3:2 7:9 21:1 44:6 31:8 25:5 12:7 11:5 14:6 45:3", "32:5 7:9 42:1 40:6 26:1 28:8 6:10 27:6 10:3 38:1", "30:4 9:3 42:4 32:1 45:3 37:9 14:9 0:6 25:3 13:9", "34:4 27:5 19:5 3:8 22:6 17:2 12:1 21:8 14:6 6:10", "11:7 33:2 4:4 40:4 48:6 34:8 36:5 12:1 29:2 37:1", "21:9 14:3 37:3 12:8 36:2 35:10 22:7 25:1 49:1 41:7", "1:9 47:9 25:3 38:10 33:1 34:4 36:4 4:2 3:2 35:8", "45:1 8:3 38:3 27:7 44:10 35:4 1:10 9:4 39:2 21:6", "45:8 0:7 9:1 37:7 17:1 3:9 22:10 4:1 19:6 33:4 2:9", "5:2 1:3 8:5 49:6 35:8 28:9 47:4 36:7 38:9 15:1 4:2", "17:2 27:8 26:3 16:8 48:5 18:2 12:3 33:4 0:4 1:10", "25:7 49:1 14:9 21:6 6:10 41:4 5:7 43:7 48:7 12:5", "0:1 26:4 31:2 5:7 18:6 11:3 21:7 43:8 48:10 40:9", "32:1 18:5 41:10 49:4 27:6 21:3 29:2 23:1 31:7 39:6", "20:5 24:3 10:4 5:9 7:8 37:8 6:2 40:7 23:7 33:10", "11:5 24:1 10:5 38:3 34:3 40:3 4:4 27:7 31:1 41:9", "25:8 2:1 27:8 20:3 21:6 41:2 1:8 11:5 26:10 37:10", "8:1 2:6 0:3 11:1 40:2 7:2 21:1 15:7 29:7 5:9 16:2", "17:7 15:3 31:10 38:7 44:9 43:8 35:8 18:9 26:5 40:3", "3:6 30:4 28:5 27:7 31:5 19:5 34:9 36:6 44:2 22:3", "25:9 23:7 5:2 39:4 17:7 20:1 48:9 3:9 10:8 26:10", "34:2 29:8 30:3 49:6 6:5 25:4 33:7 4:7 40:6 15:4", "36:4 13:1 10:3 27:2 8:5 7:8 14:10 45:7 9:3 17:1", "46:2 7:1 49:8 47:9 0:1 30:1 41:1 28:1 40:10 23:9", "18:2 35:3 48:1 4:2 3:7 26:9 25:6 24:1 42:9 40:6", "37:7 43:1 26:7 10:6 6:1 27:6 25:4 16:6 20:4 1:10", "44:10 23:4 34:3 15:10 45:3 2:8 18:9 47:9 35:10 1:8", "29:5 11:2 0:9 44:6 27:3 4:10 1:4 9:9 48:10 23:4", "15:4 39:9 26:2 23:10 27:1 1:2 48:8 47:4 42:6 12:1", "33:9 38:10 8:9 16:8 26:7 25:3 31:4 9:9 48:6 49:9", "30:3 48:4 9:10 19:5 4:10 27:8 39:5 41:3 42:10 6:10", "44:6 10:3 43:5 0:4 8:2 9:7 5:1 25:3 12:3 14:8 47:7", "6:8 12:3 27:7 13:4 35:2 47:3 23:4 11:3 39:9 15:10", "32:7 5:1 17:2 9:1 26:8 37:5 16:6 29:10 22:6 27:3", "46:9 20:8 33:1 17:7 47:3 7:7 2:8 9:7 29:9 5:7 34:1", "6:6 33:2 49:6 48:9 14:8 11:6 31:6 5:2 19:10 46:5", "7:1 37:8 30:3 39:10 10:2 47:10 46:5 24:2 43:2 41:6", "24:10 43:5 17:8 13:1 19:3 47:10 6:1 16:5 49:7 11:6", "15:1 36:5 28:10 42:8 9:3 31:4 12:6 38:10 27:5 10:9", "36:4 41:4 31:7 18:10 29:7 47:2 25:10 44:8 19:3 8:9", "26:2 0:7 47:7 3:4 21:3 34:3 1:9 41:4 40:7 13:4 7:6", "13:4 30:9 15:2 11:10 14:2 38:9 44:4 4:7 32:5 17:3", "45:3 7:4 34:6 32:2 20:4 6:6 42:9 26:2 29:8 37:8", "12:8 2:10 18:2 16:4 26:9 28:8 23:3 33:3 43:1 0:8", "33:8 41:10 24:6 6:7 13:7 30:10 49:7 40:5 18:7 45:8", "26:2 8:5 33:7 27:7 22:3 32:4 44:1 49:1 18:1 4:7", "18:4 24:2 45:7 38:4 26:10 0:4 4:1 21:7 39:5 43:8", "23:4 32:5 41:10 16:8 10:4 15:4 34:9 40:1 0:8 26:4", "3:6 31:10 4:3 19:1 21:7 32:4 13:10 28:1 12:7 1:2", "21:8 34:7 11:9 29:9 41:9 48:7 25:7 28:9 10:6 18:2"};
    int finalState = 999;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.8667710294214875;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> rulesa = {"35:9 49:8 21:10 7:10 4:10 32:3 0:6 46:8 26:6 28:4", "15:7 29:8 25:6 3:2 35:6 16:3 5:6 46:6 17:7 2:5 8:6", "9:1 48:3 22:9 17:6 14:2 11:10 20:3 7:2 21:8 1:9", "3:1 38:8 2:10 16:2 8:7 18:8 33:8 42:2 11:10 4:9", "31:10 32:9 16:3 44:6 29:9 23:8 41:8 5:7 22:9 21:9", "32:7 23:3 35:6 38:3 2:1 26:8 12:1 30:9 1:6 8:2 9:6", "3:10 40:3 39:2 34:1 37:10 8:5 2:1 19:7 31:10 45:8", "0:8 2:9 37:6 18:4 34:9 36:1 22:4 33:2 19:6 39:4", "2:1 49:10 46:3 48:8 23:6 9:7 12:5 28:5 7:9 18:2", "24:4 12:8 9:7 40:2 14:10 47:9 19:1 46:10 25:1 34:8", "8:6 39:9 4:1 10:8 23:6 27:4 17:7 15:7 30:9 26:8", "5:4 4:4 45:3 39:10 33:6 17:10 23:1 29:5 10:6 20:4", "9:10 45:6 11:2 42:4 16:10 24:5 13:4 1:3 23:7 6:7", "26:6 44:9 22:5 10:6 12:1 25:4 4:7 19:6 43:1 7:1", "4:4 3:3 22:4 21:8 24:5 19:5 8:1 35:4 17:4 12:9 9:9", "8:1 15:6 32:7 11:7 40:3 37:1 45:8 4:3 21:9 18:2", "17:7 15:10 48:9 14:3 36:4 21:8 49:5 16:7 47:3 27:4", "6:7 11:8 44:8 43:4 41:9 40:8 27:4 24:5 34:7 3:2", "26:7 29:6 16:8 24:9 28:10 40:9 23:7 44:10 13:5 9:7", "9:9 43:4 29:7 47:8 2:9 13:2 25:9 30:6 24:7 16:1", "47:8 32:8 1:4 40:4 0:3 34:1 31:7 18:9 38:2 17:7", "29:4 34:5 18:8 7:6 37:1 40:6 22:2 33:9 26:3 35:4", "28:7 46:4 12:5 18:5 11:7 9:10 48:10 3:2 25:1 13:3", "43:7 23:8 16:2 29:1 37:5 46:2 34:5 3:3 38:3 36:10", "4:5 2:1 10:10 25:2 13:5 39:8 28:7 49:4 3:6 22:2", "29:5 14:8 46:7 30:4 34:9 36:8 39:10 7:4 18:10 3:1", "10:7 12:4 24:4 42:4 2:2 11:4 16:10 30:8 21:2 43:7", "3:2 27:4 4:8 41:6 16:10 30:3 7:4 2:2 36:4 42:8 6:6", "7:6 17:5 3:7 44:8 29:10 13:6 46:3 23:3 19:3 28:2", "46:6 47:6 44:2 3:2 24:1 19:10 34:10 29:10 27:4 0:7", "9:9 34:10 12:4 42:9 27:6 44:8 4:4 7:5 3:5 5:10 0:5", "37:2 28:3 19:5 42:9 17:7 13:10 39:3 44:10 45:1 8:9", "35:2 30:10 13:9 8:1 24:6 38:9 11:8 20:9 23:5 21:9", "26:9 44:5 2:8 36:6 12:1 14:6 5:1 31:10 32:9 6:3", "1:2 45:9 47:7 3:9 8:2 42:7 7:7 23:1 30:3 12:8 16:7", "5:5 38:7 34:7 47:5 27:10 32:3 21:5 41:8 23:8 15:5", "39:1 41:8 44:8 36:4 37:6 12:9 25:9 33:4 45:1 19:5", "32:5 24:7 7:10 26:6 31:3 37:9 44:2 33:10 16:8 27:1", "14:10 47:2 39:1 35:9 48:5 30:9 46:4 24:6 10:4 22:1", "44:2 43:1 15:5 45:4 13:8 23:8 11:7 40:4 28:7 5:9", "8:6 38:10 12:4 42:10 13:9 49:3 24:7 34:6 15:2 43:8", "20:1 9:1 41:4 11:9 44:10 43:1 6:9 39:8 27:8 34:9", "7:10 32:6 17:10 40:5 22:2 1:1 41:4 28:5 24:5 5:6", "48:5 18:1 16:4 39:10 8:10 5:1 36:3 14:10 43:8 29:7", "7:1 14:10 37:7 30:2 21:1 29:5 22:7 32:10 10:2 6:4", "23:1 42:8 20:9 10:6 9:8 44:6 25:9 40:6 17:8 3:7", "13:9 33:2 4:8 48:2 38:5 9:4 7:7 39:3 31:6 45:9 5:7", "14:1 41:3 37:9 7:8 24:5 22:1 42:8 13:7 21:5 0:3", "21:10 32:3 10:1 12:8 24:8 4:5 40:7 1:2 15:1 37:4", "4:2 8:3 16:6 37:7 30:4 29:1 17:10 36:8 6:5 40:3"};
    vector<string> rulesb = {"35:4 44:1 16:5 13:9 12:3 25:1 36:6 24:3 0:3 40:8", "47:7 26:6 39:7 23:9 31:1 30:7 1:7 42:1 18:8 6:3", "14:7 16:10 8:2 22:2 17:7 7:3 13:1 46:4 48:4 29:8", "12:3 20:9 30:9 45:6 25:2 19:4 42:4 1:4 29:7 27:2", "15:3 13:6 37:2 27:3 46:10 10:2 26:6 14:6 43:3 21:1", "25:4 14:7 32:1 40:5 8:1 46:8 17:4 19:1 18:5 27:8", "2:3 41:10 36:3 12:1 27:10 24:6 1:1 44:1 19:6 37:8", "12:10 26:10 28:9 9:8 25:1 2:1 24:7 41:5 39:3 6:4", "11:7 23:7 44:5 49:2 37:10 32:4 16:3 0:1 27:8 12:1", "34:7 33:10 18:6 31:6 48:10 16:8 47:10 26:7 42:1", "32:7 49:2 22:5 41:4 25:4 37:6 16:1 26:9 24:10 10:8", "21:3 14:7 47:7 30:9 42:7 19:4 27:1 40:9 6:10 9:6", "38:7 28:3 15:9 14:9 40:4 6:1 5:10 49:8 17:10 7:7", "6:2 15:10 44:10 4:8 11:10 17:8 10:9 12:9 26:1 2:7", "34:4 15:10 25:9 44:9 48:8 23:1 10:9 38:5 33:10 3:4", "3:7 42:9 0:7 22:3 48:10 33:7 43:9 41:7 37:10 16:9", "15:4 35:2 4:9 38:2 48:7 37:1 0:5 23:7 8:3 39:2 5:8", "30:7 27:2 14:9 8:3 13:5 32:5 36:1 4:10 2:9 12:5", "25:5 37:4 11:5 49:2 38:4 12:6 22:6 17:6 40:10 26:2", "34:1 23:6 20:1 25:3 39:6 35:1 24:9 13:9 43:3 21:6", "36:5 43:6 35:6 48:10 27:6 42:9 11:5 18:7 33:2 0:3", "14:4 17:2 33:4 5:4 45:4 6:9 41:6 15:2 44:4 0:5 9:9", "32:4 28:6 37:10 20:6 40:4 19:5 0:6 3:9 39:1 45:6", "29:7 27:7 17:6 19:3 49:5 33:2 18:3 7:8 35:7 36:9", "47:5 45:5 49:10 28:2 29:6 41:9 1:7 19:6 22:6 7:6", "22:1 16:4 23:5 47:9 34:10 49:5 18:2 36:5 21:6 42:6", "26:10 29:5 49:1 48:6 17:8 24:3 18:7 33:9 41:3 9:7", "22:4 41:4 10:1 0:1 47:4 37:5 2:2 23:10 17:6 19:2", "31:5 47:2 48:1 18:5 6:4 12:3 16:2 23:6 36:6 49:4", "10:10 12:3 8:6 0:5 29:1 28:9 43:9 39:7 19:1 5:10", "18:1 29:3 41:8 16:5 17:1 31:3 19:1 30:9 43:5 32:6", "20:6 46:2 25:2 11:3 2:1 12:2 49:4 38:7 19:9 33:6", "14:4 43:8 24:9 39:8 40:10 7:10 1:3 4:3 29:8 31:9", "40:8 26:4 22:3 31:8 39:6 18:5 20:3 5:6 37:10 14:8", "16:2 0:2 30:2 24:8 18:5 21:2 15:1 13:3 31:7 49:2", "14:10 4:10 23:2 39:2 15:10 34:7 21:6 35:6 1:2 24:5", "31:1 7:2 27:4 15:3 41:8 21:1 13:9 43:10 32:6 16:4", "38:2 11:7 0:10 48:6 30:2 23:8 16:10 15:4 36:4 29:5", "48:9 45:6 38:3 21:9 23:7 33:6 0:3 6:6 14:2 29:1", "3:5 10:10 38:9 11:3 19:3 20:5 17:5 18:7 49:8 7:1", "0:10 47:10 14:5 20:6 44:4 22:6 34:9 8:4 2:4 46:4", "35:4 5:7 25:2 44:4 42:7 32:9 37:1 4:7 3:1 46:7 1:9", "47:9 4:9 43:4 6:8 20:2 1:2 25:10 13:7 22:9 35:5", "31:3 49:3 29:9 40:1 47:2 17:3 23:1 10:5 21:3 4:2", "14:6 18:4 49:8 31:4 36:3 46:9 22:10 28:9 21:9 16:8", "49:10 0:1 38:2 7:8 15:7 21:3 1:2 13:10 11:7 46:6", "43:5 30:8 36:3 39:4 12:6 2:2 28:1 26:4 25:2 18:6", "35:4 27:3 45:2 44:3 5:4 6:8 36:9 20:7 4:3 18:4 8:6", "44:10 3:6 20:3 46:8 31:9 0:6 32:3 30:2 39:7 9:5", "2:6 24:2 49:6 41:4 21:4 13:3 12:7 0:8 35:5 32:8"};
    vector<string> rulesc = {"24:10 22:5 48:10 12:5 49:6 37:7 46:7 28:4 31:9 3:9", "8:3 7:8 45:7 19:2 17:3 24:10 0:1 4:6 35:2 39:7 3:1", "2:7 3:6 19:3 12:6 14:2 45:3 37:6 8:1 40:4 10:8 7:4", "29:2 35:1 44:4 49:6 15:8 31:6 28:2 11:5 38:1 30:2", "7:9 20:8 31:8 40:5 27:5 25:10 46:5 42:10 11:2 18:3", "25:2 6:6 44:3 29:6 30:4 7:2 37:1 42:7 15:3 5:1 1:3", "18:2 39:5 34:2 21:3 49:9 43:6 35:10 1:1 9:1 32:9", "12:5 27:10 47:2 9:5 11:3 8:1 31:5 13:2 48:6 7:7", "24:7 18:9 7:4 4:3 47:5 45:10 19:1 27:6 25:7 36:3", "24:9 12:6 8:5 14:5 3:3 39:7 9:3 33:6 0:3 20:8 26:2", "34:1 18:10 49:1 10:5 41:8 40:8 21:8 14:6 45:3 17:7", "25:7 49:4 32:9 28:7 14:4 38:1 1:4 11:10 27:6 5:10", "12:7 31:10 30:2 15:3 22:2 44:9 13:2 7:1 41:2 49:5", "13:5 5:7 19:2 26:6 6:7 0:6 24:6 40:9 38:2 49:4 3:7", "2:7 13:10 16:2 32:8 26:3 45:2 20:8 9:6 8:2 1:2 6:3", "33:3 36:1 40:7 15:8 46:5 31:4 30:3 27:4 22:2 13:3", "30:4 36:2 6:1 37:8 40:3 1:4 22:10 2:1 16:2 12:7", "24:7 48:1 3:9 10:9 42:8 34:9 49:6 27:7 9:1 13:7", "0:7 1:2 31:5 34:7 4:1 16:8 30:3 45:6 23:2 21:6 6:9", "20:2 3:10 36:6 37:7 16:3 12:7 26:7 42:8 14:6 43:4", "20:5 13:6 29:6 22:4 40:10 1:6 14:8 38:5 21:4 46:3", "44:3 33:1 13:8 41:7 11:1 3:2 37:6 43:4 21:10 19:3", "11:3 19:8 25:1 0:5 8:2 40:1 7:7 48:1 49:10 2:5 3:9", "9:6 0:4 40:5 10:3 21:3 34:6 31:4 3:3 24:1 46:4 2:3", "2:9 8:2 32:6 12:9 35:3 17:10 47:10 44:3 33:6 36:5", "49:2 1:8 37:6 47:2 20:7 13:10 23:7 10:8 17:2 39:8", "11:2 25:8 18:4 3:3 34:5 30:9 31:4 10:10 46:5 19:9", "14:7 34:5 7:3 11:8 4:3 21:2 5:1 15:1 12:1 41:4 9:7", "10:2 1:1 40:2 44:6 43:1 47:2 8:6 24:10 20:3 14:1", "0:7 6:3 27:7 21:6 10:4 22:8 24:5 15:4 39:9 43:10", "22:7 34:1 37:7 26:1 45:10 30:7 9:6 38:7 7:1 23:4", "38:8 46:1 29:5 22:7 35:1 28:5 4:1 13:5 36:8 30:1", "7:5 47:4 1:9 29:1 25:10 42:8 35:10 22:3 44:8 41:9", "11:3 13:8 21:3 16:2 49:3 35:9 2:6 33:2 43:1 47:5", "28:8 49:3 46:7 43:1 40:3 38:5 29:2 47:4 30:8 37:2", "46:7 10:6 2:10 36:3 30:5 24:7 14:9 26:10 25:2 21:5", "4:10 16:4 15:4 34:6 33:1 24:8 48:1 1:6 25:10 28:3", "20:10 42:8 43:3 36:1 29:9 28:2 17:7 25:8 23:7 46:7", "1:7 23:10 32:10 3:10 46:10 0:1 45:8 37:5 41:7 9:8", "44:1 33:10 34:1 49:3 11:3 35:8 41:4 5:6 7:7 18:9", "45:4 6:4 35:6 34:10 24:2 9:10 48:10 49:10 38:10", "23:7 32:2 41:5 37:8 19:2 39:9 9:8 6:8 24:4 20:6", "40:9 19:10 14:1 45:10 29:2 43:6 7:4 34:6 26:2 31:1", "23:6 30:9 25:2 32:1 10:2 27:8 18:4 26:2 22:6 17:6", "48:2 16:10 26:2 21:3 32:5 37:6 12:8 14:5 22:2 3:5", "29:8 17:10 9:10 19:3 28:3 7:9 10:3 13:10 47:6 30:5", "26:8 39:3 10:3 7:9 25:4 6:4 48:1 9:4 36:1 8:8 42:1", "11:9 1:6 5:7 14:3 41:10 9:2 44:2 18:4 45:8 47:8", "23:2 26:2 37:4 27:1 6:2 24:10 30:1 15:6 7:6 45:9", "19:8 12:2 37:2 5:10 29:6 43:6 47:1 31:8 36:6 15:4"};
    int finalState = 36;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.009607692307692308;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> rulesa = {"35:9 49:8 21:10 7:10 4:10 32:3 0:6 46:8 26:6 28:4", "15:7 29:8 25:6 3:2 35:6 16:3 5:6 46:6 17:7 2:5 8:6", "9:1 48:3 22:9 17:6 14:2 11:10 20:3 7:2 21:8 1:9", "3:1 38:8 2:10 16:2 8:7 18:8 33:8 42:2 11:10 4:9", "31:10 32:9 16:3 44:6 29:9 23:8 41:8 5:7 22:9 21:9", "32:7 23:3 35:6 38:3 2:1 26:8 12:1 30:9 1:6 8:2 9:6", "3:10 40:3 39:2 34:1 37:10 8:5 2:1 19:7 31:10 45:8", "0:8 2:9 37:6 18:4 34:9 36:1 22:4 33:2 19:6 39:4", "2:1 49:10 46:3 48:8 23:6 9:7 12:5 28:5 7:9 18:2", "24:4 12:8 9:7 40:2 14:10 47:9 19:1 46:10 25:1 34:8", "8:6 39:9 4:1 10:8 23:6 27:4 17:7 15:7 30:9 26:8", "5:4 4:4 45:3 39:10 33:6 17:10 23:1 29:5 10:6 20:4", "9:10 45:6 11:2 42:4 16:10 24:5 13:4 1:3 23:7 6:7", "26:6 44:9 22:5 10:6 12:1 25:4 4:7 19:6 43:1 7:1", "4:4 3:3 22:4 21:8 24:5 19:5 8:1 35:4 17:4 12:9 9:9", "8:1 15:6 32:7 11:7 40:3 37:1 45:8 4:3 21:9 18:2", "17:7 15:10 48:9 14:3 36:4 21:8 49:5 16:7 47:3 27:4", "6:7 11:8 44:8 43:4 41:9 40:8 27:4 24:5 34:7 3:2", "26:7 29:6 16:8 24:9 28:10 40:9 23:7 44:10 13:5 9:7", "9:9 43:4 29:7 47:8 2:9 13:2 25:9 30:6 24:7 16:1", "47:8 32:8 1:4 40:4 0:3 34:1 31:7 18:9 38:2 17:7", "29:4 34:5 18:8 7:6 37:1 40:6 22:2 33:9 26:3 35:4", "28:7 46:4 12:5 18:5 11:7 9:10 48:10 3:2 25:1 13:3", "43:7 23:8 16:2 29:1 37:5 46:2 34:5 3:3 38:3 36:10", "4:5 2:1 10:10 25:2 13:5 39:8 28:7 49:4 3:6 22:2", "29:5 14:8 46:7 30:4 34:9 36:8 39:10 7:4 18:10 3:1", "10:7 12:4 24:4 42:4 2:2 11:4 16:10 30:8 21:2 43:7", "3:2 27:4 4:8 41:6 16:10 30:3 7:4 2:2 36:4 42:8 6:6", "7:6 17:5 3:7 44:8 29:10 13:6 46:3 23:3 19:3 28:2", "46:6 47:6 44:2 3:2 24:1 19:10 34:10 29:10 27:4 0:7", "9:9 34:10 12:4 42:9 27:6 44:8 4:4 7:5 3:5 5:10 0:5", "37:2 28:3 19:5 42:9 17:7 13:10 39:3 44:10 45:1 8:9", "35:2 30:10 13:9 8:1 24:6 38:9 11:8 20:9 23:5 21:9", "26:9 44:5 2:8 36:6 12:1 14:6 5:1 31:10 32:9 6:3", "1:2 45:9 47:7 3:9 8:2 42:7 7:7 23:1 30:3 12:8 16:7", "5:5 38:7 34:7 47:5 27:10 32:3 21:5 41:8 23:8 15:5", "39:1 41:8 44:8 36:4 37:6 12:9 25:9 33:4 45:1 19:5", "32:5 24:7 7:10 26:6 31:3 37:9 44:2 33:10 16:8 27:1", "14:10 47:2 39:1 35:9 48:5 30:9 46:4 24:6 10:4 22:1", "44:2 43:1 15:5 45:4 13:8 23:8 11:7 40:4 28:7 5:9", "8:6 38:10 12:4 42:10 13:9 49:3 24:7 34:6 15:2 43:8", "20:1 9:1 41:4 11:9 44:10 43:1 6:9 39:8 27:8 34:9", "7:10 32:6 17:10 40:5 22:2 1:1 41:4 28:5 24:5 5:6", "48:5 18:1 16:4 39:10 8:10 5:1 36:3 14:10 43:8 29:7", "7:1 14:10 37:7 30:2 21:1 29:5 22:7 32:10 10:2 6:4", "23:1 42:8 20:9 10:6 9:8 44:6 25:9 40:6 17:8 3:7", "13:9 33:2 4:8 48:2 38:5 9:4 7:7 39:3 31:6 45:9 5:7", "14:1 41:3 37:9 7:8 24:5 22:1 42:8 13:7 21:5 0:3", "21:10 32:3 10:1 12:8 24:8 4:5 40:7 1:2 15:1 37:4", "4:2 8:3 16:6 37:7 30:4 29:1 17:10 36:8 6:5 40:3"};
    vector<string> rulesb = {"35:4 44:1 16:5 13:9 12:3 25:1 36:6 24:3 0:3 40:8", "47:7 26:6 39:7 23:9 31:1 30:7 1:7 42:1 18:8 6:3", "14:7 16:10 8:2 22:2 17:7 7:3 13:1 46:4 48:4 29:8", "12:3 20:9 30:9 45:6 25:2 19:4 42:4 1:4 29:7 27:2", "15:3 13:6 37:2 27:3 46:10 10:2 26:6 14:6 43:3 21:1", "25:4 14:7 32:1 40:5 8:1 46:8 17:4 19:1 18:5 27:8", "2:3 41:10 36:3 12:1 27:10 24:6 1:1 44:1 19:6 37:8", "12:10 26:10 28:9 9:8 25:1 2:1 24:7 41:5 39:3 6:4", "11:7 23:7 44:5 49:2 37:10 32:4 16:3 0:1 27:8 12:1", "34:7 33:10 18:6 31:6 48:10 16:8 47:10 26:7 42:1", "32:7 49:2 22:5 41:4 25:4 37:6 16:1 26:9 24:10 10:8", "21:3 14:7 47:7 30:9 42:7 19:4 27:1 40:9 6:10 9:6", "38:7 28:3 15:9 14:9 40:4 6:1 5:10 49:8 17:10 7:7", "6:2 15:10 44:10 4:8 11:10 17:8 10:9 12:9 26:1 2:7", "34:4 15:10 25:9 44:9 48:8 23:1 10:9 38:5 33:10 3:4", "3:7 42:9 0:7 22:3 48:10 33:7 43:9 41:7 37:10 16:9", "15:4 35:2 4:9 38:2 48:7 37:1 0:5 23:7 8:3 39:2 5:8", "30:7 27:2 14:9 8:3 13:5 32:5 36:1 4:10 2:9 12:5", "25:5 37:4 11:5 49:2 38:4 12:6 22:6 17:6 40:10 26:2", "34:1 23:6 20:1 25:3 39:6 35:1 24:9 13:9 43:3 21:6", "36:5 43:6 35:6 48:10 27:6 42:9 11:5 18:7 33:2 0:3", "14:4 17:2 33:4 5:4 45:4 6:9 41:6 15:2 44:4 0:5 9:9", "32:4 28:6 37:10 20:6 40:4 19:5 0:6 3:9 39:1 45:6", "29:7 27:7 17:6 19:3 49:5 33:2 18:3 7:8 35:7 36:9", "47:5 45:5 49:10 28:2 29:6 41:9 1:7 19:6 22:6 7:6", "22:1 16:4 23:5 47:9 34:10 49:5 18:2 36:5 21:6 42:6", "26:10 29:5 49:1 48:6 17:8 24:3 18:7 33:9 41:3 9:7", "22:4 41:4 10:1 0:1 47:4 37:5 2:2 23:10 17:6 19:2", "31:5 47:2 48:1 18:5 6:4 12:3 16:2 23:6 36:6 49:4", "10:10 12:3 8:6 0:5 29:1 28:9 43:9 39:7 19:1 5:10", "18:1 29:3 41:8 16:5 17:1 31:3 19:1 30:9 43:5 32:6", "20:6 46:2 25:2 11:3 2:1 12:2 49:4 38:7 19:9 33:6", "14:4 43:8 24:9 39:8 40:10 7:10 1:3 4:3 29:8 31:9", "40:8 26:4 22:3 31:8 39:6 18:5 20:3 5:6 37:10 14:8", "16:2 0:2 30:2 24:8 18:5 21:2 15:1 13:3 31:7 49:2", "14:10 4:10 23:2 39:2 15:10 34:7 21:6 35:6 1:2 24:5", "31:1 7:2 27:4 15:3 41:8 21:1 13:9 43:10 32:6 16:4", "38:2 11:7 0:10 48:6 30:2 23:8 16:10 15:4 36:4 29:5", "48:9 45:6 38:3 21:9 23:7 33:6 0:3 6:6 14:2 29:1", "3:5 10:10 38:9 11:3 19:3 20:5 17:5 18:7 49:8 7:1", "0:10 47:10 14:5 20:6 44:4 22:6 34:9 8:4 2:4 46:4", "35:4 5:7 25:2 44:4 42:7 32:9 37:1 4:7 3:1 46:7 1:9", "47:9 4:9 43:4 6:8 20:2 1:2 25:10 13:7 22:9 35:5", "31:3 49:3 29:9 40:1 47:2 17:3 23:1 10:5 21:3 4:2", "14:6 18:4 49:8 31:4 36:3 46:9 22:10 28:9 21:9 16:8", "49:10 0:1 38:2 7:8 15:7 21:3 1:2 13:10 11:7 46:6", "43:5 30:8 36:3 39:4 12:6 2:2 28:1 26:4 25:2 18:6", "35:4 27:3 45:2 44:3 5:4 6:8 36:9 20:7 4:3 18:4 8:6", "44:10 3:6 20:3 46:8 31:9 0:6 32:3 30:2 39:7 9:5", "2:6 24:2 49:6 41:4 21:4 13:3 12:7 0:8 35:5 32:8"};
    vector<string> rulesc = {"24:10 22:5 48:10 12:5 49:6 37:7 46:7 28:4 31:9 3:9", "8:3 7:8 45:7 19:2 17:3 24:10 0:1 4:6 35:2 39:7 3:1", "2:7 3:6 19:3 12:6 14:2 45:3 37:6 8:1 40:4 10:8 7:4", "29:2 35:1 44:4 49:6 15:8 31:6 28:2 11:5 38:1 30:2", "7:9 20:8 31:8 40:5 27:5 25:10 46:5 42:10 11:2 18:3", "25:2 6:6 44:3 29:6 30:4 7:2 37:1 42:7 15:3 5:1 1:3", "18:2 39:5 34:2 21:3 49:9 43:6 35:10 1:1 9:1 32:9", "12:5 27:10 47:2 9:5 11:3 8:1 31:5 13:2 48:6 7:7", "24:7 18:9 7:4 4:3 47:5 45:10 19:1 27:6 25:7 36:3", "24:9 12:6 8:5 14:5 3:3 39:7 9:3 33:6 0:3 20:8 26:2", "34:1 18:10 49:1 10:5 41:8 40:8 21:8 14:6 45:3 17:7", "25:7 49:4 32:9 28:7 14:4 38:1 1:4 11:10 27:6 5:10", "12:7 31:10 30:2 15:3 22:2 44:9 13:2 7:1 41:2 49:5", "13:5 5:7 19:2 26:6 6:7 0:6 24:6 40:9 38:2 49:4 3:7", "2:7 13:10 16:2 32:8 26:3 45:2 20:8 9:6 8:2 1:2 6:3", "33:3 36:1 40:7 15:8 46:5 31:4 30:3 27:4 22:2 13:3", "30:4 36:2 6:1 37:8 40:3 1:4 22:10 2:1 16:2 12:7", "24:7 48:1 3:9 10:9 42:8 34:9 49:6 27:7 9:1 13:7", "0:7 1:2 31:5 34:7 4:1 16:8 30:3 45:6 23:2 21:6 6:9", "20:2 3:10 36:6 37:7 16:3 12:7 26:7 42:8 14:6 43:4", "20:5 13:6 29:6 22:4 40:10 1:6 14:8 38:5 21:4 46:3", "44:3 33:1 13:8 41:7 11:1 3:2 37:6 43:4 21:10 19:3", "11:3 19:8 25:1 0:5 8:2 40:1 7:7 48:1 49:10 2:5 3:9", "9:6 0:4 40:5 10:3 21:3 34:6 31:4 3:3 24:1 46:4 2:3", "2:9 8:2 32:6 12:9 35:3 17:10 47:10 44:3 33:6 36:5", "49:2 1:8 37:6 47:2 20:7 13:10 23:7 10:8 17:2 39:8", "11:2 25:8 18:4 3:3 34:5 30:9 31:4 10:10 46:5 19:9", "14:7 34:5 7:3 11:8 4:3 21:2 5:1 15:1 12:1 41:4 9:7", "10:2 1:1 40:2 44:6 43:1 47:2 8:6 24:10 20:3 14:1", "0:7 6:3 27:7 21:6 10:4 22:8 24:5 15:4 39:9 43:10", "22:7 34:1 37:7 26:1 45:10 30:7 9:6 38:7 7:1 23:4", "38:8 46:1 29:5 22:7 35:1 28:5 4:1 13:5 36:8 30:1", "7:5 47:4 1:9 29:1 25:10 42:8 35:10 22:3 44:8 41:9", "11:3 13:8 21:3 16:2 49:3 35:9 2:6 33:2 43:1 47:5", "28:8 49:3 46:7 43:1 40:3 38:5 29:2 47:4 30:8 37:2", "46:7 10:6 2:10 36:3 30:5 24:7 14:9 26:10 25:2 21:5", "4:10 16:4 15:4 34:6 33:1 24:8 48:1 1:6 25:10 28:3", "20:10 42:8 43:3 36:1 29:9 28:2 17:7 25:8 23:7 46:7", "1:7 23:10 32:10 3:10 46:10 0:1 45:8 37:5 41:7 9:8", "44:1 33:10 34:1 49:3 11:3 35:8 41:4 5:6 7:7 18:9", "45:4 6:4 35:6 34:10 24:2 9:10 48:10 49:10 38:10", "23:7 32:2 41:5 37:8 19:2 39:9 9:8 6:8 24:4 20:6", "40:9 19:10 14:1 45:10 29:2 43:6 7:4 34:6 26:2 31:1", "23:6 30:9 25:2 32:1 10:2 27:8 18:4 26:2 22:6 17:6", "48:2 16:10 26:2 21:3 32:5 37:6 12:8 14:5 22:2 3:5", "29:8 17:10 9:10 19:3 28:3 7:9 10:3 13:10 47:6 30:5", "26:8 39:3 10:3 7:9 25:4 6:4 48:1 9:4 36:1 8:8 42:1", "11:9 1:6 5:7 14:3 41:10 9:2 44:2 18:4 45:8 47:8", "23:2 26:2 37:4 27:1 6:2 24:10 30:1 15:6 7:6 45:9", "19:8 12:2 37:2 5:10 29:6 43:6 47:1 31:8 36:6 15:4"};
    int finalState = 999;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.7205837249999997;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> rulesa = {"19:3 48:3 43:7 15:5 49:3 46:1 11:1 6:5 2:4 38:2", "30:5 23:4 26:4 5:4 43:9 27:10 36:4 18:5 35:9 21:8", "30:8 28:3 34:2 1:10 35:8 23:9 25:8 2:8 46:9 4:8", "33:2 43:6 42:8 26:3 39:6 36:9 7:7 12:2 22:3 6:3", "23:6 7:2 38:5 41:9 30:9 33:10 16:4 35:4 21:10 9:2", "29:8 24:8 20:3 36:5 0:7 11:2 3:1 47:1 31:10 18:9", "10:4 47:2 21:6 20:10 19:5 49:1 17:3 1:1 6:6 42:5", "11:7 35:9 5:7 47:2 1:8 32:7 45:5 0:9 22:3 33:6 4:3", "27:8 18:3 20:9 23:9 25:9 47:7 40:1 22:5 17:2 36:10", "45:7 31:7 30:5 10:9 48:9 29:5 49:2 18:4 37:9 17:4", "11:9 19:8 23:1 0:6 33:8 17:7 12:7 39:6 31:3 13:5", "6:6 20:5 9:4 35:10 40:4 18:5 21:5 4:1 49:4 17:1", "17:3 36:2 18:4 44:5 38:9 5:2 7:5 37:8 40:6 20:6", "10:3 32:2 2:3 26:7 41:10 13:6 38:8 18:1 40:1 37:6", "13:6 37:6 0:3 42:5 21:10 8:6 23:9 18:2 24:1 32:8", "44:10 32:1 16:10 9:8 3:4 36:5 33:5 1:1 20:4 4:8", "8:7 7:7 48:5 37:5 25:1 21:8 44:7 18:2 19:6 5:1 0:9", "37:4 44:6 22:7 29:3 1:8 2:9 27:2 10:8 46:2 16:8", "17:5 8:2 11:2 13:5 39:7 19:7 26:6 24:8 42:6 3:6", "36:10 2:2 8:5 37:2 30:4 1:2 42:8 45:4 0:5 44:5 4:7", "1:1 45:2 17:2 41:3 23:5 21:9 11:10 28:5 39:2 4:8", "9:9 25:10 3:4 46:8 0:7 2:10 42:2 7:10 23:1 41:8", "3:4 42:1 33:1 2:6 25:7 1:8 24:6 45:2 13:2 40:1 4:2", "21:1 18:3 30:6 26:1 1:9 14:10 10:1 23:8 2:10 46:3", "2:4 29:4 15:6 0:4 36:9 7:3 9:7 14:2 40:1 10:1 46:9", "26:4 40:7 35:4 24:6 15:7 7:1 17:3 9:7 47:6 1:2 0:8", "15:9 45:5 36:7 47:2 24:4 12:2 33:5 44:8 19:7 11:9", "26:4 3:1 45:10 20:9 46:6 43:1 28:2 24:9 12:6 48:4", "12:4 46:1 30:7 21:6 44:3 10:8 33:6 38:4 47:3 5:1", "15:9 39:9 49:1 47:6 44:10 30:4 4:10 19:9 3:9 17:5", "43:8 30:8 29:7 17:4 38:1 25:8 27:4 1:4 46:3 9:5", "25:2 47:10 8:8 17:9 10:7 14:5 32:2 24:5 36:10 30:7", "15:9 26:4 12:3 6:3 2:4 10:9 45:10 11:7 32:1 18:1", "8:2 5:6 42:4 48:9 30:4 6:8 9:4 29:9 13:9 23:2 25:4", "31:2 38:2 8:10 13:3 23:10 5:10 40:10 10:2 39:10", "27:6 14:7 42:4 45:4 44:9 7:5 13:5 20:7 3:2 33:5", "39:7 9:7 27:3 37:4 18:1 45:3 6:2 40:10 48:5 38:10", "26:3 8:3 13:5 45:1 2:10 47:10 27:8 3:2 25:1 29:3", "36:10 24:4 27:10 26:3 15:10 47:1 38:5 21:4 31:7", "15:7 47:9 36:9 0:10 45:7 32:10 11:3 40:8 10:7 22:6", "31:7 48:5 12:7 11:7 30:10 18:1 3:6 24:6 45:3 38:6", "28:8 22:8 18:3 35:5 27:2 12:5 1:6 24:6 19:1 44:10", "11:4 0:4 24:10 14:3 3:3 21:10 2:1 44:1 30:10 46:4", "0:4 46:7 2:5 45:7 15:4 47:6 21:5 14:1 26:4 48:8", "31:2 2:7 21:2 43:9 6:7 24:7 46:2 10:8 9:6 37:3 5:3", "20:10 7:5 27:4 4:2 24:4 45:3 32:10 13:5 11:5 19:8", "39:10 45:4 12:8 32:4 25:2 40:3 20:6 27:9 16:9 26:3", "43:8 6:7 41:4 27:6 34:8 3:8 24:3 23:6 39:9 37:3", "29:4 4:9 42:4 23:1 11:9 31:3 6:6 3:7 47:9 10:6 1:4", "35:10 5:10 7:9 42:8 41:8 19:6 13:7 21:9 2:10 14:2"};
    vector<string> rulesb = {"38:2 29:1 33:8 35:7 24:1 32:6 45:5 18:5 41:6 21:1", "30:10 15:9 27:6 4:2 42:1 48:10 14:2 9:5 1:7 22:6", "14:3 31:8 28:1 34:3 22:8 40:3 43:4 3:9 32:9 20:8", "14:10 41:9 1:5 30:4 47:9 45:4 15:6 25:5 34:8 44:5", "25:2 45:8 37:3 12:9 26:9 2:2 11:10 7:3 35:10 39:3", "19:8 17:10 1:10 27:8 34:9 39:3 30:1 22:3 5:9 4:2", "48:9 40:2 44:2 15:6 46:3 34:2 49:2 18:8 13:6 11:6", "5:10 45:3 36:8 33:3 30:3 48:8 16:4 31:8 43:7 15:2", "42:1 5:9 47:9 32:10 6:10 4:6 22:4 46:1 49:9 44:6", "41:7 34:4 28:5 1:6 21:6 20:2 15:10 31:9 44:9 38:9", "2:2 26:6 32:7 38:7 42:2 23:2 34:2 18:3 15:5 39:3", "27:8 32:8 31:3 7:8 12:6 36:5 17:7 38:9 48:10 2:1", "48:8 0:8 27:3 34:1 13:3 11:2 38:2 45:6 47:2 14:4", "21:3 9:6 14:4 41:10 47:7 15:1 35:9 26:10 17:9 30:3", "47:2 33:7 15:7 5:4 13:9 30:5 43:2 18:8 6:2 42:1", "45:10 44:6 26:1 22:8 31:7 24:8 9:9 16:8 36:7 2:9", "17:9 22:2 9:2 21:1 42:10 31:1 34:7 18:7 25:4 7:3", "8:3 0:8 40:3 1:5 24:1 29:1 20:4 41:6 18:10 34:9", "15:4 33:10 1:4 0:6 23:2 16:10 35:8 34:5 6:7 11:7", "1:4 9:8 18:2 39:3 24:10 16:5 31:10 2:5 34:8 4:9", "8:6 48:8 20:7 47:4 18:10 26:5 25:7 44:9 36:9 29:10", "14:5 45:8 6:10 28:9 13:8 4:9 40:2 26:7 24:10 0:2", "21:10 19:3 7:4 3:9 29:8 9:9 1:9 33:1 47:1 42:9 4:7", "18:6 6:2 10:6 33:2 39:4 14:1 46:6 25:3 31:4 19:5", "35:9 2:3 16:5 12:6 29:9 39:1 43:7 0:9 44:4 1:3 3:3", "23:10 35:7 37:7 39:9 8:6 43:5 42:4 31:2 36:4 49:3", "43:1 2:7 47:5 24:3 16:5 31:4 36:1 41:9 22:6 1:10", "8:4 48:1 27:4 34:5 17:7 26:6 35:4 1:10 22:1 23:6", "13:1 30:6 1:5 16:7 36:7 17:10 2:7 11:7 14:7 37:7", "9:4 3:1 1:1 32:2 5:1 8:7 26:9 37:4 38:1 20:5 46:5", "18:7 32:4 24:4 44:6 47:9 25:10 16:2 43:8 28:4 1:5", "48:7 25:9 42:6 27:10 33:10 14:2 5:7 3:5 47:1 17:9", "7:5 41:4 19:9 45:9 21:2 18:6 39:7 30:7 26:1 47:8", "11:3 23:1 45:1 13:10 35:10 16:9 25:3 46:2 21:3 5:2", "4:10 24:6 45:10 14:3 25:4 29:9 34:4 6:8 44:2 26:4", "15:6 10:5 9:2 1:6 20:9 47:8 0:10 8:6 49:1 26:6 5:3", "46:4 24:3 34:10 40:7 9:9 29:6 37:6 13:4 19:6 15:1", "31:5 21:2 34:5 14:1 38:1 7:8 28:7 44:7 3:4 24:3", "47:8 46:2 38:4 31:1 16:2 44:4 40:1 26:7 23:1 9:5", "38:5 27:2 17:4 15:4 5:6 4:4 20:3 31:9 7:1 24:10", "2:1 24:3 23:5 10:2 37:6 25:5 39:4 15:9 5:5 45:6", "38:1 1:6 9:2 21:4 34:6 32:7 7:2 33:3 42:5 2:5 6:2", "17:6 25:7 42:10 9:4 38:8 41:1 20:4 47:10 19:3 11:7", "4:9 31:5 5:7 30:1 18:1 3:7 35:8 40:7 12:7 47:10", "28:6 39:4 10:9 14:3 27:9 6:10 1:6 45:1 33:10 37:2", "32:1 31:7 10:2 47:10 40:5 41:10 38:6 37:5 5:9 21:1", "49:4 9:3 2:9 25:3 3:5 21:6 31:1 36:1 12:8 38:7 8:4", "35:2 4:2 32:7 26:4 15:4 34:2 47:5 41:6 28:4 33:10", "8:3 40:8 12:8 36:9 13:10 1:3 21:2 20:10 16:6 30:2", "31:10 46:10 2:5 1:10 13:9 38:8 36:6 37:4 47:8 21:7"};
    vector<string> rulesc = {"7:6 49:1 28:3 23:6 37:5 5:2 39:8 0:1 15:6 19:1 2:8", "27:4 9:1 19:1 38:7 21:4 44:9 47:8 11:5 1:3 42:1", "28:5 3:10 13:10 19:8 40:8 16:8 34:6 15:6 38:7 11:3", "5:3 4:9 23:7 29:8 34:3 49:7 2:1 25:2 15:2 7:8 43:7", "3:8 36:1 17:8 31:2 48:9 20:3 23:1 47:1 11:3 10:6", "43:9 9:9 48:1 1:1 30:3 35:10 49:1 47:1 22:5 42:9", "45:3 8:8 34:7 39:10 29:4 48:7 25:2 23:4 11:9 4:1", "39:8 17:5 42:1 19:9 26:9 41:4 33:8 22:7 21:8 7:9", "28:1 3:3 41:10 38:9 14:10 10:6 22:8 43:6 32:6 23:1", "28:9 47:3 26:5 5:5 22:2 7:4 19:9 0:2 41:1 31:2 4:7", "33:7 49:3 32:6 11:3 23:8 2:6 34:9 16:1 42:2 30:5", "46:6 34:3 21:9 6:5 19:3 22:7 44:3 33:3 48:8 39:7", "0:1 45:7 40:2 38:1 32:1 49:9 3:5 10:3 23:10 37:2", "34:7 40:8 8:1 18:1 36:3 37:2 19:4 48:8 32:2 39:2", "32:10 2:9 49:9 34:3 40:3 7:1 35:10 14:1 11:4 31:5", "49:2 41:9 7:8 9:8 36:8 38:1 5:6 31:10 30:7 12:10", "20:2 41:8 38:8 35:9 32:6 28:10 27:6 25:5 44:3 4:4", "3:8 36:3 39:2 14:1 32:7 48:3 26:4 45:3 15:7 29:2", "11:5 10:2 29:2 8:7 42:9 13:1 34:9 20:1 16:7 26:10", "21:8 28:3 16:10 11:9 37:6 40:3 34:3 49:2 14:6 44:2", "47:3 49:9 7:4 9:7 45:5 44:9 21:1 46:1 6:4 15:8 8:2", "19:3 31:10 0:8 24:5 6:4 49:8 27:3 35:9 8:8 16:6", "49:9 33:10 46:4 30:8 13:2 36:8 37:6 24:1 11:2 16:3", "46:9 5:5 47:9 14:8 29:6 11:9 12:5 42:4 6:10 16:5", "26:4 7:4 8:7 44:3 45:5 10:8 18:3 40:3 25:4 0:1 9:8", "15:6 1:7 24:5 39:5 5:8 10:7 18:6 32:5 9:6 27:1 4:4", "21:3 2:1 46:10 33:6 14:1 49:1 16:3 7:6 24:6 29:10", "30:2 47:1 49:7 3:8 35:3 10:8 7:5 8:9 22:3 15:7 0:3", "38:7 45:4 36:9 21:7 43:10 16:4 7:2 32:1 33:9 10:10", "4:7 43:7 19:3 30:6 36:4 32:5 42:9 29:7 10:2 38:1", "2:9 44:8 3:5 35:6 37:8 9:2 18:5 32:10 5:5 49:8 0:3", "34:8 40:10 0:8 21:2 28:1 17:3 27:6 9:3 12:7 31:9", "5:4 20:3 32:5 23:2 4:7 44:3 7:7 27:6 28:7 48:6 8:9", "8:8 34:4 9:7 31:3 3:10 11:8 23:4 44:8 15:7 17:7", "31:4 15:10 29:3 0:7 24:5 44:6 12:9 42:1 38:6 4:3", "18:1 44:3 6:5 8:8 27:2 7:6 39:8 28:7 49:6 36:1 2:1", "15:4 49:5 2:8 0:5 16:1 33:9 32:7 38:8 8:10 48:7", "11:7 49:7 32:5 46:4 18:10 21:4 27:1 10:7 16:6 2:7", "37:10 47:2 7:4 10:3 45:10 1:8 13:8 46:5 14:5 31:1", "43:10 17:7 4:3 2:1 6:1 21:10 5:10 49:9 25:3 24:5", "49:1 18:10 4:3 2:10 28:2 29:2 10:4 21:10 0:8 11:9", "20:5 40:4 4:7 25:5 21:5 33:8 15:8 30:3 26:10 42:3", "31:1 5:2 3:4 40:2 11:10 49:8 7:8 19:6 43:3 25:2", "42:5 4:3 32:10 13:6 12:8 40:3 18:2 16:6 10:3 48:8", "33:7 40:5 44:2 15:7 1:1 11:4 27:1 22:3 29:10 3:3", "38:2 28:7 44:3 20:3 33:3 25:7 21:5 41:3 6:9 34:2", "4:5 12:9 11:8 18:2 28:5 9:9 43:5 44:6 21:6 10:7", "48:4 32:7 12:3 3:10 42:6 6:8 14:5 35:4 28:1 16:6", "43:1 42:1 37:3 22:5 15:10 47:6 11:1 38:4 34:4 25:6", "49:8 16:3 13:9 46:5 8:9 19:10 20:10 21:9 44:6 26:5"};
    int finalState = 46;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.004123076923076924;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> rulesa = {"19:3 48:3 43:7 15:5 49:3 46:1 11:1 6:5 2:4 38:2", "30:5 23:4 26:4 5:4 43:9 27:10 36:4 18:5 35:9 21:8", "30:8 28:3 34:2 1:10 35:8 23:9 25:8 2:8 46:9 4:8", "33:2 43:6 42:8 26:3 39:6 36:9 7:7 12:2 22:3 6:3", "23:6 7:2 38:5 41:9 30:9 33:10 16:4 35:4 21:10 9:2", "29:8 24:8 20:3 36:5 0:7 11:2 3:1 47:1 31:10 18:9", "10:4 47:2 21:6 20:10 19:5 49:1 17:3 1:1 6:6 42:5", "11:7 35:9 5:7 47:2 1:8 32:7 45:5 0:9 22:3 33:6 4:3", "27:8 18:3 20:9 23:9 25:9 47:7 40:1 22:5 17:2 36:10", "45:7 31:7 30:5 10:9 48:9 29:5 49:2 18:4 37:9 17:4", "11:9 19:8 23:1 0:6 33:8 17:7 12:7 39:6 31:3 13:5", "6:6 20:5 9:4 35:10 40:4 18:5 21:5 4:1 49:4 17:1", "17:3 36:2 18:4 44:5 38:9 5:2 7:5 37:8 40:6 20:6", "10:3 32:2 2:3 26:7 41:10 13:6 38:8 18:1 40:1 37:6", "13:6 37:6 0:3 42:5 21:10 8:6 23:9 18:2 24:1 32:8", "44:10 32:1 16:10 9:8 3:4 36:5 33:5 1:1 20:4 4:8", "8:7 7:7 48:5 37:5 25:1 21:8 44:7 18:2 19:6 5:1 0:9", "37:4 44:6 22:7 29:3 1:8 2:9 27:2 10:8 46:2 16:8", "17:5 8:2 11:2 13:5 39:7 19:7 26:6 24:8 42:6 3:6", "36:10 2:2 8:5 37:2 30:4 1:2 42:8 45:4 0:5 44:5 4:7", "1:1 45:2 17:2 41:3 23:5 21:9 11:10 28:5 39:2 4:8", "9:9 25:10 3:4 46:8 0:7 2:10 42:2 7:10 23:1 41:8", "3:4 42:1 33:1 2:6 25:7 1:8 24:6 45:2 13:2 40:1 4:2", "21:1 18:3 30:6 26:1 1:9 14:10 10:1 23:8 2:10 46:3", "2:4 29:4 15:6 0:4 36:9 7:3 9:7 14:2 40:1 10:1 46:9", "26:4 40:7 35:4 24:6 15:7 7:1 17:3 9:7 47:6 1:2 0:8", "15:9 45:5 36:7 47:2 24:4 12:2 33:5 44:8 19:7 11:9", "26:4 3:1 45:10 20:9 46:6 43:1 28:2 24:9 12:6 48:4", "12:4 46:1 30:7 21:6 44:3 10:8 33:6 38:4 47:3 5:1", "15:9 39:9 49:1 47:6 44:10 30:4 4:10 19:9 3:9 17:5", "43:8 30:8 29:7 17:4 38:1 25:8 27:4 1:4 46:3 9:5", "25:2 47:10 8:8 17:9 10:7 14:5 32:2 24:5 36:10 30:7", "15:9 26:4 12:3 6:3 2:4 10:9 45:10 11:7 32:1 18:1", "8:2 5:6 42:4 48:9 30:4 6:8 9:4 29:9 13:9 23:2 25:4", "31:2 38:2 8:10 13:3 23:10 5:10 40:10 10:2 39:10", "27:6 14:7 42:4 45:4 44:9 7:5 13:5 20:7 3:2 33:5", "39:7 9:7 27:3 37:4 18:1 45:3 6:2 40:10 48:5 38:10", "26:3 8:3 13:5 45:1 2:10 47:10 27:8 3:2 25:1 29:3", "36:10 24:4 27:10 26:3 15:10 47:1 38:5 21:4 31:7", "15:7 47:9 36:9 0:10 45:7 32:10 11:3 40:8 10:7 22:6", "31:7 48:5 12:7 11:7 30:10 18:1 3:6 24:6 45:3 38:6", "28:8 22:8 18:3 35:5 27:2 12:5 1:6 24:6 19:1 44:10", "11:4 0:4 24:10 14:3 3:3 21:10 2:1 44:1 30:10 46:4", "0:4 46:7 2:5 45:7 15:4 47:6 21:5 14:1 26:4 48:8", "31:2 2:7 21:2 43:9 6:7 24:7 46:2 10:8 9:6 37:3 5:3", "20:10 7:5 27:4 4:2 24:4 45:3 32:10 13:5 11:5 19:8", "39:10 45:4 12:8 32:4 25:2 40:3 20:6 27:9 16:9 26:3", "43:8 6:7 41:4 27:6 34:8 3:8 24:3 23:6 39:9 37:3", "29:4 4:9 42:4 23:1 11:9 31:3 6:6 3:7 47:9 10:6 1:4", "35:10 5:10 7:9 42:8 41:8 19:6 13:7 21:9 2:10 14:2"};
    vector<string> rulesb = {"38:2 29:1 33:8 35:7 24:1 32:6 45:5 18:5 41:6 21:1", "30:10 15:9 27:6 4:2 42:1 48:10 14:2 9:5 1:7 22:6", "14:3 31:8 28:1 34:3 22:8 40:3 43:4 3:9 32:9 20:8", "14:10 41:9 1:5 30:4 47:9 45:4 15:6 25:5 34:8 44:5", "25:2 45:8 37:3 12:9 26:9 2:2 11:10 7:3 35:10 39:3", "19:8 17:10 1:10 27:8 34:9 39:3 30:1 22:3 5:9 4:2", "48:9 40:2 44:2 15:6 46:3 34:2 49:2 18:8 13:6 11:6", "5:10 45:3 36:8 33:3 30:3 48:8 16:4 31:8 43:7 15:2", "42:1 5:9 47:9 32:10 6:10 4:6 22:4 46:1 49:9 44:6", "41:7 34:4 28:5 1:6 21:6 20:2 15:10 31:9 44:9 38:9", "2:2 26:6 32:7 38:7 42:2 23:2 34:2 18:3 15:5 39:3", "27:8 32:8 31:3 7:8 12:6 36:5 17:7 38:9 48:10 2:1", "48:8 0:8 27:3 34:1 13:3 11:2 38:2 45:6 47:2 14:4", "21:3 9:6 14:4 41:10 47:7 15:1 35:9 26:10 17:9 30:3", "47:2 33:7 15:7 5:4 13:9 30:5 43:2 18:8 6:2 42:1", "45:10 44:6 26:1 22:8 31:7 24:8 9:9 16:8 36:7 2:9", "17:9 22:2 9:2 21:1 42:10 31:1 34:7 18:7 25:4 7:3", "8:3 0:8 40:3 1:5 24:1 29:1 20:4 41:6 18:10 34:9", "15:4 33:10 1:4 0:6 23:2 16:10 35:8 34:5 6:7 11:7", "1:4 9:8 18:2 39:3 24:10 16:5 31:10 2:5 34:8 4:9", "8:6 48:8 20:7 47:4 18:10 26:5 25:7 44:9 36:9 29:10", "14:5 45:8 6:10 28:9 13:8 4:9 40:2 26:7 24:10 0:2", "21:10 19:3 7:4 3:9 29:8 9:9 1:9 33:1 47:1 42:9 4:7", "18:6 6:2 10:6 33:2 39:4 14:1 46:6 25:3 31:4 19:5", "35:9 2:3 16:5 12:6 29:9 39:1 43:7 0:9 44:4 1:3 3:3", "23:10 35:7 37:7 39:9 8:6 43:5 42:4 31:2 36:4 49:3", "43:1 2:7 47:5 24:3 16:5 31:4 36:1 41:9 22:6 1:10", "8:4 48:1 27:4 34:5 17:7 26:6 35:4 1:10 22:1 23:6", "13:1 30:6 1:5 16:7 36:7 17:10 2:7 11:7 14:7 37:7", "9:4 3:1 1:1 32:2 5:1 8:7 26:9 37:4 38:1 20:5 46:5", "18:7 32:4 24:4 44:6 47:9 25:10 16:2 43:8 28:4 1:5", "48:7 25:9 42:6 27:10 33:10 14:2 5:7 3:5 47:1 17:9", "7:5 41:4 19:9 45:9 21:2 18:6 39:7 30:7 26:1 47:8", "11:3 23:1 45:1 13:10 35:10 16:9 25:3 46:2 21:3 5:2", "4:10 24:6 45:10 14:3 25:4 29:9 34:4 6:8 44:2 26:4", "15:6 10:5 9:2 1:6 20:9 47:8 0:10 8:6 49:1 26:6 5:3", "46:4 24:3 34:10 40:7 9:9 29:6 37:6 13:4 19:6 15:1", "31:5 21:2 34:5 14:1 38:1 7:8 28:7 44:7 3:4 24:3", "47:8 46:2 38:4 31:1 16:2 44:4 40:1 26:7 23:1 9:5", "38:5 27:2 17:4 15:4 5:6 4:4 20:3 31:9 7:1 24:10", "2:1 24:3 23:5 10:2 37:6 25:5 39:4 15:9 5:5 45:6", "38:1 1:6 9:2 21:4 34:6 32:7 7:2 33:3 42:5 2:5 6:2", "17:6 25:7 42:10 9:4 38:8 41:1 20:4 47:10 19:3 11:7", "4:9 31:5 5:7 30:1 18:1 3:7 35:8 40:7 12:7 47:10", "28:6 39:4 10:9 14:3 27:9 6:10 1:6 45:1 33:10 37:2", "32:1 31:7 10:2 47:10 40:5 41:10 38:6 37:5 5:9 21:1", "49:4 9:3 2:9 25:3 3:5 21:6 31:1 36:1 12:8 38:7 8:4", "35:2 4:2 32:7 26:4 15:4 34:2 47:5 41:6 28:4 33:10", "8:3 40:8 12:8 36:9 13:10 1:3 21:2 20:10 16:6 30:2", "31:10 46:10 2:5 1:10 13:9 38:8 36:6 37:4 47:8 21:7"};
    vector<string> rulesc = {"7:6 49:1 28:3 23:6 37:5 5:2 39:8 0:1 15:6 19:1 2:8", "27:4 9:1 19:1 38:7 21:4 44:9 47:8 11:5 1:3 42:1", "28:5 3:10 13:10 19:8 40:8 16:8 34:6 15:6 38:7 11:3", "5:3 4:9 23:7 29:8 34:3 49:7 2:1 25:2 15:2 7:8 43:7", "3:8 36:1 17:8 31:2 48:9 20:3 23:1 47:1 11:3 10:6", "43:9 9:9 48:1 1:1 30:3 35:10 49:1 47:1 22:5 42:9", "45:3 8:8 34:7 39:10 29:4 48:7 25:2 23:4 11:9 4:1", "39:8 17:5 42:1 19:9 26:9 41:4 33:8 22:7 21:8 7:9", "28:1 3:3 41:10 38:9 14:10 10:6 22:8 43:6 32:6 23:1", "28:9 47:3 26:5 5:5 22:2 7:4 19:9 0:2 41:1 31:2 4:7", "33:7 49:3 32:6 11:3 23:8 2:6 34:9 16:1 42:2 30:5", "46:6 34:3 21:9 6:5 19:3 22:7 44:3 33:3 48:8 39:7", "0:1 45:7 40:2 38:1 32:1 49:9 3:5 10:3 23:10 37:2", "34:7 40:8 8:1 18:1 36:3 37:2 19:4 48:8 32:2 39:2", "32:10 2:9 49:9 34:3 40:3 7:1 35:10 14:1 11:4 31:5", "49:2 41:9 7:8 9:8 36:8 38:1 5:6 31:10 30:7 12:10", "20:2 41:8 38:8 35:9 32:6 28:10 27:6 25:5 44:3 4:4", "3:8 36:3 39:2 14:1 32:7 48:3 26:4 45:3 15:7 29:2", "11:5 10:2 29:2 8:7 42:9 13:1 34:9 20:1 16:7 26:10", "21:8 28:3 16:10 11:9 37:6 40:3 34:3 49:2 14:6 44:2", "47:3 49:9 7:4 9:7 45:5 44:9 21:1 46:1 6:4 15:8 8:2", "19:3 31:10 0:8 24:5 6:4 49:8 27:3 35:9 8:8 16:6", "49:9 33:10 46:4 30:8 13:2 36:8 37:6 24:1 11:2 16:3", "46:9 5:5 47:9 14:8 29:6 11:9 12:5 42:4 6:10 16:5", "26:4 7:4 8:7 44:3 45:5 10:8 18:3 40:3 25:4 0:1 9:8", "15:6 1:7 24:5 39:5 5:8 10:7 18:6 32:5 9:6 27:1 4:4", "21:3 2:1 46:10 33:6 14:1 49:1 16:3 7:6 24:6 29:10", "30:2 47:1 49:7 3:8 35:3 10:8 7:5 8:9 22:3 15:7 0:3", "38:7 45:4 36:9 21:7 43:10 16:4 7:2 32:1 33:9 10:10", "4:7 43:7 19:3 30:6 36:4 32:5 42:9 29:7 10:2 38:1", "2:9 44:8 3:5 35:6 37:8 9:2 18:5 32:10 5:5 49:8 0:3", "34:8 40:10 0:8 21:2 28:1 17:3 27:6 9:3 12:7 31:9", "5:4 20:3 32:5 23:2 4:7 44:3 7:7 27:6 28:7 48:6 8:9", "8:8 34:4 9:7 31:3 3:10 11:8 23:4 44:8 15:7 17:7", "31:4 15:10 29:3 0:7 24:5 44:6 12:9 42:1 38:6 4:3", "18:1 44:3 6:5 8:8 27:2 7:6 39:8 28:7 49:6 36:1 2:1", "15:4 49:5 2:8 0:5 16:1 33:9 32:7 38:8 8:10 48:7", "11:7 49:7 32:5 46:4 18:10 21:4 27:1 10:7 16:6 2:7", "37:10 47:2 7:4 10:3 45:10 1:8 13:8 46:5 14:5 31:1", "43:10 17:7 4:3 2:1 6:1 21:10 5:10 49:9 25:3 24:5", "49:1 18:10 4:3 2:10 28:2 29:2 10:4 21:10 0:8 11:9", "20:5 40:4 4:7 25:5 21:5 33:8 15:8 30:3 26:10 42:3", "31:1 5:2 3:4 40:2 11:10 49:8 7:8 19:6 43:3 25:2", "42:5 4:3 32:10 13:6 12:8 40:3 18:2 16:6 10:3 48:8", "33:7 40:5 44:2 15:7 1:1 11:4 27:1 22:3 29:10 3:3", "38:2 28:7 44:3 20:3 33:3 25:7 21:5 41:3 6:9 34:2", "4:5 12:9 11:8 18:2 28:5 9:9 43:5 44:6 21:6 10:7", "48:4 32:7 12:3 3:10 42:6 6:8 14:5 35:4 28:1 16:6", "43:1 42:1 37:3 22:5 15:10 47:6 11:1 38:4 34:4 25:6", "49:8 16:3 13:9 46:5 8:9 19:10 20:10 21:9 44:6 26:5"};
    int finalState = 999;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.8847078429752071;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> rulesa = {"43:8 25:2 44:5 8:6 36:9 46:10 32:4 12:7 3:7 42:4", "33:9 29:4 17:8 32:1 40:8 25:4 5:5 37:3 24:4 0:3", "15:6 39:3 19:10 44:2 16:9 22:1 21:8 27:5 18:3 40:6", "11:3 16:7 10:1 38:4 39:2 33:10 37:2 45:1 3:2 42:3", "2:1 17:3 26:2 38:8 27:6 30:3 19:5 43:1 0:2 47:2", "15:2 6:8 45:8 28:8 44:9 7:8 39:5 4:1 10:9 22:4 5:8", "36:7 35:5 2:2 37:5 42:2 14:5 31:1 3:2 20:1 8:3 6:4", "40:10 21:6 2:10 22:4 23:5 29:7 35:2 8:2 43:10 17:7", "39:4 43:8 26:9 0:5 37:8 40:2 27:5 2:7 10:7 19:6", "15:9 10:10 26:2 48:7 16:1 7:3 19:5 46:9 23:9 43:4", "7:5 31:3 1:7 16:10 0:2 39:2 46:9 40:3 21:6 48:4", "38:1 32:5 35:6 45:3 37:4 22:10 2:8 5:4 29:8 9:7", "42:5 24:4 32:1 12:9 35:1 6:8 23:6 43:4 5:9 30:8", "47:3 28:2 21:4 44:9 24:7 40:10 20:3 46:4 32:10 6:9", "33:10 48:7 18:1 31:3 38:4 9:6 45:3 15:10 7:1 4:2", "19:8 24:8 32:6 39:2 44:10 48:6 49:5 4:9 13:6 6:2", "14:10 22:3 26:10 45:6 9:7 13:7 11:7 2:10 19:9 21:6", "3:6 26:6 0:2 45:10 34:2 10:9 2:4 4:9 6:6 42:8 23:2", "40:10 13:8 28:3 35:8 42:3 41:9 29:2 12:5 38:9 49:1", "32:4 40:1 46:6 15:6 45:8 8:8 2:1 37:5 29:8 25:8", "32:3 23:8 36:5 15:5 3:5 7:7 14:5 5:9 10:8 1:6 12:3", "20:4 35:6 41:4 27:2 23:6 28:4 43:5 37:7 15:3 14:9", "39:10 40:2 32:4 18:1 31:9 29:5 3:8 33:10 47:10 9:5", "33:10 30:5 26:7 22:9 32:10 7:2 23:10 4:10 48:2 8:3", "23:6 20:10 2:5 28:10 26:10 8:8 13:8 6:8 29:5 21:5", "3:5 32:10 2:1 28:8 24:7 31:5 41:5 7:1 43:3 23:9", "7:9 26:2 25:4 21:4 16:1 24:3 45:5 3:7 36:5 14:1", "12:10 39:2 31:7 41:9 47:1 15:1 0:9 46:4 49:5 14:2", "49:10 12:6 48:2 2:8 10:10 35:10 1:6 23:6 42:1 8:10", "16:4 47:6 45:6 43:1 26:7 21:9 8:7 14:9 38:7 20:6", "28:6 2:4 29:4 4:3 20:7 38:1 43:6 23:9 36:7 14:6", "43:2 22:9 24:3 23:5 6:7 20:1 12:5 46:7 36:1 15:3", "6:8 16:5 18:9 33:3 36:4 0:2 24:9 21:7 4:2 19:8 7:8", "33:4 28:9 30:6 0:1 3:7 11:4 40:1 38:8 22:8 49:4", "1:9 39:5 24:10 8:1 38:6 32:8 29:7 25:2 14:2 5:10", "42:8 15:6 11:7 17:2 33:6 35:10 8:3 26:8 13:6 3:4", "35:9 44:8 30:8 40:7 29:7 7:9 37:6 41:9 15:5 3:2", "2:3 17:2 13:4 3:6 4:5 27:3 48:2 38:6 16:3 29:5 5:4", "0:7 46:9 25:1 36:2 37:8 4:3 42:3 16:6 49:6 24:1", "35:8 14:2 4:10 48:8 30:8 39:10 26:6 3:1 10:7 33:9", "43:1 34:9 37:4 14:2 5:7 20:7 35:5 26:10 0:9 30:6", "23:1 41:8 16:3 40:6 12:3 29:3 2:9 27:1 25:3 1:3", "14:6 32:8 1:10 46:9 9:6 28:1 44:3 26:7 34:8 25:8", "41:2 24:4 43:1 28:2 40:1 17:7 30:4 31:5 2:3 47:9", "44:4 7:1 1:5 32:9 34:1 37:7 17:7 29:10 2:1 40:9", "35:7 12:6 4:4 41:6 9:1 39:1 23:7 8:3 20:6 25:6 6:3", "30:3 40:1 11:8 32:6 47:9 23:1 34:7 49:5 7:2 21:1", "19:2 21:6 27:1 29:5 15:3 31:1 39:10 36:3 42:8 33:3", "2:1 20:2 30:5 31:7 21:3 32:4 22:4 19:4 42:8 41:6", "19:5 45:9 27:10 15:7 4:2 36:5 16:8 42:3 13:4 9:8"};
    vector<string> rulesb = {"43:9 2:6 18:2 26:4 23:10 12:1 14:6 29:6 42:1 39:1", "27:4 17:9 18:4 8:6 28:2 20:10 6:4 0:8 16:7 4:2 5:8", "46:1 48:7 32:10 43:6 8:6 31:4 36:7 16:3 24:5 17:3", "11:7 34:2 19:3 37:5 31:4 28:4 22:10 24:2 49:8 0:6", "21:7 30:2 13:7 6:7 4:1 46:8 26:9 17:2 37:3 22:2", "37:2 46:9 42:10 5:5 20:4 41:8 18:4 36:4 10:10 1:4", "41:3 16:5 22:6 18:3 0:4 9:7 11:6 29:6 39:9 44:8", "32:8 42:6 19:8 4:2 45:9 35:9 12:3 5:9 20:4 49:4", "37:2 13:1 31:5 8:5 44:8 18:4 16:1 7:9 38:6 36:9", "25:3 13:5 17:3 2:9 6:7 45:10 43:6 36:9 28:7 3:7", "27:3 0:10 2:4 43:10 1:2 15:6 21:9 18:1 47:7 39:1", "22:9 3:6 45:6 48:7 47:5 38:2 26:10 2:3 16:5 9:4", "7:1 18:8 35:3 42:8 48:1 14:8 21:3 19:6 0:1 12:5", "9:2 47:3 36:5 46:10 6:2 38:10 33:3 30:3 5:9 34:6", "14:5 40:3 45:6 13:1 28:2 10:9 49:4 19:6 6:10 36:7", "44:10 38:5 36:5 22:10 11:5 4:3 10:8 39:4 32:7 19:6", "1:9 11:1 10:10 24:6 14:3 40:2 18:1 16:4 23:5 12:7", "14:3 29:5 11:9 36:5 24:9 43:6 17:2 42:8 18:3 45:5", "44:5 11:5 49:7 45:1 7:5 23:9 2:1 25:4 16:2 4:5 0:3", "49:8 30:5 7:3 33:1 25:6 27:8 21:2 12:9 47:8 26:9", "3:5 37:5 17:7 23:10 8:2 40:10 4:7 14:8 44:8 6:1", "37:5 19:2 30:2 35:7 47:2 23:7 46:7 34:2 16:10 10:2", "16:9 13:7 43:3 35:6 24:4 5:2 32:7 21:8 28:1 38:2", "2:2 16:1 13:10 46:4 26:10 23:10 14:10 12:6 15:6", "47:4 13:1 14:1 16:6 7:4 33:8 26:4 37:10 45:2 1:4", "33:3 8:7 10:4 2:10 34:9 22:1 20:4 26:4 41:5 13:9", "21:9 17:6 19:9 22:6 7:3 28:10 24:3 3:8 15:4 20:3", "21:9 40:5 25:7 28:10 29:9 47:4 41:10 2:5 23:5 26:3", "6:4 31:3 36:2 9:1 5:10 29:9 1:2 39:6 0:4 11:7 18:4", "7:6 20:1 14:10 23:2 42:2 29:2 43:2 15:10 30:4 16:3", "39:9 31:9 17:6 10:4 6:5 5:6 42:4 24:2 45:8 29:5", "27:5 17:4 26:3 16:3 10:9 13:6 7:8 45:6 9:5 15:4", "47:6 31:9 37:9 17:2 13:7 23:4 27:2 30:5 14:5 46:1", "26:10 40:3 17:7 28:10 35:4 1:5 27:2 42:3 22:9 29:5", "4:6 21:1 23:5 12:6 6:5 1:10 17:5 45:1 48:1 15:6", "12:2 8:3 9:6 23:5 34:4 33:1 5:10 29:3 41:5 14:6", "49:7 27:8 1:7 11:6 2:3 9:7 18:2 24:8 20:4 39:9 5:1", "37:6 44:1 30:1 42:10 5:10 7:1 3:7 18:6 24:1 9:9", "23:6 47:4 33:4 46:10 26:3 38:9 14:10 2:7 6:4 10:1", "12:6 14:2 47:1 6:5 29:3 33:9 2:4 13:4 27:5 44:7", "31:1 2:7 9:1 22:3 8:3 10:6 44:1 45:7 28:2 20:9 4:4", "1:1 45:7 30:4 15:5 8:4 34:5 29:7 18:6 26:10 16:2", "15:4 17:3 31:3 2:8 39:9 30:8 14:2 6:8 41:7 33:7", "48:2 27:7 16:2 42:1 8:5 39:5 5:2 36:1 24:2 49:3", "49:2 14:2 15:3 17:8 6:6 5:1 45:9 25:2 30:7 12:4", "35:10 2:10 43:3 7:1 19:7 44:2 13:1 14:3 9:2 5:3", "7:9 43:9 21:6 14:7 16:7 19:7 11:10 45:9 49:8 28:6", "24:1 41:4 6:7 0:4 38:5 44:5 43:3 39:2 21:7 18:1", "43:5 13:4 0:7 21:10 40:4 25:5 4:4 18:9 6:1 5:7 2:7", "25:9 43:1 18:5 16:1 14:5 48:7 24:3 1:6 19:4 23:6"};
    vector<string> rulesc = {"48:9 20:8 31:5 1:9 7:8 32:3 36:4 38:4 24:7 8:2 0:4", "49:6 37:9 47:9 14:4 33:9 43:10 35:1 4:3 40:10 10:5", "13:7 22:1 18:10 21:4 20:4 16:1 28:7 17:4 3:9 39:10", "43:8 47:8 8:5 42:10 32:9 13:8 2:3 21:1 45:2 37:6", "29:9 10:2 25:10 17:9 42:5 36:3 0:1 1:2 14:8 45:7", "6:8 15:7 23:6 43:7 38:6 37:10 46:1 13:6 24:1 45:2", "40:5 29:8 22:10 18:3 7:10 44:9 45:4 13:5 10:2 20:9", "31:2 38:6 46:10 19:3 6:6 21:7 23:9 5:5 27:9 2:10", "23:3 41:9 26:1 17:6 37:6 30:6 39:9 36:9 22:9 10:4", "42:1 4:7 2:3 7:3 46:4 43:6 14:5 10:7 22:1 28:9 6:7", "35:6 43:1 42:7 49:6 44:5 15:4 0:6 29:10 26:1 9:5", "45:6 49:7 26:7 15:8 5:3 27:4 38:9 2:3 43:10 4:9", "30:3 21:3 6:10 26:8 41:9 25:2 45:6 20:2 1:10 49:1", "26:5 19:10 2:9 12:7 47:5 30:9 10:9 20:7 33:3 44:8", "42:4 15:3 29:8 17:8 18:2 36:5 3:6 12:9 2:7 34:9", "16:8 39:7 28:1 4:10 11:1 15:8 46:3 30:10 43:10 0:9", "40:2 12:8 35:8 36:7 17:6 15:6 25:6 20:8 41:5 33:6", "5:1 44:10 29:5 37:4 21:3 36:5 12:6 28:2 9:4 2:4", "2:7 12:9 35:6 26:9 17:5 13:6 22:9 18:7 7:9 32:4", "16:6 25:9 0:1 13:10 17:3 33:1 43:10 24:10 23:7 7:5", "5:5 14:10 44:3 49:10 42:7 27:8 43:7 1:7 13:10 7:9", "34:1 21:5 41:1 2:5 29:5 24:4 44:9 17:6 38:1 46:3", "37:5 18:5 17:4 39:8 24:4 10:4 32:2 15:8 27:1 41:5", "44:8 35:3 29:6 39:9 1:9 37:3 3:9 6:8 10:8 26:5 2:7", "27:4 16:1 49:10 46:3 14:6 44:5 25:8 11:4 6:10 41:5", "18:8 1:6 28:2 5:10 38:1 9:9 2:7 45:2 13:5 16:10", "41:1 32:8 48:10 47:4 16:6 19:1 13:3 0:3 23:9 5:6", "21:8 11:10 32:7 15:5 48:7 10:10 24:4 46:3 22:7 1:6", "4:9 9:4 40:8 10:5 29:1 8:10 18:5 14:2 19:7 42:2", "9:2 8:9 3:6 20:2 30:7 18:9 49:9 44:8 37:6 2:7 48:3", "32:10 42:2 30:5 4:4 41:3 17:1 38:5 34:7 12:6 33:1", "47:7 31:2 42:7 49:1 35:1 41:7 43:1 19:8 10:8 24:2", "43:6 9:7 30:3 15:7 17:10 23:6 47:6 12:10 33:9 41:6", "22:4 20:2 2:5 3:7 28:2 48:1 17:2 1:8 49:8 34:3 6:5", "24:9 1:7 16:3 14:7 13:1 23:4 29:4 27:7 19:1 28:8", "22:2 43:3 28:3 21:7 33:3 11:1 2:3 35:3 20:7 32:4", "32:2 43:1 16:4 27:5 33:6 40:9 21:5 10:8 35:8 19:6", "12:6 7:10 3:3 26:1 18:10 28:2 32:10 11:5 31:3 27:3", "2:5 23:8 7:1 8:4 39:3 15:8 43:7 49:6 20:2 34:3 6:2", "28:8 12:2 11:2 43:5 13:3 35:6 42:2 49:3 8:7 31:5", "29:9 1:7 9:2 17:1 31:2 8:5 32:9 37:10 20:10 45:5", "13:3 31:10 5:8 30:1 4:6 23:6 32:8 9:1 35:2 27:3", "18:8 37:6 32:3 4:7 24:4 20:3 1:3 49:5 30:10 3:7", "25:7 29:2 49:9 30:7 23:5 45:4 13:5 42:8 4:10 46:7", "5:6 44:2 17:7 37:7 34:10 2:2 15:3 36:10 12:9 38:10", "37:7 15:7 13:3 29:6 41:5 10:5 7:10 27:3 16:5 8:9", "44:4 6:8 39:4 46:7 19:7 7:3 29:2 33:5 9:6 13:8 8:4", "9:6 30:7 37:6 40:1 25:7 44:9 49:6 29:2 18:5 2:5", "12:4 30:10 45:4 9:8 28:3 44:4 22:1 33:7 36:9 27:8", "45:10 18:6 49:10 7:9 26:7 0:8 10:2 4:1 42:7 6:2"};
    int finalState = 38;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.005476923076923078;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> rulesa = {"43:8 25:2 44:5 8:6 36:9 46:10 32:4 12:7 3:7 42:4", "33:9 29:4 17:8 32:1 40:8 25:4 5:5 37:3 24:4 0:3", "15:6 39:3 19:10 44:2 16:9 22:1 21:8 27:5 18:3 40:6", "11:3 16:7 10:1 38:4 39:2 33:10 37:2 45:1 3:2 42:3", "2:1 17:3 26:2 38:8 27:6 30:3 19:5 43:1 0:2 47:2", "15:2 6:8 45:8 28:8 44:9 7:8 39:5 4:1 10:9 22:4 5:8", "36:7 35:5 2:2 37:5 42:2 14:5 31:1 3:2 20:1 8:3 6:4", "40:10 21:6 2:10 22:4 23:5 29:7 35:2 8:2 43:10 17:7", "39:4 43:8 26:9 0:5 37:8 40:2 27:5 2:7 10:7 19:6", "15:9 10:10 26:2 48:7 16:1 7:3 19:5 46:9 23:9 43:4", "7:5 31:3 1:7 16:10 0:2 39:2 46:9 40:3 21:6 48:4", "38:1 32:5 35:6 45:3 37:4 22:10 2:8 5:4 29:8 9:7", "42:5 24:4 32:1 12:9 35:1 6:8 23:6 43:4 5:9 30:8", "47:3 28:2 21:4 44:9 24:7 40:10 20:3 46:4 32:10 6:9", "33:10 48:7 18:1 31:3 38:4 9:6 45:3 15:10 7:1 4:2", "19:8 24:8 32:6 39:2 44:10 48:6 49:5 4:9 13:6 6:2", "14:10 22:3 26:10 45:6 9:7 13:7 11:7 2:10 19:9 21:6", "3:6 26:6 0:2 45:10 34:2 10:9 2:4 4:9 6:6 42:8 23:2", "40:10 13:8 28:3 35:8 42:3 41:9 29:2 12:5 38:9 49:1", "32:4 40:1 46:6 15:6 45:8 8:8 2:1 37:5 29:8 25:8", "32:3 23:8 36:5 15:5 3:5 7:7 14:5 5:9 10:8 1:6 12:3", "20:4 35:6 41:4 27:2 23:6 28:4 43:5 37:7 15:3 14:9", "39:10 40:2 32:4 18:1 31:9 29:5 3:8 33:10 47:10 9:5", "33:10 30:5 26:7 22:9 32:10 7:2 23:10 4:10 48:2 8:3", "23:6 20:10 2:5 28:10 26:10 8:8 13:8 6:8 29:5 21:5", "3:5 32:10 2:1 28:8 24:7 31:5 41:5 7:1 43:3 23:9", "7:9 26:2 25:4 21:4 16:1 24:3 45:5 3:7 36:5 14:1", "12:10 39:2 31:7 41:9 47:1 15:1 0:9 46:4 49:5 14:2", "49:10 12:6 48:2 2:8 10:10 35:10 1:6 23:6 42:1 8:10", "16:4 47:6 45:6 43:1 26:7 21:9 8:7 14:9 38:7 20:6", "28:6 2:4 29:4 4:3 20:7 38:1 43:6 23:9 36:7 14:6", "43:2 22:9 24:3 23:5 6:7 20:1 12:5 46:7 36:1 15:3", "6:8 16:5 18:9 33:3 36:4 0:2 24:9 21:7 4:2 19:8 7:8", "33:4 28:9 30:6 0:1 3:7 11:4 40:1 38:8 22:8 49:4", "1:9 39:5 24:10 8:1 38:6 32:8 29:7 25:2 14:2 5:10", "42:8 15:6 11:7 17:2 33:6 35:10 8:3 26:8 13:6 3:4", "35:9 44:8 30:8 40:7 29:7 7:9 37:6 41:9 15:5 3:2", "2:3 17:2 13:4 3:6 4:5 27:3 48:2 38:6 16:3 29:5 5:4", "0:7 46:9 25:1 36:2 37:8 4:3 42:3 16:6 49:6 24:1", "35:8 14:2 4:10 48:8 30:8 39:10 26:6 3:1 10:7 33:9", "43:1 34:9 37:4 14:2 5:7 20:7 35:5 26:10 0:9 30:6", "23:1 41:8 16:3 40:6 12:3 29:3 2:9 27:1 25:3 1:3", "14:6 32:8 1:10 46:9 9:6 28:1 44:3 26:7 34:8 25:8", "41:2 24:4 43:1 28:2 40:1 17:7 30:4 31:5 2:3 47:9", "44:4 7:1 1:5 32:9 34:1 37:7 17:7 29:10 2:1 40:9", "35:7 12:6 4:4 41:6 9:1 39:1 23:7 8:3 20:6 25:6 6:3", "30:3 40:1 11:8 32:6 47:9 23:1 34:7 49:5 7:2 21:1", "19:2 21:6 27:1 29:5 15:3 31:1 39:10 36:3 42:8 33:3", "2:1 20:2 30:5 31:7 21:3 32:4 22:4 19:4 42:8 41:6", "19:5 45:9 27:10 15:7 4:2 36:5 16:8 42:3 13:4 9:8"};
    vector<string> rulesb = {"43:9 2:6 18:2 26:4 23:10 12:1 14:6 29:6 42:1 39:1", "27:4 17:9 18:4 8:6 28:2 20:10 6:4 0:8 16:7 4:2 5:8", "46:1 48:7 32:10 43:6 8:6 31:4 36:7 16:3 24:5 17:3", "11:7 34:2 19:3 37:5 31:4 28:4 22:10 24:2 49:8 0:6", "21:7 30:2 13:7 6:7 4:1 46:8 26:9 17:2 37:3 22:2", "37:2 46:9 42:10 5:5 20:4 41:8 18:4 36:4 10:10 1:4", "41:3 16:5 22:6 18:3 0:4 9:7 11:6 29:6 39:9 44:8", "32:8 42:6 19:8 4:2 45:9 35:9 12:3 5:9 20:4 49:4", "37:2 13:1 31:5 8:5 44:8 18:4 16:1 7:9 38:6 36:9", "25:3 13:5 17:3 2:9 6:7 45:10 43:6 36:9 28:7 3:7", "27:3 0:10 2:4 43:10 1:2 15:6 21:9 18:1 47:7 39:1", "22:9 3:6 45:6 48:7 47:5 38:2 26:10 2:3 16:5 9:4", "7:1 18:8 35:3 42:8 48:1 14:8 21:3 19:6 0:1 12:5", "9:2 47:3 36:5 46:10 6:2 38:10 33:3 30:3 5:9 34:6", "14:5 40:3 45:6 13:1 28:2 10:9 49:4 19:6 6:10 36:7", "44:10 38:5 36:5 22:10 11:5 4:3 10:8 39:4 32:7 19:6", "1:9 11:1 10:10 24:6 14:3 40:2 18:1 16:4 23:5 12:7", "14:3 29:5 11:9 36:5 24:9 43:6 17:2 42:8 18:3 45:5", "44:5 11:5 49:7 45:1 7:5 23:9 2:1 25:4 16:2 4:5 0:3", "49:8 30:5 7:3 33:1 25:6 27:8 21:2 12:9 47:8 26:9", "3:5 37:5 17:7 23:10 8:2 40:10 4:7 14:8 44:8 6:1", "37:5 19:2 30:2 35:7 47:2 23:7 46:7 34:2 16:10 10:2", "16:9 13:7 43:3 35:6 24:4 5:2 32:7 21:8 28:1 38:2", "2:2 16:1 13:10 46:4 26:10 23:10 14:10 12:6 15:6", "47:4 13:1 14:1 16:6 7:4 33:8 26:4 37:10 45:2 1:4", "33:3 8:7 10:4 2:10 34:9 22:1 20:4 26:4 41:5 13:9", "21:9 17:6 19:9 22:6 7:3 28:10 24:3 3:8 15:4 20:3", "21:9 40:5 25:7 28:10 29:9 47:4 41:10 2:5 23:5 26:3", "6:4 31:3 36:2 9:1 5:10 29:9 1:2 39:6 0:4 11:7 18:4", "7:6 20:1 14:10 23:2 42:2 29:2 43:2 15:10 30:4 16:3", "39:9 31:9 17:6 10:4 6:5 5:6 42:4 24:2 45:8 29:5", "27:5 17:4 26:3 16:3 10:9 13:6 7:8 45:6 9:5 15:4", "47:6 31:9 37:9 17:2 13:7 23:4 27:2 30:5 14:5 46:1", "26:10 40:3 17:7 28:10 35:4 1:5 27:2 42:3 22:9 29:5", "4:6 21:1 23:5 12:6 6:5 1:10 17:5 45:1 48:1 15:6", "12:2 8:3 9:6 23:5 34:4 33:1 5:10 29:3 41:5 14:6", "49:7 27:8 1:7 11:6 2:3 9:7 18:2 24:8 20:4 39:9 5:1", "37:6 44:1 30:1 42:10 5:10 7:1 3:7 18:6 24:1 9:9", "23:6 47:4 33:4 46:10 26:3 38:9 14:10 2:7 6:4 10:1", "12:6 14:2 47:1 6:5 29:3 33:9 2:4 13:4 27:5 44:7", "31:1 2:7 9:1 22:3 8:3 10:6 44:1 45:7 28:2 20:9 4:4", "1:1 45:7 30:4 15:5 8:4 34:5 29:7 18:6 26:10 16:2", "15:4 17:3 31:3 2:8 39:9 30:8 14:2 6:8 41:7 33:7", "48:2 27:7 16:2 42:1 8:5 39:5 5:2 36:1 24:2 49:3", "49:2 14:2 15:3 17:8 6:6 5:1 45:9 25:2 30:7 12:4", "35:10 2:10 43:3 7:1 19:7 44:2 13:1 14:3 9:2 5:3", "7:9 43:9 21:6 14:7 16:7 19:7 11:10 45:9 49:8 28:6", "24:1 41:4 6:7 0:4 38:5 44:5 43:3 39:2 21:7 18:1", "43:5 13:4 0:7 21:10 40:4 25:5 4:4 18:9 6:1 5:7 2:7", "25:9 43:1 18:5 16:1 14:5 48:7 24:3 1:6 19:4 23:6"};
    vector<string> rulesc = {"48:9 20:8 31:5 1:9 7:8 32:3 36:4 38:4 24:7 8:2 0:4", "49:6 37:9 47:9 14:4 33:9 43:10 35:1 4:3 40:10 10:5", "13:7 22:1 18:10 21:4 20:4 16:1 28:7 17:4 3:9 39:10", "43:8 47:8 8:5 42:10 32:9 13:8 2:3 21:1 45:2 37:6", "29:9 10:2 25:10 17:9 42:5 36:3 0:1 1:2 14:8 45:7", "6:8 15:7 23:6 43:7 38:6 37:10 46:1 13:6 24:1 45:2", "40:5 29:8 22:10 18:3 7:10 44:9 45:4 13:5 10:2 20:9", "31:2 38:6 46:10 19:3 6:6 21:7 23:9 5:5 27:9 2:10", "23:3 41:9 26:1 17:6 37:6 30:6 39:9 36:9 22:9 10:4", "42:1 4:7 2:3 7:3 46:4 43:6 14:5 10:7 22:1 28:9 6:7", "35:6 43:1 42:7 49:6 44:5 15:4 0:6 29:10 26:1 9:5", "45:6 49:7 26:7 15:8 5:3 27:4 38:9 2:3 43:10 4:9", "30:3 21:3 6:10 26:8 41:9 25:2 45:6 20:2 1:10 49:1", "26:5 19:10 2:9 12:7 47:5 30:9 10:9 20:7 33:3 44:8", "42:4 15:3 29:8 17:8 18:2 36:5 3:6 12:9 2:7 34:9", "16:8 39:7 28:1 4:10 11:1 15:8 46:3 30:10 43:10 0:9", "40:2 12:8 35:8 36:7 17:6 15:6 25:6 20:8 41:5 33:6", "5:1 44:10 29:5 37:4 21:3 36:5 12:6 28:2 9:4 2:4", "2:7 12:9 35:6 26:9 17:5 13:6 22:9 18:7 7:9 32:4", "16:6 25:9 0:1 13:10 17:3 33:1 43:10 24:10 23:7 7:5", "5:5 14:10 44:3 49:10 42:7 27:8 43:7 1:7 13:10 7:9", "34:1 21:5 41:1 2:5 29:5 24:4 44:9 17:6 38:1 46:3", "37:5 18:5 17:4 39:8 24:4 10:4 32:2 15:8 27:1 41:5", "44:8 35:3 29:6 39:9 1:9 37:3 3:9 6:8 10:8 26:5 2:7", "27:4 16:1 49:10 46:3 14:6 44:5 25:8 11:4 6:10 41:5", "18:8 1:6 28:2 5:10 38:1 9:9 2:7 45:2 13:5 16:10", "41:1 32:8 48:10 47:4 16:6 19:1 13:3 0:3 23:9 5:6", "21:8 11:10 32:7 15:5 48:7 10:10 24:4 46:3 22:7 1:6", "4:9 9:4 40:8 10:5 29:1 8:10 18:5 14:2 19:7 42:2", "9:2 8:9 3:6 20:2 30:7 18:9 49:9 44:8 37:6 2:7 48:3", "32:10 42:2 30:5 4:4 41:3 17:1 38:5 34:7 12:6 33:1", "47:7 31:2 42:7 49:1 35:1 41:7 43:1 19:8 10:8 24:2", "43:6 9:7 30:3 15:7 17:10 23:6 47:6 12:10 33:9 41:6", "22:4 20:2 2:5 3:7 28:2 48:1 17:2 1:8 49:8 34:3 6:5", "24:9 1:7 16:3 14:7 13:1 23:4 29:4 27:7 19:1 28:8", "22:2 43:3 28:3 21:7 33:3 11:1 2:3 35:3 20:7 32:4", "32:2 43:1 16:4 27:5 33:6 40:9 21:5 10:8 35:8 19:6", "12:6 7:10 3:3 26:1 18:10 28:2 32:10 11:5 31:3 27:3", "2:5 23:8 7:1 8:4 39:3 15:8 43:7 49:6 20:2 34:3 6:2", "28:8 12:2 11:2 43:5 13:3 35:6 42:2 49:3 8:7 31:5", "29:9 1:7 9:2 17:1 31:2 8:5 32:9 37:10 20:10 45:5", "13:3 31:10 5:8 30:1 4:6 23:6 32:8 9:1 35:2 27:3", "18:8 37:6 32:3 4:7 24:4 20:3 1:3 49:5 30:10 3:7", "25:7 29:2 49:9 30:7 23:5 45:4 13:5 42:8 4:10 46:7", "5:6 44:2 17:7 37:7 34:10 2:2 15:3 36:10 12:9 38:10", "37:7 15:7 13:3 29:6 41:5 10:5 7:10 27:3 16:5 8:9", "44:4 6:8 39:4 46:7 19:7 7:3 29:2 33:5 9:6 13:8 8:4", "9:6 30:7 37:6 40:1 25:7 44:9 49:6 29:2 18:5 2:5", "12:4 30:10 45:4 9:8 28:3 44:4 22:1 33:7 36:9 27:8", "45:10 18:6 49:10 7:9 26:7 0:8 10:2 4:1 42:7 6:2"};
    int finalState = 999;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3225;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> rulesa = {"33:2 30:10 23:2 37:10 29:6 9:5 31:1 48:8 27:9 6:6", "12:3 46:3 32:8 17:3 49:5 41:2 40:2 43:1 23:8 18:6", "48:3 27:5 46:2 47:1 0:4 9:3 18:1 8:8 31:7 37:10", "13:3 39:5 1:6 20:9 15:10 17:5 9:1 38:7 46:3 24:7", "38:3 2:9 18:3 6:4 25:9 27:3 34:2 15:10 17:4 43:9", "17:6 34:10 26:2 10:9 20:1 38:2 25:9 4:1 3:6 36:3", "43:5 1:2 47:10 46:8 29:1 28:9 11:2 39:8 8:6 2:9", "20:1 43:6 10:2 23:8 9:2 12:7 14:7 13:9 44:6 48:4", "46:2 49:4 34:6 33:2 24:3 29:5 15:8 0:8 11:6 37:3", "35:8 32:9 11:4 14:8 15:7 18:9 48:5 2:7 29:1 16:7", "44:10 29:9 0:5 6:10 10:2 28:1 24:2 11:10 36:9 14:7", "44:6 35:10 1:8 37:9 30:8 15:9 39:8 26:1 3:3 49:9", "34:5 43:6 29:7 48:6 38:1 39:6 31:5 44:1 0:6 37:10", "14:9 25:6 48:8 0:5 20:4 26:6 45:3 49:6 21:3 37:3", "24:10 32:3 47:1 18:5 30:6 43:9 1:10 28:5 23:10 0:3", "10:9 38:5 47:8 29:2 25:10 18:2 49:5 17:3 24:7 34:7", "45:1 37:1 7:2 9:1 48:1 23:3 21:7 30:7 25:8 6:1 4:8", "22:2 13:5 30:8 7:10 17:7 47:5 1:9 2:4 21:1 0:10", "2:1 20:10 30:7 29:7 46:6 39:9 40:9 8:2 15:7 24:5", "36:3 30:4 19:1 44:3 14:1 7:6 31:5 6:5 23:2 25:5", "23:1 25:1 37:6 48:6 1:8 45:9 42:7 11:3 22:3 34:5", "19:4 38:1 36:9 8:5 11:6 34:1 5:10 39:3 46:4 15:2", "42:3 9:8 21:5 1:2 22:6 44:2 43:1 19:9 7:5 45:6 2:8", "4:1 10:7 40:5 17:9 13:4 31:6 21:8 7:10 23:8 9:7", "28:2 46:8 35:7 40:1 14:10 26:7 45:6 33:1 21:8 41:2", "34:5 19:10 22:4 36:4 48:1 44:10 23:4 12:9 5:8 9:2", "10:5 16:4 5:8 27:3 47:3 40:2 15:3 19:9 22:6 25:5", "5:4 34:2 43:9 18:5 26:7 32:2 24:7 23:3 15:5 29:10", "41:3 9:9 7:5 23:5 48:9 27:4 1:9 30:3 31:2 38:10", "17:6 8:9 11:10 18:2 19:8 20:4 2:3 9:2 45:6 29:3", "2:7 13:8 29:4 42:2 45:8 12:9 21:4 31:7 18:8 23:10", "34:8 29:6 6:7 14:3 7:1 26:2 46:8 21:8 13:6 37:1", "3:1 31:6 4:10 40:2 37:3 23:10 9:8 0:9 8:8 10:4 7:6", "40:6 6:1 18:6 25:6 19:3 0:1 2:1 27:4 37:9 41:10", "24:10 8:7 18:3 22:4 44:7 33:8 45:9 48:4 14:2 21:9", "9:3 40:2 13:2 16:5 42:5 10:1 49:3 18:10 6:6 12:2", "1:2 37:8 42:10 36:9 9:9 19:1 46:3 29:8 47:9 24:6", "21:7 33:4 35:5 25:6 10:6 48:10 0:10 9:5 4:4 2:7", "46:3 30:6 36:3 1:7 20:7 34:10 43:4 37:8 42:10 39:8", "43:2 15:4 0:3 27:7 37:2 14:6 18:6 25:2 2:10 40:3", "25:6 16:5 30:2 26:1 12:2 42:6 4:1 39:3 24:7 45:3", "5:9 25:6 48:6 23:2 8:10 26:9 37:5 43:2 47:1 21:2", "8:9 0:3 26:6 21:9 25:2 47:9 45:8 13:1 44:2 27:3", "37:6 2:8 3:7 17:8 16:3 34:3 20:7 39:7 0:5 28:2 4:7", "34:9 2:1 19:2 9:7 21:7 38:9 18:10 7:1 13:8 46:10", "9:8 32:4 0:10 15:10 26:8 29:1 17:3 12:5 1:10 38:8", "45:7 9:5 6:5 8:5 46:5 0:3 3:7 10:9 39:3 33:4 28:4", "26:8 8:3 3:4 7:3 15:1 45:3 17:7 29:1 27:8 25:2 5:1", "35:3 4:10 0:8 25:9 18:7 21:6 27:5 17:6 7:8 1:5 8:3", "30:3 35:1 29:5 4:2 42:1 28:4 19:3 20:5 44:7 43:6"};
    vector<string> rulesb = {"22:3 11:4 35:2 23:5 10:3 28:9 4:9 2:3 6:2 13:5 9:1", "49:2 17:7 35:1 0:1 30:2 34:4 41:8 43:7 1:10 16:3", "27:10 10:8 30:1 35:10 9:7 2:7 12:10 33:9 45:7 48:5", "14:5 20:8 16:1 30:8 18:9 8:3 1:2 3:9 15:1 7:4 46:2", "33:4 28:1 38:5 35:7 25:9 12:7 49:3 45:8 34:6 15:5", "18:5 26:1 14:5 16:7 22:5 37:3 36:7 48:9 12:3 8:6", "1:5 44:6 8:6 49:4 21:8 19:3 30:6 4:1 2:4 46:5 20:4", "39:5 18:1 40:10 7:4 33:8 46:8 16:8 48:2 36:3 5:6", "11:9 19:9 37:2 34:1 26:3 38:7 46:9 36:4 10:2 15:2", "13:5 42:10 2:4 43:2 5:6 15:2 34:2 19:3 8:9 29:2", "13:1 44:10 21:4 43:4 20:6 18:10 47:4 16:6 32:8 7:3", "12:9 10:6 2:3 31:9 37:3 5:7 16:9 6:1 20:7 0:5 27:8", "2:5 9:7 7:8 5:1 39:7 12:7 40:6 15:8 18:8 31:1 49:6", "30:5 34:5 36:2 38:4 2:5 7:9 49:10 24:8 17:7 45:8", "6:4 44:3 47:6 2:3 3:10 31:8 29:9 30:10 22:9 48:3", "22:2 40:10 11:6 44:6 8:9 14:1 10:4 7:2 21:6 20:1", "47:2 30:1 38:3 34:6 42:8 41:2 10:2 25:9 8:3 27:5", "46:1 13:3 18:3 10:8 14:4 11:8 37:2 27:4 39:2 49:6", "8:2 27:7 28:8 15:10 1:9 21:3 46:4 48:1 34:8 19:5", "14:2 38:1 25:5 13:3 8:4 4:8 23:2 12:3 47:10 22:9", "35:8 29:5 5:2 45:7 15:7 39:3 26:4 49:7 44:1 20:7", "44:4 5:1 18:9 45:10 46:8 21:10 6:4 28:4 31:5 17:10", "35:6 47:3 44:6 29:10 2:7 19:5 6:3 7:1 9:4 23:9 4:5", "19:9 16:5 20:5 6:1 26:6 39:7 36:9 25:7 34:9 47:4", "12:5 36:8 9:1 39:9 8:2 35:9 17:1 46:8 49:7 2:10", "2:1 7:9 37:2 9:7 1:9 30:2 35:4 44:9 17:10 0:5 11:6", "5:4 39:4 21:9 45:4 8:5 14:4 40:5 26:9 3:10 32:7", "2:2 17:10 37:6 18:2 3:4 16:8 27:7 9:4 8:9 15:2 4:9", "2:10 40:1 25:3 13:1 39:1 15:10 1:3 20:2 38:3 8:7", "46:3 35:3 40:9 7:3 34:3 37:4 4:2 23:7 30:9 5:9 3:2", "19:10 34:4 12:6 9:6 0:4 35:1 20:3 43:6 47:8 1:9", "14:10 29:9 8:2 45:1 15:3 0:6 32:9 43:4 40:6 27:10", "45:8 36:9 15:3 13:10 49:1 42:2 29:4 0:2 28:10 32:6", "12:1 5:1 42:6 19:8 23:1 14:9 24:5 21:4 26:7 36:10", "5:4 29:1 40:2 9:6 0:10 19:9 32:7 30:2 17:2 8:7 4:8", "19:10 11:1 15:6 2:2 8:7 6:2 45:9 47:8 0:4 42:9 5:5", "43:6 26:1 2:3 32:10 15:8 4:5 36:10 31:4 22:3 10:5", "22:6 7:8 9:4 14:6 25:6 35:6 24:10 27:1 4:6 1:6 6:7", "19:7 12:3 14:10 15:8 44:4 39:1 48:2 4:9 23:5 21:8", "20:1 36:2 13:3 47:4 7:3 41:7 3:3 21:9 16:10 39:8", "24:1 42:5 10:9 37:4 49:2 38:5 30:1 35:8 4:1 7:4", "23:9 8:3 30:7 37:5 15:5 40:9 43:3 39:10 45:8 46:6", "13:10 26:6 32:1 21:1 37:6 34:2 39:6 15:3 14:8 36:7", "9:3 39:7 3:10 45:4 35:4 43:10 13:10 7:8 16:4 49:5", "10:10 21:8 7:4 44:4 6:4 8:7 26:3 12:3 14:8 1:1 4:4", "39:4 5:7 31:9 42:7 32:4 48:2 15:6 20:7 14:3 8:8", "17:4 3:5 28:1 31:8 5:7 25:9 34:4 19:1 2:4 40:2 1:3", "21:3 37:7 13:3 36:4 33:7 5:6 38:7 12:2 46:6 6:2", "8:1 1:5 24:2 18:3 41:5 2:8 4:4 14:7 26:4 10:9 35:9", "34:10 49:2 8:9 29:7 24:7 4:10 37:5 39:6 13:6 21:4"};
    vector<string> rulesc = {"26:5 12:3 46:1 7:3 44:2 14:1 8:7 32:5 25:2 15:6", "5:4 49:3 46:2 15:1 24:10 47:1 48:8 36:6 39:7 43:5", "5:3 24:1 27:1 26:2 47:2 30:3 35:7 7:1 10:3 4:7 6:3", "39:1 28:7 48:9 20:10 15:2 42:5 30:9 25:6 10:10 3:5", "7:10 22:6 19:3 38:1 28:7 35:6 13:4 43:6 24:8 27:7", "9:4 41:7 38:1 21:4 8:5 15:4 32:3 20:3 4:4 5:9 11:7", "28:6 4:9 3:6 8:6 0:9 30:3 27:5 31:3 13:8 49:2 1:8", "41:5 10:9 27:6 5:6 16:5 18:10 6:10 34:8 42:8 35:4", "18:6 26:2 16:6 11:8 1:2 5:4 3:4 8:6 30:1 13:4 47:5", "19:9 25:1 32:1 39:10 0:7 34:9 21:1 2:9 16:4 3:6", "20:8 9:3 12:9 6:5 45:1 37:8 24:4 34:5 1:4 48:1 5:9", "30:8 5:9 43:5 49:6 19:2 46:9 23:6 41:5 48:10 33:9", "31:8 27:3 40:5 49:9 6:7 28:3 35:5 9:6 39:3 17:3", "24:7 7:3 19:9 1:6 29:7 27:5 48:4 2:6 23:6 8:9 37:7", "23:2 1:1 48:9 13:9 26:8 49:9 2:1 46:7 8:2 31:8 9:2", "20:10 33:6 6:10 34:7 23:5 25:1 16:2 11:10 2:4 47:6", "33:2 35:3 5:2 12:10 30:1 37:1 44:7 19:7 42:3 0:2", "29:10 1:3 31:8 6:3 13:2 32:3 49:8 35:5 23:4 47:10", "26:6 44:8 11:3 25:1 42:2 47:8 19:8 36:2 5:9 22:8", "19:10 8:1 6:1 11:6 0:7 25:5 31:1 46:4 21:8 24:3", "20:8 32:10 11:1 14:4 15:10 24:3 3:9 44:2 9:2 47:9", "44:8 47:6 15:4 26:4 27:1 16:2 5:7 4:2 19:10 33:5", "29:5 17:2 0:2 11:7 37:6 34:9 4:10 39:2 3:6 7:9 9:7", "21:6 35:9 47:10 49:7 36:2 19:2 4:7 41:6 39:2 42:7", "23:2 43:1 40:4 8:7 22:4 25:8 10:9 42:3 14:6 48:7", "21:7 32:10 35:9 43:9 23:9 48:10 30:3 46:9 29:3 5:3", "11:7 0:7 9:3 49:3 32:7 20:2 6:10 13:10 15:2 2:5", "5:1 16:8 47:5 22:8 44:5 12:6 10:8 13:10 9:1 39:3", "32:3 25:3 13:1 42:6 36:8 28:6 14:1 22:2 44:10 31:7", "21:3 20:3 19:6 23:9 30:2 29:3 3:2 15:1 28:6 46:7", "21:10 13:8 38:1 15:2 8:4 16:10 14:2 49:10 1:7 43:8", "2:1 23:7 28:9 44:5 30:3 32:10 1:2 29:2 42:7 11:3", "38:5 11:2 5:10 36:4 6:10 25:2 43:2 17:3 15:10 22:8", "26:5 49:5 43:1 18:8 46:9 25:8 40:10 4:3 17:4 9:1", "20:2 40:9 10:9 44:4 29:2 2:6 18:3 39:4 25:6 24:3", "19:8 30:7 21:9 5:9 45:8 15:9 14:7 10:4 31:4 49:9", "41:2 28:9 13:6 37:1 31:8 32:9 38:8 2:2 45:7 26:5", "25:3 16:7 35:10 48:5 27:3 6:8 20:1 46:1 29:2 19:1", "48:4 2:6 8:2 34:5 4:6 10:10 32:1 6:7 46:3 49:1 3:2", "25:10 8:5 36:5 9:7 18:2 34:4 43:3 39:2 23:2 17:3", "12:7 16:6 25:8 18:8 23:6 38:1 40:2 8:9 46:1 34:6", "9:6 31:7 4:7 12:9 36:10 6:6 39:4 15:8 10:8 19:5", "44:3 31:5 23:2 12:2 30:7 22:8 28:3 49:3 26:8 33:9", "8:7 35:6 37:6 10:6 23:5 6:5 19:9 49:6 22:9 27:4", "27:8 14:5 25:7 38:4 17:7 34:3 15:8 41:7 48:7 10:8", "28:6 33:8 19:9 2:7 48:10 20:4 39:4 34:4 37:8 24:9", "28:4 14:5 19:10 43:6 42:1 41:7 6:1 30:6 5:7 7:9", "36:3 17:10 34:7 31:4 20:4 13:1 40:6 41:10 10:10", "5:1 15:7 10:9 48:6 27:10 31:3 35:3 19:5 43:2 49:9", "10:9 14:1 7:4 30:4 29:4 26:7 22:2 11:8 1:2 38:5"};
    int finalState = 7;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.006923076923076922;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> rulesa = {"33:2 30:10 23:2 37:10 29:6 9:5 31:1 48:8 27:9 6:6", "12:3 46:3 32:8 17:3 49:5 41:2 40:2 43:1 23:8 18:6", "48:3 27:5 46:2 47:1 0:4 9:3 18:1 8:8 31:7 37:10", "13:3 39:5 1:6 20:9 15:10 17:5 9:1 38:7 46:3 24:7", "38:3 2:9 18:3 6:4 25:9 27:3 34:2 15:10 17:4 43:9", "17:6 34:10 26:2 10:9 20:1 38:2 25:9 4:1 3:6 36:3", "43:5 1:2 47:10 46:8 29:1 28:9 11:2 39:8 8:6 2:9", "20:1 43:6 10:2 23:8 9:2 12:7 14:7 13:9 44:6 48:4", "46:2 49:4 34:6 33:2 24:3 29:5 15:8 0:8 11:6 37:3", "35:8 32:9 11:4 14:8 15:7 18:9 48:5 2:7 29:1 16:7", "44:10 29:9 0:5 6:10 10:2 28:1 24:2 11:10 36:9 14:7", "44:6 35:10 1:8 37:9 30:8 15:9 39:8 26:1 3:3 49:9", "34:5 43:6 29:7 48:6 38:1 39:6 31:5 44:1 0:6 37:10", "14:9 25:6 48:8 0:5 20:4 26:6 45:3 49:6 21:3 37:3", "24:10 32:3 47:1 18:5 30:6 43:9 1:10 28:5 23:10 0:3", "10:9 38:5 47:8 29:2 25:10 18:2 49:5 17:3 24:7 34:7", "45:1 37:1 7:2 9:1 48:1 23:3 21:7 30:7 25:8 6:1 4:8", "22:2 13:5 30:8 7:10 17:7 47:5 1:9 2:4 21:1 0:10", "2:1 20:10 30:7 29:7 46:6 39:9 40:9 8:2 15:7 24:5", "36:3 30:4 19:1 44:3 14:1 7:6 31:5 6:5 23:2 25:5", "23:1 25:1 37:6 48:6 1:8 45:9 42:7 11:3 22:3 34:5", "19:4 38:1 36:9 8:5 11:6 34:1 5:10 39:3 46:4 15:2", "42:3 9:8 21:5 1:2 22:6 44:2 43:1 19:9 7:5 45:6 2:8", "4:1 10:7 40:5 17:9 13:4 31:6 21:8 7:10 23:8 9:7", "28:2 46:8 35:7 40:1 14:10 26:7 45:6 33:1 21:8 41:2", "34:5 19:10 22:4 36:4 48:1 44:10 23:4 12:9 5:8 9:2", "10:5 16:4 5:8 27:3 47:3 40:2 15:3 19:9 22:6 25:5", "5:4 34:2 43:9 18:5 26:7 32:2 24:7 23:3 15:5 29:10", "41:3 9:9 7:5 23:5 48:9 27:4 1:9 30:3 31:2 38:10", "17:6 8:9 11:10 18:2 19:8 20:4 2:3 9:2 45:6 29:3", "2:7 13:8 29:4 42:2 45:8 12:9 21:4 31:7 18:8 23:10", "34:8 29:6 6:7 14:3 7:1 26:2 46:8 21:8 13:6 37:1", "3:1 31:6 4:10 40:2 37:3 23:10 9:8 0:9 8:8 10:4 7:6", "40:6 6:1 18:6 25:6 19:3 0:1 2:1 27:4 37:9 41:10", "24:10 8:7 18:3 22:4 44:7 33:8 45:9 48:4 14:2 21:9", "9:3 40:2 13:2 16:5 42:5 10:1 49:3 18:10 6:6 12:2", "1:2 37:8 42:10 36:9 9:9 19:1 46:3 29:8 47:9 24:6", "21:7 33:4 35:5 25:6 10:6 48:10 0:10 9:5 4:4 2:7", "46:3 30:6 36:3 1:7 20:7 34:10 43:4 37:8 42:10 39:8", "43:2 15:4 0:3 27:7 37:2 14:6 18:6 25:2 2:10 40:3", "25:6 16:5 30:2 26:1 12:2 42:6 4:1 39:3 24:7 45:3", "5:9 25:6 48:6 23:2 8:10 26:9 37:5 43:2 47:1 21:2", "8:9 0:3 26:6 21:9 25:2 47:9 45:8 13:1 44:2 27:3", "37:6 2:8 3:7 17:8 16:3 34:3 20:7 39:7 0:5 28:2 4:7", "34:9 2:1 19:2 9:7 21:7 38:9 18:10 7:1 13:8 46:10", "9:8 32:4 0:10 15:10 26:8 29:1 17:3 12:5 1:10 38:8", "45:7 9:5 6:5 8:5 46:5 0:3 3:7 10:9 39:3 33:4 28:4", "26:8 8:3 3:4 7:3 15:1 45:3 17:7 29:1 27:8 25:2 5:1", "35:3 4:10 0:8 25:9 18:7 21:6 27:5 17:6 7:8 1:5 8:3", "30:3 35:1 29:5 4:2 42:1 28:4 19:3 20:5 44:7 43:6"};
    vector<string> rulesb = {"22:3 11:4 35:2 23:5 10:3 28:9 4:9 2:3 6:2 13:5 9:1", "49:2 17:7 35:1 0:1 30:2 34:4 41:8 43:7 1:10 16:3", "27:10 10:8 30:1 35:10 9:7 2:7 12:10 33:9 45:7 48:5", "14:5 20:8 16:1 30:8 18:9 8:3 1:2 3:9 15:1 7:4 46:2", "33:4 28:1 38:5 35:7 25:9 12:7 49:3 45:8 34:6 15:5", "18:5 26:1 14:5 16:7 22:5 37:3 36:7 48:9 12:3 8:6", "1:5 44:6 8:6 49:4 21:8 19:3 30:6 4:1 2:4 46:5 20:4", "39:5 18:1 40:10 7:4 33:8 46:8 16:8 48:2 36:3 5:6", "11:9 19:9 37:2 34:1 26:3 38:7 46:9 36:4 10:2 15:2", "13:5 42:10 2:4 43:2 5:6 15:2 34:2 19:3 8:9 29:2", "13:1 44:10 21:4 43:4 20:6 18:10 47:4 16:6 32:8 7:3", "12:9 10:6 2:3 31:9 37:3 5:7 16:9 6:1 20:7 0:5 27:8", "2:5 9:7 7:8 5:1 39:7 12:7 40:6 15:8 18:8 31:1 49:6", "30:5 34:5 36:2 38:4 2:5 7:9 49:10 24:8 17:7 45:8", "6:4 44:3 47:6 2:3 3:10 31:8 29:9 30:10 22:9 48:3", "22:2 40:10 11:6 44:6 8:9 14:1 10:4 7:2 21:6 20:1", "47:2 30:1 38:3 34:6 42:8 41:2 10:2 25:9 8:3 27:5", "46:1 13:3 18:3 10:8 14:4 11:8 37:2 27:4 39:2 49:6", "8:2 27:7 28:8 15:10 1:9 21:3 46:4 48:1 34:8 19:5", "14:2 38:1 25:5 13:3 8:4 4:8 23:2 12:3 47:10 22:9", "35:8 29:5 5:2 45:7 15:7 39:3 26:4 49:7 44:1 20:7", "44:4 5:1 18:9 45:10 46:8 21:10 6:4 28:4 31:5 17:10", "35:6 47:3 44:6 29:10 2:7 19:5 6:3 7:1 9:4 23:9 4:5", "19:9 16:5 20:5 6:1 26:6 39:7 36:9 25:7 34:9 47:4", "12:5 36:8 9:1 39:9 8:2 35:9 17:1 46:8 49:7 2:10", "2:1 7:9 37:2 9:7 1:9 30:2 35:4 44:9 17:10 0:5 11:6", "5:4 39:4 21:9 45:4 8:5 14:4 40:5 26:9 3:10 32:7", "2:2 17:10 37:6 18:2 3:4 16:8 27:7 9:4 8:9 15:2 4:9", "2:10 40:1 25:3 13:1 39:1 15:10 1:3 20:2 38:3 8:7", "46:3 35:3 40:9 7:3 34:3 37:4 4:2 23:7 30:9 5:9 3:2", "19:10 34:4 12:6 9:6 0:4 35:1 20:3 43:6 47:8 1:9", "14:10 29:9 8:2 45:1 15:3 0:6 32:9 43:4 40:6 27:10", "45:8 36:9 15:3 13:10 49:1 42:2 29:4 0:2 28:10 32:6", "12:1 5:1 42:6 19:8 23:1 14:9 24:5 21:4 26:7 36:10", "5:4 29:1 40:2 9:6 0:10 19:9 32:7 30:2 17:2 8:7 4:8", "19:10 11:1 15:6 2:2 8:7 6:2 45:9 47:8 0:4 42:9 5:5", "43:6 26:1 2:3 32:10 15:8 4:5 36:10 31:4 22:3 10:5", "22:6 7:8 9:4 14:6 25:6 35:6 24:10 27:1 4:6 1:6 6:7", "19:7 12:3 14:10 15:8 44:4 39:1 48:2 4:9 23:5 21:8", "20:1 36:2 13:3 47:4 7:3 41:7 3:3 21:9 16:10 39:8", "24:1 42:5 10:9 37:4 49:2 38:5 30:1 35:8 4:1 7:4", "23:9 8:3 30:7 37:5 15:5 40:9 43:3 39:10 45:8 46:6", "13:10 26:6 32:1 21:1 37:6 34:2 39:6 15:3 14:8 36:7", "9:3 39:7 3:10 45:4 35:4 43:10 13:10 7:8 16:4 49:5", "10:10 21:8 7:4 44:4 6:4 8:7 26:3 12:3 14:8 1:1 4:4", "39:4 5:7 31:9 42:7 32:4 48:2 15:6 20:7 14:3 8:8", "17:4 3:5 28:1 31:8 5:7 25:9 34:4 19:1 2:4 40:2 1:3", "21:3 37:7 13:3 36:4 33:7 5:6 38:7 12:2 46:6 6:2", "8:1 1:5 24:2 18:3 41:5 2:8 4:4 14:7 26:4 10:9 35:9", "34:10 49:2 8:9 29:7 24:7 4:10 37:5 39:6 13:6 21:4"};
    vector<string> rulesc = {"26:5 12:3 46:1 7:3 44:2 14:1 8:7 32:5 25:2 15:6", "5:4 49:3 46:2 15:1 24:10 47:1 48:8 36:6 39:7 43:5", "5:3 24:1 27:1 26:2 47:2 30:3 35:7 7:1 10:3 4:7 6:3", "39:1 28:7 48:9 20:10 15:2 42:5 30:9 25:6 10:10 3:5", "7:10 22:6 19:3 38:1 28:7 35:6 13:4 43:6 24:8 27:7", "9:4 41:7 38:1 21:4 8:5 15:4 32:3 20:3 4:4 5:9 11:7", "28:6 4:9 3:6 8:6 0:9 30:3 27:5 31:3 13:8 49:2 1:8", "41:5 10:9 27:6 5:6 16:5 18:10 6:10 34:8 42:8 35:4", "18:6 26:2 16:6 11:8 1:2 5:4 3:4 8:6 30:1 13:4 47:5", "19:9 25:1 32:1 39:10 0:7 34:9 21:1 2:9 16:4 3:6", "20:8 9:3 12:9 6:5 45:1 37:8 24:4 34:5 1:4 48:1 5:9", "30:8 5:9 43:5 49:6 19:2 46:9 23:6 41:5 48:10 33:9", "31:8 27:3 40:5 49:9 6:7 28:3 35:5 9:6 39:3 17:3", "24:7 7:3 19:9 1:6 29:7 27:5 48:4 2:6 23:6 8:9 37:7", "23:2 1:1 48:9 13:9 26:8 49:9 2:1 46:7 8:2 31:8 9:2", "20:10 33:6 6:10 34:7 23:5 25:1 16:2 11:10 2:4 47:6", "33:2 35:3 5:2 12:10 30:1 37:1 44:7 19:7 42:3 0:2", "29:10 1:3 31:8 6:3 13:2 32:3 49:8 35:5 23:4 47:10", "26:6 44:8 11:3 25:1 42:2 47:8 19:8 36:2 5:9 22:8", "19:10 8:1 6:1 11:6 0:7 25:5 31:1 46:4 21:8 24:3", "20:8 32:10 11:1 14:4 15:10 24:3 3:9 44:2 9:2 47:9", "44:8 47:6 15:4 26:4 27:1 16:2 5:7 4:2 19:10 33:5", "29:5 17:2 0:2 11:7 37:6 34:9 4:10 39:2 3:6 7:9 9:7", "21:6 35:9 47:10 49:7 36:2 19:2 4:7 41:6 39:2 42:7", "23:2 43:1 40:4 8:7 22:4 25:8 10:9 42:3 14:6 48:7", "21:7 32:10 35:9 43:9 23:9 48:10 30:3 46:9 29:3 5:3", "11:7 0:7 9:3 49:3 32:7 20:2 6:10 13:10 15:2 2:5", "5:1 16:8 47:5 22:8 44:5 12:6 10:8 13:10 9:1 39:3", "32:3 25:3 13:1 42:6 36:8 28:6 14:1 22:2 44:10 31:7", "21:3 20:3 19:6 23:9 30:2 29:3 3:2 15:1 28:6 46:7", "21:10 13:8 38:1 15:2 8:4 16:10 14:2 49:10 1:7 43:8", "2:1 23:7 28:9 44:5 30:3 32:10 1:2 29:2 42:7 11:3", "38:5 11:2 5:10 36:4 6:10 25:2 43:2 17:3 15:10 22:8", "26:5 49:5 43:1 18:8 46:9 25:8 40:10 4:3 17:4 9:1", "20:2 40:9 10:9 44:4 29:2 2:6 18:3 39:4 25:6 24:3", "19:8 30:7 21:9 5:9 45:8 15:9 14:7 10:4 31:4 49:9", "41:2 28:9 13:6 37:1 31:8 32:9 38:8 2:2 45:7 26:5", "25:3 16:7 35:10 48:5 27:3 6:8 20:1 46:1 29:2 19:1", "48:4 2:6 8:2 34:5 4:6 10:10 32:1 6:7 46:3 49:1 3:2", "25:10 8:5 36:5 9:7 18:2 34:4 43:3 39:2 23:2 17:3", "12:7 16:6 25:8 18:8 23:6 38:1 40:2 8:9 46:1 34:6", "9:6 31:7 4:7 12:9 36:10 6:6 39:4 15:8 10:8 19:5", "44:3 31:5 23:2 12:2 30:7 22:8 28:3 49:3 26:8 33:9", "8:7 35:6 37:6 10:6 23:5 6:5 19:9 49:6 22:9 27:4", "27:8 14:5 25:7 38:4 17:7 34:3 15:8 41:7 48:7 10:8", "28:6 33:8 19:9 2:7 48:10 20:4 39:4 34:4 37:8 24:9", "28:4 14:5 19:10 43:6 42:1 41:7 6:1 30:6 5:7 7:9", "36:3 17:10 34:7 31:4 20:4 13:1 40:6 41:10 10:10", "5:1 15:7 10:9 48:6 27:10 31:3 35:3 19:5 43:2 49:9", "10:9 14:1 7:4 30:4 29:4 26:7 22:2 11:8 1:2 38:5"};
    int finalState = 999;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> rulesa = {"32:1 46:1 30:1 6:8 18:1 24:3 41:5 49:6 27:7 9:1", "32:8 13:10 40:8 20:8 1:4 12:6 43:6 46:9 25:4 42:7", "0:1 31:6 2:4 40:2 46:10 1:7 14:8 15:6 13:9 21:3", "47:3 7:5 12:4 18:7 6:6 2:8 40:10 39:1 21:4 22:4", "27:6 4:9 10:8 15:6 28:9 37:7 11:6 40:6 5:4 8:8 0:7", "19:4 29:7 8:4 15:2 12:2 48:5 45:6 6:5 33:2 17:2", "14:9 22:9 21:9 29:9 40:7 3:2 46:2 9:9 27:4 38:1", "38:3 14:4 15:6 37:4 6:1 39:1 19:7 10:5 16:10 45:6", "31:9 0:6 35:8 49:3 30:1 18:8 47:8 15:3 26:5 41:1", "8:7 14:5 40:2 44:4 2:7 20:4 37:5 12:1 5:2 19:2 3:1", "22:4 37:2 40:3 27:10 15:1 28:9 16:7 12:8 17:4 35:7", "38:5 43:7 23:2 47:5 1:4 31:1 46:1 15:10 5:2 28:10", "22:8 38:5 19:6 11:4 34:4 44:5 42:5 7:7 27:6 43:7", "24:8 30:8 41:8 15:8 43:4 22:10 49:1 27:8 16:10 1:4", "25:3 3:7 33:4 28:7 23:6 5:8 44:2 14:10 19:7 38:3", "16:2 5:3 7:10 38:6 36:1 18:5 25:8 46:7 14:9 26:6", "47:10 12:1 2:2 48:8 27:4 5:4 35:10 30:7 31:6 18:4", "35:3 36:2 27:1 1:3 4:5 3:9 11:6 32:1 26:10 13:4", "6:10 26:6 35:8 44:9 13:10 8:6 38:2 41:3 17:8 16:5", "20:5 1:7 41:1 39:10 21:1 42:6 36:1 47:7 46:7 15:8", "42:4 35:6 36:3 11:3 34:10 44:9 0:3 37:8 24:6 40:3", "28:6 17:6 22:10 15:3 12:8 27:1 30:6 19:10 0:7 47:2", "5:4 22:8 15:1 24:8 0:1 7:9 12:4 33:2 29:4 32:1 4:2", "11:4 48:7 29:3 3:10 17:1 21:9 47:4 35:6 27:3 26:10", "27:2 25:3 38:7 37:3 29:8 21:10 5:2 36:5 10:2 15:7", "49:10 24:5 13:4 38:5 19:3 41:8 17:7 4:8 26:8 18:10", "19:1 12:6 9:7 41:6 27:1 24:3 32:2 11:6 28:5 1:10", "11:7 35:5 21:5 24:9 45:8 6:1 25:6 39:2 16:5 7:4", "1:2 8:6 5:4 36:9 14:4 43:9 3:4 27:9 10:4 41:9 42:4", "13:9 35:4 14:9 12:1 33:4 11:7 43:6 45:5 10:8 22:7", "4:7 32:5 26:8 13:3 34:7 27:3 33:3 19:10 21:7 0:2", "15:6 29:4 19:5 32:2 14:1 3:4 48:3 41:2 20:4 13:2", "9:3 35:2 45:4 48:6 14:9 1:7 18:5 26:10 37:7 32:5", "13:4 14:10 2:8 47:7 16:7 36:2 30:6 32:6 42:10 48:7", "1:6 29:8 16:2 7:5 22:5 20:8 2:7 11:8 32:8 3:6 12:5", "13:3 2:3 32:6 9:5 30:4 31:7 29:10 48:2 0:3 25:9", "19:3 1:4 11:1 6:2 30:4 31:2 5:2 36:6 3:4 26:9 18:8", "5:9 48:1 8:6 41:1 38:7 11:7 24:10 17:7 36:8 20:6", "13:6 4:4 27:1 10:1 39:1 15:2 24:9 3:9 12:4 48:8", "22:1 13:2 19:10 41:5 31:1 4:5 29:8 44:6 35:8 45:8", "4:5 43:8 7:8 15:1 2:7 27:1 35:1 6:6 8:8 0:4 5:6", "45:5 33:9 19:6 12:8 48:10 2:5 1:10 25:8 38:10 26:7", "49:10 40:3 34:5 19:5 1:5 20:5 32:1 22:4 45:4 37:1", "40:1 13:1 29:7 23:2 49:8 11:8 15:9 34:1 37:10 28:5", "0:5 35:9 2:1 43:5 41:9 24:6 16:1 36:10 14:8 25:7", "46:10 35:10 2:4 37:9 7:4 38:1 0:7 4:6 13:9 22:8", "35:5 25:6 44:1 29:9 31:2 40:10 16:9 0:6 5:8 43:1", "48:4 47:10 26:2 19:8 46:1 43:2 41:7 30:2 10:10 6:1", "16:3 5:9 9:8 24:3 22:6 36:1 34:4 35:8 47:4 43:5", "44:7 3:8 30:6 15:8 31:3 36:3 27:7 11:2 40:1 38:2"};
    vector<string> rulesb = {"32:9 20:1 10:7 1:1 27:10 4:10 22:10 8:5 48:10 24:4", "43:1 37:2 29:8 15:2 17:5 28:6 23:2 47:1 44:2 19:7", "10:3 14:3 21:2 24:8 34:2 16:10 47:7 45:7 3:2 17:6", "23:1 48:6 28:5 30:1 6:2 44:7 21:3 22:8 7:10 13:9", "16:1 4:8 42:8 38:7 11:10 15:4 26:4 27:6 40:4 17:6", "12:6 10:10 8:10 2:7 5:6 11:7 43:1 45:10 46:3 13:1", "27:1 38:10 17:1 16:1 49:1 14:6 18:9 9:5 23:8 43:8", "15:8 40:7 25:1 35:8 18:10 2:10 38:7 24:2 17:6 14:1", "28:10 17:5 21:8 49:6 38:2 30:8 44:1 12:6 27:2 7:3", "38:6 1:6 44:1 8:6 20:2 10:9 46:3 47:10 9:7 33:7", "0:8 27:1 26:2 29:1 28:10 18:1 39:1 33:8 22:1 10:2", "45:1 8:1 26:7 48:6 16:3 10:4 21:8 0:2 49:1 2:2 7:8", "22:10 19:1 48:5 8:3 39:3 43:7 47:3 18:4 30:1 46:4", "8:6 14:5 9:8 1:6 37:6 41:9 2:3 17:1 5:7 3:6 34:2", "14:5 6:7 34:1 22:4 13:6 35:3 32:9 42:3 26:4 20:5", "2:3 9:6 40:2 3:3 25:9 38:5 13:10 20:6 48:10 7:2", "45:8 0:6 19:1 40:9 7:10 2:6 17:2 43:5 31:3 29:6", "33:6 43:10 48:4 0:8 39:9 24:1 5:4 9:10 29:3 32:6", "33:2 46:8 26:6 38:2 7:1 15:4 27:5 29:4 4:4 39:8", "18:7 9:6 23:1 22:9 45:1 37:8 36:1 26:3 24:3 42:9", "11:6 24:7 29:4 17:8 15:9 47:2 21:7 18:8 36:3 13:3", "38:1 9:6 31:1 1:7 33:1 45:3 8:7 21:4 44:3 10:3 3:8", "34:4 19:9 31:5 33:8 23:6 25:1 45:9 13:4 29:6 39:3", "6:5 22:4 36:8 47:4 11:5 46:3 44:9 15:4 48:1 24:8", "0:2 18:7 4:4 28:5 38:2 47:4 20:9 7:10 46:8 19:7", "3:9 10:5 12:3 15:8 28:4 33:8 24:2 23:6 45:3 22:9", "14:8 32:9 46:3 2:5 36:2 11:5 47:2 18:6 21:9 19:7", "21:2 20:5 8:4 32:2 24:6 5:2 37:10 30:6 31:2 13:8", "14:5 44:5 16:5 3:6 48:8 42:3 10:2 12:2 19:1 39:8", "32:3 30:5 6:6 16:5 17:8 0:9 25:8 29:2 42:1 10:7", "46:4 0:8 10:6 22:9 7:9 11:9 44:4 27:2 39:10 43:10", "17:2 42:5 24:7 0:6 27:4 15:7 47:7 31:1 30:10 4:4", "45:8 16:4 15:6 10:7 44:4 9:4 6:7 21:10 12:2 25:7", "17:8 13:5 24:1 5:2 38:4 44:3 10:4 46:3 11:6 7:1", "12:6 32:2 23:10 46:2 35:2 47:8 29:7 43:8 22:6 14:8", "35:4 34:6 11:9 13:1 23:5 18:10 1:6 26:6 3:5 28:2", "9:8 33:3 34:9 12:8 43:4 38:3 11:9 18:8 8:1 28:2", "29:9 1:4 25:1 36:9 26:10 10:6 21:10 11:8 4:5 22:6", "37:10 18:3 46:5 23:4 25:10 48:7 16:7 2:4 22:2 0:8", "39:5 33:8 45:7 49:2 13:5 44:1 22:10 15:3 28:2 12:3", "41:9 28:10 31:6 40:6 42:2 36:8 24:5 13:2 17:1 4:10", "13:7 29:1 23:1 2:9 48:9 16:1 27:8 7:3 8:3 45:7 4:9", "42:5 33:2 25:4 14:6 9:10 41:5 35:8 32:1 11:2 28:5", "21:3 25:8 24:9 3:4 16:4 15:10 8:8 34:5 22:6 45:9", "49:5 22:2 28:6 1:3 17:10 10:4 42:5 26:1 46:9 8:7", "1:7 38:1 14:6 35:4 36:6 47:4 43:10 44:9 18:8 27:1", "3:1 49:7 7:3 18:5 0:4 34:7 37:7 33:8 13:2 2:7 21:3", "17:7 13:3 42:2 36:4 40:2 26:6 46:1 39:3 43:4 12:7", "38:3 44:2 31:4 5:4 34:3 42:1 46:1 17:4 24:1 33:9", "31:1 49:4 16:5 19:2 40:3 2:1 24:8 0:7 45:6 3:1 4:8"};
    vector<string> rulesc = {"34:4 14:2 38:1 2:7 35:3 20:8 10:5 17:1 26:4 31:4", "39:6 43:6 36:2 49:7 15:7 21:10 12:10 44:3 42:8 8:5", "38:5 19:8 36:9 43:4 33:9 6:9 23:10 1:8 30:7 32:10", "33:3 48:6 11:6 15:8 39:4 9:4 20:10 14:2 6:4 28:10", "20:8 38:6 49:3 4:1 7:4 40:2 1:1 46:7 27:5 14:1 6:7", "13:9 3:1 39:3 10:10 17:8 9:1 41:9 31:1 35:5 0:6", "1:9 8:5 31:4 24:10 43:3 3:3 33:10 13:4 29:9 23:2", "30:4 34:9 14:10 0:8 21:10 10:4 45:4 7:6 1:3 43:8", "18:5 48:8 29:10 28:1 44:5 1:3 49:6 31:10 40:6 46:9", "33:3 19:2 1:9 3:5 41:4 0:8 25:6 22:9 23:9 38:4 6:5", "7:2 16:2 21:5 24:8 42:6 10:4 23:5 11:10 1:10 37:9", "44:2 31:3 42:4 14:8 18:3 29:3 22:4 40:8 10:5 34:5", "24:3 48:6 46:7 42:5 13:4 20:9 40:10 27:5 0:5 5:6", "31:7 32:8 17:7 30:1 5:8 47:2 14:5 35:6 12:5 44:3", "35:6 18:10 9:3 29:3 8:9 40:6 17:9 33:8 26:5 13:5", "21:4 11:5 2:1 25:7 7:4 46:4 32:2 34:9 18:5 14:1", "44:10 0:1 36:1 48:10 49:4 3:3 23:9 43:9 22:2 2:2", "3:3 18:4 21:5 30:6 0:7 7:10 41:2 8:5 2:10 43:4 4:7", "42:5 36:9 43:3 38:2 17:1 34:3 29:4 20:6 25:3 44:4", "18:1 31:2 45:4 4:2 26:10 2:9 1:4 23:9 44:6 6:9 8:3", "37:6 10:2 12:7 9:7 25:10 23:8 42:10 17:5 30:7 16:1", "49:2 37:8 42:10 14:9 15:10 9:2 4:8 18:2 10:2 36:6", "12:2 35:3 27:1 17:7 29:2 2:5 14:4 4:8 22:3 5:7 0:3", "44:4 31:1 19:9 10:8 24:5 1:3 34:3 46:8 47:8 0:2", "13:7 32:8 23:8 37:5 27:9 29:1 15:8 11:6 42:1 46:3", "32:2 36:6 19:9 4:5 14:7 39:5 11:10 23:3 7:4 47:8", "9:4 34:5 39:10 12:2 17:10 2:6 32:10 18:9 3:3 38:3", "29:3 42:6 2:4 43:1 9:5 16:4 18:10 46:2 48:6 37:3", "45:4 29:6 34:10 1:6 23:1 8:6 0:5 48:2 37:3 38:4", "40:8 14:6 38:8 43:9 35:10 31:1 44:6 1:4 20:4 24:8", "0:7 25:2 14:4 4:5 43:3 17:7 2:3 48:5 15:1 12:7 1:7", "41:8 16:6 33:1 7:7 38:8 10:6 18:2 27:10 8:4 43:1", "49:9 4:8 15:2 37:5 0:2 7:3 45:10 32:10 19:3 35:10", "15:6 5:9 17:2 12:2 44:6 33:5 22:1 28:7 14:2 38:4", "33:8 4:2 45:10 31:7 23:8 21:4 20:7 34:7 17:9 18:6", "20:7 4:7 13:6 29:2 37:2 34:8 23:3 19:4 42:10 32:9", "20:7 34:3 43:6 32:2 31:5 26:6 28:6 45:5 23:7 29:1", "49:8 20:10 17:8 11:8 6:4 19:2 41:1 28:10 32:1 47:7", "35:10 18:5 37:6 25:7 47:2 46:1 49:7 32:3 21:7 14:5", "32:9 11:4 17:8 7:7 27:6 30:1 2:8 19:4 25:7 40:4", "31:4 25:2 19:5 10:5 8:1 11:6 48:6 16:2 35:4 38:7", "33:10 47:5 10:7 4:1 18:2 25:5 19:6 34:8 3:7 15:3", "20:3 24:1 29:10 4:4 14:5 25:7 36:2 34:10 35:3 32:4", "24:5 5:6 19:4 48:3 28:6 3:2 22:4 4:1 2:10 49:2 8:6", "1:7 26:2 43:6 38:10 24:8 3:6 8:5 32:9 47:5 5:8 7:8", "24:3 7:8 26:1 0:10 47:1 3:8 20:5 1:4 12:6 23:2 4:8", "3:4 6:8 30:10 37:8 33:4 39:6 22:9 0:8 26:8 25:10", "48:8 38:5 28:9 42:2 14:10 16:7 15:4 27:1 34:1 7:1", "15:7 5:8 6:1 41:3 38:8 44:2 20:6 49:2 14:3 39:6", "28:5 17:5 49:10 6:5 45:4 40:8 19:5 15:3 4:5 31:9"};
    int finalState = 38;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0025;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> rulesa = {"32:1 46:1 30:1 6:8 18:1 24:3 41:5 49:6 27:7 9:1", "32:8 13:10 40:8 20:8 1:4 12:6 43:6 46:9 25:4 42:7", "0:1 31:6 2:4 40:2 46:10 1:7 14:8 15:6 13:9 21:3", "47:3 7:5 12:4 18:7 6:6 2:8 40:10 39:1 21:4 22:4", "27:6 4:9 10:8 15:6 28:9 37:7 11:6 40:6 5:4 8:8 0:7", "19:4 29:7 8:4 15:2 12:2 48:5 45:6 6:5 33:2 17:2", "14:9 22:9 21:9 29:9 40:7 3:2 46:2 9:9 27:4 38:1", "38:3 14:4 15:6 37:4 6:1 39:1 19:7 10:5 16:10 45:6", "31:9 0:6 35:8 49:3 30:1 18:8 47:8 15:3 26:5 41:1", "8:7 14:5 40:2 44:4 2:7 20:4 37:5 12:1 5:2 19:2 3:1", "22:4 37:2 40:3 27:10 15:1 28:9 16:7 12:8 17:4 35:7", "38:5 43:7 23:2 47:5 1:4 31:1 46:1 15:10 5:2 28:10", "22:8 38:5 19:6 11:4 34:4 44:5 42:5 7:7 27:6 43:7", "24:8 30:8 41:8 15:8 43:4 22:10 49:1 27:8 16:10 1:4", "25:3 3:7 33:4 28:7 23:6 5:8 44:2 14:10 19:7 38:3", "16:2 5:3 7:10 38:6 36:1 18:5 25:8 46:7 14:9 26:6", "47:10 12:1 2:2 48:8 27:4 5:4 35:10 30:7 31:6 18:4", "35:3 36:2 27:1 1:3 4:5 3:9 11:6 32:1 26:10 13:4", "6:10 26:6 35:8 44:9 13:10 8:6 38:2 41:3 17:8 16:5", "20:5 1:7 41:1 39:10 21:1 42:6 36:1 47:7 46:7 15:8", "42:4 35:6 36:3 11:3 34:10 44:9 0:3 37:8 24:6 40:3", "28:6 17:6 22:10 15:3 12:8 27:1 30:6 19:10 0:7 47:2", "5:4 22:8 15:1 24:8 0:1 7:9 12:4 33:2 29:4 32:1 4:2", "11:4 48:7 29:3 3:10 17:1 21:9 47:4 35:6 27:3 26:10", "27:2 25:3 38:7 37:3 29:8 21:10 5:2 36:5 10:2 15:7", "49:10 24:5 13:4 38:5 19:3 41:8 17:7 4:8 26:8 18:10", "19:1 12:6 9:7 41:6 27:1 24:3 32:2 11:6 28:5 1:10", "11:7 35:5 21:5 24:9 45:8 6:1 25:6 39:2 16:5 7:4", "1:2 8:6 5:4 36:9 14:4 43:9 3:4 27:9 10:4 41:9 42:4", "13:9 35:4 14:9 12:1 33:4 11:7 43:6 45:5 10:8 22:7", "4:7 32:5 26:8 13:3 34:7 27:3 33:3 19:10 21:7 0:2", "15:6 29:4 19:5 32:2 14:1 3:4 48:3 41:2 20:4 13:2", "9:3 35:2 45:4 48:6 14:9 1:7 18:5 26:10 37:7 32:5", "13:4 14:10 2:8 47:7 16:7 36:2 30:6 32:6 42:10 48:7", "1:6 29:8 16:2 7:5 22:5 20:8 2:7 11:8 32:8 3:6 12:5", "13:3 2:3 32:6 9:5 30:4 31:7 29:10 48:2 0:3 25:9", "19:3 1:4 11:1 6:2 30:4 31:2 5:2 36:6 3:4 26:9 18:8", "5:9 48:1 8:6 41:1 38:7 11:7 24:10 17:7 36:8 20:6", "13:6 4:4 27:1 10:1 39:1 15:2 24:9 3:9 12:4 48:8", "22:1 13:2 19:10 41:5 31:1 4:5 29:8 44:6 35:8 45:8", "4:5 43:8 7:8 15:1 2:7 27:1 35:1 6:6 8:8 0:4 5:6", "45:5 33:9 19:6 12:8 48:10 2:5 1:10 25:8 38:10 26:7", "49:10 40:3 34:5 19:5 1:5 20:5 32:1 22:4 45:4 37:1", "40:1 13:1 29:7 23:2 49:8 11:8 15:9 34:1 37:10 28:5", "0:5 35:9 2:1 43:5 41:9 24:6 16:1 36:10 14:8 25:7", "46:10 35:10 2:4 37:9 7:4 38:1 0:7 4:6 13:9 22:8", "35:5 25:6 44:1 29:9 31:2 40:10 16:9 0:6 5:8 43:1", "48:4 47:10 26:2 19:8 46:1 43:2 41:7 30:2 10:10 6:1", "16:3 5:9 9:8 24:3 22:6 36:1 34:4 35:8 47:4 43:5", "44:7 3:8 30:6 15:8 31:3 36:3 27:7 11:2 40:1 38:2"};
    vector<string> rulesb = {"32:9 20:1 10:7 1:1 27:10 4:10 22:10 8:5 48:10 24:4", "43:1 37:2 29:8 15:2 17:5 28:6 23:2 47:1 44:2 19:7", "10:3 14:3 21:2 24:8 34:2 16:10 47:7 45:7 3:2 17:6", "23:1 48:6 28:5 30:1 6:2 44:7 21:3 22:8 7:10 13:9", "16:1 4:8 42:8 38:7 11:10 15:4 26:4 27:6 40:4 17:6", "12:6 10:10 8:10 2:7 5:6 11:7 43:1 45:10 46:3 13:1", "27:1 38:10 17:1 16:1 49:1 14:6 18:9 9:5 23:8 43:8", "15:8 40:7 25:1 35:8 18:10 2:10 38:7 24:2 17:6 14:1", "28:10 17:5 21:8 49:6 38:2 30:8 44:1 12:6 27:2 7:3", "38:6 1:6 44:1 8:6 20:2 10:9 46:3 47:10 9:7 33:7", "0:8 27:1 26:2 29:1 28:10 18:1 39:1 33:8 22:1 10:2", "45:1 8:1 26:7 48:6 16:3 10:4 21:8 0:2 49:1 2:2 7:8", "22:10 19:1 48:5 8:3 39:3 43:7 47:3 18:4 30:1 46:4", "8:6 14:5 9:8 1:6 37:6 41:9 2:3 17:1 5:7 3:6 34:2", "14:5 6:7 34:1 22:4 13:6 35:3 32:9 42:3 26:4 20:5", "2:3 9:6 40:2 3:3 25:9 38:5 13:10 20:6 48:10 7:2", "45:8 0:6 19:1 40:9 7:10 2:6 17:2 43:5 31:3 29:6", "33:6 43:10 48:4 0:8 39:9 24:1 5:4 9:10 29:3 32:6", "33:2 46:8 26:6 38:2 7:1 15:4 27:5 29:4 4:4 39:8", "18:7 9:6 23:1 22:9 45:1 37:8 36:1 26:3 24:3 42:9", "11:6 24:7 29:4 17:8 15:9 47:2 21:7 18:8 36:3 13:3", "38:1 9:6 31:1 1:7 33:1 45:3 8:7 21:4 44:3 10:3 3:8", "34:4 19:9 31:5 33:8 23:6 25:1 45:9 13:4 29:6 39:3", "6:5 22:4 36:8 47:4 11:5 46:3 44:9 15:4 48:1 24:8", "0:2 18:7 4:4 28:5 38:2 47:4 20:9 7:10 46:8 19:7", "3:9 10:5 12:3 15:8 28:4 33:8 24:2 23:6 45:3 22:9", "14:8 32:9 46:3 2:5 36:2 11:5 47:2 18:6 21:9 19:7", "21:2 20:5 8:4 32:2 24:6 5:2 37:10 30:6 31:2 13:8", "14:5 44:5 16:5 3:6 48:8 42:3 10:2 12:2 19:1 39:8", "32:3 30:5 6:6 16:5 17:8 0:9 25:8 29:2 42:1 10:7", "46:4 0:8 10:6 22:9 7:9 11:9 44:4 27:2 39:10 43:10", "17:2 42:5 24:7 0:6 27:4 15:7 47:7 31:1 30:10 4:4", "45:8 16:4 15:6 10:7 44:4 9:4 6:7 21:10 12:2 25:7", "17:8 13:5 24:1 5:2 38:4 44:3 10:4 46:3 11:6 7:1", "12:6 32:2 23:10 46:2 35:2 47:8 29:7 43:8 22:6 14:8", "35:4 34:6 11:9 13:1 23:5 18:10 1:6 26:6 3:5 28:2", "9:8 33:3 34:9 12:8 43:4 38:3 11:9 18:8 8:1 28:2", "29:9 1:4 25:1 36:9 26:10 10:6 21:10 11:8 4:5 22:6", "37:10 18:3 46:5 23:4 25:10 48:7 16:7 2:4 22:2 0:8", "39:5 33:8 45:7 49:2 13:5 44:1 22:10 15:3 28:2 12:3", "41:9 28:10 31:6 40:6 42:2 36:8 24:5 13:2 17:1 4:10", "13:7 29:1 23:1 2:9 48:9 16:1 27:8 7:3 8:3 45:7 4:9", "42:5 33:2 25:4 14:6 9:10 41:5 35:8 32:1 11:2 28:5", "21:3 25:8 24:9 3:4 16:4 15:10 8:8 34:5 22:6 45:9", "49:5 22:2 28:6 1:3 17:10 10:4 42:5 26:1 46:9 8:7", "1:7 38:1 14:6 35:4 36:6 47:4 43:10 44:9 18:8 27:1", "3:1 49:7 7:3 18:5 0:4 34:7 37:7 33:8 13:2 2:7 21:3", "17:7 13:3 42:2 36:4 40:2 26:6 46:1 39:3 43:4 12:7", "38:3 44:2 31:4 5:4 34:3 42:1 46:1 17:4 24:1 33:9", "31:1 49:4 16:5 19:2 40:3 2:1 24:8 0:7 45:6 3:1 4:8"};
    vector<string> rulesc = {"34:4 14:2 38:1 2:7 35:3 20:8 10:5 17:1 26:4 31:4", "39:6 43:6 36:2 49:7 15:7 21:10 12:10 44:3 42:8 8:5", "38:5 19:8 36:9 43:4 33:9 6:9 23:10 1:8 30:7 32:10", "33:3 48:6 11:6 15:8 39:4 9:4 20:10 14:2 6:4 28:10", "20:8 38:6 49:3 4:1 7:4 40:2 1:1 46:7 27:5 14:1 6:7", "13:9 3:1 39:3 10:10 17:8 9:1 41:9 31:1 35:5 0:6", "1:9 8:5 31:4 24:10 43:3 3:3 33:10 13:4 29:9 23:2", "30:4 34:9 14:10 0:8 21:10 10:4 45:4 7:6 1:3 43:8", "18:5 48:8 29:10 28:1 44:5 1:3 49:6 31:10 40:6 46:9", "33:3 19:2 1:9 3:5 41:4 0:8 25:6 22:9 23:9 38:4 6:5", "7:2 16:2 21:5 24:8 42:6 10:4 23:5 11:10 1:10 37:9", "44:2 31:3 42:4 14:8 18:3 29:3 22:4 40:8 10:5 34:5", "24:3 48:6 46:7 42:5 13:4 20:9 40:10 27:5 0:5 5:6", "31:7 32:8 17:7 30:1 5:8 47:2 14:5 35:6 12:5 44:3", "35:6 18:10 9:3 29:3 8:9 40:6 17:9 33:8 26:5 13:5", "21:4 11:5 2:1 25:7 7:4 46:4 32:2 34:9 18:5 14:1", "44:10 0:1 36:1 48:10 49:4 3:3 23:9 43:9 22:2 2:2", "3:3 18:4 21:5 30:6 0:7 7:10 41:2 8:5 2:10 43:4 4:7", "42:5 36:9 43:3 38:2 17:1 34:3 29:4 20:6 25:3 44:4", "18:1 31:2 45:4 4:2 26:10 2:9 1:4 23:9 44:6 6:9 8:3", "37:6 10:2 12:7 9:7 25:10 23:8 42:10 17:5 30:7 16:1", "49:2 37:8 42:10 14:9 15:10 9:2 4:8 18:2 10:2 36:6", "12:2 35:3 27:1 17:7 29:2 2:5 14:4 4:8 22:3 5:7 0:3", "44:4 31:1 19:9 10:8 24:5 1:3 34:3 46:8 47:8 0:2", "13:7 32:8 23:8 37:5 27:9 29:1 15:8 11:6 42:1 46:3", "32:2 36:6 19:9 4:5 14:7 39:5 11:10 23:3 7:4 47:8", "9:4 34:5 39:10 12:2 17:10 2:6 32:10 18:9 3:3 38:3", "29:3 42:6 2:4 43:1 9:5 16:4 18:10 46:2 48:6 37:3", "45:4 29:6 34:10 1:6 23:1 8:6 0:5 48:2 37:3 38:4", "40:8 14:6 38:8 43:9 35:10 31:1 44:6 1:4 20:4 24:8", "0:7 25:2 14:4 4:5 43:3 17:7 2:3 48:5 15:1 12:7 1:7", "41:8 16:6 33:1 7:7 38:8 10:6 18:2 27:10 8:4 43:1", "49:9 4:8 15:2 37:5 0:2 7:3 45:10 32:10 19:3 35:10", "15:6 5:9 17:2 12:2 44:6 33:5 22:1 28:7 14:2 38:4", "33:8 4:2 45:10 31:7 23:8 21:4 20:7 34:7 17:9 18:6", "20:7 4:7 13:6 29:2 37:2 34:8 23:3 19:4 42:10 32:9", "20:7 34:3 43:6 32:2 31:5 26:6 28:6 45:5 23:7 29:1", "49:8 20:10 17:8 11:8 6:4 19:2 41:1 28:10 32:1 47:7", "35:10 18:5 37:6 25:7 47:2 46:1 49:7 32:3 21:7 14:5", "32:9 11:4 17:8 7:7 27:6 30:1 2:8 19:4 25:7 40:4", "31:4 25:2 19:5 10:5 8:1 11:6 48:6 16:2 35:4 38:7", "33:10 47:5 10:7 4:1 18:2 25:5 19:6 34:8 3:7 15:3", "20:3 24:1 29:10 4:4 14:5 25:7 36:2 34:10 35:3 32:4", "24:5 5:6 19:4 48:3 28:6 3:2 22:4 4:1 2:10 49:2 8:6", "1:7 26:2 43:6 38:10 24:8 3:6 8:5 32:9 47:5 5:8 7:8", "24:3 7:8 26:1 0:10 47:1 3:8 20:5 1:4 12:6 23:2 4:8", "3:4 6:8 30:10 37:8 33:4 39:6 22:9 0:8 26:8 25:10", "48:8 38:5 28:9 42:2 14:10 16:7 15:4 27:1 34:1 7:1", "15:7 5:8 6:1 41:3 38:8 44:2 20:6 49:2 14:3 39:6", "28:5 17:5 49:10 6:5 45:4 40:8 19:5 15:3 4:5 31:9"};
    int finalState = 999;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6414538461538462;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> rulesa = {"31:3 0:3 39:5 37:2 29:9 33:8 34:4 46:5 40:7 9:1", "38:8 10:6 8:5 3:2 35:1 2:8 27:8 39:3 15:10 37:2", "43:8 3:6 22:9 28:6 13:8 48:5 29:4 12:3 7:2 33:5", "1:5 44:4 26:9 7:4 6:3 48:7 8:9 41:3 0:1 45:2 17:5", "3:5 29:5 38:10 37:2 43:10 34:8 44:8 35:1 8:4 28:2", "43:7 13:8 44:8 15:3 6:8 32:10 21:1 31:8 28:6 27:10", "2:7 37:8 42:1 3:10 41:4 49:4 19:9 30:5 14:2 10:7", "43:3 31:7 28:1 41:5 47:7 5:3 48:9 16:4 40:2 27:6", "26:10 12:2 36:1 17:4 13:4 3:4 38:6 29:5 44:3 15:2", "15:6 1:8 21:4 28:2 4:3 48:9 5:4 32:10 23:1 31:8", "6:2 46:8 45:6 2:3 24:4 22:5 23:5 13:8 40:7 28:9", "23:9 45:5 46:10 11:9 41:1 12:10 32:4 18:9 16:6 0:9", "49:2 37:7 24:10 28:7 17:4 22:9 45:1 19:7 9:4 26:5", "43:7 25:2 9:1 48:2 10:9 2:4 32:4 18:6 24:6 12:7", "46:4 30:8 1:1 42:4 44:3 31:1 24:10 20:6 3:3 12:9", "11:5 10:1 41:8 32:7 16:8 23:8 20:9 17:9 3:9 27:8", "13:9 22:6 19:6 8:5 41:10 34:6 40:4 36:10 18:10 1:7", "19:5 31:9 48:7 25:4 28:7 47:10 46:2 18:6 9:6 16:8", "42:7 19:5 49:8 5:3 32:5 14:8 38:2 17:7 25:7 28:6", "31:10 35:2 39:7 21:7 8:7 27:9 34:7 11:2 48:4 12:9", "48:7 47:10 45:9 32:8 18:2 39:3 40:1 3:8 33:1 13:9", "12:8 22:4 17:2 31:2 20:3 21:3 47:2 9:8 6:1 36:3", "31:5 17:9 25:7 41:8 34:3 26:3 7:2 13:6 38:1 5:10", "28:1 35:8 2:6 45:2 42:3 15:8 46:2 26:9 38:2 10:7", "18:10 0:5 40:9 47:1 39:1 3:1 4:4 10:5 11:4 31:3", "45:3 31:1 11:9 21:5 22:1 2:10 33:2 28:1 39:2 24:4", "30:5 48:4 21:7 49:4 19:4 1:2 27:2 7:6 47:7 34:9", "9:6 7:3 21:2 28:1 11:10 10:10 33:2 18:10 14:4 40:6", "33:3 18:10 28:8 37:3 7:2 3:2 47:8 32:4 4:6 34:8", "32:2 7:5 40:2 36:3 43:5 11:9 37:2 39:8 22:1 23:2", "2:5 23:9 7:5 20:3 48:9 34:7 1:7 46:6 26:8 3:2 6:9", "38:5 27:8 10:7 12:6 31:3 16:1 18:5 32:7 26:1 49:7", "29:4 33:6 49:1 3:1 40:1 5:3 31:9 8:7 44:4 30:2 6:4", "36:2 11:7 25:2 45:3 15:2 14:1 13:2 1:4 34:5 46:3", "40:8 13:8 12:10 33:7 43:2 35:2 47:3 2:9 45:5 42:2", "45:6 46:8 19:8 8:6 25:7 11:5 14:6 34:10 27:8 17:8", "4:3 46:10 47:10 7:3 17:6 30:8 33:2 34:2 31:7 43:1", "36:1 31:7 25:5 24:6 7:1 44:3 0:1 30:2 45:7 37:6", "8:10 41:2 21:8 25:7 45:8 9:6 49:8 16:3 12:8 40:10", "47:7 15:3 7:7 26:7 37:2 13:10 35:6 11:2 21:10 45:9", "17:1 14:3 16:7 40:9 33:10 43:6 46:6 15:4 13:3 10:2", "49:6 0:6 9:8 14:3 13:9 20:4 39:9 17:4 34:5 12:3", "1:8 33:6 31:3 19:8 20:8 38:7 30:10 23:10 4:10 7:7", "37:3 11:5 29:6 1:6 42:7 13:7 47:6 9:10 7:5 30:5", "1:7 49:7 30:6 34:3 8:2 7:1 19:1 5:6 45:9 23:8 18:7", "29:8 35:2 6:4 26:5 38:9 41:5 20:4 16:6 22:3 18:4", "10:8 28:8 25:2 13:2 32:8 48:3 18:7 20:4 8:1 34:9", "30:1 26:4 36:5 39:2 27:4 33:10 19:2 21:6 28:1 29:7", "42:1 34:5 41:10 35:4 29:7 28:10 15:9 1:7 21:6 32:6", "14:4 32:1 3:8 21:8 13:10 33:8 37:2 48:1 29:8 20:5"};
    vector<string> rulesb = {"11:5 9:5 5:5 31:1 48:3 1:7 47:3 36:2 33:1 43:8 6:2", "18:8 28:4 34:3 15:7 39:5 10:5 44:10 14:5 31:2 11:7", "11:2 18:4 33:8 27:2 7:9 9:7 46:1 37:7 15:7 35:6", "47:8 31:2 18:7 45:7 8:1 16:8 11:9 38:2 43:8 17:1", "0:6 38:3 35:6 42:1 19:10 28:4 11:5 46:1 49:5 34:4", "0:8 21:3 9:3 45:1 35:1 24:9 18:4 36:9 17:4 14:4", "22:5 15:8 16:8 8:4 42:6 33:3 14:2 10:3 20:4 28:9", "2:7 36:4 29:3 26:2 19:6 30:1 24:9 3:9 12:10 7:8", "6:6 11:6 0:5 36:4 17:1 34:9 47:7 22:6 18:10 48:7", "10:1 30:3 15:1 0:3 14:1 7:3 6:3 13:10 27:6 29:7", "38:5 17:3 45:10 7:10 39:6 16:5 21:9 30:7 19:9 41:6", "25:6 1:7 15:2 43:3 6:10 20:10 18:2 41:1 14:6 2:4", "9:7 16:9 31:4 13:6 39:5 47:4 36:3 8:7 15:8 2:4 0:6", "20:2 38:2 27:3 45:1 4:7 48:3 36:6 26:10 35:5 46:2", "48:7 6:6 44:5 22:9 42:8 25:4 5:4 37:9 30:10 36:8", "38:2 29:8 10:4 44:8 4:6 42:8 45:3 48:1 28:8 30:7", "20:4 17:8 31:5 38:3 29:7 32:10 48:2 24:8 9:9 41:2", "46:9 43:5 19:8 47:1 29:4 44:9 12:8 17:9 27:2 5:7", "9:10 45:8 46:10 37:10 21:6 20:10 28:7 5:8 16:7 7:3", "6:1 30:3 26:10 36:10 43:8 25:9 41:3 35:4 16:9 7:2", "26:3 35:9 4:5 8:8 12:5 16:6 40:2 13:9 33:1 7:1 2:1", "19:3 27:7 9:6 15:2 14:2 47:10 8:6 34:1 7:10 12:5", "43:9 17:9 49:2 39:9 28:7 46:7 33:10 36:8 4:3 25:10", "15:9 48:6 27:2 35:7 26:5 45:5 41:3 4:5 30:5 47:7", "0:5 4:7 24:8 13:4 28:7 7:6 11:8 39:9 23:6 5:3 10:4", "27:7 29:9 21:9 11:5 7:8 26:3 47:4 15:4 8:4 34:6", "49:1 35:1 22:5 3:4 14:8 1:9 15:8 2:5 13:4 43:4 6:2", "11:2 45:2 26:7 25:9 16:2 2:1 27:6 33:9 43:2 34:6", "12:3 33:8 30:9 14:6 42:5 31:8 4:3 29:7 45:4 18:8", "2:9 43:9 24:5 39:3 17:2 25:4 16:9 4:10 13:2 26:1", "30:7 11:4 42:2 38:9 3:8 0:10 43:1 40:6 47:4 44:8", "8:4 46:3 39:7 40:1 38:7 43:5 30:1 10:9 2:10 19:7", "21:2 33:9 35:2 3:6 24:2 2:2 5:4 38:7 10:6 20:10", "41:10 19:10 34:6 4:5 48:3 21:5 40:4 47:1 36:10 8:7", "34:2 38:1 26:2 49:5 39:5 18:1 10:2 16:5 36:9 48:6", "49:2 6:2 0:9 41:4 10:1 31:5 42:4 19:2 1:9 14:3 8:9", "11:4 6:3 10:7 47:10 20:6 45:2 46:3 12:8 33:5 5:1", "19:2 32:7 39:4 3:8 28:3 45:10 16:3 31:9 13:10 9:9", "47:8 39:7 37:10 3:6 34:6 36:6 35:9 49:1 11:9 16:4", "38:7 28:7 46:4 25:4 9:10 14:1 47:2 13:3 33:3 5:8", "2:3 44:6 12:4 1:8 3:3 23:2 26:10 27:5 39:3 29:1", "28:10 10:1 32:9 44:3 8:3 20:8 24:2 41:3 26:1 17:10", "13:4 19:5 45:6 20:6 40:3 48:10 32:3 0:10 1:6 23:7", "31:5 47:10 3:8 30:8 26:8 46:4 0:10 21:5 1:10 29:5", "16:2 45:9 9:3 6:1 48:2 25:2 0:8 5:7 34:8 13:4 49:7", "24:1 15:4 6:10 41:6 2:5 7:10 25:4 31:5 28:1 38:5", "6:2 37:3 8:1 13:5 21:1 39:10 38:10 20:3 3:7 10:7", "36:4 37:5 49:5 16:6 30:3 46:8 3:5 48:2 7:1 8:6 4:6", "13:2 39:7 8:8 40:7 19:10 32:6 35:3 36:1 26:1 30:6", "38:9 47:1 6:3 36:10 39:3 5:7 32:9 1:5 28:2 25:8"};
    vector<string> rulesc = {"19:1 39:9 11:3 0:1 49:2 20:4 8:10 12:10 26:10 34:7", "35:10 10:5 25:9 47:7 18:4 28:1 29:2 45:3 26:6 27:3", "32:1 25:6 6:5 30:7 22:2 8:4 42:7 3:10 14:3 34:6", "44:4 16:4 27:4 6:2 3:5 19:2 22:6 21:4 39:3 15:7", "12:10 4:4 13:4 28:8 7:2 22:1 18:1 6:5 0:3 41:9 3:5", "8:7 49:10 19:6 42:4 34:10 24:8 0:2 46:9 39:7 7:8", "48:1 24:2 45:8 35:10 18:3 43:8 19:7 30:2 28:7 0:6", "0:10 15:7 33:5 30:7 48:10 18:6 5:1 32:5 14:7 49:8", "31:5 0:8 19:8 1:5 12:2 33:10 48:2 45:8 9:3 44:5", "24:9 37:1 8:1 38:5 44:7 23:3 3:2 48:8 43:9 7:4 9:8", "42:4 44:6 34:9 32:8 38:10 11:6 1:6 8:6 48:5 15:9", "40:3 15:6 21:10 12:8 4:10 10:8 43:9 26:9 23:1 0:6", "26:8 3:1 0:8 32:10 44:4 11:1 41:5 46:2 7:4 15:8", "48:5 9:4 10:3 17:10 22:6 43:2 21:4 29:3 7:1 31:4", "33:6 0:9 31:5 22:9 48:10 30:2 6:2 20:3 15:5 36:3", "37:3 29:3 35:5 16:2 25:10 12:10 28:5 45:3 20:4 7:2", "44:10 32:4 37:5 0:3 33:2 39:3 35:1 27:10 31:7 45:5", "2:7 10:1 7:8 38:2 24:1 43:6 42:7 18:2 8:1 17:1 0:8", "20:4 12:9 40:9 35:2 36:5 2:9 34:4 3:8 46:2 43:6", "23:10 29:2 40:2 11:5 1:9 25:1 48:10 39:9 44:6 20:4", "27:4 40:5 24:8 20:5 8:1 34:10 43:5 1:1 48:9 0:10", "1:10 19:5 20:7 39:3 11:2 43:6 7:9 41:4 18:3 48:5", "41:2 48:5 19:1 31:3 10:10 46:10 9:10 17:10 44:6", "25:2 23:2 0:6 34:6 38:2 14:10 49:8 15:3 45:5 36:2", "27:10 28:2 25:1 31:5 7:6 19:3 4:7 17:3 34:8 23:3", "35:2 37:6 6:9 2:3 19:5 9:3 22:6 30:6 15:9 8:6 23:2", "43:4 2:10 34:2 0:4 15:7 22:5 1:10 28:6 38:8 41:8", "14:2 1:9 27:4 23:2 20:9 35:2 47:6 5:9 41:7 38:8", "28:9 9:6 11:9 37:3 16:9 38:3 46:6 27:5 41:9 35:8", "30:3 10:8 21:1 26:10 5:5 46:2 45:9 0:8 43:2 8:10", "9:10 21:7 27:6 35:2 31:2 42:10 36:1 33:2 23:8 14:5", "11:7 36:4 41:8 37:3 17:1 27:7 28:10 47:5 33:8 21:1", "39:10 42:2 23:8 14:2 20:8 48:8 37:8 38:6 26:7 16:1", "11:9 44:6 32:6 47:2 12:1 37:1 8:4 21:8 30:5 49:10", "8:6 38:3 41:2 36:8 39:4 15:8 33:4 2:8 18:8 42:8", "13:9 2:1 44:1 29:1 0:9 45:2 6:4 4:1 41:1 40:8 46:9", "40:8 28:3 24:1 19:2 10:5 9:6 37:1 8:1 47:3 3:10", "29:3 27:1 12:3 31:5 38:10 16:9 46:4 48:4 39:1 34:6", "49:10 30:1 48:10 17:5 37:4 12:9 8:7 39:6 46:8 25:6", "26:3 4:9 9:10 42:3 32:9 43:4 37:4 3:7 34:5 1:7 8:3", "45:7 18:7 39:7 43:8 15:5 7:6 25:9 33:8 13:3 44:7", "6:6 14:6 17:1 43:9 41:8 16:1 25:2 33:6 47:5 5:8", "47:2 29:1 38:5 2:7 15:10 31:7 9:10 21:8 24:9 45:8", "12:5 18:4 26:2 34:9 13:1 20:3 9:5 40:5 27:5 6:6", "33:2 31:7 23:8 27:5 39:1 38:5 8:8 7:5 45:1 24:8", "35:5 24:5 49:7 37:6 41:3 27:2 44:3 7:8 30:9 25:4", "12:10 38:5 15:2 30:7 23:6 6:4 31:1 17:5 46:4 34:1", "0:4 48:6 13:10 10:9 24:7 5:10 15:1 11:4 45:5 16:6", "28:10 38:10 11:9 14:5 49:9 10:1 23:2 35:5 5:3 21:4", "49:7 22:6 13:6 0:3 10:4 1:7 5:3 26:2 25:7 44:8 6:5"};
    int finalState = 36;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0020944296694214875;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> rulesa = {"13:1 19:3 12:16 5:14 17:8 2:7 18:19 9:6 6:2 10:7", "6:16 12:12 0:13 3:11 13:15 5:2 16:6 4:10 2:2 7:9", "12:3 3:19 11:19 10:20 5:13 17:5 1:14 16:3 2:2 9:2", "19:12 15:14 17:4 5:1 3:16 4:19 2:7 8:10 18:16 14:1", "14:2 18:13 7:20 13:6 6:3 12:17 1:8 5:2 10:1 9:16", "0:19 2:7 8:19 4:19 9:1 17:10 15:17 11:2 1:2 3:2", "8:19 13:12 16:9 10:6 2:12 3:15 19:6 0:20 14:1", "11:13 15:15 5:11 10:19 7:15 18:13 9:14", "16:13 19:14 12:18 15:3 14:17 3:13 10:11 0:7 17:4", "4:9 0:9 2:16 3:19 1:19 10:14 11:6 8:8", "19:12 11:11 1:5 7:10 17:1 3:15 5:1 0:10 4:11 15:2", "12:6 18:11 9:13 17:16 6:8 14:19 10:6 5:3 16:4 0:7", "17:9 3:19 14:12 2:8 4:20 6:8 19:4 9:16 8:3 1:1", "16:20 7:15 14:6 8:19 19:14 17:5 11:10 13:2 9:2 4:6", "17:18 4:11 19:19 16:12 10:12 15:10 14:11 6:6 8:1", "5:2 1:15 15:13 11:19 14:17 12:5 16:13 2:14 0:2", "12:13 15:12 0:18 14:14 3:8 9:13 18:13 19:5 16:1", "4:7 5:10 9:8 8:13 13:13 16:15 0:5 17:16 7:11 3:2", "6:13 15:4 11:8 18:18 13:19 1:3 9:8 16:13 2:1 19:3", "11:6 4:10 14:9 3:6 2:14 0:12 18:5 5:5 16:6 8:15"};
    vector<string> rulesb = {"13:3 11:6 2:1 16:2 15:2 0:17 12:13 18:17 8:11 9:8", "11:13 13:16 19:13 0:19 5:8 6:5 7:6 15:12 17:5 9:2", "3:7 4:6 0:8 9:6 2:14 7:5 15:12 19:20 6:7 11:14 1:1", "19:10 17:9 6:15 18:11 3:12 4:7 1:10 15:16 13:10", "15:13 11:10 9:2 0:13 7:20 17:1 1:10 4:9 18:17 6:2", "8:12 4:12 2:3 11:3 1:12 3:9 12:13 18:16 5:3 13:1", "3:8 2:20 13:14 7:7 1:17 10:13 4:15 18:2 6:3 19:1", "0:2 6:3 3:12 16:15 19:11 7:6 14:9 8:12 5:19 9:9", "16:13 5:14 9:1 18:5 19:19 1:6 11:6 4:11 6:2 10:11", "19:13 3:11 11:10 0:1 1:2 9:7 6:18 18:3 8:15 7:12", "10:2 9:7 6:17 12:14 14:13 13:4 17:10 11:10 4:18", "12:4 11:9 16:9 3:6 4:7 2:5 13:20 1:5 8:3 9:3 0:13", "16:2 12:3 10:19 17:17 8:18 7:12 19:4 13:4 2:16 3:5", "15:9 16:1 8:12 7:8 10:9 14:6 13:11 11:1 17:4 6:11", "9:12 15:2 3:13 6:17 13:19 11:10 1:2 19:4 14:11 2:9", "0:12 19:15 14:1 13:3 17:15 6:11 1:13 3:9 4:18 12:1", "12:15 16:18 5:6 11:5 0:20 15:15 4:9 10:8 9:4", "11:11 0:7 1:7 6:20 7:18 3:1 4:2 15:1 9:13 10:12", "7:3 15:16 4:10 10:5 11:15 3:8 1:20 18:15 5:3 0:5", "16:8 13:13 7:17 1:17 14:16 8:2 15:7 3:8 9:10 17:1"};
    vector<string> rulesc = {"18:8 16:16 11:19 5:2 8:15 4:17 3:10 17:9 1:3 0:1", "16:9 19:13 2:5 1:19 5:16 17:12 0:5 6:7 18:6 15:6", "0:14 13:10 9:13 3:14 14:19 1:6 11:16 15:5 10:1 7:1", "5:5 18:16 11:18 8:3 10:13 7:20 9:18 12:4 4:3", "17:16 9:1 1:15 19:5 14:18 12:18 3:12 11:1 8:4 6:10", "10:13 11:19 6:9 16:1 14:1 0:1 13:20 4:3 5:9 15:1", "19:15 16:19 4:1 9:1 0:15 14:3 1:18 11:19 2:8 18:1", "15:10 19:1 4:1 9:15 11:2 2:8 3:1 14:19 10:3 1:13", "10:2 14:17 11:18 18:16 16:16 2:13 15:1 7:2 4:11", "12:6 4:9 16:1 9:2 8:14 11:8 10:18 0:15 6:18 7:8", "8:20 9:4 1:20 15:16 19:3 13:4 16:8 4:10 12:13 18:1", "17:19 14:12 12:6 16:19 1:12 13:20 7:6 10:3 9:2", "14:12 5:4 8:8 10:2 4:6 18:5 12:4 11:1 7:19 15:2", "5:18 17:11 8:11 14:7 13:18 12:6 7:4 11:1 6:3 3:2", "5:7 1:18 8:14 17:20 4:12 13:17 10:8 19:1 11:3", "18:15 1:2 4:17 11:3 7:7 12:16 8:14 2:13 0:10 16:3", "5:13 0:5 19:15 11:8 1:7 14:1 17:2 2:3 10:20 6:10", "10:3 11:7 14:12 17:15 4:17 8:2 12:3 15:20 3:13 6:2", "0:11 5:15 8:15 3:10 16:20 17:11 6:5 19:13", "0:4 8:16 11:6 18:5 5:9 3:10 4:11 10:14 7:3 2:3 9:5"};
    int finalState = 5;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.028665341900826452;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> rulesa = {"13:1 19:3 12:16 5:14 17:8 2:7 18:19 9:6 6:2 10:7", "6:16 12:12 0:13 3:11 13:15 5:2 16:6 4:10 2:2 7:9", "12:3 3:19 11:19 10:20 5:13 17:5 1:14 16:3 2:2 9:2", "19:12 15:14 17:4 5:1 3:16 4:19 2:7 8:10 18:16 14:1", "14:2 18:13 7:20 13:6 6:3 12:17 1:8 5:2 10:1 9:16", "0:19 2:7 8:19 4:19 9:1 17:10 15:17 11:2 1:2 3:2", "8:19 13:12 16:9 10:6 2:12 3:15 19:6 0:20 14:1", "11:13 15:15 5:11 10:19 7:15 18:13 9:14", "16:13 19:14 12:18 15:3 14:17 3:13 10:11 0:7 17:4", "4:9 0:9 2:16 3:19 1:19 10:14 11:6 8:8", "19:12 11:11 1:5 7:10 17:1 3:15 5:1 0:10 4:11 15:2", "12:6 18:11 9:13 17:16 6:8 14:19 10:6 5:3 16:4 0:7", "17:9 3:19 14:12 2:8 4:20 6:8 19:4 9:16 8:3 1:1", "16:20 7:15 14:6 8:19 19:14 17:5 11:10 13:2 9:2 4:6", "17:18 4:11 19:19 16:12 10:12 15:10 14:11 6:6 8:1", "5:2 1:15 15:13 11:19 14:17 12:5 16:13 2:14 0:2", "12:13 15:12 0:18 14:14 3:8 9:13 18:13 19:5 16:1", "4:7 5:10 9:8 8:13 13:13 16:15 0:5 17:16 7:11 3:2", "6:13 15:4 11:8 18:18 13:19 1:3 9:8 16:13 2:1 19:3", "11:6 4:10 14:9 3:6 2:14 0:12 18:5 5:5 16:6 8:15"};
    vector<string> rulesb = {"13:3 11:6 2:1 16:2 15:2 0:17 12:13 18:17 8:11 9:8", "11:13 13:16 19:13 0:19 5:8 6:5 7:6 15:12 17:5 9:2", "3:7 4:6 0:8 9:6 2:14 7:5 15:12 19:20 6:7 11:14 1:1", "19:10 17:9 6:15 18:11 3:12 4:7 1:10 15:16 13:10", "15:13 11:10 9:2 0:13 7:20 17:1 1:10 4:9 18:17 6:2", "8:12 4:12 2:3 11:3 1:12 3:9 12:13 18:16 5:3 13:1", "3:8 2:20 13:14 7:7 1:17 10:13 4:15 18:2 6:3 19:1", "0:2 6:3 3:12 16:15 19:11 7:6 14:9 8:12 5:19 9:9", "16:13 5:14 9:1 18:5 19:19 1:6 11:6 4:11 6:2 10:11", "19:13 3:11 11:10 0:1 1:2 9:7 6:18 18:3 8:15 7:12", "10:2 9:7 6:17 12:14 14:13 13:4 17:10 11:10 4:18", "12:4 11:9 16:9 3:6 4:7 2:5 13:20 1:5 8:3 9:3 0:13", "16:2 12:3 10:19 17:17 8:18 7:12 19:4 13:4 2:16 3:5", "15:9 16:1 8:12 7:8 10:9 14:6 13:11 11:1 17:4 6:11", "9:12 15:2 3:13 6:17 13:19 11:10 1:2 19:4 14:11 2:9", "0:12 19:15 14:1 13:3 17:15 6:11 1:13 3:9 4:18 12:1", "12:15 16:18 5:6 11:5 0:20 15:15 4:9 10:8 9:4", "11:11 0:7 1:7 6:20 7:18 3:1 4:2 15:1 9:13 10:12", "7:3 15:16 4:10 10:5 11:15 3:8 1:20 18:15 5:3 0:5", "16:8 13:13 7:17 1:17 14:16 8:2 15:7 3:8 9:10 17:1"};
    vector<string> rulesc = {"18:8 16:16 11:19 5:2 8:15 4:17 3:10 17:9 1:3 0:1", "16:9 19:13 2:5 1:19 5:16 17:12 0:5 6:7 18:6 15:6", "0:14 13:10 9:13 3:14 14:19 1:6 11:16 15:5 10:1 7:1", "5:5 18:16 11:18 8:3 10:13 7:20 9:18 12:4 4:3", "17:16 9:1 1:15 19:5 14:18 12:18 3:12 11:1 8:4 6:10", "10:13 11:19 6:9 16:1 14:1 0:1 13:20 4:3 5:9 15:1", "19:15 16:19 4:1 9:1 0:15 14:3 1:18 11:19 2:8 18:1", "15:10 19:1 4:1 9:15 11:2 2:8 3:1 14:19 10:3 1:13", "10:2 14:17 11:18 18:16 16:16 2:13 15:1 7:2 4:11", "12:6 4:9 16:1 9:2 8:14 11:8 10:18 0:15 6:18 7:8", "8:20 9:4 1:20 15:16 19:3 13:4 16:8 4:10 12:13 18:1", "17:19 14:12 12:6 16:19 1:12 13:20 7:6 10:3 9:2", "14:12 5:4 8:8 10:2 4:6 18:5 12:4 11:1 7:19 15:2", "5:18 17:11 8:11 14:7 13:18 12:6 7:4 11:1 6:3 3:2", "5:7 1:18 8:14 17:20 4:12 13:17 10:8 19:1 11:3", "18:15 1:2 4:17 11:3 7:7 12:16 8:14 2:13 0:10 16:3", "5:13 0:5 19:15 11:8 1:7 14:1 17:2 2:3 10:20 6:10", "10:3 11:7 14:12 17:15 4:17 8:2 12:3 15:20 3:13 6:2", "0:11 5:15 8:15 3:10 16:20 17:11 6:5 19:13", "0:4 8:16 11:6 18:5 5:9 3:10 4:11 10:14 7:3 2:3 9:5"};
    int finalState = 999;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.2066821;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> rulesa = {"11:14 13:2 10:2 4:19 3:10 19:7 16:11 14:1 15:12", "15:11 19:15 18:3 2:5 1:20 13:5 8:3 0:3 14:16 16:18", "17:17 0:12 2:11 13:8 7:5 8:4 15:13 3:17 4:13", "8:18 11:2 18:14 4:17 17:3 12:17 16:13 9:2 15:10", "1:3 13:9 17:7 11:11 7:15 2:15 6:11 8:2 19:6 15:15", "15:11 19:16 9:2 1:18 5:18 6:12 16:7 2:13 10:2 17:1", "11:11 4:2 19:6 8:16 18:11 2:11 3:7 17:10 14:5 5:1", "16:4 6:18 5:18 1:7 11:5 4:5 7:17 2:7 10:9 13:8 0:2", "11:13 2:20 5:18 0:8 15:13 12:10 3:18", "14:9 15:3 16:13 0:14 19:16 2:7 6:10 1:15 17:7 11:3", "2:13 7:19 11:2 1:14 17:13 5:3 6:8 4:14 8:7 3:5 0:1", "4:9 11:12 15:3 0:2 17:16 18:14 5:8 8:11 12:17 10:2", "4:12 3:1 7:17 19:10 12:17 10:7 6:3 9:2 15:2 14:10", "3:19 1:18 4:9 11:11 5:18 2:14 7:9 13:1 14:1", "6:9 3:1 1:7 11:1 10:13 7:18 12:14 18:3 16:7 4:2", "11:12 18:19 9:20 10:4 14:3 7:4 6:3 0:6 19:7 8:6", "17:11 11:17 12:2 6:4 16:3 10:16 0:5 19:12 9:1 3:7", "0:10 10:6 11:8 18:7 13:11 6:9 2:18 1:12 4:14 19:4", "19:16 0:2 2:5 12:7 13:12 17:14 1:11 8:5 10:17 11:8", "19:7 15:18 16:12 5:2 0:10 3:2 12:9 6:3 8:14 18:17"};
    vector<string> rulesb = {"13:8 0:19 8:2 10:6 17:18 6:18 5:18 3:3 16:1 12:1", "9:13 8:6 18:14 15:5 13:15 0:11 2:7 16:16 11:6 5:3", "13:4 7:3 12:19 9:16 16:16 2:10 19:11 14:18 17:2", "14:15 13:15 9:20 10:17 4:17 0:3 2:2 15:10 7:1", "2:13 6:16 3:17 7:11 4:19 10:4 16:2 19:14 9:4", "15:8 12:3 18:4 11:3 6:8 13:8 1:3 14:16 19:6 0:18", "16:7 4:2 18:20 10:18 1:4 8:6 2:10 19:11 5:1 6:12", "10:13 18:2 5:18 4:5 13:12 16:15 15:9 11:10 0:13", "3:4 6:7 18:20 9:11 12:15 10:19 13:12 2:9 16:2 1:1", "13:2 3:10 1:2 14:16 0:7 9:11 17:17 15:4 2:5 16:9", "18:20 0:15 2:12 19:8 16:8 4:13 13:6 10:16 3:1 17:1", "11:12 10:11 8:15 17:7 5:12 2:17 0:1 7:1 19:15 15:6", "11:2 16:3 17:7 0:16 8:5 6:15 3:20 13:8 15:6 4:7", "16:1 4:2 5:4 15:11 12:19 14:1 6:20 2:13 1:17 7:10", "5:18 11:19 1:1 12:10 2:18 10:3 19:19 8:5 3:3 16:2", "5:15 3:7 0:15 6:19 18:9 14:13 19:14 15:7 11:1", "14:17 12:18 8:10 4:20 16:6 17:2 7:16 15:6 13:3 0:2", "8:3 7:8 11:2 3:14 13:7 18:10 4:2 10:5 17:17 19:9", "10:2 6:13 0:5 5:4 12:16 11:7 8:18 3:15 1:9 14:4", "3:12 13:8 1:18 2:16 17:19 15:5 11:1 6:20 5:1"};
    vector<string> rulesc = {"8:14 0:11 9:15 7:1 12:5 18:18 6:9 3:13 14:9 2:2", "6:20 2:20 12:9 1:7 17:3 7:12 8:1 10:14 16:7 4:6", "19:9 18:15 13:16 9:10 8:18 12:16 7:8 14:8", "1:2 13:9 0:16 11:13 8:11 10:4 19:11 2:3 9:16 17:13", "3:6 13:10 15:7 8:16 4:1 10:4 19:4 2:5 14:13 17:20", "6:19 13:14 11:2 17:8 0:5 3:3 16:17 14:12 19:8 9:8", "13:9 18:2 8:5 16:3 4:5 19:11 2:6 3:18 7:18 12:4", "5:19 9:10 3:6 14:18 18:8 19:16 0:1 16:9 1:5 6:6", "10:14 6:5 11:4 16:1 12:16 3:11 9:3 13:17 17:17 1:9", "9:14 18:5 19:20 14:8 5:10 15:2 11:7 10:2 2:10 17:5", "0:3 15:5 10:11 5:12 4:5 17:3 16:17 1:20 9:18 19:3", "4:2 2:15 15:19 3:6 5:9 17:12 11:8 16:2 0:10 9:13", "14:7 18:3 11:20 9:14 0:13 16:19 19:2 15:1 7:19 5:1", "16:16 14:3 2:11 17:17 9:19 18:19 13:15", "12:10 9:7 5:2 18:18 17:2 15:4 2:4 7:20 10:9 8:19", "10:17 15:8 2:2 3:19 11:5 17:17 19:7 7:20 1:3 18:1", "14:13 8:9 9:3 2:12 19:7 5:9 6:11 10:12 7:14 13:3", "13:18 4:17 15:13 12:13 3:8 14:1 2:4 18:10 9:2 8:13", "7:19 19:15 13:18 1:9 16:17 4:19 18:2 10:1", "15:14 8:16 19:13 2:11 3:8 16:14 17:13 14:4 10:4"};
    int finalState = 7;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.033745624999999994;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> rulesa = {"11:14 13:2 10:2 4:19 3:10 19:7 16:11 14:1 15:12", "15:11 19:15 18:3 2:5 1:20 13:5 8:3 0:3 14:16 16:18", "17:17 0:12 2:11 13:8 7:5 8:4 15:13 3:17 4:13", "8:18 11:2 18:14 4:17 17:3 12:17 16:13 9:2 15:10", "1:3 13:9 17:7 11:11 7:15 2:15 6:11 8:2 19:6 15:15", "15:11 19:16 9:2 1:18 5:18 6:12 16:7 2:13 10:2 17:1", "11:11 4:2 19:6 8:16 18:11 2:11 3:7 17:10 14:5 5:1", "16:4 6:18 5:18 1:7 11:5 4:5 7:17 2:7 10:9 13:8 0:2", "11:13 2:20 5:18 0:8 15:13 12:10 3:18", "14:9 15:3 16:13 0:14 19:16 2:7 6:10 1:15 17:7 11:3", "2:13 7:19 11:2 1:14 17:13 5:3 6:8 4:14 8:7 3:5 0:1", "4:9 11:12 15:3 0:2 17:16 18:14 5:8 8:11 12:17 10:2", "4:12 3:1 7:17 19:10 12:17 10:7 6:3 9:2 15:2 14:10", "3:19 1:18 4:9 11:11 5:18 2:14 7:9 13:1 14:1", "6:9 3:1 1:7 11:1 10:13 7:18 12:14 18:3 16:7 4:2", "11:12 18:19 9:20 10:4 14:3 7:4 6:3 0:6 19:7 8:6", "17:11 11:17 12:2 6:4 16:3 10:16 0:5 19:12 9:1 3:7", "0:10 10:6 11:8 18:7 13:11 6:9 2:18 1:12 4:14 19:4", "19:16 0:2 2:5 12:7 13:12 17:14 1:11 8:5 10:17 11:8", "19:7 15:18 16:12 5:2 0:10 3:2 12:9 6:3 8:14 18:17"};
    vector<string> rulesb = {"13:8 0:19 8:2 10:6 17:18 6:18 5:18 3:3 16:1 12:1", "9:13 8:6 18:14 15:5 13:15 0:11 2:7 16:16 11:6 5:3", "13:4 7:3 12:19 9:16 16:16 2:10 19:11 14:18 17:2", "14:15 13:15 9:20 10:17 4:17 0:3 2:2 15:10 7:1", "2:13 6:16 3:17 7:11 4:19 10:4 16:2 19:14 9:4", "15:8 12:3 18:4 11:3 6:8 13:8 1:3 14:16 19:6 0:18", "16:7 4:2 18:20 10:18 1:4 8:6 2:10 19:11 5:1 6:12", "10:13 18:2 5:18 4:5 13:12 16:15 15:9 11:10 0:13", "3:4 6:7 18:20 9:11 12:15 10:19 13:12 2:9 16:2 1:1", "13:2 3:10 1:2 14:16 0:7 9:11 17:17 15:4 2:5 16:9", "18:20 0:15 2:12 19:8 16:8 4:13 13:6 10:16 3:1 17:1", "11:12 10:11 8:15 17:7 5:12 2:17 0:1 7:1 19:15 15:6", "11:2 16:3 17:7 0:16 8:5 6:15 3:20 13:8 15:6 4:7", "16:1 4:2 5:4 15:11 12:19 14:1 6:20 2:13 1:17 7:10", "5:18 11:19 1:1 12:10 2:18 10:3 19:19 8:5 3:3 16:2", "5:15 3:7 0:15 6:19 18:9 14:13 19:14 15:7 11:1", "14:17 12:18 8:10 4:20 16:6 17:2 7:16 15:6 13:3 0:2", "8:3 7:8 11:2 3:14 13:7 18:10 4:2 10:5 17:17 19:9", "10:2 6:13 0:5 5:4 12:16 11:7 8:18 3:15 1:9 14:4", "3:12 13:8 1:18 2:16 17:19 15:5 11:1 6:20 5:1"};
    vector<string> rulesc = {"8:14 0:11 9:15 7:1 12:5 18:18 6:9 3:13 14:9 2:2", "6:20 2:20 12:9 1:7 17:3 7:12 8:1 10:14 16:7 4:6", "19:9 18:15 13:16 9:10 8:18 12:16 7:8 14:8", "1:2 13:9 0:16 11:13 8:11 10:4 19:11 2:3 9:16 17:13", "3:6 13:10 15:7 8:16 4:1 10:4 19:4 2:5 14:13 17:20", "6:19 13:14 11:2 17:8 0:5 3:3 16:17 14:12 19:8 9:8", "13:9 18:2 8:5 16:3 4:5 19:11 2:6 3:18 7:18 12:4", "5:19 9:10 3:6 14:18 18:8 19:16 0:1 16:9 1:5 6:6", "10:14 6:5 11:4 16:1 12:16 3:11 9:3 13:17 17:17 1:9", "9:14 18:5 19:20 14:8 5:10 15:2 11:7 10:2 2:10 17:5", "0:3 15:5 10:11 5:12 4:5 17:3 16:17 1:20 9:18 19:3", "4:2 2:15 15:19 3:6 5:9 17:12 11:8 16:2 0:10 9:13", "14:7 18:3 11:20 9:14 0:13 16:19 19:2 15:1 7:19 5:1", "16:16 14:3 2:11 17:17 9:19 18:19 13:15", "12:10 9:7 5:2 18:18 17:2 15:4 2:4 7:20 10:9 8:19", "10:17 15:8 2:2 3:19 11:5 17:17 19:7 7:20 1:3 18:1", "14:13 8:9 9:3 2:12 19:7 5:9 6:11 10:12 7:14 13:3", "13:18 4:17 15:13 12:13 3:8 14:1 2:4 18:10 9:2 8:13", "7:19 19:15 13:18 1:9 16:17 4:19 18:2 10:1", "15:14 8:16 19:13 2:11 3:8 16:14 17:13 14:4 10:4"};
    int finalState = 999;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0775;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> rulesa = {"9:17 1:11 19:13 12:18 14:20 8:9 16:9 0:2 5:1", "17:14 13:1 14:12 5:4 11:3 3:14 4:7 8:3 10:9 19:14", "17:1 2:5 5:18 3:7 16:13 10:20 18:8 12:9 8:9 9:1", "4:20 15:15 19:14 3:15 17:8 6:1 16:6 1:2 12:17 5:1", "9:6 2:11 18:1 17:5 14:20 12:10 1:1 15:3 16:1 10:19", "15:9 1:9 8:10 4:1 9:7 2:7 12:10 10:10 6:11 7:4 5:4", "12:17 13:8 6:12 18:9 3:9 9:15 7:9 8:2 14:3 19:16", "7:18 4:3 0:13 6:7 11:12 15:7 8:8 10:7 19:8 18:6", "0:6 14:9 10:13 13:14 7:13 11:9 18:2 4:16 5:16 2:2", "13:18 5:1 2:14 6:14 12:4 17:2 8:1 7:1 9:15 15:20", "11:14 13:11 5:19 8:19 15:9 18:10 7:13 6:4 3:1", "5:11 12:16 11:20 1:6 9:20 7:4 4:3 15:8 3:6 8:4 6:2", "6:5 11:14 14:3 12:5 0:1 8:12 13:13 15:15 10:17 7:3", "9:2 2:11 17:17 18:8 5:16 10:18 6:7 16:4 11:3 19:10", "12:20 16:5 5:6 17:17 9:9 2:18 10:11 1:1 14:4 8:2", "16:2 0:9 13:3 19:4 14:9 9:9 8:17 2:18 5:4 4:4 1:5", "6:3 14:17 1:19 10:12 4:14 0:10 13:20 5:5", "3:19 14:15 16:5 2:8 1:15 5:14 0:19 17:5", "3:9 13:3 7:14 10:13 17:5 16:1 0:1 4:13 11:2 9:2", "17:1 11:7 6:15 15:9 19:11 8:10 0:17 9:9 14:8 13:2"};
    vector<string> rulesb = {"10:2 1:13 13:1 6:11 15:17 16:8 4:18 3:20 0:7 12:2", "12:17 1:3 19:1 8:19 4:13 11:19 16:12 13:3 0:6 15:5", "0:17 12:16 16:8 10:17 7:9 9:11 6:8 1:12 2:1 19:1", "7:16 19:2 18:10 5:6 2:5 4:13 3:15 11:16 9:5 12:7", "8:10 16:20 13:2 2:19 10:2 9:19 17:10 7:14 4:2", "3:14 14:2 18:6 17:18 8:13 0:1 9:5 13:3 12:9 5:9", "16:7 18:20 12:7 17:4 8:18 2:6 4:1 19:18 0:11 5:3", "19:18 2:19 12:19 7:5 13:14 4:1 6:12 18:2 1:9", "16:18 15:19 14:4 18:11 17:3 4:19 10:11 1:11 0:1", "19:7 0:3 2:14 14:15 6:3 1:17 18:4 9:16 17:5 13:1", "18:11 11:3 0:12 13:9 12:9 10:2 19:9 15:2 3:15 7:8", "9:9 8:20 3:4 6:2 1:1 14:15 11:20 2:5 15:3 12:3 5:4", "19:17 3:5 16:9 15:4 7:14 11:6 17:16 2:15 13:12 1:1", "1:19 17:8 18:5 8:1 12:9 5:5 16:17 10:13 19:14 15:2", "0:4 12:2 14:9 11:13 13:11 9:5 4:1 2:8 5:15 3:11", "4:16 7:20 6:4 13:3 2:10 3:19 1:4 9:19 8:3 17:1", "4:6 7:5 9:18 13:18 14:15 1:12 6:16 16:6 8:2 0:1", "5:13 16:8 3:15 10:12 4:17 6:11 14:11 13:3 18:4 2:3", "12:19 19:2 16:5 17:6 0:18 18:5 7:11 14:4 11:8 3:20", "17:7 15:20 3:13 14:13 9:14 1:6 2:8 13:16 6:2"};
    vector<string> rulesc = {"12:16 6:13 17:18 1:9 3:4 9:20 10:11 8:3 0:6", "17:17 5:4 9:3 11:10 16:15 14:10 8:9 12:16 0:13 1:3", "3:13 5:11 6:9 12:4 2:18 10:13 7:17 1:12 16:1 15:2", "8:15 13:10 15:11 4:18 3:4 11:6 17:5 0:5 9:17 19:3", "6:7 12:16 11:10 18:8 3:10 17:14 5:20 13:2 19:4 7:5", "14:5 19:12 16:19 0:1 6:12 1:4 15:12 17:11 13:4 5:9", "17:8 2:4 9:19 19:14 16:5 12:10 14:4 8:19 6:14 10:2", "3:3 18:19 13:7 14:19 0:18 7:18 5:12 8:2 4:1 9:1", "6:6 14:3 3:7 13:3 12:12 2:10 18:15 16:1 19:11 7:13", "13:11 12:12 7:15 1:6 0:18 19:2 9:10 2:10 16:14 5:2", "12:4 7:13 2:4 3:2 17:6 1:13 5:8 6:3 19:2 11:5 13:1", "12:2 0:4 10:5 5:11 8:7 17:4 1:15 4:17 2:10 3:13", "12:14 6:1 13:7 16:14 15:20 17:17 1:11 5:14 4:2", "3:20 4:7 19:6 13:10 5:11 18:2 15:7 6:13 7:10 1:14", "2:20 13:9 12:2 10:4 14:3 6:3 9:6 1:2 18:15 17:13", "17:4 5:19 4:18 12:19 7:4 10:10 13:5 15:18 19:3", "9:10 19:12 8:5 0:10 5:12 13:20 10:20 15:4 1:2 14:2", "19:12 16:1 5:13 6:4 3:12 13:10 10:17 18:18 15:11", "4:9 7:10 17:6 16:17 2:19 19:16 5:15 12:6 0:2", "14:9 1:2 16:10 18:10 6:11 2:20 3:4 19:11 13:20 4:2"};
    int finalState = 16;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.04299295;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> rulesa = {"9:17 1:11 19:13 12:18 14:20 8:9 16:9 0:2 5:1", "17:14 13:1 14:12 5:4 11:3 3:14 4:7 8:3 10:9 19:14", "17:1 2:5 5:18 3:7 16:13 10:20 18:8 12:9 8:9 9:1", "4:20 15:15 19:14 3:15 17:8 6:1 16:6 1:2 12:17 5:1", "9:6 2:11 18:1 17:5 14:20 12:10 1:1 15:3 16:1 10:19", "15:9 1:9 8:10 4:1 9:7 2:7 12:10 10:10 6:11 7:4 5:4", "12:17 13:8 6:12 18:9 3:9 9:15 7:9 8:2 14:3 19:16", "7:18 4:3 0:13 6:7 11:12 15:7 8:8 10:7 19:8 18:6", "0:6 14:9 10:13 13:14 7:13 11:9 18:2 4:16 5:16 2:2", "13:18 5:1 2:14 6:14 12:4 17:2 8:1 7:1 9:15 15:20", "11:14 13:11 5:19 8:19 15:9 18:10 7:13 6:4 3:1", "5:11 12:16 11:20 1:6 9:20 7:4 4:3 15:8 3:6 8:4 6:2", "6:5 11:14 14:3 12:5 0:1 8:12 13:13 15:15 10:17 7:3", "9:2 2:11 17:17 18:8 5:16 10:18 6:7 16:4 11:3 19:10", "12:20 16:5 5:6 17:17 9:9 2:18 10:11 1:1 14:4 8:2", "16:2 0:9 13:3 19:4 14:9 9:9 8:17 2:18 5:4 4:4 1:5", "6:3 14:17 1:19 10:12 4:14 0:10 13:20 5:5", "3:19 14:15 16:5 2:8 1:15 5:14 0:19 17:5", "3:9 13:3 7:14 10:13 17:5 16:1 0:1 4:13 11:2 9:2", "17:1 11:7 6:15 15:9 19:11 8:10 0:17 9:9 14:8 13:2"};
    vector<string> rulesb = {"10:2 1:13 13:1 6:11 15:17 16:8 4:18 3:20 0:7 12:2", "12:17 1:3 19:1 8:19 4:13 11:19 16:12 13:3 0:6 15:5", "0:17 12:16 16:8 10:17 7:9 9:11 6:8 1:12 2:1 19:1", "7:16 19:2 18:10 5:6 2:5 4:13 3:15 11:16 9:5 12:7", "8:10 16:20 13:2 2:19 10:2 9:19 17:10 7:14 4:2", "3:14 14:2 18:6 17:18 8:13 0:1 9:5 13:3 12:9 5:9", "16:7 18:20 12:7 17:4 8:18 2:6 4:1 19:18 0:11 5:3", "19:18 2:19 12:19 7:5 13:14 4:1 6:12 18:2 1:9", "16:18 15:19 14:4 18:11 17:3 4:19 10:11 1:11 0:1", "19:7 0:3 2:14 14:15 6:3 1:17 18:4 9:16 17:5 13:1", "18:11 11:3 0:12 13:9 12:9 10:2 19:9 15:2 3:15 7:8", "9:9 8:20 3:4 6:2 1:1 14:15 11:20 2:5 15:3 12:3 5:4", "19:17 3:5 16:9 15:4 7:14 11:6 17:16 2:15 13:12 1:1", "1:19 17:8 18:5 8:1 12:9 5:5 16:17 10:13 19:14 15:2", "0:4 12:2 14:9 11:13 13:11 9:5 4:1 2:8 5:15 3:11", "4:16 7:20 6:4 13:3 2:10 3:19 1:4 9:19 8:3 17:1", "4:6 7:5 9:18 13:18 14:15 1:12 6:16 16:6 8:2 0:1", "5:13 16:8 3:15 10:12 4:17 6:11 14:11 13:3 18:4 2:3", "12:19 19:2 16:5 17:6 0:18 18:5 7:11 14:4 11:8 3:20", "17:7 15:20 3:13 14:13 9:14 1:6 2:8 13:16 6:2"};
    vector<string> rulesc = {"12:16 6:13 17:18 1:9 3:4 9:20 10:11 8:3 0:6", "17:17 5:4 9:3 11:10 16:15 14:10 8:9 12:16 0:13 1:3", "3:13 5:11 6:9 12:4 2:18 10:13 7:17 1:12 16:1 15:2", "8:15 13:10 15:11 4:18 3:4 11:6 17:5 0:5 9:17 19:3", "6:7 12:16 11:10 18:8 3:10 17:14 5:20 13:2 19:4 7:5", "14:5 19:12 16:19 0:1 6:12 1:4 15:12 17:11 13:4 5:9", "17:8 2:4 9:19 19:14 16:5 12:10 14:4 8:19 6:14 10:2", "3:3 18:19 13:7 14:19 0:18 7:18 5:12 8:2 4:1 9:1", "6:6 14:3 3:7 13:3 12:12 2:10 18:15 16:1 19:11 7:13", "13:11 12:12 7:15 1:6 0:18 19:2 9:10 2:10 16:14 5:2", "12:4 7:13 2:4 3:2 17:6 1:13 5:8 6:3 19:2 11:5 13:1", "12:2 0:4 10:5 5:11 8:7 17:4 1:15 4:17 2:10 3:13", "12:14 6:1 13:7 16:14 15:20 17:17 1:11 5:14 4:2", "3:20 4:7 19:6 13:10 5:11 18:2 15:7 6:13 7:10 1:14", "2:20 13:9 12:2 10:4 14:3 6:3 9:6 1:2 18:15 17:13", "17:4 5:19 4:18 12:19 7:4 10:10 13:5 15:18 19:3", "9:10 19:12 8:5 0:10 5:12 13:20 10:20 15:4 1:2 14:2", "19:12 16:1 5:13 6:4 3:12 13:10 10:17 18:18 15:11", "4:9 7:10 17:6 16:17 2:19 19:16 5:15 12:6 0:2", "14:9 1:2 16:10 18:10 6:11 2:20 3:4 19:11 13:20 4:2"};
    int finalState = 999;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0025;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> rulesa = {"18:1 19:12 5:1 9:18 4:18 17:8 3:16 11:3 16:5 1:6", "3:16 16:2 0:13 11:10 7:17 12:15 19:15 17:2 6:8 1:1", "11:10 14:1 1:16 15:13 17:5 16:12 9:12 8:4 5:12 6:9", "8:4 2:14 15:4 19:8 7:2 11:14 17:10 5:9 6:17 0:9", "15:20 5:4 18:3 2:14 16:12 10:11 11:13 7:2 19:4 3:2", "6:5 14:17 1:14 3:15 13:20 16:12 4:7 8:2 2:8", "17:17 11:13 6:9 0:19 3:15 19:2 5:15 10:9 15:1", "5:11 6:16 11:9 10:2 16:9 2:17 3:10 14:19 1:5 4:2", "19:15 16:18 13:11 12:9 11:6 18:4 7:19 6:4 2:4 14:5", "11:4 19:15 4:1 2:8 10:16 9:11 7:18 5:6 0:10 13:7", "18:2 4:8 7:10 0:8 11:17 2:18 1:1 8:15 3:5 15:13", "4:2 14:12 16:7 13:8 18:15 19:6 2:10 6:2 3:5 0:11", "12:2 10:19 18:11 3:7 0:4 4:17 16:11 19:4 8:18 14:1", "17:1 5:3 3:20 12:2 2:7 6:8 10:19 11:5 4:14 19:19", "10:7 14:5 15:20 2:12 8:14 6:1 9:5 1:4 4:9 3:19 7:2", "4:3 1:4 6:12 0:5 3:11 2:5 17:10 13:9 12:19 14:4", "1:15 14:14 18:11 9:3 16:9 0:7 19:17 7:17 2:3 10:3", "1:1 0:12 15:4 17:14 14:14 13:9 7:8 12:4 11:4 18:11", "13:13 18:4 8:15 6:6 16:4 15:13 9:10 14:5 4:15 10:1", "19:6 5:16 2:10 15:6 13:7 1:8 16:2 18:8 14:7 7:20"};
    vector<string> rulesb = {"16:3 7:14 10:11 6:17 11:5 4:18 8:14 1:15 9:3", "11:13 2:1 16:5 18:3 5:13 12:5 8:18 19:15 9:10 3:11", "0:20 16:4 17:7 19:14 1:16 6:16 2:13 4:9 8:1", "11:17 3:19 13:10 5:12 18:14 16:19 14:3 8:6", "13:9 9:4 17:11 1:17 0:11 12:19 18:7 7:2 16:5 14:1", "3:8 17:5 16:3 2:17 19:2 14:7 11:1 18:17 9:3 7:10", "15:13 9:6 7:19 0:17 4:10 2:1 1:4 19:19 17:11", "7:16 15:6 3:16 6:14 17:14 8:5 2:3 5:13 1:4 16:5", "5:1 16:2 19:16 4:12 7:1 14:7 6:16 9:1 1:2 10:6 8:7", "17:9 9:18 19:19 11:15 4:8 12:17 15:11 2:3", "15:9 12:15 17:17 0:2 16:16 3:9 9:6 1:12 10:6 7:3", "5:13 9:8 7:5 16:6 17:5 3:20 6:6 4:10 1:15 13:1 2:6", "16:18 3:8 17:9 18:1 2:6 1:4 4:18 12:10 6:15 14:3", "8:19 7:7 6:6 18:20 19:20 11:8 15:1 5:9 9:3 10:2", "18:9 16:15 6:11 0:8 4:20 7:1 5:12 10:13 11:11", "19:16 16:2 2:4 15:15 11:1 13:6 8:3 17:13 3:14 6:12", "17:10 2:1 16:6 9:6 14:8 8:6 6:17 15:3 11:4 13:12", "14:7 4:19 18:6 13:13 8:8 17:3 16:6 6:15 11:16 9:6", "12:1 13:3 2:14 6:12 5:15 9:18 15:15 19:1 4:19 11:1", "13:19 4:2 5:2 10:6 12:18 2:13 19:18 15:6 7:13 1:1"};
    vector<string> rulesc = {"0:18 15:20 2:11 1:10 19:19 18:7 6:6 16:8 12:1", "11:1 17:12 7:16 2:16 4:15 18:20 3:4 0:11 1:4 15:1", "14:3 6:9 3:17 8:19 12:8 0:12 13:1 1:2 17:7 2:5 9:8", "1:18 5:5 7:6 15:6 10:16 9:2 16:20 14:17 12:9", "13:3 5:4 3:6 6:2 7:14 4:12 8:11 17:5 14:20 12:12", "15:5 12:10 17:16 6:17 8:8 3:8 13:3 4:20 10:3 2:10", "13:10 11:1 3:7 2:1 14:20 0:7 6:13 7:12 18:17 1:8", "8:11 0:16 4:11 10:4 7:9 1:19 19:12 5:12 2:5 9:1", "11:12 13:16 17:17 5:12 10:14 15:12 9:1 3:6 2:3 4:3", "7:4 16:7 19:19 14:3 0:9 11:7 5:19 18:20 6:12", "13:6 9:20 5:4 0:6 16:14 14:11 1:19 18:15 4:1 15:1", "19:4 16:6 11:12 12:1 4:13 6:9 14:13 7:3 1:14 5:4", "17:19 9:1 4:6 2:16 13:5 18:8 10:19 0:1 7:6 15:15", "5:8 15:6 4:15 11:13 7:3 9:15 10:17 1:11 16:7 14:1", "9:12 13:11 16:11 18:6 14:2 11:5 10:19 1:15 5:19", "12:1 4:19 18:17 11:18 17:11 10:6 3:2 19:12 2:2 5:5", "5:8 18:10 16:3 6:4 13:6 4:2 9:13 7:1 19:9 0:9 11:3", "16:7 8:14 6:6 13:20 5:13 9:9 4:15 0:7 2:5 18:1 3:2", "2:17 3:6 19:10 0:1 9:16 13:4 14:15 6:2 15:1 7:1", "16:18 7:5 13:5 3:12 0:4 11:1 10:8 6:14 5:10 2:5"};
    int finalState = 14;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03476150859504133;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> rulesa = {"18:1 19:12 5:1 9:18 4:18 17:8 3:16 11:3 16:5 1:6", "3:16 16:2 0:13 11:10 7:17 12:15 19:15 17:2 6:8 1:1", "11:10 14:1 1:16 15:13 17:5 16:12 9:12 8:4 5:12 6:9", "8:4 2:14 15:4 19:8 7:2 11:14 17:10 5:9 6:17 0:9", "15:20 5:4 18:3 2:14 16:12 10:11 11:13 7:2 19:4 3:2", "6:5 14:17 1:14 3:15 13:20 16:12 4:7 8:2 2:8", "17:17 11:13 6:9 0:19 3:15 19:2 5:15 10:9 15:1", "5:11 6:16 11:9 10:2 16:9 2:17 3:10 14:19 1:5 4:2", "19:15 16:18 13:11 12:9 11:6 18:4 7:19 6:4 2:4 14:5", "11:4 19:15 4:1 2:8 10:16 9:11 7:18 5:6 0:10 13:7", "18:2 4:8 7:10 0:8 11:17 2:18 1:1 8:15 3:5 15:13", "4:2 14:12 16:7 13:8 18:15 19:6 2:10 6:2 3:5 0:11", "12:2 10:19 18:11 3:7 0:4 4:17 16:11 19:4 8:18 14:1", "17:1 5:3 3:20 12:2 2:7 6:8 10:19 11:5 4:14 19:19", "10:7 14:5 15:20 2:12 8:14 6:1 9:5 1:4 4:9 3:19 7:2", "4:3 1:4 6:12 0:5 3:11 2:5 17:10 13:9 12:19 14:4", "1:15 14:14 18:11 9:3 16:9 0:7 19:17 7:17 2:3 10:3", "1:1 0:12 15:4 17:14 14:14 13:9 7:8 12:4 11:4 18:11", "13:13 18:4 8:15 6:6 16:4 15:13 9:10 14:5 4:15 10:1", "19:6 5:16 2:10 15:6 13:7 1:8 16:2 18:8 14:7 7:20"};
    vector<string> rulesb = {"16:3 7:14 10:11 6:17 11:5 4:18 8:14 1:15 9:3", "11:13 2:1 16:5 18:3 5:13 12:5 8:18 19:15 9:10 3:11", "0:20 16:4 17:7 19:14 1:16 6:16 2:13 4:9 8:1", "11:17 3:19 13:10 5:12 18:14 16:19 14:3 8:6", "13:9 9:4 17:11 1:17 0:11 12:19 18:7 7:2 16:5 14:1", "3:8 17:5 16:3 2:17 19:2 14:7 11:1 18:17 9:3 7:10", "15:13 9:6 7:19 0:17 4:10 2:1 1:4 19:19 17:11", "7:16 15:6 3:16 6:14 17:14 8:5 2:3 5:13 1:4 16:5", "5:1 16:2 19:16 4:12 7:1 14:7 6:16 9:1 1:2 10:6 8:7", "17:9 9:18 19:19 11:15 4:8 12:17 15:11 2:3", "15:9 12:15 17:17 0:2 16:16 3:9 9:6 1:12 10:6 7:3", "5:13 9:8 7:5 16:6 17:5 3:20 6:6 4:10 1:15 13:1 2:6", "16:18 3:8 17:9 18:1 2:6 1:4 4:18 12:10 6:15 14:3", "8:19 7:7 6:6 18:20 19:20 11:8 15:1 5:9 9:3 10:2", "18:9 16:15 6:11 0:8 4:20 7:1 5:12 10:13 11:11", "19:16 16:2 2:4 15:15 11:1 13:6 8:3 17:13 3:14 6:12", "17:10 2:1 16:6 9:6 14:8 8:6 6:17 15:3 11:4 13:12", "14:7 4:19 18:6 13:13 8:8 17:3 16:6 6:15 11:16 9:6", "12:1 13:3 2:14 6:12 5:15 9:18 15:15 19:1 4:19 11:1", "13:19 4:2 5:2 10:6 12:18 2:13 19:18 15:6 7:13 1:1"};
    vector<string> rulesc = {"0:18 15:20 2:11 1:10 19:19 18:7 6:6 16:8 12:1", "11:1 17:12 7:16 2:16 4:15 18:20 3:4 0:11 1:4 15:1", "14:3 6:9 3:17 8:19 12:8 0:12 13:1 1:2 17:7 2:5 9:8", "1:18 5:5 7:6 15:6 10:16 9:2 16:20 14:17 12:9", "13:3 5:4 3:6 6:2 7:14 4:12 8:11 17:5 14:20 12:12", "15:5 12:10 17:16 6:17 8:8 3:8 13:3 4:20 10:3 2:10", "13:10 11:1 3:7 2:1 14:20 0:7 6:13 7:12 18:17 1:8", "8:11 0:16 4:11 10:4 7:9 1:19 19:12 5:12 2:5 9:1", "11:12 13:16 17:17 5:12 10:14 15:12 9:1 3:6 2:3 4:3", "7:4 16:7 19:19 14:3 0:9 11:7 5:19 18:20 6:12", "13:6 9:20 5:4 0:6 16:14 14:11 1:19 18:15 4:1 15:1", "19:4 16:6 11:12 12:1 4:13 6:9 14:13 7:3 1:14 5:4", "17:19 9:1 4:6 2:16 13:5 18:8 10:19 0:1 7:6 15:15", "5:8 15:6 4:15 11:13 7:3 9:15 10:17 1:11 16:7 14:1", "9:12 13:11 16:11 18:6 14:2 11:5 10:19 1:15 5:19", "12:1 4:19 18:17 11:18 17:11 10:6 3:2 19:12 2:2 5:5", "5:8 18:10 16:3 6:4 13:6 4:2 9:13 7:1 19:9 0:9 11:3", "16:7 8:14 6:6 13:20 5:13 9:9 4:15 0:7 2:5 18:1 3:2", "2:17 3:6 19:10 0:1 9:16 13:4 14:15 6:2 15:1 7:1", "16:18 7:5 13:5 3:12 0:4 11:1 10:8 6:14 5:10 2:5"};
    int finalState = 999;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.32213418295558927;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> rulesa = {"6:15 16:17 2:7 19:14 5:16 9:19 17:12", "15:9 6:3 1:17 13:17 10:1 3:10 12:6 0:15 5:14 19:8", "6:8 16:16 19:16 9:12 13:5 14:13 17:3 7:17 18:5 4:3", "14:5 3:18 9:6 5:1 0:17 19:5 4:7 15:4 1:18 11:18", "8:17 11:20 3:3 15:3 18:15 17:10 13:20 9:2 10:5 6:3", "16:14 3:3 4:5 6:11 15:1 7:5 11:4 10:6 18:2 12:12", "3:11 11:10 10:14 16:7 0:6 18:4 1:3 14:5 13:14 8:19", "6:20 19:9 14:5 13:11 17:17 15:8 7:5 0:20 9:3 12:1", "6:5 11:5 13:20 16:4 14:14 12:18 3:16 0:4 5:5 19:8", "5:1 4:8 1:12 8:9 16:11 14:18 7:13 10:4 11:8 12:5", "5:3 3:2 2:1 6:4 18:12 8:6 1:15 19:6 12:10 11:9 4:1", "13:10 3:20 19:7 2:5 7:3 14:3 12:8 18:4 5:20 11:1", "18:12 13:17 16:1 0:5 3:1 19:18 9:20 17:1 12:18 6:3", "5:8 14:6 8:16 1:9 13:14 18:2 4:13 19:12 0:3 2:6", "9:7 10:8 2:16 3:15 15:17 11:16 6:4 1:1 4:8 18:1", "13:2 7:6 18:15 15:3 8:10 6:9 5:13 1:6 12:2 3:19", "1:2 15:2 8:12 2:18 9:7 17:15 10:18 3:15 4:6 13:3", "10:16 13:18 2:11 19:3 16:2 12:18 1:3 8:1 15:14 7:7", "6:15 11:16 17:19 9:11 16:18 4:6 1:9 12:1 15:4 10:1", "11:5 19:3 5:8 16:19 1:2 0:18 9:13 12:19 13:9 15:3"};
    vector<string> rulesb = {"12:6 5:7 19:15 3:4 7:11 8:14 1:6 6:18 16:10 10:4", "5:2 7:13 8:11 1:17 12:1 3:14 4:20 17:17 14:2 19:3", "10:13 18:1 9:5 19:6 17:20 8:6 1:10 6:20 16:6 4:8", "19:11 17:8 2:8 18:12 10:1 8:16 12:10 3:2 1:6 15:15", "10:14 1:19 14:10 17:12 13:2 19:13 18:2 4:6 2:6 6:9", "11:12 4:12 1:16 12:10 6:1 8:7 17:17 10:1 16:3 5:1", "2:4 19:11 9:10 1:18 4:17 10:2 5:12 17:6 11:17 15:3", "4:2 12:2 10:19 13:10 15:6 14:12 8:13 17:11 16:18", "9:16 11:7 5:19 7:8 12:17 4:19 6:8 16:3 1:1", "16:9 0:13 6:16 15:14 4:14 8:20 18:4 1:1 7:8 2:1", "2:1 1:13 4:16 13:12 14:5 17:19 16:3 10:9 3:2 9:16", "2:7 7:4 16:15 8:15 0:15 13:4 14:5 4:4 10:12 1:11", "5:4 1:19 2:3 10:17 14:7 6:18 11:20 15:9 19:1 17:2", "10:12 8:3 7:5 19:15 12:6 6:16 0:13 4:6 11:14 13:8", "3:8 18:5 19:8 10:15 6:10 5:15 12:16 17:18 0:2 16:2", "19:16 0:19 17:13 6:11 11:19 5:1 2:19 4:2", "5:9 8:10 11:17 3:20 18:20 15:4 2:1 13:7 12:5 1:6", "6:12 5:5 9:7 19:17 18:4 13:14 14:20 0:18 16:1 8:1", "1:20 7:16 16:7 18:5 12:20 3:1 9:10 13:5 11:5 0:4", "7:11 6:20 15:18 13:16 10:18 3:13 9:3 5:1"};
    vector<string> rulesc = {"2:7 16:7 3:7 15:19 12:10 8:5 13:5 1:11 9:1 0:8 5:2", "5:4 13:3 18:5 9:7 4:9 15:9 19:6 11:14 7:19 1:10", "11:11 9:8 3:1 6:6 17:15 18:16 10:13 14:3 2:13 13:7", "18:7 9:12 8:18 0:12 2:7 3:13 15:1 13:18 7:11 16:1", "13:7 18:12 19:1 12:14 0:3 14:12 2:7 6:2 9:3 8:14", "8:14 18:6 4:14 15:7 11:20 1:17 13:2 16:13 0:2 5:4", "7:6 12:2 8:2 5:6 17:5 2:18 14:6 10:15 6:1 11:8 9:2", "15:12 19:1 2:7 0:3 7:20 14:20 18:11 17:17 6:5 8:1", "4:10 2:16 9:17 10:1 13:5 3:15 16:18 7:6 14:10 0:1", "9:20 3:1 6:17 2:17 14:18 5:1 0:6 10:2 1:18", "13:19 17:15 10:12 5:2 16:16 12:16 7:11 6:5 11:2", "8:2 12:8 14:5 13:14 11:6 17:12 9:10 15:16 16:9 5:6", "18:5 5:9 11:14 9:3 12:15 14:16 1:5 13:17 8:6 0:7", "16:8 19:7 9:7 7:11 11:12 2:8 6:15 0:3 10:14 1:15", "11:16 1:12 9:10 12:13 13:1 15:13 10:13 2:17 18:5", "2:4 15:7 5:13 18:2 10:10 11:17 16:9 8:2 7:11 12:4", "10:15 9:5 2:16 6:1 19:17 11:2 8:6 13:9 5:1 15:5", "0:2 3:20 5:1 12:7 19:2 16:9 18:6 7:3 13:12 10:18", "0:1 9:15 10:3 11:19 6:6 15:11 8:9 16:9 2:2 13:2", "18:11 0:12 15:6 8:13 10:17 1:15 17:19 2:1 3:6"};
    int finalState = 7;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.033490225;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> rulesa = {"6:15 16:17 2:7 19:14 5:16 9:19 17:12", "15:9 6:3 1:17 13:17 10:1 3:10 12:6 0:15 5:14 19:8", "6:8 16:16 19:16 9:12 13:5 14:13 17:3 7:17 18:5 4:3", "14:5 3:18 9:6 5:1 0:17 19:5 4:7 15:4 1:18 11:18", "8:17 11:20 3:3 15:3 18:15 17:10 13:20 9:2 10:5 6:3", "16:14 3:3 4:5 6:11 15:1 7:5 11:4 10:6 18:2 12:12", "3:11 11:10 10:14 16:7 0:6 18:4 1:3 14:5 13:14 8:19", "6:20 19:9 14:5 13:11 17:17 15:8 7:5 0:20 9:3 12:1", "6:5 11:5 13:20 16:4 14:14 12:18 3:16 0:4 5:5 19:8", "5:1 4:8 1:12 8:9 16:11 14:18 7:13 10:4 11:8 12:5", "5:3 3:2 2:1 6:4 18:12 8:6 1:15 19:6 12:10 11:9 4:1", "13:10 3:20 19:7 2:5 7:3 14:3 12:8 18:4 5:20 11:1", "18:12 13:17 16:1 0:5 3:1 19:18 9:20 17:1 12:18 6:3", "5:8 14:6 8:16 1:9 13:14 18:2 4:13 19:12 0:3 2:6", "9:7 10:8 2:16 3:15 15:17 11:16 6:4 1:1 4:8 18:1", "13:2 7:6 18:15 15:3 8:10 6:9 5:13 1:6 12:2 3:19", "1:2 15:2 8:12 2:18 9:7 17:15 10:18 3:15 4:6 13:3", "10:16 13:18 2:11 19:3 16:2 12:18 1:3 8:1 15:14 7:7", "6:15 11:16 17:19 9:11 16:18 4:6 1:9 12:1 15:4 10:1", "11:5 19:3 5:8 16:19 1:2 0:18 9:13 12:19 13:9 15:3"};
    vector<string> rulesb = {"12:6 5:7 19:15 3:4 7:11 8:14 1:6 6:18 16:10 10:4", "5:2 7:13 8:11 1:17 12:1 3:14 4:20 17:17 14:2 19:3", "10:13 18:1 9:5 19:6 17:20 8:6 1:10 6:20 16:6 4:8", "19:11 17:8 2:8 18:12 10:1 8:16 12:10 3:2 1:6 15:15", "10:14 1:19 14:10 17:12 13:2 19:13 18:2 4:6 2:6 6:9", "11:12 4:12 1:16 12:10 6:1 8:7 17:17 10:1 16:3 5:1", "2:4 19:11 9:10 1:18 4:17 10:2 5:12 17:6 11:17 15:3", "4:2 12:2 10:19 13:10 15:6 14:12 8:13 17:11 16:18", "9:16 11:7 5:19 7:8 12:17 4:19 6:8 16:3 1:1", "16:9 0:13 6:16 15:14 4:14 8:20 18:4 1:1 7:8 2:1", "2:1 1:13 4:16 13:12 14:5 17:19 16:3 10:9 3:2 9:16", "2:7 7:4 16:15 8:15 0:15 13:4 14:5 4:4 10:12 1:11", "5:4 1:19 2:3 10:17 14:7 6:18 11:20 15:9 19:1 17:2", "10:12 8:3 7:5 19:15 12:6 6:16 0:13 4:6 11:14 13:8", "3:8 18:5 19:8 10:15 6:10 5:15 12:16 17:18 0:2 16:2", "19:16 0:19 17:13 6:11 11:19 5:1 2:19 4:2", "5:9 8:10 11:17 3:20 18:20 15:4 2:1 13:7 12:5 1:6", "6:12 5:5 9:7 19:17 18:4 13:14 14:20 0:18 16:1 8:1", "1:20 7:16 16:7 18:5 12:20 3:1 9:10 13:5 11:5 0:4", "7:11 6:20 15:18 13:16 10:18 3:13 9:3 5:1"};
    vector<string> rulesc = {"2:7 16:7 3:7 15:19 12:10 8:5 13:5 1:11 9:1 0:8 5:2", "5:4 13:3 18:5 9:7 4:9 15:9 19:6 11:14 7:19 1:10", "11:11 9:8 3:1 6:6 17:15 18:16 10:13 14:3 2:13 13:7", "18:7 9:12 8:18 0:12 2:7 3:13 15:1 13:18 7:11 16:1", "13:7 18:12 19:1 12:14 0:3 14:12 2:7 6:2 9:3 8:14", "8:14 18:6 4:14 15:7 11:20 1:17 13:2 16:13 0:2 5:4", "7:6 12:2 8:2 5:6 17:5 2:18 14:6 10:15 6:1 11:8 9:2", "15:12 19:1 2:7 0:3 7:20 14:20 18:11 17:17 6:5 8:1", "4:10 2:16 9:17 10:1 13:5 3:15 16:18 7:6 14:10 0:1", "9:20 3:1 6:17 2:17 14:18 5:1 0:6 10:2 1:18", "13:19 17:15 10:12 5:2 16:16 12:16 7:11 6:5 11:2", "8:2 12:8 14:5 13:14 11:6 17:12 9:10 15:16 16:9 5:6", "18:5 5:9 11:14 9:3 12:15 14:16 1:5 13:17 8:6 0:7", "16:8 19:7 9:7 7:11 11:12 2:8 6:15 0:3 10:14 1:15", "11:16 1:12 9:10 12:13 13:1 15:13 10:13 2:17 18:5", "2:4 15:7 5:13 18:2 10:10 11:17 16:9 8:2 7:11 12:4", "10:15 9:5 2:16 6:1 19:17 11:2 8:6 13:9 5:1 15:5", "0:2 3:20 5:1 12:7 19:2 16:9 18:6 7:3 13:12 10:18", "0:1 9:15 10:3 11:19 6:6 15:11 8:9 16:9 2:2 13:2", "18:11 0:12 15:6 8:13 10:17 1:15 17:19 2:1 3:6"};
    int finalState = 999;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.11740769230769227;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> rulesa = {"3:3 11:13 7:9 9:3 1:13 13:4 18:14 17:2 10:8 5:9", "16:16 11:7 18:16 8:19 14:17 5:5 7:19 9:1", "5:15 7:9 8:15 4:10 18:3 10:6 2:12 3:20 17:1 6:3", "1:4 16:10 5:5 4:2 8:4 2:3 7:19 9:20 10:8 13:14 0:5", "2:15 11:5 1:9 10:4 4:4 12:16 14:1 15:12 17:3 5:7", "9:5 18:20 7:12 17:14 3:18 6:8 11:15 12:6 19:2", "2:19 8:11 18:8 16:15 0:14 15:5 1:10 6:18", "18:16 14:17 19:5 6:1 11:4 12:19 4:8 7:6 5:11 1:10", "14:19 0:2 13:10 9:12 3:15 15:4 2:19 16:8 10:3 12:3", "19:2 4:16 3:2 14:19 6:7 13:9 17:8 0:20 2:9 11:6", "15:17 18:12 4:16 3:8 8:5 6:4 12:5 1:17 2:10 0:6", "4:3 16:9 6:12 12:20 0:1 1:20 10:8 18:3 15:4 17:6", "3:4 15:19 7:1 17:3 13:13 8:12 2:1 1:20 16:15 10:3", "18:5 1:4 12:18 15:12 19:20 2:2 10:2 11:10 13:6 7:2", "9:6 4:13 16:1 0:17 7:9 11:6 6:3 18:12 19:9 2:13", "4:16 7:1 19:15 13:4 8:6 12:6 2:11 17:17 0:14 14:7", "12:12 18:12 15:5 7:10 9:9 16:10 0:1 1:14 13:16 8:1", "19:1 10:8 11:1 17:4 5:13 1:15 7:12 9:18 18:15 2:4", "13:1 6:1 15:6 0:18 7:12 9:10 1:12 10:2 14:3 16:13", "17:10 16:14 8:1 7:17 0:4 18:2 1:20 2:11 3:7 14:4"};
    vector<string> rulesb = {"14:15 0:3 10:12 2:6 8:9 1:12 11:7 5:8 13:1 19:15", "1:5 0:3 10:13 3:2 2:1 19:12 18:17 17:16 4:3 8:5", "12:13 2:3 10:1 18:11 17:9 19:6 13:16 6:15 9:11 1:5", "12:13 3:4 13:16 6:8 15:17 19:14 16:15 1:12 5:1", "5:14 19:14 10:3 2:6 7:14 11:12 16:18 12:12 1:3 8:3", "14:2 0:19 8:2 3:4 12:8 2:7 11:1 6:1 9:9 13:20 5:13", "4:7 18:6 12:14 1:13 0:14 8:13 9:15 6:6 2:7 13:5", "0:2 6:4 1:10 5:13 4:14 2:17 13:3 3:15 14:17 17:4", "6:8 2:7 0:8 3:14 16:20 18:12 17:18 5:13", "12:12 3:9 13:16 16:13 19:4 17:8 7:16 2:8 11:5 14:3", "6:14 11:14 15:8 3:10 4:2 13:13 9:12 1:16 0:4 17:2", "8:15 5:13 1:19 12:5 18:4 17:10 15:12 4:15 3:3 19:1", "10:17 8:2 9:7 19:17 17:8 0:8 7:16 4:1 18:20 13:3", "6:2 13:8 7:3 8:18 5:2 16:17 4:15 0:12 15:2 14:14", "16:19 17:9 12:3 8:18 14:13 15:7 18:19 11:12", "19:3 0:12 3:1 17:7 6:2 16:13 9:2 8:1 15:2 1:1 2:2", "8:1 1:9 17:17 9:3 4:14 18:19 5:7 19:15 15:3 7:11", "12:2 18:4 17:7 9:3 7:1 15:5 19:2 11:8 5:11 10:9", "14:2 3:1 10:1 18:1 7:10 8:5 19:7 1:5 5:12 2:10 6:9", "12:13 19:6 15:16 17:16 1:20 4:13 6:6 2:1 3:8 10:1"};
    vector<string> rulesc = {"7:2 5:18 14:14 13:17 12:12 16:18 9:9 18:2 19:5 8:2", "11:4 2:9 4:9 13:16 1:3 5:12 17:3 8:17 19:5 14:2", "10:1 2:4 19:4 7:16 12:10 3:9 15:19 0:2 13:9 5:2", "17:3 1:9 9:9 18:8 13:2 2:8 12:15 3:2 11:14 0:14", "12:3 3:18 16:9 5:9 14:5 10:14 17:11 1:1 6:8 7:14", "5:12 12:3 2:16 4:7 6:1 8:15 15:7 19:13 14:17 0:1", "17:13 5:17 13:10 1:7 14:8 2:18 11:7 6:7 15:7 12:5", "2:1 18:16 11:19 8:13 9:9 3:3 4:5 17:2 1:19 16:2", "7:2 5:19 6:16 12:2 4:6 16:12 1:10 15:7 0:11 3:5", "10:9 5:11 1:9 3:7 6:16 11:19 0:2 12:2 7:7 15:3 4:7", "10:16 19:9 9:14 18:18 1:15 5:12 4:10 2:4 17:1 11:1", "3:9 6:2 13:16 16:18 19:10 0:10 14:5 17:3 2:19 15:5", "8:6 18:1 3:9 6:16 13:3 5:15 0:4 12:18 7:17 19:1", "3:19 14:1 15:2 4:11 7:10 9:18 1:11 6:15 10:9 11:1", "5:17 8:6 4:15 6:15 9:10 11:1 1:18 19:4 0:4 7:6 3:1", "13:11 19:19 17:15 12:8 4:16 16:14 2:5 5:8 7:1 9:3", "19:11 5:14 13:10 1:6 6:2 18:8 11:19 10:14 9:1 4:13", "1:17 12:7 6:6 4:2 0:5 16:10 11:5 10:20 18:17 14:9", "14:20 7:13 1:4 8:14 12:4 4:16 6:18 16:9 19:2", "7:5 15:6 1:19 17:20 16:10 2:20 4:20"};
    int finalState = 12;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0334;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> rulesa = {"3:3 11:13 7:9 9:3 1:13 13:4 18:14 17:2 10:8 5:9", "16:16 11:7 18:16 8:19 14:17 5:5 7:19 9:1", "5:15 7:9 8:15 4:10 18:3 10:6 2:12 3:20 17:1 6:3", "1:4 16:10 5:5 4:2 8:4 2:3 7:19 9:20 10:8 13:14 0:5", "2:15 11:5 1:9 10:4 4:4 12:16 14:1 15:12 17:3 5:7", "9:5 18:20 7:12 17:14 3:18 6:8 11:15 12:6 19:2", "2:19 8:11 18:8 16:15 0:14 15:5 1:10 6:18", "18:16 14:17 19:5 6:1 11:4 12:19 4:8 7:6 5:11 1:10", "14:19 0:2 13:10 9:12 3:15 15:4 2:19 16:8 10:3 12:3", "19:2 4:16 3:2 14:19 6:7 13:9 17:8 0:20 2:9 11:6", "15:17 18:12 4:16 3:8 8:5 6:4 12:5 1:17 2:10 0:6", "4:3 16:9 6:12 12:20 0:1 1:20 10:8 18:3 15:4 17:6", "3:4 15:19 7:1 17:3 13:13 8:12 2:1 1:20 16:15 10:3", "18:5 1:4 12:18 15:12 19:20 2:2 10:2 11:10 13:6 7:2", "9:6 4:13 16:1 0:17 7:9 11:6 6:3 18:12 19:9 2:13", "4:16 7:1 19:15 13:4 8:6 12:6 2:11 17:17 0:14 14:7", "12:12 18:12 15:5 7:10 9:9 16:10 0:1 1:14 13:16 8:1", "19:1 10:8 11:1 17:4 5:13 1:15 7:12 9:18 18:15 2:4", "13:1 6:1 15:6 0:18 7:12 9:10 1:12 10:2 14:3 16:13", "17:10 16:14 8:1 7:17 0:4 18:2 1:20 2:11 3:7 14:4"};
    vector<string> rulesb = {"14:15 0:3 10:12 2:6 8:9 1:12 11:7 5:8 13:1 19:15", "1:5 0:3 10:13 3:2 2:1 19:12 18:17 17:16 4:3 8:5", "12:13 2:3 10:1 18:11 17:9 19:6 13:16 6:15 9:11 1:5", "12:13 3:4 13:16 6:8 15:17 19:14 16:15 1:12 5:1", "5:14 19:14 10:3 2:6 7:14 11:12 16:18 12:12 1:3 8:3", "14:2 0:19 8:2 3:4 12:8 2:7 11:1 6:1 9:9 13:20 5:13", "4:7 18:6 12:14 1:13 0:14 8:13 9:15 6:6 2:7 13:5", "0:2 6:4 1:10 5:13 4:14 2:17 13:3 3:15 14:17 17:4", "6:8 2:7 0:8 3:14 16:20 18:12 17:18 5:13", "12:12 3:9 13:16 16:13 19:4 17:8 7:16 2:8 11:5 14:3", "6:14 11:14 15:8 3:10 4:2 13:13 9:12 1:16 0:4 17:2", "8:15 5:13 1:19 12:5 18:4 17:10 15:12 4:15 3:3 19:1", "10:17 8:2 9:7 19:17 17:8 0:8 7:16 4:1 18:20 13:3", "6:2 13:8 7:3 8:18 5:2 16:17 4:15 0:12 15:2 14:14", "16:19 17:9 12:3 8:18 14:13 15:7 18:19 11:12", "19:3 0:12 3:1 17:7 6:2 16:13 9:2 8:1 15:2 1:1 2:2", "8:1 1:9 17:17 9:3 4:14 18:19 5:7 19:15 15:3 7:11", "12:2 18:4 17:7 9:3 7:1 15:5 19:2 11:8 5:11 10:9", "14:2 3:1 10:1 18:1 7:10 8:5 19:7 1:5 5:12 2:10 6:9", "12:13 19:6 15:16 17:16 1:20 4:13 6:6 2:1 3:8 10:1"};
    vector<string> rulesc = {"7:2 5:18 14:14 13:17 12:12 16:18 9:9 18:2 19:5 8:2", "11:4 2:9 4:9 13:16 1:3 5:12 17:3 8:17 19:5 14:2", "10:1 2:4 19:4 7:16 12:10 3:9 15:19 0:2 13:9 5:2", "17:3 1:9 9:9 18:8 13:2 2:8 12:15 3:2 11:14 0:14", "12:3 3:18 16:9 5:9 14:5 10:14 17:11 1:1 6:8 7:14", "5:12 12:3 2:16 4:7 6:1 8:15 15:7 19:13 14:17 0:1", "17:13 5:17 13:10 1:7 14:8 2:18 11:7 6:7 15:7 12:5", "2:1 18:16 11:19 8:13 9:9 3:3 4:5 17:2 1:19 16:2", "7:2 5:19 6:16 12:2 4:6 16:12 1:10 15:7 0:11 3:5", "10:9 5:11 1:9 3:7 6:16 11:19 0:2 12:2 7:7 15:3 4:7", "10:16 19:9 9:14 18:18 1:15 5:12 4:10 2:4 17:1 11:1", "3:9 6:2 13:16 16:18 19:10 0:10 14:5 17:3 2:19 15:5", "8:6 18:1 3:9 6:16 13:3 5:15 0:4 12:18 7:17 19:1", "3:19 14:1 15:2 4:11 7:10 9:18 1:11 6:15 10:9 11:1", "5:17 8:6 4:15 6:15 9:10 11:1 1:18 19:4 0:4 7:6 3:1", "13:11 19:19 17:15 12:8 4:16 16:14 2:5 5:8 7:1 9:3", "19:11 5:14 13:10 1:6 6:2 18:8 11:19 10:14 9:1 4:13", "1:17 12:7 6:6 4:2 0:5 16:10 11:5 10:20 18:17 14:9", "14:20 7:13 1:4 8:14 12:4 4:16 6:18 16:9 19:2", "7:5 15:6 1:19 17:20 16:10 2:20 4:20"};
    int finalState = 999;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0875;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> rulesa = {"3:7 12:6 0:18 2:12 15:19 1:8 4:7 8:12 19:5 13:2", "18:17 11:17 12:2 14:7 6:5 7:11 17:5 1:5 19:7 16:10", "6:9 9:15 2:9 19:3 5:17 10:10 17:8 15:8 16:9 8:9", "17:6 19:14 0:17 5:7 11:6 1:16 13:8 18:8 14:2 6:5", "8:10 17:10 9:16 12:8 4:12 16:15 13:19 7:6 5:1 10:3", "17:16 0:12 13:6 10:12 3:11 11:19 4:3 2:4 18:8 16:8", "3:6 17:16 11:12 7:13 14:19 8:6 16:11 12:11 18:5", "2:19 18:5 19:9 3:14 13:13 15:11 7:18 14:11", "5:1 2:9 19:12 12:17 3:16 9:3 4:19 10:3 14:18 16:1", "10:18 9:15 0:3 1:4 17:1 18:17 5:19 4:4 12:3 8:6", "13:14 0:14 3:15 6:10 18:14 14:8 4:16 11:8 12:1", "5:4 8:10 14:20 0:12 17:7 15:9 18:20 11:10 4:7 13:1", "10:12 9:12 3:18 7:4 0:3 5:17 16:11 4:2 8:7 13:9", "19:7 0:20 15:15 3:20 13:17 6:8 4:5 2:8", "10:19 8:15 12:14 11:3 13:1 2:16 4:19 19:12 5:1", "12:12 8:2 19:16 7:20 2:16 5:6 17:18 3:2 6:4 18:2", "16:5 5:17 10:5 6:19 0:16 14:19 13:16 18:1 8:2", "5:4 19:5 15:18 13:9 4:18 2:18 8:9 12:10 16:7 6:2", "11:6 12:15 19:13 10:4 4:4 13:20 9:5 6:16 5:9 8:8", "18:4 8:12 17:14 0:20 15:16 14:13 4:1 10:19 12:1"};
    vector<string> rulesb = {"18:4 2:4 14:15 12:17 5:1 10:16 1:20 16:8 7:10 15:1", "7:14 18:13 12:8 19:7 13:4 5:5 6:14 0:6 3:7 11:5", "9:8 15:16 5:8 6:18 18:5 17:18 4:12 16:4 7:3 19:1", "13:8 18:2 15:16 0:17 3:4 2:10 7:3 6:18 5:15 19:5", "5:9 3:8 1:12 8:14 16:20 19:3 7:12 13:19 12:1", "16:11 18:5 8:19 10:6 0:9 12:18 9:2 15:7 4:11 5:3", "13:5 1:16 17:4 3:8 9:6 15:10 12:20 2:13 4:5 7:11", "13:15 14:11 11:2 7:18 9:14 17:2 12:11 5:17 16:9", "4:2 14:8 3:4 15:19 7:8 9:9 6:9 13:17 1:8 10:6 12:7", "3:13 7:8 0:13 11:5 12:8 10:16 15:13 5:14 9:3 16:5", "11:8 14:7 1:17 16:9 18:16 7:14 9:5 5:3 2:2 19:14", "14:8 15:16 17:10 11:4 0:13 13:15 5:15 3:13 19:2", "7:5 14:19 16:3 6:20 12:13 0:15 10:7 17:8 18:2 4:8", "4:13 8:11 14:14 10:17 6:14 19:1 15:13 16:6 18:4", "7:8 3:7 18:11 13:20 15:15 6:12 1:2 5:7 4:2 11:9", "18:10 17:10 10:20 12:6 4:3 9:13 11:11 15:3 2:4 7:8", "8:1 4:2 2:14 16:9 10:18 9:2 1:12 12:16 19:18 15:2", "17:12 15:15 10:20 6:19 16:7 4:20 18:2 11:5", "7:8 19:11 14:6 15:10 0:13 4:2 10:20 8:16 18:9 13:4", "13:18 5:3 14:9 7:7 18:14 2:17 17:17 12:9 15:5 6:1"};
    vector<string> rulesc = {"9:19 5:1 0:19 13:18 4:15 3:9 17:8 7:7 15:4", "2:13 19:12 14:15 0:6 11:4 10:7 5:20 4:8 13:13 7:2", "7:3 5:15 2:11 0:20 18:8 11:9 13:12 17:8 1:7 4:5", "14:3 18:2 19:6 16:5 10:12 13:2 17:13 8:20 11:11", "1:5 10:3 15:6 5:7 14:17 4:19 12:20 7:6 13:11 16:6", "0:6 3:2 10:8 19:5 7:13 6:2 16:5 5:20 4:11 17:6 2:4", "11:3 12:11 8:19 7:18 1:20 6:1 14:2 17:20 0:5 16:1", "8:14 11:7 5:14 3:10 0:15 12:10 6:13 13:5 7:6 14:2", "13:20 5:5 2:16 4:18 11:14 6:3 3:11 14:2 0:9 19:1", "6:14 17:11 1:13 3:15 9:9 11:16 12:5 19:12 18:4", "10:1 11:7 4:3 12:18 0:7 13:4 3:17 19:15 7:2 18:8", "6:11 0:12 11:12 18:15 5:11 1:9 10:9 14:2 2:15 7:1", "18:16 2:6 5:4 15:8 4:12 11:16 3:8 13:1 12:19 9:7", "2:6 19:12 14:1 12:4 10:13 9:18 1:7 8:8 4:9 15:20", "9:7 4:8 2:5 15:13 7:17 19:16 3:18 11:5 10:8 1:2", "1:15 5:17 15:14 13:2 6:3 4:16 7:6 2:9 12:11 0:1", "2:10 9:1 6:18 17:16 5:3 7:5 12:20 1:10 11:6 3:11", "15:11 4:12 5:6 3:14 17:8 16:11 8:14 19:4 12:17 9:2", "11:4 2:8 4:4 9:17 1:15 18:1 10:17 3:5 6:17 17:7", "5:13 11:8 3:13 15:6 6:1 14:6 0:6 4:7 2:16 17:18"};
    int finalState = 15;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.05577692307692307;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> rulesa = {"3:7 12:6 0:18 2:12 15:19 1:8 4:7 8:12 19:5 13:2", "18:17 11:17 12:2 14:7 6:5 7:11 17:5 1:5 19:7 16:10", "6:9 9:15 2:9 19:3 5:17 10:10 17:8 15:8 16:9 8:9", "17:6 19:14 0:17 5:7 11:6 1:16 13:8 18:8 14:2 6:5", "8:10 17:10 9:16 12:8 4:12 16:15 13:19 7:6 5:1 10:3", "17:16 0:12 13:6 10:12 3:11 11:19 4:3 2:4 18:8 16:8", "3:6 17:16 11:12 7:13 14:19 8:6 16:11 12:11 18:5", "2:19 18:5 19:9 3:14 13:13 15:11 7:18 14:11", "5:1 2:9 19:12 12:17 3:16 9:3 4:19 10:3 14:18 16:1", "10:18 9:15 0:3 1:4 17:1 18:17 5:19 4:4 12:3 8:6", "13:14 0:14 3:15 6:10 18:14 14:8 4:16 11:8 12:1", "5:4 8:10 14:20 0:12 17:7 15:9 18:20 11:10 4:7 13:1", "10:12 9:12 3:18 7:4 0:3 5:17 16:11 4:2 8:7 13:9", "19:7 0:20 15:15 3:20 13:17 6:8 4:5 2:8", "10:19 8:15 12:14 11:3 13:1 2:16 4:19 19:12 5:1", "12:12 8:2 19:16 7:20 2:16 5:6 17:18 3:2 6:4 18:2", "16:5 5:17 10:5 6:19 0:16 14:19 13:16 18:1 8:2", "5:4 19:5 15:18 13:9 4:18 2:18 8:9 12:10 16:7 6:2", "11:6 12:15 19:13 10:4 4:4 13:20 9:5 6:16 5:9 8:8", "18:4 8:12 17:14 0:20 15:16 14:13 4:1 10:19 12:1"};
    vector<string> rulesb = {"18:4 2:4 14:15 12:17 5:1 10:16 1:20 16:8 7:10 15:1", "7:14 18:13 12:8 19:7 13:4 5:5 6:14 0:6 3:7 11:5", "9:8 15:16 5:8 6:18 18:5 17:18 4:12 16:4 7:3 19:1", "13:8 18:2 15:16 0:17 3:4 2:10 7:3 6:18 5:15 19:5", "5:9 3:8 1:12 8:14 16:20 19:3 7:12 13:19 12:1", "16:11 18:5 8:19 10:6 0:9 12:18 9:2 15:7 4:11 5:3", "13:5 1:16 17:4 3:8 9:6 15:10 12:20 2:13 4:5 7:11", "13:15 14:11 11:2 7:18 9:14 17:2 12:11 5:17 16:9", "4:2 14:8 3:4 15:19 7:8 9:9 6:9 13:17 1:8 10:6 12:7", "3:13 7:8 0:13 11:5 12:8 10:16 15:13 5:14 9:3 16:5", "11:8 14:7 1:17 16:9 18:16 7:14 9:5 5:3 2:2 19:14", "14:8 15:16 17:10 11:4 0:13 13:15 5:15 3:13 19:2", "7:5 14:19 16:3 6:20 12:13 0:15 10:7 17:8 18:2 4:8", "4:13 8:11 14:14 10:17 6:14 19:1 15:13 16:6 18:4", "7:8 3:7 18:11 13:20 15:15 6:12 1:2 5:7 4:2 11:9", "18:10 17:10 10:20 12:6 4:3 9:13 11:11 15:3 2:4 7:8", "8:1 4:2 2:14 16:9 10:18 9:2 1:12 12:16 19:18 15:2", "17:12 15:15 10:20 6:19 16:7 4:20 18:2 11:5", "7:8 19:11 14:6 15:10 0:13 4:2 10:20 8:16 18:9 13:4", "13:18 5:3 14:9 7:7 18:14 2:17 17:17 12:9 15:5 6:1"};
    vector<string> rulesc = {"9:19 5:1 0:19 13:18 4:15 3:9 17:8 7:7 15:4", "2:13 19:12 14:15 0:6 11:4 10:7 5:20 4:8 13:13 7:2", "7:3 5:15 2:11 0:20 18:8 11:9 13:12 17:8 1:7 4:5", "14:3 18:2 19:6 16:5 10:12 13:2 17:13 8:20 11:11", "1:5 10:3 15:6 5:7 14:17 4:19 12:20 7:6 13:11 16:6", "0:6 3:2 10:8 19:5 7:13 6:2 16:5 5:20 4:11 17:6 2:4", "11:3 12:11 8:19 7:18 1:20 6:1 14:2 17:20 0:5 16:1", "8:14 11:7 5:14 3:10 0:15 12:10 6:13 13:5 7:6 14:2", "13:20 5:5 2:16 4:18 11:14 6:3 3:11 14:2 0:9 19:1", "6:14 17:11 1:13 3:15 9:9 11:16 12:5 19:12 18:4", "10:1 11:7 4:3 12:18 0:7 13:4 3:17 19:15 7:2 18:8", "6:11 0:12 11:12 18:15 5:11 1:9 10:9 14:2 2:15 7:1", "18:16 2:6 5:4 15:8 4:12 11:16 3:8 13:1 12:19 9:7", "2:6 19:12 14:1 12:4 10:13 9:18 1:7 8:8 4:9 15:20", "9:7 4:8 2:5 15:13 7:17 19:16 3:18 11:5 10:8 1:2", "1:15 5:17 15:14 13:2 6:3 4:16 7:6 2:9 12:11 0:1", "2:10 9:1 6:18 17:16 5:3 7:5 12:20 1:10 11:6 3:11", "15:11 4:12 5:6 3:14 17:8 16:11 8:14 19:4 12:17 9:2", "11:4 2:8 4:4 9:17 1:15 18:1 10:17 3:5 6:17 17:7", "5:13 11:8 3:13 15:6 6:1 14:6 0:6 4:7 2:16 17:18"};
    int finalState = 999;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.19568675333509336;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> rulesa = {"4:1 6:20 14:9 7:13 12:7 16:12 3:4 17:3 1:1 10:5", "3:5 12:2 10:8 1:18 13:12 7:3 19:13 5:16 11:6 17:10", "1:19 6:4 17:4 10:6 4:2 15:18 12:7 7:2 5:4 16:3 9:6", "9:11 7:9 14:16 0:17 19:7 10:10 2:1 6:14 3:6 13:2", "17:12 9:10 0:17 10:5 8:2 15:8 2:11 1:14 16:15 3:4", "9:2 8:16 3:19 13:12 17:7 7:5 5:10 6:5 1:2 10:2 0:4", "4:17 15:16 6:17 0:19 10:20 13:11", "17:5 18:15 6:19 0:10 12:7 9:20 16:14 13:3 7:6 19:1", "12:20 16:4 5:13 11:3 10:19 14:5 1:9 3:15 19:12", "15:4 2:2 10:2 17:20 1:7 5:11 14:20 0:6 18:1 4:5", "13:4 16:6 2:16 6:14 3:12 7:7 14:9 8:16 4:12 10:2", "7:17 8:14 12:1 6:2 13:20 3:9 15:10 10:6 11:1 18:2", "2:3 5:6 8:2 6:16 17:4 3:14 18:5 10:15 13:1 1:3 9:9", "3:13 5:7 15:11 6:5 11:18 14:14 4:5 8:9 19:4 13:7", "0:9 12:16 11:19 13:11 8:9 6:18 15:3 19:14 7:1", "6:19 5:8 2:2 13:6 11:11 1:1 7:3 12:4 0:7 19:14 8:2", "5:17 11:5 13:5 8:9 3:5 2:17 19:2 7:3 6:7 9:12 1:11", "1:12 17:11 19:7 18:9 2:7 7:6 12:19 3:9 5:11 14:7", "2:19 3:9 19:2 17:9 15:11 7:13 9:5 4:19 11:4 12:8", "4:11 16:20 11:17 17:10 14:16 10:17 0:8 13:1"};
    vector<string> rulesb = {"6:11 18:3 2:4 10:16 12:13 9:3 8:11 3:10 0:8 4:12", "5:15 19:6 7:7 2:3 8:5 10:6 4:12 18:9 14:18 3:19", "2:19 11:3 8:18 13:10 3:10 0:14 9:3 15:1 18:5 4:3", "19:17 0:13 5:6 2:11 17:4 15:6 9:15 11:3 10:12 6:6", "17:10 15:7 11:3 13:16 3:8 8:6 1:8 14:19 5:8 16:5", "15:19 8:5 2:20 7:19 14:16 12:10 6:5 5:3 17:1 18:2", "11:2 6:2 10:11 14:6 18:19 16:9 19:1 12:2 8:18 7:20", "19:20 8:13 7:11 0:11 1:7 2:9 18:14 12:14", "0:4 15:1 11:10 10:14 8:2 9:17 3:5 13:13 7:14 16:11", "8:7 3:6 12:6 5:9 2:13 10:1 4:5 9:4 13:11 14:4 7:10", "17:14 4:13 14:19 11:1 0:19 7:13 18:1 13:20", "12:1 11:20 15:15 6:3 4:5 14:3 2:19 17:13 9:10 1:5", "4:2 6:13 7:10 15:11 12:2 16:8 14:16 5:14 2:15 19:7", "8:8 12:12 2:3 18:1 5:11 6:10 10:14 17:13 14:20 4:2", "2:15 0:15 18:15 1:2 19:13 7:11 9:4 12:3 16:14 8:7", "2:13 8:3 9:8 18:11 4:2 10:2 12:13 14:19 15:14 5:2", "16:8 1:17 14:17 3:18 11:5 5:1 13:9 8:12 2:3 9:9", "4:12 9:13 12:18 18:18 3:17 11:13 0:9", "15:16 4:1 0:8 14:1 13:10 5:16 6:4 17:5 2:17 16:2", "9:5 1:1 13:5 5:20 18:18 2:2 17:20 8:5 11:18 4:5"};
    vector<string> rulesc = {"5:9 12:6 18:16 1:12 13:3 14:13 16:9 0:10 7:6 19:15", "13:20 12:2 8:18 16:10 10:11 14:12 1:5 15:2 3:3 0:6", "1:9 13:16 19:9 8:8 6:2 12:3 0:19 10:13 4:7 5:2 7:6", "14:4 19:6 7:18 3:10 18:1 6:3 4:10 9:16 15:1 5:3", "9:17 15:6 16:16 19:16 13:14 17:4 4:18 14:7 18:1", "6:5 4:7 13:8 19:20 1:1 17:6 8:18 12:19 11:14 9:2", "7:13 2:15 16:3 4:6 13:7 3:6 10:12 15:4 12:18 14:9", "6:17 18:12 2:7 16:17 15:2 1:2 5:16 12:14 19:10 8:1", "3:7 16:19 5:2 0:14 15:18 12:12 4:9 14:18 18:1", "3:19 2:20 12:9 16:20 7:20 13:8 17:3 6:1", "17:11 9:3 11:2 16:4 10:18 12:15 0:12 13:4 19:17", "4:17 14:13 5:19 3:17 15:11 17:13 2:1 1:7 0:2", "17:14 0:11 12:11 16:8 15:13 3:10 2:15 6:5 11:12", "7:18 11:16 16:11 0:3 5:13 13:15 10:3 8:17 2:2 15:1", "10:16 13:11 11:1 7:5 3:13 5:2 8:10 19:15 16:2 6:2", "9:13 0:2 15:8 11:19 2:9 14:7 3:6 5:10 8:9 10:4 7:3", "1:16 11:17 12:3 14:19 9:14 10:6 2:10 5:6 0:8 3:1", "11:1 2:16 5:2 4:4 12:2 7:20 10:16 6:12 1:10 15:11", "3:9 7:1 6:18 15:18 2:13 9:17 12:11 17:11 13:2", "14:11 4:14 7:6 16:1 6:13 12:2 3:19 10:16 2:10 15:6"};
    int finalState = 3;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.035;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> rulesa = {"0:5 2:32 3:33 6:7 5:23", "3:12 5:18 1:32 7:29 2:4 6:1", "5:19 1:44 2:27 7:3 6:2 3:2 4:2", "6:9 5:3 7:34 0:9 4:37 3:1 2:1 1:4", "5:25 3:30 7:22 0:19 6:4", "5:8 2:12 4:6 6:46 1:17 0:10", "7:4 3:5 1:29 4:49 2:13", "4:22 0:12 3:4 1:5 2:9 5:32 6:7 7:6"};
    vector<string> rulesb = {"6:41 5:4 3:35 7:1 2:6 4:9 0:1", "1:32 2:16 5:18 4:33", "5:10 3:7 2:14 4:28 1:28 6:7 0:4", "6:19 3:14 1:39 7:6 2:11 4:1 5:6 0:1", "6:39 5:10 3:7 1:2 0:40 7:2", "3:18 0:3 7:19 1:30 6:29", "6:28 1:5 5:15 2:40 0:12", "4:9 0:10 2:44 5:35 3:1"};
    vector<string> rulesc = {"0:8 6:37 2:38 1:16", "1:35 3:27 7:32 6:6", "0:38 7:40 4:11 2:3 3:7", "3:10 5:26 7:50 0:10 6:4", "2:3 5:17 6:29 7:31 3:10 0:10", "2:36 5:34 4:13 0:11 7:4", "0:45 4:40 5:8 6:2 1:3 3:2", "3:32 2:1 4:32 5:20 0:5 1:9"};
    int finalState = 3;
    int maxLength = 1;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.16999999999999998;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> rulesa = {"0:5 2:32 3:33 6:7 5:23", "3:12 5:18 1:32 7:29 2:4 6:1", "5:19 1:44 2:27 7:3 6:2 3:2 4:2", "6:9 5:3 7:34 0:9 4:37 3:1 2:1 1:4", "5:25 3:30 7:22 0:19 6:4", "5:8 2:12 4:6 6:46 1:17 0:10", "7:4 3:5 1:29 4:49 2:13", "4:22 0:12 3:4 1:5 2:9 5:32 6:7 7:6"};
    vector<string> rulesb = {"6:41 5:4 3:35 7:1 2:6 4:9 0:1", "1:32 2:16 5:18 4:33", "5:10 3:7 2:14 4:28 1:28 6:7 0:4", "6:19 3:14 1:39 7:6 2:11 4:1 5:6 0:1", "6:39 5:10 3:7 1:2 0:40 7:2", "3:18 0:3 7:19 1:30 6:29", "6:28 1:5 5:15 2:40 0:12", "4:9 0:10 2:44 5:35 3:1"};
    vector<string> rulesc = {"0:8 6:37 2:38 1:16", "1:35 3:27 7:32 6:6", "0:38 7:40 4:11 2:3 3:7", "3:10 5:26 7:50 0:10 6:4", "2:3 5:17 6:29 7:31 3:10 0:10", "2:36 5:34 4:13 0:11 7:4", "0:45 4:40 5:8 6:2 1:3 3:2", "3:32 2:1 4:32 5:20 0:5 1:9"};
    int finalState = 999;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06077653186953523;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> rulesa = {"0:28 4:35 6:21 3:8 7:5 1:2", "3:36 0:18 1:34 7:10 2:2", "4:13 5:35 2:12 7:29 3:9", "4:15 3:32 1:12 0:35 6:4", "0:10 4:10 5:6 3:21 7:44 6:5 1:3", "3:23 0:31 1:4 4:2 2:28 5:12", "7:27 3:20 4:39 2:14", "6:42 0:19 3:12 1:16 7:11"};
    vector<string> rulesb = {"0:21 1:46 2:32", "2:14 5:43 4:1 0:34 6:3 7:3", "6:21 1:11 0:26 3:3 4:31 5:5 2:2", "6:33 7:24 0:25 1:7 3:4 2:1 4:6", "0:16 1:30 3:10 6:16 2:9 5:7 7:6", "2:3 3:8 6:11 1:29 0:38 5:9", "5:20 0:10 7:1 3:38 6:25 4:4", "5:48 3:28 1:7 4:4 6:9 7:1 2:2"};
    vector<string> rulesc = {"0:6 2:25 6:16 3:39 5:3 4:11", "1:45 4:28 0:17 2:3 5:1 6:2 7:2", "5:17 6:11 2:11 7:50 3:8 0:3", "7:5 0:41 6:16 5:38", "3:46 1:34 4:17 7:1 2:1", "1:22 2:42 7:29 6:2 0:2 3:3", "6:44 3:17 1:37 5:1", "2:27 1:43 7:22 4:1 0:2 6:1 5:3"};
    int finalState = 0;
    int maxLength = 9;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.16019807398000552;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> rulesa = {"0:28 4:35 6:21 3:8 7:5 1:2", "3:36 0:18 1:34 7:10 2:2", "4:13 5:35 2:12 7:29 3:9", "4:15 3:32 1:12 0:35 6:4", "0:10 4:10 5:6 3:21 7:44 6:5 1:3", "3:23 0:31 1:4 4:2 2:28 5:12", "7:27 3:20 4:39 2:14", "6:42 0:19 3:12 1:16 7:11"};
    vector<string> rulesb = {"0:21 1:46 2:32", "2:14 5:43 4:1 0:34 6:3 7:3", "6:21 1:11 0:26 3:3 4:31 5:5 2:2", "6:33 7:24 0:25 1:7 3:4 2:1 4:6", "0:16 1:30 3:10 6:16 2:9 5:7 7:6", "2:3 3:8 6:11 1:29 0:38 5:9", "5:20 0:10 7:1 3:38 6:25 4:4", "5:48 3:28 1:7 4:4 6:9 7:1 2:2"};
    vector<string> rulesc = {"0:6 2:25 6:16 3:39 5:3 4:11", "1:45 4:28 0:17 2:3 5:1 6:2 7:2", "5:17 6:11 2:11 7:50 3:8 0:3", "7:5 0:41 6:16 5:38", "3:46 1:34 4:17 7:1 2:1", "1:22 2:42 7:29 6:2 0:2 3:3", "6:44 3:17 1:37 5:1", "2:27 1:43 7:22 4:1 0:2 6:1 5:3"};
    int finalState = 999;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.014323076923076921;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> rulesa = {"6:6 1:31 4:6 2:21 5:34 7:2", "3:21 5:27 6:27 2:2 4:13 0:2 1:6", "4:17 0:1 1:4 5:14 3:10 6:3 2:27 7:15", "7:34 3:15 2:49 4:1 5:1", "2:1 3:25 5:47 0:2 6:15 4:7 7:1", "7:33 0:40 3:26 2:1", "1:11 7:32 2:6 5:6 4:23 3:2 6:14 0:5", "2:17 1:36 5:13 0:13 6:16 4:5"};
    vector<string> rulesb = {"6:30 7:26 4:40 1:2 0:2", "7:24 3:10 5:27 1:14 0:13 2:5 6:3 4:4", "6:16 5:14 2:34 3:13 0:13 4:10", "1:19 7:16 3:29 5:29 0:5", "5:20 7:12 3:34 0:1 1:29 2:1", "6:24 5:43 1:24 0:3 7:1", "4:4 1:37 5:30 2:11 3:16 6:1", "7:14 4:13 1:19 6:41 0:2 2:8"};
    vector<string> rulesc = {"5:45 3:19 6:28 2:8", "6:50 5:44 7:5 2:1", "2:34 5:8 6:21 7:23 1:1 3:7 4:6", "2:28 1:14 0:38 5:1 4:11 3:2", "5:3 0:2 7:49 4:44 1:1", "5:21 7:31 2:23 3:4 6:13 4:2 1:5", "7:10 4:7 2:11 5:6 3:4 0:44 1:9 6:9", "0:31 7:2 6:21 3:28 4:7 2:3 5:4 1:3"};
    int finalState = 3;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09407353249308015;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> rulesa = {"6:6 1:31 4:6 2:21 5:34 7:2", "3:21 5:27 6:27 2:2 4:13 0:2 1:6", "4:17 0:1 1:4 5:14 3:10 6:3 2:27 7:15", "7:34 3:15 2:49 4:1 5:1", "2:1 3:25 5:47 0:2 6:15 4:7 7:1", "7:33 0:40 3:26 2:1", "1:11 7:32 2:6 5:6 4:23 3:2 6:14 0:5", "2:17 1:36 5:13 0:13 6:16 4:5"};
    vector<string> rulesb = {"6:30 7:26 4:40 1:2 0:2", "7:24 3:10 5:27 1:14 0:13 2:5 6:3 4:4", "6:16 5:14 2:34 3:13 0:13 4:10", "1:19 7:16 3:29 5:29 0:5", "5:20 7:12 3:34 0:1 1:29 2:1", "6:24 5:43 1:24 0:3 7:1", "4:4 1:37 5:30 2:11 3:16 6:1", "7:14 4:13 1:19 6:41 0:2 2:8"};
    vector<string> rulesc = {"5:45 3:19 6:28 2:8", "6:50 5:44 7:5 2:1", "2:34 5:8 6:21 7:23 1:1 3:7 4:6", "2:28 1:14 0:38 5:1 4:11 3:2", "5:3 0:2 7:49 4:44 1:1", "5:21 7:31 2:23 3:4 6:13 4:2 1:5", "7:10 4:7 2:11 5:6 3:4 0:44 1:9 6:9", "0:31 7:2 6:21 3:28 4:7 2:3 5:4 1:3"};
    int finalState = 999;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.02481095;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> rulesa = {"4:26 6:12 2:33 7:4 5:7 0:3 3:8 1:1", "1:12 5:19 7:49 3:11 6:1 0:7 4:1", "7:20 0:30 3:19 5:7 2:21 1:3", "5:30 7:9 1:28 4:16 0:7 6:4", "2:24 7:1 1:37 5:6 6:11 0:4 3:14 4:3", "7:25 6:21 0:25 3:22 5:7", "0:39 7:3 4:26 3:17 2:5 5:3 1:5", "2:14 3:13 4:30 7:9 0:20 6:13"};
    vector<string> rulesb = {"6:8 1:35 5:46 7:10 2:1", "6:19 2:18 0:9 5:45 4:2 3:1", "7:21 6:16 3:42 5:1 0:16 1:2", "5:34 1:34 7:4 3:21 6:3 2:2 4:2", "2:24 4:46 1:19 7:11", "0:12 7:1 4:31 3:17 5:36 2:2", "1:3 0:28 5:41 4:17 3:6 7:2", "5:37 4:32 1:21 3:7 6:3"};
    vector<string> rulesc = {"1:42 6:49 0:2 7:4 5:2", "3:30 4:7 6:4 0:1 2:34 7:18 1:5", "4:42 1:18 0:38 7:2", "6:36 5:12 2:25 4:18 3:8 7:1", "0:19 2:26 4:12 1:32 6:8", "0:40 6:34 4:5 7:18 5:1 3:1", "5:15 0:49 4:22 2:14", "3:24 2:10 5:39 7:25 4:1"};
    int finalState = 7;
    int maxLength = 7;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09174882570197772;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> rulesa = {"4:26 6:12 2:33 7:4 5:7 0:3 3:8 1:1", "1:12 5:19 7:49 3:11 6:1 0:7 4:1", "7:20 0:30 3:19 5:7 2:21 1:3", "5:30 7:9 1:28 4:16 0:7 6:4", "2:24 7:1 1:37 5:6 6:11 0:4 3:14 4:3", "7:25 6:21 0:25 3:22 5:7", "0:39 7:3 4:26 3:17 2:5 5:3 1:5", "2:14 3:13 4:30 7:9 0:20 6:13"};
    vector<string> rulesb = {"6:8 1:35 5:46 7:10 2:1", "6:19 2:18 0:9 5:45 4:2 3:1", "7:21 6:16 3:42 5:1 0:16 1:2", "5:34 1:34 7:4 3:21 6:3 2:2 4:2", "2:24 4:46 1:19 7:11", "0:12 7:1 4:31 3:17 5:36 2:2", "1:3 0:28 5:41 4:17 3:6 7:2", "5:37 4:32 1:21 3:7 6:3"};
    vector<string> rulesc = {"1:42 6:49 0:2 7:4 5:2", "3:30 4:7 6:4 0:1 2:34 7:18 1:5", "4:42 1:18 0:38 7:2", "6:36 5:12 2:25 4:18 3:8 7:1", "0:19 2:26 4:12 1:32 6:8", "0:40 6:34 4:5 7:18 5:1 3:1", "5:15 0:49 4:22 2:14", "3:24 2:10 5:39 7:25 4:1"};
    int finalState = 999;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03127692307692308;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> rulesa = {"4:3 0:35 1:6 6:49 5:6", "4:6 2:38 6:19 7:2 3:10 0:16 5:7", "6:30 2:13 0:13 1:19 7:1 5:24", "4:32 2:16 7:11 1:33 0:5 5:3", "2:7 1:14 0:40 4:30 5:5 3:1 7:1", "3:16 7:3 1:14 6:15 0:32 4:15 5:5", "2:21 1:4 6:34 7:35 0:4 4:2", "0:16 7:49 4:2 2:22 3:8 1:3"};
    vector<string> rulesb = {"2:46 1:31 3:12 4:1 6:8 5:2", "5:23 6:42 0:30 1:2 3:3", "0:48 1:25 4:2 5:15 2:6 7:1 3:2", "0:35 6:36 1:25 4:3 3:1", "0:5 3:40 1:12 4:7 7:25 6:5", "4:42 3:33 2:22 5:3", "6:37 0:10 4:28 1:14 7:7 3:2", "6:42 5:42 7:4 3:11"};
    vector<string> rulesc = {"1:44 4:46 6:6 0:2 5:2", "3:30 0:47 7:10 6:8 5:5", "4:16 6:45 2:26 5:8 3:2 7:3", "4:8 1:45 6:18 3:27 2:1", "4:44 2:46 5:4 3:6", "6:26 4:36 0:17 3:14 5:6 1:1", "4:2 7:39 0:24 1:26 5:2 3:3", "1:42 7:50 5:7 6:1"};
    int finalState = 0;
    int maxLength = 7;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15285398433901284;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> rulesa = {"4:3 0:35 1:6 6:49 5:6", "4:6 2:38 6:19 7:2 3:10 0:16 5:7", "6:30 2:13 0:13 1:19 7:1 5:24", "4:32 2:16 7:11 1:33 0:5 5:3", "2:7 1:14 0:40 4:30 5:5 3:1 7:1", "3:16 7:3 1:14 6:15 0:32 4:15 5:5", "2:21 1:4 6:34 7:35 0:4 4:2", "0:16 7:49 4:2 2:22 3:8 1:3"};
    vector<string> rulesb = {"2:46 1:31 3:12 4:1 6:8 5:2", "5:23 6:42 0:30 1:2 3:3", "0:48 1:25 4:2 5:15 2:6 7:1 3:2", "0:35 6:36 1:25 4:3 3:1", "0:5 3:40 1:12 4:7 7:25 6:5", "4:42 3:33 2:22 5:3", "6:37 0:10 4:28 1:14 7:7 3:2", "6:42 5:42 7:4 3:11"};
    vector<string> rulesc = {"1:44 4:46 6:6 0:2 5:2", "3:30 0:47 7:10 6:8 5:5", "4:16 6:45 2:26 5:8 3:2 7:3", "4:8 1:45 6:18 3:27 2:1", "4:44 2:46 5:4 3:6", "6:26 4:36 0:17 3:14 5:6 1:1", "4:2 7:39 0:24 1:26 5:2 3:3", "1:42 7:50 5:7 6:1"};
    int finalState = 999;
    int maxLength = 5;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03849985983901099;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> rulesa = {"4:36 6:14 2:27 7:8 5:9 3:1 0:3 1:1", "2:47 0:23 4:28 3:2", "0:28 5:14 2:34 6:1 7:1 3:4 4:7 1:8", "1:17 2:10 6:15 5:19 7:20 0:13 3:6", "6:25 1:28 2:17 4:17 3:1 7:4 0:8", "3:34 0:13 6:8 5:37 1:2 2:4 4:1 7:1", "6:6 5:9 1:15 0:11 4:13 7:16 2:7 3:23", "2:26 1:27 0:33 7:10 6:4"};
    vector<string> rulesb = {"7:31 3:21 1:37 5:2 2:2 4:4", "4:49 7:23 3:26 2:1 6:1", "2:47 1:18 3:3 5:19 4:4 7:6 0:1", "5:42 0:17 7:12 1:15 6:1 2:10", "7:14 4:50 5:31 6:1 2:4", "5:39 7:28 1:16 3:13 2:3 4:1", "3:49 2:6 0:37 6:6 1:2", "4:31 7:43 3:17 6:6 1:2 2:1"};
    vector<string> rulesc = {"1:29 0:31 6:28 4:4 7:1 5:5", "4:43 5:17 1:38 7:2", "5:23 2:42 4:11 3:9 7:11 6:4", "2:2 7:29 0:31 5:21 6:7 1:9", "2:27 1:49 0:17 6:3 5:1", "4:20 1:18 7:29 3:27 5:6", "1:28 7:42 6:3 0:15 5:7 4:3 2:2", "4:17 1:30 0:25 7:18 2:8"};
    int finalState = 3;
    int maxLength = 5;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08092549358873626;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> rulesa = {"4:36 6:14 2:27 7:8 5:9 3:1 0:3 1:1", "2:47 0:23 4:28 3:2", "0:28 5:14 2:34 6:1 7:1 3:4 4:7 1:8", "1:17 2:10 6:15 5:19 7:20 0:13 3:6", "6:25 1:28 2:17 4:17 3:1 7:4 0:8", "3:34 0:13 6:8 5:37 1:2 2:4 4:1 7:1", "6:6 5:9 1:15 0:11 4:13 7:16 2:7 3:23", "2:26 1:27 0:33 7:10 6:4"};
    vector<string> rulesb = {"7:31 3:21 1:37 5:2 2:2 4:4", "4:49 7:23 3:26 2:1 6:1", "2:47 1:18 3:3 5:19 4:4 7:6 0:1", "5:42 0:17 7:12 1:15 6:1 2:10", "7:14 4:50 5:31 6:1 2:4", "5:39 7:28 1:16 3:13 2:3 4:1", "3:49 2:6 0:37 6:6 1:2", "4:31 7:43 3:17 6:6 1:2 2:1"};
    vector<string> rulesc = {"1:29 0:31 6:28 4:4 7:1 5:5", "4:43 5:17 1:38 7:2", "5:23 2:42 4:11 3:9 7:11 6:4", "2:2 7:29 0:31 5:21 6:7 1:9", "2:27 1:49 0:17 6:3 5:1", "4:20 1:18 7:29 3:27 5:6", "1:28 7:42 6:3 0:15 5:7 4:3 2:2", "4:17 1:30 0:25 7:18 2:8"};
    int finalState = 999;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.04010000074380165;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> rulesa = {"4:39 1:28 6:14 7:5 2:9", "6:20 1:38 5:35 2:5 0:1", "2:5 3:8 5:32 1:49 6:1 7:5", "7:49 6:36 1:2 5:1 0:9", "0:18 5:19 7:24 3:34 2:1 1:3", "2:13 4:39 7:1 1:26 0:7 3:10 6:3", "6:7 2:39 0:12 7:10 4:31", "7:37 3:14 1:14 5:24 6:3 4:8"};
    vector<string> rulesb = {"7:30 2:36 3:22 5:1 1:6 0:3", "3:17 1:42 6:28 4:1 7:3 0:3", "4:7 5:17 0:8 3:44 6:5 7:15", "3:41 5:1 7:32 0:2 4:9 2:4 1:11", "5:18 0:46 2:23 4:7 6:6", "6:49 2:27 1:16 0:8", "2:50 3:37 5:10 6:1 4:1", "6:50 0:24 7:6 5:3 1:13 3:4"};
    vector<string> rulesc = {"7:16 5:8 2:43 0:23 1:7 4:3", "0:23 1:1 2:24 4:7 6:3 7:10 3:24 5:4", "3:19 5:27 2:20 0:15 4:6 6:2 7:6", "0:25 2:2 1:17 4:31 6:20 3:2 7:1", "0:41 7:18 1:21 4:4 3:9 2:5", "6:38 5:16 2:13 3:31 0:1 7:1", "1:20 6:2 3:45 5:7 7:4 2:8 0:13", "3:16 0:34 7:5 5:5 2:26 6:8 4:6"};
    int finalState = 3;
    int maxLength = 2;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.1284923076923077;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> rulesa = {"4:39 1:28 6:14 7:5 2:9", "6:20 1:38 5:35 2:5 0:1", "2:5 3:8 5:32 1:49 6:1 7:5", "7:49 6:36 1:2 5:1 0:9", "0:18 5:19 7:24 3:34 2:1 1:3", "2:13 4:39 7:1 1:26 0:7 3:10 6:3", "6:7 2:39 0:12 7:10 4:31", "7:37 3:14 1:14 5:24 6:3 4:8"};
    vector<string> rulesb = {"7:30 2:36 3:22 5:1 1:6 0:3", "3:17 1:42 6:28 4:1 7:3 0:3", "4:7 5:17 0:8 3:44 6:5 7:15", "3:41 5:1 7:32 0:2 4:9 2:4 1:11", "5:18 0:46 2:23 4:7 6:6", "6:49 2:27 1:16 0:8", "2:50 3:37 5:10 6:1 4:1", "6:50 0:24 7:6 5:3 1:13 3:4"};
    vector<string> rulesc = {"7:16 5:8 2:43 0:23 1:7 4:3", "0:23 1:1 2:24 4:7 6:3 7:10 3:24 5:4", "3:19 5:27 2:20 0:15 4:6 6:2 7:6", "0:25 2:2 1:17 4:31 6:20 3:2 7:1", "0:41 7:18 1:21 4:4 3:9 2:5", "6:38 5:16 2:13 3:31 0:1 7:1", "1:20 6:2 3:45 5:7 7:4 2:8 0:13", "3:16 0:34 7:5 5:5 2:26 6:8 4:6"};
    int finalState = 999;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09911220113759563;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> rulesa = {"7:13 3:14 2:44 6:10 0:3 1:14 4:1", "5:28 0:26 7:17 6:10 3:8 4:9", "4:14 2:2 5:28 7:8 3:22 6:15 0:11", "0:33 7:12 5:36 3:7 1:4 6:8", "6:24 4:27 0:21 3:25 1:3", "1:26 6:1 3:47 4:10 0:14", "5:47 4:11 6:34 2:3 0:2", "7:21 3:46 1:4 0:23 4:6"};
    vector<string> rulesb = {"0:42 5:46 2:6 7:2 6:1 1:1", "0:35 3:36 2:20 7:8", "6:32 1:20 0:19 2:3 4:19 7:4 5:2", "2:36 5:28 0:20 6:5 7:6 3:4", "5:15 4:22 0:49 3:6 2:3 7:1 6:4", "2:44 0:46 5:10", "6:47 0:30 1:8 4:5 7:4 2:5", "0:34 5:25 3:8 4:23 1:7"};
    vector<string> rulesc = {"2:30 0:13 5:2 6:6 7:21 1:22 3:4", "3:38 1:13 7:1 4:33 6:10 0:1 5:4", "4:26 0:38 7:17 5:17 6:1", "0:47 4:12 6:14 2:12 3:9 1:6", "6:17 1:27 7:19 5:12 0:14 3:9 2:1", "3:20 5:45 0:21 6:10 4:2 7:2", "6:47 5:15 1:3 0:18 7:16", "0:31 7:49 2:7 6:7 3:4 4:1"};
    int finalState = 2;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.12180534999999999;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> rulesa = {"4:81 7:12 5:4 0:2", "2:6 6:66 7:9 5:1 3:7 4:5", "4:14 6:46 3:37 5:2", "4:29 2:39 7:5 6:27", "6:92 7:7 2:1", "3:98 5:2", "5:100", "2:100"};
    vector<string> rulesb = {"5:11 6:11 2:13 3:31 0:12 1:16 7:3", "2:67 0:4 1:21 5:7", "2:95 7:3 0:1", "2:96 5:2", "5:96 4:4", "2:57 1:35 0:8", "5:52 0:1 4:37 6:1 2:9", "5:68 6:14 0:7 2:11"};
    vector<string> rulesc = {"6:75 7:12 2:1 0:12", "3:63 4:30 6:4", "0:68 1:22 3:8", "3:10 4:3 1:33 0:47 2:6", "5:21 6:29 1:25 2:25", "4:42 2:7 7:34 1:2 3:11 6:3", "3:21 2:7 5:24 4:17 1:11 6:20", "2:25 6:17 0:27 7:6 4:4 1:21"};
    int finalState = 5;
    int maxLength = 7;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.14700270617622796;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> rulesa = {"4:81 7:12 5:4 0:2", "2:6 6:66 7:9 5:1 3:7 4:5", "4:14 6:46 3:37 5:2", "4:29 2:39 7:5 6:27", "6:92 7:7 2:1", "3:98 5:2", "5:100", "2:100"};
    vector<string> rulesb = {"5:11 6:11 2:13 3:31 0:12 1:16 7:3", "2:67 0:4 1:21 5:7", "2:95 7:3 0:1", "2:96 5:2", "5:96 4:4", "2:57 1:35 0:8", "5:52 0:1 4:37 6:1 2:9", "5:68 6:14 0:7 2:11"};
    vector<string> rulesc = {"6:75 7:12 2:1 0:12", "3:63 4:30 6:4", "0:68 1:22 3:8", "3:10 4:3 1:33 0:47 2:6", "5:21 6:29 1:25 2:25", "4:42 2:7 7:34 1:2 3:11 6:3", "3:21 2:7 5:24 4:17 1:11 6:20", "2:25 6:17 0:27 7:6 4:4 1:21"};
    int finalState = 999;
    int maxLength = 5;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03823660581593407;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> rulesa = {"0:17 3:14 6:17 5:17 2:11 1:12 7:10", "4:76 1:13 7:5 2:1 0:3", "0:51 4:16 5:1 2:25 3:5", "0:92 6:5", "4:31 1:51 6:16 3:1", "1:54 5:2 0:28 6:10 2:4", "1:60 6:18 0:11 5:3 4:5 7:2", "7:21 2:31 1:8 3:24 6:12 0:3"};
    vector<string> rulesb = {"6:94 5:5", "6:60 4:27 0:8 3:4", "5:88 6:10 0:2", "3:45 4:24 7:5 5:5 0:15 2:4", "2:4 5:50 4:20 0:19 1:3", "3:29 6:45 4:18 5:6 1:2", "3:22 2:73 7:3 4:2", "5:68 1:3 0:17 6:4 2:2 7:3"};
    vector<string> rulesc = {"6:24 4:5 0:4 2:66", "5:20 3:76 1:4", "7:80 4:6 1:1 0:11 6:2", "6:81 1:3 0:8 2:4 5:4", "5:100", "6:19 2:16 0:46 4:19", "0:98 2:1", "3:26 1:68 4:1 0:3"};
    int finalState = 1;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.10612797487603308;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> rulesa = {"0:17 3:14 6:17 5:17 2:11 1:12 7:10", "4:76 1:13 7:5 2:1 0:3", "0:51 4:16 5:1 2:25 3:5", "0:92 6:5", "4:31 1:51 6:16 3:1", "1:54 5:2 0:28 6:10 2:4", "1:60 6:18 0:11 5:3 4:5 7:2", "7:21 2:31 1:8 3:24 6:12 0:3"};
    vector<string> rulesb = {"6:94 5:5", "6:60 4:27 0:8 3:4", "5:88 6:10 0:2", "3:45 4:24 7:5 5:5 0:15 2:4", "2:4 5:50 4:20 0:19 1:3", "3:29 6:45 4:18 5:6 1:2", "3:22 2:73 7:3 4:2", "5:68 1:3 0:17 6:4 2:2 7:3"};
    vector<string> rulesc = {"6:24 4:5 0:4 2:66", "5:20 3:76 1:4", "7:80 4:6 1:1 0:11 6:2", "6:81 1:3 0:8 2:4 5:4", "5:100", "6:19 2:16 0:46 4:19", "0:98 2:1", "3:26 1:68 4:1 0:3"};
    int finalState = 999;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.058830127557748385;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> rulesa = {"6:93 7:7", "5:75 3:19 1:2 6:1 7:1 0:2", "2:65 5:7 7:28", "2:72 6:7 1:13 4:7 7:1", "1:12 7:42 3:25 0:8 2:1 4:11", "7:27 2:38 0:34", "1:46 3:11 7:8 4:5 2:15 6:10", "5:46 7:39 6:10 4:4"};
    vector<string> rulesb = {"6:43 7:35 3:21 2:1", "2:18 7:23 3:45 1:4 4:1 0:5", "2:83 1:5 3:6 4:1 6:5", "1:7 4:31 5:60 7:1", "3:73 7:18 1:2 4:6", "7:50 0:39 3:4 5:3 1:3 6:1", "6:76 4:7 1:9 0:2 5:6", "4:99"};
    vector<string> rulesc = {"0:24 2:41 6:11 5:13 7:10", "1:55 3:18 6:8 5:4 2:4 4:2", "2:40 1:7 5:35 3:11 4:7", "5:49 7:28 6:20 1:1", "7:44 1:45 0:7 4:3", "0:25 2:61 3:7 7:5 4:1", "1:66 6:22 0:12", "2:58 7:36 1:5 5:1"};
    int finalState = 3;
    int maxLength = 6;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08063001753080055;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> rulesa = {"6:93 7:7", "5:75 3:19 1:2 6:1 7:1 0:2", "2:65 5:7 7:28", "2:72 6:7 1:13 4:7 7:1", "1:12 7:42 3:25 0:8 2:1 4:11", "7:27 2:38 0:34", "1:46 3:11 7:8 4:5 2:15 6:10", "5:46 7:39 6:10 4:4"};
    vector<string> rulesb = {"6:43 7:35 3:21 2:1", "2:18 7:23 3:45 1:4 4:1 0:5", "2:83 1:5 3:6 4:1 6:5", "1:7 4:31 5:60 7:1", "3:73 7:18 1:2 4:6", "7:50 0:39 3:4 5:3 1:3 6:1", "6:76 4:7 1:9 0:2 5:6", "4:99"};
    vector<string> rulesc = {"0:24 2:41 6:11 5:13 7:10", "1:55 3:18 6:8 5:4 2:4 4:2", "2:40 1:7 5:35 3:11 4:7", "5:49 7:28 6:20 1:1", "7:44 1:45 0:7 4:3", "0:25 2:61 3:7 7:5 4:1", "1:66 6:22 0:12", "2:58 7:36 1:5 5:1"};
    int finalState = 999;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.023331700000000004;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> rulesa = {"7:24 2:5 4:12 6:32 5:18 1:6 0:3", "5:59 7:7 4:25 2:6 1:3", "4:8 3:56 2:23 6:3 7:1 1:5 5:1", "0:2 4:98", "1:19 5:16 3:11 7:33 4:9 6:1 0:1", "3:11 4:44 6:41 7:4", "4:6 5:25 3:11 6:39 1:12 7:3", "0:28 5:10 6:20 2:13 3:4 4:13 7:5"};
    vector<string> rulesb = {"0:51 6:2 2:42 3:2 4:2", "7:90 6:4 4:2 0:2 3:2", "1:71 0:18 7:2 3:3 6:5", "6:59 1:9 7:13 4:10 0:6 5:1", "1:24 2:72 7:4", "1:70 5:27 4:1", "0:69 6:22 5:3 4:6", "5:65 3:1 0:26 4:8"};
    vector<string> rulesc = {"6:38 2:6 1:49 3:2", "6:57 0:20 2:9 5:1 1:13", "1:52 0:17 5:20 4:5 3:2 6:4", "1:75 6:14 7:9 4:1", "6:52 2:23 4:19 7:3 0:2", "6:32 0:44 7:10 5:1 4:11", "1:81 4:12 5:2 0:2", "2:85 3:2 0:3 1:5"};
    int finalState = 1;
    int maxLength = 8;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.1739473681440539;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> rulesa = {"7:24 2:5 4:12 6:32 5:18 1:6 0:3", "5:59 7:7 4:25 2:6 1:3", "4:8 3:56 2:23 6:3 7:1 1:5 5:1", "0:2 4:98", "1:19 5:16 3:11 7:33 4:9 6:1 0:1", "3:11 4:44 6:41 7:4", "4:6 5:25 3:11 6:39 1:12 7:3", "0:28 5:10 6:20 2:13 3:4 4:13 7:5"};
    vector<string> rulesb = {"0:51 6:2 2:42 3:2 4:2", "7:90 6:4 4:2 0:2 3:2", "1:71 0:18 7:2 3:3 6:5", "6:59 1:9 7:13 4:10 0:6 5:1", "1:24 2:72 7:4", "1:70 5:27 4:1", "0:69 6:22 5:3 4:6", "5:65 3:1 0:26 4:8"};
    vector<string> rulesc = {"6:38 2:6 1:49 3:2", "6:57 0:20 2:9 5:1 1:13", "1:52 0:17 5:20 4:5 3:2 6:4", "1:75 6:14 7:9 4:1", "6:52 2:23 4:19 7:3 0:2", "6:32 0:44 7:10 5:1 4:11", "1:81 4:12 5:2 0:2", "2:85 3:2 0:3 1:5"};
    int finalState = 999;
    int maxLength = 5;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08038628757472527;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> rulesa = {"7:92 0:3 1:4 6:1", "1:70 2:30", "5:9 0:77 6:12", "0:38 5:51 3:8 4:2", "5:26 2:15 3:44 4:9 1:4 7:2", "2:63 7:19 4:17 1:1", "2:60 7:31 3:4 4:4", "4:97 6:1"};
    vector<string> rulesb = {"3:64 6:4 1:27 7:5", "4:80 5:5 2:14", "4:91 7:6 2:1 6:2", "4:63 3:23 7:1 2:9 5:4", "7:35 3:31 1:18 0:9 5:5 6:1", "3:11 6:61 4:16 5:6 1:3 7:1", "3:71 5:18 4:3 6:2 0:6", "2:59 6:23 7:13 4:5"};
    vector<string> rulesc = {"3:71 6:6 1:1 0:21", "2:44 6:5 0:31 3:14", "5:29 6:60 7:7 4:3", "7:86 5:2 0:8 3:1 6:1", "1:51 4:41 5:3 6:5", "4:50 0:28 3:2 5:15 6:3", "7:62 5:38", "3:58 7:36 0:2 6:1"};
    int finalState = 3;
    int maxLength = 9;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15853602865049077;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> rulesa = {"7:92 0:3 1:4 6:1", "1:70 2:30", "5:9 0:77 6:12", "0:38 5:51 3:8 4:2", "5:26 2:15 3:44 4:9 1:4 7:2", "2:63 7:19 4:17 1:1", "2:60 7:31 3:4 4:4", "4:97 6:1"};
    vector<string> rulesb = {"3:64 6:4 1:27 7:5", "4:80 5:5 2:14", "4:91 7:6 2:1 6:2", "4:63 3:23 7:1 2:9 5:4", "7:35 3:31 1:18 0:9 5:5 6:1", "3:11 6:61 4:16 5:6 1:3 7:1", "3:71 5:18 4:3 6:2 0:6", "2:59 6:23 7:13 4:5"};
    vector<string> rulesc = {"3:71 6:6 1:1 0:21", "2:44 6:5 0:31 3:14", "5:29 6:60 7:7 4:3", "7:86 5:2 0:8 3:1 6:1", "1:51 4:41 5:3 6:5", "4:50 0:28 3:2 5:15 6:3", "7:62 5:38", "3:58 7:36 0:2 6:1"};
    int finalState = 999;
    int maxLength = 5;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.040337808404120885;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> rulesa = {"7:57 6:14 4:28", "5:95 3:3", "0:42 2:44 6:7 7:5", "6:17 0:19 2:57 7:2", "2:12 3:15 1:19 5:10 4:28 0:8 6:3", "3:45 0:1 1:10 5:9 7:19 4:11 2:1", "5:77 7:14 1:4 3:2", "2:82 5:2 6:12 3:2 0:1 4:1"};
    vector<string> rulesb = {"6:28 5:27 7:44", "7:21 0:57 5:17 6:5", "7:92 1:5 5:3", "2:55 6:16 0:10 1:5 3:5 4:5", "3:50 5:48 2:2", "7:56 2:41 5:3", "4:42 3:47 5:2 0:5", "2:78 1:3 4:2 3:16 5:1"};
    vector<string> rulesc = {"1:33 7:20 6:14 3:11 2:10 4:4 0:2", "3:34 6:60 1:1 4:1", "2:63 6:12 3:1 1:2 7:11 0:8 4:3", "1:100", "0:62 7:23 4:1 2:1 3:8 6:1", "5:86 1:11 2:1", "1:51 2:49", "1:40 7:12 2:37 6:6 5:1"};
    int finalState = 2;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25958382771289973;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> rulesa = {"7:57 6:14 4:28", "5:95 3:3", "0:42 2:44 6:7 7:5", "6:17 0:19 2:57 7:2", "2:12 3:15 1:19 5:10 4:28 0:8 6:3", "3:45 0:1 1:10 5:9 7:19 4:11 2:1", "5:77 7:14 1:4 3:2", "2:82 5:2 6:12 3:2 0:1 4:1"};
    vector<string> rulesb = {"6:28 5:27 7:44", "7:21 0:57 5:17 6:5", "7:92 1:5 5:3", "2:55 6:16 0:10 1:5 3:5 4:5", "3:50 5:48 2:2", "7:56 2:41 5:3", "4:42 3:47 5:2 0:5", "2:78 1:3 4:2 3:16 5:1"};
    vector<string> rulesc = {"1:33 7:20 6:14 3:11 2:10 4:4 0:2", "3:34 6:60 1:1 4:1", "2:63 6:12 3:1 1:2 7:11 0:8 4:3", "1:100", "0:62 7:23 4:1 2:1 3:8 6:1", "5:86 1:11 2:1", "1:51 2:49", "1:40 7:12 2:37 6:6 5:1"};
    int finalState = 999;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06945600190082646;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> rulesa = {"6:52 3:42 4:3 7:1", "3:43 2:5 0:34 7:16 6:1", "7:79 4:12 6:4 0:3 2:2", "7:97 6:2", "6:36 1:18 3:38 4:7", "2:54 6:13 5:2 0:12 7:10 3:7", "1:64 5:27 7:4 3:2", "3:26 6:23 7:23 4:23"};
    vector<string> rulesb = {"5:35 6:55 4:7 1:3", "6:71 3:21 0:3 7:2", "4:19 5:67 3:11 7:2 6:1", "1:62 3:5 0:13 5:7 7:13", "1:9 5:43 4:34 2:14", "3:25 4:41 2:3 5:27 6:4", "1:47 5:43 3:10", "2:24 6:4 5:2 3:56 4:12"};
    vector<string> rulesc = {"2:16 6:21 5:13 7:11 1:12 4:20 3:6", "4:20 0:69 7:5 5:4", "7:36 0:56 3:6 1:1", "5:66 4:30 3:2", "0:22 6:12 5:45 7:5 4:12", "2:87 1:5 5:8", "1:46 0:17 6:15 4:12 5:3 2:6", "1:90 4:6 6:2 5:2"};
    int finalState = 0;
    int maxLength = 7;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09340991636886807;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> rulesa = {"6:52 3:42 4:3 7:1", "3:43 2:5 0:34 7:16 6:1", "7:79 4:12 6:4 0:3 2:2", "7:97 6:2", "6:36 1:18 3:38 4:7", "2:54 6:13 5:2 0:12 7:10 3:7", "1:64 5:27 7:4 3:2", "3:26 6:23 7:23 4:23"};
    vector<string> rulesb = {"5:35 6:55 4:7 1:3", "6:71 3:21 0:3 7:2", "4:19 5:67 3:11 7:2 6:1", "1:62 3:5 0:13 5:7 7:13", "1:9 5:43 4:34 2:14", "3:25 4:41 2:3 5:27 6:4", "1:47 5:43 3:10", "2:24 6:4 5:2 3:56 4:12"};
    vector<string> rulesc = {"2:16 6:21 5:13 7:11 1:12 4:20 3:6", "4:20 0:69 7:5 5:4", "7:36 0:56 3:6 1:1", "5:66 4:30 3:2", "0:22 6:12 5:45 7:5 4:12", "2:87 1:5 5:8", "1:46 0:17 6:15 4:12 5:3 2:6", "1:90 4:6 6:2 5:2"};
    int finalState = 999;
    int maxLength = 4;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0415776;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> rulesa = {"1:82 7:18", "6:63 4:9 7:20 3:7 1:1", "1:12 7:9 6:61 5:12 0:6", "3:18 0:19 4:20 6:2 1:40", "2:96 1:1 6:2", "3:74 0:6 4:17 2:3", "4:16 7:13 2:45 6:24 5:2", "2:24 5:64 0:2 4:3 6:5 1:2"};
    vector<string> rulesb = {"2:8 3:62 5:2 0:4 1:23", "3:17 5:37 7:46", "2:81 0:5 4:5 6:8 3:1", "4:90 7:8 0:2", "6:24 3:39 2:4 7:24 1:4 5:3", "6:12 3:42 7:45", "3:59 0:38 7:2 1:1", "0:4 7:38 6:6 3:44 2:8"};
    vector<string> rulesc = {"4:77 3:4 2:5 0:12", "0:70 2:1 3:7 5:11", "5:35 7:4 2:6 1:24 6:1 3:8 0:6 4:11", "1:98 3:2", "2:25 4:66 7:7 3:1 1:1", "1:82 4:8 6:10", "4:100", "4:2 1:83 5:10 2:5"};
    int finalState = 0;
    int maxLength = 9;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0717491148666802;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> rulesa = {"1:1", "2:1", "3:1", "4:1", "5:1", "6:1", "7:1", "8:1", "9:1", "10:1", ""};
    vector<string> rulesb = {"", "", "", "", "", "", "", "", "", "", ""};
    vector<string> rulesc = {"", "", "", "", "", "", "", "", "", "", ""};
    int finalState = 10;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 1.129012227202421E-25;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> rulesa = {"1:1", "2:1", "3:1", "4:1", "5:1", "6:1", "7:1", "8:1", "9:1", "10:1", ""};
    vector<string> rulesb = {"", "", "", "", "", "", "", "", "", "", ""};
    vector<string> rulesc = {"", "", "", "", "", "", "", "", "", "", ""};
    int finalState = 999;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.999988595836089;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> rulesa = {""};
    vector<string> rulesb = {""};
    vector<string> rulesc = {""};
    int finalState = 999;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9999887098777279;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> rulesa = {""};
    vector<string> rulesb = {""};
    vector<string> rulesc = {""};
    int finalState = 0;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 1.1290122272024207E-5;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> rulesa = {"2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35", "2:9 0:7 3:4 1:2 5:35"};
    vector<string> rulesb = {"0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "0:10 4:7 5:1", "3:79 2:10"};
    vector<string> rulesc = {"1:100", "2:100", "3:100", "4:100", "5:100", "0:100"};
    int finalState = 3;
    int maxLength = 10;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.002676338903044717;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> rulesa = {"1:100", "0:100"};
    vector<string> rulesb = {"1:100", "0:100"};
    vector<string> rulesc = {"1:100", "0:100"};
    int finalState = 1;
    int maxLength = 3;
    RandomFA* pObj = new RandomFA();
    clock_t start = clock();
    double result = pObj->getProbability(rulesa, rulesb, rulesc, finalState, maxLength);
    clock_t end = clock();
    delete pObj;
    double expected = 0.75;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=262056&rd=4710&pm=2287
********************************************************************************
#include <stdio.h>
#include <vector>
#include <map>
#include <algorithm>
#include <string.h>
#include <ctype.h>
#include <string>
#include <math.h>
 
using namespace std;
 
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<VI> VII;
 
 
vector<string> split(string s1, string s2)
{
  vector<string> result;
  int lastInd = -1;
  for(int i=0;i<=s1.length();i++)
    {
      bool isSplitter = false;
      if(i == s1.length())
  isSplitter = true;
      else
  for(int j=0;j<s2.length();j++)
    if(s1[i] == s2[j])
      isSplitter = true;
 
      if(isSplitter)
  {
    if(lastInd != i-1)
      {
        result.push_back(s1.substr(lastInd + 1, i - lastInd - 1));
      }
 
      lastInd = i;
  }
    }
  return result;
      }
 
class RandomFA {
 
  public:
  double getProbability(vector <string> rulesa, vector <string> rulesb, vector <string> rulesc, int finalState, int maxLength) {
 
      int N = rulesa.size();
 
      double prob[51];
      double endprob[51];
      endprob[0] = prob[0] = 1;
      for(int i=1;i<=N;i++)
endprob[i] =     prob[i] = 0;
 
      double oldprob[51];
 
      for(int n=0;n<maxLength;n++)
      {
    memcpy(oldprob, prob, sizeof(prob));
 
    memset(prob, 0, sizeof(prob));
 
    for(int olds=0;olds<N;olds++)
    {
        int totprob;
        VS rl;
        
        rl = split(rulesa[olds], " ");
        totprob=0;
        for(int j=0;j<rl.size();j++)
        {
      int st, pro;
      sscanf(rl[j].c_str(), "%d:%d", &st, &pro);
      totprob += pro;
      prob[st] += pro / 300.0 * oldprob[olds];
        }
        prob[N] += (100-totprob) / 300.0 * oldprob[olds];
 
        rl = split(rulesb[olds], " ");
        totprob=0;
        for(int j=0;j<rl.size();j++)
        {
      int st, pro;
      sscanf(rl[j].c_str(), "%d:%d", &st, &pro);
      totprob += pro;
      prob[st] += pro / 300.0 * oldprob[olds];
        }
        prob[N] += (100-totprob) / 300.0 * oldprob[olds];
 
        rl = split(rulesc[olds], " ");
        totprob=0;
        for(int j=0;j<rl.size();j++)
        {
      int st, pro;
      sscanf(rl[j].c_str(), "%d:%d", &st, &pro);
      totprob += pro;
      prob[st] += pro / 300.0 * oldprob[olds];
        }
        prob[N] += (100-totprob) / 300.0 * oldprob[olds];        
    }
 
    prob[N] += oldprob[N];
 
    for(int i=0;i<=N;i++)
    {
        endprob[i] /= 3;
        endprob[i] += prob[i];
    }
      }
 
      double sum = 0;
      for(int i=0;i<=N;i++)
    sum += endprob[i];
      for(int i=0;i<=N;i++)
    endprob[i] /= sum;
 
      if(finalState == 999)
      return endprob[N];
      else
    return endprob[finalState];
  }
};
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/