/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8817
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class AddElectricalWires {
public:
    int maxNewWires(vector<string> wires, vector<int> gridConnections);
};

int AddElectricalWires::maxNewWires(vector<string> wires, vector<int> gridConnections) {
    int ret;
    return ret;
}


int test0() {
    vector<string> wires = {"000", "000", "000"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> wires = {"000", "000", "000"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> wires = {"01", "10"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> wires = {"00000", "00000", "00000", "00000", "00000"};
    vector<int> gridConnections = {0, 1, 2, 3, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> wires = {"01000", "10100", "01010", "00100", "00000"};
    vector<int> gridConnections = {2, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> wires = {};
    vector<int> gridConnections = {49};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 1225;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> wires = {};
    vector<int> gridConnections = {4, 28, 11, 15, 24, 35, 17, 36, 26, 48, 33, 39, 19, 2, 47, 49, 25, 18, 32, 40, 5, 21, 7, 12, 14, 42, 27, 6, 45, 44, 30, 38, 13, 37, 3, 16, 29, 43, 9, 22, 8, 23, 20, 34, 1, 10, 31, 0, 46, 41};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> wires = {};
    vector<int> gridConnections = {28};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> wires = {};
    vector<int> gridConnections = {43, 35, 25, 49, 29, 38, 13, 42, 10, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 150;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> wires = {};
    vector<int> gridConnections = {4, 29, 49, 19, 47, 46, 45, 39, 26, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 207;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> wires = {};
    vector<int> gridConnections = {43, 31, 37, 34, 41, 33, 47, 10, 28, 19};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 467;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> wires = {};
    vector<int> gridConnections = {37, 22, 3, 31, 38, 9, 29, 18};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 292;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> wires = {};
    vector<int> gridConnections = {9, 1, 8, 29, 19, 35, 41, 45};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 262;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> wires = {};
    vector<int> gridConnections = {11, 16, 28, 4, 7, 24, 33, 41};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 334;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> wires = {};
    vector<int> gridConnections = {34, 42, 6, 18, 3, 25, 15, 36};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 410;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> wires = {};
    vector<int> gridConnections = {11, 14};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 1060;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> wires = {};
    vector<int> gridConnections = {43, 45};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 568;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> wires = {};
    vector<int> gridConnections = {31, 10, 8, 45};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 495;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> wires = {};
    vector<int> gridConnections = {31, 13, 20, 46, 39, 45};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 493;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> wires = {"00000000000101000000001000000000000000000", "00000001000000000011000000000000000000000", "00000001000000010001111000000000000000000", "00000000001000000100010000010000000000010", "00000000001000010010000000001000000000000", "00000000000100110000000010000000001000000", "00000000000000000000110000001000000000000", "01100000000010000000000010010000000100100", "00000000000000000100010000010000000000000", "00000000000000001000000000000001000000001", "00011000000000000000000000101010000000000", "10000100000001100000000000100000000000000", "00000001000000000000000001000100000000000", "10000000000100000000010000110100000000000", "00000100000100000101000000000000001100000", "00101100000000000000000000010100000000000", "00000000010000000000000000000000100010000", "00010000100000100000000000000000000000010", "01001000000000000000000010010000010000000", "01100000000000100000000101000000001001010", "00100010000000000000000010010010000000000", "00110010100001000000000000000000000001000", "10100000000000000000000100000000000001000", "00000000000000000001001001001000000000000", "00000101000000000010100000000000000000000", "00000000000010000001000100000000000000100", "00000000001101000000000000000000000000000", "00010001100001010010100000000000000000000", "00001010001000000000000100000000011000000", "00000000000011010000000000000000000000000", "00000000001000000000100000000000000000000", "00000000010000000000000000000000100000000", "00000000000000001000000000000001000000000", "00000000000000000010000000001000000000000", "00000100000000100001000000001000000100000", "00000001000000100000000000000000001000000", "00000000000000001000000000000000000000000", "00000000000000000001011000000000000000000", "00000001000000000000000001000000000000000", "00010000000000000101000000000000000000000", "00000000010000000000000000000000000000000"};
    vector<int> gridConnections = {7, 31};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 528;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> wires = {"01001100000001001000100100110000000000010", "10100010100010000000000000100100101100000", "01000000000000000000000001000000000000000", "00000010000101010100000000000000000000000", "10000000000010001000010010000000000000010", "10000000000000000000000000010000000001000", "01010000000000010000000000010000010000000", "00000000010000010000000001000000001000010", "01000000000000000001000010000000100010110", "00000001001010100010010000010000011010000", "00000000010100000010000100110010000000010", "00010000001000001000001000000000011100100", "01001000010000010000110010001000111000001", "10010000000000001100000000000000000000000", "00000000010000001000000010000000000000100", "00010011000010000000001101000001010001000", "10001000000101100000010000000000000001000", "00010000000001000000010000010000000000010", "00000000011000000001001000100000000010101", "00000000100000000010001000011000000100000", "10000000000010000000000010100001000000000", "00001000010010001100000000000000100001011", "00000000000100010011000000000100001000000", "10000000001000010000000000000100110010001", "00001000100010100000100000000000010000000", "00100001000000010000000000011100001110000", "11000000001000000010100000000010000001011", "10000110011000000101000001000010001101111", "00000000000010000001000001000000101000101", "01000000000000000000001101000000000000000", "00000000001000000000000000110000010000000", "00000000000000010000100000000000000001100", "01000000100010000000010100001000000000010", "00000010010110010000000110000010000100011", "01000001010110000000001001011000000100000", "01000000000100000001000001010000011010000", "00000000110000000010000101000000000100100", "00000100000000011000010000110001000000000", "00000000100100100010000000011001000010010", "10001001101000000100010000110000110000100", "00000000000010000010010100111000010000000"};
    vector<int> gridConnections = {40};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 670;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> wires = {};
    vector<int> gridConnections = {41, 43, 18, 16, 0, 42, 37, 45};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 322;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> wires = {"000000000100000000000000000000000001000000000", "001010000000100000000000000000000000100000000", "010000000000000000000000000000000000000000000", "000000000000000000010000000000000000000000000", "010000000000100000000000000000000000100000000", "000000000001000000000000000000010001000000000", "000000000000000000000000000100000000000000000", "000000000000000000000000000000000000000000100", "000000000000010000000000000000000010000000000", "100000000000000000000000000000010000000001000", "000000000000000000000000000000000000010000000", "000001000000000000000000000000000000000000000", "010010000000000000000000000000000000000000000", "000000001000000000000001001000100010000000000", "000000000000000000000000100000000000000000000", "000000000000000000000000000000000000000000000", "000000000000000000000001000001000000000000000", "000000000000000000000000010001100000000000000", "000000000000000000000000000000000001000000000", "000100000000000000000100000000001000000000000", "000000000000000000000000000100000000001000001", "000000000000000000010000100010000000000000000", "000000000000000000000000000100000000011000011", "000000000000010010000000010000000000000000000", "000000000000001000000100000010000000000000000", "000000000000000001000001001000000000000110000", "000000000000010000000000010001000000000000000", "000000100000000000001010000000000000000000001", "000000000000000000000100100000001000000000000", "000000000000000011000000001000000000000000000", "000000000000010001000000000000000010000110000", "000001000100000000000000000000000001000000000", "000000000000000000010000000010000000000000000", "000000000000000000000000000000000000010000010", "000000001000010000000000000000100000000010000", "100001000000000000100000000000010000000000000", "010010000000000000000000000000000000000000000", "000000000010000000000010000000000100000000000", "000000000000000000001010000000000000000000001", "000000000000000000000000010000100000000000000", "000000000000000000000000010000100010000000000", "000000000100000000000000000000000000000000000", "000000010000000000000000000000000000000000000", "000000000000000000000010000000000100000000000", "000000000000000000001010000100000000001000000"};
    vector<int> gridConnections = {43, 12, 35, 30, 15, 42, 14};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 113;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> wires = {};
    vector<int> gridConnections = {22, 10, 21};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 553;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> wires = {};
    vector<int> gridConnections = {24, 1, 13, 39, 31};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 228;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> wires = {"010011010001101000101010001010010000001110", "101010010101100001100011001100100000011011", "010001000010000100100000100101000000000010", "000000000000000000000000000000000010100000", "110000001101000000001001110010001000000100", "101000000100000110010101100101111100000100", "000000000000000011101001110000000100000011", "110000000100001001110000000011000100000000", "000010000010000000010110010011110000000010", "010011010010001010101000100010010000001000", "001000001101010110000000001100000000001001", "110010000010001110000010100010010000011000", "110000000000000110001010010000001000000001", "000000000010000100000011010101001000010111", "100000010101000111000000010011010000001110", "001001000011111000000100101000011100011001", "000001100111101000111100110110001000000100", "010000110000001000011100100100001100001000", "111000110100000010001011001001000100010101", "000001011000000011000000001001011000000100", "100010100100100011100000100110010000001010", "000001001000000111000001001100101000001101", "110000001001110000100001110001001100010010", "010011100000010000100110011000010000000100", "001011100101000111001010010000100000000001", "000010101000111010000011100000001100000100", "110000000010000100110101000010110100000111", "011001000010010011001100000000000000001100", "100010011101001010001000001000101100000011", "001001011000011000110010000000101100000000", "010001001000000000000100101011000000000101", "100001001101001100011001001000001000000001", "000011000000110111010110010011010000000100", "000001110000000101100010011011000000001101", "000100000000000000000000000000000001100000", "000000000000000000000000000000000010000000", "000100000000000000000000000000000010000000", "010000000001010100100010000000000000000010", "110000000111001101001100000100000100000010", "100011000000011010110101011100101100000010", "111000101000011000001010001010000000011100", "010000100010110100100100101010110100000000"};
    vector<int> gridConnections = {30, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 457;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> wires = {"0000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000", "0000000000000000000000000000000010000000001", "0000010000100001000001000000000000010010000", "0000000000000100000000000000011000001000000", "0001000000000001000101000010000000010010000", "0000000000001000000000000000000000000000000", "0000000000000000000000100000000000000000000", "0000000000000000000000000000000000000000000", "0000000000010000000000000100000000000000000", "0001000000000001000000000010000000010000000", "0000000001000000000000000100000100000000000", "0000001000000000000000000000000000000000000", "0000100000000000000000000000010001001000000", "0000000000000000010000000001000000000000000", "0001010000100000000100000010000000010010000", "0000000000000000001000000000000000000000100", "0000000000000010000000100000000000000000000", "0000000000000000100000000000000000000101010", "0000010000000001000000010010000000000010000", "0000000000000000000000000000100000000000001", "0001010000000000000000000010000000010000000", "0000000100000000010000000001000000000000000", "0000000000000000000100000010000000000000000", "0000000000000000000000000100000000100000000", "0000000001010000000000001000000000100000000", "0000010000100001000101010000000000000010000", "0000000000000010000000100000000000000000000", "0000000000000000000010000000000010000000000", "0000100000000100000000000000001000000000000", "0000100000000000000000000000010001000000000", "0000000000010000000000000000000000000000000", "0010000000000000000000000000100000000000000", "0000000000000100000000000000001000000000000", "0000000000000000000000001100000000000000000", "0001010000100001000001000000000000000000000", "0000100000000100000000000000000000000000000", "0000000000000000001000000000000000000000000", "0001010000000001000100000010000000000000000", "0000000000000000001000000000000000000000100", "0000000000000000100000000000000000000001010", "0000000000000000001000000000000000000000100", "0010000000000000000010000000000000000000000"};
    vector<int> gridConnections = {0, 29, 1, 18, 15, 20, 24, 6, 8, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> wires = {};
    vector<int> gridConnections = {32, 39, 11, 16, 28, 22};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 439;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> wires = {};
    vector<int> gridConnections = {39, 8};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 483;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> wires = {};
    vector<int> gridConnections = {3, 6, 48};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 508;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> wires = {"000000000000000000000000000000000000001000", "000000000000100101000000000110010010000000", "000000000000000000001000101000000000000000", "000010000000010000010000010000000000000000", "000100000010010000100000010000000000100000", "000000000000000000000000000000000000000010", "000000000000000010000000000000000001010001", "000000000000000000000100100000000000000000", "000000000000000000000010000000101000000000", "000000000000100100000000000110000000000000", "000010000000010000110000010000000000000000", "000000000000001010000000000000000001010000", "010000000100000100000000000110010010000000", "000110000010000000110000010000000000100000", "000000000001000000000000000000000001010000", "010000000100100000000000000000010000000000", "000000100001000000000000000000000000000001", "010000000000000000000000000100010000000000", "000010000010010000010000000000000000000000", "000100000010010000100000010000000000100000", "001000000000000000000100001000000000000000", "000000010000000000001000101000000000000000", "000000001000000000000000000000101000000000", "000000000000000000000000000001000000000000", "001000010000000000000100001000000000000000", "000110000010010000010000000000000000100000", "001000000000000000001100100000000000000000", "010000000100100001000000000010000010000000", "010000000100100000000000000100010010000000", "000000000000000000000001000000000000000000", "000000001000000000000010000000000000000000", "010000000000100101000000000010000010000000", "000000001000000000000010000000000000000000", "000000000000000000000000000000000000000000", "010000000000100000000000000110010000000000", "000000100001001000000000000000000000010001", "000010000000010000010000010000000000000000", "000000100001001000000000000000000001000001", "100000000000000000000000000000000000000100", "000000000000000000000000000000000000001000", "000001000000000000000000000000000000000000", "000000100000000010000000000000000001010000"};
    vector<int> gridConnections = {41, 29, 39, 5, 33, 22, 27, 19, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> wires = {"000010001110100000011010000001001111000010011", "000000000000000000000000000000000000000000000", "000100110110110010001111011100000000011001110", "001011010100000110100100001011111100001011100", "100100001001110100001111011101100100111100010", "000100010000011000011110010010000001011011011", "001000001010100100011111001111110011010101110", "001101001111001110001110111111000101111101010", "100010110100011100100100101101111011010000001", "101100011010010011010101111010000000011000000", "101000110100000001110011100101111111100000111", "000010010000000001111010010010001000110100101", "101010100000001011000110100110111001010001100", "001011001100000000101010101100001100100011100", "000001011000100101000110111100101000100110010", "000110111000001000001001110011000110010111110", "001100010100100000010110000001101111111100110", "000000000111101000100011000000110100000011000", "000100001011010001010000110000100101010010100", "100001100111000010100101100010001110111100100", "101011110001010100000100010000101001110110000", "001111111100101010011011010110111001000010100", "101011110011111011000100001011110011111100111", "001010100110000101010100111000010010101000000", "000000011110111100110001010100001000101000100", "001011010101001100101101100100000111000110111", "001110111100011000000011000100001101110110101", "001010111010111000000100111001010001001000010", "000101110101100100010110000001100110001111111", "100110111010000110000010000110000001110010001", "000110101010101011101110000010001100010110001", "000100101010100001000111000100000010000011101", "100100001011111010011100101000100000010100111", "100110010010010111110000011010100010111010001", "100000101010000110010011010010010101101011111", "100001111010100010101110011101000010000010000", "000010010011011010011011101001000110000011110", "001011111101100110111010001001101100000011111", "001111010100000010010011100110000110000010011", "000010110001001110011010011010101000000001011", "100101000000011101101100011011110111111001100", "001101110000110101000000000010010010110110110", "001100100011110110110110111010011010110011010", "101011110010001110000010010110001010111101101", "100001001011000000000010011011111110011100010"};
    vector<int> gridConnections = {1, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 510;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> wires = {};
    vector<int> gridConnections = {19};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 687;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> wires = {"000101101111111000010101001001001100101000", "000001111110001100010011010001010101101100", "000001110111111010000011000111010101100110", "100000101101001001010101011110011100111001", "000001001010000100000011011111011101110111", "111010110100111011010111001010110101000111", "111101000111110001010000010101001100100101", "011001000000010011010000011011100100111001", "110110000000001111000111010111001101011110", "111101100010001101000101000001011001110011", "111010100100110000010000001000111001010010", "101100100000001101010101000101011101001111", "101001100010011111010101010001111101101000", "101001110010101100010100000101100000001111", "111101001101110111000001000100011101010011", "010010001101111000000111011110110100100100", "001001011000101001010111000110000101011110", "000101111101101010010110011100101101101000", "000000000000000000001000100000000010000000", "110101110011110011000001010110111101111110", "000000000000000000100000000000000010000000", "100101001101110111000001010101000000110101", "011011001000000111000000010000111000100001", "111111001101101110010100001000010000100100", "000000000000000000100000000000000010000000", "010110111000100101010110001100010001101111", "100111010010000101000001010110010000010101", "001110101001011111010100011011010100110100", "001111011000000110010000001101001001001111", "111010111101110000000100000110000001000100", "000001010010110101010010000000000101110011", "011111000111101100010011011100000101000101", "100110101111101001010010000010000101100010", "111111111001101111010000000100111001100010", "000000000000000000101000100000000000000000", "011011001111101011010000010011111100011100", "111110110100100101010111010100101100001111", "000110011110001010010100001100100001000101", "110100011001110011010000010010000001100111", "011011101001010110010101011111010001111000", "001011001111011010010000010010101100101001", "000111110101011000000110011010110000111010"};
    vector<int> gridConnections = {18, 16};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 327;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> wires = {};
    vector<int> gridConnections = {27, 19, 6, 7, 4, 32, 29};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 82;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> wires = {"00100100000000010000001100000000000001000", "00100000000000000000001100010000000001000", "11000100000000010000001100000000000001000", "00000000001000000000010000000000100000001", "00000011000010001110000000001110011000000", "10100000000000010000001000010000000001000", "00001001000110101110000000000110010000010", "00001010100010101001000000100010010000100", "00000001000110100000100000100100001000110", "00000000000000000000000010000000000000000", "00010000000000000000010000000001100010001", "00000010100001001000100000101110001000010", "00001011100000001111100000001010010000110", "00000000000100100010100000101100000000100", "00000011100001001011100000101110001000110", "10100100000000000000001000010000000001000", "00001011000110100110000000000010011000110", "00001010000010001011100000001000011000000", "00001010000011101101000000101100011000110", "00000001000010100110100000101110011000110", "00000000100111100101000000101000001000100", "00010000001000000000000000000001100010001", "11100100000000010000000100000000000001000", "11100000000000000000001000010000000001000", "00000000010000000000000000000000000000000", "00000000000000000000000000000000000100000", "00000001100101100011100000000010001000110", "01000100000000010000000100000000000001000", "00001000000111100111100000000110011000110", "00001010100101100011000000001010001000010", "00001011000110101001000000101100011000110", "00000000001000000000010000000000100010001", "00010000001000000000010000000001000010001", "00001011000010001111000000001010000000110", "00001000100100101111100000101110000000110", "00000000000000000000000001000000000000000", "00000000001000000000010000000001100000000", "11100100000000010000001100010000000000000", "00000001100011101011100000101010011000010", "00000010100110101011000000101110011000100", "00010000001000000000010000000001100000000"};
    vector<int> gridConnections = {40, 14, 25, 24, 5};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> wires = {"000000010000000100000000001000100000000000", "000000000000000000000001100000000000000000", "000000000000000000000000100000000000000000", "000000000000000000000000000100010000000000", "000000100000001010000000000000000001000000", "000000000000000000000000000000000000000000", "000010000000001010000000000000000001000100", "100000000000000100000000000000000000000000", "000000000001010000111010000010000000001010", "000000000000000000000000000000000000000000", "000000000001010000011010000000000100001000", "000000001010010000111010010010000000000010", "000000000000000001000000000001000000000001", "000000001011000000001000000000000100001000", "000010100000000010000000000000000000000000", "100000010000000000000100001000001000100000", "000010100000001000000000000000000001000100", "000000000000100000000000000001000010000000", "000000001001000000000010000010000100001000", "000000001011000000001010010000000100000000", "000000001011010000010010010010000000001010", "000000000000000100000000000000101000000000", "000000001011000000111000000010000100001000", "010000000000000000000000000000000000010000", "011000000000000000000000000000000000000000", "000000000001000000011000000010000000000010", "100000000000000100000000000000101000000000", "000100000000000000000000000000010000000000", "000000001001000000101010010000000100001000", "000000000000100001000000000000000000000001", "100000000000000000000100001000001000000000", "000100000000000000000000000100000000000000", "000000000000000100000100001000100000000000", "000000000010010000110010000010000000000000", "000000000000000001000000000000000000000001", "000010100000000010000000000000000000000000", "000000000000000100000000000000000000000000", "000000000000000000000001000000000000000000", "000000001010010000101010000010000000000010", "000000100000000010000000000000000000000000", "000000001001000000001000010000000000001000", "000000000000100000000000000001000010000000"};
    vector<int> gridConnections = {0, 9, 34, 27, 4, 10, 5, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 57;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> wires = {"0"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> wires = {"000", "000", "000"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> wires = {"01000", "10100", "01010", "00100", "00000"};
    vector<int> gridConnections = {2, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> wires = {"00000001000", "00000110000", "00010000000", "00100000000", "00000000000", "01000010000", "01000100000", "10000000100", "00000001001", "00000000000", "00000000100"};
    vector<int> gridConnections = {2, 4, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> wires = {};
    vector<int> gridConnections = {0, 10, 20, 30, 48};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 943;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> wires = {};
    vector<int> gridConnections = {0, 2, 4, 6, 16};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 779;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> wires = {"0100000", "1000000", "0000000", "0000100", "0001010", "0000100", "0000000"};
    vector<int> gridConnections = {0, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> wires = {"000100000", "000000010", "000010000", "100001000", "001000000", "000100000", "000000010", "010000100", "000000000"};
    vector<int> gridConnections = {2, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> wires = {"01000000", "10000000", "00011000", "00100000", "00100000", "00000010", "00000100", "00000000"};
    vector<int> gridConnections = {1, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> wires = {"0100000000000", "1010000000000", "0100000000000", "0000000100000", "0000011000000", "0000100000000", "0000100100000", "0001001000000", "0000000000000", "0000000000100", "0000000001000", "0000000000000", "0000000000000"};
    vector<int> gridConnections = {2, 4, 12};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> wires = {"0000000001", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "0000000000", "1000000000"};
    vector<int> gridConnections = {3, 6, 8};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> wires = {"0100", "1000", "0001", "0010"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> wires = {"0000", "0000", "0001", "0010"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> wires = {"010000000000000000000000000", "101000000000000000000000000", "010000000000000000000000000", "000010000000000000000000000", "000101000000000000000000000", "000010000000000000000000000", "000000010000000000000000000", "000000101000000000000000000", "000000010100000000000000000", "000000001000000000000000000", "000000000001000000000000000", "000000000010100000000000000", "000000000001010000000000000", "000000000000100000000000000", "000000000000000100000000000", "000000000000001010000000000", "000000000000000101000000000", "000000000000000010000000000", "000000000000000000010000000", "000000000000000000101000000", "000000000000000000010100000", "000000000000000000001000000", "000000000000000000000001000", "000000000000000000000010100", "000000000000000000000001010", "000000000000000000000000101", "000000000000000000000000010"};
    vector<int> gridConnections = {0, 3, 6, 10};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 128;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> wires = {"000000", "001000", "010000", "000010", "000101", "000010"};
    vector<int> gridConnections = {0, 5};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> wires = {"01000000", "10000000", "00011000", "00101000", "00110000", "00000010", "00000100", "00000000"};
    vector<int> gridConnections = {0, 2, 5};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> wires = {"00000000", "00000000", "00010000", "00101000", "00010100", "00001000", "00000001", "00000010"};
    vector<int> gridConnections = {0, 2, 6};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> wires = {"01100000", "10100000", "11000000", "00001000", "00010000", "00000010", "00000100", "00000000"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> wires = {"01100000000", "10100000000", "11000000000", "00001110000", "00010110000", "00011010000", "00011100000", "00000000111", "00000001011", "00000001101", "00000001110"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> wires = {"010000000", "100000000", "000100000", "001000000", "000001100", "000010000", "000010000", "000000001", "000000010"};
    vector<int> gridConnections = {4, 8};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> wires = {"00000000000", "00111000000", "01001000000", "01001000000", "01110000000", "00000011000", "00000100100", "00000100100", "00000011000", "00000000000", "00000000000"};
    vector<int> gridConnections = {0, 5};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> wires = {"0000000000000000000", "0000011000010000000", "0000000000000000000", "0000100000000000000", "0001000001000000000", "0100000000000000000", "0100000000010000000", "0000000000000000000", "0000000000100000000", "0000100000000000000", "0000000010000000000", "0100001000000000000", "0000000000000111100", "0000000000001010000", "0000000000001100000", "0000000000001000100", "0000000000001001000", "0000000000000000001", "0000000000000000010"};
    vector<int> gridConnections = {1, 2, 8, 12};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 59;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> wires = {"00000", "00100", "01000", "00000", "00000"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> wires = {"0000000", "0010000", "0100000", "0000100", "0001010", "0000100", "0000000"};
    vector<int> gridConnections = {0, 1, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> wires = {"00000", "00000", "00000", "00000", "00000"};
    vector<int> gridConnections = {0, 1, 2, 3, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> wires = {"0"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> wires = {"000000", "000000", "000000", "000010", "000100", "000000"};
    vector<int> gridConnections = {3, 5};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> wires = {"0000000", "0000000", "0000000", "0000100", "0001010", "0000101", "0000010"};
    vector<int> gridConnections = {2, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> wires = {"000100100", "000010001", "000010000", "100001000", "011000000", "000100000", "100000010", "000000100", "010000000"};
    vector<int> gridConnections = {3, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> wires = {"01100000", "10100000", "11000000", "00000000", "00000111", "00001011", "00001101", "00001110"};
    vector<int> gridConnections = {0, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> wires = {"00000", "00000", "00010", "00101", "00010"};
    vector<int> gridConnections = {1, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> wires = {};
    vector<int> gridConnections = {0, 1, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 936;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> wires = {"000000", "001000", "010000", "000000", "000001", "000010"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> wires = {"0100", "1000", "0000", "0000"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> wires = {"0110000000000000000", "1001000000000000000", "1000000000000000000", "0100100000000000000", "0001010000000000000", "0000100000000000000", "0000000111100000000", "0000001011100000000", "0000001101100000000", "0000001110100000000", "0000001111000000000", "0000000000001000000", "0000000000010100000", "0000000000001000000", "0000000000000001010", "0000000000000010100", "0000000000000001010", "0000000000000010100", "0000000000000000000"};
    vector<int> gridConnections = {3, 6};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 80;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> wires = {"011100000000", "100000000000", "100000000000", "100000000000", "000001111000", "000010110000", "000011011000", "000011100000", "000010100000", "000000000010", "000000000100", "000000000000"};
    vector<int> gridConnections = {0, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> wires = {"0000", "0010", "0100", "0000"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> wires = {"01000000", "10000000", "00010000", "00101000", "00010000", "00000010", "00000101", "00000010"};
    vector<int> gridConnections = {1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> wires = {"0100000", "1000000", "0000000", "0000000", "0000001", "0000001", "0000110"};
    vector<int> gridConnections = {0, 5};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> wires = {"010000000", "101000000", "010100000", "001000000", "000001000", "000010000", "000000000", "000000001", "000000010"};
    vector<int> gridConnections = {2, 6, 8};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> wires = {"01000", "10010", "00000", "01000", "00000"};
    vector<int> gridConnections = {2, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> wires = {"010", "100", "000"};
    vector<int> gridConnections = {2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> wires = {"0110000000", "1010000000", "1100000000", "0000001000", "0000011000", "0000100000", "0001100000", "0000000000", "0000000000", "0000000000"};
    vector<int> gridConnections = {1, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> wires = {"01111000000000000000", "10111000000000000000", "11011000000000000000", "11101000000000000000", "11110000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000000", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000000000001", "00000000000001111110"};
    vector<int> gridConnections = {2, 17};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 99;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> wires = {"0000", "0000", "0001", "0010"};
    vector<int> gridConnections = {1, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> wires = {"01100", "10100", "11000", "00000", "00000"};
    vector<int> gridConnections = {1, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> wires = {"00", "00"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> wires = {"0100", "1000", "0001", "0010"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> wires = {"000", "001", "010"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> wires = {"010000", "100000", "000110", "001000", "001000", "000000"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> wires = {"0100000", "1000000", "0001100", "0010000", "0010000", "0000000", "0000000"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> wires = {"01100000", "10000000", "10000000", "00001100", "00010000", "00010000", "00000001", "00000010"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> wires = {"000000", "001000", "010000", "000000", "000000", "000000"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> wires = {"00100", "00001", "10000", "00000", "01000"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> wires = {"011000", "100000", "100000", "000000", "000001", "000010"};
    vector<int> gridConnections = {3, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> wires = {"011000000", "100000000", "100000000", "000011100", "000100000", "000100000", "000100000", "000000000", "000000000"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> wires = {"010000", "101000", "010100", "001000", "000001", "000010"};
    vector<int> gridConnections = {2, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> wires = {"0100", "1010", "0100", "0000"};
    vector<int> gridConnections = {3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> wires = {"00000", "00100", "01000", "00001", "00010"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> wires = {"010000", "100000", "000000", "000000", "000000", "000000"};
    vector<int> gridConnections = {1, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> wires = {"01000000000", "10000000000", "00010000000", "00101100000", "00010000000", "00010000000", "00000000000", "00000000000", "00000000000", "00000000000", "00000000000"};
    vector<int> gridConnections = {0, 2, 6, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> wires = {};
    vector<int> gridConnections = {2, 7, 9, 14, 15, 16, 17, 19, 25, 29, 33, 38};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> wires = {"011", "101", "110"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> wires = {"01000000", "10100000", "01010000", "00100000", "00000100", "00001010", "00000101", "00000010"};
    vector<int> gridConnections = {2, 6};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> wires = {"0110000000000000000000", "1000000000000000000000", "1000000000000000000000", "0000110000000000000000", "0001000000000000000000", "0001000000000000000000", "0000000110000000000000", "0000001000000000000000", "0000001000000000000000", "0000000000100000000000", "0000000001000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000", "0000000000000000000000"};
    vector<int> gridConnections = {0, 3, 6, 18};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 104;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> wires = {"000000000001100", "001110000000000", "010000000000000", "010010000000000", "010100000000000", "000000000000000", "000000010000010", "000000100000010", "000000000110000", "000000001000000", "000000001000000", "100000000000100", "100000000001000", "000000110000000", "000000000000000"};
    vector<int> gridConnections = {1, 8, 13};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> wires = {"00000", "00000", "00011", "00100", "00100"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> wires = {"0100000000", "1000000000", "0000000000", "0000000000", "0000010000", "0000100000", "0000000110", "0000001001", "0000001001", "0000000110"};
    vector<int> gridConnections = {0, 6};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> wires = {"01111111111111111111111110000000000000000000000000", "10111111111111111111111110000000000000000000000000", "11011111111111111111111110000000000000000000000000", "11101111111111111111111110000000000000000000000000", "11110111111111111111111110000000000000000000000000", "11111011111111111111111110000000000000000000000000", "11111101111111111111111110000000000000000000000000", "11111110111111111111111110000000000000000000000000", "11111111011111111111111110000000000000000000000000", "11111111101111111111111110000000000000000000000000", "11111111110111111111111110000000000000000000000000", "11111111111011111111111110000000000000000000000000", "11111111111101111111111110000000000000000000000000", "11111111111110111111111110000000000000000000000000", "11111111111111011111111110000000000000000000000000", "11111111111111101111111110000000000000000000000000", "11111111111111110111111110000000000000000000000000", "11111111111111111011111110000000000000000000000000", "11111111111111111101111110000000000000000000000000", "11111111111111111110111110000000000000000000000000", "11111111111111111111011110000000000000000000000000", "11111111111111111111101110000000000000000000000000", "11111111111111111111110110000000000000000000000000", "11111111111111111111111010000000000000000000000000", "11111111111111111111111100000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000010", "00000000000000000000000000000000000000000000000101", "00000000000000000000000000000000000000000000000010"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 923;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> wires = {"0100000000", "1000000000", "0001000000", "0010100000", "0001000000", "0000001000", "0000010000", "0000000010", "0000000101", "0000000010"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> wires = {"00000", "00000", "00011", "00100", "00100"};
    vector<int> gridConnections = {1, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> wires = {"0110", "1000", "1000", "0000"};
    vector<int> gridConnections = {3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> wires = {"000000", "001000", "010000", "000011", "000100", "000100"};
    vector<int> gridConnections = {1, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> wires = {"0100000000000000", "1010000000000000", "0101000000000000", "0010000000000000", "0000010000000000", "0000101000000000", "0000010100000000", "0000001010000000", "0000000100000000", "0000000000100000", "0000000001000000", "0000000000000100", "0000000000000010", "0000000000010000", "0000000000001000", "0000000000000000"};
    vector<int> gridConnections = {12, 11, 10};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 58;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> wires = {"0000000", "0010000", "0101000", "0010000", "0000000", "0000000", "0000000"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> wires = {"00011110101", "00000000000", "00010101100", "10100000101", "10000100101", "10101011100", "10000100101", "00100100101", "10111111001", "00000000000", "10011011100"};
    vector<int> gridConnections = {1, 9};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> wires = {"01000", "10000", "00011", "00100", "00100"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> wires = {"0000", "0000", "0001", "0010"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> wires = {"01000000000", "10000110000", "00010000000", "00100000000", "00000000000", "01000010000", "01000100000", "00000000100", "00000001001", "00000000000", "00000000100"};
    vector<int> gridConnections = {2, 4, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> wires = {"000000", "001000", "010000", "000011", "000100", "000100"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> wires = {"01000", "10000", "00010", "00100", "00000"};
    vector<int> gridConnections = {0, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> wires = {"0000", "0000", "0000", "0000"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> wires = {"0000000", "0000000", "0001000", "0010100", "0001010", "0000101", "0000010"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> wires = {"0100", "1001", "0001", "0110"};
    vector<int> gridConnections = {1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> wires = {"01000", "10000", "00000", "00000", "00000"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> wires = {"0111100000", "1011100000", "1101100000", "1110100000", "1111000000", "0000000010", "0000000010", "0000000010", "0000011100", "0000000000"};
    vector<int> gridConnections = {0, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> wires = {"0000", "0001", "0000", "0100"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> wires = {"000101", "000001", "000011", "100001", "001001", "111110"};
    vector<int> gridConnections = {3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> wires = {"0100000", "1000000", "0001100", "0010100", "0011000", "0000001", "0000010"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> wires = {"00000", "00000", "00010", "00101", "00010"};
    vector<int> gridConnections = {1, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> wires = {"00100000", "00010000", "10001010", "01000101", "00100010", "00010001", "00101000", "00010100"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> wires = {};
    vector<int> gridConnections = {2, 5, 7};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 984;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> wires = {"01000000000000000000000000000000000000000000000000", "10100000000000000000000000000000000000000000000000", "01000000000000000000000000000000000000000000000000", "00001000000000000000000000000000000000000000000000", "00010100000000000000000000000000000000000000000000", "00001000000000000000000000000000000000000000000000", "00000001000000000000000000000000000000000000000000", "00000010100000000000000000000000000000000000000000", "00000001010000000000000000000000000000000000000000", "00000000101000000000000000000000000000000000000000", "00000000010000000000000000000000000000000000000000", "00000000000010000000000000000000000000000000000000", "00000000000101000000000000000000000000000000000000", "00000000000010100000000000000000000000000000000000", "00000000000001010000000000000000000000000000000000", "00000000000000101000000000000000000000000000000000", "00000000000000010100000000000000000000000000000000", "00000000000000001010000000000000000000000000000000", "00000000000000000101000000000000000000000000000000", "00000000000000000010000000000000000000000000000000", "00000000000000000000010000000000000000000000000000", "00000000000000000000101000000000000000000000000000", "00000000000000000000010100000000000000000000000000", "00000000000000000000001010000000000000000000000000", "00000000000000000000000101000000000000000000000000", "00000000000000000000000010100000000000000000000000", "00000000000000000000000001010000000000000000000000", "00000000000000000000000000101000000000000000000000", "00000000000000000000000000010100000000000000000000", "00000000000000000000000000001000000000000000000000", "00000000000000000000000000000001000000000000000000", "00000000000000000000000000000010100000000000000000", "00000000000000000000000000000001010000000000000000", "00000000000000000000000000000000101000000000000000", "00000000000000000000000000000000010100000000000000", "00000000000000000000000000000000001010000000000000", "00000000000000000000000000000000000101000000000000", "00000000000000000000000000000000000010100000000000", "00000000000000000000000000000000000001010000000000", "00000000000000000000000000000000000000100000000000", "00000000000000000000000000000000000000000100000000", "00000000000000000000000000000000000000001010000000", "00000000000000000000000000000000000000000101000000", "00000000000000000000000000000000000000000010100000", "00000000000000000000000000000000000000000001010000", "00000000000000000000000000000000000000000000101000", "00000000000000000000000000000000000000000000010100", "00000000000000000000000000000000000000000000001010", "00000000000000000000000000000000000000000000000101", "00000000000000000000000000000000000000000000000010"};
    vector<int> gridConnections = {0, 5, 8};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 909;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> wires = {"01100", "10100", "11010", "00100", "00000"};
    vector<int> gridConnections = {2, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> wires = {"000000000", "001000000", "010010000", "000010000", "001100000", "000000000", "000000001", "000000001", "000000110"};
    vector<int> gridConnections = {3, 6};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> wires = {"01111", "10111", "11011", "11101", "11110"};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> wires = {"0010000000000", "0001000000000", "1000000100000", "0100001000000", "0000010000000", "0000100000000", "0001000000000", "0010000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000"};
    vector<int> gridConnections = {3, 7, 9, 12};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> wires = {"0100000", "1000000", "0001000", "0010100", "0001000", "0000001", "0000010"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> wires = {"0100000000", "1010000000", "0101000000", "0010000000", "0000010000", "0000101000", "0000010100", "0000001000", "0000000001", "0000000010"};
    vector<int> gridConnections = {2, 6};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> wires = {"01100000", "10000000", "10000000", "00000000", "00000110", "00001010", "00001101", "00000010"};
    vector<int> gridConnections = {0, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> wires = {};
    vector<int> gridConnections = {0, 1, 2, 3, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 1035;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> wires = {"000000", "001100", "010000", "010000", "000001", "000010"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> wires = {"0010", "0001", "1000", "0100"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> wires = {"0000", "0010", "0100", "0000"};
    vector<int> gridConnections = {2, 0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> wires = {"000000", "001000", "010000", "000010", "000101", "000010"};
    vector<int> gridConnections = {1, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> wires = {"010000", "100000", "000100", "001000", "000001", "000010"};
    vector<int> gridConnections = {0, 2, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> wires = {"00000010", "00101000", "01001000", "00000100", "01100000", "00010000", "10000000", "00000000"};
    vector<int> gridConnections = {2, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> wires = {"00000", "00100", "01000", "00001", "00010"};
    vector<int> gridConnections = {0, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> wires = {"0000", "0000", "0001", "0010"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> wires = {"0100000000", "1010000000", "0100000000", "0000101000", "0001010000", "0000100000", "0001000000", "0000000000", "0000000000", "0000000000"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> wires = {"00000", "00000", "00010", "00101", "00010"};
    vector<int> gridConnections = {0, 4};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> wires = {"00000", "00000", "00010", "00101", "00010"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> wires = {};
    vector<int> gridConnections = {0, 10, 22, 30, 40};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 535;
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> wires = {"010000", "100000", "000100", "001010", "000100", "000000"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<string> wires = {"010000", "101000", "010000", "000010", "000101", "000010"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<string> wires = {};
    vector<int> gridConnections = {0};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 435;
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    vector<string> wires = {"00000", "00000", "00011", "00101", "00110"};
    vector<int> gridConnections = {0, 2};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    vector<string> wires = {"0000000110", "0010000000", "0100000000", "0000000001", "0000000000", "0000001000", "0000010000", "1000000000", "1000000000", "0001000000"};
    vector<int> gridConnections = {3, 4, 5};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    vector<string> wires = {"0110000", "1000000", "1000000", "0000100", "0001010", "0000101", "0000010"};
    vector<int> gridConnections = {0, 3};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    vector<string> wires = {"001", "000", "100"};
    vector<int> gridConnections = {0, 1};
    AddElectricalWires* pObj = new AddElectricalWires();
    clock_t start = clock();
    int result = pObj->maxNewWires(wires, gridConnections);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8547850&rd=12182&pm=8817
********************************************************************************
#define FR(i,a,b) for (int i = (a); i < (b); i++)
#define FOR(i,n) FR(i,0,n)
#define FORI(i,n) FOR(i,n.size())
#include <string>
#include <vector>
#define SZ size()
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <setjmp.h>
#include <regex.h>
#include <utility>
#define ll long long
#define ld long double
#define EPS 1e-9
using namespace std;
 
struct AddElectricalWires {
int maxNewWires(vector <string> wires, vector <int> grid) {
 int gno[64];
 FOR(i,64) gno[i]=-1;
 FORI(i,grid) gno[grid[i]] = i;
 int n=wires.SZ;
 FOR(k,n) FOR(i,n) FOR(j,n) if (gno[i] != -1 && wires[i][j] == '1') gno[j] = gno[i];
 int ng[64]={0};
 FOR(i,n) if (gno[i] != -1) ng[gno[i]]++;
 int ans=0;
 FOR(i,n) FOR(j,i) if (gno[i]==gno[j] && wires[i][j] == '0') ans++;
 int maxgrid = -1;
 FOR(i,64) maxgrid >?= ng[i];
 FOR(i,n) if (gno[i] == -1) ans += maxgrid;
 return ans;
}};
// Powered by ted

********************************************************************************
*******************************************************************************/