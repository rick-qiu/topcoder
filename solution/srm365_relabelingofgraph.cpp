/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=7860
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class RelabelingOfGraph {
public:
    vector<int> renumberVertices(vector<string> m);
};

vector<int> RelabelingOfGraph::renumberVertices(vector<string> m) {
    vector<int> ret;
    return ret;
}


int test0() {
    vector<string> m = {"0100", "0010", "0001", "0000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 2, 3};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> m = {"010", "001", "100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> m = {"00001", "00010", "00000", "00001", "00100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 4, 2, 3};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> m = {"0"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> m = {"0000", "0010", "1000", "0000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 0, 1, 3};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> m = {"011", "000", "010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 2, 1};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {8, 15, 9, 25, 5, 6, 10, 19, 26, 11, 0, 16, 1, 2, 13, 28, 20, 12, 29, 3, 14, 30, 21, 31, 32, 27, 4, 22, 23, 7, 17, 18, 24};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> m = {"000000000000010100000000000000010000000000", "000000010000100000000101001000000000001000", "000000000000000000000000000000000000000000", "000001010000000100000000000000101000000000", "000000000000000001000000000000100000000000", "000000010000000001000000000000100000000000", "000010000100000101010000111101000000001000", "000000000000000000010000000000000000000000", "001100000000000110000000000100110000000001", "000000000000000000000000000000000000000000", "100011000000000000000000000000000000011001", "000000010000100000000000000000000000000000", "000001000000000000000000000000000000000000", "000000000000100000010000000000000000000000", "000100000000000100000000001000001000100001", "000010010000000000000000000000010000000000", "010100000000000000000000000000110000000000", "000000000000000000010000001000100000000000", "000000101100010000000000000011100000000000", "000000000000000000000000000000000000000000", "000001000100001000000000000000000001010100", "000001010000000000000000000000000000010000", "000000000000010000000000001000010000100010", "001000010000010000000100000000100000000000", "001000000100000001010000000000000000000000", "000000000000000001000100000000010000000000", "000000000000000000000000000000000000000000", "000000000001010000000000010000000000000000", "000000010000000000000010010000000000001010", "001101000000000010000000010000000000000000", "000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000", "000000000000000001000000001000000000000000", "000000100000100001000001000000100000000000", "000100000000110000010001000000000000011010", "000010100000100000000110100101010000010100", "000000000000000000000000000000001000000000", "000000000000000000000000000000000000000000", "000011010000000001010000001000100000000000", "001101010000000000000000010000000000000000", "100000000000000000000000100000110000000001", "000000000100010100000000101000100000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {8, 14, 20, 21, 24, 31, 10, 32, 11, 33, 0, 26, 28, 27, 15, 22, 13, 36, 1, 37, 2, 30, 5, 16, 18, 29, 38, 25, 3, 12, 39, 40, 35, 9, 6, 4, 34, 41, 23, 19, 7, 17};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> m = {"00000000", "10000000", "00001100", "10000000", "01000000", "10000000", "01001101", "10000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 3, 0, 4, 2, 5, 1, 6};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> m = {"0000000010000000010010", "1000000011000000000000", "0100000100000010001000", "0100010001101000000000", "0000010010000000100110", "0000000000000000000000", "0000000011100001010001", "0000010010000000100000", "0000000000010001000000", "0000100000101001010010", "0000000000000000010000", "0000000000000000000000", "0000000010000000010000", "0000010000010000000100", "0000000001001000000000", "0000000000000000000000", "0000000000000001000000", "0000000000000000000010", "0000000000000000000000", "0000000000000000000000", "0000010000000000000000", "0100000000001000001010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 4, 0, 1, 8, 15, 2, 9, 16, 7, 10, 17, 11, 12, 6, 19, 18, 13, 20, 21, 14, 3};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> m = {"0000000000001000000000000", "0001000000000000001011000", "0000000000100000000000011", "0000000000000000000000001", "0000000000000100000000000", "0000000000000000000000000", "0000110000000000111100000", "1000000000000000000000000", "0010000000000000000000100", "1000010000000000000000001", "0000000000000010000000010", "0000000000100010000000000", "0000000000000000001000100", "0000000000000000000000001", "0000000000000100000000000", "0000100000000000000000000", "0001000010010010010010110", "0000000000000100001000010", "0000000000000010000000000", "0100010100100000100000001", "0010000000000000000000101", "0000000011100000100010000", "0000000000000000000000001", "0001000000000110000000100", "0000000000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 2, 10, 15, 17, 18, 0, 3, 8, 5, 12, 11, 19, 22, 21, 16, 7, 13, 20, 1, 9, 4, 23, 14, 24};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {25, 0, 7, 9, 19, 23, 1, 20, 10, 8, 13, 26, 28, 24, 29, 15, 21, 18, 16, 2, 11, 27, 17, 30, 3, 5, 6, 4, 31, 32, 14, 12, 22};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> m = {"00000000000000", "00000000000000", "10000001000000", "00000010000000", "01000000000000", "00000000000000", "10000100000000", "00000100000000", "11000000000000", "00001000000000", "00000010000000", "00000000001000", "00000000000000", "10000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 10, 0, 1, 9, 12, 4, 11, 5, 8, 3, 2, 13, 6};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 17, 9, 25, 18, 20, 23, 11, 38, 27, 28, 10, 12, 39, 24, 29, 19, 3, 4, 5, 21, 31, 26, 14, 32, 41, 42, 0, 34, 30, 15, 1, 22, 6, 37, 40, 7, 43, 44, 8, 33, 16, 13, 35, 45, 36};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> m = {"0000010000000001", "0000000000010000", "0000100000000000", "0000001010000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000010", "1000101010000000", "0000001100000001", "0000000100000000", "0000010000000001", "0010010010000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 0, 7, 8, 9, 10, 11, 13, 14, 15, 3, 1, 4, 12, 5, 6};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> m = {"0000000000010000000000000000001000000000000000000", "1000000010000000100000001000001000001000000000000", "0000000000000000100000000000000000001000000000000", "0000000000000000000000000000000000001000000000000", "0001000000010000000100001000000000100000000010001", "0000001010010000000000010000001000000001011000000", "1001000001000000000010000000000100000001000000000", "0000000000000010000000010000000000100000101000001", "1001000000000000010110000000001000001000100000000", "0000000000000000000010000000000000000000000000000", "0001000000000000000000000000000000001000010000000", "0011000000000000000000000000001000001000000000000", "0000100000010001000000100000000001000011000010000", "1000000100000001000100000000000000000001111000000", "1001011010100000000010000000001000101000010010000", "0000000000000000100000001000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000110000000000000010000000000001000000000", "0110100000110110000000010000000000000001000000001", "0000000000010001000000000010000000000000100010000", "0000000000000000000000000000000000000000000000000", "0000000000010010000100010000000001101000000000000", "1000000100000000010000010000100010000010000001000", "0000000000000000100000000000000000000000000000000", "0000000000000000000010000000000000000000000000000", "0010000000110000000110000000001000100000000000000", "0001000000000000100000000000001000000000000000000", "0000100110100000000000001110000001000000001000001", "0000000001000000000000000000000000001000000000000", "1001000000100000100000000000101000000100011010000", "0000000000000000000000000000000000001000010000000", "0000000000000001000000000000001000000000100000000", "0001000000000000000000000000000000000000100010000", "0100001011000000000000010000000000000000000000001", "0001000000000000100000010010001000000000000000000", "0000000001010010000000000000000000000000100000000", "0000000000000000000000001000000000000000000000000", "0000000001000000000000000000000010000000100000000", "0011000101000000000000000000000001010000001010000", "0010000000010000000000000000000000000000000000000", "0001000000110000000000000010000000000000000000000", "0000000000000000000000000000000000000000000000000", "0001000000000000000000000010001010000000000000000", "0100100010000000100000000000010000100100111010000", "0000000000100000000000000000000000000000000000000", "0000000000100000001001000010000100010110111010000", "0010000000000000000000001000010000010000000001000", "0010101000000000000000010010001000001010000010000", "0001000000000000110100010000001100100000010000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {20, 11, 33, 38, 21, 16, 17, 13, 18, 40, 35, 32, 0, 12, 15, 41, 43, 23, 4, 25, 47, 5, 1, 42, 46, 24, 37, 6, 39, 19, 44, 26, 29, 9, 36, 14, 45, 27, 8, 30, 31, 48, 28, 10, 34, 3, 2, 7, 22};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> m = {"000000000000100000000000000", "000000100000000000000000010", "000000100000000000000000000", "000000000000000000101000100", "000000110000110000000000010", "000000100000100000010010101", "000000000001000000001000000", "001000100010000000010000000", "000000000000000000000000000", "001000000000100001000000000", "000000000000000000000000000", "000000000000000000000000000", "000000000010000000001000000", "000000000000001000000000010", "000000001001000000010001000", "001000001010100000000010000", "000000101000000000011000000", "000000001000000000010000000", "100000000000000000000000000", "000000000000000000000000000", "000000000000000000000000000", "010000111011000000000000000", "000000000110100001000000000", "000000000000000000000000000", "000000100000100000000000001", "000000000100000000000001000", "000000001001000000010000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 4, 13, 0, 5, 6, 16, 7, 20, 12, 22, 23, 21, 8, 17, 9, 14, 18, 1, 24, 25, 3, 10, 26, 15, 11, 19};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> m = {"0000000110", "0000000000", "0000000000", "0000111001", "0000000010", "0000001000", "0100000000", "0000000000", "0000000000", "0000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 4, 5, 1, 6, 2, 3, 7, 8, 9};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> m = {"000000000000100000000000", "000010100001000100100001", "000000000010000000000000", "000000000000000000000000", "100000000010100000001000", "000000000000000000000000", "000000000000000000000000", "000000000100000000000000", "000100000010001000001100", "000001100000100000000000", "000100000000000000000001", "000100100000000010000000", "000001000000000010000001", "100000011001000000001010", "000000010000100000000000", "000000000000000000000000", "000000000000000000000000", "010001110000000000000000", "000000000001001010000000", "000100000000000000000000", "000100000000000000000000", "000000000000000000000000", "000000100000000010000000", "000001000000000000010000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 1, 5, 17, 2, 18, 20, 9, 6, 10, 11, 12, 13, 3, 8, 21, 22, 0, 7, 15, 16, 23, 19, 14};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> m = {"0000000000000000000", "0000000100000000000", "0000000001000000001", "0000000010000001000", "0001000101000100000", "0100000010000000000", "0000000000000001100", "0000000000000000000", "0000000000000001000", "0000000000000000000", "0010000100000110000", "0000000000000000000", "0000000010000000000", "0000001101000001000", "0100001100000000101", "1000000100000000001", "0000000001000000000", "0010001101000000000", "1000000000010000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {13, 14, 2, 4, 3, 5, 8, 15, 10, 17, 0, 18, 9, 6, 7, 11, 16, 1, 12};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> m = {"000011000000010000000", "000000000000000000100", "000010000000000001011", "000001000000010000001", "000000000000000000000", "000000000000000000000", "000100001010000000000", "000000000000000000000", "000000000000000000000", "000011000000001000110", "000100000000000001000", "010000000000000000000", "000000001000000000000", "000001000000100000000", "100001000000000000000", "100010010100100000000", "011000010010000000000", "010000000000000000000", "000000000000000000000", "000001000000100000000", "010000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 12, 5, 8, 13, 16, 6, 17, 19, 1, 7, 9, 18, 14, 2, 0, 4, 10, 20, 15, 11};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> m = {"0000000000000000000000000000000000000000000", "0000000000000000000000000000000010000000000", "1000101000000000000001000000000000110000100", "0010001000000000000000000000000001000010101", "0000000000100000000000000000000000000000000", "0100000000010000100000000000000000000000000", "0000000000000000000000000000000010000000000", "0000000000000000000000001010000000100000010", "1000001000000000000100000001000000110000000", "1000110000000000000001000000000011100000100", "0000000000010000100000000000000010000000000", "0000000000000000000000000000000000100000001", "0000000000010000001000000001100000100001100", "0000000000010000000000000000000010010000000", "0000001010000100000101001000000010010001101", "0000000000000000010000010001000000000011100", "0000000000010000000000000000000010000000000", "0000000000100000101100000000000011000000000", "0000110000010000000000000000000000000000000", "0100000000000000000000000000000000000000100", "0000001000100000111000100001100001000000001", "1000000000000000000000000011000000000001000", "0000000000000000000000000000000010000000000", "0000000000010000000001001000000010000000000", "0000001000000000100001100000010000000000001", "0100000000000000000100000000010000000000000", "0100000000000000000000100000000001010000000", "0000011000110000001000000000010010100000000", "0000000011100000000001000000000000000010100", "0000000000000000000000100000000000010000100", "0000000100000010001000010000000100010000100", "1011000100000100001000000001000000000000000", "0000000000000000000000000000000000000000000", "1100001000000000000000100000000000010000000", "0000000000000000000000000000000000000000000", "0000000000000000100000000000000010000000000", "0001000000000000001001000100100010000101001", "0000000000010000000000100010010010000001001", "0000000000000000000100000010000000000000000", "0000011000000000000000000000000000010000001", "0000000000010000000000000000000000000000000", "1000010000110000000000000000100011100010000", "0000000000000000000000000000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {22, 29, 4, 3, 30, 26, 31, 5, 11, 12, 32, 38, 6, 33, 7, 13, 36, 14, 24, 28, 8, 17, 39, 15, 16, 27, 20, 23, 10, 34, 0, 1, 40, 21, 41, 35, 2, 18, 19, 25, 37, 9, 42};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> m = {"000100000010000010000000", "000100000000101100101001", "000101000000000010100000", "000000001000100010100110", "000000000001001000100000", "000100000000001000010100", "000010000000000000110000", "000000000000000000000100", "000000000000000100011100", "000100010001000100000001", "000001000000100100001000", "000000000000000000000000", "000000000000000000000000", "000000000000000000000000", "000000000000000000000000", "000000000000000000000000", "000000000000000000000010", "000100000000100000101000", "000000000001001000000000", "000000000000101000000000", "000000000001000100000000", "000000000000000000000000", "000000000000010100000000", "000000000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 2, 7, 9, 4, 8, 10, 11, 5, 3, 14, 16, 19, 20, 21, 17, 6, 12, 15, 13, 22, 18, 23};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> m = {"001010110010000101100010010010010111011000", "001000010011000001100001101000101101100000", "000000000010010000000000010000000000010000", "000000000000010010000000000000000000001000", "001100000000001010000100010000000001011100", "000000000000001010000000010000000000000000", "001011000000001000000000000000000000010100", "000010000001001010000000000000000000001000", "001001000001010000010010000000100001010000", "000001000000000101010000001101011111001111", "000000000000000000000000000000000000010000", "001000000010000000000000010000000000000000", "100011010000001101000101000010100001110000", "000000000000000010000000000000000000010000", "000000000000000000000000010000000001010000", "001101100001001001000001000010000101011000", "000000000000000000000000000000000000010000", "000010010010010000000000010000000010010000", "000000000001011010000010000010000101011100", "000111000001000010000010000000100001000000", "001010000000000000010000000000000000000000", "000100000010000000000000000000000000011100", "000000010010010010000000010000000000000100", "000111111010000010000110011000100100000001", "000100010000001010000001000000000000011010", "000100000000010000000000000000000000001000", "000000011010000000000000000000000011000100", "000101010001001110000011000000000010111000", "000010000010001001001010001000000100000001", "001001000001000000111100001010100111001010", "001010000000010010000100000000000001010100", "000110001000011001101000001001000010000000", "000010011011000010000101011000000110010011", "001100000000000001000010000000000000000101", "001010100010001010000100000000100000010000", "000100000000010000000000000000000000001000", "001101010000001100101000001000110001001101", "000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000", "000000000000010000000000000000000000011000", "000000000011000000000110010000100001000000", "000001000010010011000100010000000010011000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 29, 35, 27, 30, 19, 25, 20, 3, 36, 28, 0, 38, 31, 6, 39, 16, 9, 22, 21, 32, 24, 12, 10, 33, 17, 4, 13, 8, 26, 7, 11, 14, 18, 34, 5, 40, 41, 37, 23, 15};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> m = {"000000000000000000000101000000001000000", "101010001001010100000100011001011011100", "000000000100000100110000010101000100100", "010010010010100101010011111001000001110", "100000000000000000011010010100010000000", "000010001100010000001011010001100110010", "101110000010100000000101010001011100111", "001000001100001100010110101000110011000", "101000000101000100001010010000001000110", "000000000000000000001101000001011100000", "100001000000001000011110000110000010101", "100000000000000000000000000100001000000", "100000001100010000010110010110000010000", "000010000000000100000100010000000100010", "000010001000000000000000000000011000110", "000000000000000000000000000000001100000", "000010010100100100000110000100000110100", "101011000001100000001000000100100110010", "100000000000000000000000000000001000000", "100000000001000000001100000001001100000", "000000000000000000100000000100001100000", "000000000000000000000000000000000000000", "000000000101000100111001010001010000000", "000000000000000000000000000000000000000", "101010001001000100000000010000000100000", "000000000000000000000000000000011000000", "000000000100000100000110000001001000000", "100000000000000000000100000000000000000", "100000000101000000000101001001010000100", "000000000000000000100000000000010000000", "000000001101001100001010000000011100010", "000000000000000000100100000000000000000", "000000000000000000000001000000000000000", "000000000000000000100101000100000000000", "101010001000011100010001010101000101000", "101000000100000000101000001000010000011", "000000000100000000100100010000010100000", "000000000100000000000011000000000100100", "101010000101000000100110000101001000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {35, 2, 16, 1, 18, 5, 0, 7, 13, 24, 3, 26, 8, 17, 11, 27, 6, 4, 33, 25, 28, 36, 22, 38, 12, 29, 20, 34, 19, 30, 9, 31, 37, 32, 10, 14, 23, 21, 15};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {13, 19, 5, 31, 20, 32, 27, 0, 7, 21, 16, 2, 33, 3, 34, 22, 11, 8, 12, 6, 24, 18, 1, 9, 14, 25, 26, 28, 30, 29, 23, 17, 4, 15, 10};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> m = {"00011000110110010110", "00011001110000000001", "00000000100110000100", "00001000000000000000", "00000000000000000000", "11010010001000010101", "00010001000100000100", "00000000000000000000", "00010000001000000000", "00000000100100000100", "00000000000000000000", "00001000001000000000", "00011001110100000111", "01001111010000001001", "00110000000001011010", "00001001110010000100", "01001001010010010010", "00000000000000000000", "00010000000000000001", "00001001000000000100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 5, 6, 13, 16, 2, 7, 17, 11, 10, 18, 14, 9, 1, 0, 8, 4, 19, 12, 15};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> m = {"0100100111010", "0000100110010", "1100100010000", "0000001100011", "0000000100001", "1100000100000", "0000000000010", "0000000000010", "0000101000000", "0000100000001", "0101011101011", "0000000000000", "0000000100000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 0, 5, 8, 2, 9, 11, 6, 7, 1, 12, 10};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> m = {"011001001010100100011", "000000000000000000000", "000001001010100101000", "010011000000000000011", "000000010101000000001", "000000000001000111000", "000000000010000010000", "000000000010010000000", "000000010001001000101", "000000000000010000001", "000000000000000001000", "000000000000000000101", "010000010100010000100", "010000000000000000001", "000000000000010000100", "010000000100000000101", "000000010110110100000", "000000000000000000000", "010000010010000000001", "010011000110100000100", "000000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 17, 1, 2, 4, 5, 6, 14, 7, 15, 18, 8, 10, 16, 11, 12, 9, 19, 13, 3, 20};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> m = {"0000000", "1000000", "0000011", "0100000", "0101000", "0000000", "1100000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 4, 0, 2, 1, 6, 3};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> m = {"000000000", "000010000", "000010011", "100000100", "100000101", "111110010", "000000000", "100000101", "100000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 1, 2, 3, 4, 0, 8, 5, 6};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 23, 3, 0, 8, 15, 30, 19, 26, 28, 31, 27, 10, 4, 11, 16, 25, 22, 12, 17, 1, 24, 13, 7, 14, 5, 9, 21, 2, 18, 29, 20};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> m = {"0000100011000000000", "0011011110110010100", "0000010001001000000", "1000011010100000000", "0000000000100000000", "1000100010001000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000110100000000", "0000000000000000000", "0000000000000001001", "0000000010100000000", "0011110100000001000", "0011011001000000000", "0000000010000000000", "0011101011000111000", "1001010000100010101", "0000010111000001000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {10, 0, 5, 6, 11, 9, 12, 14, 17, 13, 18, 7, 15, 3, 4, 16, 2, 1, 8};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> m = {"0000000000000000000000000000000000000", "1000000001000000000000000010000000000", "0000110000010010000101000010001000101", "0000000000000000000000000000000000000", "1000000000000000000000000000000000000", "0100000100010000001101010000001000001", "0000100000000100001000000000010010000", "0100001001000000000000100000100000000", "0001100001001100010000100000000010010", "1000100000000000001010000010000000000", "0101101100000011000000010000000100011", "0000000001000010000010010110001010000", "1000100000000100011001000010100010000", "0000000000000000000000000000000000000", "1101100000000000001010000010110000000", "0000010001001000000010100000101000111", "0101001010010010001000110010001000111", "0001001000000010000011000010100010000", "0000000000000000000000000000000000000", "0000100100001000001000000010001100010", "1000000000000100001000000000000000000", "0001000000000100001000000000010000000", "0000001000000000000010000010100000000", "0100001101000110001000000000010000000", "1000000111000000010000110100001100001", "0000000100000100000010100010100010001", "1001000000000100000000000000000000000", "0000000001000100000001000000110100111", "1001100000000100001000000010000000000", "0001000000000000001000000000000010000", "1001001001001010001000000010100000111", "0101001001000000001011000010110000000", "1000100000000000000000000000000000000", "1100101011000010001110010000000010100", "0100100001000110000011100000010000001", "0100100001000000000001100000000100000", "1001000100000100011000100010110010010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {33, 22, 0, 34, 30, 3, 24, 15, 16, 25, 1, 5, 17, 35, 19, 2, 4, 18, 36, 7, 31, 26, 23, 9, 8, 10, 32, 11, 27, 28, 12, 21, 29, 6, 13, 20, 14};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> m = {"001110001010000101001010000000010001100000000", "000110001111100000010010000001000011010100000", "000000000000000100000000000100000000000000000", "000010000000000000000000000000001000000000000", "000000001000000000000010000000011000000000000", "101000000111010101000100101100010000000000001", "001000000000000100000000000000000000000000000", "001100101000000101000100100100010000000010010", "000000000000000000000000000100100000000000000", "000110100000000101011010000000010101000000010", "000000000000010001000000000100110001000010000", "100000110000110001010010101100010101010000010", "100010010000000011001110001001000101100010000", "000000100000000100000010000100010101000010010", "001001111011100000010001100000010101000001100", "000000000000000000000000000000000000000000000", "000000000010010001011000000000000000000000010", "000000001000000000000000000000001000100000010", "100000010111101111001010110110000110110110000", "001000000000000100000000000100000000000000000", "000000101000000000000000100000101000000010010", "001010000000000000011000000100011001000000000", "001000000000000000010000000000011000100000010", "101001011110000011011000101000011000011010001", "000000000000000001010010000000001000000010000", "100100101000100001011001100100010000111110001", "001000110000000100010000100000111100000000000", "000000000000000000000000000000000000000000000", "100100100111000000010101000001100100100010110", "000100011000010110001000000100010000000000000", "000000000000000100010000000000010000100000000", "001000000000000000000000000000000000000000010", "001000000000000000000000000000000000000000000", "001010000000000001000010100000001001000000000", "000101010101110101010000000000010100001000010", "000000100000000001000010000000101000000010010", "000000000000000000000000000000000000000000000", "101010101010100000010100100101010100000000001", "000100011111110111010100000001100001100010011", "100110000101100010010110000000011001000010010", "001000000000000100010000000100101000100000000", "001100000001000010000000001000000000010010000", "000010101010100010011110101001010100100000010", "000000000000000100000000000100001000100000000", "000010110000000101011110101000111000100000010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {15, 0, 41, 21, 27, 7, 30, 19, 33, 20, 23, 11, 14, 24, 2, 42, 22, 32, 1, 37, 28, 25, 34, 5, 31, 3, 17, 43, 4, 18, 36, 38, 40, 26, 6, 29, 44, 12, 8, 9, 35, 10, 13, 39, 16};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 12, 16, 24, 5, 17, 31, 33, 26, 28, 13, 15, 27, 19, 4, 25, 10, 8, 3, 20, 22, 0, 21, 29, 14, 32, 9, 2, 18, 1, 6, 30, 11, 23};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {25, 28, 4, 6, 29, 13, 9, 23, 1, 32, 20, 16, 17, 27, 10, 0, 19, 15, 26, 8, 33, 22, 30, 12, 24, 5, 7, 2, 21, 3, 31, 14, 11, 18, 34};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {16, 5, 0, 6, 8, 17, 14, 13, 7, 31, 23, 18, 10, 1, 25, 27, 2, 29, 15, 11, 19, 20, 9, 28, 26, 4, 30, 21, 24, 22, 3, 12};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> m = {"01001000110", "00000001000", "00000001000", "00000000000", "01000000100", "01000000111", "00011000100", "00000000000", "00000001000", "00011000100", "01001000100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 6, 7, 8, 5, 1, 2, 10, 9, 3, 4};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> m = {"0000000000000000010001100", "0001001010110000000010010", "0100011000010100010000101", "0000000000100001010000010", "0000001011010000010000100", "0000000010110001001000101", "0001000011100000001001100", "0000000010100000010000110", "0000000000100001000000000", "0000000010100100000000000", "0000000000000000000000010", "1001000011100000000001000", "1100010110110000000010001", "0001000000100000000001010", "0000000101010000101011001", "0000000000000000000000010", "0000010001110100010000110", "0000000010000001000001110", "0000000100100000010000100", "1001011011010100000000101", "0001000100000100011000111", "0000000000000001000000100", "0000000000000000000000000", "0000000000000000000000000", "0000000001000001010001010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {9, 2, 0, 15, 3, 7, 10, 17, 19, 13, 20, 8, 1, 14, 4, 22, 5, 18, 16, 6, 11, 21, 23, 24, 12};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> m = {"001001", "000000", "000001", "001011", "100000", "000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 0, 1, 5};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> m = {"01000101010001100000000", "00100101101000100000011", "00000000000000000000000", "00000000100001000000000", "11110110100001110001011", "00000000000001000000000", "00110100000001000000101", "00110100001000000001010", "00000000000000000000010", "00000100100001000001000", "00000000110000000001010", "00101110000010000001010", "00011010010000100001100", "00000000000000000000000", "00110001001001000001010", "11110001000001000001001", "11110010000100010011010", "00010011100110000011100", "10110010011001100000100", "00100100000001000000000", "01010001000000100000001", "00000000000001000000000", "00010100110000000000010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 10, 17, 18, 4, 19, 8, 12, 20, 15, 13, 2, 3, 22, 11, 5, 0, 1, 6, 16, 9, 21, 14};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> m = {"001011110010001101110010011111111111011101", "101001010111000001110011101101101111101010", "000000000010011000000000010000000001010100", "000000000000010010000000000000000000011000", "001100000010001010000100010000000001011100", "000010000000001010000000010000000000010000", "001011000000001000000100000000000000011100", "000010000001001010000100000000000000001100", "001011000001010000010010000000100001011000", "000011101001001101010010001111011111011111", "000100000000000010000000000000000000010100", "001001000010000000000000010000000000010000", "100111010000001101101101100010101001111111", "000000000000000010000000000000000000011000", "000000000000010000000000010000000001010000", "001111100001001011100001001010000101011000", "000000000000000000000000000000000000010000", "000110011011010000000000010000000010010000", "000000101001011010001010000010101101011100", "000111100011001010000010010000100001001000", "001010100010001010010000000000100000001000", "000100000010010000000000000000000000011100", "000000010011010010000000010000000011000100", "000111111010000011011110011000100110011101", "100101110010001011001001000001110010011010", "000100000000010010000000000000000000011000", "000011011011000000000100000000100011000100", "001101010001001111001111000001000110111000", "000110010010001001011010001000101110001001", "001001001001000010111110001010100111001010", "001010000000010010000100010000000001010100", "000111011001011011111100011011100110001100", "000011011011010010000101011000000110010111", "001110000000001001001110000000100000010101", "001010110011001010000100000000100000011000", "000100000000010010000000010000000000001000", "001101010000001110101010011001110001001101", "000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000", "000100000000010000000000000000000000011000", "000011001011000000010110010000100001000000", "000001000010011011010110010000100010011000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 0, 30, 37, 29, 27, 24, 25, 19, 4, 32, 26, 1, 38, 33, 7, 39, 16, 10, 21, 20, 31, 22, 13, 2, 35, 17, 5, 11, 9, 28, 8, 12, 14, 23, 34, 6, 40, 41, 36, 18, 15};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> m = {"000000000000000000000101000000001000000", "101011001001011100101110011001011111111", "000000000100000100110100011101000100100", "010011011110110111011011111111010101111", "101000000100000000011010010100010000000", "100010001101011100001011011001100111111", "101110000011101100111101010101111111111", "101000001101001100111111101000111111010", "101010000101000100001111010000011000110", "100000000000000100001101000001011100000", "101001001101011100111110000111000010101", "100000000000000000000000000100001000000", "100000001101010100010110011110010111101", "000010000001000100001101010000011100111", "101010001001000000010100000000011001110", "000000000001000000000000000000001100000", "001010010100100100000111000100001110101", "101011000001111000011000100100100110010", "100000000001000000000001000100001000000", "100000000001000000101100000101001100000", "000000000001000000100001000101001100000", "000000000000000000000000000000000000000", "100000000101000100111101010101011000000", "000000000000000000000000000000000000000", "101010001001000100010100010000011100000", "000000000000000000000100000000011000000", "000000000100000100100111000101001000000", "100000000000000000000101000000000000000", "101000001101000000100101111101010000111", "100000000000000100100101000000011000000", "000000001101001100001011100000011100011", "100000000000000100100100000100000000000", "000000000000000000000001000000000000000", "000000000000000000100101000100000000000", "101010001101011100011101011101001101001", "101000001100000100111001011000011000111", "000000000101000000101111011000010100000", "001000000100000000100111011101000100100", "101010000101000000101111000101001000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {35, 2, 20, 1, 18, 5, 0, 7, 15, 24, 3, 33, 8, 16, 11, 30, 6, 4, 32, 25, 26, 36, 23, 38, 13, 27, 22, 34, 12, 28, 9, 29, 37, 31, 10, 14, 21, 19, 17};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {13, 20, 8, 32, 16, 29, 30, 0, 6, 21, 17, 4, 33, 1, 34, 22, 12, 10, 7, 2, 24, 19, 3, 11, 14, 27, 25, 31, 28, 26, 23, 18, 5, 15, 9};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> m = {"00011000110110010110", "10011001111100000001", "00000001101110000100", "00001001000000000000", "00000001000000000000", "11010010001100010101", "00011001001100000100", "00000000000000000000", "00010000001000000100", "00011000100100000100", "00000000000000000000", "00011001001000000100", "00011011111100000111", "11111111010000011101", "00110000110001011110", "00111011110010000111", "11001001110010010111", "00000000000000000000", "00010000001100000001", "00001011101000000100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 4, 7, 15, 16, 2, 11, 17, 13, 12, 18, 14, 8, 1, 0, 6, 3, 19, 9, 10};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> m = {"0100100111010", "0000100110010", "1100110011011", "0000011101011", "0000000100001", "1100000100010", "0000000100010", "0000000000010", "0000101000011", "0000100100011", "0101011111011", "0000000000000", "0000000100000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 5, 0, 2, 8, 3, 9, 11, 6, 7, 1, 12, 10};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> m = {"011011011010100100011", "000000000000000000000", "010001101011111111100", "010011100000011000011", "000000010111100100001", "000000000011000111100", "000001001110100010000", "000000000010010001001", "000000010001001100101", "000000000000010001001", "000000000000000001000", "000000000010000001101", "010000010100010000101", "010000000000000001001", "000000010001010000101", "010000010100000000101", "010010011110110100001", "000000000000000000001", "010000010010000000001", "010011001110100100101", "000000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 17, 1, 2, 7, 5, 3, 14, 8, 15, 18, 10, 11, 16, 9, 12, 6, 19, 13, 4, 20};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> m = {"0000000", "1000000", "1000011", "0100000", "0101001", "0001000", "1100000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 5, 0, 3, 1, 2, 4};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> m = {"000000000", "000110011", "100010011", "101000111", "100000101", "111110110", "000000000", "100000101", "100000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 1, 3, 2, 4, 0, 8, 5, 6};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 24, 3, 0, 8, 16, 30, 21, 26, 28, 31, 27, 11, 4, 13, 18, 25, 23, 9, 12, 1, 22, 14, 7, 15, 5, 10, 20, 2, 19, 29, 17};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> m = {"0000100011000000000", "0011011110110110101", "0001111001001001000", "1000011010100000000", "0000000010100000000", "1000100010001000000", "0000000001000001000", "0000000000000000000", "0000000100000000000", "0000000110100000000", "0000000100000000000", "0000100000000011001", "0000000010100000000", "0011111101101001001", "0011011111100100000", "0000000110000000000", "1011101011010111000", "1101010101111011101", "1001011111001001000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {10, 1, 6, 8, 11, 9, 12, 18, 16, 13, 17, 3, 14, 5, 4, 15, 2, 0, 7};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> m = {"0000000000000100000000000000000000000", "1000000001000100000010000010100000000", "1000111010011010010101100010001100111", "0000000000000000001000000000000000000", "1000000000000000000000000000000000000", "0101101101010000001101010000101011001", "0101100000000100001010000000010010000", "0101001001000010000010100000100000010", "1001101001001100010000100010000010111", "1001100000000000001010000010000010000", "0111101111000011010101111001100110011", "0000000001000110001010110111011110011", "1000100000000110011011100010110010011", "0000000000000000001000000000000000000", "1101101000000000001011000010110000000", "0001110101001110000110110000101111111", "0101001111010011001010110111111011111", "0001001000000010001011000010100110000", "0000000000000000000000000000000000000", "0000100100001000011000000010011100010", "1001000000000100001000000000000010000", "0001000001000100001000000000010000000", "0000001001000000001010000010100100000", "0100001101000110001000000000010000011", "1011110111010001011001110110101101101", "0001001100001100000111100010110010011", "1001100000000100001000000000000000000", "0001000111000100001101000100111110111", "1001100000000100001000000010000010000", "0001000000000100001000000000000010000", "1101001001001010011000000010100010111", "0101001001000100001011000010110000000", "1000100000000000000000000000000000000", "1101101011000010001111010010001110110", "1101100001000110000011100010110100011", "0101100001000110000011100000000110000", "1001100101000100011011100010110010010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {33, 24, 2, 34, 32, 5, 23, 17, 9, 26, 0, 6, 13, 35, 20, 4, 3, 18, 36, 11, 27, 25, 21, 14, 1, 10, 29, 7, 28, 30, 12, 22, 31, 8, 15, 19, 16};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> m = {"001110011010010111001110000000110001100000010", "000110001111110000011010000001001011011111111", "000000000000000100000000000100000000000000000", "001010000000000001010000100100001000000000010", "000000001000000001000010000000011000000000000", "101000000111010101001110101100010101100010001", "001000000000000100000000000000000000000000000", "001110101100000101011100100100010000100010010", "001000000000000000000000000100100000100000000", "000110100000000101011010000000010101000000010", "000010100000010101001010000100110101100010000", "101000111110110011010010101100011101110000011", "100110111010010011001110001001001101100010000", "000010101000000100011010100100010101000010010", "001001111111100110010101101000110101001001100", "000000000000000000000000000000000000000000000", "000010011110010001011110000100110100000000010", "000000001000000100000010000000001000100000010", "100000010111111111001010110111100111111111000", "001000000000000100000000000100000000100000010", "000000101000000001000010100000111000100010010", "001010101000000000011010100100111001000000000", "001000000000000000010000000000011000100000010", "101001011111010111011100101001011000011010001", "000000001000000001010010000000111001000010000", "101101101010111001011001101100010000111110001", "001010110100000100011000100000111100000000010", "000000000000000100000000000000000000000000000", "101110101111010000010101000001110110101011111", "101100011000010111011110101100010001100000000", "000000000000000100010010000100010000100000000", "001000000000000000000000000100000000100000010", "001000000000000000000000000000000000000000000", "001110000000000001000010100000101001000000010", "100111010111110101010111100000010100001101110", "001000101000000001010010000000101000000010010", "000000000000000100000000000000000000000000000", "101010111010100000010110101101010101000000001", "100110011111110111010100000001101101100110011", "101110011111100110011110100001011001010010011", "001000001000000100010000000100101000100000000", "101110000001000110001100101101011001010010001", "000110101010100010011110101001110100110000010", "000000000000000100000000000100001000100000000", "000110110110100101011110101001111000100010010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {17, 0, 41, 25, 27, 7, 31, 20, 34, 21, 22, 11, 15, 23, 3, 44, 18, 32, 1, 37, 28, 26, 36, 6, 29, 2, 19, 42, 4, 16, 35, 38, 40, 24, 5, 30, 43, 13, 8, 9, 33, 10, 12, 39, 14};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 12, 16, 24, 5, 17, 32, 33, 27, 28, 13, 15, 26, 22, 4, 25, 10, 8, 3, 18, 21, 0, 19, 29, 14, 30, 9, 2, 20, 1, 6, 31, 11, 23};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {25, 32, 4, 11, 28, 15, 13, 24, 1, 31, 21, 16, 18, 27, 7, 0, 20, 12, 26, 8, 33, 23, 29, 14, 17, 5, 6, 2, 22, 3, 30, 10, 9, 19, 34};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {16, 6, 0, 7, 9, 17, 14, 13, 4, 31, 23, 18, 11, 1, 25, 30, 2, 27, 15, 12, 19, 20, 10, 26, 28, 5, 29, 21, 24, 22, 3, 8};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> m = {"01011001110", "00000001000", "00001001010", "00001001000", "01000000100", "01011001111", "11111000110", "00000000000", "00000001000", "00011000100", "01001000110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 8, 2, 6, 7, 3, 0, 10, 9, 5, 4};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> m = {"0001000010100101010001100", "0001001011110100100010011", "0101011010010100110000101", "0000000110100001010001110", "0101001011010001110010100", "0001000010110001011001101", "0001000111110100111001101", "0000000010100001010000110", "0000000000100001000000000", "1001000010100100001000000", "0000000000000000000000010", "1001000111100001000001000", "1110011110110100111010001", "0001000110100000010001010", "0110000101011000111011011", "0000000000000000000000010", "0001010001110100010000111", "0000000010100001000001110", "0000000100100000010001100", "1001011011011100000000101", "1001001100010100011000111", "0000000000000001000000100", "0000000000000000000000010", "0000000000000000000000000", "0001000001000001010001010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {13, 5, 3, 15, 4, 9, 7, 17, 19, 12, 20, 10, 2, 14, 0, 22, 8, 18, 16, 1, 6, 21, 23, 24, 11};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> m = {"001001", "000000", "000001", "001011", "100001", "000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 0, 1, 5};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> m = {"01000111111001100000001", "00110101101000100000011", "00000000000000000000000", "00000000100001000001010", "11110111100001110001111", "00000000000001000000010", "00110101010001000000101", "00110100111000000001010", "00000000000001000000010", "00010100100001000001010", "00100000110001000001010", "00111111100011000001010", "00011011010001110001101", "00000000000000000000000", "00110101011001000001011", "11110101000001000001011", "11111010010100010011011", "01011011101111010011110", "10110110011001100001100", "00100100000001000000000", "01110001001000100000001", "00000000000001000000000", "00110100110000000000010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 10, 18, 16, 4, 19, 8, 12, 20, 15, 13, 2, 3, 22, 11, 5, 0, 1, 6, 17, 9, 21, 14};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> m = {"010000000", "000000010", "100000110", "111001110", "001001101", "010000010", "010000010", "000000000", "011001100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 7, 3, 0, 1, 5, 6, 8, 2};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 1, 30, 37, 29, 27, 26, 24, 20, 2, 34, 28, 0, 42, 43, 45, 39, 19, 10, 47, 48, 31, 22, 13, 44, 36, 16, 5, 46, 8, 23, 7, 12, 15, 25, 33, 6, 41, 40, 35, 14, 17, 32, 38, 49, 9, 11, 21, 18, 4};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> m = {"01000010100011001", "00000010100000001", "11000010101110101", "10100011111011011", "10000010100101001", "11001010101101001", "00000000100010001", "01001100101011101", "00000000000000001", "11101011101111111", "11000000100110001", "01000000100011001", "00000000000000001", "01000010100010001", "11001010101110001", "11101101000101101", "00000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {9, 12, 3, 0, 7, 5, 13, 4, 14, 1, 8, 10, 15, 11, 6, 2, 16};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> m = {"0000000100100000100101010000000000000110", "1010111011111101011111111101110111100011", "1001010011101111111101111001100111111111", "1000111000101000110101000110001000010000", "1000000100010000100101010000000000000110", "1000100100110000110100000010000000000010", "0000110100111000110101010010000000000010", "0000000000010000100000000000000000000010", "1000111100110001011001110110001010001111", "0000011110110011101101110101011010001111", "0000000100010000100000000000000000000010", "0000000000000000000000000000000000000000", "1000110100110000100101010000000000000110", "1001101111101011111100100111011011011111", "1000110100111000110101110100000000001110", "1001010100101010010001110111010010011111", "0000000000000000000000000000000000000000", "1000100100100000100001010000000000000110", "1001110000011011110101100001011010001011", "0000000100110000100001010000000000000000", "0001110111111111101001101110111011111101", "0000000100010000100000000000000000000000", "0000111100111000110101010100000000001010", "0000000100010000100000000000000000000010", "1001100111011111111100110111001011011111", "1000111100110000110101010010000000001110", "1000100100100000010100010000000000000110", "0001111000111000110101110010000000010111", "1001110011111111111100111000011011001111", "1001111000110010010100100110001010010111", "1000011100110010010101010010000000001110", "1001101001111111111010111111011011100111", "1001110100111010110100110011001000010110", "1001110111101011011001010101010010001111", "1001011111011111101101111111111010011111", "1000110000111010010100100110000000001111", "0000011100111000010101010010000000000110", "0000000100110000100101010000000000000010", "0000000000000000100000000000000000000000", "1000111100101010110101110110001000001110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {30, 0, 1, 16, 29, 26, 24, 36, 10, 9, 33, 37, 25, 7, 20, 12, 39, 28, 11, 32, 3, 34, 21, 35, 6, 22, 27, 15, 5, 13, 19, 2, 14, 8, 4, 17, 23, 31, 38, 18};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> m = {"000000000000000000000000000000000", "101110011111110101010111100101011", "000010010000111101110011100111111", "100000000000011100100010100011101", "100000000000001000000010100000000", "101110011000111001111011101101110", "110111010111011111111111101011111", "100110000010110101110011100100001", "101110010010101101011011101111111", "101111011011111111110011101111111", "000110000000111001110011000111011", "001111011010110101011011101111111", "000110000000011101110010000000101", "100010000000001000000010100000101", "000000000000000000000000100000001", "100010000000011001110010000111000", "101111011010011101101011101111011", "100010000000001000000010100000000", "100010000000010001000010100001000", "100010000000000001000010100000001", "101100010010111101110000101111010", "000011011100101110111011101111111", "100000000000001000000000100000001", "100110000000011101110010100011101", "100000000000000000000000000000000", "111011000111111111111011101110101", "001000010010011101010011100111111", "100000000000011001010010000000001", "100000000000011000110010100101001", "100010000000010000000010100100001", "100010000000000001000010100000001", "100110000000011100110011100001101", "000000000000000000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {31, 2, 11, 17, 27, 7, 0, 12, 8, 4, 13, 5, 14, 23, 29, 18, 6, 26, 20, 24, 9, 3, 28, 16, 30, 1, 10, 22, 19, 21, 25, 15, 32};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> m = {"011", "100", "000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> m = {"0100111111111110100011111001111011011", "0000000000100110000001000000000000000", "0100011011101010000011000001010011000", "0100011010101010010011101111110011000", "0111011110101010100011110101111011000", "0100001011101110000001100001010011001", "0100000010101000000001000001000000000", "0110011011000100010011100011110111011", "0000000000100110000001000000000010001", "0100000010101010000001000001010010001", "0000000000000000000001000000000000000", "0110010110101110110010111111111101011", "0100000000100110000001000000000000001", "0000000000100000000001000000000000000", "0000000000100000000001000000000000000", "1111010110111100111011111111111111001", "0110001011101110010011111111111111011", "0000011011101110000011100011110111001", "0111111110101100110011111011011111011", "1111111011101101111011110101111011111", "0100011001101110000001000000000011001", "0000000000000000000000000000000000000", "0100001010101110000001000001010001001", "0110011101101110010011000111111100011", "0110010111101000010011110111101101000", "0110011111101110010011000011110110010", "0100011011101110000011100000010111000", "0000000000101010000001000000000000001", "0110010011101110000010100011010110001", "0000001010101110000001000001000010001", "0110010111101110010011100010110111010", "0110000011001110000011100001010011001", "0100000000001110000001000000000000001", "0100001011001110000001000001010010001", "1110111111111111110011111110001110010", "0110010010101110010010000011110111000", "0000000000100110000001000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 31, 19, 6, 5, 21, 26, 13, 27, 24, 35, 7, 30, 33, 34, 2, 8, 15, 4, 0, 20, 36, 22, 10, 9, 11, 17, 28, 16, 25, 12, 18, 29, 23, 1, 14, 32};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 31, 32, 25, 39, 26, 41, 20, 36, 3, 40, 42, 43, 12, 27, 15, 19, 33, 16, 8, 13, 9, 23, 5, 17, 11, 35, 1, 18, 6, 34, 24, 2, 29, 21, 38, 0, 30, 10, 4, 14, 37, 22, 28};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> m = {"0101111011011010111111", "0000010000001010000111", "0100111011101010000110", "0110111111111000110101", "0100011001101000000101", "0000000000100000000000", "0000010000101010000111", "0110111011101010000111", "0100110000101010000111", "0000011000000010000111", "0000000000000000000000", "0110111111101010010111", "0000000000100010000111", "1010111111100010111011", "0000010000100000000000", "1101011110111010111111", "0110111011111010000110", "0000111001101010000111", "0111111001110010000111", "0000010000000000000010", "0000010000100010000000", "0000010000000000000110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 12, 8, 4, 11, 20, 14, 7, 9, 13, 21, 6, 15, 0, 19, 1, 5, 10, 3, 17, 18, 16};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> m = {"0101110110111111111111111111101110011110", "0001001100011000111101101000001011110000", "1100001011111111011010111110111110101000", "0000001001010000111101100100000011110110", "0101010110111011011011011111101011110110", "0000000000000001010000000000000000100000", "0000010000000001110001100000000001000000", "0001011001011001110001111100001011110110", "0101011101011001111101110100101011110110", "0000011000010001111101110100000011100010", "0101010111011011010100111101101011110010", "0000010000000000110001000000000001100000", "0001001001000001111101010100001011100110", "0101110111111011111111101101101111111110", "0101001111011001111110111111100011100010", "0000000000000000000000000000000000000000", "0000000000000001000000000000000000000000", "0000000000000001100000000000000000100000", "0000000000010000110001010100000001100010", "0000010000010001110000110100000001010010", "0101011101011001001000101100001011110110", "0000010000000001110000000000000000100000", "0000010000010001110001000000000001100000", "0000011000000001010000100100000001000000", "0001011000011001110000100100001011110110", "0000011000010000110001000000000000100000", "0001010000001001111110011001001011000110", "0001011101011001011111011100000010110110", "0100011001011000110111011101001011110110", "1101110111111111011111110010000111110110", "0000001000010001111101110100000011010110", "0101101111111001111101101111100001111110", "0000011000010001011101110100000001000010", "0000010000000000110000000000000000100000", "0000000000000001100000000000000000000000", "0000011000010001110001100100000000100000", "0101111111111011011001011101101011110100", "0000011000010000111101110100000011010010", "0000011000010001010001100000000001110000", "1101100111111111111111110111111111101110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 15, 0, 19, 7, 35, 30, 16, 10, 20, 8, 32, 18, 4, 9, 39, 38, 36, 24, 25, 14, 33, 31, 26, 17, 29, 11, 13, 12, 2, 21, 5, 23, 34, 37, 28, 6, 22, 27, 1};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> m = {"0000000000000000000000000000100000000000", "1000010000000000000000000100101000000000", "1100010000010000000001010000111001010110", "1110111100100010000111010111111111111011", "0100010100010000000001010100111000010110", "1000000000000000000000000100101000001000", "0110010100010100010000010111111011010111", "1100000000010000000000000100100000001000", "1011110101111111111111100110111101110101", "0111111000110100111111100111111111110010", "0110111100011010011111010111111010101111", "1100010000000000000000010100100000001000", "1010010000010100000001010010111001000111", "1100110100010000000001000011011001010111", "1110001100011100000001010101011011011101", "1111111101111100111101110111111111011111", "1110111100001110011111000111100010111011", "1110010100011000000000010101101001001101", "1000111100010110010111010111011010111000", "1110110100011110010001010011011011010111", "1110111100011010010101010001111011011111", "1100010100010000000000010100101000001010", "1100110100100110011101010111111011111111", "1100010000000000000000000100100000001000", "1101111100101101011111110011110110111110", "1000000000000000000000000000100000000000", "1110110100010000000001010001101001001011", "1100000100010000000001010100110001011111", "0000000000000000000000000000000000000000", "1100010100010000000000000100100001001110", "1000000000000000000000000000000000001000", "0010110000011100100111100111111011001110", "1110110100011100000001010101111001011111", "0100010100000000000001000100101000000110", "1110111100011110010111010011101011011111", "1100000000010000000001010100011001000010", "1000000000000000000000000100100000000000", "1100000000000000000000010100100000001000", "0100010000000000000000000100000000001000", "0100010100010000000001000100111001001100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {38, 33, 20, 4, 21, 34, 14, 28, 0, 3, 7, 29, 17, 18, 13, 2, 8, 15, 9, 12, 11, 27, 6, 31, 1, 37, 19, 22, 39, 25, 35, 5, 16, 26, 10, 23, 36, 30, 32, 24};
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {29, 15, 5, 11, 30, 26, 0, 25, 19, 3, 7, 9, 16, 6, 27, 18, 24, 22, 31, 28, 4, 10, 17, 2, 13, 23, 1, 21, 14, 12, 20, 8};
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> m = {"011101110000010", "000000100000100", "010000100000100", "010001100010100", "001100111011110", "011000100000100", "000000000000000", "001100101010100", "001001100000000", "011101111010010", "011001001000000", "101100011110110", "000000100000000", "000101011010100", "111111110111110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 12, 11, 7, 1, 10, 14, 6, 9, 4, 8, 2, 13, 5, 0};
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> m = {"0011011000001100111111010011010111000101000", "1011101110110001000111110110011001011101110", "0001001000001100010010000010000000000000000", "0000001000001100010000000010000000000000000", "1011001000010100111111110011010111010111100", "0011001000001100111101100001010101000110000", "0000000000001100010000000010000000000000000", "1001011010001100001101110111010101010111110", "1011111000011100111111110010010111011011010", "0111111110101101111101110011111111011111110", "1011101010011101010111100111011101011101010", "0010010000001100111001110011010101000110100", "0000000000000000000000000000000000000000000", "0000000000000000010000000000000000000000000", "1101111111101101110111010111111111111111110", "1011111110011100101011110111010111011101110", "0010001000001100010010000010000000000000000", "0000000000001000000000000000000000000000000", "0011001000001100110000000011000101000010000", "0011001000001000110011110001010101010010000", "0001000000001100010000000000000000000000000", "0011001000001100110010000011000101000000000", "0011001000001100111010000001000100000010000", "0011001000001100111011100011010100010110000", "1111111100111101111110100010101110110111110", "1010101000011100110011110011010111001111010", "0000000000000100010000000000000000000000000", "0001001000001100110000000010000000000000000", "0111111110101101111100110111011111011111110", "0011001000001100110011100011000001010110000", "1011111010011001111011110111010111001111110", "0011001000001100110010000011000000000000000", "0011011000011100101111110011010100010110100", "0011000000001100100010000011000100000000000", "1111111110111101111010110111010011001111010", "0011001000000100111010100011000101000010000", "1011111000011100110111110011010110010100010", "0011000000001100111001100001000101000010000", "0011000000001100110010000001000100000000000", "0010011000001100111111110011010100010110100", "0011001000001100111111110011010101010010000", "1011010000010100011111000011010110010111100", "1101111011100101111111111111110111101011010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {16, 6, 35, 37, 14, 20, 38, 10, 11, 2, 7, 18, 42, 40, 0, 9, 34, 41, 28, 22, 36, 29, 27, 23, 3, 12, 39, 33, 4, 24, 8, 32, 17, 30, 5, 25, 13, 26, 31, 19, 21, 15, 1};
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> m = {"001111100101101010101001011", "100110111111011111001101101", "000000000000000000001000000", "001000000000000000001001001", "001101101101101011111001000", "001000000000000010011001001", "000101001101000001111001111", "101111101001100101010001010", "001001000001000010011000101", "001100001001001001100001111", "101111111101111111111001101", "001100000000000010011001001", "001101100100001011111001111", "100011101101100011111001001", "001101001000000011111000101", "001111101101011011101101110", "001000000000000000001001001", "001001001001000010011001101", "001101001000000011001001100", "001100000000000010001000001", "000000000000000000000001000", "101111101101011001111001110", "101111101111011011111101111", "000000000000000000000000000", "001101000000000010011000001", "000101001001000011101001101", "001000000000000000001001000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 0, 24, 21, 8, 18, 10, 3, 16, 11, 2, 19, 9, 6, 12, 4, 22, 15, 14, 20, 25, 5, 1, 26, 17, 13, 23};
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> m = {"00100000000001000000001001000", "00110010111101000011001001000", "00000000000000000000001001000", "10000010101100000000001000000", "11110010111100110010001000010", "11110001101111010011111100110", "10000000010001000010011001000", "11001010011100001011011101010", "10100000010101000000011001000", "10100000000000000000000001000", "10000010100000000010011000000", "00000000010001000000001000000", "10111011111100001111101101000", "00000000000000000000000000000", "00110000011101000010011001000", "11110010111101000011011101000", "11010010101001110011010101010", "11101011011101011001010101110", "00100000010001000000001001000", "10110010111101100010011001000", "11010010111101110001011101010", "00000000010100000010000000000", "00000000000001000000000001000", "00110000101101100001010000000", "11111110111110011011111001110", "00000000000001000000000000000", "11011011111100110001101101000", "01100010111101110011011000000", "11110101011111110111111110110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {24, 12, 25, 16, 7, 2, 18, 6, 19, 23, 17, 21, 3, 28, 15, 11, 8, 4, 22, 14, 9, 20, 26, 13, 1, 27, 5, 10, 0};
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> m = {"0010001110000000000", "1000010100010110010", "0000000100000000000", "1110011110010011110", "0111011111101101110", "1010001110110010000", "0000000000000000000", "0000000000000000000", "0000001100100000000", "0111011110111111010", "0000001100000000000", "0000001110100000000", "1011001100110011100", "1010011010100010000", "0010001000110000000", "0100011110000010010", "1110001110100110010", "1010001100100000000", "1111111110101111110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {11, 7, 13, 4, 1, 9, 17, 18, 15, 2, 16, 14, 3, 8, 12, 5, 6, 10, 0};
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {10, 24, 42, 36, 14, 3, 15, 31, 46, 34, 9, 19, 37, 41, 48, 45, 16, 30, 5, 2, 18, 27, 11, 13, 20, 49, 22, 0, 25, 17, 8, 33, 43, 47, 6, 23, 26, 40, 35, 4, 12, 7, 38, 39, 32, 29, 21, 1, 44, 28};
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> m = {"011011111101111001100001", "001101011101111000010000", "000101110000011000000000", "000001000000011000100000", "011100111101111101110001", "000000000000001000100000", "000101010000000000100000", "000101000000011000000000", "000001110001110000110000", "001101110001001000000000", "101111110101110101110001", "001101100000010000100000", "001101110101011000110000", "000000000000001000000000", "000000000000000000000000", "011101101101011000110000", "111111110111011101110011", "011100011101101100110011", "000000000000001000000000", "000100100101001000100000", "111111111111111111110110", "111101111110101110010011", "011101100101101000110000", "001101111101011100010010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 10, 16, 19, 5, 20, 17, 18, 11, 14, 3, 15, 12, 21, 23, 8, 2, 6, 22, 13, 0, 1, 9, 7};
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> m = {"001100010110001000000100000110100000100000", "001101010110001001000100000110100000100000", "000000000100001000000000000001100000000000", "000000000000001000000000000011000000000000", "010001001010001101100110000111001000101000", "001100000100001001000000000111100000100000", "100110011111111100100110111110101010100110", "001101000110001001000000000011000000100000", "111101010110001001000110000101100000101000", "000100000000000000000000000111100000000000", "000101000100001001000000000111100000100000", "111011010010001101000100111111101010000010", "110011001110011101000010011111100000110110", "111111011000001001100110010101101000111000", "000000000000000000000000000011000000000000", "111001010100000001100110000010101000001000", "111111111111011101101110011110111111011111", "000100000100001000000000000111100000000000", "111001011100001001000110000111100000101000", "111111101111001101101110101111111111111110", "111001111001110001100010101101101010111110", "001101010100001000000000000111100000100000", "001101010110001001000100000110100000100000", "111111011111111111111110111111111011011111", "111001010100011101100110011111101010111010", "111101010110001101000110000110100000111000", "001111011110011100000110010111001000111000", "000100000000000000000000000011100000000000", "000000000000000000000000000001000000000000", "000000000000000000000000000000000000000000", "000100000000000000000000000011000000000000", "011101011100111101101110111111101011110011", "011101011110000001000100000110100000001000", "110010111011111101000110111111101011111111", "111011010000011101100110011111101000011000", "101011111111011101101110110111100000001110", "001100000100001001000000000110000000000000", "111001011110001101100110000010101000101000", "110001010010001001000110000101100000100000", "110011011110011101100110001111101000101010", "111011011110011001100010011101101000111000", "010111111110001101101110111101100011101110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {25, 26, 33, 38, 17, 31, 8, 29, 23, 35, 30, 9, 10, 16, 39, 20, 1, 34, 21, 2, 7, 28, 27, 0, 11, 18, 15, 36, 40, 41, 37, 3, 22, 4, 12, 6, 32, 19, 24, 13, 14, 5};
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> m = {"001111", "101011", "000111", "000000", "000101", "000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0, 2, 4, 3, 5};
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 1, 30, 37, 29, 28, 26, 25, 20, 2, 34, 27, 0, 43, 42, 45, 39, 19, 10, 47, 48, 31, 22, 14, 44, 36, 16, 5, 46, 8, 24, 7, 12, 15, 23, 33, 6, 41, 40, 35, 13, 17, 32, 38, 49, 9, 11, 21, 18, 3};
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> m = {"01000000110", "10110000011", "10010010110", "00101011000", "10000000000", "10011010100", "01001000010", "01000000000", "00100010000", "00001010000", "10000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> m = {"0100100000001000000110100110", "0010100011000000000100101001", "0000100000000000000101000101", "0000000000000000101001100100", "1001010000011010001010010100", "1100101100100010000110110110", "0000110100010100000001010010", "1000010010000110001101101011", "0000010101100001001001000000", "1000111100000100011000000000", "1001000101000001000001010000", "0001010000101000000000101000", "0001000011000000000000010010", "1000011001001000101011000000", "0001001001000000000110000100", "0110011110000100000000110000", "0000100110010010001000001010", "1000000000000000100001010000", "0000010001100101000000000000", "1001001000000000100010110000", "1110011001100101000000110100", "0001100001000100000010010010", "0100000101001000000000010110", "1110100011000010000110000000", "0011010000110010010000100010", "0000010010000010100100000001", "0010000110101011010001101100", "0100010000000001000000000100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> m = {"0100000110100010000000000000010000", "1001001010010000001010000100011001", "0000111011000000010101111000100000", "1000000000100000000000011101000010", "0010000001110000011000010101000011", "1000100000000010110001001010000000", "0110000001001001110100100110000000", "0001000001000000001000100111000001", "0100000000000001010010110101000100", "0010010100100011100010001010010000", "0010010000000110111000000001011000", "1101111110000000011111010000111011", "0001001000100001000001000010000010", "0100100000001010000010000100000010", "1111000010001001101101010000100010", "0001010001100000000001000111000101", "0010010011000010000000010001010000", "1111100010110001000100100111000110", "0000001100000101000000011010100001", "0000000110000100100010000100111100", "0010001010011101000000000000000000", "0011000000000011000100111100001100", "0000000100001100010010010000101000", "0010001100110110000000100101110100", "1101000010000101000110000000000000", "0010111100101001010010010011010000", "0011001000001010001100000000010100", "1000001000100000100100101010111010", "0001000100010000001011000000000000", "0000101100100000001000000000100000", "0000000110011100111001001100000000", "1010101010001110100001010000000001", "1000101000110001010010000001011000", "0001100000111000011010001100010000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> m = {"000000100000000001000011000000000001110", "101000110010000011000101000010010011100", "010000000000001000100110000100100001010", "000000101000010000001000100100010110011", "000000100100000001101110011000001000001", "001000000110000000000110000111100000011", "000010001100001000100000010000100101000", "100001001010000000000000100010001110010", "000001010010111001110111001001010010110", "001000100000001011010010000000100010000", "000100000000111000001000101000000001001", "000001101000000000001000100011000000101", "010100000001000001000000010000000000010", "100000000000000000000000000000001010000", "000101010010000000010110000000010000001", "000001000000001000100011000011110010000", "110000110000000001000111101010011000010", "010100000001100000001000010110000100110", "000111001111101000011010000110000110000", "111100110010001001000010001100000000110", "000000001101011000100001000100100100000", "100000100000000010010001010010001001000", "010011011000000110000001001000000010100", "101000001000100001001110100000000000010", "000100010000001100101001001011000100111", "001100110111000000011000000001011010010", "110011110110001001011000010000100010110", "011100101000101000010100000000000000000", "100000000000011000001011100000100001000", "101100000010100001000100110110011000000", "010101110000101000010001000010001000010", "001000000011100001000000010100100100011", "000100000100100010000000111110000110000", "000000100011011001101100010010010000101", "000100000011010100000000000000000100100", "000011000000110000110000000110001000100", "100000110000000011101000000000010000000", "010001000101001110000001010000001010000", "000100100011001100000000101010000000100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> m = {"0100000000110111011011101000001010000000100", "0011000000110011110010000000101000000100000", "1000000000000001011001010000011010011100101", "0000011011111011000100010101000000000100010", "0100011000110000101011110101110000101010110", "0000101110110110110000000000010011000011000", "0010000100000000000010000010000000111000001", "1011010010000000011001000010100100110000101", "0000100001000101010001100100001110000100000", "0000110000100010010100110001000011010010100", "0001010000001100110000000100010011000011000", "0011010001000000000000101010101000010000101", "0001000001000000000010010000000000011100100", "0011010100000010100010100000010000001000001", "0010001010010000000100010001000000101010010", "0000100000001010000000100000100010010010011", "0100100000011011000000100100100110010000000", "0000010000010010100010000110100100000011011", "0110100100101000000011101010010010100101100", "0001101111011000010001000010100100110110000", "1000110100011011101001100001000111000101000", "1000100000000001100110000011000000001100000", "0010001101010011010000011000000111111110000", "0001000010000000001110100100010000001000011", "0110001110001000000010000101000001010100000", "0000101010000011010110100001000110000000011", "0010001000100010001000010000100000010010000", "1101001000001000000010001010100000010000001", "1000001100100100000011001111000001101010101", "1000011101000110001000110001000100001000000", "0001011000010010101000101000010001110000100", "1011000000000101000000000000100000001011000", "1100010000100001110011000001110000000010100", "0000000100100001000110100100000000100000100", "1011001000010100010101100010100000010011000", "0101101011100110010101000100000010101111100", "0000000000010011001001011100010000000000001", "1101010010000100000010000000000000011000010", "0000100000000001110100000100010110001001100", "0010000000000000000011000000101000100000001", "0010101100100001100001101000100000000000000", "0001010000000000010000000100000111000101100", "0010000000001100000010010100110001010010000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> m = {"001000000101011", "101000010000100", "000000001000000", "001000000000000", "100000010000000", "011000001010000", "010010000000011", "110000001000100", "010000100000000", "010000100010000", "000000000000000", "111100010010000", "000000010001001", "000000000001000", "010000000010010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> m = {"0110001000100100100", "0000100000101110110", "0000000101001001000", "0110101001000000000", "0010011101100100100", "0010001000011010000", "0011010110000010000", "0011101010000000000", "1000011100000000010", "1000001000000000110", "0011100001000100100", "1000010000000000110", "0000110001010000000", "1000000010100000000", "0001100000000001000", "0011100001000000010", "0001100000111001010", "0000010011001000100", "1001101111001000100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> m = {"00101000000110000001", "10000000000000000001", "10011010100100010000", "01001000000010101001", "00110001100000000101", "10000001010001010100", "11001000001001000000", "10110110110100101000", "00000001010001001010", "00100000000100011001", "10001011000010100110", "00100101001001100000", "01001110001001000001", "00010011100100011100", "00000000110010010101", "10000000100000100001", "10001011011000100011", "10010011001000000000", "00000101111011100001", "00000001110101001000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> m = {"00100", "00100", "00000", "00000", "00000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 2, 3, 4};
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> m = {"000001010000111", "000010000100001", "000010111100000", "001000000011100", "010000010001001", "000100100000001", "000010000001000", "000100000000100", "000000000111101", "101110000000001", "101000011100000", "000000010000100", "010000001011000", "011000000010000", "000110111100110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> m = {"00010100001111000100001000001000101010000", "00001001000000010000101100011001000000000", "01000010100000110101000110110001100001001", "01101000101110000000110000100001001011011", "00000110000000000000110000100011001110000", "00010000100000010100010110010010101010011", "10100101100000000110010000100000001001010", "10100000110000110000100000011100000000110", "01010111000011000000000100100001001001100", "01001010000000000000000011001110000011000", "00010010010000111100001100110000010010000", "00010001100000001011011010100000010100011", "00000100101101000000001100000010101100000", "01000000101000000110010000000011100100000", "10110100000000000001001001000010011100000", "10001001010100000100000100000110000010000", "00101100000010010000000100110110100000111", "01000010001000000000001000010100010000001", "00100000001010100000010000100010010101001", "00100000000100001000001000001101000000000", "01111000001000000100010000100000100001111", "01010000000001000100000010110110001010000", "10101100001001000000010000010011010010010", "10000110010010100010010000110001001110110", "01000000101000100001000000001000010011001", "00101000010000000000000100000000000110000", "00010000000001001001101000000000000001100", "01100001000000000100000000000101001110110", "11000010100000100100001000000000000101010", "10010110101011111111000010000000100000111", "00100010100101000011000101000001010001011", "00111011000001000001110100110010001000100", "00101010000000100111000001000100000101100", "00011000001000000010001000000010000000000", "10011010000101010100010001001110000010100", "00100000001001011110000000110000111000101", "00000001001001001001010101000011000000100", "00000000111010000000010100101001100010000", "00011000000000010100011001001100000100000", "00001010000000100010000000000010100101100", "01000100011111000100100011100101010000100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> m = {"0001011011000110", "1010010110110011", "1101000000000100", "0010110001101101", "1111000000100001", "0011001111010100", "0000010100001100", "0000011000111000", "1000100101110010", "0010001000100000", "1010001001001000", "0010001111000000", "0010000000110110", "0001000101011001", "0001011110010101", "0001101010000110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> m = {"00", "00"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1};
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> m = {"00", "10"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0};
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> m = {"01", "00"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1};
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> m = {"01", "10"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> m = {"0000", "0000", "1000", "0010"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 1, 0};
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> m = {"0000", "0000", "1000", "0110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 1, 0};
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 1, 2, 0, 4, 6, 10, 13, 18, 7, 19, 15, 28, 29, 20, 30, 8, 31, 35, 39, 14, 11, 26, 40, 41, 25, 5, 42, 43, 36, 32, 44, 17, 45, 21, 22, 23, 34, 37, 9, 46, 16, 27, 47, 24, 33, 48, 49, 38, 12};
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 0, 10, 36, 13, 5, 39, 11, 42, 6, 14, 41, 43, 16, 20, 44, 47, 17, 48, 21, 8, 4, 19, 18, 28, 23, 29, 7, 40, 46, 24, 32, 26, 35, 49, 12, 22, 30, 37, 31, 38, 9, 34, 33, 45, 27, 25, 15};
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 0, 2, 49, 48, 47, 46, 45, 41, 44, 43, 39, 42, 36, 37, 40, 38, 35, 34, 32, 33, 30, 31, 29, 26, 27, 28, 25, 23, 24, 22, 20, 17, 12, 21, 19, 16, 18, 8, 15, 11, 10, 9, 14, 6, 13, 7, 5, 4};
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> m = {"0000000010000000000", "1001000000000000000", "1101000000000000000", "1000000000000000000", "0000000000000000000", "0000100000000000000", "0100000000000000000", "0000100000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 2, 0, 3, 7, 5, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> m = {"00001", "00010", "10000", "00001", "00000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 0, 3, 4};
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> m = {"00000000", "00010000", "10000000", "00000000", "00000000", "00000000", "00000100", "00001000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 0, 3, 5, 7, 6, 4};
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> m = {"00000000", "00000000", "01000000", "10000000", "00000000", "00000001", "00001000", "00000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 2, 0, 5, 6, 4, 7};
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> m = {"000", "000", "100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 0};
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 0, 16, 46, 17, 34, 3, 23, 26, 24, 42, 36, 48, 5, 27, 37, 29, 6, 39, 8, 19, 15, 45, 28, 40, 44, 7, 20, 9, 25, 4, 43, 32, 49, 21, 13, 47, 10, 11, 38, 35, 14, 22, 18, 30, 41, 33, 31, 12};
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> m = {"00000", "10000", "00001", "01000", "10000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 1, 2, 0, 3};
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> m = {"000001", "000000", "000000", "010000", "000100", "010000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 4, 5, 2, 1, 3};
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> m = {"0000", "0000", "1000", "1000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 0, 1};
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> m = {"0000001", "0000010", "0000010", "1000000", "1000000", "0000001", "0000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 0, 1, 5, 6};
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> m = {"00001", "00100", "00001", "10000", "00000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 0, 4};
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> m = {"0000", "0000", "0000", "1000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 0};
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> m = {"0000000", "0000000", "1000010", "0010001", "1000000", "0000000", "0100000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 5, 1, 0, 2, 6, 4};
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> m = {"000000000000", "000001100000", "100000000000", "000000000000", "000000000000", "000000010000", "000100000101", "000100000000", "000000000000", "000000000000", "000000010000", "000010000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 0, 7, 9, 3, 4, 6, 10, 11, 5, 8};
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> m = {"00000", "00000", "00000", "01100", "10000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 4, 2, 0};
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> m = {"0010", "0010", "0000", "1000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 0};
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> m = {"0011", "0000", "0000", "0100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 2, 3, 1};
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> m = {"00001", "00010", "00000", "00001", "00100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 4, 2, 3};
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> m = {"00000", "10000", "00000", "00000", "10000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 0, 3, 4, 1};
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> m = {"00000000000010000000000000000000010000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000010000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000010000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000001000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 20, 45, 46, 47, 48, 49, 1};
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> m = {"0000", "0010", "0000", "1000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 0};
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {48, 49, 44, 47, 45, 46, 43, 42, 41, 40, 39, 36, 38, 37, 34, 30, 33, 29, 35, 26, 32, 31, 28, 23, 27, 20, 25, 24, 22, 21, 18, 19, 17, 16, 14, 15, 13, 12, 11, 9, 10, 7, 5, 8, 6, 4, 3, 2, 0, 1};
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> m = {"0000", "0001", "1000", "0000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 0, 3};
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14, 5, 17, 18, 19, 1, 9, 11, 21, 33, 15, 0, 34, 22, 36, 25, 12, 37, 38, 40, 2, 6, 41, 26, 23, 24, 28, 43, 3, 7, 44, 20, 16, 13, 4, 27, 32, 45, 42, 29, 10, 35, 46, 8, 30, 39, 47, 48, 49, 31};
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> m = {"000000000", "000010000", "000100000", "000000100", "000001000", "000000001", "000000010", "000000001", "000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 2, 3, 4, 5, 6, 7, 8};
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> m = {"0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000001000010000000", "0000000110010000000", "0000000000100000000", "0000000000100000000", "0000000100100000000", "0000000000000000000", "0000000100100000000", "0000011000010000000", "0000011111000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000", "0000000000000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 2, 3, 4, 7, 8, 11, 12, 9, 13, 10, 5, 6, 14, 15, 16, 17, 18};
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {49, 48, 45, 47, 44, 42, 46, 43, 38, 41, 40, 39, 36, 37, 35, 32, 34, 33, 30, 28, 31, 29, 25, 27, 26, 24, 22, 23, 21, 20, 19, 18, 17, 16, 14, 15, 12, 13, 11, 10, 9, 8, 7, 6, 5, 4, 2, 3, 0, 1};
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> m = {"0000010000", "0010000000", "0000000000", "0100000000", "1000000000", "0000000000", "1000000000", "0010000000", "0000010000", "0100000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 5, 7, 3, 0, 9, 1, 6, 8, 4};
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> m = {"0000000", "0000100", "0001000", "1000000", "1000000", "0010000", "0100000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 1, 3, 4, 5, 2, 0};
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> m = {"0001", "0001", "1000", "0000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 0, 3};
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {19, 7, 15, 33, 12, 14, 13, 22, 46, 0, 26, 8, 35, 5, 2, 29, 38, 20, 6, 39, 23, 16, 42, 24, 18, 49, 25, 40, 3, 1, 17, 27, 10, 30, 36, 45, 9, 28, 41, 43, 11, 34, 32, 4, 47, 31, 48, 21, 37, 44};
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> m = {"01000", "00000", "00010", "00001", "00000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1, 2, 3, 4};
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 8, 4, 41, 30, 6, 42, 9, 21, 13, 16, 46, 38, 18, 23, 35, 15, 39, 10, 43, 5, 40, 25, 12, 47, 29, 45, 1, 32, 37, 44, 48, 27, 11, 24, 28, 26, 0, 19, 22, 36, 7, 2, 49, 20, 14, 17, 34, 31, 33};
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> m = {"000010000", "000000001", "000100000", "000000000", "000000000", "001000000", "100000000", "010000000", "000000000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 5, 6, 7, 4, 0, 2, 8};
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> m = {"00000", "10000", "00010", "00000", "01000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 1, 3, 4, 0};
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> m = {"01000", "00000", "01000", "00100", "10000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 4, 3, 2, 0};
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> m = {"0000", "0000", "0100", "1000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 2, 0};
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> m = {"0000", "0001", "1000", "1000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 0, 1, 2};
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> m = {"00001", "00010", "00000", "00000", "01000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 2, 3, 4, 1};
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> m = {};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> m = {"00010", "10000", "00010", "00001", "00000"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0, 2, 3, 4};
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> m = {"0000", "1000", "1000", "0100"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 1, 2, 0};
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> m = {"00000000", "00000000", "01000000", "01000000", "00000100", "00000010", "00000000", "00000110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 3, 1, 2, 4, 6, 7, 5};
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<string> m = {"0000", "1000", "1100", "1110"};
    RelabelingOfGraph* pObj = new RelabelingOfGraph();
    clock_t start = clock();
    vector<int> result = pObj->renumberVertices(m);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 2, 1, 0};
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8527113&rd=10780&pm=7860
********************************************************************************
#include <cctype> 
#include <cmath> 
#include <cstdarg> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
 
#include <sys/resource.h> 
#include <sys/time.h> 
#include <unistd.h> 
 
#include <algorithm> 
#include <deque> 
#include <functional> 
#include <iostream> 
#include <iomanip> 
#include <limits> 
#include <list> 
#include <map> 
#include <numeric> 
#include <queue> 
#include <set> 
#include <sstream> 
#include <stack> 
#include <string> 
#include <utility> 
#include <vector> 
 
#include <ext/algorithm> 
#include <ext/hash_map> 
#include <ext/hash_set> 
#include <ext/numeric> 
 
using namespace std; 
using namespace __gnu_cxx; 
 
template<class T, class V> 
vector<T> operator,(vector<T> v, V t) { 
    v.push_back(t); 
    return v; 
} 
 
#define VAR(i,e) __typeof(e) i = (e) 
#define FOREACH(i, C) for (VAR(i, (C).begin()); i != (C).end(); ++i) 
 
#define FORI(p, x) for (int i = p; i < (int)(x); ++i) 
#define FORJ(p, x) for (int j = p; j < (int)(x); ++j) 
#define PB push_back 
#define S size() 
 
#define VI vector<int> 
#define VVI vector<vector<int> > 
 
struct RelabelingOfGraph{ 
    vector <int> renumberVertices(vector <string> m); 
     
}; 
 
vector <int> RelabelingOfGraph::renumberVertices(vector <string> m) { 
    int n = m.S; 
    VVI graph(n); 
    VI rev(n, 0); 
    FORI (0, n) { 
        FORJ (0, n) if (m[i][j] == '1') { 
            graph[j].PB(i); 
            rev[i]++; 
        } 
    } 
 
    VI lab(n, -1); 
 
    for (int l = n - 1; l >= 0; --l) { 
        int idx = -1; 
        for (int i = n - 1; i >= 0; --i) { 
            if (rev[i] == 0 && lab[i] == -1) { 
                idx = i; 
                break; 
            } 
        } 
        if (idx == -1) return VI(); 
 
        lab[idx] = l; 
        FOREACH (it, graph[idx]) rev[*it]--; 
    } 
    return lab; 
} 
// Powered by Krzysan's Cleaner 1.4-6a 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/