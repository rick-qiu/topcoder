/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8245
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class JumpingBoard {
public:
    int maxJumps(vector<string> board);
};

int JumpingBoard::maxJumps(vector<string> board) {
    int ret;
    return ret;
}


int test0() {
    vector<string> board = {"3942178", "1234567", "9123532"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> board = {"2H3HH4HHH5"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> board = {"3994", "9999", "9999", "2924"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> board = {"123456", "234567", "345678", "456789"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> board = {"9"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> board = {"2H9HH11", "HHHHH11", "9HHHH11"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> board = {};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "51HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHHH1H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H12H1HH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 154;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> board = {"4HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HH21H21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H51HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHHHH1H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "12HH4H21H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HH21H21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "12HH4H21H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HH21H21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "12HH4H21H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HH21H21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "12HH4H21H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HH21H21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "12HH4H21H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HH21H21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1057;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> board = {"5H54H8HHH1693139H7HHHH1H52HHH4HHH73HH28H9HHHHH5H64", "HH686235H5HHH7H3HHH35HH6H2H3H883H7HHH54H4H681HHH1H", "125HH78H418HH7HHHHHH9HHH8H75H5HHHH2H57H9H2H3H7HH6H", "8HHHH6HHHHH77H9HHHH9HHH7H8HH4H8532H1HH3HH4HH417H6H", "2H5H73744HHH3HHH6HHHH71578H729HHHH1HHH6HHHHH88HHH9", "78H9H9H63H79H3HH13HH2HHH2H5HHHH3H8HHHH8HH4H1H67HH2", "33H4H79H9HHH1HHH3HH57H7HHHH4H3H52HHH648HHH9HHH7HHH", "8HHHH99HHH88838HH8HHHH7H315H72HHH3H3HHHH373HHHHH9H", "H928H4HH9685H177HH2HH22H1HHHHHHHHHHHHH9HHHHH9HH74H", "1H4H6HH8HHH7H5H7HH6HHHHHHHH6HH5HHHH4HHH52H5HHHHHHH", "H6HHHHHHHHHH8HH8HH7HHH56H6H1H1HHHHHHH3HHHHHHHH1HHH", "HHH8H9H2517HHH2HHHHHHHHHH7HHHH276HHHHH2H5HHHH3HHHH", "82H1H6HH7H85H9H24HHHHH1HHH1HHHHHHHHH7HHHHH9926HHHH", "67HHHH714HHHHHHHHH9H4HHH18H1HHHHH22HHHHHHHHHH51798", "H7HH6HH4H5HHHH43HH1HHHHH3HHH1HHHHHHHHH2H869HHH323H", "1HHHHHH7HHHHHH94H9H6HHHHHH57HHH7HH5HHH6HHH574HH42H", "HHH5H6HHHH9HHHH92HH7HHH24H4H1H1HHHHHHHH63HHHH1HH7H", "H3HH67H9HHH3HHHH3HHH3HHHHHHHHH5H1HH19HHHHHHHHHHHHH", "H7HH818HHHHH9HHHH9HHH3HHHH8HH1H1HH5HH1H2H6HHHHH7HH", "4HHHH9HH92H9HHHH616H1H3H1HHHHHHHHHHH15HHHHHH1HHHHH", "7285H6H5HHHH3HH7H4HHH73HHH3H1HHHHHHH4HH3H99HHHHHHH", "HHH3HHHHH58HH3HHHHH8H4HHHHH3H619HHH9HH3H84H48HHHHH", "H7HHH1H1HHHHHHHH7HHHHHHHH5HHHHH2H1HHHHH34H5HHHHH3H", "9HHH1H9HHHHH4HHH1HH5HHHH6H1HHH5HH473HHHHH8HHHHHH52", "HHH789HHHHHHH5HH92HHHHHHHHH5HHHH2H5HHHHHH8HHHHHHH6", "4HHH9HH7HH2HHH3HH85HHHH1H36H2H1H5HHHHHHHHHH18HH3H9", "8H9H5H3558HHH3HHHHHH1HHHHH3HH9HH5HH13H3H97HHHHHH4H", "14HHH6HHHH356HH6H44HH2HHHHHHH3HHHH2H6HHHHH3HH77HHH", "3H94H79H2H62HH56HHHHH3HH42HH6H4HHH3HHHHHHHHHHH728H", "737HHH4HHHHHHHHHHHH7HHHH7H42HH56HHH7H94H4H3HHH2H5H", "HHH1HHH35HH6H3HH1H4HHH1HHHHHHHH2H53HH2H1HHHHHHH332", "26491HH22HHHHHHHH3HH58HHH2HHH6HHHHH7HHHHH44HH63HH9", "8HH5H7H2H5H9HHHHHHHH2HHH1HHHHH15HHHHH5H5H283HHHHHH", "39HHH4H9HHHHHH44H1HHHHHHHH5HHHH14H4HHH1HH5HHHH3HHH", "149H7HH5HH2HHHH2HH2H1HHHHHHH363HH1H1HHHHHHH47H9H35", "HHHHH6HH6HH4HH8HHHHHHH3H82H9H14HHH1H3HHH315HHHH2HH", "HHHHHHHH9H17HHHHHHH17HH71HH6H3HH45H4HHHHHHHHHHHH4H", "H22HH71HH1HH1H3HHHH3HHHH3HH4597HHH3HHH53HHH3H1HHHH", "H2HHHH4HHHHHHHHHHHHHHH5H8H26HHHHH1H3H1HHH1HHH6HHHH", "H36H6191HHH1HHH13HHHH5HHHH9HHHHHHHH7H3HHHH1HHHHH41", "1HH6HHHHHHHHHH4HH52HHHHH1HHHH2HHHHHHHHHHHH62H1HH23", "HHH635H55HH4H4H3H14HHHHHHHHHHHHHH1H4HHH1HHHH2HHHHH", "H1HH7H2HHHHHHHHHH3HHHHHHHHH3HH4HHHHHH27HHHH1H9HHHH", "HH3HHHHHH1H1HH5HHHH2587HHHHHH13HHHHHHHHH1HH78H5HH7", "HHHH913HH9HHH5HH6HHHH2H6HHH5HH4H1HHHHHHHHHHHH3HHHH", "HH5H5HH92HH1H3HH1HH1HHHHHHH2HHHH6HH2HHHHHHHHHHHH43", "HH57H4HH62HHHH13HHHHH1HH1HHHH5HH4H32H5HHHH1HHH7HHH", "H3H2HH4H9H3HHH5H41HHHHH8HHHHHHH9HHHH3H8H4HHH5H54H2", "2HHHHH2HH9H1HH9HHH1H9H31997HH1HHH63H4HH3H31HHH2H3H", "H4H63HH5HHHHHHH16HHHHHH9H8H29HHH22HH8H2H5HHH34H8H3"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> board = {"7H417HH9H64H1HH37H4HHH28H816HH9535HH6H37HH9HHH228H", "HHH5H65HH4HHH2455HHHH3HHHH2H5HH6HHHHH5HHHHH9H9HHH9", "3H81685HH3HH7HHHHH334HH3HH8HHHHHHH3HH4HH53HH8H88HH", "HHH8HH4HHHH67HH5HH9H3HH7HHHHHH1H4HHHHHHHHH8HH227HH", "7HHHH7HHHHH81HH59HHHHHHHH8HH6HHHH7H4HH6H2517H8HHH1", "8HHH7H797HHHH8HH6HHHH78H5H888HH77HH1HH6HHHHH7HHHHH", "4H5H86HHH8HH267HH1HHH6H3HHH5H5HH7H149HHH1H46H2H6H5", "18H9HHH8H6H6H1633H88HHHHHHH2H8HHHHHHH9H3HHHH9719HH", "6HH9H93HH4HHH9HHH9H9HHH6H52682H7H1HH1H4HHH5HH5535H", "6H4H8592979HHHHH86719HHH2H3HHH2HHHHHHHH5HH3872H6HH", "68HHHH9HHHH7HHH25HH7H18HHHHHH57HHH3HH2H7HHHHHHHH4H", "H3HH76869HHHH52HHH8HHHHH9H6HH75H96HHHH2567HHHHHH1H", "19H7HH899HHHHHHHHHHHHHHHH3HH8HH3HH4HHH9HHH5H5HH188", "H33H8HHH313HHH8H1HHHHHHHHHH9HHHHHHHH3H3HHH2HH8HHHH", "2H8H58HHHH7HH1HHHHHHHHH8HHH2HH85HHHH6HHH5H4HHH5HHH", "H233HH85HHHH1HHH7H35HHH39HHHH1HHH1HH4HHH16HHHHHHHH", "1H978HH8H5HHH68HHHH2HH13HHHHHHHHH32HH2HHHHHHHHH2H7", "H996HHH5HH531HHH1HHHHHHHHH17HH1HH4HHH2HH8HHH3HHH3H", "HHH5HHHH3H6HHHHHHHH56478HHHHH1HHHHHHHHHHH87HHHHHH4", "1HH9491HHHHHHHHHHH18HHHHHHHH2HH3H91H3HH2H3HHHH2HH6", "HHHHHH716HH1HHHH1H36HHHH73HH2HHH2HHH3HH2HHHH15HH21", "H2HH9H7HH3HH92HHHHHHH3H85HHHHHH4H3H1HH1HHHHHH26HHH", "HH1HH193HHHHH2HH2H1HHH315HH7H1H5HH1HHHHHHHHH7HHHH7", "HHHH376HHHHH3H5HHHHHHHH4H4H3HH2HHHHH2HHHHHH8H1HHHH", "3HHH4HHHH29HHH13HHH13HHH6HHHHH8HHHHHHH6HHH8H2H6HHH", "H5HHHHH13HH2HHHHHHH4HH1H6HH7HHH16HHH1HHH3H52HHH2H1", "317HHHH833HHHHHHHHH17HH6HHH1H1HHHHHHHHHHH2H8HHHHH9", "H3H7HH3HH7HH5HH2HHH6HHH72HH9HH23HH1HHHHHHHH5HH584H", "HHH4384HHHHHH22HHHHHHHHHHHHHH8HHH3H4H5HH53HHH2HHHH", "7HHHHH5HH466HHHH4HHHHH81HHH2HHHHHHHHHHHH3HHH4HHH33", "22H555HHH2HH3HH1HHH2H1HH5HHH61HHH71HHH4HHH7HHH2H96", "HH1HH714HHHHHHHHHHHHHHHHHH81H3HHH2HHHH2HH1HHHHHH3H", "H181HHHHHHHH7HHHH4HHHH91HH8H8H2H1HHH2H3HHH3HH56HH5", "8H2H16HHHH4H5H6HH13H4HHHHHHHHHHH7HHHHHH84H7H1HH1HH", "HHH5H7H2HHHHHHHHHHHH2HH3HH2H9H3HH1HHHH3HH1H3HH18HH", "HH6662HHHH92H1HHHHH4H1HH3HH1HHHHHHHHHHHHHH8H4HH3H4", "12HHH7HHHHHHH3HHHH4HHHHHHH38H4HHHHH4H1H7HHHHHH56H2", "3HHHHHHH5H2536H1HHHH6H62H78HHH14HH1HHH2HHH14H1HHHH", "H1HH26HHHHH29HHHHHHHH2HH15HHHH3HHH3HH8HHHH5HHH77H5", "HHHHHHHH1H5H4H84HHHHHH633HHHHHHHHHH6H718HHHHHHHH3H", "9H4HHHHHHH9H5H6HH15HH1HHHHHH2H7H5HH151HHHHHHHHHHHH", "1H4H3HHHHHHHHHHHH3HHHH5HHHH4HHH7HH8HHHH2H1H3HH2HHH", "3HHHHHH31H41HHHHHHHHHHH228H99HHHHHHHH6HH2HH3HHH24H", "HHH3H283HHHHHHH1HHH24H3H38HH2H1HH1HHHHH13H281HHHH3", "HHHH8296HH4HH464HHHHHH6HH4H1HHHHHHHHHHHHHHH8HHHHHH", "137HH5HH964H4H343HHHHH15HH13HHHH14HH2HHHHH32H5228H", "HH719HH7HHHH4H5HHH7HH34H1HHHHHHH4HHH7HHHHHHHHHHH25", "HHHHHHH2HH96157HH2HH51HHHHHHH613HH89H4H189HHHHHHHH", "H2HH1H2HH5146HHHHH2HH4H1H2H1HHH2HHHH416HHHH8HHH25H", "231HHHH1HHHHHHHHH3HH4HHHHHHHHHHHH34H853HHH3HH2H1HH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> board = {"679968166H1HH9337HHH1H6HH1HH3HH7H1H5H814HH6135HH2H", "HH8163799HH3H2536H8HHH2HHH2HHH3HH4HHHH8HH9H9782H7H", "HHH37H9HHHH9HH9HHHHH8HHHHHH8HHHHH3H3H846HHHHH46HH2", "HHHHHH1HHHHH47HHHHHH3HH2H67H4HHH53HHH14HHH7H4517H9", "9955878HH66HHHH89HH5HHH6H16HH7HH55HH97H16HHH275HHH", "6499H29HHH77HH318HHHHHHH46HH9H91HHHHH7HHHHHH57H179", "1297HHH59H1H77H9HHH2H5158HHHHHHH7HH16HH4HHH7HHHHHH", "35H6HH85H259HHHH89HHHH45HHHH9HH6HH2HH8H9HHHHH6HH29", "939H979HH7HH53H8H1H8HHH14HH6HHHH34H1HHH9HHH3HHHH3H", "66HHH7HHH68HH3HH156HH7H4HHH2H9HHHHH5HH5HHHH6HHHHH3", "275HH1H8HH7HH5HHH67HHHHHH42HH7HHHHHH1HH59HHH1HH1HH", "297H9HH3HHHHH7HHHHHH94HHH9H1H5HHHH3HHHHHHHHHH5HH1H", "99HHHHHHHHHHH5H1HH7HHHHHH3HH1HHHH2HHH6HHH9H2HHHHH5", "H3H56HHH3HH46HHH7H9HH4HHHH47HHH53H626HHH7H45H7H84H", "HHHHHH75HHHH93HH83HHH14H16H9HHH2HHHH353HHHH3HHHH41", "1H6HH5HHHH2H5HH4HHH5HHHH42HH6HHHHHHHH176HHHHHHHHHH", "H2H4HH6H9HH65H51HHH9HHHHHHHH6HHH1H7HH7H4H1HH92HHHH", "1HHH5418HHHHH1H3HH1HHH2HH1H1H3HHHHHH1HH6H72HHHHH2H", "HH58HH83HHH6HH5HH1H1HHHHHHHHH3964HHHH1H66HH2HH2HHH", "HHHH4H84HHHH1H9HHH1HHHH33H4HHHHHHH7H7HHHH6H35H733H", "H5HH669H9HH3HH523HHHHHHH24H3HH2H1HHHHH1H2H5HH2H6HH", "129H692H1HHHHHHHHHHHHHHHHHHH32HHHHHHHHH1HHHHHHH4H3", "3HHH6HHHHH3HHHHH3H4HHH52HHH33HH5HH52HH3H1HHHH1HHHH", "HH7HHHHHH4HHHH1HHHHHHHH2HH24HHH6HH2HH2HHHHHHHHH5HH", "HHH7HHHHHHHHHHHHHHHHHHH3H5HHHH97HHHHHH15HHHHHH3HHH", "H13HHHH1HHHH1HHH4HH226HHHHH42HHHHHHH4HH6H27H4HH223", "HHH7H42H87HHH1HH5H5H57H3HH1H3HHHHH4H1H3HHHHHHH32H5", "3HHH3HH7HHHHHHHHHHH63H2H68H1HHHHH1HH7HHHHH31HHH33H", "HH9H3HH8HHH1H413HHHHHHHHHHH4HHH9H38HHHHH1H5HHHHHH5", "HH9HHHHH1HHH7H3H5HHHH834H1HHH3H1HHHHHH1HHHHH9H5HHH", "HH45H2HH7HHHHHH43HHHHHHHHHHHHHHH5H2H1HHHHH9HHH31HH", "HH7824HHHH2HHHH7158HH1HHHH1HHHH13HHHHHH1HHHHHHHHH1", "HHHHH1HHH8HH3HH55HHHHHHHHH3HH1HHHH13HHHHHH6HH81H2H", "1HH9H9HH64H416H9HHH1H5HH7H4HHH3HHHHHHHHHHH3H35HHH6", "HH5HHHH3144H8HHHHHH81HHHHHH4H4HH2HHH2H1HH1HHHH1H3H", "2H83H6HH8HHH5HHH723H6HH4H3HH4HHH2HH2H8HHHHHHH5HHHH", "HHH7HHH44H96HHHHH2HHHHHHHHHHHH1HHH7H19H1H2H5HHHH3H", "1H59HHHHH5H56H1HH719H2HHHH1HHHH2HHHHHHHHHHH2HHHH28", "HH3HHHHHH2HHHH82HHHHH22HH1HHHHHHH4HHHH2H377H52HH54", "1H3HH1HH8HHHH4HHH24HHH2HHHHH1HHHHHHHHH2HHH4H8HH4H2", "HHHHHHH5HHHHHHHHHHHHHHHH8HHHH6HH14HHH7HHHHHH59H5HH", "H7H7HHHHHH6H3HHH5HHH1H15HHHHHHHH3HH1HHHH1HH3HHHHH5", "1H25H5HH62HH1H3HHHH1HHHHH2H1HHHHHH3HH4HHH1HH3H47H1", "H9HHHHHH3HH457HHHH3H62H7HH4HHH2HH414HHH3HHH3175HH8", "H31H9HHHH15HHHHHH4HHHHHHH144H6HHH65HHHH2HH757HHHH9", "HHHHHH94HH5HHH4HH53HH1HHHHHHHH3HHH5HH8HHH3184HHHHH", "13H36H1HHHHH1H2HHH26HHH1H3HH2HHHHHHHHH27HH97HHH9HH", "HH26917H97HHHHHH92H7HHHH353HHH8HH1H1H69HHHHHHH518H", "HH28HHH917H7278H3HH4HHHH1HHH1HHHHHHHHHH7H7HHHH388H", "HH395HHH4HHH3H1H51HH4HHH5HHHH7H8HH3H5HHHH6HHH7H5HH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> board = {"4H386HH87373HH9H914HHH74H4HH416HH7HH2H1H3HH8HHH5HH", "281H8H7HHHH4H5HHH68HHH39HH4HH56H5H1483HH7HHH2H313H", "79H318HHH3HHH5HHH3H35HHHH1HHH89H3H4H8HHH3HHH5H58H3", "8HHH8H926HH9HHHHHH8H2H6HHH7H76H79HHHHH4HH2H78HHHHH", "6H859H3592H77HHHH784HHHH9257HHH1H4HHH1HHHHHHHH6H6H", "HHH99HH8H9HH7HHHH98HH8H9HHHHH2H8HHHHH5H5H56H1789HH", "9H984H9H96HH73H8H44HH1HHHHHHHH3H3HH2H6HHHHH2H7HHHH", "H719H614H88HHHHHH915H6HH1H1HHH2HHHHHHHHHHHH97H718H", "H655995H9HH6H4HH6H9HHHHH9H513HH8H3H62HH564HHHH9HHH", "HH684H97HHH3H45H2H6HHHHHHH66HHH372H72HH5HH1H35H2H1", "9H1H2618H3HH4HHH22HHHHH1HHHHHHH4HHHH78HHHH83H1H3HH", "HH6HHHH9HHH6HHHH78HHHHH9H6HHH9H23HH16H1HHHHHH4H7HH", "59HH3HH4H4HHH1HH89H4HHHHHH16HHHHH2H5H1HH6HHH2H3HHH", "19H1H7HH48HHHHHHH5HHH53H853HHH3H1HHHHHH2H6HHHHH5HH", "69HHHHHH95HH19HHHHHHHH3HH5HHHHH74HHH2HH22HHHHHH2H1", "16H489HH575HH631HHH2H1HHHHH2HHHHHHHHHHHH2H8HHHHHHH", "7HHHH7H3H7HHHHH9H7HHHH1317HHHHH4HHH1HHHHHHH1HHHHHH", "H6354H5H1HH4HHHHHH36H8HHH2HHH1HHHHHH4HHHHHHHHH525H", "HHHH4HH4HHHHH85HH3HH86HHHHHH5HHHH3HH13HHHHHHHH2H3H", "6HHH1H2H5HHHH1HHHHHHHHHHH9HHHHH2HH5H6HHH4HHH6HHHHH", "2HHHH6HH939HHHHHH5H7HH82HH6HHH3H85HHHH4416H6HHH3H4", "H2HH7H7H917HH1HHHHHHHHH71HHHHH9HH2HHHHHH6HHHHH3HH4", "H4H4HH2HH5HHHH2H5HHHHH48HH1HHHH4HHHHHH9HHHH7733797", "HHHH92HHHHHHH7HHH6HH4HH8HHHH7H84HHH6HH1567HH1H356H", "4HHH22HH1HHHHHHHHHHHH55HHH3HHHHHHH66HH77H9HH824HHH", "197HHHHHHH8HHHH4H3268HHHHHHH66HHH68HH6H8HH63HHH78H", "6HH6HH15HH8HH2HHHH7H9HHH829HH1HHHHH2H1HHH7HHHHHH9H", "HHHHHH4HH2HHHHH7HH35HHHH13HHHHHH5HHHH7HH15HH1HHHHH", "147HHH4HHHHHHHHH22HHHH6H3HHH2HHH14H6HHHHH7HHHHHH1H", "H2HH2HH24H3H62H1H3HH1HHHHHHHHHHH6HH26H2HHH8HHHH293", "96HHHHH24HHH32HHH3HHHHHHHH7H9H8HHHH3H69HH1H3HHH3HH", "HHHHHHHHHH8HH3HH5HHHHH757HHHHH1H6HHH9HH5HH1HHHHHHH", "5HH4749HHH8HHHH8HH26HHHHH15HHH8HH55HHHHHHH6HHH31HH", "H4HHHHH8139H9H3HHH559HHH8HH1H2892H1HHHH334HHH1HH1H", "H4HHH7HH6H4H6H3HHH3HHH3H45HH1H75HHH33HHHHHHHHHHHHH", "H42HHHHHHHHH3H31HHHH4HHH5H5HHH815HHHH2H6H683H5H253", "H169H6HHH5H5HHHHHHHHHHH1HHHHHHH6HHHHH4H74HHHHH1HHH", "7H7HHHH9HHHHHHHH3HH2HH18HHHHHHHHH3H17HHHH33HHHH1HH", "H6HHHHH2H7HH1HH7HHH4HH51HH52H9HHHHHHHHHHHH3HHHHH1H", "6HHH58HHH2HHHHHHHHHH2HHHH4HH4HHHHH1HHH2H5HHHHHHHH2", "61H6HHHH3H9H9HH1HHH3H82HHH2H36HHHHH8H1HHHHH3HH1H3H", "1HH8H266HHHH4HHHHHHHHHHH44HH3H4HHH2HHHHHH2H3HHHHHH", "8H1H97HHHH6HH2HH3HHH2H1HHH9HH5HHHH26HHHHH3H31HHH6H", "HHHH56H98H8HHHHHHHH277HHHHHHHH1HHHHHHHH1H5H7HH9H14", "99591HHHH77HHHHHH9H813HHHH5HH781HHHH1H1HHHHHHHHHHH", "2HH77H5HH2HH2H622H5HHHH22HHHHHHHHHH2HHHHH7HHHHHH4H", "8HHH9HH37H19HHHHHHHHHHHHHHH9H2HHH5HH3HH7HH7HH517HH", "HH1H7H259HHHHHHHHHHHHHHH13H82HHHH3HHHHHHHHHHHH9HH6", "HHH57HHH3H74HHHH28HHH9HHH5H1H33HH133HH13HH2HHHHH2H", "HHH69477HH6H3H6H1HHH2H3HHH847HHHH47HH7H9H2H1HHH719"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> board = {"16HH88H3972H72HHH4H3H673HH29H9H678HH474HHH3HH2H1HH", "7H3197H4HHH9H52HHH9H6H317H38H5H1HH62HHHH2H3HH4HH55", "4H73HH959H8H3HHHH413H7H9HHHH3HH77HHH17913H9HHHH1HH", "H4H966717HHH28H6HH78HHHHH937HHHHHH64HHHH8H46HH1H24", "H895H188H4HH97H9HHHHH7HH591556HHHHH4HHHHHH2H3HHHHH", "99H9H6H6H52H699HH2HHHH57HHH6HH6H719H8HH8HHH877H66H", "H299HHHHHH8H2H6HHH1H4HHH1HHH618HH6HHHH78HHHH98H726", "HHH3HH999H8H2H3HHHH816HHHHHHHHHHHH9H5H8HH4H4HH47HH", "39355H996H3H789HHHHH96H8HHH9H157HHHH1415HHHH2H6HHH", "HHHHHH3H2HH5HHH23HHHHHHH2HH7HHHH1H1H3H7HHHH1H2H1HH", "7HHHHH9H94919HHHH1H1H58HHH245H6HH1HH3HH15HHHH2HHHH", "12HH5HH3HH89HHHHHH4H6HHHHH32HH2HHHHHHHHH47H7H89HHH", "83H88HHH6HH6HH8HHHHHHH339H5HHHHH23HHH2HHHHHH6HHHH2", "H6364HHH97HHHHH22HHHHHHHH6H16HH8HHHH7HHHHHH14HHH3H", "5HHHH7959HH7H7HHH2HH4HHH2H1HHHHHHH6HHHH25HHHHH8HHH", "88H3HH7HHHHHH2HHHHHHHHHHHHHHHHH5H1HH9H3HH2HHH5HHHH", "H6HH2HHHHHHHH3HHH8HHHHH2H7HH9H2H3H84H65HHH9HHHHH2H", "4138H6HHHHHHHH2HHHHH5HHHH8H1H5HHH4HHH2HHHHHHHHHHHH", "H8H4HHH329HHHHHHHH6H3H3834HHH3HHHHHH1H1H68H83HH2H7", "6HH2H67HHH6H8HHH1HHH3HH2HHHH1HHH2HHHHHHH1HHHH2HHHH", "4H546H7HH3H3H8HHHHHHH33HHHHHHH36HH5H67H18H9H64HHH2", "HHH5H6HHHHHHH3591HHHHH1HHHHHH1H4H7HHHH1H4HHH2HH4H2", "HHH67H2HHHHHHHHHHH3H2H5HH2H3HHHHHHHHH4HHH1HHHH7HHH", "525HH7HH6HH1HH2HHHHHHHHHH8HHHHHHH95HHHHHHH8HHHH1HH", "2H5HH4HHHHHHH2H1H92H1HHHHH2HHHHHHH3H6HHH8H7HH18HH3", "754HH1H1HH1HHH13HHHHHHHHH5HH7H3HHHH6HHHH326HHHHH9H", "H5HH5H1HH7HHH1HH1H7HH1H2HH73HHH4H4H373HHHHH22H7HHH", "HHHHH5HHH1HH6HHHHH13HH8HHHHH4HHHHH5HH9H3HHHHHH3HH2", "1H61HHHHH4HHHHHHHH3HH1H3HHHHHH2H39HH1HHH1H756HHH22", "HH7H5H1H2H1HHHHHHHHHHHHHH8H5HHHHH5H17HHHHH3HH1HH7H", "H6HHH1HHHH8HHHH1HHH7HHHHH2H3HHH7HHHH2H3HHHHHHH17HH", "H2HH8HHH3HH56HHHHH8HHHHHH248HHHH84H3HH7HH719H9HH1H", "155HH3HHH2HH8H4HH4H41H8HHHHH6HHH513H929HHHHHH1HHHH", "36H1HHH1HHH313HHH1HHHHHHH64HHHHH99HH4H1H1HHHHHHH4H", "HH3H7HHH8HHH5HHH24HH51HHHHHHHHHHHHH1HHHHHHHH1HH813", "HHH5H2H8HHH7HHH2HHHHHH3HHH3HH2HHHH2HHHHHHHHHHHHH5H", "H256HHH9HHH1H7HH8HHH1HHH2HHHHHHHHHHHH5HH6H2H5H1HH4", "H3HHHHHHHHHH1HHHHHH4HHH1H3HH7HH933HH1HHH2HHHHHH8H5", "H3HHHH31HH3HH7HHH19H9H8H9HHH489HHHHHHHH4H6HHHHH3HH", "H1HH2H3H94HH4HH51H4H9H2HH1519HHH9HHHHHHH13H99HHHHH", "H5HHHHHHHH6H2H165HHHHHHHHHH3HH4HH4HHHHHHHHH134HH2H", "HH635HHH567HHH9HH1H1HHHHHHHHHHH1HHH532H7HHH93H4HHH", "HHH1HH8H74HHHH46HHHHH1HHHHHH16HHH4HHH7HHHHHHH7H634", "HHHHHHH1HH6H22HHHH1HHHHHHHH28HHHHHHH48HHHH4HH2HHHH", "HHHHHHH3HHHHHH963H75HHHHH23HHHHHH1H41HHHH3HHH2HHH3", "5278H9418HH6H3HHHHHHHHHHHHHHHHH9HHHH5HH5HHHHH67H4H", "HHH916H69995HHHHH1H1HH2H3H1HH175H1HH4HHH2H3HHHHHH2", "5H1949HH31HHHHHH5H7H7HHH2HH1H62HHHH4HHHHH4HHHHHHHH", "545HHHHH8H9HHHH3HHHH3H5HHHHH3HH5HHHHHHH4HHH2HH91H7", "5HHHHH5819HHHH22HH4HHH2H1HHHHH1HHH1HH3HH4H4HHH7H5H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> board = {"163H6H49H3HHH4H733H4HHH9HHH9HH972H37H1H4HHH14HHH3H", "864619H37H79HHH4H8H37915HHH2456H6HH4147HHHHHH3HH2H", "389H8H6HHHHHHHHHH9H5333HHHHHHHHH6HHHHH79HHHH74HH47", "5947H9HHHHHH3HHH467818HHHHH3H3HH4HHHHHH4HHHHH6H48H", "HH2H87H7HH7HH8HH6HH9H95HHH8H246HH2HH4HHH3HHH3HHH67", "H3HH6862HH7HHH88HHHHHHH9H6HHHH327HHH7HH3HH86H7HH81", "77889HH88HHH8H8H2H3HH43HHHHH1HHHH7HHHHHH9H48H1HH2H", "94HHH89H93HH8HHH268HHHH13H72HH1HH49HH1HHHHH8HHHH9H", "4999H7H414H169HH6HHH3H59HH26HHHH23HHHHH4HHH2H5H31H", "25169H784HHH1HH5HH1H9HH1HHHHH5HH5H27145HHH2HHHH8H2", "HH6HH8H878H58HHHHHHHHHHH5HHHHH8HHHHH3H7HHHH875HHHH", "8HHH1HHH75HHHH28HHH6H3H7H3H1HH6HHH3618HHHHHHH7HHH1", "HHH1H1H996H9H7HHH7HHHHHH6H1HHHH316HHHHH2H64HHHH9HH", "H8HHHH8HH2619HH5H4H57HHHHHH2HHHH6HHHHH5HHH7H3HHH29", "HHHH8H1H2H68HHH2H5HHHHH13H69H8HHHH1H83H82HHH1H51HH", "HHH9H97HH134HHHHHH2HHHHHHHH6HHH5H1HHHHHHHHH35655HH", "143HH6HH1H6HHH4HHH5H14HHH1HHHHHHHH3HHHH31HHHHHHHHH", "5H4657H7HHHHH41HH6HHHHHH2H1H3H2H1HHHH42H61HHHHHHHH", "H14H8H7H1HHHHH33HHH62H62HHHH134HH2HHHH2HHHH1H17HHH", "948HHH74H3HH2HH4HHH3HH4H3HHH3H3H3HHHH1HHHHH3H3HH7H", "H5HHHH9HHH3HH2HHHHHH3HH1HHHHHHH6HHHHHHHHHH8H9H14HH", "H37H4HHHHHHH9HHHHH1HH4HHHHH1HHHHHHHHH1HHHHHHH5H4H5", "27HH6HHHH2HHHHHHHHHHHH6HH5HHH498H2HH2HHHH1HHHHHHH8", "HHH5HHHHHH1H7HH1HHHH2HHHHHH1HHH2HHHHHHHH148HHHHHHH", "H298H1H5H1H71HHHHH2HHH2H14HHHHHHH3HH1917HHHHHH2637", "2HHH6HHHHH1H5HHHH9HHH6HHHH7HHHHHH4HHH1HH5HHHHH26HH", "H33H6H3HHH5HHH2HHH16HH5HHHHHH9H3HHHH3H2H1HHHH3HHH2", "HH77HHHHHHHHHHHHHHHHHHHHH1HHHHHH414HHHHH5HHHH4H8HH", "7H88H7H2H1HH1HHHHHHHHH15HHHH1HHHHHHHHH5HHH539H513H", "42H76HH7HHH1HH3HH7HHHHHH6HH1HH5H6188HHHHHHH64HH799", "HH7HHH35HHHH13HHHHHHHHHH2HHHH7H7H7HHHH15HHHH2HHHH9", "H1HH3HHHHHH5HHHH2H1H38H8HH2HH257HHH1HHH6HH5HH1HH4H", "H4H59HHH2HHHHH7H7HHH5175HH8HH2H7HH7HH5HHH1HH5HHH2H", "7H7H6HHHH2H6HHHHH5H4H9HHHHHHHH3HH1HHHH2HH68H5H3HH1", "HH3914HH7HHHHH44H8HHHHHH813HHH2H1HHHHHHHHHHHHHHHHH", "62HH89539HH3HH2HH4HHHHH5157HH8HHHH7HH3HH46H89HHH2H", "HH7HHHH9H4HH25HH44HH52HHH3HH2HHHHHH3HHHHHH9HHHH4H1", "H924HHH3HHHHHHHHHHHH8HH4HH434HH1HHH1HHHHHHHHHH8HH3", "8HHHH9HHHHH1HHHHHHHHH8HHHHHH8HHH8HH525HHHH14HHHHH5", "8HHH9HHH2H5HHH5HHHH6H94HH2HHHH2HHH5HHHH33H95HH1HH3", "822H3H6HHHHH2HHH1HHHHHHHHH5HHHH14HHHH4HHHHHHHH638H", "2H925HHHHHH1HHHH3H3H2H7HHHHHH13HHHHHHHHHH464H1HH5H", "HH3HH5HHHHH89HHH8154H1HHHHHHHHHHHH4HHH328HHHHHHHH5", "9H4HHH1HH19HHHH8HHH68HH5H1HH47HHHHHH53HH2791H6HH33", "HHHHH6HH86H1561HHHHHHHHHHHHHHHHHH41HHHH1HHHH5HHHH4", "HH17HHH8HHHH61H2H6H1HHH18HHH3HHH4H4H1H5HHHHHHHHHHH", "H1HH1H8HHHHHH635H9HH29HH8H22HH3HH85HH1HHHHHHHHHH2H", "9H3H97HH51HHHHH14H1H3HHHHHHH7HH1HHH25H6HHH4HHH1HH6", "4HHH6H1933HHHHH7HHHHH38H8HHHHH5HHHH814HHHH23HHHH3H", "HHHHHHH1HHHH3H7HHHH195HHHH2H52HH7HHH5HH13HHH4HHH2H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> board = {"3H5188922H9H4HHH5H1HH2H14HHH1H5HHHH4HH41H9HH88HH7H", "8H33964H945HH6H1H5HHHH2H3HHH3HHHHHHHH3H4HHH7HH514H", "9H49H8H49HH68H2HH7HHH8HHH279H6HHHHH58HHH39H263HH2H", "969H285HH55HHH48HH3HH964HHH7H33HH49HH2HH2HH7HH5HHH", "HH686HH7HH9657HHH4HH46HHHHH5HHHH3HH5HHHHHHH75HHH38", "966H985H96H8H1HH97HHHHHH33H45HHHH4H9H3H7HHHH6434HH", "HHHH79H8H49H77HH831HHHHH4HHH3H59HHH19H1H2H1HH6HHHH", "2H59HHH893HHHH5HHHH79HH1HH5HHHH9H1HHHHHH4H3H7HHH16", "6H4H469H579HH27H253HH9HH42HHH315HHHHH2HHHHHHH7HHHH", "78H6HHH4HHHH7HHHHHH6HHHHH26HHHHHH9HHHHHHHH4HHH9HHH", "89HH3H3H1HH4H1HH3HH7H1HH7H4HHHH8HHHH1H91HH99HH55HH", "H99HHHHHHHH3HHH2HHHHHHHHHHHHHHHHHHHHHHH3681H7816H1", "5HH5675HHH3H6H3HHH1HH6HH1H65HHHH3HHHHHHH3HHHH296HH", "HHHHH79H4HHHHHHHH39HHHHHHHH6HHH9314HHH1H15HHHHHHHH", "HHHH5HHH7HHHHHH22HH1HHHHHH3HH5HHHHHHHHH2HHHH8HHHHH", "4HHHHHHHH95HHH1H3H2H8HH1HHHH5HH6517H62HHH2H3HH89HH", "5HHHH15HH7HH6H3H5H7HHHHHH3HH9HH42HH3H34HHHHHHHHHH8", "7HH6HHH8H86H7HH3HH7HH8HHH3HH56HHHHH4H5H233H5HHHH2H", "7H4H53HHHHHH7HHHHHH3H48H9H2HHH64HHHH18HHHHH5644H97", "HHHH268HHHH4HHH3HH1HHHHHH4H3HH28HHHH3HHHHHH3HH5HHH", "H73HHH6HHH6HHHH5HHHH9HHHH1HH66H1HH229HHH1HHHH3HH43", "HHH8HHHH5HHHH32HHHH2HHHHHHHHHH7HHHHH9HHHHHHH567H71", "97HHHH7HHHH68HH1HH1HHHHHHH3H3HHHHHHHHHHHH2HH1HHHH7", "HH556H7HHH51HHHHHHH36HHH7H2HH2HHHHHHHH1HHHHH4HHHH7", "62HHH918H8HHHHHHH9HHHHHH192H3832HHHHH1HHHHHHHHH4HH", "22HHH9517H6H194HHH2HH23HHHHHHHHHHHHHHHHHHHH419H6H3", "H3HHHHH5HHHHHHHHHHHH7H2HHH7H72H1H8H3H34HH4HHH5HH13", "19HHHHHHH6HHHHH1HH1HH1HHHHHH8H5H56HH4HHH1HHHHHHHHH", "HH49HHHHHH62HHHHHHH4HH1H7HHHHH3H6HHHHH3H5HHHHH3HH1", "HH899HHHH2HHHH9HHHHH8HH7HHHH1H8H7HH45H6H7HHH4HH43H", "8H18HH3H6H6HHH4HHH16H6HH22HHHHHHHH1HHH9H77HHHHH84H", "33H5H4H9H54HHHHH56HHH1H3HH13HHHHHHH71HHHHH1HH7HHHH", "HHHHHH4453561HHHHHHHH3HHHHHHHHHHHHHHHH7HHHH8HHHH7H", "4HHHH5HH5H6HHHH6H2H591HH426H1HHH5HHH51HHHH3H2H3HH1", "HH78H3HH58HHH73HH5HH15H8HHHHHHH6H7HHHHHH4HHH2H7H9H", "HHHH8HHHH5HH1H2HH9HHHHHHH668HH1H5HH1H63HH133HHHHHH", "HHHHH4H33HH9HHHHHHHH8HH1HH8HHHHHHH7HHHHHHH9HHH7HHH", "HHH157HH6HHH2H5HH8HH9HH539HHH32HHH1HHHHHH3H7HHHHHH", "7HHH5HH8HHHHH7226HH9HH1HHHHH1HHH7H3HHH765HH1H3HH2H", "HHHH7HH44H1HHHH4H3HHHHHHHH1HHH6HHHHH3H38HHH9HHH78H", "8HHHHH51H4HHH9H3HH1HHH1HHHHHH4H415HHHHHHH286HHHHH9", "695HHHH7HHHHH22HH1HHHHHHHH5HHHH4H9H1H3HHH314HHHHHH", "H5H78HH7H1HHHHHHHHHHHHH1HHHHHHHHHHHH2HHH3H4HHH2HHH", "H1HH3H6H2HHHH1H1HHH2HHHH57HHHHHHHH3HH7H71HH7HHHH6H", "83H3H257H3HH1HHH33H91HHHHHHH45HHHH4HH1H15HHHHHHHHH", "5HH5H248HHH3H323H5HHHH1HHHHHHH533HHHHH13HHH2HHHHHH", "HH46H774HHH3HHHH6HHH4HHH323HH1HHHHHHHH3HHH7H7HH3H5", "8HH4H8HHH2HHH3HH85H3HH13HHHHHH5HH3HHHHH17HHH7HH318", "4HHH17HHHHHHHHH1HHHHHH5HH6365HH22HHHHHHHHH4H3H9H4H", "HHH68HH2HHH5H5HH133HH7HH461567HHHHHH1HHH1HHH1HH546"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> board = {"3HH8HHH2H5HHHHHHHHHH3HH97HHHHHH85HHHHHHHHHHHHHHHHH", "HHHH85HHH96HHH7HH32HHHHH9H9HHHHHHHHHHHHHHHHHH8HHHH", "HHHHHHHHHHHHHH7HHHHH79799HHH8519HH8HHH8HHHHHHHHHHH", "HHHH1HHH152HHHHHHH8HH9HHHHHH7HH1HHHHHH7HHHHHHH9HHH", "HH7H7HHHH2H3HH6HHHHH3HHHHH3H7HH231H9HHHHHHHHHHHH7H", "HHHHHHHHH4HHHHHHHHHHHHH732HHH9443H3HHH3HHHHHHHHHHH", "HHHHHHHHH3H375HHHH757HHH6HHH3H1HHHH9HHHHHHHHHHHHH9", "HHHHH2H7HHHHHHHHHHHH1HHHHHHHHH2HH1HHHHHHH894H63524", "HH41HHHHHHH48H37HHHHH9H6H33H9H26H5HHH1HHHHHHHH5H4H", "HH3H98HHH7H2H6HHHHH59HHH8HHH7HH8HH9H8361HHH7H5HHHH", "HH3HH2HHHHHHHHHHHHHHHHHH7HHHHH7HHH64HHHH5H3HHHHHHH", "HHHHHHHHHHHHHHHHHHHH13HH8HHH5HHHHHHH71HHHHHHHHHH8H", "HHHHH5HHHHHHHHHHHHHH55H5H94322HHHHHHHHH2H4HHHH365H", "HHHHHHHHHHHHHHHHHHHH5HHHHHHH9HHH5HHH82HHHHH7H28H5H", "HHHHHHHHHHH1HHHHHHHHHHHH9HHH658H1HHH47H3HH6HH1HH18", "HHHHHHHHHHH67HH3HHHH4HHHH9H8H38HHH43HHHHHH5HHH2HH7", "HHHHHHHHHHHH3HH2H8HH3HHHHH6HHHH5HHH5HHHH99HH2H8HHH", "HHHHHHHHHHHHHHHHHHHHHH6H5HHHH38HHHHHHHHHHH6HHHHHHH", "6H8H6219H9771HH6HHHH4HHHHHHH3HHHHHH28HHHH4HHH2HH6H", "HH1HHHHHHHHHHHHHHHHH6HHH6HHHHHHHHHHHHHHHHHHHHHHH1H", "HHHHHHHHH2HHHHHHHHHH3HHHHHHH9HHHHHHH6HHHHHHHH9HH3H", "HHHHHHHHHHH9HHHHH14H66HH56H366HHHHHHHHH9HHHHH41HH7", "HHHHHHH6H8H8HHHHHHHH8HH9HHHH3HH83H52H3HHHHHH6HHH4H", "HHHHHHHHHHHHHH14HHHH45191HH9HH18HHHH19H2HH4HHH5H8H", "HH3HHHHHHHHHHHHHH1HHHHHHHHHHHHHHHHHH8HHHHHHH2HHHHH", "HHHHH4HHH19H27HHH62H8H919HHHHHHHHHHH1HHHHH8HHHHH3H", "16HHHHH587HHH7H7H5HH3HH8HHHHHHHHHHHHHHHHHHHHHHHH8H", "H38HHHH2H8H59HH5HH5H8HH1HHHH13H56H7H2HHHH9HHHHHHHH", "HH4HHHH5H8H5HHH47HHH87HHHHHHHHHHHHHHHHHHHH1HHH9HHH", "HHHHHHHHH516HHH46HHHH6HHHHH27HHHHHHH4HHHHH6HHHHHHH", "H6HHHHH1378HHHHH1HHH5HHHHHHHHHHHH8HHH3H2799HH6HHHH", "HHHHHHH9H7HHHHH3HHHHHHHHHHH4HHHHHHHH3HHHHHHHHHHH6H", "33HH4HHHHHHHH6HHHHHHHHHHHHHH14HHHHHHHHHHHH7HH2HHHH", "H9HHHHHH22HHHHHHHHHHHHHHHHHHHHHH8HHHHHHHHHHHH1HHHH", "H4HH49HHH83HHHHHHH216HHH6HH99HHHH9HH8HH6HH6HHHHHHH", "7HHH2HH94HH1HHHHHHHHHHHHHHH1H9H8HHH4H93HH68HHHHHHH", "HHHH53H794698HH5H4HHHHHHHHH942HHHHHH5HHHHHH9HH3HHH", "H4HH3HHHHH5HHHHHHHHHHHHHHHHHHHHHHHHHH5HHHH761H1HHH", "HH3HHHHHH259HHH9HH1H8HH3HHHHHHHH9H5HHH642HHHHH9H1H", "HHH8H7HHHH3HHHH3HH9H6HHH9H2HHHHHHHHHHHHHH269HH7H29", "HHHHHHHHHH6H2HHHH9HH2H8H75821HHHHHHHHHHHHHHH3HHHHH", "HH8H763HH29H659HHH92HH6HHHHHHHHH5HHH96HHHH9HH89HH2", "H6HHHHH3H57H6HHHH5HHHHHHHHHH61HHHHHHHHHHHHHHHHHHHH", "HHHHHHH6H1HH22HHHHH74HHHHHH7H8H17HH92HH46H28491HHH", "HHHHHH8HH2H1HH4HHH6HHHHHHHH3HH1HHHHHH5HH672HHHHH69", "HHH6HHH9HH68H9HHHHHHHH4HHHHHH34HHH764HHHHH713H7HHH", "H3HH54HHHH1HHHHHHHHHHHHHHHHH6HHH4HH6HHHHH264HH1255", "HH412889H2H32H6H5H6HHH3H41HH5HHHHHHHHHHHHHHHHH6HHH", "HHHHHHHHHH5HH1H2H419HH9H5261HHH58HH21HHHHHH78HHHH4", "HHHHHHHHHHHH98HHHHHHHHHHHHH5HHHHHHHHHHHHHHHHHHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 592;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> board = {"1HHHHH2HHHH512HHHHHHHHHHHHH6HH9HH1H8HH31HHHHHHHHHH", "6HHHHH5H5HHHHHHHH3HH56137H24H71HH44HHHHHHHHHHHHHHH", "HHH4HH81HH7H9HHH7HHH8H63HHHHHHHHHHHHHHHHHHHHHHHH6H", "HHHHHHH4HH4HH55HHH76HHHHH8HHHHHHH1HHHHHHH16HHHHHHH", "HHHHHHHHHH1HHH4H2HHHHHH7HHHHHHHHH7HHHHHHHHHH5H8H9H", "HHHHHHHHHHHHHHHHHHH214HHH3HHHHHHHH9H22H938HH19H617", "7HHHHH6H6HHHHHHHHHHH3HHHHHHHHHHHHHH4HHH91H2HHHHH4H", "HHHH21H16HHH7H9HHHHHHHHHHHHHHHHHHH6HHHHH2H3H3HHH4H", "HHHHHHHH95HHHH7HH3H77H59H22HHHHH2HHHHHHHH5HHHHHH1H", "HHHH8HHHHHHH9HHHHHHH5HHHHHH7H6HHHH5H3HHHH9473H5HHH", "HHHH9H2HHHHHH6HHHHH2HHHHHH9HHHHH8HHHHHHH421HHHHHHH", "HHHHHHHHHH9H4HHHHH4HHHHHHH8HHHHHH3HH5HHH6HH3HHHHHH", "HHHHHHHH9HHH3H8HH1HH6HHHHHHHHHHH9HH31HHHHHHHHH5H81", "6HHHHHHHHHHHHHHHH8HH8H2HHHH4HHHHHHHHH2H4HH53HHHH7H", "HHHHHHHH6HHH2H7H88HH3HHHHH31HHHH5HH8HHHH9H8H9HHHH7", "HHHHHHHHH6HH7H1HHH9H9H5HHHHHH7HH1HHHHHH7HHHHHHHHHH", "HHHHHHHHH8HHHHHHHHHHHHHH7H8HHHH5HH9H6HHHHH35H7HHHH", "HHHHHHHHHHHHHHHHHHHHHHHH1HHHHHHHHHH1HHHHH4H8HH3HHH", "HHHHHHHH2H7HHHHHHH6H7HHH7H419HHHHHH8HHHHH1H9HHHHHH", "3HHHHHH4HHH3HHHHH8HHHHHHH9HHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHH1H4HHHHHHHHHH8H2H1HHHHHHHHHH6HHHHHHHHHHHHHH", "7HHHHHH2H4HHHHHH717HHHHH62HHHHH31281HH7H451HHH6HHH", "1HHHHHHHHH642HH9H4HHHHHH2H8H3HHHHHHHHHHHHH9H8HHHHH", "HHHHHHH9HHHH2H7H645H5H4H5833H9H4HHHHH2H7HHHHH8HHHH", "HHHHHHHHHHHHHHHHHHHH3HH273HH6HHHH72H3HHH3HH12HHHHH", "HHHHHHHHH5HHHHHHHHHHHH9H5H7H6HHH9HHH87HH85HHHHHHHH", "HHHHHHHHHHH8HHHHH9H9HHHHHH6HHHH3HHHHHH5H9HHHHHHHHH", "HH6HHHHH9H3918HHHHH5213HHH6H5HHHHHHHHHHH1HHH4HHHHH", "3HH5HHHHHH82HHHHHHH8H5HH963HHHHHH6HHHHHHHHHHHHHHHH", "6H2H3219H18HH4HHHHHHHHHHHH9HHHHHHHHHHHH8HHHHHHHHHH", "HHHHHHHHHHHHH6HHHHHHHHH3H3HH5HHHH1HHHH61HH182HHHHH", "HHHHHHH66HHH8H2HHHHHHHHHH6HHH4H9H589HHHHHHHHHHHHHH", "HHHH2HHH1HHHHHH72H92H86HH254H2HHHH9H3169HH8HHHHHH9", "HHH4HHH2HH6H67HHHHH95H34HHH6HHHHH85H5H54HH8HH3HHHH", "HHHH3396HHHH618HHHHH2H1HHH5HHHHH69HH6HHHHH2HHHHHH2", "HH9HHHH46HHH4HHHHHH2HHHHH22H3HHH3HHH48HHHHHH8HHHHH", "HHHHHHHHHH4H67H4H61H8742HH39HHHHH796HHHHHHH81HHHHH", "HHHHH967HHHH27HHHHH4HHHHH18HHHHHHHH62HH3HHH9HHHHHH", "9H73H28H4HH851HHHHHH4HHHHH8HHHHH18794H3HHHH62HHHH4", "HHHHHHHHHHHHHH6HHH4H8HHHHHHHHHHHHH5HHH6HHHHHHHHHHH", "HH693HHHHH7HHHHHHHH45HH9H73H49H6HHHH85HHHHH3H7HHHH", "HHHHHHHH3HHHH1HHHHHHHH9H2HHHH2HH39HHH5HHHHHHH8HHH4", "HHH2H831HHHH8975H9HHHHHHHH2HHHHHHHH586HHHHH2HH9HHH", "HH8H154HHHHHHHH7HHH3824HHH8H39HH9HHHH6HHHHHHHHHHHH", "6H43HHH15H5HH3HHHHHHH69HHHH36H7HHH8HH15HHHHHHHHHHH", "HH4HHHH4HHH7HHHHHH6HHHHHH71HHHHHHHHHHHHHHHHHHHHHHH", "HH8H619HHHH2H8H64HHH52HHHHHHHHHHHHHHHHHHHHH2H6HHHH", "HHH8HHH19HH4HHH3HH1H7HHHH9HHH2H14H5HH91HHHH16H5HHH", "HHHHHHHHHHHHHHH5HH66HH5H93HH6HHHHHHHHHHHHHHHHHHHHH", "6H22749HH966H6H734H1HHH6HHHHHHHHH3H82266HHH29HHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 592;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> board = {"3HHHHHHHHHHHH1HHHHHHHHHHHHHHHHHHHHHHHHHH6HHH4H1HHH", "HHHHHHHHHHHHH8HHHHHHHH4HHH5HHHHH3H2HH5983HHH4H82H5", "HHHHHHHHH8HH74HHH5HHHHH2H58HHH4HHH1HHHH5HHHH2HHHHH", "6HHHHHHHHHHHH9HHHHHHHH18H13HH95HHHHHHH72HHHHH6HHHH", "H9H51HHH3H4HHH6H94H2H6HHH3HHHHH61HHHHHHHHHHHHHHHHH", "65HHHH463H7HHHHHHHHHHHHHHHHHH5HHHH6HHHHHHHHHHHHHHH", "929HH5H1H6H1487H2HHH2H5HHH7HHHHHH63HH9HHHH2HHHHHHH", "6H1HH3HH444H9H2HHHH3932HH274HHHHHHHH7HHHHHH3HHHHHH", "7HHH7HHH1HHH8862819HH1826H785HH5HH53H959HH59HHHHHH", "23HHHHHH76HH87HH68HH6H8HHHHHH2H1HH5HH5H7HHHHHHHHHH", "H6H3H7H2HHH2973H17HHH4HH4HHHHH7HHHHHHHHHHHH2HHHHHH", "HHH97H3H9HHH3H2HH8HH5H49H1H18H6HH75H42HHHHHHH8HHHH", "7HHHHHHH785HHH1H89HH9H2HH6HHHHHHH1HHHHHHHH6HHHHHHH", "7HH9HH21HHHH22HH3HHHHHH9HHHHH8HHHHHH9H13HHHHH8HHHH", "6HHH2HHHH7HHHH91H51HHHH12HHH6H43HHHHH7HHHHHHH3H2HH", "3HHH1HHHH7HH8947H1HH1486H68H9HH1HHHHH5HHHH3HHHHHHH", "HHHH5H9HHHHHHH1HH2HH6HHH5HHHH856HHHHHHHHHHHHHHHHHH", "HHHHHHHHH3HHHHHH5H2HHHHH5H83H4H1HHHHHHH2935H4HH38H", "HHHHHHH1HHH916HH85HH2H1529HHHH28H9HHHHHHHHHHHHHHHH", "HHHH5HH4H2HHHH7HHHHH5H7HH99H21H2HH3HHHHHHHHHHHHHHH", "HHH8HH4HHHHH1H8HH9HH3HHHHH3H5HHHHHHHHHHHHH3HHHHHH7", "HHHHHH72H6HH74H76HHH2HHHHHHHHHHHHHHHHHHHHHHHH1HHHH", "HHHHH7HHHHHHH41HHH8H33H2HHHHH4H4HHHHHHHHHHHHH4HHH7", "9HHHHHH7HHHH1HHH2HHH1HHHHHHHH1HHHHHHHHHHH3HHHHHHHH", "H4HH9HHHHHHH4HHHHHHHHHHH1HHH54HHHHH6HHHHHHHHHHHHHH", "HH1H69453HHH865H8HHHHHHH4HHH287HHHH1HH6H624H339HH9", "HH6HHHHHHHHHHHHHHHHHHHHHHHH9H2HHHHHHHHHHH6HHHHHHH6", "HHHHHHHHHHHHHH5H54HH17HH4H9HH4H7HHHHH5H8HHH48HHHHH", "H6H646H7H75H194959HH5HHH7H1HH8HHHHH8HHHH9H73H7HHH3", "H5HHH8HHHHHHH9HHHHHHHH7HHHH3195HHHH4HHHHHHHHH1HHH5", "H151HHHHHH7HHHHH91HHHHHHHHHHHHHHHHH7HHHHHHHHHHHHHH", "HH9HHHHHHHHHHHH2HHHHH3HH7HHHH8HHHHHHHHHHHHHHH3H2HH", "HH4HHHHHHHHHHHHH8HHHHHHHHH5HH7H2HHHHH8HH714H53HH6H", "HHHH1HHHHHHHHHH3HHHHHHHHHHHHH6HHHHHHH6HHHHHHH8HHHH", "HHHH3HHHHHHHHHHHHHHHHHHHH6HHH4HHHH26HHHH6HH7H13HH8", "HH4HHHHHHHHHHHHHH5H5HHHH1HHHH7HHH1446H8H1HHH95HHHH", "HH1HHHHHHH6HHH62HHH9HHHH36HHH69HH39HHH53HHHHHHHHHH", "17H31HHH6H21H296H23HHHHHHHHHHHHHHHH3HH2HHHHHHHHHHH", "HHHHHHHHHHHHHHH8H8HHHHHHHHHHH5HHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHH8HHH85H2H51HHHHHHH69H9555HH7HHHHH", "4H1H5HHHH8HHHH4H22HHHH4HH88HHHHHH1HHHHHHHHHHHHH9HH", "HH8HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH6HH4HHH5HHHH3HH9H", "HHHHHHHHHHHHHH4HHH778HH4H5HH55H6HHHH49253H3H7HH26H", "HHHHHHHHHHHHHHHHHHHHHH2HHHHHH7HHHHH9HH9HHH7HH3H1HH", "HHHHHHHH8HHHHHHH2H7HHHH6H6HHH9H16HHHH28H3HHHHHHHHH", "HHHHHHHH5HHHH8HHHHHHHH13HHHHHHHHHHHHHHH97HHHHHH33H", "6HHHH5HHH2H6HHH77HHHHH2HHHHHHHH4HHHHH6HHHHHHHHHHHH", "HHHHHHHHHHHHHHHHH13HHHH3HHHHH2HHHHHHHHHHHHHHH4HHHH", "HHHHHH4H332HHHHHHHHHHH81HHHHHHHHHHHHHH6HHHHHHHH2H1", "HH5HHHH15HHHHHHHHHHHHHHHH5HHH4HHHHHH4HH452HH82HHH8"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 590;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> board = {"19HH2HHH954HH266HHHHHH6HH6HH3HHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHH2H93HHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHH", "H5HH6H9HHH97HH8HH45HH554HH6HHHHHHHHH2HHHHHHHHHHHHH", "HHHHHHHHHHHHH4HH28HHHHH6H7H3HH743H3H4HHHHH8HHH4HHH", "HHHHHHH4H833H4HHH2HHHHHHHHHHHHHHHHH77HHH6838H5HHH3", "HHH25HH3HH6HHHHHH4HHHHH6HHHHHHHHH71HHHHHH3HHHHHHHH", "HHHHHHHH7HH3HHHHHHHH1HH1H5HHHHHH8HHHH1H731HHH58HHH", "HHH95HHH4H47H5569HHH4H3HHHHHHHHHH68H63HHHHHHHHHHH9", "HHH4HHHH6HH3HHHHHHH1HHHH6H2HHHHHH1HH6H16H54HH28HHH", "HHH6HHHH24HHH92H63H6HHHHHHHHHHHHHH4HHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHH5HHHHHH7HH2H8HHHHH8HH8HHH3HHHH9HHHH", "HH13H91HH7H9H9HH9HHHHH5H41H99HHHHH7H875H6HH461HHHH", "HHH73HH2HHH6H1HHHHHHHHHHHHHHHHH2H4HHHH86HHHHH79HH3", "6HH9HH96597HH9HHHHHHHHHHHH6HHHHHH4861HHH29HHHHHHHH", "HHH4HHH94HH69HHHHHH6HHHH4H8H9HH5HH9HHHHHH1HHH41HH8", "HH6HHHHHH7H3HHH64HHHHHHHHHHHHHHHHH1HHHHH49H7H3HHHH", "HHH7H5HH9496H1398H3HHH9HH71HHHHHHH7HHHH4HHHH41HH27", "36H79H677H6H94HHHHHHHHHHH2HHHHHHH2HHHHHHH7HHHHHHHH", "HHH8H3HHHH51HHHHHHH6HHHHH359HHHHHH8H1HHHHHHHH6HH6H", "HH4HHHHHHHHHH3HHH1H3HH9HH638HHHH592H5H6HH1H68HHH21", "HHHHH2HH39H5H71HH6HH5HHHHHHHHHHHHHHHHH1HH2HHHHHHHH", "HH9HH9H83H24H3HH12HHHHHHH4HHHH99HHHHHH25HHHHH5HH39", "HH31H459HH1HHHHHHHHHHHHHHHHHHHH5HH37HHHHH5H46HHHHH", "HHHHH84HHHHHHH5HHHHH8HHHHH6HHHHHHHHHHHHHHHH7HHHHH2", "H9HHHHHHH1HHHHHHH9HHHHHHHH6HHH3HHH9HH6HHHHH1HHHH7H", "HHHHH5HH293HHHHH3HHH158HHHHHHH6HHHHHHHHHHHH3HHHHHH", "HHHHHHHHHHH31HHH8HHHHH9HHHHHHHH4HH2HHHHHHHH3HHHHHH", "H3HHHH961HH84H4223H9881H2HHHHHH6HHHHHHHHHHH85HHHHH", "HHHHHHHHHHHHH48H95HHHH2HH3HHHH4HHH16HHHHHHH7HHHHHH", "HHHHHH6H9HH5HHHH8HHHHHHHHHHHHHHHHHH8H5HHHHHHHHHHHH", "6H6HH73896HH127H256HHHHH7HHHHHHHHH8HHHHHHH21HHHHHH", "HHHHH456H3H8HHHHHH7H4HHH51HHHH3HHH1HHHH5HHHHHHH89H", "HHHHH7HHHHHHHHHHHHHHHHHH5HHHHHHHH1HHH3HHHH96HHHHHH", "H8HHHHHHH2H6HHHH7HHHHH2H8HHH8HHHH55HHHHHHHH6HHHH5H", "HHHHHHHHHHH6HHHH4H3HHHHHHHH9H2142H4HHHH5HHHHHH7HHH", "HHHHHHHHHHHHHHHH6HH3H2HH8H2H4HHHHH8HHHHHHHH9HHHHHH", "HHHHHHHHHHHHH5HHHHHHHH251H4HH3HHHHHHHHHHH7HHHH3H3H", "HHHHHHH8HHHHHH3HHH4HHH5HHHHHHHHHHHH1HHHHH1HHHHHHHH", "89HHHHHHHHHH5HHHHH6HHH56HHHHHHHH4HH3HH8HHHHHH31HHH", "HHHHHHHH7HH5H3H8HH9H68775H8HH96H1HHHHHH7HHH72H8H4H", "H2HHH8H6HHH81H12HHH17HH5HHHHHHHHHHHHHHHHHHHHHHH91H", "3HHHHHHHHH5H93HHHHHH72419HHH45HHHHHHHH9HHHHH88HH2H", "HHHHH7HHH7H55HH6H62HHH3HHHHHHHHH9HHHHH1HH5HHHHH2HH", "8H2248HH7H883368HH1H27466HHHH18HHHHHHHH7HHHHHH9H5H", "HHHHH2HHH4HHHHHHHH7HHHH9HHHHH8HH2HHHHH2HHHHHH7HH2H", "HHHHHH55HHH2HHHHHHHHHHH7HHHHHHHHHHHHHH6HHHH61H9HHH", "HHHH861H4H4H7HHHHHHH17HHHHHHH7HHH1HH3HH812HHHHH48H", "61HH18HH2HH7H5HHHHHH2H1HHHHHHHHHH6HHH124H4H2H83HHH", "HHHHHHHHHHHHHHHHHHHH2H7HHHHHHHHHHHHHHHHHHHHHHHHH4H", "HHHHHHHH75HHH3H29HHHHHHHH8HHHHHHH7HHHH4H8HHH254H6H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 607;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> board = {"8H8HH8HH6HH9HH4HHH7HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HH8HHHH5HH6HHHHHH32HHHHHHHHHHH3HH6828721HH9H4HH33H", "HHH4H3H1HHHH1H96H7HH84H8HHHHH21H2HHHHHHHHHHHHHHHHH", "HH1HHHHHHHHH8H6HHH7H3HH1HHHHH7H62HHH5HHHHH3HHHH7HH", "HH9HHHHH7HH7HH7HH93HHHHHHHHH71HHH9H3HHHHHHHHHHHH7H", "HHHHH5HHHHHHHHHHHHHHHHHHHHHHHHHH194HHHHHHHHHHHHHHH", "HH3HHHHHHHHHHHHHHHHHHHH12HHHH4H3H2H41HH9H41HH98H22", "HH4H2HH8HH4HHH5HHHHHHHHHHHHH3HHH5H1HHHHHHHHHHHH67H", "H91HH9HH9HHH4HHHH8HH16HH45HH1HHH583H92H83H92H39373", "49HH9H5HHH5H3157H8HHHHH5HHHHHHH19HH27H39HH35HHHHHH", "HH3HHHHHH2H9HHHH9422HHHH51HHHHHH352HHHHH9H79HHH33H", "H259HH1H81HHHH66H9H19HH5HHHHHHHH3HH8HHHHHHH6HHH86H", "HHHHHH3HH4HHH19HHHHHHHHHHHH7HHH4HH48H52H35HHH18HH3", "6HHHHH2HHHHH5HH2HHHH2HHHHHHHHHHHH35HHHHHH7HHH5HHHH", "HHHH7H6HH94H84HHH1HHH8H4H15H3HH86786HHH367HH9H3H92", "446H7HH73HHHH9HHH3HHH2H6265HH9H3H3HH5HHHH2HHHH9H49", "7H14H5H997HHHHH3HH2HHHHHHHHH2HHH559HHHHHHHHHHHHH6H", "H7HHH5HHHHHHHH1HHHHHHHHHHHHHHHHHHHHH83H7HHH513HH7H", "HHHHH6HH2HH1H68647377H47HHHHHHHHH79HHHH686913HHHHH", "2H4HHHHH7H9367H9H3H569HH8HHHH9HHHH5HHHHH6HHHHHHH3H", "HHHH41HH77HHHHHH24HHHHHHH4HH3H6H7HHH47H5HHHHH8HHHH", "HHH1HHHH99HH3HHHH2HHH2HHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH956HH2732H7HHHHH4HH3HHHHHH9HHHHH7HH3HH6H38H7H4H", "HHH215HHH4HH2HHH8HHHHHHHH6HHHHHHHHHHHHHHHHHH5HH4H2", "29HHHHHHHHH3H5H1H38293HH61HHHHHH8H93HH41HHHH1HHH4H", "HHHHHHHH3HHHHHHH9HHHHHHH3HHHHH6HH5HHHH86HHHH2HHHHH", "7HH9363HH5HH1HHHHHHHHHH37HHHH6HHHHHHHHHHHHHH8HHHHH", "HHHHH1H26HH64HHH9HH13HHH9H187HHHHHHHHHHHHH7HHHH53H", "HHHHHHHHH8HHHHHH4HHHHHHH8HHHH6HHHHH7HH8HHHHH2HHHHH", "HHH9HHH4H1HH6HHHH9HHHHH9686HHHHH8HH5HHHHHHHHHHHHHH", "6HH3HHHHHHHHHHHH7HHH2H6HHHHH94HHHHHHH8HHHHHHHHHHHH", "HHH5HHHHH4HH87HH6H6HH3HH7HHHHH9HHHHHHH3HHH7HH74HH4", "HH1HHH6HHHHHHHHH7HHHHHH9HHHH3H2H4HHHHHHHH7H2HHHH1H", "2H8HHHHHHHHH4H28HHHHH7H59HH6HHHHHH7HH7HHHH5H5HHH6H", "HHHH8HH3H2HHHHHH7HHHHHHHHHHHHHHHHHH6HHHHHH1HHHHHHH", "163HHH75HHHH7HHH6HHHHH879H868H3H6HH8HHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHH4HH4HHHHH5HHHHH6H2HHHHHHHHHHH", "HHH7HHHHHHHH9HHHHHHHHHHHHHHHHHHHHHHHH91HHHHH7H6HHH", "HHHHHH91HHHHH6H68HHHH2H7HHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH6HH5HH2HH6H2HH3HHH", "HH6HHH5H2HHHHHHHHHHHH99H9HHH6HH54H4HHH37HH183HHHHH", "HH4HHH9HHHHHHHHHHHHHHHH6HH81HHHH2H1H3H35H1HHHHHHHH", "HHHHHH3HHHHH1HHHHHHHHHHHHHHHHHHHHHHHHHHHH7HHHHHHHH", "HH316HHHHH8H9HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH9HHH1HHHHHHH8HHHHH", "HH31H6241HH7H31H4H4H3H31HH9H2HH2H1888HHHHHH3HH6HHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH6HHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHH7HHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHH82H7HHHH7H6H5HHH46HHHH81HHHH", "HHHHHHHHHHHHHHHHH6HHH4H9HHHHHHH44H85867H64916HHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 596;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> board = {"3HHHHHHHHHHHHHHHHHHHHHHH31HHHHHHHH2HH4H6H7HHHH9HHH", "HHH8H2HHHHHHHHHHHHHH6HHHHH85H9HH3HH69HHHHHHHHH1HHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHH9H6H1H65H1H3H3HH2H7HHH", "2H599HH9HHHHHHHH6H1HHHHH2H8HHHHHHHHHH9H3H4HHH6H6H3", "HHHHH7HHHHHH92HH9H8HHHHHH2675HHH9HH7HHHHH5HHHHHHHH", "HHHHHH34H2H9HHHHHHH3HHHHH2H88HH77HH61HH8HH6224HHH2", "91HHHHHHHH9HH3HHHHHHHHHHHHH9HHHHHHH2H4H1HHHHHHHHH4", "HHHHHHHHHHHH13H4HHH5H8HHHH5HHH4HHHHHH5H9HHHHH3HHHH", "HHH5591HHHHH99H1HH544H2HH839H84HHHHH72HHHHH2H7HHH4", "HHH9H8HHHHHHHH3H3HH4HHHHHH7H2H6HHHH81HHHH2H1HHHHHH", "HHHH66HHHHH3H8HHHHHHHHHHHHH2HHHH8H29H697H8H7H797H1", "HHHHHHHHHHHHHHHHHHHHHHHHHHH56HHH6H49HHHHHHHHH47HH3", "6HH32H7H2HHHHH9H8HH67H42H4H99HH16HH27736HH36H4HHHH", "HHHHH93H84H549HH3HHHHHHHHHH33HH2HHH7H6H5HHHH8HHHHH", "HHHHH5HHHHH6HHH3HH9HHH71HHH8HHHH7HHHH7H4HHH9HHHHHH", "2HHHHHHHHHHH1HHHHHH7HHHHHHH8HH56HH66888H2HHHH9HHHH", "HH4H5H8H66HH9HH8H9H2HH3151HH4HHHHH5H23HHHH9713H6H8", "4HHHH6HHHHHHHHHHHHHHHHH7HH2H9H2HHHH9H4HHHH13H4HHH1", "8HH45HHHH2HHH99HHH5HHHHHHHHH7HHHHHH58HHHHH5567633H", "HHHHHHHHHHHHHHHHHHHHHHH9HH3HH56H1H945826H9HHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH7H4HHH6HHHHHHHH5HHH4", "8H522H469HHHHHHHHH3HHH9HHHHH6HHHHHHHHH5HHH9HHHHHHH", "HHH7HHHHHHHHHHHHHHHHHH6HH9H2H3HH8H5HH6H2HHH5HHHHHH", "HHH8H7H2H46HH7HH9H8HHH7HHHH3H1HHHHHH39HHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHH5HHH7H2HH17H189HHHHH41HH9H5H54HH", "HHH6HHHHH2HHH9HH3H46217H1HH2HHHHHHHHHHHHHH5H98H9HH", "1295HHH9HH73H88H4H86HH3HHHH8HHHHHHHHHH8HHH9H1HHHH6", "HHHHHHH1HHHHHHH7HHH4HHHH2HHH4H2HHHHHHHHHHH696HH5HH", "H7HHHHH26HHHHH16HHHHH3HHHHHHHHHHHHHHHHHHHHHHHHH1HH", "HHH4HH7HHHHHHHHHHH3HHHHHHHH514HHH2H4HHHHHHHH8H49HH", "6HHH7584HHHH61HH5HHHHHHHHHHHHHHHHHHHHHHHHHH15HH4HH", "HHH7HHHHHHHH3HH83HHHHH9HHHHHHHHHHHHHHHHHHHHH6HH7H2", "1HH9H16HHHH98HHH5HH5HH6HH6HH3HHHH1HHHHHHHH916HHHHH", "4HHH3HHHHHHHHHHH1HHHHH4H41729H9985H5HHHHHH4H3H82HH", "HHH2HHH3HH8HHHH87HHHHHH5HH3HHHHH9HHHHH7HHH8HH4HHH7", "HHH8HHHHHHHH3HHHHHHHHHHHHH7HHHH9535H9371HHH34HH5H9", "HHHHHH1HHHH38HHHHHHH9HHHH35H44HHHH8HH3HHHHH623H9H7", "HHH31H9HHHHHHHHHHHHHHHH8189HH8H45H91HHHHH85H3HHHH6", "HHH2H79HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH4HH26H", "HHHH67HHHHH6H5218HHHHH36H7H7HHHHH9HHHHHHHHHHH5HHHH", "HHHHHHHHHHHH9HHHHHHHHHHHHH67HHH8HHHHH176HHHH4424HH", "HHH69HHHHH75H5HHHHHHHH7HHH7HHHHH4HHHHHHHHHHHHH1HH5", "HHHHHHHHHHHHHHH59HHH9H7HHHH2H5HH8HHHHHHHHHHHHHHHHH", "HHH3HH42HH3H14H7HHHHHH28HH84H61H5HHHHHHHHHHHHHHHH8", "HHHHH7HHHHHH98H55HHH4HHHH17HHHH695HH4HHHH319H3HH7H", "HH8H29H43H4HH2373HHHH5HHH4HHHHHHH4HHH25HHHHHHHHHH4", "HHH45225HH9H384HHHH3HH4HHHH4HHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH567H44812HHHHH2", "HHHH9HHH4H5HHH24HHHHHH9HHH5HHHHHH69HHH31HHH5HHHHHH", "5HHHH6H7HH89HHHH7HHH6HHHHH4HHH6HHH1HH3HHHHH6HHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 642;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> board = {"4HHHHHHHHHHHHHHHHHHHHHHHHHHH6HHHH71HHHHHHHHHHHHHHH", "HH8HHH6HHHHHHHHHH61H1H4HHH13H8H55HH93644689HHH8HHH", "HHHH7H1HH792HH476HH268H17HHHH6HHH8HH6HHHH9HHHHHHHH", "HHHHHHHHHHHHHH61H1789HHHHH5H91H3H7HHHH5HH3HHHHHHHH", "2H6HHHHH2HHHHHHHHHHH4HH88HH953HH9HHH29HHH354HHHHHH", "HHHHHHHH519HHHHH8HHH5HHHHHHHHHHHHHH3HHHHHHHHHHHHHH", "HHH4HHHHHH9HHH14HHHHHH5H19HHHHHHHH8HHHHH5H12HHHHHH", "HHH48H39516H9HHH24H3HHH9HHHHHHHH65HHHHHHHHHHHHHHHH", "HH8HH39HHHH47HH54HHHH5HHHHHHH89HHH558HHHHH49HHHHHH", "3H4HHH7HHH2HH4H2H1HH8H323H6H93H31H644HHHH6H3HHHHHH", "1H93HH2H8544HHHHH8886HHHHHHHHHHHHHHHHHHHH241HHHHHH", "HHHH9HHH7HHHHHHHHH476HHHHH9HHHHHHHH2HHH8H4HHHHHHHH", "5HH6H4HH6HH7HH7HHH5HHHH1HH74HHHH5HHHHHH1HHH4HHHHHH", "HHHHHHHHHHHHHHHHHHHHHHH6HHHHH3HH5HHHHHHHHHHHHHHHHH", "HHHHHHHHHH56HHHHHHH73HHHH12HH45HHH46HHHH8HHHHHHHHH", "HH33HHHHHH7HHHHHHH5HHHH9HHHHH2HH3H5H2HHH487HHHHHH9", "HH1HH3HHHHHHHHHHHHH2HH7HHHH5HH7H9HHH7HHHH1HHHHHHHH", "HHHHHHHHHHHHHHHHHH61HHH8HHHHH44HHHHHHHHHH7HHHHHHHH", "HH6HHHHHHHHHHHH46HHHHH7HHHHHHHHH4HHHHHHHHHH3HHH51H", "HHHH81HHHHHHHH5HHHH25HH2HH6HHHHHHHHHHHH3HHHHHHHHHH", "H3HH8HH69H24HHHH1H7H2H4H1HHHHHHHHHHHHHHHHH8HHHH5HH", "HHHHHHHHHHHHHHHH3H3HHHH55HH4H29HHHHHHHH3HH65HHHH3H", "HHHHHHHHHHHHHHH97HHHH5HHHHHHHHHH2HHHHHH6HHHHHHHHHH", "HHHHHHHH7HHHHHH1HHHHH2HHHHHHHH3HHHHHHHH69H3HHHH3HH", "HH7HHHHHHH4HHHH9HH4HHHHH3HHHHH8H3HHHHHHHHHHHHHHHHH", "HHHHH4HHHHHHHH8HHHHHH8HHHHHHHHHHHHHHHHHHHH2HHH9H8H", "HHH8HHHHHHHHHHHH5HHHHHHHHHHHHH5HH4H2H9HHH7HHHHHH2H", "HHHHH5HH4H3HHHH47HHHHHHH72HHHHHH8HHHHHHHHHH9HH14HH", "3HH54HH77HHHHH1HHH3HH45HHH9H418H63HHHHH5HH9H7HHH3H", "HHH3H5HHH6HH316H3H3H97HHH7HHHH5HHHHHHHH9HHHH8HHHHH", "HHHHHHH61HHHHHHHHH2HH4HHH3HHHHHHHHH4HHH77HHHHH5HHH", "HH99H2H7HH36H4654HH5HHHH4H18HHHH5HHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHH6HHHH9HHH96HHHHH1H6HHHHHHHHHHH4HHH", "HHHH68HH9HHHHH9HHHHHH99HH99HHH3H686HHHH83HHH9H6H9H", "HHH147HH7HHHHHHHHHHHHHHHHHHHHHHHHH6HHHHH8H9HH62HHH", "HHHH5HHH2HHHH9H8HH3H2HHH928737HH4HH7H48HH9H56HHHH6", "HHHHHHH8HHHHHHHHHH6HH41HH5H6HHHHH4HH62H3HH7HH51HH1", "HHHHHHHHHHHHHHHH5H71HHHHH56721H4H287H81HHHH34384H4", "HHHH6HHHH3HHH5H6HH2HHH97HH3HHHHHHH4HHHHHHHHHHHHHHH", "HHHH8HHHHHHHHHHHHH38H9H3HHHH9HH68HHHHHHHHHHH8HHHHH", "6HH87H99H9H2HHH2HHHHHHH4HHH2H5H9HH9H2HHHHHHHH9HHHH", "HH3HHH9HH2H96HH2HHHHHH5HH8H6HHH23HHHHHH7HH7HH3HHHH", "HHH4HHHH4H7HHHH4HHHHHH77HH4HHH12HHH5HHH82H4H2H95HH", "HHHHHHHHHHHHHHH14HH3HHHHHH7HHHHHHHH8H26HHHHH7HHHHH", "HH8H8HH4125H2H17HH5H9HH24HHH96H477HH3HH2HHHH8HHHH7", "HHHHHHHHHH3HHH8H6HHHHH7623H91HH7HH9HHH5HHH72H14HH1", "HHH38H178HHH5H3H9HH9HHH87HHH2HH5816HHHH7HHHH5HHHHH", "HHHH2HHHHHHHHHHH2HH4HHH79HHHHHHHH8HHHH2HH1HH6HHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHH7HHHHHHHHHHHHH3HH9HHHHH", "HHHH3HHHHHHHHH5HHHHHHH8HH7H1HHH23375HHHH4HHH3HHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 596;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> board = {"7H9H7HH5H4HHH9HHHHHHHH7HHHHHH2HHH1H2HHHH2218HHH2HH", "9HHHHHHHH8H7H7HH36HH6HHHH1HHHHHHH6H95H1777HH4H92HH", "HHHHHHHHHHHHHHHHHHHH84H2H5HHH7HHHHHHHHHH5HHHH3H462", "2HHHH4HHH2HHHHHHH3HHHHHHH88HH7HHHH9H5213H76HH4H3H2", "9HHH4HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH8", "HHHH3HH9H5H7HHHH4HHHHHH9H12HH2HHHH5HHHHH5HHHHHHHH5", "39HHH3HHH7HHHHHH98HHH6HHH5HHHHHH6H1HHH5H69HHHHH7HH", "HHHH6HHHHHHHHHHHHHHH16H2HHHHHHHHH5HHHHHHHH1HHHHHH7", "3H5HHHH2H8H3HHHHH5HHH7HHHHHH9HHHH7H2763H324HH9HH39", "6H1H5HHHHHHH9HHHHHHHHHHHHHHHH5HHH8H8H3HH5H1H74HH42", "H4HHHHHHHHHHHHHHH6H31HH3H5HH5HHHH12HH9H18H39H72H58", "71HH35HHHHHHHHHHH6HHHHH9HH4HHHHHH9HHHHHH6HHHHHHHHH", "48HHHH67H23H37HHH7HHH2H6H1HH3HHHH13HH69HHHHHHHHHH1", "7HH822HHHHHH9HHHH2H7H5H5H4HH8HHHHHHHHHHHHHHHHH8HH5", "HHHHHHHHHHHHHHHHHHHHHHH1HHHH29HHHHHHH7841HHHHH1H5H", "H7HHH34H15HHHH8HHH7HHHH43669HHHH79HHHH3HHHHHHHHHHH", "H3HHHHHHHH9HHHHH87HHHHH7HHHHHHHHHH9HHHH5HH42H7HH27", "H5HH3HHHHHHHHHHHH73HHHH1H2HHH68HH3HHH72HH2H9HHHH61", "HH8491HHHHH91HHHHHHHHHHHHH1HHH3H2HHH47H3H6HH46H27H", "H5HHHH2H9HHHHHHHH42HHH7H395HH2H489HHHHH2H9HHHHHH95", "HHHHH5HHHHHHHHHH9H2H4HH21HHHHHH9H5HHH2H46H3H48HH1H", "H4H97833H5HH5HHHHHHHHH1HH73H7H8HHHHHH5HHHHHHHH5HHH", "HHH6HHHHHHHHHHHHHHHHHH596H1HHH4H15HHHHHHHHH7HH3H6H", "HHHHHHHHHHHHHHHHH14HHH7HH3HH71H9HHH1H6HHHHHH7HHH1H", "H3HHHHHHHHHHHHHH4HHHHH5522HH9HH75HH5H6HH6HHHHH57H8", "H5H78H2H66H4HHH2HHHHHHHHHHHHHHH3HHHHHHH17HHHHHH1HH", "HH3HH6HHH1HHHHHHHHHHHHHHHHHHHHHHHHHHH4HHH9H16H4HHH", "HH6HHHHH9HHHHHH7HHHHHH4H841HHHHHH8HHH8H13HHH57HHH8", "H3648HH6HHHHHHH9HHHHHHHHH1HHHHH8HHHHHHHHHHHHHHHHHH", "43432HH3HHHHHHHH4HHHHHHH45HHHHHHH6HHHHH57HH36H9HHH", "HH615HHH4HHHHHHHHHHHHHHHHHHHHHH316HHHHH5H9H6HHHHH3", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH6HHH4HH", "HH997HH55HH26HHHHH8HHHHHH91H7HH78H73HHHHH8HHHHHHHH", "5H5HHHHHHHHHHHHH2HHHHHHH6HHH1HH6HHHHH7HHH5HH9HHHHH", "HHH44HHHHHH9HHH6HHHHHHHH5HHHHHHHH8H3HH2HH1H872HHHH", "HH8HHHHHHHHHH5HH44HHHHHH7HHHHHHHHHHHHHHHHHHHHHHHHH", "HHHH5HHH3HHHH2HHHHHHHHHHH6HHHH5HHH2HHH3HH7HHHHHHHH", "HH6H3H5H2731HHH6HHHHHHHH16H83H1HHHH7HHHHHHH7HHHHHH", "69HH6HH97HHHH17HHHHHHHHH47HHH4HH5H1H27HHH8HH594HHH", "H19H4HHH1HHH7H2H1HHHHHHHHHHHHH3HH94HHH8HHHH4HHHHHH", "HHHHHHHHHH1HH9HH3HH5HH5H3HHHHHHHHHHH4HHHH2HHHHHHHH", "HHH84HHH9H3HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH4HHHHHHHH", "8HH6HHHH1H7HHH3H6HHHHHHHH9HH7HHHHHHHHHHHH1HH8H7HHH", "H4H91HHHHHHHHH1HH3HHH9HHH15HHH6HH9HHH47HHHH575HHHH", "279H2H7H985HH8H6H1HHHH3HH5H5HHHHHHHH9HHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHH6HHHHH3HHHHHHHHHH4H7H6HHHH9H", "HHHHHHHHHHHHHHHHHHHHHHHH71H97HH9H696HHHH77HHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHH7HHHHHH9HHHHHHHHHHHHHHHHHHHH", "H544H4H53H1942H5HHHHHH9HHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH15HHHHHHHHHH71HHH4H1HH467333HHHHHH7HHHHHHHH9HHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 602;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> board = {"7H4H2HH9H4HHH1H62H3HHHHHHHHHHHHHH9HHHH6HH87H4159H2", "HH6H7HHH25H1H8H9289HH6HH72HH8HH3H51H6HHH9HHHHHHHHH", "6HH3HHHH2H56158H571HH9HHHHHHHHHHH4HH77963H458366HH", "HHH3HHHH5HHHHHHH1HHHHHHHH6HH5H25HH4HHHH5HHHHH6H2HH", "HH1HHHHH9HHHHHH7HHHH5HHHHHHHHHHHH2HH4HHH7HHH8HHHHH", "H74HHH5H3HH7HHHHH68HHHHHH8HHHHHHH2H15HHH4HHHHHHHHH", "H1856HHHHH3HH74HHHHHHHHH6HHHHH8HHHHHHHHHHH3H22H6HH", "HHHHHHHHHH1HHHHHHHHHHHHH1HHHH5HH3HH98HHHHHHH27H2HH", "3H7H2HHHHHHHHHHHHH1HHHHHHHHH4HH4HHHHHHHHHHHHHHH5HH", "HHHHHHHHHHH8HHHHHH6HHHH79HHHHH2H6HHHHHHHHHHH3HHHHH", "HH2HHHH51H6HH7789H64H446HH7HH16HHHHHHHH8HHHHHHHHH1", "5519H9HHHHH2HH34HH896H1HHH4H8HHHHHHHHHHHHHHHHHH3H8", "HHH2H5HHHH2HHH4HH5HH8439H79H5HH52HH7HHH23H3HHHH1HH", "HHHHHHHH3HHHH3HHHH3HHHHHHHHHHH5H6HHHHHHH6HHHHHHHHH", "HH9HHHHHHHHHHHHHHHHHH6H5HH54HH6H39848HH61HHHHHH4HH", "HHHHHHHHHHHHHH9HHHHHH7HHHHHHHHHH29H85HHH585H1HH3H2", "HHHHH3HHH4HHHHHHHH8HHHHHHHHHHH1HHHHHHHHHHHHH6HH9HH", "216HH8HHH81HH2H9HHHH75HH3HHHHH4HHHH8HHHHHHHHHHHHH7", "H2H6HHHHHH9H74HHH583216H8HHHHH9H63HHHHHHHHHHHHH9HH", "HH79H9HHH32H1HH5H29H7HHHHH3HH6HHHHHH51HH72HHHHH9H6", "HHHHHHHHH57HHHHHH19HHHHHHHHHHHHHH2H3HHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHH21HHHHHHH3HHHH7HHH4H71HHHHHHH5", "HH3HHHHHHH2HHHHHH8HH5HH3HHH4HHHH267H4HHHHHHH9HHHHH", "HH5HHHHHH9HHHHHHH1HHH2HHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHH2HH898HHHHHH8HHH5HH3H3HHHHHHHH8HH", "HHHHH5HH524HHH5HHHHHHHHHH5HHH4HHHH66H6H53HHHH6HHH4", "HHH79HHHH3HHH8HHHHHHHH7HHHHHH5HHH6HHHHHHH79HHH54H2", "H7HH7HHH8HHHHHHH18HHHHHHHHHHH3HHH91HH3HHHHHHHHH8HH", "HH6H41HHH2HHHH5HHH4HH49H3H6HH9138425H22HHH1HHHH4HH", "HHHHHHHHH9HHH6HHH4HHH85HH3HH6HHHHHHHHHHH6H2HHH3HHH", "HHH4HHHH1682H32HH2H436H1316H84554868HH7H914175H1HH", "H4HHHHHHH8HHHHHHHHH2H8HHH3HH9H2HH9H33H7HHHHH8HH6HH", "HHHH1HHHH8HHHHH1HHH6766HHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHH6HHHH1HHHHH68HHH6HHH725HH63638HHH4HHHHHHH8HHHH", "HHHH8HHH932HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH7HHHHHH", "HHHHHHH9HHH5H9H52HHH8HHHHHHH14HHHHHHHHHHHHHHH7HHHH", "HHHHHHH1HH5HHHH8HHHHH9HHHHHHHHHHHHHHH9HH3HHH7HHHHH", "HHHHHHH22HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH89H46H5H4", "HHHHHHHHHH4HHHH3HHH92HH3922HH4567HH65539HHHH89H3HH", "HHHHHHH45H8HHH4HH5H75H997HHHH5HHHHHHHHHHHHHHHHHHHH", "HHHHHHHHH3HHHHHHH6HH3HH1HHHHHH9H1HHHHHHHHHHHHHHHHH", "HHHHHH6HH3HH7HHHH814HHHHHH193HHH6955H9HH3H499HHHHH", "H9H2HHHH462HHHHHHHHHHHHHHHHHHHHH9HHHH5HHHHHH69H3HH", "HHHHHHHHH1HHHHHHHHHHHH4HHH9HHH3HHHH8HH3H76H965HHHH", "HHHHH6HHHHH9H8HHHHH43H291HH69HHH53HHHHHHHHHHHHHHHH", "HHHHHH3H91H7HH85H68696218H7HHHHH5HHHHHHHHHHHHHHHHH", "HHHHHHHH9HHHHHHHHHHHHHHHHHHHHHHHHH6HHHHH3HHHH2H8HH", "HHHHHHHHHH4HHH2HHHHHHH3HHHHHHHHHHHHHHHHHHHHHH1HHHH", "HHHHHHHHHHHHHHHHH8H73H1HH96HHHHHH41HH1HHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH7HHHHHHHHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 590;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> board = {"7HHH6HH1HHHHHHHHHHHHHHHHHHH3HH5H8HH6HHHHHHHHHHHHHH", "HHHHHHH9HHHH8HH3HHH37H1HHH74HHH6HHHHH5HHH6HHHHHH3H", "HHH1HH3HHHHHHH9H5HHHH755HHH23HHHHHHHHHHHHHHHHHHHHH", "HHH63HHHH8HHHH81H98HHH4HHH1HHHHHHHH5HHHHH713HH55HH", "HHHHHHHHHHHHHHHHHHHHHHH6HH9H5HHHHHH1H91HHHHH5HHH46", "HHHHHHHHHHHHHHH3H6HHHHHHHHHH4HHH2HHHHHHHHHHHHHHHHH", "HHHH8HHHHHHH7HHHHHH3HHHHHH5HHHHHHHH3H8HHHHHHH4HH52", "HHHHHHHHHHHHHHH6HHHHHHHH9HHHHHHH7H4HHHHHH249HHHH99", "H3HH53H57HHH2HH9HHHHHHHHHHH9HHHH5HH3HH4HHHHHHHHHH4", "HHHHHHHHHHHHHHHHH7813H1H6H35HHHHHHH83HHHHHHHH8HH3H", "HHHHH6H2HHHH7HH58HHHHH27HHHHHHHHHHHH1HHHH96HHH4H83", "HHHH2H9HHH3HHHH8H7H4HH3HH9HHHHHHHH2H5HHHHH7H3HH8H4", "H31H1HHHHHH582H642HH679H5H924HHHHHH84HHH13HH917H61", "HHHHHHHHHHHHHHHH8HHHHHHH79HHHHHHH8HHHHH4HH2H4H4HHH", "H5HHH6HHHH9HHHHHH9HH3HHHH8H7H7H8H5869HH5HH2HH2HH71", "HHHHHHHHHHHH6HHHHHHH8HHHHHHHHHHHH8152HHH7H6HHHHHHH", "H7H9H2HH5HHH2H56HH215HHHHHHHHHHHHHH29357HH9H588H32", "HHHHHHH8H8HHH4H2HHHHHHHHHHH14HHHHHH1H5H9H6HH64HH8H", "HHHHHHHHHHHHHHHHHHH2H57H5H4HHHHHHHHHH9HHHHHHHHHH3H", "H27H2HHHHHHHHHHH62H6HH2H399HHHHHH6HHH7HHHHHHHH6H9H", "HHHHHHHHHHHHHH5HH5H9H17H387HH3H8H2HHH3H3HH17HHHHHH", "25HHHHH48HHH5HHHH7HH2HHH3H5H8HHHHHHHH218HHHH8HH31H", "HHHHHHHHHH2HHHHHHHHH7HHH7HHHHHHHHHHHH4HHHHHHHHHHHH", "1HHHHHHHH1HHHH3HHH4H3HHHH91HHHH9H2HHHHH9HHHHHHHHHH", "279891H4449H7H7HHH41HHHH6HHHHHH1H6HHHHH5HHHHHHHHHH", "HHHH6HH5H44H8HHHH9HHHHHH8H5HHHHHH1HHHHHHHHHH9HH3HH", "HHHHHHHHHH1HH6HHHHHH7HHHH976HHHH58HHHHHHHHHHHHHHHH", "HHHHHHH6HHHH5H6HHHH53HHHHHHHHHHHHHHH312HHHH4HHH3HH", "9HHHHHHHHHHHHHHHHHH1HHHH4HHH9HHH2HHHHHHHHHHHHHHHHH", "H31H8HHHH62H188HHHHHHHHH4HHH51H62H72H9H4HHHHHHHHHH", "HHHHHHHHH95HHH42H47H8HHHHH7HHHH6H9H15HH7HH3HHHH5HH", "3HHHHH6HH59HHHHHHHHHHHHHHHHHHHH1HHHHHH7HHHHHHHHHHH", "H2HH578HH3HHH83HHHHHHHH1HHHHHHHHHHHHHHH7HHHHHHHHHH", "634H4H7HHHHHHH3HHHHHH1825H1HHH544H81HHH8H5HHHHHHHH", "23HH2HH9H48H719H47H8HHH4HH5H7HH6HHHHH123HHHHHHHHHH", "HHHH3HHHHHHHH94HHHHHHHHHH4HHH1H46HH54H9HHHHHHHHHHH", "42HH79HHH2HHHH2HHHHHHHHHHHHHH7HHHH1HHH5HHHHHHHHHHH", "3HHHHHHHH7HHH42HHH6HHHHHH1HH2H39979HHHH1HHHHHHHHHH", "H6HH8HHHHHH9HHHHHHHH2HHH88HH3HH1576HHHH7H7H18H3HHH", "HHHHH3HHHHHHHH5HHHH6HHHHHHHHHHH3HH6HHHH5HHHHHHHHHH", "H8HH7H9HH9HHHHHHHHH945H826HHHH7HHHHH2H8HH3H7HHHHHH", "H8H172HHHHHHHHHHHHH3HH15HHHH2H5H4HH1HHH7HHHHHHHHHH", "HHHHHHH8HHHHHHHHHHH3HHHHHHHH5H95HH654H4HH9HHHHHHHH", "HHHHHHHHHHHHH72H5675339HH12HHH8HHHH5HHHH4HHHHHHHHH", "H5HHHHHHHHHHHH8HHHHHHH4HHHHHHH41HHH1HH3HHHHHHHHHHH", "H4HHHH5HHHH7HHHHHHH1H7HHH5321HH8H22H7HHHHHH5HHHHHH", "HHHH6HHHHHH1HHHHHH939HH1H7HHHHH6HHHH3H85H6HH6H5HHH", "71HH36H5H44HH39HH8HH1HH44HH38HH3HHHHH95H1HHHH88HHH", "HHHH3H38HHHHHHH9HHHHHH6HHH6H7H1H78H19HHH76HHH1HHHH", "H9HHHHHHHHHHHHHHH2H8HHHHHHHHHH6HHHHHHHHHHHHHHHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 600;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> board = {"11"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> board = {"1", "1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> board = {"9HHHHHHHH9"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> board = {"9HHHHHHHH12H3H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 66;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H11", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "1H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H11H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> board = {"9H3333HHHHHHHHHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12HH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12HHH", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12HHHH12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H1HH12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12HH2H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12HHHH12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12HHHH12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12HHHH12H12H12H12H12H12H12H12H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 66;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> board = {"3HH4HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHH51HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHHHHHHH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "91HHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "H8H1H2HH7H21H21H21H21H21H21H21H21H21H21H21H21HHH4H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 993;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> board = {"3HH4HHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHH51HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHHHHHHH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "9HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "6HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "HHHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "8HH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "7HHHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "HHH1H2HH1H21H21H21H21H21H21H21H21H21H21H21H21HHH4H", "91HHHH1H2HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH3HH", "HHHHHH3HH2H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHH12HH4H21H21H21H21H21H21H21H21H21H21H21H21H2HHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH5HH", "HHHH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "HHHHH21H21H21H21H21H21H21H21H21H21H21H21H21H21HHH4", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH6H1HHH12H12H12H12H12H12H12H12H12H12H12H12H12H1H", "H8H1H2HH7H21H21H21H21H21H21H21H21H21H21H21H21HHH4H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> board = {"3HH5HHHHHHHHHH", "HHHHHHHHHHHHHH", "HHHHHHHHHHHHHH", "5HH4H2H8HHHHHH", "HHHHHHHHHHHHHH", "HHH2HHHHHHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> board = {"1111"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> board = {"123456", "234567", "345678", "456789"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12", "2H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 66;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> board = {"2939", "9999", "1999", "2949"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> board = {"2H3HH4HHH5"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1H", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21H2H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1H", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21H2H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1H", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21H2H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1H", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21H2H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1H", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21H2H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1H", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21H2H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1H", "H21H21H21H21H21H21H21H21H21H21H21H21H21H21H21H2H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1HH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH1HHHH", "HHHH5HHHH1HH1HHHHHHHHHHHHHHHHHHHHHHHHHH1HHH4HHHH", "HH12H12H12H12H12H12H12H12H12H12H12H12H12H12H12H1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 488;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> board = {"11111", "11111", "11111"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> board = {"12HHH", "2H1HH", "H12H9"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> board = {"12H1", "39H2"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> board = {"2H1HHHHHH", "HH9HHHHH6", "8HHHHHHH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> board = {"17H2", "3HH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> board = {"2H1", "HH2", "1HH", "2H1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> board = {"213H12", "111111", "3H1214"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> board = {"12", "2H", "H1", "15"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> board = {"3994", "9999", "9999", "2924"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> board = {"3HH2", "HHHH", "HHH1", "2H12"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> board = {"12H6", "3HH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> board = {"12HHH61HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "H12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHH2H1HH1H2HHH2H1HHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHH12HHH21HHHH12HHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHH5HHHH2HHHHH1HHHHHHHHHHHHHH", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 147;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> board = {"129", "2H1", "919"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> board = {"12H4HHH", "HHHHHHH", "H3H31HH", "HHHHHHH", "HHH2H1H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> board = {"123456789H123456789H123456789H123456789H123456789H", "23456789H123456789H123456789H123456789H123456789H1", "3456789H123456789H123456789H123456789H123456789H12", "456789H123456789H123456789H123456789H123456789H123", "56789H123456789H123456789H123456789H123456789H1234", "6789H123456789H123456789H123456789H123456789H12345", "789H123456789H123456789H123456789H123456789H123456", "89H123456789H123456789H123456789H123456789H1234567", "9H123456789H123456789H123456789H123456789H12345678", "H123456789H123456789H123456789H123456789H123456789", "123456789H123456789H123456789H123456789H123456789H", "23456789H123456789H123456789H123456789H123456789H1", "3456789H123456789H123456789H123456789H123456789H12", "456789H123456789H123456789H123456789H123456789H123", "56789H123456789H123456789H123456789H123456789H1234", "6789H123456789H123456789H123456789H123456789H12345", "789H123456789H123456789H123456789H123456789H123456", "89H123456789H123456789H123456789H123456789H1234567", "9H123456789H123456789H123456789H123456789H12345678", "H123456789H123456789H123456789H123456789H123456789", "123456789H123456789H123456789H123456789H123456789H", "23456789H123456789H123456789H123456789H123456789H1", "3456789H123456789H123456789H123456789H123456789H12", "456789H123456789H123456789H123456789H123456789H123", "56789H123456789H123456789H123456789H123456789H1234", "6789H123456789H123456789H123456789H123456789H12345", "789H123456789H123456789H123456789H123456789H123456", "89H123456789H123456789H123456789H123456789H1234567", "9H123456789H123456789H123456789H123456789H12345678", "H123456789H123456789H123456789H123456789H123456789", "123456789H123456789H123456789H123456789H123456789H", "23456789H123456789H123456789H123456789H123456789H1", "3456789H123456789H123456789H123456789H123456789H12", "456789H123456789H123456789H123456789H123456789H123", "56789H123456789H123456789H123456789H123456789H1234", "6789H123456789H123456789H123456789H123456789H12345", "789H123456789H123456789H123456789H123456789H123456", "89H123456789H123456789H123456789H123456789H1234567", "9H123456789H123456789H123456789H123456789H12345678", "H123456789H123456789H123456789H123456789H123456789", "123456789H123456789H123456789H123456789H123456789H", "23456789H123456789H123456789H123456789H123456789H1", "3456789H123456789H123456789H123456789H123456789H12", "456789H123456789H123456789H123456789H123456789H123", "56789H123456789H123456789H123456789H123456789H1234", "6789H123456789H123456789H123456789H123456789H12345", "789H123456789H123456789H123456789H123456789H123456", "89H123456789H123456789H123456789H123456789H1234567", "9H123456789H123456789H123456789H123456789H12345678", "H123456789H123456789H123456789H123456789H123456789"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> board = {};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> board = {"12H1", "2HH3"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> board = {"12H1", "2H19"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> board = {"2851H59935662822638725343327968729H38H654234452249", "85388H42H97613971359761H117249H4557177295H748993H2", "46H951874726531H84837127686523112571828888446HH929", "37714912361H589462312751729H95254H9919889494821845", "H7621HH794595HH36644485491991792H9H833939H18926972", "3536973764H35729322H873H63114H292H643636978833H52H", "7H93665H236194H4H78HH87H46877693655272744664393647", "29732573H261475H3H45516H7453998692368555553H418898", "41493631483H86454322436462333751814511642178611565", "H6759327942595H31817181678495H37688568H94133478266", "5137172228411594123H149968819H41858948211945612567", "314677787882H2738387624HH6H3764355538H348426896943", "5226H621756419H24585747639214266332859347414639183", "36H219618H164521596H36524H6938H72882H145286443523H", "198567918854247412H153H42593166H43985925466379H3H6", "H56169912433381424481H66948948H4H29391295971H41198", "7467694H594H8756972662H75653643793774H567364677255", "7379366212628711354473934545479584H911991625474H32", "H93451342H9H9H246253649H39812592H46H8H912586661H39", "35615516226H1949837H492144959126524846967H19H4717H", "89H52677777825172325H63452634279938823715H57147356", "992325H93563HH9497H97734937386893891319H3931663878", "989271H69H111836632597579H9466266951658325HH141461", "878947552H66858451992634357773H15H422HH666716H5745", "H164H2399297135H13326555361532388H665145233H933896", "94H557H96771838375824327494397123716578H4589927498", "7283489696984421921H35H268445331238813521484H6H831", "3978192941473139529486928159924789H666774119934176", "1H83393H55938369584H62H139425421518H192518H6493432", "15186H16231H9H28441877139H9HHH53198984187532H27144", "73325437165H719385187123H496267799H9818H26974H5649", "34H5962439275788H752H37426H81372873645186642999128", "616H1H465383783312286H2928977HH3776951489422368732", "7226859675H9543649438179122H647426451428H1463H2372", "812633H162947997277815H9H5H98675979891H67H11246691", "28857818523294682587934138996H82458248238645566252", "3774411924927H9124H4H4766516176629H733616363178391", "17941754816318672929676H37634323399985116HH641HH62", "22344H834415954H35H168587741H19126214H69H73687496H", "41362688H528968995349524152883242426261623326649H3", "95386951H554695214451786671H9468H1598513465277563H", "235HH4876989H882761243716855H1722H1532H81H4442467H", "6H994H62473992H924454H3832872841713671831H65436719", "926868H34838H4749217987623H6726524961H324463H15968", "4414143221929839H341393669235H993828H614512645343H", "5H35H155H964341282H9943H443945131232187791699H6843", "33113427988398H6H3H24192H3135869211827H41484154342", "1388241814742H672621H8419262828H5H91129619H3919625", "847279197682139466725H49434484125989H9H8H2H69H7H44", "25256874574945389H1251845H5679H9HH819567H473117627"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> board = {"12", "2H", "HH", "13"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> board = {"3H12", "HHHH", "HHHH", "2H3H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> board = {"3HH2H1", "HHHHHH", "HHHHHH", "5HHHH3"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> board = {"1HHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> board = {"2H4HHH2", "HHHHHHH", "5HHHHH6"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> board = {"2H12", "HHHH", "3HH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> board = {"14HHH3", "2H3HH1", "HHHHHH", "HHHHH4"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> board = {};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> board = {"4HHH3H", "HHHHHH", "HHHHHH", "HHH21H", "3HH1HH", "HHHHHH", "HHHHHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> board = {"3HH2H7", "HHHHHH", "HHHHHH", "4HHHHH", "HHHHHH", "HHHHHH", "HHHHHH", "5HHHH9"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> board = {"4HHH3", "HHHHH", "HHHHH", "HHHH1", "3HH19"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> board = {"12H", "2H1", "H19"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> board = {"2H3", "HHH", "HHH", "3H2"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> board = {"3HH91", "HHHHH", "HHHHH", "4HHH3"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> board = {"34H2H9"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> board = {"1H", "1H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> board = {"12H4", "9HHH", "1HHH", "HHHH", "2HH3"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> board = {"2H5", "HHH", "4HH", "HHH", "HHH", "HHH", "2H6"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> board = {"3HH2", "HHHH", "HHH1", "2H19"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> board = {"3HH9", "HHHH", "HHH2", "12H1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> board = {"4HHH7", "HHHHH", "HHHHH", "HHHHH", "1HHHH", "4HHH5"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> board = {"11"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> board = {"12H12H12H12H12H12H12H12H12H12H12H12H12H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> board = {"2H4", "HHH", "1HH", "2H1", "HH2"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> board = {"2H12", "HHHH", "3HH9"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> board = {"2H31", "HHHH", "3HH2", "HH1H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> board = {"2H91", "HHHH", "3HH2"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> board = {"251", "HHH", "12H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> board = {"2H12", "HHHH", "3HH5"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> board = {"2HHH", "HHHH", "3HH1", "HHHH", "HHHH", "1HHH", "3HH1", "HHH5"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> board = {"19H2", "3HH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> board = {"2H1", "1H2"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> board = {"12H3", "HHHH", "HHHH", "H3H2"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> board = {"3HH4", "HHH1", "HHHH", "2H12"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> board = {"3HH2", "HHHH", "HHH1", "2H14"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> board = {"13", "2H", "HH", "91"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> board = {"2H3H", "HHHH", "3HH1", "HH15"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> board = {"3919", "9999", "9999", "2939"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> board = {"3992", "3999", "9991", "291H"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> board = {"12", "HH", "21"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> board = {"2H3H", "HHHH", "3HH1", "HH14"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> board = {"39919", "99999", "99999", "49993"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> board = {"2H12", "HHHH", "12H1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> board = {"12H9", "3HH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> board = {"12", "2H", "H1", "12"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> board = {"2H1HH", "HH9H2", "4HHH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> board = {"3HH4", "HHHH", "HHHH", "9HHH", "1HH3"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> board = {"599991", "199392"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> board = {"3HH2H3", "HHHHHH", "HHHHHH", "2H3HH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> board = {"1H", "HH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> board = {};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> board = {"1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> board = {"6HHHHH2HHH", "HHHHHHHHHH", "HHHHHH6HHH", "HHHHHHHHHH", "HHHHHHHHHH", "HHHHHHHHHH", "2HHHHHHHHH", "HHHHHHHHHH", "3HH1HH3HHH"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> board = {"3992", "3999", "9991", "2919"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> board = {"273772", "777777", "377271"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> board = {"13HH", "3HH2", "HHHH", "H2H9"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> board = {"14HHH9", "2H3HH1"};
    JumpingBoard* pObj = new JumpingBoard();
    clock_t start = clock();
    int result = pObj->maxJumps(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=251074&rd=10936&pm=8245
********************************************************************************
#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <set>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>
#include <stdexcept>
 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<double> pnt;
typedef pair<int, int> pii;
 
#define RA(x) (x).begin(), (x).end()
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())
 
 
class JumpingBoard
{
public:
    int maxJumps(vector <string> board);
};
 
static int R, C;
static int b[60][60];
static int cache[60][60];
 
static const int dr[4] = {-1, 0, 1, 0};
static const int dc[4] = {0, 1, 0, -1};
 
static int recurse(int r, int c)
{
    if (r < 0 || r >= R || c < 0 || c >= C || b[r][c] == -1)
        return 0;
    if (cache[r][c] == -2) throw int();
    if (cache[r][c] != -1) return cache[r][c];
    cache[r][c] = -2;
    int a = 0;
    for (int d = 0; d < 4; d++)
        a >?= 1 + recurse(r + dr[d] * b[r][c], c + dc[d] * b[r][c]);
    return cache[r][c] = a;
}
 
int JumpingBoard::maxJumps(vector <string> board)
{
    R = board.size();
    C = board[0].size();
    for (int i = 0; i < R; i++)
        for (int j = 0; j < C; j++)
            if (board[i][j] == 'H')
                b[i][j] = -1;
            else
                b[i][j] = board[i][j] - '0';
 
    memset(cache, -1, sizeof(cache));
    int ans;
    try
    {
        return recurse(0, 0);
    }
    catch (...)
    {
        return -1;
    }
}
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/