/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=6811
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class ProductBundling {
public:
    int howManyBundles(vector<string> data);
};

int ProductBundling::howManyBundles(vector<string> data) {
    int ret;
    return ret;
}


int test0() {
    vector<string> data = {"11100"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> data = {"1010", "1100"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> data = {"1100000000", "1100000000", "0011000000", "0011000000", "0000110000", "0000110000", "0000001100", "0000001100", "0000000011", "0000000011"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> data = {"00000000000000100000000000000000001000000000000000", "11111111111101011111110111111111110111111111101011", "00000000000010000000001000000000000000000000010100", "11111111111111111111111111111111111111111111111110", "11111111111111111111111111111111111111111111111111", "00000000000010100000001000000000001000000000000100", "00000000000000000000000000000000000000000000010001", "00000000000000000000000000000000000000000000010000", "00000000000010100000001010000000001000000001000101", "00000000000000100000000000000000001000000000010000", "00000000000000100000000000000000001000000000010001", "00000000000010000000001000000000000000000000010100", "11111111111111011111111101111111110111111110101110", "11111111111101111111110111111111111111111111101011"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> data = {"00000000000000000000000000000000100000000000000100", "00000000000000000000000001111111011111111111101011", "00101000101001010100000000000000000000000000010000", "00111000101001010100000001111111011111111111111111", "11000111010111101011111111111111011111111111111111", "11101111111111111111111110000000000000000000010100"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 44;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> data = {"01000000000000000000100000001000010000000000000000", "00000000000000000000000000000000000111111111101011", "11111110111111111111111111111111111100000000010100", "11111101110111111111110111111110111011111111111110", "11111110111111111111111111111111111011111111111111", "01000000000000000000100000001000010100000000000100", "01000011001000000000101000001001010000000000010001", "00000000000000000000000000000000000000000000010000", "01000001000000000000100000001000010100000001000101"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> data = {"00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111101011", "00000000000000000000000000000000000000000000010100", "00100000000000000000000100100000000011111111111110", "00000000000000000000000000000000000011111111111111", "11011111111111111111111001011111111100000000000100", "11011111111111111111111001011111111100000000010001", "00100000000000000000000110100000000000000000010000", "00000000000000000000000010000000000000000001000101", "11011111111111111111111001011111111100000000010000", "11011111111111111111111001011111111100000000010001", "00100000000000000000000100100000000000000000010100", "00100000000000000000000110100000000011111110101110", "00000000000000000000000000000000000011111111101011", "00100000000000000000000110100000000000000000000000", "11111111111111111111111111111111111100000000000000", "00100000000000000000000100100000000000000000000001", "00100000000000000000000100100000000000000000000001", "11111111111111111111111111111111111100000000000001", "11111111111111111111111101111111111100000000000001", "00100000000000000000000110100000000000000000000000", "00100000000000000000000100100000000000000000000001", "11011111111111111111111011011111111100000000000000", "11011111111111111111111011011111111100000000000000", "00000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000", "11111111111111111111111101111111111100000000000000", "11111111111111111111111101111111111100000000000001", "11011111111111111111111001011111111100000000000001", "11011111111111111111111011011111111100000000000001", "00000000000000000000000000000000000000000000000000", "00100000000000000000000100100000000000000000000000", "11111111111111111111111101111111111100000000000000", "11011111111111111111111001011111111100000000000000", "00100000000000000000000100100000000000000000000001", "00100000000000000000000100100000000000000000000000", "11111111111111111111111111111111111100000000000001", "00000000000000000000000000000000000000000000000001"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> data = {"00000000000000000000000000000000000000000000000000", "00001001011000011001001100000001100100011111101011", "01000100000111000000000011011000000011000000010100", "01000100000111000000000011011000000011000111111110", "11110110100111100000110011011010011011100111111111", "00000000000000000000000000000000000000000000000100", "01001101011111011001001111011001100111011000010001", "10110010100000100000110000000010011000100000010000", "11110110100111100000110011011010011011100001000101", "01001101011111011111001111111101100111011000010000", "01000100000111000000000011011000000011000000010001", "11111111111111111111111111111111111111111000010100", "01000100000111000000000011011000000011000110101110", "00001001011000011111001100100101100100011111101011", "01001101011111011111001111111101100111011000000000", "11110110100111100110110011111110011011100000000000", "01001101011111011111001111111101100111011000000001", "00001001011000011001001100000001100100011000000001", "01000100000111000000000011011000000011000000000001", "00001001011000011111001100100101100100011000000001", "11110110100111100000110011011010011011100000000000"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> data = {"00011110110000011010000110000111100001001001001000", "11111111111111111111111111111000011110010011111111", "00011110110000011010000110011111011111011010110111", "11111111111111111111111111111000011110110010110111", "01111110110100111011001110100111000001101001001000"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> data = {"00000100001101010111010101010110011101010110000001", "00000000011001000111000000010010000001100011010101"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 40;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> data = {"00000000000000110000000000000000000000000000000000", "00000000000000110000000000000000000000000000000000", "10010100100001000000000000000000000000000000000000", "11111111111111111000000000000000100000000000000010", "01001011011110000000000000000000000000000000000000", "10110100100001111000000000000000100000000000000010", "10010100100001111000000000000000100000000000000010", "01001011011110111000000000000000000000000000000010", "11011111111111111000000000000000000000000000000000", "00000000000000000000000000000000100000000000000010", "10110100100001110000000000000000000000000000000000", "01001011011110111000000000000000100000000000000010", "01101011011110110000000000000000000000000000000000", "11011111111111111000000000000000100000000000000010", "11111111111111001000000000000000100000000000000010", "10110100100001000000000000000000000000000000000000", "10110100100001110000000000000000000000000000000000", "01001011011110110000000000000000000000000000000000", "00100000000000001000000000000000100000000000000010", "01001011011110001000000000000000100000000000000010", "01101011011110000000000000000000000000000000000000", "01101011011110000000000000000000000000000000000000", "00100000000000110000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "10110100100001110000000000000000000000000000000000", "01001011011110000000000000000000000000000000000000", "01001011011110000000000000000000000000000000000000", "11111111111111110000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> data = {"00100100001101010111010101010110011101010110000001", "00110000011001000111000000010010000001100011010101", "01010001000000110111011101100011011100010111011001", "10000100010101000111000000100011000000000011010000", "10001010100011001011110010001000100010101000111110", "00011000001011010000100101111000011111010111110001", "01101111011100101111111000110111101011100001001111", "10100000100010001000100000000000000000001000100010", "11001011100011101010111000100001011101110100010100", "00001100100111001100110000000010011100010001010001", "10110100011100110000001111001101110111011111100111", "11011101101110001010100010001000111111111010111011", "11011000100010001001110010001101101011101000110010", "10100000001000000000000000100000011100010111010101", "00110111011101110111011101100111000001100011001001", "01100000000000000000000000000000000000000000000000", "11100100011101100001011000010000011000100011011101", "01000101000101110110011101110010000000110001000100", "11001010101011101010111010111001101110111101101111", "11111000110011111110111111111110110110111011110110", "10110011001001100000011000000000000000110000000001", "01010000001000000000000000100000011100010011001101", "00100111011101110111011101110111010100100111010001", "10100000000000000000000000000000000000000000000000", "11110001000001000110010000100111000100010001001101", "01100000010000000110000000110010010000010110010001", "11000101001100010001000101100101011001000001011001", "01110110000101000000010000000100010001010101010101", "10010000010000100001001000000100000000110001000000", "10110001001000000000000000100100010100010010001101", "01010110011101110111011101110011011101100111010100", "11010000000000000000000000000000000000000000000000", "11100111011110111000001111100111010001100000000011", "11100001000001000000110000110011111110000000010100", "01101111011111001010010010101111000100010100011101", "01101001100011010011110101110011101111010000100110", "00100100100110001100000010000011000000001000000000", "11000011111010001000000010100100010100000000000101", "00101100101101111111111111011011111101111100111111", "10000000000000000000000000000000000000000000000000", "01101010110011000011110000111110000110011101110001", "10100000110001010000110101110100000111000010011110"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> data = {"11111111111111111110110000000000100101110011000100", "00000000000000000001000000000001000101110011000100", "00000000000000000001001000001111010111110111001111", "00000000000000010001011000000001010000000100001001", "11111111111111101110100110001111000111111011110110", "11111111111111101111101000001111010010000100111011", "00000000000000010001010110001111000111111011100110", "00000000000000000001001001110000011000000100011001", "11111111111111101110101110000001110000001100101001"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> data = {"01100000011101010110100010000011000100010011001010", "01100000011101010110100010000011000100010011001000", "00000000000000000000000000100000000000000000000000", "01100000011101010110100010100011000100010011001001", "10011111100010101001011100111100111011101000110101", "11111111111111111111111110011111111111111011111111", "10011111100010101001010100110100111011101000110101", "00000000000000000000000000100000000000000000000000"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> data = {"11111111111110000000000000000000000000000000000000", "11111111111111110000000000000000000000000000000000", "11111111111111110000000000000000000000000000000000", "11111111111111111000000000000000100000000000000010", "11111111111110000000000000000000000000000000000000", "11111111111111111000000000000000100000000000000010", "00000000000001111000000000000000100000000000000010", "11111111111111111000000000000000000000000000000010", "11111111111111111000000000000000000000000000000000"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 43;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> data = {"00000000000000000001000000000000100000000000000000", "00110100101001100101011011111111011111111111111111", "00000000000000000001000001111111011111101111111111", "00000000000000100001001001111111011111101111111111", "11111111111111111111111110000000000000000000000000", "00000000000000100001001001111111011111111111111111", "00000000010000111001101001111111011111101111111111", "11001011010110111011101101111111011111111111111111", "11111111111111111110111111111111111111101111111111"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> data = {"111", "111"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> data = {"110", "110", "101", "101"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> data = {"1100000000", "1100001000", "0011000000", "0011000100", "0000110000", "0000110000", "0000001100", "0000001100", "0010000011", "0000000011"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> data = {"101", "111"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> data = {"11101110", "10100011", "11100000"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> data = {"1100000000", "1100000000", "0011000000", "0011000000", "0000110000", "0000110000", "0000001100", "0000001100", "0000000011", "0000000011"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> data = {"10001", "11001", "11000"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> data = {"1100001000", "1100001000", "0011000000", "0011000000", "0000110000", "0000110000", "1000001000", "0000000000", "0000000011", "0000000011"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> data = {"11000000001100000110000011000000111110001101", "11000001100000011000000110010001100000000111", "01110000111000011100001110100011100011110000", "01111111111111001111101111101100001110010011", "01111111111111001111101111101100000110000001", "01111000000001001111101111101100001000000001", "01111000000001001111101111101100000110111000", "01111111111111001111101111101100000011100001", "01111111111111001111101111101100000011100111", "01110000110101010111101111111001100010000001", "01111111111111001111101111111001100011100001", "01111111111111001111101111111001100010000001", "01111101010101110001100101010111101010100000", "01111111111111001111101111111001100011100110", "01111001111111001111101111111001100001100000", "01111001111111001111101111111001100001100000", "01111001101111001111101111111001100001100000", "01111001111111001111101111111001100001100000", "01111001110111001111101111111001100000000000", "01111011111100111110111110110000000000000000", "01111011111100111110111110110000000000011100", "01111011101100111110111111100110000000000000", "01111011111100111110111111100110010111111000", "01111011111100111110111111100110000000000000", "01111011111100110110111111100110000000000000", "01111111111100110110111111100110000000000000", "11110101001010101010111010100001011001100010", "01111111111100111100111111100110001111110001", "01111101101100111010111111100110000000000001", "01111111111100111100111111100110000000000001", "01110000000000110010111111100110000000000001", "01110000000000111110111110110000000000000001", "01110000000000111110111110110000001111111111", "01110010000000111110111110110000011111111000", "01110000000000111110111110110000000011000001", "01110000000000111110111110110000000011000001", "01110000000000111110111110110000000011000000", "01110000001111001111101111101100000011000001", "01110000001111001111101111101100000011000001", "01110000001111001111101111101100000011000000", "01110000001111001111101111101100000000110001", "01110000001111001111101111101100000000000000", "01110000001111001111101111101100000000000001", "01111111111111001111101111101100000000000001", "01111111111111001111101111101100000111010001", "01111111111111001111101111101100000000100000", "01111111111111001111101111101100000000000001"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> data = {"11100"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> data = {"1"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> data = {};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> data = {"1010"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> data = {"1100", "1100"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> data = {"1010111"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> data = {"1010", "1100"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> data = {"1011", "0110", "1111", "1011"};
    ProductBundling* pObj = new ProductBundling();
    clock_t start = clock();
    int result = pObj->howManyBundles(data);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22629575&rd=10004&pm=6811
********************************************************************************
#include<iostream> 
#include<vector> 
#include<set> 
using namespace std; 
 
class ProductBundling 
{ 
public: 
  int howManyBundles(vector <string> data) 
  { 
    int i,j,len1,len2; 
     
    set <string> s; 
    string t; 
     
    len1=data.size(); 
    len2=data[0].size(); 
     
    for(i=0;i<len2;i++) 
    { 
      t=""; 
      for(j=0;j<len1;j++) 
      { 
        t+=data[j][i]; 
      } 
      s.insert(t); 
    } 
     
    return s.size(); 
  } 
};

********************************************************************************
*******************************************************************************/