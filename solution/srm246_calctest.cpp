/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4469
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class CalcTest {
public:
    vector<string> uniform(vector<string> numbers);
};

vector<string> CalcTest::uniform(vector<string> numbers) {
    vector<string> ret;
    return ret;
}


int test0() {
    vector<string> numbers = {"1.5", "2$ 3", "12 3"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1.5", "2.3", "123"};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> numbers = {",5", "3,", ".5", "3.", "000,000", "000 000"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".5", "3.", ".5", "3.", "000.000", "000000"};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> numbers = {"263C45233 ", " 2364A56", "B273664"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"263.45233", "2364.56", ".273664"};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> numbers = {"814777132", "4/5", "o216673", "362521528", "3", "04"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"814777132", "4.5", ".216673", "362521528", "3", "04"};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> numbers = {"19194939", "17651J8192", ""52", "6J0", "1855213", " 19_9677"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"19194939", "17651.8192", ".52", "6.0", "1855213", "19.9677"};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> numbers = {"1-51", "771795U2", "16y966 249", "896178889", "072", "5 227549", "/3634"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1.51", "771795.2", "16.966249", "896178889", "072", "5227549", ".3634"};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> numbers = {"%9741", "729*320433", "08322y 2", "8487", "!0 89339 1", " 17613060", "-413", "92-7", "0", "622170"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".9741", "729.320433", "08322.2", "8487", ".0893391", "17613060", ".413", "92.7", "0", "622170"};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> numbers = {"D 1", "f5 53 6062", "2", "6977$212"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".1", ".5536062", "2", "6977.212"};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> numbers = {"V62", "-4 ", "68872", "62880 ", "0", "34", "}246";
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".62", ".4", "68872", "62880", "0", "34", ".246", "062742", "7185"};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> numbers = {"039", "6"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"039", "6"};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> numbers = {"57", "15581 ", "O7", "8 0 81 ", "{15", "2:"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"57", "15581", ".7", "8081", ".15", "2."};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> numbers = {"q22899", "8875a", "93G0", "[68 4", "6294176"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".22899", "8875.", "93.0", ".684", "6294176"};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> numbers = {"P9403", "28572 2\4", "4w072", " 27 ", "M8 181 ", "8599l 3112", ">0 ", "31638214"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".9403", "285722.4", "4.072", "27", ".8181", "8599.3112", ".0", "31638214"};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> numbers = {"9619165912214699", "58101913313027225378758656231 1 642", "1498700292 618961412755744W078", "6657005598049589", "1822577331", "7637162955505", "7N98333248742128 338", "17626256b203900782283807419176", "19771606498c1", "8294 8311 23 1313141170964", "56845870144552493933390", "j16974194457166094586", "0545848*0895293699115271868894057069727237293", "14705855", "810683097186171205 67137781790o159", "87970842886422132312 88443 2829`613054", "7849970699211 1 3398998717856027559456", "5644341793325149704583c846392054010833716326523", "5807930?358746581390427407", "0896367101 8]972581503199238765435676", "430c", "1477011)66846", "267 9746V223318055336867953631", "0062v80 3005481233514553710203126577654517126", "639597806141970375g3467", "1377731895_854 2180", "693367998073864", "53y715", "82592363800613412", "010765048943399800770397", "639%0831796369013414831", "109925963779652841779 007897600687120923703333", "54791772N34216807115164151"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"9619165912214699", "581019133130272253787586562311642", "1498700292618961412755744.078", "6657005598049589", "1822577331", "7637162955505", "7.98333248742128338", "17626256.203900782283807419176", "19771606498.1", "82948311231313141170964", "56845870144552493933390", ".16974194457166094586", "0545848.0895293699115271868894057069727237293", "14705855", "81068309718617120567137781790.159", "87970842886422132312884432829.613054", "784997069921113398998717856027559456", "5644341793325149704583.846392054010833716326523", "5807930.358746581390427407", "08963671018.972581503199238765435676", "430.", "1477011.66846", "2679746.223318055336867953631", "0062.803005481233514553710203126577654517126", "639597806141970375.3467", "1377731895.8542180", "693367998073864", "53.715", "82592363800613412", "010765048943399800770397", "639.0831796369013414831", "109925963779652841779007897600687120923703333", "54791772.34216807115164151"};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> numbers = {"48067274153806444540334957361420892008950270286", "67B198890589 907063849426449967919729", "86627889817109a980713168676296526946887", " 11956975496460N730396575", "3604:244599664688009744578592730369267052145740", "21034761368224194664585241 258098001C914038002326", "8r482079 58736143335", "15629355056", "9 26814322060320036470H 14534372965641252399", "47115568630008571033822021517258", "451283419554221326 387E103866906952", "M49922376257719944349622028912256376207 3576714717"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"48067274153806444540334957361420892008950270286", "67.198890589907063849426449967919729", "86627889817109.980713168676296526946887", "11956975496460.730396575", "3604.244599664688009744578592730369267052145740", "21034761368224194664585241258098001.914038002326", "8.48207958736143335", "15629355056", "926814322060320036470.14534372965641252399", "47115568630008571033822021517258", "451283419554221326387.103866906952", ".499223762577199443496220289122563762073576714717"};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> numbers = {"644174829052116635251330534,9812874868678208", "4_", "91189F4235896", "227", "469B308 69061", "771125}641849667250217761 297889727373844551656089";
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"644174829052116635251330534.9812874868678208", "4.", "91189.4235896", "227", "469.30869061", "771125.641849667250217761297889727373844551656089", "215.387000335261", "88748582738", "580562.8414428948071", "7130810005183.0842232", ".7574930574672472959637", "5846909890846842303469154880963108893", "13350744975552515595241293505", "427511.980861061099", "061", "26.6322636315281658019802296852724981", "627.87403293212", ".47732402330", "4"};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> numbers = {" y6 661736588254737294515", "7249073828981130481315665761091116004-76", "694609451965854773531 594729837 059994399016776", "033982990x598100993041096", "960242004016409968149630222070%799896", "m7410768892863707844220", "908495766631r4683108903723126568216", "97842147582", "9771698968639266306531073", "40302E753449116372193676726222464516411836", "4923j361481344", "9529022473080058527695450711677099998097684945344", "73283 62100 8670970823730500623", "56138150293543505355492695444098369", "21 4912474w7072548717718 6122", "055639540616685131292789g3690", "u5", "02854851281498755547759", "227217469", "346866H605666578292505084073872369971951", "93669036!6872426 57092968280851337161578 526", "1778914778121719651961391"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".6661736588254737294515", "7249073828981130481315665761091116004.76", "694609451965854773531594729837059994399016776", "033982990.598100993041096", "960242004016409968149630222070.799896", ".7410768892863707844220", "908495766631.4683108903723126568216", "97842147582", "9771698968639266306531073", "40302.753449116372193676726222464516411836", "4923.361481344", "9529022473080058527695450711677099998097684945344", "73283621008670970823730500623", "56138150293543505355492695444098369", "214912474.70725487177186122", "055639540616685131292789.3690", ".5", "02854851281498755547759", "227217469", "346866.605666578292505084073872369971951", "93669036.687242657092968280851337161578526", "1778914778121719651961391"};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> numbers = {"79867701768735582522131", "1816407945738913642963301484376989372311", "N88772", "J548915342802754488710 3208971533780317047131", "9819544801598079936471771634092725162421584510", "90 3888159471686904250471058996", "445628948687", "397p7146909720454272466836411 6644180969539446 5", "39967N87960163616456052838292935716749061", "3862390875$933923279973383207572166667455215", "6832443 228414034573518990143964836721901348468", "R92159617", "3572732635520 172", "79913371336048743911315484525847p553", "93 592989329P64917934769830733706261751953", "3647B880071312949263585338553376889664963856199563", "370527664", "96519079837388497122453879 780815", "463539021676302950999993106l590", "726162368906656438931805976174_35277", "97438674H351243228099 39508954012379", "385689m380955474838175778 249512784", "16530T700", "11111 1966504446948", "00391432863874343~"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"79867701768735582522131", "1816407945738913642963301484376989372311", ".88772", ".5489153428027544887103208971533780317047131", "9819544801598079936471771634092725162421584510", "903888159471686904250471058996", "445628948687", "397.714690972045427246683641166441809695394465", "39967.87960163616456052838292935716749061", "3862390875.933923279973383207572166667455215", "6832443228414034573518990143964836721901348468", ".92159617", "3572732635520172", "79913371336048743911315484525847.553", "93592989329.64917934769830733706261751953", "3647.880071312949263585338553376889664963856199563", "370527664", "96519079837388497122453879780815", "463539021676302950999993106.590", "726162368906656438931805976174.35277", "97438674.35124322809939508954012379", "385689.380955474838175778249512784", "16530.700", "111111966504446948", "00391432863874343."};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> numbers = {"64", "323407617A4018829671088144212054544837513574785725", "'5527168377560566836346103278187201145036698", "[\u127]659188509 872100 8", "16296535303232k248232689", "88857627748 79043113449 593005217604041613", "993028 531(562 71", "r0373181731313234493 ", "57551044852w53453634 14208 061230044", "945857 39h035427", "9562280361j177", "80191475194636054405220299 405963", "3313189913207078664 042499808465913429419731795307", "21808138684081414618566740316177587372", "73755767437293351636666287 9980187277 81033848", "w7", "2592734503289420753336416640388311926", "X2", "13262 50T9890", "2 4455055120110101891583992732619367280225$7604", "141375", "911631634051553293030275", "627820z67764419183055857191266370", "0636275598362 97881666", "0 61911g379825 ", "3202941739Q7249283921012536769367529247", "746016302180832874138505275 20485965567457920782", "70", "97680690361181130777542484921961888652311627643", "6280G8803120539711661975263", "917217399528907 405540;", "296h09526641716 065626214520 4423143722447 1975"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"64", "323407617.4018829671088144212054544837513574785725", ".5527168377560566836346103278187201145036698", ".6591885098721008", "16296535303232.248232689", "8885762774879043113449593005217604041613", "993028531.56271", ".0373181731313234493", "57551044852.5345363414208061230044", "94585739.035427", "9562280361.177", "80191475194636054405220299405963", "3313189913207078664042499808465913429419731795307", "21808138684081414618566740316177587372", "73755767437293351636666287998018727781033848", ".7", "2592734503289420753336416640388311926", ".2", "1326250.9890", "24455055120110101891583992732619367280225.7604", "141375", "911631634051553293030275", "627820.67764419183055857191266370", "063627559836297881666", "061911.379825", "3202941739.7249283921012536769367529247", "74601630218083287413850527520485965567457920782", "70", "97680690361181130777542484921961888652311627643", "6280.8803120539711661975263", "917217399528907405540.", "296.0952664171606562621452044231437224471975"};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> numbers = {"2557557080225832579758 50070336447797795188178 7 0", "23", "35449705728112531954924", "5", "21235182957271022142869236633005269506425", "8003", "066258333805622 71233702 52981920", "86(101", "0898173309493009631697989514808473275084416249577", "8 22", "99v26945", "121352244427", "78494419677016519082926917)3", "82167250016463w223407089542384 5588033", "26;7743163797107324", "5525370065718889 7966441899121 02845613292015544", "84236249334109[38649084366", "26241968760599330F65661048946999172", "48445810104357715007470162904Y413134842947", "939J9", "7753702107356652011660584042581389129", "5670836520569336916699246160641673629217601447468", "M69083370", "398063 4609 2505z1574675809876", "638887172801178", "999402007 1"7184480034109 049528835706468641741 ", "809026181315409423032466465420311779200664", "9 5589848959183202299121o941425376863100892338", " 2603785385'4422 867438", "464969035D33376 7123600206210051864396", "672394208 045631 590403 h1387356309845", "588042p21157494529", "00j675634", "15411086659346178128964023398282413", "8110Y430299203600054376059459"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"25575570802258325797585007033644779779518817870", "23", "35449705728112531954924", "5", "21235182957271022142869236633005269506425", "8003", "0662583338056227123370252981920", "86.101", "0898173309493009631697989514808473275084416249577", "822", "99.26945", "121352244427", "78494419677016519082926917.3", "82167250016463.2234070895423845588033", "26.7743163797107324", "5525370065718889796644189912102845613292015544", "84236249334109.38649084366", "26241968760599330.65661048946999172", "48445810104357715007470162904.413134842947", "939.9", "7753702107356652011660584042581389129", "5670836520569336916699246160641673629217601447468", ".69083370", "39806346092505.1574675809876", "638887172801178", "9994020071.7184480034109049528835706468641741", "809026181315409423032466465420311779200664", "95589848959183202299121.941425376863100892338", "2603785385.4422867438", "464969035.333767123600206210051864396", "672394208045631590403.1387356309845", "588042.21157494529", "00.675634", "15411086659346178128964023398282413", "8110.430299203600054376059459"};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> numbers = {"2191578946476426&578727280966", "6595391147444118655740204839169996", "087 19530968434753175437284586740302681460815777", "4J", "1646`598", "6045", "820975627890505227415", "20052796 22706402089888646450198634 48703442810", "2839860$ 74979578452396695", "14430934 44A46930689404650804879", "60908398623972477926737987064453491893", "124527696090466", "0933476998498999 80408556819871391328", "0239071579636324 276392108948248474176167r4392", "2212 23618018395060453769", "100220A73649 817184410334395", "82583g91839582310996844629155671 12352493722 36", "128S4038436924571538997 82060866539", "591498044030821161985716718575490969872634383", "066o4845", "0553539296603694375", "/81766508569", "6A6751 7545291036951831967353695078931", "278577716v8470698431716776994", "48;388", "8582135777276515095801216038051", "$265994610349", "9104144456855826#74287332800 ", "5749413512658881858987895991842089784943656233623", "79815548958283909483611", ":82762979161", "5470741892#63157 200", "2906408045888561948464903175183503659)477", "898207869769", "2860506 268789716128", "4720863", "145243029048 96601429934616001838463914734151", "378i9730421625096090", "6914 7298000x69292043986538050277688428 07337223", "7?2", "7671516392607776722096 29]456561650274545877467", "9230[548"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"2191578946476426.578727280966", "6595391147444118655740204839169996", "08719530968434753175437284586740302681460815777", "4.", "1646.598", "6045", "820975627890505227415", "200527962270640208988864645019863448703442810", "2839860.74979578452396695", "1443093444.46930689404650804879", "60908398623972477926737987064453491893", "124527696090466", "093347699849899980408556819871391328", "0239071579636324276392108948248474176167.4392", "221223618018395060453769", "100220.73649817184410334395", "82583.918395823109968446291556711235249372236", "128.403843692457153899782060866539", "591498044030821161985716718575490969872634383", "066.4845", "0553539296603694375", ".81766508569", "6.67517545291036951831967353695078931", "278577716.8470698431716776994", "48.388", "8582135777276515095801216038051", ".265994610349", "9104144456855826.74287332800", "5749413512658881858987895991842089784943656233623", "79815548958283909483611", ".82762979161", "5470741892.63157200", "2906408045888561948464903175183503659.477", "898207869769", "2860506268789716128", "4720863", "14524302904896601429934616001838463914734151", "378.9730421625096090", "69147298000.6929204398653805027768842807337223", "7.2", "767151639260777672209629.456561650274545877467", "9230.548"};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> numbers = {"83103358946072269791s626303", "803381847453623n170602478", "862220620238483366220277 47827388884186470 765", "5c4072851983579 39109697", "3115271552713526604632958+15062669711988497860992", "6x", "7 ", "0499901t80948", "84549379-1832983187", "[\u127]63703905278939878294676 74", "2G78376317", "5285770948104145052 95147074325136216861651450", "11 0922649605150 304761463 9084765 766766", "256993247561595872376 7 04391018962313", "5154589772", "569917058736 154 6661", "967545589982155859 56993516818 792816753", "315714147777270 17971851663571326474379318622751", "19448984327A", "77991262276776499427687731300578219508251026", "3564334906185941769000358268213276581277786933038", "4740713492583576910021856222337", "173470480", "650769021784589929842365888656B661158316922141924", "153363c928053", "6S398279903", "~78", "503979d523", "419042349*5792379039612019237209", "51441293 636949X101550382911244089812612", "9818", "8954302039{", "843259240342662861436714030", "F380901056", "08890206920X35231161561320444169040103655", "3", "774174112016454 0988620653680461266698506878 839", "89390153276167805674", "9913091911745331244 38A62", "28g7022 135265", "491500153228420803", "16820895780981375286825789", "81032281043167450032641211108517979311751", ";99151814985287548045 387155449287851", "4743"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"83103358946072269791.626303", "803381847453623.170602478", "86222062023848336622027747827388884186470765", "5.407285198357939109697", "3115271552713526604632958.15062669711988497860992", "6.", "7", "0499901.80948", "84549379.1832983187", ".6370390527893987829467674", "2.78376317", "528577094810414505295147074325136216861651450", "1109226496051503047614639084765766766", "256993247561595872376704391018962313", "5154589772", "5699170587361546661", "96754558998215585956993516818792816753", "31571414777727017971851663571326474379318622751", "19448984327.", "77991262276776499427687731300578219508251026", "3564334906185941769000358268213276581277786933038", "4740713492583576910021856222337", "173470480", "650769021784589929842365888656.661158316922141924", "153363.928053", "6.398279903", ".78", "503979.523", "419042349.5792379039612019237209", "51441293636949.101550382911244089812612", "9818", "8954302039.", "843259240342662861436714030", ".380901056", "08890206920.35231161561320444169040103655", "3", "7741741120164540988620653680461266698506878839", "89390153276167805674", "991309191174533124438.62", "28.7022135265", "491500153228420803", "16820895780981375286825789", "81032281043167450032641211108517979311751", ".99151814985287548045387155449287851", "4743"};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> numbers = {"09231414", "574417", "586", "20836130817519154284 3103180", " 54086108", " 400467289197161;0910290396145687", "6065U118 17", "1104368918662U6342277390900665643309002837293658", "67138623088467C70957907677646775522745", "0892276580642063374692719795867088160274", "80744229336", "81'64804784 456245840747774908714618043800429115", "00681439885 53007787|3859736", "7487765747911295010582439718", "15003966427714925855 94063", "04912454885878071778671l", "291188778588582948499289622582178 263", "7572606127305539243508215582982776299", "79313891237487604110467 89853843", "22 9967041192333221362413416027637", "8=", "920805407184<543529 695", "20958k787", "850787878410120218613560295885106511", "09q", "33189335408a40", "%2604", "04300179183573513894 603145996645"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"09231414", "574417", "586", "208361308175191542843103180", "54086108", "400467289197161.0910290396145687", "6065.11817", "1104368918662.6342277390900665643309002837293658", "67138623088467.70957907677646775522745", "0892276580642063374692719795867088160274", "80744229336", "81.64804784456245840747774908714618043800429115", "0068143988553007787.3859736", "7487765747911295010582439718", "1500396642771492585594063", "04912454885878071778671.", "291188778588582948499289622582178263", "7572606127305539243508215582982776299", "7931389123748760411046789853843", "229967041192333221362413416027637", "8.", "920805407184.543529695", "20958.787", "850787878410120218613560295885106511", "09.", "33189335408.40", ".2604", "04300179183573513894603145996645"};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> numbers = {"29751677981906814289071306236072805264886.29639258", "72857939451656688739563763383381948304437362870194", "3986347311057162144483306060134729380.646002232472", "06578159293925902933971681144138515313154846021411", "986012219993226260461,9839725572716258562594148322", "4177.757739987777107847613472620106821937229682984", "8050143086440883363735195949798204653090208492.342", "74161511855866447558074206456698400377257364712342", "90163530880686666006750686187594291832475499118431", "21579925004101743550959456883120879272468637438051", "33991677163394680333831480017710378040808180580202", "659071062530558891726829526256739320834789750,6118", "52615907513606811114922220127367571685496310979543", "88016051485186064802369915487954,48624367315078180", ".0332113370268397796009302744060280339152819759337", "6217032817316459114.601762926669285100642401987132", "99056820424972895.38154060254047057063179026221701", "23468029312312366534445511030953581330227043329345", "3011577439841254816539645314154240,376073765096245", "09508029455132018882890860232295,04065924780547815", "219305613199749170176312730948445912797883902145.1", "769989591711049042473803,6051886109786400172720073", "42831140987181578164152504901670244664559225208945", "7397739690.834598434028023304967771567734392858281", "998391111956276578,6581325421844129119917006242736", "55585043605989196001395168663,62202374245443286965", "08606410437314642206715285778226597150271919457629", "71216032562531971908288331224485573673015669323811", "14583231528607706618383386378915033201169219214663", "3156537129874145768269460858677994202.264555919936", "52207529921941255155022792325964698785400265643029", "63485740648714164392407792355591641478,37085413800", "61287819755700338367609412987337902699263462526251", "343000378447682179586499119213844617262.9073684556", "58450018104301300122373764720591973524835809087570", "67537856531489121799957361889738231688910177615191", "96602187606469694887755582349097911105628263561026", "79029755460939719564827298842450456953886776631306", "22028745956620207925133225429517246738844332467448", "4.967965061557261835299094583168619869057533459132", "96398287967114921035631444784229129896928969167127", "08486787080034796375366567562364751277067359998328", "3167.140696979599388041267413961108568361965426327", "22531050898287526916803976905,37914849356701135006", "49277442123541533491528396429020937181941599488.11", "899368749246130212795643268292329500979.9331938730", "91073217338,76076879039003653347973159180962575015", "23.28920003919855552912553382839121941839413438744", "67421970992.51923176603665481151586769241881507803", "60240483586580563373367532057517531130364560563064"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"29751677981906814289071306236072805264886.29639258", "72857939451656688739563763383381948304437362870194", "3986347311057162144483306060134729380.646002232472", "06578159293925902933971681144138515313154846021411", "986012219993226260461.9839725572716258562594148322", "4177.757739987777107847613472620106821937229682984", "8050143086440883363735195949798204653090208492.342", "74161511855866447558074206456698400377257364712342", "90163530880686666006750686187594291832475499118431", "21579925004101743550959456883120879272468637438051", "33991677163394680333831480017710378040808180580202", "659071062530558891726829526256739320834789750.6118", "52615907513606811114922220127367571685496310979543", "88016051485186064802369915487954.48624367315078180", ".0332113370268397796009302744060280339152819759337", "6217032817316459114.601762926669285100642401987132", "99056820424972895.38154060254047057063179026221701", "23468029312312366534445511030953581330227043329345", "3011577439841254816539645314154240.376073765096245", "09508029455132018882890860232295.04065924780547815", "219305613199749170176312730948445912797883902145.1", "769989591711049042473803.6051886109786400172720073", "42831140987181578164152504901670244664559225208945", "7397739690.834598434028023304967771567734392858281", "998391111956276578.6581325421844129119917006242736", "55585043605989196001395168663.62202374245443286965", "08606410437314642206715285778226597150271919457629", "71216032562531971908288331224485573673015669323811", "14583231528607706618383386378915033201169219214663", "3156537129874145768269460858677994202.264555919936", "52207529921941255155022792325964698785400265643029", "63485740648714164392407792355591641478.37085413800", "61287819755700338367609412987337902699263462526251", "343000378447682179586499119213844617262.9073684556", "58450018104301300122373764720591973524835809087570", "67537856531489121799957361889738231688910177615191", "96602187606469694887755582349097911105628263561026", "79029755460939719564827298842450456953886776631306", "22028745956620207925133225429517246738844332467448", "4.967965061557261835299094583168619869057533459132", "96398287967114921035631444784229129896928969167127", "08486787080034796375366567562364751277067359998328", "3167.140696979599388041267413961108568361965426327", "22531050898287526916803976905.37914849356701135006", "49277442123541533491528396429020937181941599488.11", "899368749246130212795643268292329500979.9331938730", "91073217338.76076879039003653347973159180962575015", "23.28920003919855552912553382839121941839413438744", "67421970992.51923176603665481151586769241881507803", "60240483586580563373367532057517531130364560563064"};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> numbers = {"595865326235994755384,1336150558932402967855744439", "308334,0616909409756469384523815571291058438346690", "10431722454898204201360128476601578788594375009628", "86998167473523995165920391813724414479201241831694", "39620339527963243894113333070666914673497522548602", "89786603047665629084314446279244003800627785548314", "7536401875064262,085894543480965771442788575953132", "01397.02346551008149290430262160437210589527771861", "116859156,8216243890093781957431316243599831757893", "0104635663325954529819205468657132361,597236783831", "55852516178447531580701439107472539315154053434718", "50,58161142083961944538888923825147042736221096167", "42995255407092797262907872410917878284466118033832", "96796111438393083311914455183992822751734437952989", "3773887037845487075210901253,860054930026765548343", "23166,21761283598555861128715017451851924346992967", "0728301143850274097808971922.127146328162868563714", "9543358.677895988850530253153176669027768177651799", "01952581637199959042664935521640983161023027395448", "988054856727242.1976283401189613812722277957190031", "06149009500,99082665415266205027798614445005437904", "04625013065615271,00244003693359463118570745257040", "47535810965929638710399199839637515795744228851317", "14947943365301025763723691892788724470986384347170", "89,21883740451947356557433685338513307042925858298", "59,71992333996301329848766828340998328593262244602", "41799650129259171603190129910368412772364702322760", "4961910672668686603292329329411834.718647742079584", "8750703764482.575597166135511003631964279939386004", "0798138,554005336107167650438860350100243970936400", "92306542334.17228482047987461486340376107979207252", "70.76119313303194587156087095894673818650904627479", "61376883666421882659248132774727567485819324.64645", ".1905500226197025866560741723918468114406871195534", "6367701065273896792301296758.409108025637410562116", "00840500955300802996231087472183299345661109269132", "89237199836733902619647077922425159679.11110970404", "44373551882427749433169526379645492549978760654618", "355980854497599012849855,6145109389773920540263910", "27999512.33741220946189250376883825412659658219678", "255953173960050913954283,4317340288764962990823719", "641029793755622121215362746481559.0390169106276679", "73770640078.28271653269996373694386950232340496875", "238.0996850753133057399308792756864793465871846962", "46643612789140385597474291356784577549362476142982", "0894493566258184155891034222025436966222,104898336", "057809291337758480593205938418,7052097134864572574", "8038347129423201166572.209119979464154693104772229", "39671921186960836343435550861180945310091002910744", "584372674255,4554436765683710433086073425905060862"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"595865326235994755384.1336150558932402967855744439", "308334.0616909409756469384523815571291058438346690", "10431722454898204201360128476601578788594375009628", "86998167473523995165920391813724414479201241831694", "39620339527963243894113333070666914673497522548602", "89786603047665629084314446279244003800627785548314", "7536401875064262.085894543480965771442788575953132", "01397.02346551008149290430262160437210589527771861", "116859156.8216243890093781957431316243599831757893", "0104635663325954529819205468657132361.597236783831", "55852516178447531580701439107472539315154053434718", "50.58161142083961944538888923825147042736221096167", "42995255407092797262907872410917878284466118033832", "96796111438393083311914455183992822751734437952989", "3773887037845487075210901253.860054930026765548343", "23166.21761283598555861128715017451851924346992967", "0728301143850274097808971922.127146328162868563714", "9543358.677895988850530253153176669027768177651799", "01952581637199959042664935521640983161023027395448", "988054856727242.1976283401189613812722277957190031", "06149009500.99082665415266205027798614445005437904", "04625013065615271.00244003693359463118570745257040", "47535810965929638710399199839637515795744228851317", "14947943365301025763723691892788724470986384347170", "89.21883740451947356557433685338513307042925858298", "59.71992333996301329848766828340998328593262244602", "41799650129259171603190129910368412772364702322760", "4961910672668686603292329329411834.718647742079584", "8750703764482.575597166135511003631964279939386004", "0798138.554005336107167650438860350100243970936400", "92306542334.17228482047987461486340376107979207252", "70.76119313303194587156087095894673818650904627479", "61376883666421882659248132774727567485819324.64645", ".1905500226197025866560741723918468114406871195534", "6367701065273896792301296758.409108025637410562116", "00840500955300802996231087472183299345661109269132", "89237199836733902619647077922425159679.11110970404", "44373551882427749433169526379645492549978760654618", "355980854497599012849855.6145109389773920540263910", "27999512.33741220946189250376883825412659658219678", "255953173960050913954283.4317340288764962990823719", "641029793755622121215362746481559.0390169106276679", "73770640078.28271653269996373694386950232340496875", "238.0996850753133057399308792756864793465871846962", "46643612789140385597474291356784577549362476142982", "0894493566258184155891034222025436966222.104898336", "057809291337758480593205938418.7052097134864572574", "8038347129423201166572.209119979464154693104772229", "39671921186960836343435550861180945310091002910744", "584372674255.4554436765683710433086073425905060862"};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> numbers = {"442089903850071661456.7336550592837006039819800023", "9835647616282570852711415.112885467766902192701540", "6439345533766473455.212461782643877535222708015878", "9914571744407563556565113075157132349020,069947266", "91861459829792152948268396705373835672939963337359", "84384101892829936506716002774232943106959823963420", "80188950598556416903801498344975005240665345700860", "55806949544566993950625716641749063492649709451846", "81345219495695308705110151107568611239392672780409", "54870898714,99574021099616089206129488262683225877", "44038390893,52040266486684694552565468282463381780", ".0101460647603399797764356110150722620346677169223", "25700913393626158433224415034135269085013683863077", "110293306271696380732417562478911.1554861494482725", "59717170558594773604925358516544655742.92871752971", "12662771096558621593890180112379274062782290618410", "44927494956488170.03557650189419821736967794040097", "1970307116,638014052810324104695364796599357578895", "2542.368881582848974732365934816898890790246427000", "95599191799766323493679242490945774331391256385770", "469575,7347604149629855318625202122767261707156448", "341442131731400046891796.0723984147504342963572834", "4566800078916.375588150148791570300701870454611579", "334640,8152591754170147958957646170810730297269597", "20,16289285434530107808749524848428398372433701549", ",8704816742219745974122445242329075433734258430703", "71906161801914767993048376696157076684357093904193", "93999954995,03490865043798669026534546704208791266", "9533067339207003285,792657613818609124017686487323", "862913155043796025454550.0459969381450444681013238", "23.72896200433785481011440560491178659234031608291", "1828066674290998444030290,850930410224885594417519", "3672654265118,908889441833297543804582436865740802", "66305022912351086891687653419261480388512425479881", "707766472004,5949727631214340009689071869263913092", "3267452580467,991072974006777636653770437116764497", "59028598.01317984263619405285072425548843687900755", "7,959187229273674807216967261447327496997265347343", "48086482145895238135593650525175236249614606955092", "86084992.42289387141486470346723244092689114825799", "88712709424812606557054516025932.00375557963500051", ".5010203257293853956537032212155937464460486492709", "06960198211221194830215894324311912187284472782997", "44206732920291541257673,49995933801718761974728612", "25225742725437116171912615473686601637148645896029", "205232900981.0122709746308672699870965952343569352", "86317009406017284813078104828857951501752130225581", "27937034928261299218573912353930237332813717067801", "19446839138530717399337796312873367003789535072653", "17781955306938723989579737256874015005882406241754"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"442089903850071661456.7336550592837006039819800023", "9835647616282570852711415.112885467766902192701540", "6439345533766473455.212461782643877535222708015878", "9914571744407563556565113075157132349020.069947266", "91861459829792152948268396705373835672939963337359", "84384101892829936506716002774232943106959823963420", "80188950598556416903801498344975005240665345700860", "55806949544566993950625716641749063492649709451846", "81345219495695308705110151107568611239392672780409", "54870898714.99574021099616089206129488262683225877", "44038390893.52040266486684694552565468282463381780", ".0101460647603399797764356110150722620346677169223", "25700913393626158433224415034135269085013683863077", "110293306271696380732417562478911.1554861494482725", "59717170558594773604925358516544655742.92871752971", "12662771096558621593890180112379274062782290618410", "44927494956488170.03557650189419821736967794040097", "1970307116.638014052810324104695364796599357578895", "2542.368881582848974732365934816898890790246427000", "95599191799766323493679242490945774331391256385770", "469575.7347604149629855318625202122767261707156448", "341442131731400046891796.0723984147504342963572834", "4566800078916.375588150148791570300701870454611579", "334640.8152591754170147958957646170810730297269597", "20.16289285434530107808749524848428398372433701549", ".8704816742219745974122445242329075433734258430703", "71906161801914767993048376696157076684357093904193", "93999954995.03490865043798669026534546704208791266", "9533067339207003285.792657613818609124017686487323", "862913155043796025454550.0459969381450444681013238", "23.72896200433785481011440560491178659234031608291", "1828066674290998444030290.850930410224885594417519", "3672654265118.908889441833297543804582436865740802", "66305022912351086891687653419261480388512425479881", "707766472004.5949727631214340009689071869263913092", "3267452580467.991072974006777636653770437116764497", "59028598.01317984263619405285072425548843687900755", "7.959187229273674807216967261447327496997265347343", "48086482145895238135593650525175236249614606955092", "86084992.42289387141486470346723244092689114825799", "88712709424812606557054516025932.00375557963500051", ".5010203257293853956537032212155937464460486492709", "06960198211221194830215894324311912187284472782997", "44206732920291541257673.49995933801718761974728612", "25225742725437116171912615473686601637148645896029", "205232900981.0122709746308672699870965952343569352", "86317009406017284813078104828857951501752130225581", "27937034928261299218573912353930237332813717067801", "19446839138530717399337796312873367003789535072653", "17781955306938723989579737256874015005882406241754"};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> numbers = {"337627496099804,2892989154098142899577634109003795", "826845183718.1092275717750239365472721130219678375", "397014671072925842670386695962970516506,1286838182", "34455202472304549802259764944525138597244619828700", "92420037438308159464108512724102266554979827909477", "821459728361999129,1073299054355173220938938405706", "0767.553393362352189226303971743748999184361263078", "83,22786698748404065241464542295336563221716062675", "0443763411576452379959068060995591.738790905736753", "819,0482346872925611790698359085027596115073075788", "524988638018426116.7600027106676048406239197765467", "3585019334063398148520009928274886584617827,065519", "99172622786461160483237853474743327967219424049684", "279570739183970479339.5603663481282993087931810564", "65816123240167422001804456625635625552778956121291", "20250529.20620080918677366325199455152973426219370", "7689995871473346457871.380895645366148708337440363", "31164069501636510171245685495626211110017668487860", "222492435516110688545548637019942972,0470936753231", "06351637850219550801347030481314983793683015424917", "8.017632112282805139905315029444373323873021200547", "357.1935928777411146160676800809082751317276708527", "959660725,2552766387070005988614004383363615138584", "85475218471383059039941437937,71382479364145567730", "24088258765352054076749333324682832959199330940980", "3553696619867419284679504,167251634646487598029564", "47676423309134839401619437123427563894706098262851", "527394130427.5053138136175223395596682857142887849", "9282,391785078900109719617991023465303645765555324", "04680430951691158367514055063783740375199130827913", "33998611847067643270118305654,49177229912871334857", "4412305298198147832617622144632983389542.714168388", "96639666726808197715391452678566082624749437642326", "1367485196466095,172783740037725567727021357918621", "978700728503417416562215880018527483,4045689883389", ".8632360577476410479911973555623598324106824121320", "51068191364542.65049329376654952926008251676319285", "94445273583746995501253630809314540708819095088487", "84195686340764606,61433462210616061510767465535398", "7827143992270806,437146190087364751095235230747155", "16948160679010805166072919071600905879741504870878", "5278572035340133400906630011,606603609873884042073", "0094254654,046165806648106451215422165468437840821", ".6235190255306107343468185938454880170474974102620", "660808244879,2342731973770449575030187063407958049", "57848547806733633500915746404625797251851851458168", "69724574155816369944142885393050721448611585079673", "04457597229670711872147799153788594189549802672215", "6142992394580288196134,355320835649582053545061258", "14927601291923,86304464400821853076233396351211989"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"337627496099804.2892989154098142899577634109003795", "826845183718.1092275717750239365472721130219678375", "397014671072925842670386695962970516506.1286838182", "34455202472304549802259764944525138597244619828700", "92420037438308159464108512724102266554979827909477", "821459728361999129.1073299054355173220938938405706", "0767.553393362352189226303971743748999184361263078", "83.22786698748404065241464542295336563221716062675", "0443763411576452379959068060995591.738790905736753", "819.0482346872925611790698359085027596115073075788", "524988638018426116.7600027106676048406239197765467", "3585019334063398148520009928274886584617827.065519", "99172622786461160483237853474743327967219424049684", "279570739183970479339.5603663481282993087931810564", "65816123240167422001804456625635625552778956121291", "20250529.20620080918677366325199455152973426219370", "7689995871473346457871.380895645366148708337440363", "31164069501636510171245685495626211110017668487860", "222492435516110688545548637019942972.0470936753231", "06351637850219550801347030481314983793683015424917", "8.017632112282805139905315029444373323873021200547", "357.1935928777411146160676800809082751317276708527", "959660725.2552766387070005988614004383363615138584", "85475218471383059039941437937.71382479364145567730", "24088258765352054076749333324682832959199330940980", "3553696619867419284679504.167251634646487598029564", "47676423309134839401619437123427563894706098262851", "527394130427.5053138136175223395596682857142887849", "9282.391785078900109719617991023465303645765555324", "04680430951691158367514055063783740375199130827913", "33998611847067643270118305654.49177229912871334857", "4412305298198147832617622144632983389542.714168388", "96639666726808197715391452678566082624749437642326", "1367485196466095.172783740037725567727021357918621", "978700728503417416562215880018527483.4045689883389", ".8632360577476410479911973555623598324106824121320", "51068191364542.65049329376654952926008251676319285", "94445273583746995501253630809314540708819095088487", "84195686340764606.61433462210616061510767465535398", "7827143992270806.437146190087364751095235230747155", "16948160679010805166072919071600905879741504870878", "5278572035340133400906630011.606603609873884042073", "0094254654.046165806648106451215422165468437840821", ".6235190255306107343468185938454880170474974102620", "660808244879.2342731973770449575030187063407958049", "57848547806733633500915746404625797251851851458168", "69724574155816369944142885393050721448611585079673", "04457597229670711872147799153788594189549802672215", "6142992394580288196134.355320835649582053545061258", "14927601291923.86304464400821853076233396351211989"};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> numbers = {"13114587831073698335158015232567482170683369617890", "706491138063856982836505.7906638667535128540137846", "90317124827854904122558463531771666550759141157856", "9034594894297188977428391793957,900308259325429898", "956457,8913475514850406609001514462946921066901257", "2577392955.646771453360514021961684351940458307404", "32384218866192329193786072892938926778602278903574", "60857592084398953276869069291904484668906568739698", "99368278076129335778,68905030957969679026523721900", "5952761577994907410809031399512856.412885530362220", "67907315494873414450877,16079421016918958776810111", "18554711969413651676670.54451120796311390220998741", "259670189727754484019890532,3772516718465869659008", "86839645648513187567148488621820861718362995565977", "40,49492682344757352226242451248891542343356571329", "6490892064231.426222652554800760519400052636838607", "681155769397033677762,5567188199426732972997065996", "36455732732983982397077581894175562690322707721163", "0783321382709185188378200729116963013938,495350850", "70.10184874483214492231822610807857464052892070948", "855009.1045755340629911179001123922426228332746636", "88578622384600071184000840099030036934029174109463", ",8338943322139034106406127937791998288357041709781", "46912343281469675692594854699296353922956.80768453", "06603292792.69269591236284149334360450725989030858", "38008987744,42371455566163047882150424284283814137", "04522054902809208260694721957542393601070849088464", "65877432105625226028949689068459835942263700991829", "9785644210654575.148502379860028813790606390916949", "3385348508.824083730049303718770582970623840797709", "9.315981153977151029857787841751373758872113529728", "01145105511762829457429414774404099691634150756522", "22939218914248.82184741898451840511145187403225836", "29349215534417297818219001827533575157831297941247", "50873991533803375970.24537676763199389906440244738", "10473577167547249104000611560954039530,77468154163", ".3952411517457409893935835659831520672825317785222", "553,8471304938117562281761168654295545541568080052", "05131702442664674674498629774928256,93881989718070", "89501847417898108956777946807308147945251770178978", "91636642638732,93055387253976115025819169800692965", "1830376777408,711085506034211932930154118505521774", "29428243056577817431650642718990759318628826248023", "16181607649173878980832200667434526491120285423203", "122749099527435891306836515208444802413593679,7769", "28617969131910708942098850619686910028257555410232", "240269498454.3446869977121796510365261436351098015", "33180328659357119618331058009047704608,01279665564", "60901935016921812888162781499809248311285632699008", "86355795223614578912857.44078773344141628133934974"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"13114587831073698335158015232567482170683369617890", "706491138063856982836505.7906638667535128540137846", "90317124827854904122558463531771666550759141157856", "9034594894297188977428391793957.900308259325429898", "956457.8913475514850406609001514462946921066901257", "2577392955.646771453360514021961684351940458307404", "32384218866192329193786072892938926778602278903574", "60857592084398953276869069291904484668906568739698", "99368278076129335778.68905030957969679026523721900", "5952761577994907410809031399512856.412885530362220", "67907315494873414450877.16079421016918958776810111", "18554711969413651676670.54451120796311390220998741", "259670189727754484019890532.3772516718465869659008", "86839645648513187567148488621820861718362995565977", "40.49492682344757352226242451248891542343356571329", "6490892064231.426222652554800760519400052636838607", "681155769397033677762.5567188199426732972997065996", "36455732732983982397077581894175562690322707721163", "0783321382709185188378200729116963013938.495350850", "70.10184874483214492231822610807857464052892070948", "855009.1045755340629911179001123922426228332746636", "88578622384600071184000840099030036934029174109463", ".8338943322139034106406127937791998288357041709781", "46912343281469675692594854699296353922956.80768453", "06603292792.69269591236284149334360450725989030858", "38008987744.42371455566163047882150424284283814137", "04522054902809208260694721957542393601070849088464", "65877432105625226028949689068459835942263700991829", "9785644210654575.148502379860028813790606390916949", "3385348508.824083730049303718770582970623840797709", "9.315981153977151029857787841751373758872113529728", "01145105511762829457429414774404099691634150756522", "22939218914248.82184741898451840511145187403225836", "29349215534417297818219001827533575157831297941247", "50873991533803375970.24537676763199389906440244738", "10473577167547249104000611560954039530.77468154163", ".3952411517457409893935835659831520672825317785222", "553.8471304938117562281761168654295545541568080052", "05131702442664674674498629774928256.93881989718070", "89501847417898108956777946807308147945251770178978", "91636642638732.93055387253976115025819169800692965", "1830376777408.711085506034211932930154118505521774", "29428243056577817431650642718990759318628826248023", "16181607649173878980832200667434526491120285423203", "122749099527435891306836515208444802413593679.7769", "28617969131910708942098850619686910028257555410232", "240269498454.3446869977121796510365261436351098015", "33180328659357119618331058009047704608.01279665564", "60901935016921812888162781499809248311285632699008", "86355795223614578912857.44078773344141628133934974"};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> numbers = {",1485050710944914156343655308803980241622195611613", ",4200954343167386103586751290525619540982349269959", ",0094238823034113622368163248452722470642808341712", ",9652293519629767789871321540722751761406095855682", ".0669199658312301840073650368416184015360154370055", ".7782374489567282198873996456605932675438752978100", ".2415991525777433064879975404502405486321453422836", ".7952986457622571231101602222801058458800715484355", ",6776076452174600982650809253178625778047027719253", ".7551093339125921239776856363116028219837208569216", ",0298591686096278526074793281171559820065827781067", ",8476836328453498660699356270094357591309665044978", ".3100638768545474557649251227571328631083197231661", ",0181724355216862758969023743747921847591824361919", ".4660166831609406184772692027423469394660051189856", ".0349365633878186781918095034956146779111663865176", ",9595078091138271407655409556442357466530066862750", ".5270177667730867101127071569850291233705151561893", ".9576042598052909526344090824552696187957450652087", ",1208525185490806885570507789114079917552690720417", ",9456350318024421857966726985650306765041057254089", ",1511033564765683933726355530720092360796587092011", ",8631942840289752259408561946149030622920471449064", ".5655654689182828086568992951157276115581245499009", ".2823182238220333087341796281279296685920103696151", ",8283674217054132386882004667827149936390884455899", ".4822867760694415614888491435998644957251614203375", ",7566418903631874156299218284141785208502065538538", ".2799072630085429386851302505752749725551278870947", ",0251482320598001467472433537598312834465520919642", ".0085162621227316439927995919483589319730341855299", ".1283088509298189769880362204975168080127870531400", ",0123535111136780987721004850746867747954154000025", ".1021636265623644185076680041758901580985042636587", ".0510054458725453663220039574150614540084662474583", ".0829451481776607094007113881430953482745472730882", ",2521972346220801151964354239235404950296808022134", ",5315552480248038946876298759479122949274907393314", ".5288800615784434426730792524960348660976034755080", ".6584865680239073013459615713636793140862527527687", ".8722448528963175700880064468019630534774615443769", ".0988157125860740678809813355967762300069454561378", ",2931389289521176444279215682307515529621224292125", ".5440346226207913115809426748292190165912604331890", ",9638194664738311800648188392428343613297755145953", ",3321712437647333334389500846571566435878697725890", ",2036700195819362385646046353210131835393883667796", ",3690779824450810709275518103799769714780407156104", ",9732759912782806130948041911047228423287609947494", ".3068406626548353087759402865650573832592844140785"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".1485050710944914156343655308803980241622195611613", ".4200954343167386103586751290525619540982349269959", ".0094238823034113622368163248452722470642808341712", ".9652293519629767789871321540722751761406095855682", ".0669199658312301840073650368416184015360154370055", ".7782374489567282198873996456605932675438752978100", ".2415991525777433064879975404502405486321453422836", ".7952986457622571231101602222801058458800715484355", ".6776076452174600982650809253178625778047027719253", ".7551093339125921239776856363116028219837208569216", ".0298591686096278526074793281171559820065827781067", ".8476836328453498660699356270094357591309665044978", ".3100638768545474557649251227571328631083197231661", ".0181724355216862758969023743747921847591824361919", ".4660166831609406184772692027423469394660051189856", ".0349365633878186781918095034956146779111663865176", ".9595078091138271407655409556442357466530066862750", ".5270177667730867101127071569850291233705151561893", ".9576042598052909526344090824552696187957450652087", ".1208525185490806885570507789114079917552690720417", ".9456350318024421857966726985650306765041057254089", ".1511033564765683933726355530720092360796587092011", ".8631942840289752259408561946149030622920471449064", ".5655654689182828086568992951157276115581245499009", ".2823182238220333087341796281279296685920103696151", ".8283674217054132386882004667827149936390884455899", ".4822867760694415614888491435998644957251614203375", ".7566418903631874156299218284141785208502065538538", ".2799072630085429386851302505752749725551278870947", ".0251482320598001467472433537598312834465520919642", ".0085162621227316439927995919483589319730341855299", ".1283088509298189769880362204975168080127870531400", ".0123535111136780987721004850746867747954154000025", ".1021636265623644185076680041758901580985042636587", ".0510054458725453663220039574150614540084662474583", ".0829451481776607094007113881430953482745472730882", ".2521972346220801151964354239235404950296808022134", ".5315552480248038946876298759479122949274907393314", ".5288800615784434426730792524960348660976034755080", ".6584865680239073013459615713636793140862527527687", ".8722448528963175700880064468019630534774615443769", ".0988157125860740678809813355967762300069454561378", ".2931389289521176444279215682307515529621224292125", ".5440346226207913115809426748292190165912604331890", ".9638194664738311800648188392428343613297755145953", ".3321712437647333334389500846571566435878697725890", ".2036700195819362385646046353210131835393883667796", ".3690779824450810709275518103799769714780407156104", ".9732759912782806130948041911047228423287609947494", ".3068406626548353087759402865650573832592844140785"};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> numbers = {",3122393169561140830105190210516441069018503607435", ".3447955866425588615285282025491766985415267758009", ".1549066782276583651113644180035272922305152840374", ",6613710750949721621710263108750347407172494260435", ",8015505628691379785826667967893731766385198861219", ".7707200416157597130688093664535473476160684032917", ",9077233793755030746553948332641661168992665464123", ",6661380867547428013475035087369147854834381177910", ",6132414301780133649010269050355178337745061672341", ".2316694200578136958063195291588533195580643679509", ".6440230535770260535260694244687907085084274426814", ".6942903334575985250533734986557624865947497003188", ".6112778273600077564014585380786374072428412870582", ",7208083389240521995739695614279335940622925799235", ".7734645649759207133523571874266338137008120102936", ",1081642127711542920062743675005780681731082889991", ",3517776440922688721380936895713875588775230392354", ",8540982282289295955508419178939895174446333727483", ",1239134671843485044651460376185369700151196046560", ".8365457906719798027245350659446006079955217038264", ".1242620486391875682270984658184666740866436478225", ".6659537678587773108287883578352450582266037482832", ",9022517305627730472429877968232224458564942036074", ".5180665839687547803072998407278567333385730255275", ",9632194390424754613261315238383996102655882504158", ",0129513935384521607530343281932924742939745804036", ".1923053702120056069054564195984000270175561836248", ".8167739035917371371832889054964070195153082274377", ".1940683044461413951592249559925125685906139474403", ",1124712016047775826667560732959895302268129147558", ".4597243195886968145332361311719222946986306702090", ".4450949681251494810977275314127672102826540727746", ",0907385187199320660463895542571156240234468457904", ".6369728554187586969638282145027932545991754927824", ",3508515925850253400975630249630641207327477191280", ".9234932285991452280577845017033282096990864770506", ".5983528212920020113912889631554943315380880430145", ",6239239490274485029353904090563157728960895262883", ".0117351482713869237575823270746097205408377341750", ".2141070343449538289053124736488339984910931740670", ",8101731132675375070004761860972591184789517709272", ".8210624735444277538366697984209970508662992026908", ",4942532343792579765929493020015896502467293341793", ".7172266703344709200479596673883654491880246123885", ",7452913232898414445199726019887754962340695847633", ".7623395311142375075486019169505031134540458440066", ",7902872058805666530159860217276014019184068996014", ".9932899936372308898178898363259251912468818103427", ".9128017117505546597556059209624559549689421415000", ".7005969237535330007473573964956857915527312970833"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".3122393169561140830105190210516441069018503607435", ".3447955866425588615285282025491766985415267758009", ".1549066782276583651113644180035272922305152840374", ".6613710750949721621710263108750347407172494260435", ".8015505628691379785826667967893731766385198861219", ".7707200416157597130688093664535473476160684032917", ".9077233793755030746553948332641661168992665464123", ".6661380867547428013475035087369147854834381177910", ".6132414301780133649010269050355178337745061672341", ".2316694200578136958063195291588533195580643679509", ".6440230535770260535260694244687907085084274426814", ".6942903334575985250533734986557624865947497003188", ".6112778273600077564014585380786374072428412870582", ".7208083389240521995739695614279335940622925799235", ".7734645649759207133523571874266338137008120102936", ".1081642127711542920062743675005780681731082889991", ".3517776440922688721380936895713875588775230392354", ".8540982282289295955508419178939895174446333727483", ".1239134671843485044651460376185369700151196046560", ".8365457906719798027245350659446006079955217038264", ".1242620486391875682270984658184666740866436478225", ".6659537678587773108287883578352450582266037482832", ".9022517305627730472429877968232224458564942036074", ".5180665839687547803072998407278567333385730255275", ".9632194390424754613261315238383996102655882504158", ".0129513935384521607530343281932924742939745804036", ".1923053702120056069054564195984000270175561836248", ".8167739035917371371832889054964070195153082274377", ".1940683044461413951592249559925125685906139474403", ".1124712016047775826667560732959895302268129147558", ".4597243195886968145332361311719222946986306702090", ".4450949681251494810977275314127672102826540727746", ".0907385187199320660463895542571156240234468457904", ".6369728554187586969638282145027932545991754927824", ".3508515925850253400975630249630641207327477191280", ".9234932285991452280577845017033282096990864770506", ".5983528212920020113912889631554943315380880430145", ".6239239490274485029353904090563157728960895262883", ".0117351482713869237575823270746097205408377341750", ".2141070343449538289053124736488339984910931740670", ".8101731132675375070004761860972591184789517709272", ".8210624735444277538366697984209970508662992026908", ".4942532343792579765929493020015896502467293341793", ".7172266703344709200479596673883654491880246123885", ".7452913232898414445199726019887754962340695847633", ".7623395311142375075486019169505031134540458440066", ".7902872058805666530159860217276014019184068996014", ".9932899936372308898178898363259251912468818103427", ".9128017117505546597556059209624559549689421415000", ".7005969237535330007473573964956857915527312970833"};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> numbers = {".1876926361968520547632649373025753611188090298277", ".3966901887245121201104890187852465303165855222899", ".2376137892566699987347019790983912171137707600132", ".4116280879647625430823665149120221837754638497121", ".1028470902781219356652521394501330285542344132208", ",5300119807897182338868398957248350496982940723183", ".6242207480050475190866475921799495361054073590586", ",4183510679364632803077997399894732151568213180895", ",8174110362571149716971816826599022731091048812068", ",0836026621221852422974545440735372290035389692399", ".4786075394736323170708851648680091399293845497293", ".4390721752274519712804756154364604441853871106780", ",9574129325496506651478473482423338879442856475271", ",3423966816377904709017665085223293600013365424221", ".9929518819073127504174739097017060135934621876345", ",7481252278505305848998492100349344204015019028152", ",4470510208998291250215246131580477784195757986920", ".8944873662555667063010803258518656887486821296422", ",2577146178167647749318979706332349662452332515694", ".1569483618775359028969029402118680206332189770438", ".2586740713113210243321983434147769011036898379290", ",2294081947417862647940008569758523548565812354059", ".8249577775628934615169047181410157507970857253302", ".0652795045939991181384506400816324401897054237405", ".1627998997900411281682737854494537205963670508813", ".3272776276526527553599775271445280160337156674849", ".1577467770792832731796290860199904012838115620694", ",5312167652250904730430939105005051147333226584987", ",2294334551851209112265323668901843626876598709813", ".6639147168591617698510488284786598337609786879183", ".1025577059644714421684466291427442242121830274606", ".1077343454369629877907997700667311107238966435119", ",7462446240927541605611114901191843804180557951822", ".5298735655631367810193391224589841941651338561023", ",2774518385898075439952880944158729391391354189009", ".7830215840715456931482013216944835923870100773193", ",5286963957557804407100952412413186152357759504716", ",0006771731152509930338368278209929638945640242382", ".5773956445190135164384767987381735126994742231323", ",5999893936630834236478882678504089933549483493249", ",3913983367686409915775335370834580320112053641405", ",7142481475109570339834488083641307115012781048379", ",4429017225268151992010893183224825677437576143400", ".1583593757666208855435381512708761400179920298570", ".2924379562140259577183180379581052258604221624672", ",5444990031280280781841571168681710654994607476553", ".2169320838045727833593386418946690042075679224970", ".6506695798912163436688701844205888701355268545790", ",4984804123175904529513024295835911899657681492506", ".7739319387362873086051559650944098122351525969838"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".1876926361968520547632649373025753611188090298277", ".3966901887245121201104890187852465303165855222899", ".2376137892566699987347019790983912171137707600132", ".4116280879647625430823665149120221837754638497121", ".1028470902781219356652521394501330285542344132208", ".5300119807897182338868398957248350496982940723183", ".6242207480050475190866475921799495361054073590586", ".4183510679364632803077997399894732151568213180895", ".8174110362571149716971816826599022731091048812068", ".0836026621221852422974545440735372290035389692399", ".4786075394736323170708851648680091399293845497293", ".4390721752274519712804756154364604441853871106780", ".9574129325496506651478473482423338879442856475271", ".3423966816377904709017665085223293600013365424221", ".9929518819073127504174739097017060135934621876345", ".7481252278505305848998492100349344204015019028152", ".4470510208998291250215246131580477784195757986920", ".8944873662555667063010803258518656887486821296422", ".2577146178167647749318979706332349662452332515694", ".1569483618775359028969029402118680206332189770438", ".2586740713113210243321983434147769011036898379290", ".2294081947417862647940008569758523548565812354059", ".8249577775628934615169047181410157507970857253302", ".0652795045939991181384506400816324401897054237405", ".1627998997900411281682737854494537205963670508813", ".3272776276526527553599775271445280160337156674849", ".1577467770792832731796290860199904012838115620694", ".5312167652250904730430939105005051147333226584987", ".2294334551851209112265323668901843626876598709813", ".6639147168591617698510488284786598337609786879183", ".1025577059644714421684466291427442242121830274606", ".1077343454369629877907997700667311107238966435119", ".7462446240927541605611114901191843804180557951822", ".5298735655631367810193391224589841941651338561023", ".2774518385898075439952880944158729391391354189009", ".7830215840715456931482013216944835923870100773193", ".5286963957557804407100952412413186152357759504716", ".0006771731152509930338368278209929638945640242382", ".5773956445190135164384767987381735126994742231323", ".5999893936630834236478882678504089933549483493249", ".3913983367686409915775335370834580320112053641405", ".7142481475109570339834488083641307115012781048379", ".4429017225268151992010893183224825677437576143400", ".1583593757666208855435381512708761400179920298570", ".2924379562140259577183180379581052258604221624672", ".5444990031280280781841571168681710654994607476553", ".2169320838045727833593386418946690042075679224970", ".6506695798912163436688701844205888701355268545790", ".4984804123175904529513024295835911899657681492506", ".7739319387362873086051559650944098122351525969838"};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> numbers = {".0867371805862308768951528209440155755920716378000", ".3734994638864085343158926912476469451946183662271", ",1935592332285013624906877886271165483002909427230", ".1973446178049697888247553623169669379759857769694", ",7847318724728112108112640204818444013056683053212", ",5104903797757360853204610732164142171413430273617", ",1909390555312389798353342608608073764258771327612", ",8417013111316472561580005495034104220823078734635", ",3253623504836269566682325231349952620485373201208", ".0076590692351002640705365826057721895825498848257", ",9196776927705468826681511507784289831502168432269", ".0974668476615757930744377081000658497657650520172", ",5359922480865374100484846504592964594918535796850", ",5686700352652442619757516837912242331278326923792", ".2463472658690870164458133783638079030798633726379", ",0251434541625149401119682078730671470284459013736", ".9032206300932335455132950187423541821539375385952", ".9943807520784184503733872601036287273675894202382", ",3464478772715392722057405694753582497937848522968", ",6137247992178262619421384937270778431735096874055", ",6896163610205870537541468634350555057495393181362", ".7582186996555362664074540943392570769013452381473", ",4936816516532450201753355388896031337772594560018", ",8477033917733749518017949593083920725915533762654", ".7826088101030951454661738068527417501390744323847", ",0345994530802453874629448356542385166413806194067", ",3954851808828105062059975626581529770151690529474", ",1799036828016990958005127307125362220825755097249", ",1111299784326172549934559995551740512937108162452", ".1531709652030582129212238095822394380679529321700", ".5702296643039698056460742454573572428411081520147", ",5439103041163569714653953805683983009762790112938", ",6349506795292635607444863709349038851967048907637", ".7462858625459181604231510402444806062069352666570", ",1128502770134575302502310445116756365515357935854", ",2320767501531004489430137882557365691735421782275", ".2134663189931569187572206831443819384494326701770", ".0708417103920467520448284812680552885268499122290", ".9775078578583887208986937559364217887085452493584", ".9687502432287237328927328164969380632586344776398", ",9819945607284173621346833710834991926372346531363", ",7399906407571316953878978251946580310824618911711", ".2373456490344783659673556198563782138308949537925", ".1936859855846081692137787191669782617442498723063", ".3294526327843328620160297999996584939342294965827", ".2789581605169271911371733242013017892758433545253", ".1606512212734315421353828572464494434140409108386", ",9623097415010793720365878810814165194705791816729", ".0593319916090803950351981269965718378465663555878", ",6889310619797460074098511241048515702980862217978"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".0867371805862308768951528209440155755920716378000", ".3734994638864085343158926912476469451946183662271", ".1935592332285013624906877886271165483002909427230", ".1973446178049697888247553623169669379759857769694", ".7847318724728112108112640204818444013056683053212", ".5104903797757360853204610732164142171413430273617", ".1909390555312389798353342608608073764258771327612", ".8417013111316472561580005495034104220823078734635", ".3253623504836269566682325231349952620485373201208", ".0076590692351002640705365826057721895825498848257", ".9196776927705468826681511507784289831502168432269", ".0974668476615757930744377081000658497657650520172", ".5359922480865374100484846504592964594918535796850", ".5686700352652442619757516837912242331278326923792", ".2463472658690870164458133783638079030798633726379", ".0251434541625149401119682078730671470284459013736", ".9032206300932335455132950187423541821539375385952", ".9943807520784184503733872601036287273675894202382", ".3464478772715392722057405694753582497937848522968", ".6137247992178262619421384937270778431735096874055", ".6896163610205870537541468634350555057495393181362", ".7582186996555362664074540943392570769013452381473", ".4936816516532450201753355388896031337772594560018", ".8477033917733749518017949593083920725915533762654", ".7826088101030951454661738068527417501390744323847", ".0345994530802453874629448356542385166413806194067", ".3954851808828105062059975626581529770151690529474", ".1799036828016990958005127307125362220825755097249", ".1111299784326172549934559995551740512937108162452", ".1531709652030582129212238095822394380679529321700", ".5702296643039698056460742454573572428411081520147", ".5439103041163569714653953805683983009762790112938", ".6349506795292635607444863709349038851967048907637", ".7462858625459181604231510402444806062069352666570", ".1128502770134575302502310445116756365515357935854", ".2320767501531004489430137882557365691735421782275", ".2134663189931569187572206831443819384494326701770", ".0708417103920467520448284812680552885268499122290", ".9775078578583887208986937559364217887085452493584", ".9687502432287237328927328164969380632586344776398", ".9819945607284173621346833710834991926372346531363", ".7399906407571316953878978251946580310824618911711", ".2373456490344783659673556198563782138308949537925", ".1936859855846081692137787191669782617442498723063", ".3294526327843328620160297999996584939342294965827", ".2789581605169271911371733242013017892758433545253", ".1606512212734315421353828572464494434140409108386", ".9623097415010793720365878810814165194705791816729", ".0593319916090803950351981269965718378465663555878", ".6889310619797460074098511241048515702980862217978"};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> numbers = {",7869827349687088071093606137666577869781511357614", ",3682195590504040164084842936098634308617520223763", ",1484135762986226183243516852747427998966111045620", ".7840602285553866317750448996008137139746366030345", ",4654158355886916033661567036342259142680892683496", ".2900687689618428261461250225958236939845038924040", ",5486481720805181375540398105845870187579399483948", ",4771247576178092249904823729257694016269635461575", ",6332937525483310517114722837117861318788507689450", ",8949165441471342699618195321552100611635889016084", ",3785477429796793371472243387890775363704280385017", ".3779215981926925956685099827823701336160441624565", ",3163608552135134571493521707753790111766311086329", ",0918556196916088536407475580911989761331298339372", ",5725116697537612735645525300259289938651855856295", ",0112744044515671955141980937220810447152601010339", ",5516993694958678753071864042246823296040191493086", ".0841619380606799856466731083263881889766978329243", ",6240690575340928092679811372155643409402131431324", ",4435291286351164192985650471543956677409992959384", ",9417406597379448840442064826363352800757808982415", ".0980072714493741360499270518166715760542005138616", ".8331973367436966606344664596572733446505521897642", ",7114284557426560845929191598952645979833094117014", ".4025467284261293709410769154441626716637500141970", ",6619129014199168376738129228747498164428728513486", ".6240467717184479512495428393873234456474957511352", ".7986912105681896179961424589337694114107104508491", ",2738363809709943964780695031111879785178839235281", ".3362270053459568832115187907187980102359262783228", ",0577935250525662690164137436690813301680130867580", ",9802981619287100839431916900470644720296442879655", ",3136747112649851599959212518208444679742569085253", ",8438962796350823789382738581487863265369408041156", ".0571608487201084978245760924194694516611283902499", ",8720420351366921009260453389380673456617874780559", ".7891154408524416836037542272452233309321263911933", ".9422853677667316132488000454062196022299169292307", ",1069999472967620050476407811446700629067260584725", ".3343039116754828431577757869511882330744038242545", ".7792199958892939119906341251955110502319747324451", ".5437411459922121868824349449220654725524545964862", ",1127996852619626333449249222914447587579404218440", ".1298294073029841710852063560501085624912855056744", ",4347456089627717865158106502304188713059446227885", ",9313080158366344342171086225175515842514569615246", ".8033606814324795300223569605174498119037921873811", ",4951361912108335107345943873513450855386544998868", ",7119004822237689283999939362103516787394856597961", ",5026511813143135062126793813135910505417202394819"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".7869827349687088071093606137666577869781511357614", ".3682195590504040164084842936098634308617520223763", ".1484135762986226183243516852747427998966111045620", ".7840602285553866317750448996008137139746366030345", ".4654158355886916033661567036342259142680892683496", ".2900687689618428261461250225958236939845038924040", ".5486481720805181375540398105845870187579399483948", ".4771247576178092249904823729257694016269635461575", ".6332937525483310517114722837117861318788507689450", ".8949165441471342699618195321552100611635889016084", ".3785477429796793371472243387890775363704280385017", ".3779215981926925956685099827823701336160441624565", ".3163608552135134571493521707753790111766311086329", ".0918556196916088536407475580911989761331298339372", ".5725116697537612735645525300259289938651855856295", ".0112744044515671955141980937220810447152601010339", ".5516993694958678753071864042246823296040191493086", ".0841619380606799856466731083263881889766978329243", ".6240690575340928092679811372155643409402131431324", ".4435291286351164192985650471543956677409992959384", ".9417406597379448840442064826363352800757808982415", ".0980072714493741360499270518166715760542005138616", ".8331973367436966606344664596572733446505521897642", ".7114284557426560845929191598952645979833094117014", ".4025467284261293709410769154441626716637500141970", ".6619129014199168376738129228747498164428728513486", ".6240467717184479512495428393873234456474957511352", ".7986912105681896179961424589337694114107104508491", ".2738363809709943964780695031111879785178839235281", ".3362270053459568832115187907187980102359262783228", ".0577935250525662690164137436690813301680130867580", ".9802981619287100839431916900470644720296442879655", ".3136747112649851599959212518208444679742569085253", ".8438962796350823789382738581487863265369408041156", ".0571608487201084978245760924194694516611283902499", ".8720420351366921009260453389380673456617874780559", ".7891154408524416836037542272452233309321263911933", ".9422853677667316132488000454062196022299169292307", ".1069999472967620050476407811446700629067260584725", ".3343039116754828431577757869511882330744038242545", ".7792199958892939119906341251955110502319747324451", ".5437411459922121868824349449220654725524545964862", ".1127996852619626333449249222914447587579404218440", ".1298294073029841710852063560501085624912855056744", ".4347456089627717865158106502304188713059446227885", ".9313080158366344342171086225175515842514569615246", ".8033606814324795300223569605174498119037921873811", ".4951361912108335107345943873513450855386544998868", ".7119004822237689283999939362103516787394856597961", ".5026511813143135062126793813135910505417202394819"};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> numbers = {"28413002083518700954719745706404613954156619500355", "53784274359170509121294036518257338162832840768829", "93895479311468404427362266130187958503720901399369", "93525940806072943464998023768922315623148801478095", "81292775596453965915028339789639576228736738256117", "19611151512752383877654579290046992246253983023731", "07606045862992160026907444837348478241450241251677", "15959895633404244150561503959264616400039495197276", "93323829787244308618279452398896796110170046096008", "86829624805615074294913325959022637079721173539285", "42199837692335118197932238171824945614360410833456", "80491981254726986188832581892198217801972773279760", "40666372842315347317944124051713487134943630665131", "21759474754404859760046418946509550710520432043689", "00857873333099765235915314139067299597385026388023", "60165700877107555424293764078127361763041563400962", "21748952121702952766528084229341016879495911110526", "17975046031685537919575384895108111203614381004160", "32042120140109241114743186006012272596991711444045", "29704680595390983430536658172333343453567888265121", "69979610264079476413570064235459975248279676546111", "47218864329755699400740027049955601226761184896997", "43432201949111774946262055071531753777027921803563", "03254672190716655404291963880248136093373982317864", "29701188007811981579369854875806216142939404418551", "33737563268812505118384924422771948688571423181397", "71116044697420486067975681091567109423030726165360", "22868259451405925337617265393317427884162845744433", "33755593745849407433046762560999954733896079264451", "13122922332997325516384229031667265460787302255530", "54026484499665332508052353464604749573643077252954", "22039281803124858684251143047871683844941349586663", "49361122016297486053579051700976401610191859004871", "41034394477222963825752679293903717207212717032675", "13464439737964138572141601574964623284520868288185", "66556660631360477060069147033802167190524422669324", "89279737842770944937690002838856431856869622062073", "39205949633544105781481135263134124755152676997262", "35143243044999784470266337200068966432504206908455", "93041804524095163057183759286981995585925613447627", "66872101886705780213236788514595311887365806607400", "78095673109088818086728070263280217758935034791516", "12036754939258204626795199427185622136263250405516", "44839145206054315846826489417394921207999975283598", "19217365629433955335902110764906020896307430597470", "01884334152401809374317120612844065439408108208532", "65019136676504180955700692899055622026888203801257", "54909505282130743876756164440057682111874617936987", "31023628018016873481900463805031959906253095782238", "83190307559045863080650251296617198766334211282095"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"28413002083518700954719745706404613954156619500355", "53784274359170509121294036518257338162832840768829", "93895479311468404427362266130187958503720901399369", "93525940806072943464998023768922315623148801478095", "81292775596453965915028339789639576228736738256117", "19611151512752383877654579290046992246253983023731", "07606045862992160026907444837348478241450241251677", "15959895633404244150561503959264616400039495197276", "93323829787244308618279452398896796110170046096008", "86829624805615074294913325959022637079721173539285", "42199837692335118197932238171824945614360410833456", "80491981254726986188832581892198217801972773279760", "40666372842315347317944124051713487134943630665131", "21759474754404859760046418946509550710520432043689", "00857873333099765235915314139067299597385026388023", "60165700877107555424293764078127361763041563400962", "21748952121702952766528084229341016879495911110526", "17975046031685537919575384895108111203614381004160", "32042120140109241114743186006012272596991711444045", "29704680595390983430536658172333343453567888265121", "69979610264079476413570064235459975248279676546111", "47218864329755699400740027049955601226761184896997", "43432201949111774946262055071531753777027921803563", "03254672190716655404291963880248136093373982317864", "29701188007811981579369854875806216142939404418551", "33737563268812505118384924422771948688571423181397", "71116044697420486067975681091567109423030726165360", "22868259451405925337617265393317427884162845744433", "33755593745849407433046762560999954733896079264451", "13122922332997325516384229031667265460787302255530", "54026484499665332508052353464604749573643077252954", "22039281803124858684251143047871683844941349586663", "49361122016297486053579051700976401610191859004871", "41034394477222963825752679293903717207212717032675", "13464439737964138572141601574964623284520868288185", "66556660631360477060069147033802167190524422669324", "89279737842770944937690002838856431856869622062073", "39205949633544105781481135263134124755152676997262", "35143243044999784470266337200068966432504206908455", "93041804524095163057183759286981995585925613447627", "66872101886705780213236788514595311887365806607400", "78095673109088818086728070263280217758935034791516", "12036754939258204626795199427185622136263250405516", "44839145206054315846826489417394921207999975283598", "19217365629433955335902110764906020896307430597470", "01884334152401809374317120612844065439408108208532", "65019136676504180955700692899055622026888203801257", "54909505282130743876756164440057682111874617936987", "31023628018016873481900463805031959906253095782238", "83190307559045863080650251296617198766334211282095"};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> numbers = {"84402666507333480387051723842829045068117305680167", "43532255100709366243228172540899524039513297309210", "83446832751166638167719926126672110716684113918776", "79302108016384915092414919032863773475143210639548", "87219525117612869660588456591843683357360048185192", "06615947484622360482192991863660786903894783573084", "24383915927355172624494510335375056664653849295703", "20215219197256884738983420064496985599296152752146", "39202242790599438669909859902544604809473272375468", "16981199876845424322744945364226006672511364786943", "07799530202306243642735868050930223146560833786221", "46295528979257244103672202639833262659604551394934", "78460987914884115869952619174792012831699417978818", "23901210290569315558718379680500590449785483352250", "03318707274626418807199708646388409512149158318959", "82935812142297187086234062936596500932999823605545", "97022648425746088863467777284185110136917739308750", "38873850091504154252408243245427923699803465921039", "33828532744756675485494693995414432329476004352408", "86103744879572805933091924707595631697933693340747", "41280852141142036727692659416682752293638191348263", "72526750158795198426066557621519656247287645623131", "59830540792045280531853363209917736886830878310399", "22199923040519683830925106885405851129491443861214", "63800468100941422722038875881028296469556378235705", "60910789723199431419404697395976053684567363590715", "41492630705556760518338166677959824109253203166240", "57265125927271911455372572375537759978644294465785", "72572677988413288768712898907749881628927700645090", "77943584714416400247007079943722041202767025497157", "29083103003151104123836748637940070456032228508405", "46491061460240598529009406142968163565473074245380", "66358362351762702925002700509113808758978360983697", "63228307647041604619802697371936774418612841327042", "22017533125210638466982120075022550455744783254931", "71045013693195205680819273500635477876487875678406", "56935217274254801616062366279867053861996499492036", "38128685005291063371521052808515788902485244068170", "97146154978282427232656807662040458272596914079606", "86839541098462766151832196960356296293181587720865", "12777276126603646911796206873517542583302197588568", "08142889261439436799775540231585509953645961664659", "81880213303513137382369879550526589587135625907031", "04191580214235076785540757086033022294260432525271", "60567594483217344589980229377311442679035402858638", "76128945706600690505137483698976332489251034378425", "84456300068083768542470334923563405780753914574763", "69116909709238573361635251415666959683224230227006", "88640313602153772712747610879161844495282187925310", "02369408861670630078706211765711693567861458460136"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"84402666507333480387051723842829045068117305680167", "43532255100709366243228172540899524039513297309210", "83446832751166638167719926126672110716684113918776", "79302108016384915092414919032863773475143210639548", "87219525117612869660588456591843683357360048185192", "06615947484622360482192991863660786903894783573084", "24383915927355172624494510335375056664653849295703", "20215219197256884738983420064496985599296152752146", "39202242790599438669909859902544604809473272375468", "16981199876845424322744945364226006672511364786943", "07799530202306243642735868050930223146560833786221", "46295528979257244103672202639833262659604551394934", "78460987914884115869952619174792012831699417978818", "23901210290569315558718379680500590449785483352250", "03318707274626418807199708646388409512149158318959", "82935812142297187086234062936596500932999823605545", "97022648425746088863467777284185110136917739308750", "38873850091504154252408243245427923699803465921039", "33828532744756675485494693995414432329476004352408", "86103744879572805933091924707595631697933693340747", "41280852141142036727692659416682752293638191348263", "72526750158795198426066557621519656247287645623131", "59830540792045280531853363209917736886830878310399", "22199923040519683830925106885405851129491443861214", "63800468100941422722038875881028296469556378235705", "60910789723199431419404697395976053684567363590715", "41492630705556760518338166677959824109253203166240", "57265125927271911455372572375537759978644294465785", "72572677988413288768712898907749881628927700645090", "77943584714416400247007079943722041202767025497157", "29083103003151104123836748637940070456032228508405", "46491061460240598529009406142968163565473074245380", "66358362351762702925002700509113808758978360983697", "63228307647041604619802697371936774418612841327042", "22017533125210638466982120075022550455744783254931", "71045013693195205680819273500635477876487875678406", "56935217274254801616062366279867053861996499492036", "38128685005291063371521052808515788902485244068170", "97146154978282427232656807662040458272596914079606", "86839541098462766151832196960356296293181587720865", "12777276126603646911796206873517542583302197588568", "08142889261439436799775540231585509953645961664659", "81880213303513137382369879550526589587135625907031", "04191580214235076785540757086033022294260432525271", "60567594483217344589980229377311442679035402858638", "76128945706600690505137483698976332489251034378425", "84456300068083768542470334923563405780753914574763", "69116909709238573361635251415666959683224230227006", "88640313602153772712747610879161844495282187925310", "02369408861670630078706211765711693567861458460136"};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> numbers = {"53514911042137068609192692770065447183956100759979", "23489246132429320095074188664413729984084425069712", "83005277381887041624078865211050482201539315515854", "76259554113788984521827807516602221935120529902211", "74118465858678563602137275421379797384774257716076", "66412531376582648780358501648476670889326281124617", "78840008192649874201891367814483633896776748152049", "26549440632210604496297338360736367365631717488986", "02381757710174557419532356317122635617867325764790", "54121763627145774370658765660541485408321573032703", "73308231725395668395719590810036419688989955729999", "80070463614478414321514825355556214696207340698327", "36455861109055972210860293479963848445267186298288", "46143067044843153467458229231299427871648363731831", "96650661213363251469474122442909498420003160447873", "03896012645116892631266262695086747908868065603148", "81616345529760441068384681130008484301450555627792", "68771864859636671795121212527853446207993730958990", "07515656328584302575014007673736773332940598361584", "32681798155787707504543482412638690824517719644176", "34680195948136496011593355798695540047199896157335", "15804845906853598323190999916163894248936277679575", "95525689533947508937447792406474410614742695647004", "60035172602302422177569459968575357563318903016393", "20097856204970764097007808105932395754881344961837", "06285996007585356931533360487072166800640293019134", "14991135843892033850701829325341439788556488865228", "63542094184846087474148580566749890851936752956046", "11199542094796959185579234033307987592060310098829", "10044875008755285750901928953067657235439868949607", "02750842610564008767512033610067110430302197853845", "70864849056244159434986462246754834466907826792809", "73145503988917795817505459317062392786753851951503", "54295441626031456692941815658971719312820888402609", "29360609830387149032625570544088607639660697121576", "95445765432920942230636499907147915642061116696790", "33811926493667575278536602690807677095822236601308", "47852122479967919053553858342997311049426113938279", "69430256091676257366257177216011013944678624249845", "90505050593919367262492624476798797992229258296934", "30461438675211420707337624213637741982360391370656", "08098324213071241604619021429579563058647898417000", "59934853878599070067123642674875444046186198680356", "84443935432617068803242254665975345201732809050742", "91639552146902633652775136977727075352752555119694", "13663224078887783836637645661328830627837040449418", "02983492743672158229338075266093409173637436350198", "74233381406335215667303327389365045264706983288955", "35259028505208578162465578951309442895090390087482", "91407419373024235046843303357828098160291776517267"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"53514911042137068609192692770065447183956100759979", "23489246132429320095074188664413729984084425069712", "83005277381887041624078865211050482201539315515854", "76259554113788984521827807516602221935120529902211", "74118465858678563602137275421379797384774257716076", "66412531376582648780358501648476670889326281124617", "78840008192649874201891367814483633896776748152049", "26549440632210604496297338360736367365631717488986", "02381757710174557419532356317122635617867325764790", "54121763627145774370658765660541485408321573032703", "73308231725395668395719590810036419688989955729999", "80070463614478414321514825355556214696207340698327", "36455861109055972210860293479963848445267186298288", "46143067044843153467458229231299427871648363731831", "96650661213363251469474122442909498420003160447873", "03896012645116892631266262695086747908868065603148", "81616345529760441068384681130008484301450555627792", "68771864859636671795121212527853446207993730958990", "07515656328584302575014007673736773332940598361584", "32681798155787707504543482412638690824517719644176", "34680195948136496011593355798695540047199896157335", "15804845906853598323190999916163894248936277679575", "95525689533947508937447792406474410614742695647004", "60035172602302422177569459968575357563318903016393", "20097856204970764097007808105932395754881344961837", "06285996007585356931533360487072166800640293019134", "14991135843892033850701829325341439788556488865228", "63542094184846087474148580566749890851936752956046", "11199542094796959185579234033307987592060310098829", "10044875008755285750901928953067657235439868949607", "02750842610564008767512033610067110430302197853845", "70864849056244159434986462246754834466907826792809", "73145503988917795817505459317062392786753851951503", "54295441626031456692941815658971719312820888402609", "29360609830387149032625570544088607639660697121576", "95445765432920942230636499907147915642061116696790", "33811926493667575278536602690807677095822236601308", "47852122479967919053553858342997311049426113938279", "69430256091676257366257177216011013944678624249845", "90505050593919367262492624476798797992229258296934", "30461438675211420707337624213637741982360391370656", "08098324213071241604619021429579563058647898417000", "59934853878599070067123642674875444046186198680356", "84443935432617068803242254665975345201732809050742", "91639552146902633652775136977727075352752555119694", "13663224078887783836637645661328830627837040449418", "02983492743672158229338075266093409173637436350198", "74233381406335215667303327389365045264706983288955", "35259028505208578162465578951309442895090390087482", "91407419373024235046843303357828098160291776517267"};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> numbers = {"82168644464546468105909241853774559744827507158731", "31918492071149761671191615517685295504034103236283", "24930548401378147030492258821898103457661940575613", "34553042444493068439930399558270005377522775238905", "66011330313749415064863330826087294894931213276285", "84814438865523133907536727939377457706149537994784", "25224092870914421554995984603532487098716956180512", "74061662354235830396019292492242042954363641309951", "73541443771948663584393915175556489192013584901414", "54641887046610498836768115898796024205687219255771", "50444076596220631933254765295047613095970525792388", "68417272911107048863983645735484207181113726801127", "49807132129820412595323180690408700153182500894176", "42369930361860336371737290602243305751331793586736", "96835632183685071839207388665750140428039661131372", "69176602776112664347372911110323421522443290639580", "04547179175738962487218991656074086479770862211368", "99275775139002823700622686799522307910134126307030", "07053866824827785160770715903980753393122546810826", "15886715757933358706384969184238294031793671187249", "76824317578278831671752151494666543528360948058310", "24557389464662689782953414209451966404256153522761", "32723568803940900370087642609772362765168520856332", "75208294118734887445160285971123114631022149291503", "54082332981655629764438328591043745958999122985493", "10326959128427175596693819470586715210048504890848", "04423438693464809530443546228558343520238113850664", "22897422721379540013416839707808049803049987268766", "82442173700178947356252318142173386535050679133249", "47350201350500128439952649404695548260078225670400", "81088177562322036043974121790795320038357712536761", "36490214821250564492716005945212655451319322530362", "82690681049767716962863668676601002140681151435329", "65311547627295219525206824637353748938580459044709", "80637700089596948069491520240428565793812764199513", "52251947727734946109771537396059650270042243692385", "21196162148493659662702775471956841042800925764878", "22609546709937043872618211518643083169784848028686", "96896771834352724293038721851658668665164099341421", "93343073386108663209607382318026548741957790849503", "13464560791010353360126368025607941225973036219889", "76222190635757564416187710408212190645006906359462", "37211119448175351596916942627004273111177471382244", "68655253476716448176308958305992351410023682115539", "26309118578244478765769790239421373769016073676833", "51286128990728869351092127768493448147369029573712", "56141930543012407633674213367751807125629156788936", "90897189268985060415992201750219683055491344720310", "68094826403756918364343543957210805134930522065169", "51143860425833568055103389042824351456024901606292"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"82168644464546468105909241853774559744827507158731", "31918492071149761671191615517685295504034103236283", "24930548401378147030492258821898103457661940575613", "34553042444493068439930399558270005377522775238905", "66011330313749415064863330826087294894931213276285", "84814438865523133907536727939377457706149537994784", "25224092870914421554995984603532487098716956180512", "74061662354235830396019292492242042954363641309951", "73541443771948663584393915175556489192013584901414", "54641887046610498836768115898796024205687219255771", "50444076596220631933254765295047613095970525792388", "68417272911107048863983645735484207181113726801127", "49807132129820412595323180690408700153182500894176", "42369930361860336371737290602243305751331793586736", "96835632183685071839207388665750140428039661131372", "69176602776112664347372911110323421522443290639580", "04547179175738962487218991656074086479770862211368", "99275775139002823700622686799522307910134126307030", "07053866824827785160770715903980753393122546810826", "15886715757933358706384969184238294031793671187249", "76824317578278831671752151494666543528360948058310", "24557389464662689782953414209451966404256153522761", "32723568803940900370087642609772362765168520856332", "75208294118734887445160285971123114631022149291503", "54082332981655629764438328591043745958999122985493", "10326959128427175596693819470586715210048504890848", "04423438693464809530443546228558343520238113850664", "22897422721379540013416839707808049803049987268766", "82442173700178947356252318142173386535050679133249", "47350201350500128439952649404695548260078225670400", "81088177562322036043974121790795320038357712536761", "36490214821250564492716005945212655451319322530362", "82690681049767716962863668676601002140681151435329", "65311547627295219525206824637353748938580459044709", "80637700089596948069491520240428565793812764199513", "52251947727734946109771537396059650270042243692385", "21196162148493659662702775471956841042800925764878", "22609546709937043872618211518643083169784848028686", "96896771834352724293038721851658668665164099341421", "93343073386108663209607382318026548741957790849503", "13464560791010353360126368025607941225973036219889", "76222190635757564416187710408212190645006906359462", "37211119448175351596916942627004273111177471382244", "68655253476716448176308958305992351410023682115539", "26309118578244478765769790239421373769016073676833", "51286128990728869351092127768493448147369029573712", "56141930543012407633674213367751807125629156788936", "90897189268985060415992201750219683055491344720310", "68094826403756918364343543957210805134930522065169", "51143860425833568055103389042824351456024901606292"};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> numbers = {"50149990988330258327041220781999972879688313437343", "11866483823888726693047631531209490450513331866785", "24581983839087371707869998907274265762546152192723", "32419200541998038967344097852011543807717984401478", "63830051954885409016322247659591100841345552007279", "72811224757483311293073147604182340454571335445117", "60701184935406123131482762180470065492020754247638", "00324183808087650174311108798482532730629406046901", "38620965714293713335906312788304319780487737380666", "91714651017948748865599945394090473108575328401438", "04954667118220876488138497375154998536179647735356", "24292119556617286880834268670109359128915714925319", "04683818093299170954331573793767618970730389184565", "65623786925145872299277149376132225182596855984317", "79387597122202824409481782352171159323992873261296", "92067804068020296891313211078793668798411442737183", "79128863479771296884336605412890368646294689429399", "19165789998132340243245755051751919426243290333899", "08830190428454119433410142881302994126609041827182", "71464569031116271179849225619591382288367578461848", "88235658455242479965852737696879439252721563850482", "57855273392529189688067833681023912525783703379105", "78228807664654246765679050717258246774779457183968", "15142543788548525882892428154190811965140718745772", "90281721085786962839207341818166826273536116500525", "56400395602884089008602572352780628216224454219085", "96919834721790082061706001074940958078531698879454", "58074301096924436233382817789020381907521325779818", "03369057846553718771900444488734412629191300496078", "00283762534839213163656508216750134004830068113829", "53863896157718819678661424773813450914727881863112", "69843292496286222538662069040200325173843076297181", "09367822566002032854386316474851296188486662503145", "57305570697296051527254042916318705149090495149356", "07080706697653449955234050741386512777737577165148", "68551689786540596639501754873672988036896773600669", "88853872569887306241176010890975545076937764173833", "31323002171704992454648137162945518306725717918505", "88070673968444466256538291404650133325155709312662", "85131500880757356311356821892479031641925664122751", "31379522140809127057679986364509161832933327192747", "96279605987108400101121281607316481850726613302813", "06285557812351284270870605841345038660128746874769", "28119509574919320113013254963851453427394049630010", "47479045333029869939746629849937707452734026938090", "98721417463825650782892389742646736197125035644704", "03678113937701897310442953401481881798793876474460", "05924471787083601799690377726918959626051185810250", "34601311307893814515980491931458601623969534127251", "40380861757396255123240341714910756157542449864131"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"50149990988330258327041220781999972879688313437343", "11866483823888726693047631531209490450513331866785", "24581983839087371707869998907274265762546152192723", "32419200541998038967344097852011543807717984401478", "63830051954885409016322247659591100841345552007279", "72811224757483311293073147604182340454571335445117", "60701184935406123131482762180470065492020754247638", "00324183808087650174311108798482532730629406046901", "38620965714293713335906312788304319780487737380666", "91714651017948748865599945394090473108575328401438", "04954667118220876488138497375154998536179647735356", "24292119556617286880834268670109359128915714925319", "04683818093299170954331573793767618970730389184565", "65623786925145872299277149376132225182596855984317", "79387597122202824409481782352171159323992873261296", "92067804068020296891313211078793668798411442737183", "79128863479771296884336605412890368646294689429399", "19165789998132340243245755051751919426243290333899", "08830190428454119433410142881302994126609041827182", "71464569031116271179849225619591382288367578461848", "88235658455242479965852737696879439252721563850482", "57855273392529189688067833681023912525783703379105", "78228807664654246765679050717258246774779457183968", "15142543788548525882892428154190811965140718745772", "90281721085786962839207341818166826273536116500525", "56400395602884089008602572352780628216224454219085", "96919834721790082061706001074940958078531698879454", "58074301096924436233382817789020381907521325779818", "03369057846553718771900444488734412629191300496078", "00283762534839213163656508216750134004830068113829", "53863896157718819678661424773813450914727881863112", "69843292496286222538662069040200325173843076297181", "09367822566002032854386316474851296188486662503145", "57305570697296051527254042916318705149090495149356", "07080706697653449955234050741386512777737577165148", "68551689786540596639501754873672988036896773600669", "88853872569887306241176010890975545076937764173833", "31323002171704992454648137162945518306725717918505", "88070673968444466256538291404650133325155709312662", "85131500880757356311356821892479031641925664122751", "31379522140809127057679986364509161832933327192747", "96279605987108400101121281607316481850726613302813", "06285557812351284270870605841345038660128746874769", "28119509574919320113013254963851453427394049630010", "47479045333029869939746629849937707452734026938090", "98721417463825650782892389742646736197125035644704", "03678113937701897310442953401481881798793876474460", "05924471787083601799690377726918959626051185810250", "34601311307893814515980491931458601623969534127251", "40380861757396255123240341714910756157542449864131"};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> numbers = {"6153161896380797618733881526144877897264980039970,", "1280775319879257807383655916032144345127379709819,", "5624517346979081975071314903810945784988239505740.", "2207616411576510196655161126008432735768501824225.", "1883392116587341693463303598305706546073661297203,", "4045585461601637196274166668500154776471891273781.", "5957405924457007849754107167031202713978463783755,", "5030214648375155666735249189195973353142482224506,", "5487029612366733710532848002527087614350628145211.", "2552951044133538618716241277293241644132725986481,", "4081186531852426624168630395270341013987742783833.", "6821067170753071473189543724111894296907577962863,", "6482682191745500889026748390984207022355105330327.", "7458896368974840176099678598515212921254228302692.", "0729351277681685803531532395891220972596592551522,", "3274227648662655650950784197977764571684172423024.", "5929753367741196902233934093518487854997090475651.", "3039549046547972608085653857077584056171250846642,", "2431661207681323787377278816777301875749925393228,", "1588991038147218275814626739979397611392888008646.", "0157132501718719149329511793739920377607681153059,", "9801057381170599471307094912072725528325404445893.", "9273189789097520414089776723559044993994842087489,", "9091804265114361216865898771749960919707300370909.", "7177628597953117022305393357573513492556267908712.", "3346658875487581614190651635994087235693890222319.", "3888792764436185987044345723430836058603431600925.", "0445786637704305243649053948289329966313708465169.", "4331889609597825481590725796288607463626439103052.", "2010382670554571409691096742787928591799170772396,", "6100742877249993919095119619215124061804576482418.", "6506906376417729623367128708485766942712734219021,", "8439503945782141789353865825934245570209506588044,", "8523107376084012333956759553116239211692951662113.", "8696189730246134557598569906675456929926078716845.", "4577221173357908687776028875378671158406884552995,", "1458317074072403150459881308941810975848913133299.", "0303898515749743839593727149237960273856401369490.", "7919329737740775528520244314092727705430528642085.", "2259578021922816439457522153380147063833497367081.", "6062710056422327140492082272717222283780438174123.", "0505730524563747428759261614088708438371083869389,", "5917788905423748458488685439320569692484766119130.", "2528046829408148950788691165603585342726670337707.", "9294788545712218802634223282968702886234688790005.", "7456156612256214655314693525424954248368144887016,", "4865942362077048621050487144920597687124633463841,", "5142796416793550865802680784994465397039946091787,", "9004120278649452835278003067313357597125057578083,", "0359233189486715918061097910689921747141380350256."};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"6153161896380797618733881526144877897264980039970.", "1280775319879257807383655916032144345127379709819.", "5624517346979081975071314903810945784988239505740.", "2207616411576510196655161126008432735768501824225.", "1883392116587341693463303598305706546073661297203.", "4045585461601637196274166668500154776471891273781.", "5957405924457007849754107167031202713978463783755.", "5030214648375155666735249189195973353142482224506.", "5487029612366733710532848002527087614350628145211.", "2552951044133538618716241277293241644132725986481.", "4081186531852426624168630395270341013987742783833.", "6821067170753071473189543724111894296907577962863.", "6482682191745500889026748390984207022355105330327.", "7458896368974840176099678598515212921254228302692.", "0729351277681685803531532395891220972596592551522.", "3274227648662655650950784197977764571684172423024.", "5929753367741196902233934093518487854997090475651.", "3039549046547972608085653857077584056171250846642.", "2431661207681323787377278816777301875749925393228.", "1588991038147218275814626739979397611392888008646.", "0157132501718719149329511793739920377607681153059.", "9801057381170599471307094912072725528325404445893.", "9273189789097520414089776723559044993994842087489.", "9091804265114361216865898771749960919707300370909.", "7177628597953117022305393357573513492556267908712.", "3346658875487581614190651635994087235693890222319.", "3888792764436185987044345723430836058603431600925.", "0445786637704305243649053948289329966313708465169.", "4331889609597825481590725796288607463626439103052.", "2010382670554571409691096742787928591799170772396.", "6100742877249993919095119619215124061804576482418.", "6506906376417729623367128708485766942712734219021.", "8439503945782141789353865825934245570209506588044.", "8523107376084012333956759553116239211692951662113.", "8696189730246134557598569906675456929926078716845.", "4577221173357908687776028875378671158406884552995.", "1458317074072403150459881308941810975848913133299.", "0303898515749743839593727149237960273856401369490.", "7919329737740775528520244314092727705430528642085.", "2259578021922816439457522153380147063833497367081.", "6062710056422327140492082272717222283780438174123.", "0505730524563747428759261614088708438371083869389.", "5917788905423748458488685439320569692484766119130.", "2528046829408148950788691165603585342726670337707.", "9294788545712218802634223282968702886234688790005.", "7456156612256214655314693525424954248368144887016.", "4865942362077048621050487144920597687124633463841.", "5142796416793550865802680784994465397039946091787.", "9004120278649452835278003067313357597125057578083.", "0359233189486715918061097910689921747141380350256."};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> numbers = {"5561187445532122493305384116330792514308100672892.", "6067973985160038180677254600119091750120461983055,", "4610629566781177960609728640756913384245690209111,", "1358674674995629155288446031178078110186495403067.", "8658653025713781565310298135721219137218837236230.", "3525091836073791419281112783721430896321480148902.", "5426712394889849635982284823238678238732085288413,", "9613521481660755668158205443845276449258201946180,", "0701743619885452594731579246936553532957690569724,", "2079130493298551640472758116785362277572693940536,", "3531006019657587087764411767991947963560500387094,", "2367478278160131896042649364201007260311530737178,", "2649180324864449316118911444835353915251436623692.", "1212552073145222120574742494294073270502709321288.", "7654826467672708602136875388756651053464636193498,", "0815396153743333727079454844502926711783758831812.", "8473558137821259054223258160256632022837914535161,", "4226134094345228418712545355775877910120002052601.", "2286446107784691541677501640482855269692435685827,", "8415477124324291922562805587428253093157962854793,", "8079213065834867128443708362264998221825932305359.", "9199444052764027351274464048362940342608899525791,", "5042812513460856272557371586592900098827581182777.", "8841468373541590738883700508870262691133669293577.", "3927422155072049600675382001968438593384437335671.", "4407604987680438347646473329814819546609370459327.", "4395840562888965900661322841460530739688333562899.", "4152157036304200076387013283734599443429334038645.", "7268990954770978028108796657384593657960635002472,", "8265943887699246006153022625043529175469320888034,", "9452652550790467199312627930076273276388593375351.", "3612750158502013601108357239976668193179885108247.", "3805857974391083087739958368650854071564255898371.", "0843615519037733099059516015602435946385752448664.", "2121908101392184579101280954563558189752574095779.", "9109215040315758037539785522294586759345785234567,", "2287487372218332051299683828147785201168747627836.", "0008892267577711307921773802444530225186121050204,", "7549332115826508213696547160817261611925144494360,", "0463856268472275250242362431705088483560529299526.", "4212240861554057649368125605814505152826824420553.", "6321976830109194332152923788447059489703230147241,", "6483840825464488278108998975643317336573008487986,", "2351961552895591320999598229277829044876019555760,", "0362990283926622857709428667492678921121623786663,", "5570593581191800124728840139717392451117621618205,", "3203107420863886418291371505896375861118299895266.", "1489911490712058163666003564494220959482056744269.", "5986700718960402106680281681254386527600525313047.", "1194823273240030713572919483099353436719782819567."};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"5561187445532122493305384116330792514308100672892.", "6067973985160038180677254600119091750120461983055.", "4610629566781177960609728640756913384245690209111.", "1358674674995629155288446031178078110186495403067.", "8658653025713781565310298135721219137218837236230.", "3525091836073791419281112783721430896321480148902.", "5426712394889849635982284823238678238732085288413.", "9613521481660755668158205443845276449258201946180.", "0701743619885452594731579246936553532957690569724.", "2079130493298551640472758116785362277572693940536.", "3531006019657587087764411767991947963560500387094.", "2367478278160131896042649364201007260311530737178.", "2649180324864449316118911444835353915251436623692.", "1212552073145222120574742494294073270502709321288.", "7654826467672708602136875388756651053464636193498.", "0815396153743333727079454844502926711783758831812.", "8473558137821259054223258160256632022837914535161.", "4226134094345228418712545355775877910120002052601.", "2286446107784691541677501640482855269692435685827.", "8415477124324291922562805587428253093157962854793.", "8079213065834867128443708362264998221825932305359.", "9199444052764027351274464048362940342608899525791.", "5042812513460856272557371586592900098827581182777.", "8841468373541590738883700508870262691133669293577.", "3927422155072049600675382001968438593384437335671.", "4407604987680438347646473329814819546609370459327.", "4395840562888965900661322841460530739688333562899.", "4152157036304200076387013283734599443429334038645.", "7268990954770978028108796657384593657960635002472.", "8265943887699246006153022625043529175469320888034.", "9452652550790467199312627930076273276388593375351.", "3612750158502013601108357239976668193179885108247.", "3805857974391083087739958368650854071564255898371.", "0843615519037733099059516015602435946385752448664.", "2121908101392184579101280954563558189752574095779.", "9109215040315758037539785522294586759345785234567.", "2287487372218332051299683828147785201168747627836.", "0008892267577711307921773802444530225186121050204.", "7549332115826508213696547160817261611925144494360.", "0463856268472275250242362431705088483560529299526.", "4212240861554057649368125605814505152826824420553.", "6321976830109194332152923788447059489703230147241.", "6483840825464488278108998975643317336573008487986.", "2351961552895591320999598229277829044876019555760.", "0362990283926622857709428667492678921121623786663.", "5570593581191800124728840139717392451117621618205.", "3203107420863886418291371505896375861118299895266.", "1489911490712058163666003564494220959482056744269.", "5986700718960402106680281681254386527600525313047.", "1194823273240030713572919483099353436719782819567."};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> numbers = {"9426750787773952463076829022881501560615230320879.", "7019878567240072346268904496357340692913428700604.", "8793136678711908603121975101541766307838855795975.", "6196021304065319527098685454235156534125619927753,", "7048140551490598793493794576282069799334563652231.", "7364482574175840758009044221113718570283614504929.", "2166912951508484360292537702043351650038226081270.", "4495721663961496277920491853018745988121484338277,", "9925712225962673101207734113778949981381307273675.", "3022255736165004197864893139510025257225148562835,", "0145480583752902360419958405490365385269665373031.", "0901180009011294232489731511984705428701171157457,", "3993416636043993145764491264987840186033870983170.", "1844349305859940401902649631269489178551841395765.", "7880523754634981630299189118131597953157187249849.", "6464335168745917019860029997136382275111170355756,", "2766754493427011224014799313853219231667135297628,", "4276526332290655719253782773732764081434161690515.", "2229347157415917719165972473207473256802768431731,", "6635779873549827041736952464777291393875557200918,", "2203635319738000693540878230869198578043078795456,", "1764990388677946297130785756489456648220684302912.", "2964730359460977696720486307922783274767175404407.", "0268870226197758255616962208133148308983083711799.", "4226883715648515378310443041679574404605036117919.", "4832720291894739013142616528185254296449191545298.", "2348070877865343577635597411888211913053528941233.", "1867300890256455433316818187840615447667355269617.", "4394252316498256835596003868062153450057662136194,", "9724566493656640272348314460016298476103256561116.", "9175485945166251726156026740127095126900257823533.", "9485397537821866116981111308721330293611017992173,", "4530365981653885161264770314492924718959087835771.", "8958315108083321112105827935657638806052709584882,", "7030618446315865673880807844026545898249969994551,", "5977823177806928424420281361285661241233818734036.", "1215721728503110390619400104252609498963534334385.", "0505524679675712708837217129018007436914613469254.", "0204892621094246905367431534253944394874789993428,", "9758648657788005745674830125017853467431461452884,", "2510553083033941835645302066900505288167168224657,", "3422333591175726642208501988391312130330432020310,", "4413468484614024313986037270964210253882236757947,", "2765093276204659487475178612279428755785188062249.", "0040956826070886269988674191462088560756077364367.", "6352663053306899695344308439304853303150837521633,", "8639862008088719257824724207963335446317370828142.", "2165370066266836637305001022569584858559792886216.", "7462099509517248039676088189056220741695321521516.", "4148288299221864213429717053619189685362104106468,"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"9426750787773952463076829022881501560615230320879.", "7019878567240072346268904496357340692913428700604.", "8793136678711908603121975101541766307838855795975.", "6196021304065319527098685454235156534125619927753.", "7048140551490598793493794576282069799334563652231.", "7364482574175840758009044221113718570283614504929.", "2166912951508484360292537702043351650038226081270.", "4495721663961496277920491853018745988121484338277.", "9925712225962673101207734113778949981381307273675.", "3022255736165004197864893139510025257225148562835.", "0145480583752902360419958405490365385269665373031.", "0901180009011294232489731511984705428701171157457.", "3993416636043993145764491264987840186033870983170.", "1844349305859940401902649631269489178551841395765.", "7880523754634981630299189118131597953157187249849.", "6464335168745917019860029997136382275111170355756.", "2766754493427011224014799313853219231667135297628.", "4276526332290655719253782773732764081434161690515.", "2229347157415917719165972473207473256802768431731.", "6635779873549827041736952464777291393875557200918.", "2203635319738000693540878230869198578043078795456.", "1764990388677946297130785756489456648220684302912.", "2964730359460977696720486307922783274767175404407.", "0268870226197758255616962208133148308983083711799.", "4226883715648515378310443041679574404605036117919.", "4832720291894739013142616528185254296449191545298.", "2348070877865343577635597411888211913053528941233.", "1867300890256455433316818187840615447667355269617.", "4394252316498256835596003868062153450057662136194.", "9724566493656640272348314460016298476103256561116.", "9175485945166251726156026740127095126900257823533.", "9485397537821866116981111308721330293611017992173.", "4530365981653885161264770314492924718959087835771.", "8958315108083321112105827935657638806052709584882.", "7030618446315865673880807844026545898249969994551.", "5977823177806928424420281361285661241233818734036.", "1215721728503110390619400104252609498963534334385.", "0505524679675712708837217129018007436914613469254.", "0204892621094246905367431534253944394874789993428.", "9758648657788005745674830125017853467431461452884.", "2510553083033941835645302066900505288167168224657.", "3422333591175726642208501988391312130330432020310.", "4413468484614024313986037270964210253882236757947.", "2765093276204659487475178612279428755785188062249.", "0040956826070886269988674191462088560756077364367.", "6352663053306899695344308439304853303150837521633.", "8639862008088719257824724207963335446317370828142.", "2165370066266836637305001022569584858559792886216.", "7462099509517248039676088189056220741695321521516.", "4148288299221864213429717053619189685362104106468."};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> numbers = {"5325695131252330285189035016425153781191300848759.", "5004675662204078950454506099619660009671562566751,", "8659070121771020977977851090070392538324375955806.", "4994747115705636580930054082619001309143141753001,", "7430832515314468197848786459223470292995985547339,", "4144960163163878580555676489372197666844784579962,", "5612629978055874528932424250045119290367586975982.", "4021164716347658243962682484430882185745040892861,", "4233664627129386086278784874235730762221420711519.", "6036411231277847110655975169142463139706989687509.", "8606450646749026815907321493401984937489577768438,", "6589645771365110234963603695756120623362359987976.", "9793804943280067080765069596415902668500757714228.", "3169524969485414092976634506668352011667348445644.", "7226719258596665996427521379773618945933509453832.", "8541465195054791275164149784073408990736094555416.", "9124923122821344634608480727425519676111318026421.", "8365327508282717463524089618965424420053170092201,", "2607970517978670238227913061249678346350217932679,", "2393584202960119209082309915002510117532940738350.", "1334769507445464524850936760082486273388129075663,", "4295709863561986287763158714845871340383540385654,", "3534234234531329236379727427570361687640177355160.", "3152305180146030199587216418450898933395559836216,", "0846829535261649385895346272082983443247714799532.", "8449242747230302563355583815395865716057784469330.", "9598811460671970820761043986429472681683846440222.", "3615118727712064035103348906262638435096601110742.", "6256940729946424977042627691727945058663723263277.", "5207613541007528744418500451322777871381438805368,", "5651958804615850180524464047359718224539262758188,", "2822575394503220120477017918201117383962400268855.", "6429089033390305778337045104309774420737536943544.", "0055928517952196593519949761443932307192503112248.", "8995937087049516549454140094122359695569571299435.", "7418899453789411186403291909848992019829241034964.", "7903372869741405058655634838154772809356111274280.", "1477998236942309667030299784457351731616790456247,", "9404284922433528909604750599650092670083752909642.", "0825409597345062954039783073673083537238130789198,", "4300859318004737404492352810902725126883807300764,", "3249087007311900203893149905111728250911425715822.", "1228712421140688589573405282199186799977383024399.", "9720238886023727569265608259163430866432434715798,", "3058169502429225275288375052403641930028772698483.", "3006114900606598708315324646949183028136229138732,", "0473579446256558025511778331214115805603831996683.", "6778008429965699656793718518930513397617766194509,", "2123958098929936861940874887270280409598249725824,", "6852188330686233710233633200728529145425838133271."};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"5325695131252330285189035016425153781191300848759.", "5004675662204078950454506099619660009671562566751.", "8659070121771020977977851090070392538324375955806.", "4994747115705636580930054082619001309143141753001.", "7430832515314468197848786459223470292995985547339.", "4144960163163878580555676489372197666844784579962.", "5612629978055874528932424250045119290367586975982.", "4021164716347658243962682484430882185745040892861.", "4233664627129386086278784874235730762221420711519.", "6036411231277847110655975169142463139706989687509.", "8606450646749026815907321493401984937489577768438.", "6589645771365110234963603695756120623362359987976.", "9793804943280067080765069596415902668500757714228.", "3169524969485414092976634506668352011667348445644.", "7226719258596665996427521379773618945933509453832.", "8541465195054791275164149784073408990736094555416.", "9124923122821344634608480727425519676111318026421.", "8365327508282717463524089618965424420053170092201.", "2607970517978670238227913061249678346350217932679.", "2393584202960119209082309915002510117532940738350.", "1334769507445464524850936760082486273388129075663.", "4295709863561986287763158714845871340383540385654.", "3534234234531329236379727427570361687640177355160.", "3152305180146030199587216418450898933395559836216.", "0846829535261649385895346272082983443247714799532.", "8449242747230302563355583815395865716057784469330.", "9598811460671970820761043986429472681683846440222.", "3615118727712064035103348906262638435096601110742.", "6256940729946424977042627691727945058663723263277.", "5207613541007528744418500451322777871381438805368.", "5651958804615850180524464047359718224539262758188.", "2822575394503220120477017918201117383962400268855.", "6429089033390305778337045104309774420737536943544.", "0055928517952196593519949761443932307192503112248.", "8995937087049516549454140094122359695569571299435.", "7418899453789411186403291909848992019829241034964.", "7903372869741405058655634838154772809356111274280.", "1477998236942309667030299784457351731616790456247.", "9404284922433528909604750599650092670083752909642.", "0825409597345062954039783073673083537238130789198.", "4300859318004737404492352810902725126883807300764.", "3249087007311900203893149905111728250911425715822.", "1228712421140688589573405282199186799977383024399.", "9720238886023727569265608259163430866432434715798.", "3058169502429225275288375052403641930028772698483.", "3006114900606598708315324646949183028136229138732.", "0473579446256558025511778331214115805603831996683.", "6778008429965699656793718518930513397617766194509.", "2123958098929936861940874887270280409598249725824.", "6852188330686233710233633200728529145425838133271."};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> numbers = {"9160357363493058135860580813776064937288450598636.", "4058370266386912098045269885845919942465619383121.", "3752607253722139500299208558863164664927539441662.", "9732015935576324071751304416866089721383467288679.", "8929220041023253335001290789906221043011680193458,", "8984159802255827000371406938764408338506919146088.", "2330128637884311253442877131840094790463737978551,", "9873586988549391622752998886883541635618333994158.", "1637533323376477694944949758078127310645148436463,", "7880444375242310766046012184758246019530433019808.", "6430936122945431907753858131802295360900634774676.", "4324337413235171680300773841549827951952998479054,", "2036031257439511099419448396667499049283991274906.", "3760011212189142383295723743753860987614482410913.", "6252406355528857935592745119050761945645150529273,", "2188425310336367447775724637409074335164507059130.", "4497006478428198986409918951222277675923549786887.", "1305718846240332674075938026142310591357029848185.", "2651891547602996787793665804064106353498413587592,", "9513088981163774309163458882251788539252635193668,", "5560361540220687088967015439486567501506143366571.", "5959053119445815343429479225985468646805338873976.", "0254952372621449471645845247888146882581860766003.", "5599517204799278626329479116614684648138981263737,", "3045090975919125052459487432873247534559623399989,", "1844368251355702229961516914544910366897537545203,", "7573040767427127699733225684948963865051919731666,", "8320551581666318399031144920377754530206822541904,", "3301313879665623494330035802605595953660769177919.", "8938236176274012022613891497305568172935376488240.", "5204891390881634718160876757490510374152725334340,", "8385233863814073606352889350056981455405633822671.", "7252495049453317863062876030151745166922456880944.", "8169528305908682686768250661499225167769569466658.", "3703637123843405635130557053554146504266767998217,", "3298406511280803554316517548639068502719354435203.", "6641816235224083495073243194169698195074988281439.", "1852610441049280046946734001121940942623573954307.", "2968836418783245692385623960314766362132397400600,", "0119271886462892650571259750874868622281082754447,", "0601162530584620680771418273919747252124272995886.", "9330361848588430594941727105886182919756416519091.", "0056530788397445934251743288512079517587291394468,", "7132360582434867616741275644054131574340302933267,", "6524106135773580687487721488674081769766145246986,", "6668402372818608370951892646665872970189525832372.", "7809534036591484166944310043590155498814112139349.", "5434488093131685140734707858025077085885202158666,", "5309348789766772674836671185881126834572255833593,", "0726523255648167910189422899318355476005459332064."};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"9160357363493058135860580813776064937288450598636.", "4058370266386912098045269885845919942465619383121.", "3752607253722139500299208558863164664927539441662.", "9732015935576324071751304416866089721383467288679.", "8929220041023253335001290789906221043011680193458.", "8984159802255827000371406938764408338506919146088.", "2330128637884311253442877131840094790463737978551.", "9873586988549391622752998886883541635618333994158.", "1637533323376477694944949758078127310645148436463.", "7880444375242310766046012184758246019530433019808.", "6430936122945431907753858131802295360900634774676.", "4324337413235171680300773841549827951952998479054.", "2036031257439511099419448396667499049283991274906.", "3760011212189142383295723743753860987614482410913.", "6252406355528857935592745119050761945645150529273.", "2188425310336367447775724637409074335164507059130.", "4497006478428198986409918951222277675923549786887.", "1305718846240332674075938026142310591357029848185.", "2651891547602996787793665804064106353498413587592.", "9513088981163774309163458882251788539252635193668.", "5560361540220687088967015439486567501506143366571.", "5959053119445815343429479225985468646805338873976.", "0254952372621449471645845247888146882581860766003.", "5599517204799278626329479116614684648138981263737.", "3045090975919125052459487432873247534559623399989.", "1844368251355702229961516914544910366897537545203.", "7573040767427127699733225684948963865051919731666.", "8320551581666318399031144920377754530206822541904.", "3301313879665623494330035802605595953660769177919.", "8938236176274012022613891497305568172935376488240.", "5204891390881634718160876757490510374152725334340.", "8385233863814073606352889350056981455405633822671.", "7252495049453317863062876030151745166922456880944.", "8169528305908682686768250661499225167769569466658.", "3703637123843405635130557053554146504266767998217.", "3298406511280803554316517548639068502719354435203.", "6641816235224083495073243194169698195074988281439.", "1852610441049280046946734001121940942623573954307.", "2968836418783245692385623960314766362132397400600.", "0119271886462892650571259750874868622281082754447.", "0601162530584620680771418273919747252124272995886.", "9330361848588430594941727105886182919756416519091.", "0056530788397445934251743288512079517587291394468.", "7132360582434867616741275644054131574340302933267.", "6524106135773580687487721488674081769766145246986.", "6668402372818608370951892646665872970189525832372.", "7809534036591484166944310043590155498814112139349.", "5434488093131685140734707858025077085885202158666.", "5309348789766772674836671185881126834572255833593.", "0726523255648167910189422899318355476005459332064."};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> numbers = {"9 ", "9!", "0"", "1#", "1$", "0%", "7&", "5'", "9(", "4)", "4*", "5+", "6,", "3-", "1.", "9/", "50", "51", "72", "43", "44", "05", "26", "47", "68", "39", "2:", "3;", "6<", "7=", "7>", "0?", "5@", "5A", "9B", "5C", "6D", "7E", "5F", "6G", "5H", "9I", "1J", "8K", "0L", "3M", "5N", "7O", "4P", "8Q"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"9", "9.", "0.", "1.", "1.", "0.", "7.", "5.", "9.", "4.", "4.", "5.", "6.", "3.", "1.", "9.", "50", "51", "72", "43", "44", "05", "26", "47", "68", "39", "2.", "3.", "6.", "7.", "7.", "0.", "5.", "5.", "9.", "5.", "6.", "7.", "5.", "6.", "5.", "9.", "1.", "8.", "0.", "3.", "5.", "7.", "4.", "8."};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> numbers = {"0R", "0S", "5T", "6U", "6V", "0W", "0X", "4Y", "9Z", "1[", "4\", "9]", "6^", "7_", "4`", "3a", "0b", "8c", "2d", "7e", "1f", "0g", "9h", "9i", "2j", "9k", "5l", "1m", "9n", "9o", "5p", "4q", "8r", "4s", "8t", "1u", "7v", "5w", "5x", "2y", "2z", "9{", "1|", "6}", "8~", "5[\u127]", "1 ", "3!", "7"", "8#"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0.", "0.", "5.", "6.", "6.", "0.", "0.", "4.", "9.", "1.", "4.", "9.", "6.", "7.", "4.", "3.", "0.", "8.", "2.", "7.", "1.", "0.", "9.", "9.", "2.", "9.", "5.", "1.", "9.", "9.", "5.", "4.", "8.", "4.", "8.", "1.", "7.", "5.", "5.", "2.", "2.", "9.", "1.", "6.", "8.", "5.", "1", "3.", "7.", "8."};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> numbers = {" " 1 ", " 1 b ", " F 6 ", " 7 T ", " 5 ", " 5 ", " 1 ", " $ 2 ", " 4 ", " 2 ", " t 0 ", " 5 ", " ; 2 ", " ? 8 ", " 7 ", " J 8 ", " 8 ", " 7 @ ", " 1 ", " 5 B ", " R 1 ", " > 4 ", " 5 ", " 7c ", " 5 7 ", " 7 _ ", " v 0 ", " 2 w ", " 5 ", " 2 ", " 2 r ", " - 9 ", " 0 ", " q 4 ", " 7 0 ", " f 9 ", " 5 ", " b 3 ", " 4 s ", " ` 2 ", " ; 0 ", " 0 ", " 5 ", " 0 ", " | 5 ", " 2 ", " 2 , ", " 3 ", " O 3 ", " 1 "};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".1", "1.", ".6", "7.", "5", "5", "1", ".2", "4", "2", ".0", "5", ".2", ".8", "7", ".8", "8", "7.", "1", "5.", ".1", ".4", "5", "7.", "57", "7.", ".0", "2.", "5", "2", "2.", ".9", "0", ".4", "70", ".9", "5", ".3", "4.", ".2", ".0", "0", "5", "0", ".5", "2", "2.", "3", ".3", "1"};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> numbers = {" 3 ", " ] 0 ", " 9 ", " 3 ", " Y 7 ", " = 3 ", " ' 2 ", " 2 ", " j 2 ", " 0 N ", " 6 ", " 3 ", " p 6", " P 2 ", " q 4 ", " ^ 5 ", " M 6 ", " % 8 ", " 7 ", " - 5 ", " 6 ", " 0 ", " 2 ", " R 3 ", " 0 ", " 5 4 ", " 1 ", " 4 N ", " 1 4", " 8 ", " 6 $ ", " 3 . ", " 5 _ ", " 4 ", " 6 ", " 2 k ", " 2 ", " 7 ", " Y 1 ", " ~ 3 ", " 0 } ";
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"3", ".0", "9", "3", ".7", ".3", ".2", "2", ".2", "0.", "6", "3", ".6", ".2", ".4", ".5", ".6", ".8", "7", ".5", "6", "0", "2", ".3", "0", "54", "1", "4.", "14", "8", "6.", "3.", "5.", "4", "6", "2.", "2", "7", ".1", ".3", "0.", ".8", "3", ".0", ".4", "3", "8.", ".8", "5", "3."};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> numbers = {" 8 + ", " 2 ", " K 1", " 1 ! ", " a 0", " 0 [\u127] ", " 4 ", " ) 6 ", " 5 o ", " b 8 ", " m 3 ", " 5 ", " 1 I ", " 1 ", " 4 ", " 6 1 ", " T 9 ", " 6 ", " / 6 ", " 9 1 ", " : 0 ", " 4 4 ", " d 1 ", " 6 ", " 6 ", " 0 / ", " q 7 ", " 2 ", " M 9 ", " 7 ", " 5 ", " S 0 ", " 8 ", " 2 ", " 8 ", "3 / ", " h 6 ", " 0 > ", " 1 H ", " % 2 ", "4 ", " 4 ", " 4 ", " 6 ", " 0 ~ ", " 1 ", " 9 [\u127] ", " p 6 ", " 8 ", " 1 y "};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"8.", "2", ".1", "1.", ".0", "0.", "4", ".6", "5.", ".8", ".3", "5", "1.", "1", "4", "61", ".9", "6", ".6", "91", ".0", "44", ".1", "6", "6", "0.", ".7", "2", ".9", "7", "5", ".0", "8", "2", "8", "3.", ".6", "0.", "1.", ".2", "4", "4", "4", "6", "0.", "1", "9.", ".6", "8", "1."};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> numbers = {"263C45233 ", " 2364A56", "B273664"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"263.45233", "2364.56", ".273664"};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> numbers = {" 1212* "};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1212."};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> numbers = {"12 3.3"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"123.3"};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> numbers = {",5", "3,", ".5", "3.", "000,000", "000 000", "28374646 837463264 g 82743"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".5", "3.", ".5", "3.", "000.000", "000000", "28374646837463264.82743"};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> numbers = {" 1g2"};
    CalcTest* pObj = new CalcTest();
    clock_t start = clock();
    vector<string> result = pObj->uniform(numbers);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1.2"};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=9971683&rd=7221&pm=4469
********************************************************************************
#line 109 "CalcTest.cpp" 
#include <algorithm> 
#include <iostream> 
#include <sstream> 
#include <string> 
#include <vector> 
 
using namespace std; 
 
/* ------------------------------------------------------ */ 
/* ------------ PROBLEM SOLUTION BEGINS HERE ------------ */ 
/* ------------------------------------------------------ */ 
 
class CalcTest 
{ 
public:  
 vector <string> uniform(vector <string> numbers)  
 {  
    vector <string> ret; 
    for (int i=0;i<numbers.size();i++) 
    { 
  string tmp = ""; 
  for (int j=0;j<numbers[i].size();j++) 
      if (numbers[i][j]== ' ')  
    ; 
      else if (!isdigit(numbers[i][j])) tmp += '.'; 
      else tmp += numbers[i][j]; 
  ret.push_back(tmp); 
    }   
    return ret; 
 }  
  
  
};  
 
 
 
 
 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/