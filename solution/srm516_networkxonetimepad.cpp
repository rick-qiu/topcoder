/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10846
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class NetworkXOneTimePad {
public:
    int crack(vector<string> plaintexts, vector<string> ciphertexts);
};

int NetworkXOneTimePad::crack(vector<string> plaintexts, vector<string> ciphertexts) {
    int ret;
    return ret;
}


int test0() {
    vector<string> plaintexts = {"110", "001"};
    vector<string> ciphertexts = {"101", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> plaintexts = {"00", "01", "10", "11"};
    vector<string> ciphertexts = {"00", "01", "10", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> plaintexts = {"01", "10"};
    vector<string> ciphertexts = {"00"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> plaintexts = {"000", "111", "010", "101", "110", "001"};
    vector<string> ciphertexts = {"011", "100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> plaintexts = {"0"};
    vector<string> ciphertexts = {"1"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> plaintexts = {"01011010011101000011001", "00001001010101100010001", "00111001110000011001100", "00010100111110000001010", "01100001001011010101010", "01000101000111000101110", "11000111010011110101010", "10110000001011000001011", "01111010011100011001010", "00000011110001001110110", "11101101110001001111011", "01111101011100000011110", "10101010011011100001000", "01101001100101111110000", "11111000010100010111000", "01110101010111100100001", "01000010000110111100011", "11001011011000010011101", "11110111111011001100011", "00101000101010001010111", "00000101010000000101110", "01011001110010111110000", "10101010001010111100000", "11011100010000001001101", "10010010010000110000010", "00011010010000100101100", "10000110110100000101101", "01010110100011011101101", "11100010110110001010110", "01010110011001000010101", "00111010111110000110000", "01110101011010110000110", "11001011101001111100101", "11110100100110101001110", "10110110010011011010000", "10001100100000111000001", "00101100000111001110001", "00100010111010100110100", "00110010001011010000100", "11010011010000111000011", "00111110101111100100001", "01011010110100000001001", "01001100011111111011111", "11011011110010100101110", "00100101101010000110001", "11101000100111111101101", "01101110100000011101111", "11101100010100111010001", "00110011111110101101000"};
    vector<string> ciphertexts = {"11100101010111010110111", "10010101010000110111000", "10110101101010110100111", "11001010110100110011111", "10100011111110011111110", "00000010010000000010100", "11101101011100110001000", "01100111111011111110101", "11000110011001110000011", "01001011110010010111000", "10110010111010010100010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> plaintexts = {"11000111111100110111001000001101100011100100", "01000001011101011100110010000010001000001010", "11000001011111001010011001011101110000001100", "01001001111110000110011101101100111111111101", "10110111111110100000011010111100001110001001", "01011101011011001010011111000000011011110010", "01101100110000011110100110011100101100001111", "00011111011000100010001001100101110100000001", "11011001111101011101101110101011100110100110", "10100010010110000100010100001001000010110110", "01011100000110101110001011011011001100110011", "01001001110110101111111111110110001100011001", "00010001100011000101010001010110010110000110", "00011100000101101011111010000001010111011101", "10101111010000001001011010000001111000111110", "11011100000100011111011010100111110011010111", "11011100010111100100110010111110000110001111", "00001100100101100101101100000011000011000000", "10001011101001111110010100011001010100000011", "10110110100111101011100010000001000110100110", "10010111001101100110010000011001101011110010", "10011001101011010001101100010010011011000011", "10110111110100101010010100101110001000111011", "01001111000101000101011111101101010111100111", "00111100100101011101111100100001101111110001", "00110111101011100011111001101010011010100011", "11100110101010100000100110001111000000111000", "01100011110111110011011011100011001101000101", "11000001100100110011100010101001010001010010", "11100010110111000011100010111001111010000011", "00000111101011010000000011010011111010100100", "10111110001011110011100100101100110101100101", "00111000101100010011111011110001101100110111", "00001111110011000011001111010010001111011011", "01011010011000111001010000100011111101010110", "00100000100010100110111000010000000010001110", "01111110111101111101000010011011011100011111", "10111001000010110100001110010111111001010110", "10101001111011000101010110111111110010110100", "11000110101001110100101111011010001010001111", "00011010100111100010100010011110000100011000", "10100110110110111110001010100111101100100000", "11001110110010000000010101001011111000011111", "01110011011100001011011110010000111011011111", "11010000110111001101010101100000011010111111", "10110000010010111011011011000111000001000001", "00100100000001001100001111011010100101001000", "10110010111010111011011111111101010100110100"};
    vector<string> ciphertexts = {"01101010111110000110111000010010000000101100", "10001101010101100100000000110111100100000110", "11011101101011111101100011100011111010001010", "01000111100001000110100110101100111000001111", "11110100100100101011001001000100000000111011", "10000101110110111110101111011001010011110001", "11000011111011111011111101100111100011010111", "10010110010000000001100010010110010001011010", "10110010110101000101110000101110110000010011", "00010000001100100111101000010010011111011011", "01011011000101011110100010101100000111111110", "11101100101010011110001010100101101110000010", "01110010000011001011010110011001011001101001", "11010110101111011010010000101011101000010100", "00000010111010111000100111111110010100010011", "01111110110010000011101101001000111000111000", "01111011110110011000101000001001100010000101", "10010001010011110010101101110101110111111110", "10000101111110010111001101000011100000010101", "01111010101111010011010000110100101010101010", "00001101010111110010101011101000011100000000", "01100101110011111101100100001010011110111000", "01101110011110111100100110111100101110111010", "10010000001110010110111001101110100000111111", "00010000011111011100000000001011101010000011", "11111011100011011011001011011111110110101111", "11000000101101011101011110110110101111001100", "01111100011010000011101001110010101101001101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> plaintexts = {"001101001001100111", "001000111101100001", "001111001110100001", "000000111000010001", "110110001110000100", "000101100111101001", "001111100101101111", "100001011111011101", "010101010010010111", "110001011101000000", "000110001000011010", "111001110110000000", "110111010101100111", "100001011001101011", "111001111110110101", "001100111101011000", "110100101111010111", "111000010000111101", "011110101111111011", "101011100100100100", "110000100101011001", "101101011010011101", "101001100011001011", "111110111101110010", "010000000110010001", "011000011100101011", "001110101111110101", "110011010010110000", "111101010010101000", "110010111011010000", "100110011111001010", "101111011011011010", "101010100010100111", "110101110100100111", "010110101101111001", "111000010110001110", "011011111011011001", "011100100111101100", "110011110001111100", "101111100000111011", "101111000000111101", "101101001110110100", "010011110110101011", "001001000110110100"};
    vector<string> ciphertexts = {"010000010110101110", "100111100101001111", "101111010110011000", "010001011100110100", "110000010011111010", "010011001110011001", "010110110101110101", "000100001000011000", "111110101100011100", "001001011110111000", "110110010000001010", "101010000111100110", "011010010100101000", "001010100001010110", "110000101000011011", "110000110011111100", "110010111101110101", "101011011100010110", "011001111011011011", "101100000010111101", "100001001110110011", "100010100001101001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> plaintexts = {"00111110100110110001010110010100110000011", "11010100010010001001111110100001100011111", "11101111101111000011011110001101111101001", "01010110100001100010000001011010011111110", "11111001100110011100101100101000111000010", "11011001111100010100101011010000001011100", "01101101100000101101010001001111111111001", "11111100001101100100001111111000101110010", "00101011000101011101111110001110110101111", "10101001010000101111110001000110010110011", "01011111010101110011111111110111101111111", "10110001110111010011011111110110010110010", "11100001001111010101011111100101010010110", "10011100001110000110111101011011111101100", "11101010010011001011000011111001100100110", "00001101001010011100110100100010011001101", "01101111001101111100100001001011110111111", "11000111010110111010011100001001010100010", "11001111110010000000101100010010001101010", "01000111101110101110100101100010010011110", "00100110111111100111000010010100100001111", "01011110101101010010110101110001101111111", "01010010011100011110100100110111111100100", "11111000111110101111001100011001100110010", "00110110100001011011101011111100100001001", "11011101111011001010110011011011111011010", "01100011101001011011100001001010110000000", "00101010111000100101100111010110000111011", "10001111110110001010111001111101101100101", "01111011000011111000001001001110110111101", "00011101110010011010000000001001110010101", "00000100100001001101010111000100001001101", "00111000100111110111110111111011110000111", "01010101000100000100101011011101001011010", "00011101000001110100010110101110011011101", "01100000111111001111001110101000111111001", "00001100111110010010000011001010111001101", "10111000001000000100000000010110101100010", "10011101100111000000110010111111011000001", "01101100101110101000011011110111001011010", "01111100011110000001000000010000111110100", "00101001011100000111111010110100101001101", "10100000000000111101000101110110110100001", "01000011001011101101000111010001101101011", "11101111001001111001111000100101110001000", "00111110001010011100111011111010110100011"};
    vector<string> ciphertexts = {"10101110010101111101000110000000011100111", "10110000001101101101110011101111001101111", "01011100111000010011111010110101011110111", "00100001111010110101110101010010101011011", "01100111000101011001011010011001000000001", "00010100100100011100111001001111000000100", "01001111111100100000011000011101101001010", "10000100010100001000000111011110000100101", "10100001110110011101111110100000010100101", "11101000010101010101001010111100000010001", "01100010111001010001000111101101011001110", "00000111011100010000111101101001010001101", "11001011100001110111000011000101010000011", "11011101101110011110101111001001110110010", "01010101010001010000110111001111000110010", "11001111000100110100100001110110101110110", "01101001100101001111011011110001101111110", "10111110001011000001101111101000011100001", "11100100000100110010011111100011110110010", "11110100110100011011000100000100000011100", "10100010010010111111100011000010111010011", "00110000100010011110000100000010010001010", "00010101001101011010110110101011100101001", "00111001011101001001011011100010101011010", "10100011101111000111111010011010001000111", "11101011000011000001100101011110001101000", "01100111100011100011111100110001001100000", "01000111011000011010101000000110110000010", "11110011101001100010001101011010001010101", "11010111111111101001111011100011010010111", "11011010110110000100100000100011000001100", "01010001010110001110101111000100110110100", "01110001001100000110101000111100000101010", "10000101100000000110110000110110100100101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> plaintexts = {"11101010000", "00111111011", "00011100000", "01000111000", "00000001000", "00010100100", "11011111100", "11001110111", "11100001101", "00010101011", "00000110001", "11101000001", "00001001101", "11110101101", "10001000100", "01010001011", "01001001011", "00011001001", "01011100001", "01011010101"};
    vector<string> ciphertexts = {"10011001110", "00101110001", "00010000010", "11111001011", "00010111011", "11011111101", "11111011010", "11100100111", "11110000111", "01001101011", "00000101110", "00000100001", "01000000001", "00011000111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> plaintexts = {"11001101010001111010001", "11101000101110110011010", "01110100010001111100000", "01100101101101001111100", "01111110111100011111000", "11101000000001101000100", "01000010101101001000100", "10100011100011001011101", "10011111011100100101100", "01100111011000100100001", "01000011010101101001101", "01010100101111110100100", "00010001011100000011100", "00011000100010001000111", "11011001110101000011001", "11111101010110000111001", "00111000011111011000101"};
    vector<string> ciphertexts = {"01101010000111001000110", "00010101111101100100000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> plaintexts = {"01001010101100111011011", "01100010101010001010000", "10100110010011101011001", "10010100001000111001101", "00110101111011101011110", "10001001000001010110111", "00101100110101111100010", "00011001110011110010110", "11011000011101111000100", "01011010011001111111101", "11000100001111101111001", "11111001100001011010001", "01000011000000101101100", "01011000001000000000011", "11111010001000101001110", "01110011011111010000101", "11111000110001011101001", "11011001010000001111001", "01101010110010110110111", "01111011011010110001001", "11010011000000101110110", "00000100011001000100010", "01101101000011100110001", "01010001011001000101111"};
    vector<string> ciphertexts = {"00111000101011111100000", "10001000001111101110101", "11011011010000100111000", "11101110010110101001100", "11110111011000111110000", "00000110101100111010111", "00010001100011111011000", "10111001111001100100111", "11000110111010010001100", "10011010101011010101101", "10101000010001100011001", "10000001100011111000010", "10011000111010101010011", "10010011111010010000001", "10101111100000110011111", "10100000001001011111110", "01010110101011101100011", "10110001111100000101011", "00111010010010001000111", "01001011100010000011001", "00011010111110101101010", "01100100110000111110111", "00111011000010001111111", "00011011110011011010111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> plaintexts = {"0", "1"};
    vector<string> ciphertexts = {"0", "1"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> plaintexts = {"00", "10", "01", "11"};
    vector<string> ciphertexts = {"00", "11", "10", "01"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> plaintexts = {"111", "101", "011", "010", "100", "001", "110", "000"};
    vector<string> ciphertexts = {"001", "110", "111", "101", "100", "011", "010", "000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> plaintexts = {"0000", "1011", "0100", "0010", "0111", "0101", "1001", "1010", "1000", "0011", "0110", "1100", "0001", "1101", "1110", "1111"};
    vector<string> ciphertexts = {"0110", "1111", "0101", "1100", "1010", "0100", "0010", "1011", "0011", "0000", "1110", "0111", "1000", "1001", "0001", "1101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> plaintexts = {"10100", "10010", "01111", "01000", "00011", "11110", "00110", "00111", "11100", "00001", "10000", "10101", "01100", "10001", "11101", "00100", "00000", "11000", "11010", "10110", "10111", "10011", "01110", "11011", "11111", "00101", "11001", "01101", "01011", "01010", "01001", "00010"};
    vector<string> ciphertexts = {"00101", "10001", "10011", "11110", "01111", "11001", "10110", "11111", "10111", "00000", "00100", "01000", "01011", "00110", "01001", "11101", "10010", "11011", "01110", "10000", "10101", "01101", "01010", "10100", "11010", "00011", "11000", "00111", "00010", "01100", "00001", "11100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> plaintexts = {"11110000011011100101011101010110111111111100000000", "11100111101011011111100110010100000111010010000001", "11100111010110010110010111010010111111101010011001", "11000000000100001110011101010010101000101001001010", "10101011001111110100001110101101111100101001100011", "11000110011110110110101100100110110101000110000111", "01110000001111001110010001101101011010110010011010", "00001010010010100011111001000010110011111111111111", "11011111111100011111111010100001010000000000101100", "01000001110001010011010010001101100001001100010101", "00101010011100011111010010011101011101000111001110", "00101000110101110101101100111011111101100010111110", "00111011110011000000010001011000000001000100001110", "11001111010110110101011010010111001110010111011100", "11001101011010010011100000111111001111010011000100", "11010010000101010011011001011100101011010110101010", "00001101001011110011111111110001000000101011000110", "00101101011101010111010111010011011111111000000011", "10101110101111000100011100000011010111100010101101", "10001110110010001111101101110101001111000111001110", "01111011110110100110111000010101110101011001100110", "00011010000110101100111000001100011101001011010101", "10100011111111110101111100100110011100011101001110", "00100001110110000110111001011011010001000011010111", "10101001001010110010001011110011011000000101110111", "01111101100010000011010110101101000010001000110011", "01001010101000011101001110000000011010000100111010", "11010011001111111101110010011010011101111001000011", "10100000101000100010000100110110111001000100101000", "11110111110000111110110000111001011010110101100111", "11100111110001011101011010011110001111000101100011", "00011011011011001110100001110010010110000001101000", "00111011101000111100011010011010000000101111101000", "10010101111111111101001011000010101100010011101001", "10110000101000110010001001111001000101101110010110", "00000001110101111110111110110100010001101000110111", "01100011001110000111000010010111100000010111111110", "11100110011001010111000011110001110011010011111111", "11010011001100010101011111000110111110111011000100", "00111000011100010111110001010001100001100101101011", "00001010100101001011101011100000100111010001101101", "00100110101000101100000000011000001101011000101110", "00010011101101100100110010000001100000110000001000", "10111110100100001011001010010011100110011100111001", "10000101000010101110110001001011000101111110111101", "00000100011001010011101010100010001101111001010011", "01111001010011000010000101001111100111000100110011", "00001100111100001100010110100101000111001100101011", "00110000011010010110010000000101010101100011000010", "00110011100111100100010111010111100011111010001001"};
    vector<string> ciphertexts = {"11110000011011100101011101010110111111111100000000", "11100111101011011111100110010100000111010010000001", "11100111010110010110010111010010111111101010011001", "11000000000100001110011101010010101000101001001010", "10101011001111110100001110101101111100101001100011", "11000110011110110110101100100110110101000110000111", "01110000001111001110010001101101011010110010011010", "00001010010010100011111001000010110011111111111111", "11011111111100011111111010100001010000000000101100", "01000001110001010011010010001101100001001100010101", "00101010011100011111010010011101011101000111001110", "00101000110101110101101100111011111101100010111110", "00111011110011000000010001011000000001000100001110", "11001111010110110101011010010111001110010111011100", "11001101011010010011100000111111001111010011000100", "11010010000101010011011001011100101011010110101010", "00001101001011110011111111110001000000101011000110", "00101101011101010111010111010011011111111000000011", "10101110101111000100011100000011010111100010101101", "10001110110010001111101101110101001111000111001110", "01111011110110100110111000010101110101011001100110", "00011010000110101100111000001100011101001011010101", "10100011111111110101111100100110011100011101001110", "00100001110110000110111001011011010001000011010111", "10101001001010110010001011110011011000000101110111", "01111101100010000011010110101101000010001000110011", "01001010101000011101001110000000011010000100111010", "11010011001111111101110010011010011101111001000011", "10100000101000100010000100110110111001000100101000", "11110111110000111110110000111001011010110101100111", "11100111110001011101011010011110001111000101100011", "00011011011011001110100001110010010110000001101000", "00111011101000111100011010011010000000101111101000", "10010101111111111101001011000010101100010011101001", "10110000101000110010001001111001000101101110010110", "00000001110101111110111110110100010001101000110111", "01100011001110000111000010010111100000010111111110", "11100110011001010111000011110001110011010011111111", "11010011001100010101011111000110111110111011000100", "00111000011100010111110001010001100001100101101011", "00001010100101001011101011100000100111010001101101", "00100110101000101100000000011000001101011000101110", "00010011101101100100110010000001100000110000001000", "10111110100100001011001010010011100110011100111001", "10000101000010101110110001001011000101111110111101", "00000100011001010011101010100010001101111001010011", "01111001010011000010000101001111100111000100110011", "00001100111100001100010110100101000111001100101011", "00110000011010010110010000000101010101100011000010", "00110011100111100100010111010111100011111010001001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> plaintexts = {"111001", "111000", "010100", "010010", "000101", "010000", "101011", "011011", "110001", "111100", "000000", "010001", "100010", "001011", "000111", "110111", "011110", "001101", "110100", "111010", "100100", "001010", "011100", "110011", "110101", "110110", "011000", "010011", "100111", "110010", "100101", "100000", "001111", "101000", "001001", "101110", "000010", "111101", "000001", "001000", "101101", "111011", "000100", "110000", "100001", "011101", "111111", "001110", "100110", "101111"};
    vector<string> ciphertexts = {"111001", "111000", "010100", "010010", "000101", "010000", "101011", "011011", "110001", "111100", "000000", "010001", "100010", "001011", "000111", "110111", "011110", "001101", "110100", "111010", "100100", "001010", "011100", "110011", "110101", "110110", "011000", "010011", "100111", "110010", "100101", "100000", "001111", "101000", "001001", "101110", "000010", "111101", "000001", "001000", "101101", "111011", "000100", "110000", "100001", "011101", "111111", "001110", "100110", "101111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> plaintexts = {"00110001101100001110010101001111010110011111011000", "00001000101010100110000000110101100010000011001101", "00011100111011001101100110010100010100010100000110", "11000101110010001010101110000110001111100010100110", "00010101110000011110011100110110110111111000111100", "01000110011101111110011111111000000010000101011101", "11000000001101010001011011111111010110101000000011", "00011010001110110110010100111001010100111010000111", "11011001010100010010000010111000011100010111000101", "11100010110111101110100100011100110110000010110011", "11011001100111110011110010010101110000001110011010", "11111011011111111100011111101010100011001001001111", "11000101001010001001011011010110001110000110101101", "10110011110001001100111101011001101000101101111100", "10100011101010100101100101010010111010100010011111", "11101000000001000010001101011010011010011101010100", "11110101110000100010010100110110100011111001000110", "00110000101111011000111110011101001100101101110000", "00010110010111001001111001001010110001110100101010", "11001000101000100110000100010000111001010101000001", "01111010000101111101111001111001101110010011101111", "01011110111010111110000110111000000101000100100000", "01010111010011011011000110011011001010010100000011", "00111111011111100011100011011001110101101101000101", "00010100000101001101001010100001101011110001101101", "10011000000110010010111011000001001111111010000011", "11101011111010001111011101100111110001111111111100", "00011010011011010000010011010111110001001000100111", "10001000011101111011100011001010011101110101100000", "00100011011101111000000110101101000101010100110010", "00110001111001101000010010100001110011101101111000", "11110010100011001100000100100000111011000000111010", "11110010010000101101110100001101010111011001100101", "11011110000111111100010010101110000100101110111001", "11000011110110011100001011000010111101001010101011", "00111111110010010011001100111001001100100110010010", "11100011011111111000000010001000011110000010111110", "00011011011000000110111000000101101011111010001111", "01010001110010100011111111100001001001000100010000", "11101110111101010111011101001110101001010001010010", "11010000101000100010011001110010000100011110110000", "01110101001101100000000000100000100010010011011111", "00111110000111000000011010101110010000101111000011", "01111100100100000101000000000011101101000011111100", "00110111001100010011100000001100110011000011111001", "00111101100000010111111111010010010110100011010101", "00010100101000111101100101000001010010111010111010", "11101110000101010100101000011110101000110101011001", "01101101101010100000011001100000100101010010100010", "11001001000000110000100010000100010001010101001100"};
    vector<string> ciphertexts = {"01010010100011111110101001100101010001010010111000", "10101111110011100101001010001111101110110100000111", "11101110101110101110001011000001100010010100101011", "10111111101000001100010010000100111100111011100100", "00111100110110011000010001000000011000111011101000", "11100100011000000010100010000111001110001011001100", "00011001101001011110110011101011100011101110100100", "11000100110001100110101011001101101101000011011001", "01001010000100111110110000100101010110010011000101", "11001001101011001010000001011011011011110100111110", "11001100010100010001110100100010000010111110011011", "00111101110101001110111010010010000010001001000000", "00011000011100001101100101111100111111100111110101", "00000100110011100110101111101000110110010101010101", "00010000100010001101001001001001000000000010011110", "11010101111110110011011101001000100100011000000010", "11111001101001100010111011101011110111101111011110", "00010110010111110110111011100100000000101100011111", "00011010001110001001010110010111100101100010110010", "01011011001010011011101001000110011110000010011011", "11001001010011001001110100001011011010010000110101", "11010101001101010010101101100101001000000001011101", "00110011000110100011001100000100100001111011011101", "01110110011100111101010110100100111010000101110111", "11110111000110111100110000110111110111011111010111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"01010010100011111110101001100101010001010010111000", "10101111110011100101001010001111101110110100000111", "11101110101110101110001011000001100010010100101011", "10111111101000001100010010000100111100111011100100", "00111100110110011000010001000000011000111011101000", "11100100011000000010100010000111001110001011001100", "00011001101001011110110011101011100011101110100100", "11000100110001100110101011001101101101000011011001", "01001010000100111110110000100101010110010011000101", "11001001101011001010000001011011011011110100111110", "11001100010100010001110100100010000010111110011011", "00111101110101001110111010010010000010001001000000", "00011000011100001101100101111100111111100111110101", "00000100110011100110101111101000110110010101010101", "00010000100010001101001001001001000000000010011110", "11010101111110110011011101001000100100011000000010", "11111001101001100010111011101011110111101111011110", "00010110010111110110111011100100000000101100011111", "00011010001110001001010110010111100101100010110010", "01011011001010011011101001000110011110000010011011", "11001001010011001001110100001011011010010000110101", "11010101001101010010101101100101001000000001011101", "00110011000110100011001100000100100001111011011101", "01110110011100111101010110100100111010000101110111", "11110111000110111100110000110111110111011111010111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> plaintexts = {"11110100001010011010010110011100110010101111001100", "01101001001011111101111010010001001010100100000000", "00001111011000111000110001010010101000000100110100", "10101011001011100000110001010000011001000010101101", "01000001000001101100110100011111110101001010000101", "11011011001000110000111101011110001001011111011100", "00011011110111100011101010010101100100000111110010", "10101000111101110000011011101011010010010011000101", "00101101000011111001100111100100111010001001100011", "01101001110011111101011001110000110101001101100011", "10100001011100010100001100010010000010101000101011", "10100000011011110100101011011111100111110111011001", "01111000101110100111001110001100011111000100101110", "11001110001010000101111101100001111100011001000101", "01010001010010011001010110011000000110100111110010", "10010011000010100010011011111000101100010101111101", "01001101111101100111001110110111111000010010011100", "10110111100100011110101001111111100111110111000011", "00000111011000011101110010111010011010110010011100", "01100100000001011001010110100011100001110001000000", "01110101100100000011100010111110110100010001101110", "10111101110011101010010100111101111100011101000101", "00010011110111000110101001111101010110110001011010", "10110100010010001110000011000100101100100110101011", "00110001101100000111111111001011000100111100001101", "01011101101110010010101100110000001011111111101011", "11101000100101100100001110110011001100011010100010", "01110101011100000011000001011111001011111000001101", "11010010100101111011100101001110000010101100101011", "10111100110100001010110011110000011001000010110111", "10001111101101011100000011010111010010100000010011", "11000111100111001110100101110001110111101010110010", "01111110001011110101101001110110001000001111110001", "11100010010001101111000011011100001100011110111000", "00100000000001010100001110111100100110101100110111", "11010000001111011001010100110110100010100011101110", "10000101011001010111001110111000010010100100001001", "00011000100000110000000001010100010101000110100110", "11011010011000101101101001110100111001001001101000", "10101010011011111101100101111010101001010100011001", "11011001101110111101000011001111110010011000000000", "10111111011001001000100101000101011100010010000000", "00011000011000110000100010110101101010101111000101", "00110000010010100001101100111011010101000001000000", "01101010100100101110110010110001000100001100110111", "00001001111101101010010110101000111111001111101011", "01011100010000110100111111000000011010000010100110", "11010001001000111001110011111011000111111100011100"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> plaintexts = {"11110100001010011010010110011100110010101111001100", "01101001001011111101111010010001001010100100000000", "00001111011000111000110001010010101000000100110100", "10101011001011100000110001010000011001000010101101", "01000001000001101100110100011111110101001010000101", "11011011001000110000111101011110001001011111011100", "00011011110111100011101010010101100100000111110010", "10101000111101110000011011101011010010010011000101", "00101101000011111001100111100100111010001001100011", "01101001110011111101011001110000110101001101100011", "10100001011100010100001100010010000010101000101011", "10100000011011110100101011011111100111110111011001", "01111000101110100111001110001100011111000100101110", "11001110001010000101111101100001111100011001000101", "01010001010010011001010110011000000110100111110010", "10010011000010100010011011111000101100010101111101", "01001101111101100111001110110111111000010010011100", "10110111100100011110101001111111100111110111000011", "00000111011000011101110010111010011010110010011100", "01100100000001011001010110100011100001110001000000", "01110101100100000011100010111110110100010001101110", "10101011000011001111001001111011110111101011000111", "00010011110111000110101001111101010110110001011010", "10110100010010001110000011000100101100100110101011", "00110001101100000111111111001011000100111100001101", "01011101101110010010101100110000001011111111101011", "11101000100101100100001110110011001100011010100010", "01110101011100000011000001011111001011111000001101", "11010010100101111011100101001110000010101100101011", "10111100110100001010110011110000011001000010110111", "10001111101101011100000011010111010010100000010011", "11000111100111001110100101110001110111101010110010", "01111110001011110101101001110110001000001111110001", "11100010010001101111000011011100001100011110111000", "00100000000001010100001110111100100110101100110111", "11010000001111011001010100110110100010100011101110", "10000101011001010111001110111000010010100100001001", "00011000100000110000000001010100010101000110100110", "11011010011000101101101001110100111001001001101000", "10101010011011111101100101111010101001010100011001", "11011001101110111101000011001111110010011000000000", "10111111011001001000100101000101011100010010000000", "00011000011000110000100010110101101010101111000101", "00110000010010100001101100111011010101000001000000", "01101010100100101110110010110001000100001100110111", "00001001111101101010010110101000111111001111101011", "01011100010000110100111111000000011010000010100110", "11010001001000111001110011111011000111111100011100"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> plaintexts = {"11110100001010011010010110011100110010101111001100", "01101001001011111101111010010001001010100100000000", "00001111011000111000110001010010101000000100110100", "10101011001011100000110001010000011001000010101101", "01000001000001101100110100011111110101001010000101", "11010110111100010001010111110010010101011011101011", "00011011110111100011101010010101100100000111110010", "10101000111101110000011011101011010010010011000101", "00101101000011111001100111100100111010001001100011", "01101001110011111101011001110000110101001101100011", "10100001011100010100001100010010000010101000101011", "10100000011011110100101011011111100111110111011001", "01111000101110100111001110001100011111000100101110", "11001110001010000101111101100001111100011001000101", "01010001010010011001010110011000000110100111110010", "10010011000010100010011011111000101100010101111101", "01001101111101100111001110110111111000010010011100", "10110111100100011110101001111111100111110111000011", "00000111011000011101110010111010011010110010011100", "01100100000001011001010110100011100001110001000000", "01110101100100000011100010111110110100010001101110", "10101011000011001111001001111011110111101011000111", "00010011110111000110101001111101010110110001011010", "10110100010010001110000011000100101100100110101011", "00110001101100000111111111001011000100111100001101", "01011101101110010010101100110000001011111111101011", "11101000100101100100001110110011001100011010100010", "01110101011100000011000001011111001011111000001101", "11010010100101111011100101001110000010101100101011", "10111100110100001010110011110000011001000010110111", "10001111101101011100000011010111010010100000010011", "11000111100111001110100101110001110111101010110010", "01111110001011110101101001110110001000001111110001", "11100010010001101111000011011100001100011110111000", "00100000000001010100001110111100100110101100110111", "11010000001111011001010100110110100010100011101110", "10000101011001010111001110111000010010100100001001", "00011000100000110000000001010100010101000110100110", "11011010011000101101101001110100111001001001101000", "10101010011011111101100101111010101001010100011001", "11011001101110111101000011001111110010011000000000", "10111111011001001000100101000101011100010010000000", "00011000011000110000100010110101101010101111000101", "00110000010010100001101100111011010101000001000000", "01101010100100101110110010110001000100001100110111", "00001001111101101010010110101000111111001111101011", "01011100010000110100111111000000011010000010100110", "11010001001000111001110011111011000111111100011100"};
    vector<string> ciphertexts = {"00101010111011010110000010101110001011011011111110", "10001111100011010101000010101010111111010011000000", "01111111101101011000011000100000111011011100011001", "11000101000110101111111110100111011101110011000000", "10100110011111101011011010111110100110110000011100", "00010000111011001001101001010011000101101101110111", "11110011110010110101110011010110000011111101010001", "00000101111001111100101001101100110000101011101110", "01001101110011101110001111001010010101100001001111", "10011111110000100000100000101101001100111110110111", "01110110001100111100001111011001101011100111110111", "10110111000010110001001101000010001100111001010001", "01111110101010111000111111101101011110000011101011", "01110101111010101100100101100010100000110110011111", "10110111111010110001101110100011110011010000110010", "11010001101001110100100101100000010001110000000110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> plaintexts = {"11110100001010011010010110011100110010101111001100", "01101001001011111101111010010001001010100100000000", "00001111011000111000110001010010101000000100110100", "10101011001011100000110001010000011001000010101101", "01000001000001101100110100011111110101001010000101", "11010110111100010001010111110010010101011011101011", "00011011110111100011101010010101100100000111110010", "10101000111101110000011011101011010010010011000101", "00101101000011111001100111100100111010001001100011", "01101001110011111101011001110000110101001101100011", "10100001011100010100001100010010000010101000101011", "10100000011011110100101011011111100111110111011001", "01111000101110100111001110001100011111000100101110", "11001110001010000101111101100001111100011001000101", "01010001010010011001010110011000000110100111110010", "11011100000001100100101010001110010100010010100011", "01001101111101100111001110110111111000010010011100", "10110111100100011110101001111111100111110111000011", "00000111011000011101110010111010011010110010011100", "01100100000001011001010110100011100001110001000000", "01110101100100000011100010111110110100010001101110", "10101011000011001111001001111011110111101011000111", "00010011110111000110101001111101010110110001011010", "10110100010010001110000011000100101100100110101011", "00110001101100000111111111001011000100111100001101", "01011101101110010010101100110000001011111111101011", "11101000100101100100001110110011001100011010100010", "01110101011100000011000001011111001011111000001101", "11010010100101111011100101001110000010101100101011", "10111100110100001010110011110000011001000010110111", "10001111101101011100000011010111010010100000010011", "11000111100111001110100101110001110111101010110010", "01111110001011110101101001110110001000001111110001", "11100010010001101111000011011100001100011110111000", "00100000000001010100001110111100100110101100110111", "11010000001111011001010100110110100010100011101110", "10000101011001010111001110111000010010100100001001", "00011000100000110000000001010100010101000110100110", "11011010011000101101101001110100111001001001101000", "10101010011011111101100101111010101001010100011001", "11011001101110111101000011001111110010011000000000", "10111111011001001000100101000101011100010010000000", "00011000011000110000100010110101101010101111000101", "00110000010010100001101100111011010101000001000000", "01101010100100101110110010110001000100001100110111", "00001001111101101010010110101000111111001111101011", "01011100010000110100111111000000011010000010100110", "11010001001000111001110011111011000111111100011100"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> plaintexts = {"11001001011001111100101100110001010110011000011000", "11010001000110111110100000100010001000011100001111", "10001110010101000110111000101010101111010000111011", "01111011100000101110110100110111011000011111111001", "11110110001001000110111000110010010011011101000111", "11010110000001000110100100001010010100111010000100", "01111100010100100001011001001001000110010110111011", "00010010011100100010001010111100111011001100101100", "00101100000101110000101100000011001100001010101011", "01011110110011100101010101100111100111000110001000", "01110111110111101101100110110100000111010010010100", "01010111111010001110011000100011011100000010001110", "11010111101111100001110011001101111001110100000111", "01110101111111010111100111100100011010101110010111", "01001011100110000101000001011011101101101000010000", "00101110001101001010101101010011010001110110101000", "00001110000000101001010011000100001010100110110010", "00100101101110000110010010101110010000110010000111", "10101111110011100001110011010101000101111001111011", "10010000100011011011100111010110000000111100100100", "10001000111100011001101011000101011110111000110011", "00000111001001000010011110000000110001100010110100", "00100010011010001001111111010000001110111011000101", "10001111111011100001101111101101000010011110111000", "10010100111111010111110000001101000011001111101110", "10111101111011011111000011011110100011011011110010", "11001111001101001010111010111010001000010111010001", "11110001010100011000011100000101111111010001010110", "10110100110010110100001110011010011000011111110100", "00110101001001111100110010110011010000100111111110", "10011000101000010100100010001110011100000010000011", "10011111011100011011001111110000000010001011000001", "01101101011101111100101110010011101011001101000001", "00110010001110000100110110011011001100000001110101", "00010101000001111100101110001011010111000000111101", "00101010010001000110111010001000010010000101100010", "00011110101011111100111000110011010001011001000000", "00010101001000110000000111001110010000011101101111", "10111111011101010111111010001101000010110001010000", "10111000011010101111111110100101011110010111011011", "10011111010101010111100110110101000101010110010011", "00110111101111110100001011100000110001001101011100", "00111110100110011111000110100100001010001001011010", "00010010111100111111101010110000001110010100101101", "10100000000101101101110010110110000000010011001100", "01000101011001100001110010000100011010000001111111", "01111011000000110011010100111011101101000111111000", "11100111001001010111100110101101111001011011101111"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> plaintexts = {"11001001011001111100101100110001010110011000011000", "11010001000110111110100000100010001000011100001111", "10001110010101000110111000101010101111010000111011", "01111011100000101110110100110111011000011111111001", "11110110001001000110111000110010010011011101000111", "11010110000001000110100100001010010100111010000100", "01111100010100100001011001001001000110010110111011", "00010010011100100010001010111100111011001100101100", "00101100000101110000101100000011001100001010101011", "01011110110011100101010101100111100111000110001000", "01110111110111101101100110110100000111010010010100", "01010111111010001110011000100011011100000010001110", "11010111101111100001110011001101111001110100000111", "01110101111111010111100111100100011010101110010111", "01001011100110000101000001011011101101101000010000", "00101110001101001010101101010011010001110110101000", "00001110000000101001010011000100001010100110110010", "00100101101110000110010010101110010000110010000111", "10101111110011100001110011010101000101111001111011", "10010000100011011011100111010110000000111100100100", "10001000111100011001101011000101011110111000110011", "00000111001001000010011110000000110001100010110100", "00100010011010001001111111010000001110111011000101", "10001111111011100001101111101101000010011110111000", "10010100111111010111110000001101000011001111101110", "10111101111011011111000011011110100011011011110010", "11001111001101001010111010111010001000010111010001", "11110001010100011000011100000101111111010001010110", "10110100110010110100001110011010011000011111110100", "00110101001001111100110010110011010000100111111110", "10011000101000010100100010001110011100000010000011", "10011111011100011011001111110000000010001011000001", "01101101011101111100101110010011101011001101000001", "00110010001110000100110110011011001100000001110101", "00010101000001111100101110001011010111000000111101", "00101010010001000110111010001000010010000101100010", "00011110101011111100111000110011010001011001000000", "00010101001000110000000111001110010000011101101111", "11110100001000100111111101100110011010110111001110", "10111000011010101111111110100101011110010111011011", "10011111010101010111100110110101000101010110010011", "00110111101111110100001011100000110001001101011100", "00111110100110011111000110100100001010001001011010", "00010010111100111111101010110000001110010100101101", "10100000000101101101110010110110000000010011001100", "01000101011001100001110010000100011010000001111111", "01111011000000110011010100111011101101000111111000", "11100111001001010111100110101101111001011011101111"};
    vector<string> ciphertexts = {"00011001110110001100000010010101101111101001111111", "10011000001000100111011100010011111011100110101100", "10010011101011101011100011101110111010100010000011", "00111001111110001100011110101101101000001110111100", "00100110100110110110010110010110101010101100100000", "10110001001100101111101111000000011011110010110000", "01100001101010001100000010001101010011100100000011", "11000011111010111010010110100100110000111110010011", "10111000000101000100100010000100100000110110110110", "10010100011111100100001110010000100100101011000001", "00111110111001110100011010000101110100101000110111", "11111101100011101000110000011011000111111000010100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> plaintexts = {"11001001011001111100101100110001010110011000011000", "11010001000110111110100000100010001000011100001111", "10001110010101000110111000101010101111010000111011", "01111011100000101110110100110111011000011111111001", "11110110001001000110111000110010010011011101000111", "11010110000001000110100100001010010100111010000100", "01111100010100100001011001001001000110010110111011", "00010010011100100010001010111100111011001100101100", "00101100000101110000101100000011001100001010101011", "01011110110011100101010101100111100111000110001000", "01110111110111101101100110110100000111010010010100", "01010111111010001110011000100011011100000010001110", "11010111101111100001110011001101111001110100000111", "01110101111111010111100111100100011010101110010111", "01001011100110000101000001011011101101101000010000", "00101110001101001010101101010011010001110110101000", "00001110000000101001010011000100001010100110110010", "00100101101110000110010010101110010000110010000111", "10101111110011100001110011010101000101111001111011", "10011110101101010001011001101100010010101001101011", "10001000111100011001101011000101011110111000110011", "00000111001001000010011110000000110001100010110100", "00100010011010001001111111010000001110111011000101", "10001111111011100001101111101101000010011110111000", "10010100111111010111110000001101000011001111101110", "10111101111011011111000011011110100011011011110010", "11001111001101001010111010111010001000010111010001", "11110001010100011000011100000101111111010001010110", "10110100110010110100001110011010011000011111110100", "00110101001001111100110010110011010000100111111110", "10011000101000010100100010001110011100000010000011", "10011111011100011011001111110000000010001011000001", "01101101011101111100101110010011101011001101000001", "00110010001110000100110110011011001100000001110101", "00010101000001111100101110001011010111000000111101", "00101010010001000110111010001000010010000101100010", "00011110101011111100111000110011010001011001000000", "00010101001000110000000111001110010000011101101111", "11110100001000100111111101100110011010110111001110", "10111000011010101111111110100101011110010111011011", "10011111010101010111100110110101000101010110010011", "00110111101111110100001011100000110001001101011100", "00111110100110011111000110100100001010001001011010", "00010010111100111111101010110000001110010100101101", "10100000000101101101110010110110000000010011001100", "01000101011001100001110010000100011010000001111111", "01111011000000110011010100111011101101000111111000", "11100111001001010111100110101101111001011011101111"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> plaintexts = {"11001001011001111100101100110001010110011000011000", "11010001000110111110100000100010001000011100001111", "10001110010101000110111000101010101111010000111011", "01111011100000101110110100110111011000011111111001", "11110110001001000110111000110010010011011101000111", "11010110000001000110100100001010010100111010000100", "01111100010100100001011001001001000110010110111011", "00010010011100100010001010111100111011001100101100", "00101100000101110000101100000011001100001010101011", "01011110110011100101010101100111100111000110001000", "01110111110111101101100110110100000111010010010100", "01010111111010001110011000100011011100000010001110", "11010111101111100001110011001101111001110100000111", "01110101111111010111100111100100011010101110010111", "01001011100110000101000001011011101101101000010000", "00101110001101001010101101010011010001110110101000", "00001110000000101001010011000100001010100110110010", "00100101101110000110010010101110010000110010000111", "10101111110011100001110011010101000101111001111011", "10011110101101010001011001101100010010101001101011", "10001000111100011001101011000101011110111000110011", "00000111001001000010011110000000110001100010110100", "10101111110011001001100111000110010010110101110001", "10001111111011100001101111101101000010011110111000", "10010100111111010111110000001101000011001111101110", "10111101111011011111000011011110100011011011110010", "11001111001101001010111010111010001000010111010001", "11110001010100011000011100000101111111010001010110", "10110100110010110100001110011010011000011111110100", "00110101001001111100110010110011010000100111111110", "10011000101000010100100010001110011100000010000011", "10011111011100011011001111110000000010001011000001", "01101101011101111100101110010011101011001101000001", "00110010001110000100110110011011001100000001110101", "00010101000001111100101110001011010111000000111101", "00101010010001000110111010001000010010000101100010", "00011110101011111100111000110011010001011001000000", "00010101001000110000000111001110010000011101101111", "11110100001000100111111101100110011010110111001110", "10111000011010101111111110100101011110010111011011", "10011111010101010111100110110101000101010110010011", "00110111101111110100001011100000110001001101011100", "00111110100110011111000110100100001010001001011010", "00010010111100111111101010110000001110010100101101", "10100000000101101101110010110110000000010011001100", "01000101011001100001110010000100011010000001111111", "01111011000000110011010100111011101101000111111000", "11100111001001010111100110101101111001011011101111"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> plaintexts = {"01000001110101011111110111100111110100110000100011", "01001111011001010111100101101011100011011100001111", "10111011010010110001110001100011000001111011010100", "11000101010111001101000000000110001010001111010110", "01010011101110100001110000111100100000010111010010", "10100110010010110000001101100111000111100101111001", "11001110011001010110110010011100100010101011111000", "00001101001011111111111101010111010101100100101001", "00100111101111110011011101101110110110010001110100", "11000011110110101000110011011010010110110010100001", "00000000001101011110110110001111111111100000111100", "11101001000110111001011110000011011011011001001010", "10101011010100010001000110111111101101100001101100", "11110101110001001111001011010100011000010010010111", "10000001110000011101100110000110001110010100110001", "01101000000110111000001001110100011010101110111101", "01100101101001000110001000110010101110110111100100", "00011101001101011111001010001011111001111110010001", "11100111101010110001001100001111001100110101100110", "01100011001000100011111011101110110010001010010011", "01001110010100001111111000010111101011100111110100", "11001111101001001100101000011110011010010011111001", "10101001110011100000000010010111011000110010101110", "00100110011111101001000111101100001110101001110101", "10100111011111101000010000011011001111011110000010", "00101101010001110010110101110110100110001101011011", "00101011110000010111000110101010111010110000101100", "01010011010100001110000100010011101101111001011001", "11100101001101000000001000100111111001100110100100", "10111011101000011110000101001100001100010101011111", "00001100110110110111100100100011100001010100000010", "00011110101101001001100011111000110101110011110011", "00010000000001000001110001110100100010011111011111", "11100100001010100111100101111100000000111000000100", "10011100101110111110100111000101010111110001110001", "10010001000001000000100110000011100011101000101000", "01010010010011101001101001001000010100100111111001", "01111000110111100101001001110001110111010010100100", "10011010001111011011010100011001001011001100000110", "11111001001010100110011001111000000110100110101001", "01011111111001101001010110011001111100010100000010", "10110110110010001110111110010101011000101101110100", "00111010011101110001101000100100101101000011011010", "11011110000100101010000110010000001101100000001111", "10101010000101111000101011000010011011100110101001", "01000010111001101000101010011101111010001010101111", "11110100100000100110100110101001101110010101010010", "10111000011110000110101100011001001111000001011000", "00111100111100010100011011111000110001111110101101", "00110111110010001111101001100010011001011010000011"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> plaintexts = {"01000001110101011111110111100111110100110000100011", "01001111011001010111100101101011100011011100001111", "10111011010010110001110001100011000001111011010100", "11000101010111001101000000000110001010001111010110", "01010011101110100001110000111100100000010111010010", "10100110010010110000001101100111000111100101111001", "11001110011001010110110010011100100010101011111000", "00001101001011111111111101010111010101100100101001", "00100111101111110011011101101110110110010001110100", "11000011110110101000110011011010010110110010100001", "00000000001101011110110110001111111111100000111100", "11101001000110111001011110000011011011011001001010", "10101011010100010001000110111111101101100001101100", "11110101110001001111001011010100011000010010010111", "10000001110000011101100110000110001110010100110001", "01101000000110111000001001110100011010101110111101", "01100101101001000110001000110010101110110111100100", "00011101001101011111001010001011111001111110010001", "11000001001110011000011001110101100010100110100000", "01100011001000100011111011101110110010001010010011", "01001110010100001111111000010111101011100111110100", "11001111101001001100101000011110011010010011111001", "10101001110011100000000010010111011000110010101110", "00100110011111101001000111101100001110101001110101", "10100111011111101000010000011011001111011110000010", "00101101010001110010110101110110100110001101011011", "00101011110000010111000110101010111010110000101100", "01010011010100001110000100010011101101111001011001", "11100101001101000000001000100111111001100110100100", "10111011101000011110000101001100001100010101011111", "00001100110110110111100100100011100001010100000010", "00011110101101001001100011111000110101110011110011", "00010000000001000001110001110100100010011111011111", "11100100001010100111100101111100000000111000000100", "10011100101110111110100111000101010111110001110001", "10010001000001000000100110000011100011101000101000", "01010010010011101001101001001000010100100111111001", "01111000110111100101001001110001110111010010100100", "10011010001111011011010100011001001011001100000110", "11111001001010100110011001111000000110100110101001", "01011111111001101001010110011001111100010100000010", "10110110110010001110111110010101011000101101110100", "00111010011101110001101000100100101101000011011010", "11011110000100101010000110010000001101100000001111", "10101010000101111000101011000010011011100110101001", "01000010111001101000101010011101111010001010101111", "11110100100000100110100110101001101110010101010010", "10111000011110000110101100011001001111000001011000", "00111100111100010100011011111000110001111110101101", "00110111110010001111101001100010011001011010000011"};
    vector<string> ciphertexts = {"11101000011001001100100011101110001001111000010111", "11101110111000101001010000110010010101000101100000", "00001010100001110010111110000110110101100110110101", "10010110011100110000010010001011000010001100010101", "01100010010111010110000110000011100000101011001110", "01111110100000100000010011010100100011100000010011", "11100011010111010111010001110100100001011100111001", "01101100111011011110010100001111110111000111100010", "00100000000101111110011110111111010110010011101000", "10001011011100110001101110001111000100010010111000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> plaintexts = {"01000001110101011111110111100111110100110000100011", "01001111011001010111100101101011100011011100001111", "10111011010010110001110001100011000001111011010100", "11000101010111001101000000000110001010001111010110", "10010000010011010110001011100010111101110100101111", "10100110010010110000001101100111000111100101111001", "11001110011001010110110010011100100010101011111000", "00001101001011111111111101010111010101100100101001", "00100111101111110011011101101110110110010001110100", "11000011110110101000110011011010010110110010100001", "00000000001101011110110110001111111111100000111100", "11101001000110111001011110000011011011011001001010", "10101011010100010001000110111111101101100001101100", "11110101110001001111001011010100011000010010010111", "10000001110000011101100110000110001110010100110001", "01101000000110111000001001110100011010101110111101", "01100101101001000110001000110010101110110111100100", "00011101001101011111001010001011111001111110010001", "11000001001110011000011001110101100010100110100000", "01100011001000100011111011101110110010001010010011", "01001110010100001111111000010111101011100111110100", "11001111101001001100101000011110011010010011111001", "10101001110011100000000010010111011000110010101110", "00100110011111101001000111101100001110101001110101", "10100111011111101000010000011011001111011110000010", "00101101010001110010110101110110100110001101011011", "00101011110000010111000110101010111010110000101100", "01010011010100001110000100010011101101111001011001", "11100101001101000000001000100111111001100110100100", "10111011101000011110000101001100001100010101011111", "00001100110110110111100100100011100001010100000010", "00011110101101001001100011111000110101110011110011", "00010000000001000001110001110100100010011111011111", "11100100001010100111100101111100000000111000000100", "10011100101110111110100111000101010111110001110001", "10010001000001000000100110000011100011101000101000", "01010010010011101001101001001000010100100111111001", "01111000110111100101001001110001110111010010100100", "10011010001111011011010100011001001011001100000110", "11111001001010100110011001111000000110100110101001", "01011111111001101001010110011001111100010100000010", "10110110110010001110111110010101011000101101110100", "00111010011101110001101000100100101101000011011010", "11011110000100101010000110010000001101100000001111", "10101010000101111000101011000010011011100110101001", "01000010111001101000101010011101111010001010101111", "11110100100000100110100110101001101110010101010010", "10111000011110000110101100011001001111000001011000", "00111100111100010100011011111000110001111110101101", "00110111110010001111101001100010011001011010000011"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> plaintexts = {"01000001110101011111110111100111110100110000100011", "01001111011001010111100101101011100011011100001111", "10111011010010110001110001100011000001111011010100", "11000101010111001101000000000110001010001111010110", "10010000010011010110001011100010111101110100101111", "10100110010010110000001101100111000111100101111001", "11001110011001010110110010011100100010101011111000", "00001101001011111111111101010111010101100100101001", "00100111101111110011011101101110110110010001110100", "11000011110110101000110011011010010110110010100001", "00000000001101011110110110001111111111100000111100", "00011010001111010000001111000111111110110111001011", "10101011010100010001000110111111101101100001101100", "11110101110001001111001011010100011000010010010111", "10000001110000011101100110000110001110010100110001", "01101000000110111000001001110100011010101110111101", "01100101101001000110001000110010101110110111100100", "00011101001101011111001010001011111001111110010001", "11000001001110011000011001110101100010100110100000", "01100011001000100011111011101110110010001010010011", "01001110010100001111111000010111101011100111110100", "11001111101001001100101000011110011010010011111001", "10101001110011100000000010010111011000110010101110", "00100110011111101001000111101100001110101001110101", "10100111011111101000010000011011001111011110000010", "00101101010001110010110101110110100110001101011011", "00101011110000010111000110101010111010110000101100", "01010011010100001110000100010011101101111001011001", "11100101001101000000001000100111111001100110100100", "10111011101000011110000101001100001100010101011111", "00001100110110110111100100100011100001010100000010", "00011110101101001001100011111000110101110011110011", "00010000000001000001110001110100100010011111011111", "11100100001010100111100101111100000000111000000100", "10011100101110111110100111000101010111110001110001", "10010001000001000000100110000011100011101000101000", "01010010010011101001101001001000010100100111111001", "01111000110111100101001001110001110111010010100100", "10011010001111011011010100011001001011001100000110", "11111001001010100110011001111000000110100110101001", "01011111111001101001010110011001111100010100000010", "10110110110010001110111110010101011000101101110100", "00111010011101110001101000100100101101000011011010", "11011110000100101010000110010000001101100000001111", "10101010000101111000101011000010011011100110101001", "01000010111001101000101010011101111010001010101111", "11110100100000100110100110101001101110010101010010", "10111000011110000110101100011001001111000001011000", "00111100111100010100011011111000110001111110101101", "00110111110010001111101001100010011001011010000011"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> plaintexts = {"00110110111001110101010010100111110010100000110000", "11000101000111011011000000010100001100010000110001", "10001101010110101000110001110011000001011110011010", "10010100000111000011111111100011100111000001111111", "10101000001000000110110111000010001011000001001001", "11101101100111111101101110111001100100000100111011", "11010001101000111000100110011000001000000100001101", "01001111011001001011000011111101110001100101110100", "10111100100111100101010001001110001111010101110101", "11110100110110010110100000101001000010011011011110", "01000100101000010001101010101110011001110011001001", "11100110010110100111000111101010001100010010000110", "00010101101000001001010101011001110010100010000111", "01011101111001111010100100111110111111101100101100", "01111000100111010100100010001111110101110011111111", "10001001010101001000101111100011001011011001011111", "11000001000100111011011110000100000110010111110100", "00110010111010010101001100110111111000100111110101", "10101100001011100110101001010010000001000110001100", "10010000000100100011100001110011101101000110111010", "10000111001100101000000111000110011100010000100100", "10111011000011101101001111100111110000010000010010", "10100010010010000110000001110111010110001111110111", "00011001111101011011100010100011100101110001011101", "11101010000011110101110000010000011011000001011100", "01101001001001010101100000100100001001010011101011", "00000100000110001000010111110010001110000010010011", "11110111111000100110000101000001110000110010010010", "01001100010111111011100110010101000011001100111000", "01010101000110010000101000000101100101010011011101", "00001101001110010101110100100110100110110000100110", "00101000010000111011110010010111101100101111110101", "00110001000001010000111100000111001010110000010000", "10010011111111100110010001000011011111010001011111", "01100000000001001000000011110000100001100001011110", "01011001111000011110101011111101010000111110100110", "11100010010111000011001000101001100011000000001100", "11000111001001101101001110011000101001011111011111", "11111011000110101000000110111001000101011111101001", "10101010000110110000111001001110101110001110100111", "11010000011110010110101010101011110101011110110000", "10111101010001001011011101111101110010001111001000", "10011000001111100101011011001100111000010000011011", "10000001011110001110010101011100011110001111111110", "00100011100000111000111000011000001011101110110001", "10110001110111011011111101001111000001001001101001", "00010011001001101101010000001011010100101000100110", "10001101111000011110110101101110101101001001011111", "11100000110111000011000010111000101010011000100111", "10101000100110110000110011011111100111010110001100"};
    vector<string> ciphertexts = {"11011100001100100100100111001001110111011000000011", "10010100011101010111010110101110111010010110101000", "11000101011101001111101001011001010001000111100110", "01100111100011111001000100011101000100100110101001", "11111001010010001010100001111000111101000111010000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> plaintexts = {"00110110111001110101010010100111110010100000110000", "11000101000111011011000000010100001100010000110001", "10001101010110101000110001110011000001011110011010", "10010100000111000011111111100011100111000001111111", "10101000001000000110110111000010001011000001001001", "11101101100111111101101110111001100100000100111011", "11010001101000111000100110011000001000000100001101", "01001111011001001011000011111101110001100101110100", "10111100100111100101010001001110001111010101110101", "11110100110110010110100000101001000010011011011110", "01000100101000010001101010101110011001110011001001", "11100110010110100111000111101010001100010010000110", "00010101101000001001010101011001110010100010000111", "01011101111001111010100100111110111111101100101100", "01111000100111010100100010001111110101110011111111", "10001001010101001000101111100011001011011001011111", "11000001000100111011011110000100000110010111110100", "00110010111010010101001100110111111000100111110101", "10011111011010111000110011111011000101001001011011", "10010000000100100011100001110011101101000110111010", "10000111001100101000000111000110011100010000100100", "10111011000011101101001111100111110000010000010010", "10100010010010000110000001110111010110001111110111", "00011001111101011011100010100011100101110001011101", "11101010000011110101110000010000011011000001011100", "01101001001001010101100000100100001001010011101011", "00000100000110001000010111110010001110000010010011", "11110111111000100110000101000001110000110010010010", "01001100010111111011100110010101000011001100111000", "01010101000110010000101000000101100101010011011101", "00001101001110010101110100100110100110110000100110", "00101000010000111011110010010111101100101111110101", "00110001000001010000111100000111001010110000010000", "10010011111111100110010001000011011111010001011111", "01100000000001001000000011110000100001100001011110", "01011001111000011110101011111101010000111110100110", "11100010010111000011001000101001100011000000001100", "11000111001001101101001110011000101001011111011111", "11111011000110101000000110111001000101011111101001", "10101010000110110000111001001110101110001110100111", "11010000011110010110101010101011110101011110110000", "10111101010001001011011101111101110010001111001000", "10011000001111100101011011001100111000010000011011", "10000001011110001110010101011100011110001111111110", "00100011100000111000111000011000001011101110110001", "10110001110111011011111101001111000001001001101001", "00010011001001101101010000001011010100101000100110", "10001101111000011110110101101110101101001001011111", "11100000110111000011000010111000101010011000100111", "10101000100110110000110011011111100111010110001100"};
    vector<string> ciphertexts = {"11011100001100100100100111001001110111011000000011", "10010100011101010111010110101110111010010110101000", "11000101011101001111101001011001010001000111100110", "01100111100011111001000100011101000100100110101001", "11111001010010001010100001111000111101000111010000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> plaintexts = {"00110110111001110101010010100111110010100000110000", "11000101000111011011000000010100001100010000110001", "10001101010110101000110001110011000001011110011010", "10010100000111000011111111100011100111000001111111", "10101000001000000110110111000010001011000001001001", "11101101100111111101101110111001100100000100111011", "11010001101000111000100110011000001000000100001101", "01001111011001001011000011111101110001100101110100", "10111100100111100101010001001110001111010101110101", "11110100110110010110100000101001000010011011011110", "01000100101000010001101010101110011001110011001001", "11100110010110100111000111101010001100010010000110", "00010101101000001001010101011001110010100010000111", "01011101111001111010100100111110111111101100101100", "01111000100111010100100010001111110101110011111111", "10001001010101001000101111100011001011011001011111", "11000001000100111011011110000100000110010111110100", "00110010111010010101001100110111111000100111110101", "10011111011010111000110011111011000101001001011011", "10010000000100100011100001110011101101000110111010", "10000111001100101000000111000110011100010000100100", "10111011000011101101001111100111110000010000010010", "10100010010010000110000001110111010110001111110111", "00011001111101011011100010100011100101110001011101", "11101010000011110101110000010000011011000001011100", "01101001001001010101100000100100001001010011101011", "00000100000110001000010111110010001110000010010011", "11110111111000100110000101000001110000110010010010", "01001100010111111011100110010101000011001100111000", "01010101000110010000101000000101100101010011011101", "00101000100100101111001011011101011010000010010001", "00101000010000111011110010010111101100101111110101", "00110001000001010000111100000111001010110000010000", "10010011111111100110010001000011011111010001011111", "01100000000001001000000011110000100001100001011110", "01011001111000011110101011111101010000111110100110", "11100010010111000011001000101001100011000000001100", "11000111001001101101001110011000101001011111011111", "11111011000110101000000110111001000101011111101001", "10101010000110110000111001001110101110001110100111", "11010000011110010110101010101011110101011110110000", "10111101010001001011011101111101110010001111001000", "10011000001111100101011011001100111000010000011011", "10000001011110001110010101011100011110001111111110", "00100011100000111000111000011000001011101110110001", "10110001110111011011111101001111000001001001101001", "00010011001001101101010000001011010100101000100110", "10001101111000011110110101101110101101001001011111", "11100000110111000011000010111000101010011000100111", "10101000100110110000110011011111100111010110001100"};
    vector<string> ciphertexts = {"11011100001100100100100111001001110111011000000011", "10010100011101010111010110101110111010010110101000", "11000101011101001111101001011001010001000111100110", "01100111100011111001000100011101000100100110101001", "11111001010010001010100001111000111101000111010000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> plaintexts = {"00110110111001110101010010100111110010100000110000", "11000101000111011011000000010100001100010000110001", "10001101010110101000110001110011000001011110011010", "10010100000111000011111111100011100111000001111111", "10101000001000000110110111000010001011000001001001", "11101101100111111101101110111001100100000100111011", "11010001101000111000100110011000001000000100001101", "01001111011001001011000011111101110001100101110100", "10111100100111100101010001001110001111010101110101", "11110100110110010110100000101001000010011011011110", "01000100101000010001101010101110011001110011001001", "11100110010110100111000111101010001100010010000110", "00010101101000001001010101011001110010100010000111", "01011101111001111010100100111110111111101100101100", "01111000100111010100100010001111110101110011111111", "10001001010101001000101111100011001011011001011111", "11000001000100111011011110000100000110010111110100", "00110010111010010101001100110111111000100111110101", "10011111011010111000110011111011000101001001011011", "10010000000100100011100001110011101101000110111010", "10000111001100101000000111000110011100010000100100", "10111011000011101101001111100111110000010000010010", "10100010010010000110000001110111010110001111110111", "11011101000001001001111100010101111110100000010110", "11101010000011110101110000010000011011000001011100", "01101001001001010101100000100100001001010011101011", "00000100000110001000010111110010001110000010010011", "11110111111000100110000101000001110000110010010010", "01001100010111111011100110010101000011001100111000", "01010101000110010000101000000101100101010011011101", "00101000100100101111001011011101011010000010010001", "00101000010000111011110010010111101100101111110101", "00110001000001010000111100000111001010110000010000", "10010011111111100110010001000011011111010001011111", "01100000000001001000000011110000100001100001011110", "01011001111000011110101011111101010000111110100110", "11100010010111000011001000101001100011000000001100", "11000111001001101101001110011000101001011111011111", "11111011000110101000000110111001000101011111101001", "10101010000110110000111001001110101110001110100111", "11010000011110010110101010101011110101011110110000", "10111101010001001011011101111101110010001111001000", "10011000001111100101011011001100111000010000011011", "10000001011110001110010101011100011110001111111110", "00100011100000111000111000011000001011101110110001", "10110001110111011011111101001111000001001001101001", "00010011001001101101010000001011010100101000100110", "10001101111000011110110101101110101101001001011111", "11100000110111000011000010111000101010011000100111", "10101000100110110000110011011111100111010110001100"};
    vector<string> ciphertexts = {"11011100001100100100100111001001110111011000000011", "10010100011101010111010110101110111010010110101000", "11000101011101001111101001011001010001000111100110", "01100111100011111001000100011101000100100110101001", "11111001010010001010100001111000111101000111010000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> plaintexts = {"10110000001011010010010101011110001101010010110111", "10010000011110001101101011110001011001001111001001", "00101110000110011010000100001011101010010011001101", "00001110010011000101111010100100111110001110110011", "00100110101111011111000101000010110001000110001010", "00000110111010000000111011101101100101011011110100", "01111101010100111010001010111110100010010011100100", "01011101000001100101110100010001110110001110011010", "00111101001011111001111101111011010101100100100111", "00011101011110100110000011010100000001111001011001", "11110001110000010110110111111011010011010001010011", "11010001100101001001001001010100000111001100101101", "10101100100101010110101100110100111110010010010011", "10001100110000001001010010011011101010001111101101", "10010101001001001100000011011110010101011100010010", "10110101011100010011111101110001000001000001101100", "10111000010101000011100101101001010000101100000110", "10011000000000011100011011000110000100110001111000", "10100011110000110011110010101000110001011011000011", "10000011100101101100001100000111100101000110111101", "00110111100001110010011100110101100100001100111000", "00010111110100101101100010011010110000010001000110", "11100001110010000000000001110111101111101100001011", "11000001100111011111111111011000111011110001110101", "01100011010101001101111011100111001111100111110101", "01000011000000010010000101001000011011111010001011", "11111010010001100000101110011111000011100010010111", "11011010000100111111010000110000010111111111101001", "00111000100011000000100001100011101100010001100111", "00011000110110011111011111001100111000001100011001", "10110000101110101101101000001011001110011001111101", "10010000111011110010010110100100011010000100000011", "00000000001010000100100010100011100100100100011001", "00100000011111011011011100001100110000111001100111", "10100010000100110011001110110000001100010101101010", "10000010010001101100110000011111011000001000010100", "00011100100001001001101100001001111010100110001101", "00111100110100010110010010100110101110111011110011", "01000101011011011011001110011001100111010000111000", "01100101001110000100110000110110110011001101000110", "00000010001110100010001110010110111000110011000010", "00100010011011111101110000111001101100101110111100", "10000000010110101011010001011000101110110000101111", "10100000000011110100101111110111111010101101010001", "01000001110010111001111000100101111000111011110101", "01100001100111100110000110001010101100100110001011", "00101111010000100011111011011010101110110111000100", "00001111000101111100000101110101111010101010111010", "00101000110111110111100110100010000011001011110001", "00001000100010101000011000001101010111010110001111"};
    vector<string> ciphertexts = {"01010011101010101010000100001101001111111000111010", "01110011111111110101111010100010011011100101000100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> plaintexts = {"10110000001011010010010101011110001101010010110111", "10010000011110001101101011110001011001001111001001", "00101110000110011010000100001011101010010011001101", "00001110010011000101111010100100111110001110110011", "00100110101111011111000101000010110001000110001010", "00000110111010000000111011101101100101011011110100", "01111101010100111010001010111110100010010011100100", "01011101000001100101110100010001110110001110011010", "00111101001011111001111101111011010101100100100111", "00011101011110100110000011010100000001111001011001", "11110001110000010110110111111011010011010001010011", "11010001100101001001001001010100000111001100101101", "10101100100101010110101100110100111110010010010011", "10001100110000001001010010011011101010001111101101", "00000001111011100001101001111001111001101011001101", "10110101011100010011111101110001000001000001101100", "10111000010101000011100101101001010000101100000110", "10011000000000011100011011000110000100110001111000", "10100011110000110011110010101000110001011011000011", "10000011100101101100001100000111100101000110111101", "00110111100001110010011100110101100100001100111000", "00010111110100101101100010011010110000010001000110", "11100001110010000000000001110111101111101100001011", "11000001100111011111111111011000111011110001110101", "01100011010101001101111011100111001111100111110101", "01000011000000010010000101001000011011111010001011", "11111010010001100000101110011111000011100010010111", "11011010000100111111010000110000010111111111101001", "00111000100011000000100001100011101100010001100111", "00011000110110011111011111001100111000001100011001", "10110000101110101101101000001011001110011001111101", "10010000111011110010010110100100011010000100000011", "00000000001010000100100010100011100100100100011001", "00100000011111011011011100001100110000111001100111", "10100010000100110011001110110000001100010101101010", "10000010010001101100110000011111011000001000010100", "00011100100001001001101100001001111010100110001101", "00111100110100010110010010100110101110111011110011", "01000101011011011011001110011001100111010000111000", "01100101001110000100110000110110110011001101000110", "00000010001110100010001110010110111000110011000010", "00100010011011111101110000111001101100101110111100", "10000000010110101011010001011000101110110000101111", "10100000000011110100101111110111111010101101010001", "01000001110010111001111000100101111000111011110101", "01100001100111100110000110001010101100100110001011", "00101111010000100011111011011010101110110111000100", "00001111000101111100000101110101111010101010111010", "00101000110111110111100110100010000011001011110001", "00001000100010101000011000001101010111010110001111"};
    vector<string> ciphertexts = {"01010011101010101010000100001101001111111000111010", "01110011111111110101111010100010011011100101000100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> plaintexts = {"10110000001011010010010101011110001101010010110111", "10010000011110001101101011110001011001001111001001", "00101110000110011010000100001011101010010011001101", "00001110010011000101111010100100111110001110110011", "00100110101111011111000101000010110001000110001010", "00000110111010000000111011101101100101011011110100", "01111101010100111010001010111110100010010011100100", "01011101000001100101110100010001110110001110011010", "00111101001011111001111101111011010101100100100111", "00011101011110100110000011010100000001111001011001", "11110001110000010110110111111011010011010001010011", "11010001100101001001001001010100000111001100101101", "10101100100101010110101100110100111110010010010011", "10001100110000001001010010011011101010001111101101", "00000001111011100001101001111001111001101011001101", "10110101011100010011111101110001000001000001101100", "10111000010101000011100101101001010000101100000110", "10011000000000011100011011000110000100110001111000", "10100011110000110011110010101000110001011011000011", "10000011100101101100001100000111100101000110111101", "00110111100001110010011100110101100100001100111000", "00010111110100101101100010011010110000010001000110", "11001010010011001001010001111000101111101111000100", "11000001100111011111111111011000111011110001110101", "01100011010101001101111011100111001111100111110101", "01000011000000010010000101001000011011111010001011", "11111010010001100000101110011111000011100010010111", "11011010000100111111010000110000010111111111101001", "00111000100011000000100001100011101100010001100111", "00011000110110011111011111001100111000001100011001", "10110000101110101101101000001011001110011001111101", "10010000111011110010010110100100011010000100000011", "00000000001010000100100010100011100100100100011001", "00100000011111011011011100001100110000111001100111", "10100010000100110011001110110000001100010101101010", "10000010010001101100110000011111011000001000010100", "00011100100001001001101100001001111010100110001101", "00111100110100010110010010100110101110111011110011", "01000101011011011011001110011001100111010000111000", "01100101001110000100110000110110110011001101000110", "00000010001110100010001110010110111000110011000010", "00100010011011111101110000111001101100101110111100", "10000000010110101011010001011000101110110000101111", "10100000000011110100101111110111111010101101010001", "01000001110010111001111000100101111000111011110101", "01100001100111100110000110001010101100100110001011", "00101111010000100011111011011010101110110111000100", "00001111000101111100000101110101111010101010111010", "00101000110111110111100110100010000011001011110001", "00001000100010101000011000001101010111010110001111"};
    vector<string> ciphertexts = {"01010011101010101010000100001101001111111000111010", "01110011111111110101111010100010011011100101000100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> plaintexts = {"10110000001011010010010101011110001101010010110111", "10010000011110001101101011110001011001001111001001", "00101110000110011010000100001011101010010011001101", "00001110010011000101111010100100111110001110110011", "00100110101111011111000101000010110001000110001010", "00000110111010000000111011101101100101011011110100", "01111101010100111010001010111110100010010011100100", "01011101000001100101110100010001110110001110011010", "00111101001011111001111101111011010101100100100111", "00011101011110100110000011010100000001111001011001", "11110001110000010110110111111011010011010001010011", "11010001100101001001001001010100000111001100101101", "10101100100101010110101100110100111110010010010011", "10001100110000001001010010011011101010001111101101", "00000001111011100001101001111001111001101011001101", "10110101011100010011111101110001000001000001101100", "10111000010101000011100101101001010000101100000110", "10011000000000011100011011000110000100110001111000", "10100011110000110011110010101000110001011011000011", "10000011100101101100001100000111100101000110111101", "00110111100001110010011100110101100100001100111000", "01110000010000100110001000010011111010001100000101", "11001010010011001001010001111000101111101111000100", "11000001100111011111111111011000111011110001110101", "01100011010101001101111011100111001111100111110101", "01000011000000010010000101001000011011111010001011", "11111010010001100000101110011111000011100010010111", "11011010000100111111010000110000010111111111101001", "00111000100011000000100001100011101100010001100111", "00011000110110011111011111001100111000001100011001", "10110000101110101101101000001011001110011001111101", "10010000111011110010010110100100011010000100000011", "00000000001010000100100010100011100100100100011001", "00100000011111011011011100001100110000111001100111", "10100010000100110011001110110000001100010101101010", "10000010010001101100110000011111011000001000010100", "00011100100001001001101100001001111010100110001101", "00111100110100010110010010100110101110111011110011", "01000101011011011011001110011001100111010000111000", "01100101001110000100110000110110110011001101000110", "00000010001110100010001110010110111000110011000010", "00100010011011111101110000111001101100101110111100", "10000000010110101011010001011000101110110000101111", "10100000000011110100101111110111111010101101010001", "01000001110010111001111000100101111000111011110101", "01100001100111100110000110001010101100100110001011", "00101111010000100011111011011010101110110111000100", "00001111000101111100000101110101111010101010111010", "00101000110111110111100110100010000011001011110001", "00001000100010101000011000001101010111010110001111"};
    vector<string> ciphertexts = {"01010011101010101010000100001101001111111000111010", "01110011111111110101111010100010011011100101000100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 44;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"01010101110100000100001101101111111100011011111110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"01010101110100000100001101101111111100011011111110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"01010101110100000100001101101111111100011011111110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"01010101110100000100001101101111111100011011111110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> plaintexts = {"00001100110101000111110000111001000011111000111110", "00001100110101000111001000010110000011010000110101", "00001100110101000111110000111000100000100101111011", "00001100110101000111100101000110101011000001111111", "00001100110101000111000101000001111011011101101100", "00001100110101000111000111100010000111100000100101", "00001100110101000111101110000110111111001111101000", "00001100110101000111111000000111011101111010110000", "00001100110101000111011101110000101011100110100110", "00001100110101000111110111011000000001101000110001", "10011101000101111111110000111001000011111000111110", "10011101000101111111001000010110000011010000110101", "10011101000101111111110000111000100000100101111011", "10011101000101111111100101000110101011000001111111", "10011101000101111111000101000001111011011101101100", "10011101000101111111000111100010000111100000100101", "10011101000101111111101110000110111111001111101000", "10011101000101111111111000000111011101111010110000", "10011101000101111111011101110000101011100110100110", "10011101000101111111110111011000000001101000110001", "10001011010011110010110000111001000011111000111110", "10001011010011110010001000010110000011010000110101", "10001011010011110010110000111000100000100101111011", "10001011010011110010100101000110101011000001111111", "10001011010011110010000101000001111011011101101100", "10001011010011110010000111100010000111100000100101", "10001011010011110010101110000110111111001111101000", "10001011010011110010111000000111011101111010110000", "10001011010011110010011101110000101011100110100110", "10001011010011110010110111011000000001101000110001", "10100111110101011010110000111001000011111000111110", "10100111110101011010001000010110000011010000110101", "10100111110101011010110000111000100000100101111011", "10100111110101011010100101000110101011000001111111", "10100111110101011010000101000001111011011101101100", "10100111110101011010000111100010000111100000100101", "10100111110101011010101110000110111111001111101000", "10100111110101011010111000000111011101111010110000", "10100111110101011010011101110000101011100110100110", "10100111110101011010110111011000000001101000110001", "01001010100010011010110000111001000011111000111110", "01001010100010011010001000010110000011010000110101", "01001010100010011010110000111000100000100101111011", "01001010100010011010100101000110101011000001111111", "01001010100010011010000101000001111011011101101100", "01001010100010011010000111100010000111100000100101", "01001010100010011010101110000110111111001111101000", "01001010100010011010111000000111011101111010110000", "01001010100010011010011101110000101011100110100110", "01001010100010011010110111011000000001101000110001"};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"00000000000000000000000110101000011101111100001010", "00000000000000000000000111001001110010110101111001", "00000000000000000000010110011010101001100011110011", "00000000000000000000100001011000100001010010001100", "00000000000000000000001110110011110001011100001110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"00000000000000000000000010011111111111101100011011", "00000000000000000000011111110100100011111000000100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {"00000000000000000000100000010111011000111101011011"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> plaintexts = {"11011010101000100111100101001100111010010110101010", "11010101100001101000111011101000111001111110100010", "00101110100000110101000001000100000111101101110101", "01111101101111110011100100101110001111100001110101", "01000001001001011000000011000010110111101001100000", "01101011011010100111101110111011100011011110010001", "11100001111110111001010100000001111100111000101000", "10110100001000110111111110110011001001101001011010", "10111111001111100111111101110001010100000111110101", "00011100000000000000100001100010001111010000100101", "11110101101101111011111110111001100111111000011110", "00110001011001010001110110011111110110110000101001", "11110010101111000101100111101001110010010000100110", "10111001001010110111001000001100011110000101000010", "11001001000000000100100010010110010111011001101111", "11111011000100101011001000011111000110010000010100", "00000000001110111010110011100101101111111100110001", "01111001000010101001110101001010001111011101111011", "10111101100000111000111100000110101010000010001101", "11001101111010101001101001010000110001010111101010", "10000110000101000010111000101000001010000010111110", "10000011001001111001001111000100100011111100011011", "10011100101101011100001000110111110000011001100011", "00100100001110000001111010010000010000010100110010", "11001101001101010110000001101100000110000011110101", "00101110111011000001011100000110110001100000000000", "10101110111110011000010010111110011100101010111011", "00000111001001110110100001111111110111111011101100", "11100111110001101010000101010010100101110111101011", "01100110010010011010110001101011101100001001010011", "01101110100011101101101010110010101110111010101011", "11111010010110101010100100110110001110111100111010", "11010011000100111010100101010011110100000110101110", "10010010010101100101100001010110011000001111000110", "00100111100000010001010110011111001001111011010110", "01001101000110011000110001000110110000100110011111", "10001011010111011010000000111100100001100001100110", "11011011100111110111111111010111011010101110001010", "01010100001000110111100100101101000011101001010000", "10011100111101000111111100110110111001110010011000", "10101000110011100001101011101000001101010011100100", "00000110110010001001101001000101101100111111111111", "00000011010001010000011101100010110111011011101001", "00010101101010010110101010000110100110001000001000", "11001000011010010100110111001010110011000101001011", "00011101111000001111111111101011010000110100100010", "01110000010101011010011011001101010100101100001110", "01011101100111100101100101010110010110000000110100", "01011001100110011111001001100101010110010001000100", "00000011010000100100011001011011011010110110011001"};
    vector<string> ciphertexts = {"11011010101000100111100101001100111010010110101010", "11010101100001101000111011101000111001111110100010", "00101110100000110101000001000100000111101101110101", "01111101101111110011100100101110001111100001110101", "01000001001001011000000011000010110111101001100000", "01101011011010100111101110111011100011011110010001", "11100001111110111001010100000001111100111000101000", "10110100001000110111111110110011001001101001011010", "10111111001111100111111101110001010100000111110101", "00011100000000000000100001100010001111010000100101", "11110101101101111011111110111001100111111000011110", "00110001011001010001110110011111110110110000101001", "11110010101111000101100111101001110010010000100110", "10111001001010110111001000001100011110000101000010", "11001001000000000100100010010110010111011001101111", "11111011000100101011001000011111000110010000010100", "00000000001110111010110011100101101111111100110001", "01111001000010101001110101001010001111011101111011", "10111101100000111000111100000110101010000010001101", "11001101111010101001101001010000110001010111101010", "10000110000101000010111000101000001010000010111110", "10000011001001111001001111000100100011111100011011", "10011100101101011100001000110111110000011001100011", "00100100001110000001111010010000010000010100110010", "11001101001101010110000001101100000110000011110101", "00101110111011000001011100000110110001100000000000", "10101110111110011000010010111110011100101010111011", "00000111001001110110100001111111110111111011101100", "11100111110001101010000101010010100101110111101011", "01100110010010011010110001101011101100001001010011", "01101110100011101101101010110010101110111010101011", "11111010010110101010100100110110001110111100111010", "11010011000100111010100101010011110100000110101110", "10010010010101100101100001010110011000001111000110", "00100111100000010001010110011111001001111011010110", "01001101000110011000110001000110110000100110011111", "10001011010111011010000000111100100001100001100110", "11011011100111110111111111010111011010101110001010", "01010100001000110111100100101101000011101001010000", "10011100111101000111111100110110111001110010011000", "10101000110011100001101011101000001101010011100100", "00000110110010001001101001000101101100111111111111", "00000011010001010000011101100010110111011011101001", "00010101101010010110101010000110100110001000001000", "11001000011010010100110111001010110011000101001011", "00011101111000001111111111101011010000110100100010", "01110000010101011010011011001101010100101100001110", "01011101100111100101100101010110010110000000110100", "01011001100110011111001001100101010110010001000100", "00000011010000100100011001011011011010110110011001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> plaintexts = {"00", "10", "11"};
    vector<string> ciphertexts = {"10", "01"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> plaintexts = {"110", "001"};
    vector<string> ciphertexts = {"101", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> plaintexts = {"111", "011", "101"};
    vector<string> ciphertexts = {"010", "000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> plaintexts = {"00", "01", "10"};
    vector<string> ciphertexts = {"00", "01", "10"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> plaintexts = {"110", "001", "010", "011"};
    vector<string> ciphertexts = {"101", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> plaintexts = {"00", "01", "11"};
    vector<string> ciphertexts = {"00", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> plaintexts = {"01011100110110100100000100110100100001000010001100", "00101010111101111100011000110110000101100001110110", "10010100110101100111111010111111010101011111111100", "11110001101000110001110011100000000011101001101000", "11100010000111010010110001011100001100111000010111", "01001110110111001111111010110011000101000100010011", "00100010001000110001000100001110000100100101010111", "11101111010111000110101101110111000100011010110100", "10000000001110110110111111010110010101100000010010", "00010001000111100101101001111110101100100100110011", "10101000010100110110011010011110101111101111111100", "00010001101100111000011110001010010011101110011001", "11010010100110100100110101110010001010101100110001", "01010011010001101110101001011100101111010001100000", "01000100111001011001000101010011010000110010010110", "00011000110101010100000101010100101011001100101000", "00110010011000101111100100110111010001000110101011", "10110101101101001100001100000001010001011000101111", "11110100100011000110001010011101100010111111000101", "11011101000001001101000111110111000110001000111001", "11100110001100011101011101101100100011010011100011", "11100111110010110100010111110110000101101010110111", "01000010100111000110100011101010001001010110100110", "00010011010101110111111001111100000101011011101011", "01000010000111000110101111100110011010001100001100", "11010110111001101100110001010100001011010001000000", "11111001110110111011001110111001100011101111111110", "01001011001000011011001111001010110101011001011110", "11000011100100110111110001000110110101011011110101", "00001110100001100111100000000100100011100011000111", "00110011111100110010001111001010101011010000100010", "01110101100111100000001001100010110101000101010101", "10110000001000010001010111001010100100001001001010", "01010110010011111000011001010011011000111011000011", "10110001000111011100111100110001001001001000010101", "11001110110011011011100101011100010011100001000110", "01100001101111011000110110111000010100000101111100", "01110000010010101011011101001101011110000110111100", "11100111110011101010000001110111110111011110010110", "00101110110100111011111000100000111000000100101011", "11001011111101001111111111010010011000111011001010", "10001010111100001000111111011011010001001101101100", "00000100110101100011101001101000110011011101001100", "11100010010110100110101010010111110011010001001011", "10011011111000101101100111011001101010011001110011", "10010110000001101100011111011011110111010111000011", "00111101010001111101000001101011010000010010111101", "00000011111000100001110101011110010000010100110100", "10111101101011101001001100011010110010001101110111", "01010011010011100001110011000010010010001111010000"};
    vector<string> ciphertexts = {"01011100110110100100000100110100100001000010001100", "00101010111101111100011000110110000101100001110110", "10010100110101100111111010111111010101011111111100", "11110001101000110001110011100000000011101001101000", "11100010000111010010110001011100001100111000010111", "01001110110111001111111010110011000101000100010011", "00100010001000110001000100001110000100100101010111", "11101111010111000110101101110111000100011010110100", "10000000001110110110111111010110010101100000010010", "00010001000111100101101001111110101100100100110011", "10101000010100110110011010011110101111101111111100", "00010001101100111000011110001010010011101110011001", "11010010100110100100110101110010001010101100110001", "01010011010001101110101001011100101111010001100000", "01000100111001011001000101010011010000110010010110", "00011000110101010100000101010100101011001100101000", "00110010011000101111100100110111010001000110101011", "10110101101101001100001100000001010001011000101111", "11110100100011000110001010011101100010111111000101", "11011101000001001101000111110111000110001000111001", "11100110001100011101011101101100100011010011100011", "11100111110010110100010111110110000101101010110111", "01000010100111000110100011101010001001010110100110", "00010011010101110111111001111100000101011011101011", "01000010000111000110101111100110011010001100001100", "11010110111001101100110001010100001011010001000000", "11111001110110111011001110111001100011101111111110", "01001011001000011011001111001010110101011001011110", "11000011100100110111110001000110110101011011110101", "00001110100001100111100000000100100011100011000111", "00110011111100110010001111001010101011010000100010", "01110101100111100000001001100010110101000101010101", "10110000001000010001010111001010100100001001001010", "01010110010011111000011001010011011000111011000011", "10110001000111011100111100110001001001001000010101", "11001110110011011011100101011100010011100001000110", "01100001101111011000110110111000010100000101111100", "01110000010010101011011101001101011110000110111100", "11100111110011101010000001110111110111011110010110", "00101110110100111011111000100000111000000100101011", "11001011111101001111111111010010011000111011001010", "10001010111100001000111111011011010001001101101100", "00000100110101100011101001101000110011011101001100", "11100010010110100110101010010111110011010001001011", "10011011111000101101100111011001101010011001110011", "10010110000001101100011111011011110111010111000011", "00111101010001111101000001101011010000010010111101", "00000011111000100001110101011110010000010100110100", "10111101101011101001001100011010110010001101110111", "01010011010011100001110011000010010010001111010000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> plaintexts = {"0111", "1010", "1111"};
    vector<string> ciphertexts = {"1111", "0010", "0111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> plaintexts = {"10", "01", "11"};
    vector<string> ciphertexts = {"11", "00"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> plaintexts = {"00", "01", "10"};
    vector<string> ciphertexts = {"11", "00"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> plaintexts = {"11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111110111111111", "11111111111111111111111110111111111111111111011111", "11111111111111111111110111111111111111111110111011"};
    vector<string> ciphertexts = {"11111111111111111111111011111111111111111011111111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> plaintexts = {"011", "111", "010"};
    vector<string> ciphertexts = {"010", "110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> plaintexts = {"00", "01", "11"};
    vector<string> ciphertexts = {"00", "01"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> plaintexts = {"01", "10", "11"};
    vector<string> ciphertexts = {"01", "10", "00"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> plaintexts = {"11", "00", "10"};
    vector<string> ciphertexts = {"00", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> plaintexts = {"01", "10", "11"};
    vector<string> ciphertexts = {"00", "01", "10"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> plaintexts = {"001000101111000110111110100110110", "000111001010110010001110100110110", "001110010010111101010111101001110", "101111010100100100101111111110100", "010100100111011111010001000101010", "110111100110000111100001010011000", "000001110110010000001001101000111", "101101010001101001011110010111010", "011000101111000001101010010000000", "101000100011011110001111101100000", "001011100001111101011001001110011", "111000010111111001001110101010100", "111010111000010111010001100110010", "001011011000111011101000011011110", "110010001010000001000111001010001", "111110100011001110101101100111101", "110010100101100001001100100010010", "110011110001100011000110000010111", "010000001101101001000011101010000", "001110100010011100001100100011100", "011000111011000011111000010110001", "100000011010110101111101101101111", "110001000101000000111000110100000", "101001010111011110101110000111001", "011100110100111111011001101000010", "001111010100111000110101011001010", "000011110001111111010111101010110", "111100011001010111100101011110100", "111011011000011110111000000011001", "011011101000110101111001000000100", "011010100000111001110100111110000", "110110010110011111111011111001011", "100101101100010010110010010010001"};
    vector<string> ciphertexts = {"001000101111000110111110100110110", "000111001010110010001110100110110", "001110010010111101010111101001110", "101111010100100100101111111110100", "010100100111011111010001000101010", "110111100110000111100001010011000", "000001110110010000001001101000111", "101101010001101001011110010111010", "011000101111000001101010010000000", "101000100011011110001111101100000", "001011100001111101011001001110011", "111000010111111001001110101010100", "111010111000010111010001100110010", "001011011000111011101000011011110", "110010001010000001000111001010001", "111110100011001110101101100111101", "110010100101100001001100100010010", "110011110001100011000110000010111", "010000001101101001000011101010000", "001110100010011100001100100011100", "011000111011000011111000010110001", "100000011010110101111101101101111", "110001000101000000111000110100000", "101001010111011110101110000111001", "011100110100111111011001101000010", "001111010100111000110101011001010", "000011110001111111010111101010110", "111100011001010111100101011110100", "111011011000011110111000000011001", "011011101000110101111001000000100", "011010100000111001110100111110000", "110110010110011111111011111001011", "100101101100010010110010010010001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> plaintexts = {"00", "10", "11"};
    vector<string> ciphertexts = {"11", "10", "01"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> plaintexts = {"00000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000010", "10000000000000000000000000000000000000000000000000", "01000000000000000000000000000000000000000000000000"};
    vector<string> ciphertexts = {"00000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> plaintexts = {"11", "01", "00"};
    vector<string> ciphertexts = {"00", "10", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> plaintexts = {"000000000000000000000000000000000000", "010000000000000000000000000000000000", "100000000000000000000000000000000001", "110000000000000000000000000000000001"};
    vector<string> ciphertexts = {"000000000000000000000000000000000000", "010000000000000000000000000000000000", "100000000000000000000000000000000001", "110000000000000000000000000000000001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> plaintexts = {"000", "001", "010", "100"};
    vector<string> ciphertexts = {"000", "001", "010", "100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> plaintexts = {"101", "010", "001"};
    vector<string> ciphertexts = {"000", "111", "011"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> plaintexts = {"1001", "0000", "0001"};
    vector<string> ciphertexts = {"0101", "1100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> plaintexts = {"00", "01", "10"};
    vector<string> ciphertexts = {"00", "01", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> plaintexts = {"111", "101", "100", "000", "110", "001"};
    vector<string> ciphertexts = {"000", "111", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> plaintexts = {"1111111111111111111111111111111111111111"};
    vector<string> ciphertexts = {"1111111111111111111111111111111111111111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> plaintexts = {"110", "001", "111"};
    vector<string> ciphertexts = {"101", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> plaintexts = {"111", "110", "100"};
    vector<string> ciphertexts = {"000", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> plaintexts = {"000", "111", "010", "101", "110", "001"};
    vector<string> ciphertexts = {"011", "100", "111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> plaintexts = {"000", "111", "010", "101", "110"};
    vector<string> ciphertexts = {"011", "100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> plaintexts = {"110", "001", "000"};
    vector<string> ciphertexts = {"101", "010", "011"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> plaintexts = {"000", "111", "010"};
    vector<string> ciphertexts = {"000", "111", "101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> plaintexts = {"110", "010", "111"};
    vector<string> ciphertexts = {"101", "000", "001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> plaintexts = {"0000", "1010", "0101"};
    vector<string> ciphertexts = {"0101", "1010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> plaintexts = {"000", "010", "001"};
    vector<string> ciphertexts = {"000", "001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> plaintexts = {"11", "01", "10"};
    vector<string> ciphertexts = {"00", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> plaintexts = {"000", "001", "010"};
    vector<string> ciphertexts = {"000", "001", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> plaintexts = {"000", "111", "010", "101", "110", "001"};
    vector<string> ciphertexts = {"011", "100", "101", "110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> plaintexts = {"00", "01", "10"};
    vector<string> ciphertexts = {"00", "01"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> plaintexts = {"111", "110", "100"};
    vector<string> ciphertexts = {"010", "001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> plaintexts = {"00000110001001100101001001000110100111001111000001", "00110101100101111000011010010110101110110011101000", "01011111110110101100010011101101110111000001100010", "01000011000100111100001010101000100000110100111001", "01010101110110101000110101100101100100000110000100", "10110011101001001110010100101000111001111011001011", "10101111001010101000100100101111011010111111110110", "01010111100000000100100110001000010001110101100010", "11101100010101010100001000000010000101110011100000", "00011011000111100010111011010100111111010111011010", "01011110101100100001101110010001100100110010001101", "11000011010111101110010111111000110010110101010111", "11011110001000100110010001100010100010010011000000", "11011010101110011011110101100110000101010001100000", "10000101010000101010101000100110010011111001101110", "11101000010100010001101001100011101110110101011010", "11100100011000111001111100110001011011010010100110", "00001001000110011010011010110010000001011011111100", "01001111010101101101101010011001110001001110101100", "11011110100111001000111001101111001001100010000000", "10000100111110111110010011110000110101110001011100", "10011010110111000100011010100100111001011100011011", "10110001101110111101110010011100000001101001011010", "01011101001110001110010001000001111110000110110100", "11011010101010000101000010001101110110101010111101", "00010001100011101011000110110111010110011110110010", "10011001100011110111111101100010100110110000100100", "10001010101010001010101100010111100100100111000100", "00100001110000000001010011100010101111010011101100", "01111101001011000011010011010110010011101111101110", "10001010100111100000101001101001101100111110000111", "11100001001011000001100011111111001000110010110100", "10100100101000011111110010000100101011001101100111", "11110100011100100000000011100100100001110110110000", "10010000001011010001100011111101101011010001000001", "00100011000010110110111111001000101001110000110001", "00010000001011110101000111110111111100001110101111", "11111110100110111110011011000111100110011010101011", "11101010111101110101000110000111100100011000100011", "01010101110010001101100101100111001011011010100001", "10100011110110010101100100101001010000011101110111", "01010111111001110001111110011001100100100000001000", "11110000110100111001000110100110010111000101110010", "10101000000011000101110100110110000111001100010010", "00011011011010010110111101011010101110000000000011", "11000010111011110001111001100100011100010100100110", "00011010100010011100100010001101101110101011110011", "10011101111101110111101100000111010011111000000110", "01101001011100001010110010111101011001010110010011", "11000101110011010111001101111000011110010010010111"};
    vector<string> ciphertexts = {"00101000111010111010000000010000110101110010011001", "00011011010110100111010011000000111100001110110000", "01110001000101110011011010111011100101111100111010", "01101101110111100011000011111110110010001001100001", "01111011000101110111111100110011110110111011011100", "10011101011010010001011101111110101011000110010011", "10000001111001110111101101111001001000000010101110", "01111001010011011011101111011110000011001000111010", "11000010100110001011000001010100010111001110111000", "00110101110100111101110010000010101101101010000010", "01110000011111111110100111000111110110001111010101", "11101101100100110001011110101110100000001000001111", "11110000111011111001011000110100110000101110011000", "11110100011101000100111100110000010111101100111000", "10101011100011110101100001110000000001000100110110", "11000110100111001110100000110101111100001000000010", "11001010101011100110110101100111001001101111111110", "00100111110101000101010011100100010011100110100100", "01100001100110110010100011001111100011110011110100", "11110000010100010111110000111001011011011111011000", "10101010001101100001011010100110100111001100000100", "10110100000100011011010011110010101011100001000011", "10011111011101100010111011001010010011010100000010", "01110011111101010001011000010111101100111011101100", "11110100011001011010001011011011100100010111100101", "00111111010000110100001111100001000100100011101010", "10110111010000101000110100110100110100001101111100", "10100100011001010101100101000001110110011010011100", "00001111000011011110011010110100111101101110110100", "01010011111000011100011010000000000001010010110110", "10100100010100111111100000111111111110000011011111", "11001111111000011110101010101001011010001111101100", "10001010011011000000111011010010111001110000111111", "11011010101111111111001010110010110011001011101000", "10111110111000001110101010101011111001101100011001", "00001101110001101001110110011110111011001101101001", "00111110111000101010001110100001101110110011110111", "11010000010101100001010010010001110100100111110011", "11000100001110101010001111010001110110100101111011", "01111011000001010010101100110001011001100111111001", "10001101000101001010101101111111000010100000101111", "01111001001010101110110111001111110110011101010000", "11011110000111100110001111110000000101111000101010", "10000110110000011010111101100000010101110001001010", "00110101101001001001110100001100111100111101011011", "11101100001000101110110000110010001110101001111110", "00110100010001000011101011011011111100010110101011", "10110011001110101000100101010001000001000101011110", "01000111101111010101111011101011001011101011001011", "11101011000000001000000100101110001100101111001111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> plaintexts = {"000", "110", "011"};
    vector<string> ciphertexts = {"111", "001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> plaintexts = {"00", "01", "10"};
    vector<string> ciphertexts = {"11", "10"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> plaintexts = {"000", "111", "010"};
    vector<string> ciphertexts = {"000", "111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> plaintexts = {"001", "010", "110"};
    vector<string> ciphertexts = {"101", "001", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> plaintexts = {"0000001111111111111111111111111111111111", "1000001111111111111111111111111111111111"};
    vector<string> ciphertexts = {"0111111111111111111111111111111111111111", "1111111111111111111111111111111111111111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> plaintexts = {"000", "110", "111"};
    vector<string> ciphertexts = {"000", "001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> plaintexts = {"000", "111", "010", "101", "110", "001", "011"};
    vector<string> ciphertexts = {"011", "100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> plaintexts = {"001", "010", "111", "101"};
    vector<string> ciphertexts = {"100", "110"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> plaintexts = {"111111111111111111111111111111111111111"};
    vector<string> ciphertexts = {"111111111111111111111111111111111111111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> plaintexts = {"110", "001", "010"};
    vector<string> ciphertexts = {"101", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> plaintexts = {"01", "00", "10"};
    vector<string> ciphertexts = {"10", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> plaintexts = {"010", "100", "001"};
    vector<string> ciphertexts = {"010", "100", "001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> plaintexts = {"0"};
    vector<string> ciphertexts = {"0"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> plaintexts = {"1111", "0000", "0001"};
    vector<string> ciphertexts = {"0000", "0001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> plaintexts = {"00", "01", "11"};
    vector<string> ciphertexts = {"11", "10"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> plaintexts = {"1000", "1001", "1010", "1100"};
    vector<string> ciphertexts = {"1000", "1001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> plaintexts = {"00", "01", "11"};
    vector<string> ciphertexts = {"00", "01", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> plaintexts = {"000", "111", "010", "101", "110", "100"};
    vector<string> ciphertexts = {"011", "100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> plaintexts = {"11111111111111111111111111111111111111111111111111"};
    vector<string> ciphertexts = {"11111111111111111111111111111111111111111111111111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> plaintexts = {"100", "010", "000"};
    vector<string> ciphertexts = {"011", "101", "111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> plaintexts = {"000", "111", "110"};
    vector<string> ciphertexts = {"100", "011", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> plaintexts = {"110101110101110101110101", "111111111111111111111111"};
    vector<string> ciphertexts = {"100010100010100010100010", "101000101000101000101000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> plaintexts = {"11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000"};
    vector<string> ciphertexts = {"11111111111111111111111111111111111111111111111111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> plaintexts = {"000", "111", "010", "101", "110", "001", "100"};
    vector<string> ciphertexts = {"011", "100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> plaintexts = {"000", "100", "010"};
    vector<string> ciphertexts = {"001", "101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> plaintexts = {"00", "11", "01"};
    vector<string> ciphertexts = {"00", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> plaintexts = {"10000000000000000000000000000000000000000000000000", "01000000000000000000000000000000000000000000000000"};
    vector<string> ciphertexts = {"11000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> plaintexts = {"000", "101", "100", "111"};
    vector<string> ciphertexts = {"110", "011", "010", "001"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> plaintexts = {"111", "010", "011"};
    vector<string> ciphertexts = {"111", "010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> plaintexts = {"11111111111111111111111111111111111111111111111", "10000000000000000000000000000000000000000000000", "11101111111111111111111111111111111111111111111"};
    vector<string> ciphertexts = {"00000000000000000000000000000000000000000000000"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> plaintexts = {"00", "01", "10"};
    vector<string> ciphertexts = {"01", "10"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> plaintexts = {"00101", "11110", "10110"};
    vector<string> ciphertexts = {"10110", "01101", "00101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> plaintexts = {"10101010101010101010101010101010101010101010101010", "01010101010101010101010101010101010101010101010101", "01010101010101010101010101010101010101010101010100"};
    vector<string> ciphertexts = {"00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> plaintexts = {"10001110110000110000000001000011000100001110001011", "11101011010100100010011111110001100100101001110011", "00110001000101110010110010010110001010010011011001", "01110100100011100110001111001011110011010011110101", "11110000111111011101011001110010011000001011111110", "11101001010010101101111011010110011010010111110111", "11001101100000101011110111100110001100001010100111", "01010010100110000010001111111010011110001010100110", "10110100110101111111111100001101101011001110101111", "00011001011011100111100011000001001010000110010001", "00101101101011110010101001001010111010111101010110", "11111111001000111011110100110111011000100111101000", "00111001111100001001011100100011110010000001111011", "11111010001101000011001111011000000101111111100001", "01011100100110100101110100000010100010111001011011", "00110010101111100000001100010100000011011111100100", "10011000111101111101110001101010011011100000001010", "10111001100010010000011111101011101000100010001101", "00111110101100011101010010010011000010011011110110", "10100010101111101000100110001001001000111010010101", "10101011011001111111100111000000010101001000011100", "10001011010100011111010101000110010101011110010111", "01111100001111000100001010111010110111011101101010", "00001010111000111110010110100100010011010100010001", "10001000010101011011100101001110000000100111011000", "10111011010110000000101101100100101000000010011000", "11100111101101000011111001010000001101001010010110", "10110111011110010111111100100110100101100001110101", "10001001111001110001110010001111101101101111101100", "01000111011111101010101000111011000001011011000101", "00000101111110100101101110001011100111110100001110", "01010101011111111000001111110000110010000110010100", "01001001000101100010001101011010111001000010100110", "00100010001001000010110110000000111010111011111011", "11101001101101011101011101001001110101111011001010", "11111010111110010101010000000101010011100000011000", "01101100110001001010010111101001010010010111011001", "10101100110110101111000100111110100010010111010100", "01100000001110101001111100110011010010100011001010", "00101100000000011100000111011011111001111010111000", "11001111110011110001010000110101110011000001100010", "01000011001000011111010100000011101100110000010010", "01100111000000110101011010110011100110000000011011", "11101100101110111011000010011111110011000110111001", "01110101011000010000110100100010100100001010100100", "01001110100001000101010010111001001011011000000011", "10000110110010010011011011010101101100100110110100", "11101000001010110000000110110000011101111000011111", "10010110110001111101001011000010100100110100000100", "00100011110101001001111100111101110000010011001011"};
    vector<string> ciphertexts = {"01110100100011100110001111001011110011010011110101", "01000111011111101010101000111011000001011011000101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> plaintexts = {"000", "111", "001"};
    vector<string> ciphertexts = {"000", "111"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> plaintexts = {"110", "001", "010"};
    vector<string> ciphertexts = {"001", "110", "101"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> plaintexts = {"01", "10", "11"};
    vector<string> ciphertexts = {"00", "11"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> plaintexts = {"0011", "0101"};
    vector<string> ciphertexts = {"1100", "1010"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> plaintexts = {};
    vector<string> ciphertexts = {};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> plaintexts = {"000", "111", "100"};
    vector<string> ciphertexts = {"000", "111", "100"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> plaintexts = {"00", "01", "10"};
    vector<string> ciphertexts = {"10", "01"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> plaintexts = {"10111100110101100000101100011110001110101111010010", "10100100011101010111010101001010000011010000100001", "10001110100010011101011111111110110101100101110001", "01010101111000101000001011111001101101011111001101", "00111000000011100101010100110010001110010011000010", "11100100000100000100000110011110100111101110010000", "00000110101000110001011011111011011010000001010000", "00110100010000111001001110010010111101100100000100", "01000000101110001001000110111110010010110001000100", "00011110010110111010110110111110011110011010001100", "10011111010110000100100000000001001010111100010001", "01101101100000010011111011101111101011010010011110", "01111100111000011111011111100001100011000001000111", "00011110111000011101101110101010001010010110011101", "01000101111110110010110000111111011001101110101101", "10010010001100010010001100101010010001000010011010", "00011111101011111100100000100101110000110011100101", "11110011010001110111010111010001100101101101100111", "00101001101001000001011000011001010110110010111011", "11001000110010111110011100010100000101100101110101", "10101111010010000011011010011011101010010011111110", "00010100011100100000101000111101101111010111101111", "00011010101110100010001110101011110011011001001001", "00111011011100110001101011000010100001100101110010", "11001111011100001010101111011110000111011011011110", "00011101011011011111101010101001111001011110010101", "11101000001010100000111010111100111011111001011011", "10000001101000110111001011010101011010000100100111", "11100100001011100000101110111000011001001110100111", "10101001111101111101011110111000000000101011000100", "10101000011011011110101001100111101011010111100011", "10000011010111001100001100101000000101000101000010", "01010000110111110100101100100000101011000011100110", "00110111110111111001010101111011100110001011010110", "10111001111000111010100010110101110010100110101100", "11110001000011110111110000011100011011011010011001", "11000000011010100000011101011000010010011010001011", "11000011001001111110010010000111001100000111100011", "00000000010000001001111000000011001000001001101010", "00110110110000000001111100001101110101110011001101", "01011001010001100111011000011001000110011001111110", "01001001010000101011101100111001101101000010001100", "01011010000001010011111000011010111001001001001000", "11111111001101101110100100111110101000001101011000", "01100111000101100100011010100110000011111100110110", "11001100101001011100001000001100001111110010101010", "00010000011001110001101110100000000100101111000101", "00101000110111010011110001010000010101110001101110", "00110000100101010000100011000110101101111000111111", "11111001101010000101011110000111001111100001001011"};
    vector<string> ciphertexts = {"10111100110101100000101100011110001110101111010010", "10100100011101010111010101001010000011010000100001", "10001110100010011101011111111110110101100101110001", "01010101111000101000001011111001101101011111001101", "00111000000011100101010100110010001110010011000010", "11100100000100000100000110011110100111101110010000", "00000110101000110001011011111011011010000001010000", "00110100010000111001001110010010111101100100000100", "01000000101110001001000110111110010010110001000100", "00011110010110111010110110111110011110011010001100", "10011111010110000100100000000001001010111100010001", "01101101100000010011111011101111101011010010011110", "01111100111000011111011111100001100011000001000111", "00011110111000011101101110101010001010010110011101", "01000101111110110010110000111111011001101110101101", "10010010001100010010001100101010010001000010011010", "00011111101011111100100000100101110000110011100101", "11110011010001110111010111010001100101101101100111", "00101001101001000001011000011001010110110010111011", "11001000110010111110011100010100000101100101110101", "10101111010010000011011010011011101010010011111110", "00010100011100100000101000111101101111010111101111", "00011010101110100010001110101011110011011001001001", "00111011011100110001101011000010100001100101110010", "11001111011100001010101111011110000111011011011110", "00011101011011011111101010101001111001011110010101", "11101000001010100000111010111100111011111001011011", "10000001101000110111001011010101011010000100100111", "11100100001011100000101110111000011001001110100111", "10101001111101111101011110111000000000101011000100", "10101000011011011110101001100111101011010111100011", "10000011010111001100001100101000000101000101000010", "01010000110111110100101100100000101011000011100110", "00110111110111111001010101111011100110001011010110", "10111001111000111010100010110101110010100110101100", "11110001000011110111110000011100011011011010011001", "11000000011010100000011101011000010010011010001011", "11000011001001111110010010000111001100000111100011", "00000000010000001001111000000011001000001001101010", "00110110110000000001111100001101110101110011001101", "01011001010001100111011000011001000110011001111110", "01001001010000101011101100111001101101000010001100", "01011010000001010011111000011010111001001001001000", "11111111001101101110100100111110101000001101011000", "01100111000101100100011010100110000011111100110110", "11001100101001011100001000001100001111110010101010", "00010000011001110001101110100000000100101111000101", "00101000110111010011110001010000010101110001101110", "00110000100101010000100011000110101101111000111111", "11111001101010000101011110000111001111100001001011"};
    NetworkXOneTimePad* pObj = new NetworkXOneTimePad();
    clock_t start = clock();
    int result = pObj->crack(plaintexts, ciphertexts);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=15485957&rd=14541&pm=10846
********************************************************************************
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <set>
#include <string>
#include <vector>
using namespace std;
 
#define ALL(CONT) (CONT).begin(), (CONT).end()
#define FORE(I, L, R) for (typeof((L)) I = (L), TMP_##I = (R); I != TMP_##I; ++I)
#define FOREACH(I, C) FORE(I, (C).begin(), (C).end())
#define FOR(I, L, R) for (typeof((L)) I = (L), TMP_##I = (R); I < TMP_##I; ++I)
#define FORIND(I, C) FOR(I, 0, (C).size())
 
class NetworkXOneTimePad {
public:
  int crack(vector <string> plaintexts, vector <string> ciphertexts);
};
 
string xoruj(string const&a, string const& b)
{
  string res;
  FORIND(i, a) res += (a[i] == b[i] ? '0' : '1');
  return res;
}
 
int NetworkXOneTimePad::crack(vector <string> plaintexts, vector <string> ciphertexts)
{
  int res = 0;
  set<string> K;
  set<string> pp(ALL(plaintexts));
  FOREACH (P, plaintexts) FOREACH (C, ciphertexts) {
    K.insert(xoruj(*P, *C));
  }
  FOREACH(it, K) {
    bool ok = true;
    FOREACH(C, ciphertexts) {
      string p = xoruj(*C, *it);
      if (pp.count(p) == 0) ok = false;
    }
    if (ok) res++;
  }
  return res;
}
 
// Powered by MBMagic 0.12.2
// Powered by PopsEdit

********************************************************************************
*******************************************************************************/