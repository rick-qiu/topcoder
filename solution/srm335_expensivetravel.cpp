/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=7337
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class ExpensiveTravel {
public:
    int minTime(vector<string> m, int startRow, int startCol, int endRow, int endCol);
};

int ExpensiveTravel::minTime(vector<string> m, int startRow, int startCol, int endRow, int endCol) {
    int ret;
    return ret;
}


int test0() {
    vector<string> m = {"22334"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 1;
    int endCol = 5;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> m = {"55", "52", "55"};
    int startRow = 1;
    int startCol = 2;
    int endRow = 3;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> m = {"251", "212", "122"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 3;
    int endCol = 3;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> m = {"452232", "287979", "219872", "928234", "767676"};
    int startRow = 1;
    int startCol = 6;
    int endRow = 3;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> m = {"11"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 1;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> m = {"123456789987654321"};
    int startRow = 1;
    int startCol = 2;
    int endRow = 1;
    int endCol = 16;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 17;
    int endCol = 22;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1283;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> m = {};
    int startRow = 50;
    int startCol = 50;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> m = {};
    int startRow = 17;
    int startCol = 22;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 72;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> m = {"74139348496499978554941521336516449748245496167317", "59763468315468667723361371412796449346458343125568", "22512929816369775935828563869297113277671226455241", "53743624242338126126194897228832767495942925215535", "21522555966917753931932427718376456427681485544899", "78352525952189488962855938442643618864287885375638", "33384428788736596358442769745292648259314621181789", "17811122781491132738711682233527798545646779998362", "65364265649469549633443989273268721482265545938989", "54749537448233788156149442174725942121658561236482", "73481193562339797272159921614683195152895877199531", "39813182154882661523385458963153582646956353861225", "45159486648231335153565475782124933385693263442569", "37437745597729996573692664849315945881482688315552", "84412746381959343776856938751544985451417265376737", "81288263162974692936458926384761359286958554148444", "49395758881476345761132858535458192678947719752297", "99893277853211541811865975259238819244747953726955", "67397683618867333574592922184599964893628817124963", "23168796112712377679787128799792654931152596271218", "62281712589626488975732586712116399877748648936131", "91558688197357554672165331269794156718979141925576", "43468343598775783681534299272967376486883329135412", "94614836967962678638748558436717228374359132796216", "69699679877898919278738817967567758619784829872368", "28415846521153941331658833184119991849657665323458", "14757278747334968954755993886597975498277147685937", "35397891793954635476649744781269672128538618172961", "71868234268242151156336339555775529778816783275223", "79612592912515869993895917316229526664412418912182", "16134946528895346727354731682747147616913126818739", "45122848123679613417398558371467266887366634676786", "92788929328416889525794239329554351729971452935248", "33839668455364453761574835973594942293435976456941", "36817618625852368334456628966937565889312667481831", "34886683386712513695963965615378386472313286799666", "21846458314875416644815131997142725746855179225367", "34833688876652311721753255275299934827184158234143", "86396252259896532613564454847371117787933952196639", "43722488498147264316782819936225164248941136175558", "95646419392525499512316165181514848475656154597538", "33895868378555182633187921683141774655585359743968", "86366978811368619824366484599235589344675855989198", "59479692599294137853179273394255352391232331523951", "51844986922368854737977836131971113524241911892492", "26632683662224666513164239199788245314222847669773", "79393568257512648721385484994881126589819235141695", "47235916658241998211355558582746211963215362931548", "97762793862223122831712358127832672227377156134636", "57615976859694484129398686992751626197471644633875"};
    int startRow = 41;
    int startCol = 14;
    int endRow = 6;
    int endCol = 33;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> m = {"43598123497132862839251584791164668637455787535339", "91241463976555394615783877193134817555495834145254", "93996616714451198916885639771667697641863564431795", "45894844871487962872844374323531887427843637635862", "34976196989886351472835616252973158882245754192112", "93743174251391527288624519991664486212816383541885", "17474423186561237132271654887564497888162931251532", "75655819647662721528217795267362939967167787644851", "75752779383666516865423525674928212399831752849814", "91573849442211766733281291251896754119728261212366", "67872882482431695341226656687366511673788291845291", "59566146619646919239665697122382426972222836183933", "39492788326558357984314514339448255449482946293782", "64712211897345133784758376193855159123378227483321", "47762517345423149668667435292843649237591623433415", "56488934361845479692726812436246129549553226271841", "47863949979452257671158991737688111916322393153557", "46234467659174681639199865631557572164146169775212", "38383777278717421526261622528722113717333145917245", "68384435624294773236968931583681516233936768672332", "18544728998411279826779497645223127256611777237876", "37375473338145519434291516253223944978659528842536", "11457121629434599412746964592114718439725751763432", "44923835613112122739689255556537824171442965955418", "93534363877575448468464927811479945311185154386659", "98432477334333891996935148631999445393482397731574", "47538457622777139446193281319133687536517665944817", "78767345289772765136676498416728174539569258889314", "28294878674491528351983223326274292541817765172936", "57357153368138467878534112741748975812621797736635", "65569154153351659757384692498519222327833217366768", "99159523442756854424196124846792832562917332634765", "68729323974191889768433535425459978187597693173925", "15584832521858573761849599352118427629217466426492", "36149957119231193658779727582513991749172527223647", "68182698663342292948695538255417611913935262917659", "73343289879365547755862359372996494182747613434418", "29527641835785682267329992563881283252943527979154", "35372924255637272235438921687673642397196774491586", "36283285846814426256959468817296631314115687411416", "64134261678629511555562128474821577332669533385528", "17385467135665734684826435366445994985219176946633", "13785691289245521611852566687591345973833837792588", "42375446547254183726398819542947829547349971418276", "75431524658656524347514339816945747141822683995686", "84228382251312725661158671432414764952289468147436", "37988382581821858125414745497794366491767257871798", "53227585857636392567116477542195817348849889489443", "99277469711824896376946184651912894988457456343335"};
    int startRow = 11;
    int startCol = 6;
    int endRow = 46;
    int endCol = 41;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> m = {"7543333251947123274814534969358451363836342195973", "3525931318437799377891391514488948916923826123533", "3579488136749225884667948482933644439748866718859", "4342387177665891883548258788381584497324191683665", "7629164511843732687482997878266873973127895111774", "4681234552574434921172527991997749198683114979369", "5187476888583111845338354751379762934497659642282", "2755866374599451595687927771523876786649512936724", "2428958368262652294366288195918354548959766113681", "5886343971947718595682576437989762393584784799317", "8477269898977952957373273245635471244485349898964", "7278937285492464318291534918277997832364733835652", "7238156248518883311568988468336959948843199195353", "1162423638291865344463786998277763446475344194889", "4792231522627387561526266223896841328266338957161", "1415531248849622335345983841256459911675633414492", "8417992649394147268682582127479328269494651877545", "7785765791487181648311122189534523266287749273159", "8549756429413534517522297643984693288588357634932", "2668593925684947939612233887931318515317832419126", "4827428458373763353397551461287245434215853886796", "8219932964587687853123255871891532212698226824536", "9165115175966989987479676139138298233486373891929", "4291893967741784675839672916177922681774242492293", "6563151639542552114438845757621553493529913762321", "9218869539176184911832783938269194772676252482651", "2417413148792737688194856722494226897372318773259", "1837124648161582167257161896437686711492417252173", "8124751461789336351557254993918137568369864575293", "2795231164848134442491926472355792359483614978345", "6778223698687694722841997187593581217194914729181", "4753474648211656882788797252937319554525599122349", "3524655947828395972655172497699172482924438172675", "4249981871183622454846894536463859559342745214922", "4892491391492264925834796393412813619942552712915", "2111615831954847891266955547991688142637897165112", "4749997131752728318795437726782786388383867111882", "5113528777952137745727958592671693613392797181137", "3347464828815178889932148426577967993771726115716", "7285489596839999621777152732886485915522481386986", "1423434311572783445748585454628749782655744646539", "6997915435745867789411448379793831165828247811912", "9197173299856469255183517661365338224517577761652", "9371174514396921546532375119331753761177789624993", "7533972915562291948268879315791632759494918387471", "9573529298273524524719665454759327122992459891659", "4353786874665251863659875852984873194717738346257", "4435674652132313954694587691424614975791528658293", "5547247728449532641158192729858748374257211778396", "2596182663567229154684938146327785796869949469528"};
    int startRow = 19;
    int startCol = 1;
    int endRow = 5;
    int endCol = 12;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> m = {"5212975559279592567753459736238843279922364473469", "9769638359875638485534281858127597523133771466874", "3721851955765271881557729537419714169911285229296", "2118953488341764536927242517532475825777646425841", "2869164988884865356255855416977315131395882798287", "3213767277755599645677753116682399874819198423184", "8876793913717175193356687229296451366729856521866", "5163586385974833523446619198634619488262364158833", "6377765238544526995362271572327935727332789953572", "3741775348681554482493515468265484659688987949774", "4577115818723371643721851782925575559671458299926", "4891323827376439585122287157624831918236563314474", "2977146525762483575329481772633476411989637138698", "1348917211878923569682857149581926838559276158363", "2224749888714846274633622341726156161534869999958", "6444857177344764778438238198837728465992824158149", "3117547476533122169814823789588132396656277435776", "5139595433455476968613719735871919796573872531379", "3554846989396643313266734956169659463361283295749", "5177923837164128286923261591116695274329537162562", "5357199663951166833718648256989224425192999318253", "5186763686775289267214373657361129546959223959562", "2536464573354145149321445438418422556473834383434", "2334258551196678422743746422653896134932888713413", "7581159572817511667487766814979377794842941832681", "3545752577879617994431861316695786257165963195996", "6131328364617281831113543816132567363133796456947", "2639746841978296412396291859455628458251195655951", "9671992552545281532121792471693819558122949439622", "2775759863156557898933429624563724195814928381693", "8351593144447811931674844697164379944183626651423", "7997847435618752295361628743986562127289666925863", "8656711498661253491667474551561527324458983961782", "4418368938761413923357487312678719613632249699575", "4944727127732351264783893382878631183133247676836", "9251192313463349159956987187268476551763862334916", "9456824133928398963319946611458852285121251632641", "9336839638832775282172359515174789167237581298423", "9313388887594877941528679771676522715917689458445", "7772973649857149492347987687386846132274183666336", "6685775658644316792242816653781886716757489943151", "4751371683869583119143663628816776714586353269228", "3798735899861939911719793598975276951874452332832", "3713479371294118679128345396866687348755857188967", "9649151396324673736279577517958947468388115699536", "2796257925914356786871222984272354126972795538862", "4132291911992574137198719728488133964812863997464", "5971812475728434699147847486365631961983136924941", "9648876722912297687299678866965338118994773513532"};
    int startRow = 36;
    int startCol = 33;
    int endRow = 43;
    int endCol = 22;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> m = {"33558846267128129917859197879549681674913428323488", "76759113515647499656798857284883877644923426654125", "32721513143664595783994237645231878728658686486845", "73371759646889413154687182397485253234953633547849", "37267961744566792833788144814849121442562389161411", "59829159756413729342894676812744682434636729617966", "52279272456251997223423855443456737621863984788183", "38763532926759872443879831991951524533665837883863", "56638226991339129824535133848573315377985495684335", "16325393527364583588124688416337163974617674889558", "24834975786259525357412798764318711712195525975319", "58876168864246475276757249462165968639484411283889", "46967119385856332446679826265378579222197216648561", "25115124151724478139474652222961699828281569733474", "95821327774374813276623416995613233257279821721594", "13634744112145326843195286283498827269313156329624", "69544388471256218713424712765729147954426633772369", "21367719296786288446132899285687474124583948131236", "42269943287552741294186721812215221973899848116717", "83641671636926313752312518468682595389261695782116", "64721474559986154731414619443811317533178954663815", "33698269683449891463473751984416217132549952556429", "33117835818968966659464671248899885173594998158251", "46944749256694893931988128431344114671893965588854", "29225584336431252275849767654979918646526365316893", "48764327179327345262489551386668292612722899735817", "81995624336497866839938136297481586849715775889871", "73962921454979427411727622832162573777144784627189", "84611941992625175929821678593914821168259741919288", "15561414564522314646182791465488192852762277185611", "46491829989133997958389658791387612689621398974323", "47778661117277174353375663877698784531587133679399", "95545868372259826999521166171888779195314864319872", "57436118843477774322975966118278566454962724597654", "69951579135734834738794429363578998626691172239563", "47555764954116459141383442484279195887873194849151", "52827652471339989329131157738234334958911264642945", "87135885597647531724663945572397144943989383459348", "45256334396164122447294119537795739528194567338471", "81746261378222586658117363757768242643349482395692", "39944811366322583226672998278719436921674373417583", "66851742235575777476292721218588526138445187157467", "12481533796766546423353533525228239631118384372937", "79484837359112485799756378541686941147873838713534", "44433798219237824112724978192115112663548957861773", "83275195619277155879284149127132623254538796258884", "71926316735249757528678378124614385648451452232897", "55736279873715131911987355364574566456531641855745", "95599765652829111472677252747441693183216272268299", "96515551812612844748856258958793119967859924163731"};
    int startRow = 50;
    int startCol = 31;
    int endRow = 29;
    int endCol = 20;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> m = {"6699127579938186832283435213714172218224557217734", "8768699712379154549863353867667455878595833967663", "1196284714884556621638285657633777791825769782626", "1984674714412889423461352365761283443279798982696"};
    int startRow = 2;
    int startCol = 3;
    int endRow = 2;
    int endCol = 47;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> m = {"6149457462792577297619434676828481778635533412945", "4969217895154994234842247945412642753597149488843", "7335646131441584576251542992125458618473575531985", "4819462979316756984634127556312487917636433892473", "3937784512482869446217858565911157135279125331755"};
    int startRow = 4;
    int startCol = 1;
    int endRow = 5;
    int endCol = 48;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> m = {"1621173153476345898592777866525563419721186715812", "9586274989167874148796581324416532379972456874169", "2415754452273964349732231575544413619996558999626", "7839315378675843878856566739421628852138657533491"};
    int startRow = 1;
    int startCol = 3;
    int endRow = 2;
    int endCol = 48;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> m = {"58716", "91481", "82362", "27112", "73875", "75977", "92558", "69839", "46967", "15438", "27819", "92918", "36552", "96322", "13612", "65192", "54215", "27692", "16451", "21698", "48127", "72426", "71849", "29195", "54252", "32745", "32441", "29474", "49485", "21594", "48487", "96285", "38395", "43978", "36214", "46922", "77247", "83453", "55194", "23637", "99673", "35134", "57819", "48566", "16777", "25586", "81192", "62765", "96585"};
    int startRow = 47;
    int startCol = 1;
    int endRow = 2;
    int endCol = 5;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> m = {"4855", "2936", "5229", "8826", "7139", "2745", "4835", "7841", "5315", "7422", "3285", "9214", "5847", "6774", "5462", "9869", "7757", "7578", "4932", "5692", "9542", "3336", "4533", "9921", "1979", "1691", "6537", "8977", "4998", "9536", "2985", "2276", "7922", "5756", "7413", "3813", "3359", "7813", "5737", "2867", "2776", "5167", "7974", "6177", "6291", "4248", "2787", "4434", "6379", "7995"};
    int startRow = 49;
    int startCol = 4;
    int endRow = 1;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> m = {"2499", "8359", "5491", "5544", "9545", "4346", "4176", "8161", "6241", "8952", "5966", "6798", "2764", "6163", "8446", "4254", "5322", "7494", "2683", "9333", "5357", "8618", "4688", "6528", "4677", "1145", "7561", "4394", "1268", "9319", "5876", "6722", "5698", "2329", "7672", "1969", "4792", "2257", "7238", "2432", "3983", "2217", "2161", "2766", "7694", "7159", "6772", "9662", "9995", "5541"};
    int startRow = 49;
    int startCol = 2;
    int endRow = 2;
    int endCol = 3;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> m = {"12"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 1;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> m = {"1", "2"};
    int startRow = 2;
    int startCol = 1;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> m = {};
    int startRow = 2;
    int startCol = 49;
    int endRow = 48;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> m = {"12418181611113311181911311111511136261611141511111", "11341131111718116761113291194141721111111172113113", "11111211111112161111911111191111111111314161111111", "11119191118914261111114556111111716111471411113111", "41111411111111111111153151121111132111111191635113", "14111111111411111178632141611117161111114616115211", "11186128118411111111817111111111418114111112115151", "11111817151111111111111619731121415311116112191111", "11111181111111711111181196131111111193111211911111", "19111821115116653141116111138416195111419181311111", "11161111511811711621137111171811111511131118331121", "41516115214117611111616111117811121119131118217111", "11171311166111811139111211911111511981112415118111", "21111261111611151111811911151111113171111711111147", "11117191931916111116111171111411919131711158411151", "13111799541111111831811815818114159571411711711111", "11711111181611146111111626111311118211571116191111", "61114111114191119151118511111211131165141111611611", "51111311831311126131111111121141112111421117111111", "11311511821111171811173881159111111171191111111111", "31111111111311114111118111114611111111111111111111", "71111196131811841111321321111171451111111111671734", "13111311111111341113111115111191151677161111111811", "11111111118111141812113111111111181311181181111411", "31111171311242992116119111191931131111613147111111", "21151111411117712117111414114111111611151111214111", "31111111511218111111151111111111136181811411111161", "48121111111111179511315111118111311311111611138112", "11151172113211111111157151191611111111181111111181", "31151627191111111171151918111111118211416111311751", "11884111111119116417111118878191111111531111111191", "11111111111171115111811111191161221111118111211241", "11161781151111591114118116111711183713119111111111", "13117111111111111418961314171851119113112181961111", "11115511111143111311396511111614191161111781161311", "12111811187711113517711112111419118111111111111911", "75111132162131111511117111411115112116141191161111", "11711411111111114115111111111726111111111115161381", "12111131629121111187111119177561141127111111811111", "11841197119111511114481111111115191111165114711191", "65141112412111111119561621711111111818111111111111", "11915643171141111111115111111991416171164311184191", "11611111112111111125715131193116813711111111116176", "11111125464114111177111111161111261111186181111111", "21192941751118115122951111181111111141133111116591", "11181121172117111175111813112121111111116111111111", "11116111111111964141111218111115214116119111111111", "91941113741111111119111111121311111411361191114161", "18111511711711811181111118151111196581172115111111"};
    int startRow = 1;
    int startCol = 49;
    int endRow = 46;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> m = {"11961111882511174131175571113117292156111418111147", "12611711171161611519115171484111111211116151611111", "81839112111131171818151111116615112116495111117111", "11275111233111114664131131111163187191111811611111", "12618111611211753117115278111882211597191132118511", "15416711131216211511911111818161117774149117935511", "11116831131145179112711111111641411126871112111461", "13195611111111711721128411611378211115111121196979", "11819111151111111111218131161661199111511293116171", "12111118913184461511115111412121121188113115118381", "52141111111112123116112111914567611962111113126831", "11111747112144511111114189311617162987116111115111", "11112111911819118111241116517847948621161111151181", "11111311141711413149121111111111113111171217181117", "21181617911961427651121116161111117179668817111969", "11111716111111151211111616111419113911161113781111", "59211711871111149181111931411182316112112141111111", "11116561169111321111421161151111366911612196115614", "31136116471211111131118915619111615111154117171119", "91718187119171511184961131176211741111166111111374", "21743712951171117411786535713481718191118326111142", "41815761481413115117161191184178131115151622111111", "21121148331195671141615811127199911111111171111651", "12531171719411449111111711891111112146111111168181", "11179812635115141211225211118111112113171161937156", "51117111251114186711714215119511112635111111112189", "11113761911816111991611411711141511117111151811111", "71818111242481139161491111151911712511151417471311", "19191211128261713959157336411411631345161125361118", "58471111612641114119725718514111891119171112117111", "61111511817711145111953111154151119186282811111178", "11154185491789114375111111218381967146911211181121", "21861151616111461349911191219891128817166117111911", "41271131181141811113136181911117646411581115111173", "81211711111192236176811391116414412713111211241515", "31111131198111111691711133811845818191241112914644", "38351112144414518111111111111931815111771622135413", "25111344119111144112171561114834171114111712181911", "35775143861141411114611821111711151211116311316173", "71939318169111111117111211181481172113991111811184", "11188112111111481111111713115615811711811181513111", "11961581176114111111191111126114113115115113196116", "66115161851111121111111119141173412911276911692111", "41171188129119111189173111134117158683141181836152", "55661855151113111214542118114116571511911843151113", "71138841612191412194111911192181131111681913111121", "17147348411118741269152111118111961152111131411411", "11181111111111965755361917471111511111655121169738", "28121911121116111861111311171317791115484111113961", "11931231814161311316217191111111411113151142616112"};
    int startRow = 3;
    int startCol = 47;
    int endRow = 47;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> m = {"71111161631287161113111781176516911611111112911261", "29153846128412183119111119531485711471118211115518", "16114719111174931713119111117515111851119143141651", "67368718513845811164151217111111112711116167711516", "67118112211115179181317178142111813116117512118611", "12931221111161511156511151111431121236115141622291", "11417151111111629174514111141113162517869111237818", "11115361165111421129181579114118111511119582111841", "94726119581112111191719411891115311152111511211121", "21133673132215881131114171112189571911894215111941", "63951121125965121911111214151111141119312151141128", "95237381641111711431314112171129346115162611149111", "61141413111118117715787141132464116111913881791611", "16213116118111114381551111113112891115615711161131", "11595254331119611431811111116291118143176111171181", "71871111811111911711151131717891251111111811291111", "11111131111111171615189111139667911111187311142911", "71111119271919133515149111111422114152799111111111", "11211911191115731175121175541121111118112651361617", "12998711411117142311115152111183311193111119171181", "11913133891154914111557512611621111131611411111111", "99531119511111118117215411651251111111681118171115", "11111171311141141287117111111141167671311111254581", "27316671116134127161111412614491991111133114341112", "11569115171811266411164915581661114321144631191181", "19194259111113611111431716111118114781113222111653", "16919611111571181611611168111114992911211911177515", "16111141737153761986111973711151911116638578861114", "31149511176117131113114711141911281113918117116111", "11418111712514171111112116464171141175121378811189", "45611531146111115167111411134111441151111118391218", "51113216174839119661281711111615125111189211775117", "11871111199618413812111755116891114973311116111111", "51141411113134511118141142712148111811113112131181", "11141111615138171772111231191141592211568118171131", "81189811111311681193111119191974117264131318191111", "11961515142113211151111847839163122188281161111331", "21133186151711511146711115132466171311951171615611", "18121111111111611167116215122111311114111211112111", "11612311131113811871111811411161113111685141711611", "11111352111121914111191113111451111171188115113139", "91314141611111316911565111117171117111111367311511", "65981818116118761849213139681111111935541181118111", "18619911181361181311881315111312641111252111122111", "97153721115213117686411118111211619811211611611613", "31114171224411511741151195741413111314113111151121", "11112171182117841311195181111112711177115113131915", "45194186711714194811111611951136911281211433411131", "21111581188473115113139111982112711591371345144411"};
    int startRow = 2;
    int startCol = 50;
    int endRow = 48;
    int endCol = 3;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> m = {"52161152112141721778312231513131125111322121341341", "32311431121184324541151211152123477345124719683172", "13354316336445131362611616124311523315753312916111", "15254336262124231555517711121551235343252323123113", "51142111143232413545111822272111416216461157336211", "85131212251213311583421112936321852213221322354112", "36164813842133122136211521127391211911211625214311", "64425342223223153124317211321112142113132135351361", "26127531521172282432131132518222411214121111126121", "56614446518927611321272263217233112222718541315423", "22542413614154535713112581112144364731215511763492", "31382442655141351151111213812734185592252233441111", "82521381393741313125242146336815555161311224521213", "11181251488311114311612321414441352229232111211981", "14113373125111412111123121213262431314135111163614", "51742311411311431325132382511411522577132221612112", "12334833138715214522535433131422211217132523121215", "21742432613111236158195153112211355224425217433123", "11322112111321251212314221127511351212711111113317", "68412821471642114135465331245123142182141572327331", "31122963217313184216112422351717423423524151221332", "49218325534122135454753225811411255354355433144393", "21624144522312424226212747412212144262231231351273", "15118341112553214124136383111113121656263132212221", "43114212612711392351642461316627135124232481213511", "32521414374651417671531323413111111211211521435123", "11753413381512815231674431561535342622826363111134", "42116311228113212342111537536111732276211127321634", "16432452452376442841123651652125351438214412435323", "26123315231343214517512214231571421131193232222311", "11422154433569312112585652413398137112767523155142", "23531242241111655333313311131211712152141341214431", "12111267116431168351113238321351511221224117294371", "53421312225131172322565573114445111344458251593171", "31516462342312631516817123414312111135512136142112", "12111431114271411123135233222435112743441654111314", "31512811311743118215236213231836626212432435163151", "51114555245511353182214133712132326461332124114622", "47228113721216252373457223647129881711214265151334", "26143213862311152114643382715552751411111131724872", "22252161522212711223133223535915243314826421211338", "34421311141114771117141112334631111321291441442552", "38411412112181221412321319412556325173351218311213", "13142625152524345234142161115131514521521246122113", "27217263421512137265241723331641243261218116312331", "13114224117534162163131816617212241222164151124813", "34231221311311839113241334132122536111224131227111", "61331133473592271321432515316714424131361936115311", "21131133436131115142535312121193715351115214326215", "73144229632112113111371235154426124142511761411873"};
    int startRow = 45;
    int startCol = 3;
    int endRow = 2;
    int endCol = 40;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 43;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> m = {"11232661312361241559464126368265122223436124336176", "11111111714111513481512586611332352114135176451241", "22123224343111261423267373521132443422514354433813", "62231333161482491111243431231123122131572371261243", "31221341322462683115211375723121122224119111455313", "57141445412352231515442117212122121233158661221152", "26332645621231251162112431424291112621411514124121", "23312221444482421511121312731112432526821117332121", "66235531612152233211145211153223638535951116144122", "16242954721231512611518143114174115321791744111163", "21121383224122741213872434131335417134523131421131", "23153913858123212311712152231341211333222331312116", "33757111741211213313912541123153621633161141491131", "31411245451231221125213117115111651132215611115523", "32141521541111214214611322212618134277215116412121", "41211162551428318125423181633132321227111246286151", "11871115274241211111411528261125311144137551322325", "14211212352336767113135563353519914631457111221113", "11321512141241327112122259227137122124221356232517", "14753556512125532637143121121312224421243132311213", "22113111523678114123121413456151824744842442256473", "21631321111524252315371562535151613111815116522843", "25241863412222242213131321311121151261413616112221", "41721311273267853422644461235121318522174224431231", "11115115213234162271315232421725111551135151165234", "12144137212111232231218221233212415822121112242212", "11611533259235132572644121312543657334656711716331", "48431113214523112553264411346363812121213312121445", "22241942176532113231732643135234422211441623519321", "52293125741241393114711321832311123318111111333113", "34143526622162122358151251251223234112111174131253", "15655232121431451115118471444331224762921216441321", "12331261457153531521387434421715313521133426214513", "51727813294823115123111613651129312131126231922521", "11121131233316258154424511432141512231211114422115", "11823441531664231111386423322325161515114421315534", "84123512412722551541482241262167451311533511823333", "52424121318641824161727164431311312817239114111341", "11157321311317131478511153491246545113145555312112", "51119121233123444552221337242111331223541111133113", "41413491261121834314236123351226733433321131237361", "22236243241545145521176112245712863177223241127145", "12851333346422128133312531515216231912291137548465", "52129411723211151164211264133281453432721381876144", "42367632114314412121324122251126441271521411121733", "11614421824223538134133536414782412266143542326165", "11153224774112374262211315645216112211312114359821", "51421111632192633621543223157664193572112352421194", "73417425133126821221132232131347242412475218342146"};
    int startRow = 38;
    int startCol = 7;
    int endRow = 7;
    int endCol = 36;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> m = {"71241947143461421242164114316111451384772132352612", "75515134168221622134119622115333313221131229116565", "44511112255131125132422421312331112213114218834511", "32126344351155652137911128137819841721814122413213", "12363737242623212111331562213123131272176151234613", "15215141849741541321131344821511951156423554411578", "31252373252531341611129312275143412322121222315612", "42145221136121316121285167224468171521126211234126", "52443441743262111711116123212474116273541421213174", "51648111356331331652358221336111111156632131528714", "11637611112212632212317355117323512552441716411321", "52261143271112121726251271313131312442852214158162", "44131131153314211851622254111512131116116113187147", "22334123368117121214172739311714841111512565214512", "13261231475141122352122135215211212365222228122667", "65211729341352551252331613241164477623411182634212", "11521123153818331331312467741772413161227424111413", "24712162522315254314831134124311743127533514522223", "31872661353125111161251722132512213132241215313724", "53462242253152117314111122532525316726432151232252", "71366224121264871222218321641224141322831566722224", "12724143151132713312273151227118536942523511354163", "27327612311821716113274626111213224324232222157133", "42315211173813119712621113115421321151412312424221", "16135123366311328227211331116515641145321183311411", "19331651213336217114754128211522812322231814132464", "36131116183823461131163354332133512116354115235427", "73321225343143354661417111136222964232221311314223", "44281115151154263528171191831124161131221231131142", "13323561371211323512162535631661124241124255545523", "14625212115111631627623326237541531131154211211333", "41432134751415326375211173311122266151341512318212", "33731451151121511112215315614422762217544336211336", "33232118632127641714163125816284158632742333742127", "12611129754113316522272921343311125267213213232511", "24358437325125412173162445483421315416174141214128", "25434412916343745478211115124426183216545151244112", "11221161643227733111324355143172651151144213263161", "13511119261213721319556423262581217111832317432517", "12124412131471164331135254133153411213136426181422", "47366111445541512112213128572263711231281717424215", "25251321531336623516174512427221241481135521226734", "24812155222332622213111133527113624152246223511267", "14111617116112241517119541112113141626332211211133", "13215631213222231552172425156328116351132713165143", "23612423224444474415121142724232423115411327562411", "53348184224121131711231621411261923224343243817271", "36113785111352231151111178115342117217541361522211", "32511223456111112618224121411152122211233342341331"};
    int startRow = 42;
    int startCol = 2;
    int endRow = 2;
    int endCol = 36;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 40;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> m = {"2431533142134234213255542131211131152451732225221", "8171212362172112144341311351244311152111566111414", "4115111259345373215341145661135421122113154178214", "4111514314531119311132511132136423525211134133532", "6141621154115113413221228114112511418141161357111", "6431211322421213641811121312225513772551117141224", "5112111832341222511331232141112632215121314324141", "1315281241361425211211422622421522231166111222513", "3154261216313272213221211241142215222326122225118", "1621411751634231332331721717421241172211311443224", "5376611512141413762335244143929834451116433217142", "3158323522268335311631421621112432238334115662171", "2214861112224123253914113112348444272184171261234", "5112632854113316131121133318227131121342112342243", "7672773612282441411111117225512542212732214394111", "1375837241627362328131215167132713815126141271122", "1243445232377131647246144844261542312622332712222", "4146215254332311611151131215125817612421416743322", "1125116112121211511311642473261123413462112324221", "2111831592115741144435271615151541331811158121541", "4211228111721275411141151111224636314642122116484", "4232111312341121116324213312812421743213771542142", "4911114131554172434632461541913283563213731453631", "3331334544154234422545526713267111436241755227131", "6421721321553132155127151111331151111211714472223", "4232243231415371213186921444553331221312342623214", "1122621524431444322112125514211131221156311424265", "1651231521311411721614322742111231132133111252231", "3351213135214113526311721518623246132151315422134", "3536256247362241417241821753312171422411173123566", "7513554234621214212333473612581252329111443158324", "7164138543622324265132242343415144151263141213819", "2622121424152171335622116138248422716133111345211", "1171215722111138431458421362211111231245523622224", "7411244455713814722132292521142711119438448121131", "5312631913211641231512232573187155111315211233323", "4744311412131521116113232212213362124333258221361", "4528212211311223785327211335113221121224112223418", "1913311213148112532211241321174311142434613151115", "1151821431127432116216112541133343212163244621112", "6511331428211211446112226323112412134622216313251", "1511222347816359311121517855475292124151391141126", "1141622112123227241261148316231328251281317214468", "1211123162221681472133371161538795221421421351121", "6125316553367112267361155131363514221412541131413", "8353166152612625121374164134342363226454312133362", "5131114371752516511116376561345626151115631211521", "6112116468234215121744231765138124631121111893112", "1196864243612223321114121212361112721149254362341"};
    int startRow = 41;
    int startCol = 8;
    int endRow = 10;
    int endCol = 36;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> m = {"1485311738416726142611341221541117143123411222145", "1113672412522233342422243119214831224513637131113", "1211434211315111225722311182612134413245124374377", "2531541123511415271432126532212915521211331362224", "1133812533111413392114236511462242213137611112451", "2731254443152423152691331551113413536747153112113", "1511136331152635547212121212323962151211113114612", "1211114312141244241274445457313111133751512125323", "2581313331121252322542711212312741325415315241311", "1634234151571817143311315386122311453222253252373", "1116521331335547213517214648622832115421334416463", "2416114111141212271512411421166314255441553373152", "5261434112111131533131133161343171166931263111334", "2226411163457152431222122233122832142231161511311", "1575561342183426333161611615125113312116311112416", "1141574644481111431111232137122211213155551846114", "2311416212115284211762111731117232331546322141361", "2114111231835151164725211141221117424671411228417", "2114359211632122316131861223155333372741115131362", "2522221151112114511232112922373253212212652123171", "6271221282212242614624715211141245311236612313452", "6512117521316134141245332121313522213154412328145", "2512312414225237113287121233111424262947312151127", "5112573224112261345561211122435122385122963361731", "4223281316625359211511111467512411752353653571313", "1212116423134534622312223243553143445232423131112", "5324121687543217315134612111441212352111441113351", "1442142283125241313141252111621328121732116911211", "1771111321746412123111213321524163539654115116113", "1524113262642774454522331116141177271112452594515", "2233211723112123112441212524472612344515113721131", "1144597937536521461332423128211613131151212142313", "3316433581246422115473535425332384132745112364111", "7312111361141421565519418211273232313439242571212", "1111255211752134141131564125223411631185212713214", "2133668275115113133321536251155111164534222144261", "4122413411421452145412314284112443112216121235812", "1142215151131216524348421135625522534163123213381", "2161438351113242223511121519172657162132156146573", "1222353425131513431331711221152321242514731622511", "7113222767414431183332211432742232242224214122212", "1244416442121141241311274614261211213442333228334", "5162364186235412111281442111456144623471613256352", "4614211111156234712726335414211343351911521114431", "1131312121132226166142125152423134585928623322136", "2312411294636423342355121572156113411241123114146", "2135121193162161413623362512114144176261232439383", "7135211821421315451132211312292645511292133637111", "2326171261421311362626371751723131122124344141154"};
    int startRow = 37;
    int startCol = 15;
    int endRow = 10;
    int endCol = 44;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> m = {"41841216113611315137155711322222513627251851711122", "34213366151721246121541463122112843233294138381154", "65122166435154111732474781977621534113546131124921", "12346725541646361213211722662216331211121112515351", "27521212162111274113111133222333514182313543581114", "57311582141311241373417412526144386325552243351124", "62441582351116142313453933117653513312221261441231", "22123128551315416616713723433315144312424556163114", "62133342166141711223242323732283241422711227324324", "24421222463411111123623111512111113191421181383646", "32311643663681453166285117211724233512151166221136", "11971542514116524533111152224641313513421281216141", "23251122112241937314614512333625134145437212113134", "24952172521449121622226727643412211223648311321116", "14253111332352246634562212654148267641113211561336", "11324245236329623311225133126152142171111213112341", "23323361678311571292161511532251323212126325535162", "98352155213522171321331212422211274421111221223536", "55131111313634246112614124221322415122134213237132", "41144221441111116511571431135761483442143111512261", "44513412115473224271112113133411327351151286236111", "72315211469313328123125842412136148164131124224131", "22931325114412715224218111385731724822126163335824", "43412341221358114321821345434341143472423761131174", "21168429713352123171391111311312182641518211616335", "17114555632491414366621222553314341111411611525117", "63577112111322325531761134212521322181151331422141", "21186221151215411251214313246331217532316624111341", "32442436524662316113216218123143551411112314157121", "11391333421131488112821613417112411111116341444312", "13125143527112213644447564618253125151742142853121", "28414471361135413922292411614632454742412441162312", "11435743481163421654241473212114161114392121211271", "42527234512474112112713129117181224541181427234111", "18115161225272115112461162123541314327343114363266", "12122411263581611231232723423751734851354162326111", "22295248131231224328144122846271134243331261836233", "11232122116222111324115372172112123411112135332353", "41122544261513924311211211313421315435121431114132", "51252462411411371322162181322171358137472633926331", "39122512511117213215213413331162226223221326132244", "11161255215321123923367551312313122944142755524131", "31133531135386224234673426385156451514634113711111", "34431162535416125126123333241217311141112223365116", "17276724344833122321631193417216114337972213663321", "15446243511111134441221343213233635641586622112232", "17342141343523321145611234129624236115822341112916", "41224122131165412716111511113338332221285317111322", "29213631531521531655665821113461121124725311751918", "22411125412121341612233732861148111375112563242946"};
    int startRow = 37;
    int startCol = 12;
    int endRow = 15;
    int endCol = 40;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> m = {"12724159651724323711446157344634812421211583214143", "72152421132245223224331143137221425324131131112615", "21253213614523323235112211172242467591223664141144", "75133711243311321511221614611631621335212411525122", "16253123211212141145273998122432847114213113416152", "12419814462114215621274123423114243713371319513294", "28674352122173243513125322862233438567215214411611", "11711321557363465111242341216111211551245319114362", "11112131333121241654198361157954311551121465265126", "11161424121442311717513845311212336211115313624134", "42671451418233274625225311253422222144361831224753", "68243131642122534236244362282523473231223713321213", "61233635231694551672121122482311261371152332311481", "21117221111126116522263224633434115255235212141231", "32153175243221323215418154411411681446532444413561", "14168125221321855421312614221512354429241211151155", "12349522143216126362163718123213164648424411115163", "11713173111261611154383111111131171252125133332121", "45641133225137122226121247373161216417291421533575", "46182224464421634131833114876231753415412181226338", "33172322213316211141122316111313133412113415182213", "16118222731416644341146111311113611111331131561164", "51231418341178123124353223122472251243222111513577", "32232422112111324291212316845241551323221434111945", "35271145432241462262312155411145641113121113256825", "23511445129683123242362343214345129211127535425417", "22226241245112222196526125267922231334157132211551", "71253314411261416516621212247411411127447412522344", "31527642151241117123118312374532363543538613111213", "12161714111511316912112325613581135316413264213111", "82138117242365455154813185222142213523321138234422", "28612121247117416221441121131159333483161314343312", "22446164111137341111731322417311115321313341253311", "12625254115212221321231143121113111145368345537242", "63111114125223415313111621111113215142314413843141", "21214423544663212222123421143132314211236374144111", "32813722242415334511555235543281361227111211114614", "19324711219341451153262352119114358433213421132112", "12145213134212113157182482312953173431142383953463", "21224142752351315511127712211114212324231161612221", "11111311331511213541211934213621275342111131453176", "11172615111551191342551432122151521167558211432174", "11736113141381321354211182621153723142134313223413", "66135115326621574333421111414343113613352461249135", "21843111111465234523766241133424332268526383412264", "11312121121253332291172214542522541318131545337376", "44413354172111111233213427242211512133672114715192", "44311212621312135236254151232266726122164331641151", "33411687412441137151213171752159623882532123535111", "12625111191126121111723335131139421662414623764571"};
    int startRow = 43;
    int startCol = 8;
    int endRow = 3;
    int endCol = 43;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 38;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> m = {"14312445179832553347154341575131142121161411111414", "22524133251811343412412248123742312135411739443131", "21121714441621131113217244145162453126331111321183", "41347333514161292121623312613132315122522152434245", "22251232131821914215232141151131591433135343614141", "36242211221521824121134254111114225346351112213533", "28332121212133211714851623795734142341212411131132", "11133261811151171913237235122132435272321641167131", "45158125121961946539573143514729134271581222261211", "11212174123231491715223561132132132211372735126117", "31124112328142112111634173116142163131272723111552", "31322873431282213111323466151611512913111112215514", "41711512561451265155221456211211311211411516213723", "63521533262143731561212261211121121424421115241512", "44433313338616151122436656136263182244135922111553", "34111414411611262411233521232216311414636216313352", "11222121242835255414125285317311511436292214262433", "31322312529117257637276711451911519451136338122257", "62161513161321152332114215754311453143321275623618", "51654231184151147133255185321934371113164111214115", "22112517121611823462522173153221482628617379173145", "31242322314725111212447721463722412186261211613531", "15463416325614432262112123242215121225223324342216", "17332771151631151165233367221171111613112225164124", "11218221237231116121273852114444123212333421131471", "11413627261231553124131224317341243525123713325431", "12132223341228531215231412516334571126221113595211", "22124431159487132423734425211128313213173132141117", "18417114516121243123281122172522262121111134141763", "76364517817161227233121521753213415333111111547231", "83122232167161531212255154161337165329551722629111", "23511213231271534134131417455123811321321141336334", "11627221313865163325332415433116611132421755933211", "25952415211373143325215154322443332665311124413613", "34492342161612322112256235212142962235589132514222", "15245351411111272248122151322421512312122863131822", "75212325261231481161252141913852443225216626325221", "67861341712223411331372223312224136126123111517111", "24275314315316321216534152214441131111213175328317", "51436711113321855342171254111141813113141562344171", "35235921354353117131212221111132644143122253316241", "22181121422131762861115373311132214121312246146243", "58115214158346421342783211112221211268151112531114", "12122658134423322611532421316561112266239642172133", "24414511135621315616211425116221213558343666234244", "42311321144295151347515151112215912221311131175122", "41211914133941618423821454411587942217312221311234", "63572241224321271721422133121141531521611137256621", "41912275443115237121431283221716121191388131122111"};
    int startRow = 42;
    int startCol = 6;
    int endRow = 6;
    int endCol = 45;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> m = {"23222313111522851511335131711823113314174112147481", "43214421554225721421232118521112316137511136911321", "14361212453612211133142545382131665351115156555233", "21111212713146211413419445625224635135316252365343", "44213212112622313512745213113211211353411731127121", "21115277683812111542134282712231323343132223281142", "22661418225442421521421222651322171143222423464322", "24531342121121212322441325133521165131251243311322", "32111212112372112412142321681219335411511126213136", "35117253412613223133211531133132222414123132226112", "29545123239111244341431623113521116111131224244121", "33523522126144114465421531216443442511125441211131", "16635354112214111411191553211251243321291253162311", "32315435552132221123541274125122118241123131129152", "13191811211776124214337411331135274311314575115921", "14252222325524111531543116214511413578573734111523", "51422331239611215114111171632163222122142121311297", "61541432243222244512361314222664341243241134217154", "77313127247151117553181243473214242948464312124142", "61558574173311231821333121742223384223433114315231", "85545621545275614121913166413114411261523654312124", "12622174451161236133356141324213346265227142211421", "92751141411633222122112121231414211627816631132431", "31123771254214316222517221151271485221112111111112", "51522543121111433322143935581114316121117473112126", "12511611415224112214151317131312213111324112138125", "12123511253536221311361421152111123153455326115721", "14812311274121114142746111353211251223142122616232", "32738512193632141234241627173113451261115112232323", "11311623511211734115313251454242234344711172436234", "31126331672421311113127123421423272125424317165541", "22132512512235352313223942115457135685342762853161", "44117542514411212112111221731821322523442115361714", "41251121237111711311821354121322122224615121722257", "22322118312232121341112137315111345257411336211234", "43321738171542121112732671323612135111412512632331", "14153235612421267152311543252223346331511361161311", "19244122294215488453217227114423527217212253424152", "22363112211561224431149334111275477461151151711331", "23123113951322341216517115261854633239463131785324", "13453285234339322314119211112512191232131163724131", "11512943132187411151164117143521231131215113535445", "34267311641532218735115167331145211311641621212133", "19283881482647155112432958154591618912216171453928", "19331173113436113623541346312224416164251141512325", "61721114314253131414164112311242731187251352516522", "12165622134122462411344125232672111211311211434245", "34445424314112122113274246152225521235112342352856", "21733541512323132163228525432147214711212473122226"};
    int startRow = 38;
    int startCol = 14;
    int endRow = 7;
    int endCol = 40;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> m = {"7228243335423383425237455222323653322225243265322", "5223733274526222232262264932253844222228322524327", "2622387242623663352468522263237627234246426546823", "3355222232225222225222623524922222233523834234743", "4544474545234223376463323223486264662537342623962", "4235333443422424273523224333894223232422255232642", "6356743435652936323422553723235373327425633246475", "7244522433422735452665742442622264224422327323723", "2255533376344225262335462722225449334522222622227", "2265327382267563227532538623234632232222228365243", "5362326365255452329753322332255574663326524244735", "2472225362532522323835227455783636836954324232732", "3263342554233244322222333227252233326332256742232", "5624844323364322642243424263835394339336564433222", "2275262532484872442362323232522793223725232322836", "2526287232422352857822272625322264252673823632523", "9247835357326232375256723649522237224236253523654", "5454782422763483442446522744354344342924742232353", "4222337342322222324322322473725223522338722426223", "3384248234772629482322724239633275323395723523285", "5322624232228372432552732243266922736242324442252", "4436235443488459456852285328323272632637832357222", "6633233232352222442622422222429364429372633458322", "2253892833523233437254456323355347244546442445635", "2456572433343224335274635452633628223642642342575", "4223546483352362522534424349432324382623343259224", "9472677839332633232522742323442752226423263493422", "3362352337245432652422533236552452554223324344236", "2229643253272443233436452243232373839472683266424", "4252426263334323233253222244725542245946273562555", "5343244222264844244252234437676354347425446222435", "2245227622223428522322436456222426244263325873232", "7323252427223237447656742352827342342633342282842", "4332262654223324532285233252243232322923532272933", "2323322229273422223332532262525445253352222333422", "5294256678772235342532333232562573346279624222435", "2256348644524322222232253242324255234322644758463", "2235345422225423228232626242564324342772323837449", "2476652573222235424425634264223322275339428362232", "6335424227764724586332422732232556265322347232842", "4524792224327623722236322257633235285224574242235", "4244425323333632243243453332324522353226467325532", "2252453245428463245333258322432444223222625322232", "7222435392372642223279723439327433423223522632232", "4624854323375553658328224223675647776326422424734", "2632942325223227422256623234493556353423462324242", "4243224344422335543222252452255824233322226662425", "3463665337243332533434952524222322742332232574354", "3568285635244363543356222635263223225225338223425"};
    int startRow = 47;
    int startCol = 2;
    int endRow = 1;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> m = {"5333632442543355242763925624424322232433226332555", "7662445432252223663522547247263438383352852638283", "3445652277334352326469742733462922547262623432283", "4748323222462463322322225373654223449235843322424", "5432222245265427554584237722233382744425522458224", "5244262844222933973564964523342542324435342452553", "4325265592565422249234832347264727363226535326234", "3352634464223373333632745243224382336562822432233", "4945334233457532334226232252223232322532633443376", "2983223622226272856326455232746243425265222342257", "8553626332354332242453423762533335324622347343365", "2343424573334225563542323523324642556523623729247", "7553662222522242636294538324862686442258228522626", "4624334534234423623225242445435522644224452428663", "3374252234742223333397422322255842623227252374526", "3356234292572436672233432654522372223272322324327", "2543234447225653232222286222227332336234248753546", "5243254452342446535223443274723223427522332732233", "4233256363282426324426673235233332263384277222243", "5426222636742724522332462573442384722532245427224", "2446452523224437722324684252742324522472247472533", "3222327282333523224852576252442428256224735456236", "3333352558262748233254243474333283363937332326224", "3644257444226424526424254622422325425232338222453", "2342345226242423525234468622334623734532382333423", "2222253742362246422453233223326932337338226237237", "4842323324425344242422242449643856285235574366335", "2332246632833243229227262222925722533842227236962", "7324363422233227363545755224254322952476622532722", "4222462527332284652633252322945332697423465522527", "2873774622254322538742244223429626324422247232237", "3975892246423437574625723449223272242232223245234", "2522672326672266543522334355228544232432422232229", "2395725223223364766397325626334554242442633533263", "4622282366962232422223232744424435324424235722945", "2444245634352222232424445352492544335252323782434", "6224242672369653373393223426364725262562522437363", "2222223245322346327432457436222344222324327827522", "2465352743934454345232327542422252252837222522647", "2233575332433546393628323327553423632242528442243", "3266552524526728348682243332252462322236235292532", "2445532723342423253632423653923332232667228635273", "4236242445733332223425232337525522736353253423536", "2452259323282522355422654678272236332552355245846", "3424422524278434222253235235765375832263223226727", "2272252642582243325224382245232234632452552523294", "3322332222726222633324545837644322223428222432646", "2233433565637327224528533222295525644523622322252", "3222553222322622223422552628522335622475237225742"};
    int startRow = 48;
    int startCol = 3;
    int endRow = 1;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> m = {"42422322232532277825229762622422343423365354352382", "82463222223324243722322752253623274234372622223432", "22773422373422242692432264755534626452432243676266", "22442226253323343455373442558243344462223665332522", "33334723452222235734236334322283752732432433323444", "22723224362674272369462456252922236344625232224296", "22722263474334244433523235432492262532537243233736", "32253266442228446322235525756235433255564247422432", "65232784426525723257229446722222252232257734634227", "57837943352322432224523863322322637372242442823332", "53472224325252228244546466253274793243432227443543", "25247224283632374574336932543522323357258342323332", "26436325327533256425434344227433358742225523232553", "24255435334236224632322342328232833322332263722253", "35554232723242425422424367462234228524326226422452", "82524434225222264734846269733645332466346224233472", "24252772348234244522232337223234225423234766239232", "96464222343273345846444423525257442775524342666337", "62332242242653525537533835575922227234773424232224", "45424974222726254337453232836326255272232224452932", "35825737442423244323697276333653376524424427272332", "35233472244554323742333862242465228337323254253534", "26626233553342643536252233423262226276333327744432", "34224232733337232325526255523247224482422625262532", "23623247336223422362322333364765236244378422457322", "23223634522286336443533224223454252322435352524335", "52323535262644422442266432324772533322735542354442", "72336227224243942342294648322592233733222564243362", "32444535634649452332262232622226343552232223332232", "24423372726453323252357266362322224652329234383334", "24543424828432962226222453524246522722286223435536", "53344242726732335333442333723423436362732853369252", "82243344272726298232272424323242255343223484252424", "32644232325232554324524232263233223256432752327222", "62256733222262222526275522373532226223236572352224", "28323743229852467224822236223222224699226342524384", "37542346324262354264632564267223324234237422264242", "46252326622542426522346225338255332426534939792262", "24322253573224323372262722365524233243425362225227", "23367243466233325298333422772822225326553263276423", "67222852282625733227433524622222373224343253222544", "34434233545456222232236322372846732534626333326522", "59523333345442257427235422222784392386458635222434", "65644523334472323266328235538254224327234222424223", "42227843265936325244255222595323323232442874336352", "26626224223323322243432352242432732433453323254252", "22878822333233224223322443742266322243463275422442", "46333932236532333296224322272623353224243722382524", "22324732244522434482222596252222473532622225235247", "62235273424238543323356654424524683623227344242353"};
    int startRow = 50;
    int startCol = 2;
    int endRow = 3;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 34;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> m = {"64687", "25872", "88559", "26645", "66393"};
    int startRow = 4;
    int startCol = 5;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> m = {"978", "825", "347", "564"};
    int startRow = 1;
    int startCol = 3;
    int endRow = 4;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> m = {"793", "838", "832"};
    int startRow = 2;
    int startCol = 2;
    int endRow = 2;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> m = {"59882", "94825", "45645"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 3;
    int endCol = 5;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> m = {"339399998"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 1;
    int endCol = 9;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> m = {"319", "221", "222", "242"};
    int startRow = 3;
    int startCol = 3;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> m = {"85182", "93149", "61213", "12115"};
    int startRow = 1;
    int startCol = 2;
    int endRow = 4;
    int endCol = 5;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> m = {"13122", "12162", "39461"};
    int startRow = 3;
    int startCol = 4;
    int endRow = 2;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> m = {"71513", "61136", "23716", "35151"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 3;
    int endCol = 3;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> m = {"2322", "1312", "5141", "6523", "4232"};
    int startRow = 4;
    int startCol = 1;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> m = {"214", "126", "183", "415", "113"};
    int startRow = 4;
    int startCol = 3;
    int endRow = 4;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> m = {"523", "112", "131", "323", "585"};
    int startRow = 5;
    int startCol = 2;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> m = {"4151", "6616", "4234"};
    int startRow = 3;
    int startCol = 3;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> m = {"825779968", "977245396", "993471758", "375968697", "895998244", "659767766", "599989596"};
    int startRow = 5;
    int startCol = 6;
    int endRow = 3;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> m = {"9684889996", "5967747879", "8925249997", "8994998989", "7839795199", "7548499857", "7389884898", "3947898687", "4599571789", "7777859592"};
    int startRow = 1;
    int startCol = 3;
    int endRow = 10;
    int endCol = 6;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> m = {"846972", "555778", "865683", "979787", "997895", "899787"};
    int startRow = 6;
    int startCol = 1;
    int endRow = 2;
    int endCol = 3;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> m = {"6998868938843778888898989872962917695496698978776", "7962959486548598924598689589998944757398397769672", "1899989579399437785683995969986838597956988799977", "8894878997558887789779768644995869769468346959136", "3398796977798588899766975587963378879897397858969", "9987897879999958989649759799996796562848479895985", "9838774998989939999796886466639869938998828746878", "8995869692879987856982979889289438398888884987965", "7699996779839799956999993368892886953349866559949", "9898889775476788561969989787979746258499982321756", "9887893972716467865998886889974887387687982684899", "9893397786889997988568597899753989547989959983372", "4699686889999587268999598885889774742797984889496", "9745978998994829685479629989997995588323974878998", "4898976878499995459993339999849465277838968656996", "4589949489889224743897957987842799764779865988879", "8387719977893824618999789858974368759698857452966", "5598867855719799359892569698964976989919389596878", "9488869799699667799989969993918367986478845776796", "6987953998389995795998978734929979988977977197689", "8979949698899848837574598987687969669846885994799", "9595288689399889897824799247637919598695789263859", "9687657756965786699795989839899998379956798878882", "8799455665886896969481862499999989945947925929669", "7898695969999938297999755998967659669786995826785", "9898992975878499749651376479799784629355798967983", "8762556572865854895399848757694297987357179889868", "9798896589693859888495933767787545987359379997691", "7947518859794489794996299569639928973767987546918", "9746759549799385995497968976943828879879657899993", "8677888929796729698766844912998689989597995885799", "9899894895754778599676397974699882656764857886778", "8676866999768464558896378899896988969198797198979", "5896877697596595599379534982748988717917378888967", "8886894886898929888688999397899762898937599846399", "8969789453848697958959398189886967867693855997269", "5175788958489989938558689986998898819789897794698", "8979973839977959895789586579697795989689798356978", "7337598768898965979854689946975949378999893969819", "9777969799188999293589389697888898957924669738895", "3998578787579987999989966869769998689797788669695", "5471977989999978945498998699954876473689669929994", "9447893699834895899493586877996558998799957889159", "7969399776493779784768759258991758689944979729799", "8976676933757169579845989976687696865897738348829", "7677584928862683998938782968164699898866383897588", "9766971625856958759885989889988887189966479676468", "9996999867288969695599445798797877499749999393396", "4678771539298693694899889595798779879975793992579"};
    int startRow = 1;
    int startCol = 49;
    int endRow = 48;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> m = {"9558599869969686668986991866995785899559586597979", "8996264982795796696849789295997965885298988898899", "9759993579647544885467468679469729786656597693985", "7972996896749777798789929969759769996982426797989", "8957597587865468995879673496897198835889788989469", "9678798768657799958799798799776998386689898678779", "7389981466765998999969959858569579559699799558439", "9849842997489897945896445589998748577956898589667", "7569699985684974848794469857569953577599989977583", "3938958699689878999688659694896699999659879255798", "9993899297585798989969558367868914196763989379935", "5995253973938689549689893779979949998586986999985", "9998449498888998697376894964749899898748699676989", "1779965349989835889947799797868649986989257378698", "8878978587881958777757899937957797873877965789985", "9857688967796319896977217458989996697959899996699", "8989893654499867996697889999978888995933399994888", "9764937998798839987497494973779955959898974587969", "8894896876855766858898965689397957858747917884649", "9959989957679687991999887449247934538964992959968", "8629538799755859897889229849447798942798889797699", "3994679949695998289958999839589726389945988686879", "8877795983936781298558739595998899668358997769978", "5998783857377996999897676986978998988827979788668", "9649735962999945753769639949977889579699461887966", "9498796939945979789866589754398999666997875995948", "5849697686992949879989687811795189887963264939999", "9399987798358868981988653595998991699694989586958", "7276998898995783767999569996965497829388986496578", "7978778365763738879799899886987493998895899399979", "5969776861558999568999966958747388779374879967837", "3848988679495689678799359759999765897862799978753", "7676988789677876899869598777999959491876198789599", "6699777799983968797399299933767999588299945978779", "4564998696888567998838999968978885387875697789769", "5657965865275588986299459788997588869589589972694", "8465199986669788999537788797949935886697789985596", "7199446769898874688697659898995879567994696655296", "5997748889759847155668866679999888974837477999896", "8768735799999989996789689967887597996774977596397", "9947968758989979599886989899588678599799645589996", "6698937683956537885799289876836446736997278948957", "8873967886999588678567186779839856918897625464999", "8862257835887568997968199197394769659334694899967", "9918899928859688995999958977259997799468669787869", "8816794888939565389728488587971498882547896449448", "9992874664455696856874997475578424775889481839997", "9789365695479894737739598995959869983979879996993", "6999798757796966298556696589639859776884966777757"};
    int startRow = 48;
    int startCol = 49;
    int endRow = 2;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> m = {"86799783997762889659999989979882998989994569159556", "97959974669985698599978589985979587767779788745577", "72977488898877735974386562793591499475395389659762", "59846589749777991626468666932897986549879499597469", "79875595298984859792816496996587999597989857548386", "85863789948773879996288999969685664898969998599826", "17398599767797978749886352766888888895789495487859", "97988977998697888987998826499536798978884975999888", "86468689987658889987389566957984887978989658169689", "79243945793868878477896983378989875596983679994877", "89949697785459427169997887399983296889795988798643", "39638955298773798789979589876989754985968882968978", "99799799666997195864899916947759246399547995765393", "96662688599464542366469664868999499897895599788956", "38989649625795989998916999687798754957578854989988", "87577779688557868386988846546868899838887989386839", "63938383987899785955838993578865996884986975987597", "88866978998999869566783379974324877689999979899754", "69969497996297778797789765787981987999957899676626", "85969539988878999727578154879753944877799789349885", "86999897898899497539899799979775987847889843929893", "79699569997587869999796878643988783776849798399968", "67785965788879335477488677993558899686965699698296", "98979985696488599495579379579889697889989479989269", "82978324969698762988874997296959989999989589596998", "79785687998973947936688999969366979889538929988585", "75597736979858899478796628699968693973796787787585", "66872886899437897895793896797539967748969995599898", "59863317599978999959488544858759864758986999958689", "19779997676596779677865798637999978389836987899977", "94959756878988676875868969599741865699983995579848", "26943677825839489696985965762993594399898899768986", "89878988778759872777998697599635667893888949495949", "79999769879548856693798947858938796969387755969297", "97789578963566798499536979678979288594996653998398", "94998959799829995955677679985899469797793197579964", "97529949715599969865629987459779886382999748879895", "99899599998494489753256869488979989799969292934889", "59789577997787979588892747699798679978985891968999", "89867539269669768988966889898396897955759655576287", "87876989989987978796738298658296575696468399798685", "49988687797795286986389687899949857495589788665969", "85686996858985889962986776978835647695958862489897", "63699779699196975749539989939995998889955393999579", "69969187754799859998499297998295287353578985496828", "55469488399789959796888528967598768593839898928939", "76866867975688953969188957886799787995975984799998", "99999987888691732597119877989978998956179985898777", "89839584798697879686899229888984975993836958892368", "88956839999856698779869928859977488926898999378788"};
    int startRow = 49;
    int startCol = 49;
    int endRow = 1;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> m = {"59846799987989997868769998997966697726989797784697", "93897689997889678959897678999999929495999979869798", "85789698879977669738973936899798657948977999868496", "59798998986996399848599787997648998987998998896375", "87989685778899759538989994786664896596699979458947", "89996487697839589696818789779857929656398658528399", "98949979885829848696456877928398889183666865746886", "79437999449479969487789755829699279978939795849643", "99294669588565966598897845489597873785995497988688", "46898776882356988774889699889598895898669978995571", "29379759597929499961749899955997786885765649691199", "76948988935687996667998618456789693998486799489789", "68779597998856984748918669973499874597498698539998", "75599659792978888348779889794747889987988987787496", "78635641748338895388398981828498877989892578989679", "87489985975858456883793679898799979797999595894896", "38969598778839936899991896999592689699833785577675", "87889768188399887699986149999881949199458729938989", "46543654583762786996898587918687853988487978459897", "74595439948887896927378865576567377799695998868785", "82937967994855727879185897785387798894771894997539", "69887696764976999695867979786534777995787978865899", "44468588788995998259499857879886586988878399337755", "55369789879843757299898752939785997985787695856194", "29599279875878768837989869944969838953359877958657", "78678949985877926487997776979939289678669959966999", "35689693959637327998394985798794845653579349473875", "98439263997757778898795794987977989453989969848857", "78779797985879769887528998633776997957944788199984", "95887857169494952982984997996895699994921944979899", "86998998597885978756392589574727972853743892969698", "98498589597874889885795486796889799879489973872761", "86851889393729557855948898399783659789989899898545", "79969846898899897968987779837966577398858568939899", "89867366391596617987599829437925579834885248299362", "58813988918949785798959769678759967787876959699986", "98757895855998995979878954969196793959496767657969", "44899685738888769888859686968663885878389589949617", "98589599669459949869668959779754967699999828786896", "89988866923374977996541859286994686987968437999652", "88896787489699889966689864974648959649988277257827", "62498769869868893579779787737898739558645692769998", "68869917897548716996597949958869799769696977646568", "88896589738899693886998768969476167839875574837959", "76743984943868625495765839857767859989399679588793", "34779698874672789983369189959698986678859576924846", "99597695934875897976953899989965879799289775794999", "67799986999788996549399596998974985788539499797974", "99564298947769988996439873625868689887462857896966"};
    int startRow = 1;
    int startCol = 2;
    int endRow = 48;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> m = {"84899899747559348683899168938993994596827835758988", "89596789977877689926575569943297999999888757999895", "99698988996784369796714965959383896644792881578779", "99696985859959839597997668389667925449737478964899", "89959965148447459876489899389396697574956868698699", "93979839778898876798349987895883894895377936876363", "99749697899949995869875799588889979878863998699298", "98599639977195768682897969427848868395977978977799", "99879197857998998975642869678359789839989888918986", "98347825967849929897589996988386586879854884965869", "89979958995857788157978998358979459487787943598439", "86997757542858549999847776974988827866984577748288", "98478999979585295997854582498619166767889827599775", "64988739792699748559994259979668995899896919544899", "96995889488898368754799789577968849879789999999797", "96965848298589897899879493977778551794649686478645", "77966792588889579269977897783697999313596682496797", "78997565999488962959795568888922966877976998979767", "95983989897694774557697999339778995874398778599979", "74568796486893629999288259896879899583686876848795", "97998659893899969697799868999991789945799997559999", "88783987598837638999697677776377638938333299599899", "88582598745537943649974468997969939976738369675997", "99489966978657888999998999546786557898697932889377", "51898947439769665499444457788677389888988498987984", "79996987399989898858849478947988499679994989586999", "74984958998887879744975815829983998777889696382863", "58855776894785995952538766827791599716569999799869", "89885877757887968775572886979829954985378878879878", "97999765396969285639999799999879895878554644797998", "86979896549478575923999946956474876999887942289375", "97878698781999979952971878578956589539786799785599", "96978799597936839945989955886885498968974775787579", "79779779985897769867264397748899999165685937977989", "82899656697899879953996492548999766966296939677578", "89987468729788979671593249818668985599698967878965", "38989715799793589576988956689799795949799947998989", "78787965572387896689866782977555432985995995998869", "84768998777579799175687778696999357899629285966699", "93898779766829369897635789189879966378779968388699", "69998917878969976969799866374989698689947799586846", "49899998868288888955488586548896976835932784695799", "86789475559898999785439879878978689873793698796996", "93967497849979797353478867728999259949689599457968", "78789868649498886856757795999285774864999999958886", "84487669999779549969796779728977998489999989759887", "58997666428986973968899455898988899553884698799875", "48888389989673668459866868998988889878899988889467", "99587983677999992884869999899975479568696759889895", "99686956596245989475596776969993769921579947695994"};
    int startRow = 2;
    int startCol = 49;
    int endRow = 49;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> m = {"99989758499899999885778888798399995899588788979962", "97999926294468548768979486577799958696867598494986", "74537998994883942687959879694745696886999897997238", "91788897559988637189498992293959678649939496999999", "98973965971994299458473476988276957556989963577689", "89997775896967968278931568338997668967999883797963", "39978864989689895966834999662479398795697879263568", "89991996954459985887698883798986386757959576476997", "96677685697998595279956477866678828367873848872996", "49985788769348796794598198836694997667397997776987", "94539676986283189998989848859694895999969495297939", "87998898658889567878979888999696895875888298899938", "69949998545997968196978414883881798764988798565876", "25868427958768988587698427888899365979799898468889", "88992976562847953838938898696497186648968784986796", "79999837459699286698217888985286999483976887769699", "97919899659398994985877188966998966698892267899577", "57759699886997688589477999849786789946897994396986", "99988888839196928959966726997979891983997989989769", "66889987789648585798984999597898497819668937888926", "78777994187793968477688998664935644677886979489963", "69976745848999888743689799829449998798958847997888", "96775499769542695389879865973683899976646496897938", "75698788748879999489899786897897949896384934959649", "66669689849776673679494978837798798869699869659889", "68874949659956869889937739679862999397651898879888", "97978855798949988357386898488776599949957693596777", "99968884985497894996749487986478686899679954996928", "98979976569766475522929484929984988598199672779948", "49894294215989598999557977689568794379999983969754", "78687994969978788759932754877934499479937882895869", "88999896979699896559697578845996279488997579957465", "97768699587894692965868748293175489799899495798998", "87897598778889937192198346354448899939799979166457", "76897888888998589866897886989913487877669675729968", "78998889688999735838858975778689999884973796397247", "86757687378499923659879599997997547526969997891567", "69999895297799789499886996962869599997896894988836", "58543889993854598779759795934767396818998495969386", "78598995977498558998689655299999789938698798989398", "97969999899448993799798963378773899496869697589397", "68924997659686658988938887997999579999545769966987", "26799788799985797356689779579696978295847839989979", "96475855779926989893398593965598879996878988876987", "46959999198394853679996977356993999658769668795987", "18687699859658574983796864829988899339987589958787", "58985998698995746946975766799696657778768974988974", "89697989464979639998697778979488949856185389899798", "98849265988215978968667785628958786977898956799998", "99298958889877993756594879979469694292198997834473"};
    int startRow = 1;
    int startCol = 50;
    int endRow = 49;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> m = {"7991818175948564176719797798181611681918697151438", "1116791971911891113991491984611924876891116157915", "1111731111129859181887928719699882313181859721289", "6111581718261989731197818971198996911999911899649", "9119663698881161579586619867795598179657199198789", "6611119998199992597417918191118119119887817111111", "1563748698911181194181784191859784491118199996459", "9198899677898191915111883118987998817981315791211", "5399927111698191998774149915638171991989587967999", "1194648679898167615711111679779116696119119279117", "4112819911439489181882541797782118816818796981919", "3898792515167979917891879199192189117191891197981", "9281198161811116781718199989794869981969882197368", "9891189994179897871191849496116416789853119198738", "9663449688917319738185876491137146686547146911928", "8971114119197911859199991497114811819119116916891", "5688189699187154899699947171979617763611589517118", "7368629999999198191391211833117118618779919113861", "3451717999857917818227711386788895865989589781489", "9189988867919711879931185341964886198598915777899", "3297886197648829985857692866194851341164111685191", "1899161111997959893997987115139989999319541296327", "1918695675781796161941999999679188767191918189117", "9859189877918887998981119798861119547811919449899", "7896386111959198118991985753115161198946915991117", "8198791394941118186364749919685977357591199189989", "8188419785591669615668196959121776918755899915979", "8159119118966791811719199918818193991549154559791", "9739179813111823514656318319161991548471919577916", "7861199891988911789848119151737869819671875391951", "5849171898189996185969479973881981879191184961971", "1589898139891199881688611911371969181991141989784", "1951188719987799776199117491918138658186154894111", "9417517447197115299912159886819389159174349984698", "8919511917815199998951381917159187199731999796861", "3786913119196274915888668987989918817471731699869", "2999199173881816186389981864521918888917451619688", "1994111698186968657758583189686461191859786453199", "1953181178899815219919167491759661775171911994583", "6959715786819575677131788912391561991567198931685", "9897816961599561911597681696195696311911714191971", "7679978146979718613177369841116832691963568819111", "4959119931971581918398518789941966999188872155979", "3977891759888977998891135791711669496927418998176", "4197161165789651611999931161979114881187198115791", "9195189791841978114119469866995111711977992589671", "1791351176989613192154949261111118166971186968591", "7288899514516676899819761987199899899999698918917", "9373897189931191511999479771879998913794116897818", "8851188618194798895579991611581189689716999811697"};
    int startRow = 49;
    int startCol = 1;
    int endRow = 2;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> m = {"9619889519171651189711898118571819898171649767918", "1188987681117841837357899871168919979957111829111", "8691121369771166564161477158761819918868135189819", "1936915148878696521397149855991751511145596898471", "1981186988131991191398596411915689799885287491787", "7116987196516971651755138917989711989911919191958", "7971561141911891896876786199688966181179916993813", "6511587996115645151795773197819117364691898811586", "1918399551981925935975226998989675199714578759199", "2169776799146188963119651881881117891581918811749", "7191874781441391411111799655691936192198817171636", "9969699815691197819958963988117111981475811611896", "6941141198991678197597819398198911719789561177793", "7191761491199981517648119716117799367993651185192", "9918351381191119996971717821711991818712897911882", "9726897911411618561111996518188645177193316748191", "1388198919911116771191966818978659777589419491157", "9897256314899715598117181689119768898979961911841", "1997161419711379598846681169799698797811157352599", "7879615959881198196818191115279399118797193891199", "1861971169671961939416175194779198885796181191411", "1784315989195161268199997393599975957185167198811", "1191121811917911688511417194983789112799869799289", "5479398419917928811991998358615187194169616111111", "5989191689111785191884717913894431116817179191977", "5114195198584784981719713188977611988167188417469", "9515119393166197816999141199991954887119897161118", "9889516798183849867191798359644177839187189726779", "4889111747387788998126541219195881491979955519995", "1717198799699139516419811318649182977741577981162", "7193919656111618689998165957871191159515814611112", "1197191918953555561771891294946759137818848196697", "1963996887198999169659199195199139188791111796998", "5868619898178849889711571976878795481919996519986", "8371889117419754115959491993879888981191179631219", "1143991179919113773783961137319681618997851458587", "9931989117119111759991918979231991571641983963789", "9598879139895618189811179917547138451481186918769", "9181417381885899988191496195774579189919919417868", "9799511119914568828817789658676871941617899119145", "5789724199111917891998518986169947411978811875989", "8119481191169799212175981545689119399619918892358", "9611591181654883765511912161879519199998784987949", "6988611517811189981994671196131915149838141195741", "9988169291153995719821841819987476686879996181728", "9879995193118199991982979811589896869661889191549", "8999129941951771194184899879991784118891994141164", "1798197981138119911941289519691669781791967894612", "1599911748195196197897118618491374981529711685878"};
    int startRow = 49;
    int startCol = 2;
    int endRow = 1;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> m = {"2111631119895759878199819574179689825974689111969", "2898931319419698195186468919612115641111979714967", "1987184785771995878111117862191981886989517717859", "9989914897635189485128818988111879996185198974395", "5318191779881897581418618845311565189672619811774", "9979417161161189744191681121815677983999811871719", "8197571733874181451786978193968812791158819991898", "5611191617119593192718995337857871819999966811989", "1118188148914171698497199874965159576119166719998", "1571919189886819977863199741686688121577297918989", "9979195311949939952197891291887899191791838867111", "7118188149997968818988999848149989617719194384418", "8991491579989419521927181191996191148189888881819", "9685878874955116971617996491191711915578684949176", "7698997916195118981681198379664984618191788187986", "5997187896718339998591787111959929513929387199961", "1871811195976929741969646699981181771479181699918", "6153897891471911917385189121961587968189891951115", "8971397161818891871918189515994157176995199986961", "7599919191998854196176971615885918188141911991117", "1116871696514811911881798916919914852991841598934", "1181146216999287167891191614796496798779991969999", "9136497711791741918818991949915187135989819715992", "1119118971497976991839146818996128879619878159967", "1999691699719177817529117314926767818887919991963", "5698171871938199989819911191716769693699783175847", "9149364971518185187911131329389736151799111116681", "1917917112294119919714113916891194951812639193644", "6818595751597594949289899399141497167917199917716", "4759199919766963282137898119499948497156271948165", "9959847613291898638411571119191881796699879517193", "8111717779685859655195611427999987171911948991966", "1716975138811699689781679991798798881199811159198", "1119877918995116859133529998195759195748318811127", "9831131895981161496131161911877991116948117991191", "1216119469141946996198997774577971348571733761156", "7254911569269718979829979811561935881111618168784", "9885788181851155717996917419913185997899949817911", "6197888118116711715161896881798991516191981999978", "8818818676521611186788191415379411998989784152694", "9188511689197816126719111155117184182113653788116", "8181969319861645189779911179796979187178811199787", "7716116529169636169915636111967419171498119181747", "1818199599958897816695516498711485896968571933348", "8199913145291136184781117911116159583988391737917", "2189719989198899798919199549715211879569959998961", "8957618718738158954161891659158911796636791611191", "4119971773637614869191183989581916889749691997893", "1984397869999984591914999414164691178151976218789"};
    int startRow = 49;
    int startCol = 2;
    int endRow = 1;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> m = {"62111184311111111914891981819391919191819119887141", "19171891665191513959111994991771918131199986119675", "91852144117899819989117175117978181339899159617699", "67191199117641469519688169119812771971118897116817", "17631915199131114189131177791318389818141879146861", "11885556189177181794981689154694983887119114111119", "89771818679781858759511717115159586394565847179118", "76179177799161491516621488611511198229974515969619", "16945659199991911418117554319199911187665176916919", "99981991179599986184181959961115717189991894197574", "75518661919199186788196581178315772198599119116193", "93271111719919796884894911619968811118998118879361", "15998711759677981114111899195911945999786188478869", "93899471189987118969119111919167917119451796618717", "11971164911179916917199511199918148171116531191499", "91199197712775917827976117475411112191111951111111", "18571896871721318941311919911189981496912481971918", "28747196799991194111789168935413981169615618111191", "51117574111998961669516961439119511847417819742336", "17119841111319691114115119616197969119128181194171", "69184811517681819999198817199761178191611911611119", "11119194951115199217811271718486151788799117111888", "94198911616858549914786181798916181175319819754971", "56561481799984119791165817764939213919878393911854", "91671571563568917351161896197511619611818881118868", "19991919969899699816971819189919918894369811689177", "18881819161947847111868781493581686996115997911899", "59696786812119729198416441941899732119417911118193", "31181614181169789113958177881839689124879994247911", "28581115917331941492699117118159611991196811916518", "11929411114515661879589699172915398141915876596228", "88419979275811891159851791817928797177399999191112", "11619679171195989115163195119911919611199673111919", "38191118991969819175811991741199695181717186991514", "91841629181986197614816197615376991158218671879378", "91216618911685171111111879176466958981111139117127", "17811811379889711871779812611167119981181716118818", "89913191593991991171719711177545149166111165171199", "79119979112891111775191684811112999955976698981178", "99179119971959199786811618918686111139111831979898", "98719939589758866988191161995191991661148315762677", "18968169181812669951911919877687994712969716189181", "18191934139111171176719911611118911581817976117219", "81811811711592964193471931881876863819775688998591", "88519993611982671192971291199113915989714917199948", "79895151597197936911191871296188768316995971581619", "11196119991999177188199489911925198111919114111799", "19119811891871417878156969784741411918791415668689", "81933878311931118751416999115379847179813969917919"};
    int startRow = 48;
    int startCol = 50;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> m = {"1187711815119899911761192181117997756695135111191", "9891959481118519818812916618911918511218181184411", "9898591719479158764991819211188982991478449919161", "1697611699113181199119916118211789891991191185461", "8961967118519661619881619181918191799673849111831", "1491288918797918981181177117919894718816111816971", "1955977111819519119617599795911819114977119811681", "8111311199119999194851159115115891945818121977989", "6114974764891195199971918629197193691171679929698", "9957941181161155117994991867747119919161882988118", "1917121514141111617993148586439711918886395897711", "8585585111161118898158199594156791419189661996971", "1985911381916971111997798511978819167391198517199", "7211147795979731986199111197179771813599781131171", "3815991329781118418187771117781479118998811811961", "8786591781521547187691118919943171418591167171979", "1148181834811118761418719919971868211971816184811", "5111917114718978819811941188117958114199761184769", "1999861869499671691591618991111911819197192899117", "7171581818119194359911941172119868497891861188599", "5751191935989111111968638187177861931417155989971", "1311911181789991391991911851916898988968119698391", "1866859991111698186849129189997911719168114147141", "1119979961199991817996115659715176731816189161114", "9387111191739896997818699168619496714581799837999", "9989869118794917157116771741711111161549793881181", "1189971188911114496811165179198199147199888571931", "1612119131361121999649661777985711816991681914818", "8511967117187129913911844567797861917181111819819", "9181813991519711499789928119587146919898571115191", "1941157791999517171991997691171181918161311968556", "9988991491924199818318188181147165595118951881981", "6711919191159197991887838189796488118114989587719", "1891998981917817791913181489651971169188985171899", "1187899111111981112438171919419617389171146597178", "1188911919999119179911171181111587118198191658917", "3899147119511345511972768181965481181887382188981", "1172111811171878811998818879184411519999166775879", "8199699111698719111818111161899899977161812597411", "7371871717917979918968628711311168898618618619117", "1577219581711191178898116917911891171916171881811", "9911118588191777141597966784758191133181388154618", "1519111116911477111811119127199162789199149619918", "1192658171911199918619744719714614717551118991811", "9117511987549111591913799918998178471111915275881", "1157149819919891114981819711911191981961745915179", "1789119781111918711411318146174115829951911618961", "1511981118111711781561991111116982161921158791791", "3189175818486591591674751196119519961171767695921", "6116711951181968199416771117141811916131151898171"};
    int startRow = 50;
    int startCol = 48;
    int endRow = 2;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> m = {"18731694189695898179788888728988959948488917619218", "91791911175898939698179557939811666836189196199698", "17161511969117942991769998816768811118995181811911", "57891774581915599164999117711677175981811999877794", "81179981717891911178971719395899889874186118862371", "88119986471981811689169799117141819149711963199711", "98111911974691978129118189681171176128181911913985", "16624899191789117119983141919129989991395171881964", "91141911799991689712611189951199759181883969411177", "71473141311117942619116394787914617918128499116913", "11918166867967559592973997164797918742113718719714", "43569976184966141999819111588979281592159885617468", "19195961199111961151671118915176991992118798911118", "97871171814716895689919911186186171989889174191387", "95827831561881787919112179411699939657978877912998", "93478181899886851877518699181975991119979668817191", "98991819949119711391191958177177818697599918497181", "16941524117195691199911845179134179188999619759786", "81419173796181788531846511579649189811117411169198", "18619246415818169196811811191335199939144997311591", "81899917416911159987292771395919811461497698182968", "91778977529319571976891772816917398193618181117919", "93411117818516878315179911918851897997712791713811", "81175188994991917117198883118184121958951817919898", "19181171891769191713419198671798689799899516191661", "91177691915798161711189121185191119844159818811569", "91199878829641518191598183718775999114515718799791", "39613191991111618111497898111211364791897114559969", "71811798166389714976691887811416254899951145966811", "76918468517777174569913117891191194481911199713512", "15157161771811179892917848618365992419188961111511", "11618117799895982199813987487998974931616739617118", "66699585413791954666881917989198871599919991787629", "51412877195914119171493111779381738999185619581623", "98171881191159169878191889819117317618295917469159", "99691899689513825191155517116995611811699191989899", "87884921526179118997613898616119199796871985179961", "68769191881111981985488981811115991999651761917191", "89914177178619132182189571997849118995875181911911", "77788897996139971774112111589181111197915781179996", "11716158589713467999312898661769979199591319791899", "11819791456917178178194193416112615898181696748116", "55789318988985351361175948151198152558811111178711", "11826918411168199674818487611799615871131995192669", "86697974611198911919916985767189171999631166121581", "86918899116196198111984191171119192119819494119117", "17717961589193993477918511911699679815785167159111", "19514975991159719947886946796676859197111851578881", "81178968917799191874867189816798887931481146151119", "59571475111846174815999989911588876191569418381811"};
    int startRow = 49;
    int startCol = 1;
    int endRow = 2;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> m = {"5997148795813141179994197148651381881978411589169", "7915867118895118181111111981998988519169119969997", "5466477476889916811919149196881161694118988998891", "1912719891681795197139191812914915119711119519921", "1819735611199959299117911129971881968185879159991", "9158799831891699891194119119415199814246291919811", "1969597687719511861719917817718591899111396796979", "1869178919529173978787891881761671916111172811181", "1661368181999839596991191569279118898681171186199", "1197141181189978599915911611178191866118587197591", "9141199611871918119479769919591175177918174166992", "8779111911116121991119778419911114778136386415117", "7829391159977993342681118919915138914999618911747", "7169616719981914158671877913511719196732191186193", "6731196537111918116958199578543661116618996116697", "4171495741586579831187191864897171119719738413911", "8118779679858111729218171598499719119171191799118", "9675816997417916879859358811331887621111158111687", "1111894818285523911917691779671976189997719811999", "8496379298817991748851997117893911911916751899887", "9949115741919597146398121128655618114911973184798", "8918757177995571841149288111959597811919811988199", "3791971819661891711588111117998194198118617387119", "4191139511717314696291899974879715191341145791817", "8469993171566183198485811817197989993911761697731", "9959986916759377988198841669198759173919119317183", "1119777615178982796118711788761156868458714915611", "8191968778179991941251111571715116128116998191891", "1868769111191144819963879755891791968174887668566", "1496887997931917171794649911791918511819917813599", "1134911131318158492911695466819649947199111718831", "1889191987614976989911579188619914981614116689798", "6491889327146919714881471591267599341116691591996", "1596617145181661117184866187395974181516219699494", "9111197149353881713581661167986199949996191115919", "7857953191176918811819755111896818678181768586789", "1195924916819172957169199617171877479931519171961", "6879189943469611198991197815818961999981721117871", "7718968481198818111881198376971388611139531817497", "1994811812811171218899911149198918876719759919871", "5599768953751145851819116961419999197157967371916", "1561857726567961117112819998899611181119991118999", "7198311413999818197919987168798699188111816918211", "9814489979919588311999711161871191489969191985123", "7981175781996748995971197954769168119871161189699", "6146541117191195167958418589661599681151977919193", "9971186915117898918171141811185141997885181461199", "1919165716887467873861499617118696967912433711899", "9915539191581689881911951116995571412815561781793"};
    int startRow = 49;
    int startCol = 48;
    int endRow = 2;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> m = {"6997724134248123825716811521151119712271169825618", "1417171321343268915386517168327515218611173983678", "1821196151331679511411667515625455223113941793123", "4611151915676135291688978647761293132516916116616", "1871711652191343532362895643111981615587212973118", "1588266715133119411111655378725114247118273174318", "7151477422176789466571619466891266196811816771146", "1141313635326791111521117129561632446281474981554", "7111718449274248114244146371195836127295116137428", "7196639151145771278358819477211777113848557643541", "7295184417718683121921458191354881651116111112351", "6522798133177211122971151321941352965162475943614", "4831554135815916199217311942117111711163281882918", "5551525899636314315633519317911152455158211161911", "4191954494987636775123247147771611712891119917316", "8321896818424234756816424162179113967517265876256", "5531821127321915137356247311212891371652661121211", "1811477115757397111767711621713185674812131911831", "1427914496941313791747615364199162786543111431141", "7486741511431435917813121417119115137731716188163", "1281181562192941119861591486611199715112921764415", "1263873667117519514221432412961788591411155413517", "3724561849819537313141291371411669134426774726191", "1673487363614935611344174814148941392989883715429", "4911257172151224239458111714849537417587171858611", "1989135845241881379113256811912129972422551364827", "6113686297214331767116933851967199712357198381411", "9616451571941124279464512612198158764449257861918", "4111423157116687116143385571526991512175822611141", "6619572131321115131781318381251923113191921342799", "6992249113642817713315761111564771515844511178194", "5821117176476285313913811114331432891691131281111", "5246681112529722911114662669745253881181432268321", "1111666219815412679743131186751111161125191135141", "8114947254111191515549557236974411546371928315995", "1312161415741511339165951117775185272117857411811", "1217191471413118658165836971517851417646856827192", "4467121544174812166111551491182311731134551314661", "1119913135414626588781115987726828895911615537165", "5114473892481241811841397975494423251854768954721", "1116119613827115355756291674822391697391165114761", "8173361619375759599617913851146267372168119244417", "2821123953681511833218176119193453916153183451811", "9147313194841399181734256131868642446511811471126", "8666613714937179419219411915582741227414111151136", "2926121721786191917992127183183478885591513229716", "5528111711745971644141273618985225925985156938118", "5255692112814815814413291119812239911257678217631", "6471956787147674871989112116124411171348183293618", "8963271486762219611795171247441686827171191688111"};
    int startRow = 49;
    int startCol = 2;
    int endRow = 1;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> m = {"19141123341818111919692282161738279197191361825437", "25652172711141834981161171139781728115419119853735", "17972719282151864136258112111837118174646185421411", "74154165125131414886973871611121844987141438211626", "31995198811123574513149111195134164437562196691514", "51664817545489545855111121547111312516157751647941", "21415719586111356181689757321241132813919131114171", "14128129529153546625112675566631118784747731813351", "98114378219217111921175884362573566111751894235328", "57838342968121418672171631772431813914584288253163", "11813232137465117473514865321313216311571915357129", "14122591761683161846196117719814264138269921739117", "79161656179319732497245355519661693138951161629851", "91651719241311311161611431861585451512881711719199", "54315487153314683582169558156561229791125542535719", "59232181945211111112752981181344164111454891135567", "41811113116841697281511183663179871933359319946472", "82858871621389781311692819523826138117912111771119", "71854312719172462158895221317572512818813213111881", "44171114121417138166111641131943753241113155216523", "86956931113118712448951136651835197162716853171719", "81157175156541296115259121334456272159887116835811", "53382161371611111691274149112591811791498286351145", "11118432767261111198117419618152711413117723545115", "14525289117291394131989152942114576992964719676866", "28121965537681334715111863453998786136453695119116", "44851116914483647321425852521111171821796332611766", "41247581163211435659183531644311432917111117514142", "61385352717367918131131831122981164522686375651138", "51594162195115188675412476795173399131771255561584", "71141146916153111411249177492381172111532911371114", "68113598584199331661127462111871114518712173762118", "51826832314726812212724151146591859317167391121111", "41111813514795278881511191215148537151755158371187", "17191346325168112117711639449859717964443291171115", "31911643111181551124151441123124139414696764161138", "72361381273878712614316111814234414161517314116191", "25473391211722613152458768159512112812328118898112", "95131561142718415222558188722168647396211841923174", "51481151512161264211625619872337415467211413813171", "13277632659313518342195361811164887117141197612389", "11914611319117962161891163711219393246223191552813", "28742637111562331627145811111781581514161112433238", "82988113866637411915655823149226167568727195111537", "13114389645192117381111117757151721561828188111172", "73674112511488183875172641557118871664218814377969", "25861911234841655453611927781413137531716814833251", "72181256618311118315254414923293573531113911218161", "54388459675175716768164151183488321339126944813858"};
    int startRow = 49;
    int startCol = 2;
    int endRow = 2;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> m = {"71541411198151214331711515825818534897517776125166", "18113254124611851357122138115121199846767531112314", "91631192119867291774546191211441999111191118151191", "74133119992619171175858613356118938194311914993173", "33791133264825216312196283717513226751838162491641", "31111664364774112861139121126171217695781513225152", "15311291711711725216517643176161811119246411113116", "76221418379181539857675199561346654121851761397536", "11831179159783911787413661191343431221575114826511", "72156821694258411166768923228291725793191211228834", "65343685111516474317421297497711469215117145331378", "67946291179496283922535711381723134186413619615375", "59311339124151964241191119411819529135518369166671", "51118313621871916696676556441323721192732959532911", "34567648361274116615711869691112519311146892125421", "81891333295331316111151913588941613621179712865277", "68959934176811111657288437937743155432951822511326", "51548721226714174295231181621163479422191218891371", "17331966511618162318551461721929171518161197217591", "22142157966611599611417733112132419225151817811713", "68643459481186795571157511691331764471115151128719", "81113194324168816878961861181665421176581125997593", "84413177316182694553198466812812361425313674545194", "41178141119461167714317658299666412123939377291959", "11112811112113291977584124165515369918766155676611", "36283165436457947219999617451111417148345473661111", "42735651364941119155181371479892171521165232616135", "24463126129953192679118161531388121161372138711811", "11177439154713131543621644314931719815549411165548", "94915291161154328134158174512673825831814198611137", "44591345251816345334362862553781188979255113917117", "15715193155663821152311124918115211168397281362184", "41461147351131313461221688192641323141111458119718", "12717921512131243711312621117869433194982317871541", "55846976741215211552151382174796783477879964211911", "16321464781325419664318718184957129868719599618616", "81211516117544288242611118185114614594171345165521", "13685182358174119981245124546385139156112191311387", "16119679551121612241254873156148535434425748874161", "31892218167517995113911918265415216839154138817724", "91171961577124218519521618511757611767748649972367", "77111381821717129771954611524858372235951357919131", "12274514181151621858783181524527171671143718741412", "14212921931664248867311661769921119811715198414616", "14718626998952124961723745513748126576617181623311", "18171123971615797776861621554334773157614832776957", "38162112866471682635113413684389211868821693131919", "53287182348366626564665172221324926111274193588792", "17754479814784416153319171539346815111748811581762"};
    int startRow = 48;
    int startCol = 50;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> m = {"61125223124241223215321212322211522571763414233531", "52123728243212212818131215242272253511223362463612", "46392352442111111331354314713661231215521312162235", "86173311439231735162142535332111342612613864345112", "33232115572312125218456145233423615221456325322566", "12171712439141262364212135284113114122321233131411", "25111431113123713133212152341121634215266336711221", "25231351112142635323975151193272353214728132213231", "28451173612142912322232215367525117254221121242312", "21131313312337523255148141315222334152722112415128", "41123121161111351122222521232837317112232314253411", "52461111222275734122221313741125221133722322411323", "13242327624111118333621634112412112742265231452122", "55645312252122122122125461141447116213312417544437", "55244831121121217852835222211611452212261144111241", "23311316324551232161123724212413629311143111232148", "72122166841212424111141523717122117211413411123231", "24227714166432841117312317811465331529423664164621", "58124134572352113315263736822215423131311122145161", "51411225214113561513112311281124652123494341111464", "22233214213161273552421234177111219242224674231312", "25211752633168317127857531344116312584152843232421", "11222132462712583126131315232114315111455234143422", "42235322151726321233233141113323312232412261821462", "12132451141432572421131332112442514521715341272668", "54231117722752222221112182333132343811151155211452", "16262531531171132645714243226151266145451282333421", "12338215243218515523214133131221331132111121322314", "33272214213451432122211325431215211216321632214172", "31321415511212312432224345122133341552516174713121", "13131122724222173312148514261441612322331141412347", "14151352671252315521215114211231123244514392123811", "71432244422582341111154232622246142176321313211112", "75324331246721311651342113173372321544991732115415", "57219411554132144722323212181211242221417417611123", "36212323535381142235636231122243316311131522312142", "33512512525131511135622281422831213251242721951365", "12211331126427414211321154235512413112911311151687", "51352161411542161122141155169411362423635216458113", "22612262433111541521233142234532135413615322243131", "55153132483813312215231114589212525122251333231647", "52633334522333119311272221361321112215662422213113", "22462121713212111323423113158133424722216112441152", "35182741511221175115231712234726111411114213558111", "22614312611621173345221111213331131682423213432112", "22551513212313722335114241521452163212711761242136", "52222151126111338624224246137241352463171124317112", "11983142195331772226411325174482445232711113621123", "35296351157269162632512223314813551252126212119213"};
    int startRow = 1;
    int startCol = 49;
    int endRow = 49;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> m = {"8643315312634412326352335332114232431282322314227", "2231152151263132321716132442271232715272225923332", "2131452723222145152682516446228737144111226612342", "1241171533721161113263411424121425512123115321153", "3114111231611122135343312341562611313118264211334", "5242356276131412523144623154245332351425514111231", "2211111755233221117141312341731641373253231351354", "2111729178135434941221253574336733511114439223211", "1113131412823351543552152115724571152531323242133", "1252742121211213513335213511352454383241813126472", "3832212413121226111243121541745217121533238173121", "8412481311421913112223112226223131412211721113521", "4621562155251132472443233241111113944151542122581", "1772121322616121242243433541462111315221321821123", "5234521134385325174261112211232223422312615511515", "7222361524122224131324216563624236342123432221113", "3248244351521496329131222152211311141121322643112", "1264231213815322421742126146211134121132211313121", "2421142211131873324115265511342437345272214122412", "1333161131861434211535413242113345212414212121113", "1444341311217551361616125535114131125737314323511", "5452212533235113717215711325511112425423342431612", "5572213432161272273547314162531135643525471251321", "2326211521524222217215442115121231364571214452123", "4411437741723722314122422316623218213575732325291", "4311534132131822341217211329553142221511211331322", "6155212423117432411252511245132323837723193345234", "2117225212861563811932661612412621424633123233228", "3212624124564422112622152264312157811141121241212", "3133111243444411612716628222571231121431151212144", "6361532342311132693221122371124122563142264413314", "4322711151463228126134321167856242233389141222111", "8134113327612534226131158721172312365412253226114", "8321831511121251126821415375414258254211412725251", "6343321215517232452111697912116252552326141466212", "1328141252424136145532615631267121441356172223326", "2236151334113832311112219343653122171314221781121", "1223344399222314212261294542244372426132112214111", "5512512424211118114316411218112313514137124151516", "9341322156314258372121165154165275814115654313222", "2784131234142526511422242615114238321196933113312", "6467141125132315582111512181433431821312241561192", "1112122726216254222235717111136324442324651434625", "2233114443243141214417132232612136367185224169382", "5511321342612617113231128221212241524114223421923", "8252147921452512226136132144127141622411222227252", "1123528143413414872124121263133322234631752212531", "4141366155114542311122222431386522522332333231213", "5341137321612144145111143246247115193212113637466"};
    int startRow = 48;
    int startCol = 1;
    int endRow = 1;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 44;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> m = {"83535428113147174223128672161112147715515521747311", "11513116123812455111248226362611223424121723311242", "23262212111131231524421241222631323113413154214165", "64232331133411229251312161123241316732723322615216", "31212192193224222113566524216441113443831421121431", "45133354343271233131418343132272261622241614321252", "23133121171143328412531215212171332912522743139553", "13522112132324371644211711232332112252112164644521", "11351712441111122581325381451411215222346234122621", "43341347673218228126121112131381212314164236111559", "21313589133455424115163242254251233747411154211231", "21215212213331215115113586281112431114241632417329", "16271312784876623241135417114122815321112821547121", "83913165221222516314115141261116115353322122523615", "41613211521614443514517454214163312141154131713231", "11123275722315711226325624432112333212481112351131", "11215152412122622212241155114144421521732282262642", "11111911443745132242121313712846322114311463151112", "22822112513132322922621514513113216486212461622111", "21228242114121215325143562422335451264111311326342", "61224122221353214235611212221224111171314211153352", "64129111127322611752244841612336463131143262422211", "51542113214311311512212444431212138522513932342212", "71426422521412241322331361636122721244153215712122", "32624723851333821116211541326563144711122321115425", "36212345135153225292338224111321714151322433122453", "11463266123223231162326115118411111111116534114172", "63441211115631113233135143153139442123262462331526", "41553511571531171135421213182242562212121135222435", "23211111172212112512263151864225125236121233428122", "34311463474131331332121632446112212621131319214121", "15413214315542112131823347315111517421113174531191", "17425622328456356132421461334233232273211124721112", "24652631232481226917141714134125223326112111241211", "46121821233131117412222242433451124174122119671825", "23221511111261242244311354268217252323223522135121", "12221224411142165344221235724131275127151253125541", "12232121322142663231641312241222196315112653211142", "11111333114221543512463331431312531131171213636173", "12342242121153542221342151211112612221221257263241", "12133147274121441114251153331762141222123225933332", "21125121212463153155314234613124141622319232329323", "62329111424452231339145581153113263428112181752134", "25512212438222623458146123183622142333343473331211", "21413621238111311211252343334251643333113522136131", "21751213237353443444124551244222231323634222225143", "66233212311165621321231324121212712352315162215512", "24574332182311423416281525221113126241523237143253", "21332141265162132121214381111151151211611435421222", "14277241624215442311192324711131112328211117416233"};
    int startRow = 1;
    int startCol = 2;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> m = {"4434512212323215211211126132432511433262112125323", "1475813232391136862412792231243722125465113111325", "3321753452711211812114112251838181643311812547812", "4212422451172641431427323352921442217573122569252", "4833247214561444743613211211262311152625221142412", "3542716211731431416235222133422211211865227185242", "8236474233132634652321127616123113511534411133413", "1447224642433222112372424223252162112223831726122", "6554111194623822322312217252474521121124222217226", "3234134433155325251312123341321251731333413413722", "3522152162148524622634111315283221235161211727153", "2814223114332361822141232141151252622264261222323", "4221142257282644241153423943141847112276811114223", "4463315623211171137231152111131148232357322154351", "3132272616452124436521116252335172233126436253544", "1261291113111141241263184244176163331224119131122", "1133811112725322923116254223119863222566726426212", "6218411235832223553181261671118466343112412512342", "2241113513133531423121734131411411411314554322943", "1522123313116212211943122571121113241523225154521", "2115161282231334161213242212641754113235511155511", "1177321132332113122513124537511221713222461122316", "3641171322733513353231216415417122161177241356242", "2622322122129156331411314222165221352644142122211", "1123375265255947131211727421531253222259133331321", "5211352223818534113141261112634743231132711233116", "6167987351126518332122314773251421471417441252422", "7418522615329173212227641252224334312572462238612", "6612536122431366222152712231173114122515612472313", "1412394231213125341111426627225484732136111614616", "2131442513216284126813313233614322482382755244411", "2321217461512224551261446533133157422214157652243", "2419446211113224414233464353133124272911311225311", "1113243422342534832263448182514335343234252252421", "1273273611311123921864254114331511232535324561786", "3252112621333915149121113153141261223541267712264", "2721212323586323321226221211624421514453311112422", "4522345242539322621316158861323414121111321142211", "4833221472321821224413162112432215632151521446132", "2232321673413248641122212322187332191311231125172", "1261233232148242257344131622242211212251242331281", "1621221111182117261271432213322149422111221252212", "1621733115445562132772381214551113121515121128453", "2265212414263221515114122214313716232231131211125", "2124222383318171125326224232315123128322722266631", "2813166411814246122321123453821111336661429926221", "6262742124524136171222221262254423232211536135121", "2513331332341143621622319233213435372367121613216", "8351112213315721311141746911152411315322855241454"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 49;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> m = {"3227"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 1;
    int endCol = 4;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> m = {"22222222222222222222222222222222222222222222222222", "11111111111111111111111111111111111111111111111112", "22222222222222222222222222222222222212222212222222", "21111111111111111111111111111111111212111212111111", "21222122212222222222222212222222221212221212122222", "21212121212121111111111212111111121211121212121112", "21212221222122122212221212122222221222121212121222", "21211111111111121212121212121111111122221212121211", "21222222222222221222121212122222222211111212121222", "21111111111111111111121212111111111212222212121112", "22222222222222222222221222122222221212111112221222", "11111111111111111111111111121111121212111111111211", "22222222222222222222222222122222122212122222221222", "21111111111111111111111112111112111112121111121112", "21222122222222222222222212222212222212122222122222", "21212121111111111111111211111211111212111112111111", "21212121222222222222221222221222221212222212222222", "21212121211111111111111111121111121211111211111112", "21212121222222222222222222122222121212221222222212", "21212121211111111111111112111112121212122111111212", "21212121112222222222222222222212121212112222221212", "21212121122111111111111111111112121222111111121212", "21212121221222222222222222222222122111222222121212", "21212121211211111111111111111111112191211112121212", "21212121212212222222222222222222222991222212121212", "21212121212122111111111111111111111111111212121212", "21212121212121222222222222222222222222221212121212", "21212121212121211111111111111111111111121212121212", "21212121212121212221222112221222222222121212121212", "21212121212121212121212122121211111112121212121212", "21212121212121212122212221122212222212121212121212", "21212121212121212111111111111112111212121212121212", "21212121212121212222222222221222191222121212121212", "21212121212121211111111111121211191111121212121212", "21212121212121222223322223421222222112221212121212", "21212121212122111111111111111111112122111212121212", "21212121212212222222222222222222212121222212121212", "21212121211221111111111111111111212121211112121212", "21212121222122222222222222222221212121212222121212", "21212121112111111111111111111121212121212111121212", "21212121222212221222122212222121212121212222221212", "21212121121222122212221222112121212121221111111212", "21213121111111111111111111122121212122122212221212", "21212122222222222222222222221121212112211212121212", "21212111111111111111111111112221212211221212121212", "21219122222222222222222222222111221222121212121212", "21219121111111111111111111111222122112121212121212", "21212122222222222222222222222212112212121212122212", "21212111111111111111111111111112121212122212111112", "22212922222244242424222222222222221232111113232222"};
    int startRow = 17;
    int startCol = 22;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1278;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 50;
    int endRow = 50;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 98;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 50;
    int endRow = 50;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> m = {};
    int startRow = 50;
    int startCol = 1;
    int endRow = 1;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> m = {};
    int startRow = 50;
    int startCol = 1;
    int endRow = 1;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> m = {"66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666", "66666666666666666666666666666666666666666666666666"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 50;
    int endRow = 50;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> m = {};
    int startRow = 50;
    int startCol = 50;
    int endRow = 1;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> m = {"99888", "89988", "88998", "88899", "88889"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 5;
    int endCol = 5;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> m = {"22"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 1;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 98;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 160;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 49;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> m = {"28186824726568657182997799952261146428587113656334", "32299166557167398453111137367687796473927791228143", "12329463718383927626571573431548647653632439431183", "54736237533896262595786971951853926348989248634771", "32889368854171313473962327333843798415369464565592", "78578649847962736776149672397912838483354721983337", "83177577546352446946472458951328393739451856987381", "99513883363343941242629979722598556532537758833844", "78577144237229472497644932257365119583715494139266", "89918299473991866683414354323872869468493472437763", "91411644779467752333166557715312123274328232786617", "68193367188288317829789194869615514517126834432211", "88856882257279983763898812991999582841953541418472", "64149848746538137434638731524918329373857497379919", "34391393212383483181335917674454753579791926232411", "24361117628166561246823974295176471281643526149853", "24441971891562263749844772177679793788547561654918", "68296984459844779354699913542527124482897578755657", "79748571883844755571426191336871725362437618774198", "11941642677482534945289276614385356381257863985276", "68557991933555726397764171922666381979861185656953", "63771489374836623381689443672215273988915196637665", "59242545954793223972832765738153164287469839138396", "27632259249447166611218376559281942836529562947697", "62724476747554743795979387633396455562114646919978", "54324889183844389687593851849392532819626677974632", "47865361642356564447393943676669246669593636259381", "18717231877568892394299238732339219621597223711639", "12692988278267232136895912917977937193689413995186", "46585393149598648564436253171834262768779628572115", "54785913719941335982656541131183251431698369272667", "69324422492211514798451752466922621839968988917454", "28893327754641748935384874827338817926468722585157", "65694132973238985148614528157593139231197381988469", "11745996268166467448288985749429261639946852265998", "51738385556427922311446848285959799595147458937836", "66933384933491365223485654829155755753143459276677", "78324731728265429721152643176543352524563369678547", "35948268832134556488122485147311584398871773227564", "44335173225929749626423822177418531917298588262923", "33232359793757754595457339628741133965812186531867", "19389555731818237565553127493773698423683653464187", "31252323129733414521224658966737722652833595634973", "98442891235291496613815761771297138997118517544994", "97542858339297287135919763199728449394126734329912", "47114614371252554462316328515526227555663475517624", "75235399342211253678992534399414627224847145857285", "78273415286223262197357694175899616635843532528435", "15961991426313176395497712663823118175886587592828", "36771566285193874419262114993853221254663842126436"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 48;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> m = {"48355898598411995297584278989644258529951958497371", "96535385791621814353614481616861518278974415799937", "99526231783657984243911521211394535722991185796232", "55498516896912682384962687378486269145529677323225", "19554826994161752655119998423798462654347598752223", "31555647663463919795461538891598958152433138674764", "99416625431982522973618682794769886874474746786483", "14649858642497883826153234399814382826151723789221", "32232411492856849914866853838593649461584498188288", "44146338723767785725943879761156379794884621243272", "41548565636281923978318532874336569841352855627478", "22762957812636572256471977946276991418614252471762", "74413376839847389264294474818733451169181566494582", "53559623132635296162854687241147363347888411449271", "65375294748326722313568492838232864957244938422697", "43537964173189638756643452798625591344342453536371", "95121787258584379565468141888167333636787363541776", "62585883685549731259572388556474475718561971951219", "41668595187131332854825299555316745935136937636673", "49732114123356839459164473977958752642792667479366", "86923744175594856829895668995713714979545571768863", "23656579463627243571794344157724641998274884599949", "99164972914682269411532379119715376744788213814528", "62635563874395733829537774995533425616942465961939", "48772549727687235581769682732235814682381981613891", "53237485168741361582947866615164179485269614637412", "45876223595928893376582625938851856125937343523213", "59414112564874428286986994947676843192715462368657", "47462925854298219455877136365627185371922246277718", "96162579831387427364873462764538914278441343876888", "36573814422868548868449122111884469983989199723533", "39975943221179562985685672925512726274723387699576", "29119587183381781617663353131678981529487339283689", "25443894857622117725935246452784767364951241188446", "32543632874878229565526371323393822879945368396963", "51596289631628817772597984275829647317926798536125", "73694992585311453574319153582518453354689967367896", "88713676457639874356893388455666514227291282718167", "65385278272762485673524236614664913616677193866625", "35867618678717133817174832336755292264953255779825", "67314411185996858926877861154353964115821979995498", "52567865925147436556344896554475992718479269168474", "46557347188845332356942476213431165198572842265828", "13747672522646557521417297562426463221277154575289", "85479451656174876715362779241279911429161326664386", "22859541832278796799479143648143148444728479967426", "77295157764877456149614663241189734243712133128599", "32512363877638691824933112745149773328642335437585", "37878543389354737154672519894311249713182394624198", "52599662627634417451631863211198486356612987853765"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 47;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> m = {"71292418854634628236622825896261281498253313465175", "61466515364876457316827648388715658298423887429859", "21886376852977458123328189957228215632984179714423", "42499988251419453443281978789691519217199837543874", "87984441335919979727715987283621399633534924622581", "95223792327231126441657892984584875824944646645176", "82269856488996554663877213351899983667973563215358", "41619612927814437776492991841134162923882442772548", "87775751861198425621234629334519957292287965514745", "85591682896693165156834278284532171837986345621126", "47679141874864549519179425513547972873737111235155", "75956278911151748253421232251695899285955157821433", "74575576959697376195343788663699924261533481827496", "73777364869757666252473179921855823626912654127712", "63763452667886812948732343227233498424357135614715", "35847268338439124236474799514366828532243755454754", "28135838861218382471595958464813585765539449955882", "63912473919712658282275664883678667572552229372279", "38672989783356828434825988597999554739498593862792", "17134886755621935236818817224112512681353593385775", "43398369277282286766381984548269499325923738636292", "79868693752454344263367454483381346873957169263579", "68339763493973112718258751353848452395332598896776", "56214484829173563425518474231873463592771677724743", "38182723198521125939414261197497995254233872874144", "17548127788448189518736432863293946527983826633373", "13354561882888922261998934234653667181177953645731", "53749858174498746544281426641826897759556765338881", "27629565861199764249494836112683232177362341215498", "31746975881419697259561842683365126783241988926631", "45643936668989134755144691655838269442195684376648", "14231936252533125423368979615994386176472422692843", "14673266285126776228832945954152496519128419975386", "17894951361753625613686663316864544716732616645184", "14277577535178283349333168526155442898529734529723", "55355827977298416178246258246368583844549138847342", "14363754185647263588656734174385488653858182598834", "46893812654297171588166882649653232319444563248986", "86923536829121311212526855215841432483942854752762", "99437689437711723322548773287684597233165513472684", "53719438914526288416732555371885156766536788394123", "78564814389139566838165828646561186266564265188448", "15351214578859721154795124797165381498733418359364", "61191235974536117983226196568173189972248561261647", "83823578846545132643996685261537888814485828121272", "27171629313378936941886966845656142891791937728282", "96853489833163478285183147996815487515267462488274", "47366425373115777738372685254887482923447737995665", "46959672117851747642126365211532836761668243285958", "83923662446554588163644745482677846179993525661246"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> m = {"999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778", "999999999999999999998888888887777777756956778"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 40;
    int endCol = 40;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 49;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1273;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 49;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 50;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> m = {"22", "22"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 2;
    int endCol = 2;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 46;
    int endCol = 20;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> m = {"45223223", "28723979", "21982372", "92228234", "76227676"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 5;
    int endCol = 6;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> m = {"999999999"};
    int startRow = 1;
    int startCol = 1;
    int endRow = 1;
    int endCol = 9;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> m = {};
    int startRow = 1;
    int startCol = 1;
    int endRow = 50;
    int endCol = 49;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 1273;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> m = {"123456789987654321123456789987654321123456789", "123456789987654324423456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "123456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "312456789987654321123456789987654321123456789", "372456789987654321123456789987654327723456789"};
    int startRow = 1;
    int startCol = 44;
    int endRow = 16;
    int endCol = 1;
    ExpensiveTravel* pObj = new ExpensiveTravel();
    clock_t start = clock();
    int result = pObj->minTime(m, startRow, startCol, endRow, endCol);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=9906197&rd=10659&pm=7337
********************************************************************************
#include <algorithm> 
#include <iostream> 
#include <sstream> 
#include <string> 
#include <vector> 
#include <queue> 
#include <set> 
#include <map> 
#include <cstdio> 
#include <cstdlib> 
#include <cctype> 
#include <cmath> 
#include <list> 
using namespace std; 
 
// LIB CODE 
#define PB push_back 
#define SZ(v) ((int)(v).size()) 
#define FOR(i,a,b) for(int i=(a);i<int(b);++i) 
#define REP(i,n) FOR(i,0,n) 
int DX[]={-1,0,1,0,0}; 
int DY[]={0,1,0,-1,0}; 
// REAL CODE 
 
typedef struct S { int x,y,z; } S; 
 
int best[50][50][2520]; 
 
int cost[10]={-1,2520,1260,840,630,504,420,360,315,280}; 
 
#define ADDBACK(x,y,z,c) if(best[x][y][z]==-1||c<best[x][y][z]) { best[x][y][z]=c; q.PB((S){x,y,z}); } 
#define ADDFRONT(x,y,z,c) if(best[x][y][z]==-1||c<best[x][y][z]) { best[x][y][z]=c; q.push_front((S){x,y,z}); } 
 
class ExpensiveTravel { 
public: 
  int minTime(vector <string> g, int sx, int sy, int ex, int ey) { 
    int h=SZ(g),w=SZ(g[0]); 
    --sx,--sy,--ex,--ey; 
     
    memset(best,-1,sizeof(best)); 
    deque<S> q; ADDBACK(sx,sy,0,0); 
    while(!q.empty()) { 
      int x=q.front().x,y=q.front().y,z=q.front().z; q.pop_front(); 
      if(x==ex&&y==ey) return best[x][y][z]; 
      ADDBACK(x,y,2520-cost[g[x][y]-'0'],best[x][y][z]+1); 
      REP(k,4) { 
        int nx=x+DX[k],ny=y+DY[k]; 
        if(nx<0||nx>=h||ny<0||ny>=w) continue; 
        int nz=z-cost[g[nx][ny]-'0']; 
        if(nz<0) continue; 
        ADDFRONT(nx,ny,nz,best[x][y][z]); 
      } 
    } 
    return -1; 
  } 
}; 
 
 
 
// Powered by FileEdit
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/