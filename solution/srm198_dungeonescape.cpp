/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2449
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class DungeonEscape {
public:
    int exitTime(vector<string> up, vector<string> down, vector<string> east, vector<string> west, int startLevel, int startEasting);
};

int DungeonEscape::exitTime(vector<string> up, vector<string> down, vector<string> east, vector<string> west, int startLevel, int startEasting) {
    int ret;
    return ret;
}


int test0() {
    vector<string> up = {"0x4", "0x3", "0x3"};
    vector<string> down = {"0x9", "009", "0x9"};
    vector<string> east = {"0x9", "1x9", "009"};
    vector<string> west = {"0x9", "0x0", "009"};
    int startLevel = 2;
    int startEasting = 2;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> up = {"xxxxxxxxx1", "1xxxxxxxxx", "xxxxxxxxx1"};
    vector<string> down = {"xxxxxxxxxx", "xxxxxxxxxx", "xxxxxxxxxx"};
    vector<string> east = {"1111111111", "xxxxxxxxxx", "1111111111"};
    vector<string> west = {"xxxxxxxxxx", "1111111111", "xxxxxxxxxx"};
    int startLevel = 2;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> up = {"xxxxxxxxx1", "xxxx999991", "x999999991"};
    vector<string> down = {"1111111111", "1111111111", "1111111111"};
    vector<string> east = {"1111122242", "2222222241", "2111111111"};
    vector<string> west = {"xxxxxxxxx1", "1111111111", "xxxxxxxxx1"};
    int startLevel = 2;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> up = {"1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1", "1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1"};
    vector<string> down = {"22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222", "22222222222222222222222222222222222222222222222222"};
    vector<string> east = {};
    vector<string> west = {};
    int startLevel = 49;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 2500;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> up = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    vector<string> down = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    vector<string> east = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    vector<string> west = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    int startLevel = 49;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> up = {"x0", "x0"};
    vector<string> down = {"22", "22"};
    vector<string> east = {"22", "11"};
    vector<string> west = {"11", "22"};
    int startLevel = 1;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> up = {"9xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    vector<string> down = {"0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x", "0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x"};
    vector<string> east = {};
    vector<string> west = {"x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "0x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x1x"};
    int startLevel = 49;
    int startEasting = 49;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 58;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> up = {};
    vector<string> down = {};
    vector<string> east = {};
    vector<string> west = {};
    int startLevel = 49;
    int startEasting = 49;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> up = {};
    vector<string> down = {};
    vector<string> east = {};
    vector<string> west = {};
    int startLevel = 49;
    int startEasting = 24;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> up = {"9xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000111112222233333444445555566666777778888899999", "00000111112222233333444445555566666777778888899999", "00000111112222233333444445555566666777778888899999", "00000111112222233333444445555566666777778888899999", "00000111112222233333444445555566666777778888899999"};
    vector<string> down = {};
    vector<string> east = {};
    vector<string> west = {"38957893579587857817348375873856813847857858189347", "34959590358938797591035819025775357390984390843435", "93589809589038590389843497590357134938590583853928", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "88888888888888888888888888888888888888888888888888", "99999999999999999999999999999999999999999999999999"};
    int startLevel = 49;
    int startEasting = 49;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 197;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> up = {"1x2x3x4x5x6x7x8x9", "00000000000000000", "98765432223456789", "12345678987654321"};
    vector<string> down = {"00000000000000000", "00000000000000000", "00000000000000000", "00000000000000000"};
    vector<string> east = {"xxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx", "22222222222222222", "33333333333333333"};
    vector<string> west = {"xxxxxxxxxxxxxxxxx", "xxxxxxxxxxxxxxxxx", "22222222222222222", "33333333333333333"};
    int startLevel = 3;
    int startEasting = 12;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> up = {"1xxxx128x2xx7", "x6049467968x2", "3x9xxx8x38xx4", "xx66595x874x2", "x997x5x6260xx", "xx3xx84xx2440", "05x7xx19263x8", "2x2053902xx33", "49xx2x5xxx42x", "22xx571xxx9xx", "576180xx0x913", "9890043445864", "xxx07888xx879", "4xx307874x5xx", "x99x16x1x2x98", "674xxx810674x", "637x133x0x4xx"};
    vector<string> down = {"0x05557x16101", "1402941x2x1x0", "x50x20xx4xxxx", "2xxx58x7xx4x4", "251x63xxx4x85", "8x640xx5xx384", "x03553x2x3x99", "x951xxxx6x895", "xx71980xx3x67", "56957x4106269", "xx61xx9x24x78", "19104xx39803x", "xx5x65x243x38", "x0xxx014180x6", "x0xxx4x53x849", "19x04xxx336xx", "214xx6320x902"};
    vector<string> east = {"52634xxx62x7x", "75xxx6xx405x7", "24x6x05xx3x72", "2936x34x1xxxx", "698x3xx701734", "xx7x9x7xx1534", "6xxx32xx149x8", "0x20xxx8754x8", "4219xx06x939x", "60619xxxxx4x9", "43708x48512xx", "xxx2216933x31", "0698x383x17x8", "46626xxx5367x", "02x4x35x24xx5", "9x543142753x7", "5373x4739x93x"};
    vector<string> west = {"694x4218x5380", "xxx63x640755x", "89xx9x9xx9xx7", "3xxx619x1x149", "4332x93844940", "xx92568944x5x", "x51x6x86080x0", "x934x88482xx1", "9x8x1854197x0", "x7x55x74xxxx4", "3990971x9xxx2", "458x29xx5x9xx", "008x06945x71x", "5693x83x27x74", "x309679393823", "73668803139x9", "0x5x3138xx757"};
    int startLevel = 16;
    int startEasting = 12;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 129;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> up = {"4x658x0xx181", "210878xxx365", "2675x6806x50", "33xx3330xx30", "x42819821x24", "167xxxx7259x", "0xx9x40x7211", "x131x4xx986x", "xx4x593x5504", "8423065x08x6", "38x74xx3728x", "76x9x0x3xxxx", "8xx3x23x287x", "xx19987xxxx5", "6x2x447xx232", "xx33x9931x76", "8468x71x22x5", "3627836x444x", "26x2403x4x44", "4427xx2552x8", "x830998xxx77", "87x902x10551"};
    vector<string> down = {"8x4xxx2xx92x", "237x5x908871", "3677xx37x7xx", "x8883xxxxx7x", "810xx3587662", "39421411859x", "4x1x7x43x397", "51195796xx94", "41x10x624759", "2776xx373xx8", "253x229x2151", "57x21696x964", "2xxx85x19xx1", "169xxxx8989x", "5xx3x36x39x2", "5xxxxxx63541", "4x984x26705x", "x8402430x84x", "7xxx66549x03", "87512x594xxx", "0237441x5x6x", "xx68xxx53309"};
    vector<string> east = {"x3x402xx88x6", "06614x73x560", "x8x87777xx0x", "6xxx9xxxx043", "22211x0789xx", "65xx0x44x896", "x50x407xx8x7", "2xx252114x00", "xx620691x071", "78x7529x7231", "6x4x2001017x", "5x6x898x052x", "117x6xx45x24", "140xx484x17x", "52xxx1623x87", "76x6xxx822x3", "x5428x27780x", "9x845x803683", "007x019xx548", "3x54381x5x17", "532x537xx73x", "x64x66x2xxx2"};
    vector<string> west = {"7480x21xxx5x", "89229x136691", "58228462x759", "xx7808x56130", "1xx16xxxxx4x", "33xxxx9x10xx", "71x61xxxx9xx", "11xxx324x057", "7x3xx5x0x593", "xx52xx207837", "16x863x3x9x9", "7xx39xxxx831", "24x98xxxx34x", "2xx47254xx4x", "xx3862xx1x00", "xxxx2x252xx0", "544x640xx954", "36x234xx7903", "x6x1x10x9x52", "143087385xx1", "x63x1x959x4x", "49x1xx362735"};
    int startLevel = 20;
    int startEasting = 10;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 107;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> up = {"x66x02x111x3222971x29", "xxx2xxx62x0x14xxx1754", "x3x506025x44xx8xxx7x9", "6328xx0x730xx5x835xx5", "624xx9237xx6xx2368x60", "x416x79xxx353138xx79x", "x7x89x8258636814x0xx4", "x422x6934x79x465x2512", "9xx8x470xxx2xx96120x1", "29x00x18xx46x0319191x"};
    vector<string> down = {"479xxxxx8xx81728x2405", "x9x56x0x7xxxx7xxx46x1", "9x7xxxx7x63195x9x5984", "7928992xx34xxx7x75413", "xxxxxx738x8x1xxx35x3x", "5059x376x0140288x527x", "x80x291xx4x19xx982x85", "3369535195xx71583x4x7", "x0xx8xxx851760xxxxxx1", "337x34x054xx5x14x4304"};
    vector<string> east = {"x4133xxxx496x361x2x92", "xxx54740x32xx6xx31xxx", "x5xxx9xx8292x805x1xx8", "4466xx4401247625737xx", "01x1x0571748x0677xxx8", "x24x1xx512299792x1x12", "48x081x8xx7x487x7939x", "01692xx6x508482x3x4x0", "347555x03x5xx7x3329x1", "02047622x135x74646312"};
    vector<string> west = {"98x008xxx53579x926x5x", "673x8x995xxx06538x92x", "7x68x143493x0xx763x14", "7x3x897x184x3x7x6x74x", "6x4x5x5xx7x024612xx5x", "05xx07x589628xx5x7173", "xx48x2x0xxx0882x25xxx", "x29304x45x6x90593896x", "85961x328x7xx77xx9452", "69x2xx8849xx028602411"};
    int startLevel = 8;
    int startEasting = 10;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 67;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> up = {"00645795xx9x31", "4049187755x926", "4xx74x5x4x191x", "x9831832x82x80", "x6xxx67x965206", "xx5xx634828186", "9496x661x81059", "6909x38048xx85", "1xx519xx95147x", "x0x437x36x1857", "x5x6507x53x336", "xx6x2xx83x41xx", "xx418xx787x1xx", "xx2xx0178x57x7", "841227x2069x41", "x6x75x2x056xx9", "xxx99x39x3xx8x", "xxx3xx0x609910", "5xx3152xx57x01", "0xx625x434373x", "380x460319x318", "x20x0x43xxxx53", "65x3x682x580xx", "9xx0xx29177x6x", "411xx77x10x9xx"};
    vector<string> down = {"9x849x2xx45x78", "4xx1x99x88x419", "4xx2x5x8506754", "3x3021060x6817", "x980xx4x6x0211", "24985x67x6064x", "536x6xx86x5x49", "7147xx3450x2xx", "xx0x23xxx44xx6", "xx75x0xx8xxx4x", "x4x08399270496", "0x9x47x6884689", "20x29xx5033x4x", "x46548xx21x330", "05xx46xxx25xx5", "0xxxxxxx60848x", "x8x2159xx318xx", "x04xx3x16x697x", "xxx382250728x5", "4484x6xxx1x46x", "1x0x66419xxx95", "26xxx6xxx83767", "494574x7x47x55", "0x3xx5x8287939", "x1xxxxx6107xx7"};
    vector<string> east = {"77x871692xx0xx", "x556xx54583x80", "1x0x9x46xx1x7x", "2x9x945x610xx3", "30x59080x8819x", "85000x2x6x60x5", "xxx4xx4x408x78", "xx04x86xx9829x", "xxx147x5473764", "65x94xx5x86x09", "9x622567821356", "159278539x473x", "x1xxxx1x125x61", "xx0x26704x8xx9", "0x1xxx44x0x85x", "228881705x3x2x", "5x4x4866xxxxx7", "917x24xx479x41", "43x404x4153142", "9x04x996x469x9", "xxx666020xxxx0", "0x20841x4x3212", "x9x6xx140x2x5x", "xx4xxxx8x724xx", "1x23218543342x"};
    vector<string> west = {"99x89907407861", "xx1xxxx877xxxx", "3xx8x4777xx55x", "xx589xxxx8x9xx", "x01075x6x230x5", "xx420x0x30x0xx", "23x3152x4x5891", "3x1x4x53586x87", "5x74x21xxxx752", "x9x925xxx96x60", "xx3x9655xx60xx", "97xxxxx5x7x96x", "375234xxx61584", "958x9x466x0x4x", "xxxx564xx4x37x", "x19xx839x6573x", "3xx7xx5880636x", "xx6795761x5xx1", "x4260x1x0x4x60", "1417767x33x602", "91x64657800x24", "0x927219219228", "87979x1395xx8x", "36765x90x4xx35", "9x27xxxx029x06"};
    int startLevel = 19;
    int startEasting = 1;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 127;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> up = {"xx097x2xx41x9x", "x62052xxx64887", "x2x3x1978xxx5x", "8x6261xxx99399", "x532622x7x5xx6", "x73x42xx96x419", "7xx0x0657x02x1", "706xxx1728x878", "8x3408x42xx47x", "x3132xxx3x562x", "x673046x088086", "65xx9869069365", "89x63237166179", "36x601xxxx7980", "0x07x53x5x89xx", "x4931145x7x3xx", "9188931341xx50", "xxx627x3xx8700", "9x327x9xx68057", "06x23702x8x5x9", "x1371xx441x0xx", "2x45xx176x1xx8", "xx8xx824x3571x", "9x865xx79x67xx", "67352x39444x06", "4x0x73876509xx", "xxxx9x371x189x", "xx9178x3174946", "61x2231x0x7935", "20xx585x795203", "5x6569796x9xx2", "x9199x643x3724", "x9824x11937x83", "x812xxx7532180", "22xx20x15xx1xx", "09xx2xx3698xxx", "8x9161x6x139xx", "6008x1740690x6"};
    vector<string> down = {"x56x84x24x2002", "x0852x2x156x61", "8x220xxxx2466x", "x6555xx15x7xxx", "x22x224x9x7x76", "6467979686xxx8", "x94x88x81xxxx8", "8389572xx3x9x3", "51x4854872005x", "978x0857x34507", "7604424xx2x0x3", "679x8494038x35", "xx17xxx75xxx92", "x96833xx8xx75x", "99248x69xx439x", "645915xxx99x5x", "2x844x94187691", "x5x466xx84x34x", "74727xx06x62xx", "x490574xxx6682", "4x78xx03x1x938", "564549054x70x7", "x3x384xx53x30x", "93468x329x8569", "71xx0810x11376", "xx3x2xx4xx1x70", "644x50x4xx6834", "6x6x917x160x84", "xx14x00xx4x2xx", "10xxxx097x4326", "91xx29xxx7x18x", "x6080x73x40159", "51x44x31x4xx38", "xxxx3x164x5x49", "28442163x569xx", "xx584741x6xx77", "1601269xxx552x", "365x1x1xx74125"};
    vector<string> east = {"3863xxx1xx97x3", "x82x7x00x8x85x", "x44xxx1x82x44x", "1x3x339590x148", "x196xx08x228x3", "1x808xx996x2xx", "90x51xx029xx8x", "5x2x75484x9x82", "264979310xxx89", "9054x8x589xx82", "x3971x1x7063x3", "095x077x64xx34", "x7x42053x20xx9", "x0x5621x64x3x2", "93x8xxx89x9992", "113x9x50xx94x5", "30174318449x27", "x7316xxx6523xx", "8811x363x3x383", "778x0x95x93937", "8004717102xx88", "0251xx1x9xx939", "98x292914xxx88", "x028xxx0282x15", "3775xx0xx349x6", "2x7xx60x580255", "043x73x2x0xx32", "xx10xxx9xx458x", "501x61x66x57x4", "88xx0731207180", "39435x33083914", "7x216x9x658727", "84x94xx9019888", "x3444xxxxx9x6x", "1x5x8863x53438", "61xx4x44383815", "xx2xx2xx847x59", "3x73xx2xx7xx1x"};
    vector<string> west = {"x54341x5217x00", "xx54x07x54x352", "738482744x5018", "33843570x8x682", "xx5x7xx09x2075", "7x006504xx7785", "35xxxx9xx19xx2", "685464x471x203", "913628x26x68x1", "2884x9328x967x", "645549383x423x", "47xx8x5x5703xx", "x6x5xx8384643x", "5x69xxx348xx44", "x5x48x67576929", "3353xx853135xx", "910x69x57x7x38", "0x34x3xx736748", "904923x44x0627", "5x38xx5x58x400", "xx785451x8xx9x", "30x9x270x79511", "4608459xxxxx14", "34588x37xx8069", "xx323x2x5x17xx", "06x9x82x075631", "x795223340x87x", "67x255x7xx0331", "660xx82x72549x", "28x802586xxx8x", "xx1x51xx2x4444", "x26940929878x7", "96463x359134xx", "5741x954xxx707", "0xx8xxx8x1x451", "3x73524x2xxx65", "xx1xx0913435x7", "1933x4xx724461"};
    int startLevel = 37;
    int startEasting = 12;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 171;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> up = {"899604xx4x17x5687xx97x6080", "03xx4x008059x1xxxx2x69xxx9", "8xx582xx15191x28x5833437xx", "xxx050x273785x998044620x5x", "7xxxxx67x76x783819x241441x", "487xx144xxx045076570210907", "2131x167418581x85x02x52xx9", "0xxxxx1xxx6xxx3x33xx2x9x12", "9x7938xxx65852723x0xxxx17x", "x0x17xx91xx97x369x0xx77199", "x0x3471x473x495x931579x65x", "x595x813x07186138xxx960x97", "563102x81815036359xx9x8521", "04xx5x3129xx4083x417x5894x", "xxxx682x14x00579x37x6x50xx"};
    vector<string> down = {"2xxxxx811x92x3xxx7x2840352", "683xx0550x2955294x4x1x354x", "31xxx82974194772682x607x0x", "502271x04xx425x6x0x9x9xx14", "x4x34955x95x65x225xx3x068x", "555x3x8x160x6x052xx20x8708", "3xx2x8xx6x62x86xxx24x560x6", "805597870378051521541xxx90", "5377x8x643x5x47x2x861x35x5", "8xxx6xxxx1x30xxx3xx8xx30x4", "833783x54xx2314281651813x5", "687661x003xxx1xx5196961753", "0x75x8505x803689xxx71x376x", "0x3x154371x9x0x725x00xx4x1", "0x6xx45xx58281xxxx2x306960"};
    vector<string> east = {"0xxx0718x47787x019439xx5x2", "9xx3x9xx6692x7x36x8xxx52x4", "8x6425xx991x25x53xxxx6x7xx", "x157442xxx87xx9x41420x0637", "x5xx9x29x2104x3x10x4x90771", "7xx862x0885x2x064140370x6x", "01xx1x54x54x5x8695xx8x11xx", "154xx9x26x47x09xx5x448xx70", "x607xxx4x5xx67xxx848xx8xx0", "491xx15x44x78xxx3x7735960x", "x42x4296x2681xx45x91185xxx", "9x753xx64xx63x212x695x5976", "8x690x12xx7983x1x8xx886xxx", "61x713106x58x2307x41x9x466", "x00x43571xx4xxxx0888x65353"};
    vector<string> west = {"57976769xx645x69xxx1xx93x9", "2856x6xx8xx27x6x25xx6x8789", "5xx18531x8xx6573xxx2972933", "x7584522773x185xx578810842", "9x7x2280x69x2568x05403x925", "5xx3092x6832xx6xx259x630xx", "6444796x775424x521017x76x6", "958xx2736x30x48x0x68xx7x93", "996x882x5x67xx4361x23x3xxx", "85xx83x746x601x830181512x9", "098060x5xxx77xx305457x8xx9", "2xx3769xx2x7x3327x7338324x", "68x8x3x17339459x2021x76x58", "947041x3x1935x38371x3558x2", "28x2xx00xx74023x081250x3x7"};
    int startLevel = 6;
    int startEasting = 1;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 180;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> up = {"145x8xx176x46", "35119x5508452", "9348528xx2x9x", "xx6184665611x", "0x97xx6x9xx86", "971728xx7x895", "877x27000013x", "x798x976x1253", "5x528xx8x07xx", "x00113xx6085x", "05x2x038x126x", "9262xx29x77x7", "351877xx5x5x9", "xx84x038x4xx6", "x41x06xx9634x", "x50618x703336", "285x967522213", "739x5383x379x", "55x8250xxxx05", "0x306415x57x1", "631x0xx77xx12", "x8x11905836xx", "xx086x4080945", "867x9x0x7x3xx", "5433x4x884528", "34xx8x1x33x13", "8093xx8xxx726", "73232xxxxx4xx", "1xx85700xx105", "xxxx12x1xx9xx", "0x4x25x527x27", "37x1x5593x9x5", "xx711xx68949x", "x7xx421x11xx7", "1x7x325014xx3", "xxxxx1xx2xx59"};
    vector<string> down = {"8x8xxx7xx9161", "2x05421x44x40", "0xxx787xx9857", "x401505x89x38", "x503x994x17xx", "224xx89x2x383", "22015x2x54354", "x69542xx7x4x7", "x40xx0x8x6x82", "7671x62xx66xx", "058x1x26125x3", "843x0520x7561", "xx584940x2x38", "x917004x38xxx", "29x481394x1xx", "9135614245xxx", "xx729xx7x0036", "2xx0x37865169", "5211xxx41x1x8", "779717xx17538", "9xx3922xxx39x", "x2xx9x17xxx3x", "0x02487504x49", "x632x23x55x4x", "1xx986x72508x", "x44x88849x51x", "542069046x763", "0x718x4x76xxx", "6x12554x4xx39", "x0xx6986xx43x", "43xx78x350168", "x57192x2x9x6x", "59874xx31xx4x", "x2555793x3602", "5000x83x73x5x", "8xx4193555xx1"};
    vector<string> east = {"65x874x22x4x1", "xx9x1xx5xx796", "x902x989977x9", "8xx40xxxxx5xx", "5xxx611xx93x3", "186x2x6x9x184", "3365x61167296", "214x409x4x12x", "x56x2x8xx3023", "x9x54xxxxxx37", "xx838xx3xx359", "x0x8x02004425", "7668xx750x738", "09141978xx4x6", "x10xx0xxxx3xx", "815763x213x31", "xx68933x60659", "x637640x69522", "7x15014xx60xx", "54x51492x6612", "x5x5x9221xx93", "6244058x10x67", "7x60435x2x72x", "630798553914x", "xx85x48954129", "x47527x5306xx", "371x81xx98x95", "xx8746x73xx02", "x491445085925", "90360xx9xxx67", "x7xx3x32783xx", "794x82x2xx372", "3648230x207x9", "536x8798xx9x0", "41363xx7x5x18", "03x2480x6x34x"};
    vector<string> west = {"40x2x75900338", "xxxxx71xx4757", "85810x9918xx8", "x7904xx8424xx", "46x327x745xx2", "x390665052785", "xx213x95522xx", "0x38x75x5428x", "x6063x907xx7x", "374889x796452", "x344xxx69x4x0", "9x5xxxx8xxx77", "x88x5x978x75x", "32x190x549x2x", "x92x6x7xx9712", "xxxx63x3252x5", "5xxx6432504xx", "4232636x8x668", "xx00244x38xx5", "3xx34xxx277x1", "x6578210x04x0", "4x37695xx2x69", "97x0x7xx7x9x6", "149x78x5052x6", "8xxx01x8xx363", "xxxx605x2526x", "7193963xx93xx", "x696x21567729", "5575x9x355xx4", "0x7997x1163x9", "x0x66x3x7xxxx", "xxxx8xx80xx58", "415xxxx6x60x9", "9x51x9804xx01", "3xx310571x948", "x5xx9x24238xx"};
    int startLevel = 35;
    int startEasting = 11;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 175;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> up = {"xxxxx6xx7x59", "2xxx45963879", "7x89327250xx", "x1977x95x5x9", "594xxx581x18", "80xx1x03x639", "x29x108x1289", "0865xx66xx04", "1x28x658x747", "x502xx888xx3", "x48517xxx136", "x01473x215x7", "x35578xxx9x2"};
    vector<string> down = {"8x45xx72x02x", "x840x0x2938x", "4x60xxxxx757", "5427470x64xx", "61xx1x1x25x9", "722779338911", "85x21x98x4x7", "x01xx46x40xx", "039xx3x5x060", "5x5686878x6x", "7417278x9794", "9x63xxx46xx3", "x3x779x6xx2x"};
    vector<string> east = {"0x0x4x735x41", "8xxx34x01x31", "7x9xx4x0165x", "xx415xx1x5x8", "236xx7862062", "5576x2x2x9x0", "0x682xxx4x30", "x9474037x6xx", "5025464733x1", "83x8xx5xx103", "56xx8x246609", "80525xx727xx", "421x076xx6x2"};
    vector<string> west = {"xx4840614xx5", "x3xxxx8x1606", "xx2x3x921x6x", "9xxxx1x63500", "4x284x522x57", "9xxxxx4x7067", "6x86x30xx8x8", "881533x4x3x1", "16xx4x856x5x", "x3185x5x8x79", "0929xxx02216", "5685x7860x05", "226x85xxxxx7"};
    int startLevel = 12;
    int startEasting = 5;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> up = {"9105xx043x9x7x3xx94455xx76", "4572xx5xxxx4x7xxx52x2xx794", "463x4201078xx262x40xx1x85x", "0x9851x52x6x1671x362387x25", "249x749x23809xxx43826xx51x", "497x57658x748346xx32x31xx3", "xx255x6xxx2x7907x114614263", "533x6x5785x4xx27x454155x53", "5x58xxx357810945x58x35495x", "xx700x30455xxxx12xxx983231", "x140x102x3340x5488125xxx59", "xx90xxx3x628xxxx3x4x2x35xx", "54xxx8x0xx78x954xxx2x2x388", "584487x232622x68469x91x666", "71xx6631597x0023979x01xx48", "9604976x6x93x1x791x0915234"};
    vector<string> down = {"52x32xxx765x79x1xxx0x05x43", "8965577xxx696x4xxx94x29027", "x92180x16770x0xxx056xxx601", "50x4671533xxx64948x24280xx", "63662x557794xx80674x1xxx76", "97587255x0xx0298x2x24476x0", "6x2x80090x7550xx78x4x526xx", "5x0xxxx52427x3x159979xx626", "9x04986610831492202x4876x3", "43159x1x53498x0xx00x4x794x", "16x672xx29168273x99x7x78xx", "x93x5xxx9x4x9xx011288x4x61", "xx8x7x6x375605x54597396x1x", "93xxx4x9899x90x0x226xx40x5", "xx61x9201xx09436x605xxx840", "463xx82124x6x393xx2x35835x"};
    vector<string> east = {"1x5992x658xx5x1x55x75681xx", "x236x676737x5xx0x5215716x8", "0605xx11xx5xxxxx6x788x3267", "0510598x0x48x552xx86771x99", "x0693xx9xx209xx055528x9778", "6xxx7xxxx17x4x30xx0x82xx6x", "48657x88950x990x9613x7xx68", "6x0x5xx75x75738xxx7x413x7x", "53x4x259x0xxx94108097xx4xx", "8x747550xx58127x16xxx1x50x", "xx420x2x98x206568x095x9x75", "1x1x0xxx246224xx6xxx2xxx1x", "8xx44x43x682x85xx42x65xx64", "58xx31x8x91x4xx2x48xxx1436", "x59x91x090x566x184xx211600", "xxx3x57xx4xxx0877813592xx6"};
    vector<string> west = {"762xxxx8xx5x5311683044xx53", "xxx392559325xx8x79x02xx9x3", "55xx65x2927x829141x48xx7x6", "x142xx2xx0xx0x0xx5xx8x2x40", "8xx1x890x1395xxx90x2x0x31x", "8xxx312597x9x8x57x42xx4579", "xxx75x797x1x5x839xx3495x38", "58802689x8819013732xx0x98x", "85x34x539xx171x50656739319", "78435x62x4xx957844xxx738x6", "x0268x049x18x665xxx2x8xx64", "44x30x425x5xx3x49x8xxxx784", "00x1xx839xx48545x441x52xxx", "6xxx616x002x355x3x1x2x0859", "6086x9020xxxx841x4x99x8x93", "9xx9xx2x66x8x38x26x5xxx903"};
    int startLevel = 14;
    int startEasting = 22;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 154;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> up = {"0656012x8xxx", "x9x1805x4x43", "53x293957732", "9x5x52x4x93x", "98x3x19xx7xx"};
    vector<string> down = {"xx5xx3560x47", "5835xx14xx51", "7xxx26x90929", "375xx4x2542x", "976353x25x44"};
    vector<string> east = {"782988x77162", "43xx27392524", "42770xxx1x5x", "33xx1x950xxx", "xx107xxx221x"};
    vector<string> west = {"x00x3x0298x5", "157635x8x085", "x64xxx3x33xx", "5x12781x1x25", "x5966194xx63"};
    int startLevel = 3;
    int startEasting = 1;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> up = {"776723564606", "367838xx339x", "9xx85x8xx545", "58x9x9xx7374", "x88xxxx0x9x9", "7740xxxx80x2", "x3xx188x7x18", "xx61x45580x0", "x8054xxx7xx1"};
    vector<string> down = {"64x8725xx5x0", "8x02xxx26937", "x7x7x038186x", "6x81xx2x9xxx", "9245x1xxxx69", "x845x0805425", "x17x8223x6xx", "6x1x624xx680", "668xxx7xx433"};
    vector<string> east = {"75980x957xx0", "x49xxx936130", "06x782989x3x", "8x1xx8x325x2", "5x867x5314x9", "4406xxx5xx6x", "26x396x77056", "2625711xx04x", "424341871856"};
    vector<string> west = {"1153034044xx", "43x59169x8xx", "7xx021421x0x", "95x0720x28xx", "832963743165", "x7xx81986x09", "xxx3x0x2x1x1", "8xx72653x643", "3x798x27x101"};
    int startLevel = 8;
    int startEasting = 8;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> up = {"1x7", "x43", "55x", "81x", "x9x", "764", "834", "66x", "67x", "4x6", "41x", "x9x", "68x", "13x"};
    vector<string> down = {"082", "x4x", "816", "xx4", "8x0", "26x", "x4x", "3x7", "60x", "x21", "4x6", "x5x", "x04", "x41"};
    vector<string> east = {"9xx", "947", "x23", "61x", "004", "90x", "xxx", "280", "1x5", "550", "2xx", "x6x", "7x9", "2x1"};
    vector<string> west = {"367", "12x", "935", "584", "xx5", "xxx", "206", "x18", "258", "210", "x83", "xxx", "298", "52x"};
    int startLevel = 7;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> up = {"3x546x125x", "36x698x111", "6x5xx42x55", "x69x944608", "64400200x9"};
    vector<string> down = {"81x6x5150x", "x72x639x28", "7x16x78437", "86454063xx", "xx30x1x597"};
    vector<string> east = {"00x1xx717x", "x9xx66x066", "x2x86472x7", "x6252xxx76", "762x23x460"};
    vector<string> west = {"7xx3x7x060", "4xx44x56x7", "65x8x7x05x", "6595xxx45x", "8552xx4467"};
    int startLevel = 3;
    int startEasting = 3;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> up = {"xx7413xxx8035x83x9x96x02xxx56", "xxx5x72x9xxxxxx6364xx72297x7x", "51574472xx89589xxxx460578xxx7", "83xxxxx61xx11xx4x297x5xxx3825", "xx461x03xxxxx0xxx3xx438978xx4", "x76xx003x72x65x33210x54x00494", "x49xx8xx3xx32x5x417341x677000", "7684x5058092xx665x4530x1068x8", "xx3687x28xx404xx7x080xx5x4x0x", "xx87x597238x15x30008x0382899x"};
    vector<string> down = {"2222xx7x4xx1789142194xx1x1x89", "x9xx48792xx7x926x7x3xxxx04xxx", "87242x6x2x85125709017x0805633", "282836xx058xxxx80646735864x5x", "x2x9x16x74xx474x7xx52827xxx90", "5046769xx03x04x63x08x06x5xxx2", "5xx5831937x8x8x494621914x0327", "0xx175xx5970224x94x311244x987", "3x47x6425x74xx8x3885x2078x8x3", "xx816xxx8x543703697039581x394"};
    vector<string> east = {"xx69441x2xxx268x7x977x2788745", "9x45xxx55x81x2xxx453x5x85xx69", "1x6x39175x82x736xxxx795034551", "xx526825x3xx20x4x2x5x4x54xx3x", "0xx42xx7622957344x7xx3x37045x", "x0xx0xxx605x5x99865xx06x8x808", "xxxxxxx42945x8x5xx7x887x5xx0x", "x30x961xx228x592x742268716x6x", "x95xxx7934439xx17x0914239x04x", "xxxx265x92xxx4x82195265x9x764"};
    vector<string> west = {"x4724480673x40x53489x70xx769x", "08x0xx7x3xxxx1xxx2174x2607x1x", "626646x84x35x4374xxx2x3139xxx", "5x049937xx121858439x1x513x39x", "x055x7xx85x348081x92951x31568", "x175xx86x7x8xx43xxx2xx66xx856", "xxxx40x8x62xx7xxx034107233534", "7x401x7x4x7345x2401x3x1xxxxx0", "99xxx95x39x6x391x4x438848x343", "6x34363x652510910x1x43331x957"};
    int startLevel = 7;
    int startEasting = 13;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 73;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> up = {"50841073x7x6", "x2x0xx7xx34x", "3694170836x4", "2x9xx5271x97", "76788x81719x", "x71xx8090xx8", "x78x12909954", "xx38x6280792", "54x79x3276xx", "2950x990xx3x", "4xxxx68xxxxx", "x024x3x44426", "15x88812x1x4", "x8x75xx7x530", "8161x04636xx", "9502xx00x169", "71xxx6595xx3", "x6x7x7794149", "xx69x6x70203", "652xx133x013"};
    vector<string> down = {"xx235x76xx15", "59xx23344xx7", "0xx05xx1x21x", "5x6567107x4x", "37x71xx66090", "8169430091x0", "5xxx361x9764", "xxx3x29x0x2x", "x9x843x3169x", "74xx87xxx864", "341x172xx43x", "0565x9xxx320", "x16x7x409633", "57470486x361", "x190x50x963x", "x21x1x03xx10", "95x3x3963xx6", "6xx613616x5x", "x940xx3x2723", "2x047x027x8x"};
    vector<string> east = {"805xx39x6653", "x10x507x761x", "8x936885153x", "x618916x9915", "348616xxxx66", "05x57x28x61x", "87x48x042x8x", "411x2xx04x90", "2x7527x67xx1", "183945x7x4xx", "497x75x89x56", "424xx4x0xx15", "8x66xx18x8xx", "28xx44xx3xx9", "x2x1xxx34xx7", "xx372x270x61", "x97x00x692xx", "5169xxx03474", "413519xx7494", "3300x691295x"};
    vector<string> west = {"859715x128xx", "xx818xx4x7x7", "14744xx8xx64", "xx419x079x3x", "7x8x28x00x65", "384840x6x8xx", "3795x0611339", "x146x6x578xx", "1xx5x18x3418", "5xx2x6309721", "x630727483x0", "x0x9x230x5xx", "904312764770", "9x3x47043682", "x6xxx0549xxx", "x9210594644x", "1xx810x8x9xx", "721x901x94xx", "646822xxxx48", "6193x1x0x358"};
    int startLevel = 16;
    int startEasting = 3;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 109;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> up = {"6420x9x285x6x", "x752xx3x1572x", "06101x218xxx8", "x4886x9xx6392", "xx5xx091857xx", "x7xxxx69x7759", "66x25454xx3xx", "xx8x0376xxx3x", "xx5x36x7x9x80", "x188xxxxx2x13", "0xx8x43xx4250", "x6xxx477x7xx4", "5994x5522xx01", "067xxx1285150", "86xxx66991x42", "016886x77x510", "0x97xx8x155xx", "x2xx5x091xx99", "590x788915399", "80xx551960xx1", "0xx49xxx0x05x", "x361x825x246x", "448x03x64x690", "185x8xx20x4x0", "x820932x60443", "3xx16x8105xx7", "x42x30344xx70"};
    vector<string> down = {"2085x4x66xxxx", "xx890137x4x71", "81x20x99048x7", "1x0034177x20x", "9x4186x62660x", "x97902071x506", "x35xx649329x6", "1xx1x108640xx", "85x0x9164735x", "x3x187159x145", "xx2x9x1149862", "5x361x1x90xxx", "x523xx7259972", "x7x38093xx353", "0xxxxx38x5209", "255123xx0xx22", "x9x11x1996xx7", "746x786x94x9x", "400x9336xx975", "6x0xx8x827172", "65554036x346x", "x457563701xx7", "4xx3x6xxx013x", "x528806158437", "95157x4x0x7xx", "750xx8x246251", "x045x4xx8xxx3"};
    vector<string> east = {"xx41xxx801708", "x3x574x13x57x", "837x4236282xx", "39759xxxx12x8", "xx345xx2242x2", "xx574x7527147", "7x012xxx1x634", "52x91xx835074", "232x379xx2381", "99112989340x4", "142xx4xxx261x", "761390x29x3x1", "29532x6x2xx6x", "4218x7x966339", "x7x95xxx5205x", "10280x811554x", "892x52xx0501x", "8x5x3x8xx2x64", "06x829x4x925x", "76xxx9x7x6453", "8xx2xx9x9x38x", "5x03x56xx3242", "4x856642x8846", "4x5xxx772x95x", "217291xx41xxx", "151xx38234165", "xxxx25x3x7x43"};
    vector<string> west = {"x13x9101x3x95", "xx3x4xx39686x", "20xxx637055x7", "x0378114xxxxx", "969x40x98x695", "631x8xx2x1xxx", "44115x7x8663x", "x1xx70488x075", "3xx427x4xx6x5", "84xx982xx1x49", "4x29xx1x32xx0", "41501x8x9xx21", "34xxxx4x842x1", "16xx032x2xx52", "46x78x46443xx", "x0x4160xx8xxx", "0x7x14x43x5xx", "xx2x09x81x7x0", "x71002109x489", "xx65xx4856xxx", "9x045xx342x47", "xxxx7x670x72x", "x7x45xxx84094", "87x8627921xx8", "583xx91x52x82", "347x02x38xxxx", "056981x81267x"};
    int startLevel = 21;
    int startEasting = 7;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 169;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> up = {"x8471x9xx9x8xx53", "0x7x9xxxx8402x05", "x4x01xxx8x4188x3"};
    vector<string> down = {"4x562x2xx62xx4x5", "x8x397440325xxxx", "x359x14x7x6x979x"};
    vector<string> east = {"xx92x683xx22603x", "7xx62x3x5xx59xx0", "9xxx6x5825x8xxx3"};
    vector<string> west = {"12x9x8x5xx14271x", "9x7x348x345xxx1x", "x2xx410xxx9x9421"};
    int startLevel = 1;
    int startEasting = 7;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 42;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> up = {"326578x37664x22820303x4", "998xxx3x6xx10x7816897x3", "8xx0xx32244966xx32x7x3x", "x21370688254667xx0916x7", "0xxx7x464x4x835093x065x", "xxx76490x41xx0640x52x67", "8xxxxx0xx59xx3829765731", "x81724398x54x86x0695x34", "17xx75680xx93839234x675", "3x6x8xx187x19x49x24xx9x", "9x4x51x66xxx66xxxx15xx4"};
    vector<string> down = {"1x0116966x0x490389x87x3", "46x12xx560273407028x4xx", "57348x968x48xxx8x49xx52", "0xx38x84xxxx37x1xxx356x", "x0054x7x324x886x8x645x0", "4x81xxx9951981x23927495", "2xxxx83xxx58342xx58xx94", "5328xxxx196235x267x3815", "965x5855x1x82x88x2302x6", "7607xx4683x559440xxx9x0", "xxx56xx7242x12x53794x10"};
    vector<string> east = {"919257x0x18xx2992x9xxxx", "2477229x4xxx1x540x2xx8x", "19xx83x9918x1xxx16x2784", "199x0x291589x632179xx89", "7x5xx35xxxx4xxxx2xx21x2", "x127x7xx03x8360244x6x86", "x61xx2x74x7x6439953x69x", "xx35x44x56xxxxx4207x700", "9828xx305901x74x4x88739", "097x730727x783700xx10x1", "85088x759x0x4x164x7138x"};
    vector<string> west = {"4x3193xx314x57xxxxxx285", "xx2408x5235x8x8x1x57611", "7x17x716x1xx77xx9xxx3xx", "1xxx509829x22xx8197019x", "x9x57xx1x1x9587809x96x2", "384x2x4324x4x60xx8707xx", "856651x20x4x790367x359x", "40xx7x38xxxx9201x0x4725", "8934x92x68042x4583897xx", "94x426x890x80xxx59990x7", "072583042x89290xxxx1xx3"};
    int startLevel = 10;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> up = {"5xx992", "935582", "xxxx29", "193831", "x50817", "160573", "4623x8", "11xx89", "x58x28", "x36385", "x12974", "84x92x", "610xxx", "825x41", "xxxx92", "6x526x", "5x92x9", "x0152x", "766177", "x5xx71", "59x73x"};
    vector<string> down = {"x054x3", "0464x2", "976x6x", "0357xx", "2xxx75", "348258", "7xx887", "14xx0x", "4x31x6", "8x251x", "8328xx", "x25041", "934565", "459xx4", "1926x7", "149629", "4x62xx", "6x019x", "x408x6", "2x2x05", "77xxx1"};
    vector<string> east = {"8x0x96", "0xxx4x", "xx9194", "7x3722", "1x8xxx", "x09xx2", "x27434", "4xxx99", "x34913", "710221", "x2993x", "3xx9x8", "3x6381", "94x1x5", "x09x46", "3115x6", "780x8x", "48x377", "2320x5", "252743", "69x791"};
    vector<string> west = {"x4xx2x", "217x4x", "40585x", "x53x96", "7xxx28", "x82xx4", "915x98", "x5x465", "x1xx2x", "1x748x", "xx5x21", "06xx03", "9x79x8", "678881", "xx4x55", "004x8x", "82x951", "832xx2", "x62x0x", "x27xx2", "48378x"};
    int startLevel = 14;
    int startEasting = 3;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> up = {"8x4x88x", "x60x634", "x033x52", "572500x", "1xx280x", "0678x89", "x25x765", "x1xxx59", "xx2x9xx", "8xxxxx1", "8959x97", "2x108xx", "x44x572", "1x1xxx6", "96x64xx", "x34143x", "62xx904", "56577x8", "8xx767x", "2x3x626", "x964x87", "x283x4x", "x906509", "5xx40xx", "x26471x", "xxxxxx7", "5x6x299", "114x0x7", "76xxxx2"};
    vector<string> down = {"25603xx", "x2787x5", "xx6xxx1", "xx166x1", "40x6737", "x766xx1", "1x961x4", "x774711", "2x47148", "6xx084x", "4275xx6", "xx9190x", "x8xxx7x", "376xx9x", "x05xx46", "19xx4xx", "x649x49", "46x3586", "5x3x98x", "9x2x9x6", "12x66xx", "59x2x63", "2xxxxx1", "06x3912", "29x3xx8", "8855x5x", "x4x637x", "xx70813", "xx5x500"};
    vector<string> east = {"490240x", "xxx34x8", "x1217xx", "5131x80", "x2xx605", "4x2368x", "1x9722x", "95932xx", "x530466", "08x049x", "x151x65", "90567x5", "xxx4373", "5x41x4x", "24x3382", "75xx79x", "7x29879", "455617x", "95xx403", "08208xx", "xx0122x", "0743x1x", "5xx0x92", "6x16986", "93x714x", "442x04x", "96040x4", "299x28x", "x3xx0x8"};
    vector<string> west = {"3799x41", "39x8223", "81xx5xx", "448079x", "x9224x9", "13154xx", "xx72800", "0x7xxx5", "x0x7022", "37xx5x9", "x31x516", "xxxxxxx", "019x4xx", "7349810", "3373xxx", "27579xx", "912512x", "xx13x1x", "7374800", "x07223x", "6xx7xx0", "4x147x7", "6x6x10x", "x1xx2xx", "x228400", "43xxx84", "x9x1x80", "xxx1x84", "401xxx1"};
    int startLevel = 25;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 187;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> up = {};
    vector<string> down = {};
    vector<string> east = {};
    vector<string> west = {"11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111254", "11111111111111111111111111111111111111111111111112"};
    int startLevel = 33;
    int startEasting = 33;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 34;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> up = {"xxxxxxxxx1", "xxxx999991", "x999999991"};
    vector<string> down = {"1111111111", "1111111111", "1111111111"};
    vector<string> east = {"1111122242", "2222222241", "2111111111"};
    vector<string> west = {"xxxxxxxxx1", "1111111111", "xxxxxxxxx1"};
    int startLevel = 2;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> up = {};
    vector<string> down = {};
    vector<string> east = {};
    vector<string> west = {};
    int startLevel = 49;
    int startEasting = 25;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> up = {"3", "1"};
    vector<string> down = {"1", "1"};
    vector<string> east = {"1", "1"};
    vector<string> west = {"1", "1"};
    int startLevel = 1;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> up = {"9"};
    vector<string> down = {"9"};
    vector<string> east = {"9"};
    vector<string> west = {"9"};
    int startLevel = 0;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> up = {"9"};
    vector<string> down = {"x"};
    vector<string> east = {"x"};
    vector<string> west = {"x"};
    int startLevel = 0;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> up = {"1", "5"};
    vector<string> down = {"1", "1"};
    vector<string> east = {"1", "1"};
    vector<string> west = {"1", "1"};
    int startLevel = 1;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> up = {"x1", "02"};
    vector<string> down = {"xx", "xx"};
    vector<string> east = {"0x", "xx"};
    vector<string> west = {"xx", "x0"};
    int startLevel = 1;
    int startEasting = 1;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> up = {};
    vector<string> down = {};
    vector<string> east = {};
    vector<string> west = {"11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111"};
    int startLevel = 49;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 55;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> up = {"91"};
    vector<string> down = {"99"};
    vector<string> east = {"11"};
    vector<string> west = {"11"};
    int startLevel = 0;
    int startEasting = 0;
    DungeonEscape* pObj = new DungeonEscape();
    clock_t start = clock();
    int result = pObj->exitTime(up, down, east, west, startLevel, startEasting);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=288584&rd=5073&pm=2449
********************************************************************************
#include <algorithm>
#include <cmath>
#include <deque>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <stdarg.h>
#include <string>
#include <vector>
using namespace std;
 
#define Forc(i, c) for(typeof(c.begin()) i(c.begin()); i != c.end(); ++i)
#define In(c, x) (c.find(x) != c.end())
#define Inv(v, x) (find(v, x) >= 0)
#define X first
#define Y second
#define Pair(x, y) make_pair(x, y)
#define SetPair(a, x, y) pair<typeof(x), typeof(y)> a(x, y)
#define mkvecint makeVec<int, int>
#define mkvecstring makeVec<string, char *>
typedef pair<int, int> point; typedef long long ll;
 
template <class T> T strToInt(string); template <class T> string intToStr(T);
int strToInt(string str) { return strToInt<int>(str); }
string intToStr(int x) { return intToStr<int>(x); }
vector<string> tokenize(string, string = " ", bool = false);
vector<int> tokenizeInt(string, string = " ", bool = false);
template <class A, class B> int find(const vector<A>&, B);
template <class T> T nth(const set<T>&, int);
template <class A, class B> void hookSort(vector<A>&, vector<B>&, bool = false);
template <class T> ostream &operator <<(ostream&, const vector<T>&);
template <class A, class B> ostream &operator <<(ostream&, const pair<A, B>&);
template <class A, class B> vector<A> makeVec(int, ...);
 
/**************************************************************************************/
/************************** Begin Priority Queue / BFS Class **************************/
/**************************************************************************************/
 
template <class P, class V = int> struct PQ {
    map<P, V> minValue;
    set<pair<V, P> > q;
    PQ() {}
    PQ(P pos, V val = 0) { push_back(pos, val); }
    bool empty() { return q.empty(); }
    pair<P, V> pop_front();
    void push_back(P, V);
};
 
template <class P, class V>
pair<P, V> PQ<P, V>::pop_front() {
    P curr(q.begin()->Y);
    q.erase(q.begin());
    return Pair(curr, minValue[curr]);
}
 
template <class P, class V>
void PQ<P, V>::push_back(P pos, V val) {
    if (!In(minValue, pos)) {
        minValue[pos] = val;
        q.insert(Pair(val, pos));
        return;
    }
    if (minValue[pos] <= val) return;
    q.erase(Pair(minValue[pos], pos));
    minValue[pos] = val;
    q.insert(Pair(val, pos));
}
 
/**************************************************************************/
 
int MyCode(vector <string> up, vector <string> down, vector <string> east, vector <string> west, int startLevel, int startEasting) {
  int r(up.size()), c(up[0].length());
  PQ<point> pq(point(startLevel, startEasting));
  while (!pq.empty()) {
    pair<point, int> curr(pq.pop_front());
    if (curr.X.X < 0) return curr.Y;
    if (curr.Y >= c * (r - curr.X.X)) continue;
    char dn(up[curr.X.X][curr.X.Y]), ds(down[curr.X.X][curr.X.Y]), dw(west[curr.X.X][curr.X.Y]), de(east[curr.X.X][curr.X.Y]);
    if (dn != 'x') pq.push_back(point(curr.X.X-1, curr.X.Y), curr.Y + dn - '0');
    if (ds != 'x' && curr.X.X < r-1) pq.push_back(point(curr.X.X+1, curr.X.Y), curr.Y + ds - '0');
    if (dw != 'x' && curr.X.Y > 0) pq.push_back(point(curr.X.X, curr.X.Y-1), curr.Y + dw - '0');
    if (de != 'x' && curr.X.Y < c-1) pq.push_back(point(curr.X.X, curr.X.Y+1), curr.Y + de - '0');
  }
  return -1;
}
 
/**************************************************************************/
 
struct DungeonEscape {
  int exitTime(vector <string> up, vector <string> down, vector <string> east, vector <string> west, int startLevel, int startEasting) {
    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }
    return MyCode(up,down,east,west,startLevel,startEasting);
  }
  
// BEGIN CUT HERE
  public:
  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
  private:
  template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
  void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
  void test_case_0() { string Arr0[] = {"0x4",
 "0x3",
 "0x3"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"0x9",
 "009",
 "0x9"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"0x9",
 "1x9",
 "009"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); string Arr3[] = {"0x9",
 "0x0",
 "009"}; vector <string> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 2; int Arg5 = 2; int Arg6 = 10; verify_case(0, Arg6, exitTime(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)); }
  void test_case_1() { string Arr0[] = {"xxxxxxxxx1",
 "1xxxxxxxxx",
 "xxxxxxxxx1"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"xxxxxxxxxx",
 "xxxxxxxxxx",
 "xxxxxxxxxx"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"1111111111",
 "xxxxxxxxxx",
 "1111111111"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); string Arr3[] = {"xxxxxxxxxx",
 "1111111111",
 "xxxxxxxxxx"}; vector <string> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 2; int Arg5 = 0; int Arg6 = 30; verify_case(1, Arg6, exitTime(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)); }
  void test_case_2() { string Arr0[] = {"xxxxxxxxx1",
 "xxxx999991",
 "x999999991"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"1111111111",
 "1111111111",
 "1111111111"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"1111122242",
 "2222222241",
 "2111111111"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); string Arr3[] = {"xxxxxxxxx1",
 "1111111111",
 "xxxxxxxxx1"}; vector <string> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 2; int Arg5 = 0; int Arg6 = -1; verify_case(2, Arg6, exitTime(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)); }
  void test_case_3() { string Arr0[] = {"1x2x3x4x5x6x7x8x9",
 "00000000000000000",
 "98765432223456789",
 "12345678987654321"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); string Arr1[] = {"00000000000000000",
 "00000000000000000",
 "00000000000000000",
 "00000000000000000"}; vector <string> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); string Arr2[] = {"xxxxxxxxxxxxxxxxx",
 "xxxxxxxxxxxxxxxxx",
 "22222222222222222",
 "33333333333333333"}; vector <string> Arg2(Arr2, Arr2 + (sizeof(Arr2) / sizeof(Arr2[0]))); string Arr3[] = {"xxxxxxxxxxxxxxxxx",
 "xxxxxxxxxxxxxxxxx",
 "22222222222222222",
 "33333333333333333"}; vector <string> Arg3(Arr3, Arr3 + (sizeof(Arr3) / sizeof(Arr3[0]))); int Arg4 = 3; int Arg5 = 12; int Arg6 = 17; verify_case(3, Arg6, exitTime(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)); }
 
// END CUT HERE
};
 
template <class T> T strToInt(string str) {
  stringstream ss(str);
  T answer;
  ss >> answer;
  return answer;
}
 
template <class T> string intToStr(T x) {
  stringstream s;
  s << x;
  return s.str();
}
 
vector<string> tokenize(string str, string delim, bool returnDelims) {
  vector<string> answer;
  string temp;
  for (int i(0); i < str.length(); ++i) {
    bool isDelim(false);
    for (int j(0); j < delim.length(); ++j)
      if (str[i] == delim[j]) isDelim = true;
    if (!isDelim) {
      temp += str[i];
      continue;
    }
    if (temp != "") answer.push_back(temp);
    temp = "";
    if (returnDelims) answer.push_back(string(1, str[i]));
  }
  if (temp != "") answer.push_back(temp);
  return answer;
}
 
vector<int> tokenizeInt(string str, string delim, bool returnDelims) {
  vector<string> tokens(tokenize(str, delim, returnDelims));
  vector<int> answer(tokens.size());
  for (int i(0); i < tokens.size(); ++i)
    answer[i] = strToInt(tokens[i]);
  return answer;
}
 
template <class A, class B> int find(const vector<A> &vec, B item) {
  for (int i(0); i < vec.size(); ++i)
    if (vec[i] == item) return i;
  return -1;
}
 
template <class T> T nth(const set<T> &s, int x) {
  typename set<T>::iterator answer(s.begin());
  for (int i(0); i < x; ++i) ++answer;
  return *answer;
}
 
template <class A, class B> void hookSort(vector<A> &a, vector<B> &b, bool complete) {
  vector<pair<A, int> > toSort(a.size());
  for (int i(0); i < a.size(); ++i)
    toSort[i] = Pair(a[i], i);
  sort(toSort.begin(), toSort.end());
  vector<B> old(b);
  for (int i(0); i < b.size(); ++i)
    b[i] = old[toSort[i].Y];
  if (complete)
    sort(a.begin(), a.end());
}
 
template <class T> ostream &operator <<(ostream &os, const vector<T> &vec) {
  if (vec.empty()) return os;
  for (int i(0); i < vec.size() - 1; ++i) os << vec[i] << ',';
  return os << vec[vec.size() - 1];
}
 
template <class A, class B> ostream &operator <<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.X << ',' << p.Y << ')';
}
 
template <class A, class B> vector<A> makeVec(int n, ...) {
  vector<A> answer(n);
  va_list vl;
  va_start(vl, n);
  for (int i(0); i < n; ++i) answer[i] = va_arg(vl, B);
  va_end(vl);
  return answer;
}
 
// Powered by PopsEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/