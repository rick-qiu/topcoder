/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11097
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TheJackpotDivOne {
public:
    vector<long> find(vector<long> money, long jackpot);
};

vector<long> TheJackpotDivOne::find(vector<long> money, long jackpot) {
    vector<long> ret;
    return ret;
}


int test0() {
    vector<long> money = {1, 2, 3, 4};
    long jackpot = 2;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {2, 3, 3, 4};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<long> money = {4};
    long jackpot = 7;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {11};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<long> money = {4, 44, 7, 77};
    long jackpot = 47;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {24, 34, 44, 77};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<long> money = {4, 10, 8, 3, 6, 5, 8, 3, 7, 5};
    long jackpot = 1000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {105, 106, 106, 106, 106, 106, 106, 106, 106, 106};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<long> money = {6, 10, 4, 2, 7, 1, 6, 2, 3, 8};
    long jackpot = 8;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {2, 3, 4, 5, 6, 6, 6, 7, 8, 10};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<long> money = {4, 6, 10, 6, 7, 5, 5, 5, 4, 8};
    long jackpot = 7;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {5, 5, 6, 6, 6, 7, 7, 7, 8, 10};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<long> money = {4, 6, 8, 10, 1, 5, 1, 3, 3, 7};
    long jackpot = 5;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {2, 3, 3, 4, 5, 5, 6, 7, 8, 10};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<long> money = {93972288105281867, 573763823987915057, 729520241238225974, 811179397456126060, 745487293278654018, 538831390648934159, 988185842504600672, 354004413488230661, 918944025421292933, 238959477354873376, 24405511423236049, 980484833530395846, 893760642844817702, 415638089597725792, 6834090876846329, 593968473751497782, 960622865544293739, 346820232859258467, 2836438555321014, 641996658213435147, 996282945498135202, 141128178826463999, 367890375713257659, 319231908524550640, 769666305113807121};
    long jackpot = 377518637774708625;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {6834090876846329, 24405511423236049, 93972288105281867, 141128178826463999, 238959477354873376, 319231908524550640, 346820232859258467, 354004413488230661, 367890375713257659, 380355076330029639, 415638089597725792, 538831390648934159, 573763823987915057, 593968473751497782, 641996658213435147, 729520241238225974, 745487293278654018, 769666305113807121, 811179397456126060, 893760642844817702, 918944025421292933, 960622865544293739, 980484833530395846, 988185842504600672, 996282945498135202};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<long> money = {699085108043528729, 712159816824889738, 955333392923506302, 824815726724562276, 201243198940762441, 890074013601085831, 856280423905582773, 652869772991442089, 456424450107247762, 481552162171757726, 433983913446941400, 589533240618970779, 818688009567563283, 785702044492944871, 190360345644731728, 647032252659235390, 113369882957256831, 761824690082198585, 911259649954335014};
    long jackpot = 686829780455608122;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {201243198940762441, 359949898759778599, 433983913446941400, 456424450107247762, 481552162171757726, 589533240618970779, 630610110297818082, 647032252659235390, 652869772991442089, 699085108043528729, 712159816824889738, 761824690082198585, 785702044492944871, 818688009567563283, 824815726724562276, 856280423905582773, 890074013601085831, 911259649954335014, 955333392923506302};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<long> money = {175698557134263175, 856661385509738701, 986775888421559996, 578984129022498993, 686847560685582361, 892902514538960518, 342492769799499550, 794797244771545354, 392391062715039053, 29156898286415504, 228046180732507378, 173987799572282423, 954432412118610403, 365414865035695159, 49365438479366861, 254448033095564678, 332397303505779907, 88766259568231128, 160536921896983455, 536238630537927280, 21626253471020744, 879359446446172781, 214360401126426125, 438633322377191556, 75094566357551364, 598020660577885142, 567036909886565579, 582996208924888929, 772670204914599514};
    long jackpot = 169971533852002837;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {29156898286415504, 49365438479366861, 75094566357551364, 88766259568231128, 160536921896983455, 173987799572282423, 175698557134263175, 191597787323023581, 214360401126426125, 228046180732507378, 254448033095564678, 332397303505779907, 342492769799499550, 365414865035695159, 392391062715039053, 438633322377191556, 536238630537927280, 567036909886565579, 578984129022498993, 582996208924888929, 598020660577885142, 686847560685582361, 772670204914599514, 794797244771545354, 856661385509738701, 879359446446172781, 892902514538960518, 954432412118610403, 986775888421559996};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<long> money = {805372452334228772, 323831522355545557, 222318376157839320, 890540141938216941};
    long jackpot = 732581373992282617;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {633666337549555264, 645064934956112230, 805372452334228772, 890540141938216941};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<long> money = {710407189257994161, 928367042746832059, 174126760554889639, 589031677029323576, 138813567871760033, 66905533383898427, 505181266251354037, 287799873271001066, 474328720076744870, 713241125839539239, 356495741505631249, 983962261894308578, 83241251042519737, 93251006857772490, 487858393131767974, 797021613421986390, 508155566245378400, 550385471028542036, 101069629413054206, 553328858212272082, 388192904350503370, 832811074475935312, 805578913118505511, 757922137391478356, 411900421468742446, 925143197792743739, 504019364419005502, 74149772682793100, 487400125413669220, 838879749783426494, 156654149439077163, 604694521004573264, 116286734825994299, 111104917116587096, 447045701838372401, 192104926565539332, 8273934847520560, 281856168709504254, 131110721499542694};
    long jackpot = 633140055710581673;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {74149772682793100, 83241251042519737, 93251006857772490, 101069629413054206, 111104917116587096, 116286734825994299, 131110721499542694, 138813567871760033, 156654149439077163, 174126760554889639, 192104926565539332, 267855370460460035, 281856168709504254, 287799873271001066, 356495741505631249, 388192904350503370, 411900421468742446, 440464153481540625, 447045701838372401, 474328720076744870, 487400125413669220, 487858393131767974, 504019364419005502, 505181266251354037, 508155566245378400, 550385471028542036, 553328858212272082, 589031677029323576, 604694521004573264, 710407189257994161, 713241125839539239, 757922137391478356, 797021613421986390, 805578913118505511, 832811074475935312, 838879749783426494, 925143197792743739, 928367042746832059, 983962261894308578};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<long> money = {478368363836451422, 642712163196854677, 277450448862964965, 683377190897339423, 43249730026346796, 721697028182088838, 647531736058138325, 127989952156252278, 399306766808211488};
    long jackpot = 253938454771240271;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {127989952156252278, 277450448862964965, 297188184797587067, 399306766808211488, 478368363836451422, 642712163196854677, 647531736058138325, 683377190897339423, 721697028182088838};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<long> money = {554180683449520255, 151428376287837062, 729692371551642144, 403905160817023669, 178505065337932466, 789694306391094254, 800647239233226301, 73569221167054999, 517682429628294889, 217701705440657351, 716351563875392229, 322743688827916372, 468394120452533396, 491913995652601788, 533659463938503111, 694737932786277568, 258315422331610046, 29661177747556705, 734943228621943082, 317676320055912911, 190387109711496937, 481498359887282379, 897984217990226706, 908217527818391316, 957091409663180351, 420282340006025749, 943739592327543874, 25395937440249188, 876667319967210995, 544679357184354760, 235912538144945228, 844814814668648981, 7322371028293529};
    long jackpot = 64062341290408096;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {25395937440249188, 29661177747556705, 71384712318701625, 73569221167054999, 151428376287837062, 178505065337932466, 190387109711496937, 217701705440657351, 235912538144945228, 258315422331610046, 317676320055912911, 322743688827916372, 403905160817023669, 420282340006025749, 468394120452533396, 481498359887282379, 491913995652601788, 517682429628294889, 533659463938503111, 544679357184354760, 554180683449520255, 694737932786277568, 716351563875392229, 729692371551642144, 734943228621943082, 789694306391094254, 800647239233226301, 844814814668648981, 876667319967210995, 897984217990226706, 908217527818391316, 943739592327543874, 957091409663180351};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<long> money = {584745078228414144, 976010576216412905, 194597652801634547, 100505199539616121, 652252861477768118, 935210022048580500, 975208576878200187, 191561424881681127, 859207788844313243, 479616122179099279, 104473364691848041, 295818906138927467, 39853962892929396, 393283303621797532, 708636797208377196, 261777048802870404, 190770586856910767, 672139436321652138, 601750354875933934, 883594007719777946, 438289738126046435, 912851485189509352, 897177547548947838, 313892996678696337, 629351752678850472, 757371206601920904, 165725993600681855, 984713239025703053, 796420664787506078, 198810481920521471, 968053701694432949, 292044924692210, 761305465523966857};
    long jackpot = 315956336513945414;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {39853962892929396, 100505199539616121, 104473364691848041, 165725993600681855, 190770586856910767, 191561424881681127, 194597652801634547, 198810481920521471, 261777048802870404, 295818906138927467, 313892996678696337, 316248381438637624, 393283303621797532, 438289738126046435, 479616122179099279, 584745078228414144, 601750354875933934, 629351752678850472, 652252861477768118, 672139436321652138, 708636797208377196, 757371206601920904, 761305465523966857, 796420664787506078, 859207788844313243, 883594007719777946, 897177547548947838, 912851485189509352, 935210022048580500, 968053701694432949, 975208576878200187, 976010576216412905, 984713239025703053};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<long> money = {722692089839305534, 84055177736398675, 40278046614463068, 669230063607395895, 191657383295975650, 568774511019425392, 369152343450606785, 978601888029491638, 966245940011034264, 88904671464860109, 190442413310991658, 81413469197274131, 521253093598944057, 191066893988361629, 962881314099639808, 149380223083836559, 384746149429513853, 333318848822644933, 675058820906987351, 36348668406518639, 933146559438322545};
    long jackpot = 915277681191974810;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {84055177736398675, 88904671464860109, 149380223083836559, 183978712472364950, 190442413310991658, 191066893988361629, 191657383295975650, 333318848822644933, 369152343450606785, 384746149429513853, 435173741397713914, 454165411540151784, 521253093598944057, 568774511019425392, 669230063607395895, 675058820906987351, 722692089839305534, 933146559438322545, 962881314099639808, 966245940011034264, 978601888029491638};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<long> money = {655785968156718720, 177767734461971881, 24658173016125065, 278826448201678279};
    long jackpot = 672748063416044720;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {349159932944873092, 392007982565598395, 412832503585348458, 655785968156718720};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<long> money = {277786031410581676, 859943002627096406, 95284612701154068, 258481229920994739, 749639063493296937, 769987392757434005, 639439867101756138, 519995542515150039, 532871375076659475, 505359296263338833, 126500158988054900, 248679882799721073};
    long jackpot = 270957000269407019;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {126500158988054900, 248679882799721073, 258481229920994739, 277786031410581676, 366241612970561087, 505359296263338833, 519995542515150039, 532871375076659475, 639439867101756138, 749639063493296937, 769987392757434005, 859943002627096406};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<long> money = {736866684254427941, 188591046384196326, 773052491800719040, 939210092871673775, 412871566283968741, 465163801085336396, 2919366327308343, 870916673152524237, 815377561388631800, 661068656997502090, 244156128830475243, 805041721129763249, 613105364846552273, 395344949439263805, 853791890239948918, 952609563010935365, 25605927011305880, 158062575448996964, 737173166810245326, 130155539570144755, 459710698764846974, 624097549830911610, 785507952947513386, 256368491892051291, 268808833475592291, 64689776023099907, 8832618841461199, 826427797083566296, 159076975207552302, 683771638679133198, 599962718781538887, 56749103412713827, 338408150538858884, 95959914831215851, 259109169886634332, 196031081668107737, 743552376830043187};
    long jackpot = 434562857628499150;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {8832618841461199, 25605927011305880, 56749103412713827, 64689776023099907, 95959914831215851, 130155539570144755, 158062575448996964, 159076975207552302, 188591046384196326, 196031081668107737, 244156128830475243, 256368491892051291, 259109169886634332, 268808833475592291, 338408150538858884, 395344949439263805, 412871566283968741, 437482223955807493, 459710698764846974, 465163801085336396, 599962718781538887, 613105364846552273, 624097549830911610, 661068656997502090, 683771638679133198, 736866684254427941, 737173166810245326, 743552376830043187, 773052491800719040, 785507952947513386, 805041721129763249, 815377561388631800, 826427797083566296, 853791890239948918, 870916673152524237, 939210092871673775, 952609563010935365};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<long> money = {49975151880294307, 906421576008811261, 530732769479655374, 590662274753613763, 445805028631352751, 840578342561858721, 978513467123454844, 817427983429437033, 382516618357373850, 710464362618879438, 511437036717335191, 848458486751093992, 745109129279550504, 836708938140217100, 217420151059279597, 284912647979499108, 620662921093751377, 969696363532851176, 964127306631288620, 895403224752438979};
    long jackpot = 977784575999323416;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {284912647979499108, 382516618357373850, 445805028631352751, 511437036717335191, 530732769479655374, 587828189899795470, 590662274753613763, 620662921093751377, 657351689039101850, 710464362618879438, 745109129279550504, 817427983429437033, 836708938140217100, 840578342561858721, 848458486751093992, 895403224752438979, 906421576008811261, 964127306631288620, 969696363532851176, 978513467123454844};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<long> money = {434455602575668194, 386639248438757394, 354004413488230661, 577122314532493284, 543973887465340629, 701908289146987334, 735627959816802108, 93972288105281867, 141114941154534572, 538831390648934159, 500530107213534300, 349052300149208000, 988185842504600672, 289654215754359391, 141128178826463999, 415638089597725792, 769666305113807121, 319231908524550640, 745487293278654018, 811179397456126060, 641996658213435147, 367890375713257659, 9739049388978380, 893760642844817702, 304754175310195727, 918944025421292933, 729520241238225974, 24405511423236049, 980484833530395846, 880893998859457013, 613373860685764380, 670786469633385154, 2836438555321014, 347848462754446319, 705097385961679532, 892682135270647487, 714074394099931893, 996282945498135202, 238959477354873376, 960622865544293739, 346820232859258467, 54917241795707543, 91910301555348975, 6834090876846329, 521655231521761154, 573763823987915057, 593968473751497782};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {9739049388978380, 24405511423236049, 54917241795707543, 91910301555348975, 93972288105281867, 141114941154534572, 141128178826463999, 238959477354873376, 289654215754359391, 304754175310195727, 319231908524550640, 346820232859258467, 347848462754446319, 349052300149208000, 354004413488230661, 367890375713257659, 386639248438757394, 415638089597725792, 434455602575668194, 500530107213534300, 500686969486589342, 508983559945578001, 521655231521761154, 538831390648934159, 543973887465340629, 573763823987915057, 577122314532493284, 593968473751497782, 613373860685764380, 641996658213435147, 670786469633385154, 701908289146987334, 705097385961679532, 714074394099931893, 729520241238225974, 735627959816802108, 745487293278654018, 769666305113807121, 811179397456126060, 880893998859457013, 892682135270647487, 893760642844817702, 918944025421292933, 960622865544293739, 980484833530395846, 988185842504600672, 996282945498135202};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<long> money = {28893457769848284, 952543111394575407, 157769038909600109, 861045142089662992, 732444905376629798, 748659540168830587, 121427239014125786, 853902095323226209, 392082642311540565, 439341147823541825, 256050154827501084, 331984835699555716, 989356992894464779, 370985574764889995, 616047729052928725, 59093206573461049, 229332029731501363, 804722301023054272, 692587383622617892, 377791289499894754, 349351170217772882, 189540389250332956, 762948704624327994, 678121910736738837, 249207124579578076, 65217431793309646, 374659492127159081, 193016866464979741, 606871332557585134, 643936745948846439, 666539325859599999, 369971079197998199, 561034740848701438, 315936516089995970, 124303984963155479, 533157394619851571, 656853407664430112, 517209383377049649, 116627593145662016, 14832817144269661, 912184722930029510, 501646050396532809, 328148686411635731, 406890118011102223};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {65217431793309646, 116627593145662016, 121427239014125786, 124303984963155479, 157769038909600109, 176643292513555899, 189540389250332956, 193016866464979741, 229332029731501363, 249207124579578076, 256050154827501084, 315936516089995970, 328148686411635731, 331984835699555716, 349351170217772882, 369971079197998199, 370985574764889995, 374659492127159081, 377791289499894754, 392082642311540565, 406890118011102223, 439341147823541825, 458051518337093099, 468124670636929996, 501646050396532809, 517209383377049649, 533157394619851571, 561034740848701438, 606871332557585134, 616047729052928725, 643936745948846439, 656853407664430112, 666539325859599999, 678121910736738837, 692587383622617892, 732444905376629798, 748659540168830587, 762948704624327994, 804722301023054272, 853902095323226209, 861045142089662992, 912184722930029510, 952543111394575407, 989356992894464779};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<long> money = {238573852473868740, 874724478486304263, 361852854283164082, 858237572004723871, 483401236041235823, 700452411452659500, 851164359430398398, 455892689831562972, 615273738449828690, 620932758266077296, 671562230439166738, 81546817570057661, 625470542810485533, 6637632907464382, 72940720236189166, 612020684741770521, 876215501776615549, 395531251056458672, 635561011789640540, 380988819055303407, 429995454427693899, 896247225086193670, 745319070482238391, 141864004533856672, 65466439306280658, 838839795406663706, 635166180722846412, 544443919494009736, 380697015937574603, 957183737405914921, 61802944702078195, 314749154874398540, 474032145452365369, 638912969078101034, 797720094163121640, 120734865148811895, 818090075783780541, 499171334548885995, 299291950131436445, 288913232814843453, 883733584310388931, 88924334693740801, 916140750510297049, 849032933446491674};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {71875310522561003, 72940720236189166, 81546817570057661, 88924334693740801, 120734865148811895, 141864004533856672, 238573852473868740, 288913232814843453, 299291950131436445, 314749154874398540, 361852854283164082, 380697015937574603, 380988819055303407, 395531251056458672, 429995454427693899, 455892689831562972, 474032145452365369, 483401236041235823, 499171334548885995, 525123963081022501, 536907743312239731, 544443919494009736, 612020684741770521, 615273738449828690, 620932758266077296, 625470542810485533, 635166180722846412, 635561011789640540, 638912969078101034, 671562230439166738, 700452411452659500, 745319070482238391, 797720094163121640, 818090075783780541, 838839795406663706, 849032933446491674, 851164359430398398, 858237572004723871, 874724478486304263, 876215501776615549, 883733584310388931, 896247225086193670, 916140750510297049, 957183737405914921};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<long> money = {480450142700429600, 958852680575631146, 757774729650440740, 984713889695648803, 482160795833999580, 32659159525061676, 661665594869696909, 809567866894884677, 901997090244010274, 376228006004154306, 365164037108253351, 563382890499508399, 62545054629333422, 401406094959698772, 953621537993306171, 633938721543385726, 715839335502410810, 854378888935366327, 573363376203012476, 780817729548733205, 988716642570067408, 393741845171866175, 715827156415635701, 460708486573530680, 599267095014394523, 147487257612081337, 524411682810799033, 788704309425035792, 376303711301311497, 122252669105413311, 615474402667586449, 204526089047914253, 774787112635877394, 885485829888587151, 93968585349183203, 782551882018704374, 414594814149260932, 514663787804026663, 170921874459111861, 194422287833407913, 711804379094095053, 810001642389336711, 358666641537179170, 228814760779064215, 269715586095610979, 876024142052461078};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {93968585349183203, 122252669105413311, 147487257612081337, 170921874459111861, 194422287833407913, 204526089047914253, 228814760779064215, 269715586095610979, 358666641537179170, 365164037108253351, 376228006004154306, 376303711301311497, 393741845171866175, 401406094959698772, 414594814149260932, 460708486573530680, 480450142700429600, 482160795833999580, 514663787804026663, 524411682810799033, 543587425095297071, 551616789059098027, 563382890499508399, 573363376203012476, 599267095014394523, 615474402667586449, 633938721543385726, 661665594869696909, 711804379094095053, 715827156415635701, 715839335502410810, 757774729650440740, 774787112635877394, 780817729548733205, 782551882018704374, 788704309425035792, 809567866894884677, 810001642389336711, 854378888935366327, 876024142052461078, 885485829888587151, 901997090244010274, 953621537993306171, 958852680575631146, 984713889695648803, 988716642570067408};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<long> money = {829023765206674230, 934496251209338936, 148296254552142078, 287335547641962115, 333977583451809461, 452519648042596278, 123746872519189259, 80215965838076702, 274306587975767176, 246728659082675181, 509768681705797572, 891658352795813275, 963947240679894752, 377470097985521990, 982242598875316960, 903140092458187548, 832611967104056421, 600774147004354202, 333908457222968171, 564173873556904863, 135583022953238423, 25494314179770456, 939818184803265331, 165479696175399026, 3468994404581308, 254001324135208959, 405048441319900722, 644777186972764649, 68677724444691663, 995412096142173000, 845883120988559704, 463288586516647427, 479621230870570159, 992184825395435889, 132140572779135745, 626189149746836960, 47992612848833382, 645472667350794170, 472188163158049455, 492274097753562625, 273886526587676197, 175003034509573774, 933940561571325393, 476102935147432212};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {68677724444691663, 80215965838076702, 94896238096234427, 123746872519189259, 132140572779135745, 135583022953238423, 148296254552142078, 165479696175399026, 175003034509573774, 246728659082675181, 254001324135208959, 273886526587676197, 274306587975767176, 287335547641962115, 333908457222968171, 333977583451809461, 377470097985521990, 405048441319900722, 452519648042596278, 463288586516647427, 472188163158049455, 476102935147432212, 479621230870570159, 485551629901465314, 492274097753562625, 496508053435485405, 509768681705797572, 564173873556904863, 600774147004354202, 626189149746836960, 644777186972764649, 645472667350794170, 829023765206674230, 832611967104056421, 845883120988559704, 891658352795813275, 903140092458187548, 933940561571325393, 934496251209338936, 939818184803265331, 963947240679894752, 982242598875316960, 992184825395435889, 995412096142173000};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<long> money = {963830992331414089, 965526693797580708, 505245337840587042, 246724243372779502, 225322297927438975, 934651986890483119, 39967120136113090, 979696459113745767, 784293799918546580, 673016314648822350, 531213395754775871, 764268485680918495, 846875237746377307, 410676380369408623, 610368992413397309, 933470660495868526, 748170476510896709, 805846820658925063, 482647390032234254, 656724617711365529, 503312148092553624, 512861945030404705, 272885282120647049, 391644033600253428, 751316549604266620, 951920486621489105, 377834722399013691, 495008527688783952, 581262783608150099, 577258470099326783, 553920599649647705, 462099340530171469, 684844171017922148, 739807983959028362, 533259816789171625, 588779069276181014, 89122385379354197, 499694343890502419, 898659425842718501, 971578309037185638, 398159157518923090, 551277951649060225, 182550220858536327, 551623363544680011, 638645903666882308, 592291541453626789};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {182550220858536327, 225322297927438975, 246724243372779502, 272885282120647049, 377834722399013691, 391644033600253428, 398159157518923090, 410676380369408623, 462099340530171469, 482647390032234254, 495008527688783952, 499694343890502419, 503312148092553624, 505245337840587042, 512861945030404705, 531213395754775871, 532129587335463813, 533259816789171625, 551277951649060225, 551623363544680011, 553920599649647705, 577258470099326783, 581262783608150099, 588779069276181014, 592291541453626789, 596959918180003474, 610368992413397309, 638645903666882308, 656724617711365529, 673016314648822350, 684844171017922148, 739807983959028362, 748170476510896709, 751316549604266620, 764268485680918495, 784293799918546580, 805846820658925063, 846875237746377307, 898659425842718501, 933470660495868526, 934651986890483119, 951920486621489105, 963830992331414089, 965526693797580708, 971578309037185638, 979696459113745767};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<long> money = {532988593929375528, 14454807709518530, 309473402946643134, 969696363532851176, 68390460672707593, 925958186671411076, 284912647979499108, 73016438186400781, 845255584771532157, 260728167826732474, 906421576008811261, 619398272671446819, 401855826551384926, 817427983429437033, 208284973873346478, 388395874257685263, 766406118024410019, 978513467123454844, 180698641122534056, 848458486751093992, 840102152676720165, 999126982015241934, 646518177669357011, 964127306631288620, 530732769479655374, 590662274753613763, 897516759739438206, 217420151059279597, 925545064201663080, 55080274236218647, 840578342561858721, 49975151880294307, 511437036717335191, 620662921093751377, 303181243325635649, 745109129279550504, 895403224752438979, 699241636871838337, 445805028631352751, 710464362618879438, 269308985415867477, 382516618357373850, 836708938140217100, 807140148703897083};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {55080274236218647, 68390460672707593, 73016438186400781, 180698641122534056, 208284973873346478, 217420151059279597, 260728167826732474, 269308985415867477, 284912647979499108, 303181243325635649, 309473402946643134, 382516618357373850, 388395874257685263, 401855826551384926, 445805028631352751, 492041310615880032, 511437036717335191, 530732769479655374, 532988593929375528, 572388648973932805, 590662274753613763, 619398272671446819, 620662921093751377, 646518177669357011, 699241636871838337, 710464362618879438, 745109129279550504, 766406118024410019, 807140148703897083, 817427983429437033, 836708938140217100, 840102152676720165, 840578342561858721, 845255584771532157, 848458486751093992, 895403224752438979, 897516759739438206, 906421576008811261, 925545064201663080, 925958186671411076, 964127306631288620, 969696363532851176, 978513467123454844, 999126982015241934};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<long> money = {885209365517231382, 507506663643920637, 845989500368843236, 407157039920380887, 353422454519260514, 463794475543615425, 574920236678688991, 297922293038309213, 417153750136742514, 770391146786100660, 343909438840599961, 248696401573201902, 957091682985914429, 187375048810075052, 964202089055963575, 618225815325267180, 62396748218071012, 595367906305215074, 534635299697476989, 28600560354136663, 414308371842585231, 594479536612872966, 177150968036279825, 314180380560063564, 335175771582951172, 4596671969985717, 797562038433539647, 484012284024899952, 625987523670704535, 93455271744930686, 800070174310412324, 143425242622692025, 345046174314045708, 77264048381371231, 554683309150604299, 231698288143835586, 826421700441790966, 257064032118361253, 823402386563513205, 672876384794483548, 631754608091446975, 82441925575471147, 890663881690300073, 598468891935576532};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {77264048381371231, 82441925575471147, 93455271744930686, 137654006780186724, 143425242622692025, 177150968036279825, 187375048810075052, 231698288143835586, 248696401573201902, 257064032118361253, 297922293038309213, 314180380560063564, 335175771582951172, 343909438840599961, 345046174314045708, 353422454519260514, 407157039920380887, 414308371842585231, 417153750136742514, 463794475543615425, 473639949634812125, 484012284024899952, 484300024127194543, 507506663643920637, 534635299697476989, 554683309150604299, 574920236678688991, 594479536612872966, 595367906305215074, 598468891935576532, 618225815325267180, 625987523670704535, 631754608091446975, 672876384794483548, 770391146786100660, 797562038433539647, 800070174310412324, 823402386563513205, 826421700441790966, 845989500368843236, 885209365517231382, 890663881690300073, 957091682985914429, 964202089055963575};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<long> money = {288370939236960682, 717618565467387201, 238002154203309574, 393305274390905235, 925240744941584920, 431669866373925724, 783977683419002189, 563704786166689530, 274790872779668826, 948989863456306222, 50154640748273116, 580746919978276445, 488882227943615027, 280025418102211916, 328986213534770036, 980827098092713771, 178045143436118822, 703429275847702210, 563105462826945130, 184457995817783783, 847777865910394110, 88759854586885071, 362418045018479921, 74285744681278816, 469461885534495555, 442037834460524630, 472174611132319768, 120591647827013769, 690884313005786220, 946104769242221169, 536256887772903361, 279160327960397625, 761424182877985141, 839586533481095656, 5693847136103871, 210723507355926390, 203335876442370596, 590562851819422533, 866466690243610461, 392700091206520845, 746889728987766883, 174501547559778609, 574720506770325359, 512654569850931299, 420412635808016733, 998880181312179803};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {88759854586885071, 120591647827013769, 139922385820199523, 174501547559778609, 178045143436118822, 184457995817783783, 203335876442370596, 210723507355926390, 238002154203309574, 274790872779668826, 279160327960397625, 280025418102211916, 288370939236960682, 328986213534770036, 362418045018479921, 392700091206520845, 393305274390905235, 420412635808016733, 431669866373925724, 442037834460524630, 469461885534495555, 472174611132319768, 488882227943615027, 489843427929323578, 500368418816132702, 512654569850931299, 536256887772903361, 563105462826945130, 563704786166689530, 574720506770325359, 580746919978276445, 590562851819422533, 690884313005786220, 703429275847702210, 717618565467387201, 746889728987766883, 761424182877985141, 783977683419002189, 839586533481095656, 847777865910394110, 866466690243610461, 925240744941584920, 946104769242221169, 948989863456306222, 980827098092713771, 998880181312179803};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<long> money = {361769213487563719, 909297400717405685, 917548819587744471, 545504794317391668, 874222392534078152, 672176598649550011, 672303533394315200, 499403263024861115, 10855225128208819, 289983969548990804, 604984677435120525, 879311323535041655, 575462705518674743, 133878618506980579, 8477204342315108, 661599891206041723, 38870903665196695, 230303263134360876, 149617800410182413, 75975625206045140, 864831382405239625, 609306510306381151, 477568405659472624, 756187348261288563, 356404841037186853, 318569287439988957, 621398085611755591, 432140116711651999, 241330954622883869, 134899196416656543, 131519852572518352, 113902511299944059, 6619681565764612, 950197514447492439, 641784422554621953, 915317881304313719, 923743615640144988, 731851114073707220, 731493704881562119, 94660495600701831, 195735112317963757, 67171750757377649, 882546228466033403, 844205919937259903};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {38870903665196695, 53587552665605349, 67171750757377649, 75975625206045140, 94660495600701831, 113902511299944059, 131519852572518352, 133878618506980579, 134899196416656543, 149617800410182413, 195735112317963757, 230303263134360876, 241330954622883869, 289983969548990804, 318569287439988957, 356404841037186853, 361769213487563719, 432140116711651999, 477568405659472624, 480793935391863202, 491570622978819988, 499403263024861115, 545504794317391668, 575462705518674743, 604984677435120525, 609306510306381151, 621398085611755591, 641784422554621953, 661599891206041723, 672176598649550011, 672303533394315200, 731493704881562119, 731851114073707220, 756187348261288563, 844205919937259903, 864831382405239625, 874222392534078152, 879311323535041655, 882546228466033403, 909297400717405685, 915317881304313719, 917548819587744471, 923743615640144988, 950197514447492439};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<long> money = {4455602575668194, 6639248438757394, 4004413488230661, 7122314532493284, 3973887465340629, 1908289146987334, 5627959816802108, 3972288105281867, 1114941154534572, 8831390648934159, 530107213534300, 9052300149208000, 8185842504600672, 9654215754359391, 1128178826463999, 5638089597725792, 9666305113807121, 9231908524550640, 5487293278654018, 1179397456126060, 1996658213435147, 7890375713257659, 9739049388978380, 3760642844817702, 4754175310195727, 8944025421292933, 9520241238225974, 4405511423236049, 484833530395846, 893998859457013, 3373860685764380, 786469633385154, 2836438555321014, 7848462754446319, 5097385961679532, 2682135270647487, 4074394099931893, 6282945498135202, 8959477354873376, 622865544293739, 6820232859258467, 4917241795707543, 1910301555348975, 6834090876846329, 1655231521761154, 3763823987915057, 3968473751497782};
    long jackpot = 677518637774708622;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507971, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972, 19356296919507972};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<long> money = {9351170217772882, 2082642311540565, 5936516089995970, 6871332557585134, 8121910736738837, 2184722930029510, 5217431793309646, 8148686411635731, 9356992894464779, 1682477847678131, 1045142089662992, 1427239014125786, 3157394619851571, 8888314059959502, 9971079197998199, 1984835699555716, 4722301023054272, 6853407664430112, 6539325859599999, 9207124579578076, 1646050396532809, 3936745948846439, 2543111394575407, 4659492127159081, 4832817144269661, 7209383377049649, 6047729052928725, 9093206573461049, 8659540168830587, 2948704624327994, 9332029731501363, 4303984963155479, 2444905376629798, 8579896305534597, 7791289499894754, 6890118011102223, 6627593145662016, 7769038909600109, 985574764889995, 9341147823541825, 2587383622617892, 9540389250332956, 3902095323226209, 6050154827501084, 8893457769848284, 1034740848701438, 3016866464979741};
    long jackpot = 917437785784691120;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {25124580443190631, 25124580443190631, 25124580443190631, 25124580443190631, 25124580443190631, 25124580443190631, 25124580443190631, 25124580443190631, 25124580443190631, 25124580443190631, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632, 25124580443190632};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<long> money = {4752335916103198, 2033401256024203, 261545796441447, 4447594013543674, 261383280458054, 5054951605072076, 3061319632203626, 5343906371941975, 7976532560692712, 7279578350263002, 253920995999951, 6618583125545910, 1910098303151592, 8692060070929655, 3510300900946779, 841420261437928, 6003645665166311, 702036475565943, 8670405223633845, 9189183095957703, 8701760179526288, 1792721361613253, 6162160424226647, 4552237338111802, 7528796737878623, 6522998483383946, 9640179505824800, 1614524952743456, 7127085084630247, 4095236657946954, 3959115359315863, 397444942952159, 2570801733635568, 7020268774332648, 3785566194359680, 9499193164241496, 9390074325157675, 2636621002405360, 7614318298451338, 2769284722688042, 465814620334968, 9404232225801752, 2381930372824776, 587311923572791, 4186161583065095, 717992419066752, 6875217911724384};
    long jackpot = 182088121600597422;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {8273690124086675, 8281488365865624, 8289202212255812, 8296833622884656, 8304384416168496, 8311856300698074, 8319251070343456, 8326570620666047, 8334018238963352, 8341422836606904, 8348759147098386, 8356029244110070, 8363235114554344, 8370373134983013, 8377442681710573, 8384245538125497, 8384445344495787, 8391382628376293, 8398255941080728, 8405066593537241, 8411812177495920, 8418490518454045, 8425102847113749, 8431650311409453, 8438133964859014, 8444554768899803, 8450913598338619, 8457211433942086, 8463449275771175, 8469628055337661, 8475748639885860, 8481811837089090, 8487818602753045, 8493769887023679, 8499666599607395, 8505509601897999, 8511299710107241, 8517037700138688, 8522724303684605, 8670405223633845, 8692060070929655, 8701760179526288, 9189183095957703, 9390074325157675, 9404232225801752, 9499193164241496, 9640179505824800};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<long> money = {6509822457818014, 8276372294583042, 3789721943670120, 3811418116743939, 1646817886654764, 7118676511317706, 712468703053928, 2469002308520142, 4353869649306497, 615799314136339, 6246585232753996, 6157353730417088, 1855473621091200, 3014246688878680, 5015854277190662, 6612260314088550, 4661732894754069, 2545274845867927, 4762050909948323, 1837327116896090, 5067901673800233, 7129827732698850, 6920866417350833, 4879560578906958, 1163039739088450, 5542847121319341, 1660822096332299, 9794229306712123, 7324031843147990, 2745472508431068, 2120309251763743, 2324266033450452, 2397417535284899, 6459216326922122, 7273050715638352, 2651275148684123, 8841610533038615, 9831171492284548, 6478397580386871, 165901515713803, 6247133215612945, 439511217358836, 8158901705551241, 3989462347724975, 1992114602980121, 2932301425625178, 3246003711169757};
    long jackpot = 497400682227004370;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631365, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366, 15046584136631366};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<long> money = {3092932486584940, 709158872847862, 4688749678694984, 7444051231819582, 899062530300622, 9659782403741535, 638680604351475, 4680033250388923, 3296326757888746, 3212533846560007, 5024246876434394, 3851206963556349, 411018437729656, 3334822398496247, 852291327361026, 4537896726708589, 3792843171266284, 6058956783135488, 3566841529097684, 7537003816023069, 5742005279711715, 1260481341445938, 306006820750671, 5365767043154236, 8859506219854759, 5425415597195077, 7184015505788581, 9532130902209279, 884257469908956, 5044213793298618, 4706149086226266, 5237218602017363, 3927438872340501, 6483166213743543, 1777356904018516, 2816015594376324, 2639928361799449, 7894225896280494, 3707714478459721, 2141460270079216, 8192618002284578, 7294538147786660, 2414027520033682, 1554353357997703, 6505094667868525, 5743550878234153, 8420680349263826};
    long jackpot = 268267362793988843;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406482, 10140747652406483};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<long> money = {367890375713257659};
    long jackpot = 977518637774708601;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1345409013487966260};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<long> money = {738432999326573636};
    long jackpot = 975873895005991024;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1714306894332564660};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<long> money = {545115343844754265};
    long jackpot = 953293504459087579;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1498408848303841844};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<long> money = {1};
    long jackpot = 977518637774708601;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {977518637774708602};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<long> money = {1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {2000000000000000000};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 1;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<long> money = {};
    long jackpot = 977518637774708601;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<long> money = {};
    long jackpot = 972184442245330369;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<long> money = {};
    long jackpot = 990256838797399382;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<long> money = {777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 797328150533271949, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777, 777777777777777777};
    long jackpot = 977518637774708601;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836, 798992012044377836};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<long> money = {};
    long jackpot = 917437785784691088;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594477, 797688129724594478, 797688129724594478, 797688129724594478, 797688129724594478, 797688129724594478, 797688129724594478, 797688129724594478, 797688129724594478, 797688129724594478};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<long> money = {342531448995686709, 822168923813342046, 499247156387021709, 917347265637354996, 324427554811329067, 902063909465376525, 400252332689947742, 461280367809578674, 871850114171058127, 503030750806376074, 806270274208055558, 258998702900176329, 598747761186025035, 669352606225481894, 272294434555476772, 263063543432309464, 251922193390648424, 849401341452398415, 87605671680754444, 350325663410126970, 35446732828917854, 365902510148557997, 16937911104768238, 397667276151375831, 691239074931472880, 149936952668052824, 936230170867261175, 589553940863821372, 769668711857649829, 505474047741771709, 64403413348808645, 342244201144764918, 161165326353047978, 20413932475777645, 837337293740243510, 489618886953255721, 879322617285223513, 406700808836160032, 756405879155321645, 130171823259504465, 31029391955084563, 488620900599860602, 315200974089489996, 109517369315030485, 317550659942155449, 211595271936407069, 54714757320029399};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {35446732828917854, 54714757320029399, 64403413348808645, 87605671680754444, 109517369315030485, 130171823259504465, 149936952668052824, 161165326353047978, 185991946581896528, 211595271936407069, 251922193390648424, 258998702900176329, 263063543432309464, 272294434555476772, 315200974089489996, 317550659942155449, 324427554811329067, 342244201144764918, 342531448995686709, 350325663410126970, 365902510148557997, 397667276151375831, 400252332689947742, 406700808836160032, 436728784125581709, 445660504828152209, 461280367809578674, 488620900599860602, 489618886953255721, 499247156387021709, 503030750806376074, 505474047741771709, 589553940863821372, 598747761186025035, 669352606225481894, 691239074931472880, 756405879155321645, 769668711857649829, 806270274208055558, 822168923813342046, 837337293740243510, 849401341452398415, 871850114171058127, 879322617285223513, 902063909465376525, 917347265637354996, 936230170867261175};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<long> money = {999999999569548985, 999999999215764588, 999999999880641847, 999999999874970313, 999999999446064254, 999999999077814904, 999999999714504434, 999999999414906606, 999999999526301748, 999999999013136569, 999999999327998473, 999999999342691263, 999999999189861234, 999999999956251262, 999999999046012189, 999999999852925376, 999999999962720332, 999999999746289310, 999999999342179099, 999999999631482674, 999999999792426959, 999999999087665298, 999999999856420153, 999999999249037437, 999999999158051302, 999999999654713205, 999999999252742854, 999999999417108800, 999999999090835006, 999999999336611363, 999999999635683955, 999999999812182689, 999999999339970820, 999999999300138075, 999999999888202834, 999999999492389415, 999999999966836660, 999999999729213477, 999999999010420737, 999999999010791477, 999999999830200592, 999999999123424220, 999999999050289888, 999999999597694500, 999999999513997357, 999999999304991452, 999999999590622333};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<long> money = {999999999195710617, 999999999153069114, 999999999318307223, 999999999285363085, 999999999042252207, 999999999575761665, 999999999280114614, 999999999350239508, 999999999403483351, 999999999810358579, 999999999974797638, 999999999649509973, 999999999216631310, 999999999897479941, 999999999955102237, 999999999032486074, 999999999634819460, 999999999459616574, 999999999695910828, 999999999696544264, 999999999964994789, 999999999478404632, 999999999705297433, 999999999273043571, 999999999663534218, 999999999138978470, 999999999721277138, 999999999766334877, 999999999854825933, 999999999531296865, 999999999898486071, 999999999198020198, 999999999684365978, 999999999364276942, 999999999630866931, 999999999874101833, 999999999940038607, 999999999910981544, 999999999371824989, 999999999343521958, 999999999868823771, 999999999346622627, 999999999140515579, 999999999085455081, 999999999391586216, 999999999243101463, 999999999265424802};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<long> money = {1, 42553191489361702, 63829787234042553, 85106382978723404, 106382978723404255, 127659574468085106, 148936170212765957, 170212765957446808, 191489361702127659, 212765957446808510, 234042553191489361, 255319148936170212, 276595744680851063, 297872340425531914, 319148936170212765, 340425531914893616, 361702127659574467, 382978723404255318, 404255319148936169, 425531914893617020, 446808510638297871, 468085106382978722, 489361702127659573, 510638297872340424, 531914893617021275, 553191489361702126, 574468085106382977, 595744680851063828, 617021276595744679, 638297872340425530, 659574468085106381, 680851063829787232, 702127659574468083, 723404255319148934, 744680851063829785, 765957446808510636, 787234042553191487, 808510638297872338, 829787234042553189, 851063829787234040, 872340425531914891, 893617021276595742, 914893617021276593, 936170212765957444, 957446808510638295, 978723404255319146, 999999999999999997};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {75156757173266042, 85106382978723404, 106382978723404255, 127659574468085106, 148936170212765957, 170212765957446808, 191489361702127659, 212765957446808510, 234042553191489361, 255319148936170212, 276595744680851063, 297872340425531914, 319148936170212765, 340425531914893616, 361702127659574467, 382978723404255318, 404255319148936169, 425531914893617020, 446808510638297871, 468085106382978722, 489361702127659573, 510185604345857853, 510638297872340424, 521040617204280361, 531914893617021275, 553191489361702126, 574468085106382977, 595744680851063828, 617021276595744679, 638297872340425530, 659574468085106381, 680851063829787232, 702127659574468083, 723404255319148934, 744680851063829785, 765957446808510636, 787234042553191487, 808510638297872338, 829787234042553189, 851063829787234040, 872340425531914891, 893617021276595742, 914893617021276593, 936170212765957444, 957446808510638295, 978723404255319146, 999999999999999997};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680851, 1021276595744680852, 1021276595744680852, 1021276595744680852};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<long> money = {1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1021276595744676999, 1021276595744676999, 1021276595744676999, 1021276595744676999, 1021276595744676999, 1021276595744676999, 1021276595744676999, 1021276595744676999, 1021276595744676999, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000, 1021276595744677000};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<long> money = {3561515, 39755351, 57629619, 27556440, 104122044, 98485865, 95763048, 62272876, 103201119, 122084129, 83826312, 32267380, 107591945, 100021902, 1186959, 60164883, 87256495, 13349194, 13312014, 52736160, 38455475, 108718587, 102594663, 8438791, 107126651, 45528261, 83423348, 74712893, 129610846, 113341584, 40705608, 75918813, 98910264, 89268209, 2598861, 47506980, 7075703, 95468940, 75694469, 94636778, 72902165, 18636940, 35434474, 26448503, 78680807, 116263505, 40873545};
    long jackpot = 15647987;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {2598861, 3561515, 7075703, 8438791, 13312014, 13349194, 16834946, 18636940, 26448503, 27556440, 32267380, 35434474, 38455475, 39755351, 40705608, 40873545, 45528261, 47506980, 52736160, 57629619, 60164883, 62272876, 72902165, 74712893, 75694469, 75918813, 78680807, 83423348, 83826312, 87256495, 89268209, 94636778, 95468940, 95763048, 98485865, 98910264, 100021902, 102594663, 103201119, 104122044, 107126651, 107591945, 108718587, 113341584, 116263505, 122084129, 129610846};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<long> money = {};
    long jackpot = 999999999999999999;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {100, 1000, 10000, 100000, 10000000, 100000000, 1000000000, 100000000000, 1000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000, 316785082955104029, 683214917044895982, 999999999999999999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<long> money = {999999999998638045, 999999999371854484, 999999999116484720, 999999999237111365, 999999999901847898, 999999998938597108, 999999999990419362, 999999999353860681, 999999999515972334, 999999999158917445, 999999999059436285, 999999999420886472, 999999999074198828, 999999998929698827, 999999999714154995, 999999999596426277, 999999999990532710, 999999999368734600, 999999999479309751, 999999999508252291, 999999999356784305, 999999999385391552, 999999999543482684, 999999999193043909, 999999999471843294, 999999999841601141, 999999999256025398, 999999998962116750, 999999999117735296, 999999999122555691, 999999999214013462, 999999999267446593, 999999999867900140, 999999999444855588, 999999998980655633, 999999999493492737, 999999999510273331, 999999999206307684, 999999999098670362, 999999999970476209, 999999999429502761, 999999999293908653, 999999999881945314, 999999999692821748, 999999999103837537, 999999999728643458, 999999999134307038};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<long> money = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000, 380614657210401902, 619385342789598109, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1, 1, 1, 1, 1, 2, 4};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 2, 4, 148936170212765959, 851063829787234043, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<long> money = {999999999998776243, 999999999320360325, 999999999716619348, 999999999732279350, 999999999665558938, 999999999812670047, 999999999963454577, 999999999342779542, 999999999713724770, 999999999904078323, 999999999328715133, 999999999306992439, 999999999409356220, 999999999075776879, 999999999688757997, 999999999921724964, 999999999973100573, 999999999458937856, 999999999244411772, 999999999601394677, 999999999054907589, 999999999096817890, 999999999988843819, 999999999609172677, 999999999757479356, 999999999755834967, 999999999607046216, 999999999219547963, 999999999605452495, 999999999925386405, 999999999292315750, 999999999138275970, 999999999307105944, 999999999221163807, 999999999820833630, 999999999548868690, 999999999850122614, 999999999511648798, 999999999912065878, 999999999076081125, 999999999466444175, 999999999621756677, 999999999992347575, 999999999910240259, 999999999903250642, 999999999342902074, 999999999487332406};
    long jackpot = 1000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {999999999076081125, 999999999096817890, 999999999138275970, 999999999219547963, 999999999221163807, 999999999244411772, 999999999292315750, 999999999306992439, 999999999307105944, 999999999320360325, 999999999328715133, 999999999342779542, 999999999342902074, 999999999409356220, 999999999458937856, 999999999466444175, 999999999487332406, 999999999511648798, 999999999548868690, 999999999551903290, 999999999578781178, 999999999601394677, 999999999605452495, 999999999607046216, 999999999609172677, 999999999621756677, 999999999665558938, 999999999688757997, 999999999713724770, 999999999716619348, 999999999732279350, 999999999755834967, 999999999757479356, 999999999812670047, 999999999820833630, 999999999850122614, 999999999903250642, 999999999904078323, 999999999910240259, 999999999912065878, 999999999921724964, 999999999925386405, 999999999963454577, 999999999973100573, 999999999988843819, 999999999992347575, 999999999998776243};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<long> money = {};
    long jackpot = 10000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {3333, 23213213213, 43423432444, 4334334434444, 10000000000000001, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 10000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10000001, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<long> money = {1, 1, 1, 1, 1};
    long jackpot = 1000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {200000001, 200000001, 200000001, 200000001, 200000001};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<long> money = {1000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<long> money = {4, 10, 8, 3, 6, 5, 8, 3, 7, 5};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {100000000000000005, 100000000000000006, 100000000000000006, 100000000000000006, 100000000000000006, 100000000000000006, 100000000000000006, 100000000000000006, 100000000000000006, 100000000000000006};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<long> money = {55, 66, 53, 89, 36, 80, 290000000, 76, 95, 68, 18, 47, 96, 77, 37, 29, 40, 20, 59, 39, 9, 11, 11644835239948737, 3884914036387296, 809700967519678458, 188069540440357133, 391780326366604574, 111320191446586962, 493682414535716733, 595414230988866179, 363900507324986190, 453006947311456489, 486367977793048242, 387366711482182965, 33031646250261730, 352119269752009214, 252865793035104244, 524116760835285943, 712014259844405000, 425693588313252510, 61994063802452800, 37093242400638909, 316908033537119580, 8417919454104163, 429417281318983888, 633133584084517740, 453072987297950756};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {37, 39, 40, 47, 53, 55, 59, 66, 68, 76, 77, 80, 89, 95, 96, 290000000, 3884914036387296, 8417919454104163, 11644835239948737, 33031646250261730, 37093242400638909, 52440024463170274, 61994063802452800, 111320191446586962, 181617404142593778, 185481604230734071, 188069540440357133, 189428021342026285, 193458404774835354, 197574541046640361, 252865793035104244, 316908033537119580, 352119269752009214, 363900507324986190, 387366711482182965, 391780326366604574, 425693588313252510, 429417281318983888, 453006947311456489, 453072987297950756, 486367977793048242, 493682414535716733, 524116760835285943, 595414230988866179, 633133584084517740, 712014259844405000, 809700967519678458};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<long> money = {1, 2};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {500000000000000001, 500000000000000002};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<long> money = {1, 21276595744000001, 42553191488000001, 63829787232000001, 85106382976000001, 106382978720000001, 127659574464000001, 148936170208000001, 170212765952000001, 191489361696000001, 212765957440000001, 234042553184000001, 255319148928000001, 276595744672000001, 297872340416000001, 319148936160000001, 340425531904000001, 361702127648000001, 382978723392000001, 404255319136000001, 425531914880000001, 446808510624000001, 468085106368000001, 489361702112000001, 510638297856000001, 531914893600000001, 553191489344000001, 574468085088000001, 595744680832000001, 617021276576000001, 638297872320000001, 659574468064000001, 680851063808000001, 702127659552000001, 723404255296000001, 744680851040000001, 765957446784000001, 787234042528000001, 808510638272000001, 829787234016000001, 851063829760000001, 872340425504000001, 893617021248000001, 914893616992000001, 936170212736000001, 957446808480000001, 978723404224000001};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {63829787232000001, 74694431899234042, 85106382976000001, 106382978720000001, 127659574464000001, 148936170208000001, 170212765952000001, 191489361696000001, 212765957440000001, 234042553184000001, 255319148928000001, 276595744672000001, 297872340416000001, 319148936160000001, 340425531904000001, 361702127648000001, 382978723392000001, 404255319136000001, 425531914880000001, 446808510624000001, 468085106368000001, 489361702112000001, 489361702112000002, 499773653220765959, 510638297856000001, 531914893600000001, 553191489344000001, 574468085088000001, 595744680832000001, 617021276576000001, 638297872320000001, 659574468064000001, 680851063808000001, 702127659552000001, 723404255296000001, 744680851040000001, 765957446784000001, 787234042528000001, 808510638272000001, 829787234016000001, 851063829760000001, 872340425504000001, 893617021248000001, 914893616992000001, 936170212736000001, 957446808480000001, 978723404224000001};
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21276595744680853, 21729289271163424, 22191614574805199, 22663776587035097, 23145984599525205, 23638452356961912, 24141398151790888, 24655044920977929, 25179620344828523, 25715356947909981, 26262492202120831, 26821268631953189, 27391933921994747, 27974741026718039, 28569948282605657, 29177819522661096, 29798624193356013, 30432637474065716, 31080140399045837, 31741419982004259, 32416769343323499, 33106487839989956, 33810881198287615, 34530261649315011, 35264948067385543, 36015266111372469, 36781548369061245, 37564134504573187, 38363371408925808, 38500769568551354, 39179613353796570, 40013222148558199, 40864567300655182, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<long> money = {999999993572827194, 999999992827919077, 999999999488998000, 999999998021439915, 999999995755721425, 999999991288741733, 999999992720656741, 999999995123739265, 999999994985627721, 999999998297925669, 999999994981472120, 999999998590054757, 999999993539249894, 999999993235121805, 999999990184418523, 999999998710143652, 999999994935729290, 999999994362390237, 999999994524261628, 999999995680661530, 999999999488615029, 999999990836023691, 999999996104819858, 999999990093681952, 999999994173085780, 999999992671250386, 999999996705633729, 999999990181973321, 999999994199708674, 999999997437452185, 999999999592566929, 999999994488449747, 999999990564063949, 999999995777429632, 999999995435219034, 999999997194169008, 999999999596427889, 999999999364854798, 999999995103085304, 999999991036081419, 999999990947755040, 999999998265629768, 999999990628016534, 999999997466022127, 999999991805924394, 999999992667667697, 999999995369524618};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 468085106382978724, 531914893617021278, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999599999959999, 999999949999999999, 999999991999999999, 989999999999999999, 999999999999992999, 999999967999999999, 999999993999999999};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<long> money = {908714615084252808, 984445845370040009, 936325036412343314, 948468617295986876, 904896431635418057, 912506953522927070, 909412140591858350, 936307069473459616, 929189096149569519, 933863887171383920, 995441230334988209, 934090213496473184, 981783000577365520, 959262977081902551, 941287225721172381, 977588028713822896, 962281798998930748, 983907814175577633, 979686227978385457, 967012486719800351, 949370126691538776, 979735012406350081, 945630362123398978, 983098015231653219, 973145085290711841, 946043996804701261, 993098308119094994, 945752570497005459, 905160330387196812, 920663197827905150, 918905114957583317, 926225416393917099, 930863313785650265, 903667440993937203, 949432893794647195, 980544366650934796, 917177495278569741, 921331411008340050, 943173607218225437, 991048086535270649, 972778849682405493, 936202284880194389, 959010095602683791, 951538871826838758, 902543760594068310, 978329591902374309, 499999999997007579};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {934090213496473184, 936202284880194389, 936307069473459616, 936325036412343314, 938530644744422626, 941287225721172381, 943173607218225437, 945630362123398978, 945752570497005459, 946043996804701261, 947861083994367627, 948468617295986876, 948825282364586762, 949370126691538776, 949432893794647195, 949786087500132497, 950741186561083868, 951538871826838758, 951710992011592103, 952625808541961025, 953545248285580231, 954418403493296255, 954736662635793373, 955210763242545756, 955983223844353467, 956734713759597048, 957487975520262091, 958153136352737516, 958769392527273005, 959010095602683791, 959262977081902551, 962281798998930748, 967012486719800351, 972778849682405493, 973145085290711841, 977588028713822896, 978329591902374309, 979686227978385457, 979735012406350081, 980544366650934796, 981783000577365520, 983098015231653219, 983907814175577633, 984445845370040009, 991048086535270649, 993098308119094994, 995441230334988209};
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<long> money = {};
    long jackpot = 235325235;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<long> money = {1, 5, 3, 5, 3, 5, 4, 10000000000, 10000000, 100000000, 100000000000000};
    long jackpot = 100000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {9100000919090911, 9100000919090911, 9100000919090911, 9100000919090911, 9100000919090911, 9100000919090911, 9100000919090912, 9100000919090912, 9100000919090912, 9100000919090912, 9100000919090912};
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<long> money = {};
    long jackpot = 999999999999999999;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<long> money = {};
    long jackpot = 500000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<long> money = {446744073709551616, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1023512845984713242, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243, 1023512845984713243};
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<long> money = {900000008100009894, 900000008100009961, 900000008100005447, 900000008100004827, 900000008100026299, 900000008100028703, 900000008100014771, 19170, 900000008100016827, 900000008100004664, 900000008100019718, 900000008100000491, 900000008100011538, 900000008100003902, 900000008100017421, 900000008100012382, 900000008100000153, 26501, 900000008100026962, 900000008100011942, 900000008100019895, 900000008100000292, 900000008100023281, 900000008100019912, 900000008100017673, 900000008100024464, 900000008100023811, 900000008100028145, 900000008100014604, 900000008100001869, 15725, 900000008100011478, 900000008100005436, 42, 900000008100025667, 900000008100029358, 900000008100017035, 6335, 900000008100021726, 900000008100005705, 900000008100030333, 18468, 900000008100031322, 900000008100002995, 900000008100032391, 900000008100015141, 900000008100018716};
    long jackpot = 999888777888999777;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {15725, 18468, 19170, 26501, 214782387844309698, 785106390044696456, 900000008100000153, 900000008100000292, 900000008100000491, 900000008100001869, 900000008100002995, 900000008100003902, 900000008100004664, 900000008100004827, 900000008100005436, 900000008100005447, 900000008100005705, 900000008100009894, 900000008100009961, 900000008100011478, 900000008100011538, 900000008100011942, 900000008100012382, 900000008100014604, 900000008100014771, 900000008100015141, 900000008100016827, 900000008100017035, 900000008100017421, 900000008100017673, 900000008100018716, 900000008100019718, 900000008100019895, 900000008100019912, 900000008100021726, 900000008100023281, 900000008100023811, 900000008100024464, 900000008100025667, 900000008100026299, 900000008100026962, 900000008100028145, 900000008100028703, 900000008100029358, 900000008100030333, 900000008100031322, 900000008100032391};
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<long> money = {1000000000000000000, 999999999999999999, 999999999999999992, 999999999999999973, 999999999999999936, 999999999999999875, 999999999999999784, 999999999999999657, 999999999999999488, 999999999999999271, 999999999999999000, 999999999999998669, 999999999999998272, 999999999999997803, 999999999999997256, 999999999999996625, 999999999999995904, 999999999999995087, 999999999999994168, 999999999999993141, 999999999999992000, 999999999999990739, 999999999999989352, 999999999999987833, 999999999999986176, 999999999999984375, 999999999999982424, 999999999999980317, 999999999999978048, 999999999999975611, 999999999999973000, 999999999999970209, 999999999999967232, 999999999999964063, 999999999999960696, 999999999999957125, 999999999999953344, 999999999999949347, 999999999999945128, 999999999999940681, 999999999999936000, 999999999999931079, 999999999999925912, 999999999999920493, 999999999999914816, 999999999999908875, 999999999999902664};
    long jackpot = 1234123412341234;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 361702127659574469, 638297872340425533, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 223372036854775811};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1022337203685477581, 1022337203685477581, 1022337203685477581, 1022337203685477581, 1022337203685477581, 1022337203685477581, 1022337203685477581, 1022337203685477581, 1022337203685477581, 1022337203685477582};
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1, 1, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 200000000000000001, 800000000000000001, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<long> money = {999999999999983193, 999999999717524751, 999999999377349927, 999999999015056342, 999999999855891070, 999999999529788728, 999999999898972456, 999999999542149122, 999999999541222077, 999999999992762291, 999999999176435560, 999999999884561835, 999999999215515508, 999999999925756958, 999999999885192013, 999999999862477497, 999999999558717673, 999999999983468271, 999999999176621160, 999999999856457388, 999999999103455697, 999999999525166831, 999999999735182291, 999999999001902843, 999999999182870440, 999999999868429067, 999999999802506901, 999999999595719722, 999999999106648184, 999999999494204665, 999999999045100903, 999999999363192174, 999999999436386488, 999999999898070733, 999999999419276190, 999999999295122367, 999999999641419021, 999999999375620851, 999999999871763421, 999999999215441179, 999999999469488033, 999999999889989328, 999999999448098607, 999999999382180664, 999999999600874515, 999999999843908255, 999999999643574772};
    long jackpot = 123456782345678;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<long> money = {100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000, 100000000000000000};
    long jackpot = 100000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<long> money = {100000000000000000, 200000000000000000, 300000000000000000, 400000000000000000, 500000000000000000, 600000000000000000, 700000000000000000, 800000000000000000, 900000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {300000000000000000, 395744680851063829, 400000000000000000, 500000000000000000, 600000000000000000, 700000000000000000, 800000000000000000, 900000000000000000, 904255319148936171, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<long> money = {1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000, 999999999999999999, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<long> money = {1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1000000000000000001};
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1100000000000000000, 1100000000000000000, 1100000000000000000, 1100000000000000000, 1100000000000000000, 1100000000000000000, 1100000000000000000, 1100000000000000000, 1100000000000000000, 1100000000000000000};
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<long> money = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326709, 21279590159326710, 21279590159326710, 21279590159326710, 21279590159326710};
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<long> money = {39, 5, 19, 24, 18, 27, 17, 4, 29, 29, 11, 18, 45, 29, 3, 21, 23, 22, 19, 37, 35, 38, 19, 39, 21, 2, 32, 18, 21, 7, 28, 38, 12, 25, 40, 8, 4, 10, 37, 32, 17, 47, 28, 14, 7, 10, 14};
    long jackpot = 100000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574490, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491, 2127659574491};
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<long> money = {};
    long jackpot = 100000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<long> money = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1000000000000, 10000000000000};
    long jackpot = 987987987987987987;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574217, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218, 21021255063574218};
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<long> money = {};
    long jackpot = 964536263646575662;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {964536263647075662, 999999999999999999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<long> money = {999999999999242853, 999999999832149000, 999999999698586644, 999999999663028876, 999999999340401632, 999999999839432775, 999999999608250613, 999999999995109149, 999999999964233710, 999999999973760428, 999999999526961836, 999999999999402994, 999999999996384456, 999999999673948564, 999999999607710390, 999999999881658478, 999999999829572202, 999999999962784472, 999999999324983567, 999999999831455710, 999999999316552867, 999999999049909774, 999999999917573128, 999999999883247749, 999999999805958396, 999999999293778732, 999999998930090866, 999999999742344217, 999999999915029257, 999999999978582438};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 100000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612904, 3225806451612905, 3225806451612905, 3225806451612905, 3225806451612905, 3225806451612905, 3225806451612905, 3225806451612905};
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<long> money = {};
    long jackpot = 987654321987654321;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 700000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 800000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 900000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 123456789234523454};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {800000000000000000, 860370369503660367, 900000000000000000, 963086419730863087, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 10000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190477, 476190476190478, 476190476190478, 476190476190478, 476190476190478};
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<long> money = {};
    long jackpot = 999999999999999997;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<long> money = {1000000000000000, 2, 3554354554, 42443, 23232332, 323232, 32323, 4343456, 2, 10};
    long jackpot = 100000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {10100000358232835, 10100000358232835, 10100000358232835, 10100000358232835, 10100000358232835, 10100000358232835, 10100000358232836, 10100000358232836, 10100000358232836, 10100000358232836};
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<long> money = {999999999999999936, 999999999999999927, 999999999999999906, 999999999999999970, 999999999999999963, 999999999999999982, 999999999999999986, 999999999999999903, 999999999999999995, 999999999999999932, 999999999999999994, 999999999999999988, 999999999999999921, 999999999999999957, 999999999999999942, 999999999999999932, 999999999999999944, 999999999999999949, 999999999999999911, 999999999999999964, 999999999999999921, 999999999999999942, 999999999999999916, 999999999999999929, 999999999999999995, 999999999999999933, 999999999999999932, 999999999999999963, 999999999999999917, 999999999999999912, 999999999999999952, 999999999999999934, 999999999999999922, 999999999999999951, 999999999999999952, 999999999999999962, 999999999999999981, 999999999999999903, 999999999999999988, 999999999999999902, 999999999999999902, 999999999999999998, 999999999999999902, 999999999999999937, 999999999999999938, 999999999999999999, 999999999999999916};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<long> money = {612831010312365027, 479327733408335581, 493056620595750334, 290948487205001390, 520526410537210943, 716524048578227603, 125566986962447462, 83101652373816823, 662499400371820558, 224235977730252331, 504177694945435294, 658454462843238018, 393002101612945755, 167923144372509227, 203337794102165181, 901062051329980307, 39461748641762919, 805796032207465210, 886451413203650242, 579526755572424130, 896989043206121758, 349669706399836505, 563626468515011948, 640243268357458683, 2317648653359965, 110243984736204778, 603412746969941538, 141411827470613441, 910276965319382158, 939420625704452931, 40769993426262902, 653464966497571223, 740567463002998918, 241850617162766458, 935464450210850910, 521256587780688650, 196577288581452473, 797658869016484955, 743269866686053043, 537399912713974356, 353351143152709705, 113686759009803416, 263070923803624553, 456304272733195331, 344041397563908229, 933492616393201218, 60085531332516449};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {60085531332516449, 83101652373816823, 110243984736204778, 113686759009803416, 117643987694006469, 125566986962447462, 141411827470613441, 167923144372509227, 196577288581452473, 203337794102165181, 224235977730252331, 241850617162766458, 263070923803624553, 290948487205001390, 344041397563908229, 349669706399836505, 353351143152709705, 393002101612945755, 456304272733195331, 477398648325686188, 479327733408335581, 487506754701693129, 493056620595750334, 504177694945435294, 520526410537210943, 521256587780688650, 537399912713974356, 563626468515011948, 579526755572424130, 603412746969941538, 612831010312365027, 640243268357458683, 653464966497571223, 658454462843238018, 662499400371820558, 716524048578227603, 740567463002998918, 743269866686053043, 797658869016484955, 805796032207465210, 886451413203650242, 896989043206121758, 901062051329980307, 910276965319382158, 933492616393201218, 935464450210850910, 939420625704452931};
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<long> money = {21276595744680851, 42553191489361702, 63829787234042553, 85106382978723404, 106382978723404255, 127659574468085106, 148936170212765957, 170212765957446808, 191489361702127659, 212765957446808510, 234042553191489361, 255319148936170212, 276595744680851063, 297872340425531914, 319148936170212765, 340425531914893617, 361702127659574468, 382978723404255319, 404255319148936170, 425531914893617021, 446808510638297872, 468085106382978723, 489361702127659574, 510638297872340425, 531914893617021276, 553191489361702127, 574468085106382978, 595744680851063829, 617021276595744680, 638297872340425531, 659574468085106382, 680851063829787234, 702127659574468085, 723404255319148936, 744680851063829787, 765957446808510638, 787234042553191489, 808510638297872340, 829787234042553191, 851063829787234042, 872340425531914893, 893617021276595744, 914893617021276595, 936170212765957446, 957446808510638297, 978723404255319148, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {85106382978723404, 95971027614305115, 106382978723404255, 127659574468085106, 148936170212765957, 170212765957446808, 191489361702127659, 212765957446808510, 234042553191489361, 255319148936170212, 276595744680851063, 297872340425531914, 319148936170212765, 340425531914893617, 361702127659574468, 382978723404255319, 404255319148936170, 425531914893617021, 446808510638297872, 468085106382978723, 489361702127659574, 510638297872340425, 510638297872340426, 521050248981439565, 531914893617021276, 553191489361702127, 574468085106382978, 595744680851063829, 617021276595744680, 638297872340425531, 659574468085106382, 680851063829787234, 702127659574468085, 723404255319148936, 744680851063829787, 765957446808510638, 787234042553191489, 808510638297872340, 829787234042553191, 851063829787234042, 872340425531914893, 893617021276595744, 914893617021276595, 936170212765957446, 957446808510638297, 978723404255319148, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {920170187536606471, 920242964539310091, 920315675209957288, 920388319536661572, 920460897520667510, 920533409175313455, 920605854525007035, 920678233604216173, 920750546456478411, 920822793133431350, 920894973693867014, 920967088202812966, 921039136730642972, 921111119352220014, 921183036146074384, 921226595613768977, 921254887193619560, 921326672578408502, 921398392385432902, 921470046700467823, 921541635609464061, 921613159197990377, 921684617550727619, 921756010751016523, 921827338880460790, 921898602018586763, 921969800242560763, 922040933626964822, 922112002243631196, 922183006161535666, 922253945446749212, 922324820162447141, 922395630368974291, 922466376123964319, 922537057482510502, 922607674497384792, 922678227219301149, 922748715697218389, 922819139978676934, 922889500110162920, 922959796137492141, 923030028106205240, 923100196061964376, 923170300050940411, 923240340120178284, 923310316317926849, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {3, 4, 5, 111111111111111113, 888888888888888890, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680853, 21276595744680853, 21276595744680853};
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 10, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<long> money = {1, 10, 100, 1000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {10, 100, 1000, 1000000000000001, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 41, 8467, 6334, 6500, 9169, 5724, 1478, 9358, 6962, 4464, 5705, 8145, 3281, 6827, 9961, 491, 2995, 1942, 4827, 5436};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1478, 1942, 2995, 3281, 4464, 4827, 5436, 5705, 5724, 6334, 6500, 6827, 6962, 8145, 8467, 9169, 9358, 9961, 499999999999997829, 500000000000002703, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<long> money = {999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999};
    long jackpot = 100000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 123456789123456789;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 123456789123456790, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 200255102040816328, 392857142857142858, 406887755102040817, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 100000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001, 6250000000000001};
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<long> money = {100000000000000, 150000000000000, 200000000000000, 250000000000000, 300000000000000, 350000000000000, 400000000000000, 450000000000000, 500000000000000, 550000000000000, 600000000000000, 650000000000000, 700000000000000, 750000000000000, 800000000000000, 850000000000000, 900000000000000, 950000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {56080555555555555, 56080555555555555, 56080555555555555, 56080555555555555, 56080555555555555, 56080555555555555, 56080555555555555, 56080555555555555, 56080555555555556, 56080555555555556, 56080555555555556, 56080555555555556, 56080555555555556, 56080555555555556, 56080555555555556, 56080555555555556, 56080555555555556, 56080555555555556};
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000001};
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 123123, 12, 15775, 43567};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {43567, 123123, 235294117647063876, 764705882352951911, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<long> money = {1, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 9999999999996};
    long jackpot = 10000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {10009999999996, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 999999999999999999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1234567};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100, 100000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 100, 100000000000, 225894065414214573, 382978725531914897, 391127209053870533, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<long> money = {198250198250, 102958019285125, 1205698108985125, 120598181209843, 124092484091824, 124098124098124, 12409826094634, 604398493846, 324604860386346, 3460983846346346, 34069368346098346, 340680986039846, 3406304968039486, 3460980698346, 9847039846, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 501982, 5102985, 12509812, 120598125, 125098, 125098, 125098125, 98215, 125098};
    long jackpot = 925091825091825900;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {24355284748561756, 24368163389808644, 24381024956938484, 24393869472587628, 24406696959362420, 24419507439839230, 24432300936564500, 24445077472054780, 24457837068796766, 24470579749247344, 24483305535833628, 24496014450952996, 24508706516973135, 24521381756232075, 24534040191038234, 24546681843670451, 24559306736378030, 24571914891380778, 24584506330869043, 24597081077003754, 24609639151916458, 24622180577709364, 24634705376455375, 24647213570198133, 24659705180952054, 24672180230702368, 24684638741405159, 24697080734987399, 24709506233346994, 24721915258352815, 24727001330995886, 24734307831844742, 24746683975633699, 24759043711501696, 24771387061201862, 24783714046458488, 24796024688967063, 24808319010394314, 34069368346098346};
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<long> money = {453591531836432098, 53853763163179767, 159187617879761276, 52349581136818441, 651655174785065792, 763256760700587809, 736074047130443878, 492475180464420493, 774752965697895278, 181753480466568951, 847515020305075453, 819239139782997510, 462866797038575660, 226780237445960924, 112066345846364722, 11553001992373233, 567297849501903709, 238465093907943699, 613047531664907630, 606884089454858980, 885919731635926164, 990285258965634320, 56405986232843985, 999635565307324637, 985951455484942988, 729128360493322521, 117843635810252496, 641253489875817120, 623091750830298988, 359266075449868070, 38102430483689444, 434537987183667620, 298018769954851041, 118014076033427078, 107741891337671427, 893875226049692816, 62978813666631880, 539766374715650531, 124704687448470636, 282717974341597636, 685466390211400683, 104268119372730132, 876210417451998817, 345374433442664899, 181320058030213145, 348832489368500087, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {52349581136818441, 53853763163179767, 56405986232843985, 62978813666631880, 104268119372730132, 107741891337671427, 112066345846364722, 117843635810252496, 118014076033427078, 124704687448470636, 159187617879761276, 161352678903760131, 181320058030213145, 181753480466568951, 226780237445960924, 238465093907943699, 282717974341597636, 298018769954851041, 345374433442664899, 348832489368500087, 359266075449868070, 434537987183667620, 439476099135770734, 448826654436531813, 453591531836432098, 462866797038575660, 492475180464420493, 539766374715650531, 567297849501903709, 606884089454858980, 613047531664907630, 623091750830298988, 641253489875817120, 651655174785065792, 685466390211400683, 729128360493322521, 736074047130443878, 763256760700587809, 774752965697895278, 819239139782997510, 847515020305075453, 876210417451998817, 885919731635926164, 893875226049692816, 985951455484942988, 990285258965634320, 999635565307324637};
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<long> money = {62687627462547234, 73647265825738888, 87367364763734354, 67362647364734344, 17, 73647637567534767, 35235353454555432, 987374, 48363764763764376};
    long jackpot = 999999999999999999;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {160923517911510753, 160923517911510754, 160923517911510754, 160923517911510754, 160923517911510754, 160923517911510754, 160923517911510754, 160923517911510754, 160923517911510754};
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<long> money = {1, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 900000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {923404255319148937, 976595744680851064, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 999999999999999999;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680852, 21276595744680853, 21276595744680853};
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 946744073709551615, 473372036854775808, 236686018427387904, 118343009213693952, 59171504606846976, 29585752303423488, 14792876151711744, 7396438075855872, 3698219037927936, 1849109518963968, 924554759481984, 924554759481984};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1849109518963968, 3698219037927936, 7396438075855872, 14792876151711744, 29585752303423488, 59171504606846976, 118343009213693952, 216881276595153260, 236686018427387904, 473372036854775808, 784967832923810708, 946744073709551615, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<long> money = {999447424886730715, 973770958218364115, 978788812617974411, 988408539744627854, 968958991586690514, 967532930774249996, 964895838105194218, 964648305478725176, 983796132179122731, 946885990148323284, 967742253043157749, 995971092260516718, 981939331434126298, 972295233381489532, 1000000000000000000, 956112871934650041, 981934666111911171, 962448307666531226, 996260537888363605, 985355132515237189, 995891026905309305, 1000000000000000000, 986839423625236825, 987591558622340559, 987227448549661814, 986368798366367618, 974702423330384385, 944979029261191886, 990661692248163666, 975258725185417617, 972606602211131245, 975159412727003412, 972405040093698774, 990434992077762501, 960118759784080652, 979015557471430256, 994278970875450044, 961847802951285120, 976004565326684691, 989363819419159167, 990626368119245121, 967105951088435126, 994212999640268467, 991833081703991397, 985131324124860920, 958815940684492957, 974325335630959932};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<long> money = {};
    long jackpot = 1;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 999999999999999};
    long jackpot = 999999999999999;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6911298544107, 23255813953490, 23796646836129, 24350057227667, 24916337628310, 25495787340597, 26088712627587, 26695426874740, 27316250755548, 27951512401026, 28601547573143, 29266699842286, 29947320768851, 30643770089056, 31356415905081, 32085634879618, 32831812434958, 33595342956701, 34376630002205, 35176086513885, 35994135037463, 36831207945311, 37687747664970, 38564206912992, 39461048934225, 40378747746648, 41317788391919, 42278667191731, 43261892010144, 44267982522007, 45297470487635, 999999999999999};
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<long> money = {1000000000000000000, 1, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<long> money = {900000000000097711, 900000000000098253, 900000000000096868, 900000000000095547, 900000000000097644, 900000000000092662, 900000000000092757, 900000000000090037, 900000000000092859, 900000000000098723, 900000000000099741, 900000000000097529, 900000000000090778, 900000000000092316, 900000000000093035, 900000000000092190, 900000000000091842, 900000000000090288, 900000000000090106, 900000000000099040, 900000000000098942, 900000000000099264, 900000000000092648, 900000000000097446, 900000000000093805, 900000000000095890, 900000000000096729, 900000000000094370, 900000000000095350, 900000000000095006, 900000000000091101, 900000000000094393, 900000000000093548, 900000000000099629, 900000000000092623, 900000000000094084, 900000000000099954, 900000000000098756, 900000000000091840, 1, 900000000000097376, 900000000000093931, 900000000000096308, 900000000000096944, 900000000000092439, 900000000000094626, 900000000000091323};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {42553191489361704, 957446808510638298, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<long> money = {1000000000000000000, 999999999999999999, 999999999999999998, 999999999999999997, 999999999999999996, 999999999999999995, 999999999999999994, 999999999999999993, 999999999999999992, 999999999999999991, 999999999999999990, 999999999999999989, 999999999999999988, 999999999999999987, 999999999999999986, 999999999999999985, 999999999999999984, 999999999999999983, 999999999999999982, 999999999999999981, 999999999999999980, 999999999999999979, 999999999999999978, 999999999999999977, 999999999999999976, 999999999999999975, 999999999999999974, 999999999999999973, 999999999999999972, 999999999999999971, 999999999999999970, 999999999999999969, 999999999999999968, 999999999999999967, 999999999999999966, 999999999999999965, 999999999999999964, 999999999999999963, 999999999999999962, 999999999999999961, 999999999999999960, 999999999999999959, 999999999999999958, 999999999999999957, 999999999999999956, 999999999999999955, 999999999999999954};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1250000000000000000, 1250000000000000000, 1250000000000000000, 1250000000000000000};
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 152432505321556881, 276595744680851065, 282480760525124492, 288490989472467566, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<long> money = {999999999999999927, 999999999999999906, 999999999999999970, 999999999999999963, 999999999999999982, 999999999999999986, 999999999999999903, 999999999999999995, 999999999999999932, 999999999999999994, 999999999999999988, 999999999999999921, 999999999999999957, 999999999999999942, 999999999999999932, 999999999999999944, 999999999999999949, 999999999999999911, 999999999999999964, 999999999999999921, 999999999999999942, 999999999999999916, 999999999999999929, 999999999999999995, 999999999999999933, 999999999999999932, 999999999999999963, 999999999999999917, 999999999999999912, 999999999999999952, 999999999999999934, 999999999999999922, 999999999999999951, 999999999999999952, 999999999999999962, 999999999999999981, 999999999999999903, 999999999999999988, 999999999999999902, 999999999999999902, 999999999999999998, 999999999999999902, 999999999999999937, 999999999999999938, 999999999999999999, 999999999999999916, 1};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {999999999999999902, 999999999999999903, 999999999999999903, 999999999999999906, 999999999999999911, 999999999999999912, 999999999999999916, 999999999999999916, 999999999999999917, 999999999999999921, 999999999999999921, 999999999999999922, 999999999999999926, 999999999999999927, 999999999999999929, 999999999999999932, 999999999999999932, 999999999999999932, 999999999999999933, 999999999999999934, 999999999999999934, 999999999999999937, 999999999999999938, 999999999999999942, 999999999999999942, 999999999999999944, 999999999999999945, 999999999999999949, 999999999999999951, 999999999999999952, 999999999999999952, 999999999999999957, 999999999999999962, 999999999999999963, 999999999999999963, 999999999999999964, 999999999999999970, 999999999999999981, 999999999999999982, 999999999999999986, 999999999999999988, 999999999999999988, 999999999999999994, 999999999999999995, 999999999999999995, 999999999999999998, 999999999999999999};
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<long> money = {};
    long jackpot = 76923076923076922;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<long> money = {};
    long jackpot = 1004700;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<long> money = {};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<long> money = {10000000000000000, 10000000000000000, 10000000000000000, 10000000000000000, 10000000000000000, 1, 1, 1, 1, 1, 1};
    long jackpot = 10000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 495867768595042, 4545454545454547, 4958677685950414, 10000000000000000, 10000000000000000, 10000000000000000, 10000000000000000, 10000000000000000};
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<long> money = {99999999999999999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1005555555555555555, 1005555555555555555, 1005555555555555555, 1005555555555555555, 1005555555555555555, 1005555555555555555, 1005555555555555555, 1005555555555555555, 1005555555555555555, 1005555555555555556, 1005555555555555556, 1005555555555555556, 1005555555555555556, 1005555555555555556, 1005555555555555556, 1005555555555555556, 1005555555555555556, 1005555555555555556};
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    vector<long> money = {1, 2, 3, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 999999999999990999, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    vector<long> money = {270271313907812966, 605532484136238257, 505158751528519363, 760009117728813644, 915340320367800125, 742484871951111801, 96417152089065184, 291901311352542928, 418193985852360643, 359095389754566604, 76251446561525544, 663252330974741847, 133572318221942462, 162241868416632376, 498250396484131800, 974500130821344765, 623094775616188131, 697438099146567073, 828659698705017607, 571630320010764936, 190715277707112759, 853710234771751307, 669169086208088850, 27703530169183327, 325011545024706075, 407248339723720237, 898227170317521981, 853703895938497847, 44387575851104601, 689401721853533810, 84311300238999289, 292394695663655003, 216500493338770724, 718806684819276853, 994841248283066686, 416929305158073770, 742043271175676434, 709539821902132462, 84055106315724214, 423365639873846359, 41037354686222742, 219571360257817505, 591497930361273152, 135184206222042953, 246567214983651210, 177954152910042623, 382751139026140767};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {76251446561525544, 84055106315724214, 84311300238999289, 96417152089065184, 133572318221942462, 135184206222042953, 162241868416632376, 177954152910042623, 183503813449410653, 190715277707112759, 216500493338770724, 219571360257817505, 246567214983651210, 270271313907812966, 291901311352542928, 292394695663655003, 325011545024706075, 359095389754566604, 382751139026140767, 407248339723720237, 416929305158073770, 418193985852360643, 423365639873846359, 460211178434240886, 469413468822859131, 498250396484131800, 505158751528519363, 571630320010764936, 591497930361273152, 605532484136238257, 623094775616188131, 663252330974741847, 669169086208088850, 689401721853533810, 697438099146567073, 709539821902132462, 718806684819276853, 742043271175676434, 742484871951111801, 760009117728813644, 828659698705017607, 853703895938497847, 853710234771751307, 898227170317521981, 915340320367800125, 974500130821344765, 994841248283066686};
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    vector<long> money = {1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047619, 1047619047619047620};
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    vector<long> money = {5465453148153, 5148511, 12564685132016, 121, 215, 352416581531, 211, 151354631, 1212, 13145313, 151, 12, 1, 21548555555, 999999999999999, 56555555, 222222222, 3232, 32132, 5615555555555, 777777777777, 99999999, 88888888888888, 2222222222222222, 1111111111111, 333333333333333, 33333222222222, 1213216546574, 1231468531, 2534135132, 2121232151, 5121321323123};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    vector<long> money = {};
    long jackpot = 990000010000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    vector<long> money = {};
    long jackpot = 2;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {};
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    vector<long> money = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    long jackpot = 1000000000000000000;
    TheJackpotDivOne* pObj = new TheJackpotDivOne();
    clock_t start = clock();
    vector<long> result = pObj->find(money, jackpot);
    clock_t end = clock();
    delete pObj;
    vector<long> expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 152432505321556881, 276595744680851065, 282480760525124492, 288490989472467566, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000, 1000000000000000000};
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22675302&rd=14514&pm=11097
********************************************************************************
#include<vector> 
#include<string> 
#include<algorithm> 
#include<cmath> 
#include<utility> 
#include<set> 
#include<queue> 
#include<map> 
#include<cstdlib> 
#include<cstdio> 
#include<cstring> 
#include<iostream> 
#include<sstream> 
#include<climits> 
#include<sys/time.h> 
using namespace std; 
 
#define REP(i,a,b) for(i=a;i<b;i++) 
#define rep(i,n) REP(i,0,n) 
 
#define ll long long 
 
class TheJackpotDivOne { 
public: 
vector<ll> find(vector<ll> in, ll rest) { 
  int i,j,k,n; 
  int step = 0; 
  ll mean, md, add; 
 
  n = in.size(); 
 
  while(rest){ 
    sort(in.begin(), in.end()); 
    if(in[0]==in[n-1]){ 
      add = rest / n; 
      rep(i,n) in[i] += add, rest -= add; 
    } 
     
    mean = md = 0; 
    rep(i,n){ 
      mean += in[i] / n; 
      md   += in[i] % n; 
    } 
    mean += md / n; 
 
    add = mean+1 - in[0]; 
    if(rest < add) add = rest; 
    in[0] += add; rest -= add; 
  } 
 
  sort(in.begin(), in.end()); 
  return in; 
} 
 
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/