/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11056
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class P8XMatrixTransformation {
public:
    string solve(vector<string> original, vector<string> target);
};

string P8XMatrixTransformation::solve(vector<string> original, vector<string> target) {
    string ret;
    return ret;
}


int test0() {
    vector<string> original = {"01", "11"};
    vector<string> target = {"11", "10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> original = {"0111", "0011"};
    vector<string> target = {"1011", "1100"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> original = {"0"};
    vector<string> target = {"1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> original = {"1111", "1111", "0000", "0000"};
    vector<string> target = {"1111", "1111", "0000", "0000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> original = {"0"};
    vector<string> target = {"0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> original = {"0000000000000000000001000010010000000", "0000000000000010000000000000000010000", "0000000010000000000000000000000000000", "0001000000000000001000000000001000000", "0000001000000000000000000000000000010", "0000000000000000010100000001000100000", "0000100000001010001000000000000000000", "0100000000100010000010000101000000000", "0000000000000000100000000000000100000", "0000000000010000001100000010000000000", "0010000000000000000000000100010000000", "0001000000000000000000100000000000000", "0000000000000000000000010100000000010", "0110000000010010001000000000000001100", "0000000000000001000000000000000001000", "0000000000000010000000000000100100000", "0000000000000000000000011000000000001", "0000100100011000000000001000000000000", "0000010000000010100100000000000000000", "1000000000010100000000000000000000110"};
    vector<string> target = {"1000000010000000010001000000000000000", "0000000000010100000100000000000000001", "0000000000000000000000001000000000000", "0000010000000000100000000000000000001", "0000000000000100001001000000100000100", "0000000000000000010000101000001000010", "0010000100000000000000000000000010000", "0001010000000000000000000000000100000", "0000000000000000000010000000000000000", "0010000000000000001100000000000000000", "0000000000000000000000000000000000000", "1000011000000001000000011000000000000", "1000000000001010000001000000000000001", "0000010100000001000010000100100000000", "0010000000000000000000000001000000000", "1000000000000000000000000000100000000", "0000000100100000100000100001010000000", "0010000000000101000000000010000000000", "1000000000000000000000000000001000000", "0000000000110000000000100000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> original = {"11000001000", "11100000010", "11011101101", "00011000110", "01101100001", "01010001100", "10100010110", "11101100101", "01001001000", "01010000001", "00111011010", "00011110001", "01111100110", "10110110100", "11110000100", "01110010000", "11001000001", "10111000001", "01111110111"};
    vector<string> target = {"01111100011", "11000110011", "00000010011", "11000011000", "00001100111", "10101111001", "01111010110", "10001001000", "00011010100", "10000001110", "01000100111", "01100011111", "00000011001", "11111100000", "00100001001", "11011011011", "10111001110", "01110110110", "00001000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> original = {"111111111111111111011111011111111111111111111111", "111111111111111111111111011111111111111111111101", "111111111111110111111111111111111111111111111110", "111111111111111111101111111111111111111111111101", "111111101111011110111111111111111111111011111111"};
    vector<string> target = {"111111111111111111111111111111111111011111111111", "111111111111101111111111111111101111111111111111", "111111111111111111011111011111111111111111111111", "111111111111111111111111111111111111011111111011", "111111111010111111110101111011111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> original = {"00001011100001011011100101000101000110000010011", "10101110111001100010100010000010010000111000001", "01011000011000000001000101001000001000000110001", "11010000100000011100011110000101100001101001000", "00001010011100010000000110000010110100011110111", "11000100100101000000001000000001100101010100011", "00101000011100000010000100000010010001100001011", "01000100111110110000001110000001000000000000000", "00010100000101100011010100010000001010100100010", "11001110000010001011001000001000000001000111100", "00101101010011110010001100000010010100100000111", "10010101100000110100010100110000000001110110100", "01000011001010100000001010100110100010011010011", "01001100101000010001110000110000100101101001000", "00100001000010010001100010010000111000010100110", "00010001101011000010110101000010110000010100000", "01000100010100000001100100101110010010100000001", "00000000000110001000001010100001100000011110010", "11001010101000101010000110000000100110101011110", "00000111010000000011100101010100100001000000101", "00101100110000111110011000001110010111000110000", "00000000100001101000100000010000110000100011100", "11100000001000000000000000010000010101101000000", "00000100111010100101110011110010011100110000001", "00101001011000110000000001100110101000100010101", "00100111110111100001110001011001000001110001001", "01011001000001101010110011001010111011000001010", "00001000000000011011110010101010001010000010010", "01100000000010001000110000000000110001000011000", "00100100000010001010100000100011101000001001011", "01111000100001111000110001100101011000000000001", "11100100010110111000001000100001000110000001000", "01101100001010010001101010010100011100100010100", "11110000100000001000001011100000100001111000000", "10100000000110110100101011010100000010001001000", "00111010110000000101000000100100000010000100000", "10011000000001000000010000100000111000010001000", "10000111110000000010010010010001001001000000000", "10000011000001001100010000010001100011010000001", "00110010000001000011010100111100001010000100100"};
    vector<string> target = {"11100001000011001000000110000000101100100001010", "10010001010100000101110001010100100001101000010", "00110000100000110000001110101000001001001001010", "10100011000000000000001000001100000001100000010", "11000100010010111000110101001001010010000010001", "01011000110000100100001010001010010101011000010", "10100000100010000010110000000110100000101000111", "10001010100000110100000110001111000010001111101", "10011001011010010001001100111010011101111010101", "01101000001000011000101001110100010000010000000", "10100010011100101110000000001001101001010100011", "00010101010010101000000100000110001000000000001", "10110001010000101101000111001101011100010001000", "01110011011000000000000100001000001010000000000", "11110100011000000011100110101101001001000110010", "11011000101010000001001000100101110111110000110", "11000110010010011001011000010010011111101000011", "10000010000000000000010000010000000100010001101", "00000100000010100100010110110000010011001000000", "01010001100100001100000000001100000100010100011", "01000001000101000000101000000010011011000100000", "00101000000110101001001000100010000010001010000", "00110000011100110000001100000110000011100001011", "00000100010010100100001100000100010001010000001", "10010001100100010000000000100010001100001010010", "01110000011011011110011110001010001001100001010", "00000000000101000000000000011101101101100000110", "00100010100100000001101010010101000011100001010", "11010011001100010000001100101101110001100001000", "00000100000001001000101101101110110100010100001", "10000100000000010010000010000000000001100010010", "01000000111001010000011010000000111010001001011", "10000000011000101000100000110111000010110110111", "11010010100010100101011001100111000110000000000", "01110000110010010000100001000000000000000001000", "01000011100010100100001000000110110000101000100", "01110000000011110101001011001011100001000110000", "11011000000011001101101100100010010110000111100", "11101001000000000000110010001000000010010101000", "01100000111010100100100111001000110001000001110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> original = {"1", "0", "1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "0", "0", "1", "0"};
    vector<string> target = {"1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> original = {"100100111100110110001000101110010011010110011", "100000101011011111111101011110001111111110001", "110110110111110111111101110111101101111111101", "011100101111111111100101111110111111001000010", "101110101111111110011100001100110111111111011", "111110111101110011111111010111111101111100001", "111011110100101101011111001100110011101110110", "001110111111111111111001110111110101111010101", "111100011111101011011101001111100011100111011", "011111101100001110111111110110011100110010111", "110111011001110111111111110001110111111111110", "010110111000101101101101110011111101011111011", "011101111101111011111101001111111101011010111", "110111101101111110011111011011110110010000011", "101111101011111101010111100101100011101111110", "111011011111011110111100101111101111011110111", "101110111111111101111111101110011111110001000", "011000111010011111111010111111101111111100110", "101110101011000111111011110101110101111110110", "111111011010111110001110011101100001011001110", "111101111111111110001110001100110111001101110", "110110001111011111001101111101110110110111011", "110111111101111111111111100111111110110110111", "111011100111111011111111011011110101011111111", "111000011101110101111101111101111101110111111", "110111100111101011010100101111101100011101110", "010111110111110010011111111111100101101101111", "111011010111111110011110111111001011111010011", "101101010111111010111111111111101110010111111", "110111111111111111100011110101111011110110111", "011011111100111110110011011111101111011111101", "100010110001110001011001110111110111111111111", "011010101111011011111111101011111011111111001", "100010110110001111011001010111110111010111101", "110111111101110100110010001011101111101110010", "111111111101010011110111011111101010101111011", "111111111111010110110111111110100011111111111", "001110110001011101101111111111111111111011100", "111011111111011001111101111010111111011110111", "011110111100101110111011101110111111111110111", "110110111111000111010111000111011101111011011", "101111111111111111011110001111011110101111111"};
    vector<string> target = {"101101101011011010011100011100111110011111101", "111111111111110111111111100100111111100110101", "111011110011100111111101111111111111111111111", "110111100110000111010001101111101011110110110", "111010010111110011111011111111100101111111100", "110001011111111111101011011110101000111111111", "111111110111011111000101111101111111111110111", "111101111011011011100110001101111010111111111", "111111111110001111111111110111101111010011100", "010001110111111111001010110111100011111111111", "101111011111011110111100111111111111011110100", "010010110110111110100011111011111011101111111", "111111011101110011111110101110001110011101110", "101111001111110101111111011101111111111111011", "110110011001111101111110001110101110101111100", "100111110011100111011110111010101111101110110", "111111110011001111110101111110111110011011100", "111111111111101110111111011110111111010111101", "101110110111011101111101111011011010010110011", "010011010110110111110111011101011001110110111", "100000110111111101011000111110001011101011010", "110011111111110101111110111101110110111010110", "111100011101110111111110101111111111011111111", "111111111111111101011111100110111111111101111", "111111011111111001111111111110011111101101111", "111011010111111110101011111010011110101111000", "110111111001101110111001111111101010011111010", "111111111101101101101101100101011101101011011", "101100010101111111111111101011111101111111111", "111100111011110110111111000101011101111111111", "101101101101111011111111110011111111110111111", "110001111110111110101001111110101111101111111", "111111111111011001110110010111111111110011010", "111011111111101111111100111111011111011001111", "111101111110111011101011110101101111100101011", "100010101001010011111110110110111101110110110", "010001101111111100111111111101000110010111100", "110111110110001111111111111111010011101111111", "110110101011101011110111110011101110111111101", "011111110010100010101111111111101110111111110", "111111111111110001100111001110110010111001101", "110111011001110011111111111011111100110111110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> original = {"000011000101000001110001", "100001000111100111100111", "001000101001100001011010", "010100111001001010110001", "100011010010000011000000", "111001000010110110011100", "100000010011111100110011", "010000111001001101000100", "111110010110001011100001", "110010000000111001000001", "001000011101101100000100", "001110101001000001101111", "101110110000000001101011", "100101000001001000011000", "110100101110100001010000", "000101001001101000110010", "011111101010000010111010", "000110110000000110001100", "000100011000000010110001", "101010010000110010000000", "100100001100100000001110", "001000010010110100001101", "000011110001110000000010", "010100101000111101011000", "010100010110111001110001", "100001001111010110011000", "011110001010100110000100", "110110111100010101000010", "010100011110101110001110", "010101110000111100010101", "100011110101001001001001", "001000011001000010010110", "001010000010011011110101", "100010001000010010010001", "010101000001100110110001", "101000100000010001011010", "010111000000001100010111", "101101111001001000001000", "001101110000100011100001", "000010000001010110110011"};
    vector<string> target = {"010011110100001111011011", "100100001101110100100010", "100100100100101100001011", "110110010110111110010000", "001000001111100101010110", "010001100000111010111111", "100011000001111000010011", "000011101111001000001111", "100111111000111001010110", "010101000110100011110111", "101010000100101011101011", "111001111001000111000111", "011000100001000000101000", "101101001111101011001010", "010011111110111111100100", "010110011000101010111011", "100110101010111110111110", "101101011000110100001111", "101111001001010010000010", "100110011100000100101100", "100011000111110000000101", "110110101001110000111101", "010110111000011100111010", "101110111001000101101110", "001011001111010110011010", "110111101111100101101000", "000111111010000111111101", "110111001001111001110101", "011010010001001110101110", "101000100111101100001011", "111110111101101111110010", "001011010100101010101101", "001100101001110011000111", "101011001101010110100100", "111101101110011101100000", "100100101101100101100111", "100110111011011001110001", "100110010011000011101111", "110110110100011000000110", "111010011110010100001101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> original = {"110111101", "101111101", "111110111", "101111011", "111110110", "111001001", "101111111", "110110110", "110110111", "101111011", "111111100", "011101011", "101110111", "111010101", "011011111", "111111011", "110111111", "011010011", "111100110", "110010110", "111111101", "111010011", "111101111", "111011010", "010111011", "100011011", "101011101", "111111111", "011010111", "110011011", "011110010", "010100111", "101111110", "111101111", "110111111"};
    vector<string> target = {"111111111", "110111100", "111111111", "111111111", "111110110", "111111110", "111111011", "111111111", "111111111", "111111111", "111111111", "111111111", "111111011", "111111111", "111011111", "111111111", "111111111", "111111111", "101111111", "111111111", "111111111", "111111101", "111111111", "101111111", "110111011", "111111111", "111110111", "101111111", "111111111", "011111110", "111111101", "111110111", "101110111", "111101111", "111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> original = {"111111111011111", "111111111111111", "011111111111111", "110111011111111", "110101111111111", "111111111111110", "111111111111111", "111111111111111", "111111111111111", "111111111111111", "111111111111111", "111111111111111", "111111111111111", "111111111111111"};
    vector<string> target = {"100001110000100", "001001010100100", "010000111110000", "100010011010101", "001011100001000", "101101010000011", "111101100100001", "111001101010001", "100001011000000", "001010100010010", "010010101111001", "001101000000100", "100000100100111", "100100000001001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> original = {"1110011111011110100011", "0010001101010001011100", "1101001111100000000100", "0010000100101100110011", "1111011110110000001001", "1011100000011111111011", "1011110000100010001111", "1110001001011111110001", "1110101101000100110011", "1101001101101101001010", "1111111011011011000110", "1101110100101100111101", "0100101111111111100110", "0101101101111100011101", "1001011110011000110111", "0101011110010001000100", "1110011010011111001011", "0001101110000101000011", "1001110011010100111000", "1010111111011111010011", "1110101010011101011011", "1101000100010010000001", "1011010001000100010010", "1001101101101110001111", "1000011100100011100110", "1010100001101001010110", "1011010111111001011111", "0111010000011100101111", "0110111001001000010110", "1001000111010011100110", "1110101110100111101000", "1010001110001010011010", "1110110101101010010110", "1110110111000101111110", "0101101110101100100000", "1000100011100000001000", "1000101010000000001100", "1100010011010100111101"};
    vector<string> target = {"1011011101110000101100", "1010001001010111011000", "0110101010110000000111", "0011110010111111010101", "1111000101110010001100", "0011010100011010011011", "1100011010000000111100", "1011100111011110110010", "1101101001110110111000", "0110110011010011101001", "0101000011111011100110", "0101011001100001000000", "0100000100100001111000", "0001111100100110111001", "0010010010000011110011", "1100001110111111001011", "0101111010001101010000", "0001011011000101101000", "1101100000101110010010", "1000111111111101111000", "0100101111101111111001", "1001000010000110100111", "1110110101100100101000", "0101101001110100000110", "1000101001110011110101", "0010010100001110011001", "0110011111100000000011", "0110110001001101101111", "0110011011101001011110", "1000100100000001000011", "0010000100000111001011", "0011100110111010001011", "1100111001100000110111", "0100101000100011111010", "0000111110011101010011", "1100111111001110110111", "0001001011100010010000", "0110110111100001000100"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> original = {"01000000000000101100101100", "00010000000010001010000000", "11001000100000000001001000"};
    vector<string> target = {"10101010011111010001111111", "01110011111101100001101110", "11110111001111111000110110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> original = {"1110111101", "1111010110", "1110111100", "1100111101", "0110100111", "1001111011", "0111011100", "1001000000", "1011111111", "0100010010", "1010110011", "1011010101", "1111011001", "0011101111", "1101100111", "0000101000", "1000101101", "0000101001", "0101010110", "1111101111", "0101111000", "0010011000", "1101101111", "0111001011", "0001101010", "0110111011", "1111011011", "1010110110", "0010011000", "1011011100", "1000100100", "0010110111", "1011110011", "1111110101", "1001111010", "1001110011", "1001110111", "1101110100", "0101010101"};
    vector<string> target = {"0100010000", "1010101011", "0001000011", "0001100000", "1101010000", "0111000100", "1001100011", "0110111110", "0100001000", "1010101100", "0111010100", "0100111010", "0110111100", "0110000100", "0010011100", "0111110111", "1111011100", "1101010100", "1010101001", "1000010000", "1010000110", "1101100111", "0000010000", "0000110000", "1111010101", "1001000000", "1000110100", "0101101001", "1001100110", "0110100000", "0111011011", "0100001000", "1000011110", "0000101000", "1110000111", "0110001100", "0010001000", "0000000011", "1010101000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> original = {"0001101111101000101011100000100101111000100", "1110110001000110001000100100111000100011001", "1011100111010101010101001001100000010000111", "1010111100000011111010011011100101000001001", "0100110010001000001111100100111101101011010", "0110011101100010110111101001001101111110001", "1011111110101101110101100111110010111111110", "0101100011100101000101001111111001000001011", "1000101010110011100000111101100000011101010", "0000010110011000011101101110111001011001101", "0001101101010000001110111110000010100000100", "0011011000000101001110001110111101101111010", "1001101100111110001111100011001100101011100", "0011100111010001110110011010110010011110011", "1001110000011100100111011111100101110011101", "1111010001010100101011000110000001011011100", "1010111101100101001100100001011011010011110", "1101011011111101000010110100001101110000111", "0101000110011001100011000110011110110000111", "1111001101011001000011110100110001101110111", "0000001010100101010001111011001110100100010", "0000110100000101111100110110100111100100110", "1010101000111100111010111010110011001110011", "1100101111101111011100011001110101101001100", "0000101010011010111100001110000111011011010", "1001111100010111000001101011110010000111001", "1001001101011001100100011100010011111101110", "0101010011110110110001011101110100000100000"};
    vector<string> target = {"0110101000110010010011011100010100000100111", "1100001110111100010100111111000011101011100", "0111011011111111111101110110000110000010111", "0110100001010001110111111110000010011010100", "0101010111101100110000110011000100110001001", "1111100001011011100101010010000010001010111", "1100001111010011000100111000011111101110100", "1110000111110110101111111000000100011110001", "1010101001011110000111001111101010011111101", "1101100111101101101111010111011011101000011", "1000110110110001001010011100100111101010011", "1010010101010111111010101000000111110010000", "0001101110100001101011000000111010111110111", "0011101101101001001000110010011111001100100", "1000100011001001011010111010101100010110111", "1110110001010001111001101000111010101101100", "0111101101011101011001111001001101100101011", "0110010100101011001010011111010110010011101", "0110110100000010000101010010101011101001111", "0010110010010000110001011111110111101011000", "1100110100010001101111011110110011001001000", "1010100110011011111000110100010000111110100", "1101001101001000001001100001110000011101000", "0100100101101010110010101100001010011111011", "0011110100100000110010110101001001011001000", "1100010100101111011011100011101011100100111", "1010001110100010011001011111100001000001011", "1110111001001001010010010101001101000110100"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> original = {"1111111111", "1111101111", "1111111111", "1101111111", "1111111111", "1011011111", "0111111111", "1110111111", "1101011101", "1111011111", "1010111111", "1110111111", "0111101111", "1101100111", "1111111111", "1011001011", "1111111110", "1101011011", "1111111011", "1111101111", "1111110010"};
    vector<string> target = {"0001000000", "1000010000", "0000100100", "0100000001", "0000010000", "1000110000", "1011110000", "1011100010", "0010110010", "0000000000", "0101111000", "1011000000", "1100101001", "0010001101", "0010100000", "0100111101", "0011000001", "0010101100", "1000110011", "0000010001", "1101001101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> original = {"0"};
    vector<string> target = {"0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> original = {"0"};
    vector<string> target = {"1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> original = {"0"};
    vector<string> target = {"0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> original = {"01"};
    vector<string> target = {"10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> original = {"01"};
    vector<string> target = {"10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> original = {"01"};
    vector<string> target = {"00"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> original = {"1100110010010111111000011111001110101011111010110"};
    vector<string> target = {"0001011111110011101010011011010100111111001101101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> original = {"1100110010010111111000011111001110101011111010110"};
    vector<string> target = {"0110011100101100110110101100010000111110001100000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> original = {"1100110010010111111000011111001110101011111010110"};
    vector<string> target = {"0110110000111101011011111111110111101101111101011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> original = {"01011010111110110011011001111111100110011111011111"};
    vector<string> target = {"11110001101001110110101100000111111111111011111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> original = {"01011010111110110011011001111111100110011111011111"};
    vector<string> target = {"11111010101110100010011011101011101101011100111101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> original = {"01011010111110110011011001111111100110011111011111"};
    vector<string> target = {"11011111111011111111111111111111111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> original = {"0", "1"};
    vector<string> target = {"1", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> original = {"0", "1"};
    vector<string> target = {"1", "1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> original = {"0", "1"};
    vector<string> target = {"0", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> original = {"00", "11"};
    vector<string> target = {"10", "10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> original = {"00", "11"};
    vector<string> target = {"11", "00"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> original = {"00", "11"};
    vector<string> target = {"11", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> original = {"1111111001001011110001111100011100001101101001110", "0111000000010010011001110111001101011100000011001"};
    vector<string> target = {"1000011110010110110000111010101001100100010000101", "0000010101011001111101111011101110011100011111010"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> original = {"1111111001001011110001111100011100001101101001110", "0111000000010010011001110111001101011100000011001"};
    vector<string> target = {"0000011111011011101110011001001111101100101110111", "0110101000000010001001101111000111111001110101010"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> original = {"1111111001001011110001111100011100001101101001110", "0111000000010010011001110111001101011100000011001"};
    vector<string> target = {"0000000000000000000010000000000001000000000000000", "0001000000000000000000000100000000000100000000001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> original = {"11100011110111010101011011111111111111110101101111", "11111101101110110100011111111111011000000111100110"};
    vector<string> target = {"01011101101110110001111110111110010100111111111101", "11111111001100101111111111000110100110111111100111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> original = {"11100011110111010101011011111111111111110101101111", "11111101101110110100011111111111011000000111100110"};
    vector<string> target = {"00011100010000101011011101000010010011001111010000", "00001010010101111001101010000001100111111000011001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> original = {"11100011110111010101011011111111111111110101101111", "11111101101110110100011111111111011000000111100110"};
    vector<string> target = {"11101111101011110111111111111111011101111011111111", "01111111111111111111111111111111111011111011111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> original = {"1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1"};
    vector<string> target = {"1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "0", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "0", "0", "1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> original = {"1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1"};
    vector<string> target = {"0", "0", "0", "1", "0", "1", "1", "1", "1", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "0", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> original = {"1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "0", "0", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1"};
    vector<string> target = {"0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> original = {"11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "00", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "11"};
    vector<string> target = {"11", "11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "01", "11", "11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "01", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> original = {"11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "00", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "11"};
    vector<string> target = {"01", "00", "10", "11", "00", "11", "11", "01", "10", "10", "10", "01", "00", "11", "10", "11", "10", "10", "10", "01", "10", "00", "00", "01", "11", "00", "11", "11", "11", "10", "10", "00", "01", "01", "10", "00", "00", "11", "11", "01", "00", "00", "10", "11", "11", "11", "11", "01", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> original = {"11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "00", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "11"};
    vector<string> target = {"11", "11", "11", "01", "11", "11", "11", "10", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "10", "11", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> original = {"0100010110111111111011100100111100111111110111111", "1111111111010011111111111100111111111111111110101", "1111101110111101111011111111101101111100111111110", "1111111101111111111111111101110111111111111110111", "1111011111111111111110110111100111111111101111011", "1111111001111111111111111111111111111111110111111", "1111111111111001101110111111010111011011011111011", "1111111111110110111111111111111101110101011111111", "1011100001011110111111111110001111011101111111110", "1011011111111111111011111101101111111111011101101", "1110101101111111111111110111110011111111110111100", "1101111111111111110111110111011111010111111111111", "1111011111111110111111111111101101100111111101100", "1111101111001111101101101111111111101111111001111", "1101100111010111111011111011001111111111110111111", "1111001011111111111101111101111110111011111111111", "1011100101101010111110110111111111111111111111011", "1111110111101111111111111111101111001111110110111", "1111111111011111111111111111011101111111111111111", "1111111111011101101111111110111111011111111111111", "1011011111100111110111111111111101111111111111101", "1110111111111111011001110010111111110111011111111", "1111101111110100111101111011011111111110111111111", "1111101111101010111111110111111110001010111111111", "1110111111011111111110001111111111111110111011101", "1111111011111110110111111111111111111101111111111", "1110111110110111111111100111101111111110111111111", "0011101111111111011100111111111111111111111111011", "1111111111111111111111101101011111111110111111011", "0011111111111111111101111011111111011111100101111", "1111111001011111111111111110011111101011011110101", "1011111111111110111111111110110011101110100101011", "1111011000110011111111001111011111111101111111011", "0111111111111101111111011111110111110011110101110", "1010100111001111101011110011111011111111011110110", "1110111110011111101001101011110001111111111111111", "1111111011111111111111110100111110111111111111111", "0011011101111011101111111100111110111111111110111", "1011101111111111101110000111111111111110111111111", "1111101101111111111111111011101111011001111111111", "1111110111110111010111111001101101111101110011111", "0111111111111101110100111111111101101111111111111", "1010111111011111111111010101111111111111101111111", "1010111111111111111110011111111111100110101111111", "0111111111111111111111011111111111111111110110111", "1111111111101101111111110011111111011111111101111", "0111011111110111101110101011111111111011111010111", "1111111111101111111011111111100110111111101111111", "1011111111101111111011011101111111101111101110111"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> original = {};
    vector<string> target = {"1100110100100010110011101001001100001101110111011", "0101000100110111111001111000010100000001010101010", "1000010010011110000000111011000100101111101011100", "0101001010111010111011000100111010100111010100110", "1011011111101011110111111100011100111010100001001", "0111100100011010001001100001101010100010100111111", "0001011001001100110000011101010001001010110111101", "0000111001100010101011100110100110111001001111000", "0110000010000100010010001010001110010010000000100", "1000110110000000000000101111100011101000111100110", "1001001000101111101111110101010110011110001110000", "0110010111100010100011000011101011001011011001001", "1010100011110111111111100001001100010100011111010", "0000110001110001011100111000100100000001110100111", "0100000111001011011010001111010011001001111111110", "0001000101011000101100001100101000111011111111010", "0101000100101010010100100001000000100000000000000", "0111010110001111101100100101110000000001101011001", "1001000111010111100101111111000001001010110011110", "1100100010001001101101111011101111010010001101001", "0111110001001001100101001000100111110001000001111", "1110100000001000011110110100000001001101000100101", "0000001101111001000011011010001001111010010101001", "0010000110111001101000001100100010000111011001101", "1100011100100010000101010111110001010010110011100", "0100011011100001011111000100000100111000011000000", "0110100000111010000011101000010101000011010111010", "0001001101001000001000100100010101110010110011110", "1000100001001100000100111011001000010000110100110", "1000010011011100101001100101010100010100100110010", "1110000011111010101110010000101010110101101010110", "0001111101100001100001110110100011100101000001110", "0110101000111110100000101010110010111000100000001", "0100101000100000001111010000000100001101010111110", "1000111100101111011000011110010010110010010101100", "1010100010110100000101101011100110110110100111100", "0000001000011011101101011101111000011001111000100", "0000001111101100110010111100010011110111000000100", "0011010010010001010110100010110011100001111000110", "0001100110000000001011110111010011011111100000011", "1000111101110001000100001110001101110001010111110", "1001101110101001010001101111011110101101110111100", "0110100110010010011101100111010011101010000010101", "0001110000100000100001000001100010011100111110101", "0111110110110001110001111100101001100110001100000", "0101010000000101010000011001010000011011011001011", "1000111110001111100000000110011101001111111001111", "0010001010100011110101001100001001001100101000001", "0100010100011100100101111101100011010111111110011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> original = {"11100111111010111010101001111001111000101000111101", "11110101101110111111111010111111111010111101011011", "11110111111101101111110110111111011001111101111111", "10111111111111111011101011111100101011110101011010", "01111111111101111100100111111111100111011111001110", "11111100110111000000111101101101111101111001111111", "10111110111101111111111101101101011110110110111111", "11010111111101111110111111111110110011111111111110", "11111111111111111111011011100011101101111111111111", "11011111101101011011111111111011111111111111011010", "01110111111111111111111001111011111111110101110111", "00011101110001111101110101101110011101111111111111", "11110100111111001001110111101111110111111011101111", "01110111111111101110110001111111101011110111101011", "11110011111011111111111111011111111111011010110011", "11111111110110101011011111011011111010011100001111", "11101111111111110101010111101101111111101011011111", "11101111010111110111111100011001110111111111111011", "01111111111011100101111011111111011111011111110100", "10101111111111111001101111011001111111011111110111", "11011011111110111111110011011111111111111011111111", "01011110010111111110111011111001010111111111111111", "11011111111110011110011111101111111111110111111010", "10111111101110111111111001111111100111010111111111", "01111011111110111111111011110011101001101100111111", "11110101100111001101110111111100111010011111110111", "11111111010111111010011001111111111111011101011111", "11111110101111101110111111101010100111110011010001", "11110011111111101100101101111100101011111111101110", "01010111111110111111101111001110111101011101100111", "10111010111101111010011011011101111110111110111111", "01011111011111011001111011111111101010111101111111", "11111110100101011111110101110011111110111000011010", "11111111110101111100111110111011110011111110111110", "11011111111101111011111111111111001111101111111111", "10011101111111111101101011111001011011111110101101", "11110111111101110111101111011111101111111011110011", "01111110011111111101110100111100011110010111101101", "11111111111111111101011111111111110111101111111111", "00011011110111111110011010011111011111111110001111", "01111110111110111001111101101110111001111111111111", "01111101111111111111011111111111110111011110111111", "00101111111111101001011010101111111111111111010110", "11011111010100011010011111110110111111010011101101", "11110011010110000101110110110111111110111111011001", "11110111110010101100101111001111111111001011111110", "11111111111111011110111110001011111111110101001111", "11010111111111011111101011111111011101110011110011", "11110110110011111011111101110010111111011011101111"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> original = {"0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0"};
    vector<string> target = {"0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> original = {"0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0"};
    vector<string> target = {"1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "0", "0", "1", "1", "1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> original = {"0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0"};
    vector<string> target = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> original = {"11", "11", "10", "10", "01", "11", "10", "11", "11", "11", "10", "11", "10", "11", "01", "11", "11", "11", "01", "10", "11", "11", "10", "11", "11", "01", "10", "11", "11", "11", "10", "01", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "01", "10", "11", "01", "00", "11"};
    vector<string> target = {"11", "11", "11", "11", "01", "10", "11", "10", "10", "11", "10", "11", "01", "11", "01", "11", "11", "10", "11", "11", "00", "11", "11", "11", "11", "11", "11", "11", "11", "11", "00", "10", "11", "10", "10", "11", "01", "11", "11", "10", "11", "11", "11", "11", "10", "10", "11", "11", "10", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> original = {"11", "11", "10", "10", "01", "11", "10", "11", "11", "11", "10", "11", "10", "11", "01", "11", "11", "11", "01", "10", "11", "11", "10", "11", "11", "01", "10", "11", "11", "11", "10", "01", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "01", "10", "11", "01", "00", "11"};
    vector<string> target = {"10", "01", "01", "10", "00", "10", "10", "11", "11", "10", "11", "11", "11", "00", "01", "01", "00", "10", "10", "01", "11", "01", "00", "11", "01", "01", "11", "01", "11", "10", "01", "11", "01", "11", "11", "11", "01", "01", "11", "10", "01", "10", "10", "10", "10", "10", "10", "00", "11", "01"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> original = {"11", "11", "10", "10", "01", "11", "10", "11", "11", "11", "10", "11", "10", "11", "01", "11", "11", "11", "01", "10", "11", "11", "10", "11", "11", "01", "10", "11", "11", "11", "10", "01", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "01", "10", "11", "01", "00", "11"};
    vector<string> target = {"11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "01", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> original = {"1000100110000000100110000000000100000011011011011", "0001010000001001010001010010010010010101010100101", "0001010000010100100101000011001100100100011100111", "1100000000100100100010000101000011010000110001000", "1100100011001001011011111010100000011000000100100", "1101101010100100010001000011010011010010100110011", "0101110011100101101110100100011010001101100001000", "0110001111010001010100000001101101111110100101011", "0101110110110010011000000100111010010100010100000", "0011000000110110101100010101000111000110001110011", "0110000010110111110111011001000100000110100100111", "0100100011001110000001111100000101000111101010010", "0100011111100101100111000010001000011011001110101", "0000001101000101011011001111111011001100000000000", "1000110010111100000001001101000000001111001110000", "1010101011010101100000101001101001000001000110010", "0110010100001000010000110111001000101001011011101", "0110010010001011111110001010011010000000001011110", "1011010010011010111000011101000000111010000010111", "0000100001000111000110011100000111010111000100000", "0101000000101101010011101000001100100001000001111", "0100001111010000000101010010000110001000100100000", "1001001110100001010011100000100101010011011100100", "1000011101001010010000101010000110010111000111101", "0100000101100010111100110100000011000000010101101", "1111111001111011111110100111010101001001110110100", "1101000011011001010011110011001001100100000111010", "1000000001010100110010100010000010010011010001001", "1010100000011001100011110011001000110101100001110", "1001110011000000001110111001001000100001000011100", "0101100000101000001111101111001101000111110000001", "0001001101111101000010001110100101100100011011000", "0000010011101000111011110000011000100001101001100", "0110111001000000010111100010000111000001110001000", "0001001000010100100101000000001000110010011000100", "1010011001100000011101010100001100000011100101101", "1011111000000000000010110111101000111011111010011", "1000010110010111001000111111011100011010110011001", "0010010011001000001000010000000100101000100010010", "0100111010101100101001100000111010010100000010000", "0000010000010011010000111100101010000001100000001", "0000001000101000000000100101000001110101100101110", "1010101101011100001001100111101110010110100000000", "1011000110010011110100100110001000001000101100001", "1001100010010100000100010001101110100000000111110", "1010001011000100101101000000101001111001110011011", "0101111011110000000010101111010111110111000011011", "1100001100011100010010010001100100100000001010000", "1001000110001000010010110110100101010101010001011", "1100010001011001100100101101000001101100001110011"};
    vector<string> target = {"0001010111001111111100001110010001000111011101001", "0101110010011001011011001001000000100001011001110", "1101100101101001000000100001110000010111010110001", "0101000100100110000110111101100110000100100111000", "0010010011110101100100011100010000010100001011011", "0011010000011110101010010101110000100010000101100", "0001000001000001010000000010000010001101110000101", "1001000000001101001101110010001001100000001100100", "0011100000011111001000111010100101011001101110001", "0000111011100100100010101001010001100101000100001", "0010000110010110101010100010000011000001010100001", "0011000001101110111010100101001101111100010100111", "0001001000001010110011000000000000010010101000000", "0001111100010000100001000101110001000001010101110", "1001000001000000010100011101000000000111001001000", "0001011100101001010101001001001110111100011001010", "0100101010001011100000110111000111011000111110111", "0011001100110010000010100000111100011000000111111", "1000101001001110000010101001000000010001001000111", "1111100101001010110111000101011010001101100000100", "0001011010010001000010010010000100010111001101000", "0001000000001111100010001111111111100010010010110", "1100010000110011001000101110100000000000010010001", "1011010010100100010110001101000001100000101110010", "0001100110101110000111011001100110110100101000001", "0111110110010100101000010001001111100011110000110", "1101101100001010011000001100100011010000001001010", "1100001000011011110001001011000010011110100100011", "1110100100000110010100101001001001000100011011101", "0011001100010100011001011100101010001111000001110", "0011100010010000100100100000011111011000111010001", "1101010010010010101111010101101101000100000010010", "0001010000001000100111110100111011100110011101010", "0110010111010011101001000101101011111011111000010", "1010000000000000001010000110010000001110001000101", "0001101001111110001000011101000010111110001001001", "0110000100000001010001101000100100000100111111000", "1000110001011011110111011011010100011001011101000", "1010101110010111000100101101110111000101010100100", "0101000011001001001011101111000101100010110000111", "0100100111001001000100100100000110111100001100000", "1100011000101001011100100100110000110000010100001", "1100000010000001111011100010010010100101110100000", "0010011000101100000011010000100011011010111000100", "1110110101010000011101100011000001000100011101111", "1011011010100100001011010000000101100010010100101", "0000011110011100010101011100010011101011010001000", "1000101100000010001001110010000000000110110010100", "0010000001110011010001100011010010100010110000110", "0011000010001001001100101010101100101100001010001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> original = {};
    vector<string> target = {"01100111010011101010001010010010110100011010010001", "11000100001000110000110011111111001000110000001010", "00110110000011010101100100000000011110010110000111", "00101100000001111001110101010010011000010011001000", "00100000001000100100101000000011010001100000001100", "10110011101100010101000110101111100101111100100001", "00101110010000011001000010000111010100010001111001", "00000010100101011011010011010001101100001100001001", "01101110110110010000001000101000010010001000011000", "10010011011100100100011001000101011100000011100100", "11001010001110100001011111001010011000110110110010", "00011010110110111101000010110100101110111110100110", "00001011111010010000011101110110010010001000011010", "10101000001110000111001101111110010001100110010010", "10000101001000100110101100101000101011001001010110", "11100000000110010011011110110001100011000011001001", "00010110000000000000001100001100001101110011111001", "00100010100001110001111001011110101011011001100101", "01101011000011000001010011110111101101001000011010", "01001001000001110000101101011000010111011101100001", "00100100110111101111000000100101010001110001100010", "10110000101011000000001110001100010001111111000100", "00011011000001010110110001001000011000010010001110", "00000010100001001110001010001110110010001011010110", "11100111001010000000011010100000100010111010011011", "01011100101000101111110111010000011001011000100110", "01101100010001001101011011000001001110010000010100", "11100001011100111011000101000010101111101011100101", "01101001010110011001000101001000000000011101001010", "01110100000001010100110000000000001001001110110010", "01100101101110101110100001101011010100010101101100", "00010010000011000100000011101011110000010000101100", "00110110010000111111001000001111001101000101100101", "00000011000100111000010101011100101010100001011111", "10001110001100011001000000100100011001001101000100", "00000110001000011000000011000111000000100001100010", "00010111110001111010101101001111110111100110000100", "10101001111100000001111011010011001001100000100110", "00100001110101100000000001000001100000001101011000", "01010111001000011111010010000110011010000100010001", "00010110000000011000010011000010000100010011011001", "00001111110010100100100000111000000111111100000010", "11100001100000110001011011010000010100101010000001", "10110010110100101100101001011000000000000001101000", "11110100101001010001000011011000010000101001110000", "10110111100101001100101010101011111001000101010101", "01000011001110001101000101000100011000011000000010", "11010100011110000100000001100100011010101010001010", "11110000001101011111000001100100100001011000111111", "11011011000110010000010110001100011101001010001110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> original = {"1"};
    vector<string> target = {"1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> original = {"0"};
    vector<string> target = {"1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> original = {"1"};
    vector<string> target = {"0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> original = {"0"};
    vector<string> target = {"0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> original = {"00", "00"};
    vector<string> target = {"11", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> original = {"11", "11"};
    vector<string> target = {"11", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> original = {"11", "11"};
    vector<string> target = {"00", "00"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> original = {"00", "00"};
    vector<string> target = {"00", "00"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> original = {"00", "01"};
    vector<string> target = {"11", "10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> original = {"11", "00"};
    vector<string> target = {"00", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> original = {"10", "00"};
    vector<string> target = {"00", "10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> original = {"11", "10"};
    vector<string> target = {"01", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> original = {"11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111011111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> original = {};
    vector<string> target = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000010000000000000001000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> original = {"01101111011100011100000111000000101000000110001110", "11010001100010111000010010000100011001001110010110", "00111010010100011011011000110011110101100101101000", "00000111111101111110010110001001111001010110110000", "01011101101100100110001111010011100000010010000111", "01111010111010110101100100000101010110011111010111", "00011001000001011000010010111011100000101001011011", "00000111110101110011100111001000111100001011010011", "11000110010100001000010111100010011111010111000100", "10001110000000100010110001000110111100101100110000", "11101010011110100000100000111100001110001011000001", "00110011101000000111011111011100110100110110011000", "10010001010011001011111011110011111100110000001110", "01111100100110100001010011010111010001011110101011", "01011001000110000101111010001100000111110001100111", "00101100001000100001011101111001100110011111111110", "00001011100010001000101000001100101011000100110000", "00000111101101110000000101010001100001111101111011", "11000100100001101000010000000100100100111111110111", "00101110011000000001010010101010100011111101111000", "00100000101001010010000101110000010000011000111110", "01001011101100101010001011001010011000000110000010", "00001111111111110110110001100100011001001001001000", "10111110110010110111010011001101101110001011000101", "11001110001001110100110010101011001111001111111111", "10101100101011011011011000010111101010101110100011", "11010000111000011100000101101101111101010111111011", "10001000100101101001110010000010110101001110110110", "01111100010010111101011110010100110101110011111110", "01100100001110111110011110001101111110111000111101", "00110110001111010000000011111100101101010011101100", "00000001100011111101101100110110000001111011000000", "01000011100101110110001011101111010110111110110010", "01011111100101111011100011001110010101111110000101", "00100100010111000010011110011011110101101000110001", "10101110101101001100010100001001011110010100010001", "11111010001000001001001011011001001000011100010110", "00111010000111011101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001000101111101101011110011001101111111", "00010000101111111101101001111011101101011110100101", "10100110001101100011000001010100000101111011100011", "10110101011011000010110101010011111010010000100010", "10100000110101000011110100100101100111000001001101", "01000100010001011001000011001001010101010000000011", "00100110001010111101111110101100100001101110111111", "00110110100011001011101101100101001011011000000011", "01011110011001000000100011111001001111000101011110", "01010011010001101101110001010010111100110101111100", "01100101000000011011110001111101110101011100101011"};
    vector<string> target = {"00010011110111001100100110101011111000100000101100", "01010001110011010100000001101110011110100100110010", "11101101011101101010111101000111111010111101101011", "11110001000111101010101001011011011010110110100111", "01010101011101010000000101001110100111100011111100", "10101100001011000100011110110011111010111111010001", "00100110100111011101111100110001110000001111010000", "00001100000100100100011001001000101101101101000101", "11101101100010110000111100100110101100011100100100", "00000101110001000011010001111010111110100100011010", "01100010011110000000111001100110010100000111100001", "00001001111101101000110110111110101011011101001000", "00101101011111010100110000110110101111010101010101", "10001100010111100011101110001100001000101001100001", "10101100110111110000110100110111011010111111101011", "11100101010000001001111100001101000101110010111010", "01000110001111011111100001101000111111110101101110", "00111010100000011111111100100101100100100000010000", "01000001100011010000000011101010010000100010110010", "00000011101110011010010111101110111100100010001011", "10110010000010001101101001110101111001101001100010", "11100111011110010101010111010000010110101111011100", "10001000110000110010000010000001000001111101001011", "11100110111101110101000110010010011001011011001111", "11000011001111011001000111000110001111110110101011", "11101111011101001011100111111101111011111010000011", "11011010111111100100111000000011000010101011011000", "10000010100111101011100001001100011110101001001000", "10100011001010110111011001001001101001101111101011", "00010101111101001011001110000111111001001111101010", "11101010001101101000111101001101100100001001011101", "00000001110000010000111110111010101110001000111001", "10111010011110111011010111100010011111011000101111", "11111010000011111111101011011000111010100110110111", "10100011101101101001100010010001101111010101000101", "10010111100100010011000000011111001001000000000010", "00001001000011110010100110011001110110000110101010", "10011000000011000010011100011000111011101010010111", "11001100001010001000100101101100101100000000011100", "11100110000101001001001100101100001101000000111001", "00010000010011011100010100011001001100100100110110", "01000110111011100100100110111011001010000111100010", "11101001000001101010111111111001001011110001110111", "00011111010011010101011000110010001110011101101100", "01100001100101100011111011100011010101001001000000", "01001011001000111101101011100010001011000100000111", "00110000110111010010110001111001011110001110000010", "01101001111000100110000110011001011110011110100111", "00011101010001011110000010110100101101101100110110", "10100000010100111011001000010000001111000010101011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> original = {"01101111011100011100000111000000101000000110001110", "11010001100010111000010010000100011001001110010110", "00111010010100011011011000110011110101100101101000", "00000111111101111110010110001001111001010110110000", "01011101101100100110001111010011100000010010000111", "01111010111010110101100100000101010110011111010111", "00011001000001011000010010111011100000101001011011", "00000111110101110011100111001000111100001011010011", "11000110010100001000010111100010011111010111000100", "10001110000000100010110001000110111100101100110000", "11101010011110100000100000111100001110001011000001", "00110011101000000111011111011100110100110110011000", "10010001010011001011111011110011111100110000001110", "01111100100110100001010011010111010001011110101011", "01011001000110000101111010001100000111110001100111", "00101100001000100001011101111001100110011111111110", "00001011100010001000101000001100101011000100110000", "00000111101101110000000101010001100001111101111011", "11000100100001101000010000000100100100111111110111", "00101110011000000001010010101010100011111101111000", "00100000101001010010000101110000010000011000111110", "01001011101100101010001011001010011000000110000010", "00001111111111110110110001100100011001001001001000", "10111110110010110111010011001101101110001011000101", "11001110001001110100110010101011001111001111111111", "10101100101011011011011000010111101010101110100011", "11010000111000011100000101101101111101010111111011", "10001000100101101001110010000010110101001110110110", "01111100010010111101011110010100110101110011111110", "01100100001110111110011110001101111110111000111101", "00110110001111010000000011111100101101010011101100", "00000001100011111101101100110110000001111011000000", "01000011100101110110001011101111010110111110110010", "01011111100101111011100011001110010101111110000101", "00100100010111000010011110011011110101101000110001", "10101110101101001100010100001001011110010100010001", "11111010001000001001001011011001001000011100010110", "00111010000111011101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001000101111101101011110011001101111111", "00010000101111111101101001111011101101011110100101", "10100110001101100011000001010100000101111011100011", "10110101011011000010110101010011111010010000100010", "10100000110101000011110100100101100111000001001101", "01000100010001011001000011001001010101010000000011", "00100110001010111101111110101100100001101110111111", "00110110100011001011101101100101001011011000000011", "01011110011001000000100011111001001111000101011110", "01010011010001101101110001010010111100110101111100", "01100101000000011011110001111101110101011100101011"};
    vector<string> target = {"01101111011100011100000111000000101000000110001110", "11010001100010111000010010000100011001001110010110", "00111010010100011011011000110011110101100101101000", "00000111111101111110010110001001111001010110110000", "01011101101100100110001111010011100000010010000111", "01111010111010110101100100000101010110011111010111", "00011001000001011000010010111011100000101001011011", "00000111110101110011100111001000111100001011010011", "11000110010100001000010111100010011111010111000100", "10001110000000100010110001000110111100101100110000", "11101010011110100000100000111100001110001011000001", "00110011101000000111011111011100110100110110011000", "10010001010011001011111011110011111100110000001110", "01111100100110100001010011010111010001011110101011", "01011001000110000101111010001100000111110001100111", "00101100001000100001011101111001100110011111111110", "00001011100010001000101000001100101011000100110000", "00000111101101110000000101010001100001111101111011", "11000100100001101000010000000100100100111111110111", "00101110011000100001010010101010100011111101111000", "00100000101001010010000101110000010000011000111110", "01001011101100101010001011001010011000000110000010", "00001111111111110110110001100100011001001001001000", "10111110110010110111010011001101101110001011000101", "11001110001001110100110010101011001111001111111111", "10101100101011011011011000010111101010101110100011", "11010000111000011100000101101101111101010111111011", "10001000100101101001110010000010110101001110110110", "01111100010010111101011110010100110101110011111110", "01100100001110111110011110001101111110111000111101", "00110110001111010000000011111100101101010011101100", "00000001100011111101101100110110000001111011000000", "01000011100101110110001011101111010110111110110010", "01011111100101111011100011001110010101111110000101", "00100100010111000010011110011011110101101000110001", "10101110101101001100010100001001011110010100010001", "11111010001000001001001011011001001000011100010110", "00111010000111011101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001000101111101101011110011001101111111", "00010000101111111101101001111011101101011110100101", "10100110001101100011000001010100000101111011100011", "10110101011011000010110101010011111010010000100010", "10100000110101000011110100100101100111000001001101", "01000100010001011001000011001001010101010000000011", "00100110001010111101111110101100100001101110111111", "00110110100011001011101101100101001011011000000011", "01011110011001000000100011111001001111000101011110", "01010011010001101101110001010010111100110101111100", "01100101000000011011110001111101110101011100101011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> original = {"01101111011100011100000111000000101000000110001110", "11010001100010111000010010000100011001001110010110", "00111010010100011011011000110011110101100101101000", "00000111111101111110010110001001111001010110110000", "01011101101100100110001111010011100000010010000111", "01111010111010110101100100000101010110011111010111", "00011001000001011000010010111011100000101001011011", "00000111110101110011100111001000111100001011010011", "11000110010100001000010111100010011111010111000100", "10001110000000100010110001000110111100101100110000", "11101010011110100000100000111100001110001011000001", "00110011101000000111011111011100110100110110011000", "10010001010011001011111011110011111100110000001110", "01111100100110100001010011010111010001011110101011", "01011001000110000101111010001100000111110001100111", "00101100001000100001011101111001100110011111111110", "00001011100010001000101000001100101011000100110000", "00000111101101110000000101010001100001111101111011", "11000100100001101000010000000100100100111111110111", "00101110011000000001010010101010100011111101111000", "00100000101001010010000101110000010000011000111110", "01001011101100101010001011001010011000000110000010", "00001111111111110110110001100100011001001001001000", "10111110110010110111010011001101101110001011000101", "11001110001001110100110010101011001111001111111111", "10101100101011011011011000010111101010101110100011", "11010000111000011100000101101101111101010111111011", "10001000100101101001110010000010110101001110110110", "01111100010010111101011110010100110101110011111110", "01100100001110111110011110001101111110111000111101", "00110110001111010000000011111100101101010011101100", "00000001100011111101101100110110000001111011000000", "01000011100101110110001011101111010110111110110010", "01011111100101111011100011001110010101111110000101", "00100100010111000010011110011011110101101000110001", "10101110101101001100010100001001011110010100010001", "11111010001000001001001011011001001000011100010110", "00111010000111011101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001000101111101101011110011001101111111", "00010000101111111101101001111011101101011110100101", "10100110001101100011000001010100000101111011100011", "10110101011011000010110101010011111010010000100010", "10100000110101000011110100100101100111000001001101", "01000100010001011001000011001001010101010000000011", "00100110001010111101111110101100100001101110111111", "00110110100011001011101101100101001011011000000011", "01011110011001000000100011111001001111000101011110", "01010011010001101101110001010010111100110101111100", "01100101000000011011110001111101110101011100101011"};
    vector<string> target = {"00010011110111001100100110101011111000100000101100", "01010001110011010100000001101110011110100100110010", "11101101011101101010111101000111111010111101101011", "11110001000111101010101001011011011011110110100111", "01010101011101010000000101001110100111100011111100", "10101100001011000100011110110011111010111111010001", "00100110100111011101111100110001110000001111010000", "00001100000100100100011001001000101101101101000101", "11101101100010110000111100100110101100011100100100", "00000101110001000011010001111010111110100100011010", "01100010011110000000111001100110010100000111100001", "00001001111101101000110110111110101011011101001000", "00101101011111010100110000110110101111010101010101", "10001100010111100011101110001100001000101001100001", "10101100110111110000110100110111011010111111101011", "11100101010000001001111100001101000101110010111010", "01000110001111011111100001101000111111110101101110", "00111010100000011111111100100101100100100000010000", "01000001100011010000000011101010010000100010110010", "00000011101110011010010111101110111100100010001011", "10110010000010001101101001110101111001101001100010", "11100111011110010101010111010000010110101111011100", "10001000110000110010000010000001000001111101001011", "11100110111101110101000110010010011001011011001111", "11000011001111011001000111000110001111110110101011", "11101111011101001011100111111101111011111010000011", "11011010111111100100111000000011000010101011011000", "10000010100111101011100001001100011110101001001000", "10100011001010110111011001001001101001101111101011", "00010101111101001011001110000111111001001111101010", "11101010001101101000111101001101100100001001011101", "00000001110000010000111110111010101110001000111001", "10111010011110111011010111100010011111011000101111", "11111010000011111111101011011000111010100110110111", "10100011101101101001100010010001101111010101000101", "10010111100100010011000000011111001001000000000010", "00001001000011110010100110011001110110000110101010", "10011000000011000010011100011000111011101010010111", "11001100001010001000100101101100101100000000011100", "11100110000101001001001100101100001101000000111001", "00010000010011011100010100011001001100100100110110", "01000110111011100100100110111011001010000111100010", "11101001000001101010111111111001001011110001110111", "00011111010011010101011000110010001110011101101100", "01100001100101100011111011100011010101001001000000", "01001011001000111101101011100010001011000100000111", "00110000110111010010110001111001011110001110000010", "01101001111000100110000110011001011110011110100111", "00011101010001011110000010110100101101101100110110", "10100000010100111011001000010000001111000010101011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> original = {"01101111011100011100000111000000101000000110001110", "11010001100010111000010010000100011001001110010110", "00111010010100011011011000110011110101100101101000", "00000111111101111110010110001001111001010110110000", "01011101101100100110001111010011100000010010000111", "01111010111010110101100100000101010110011111010111", "00011001000001011000010010111011100000101001011011", "00000111110101110011100111001000111100001011010011", "11000110010100001000010111100010011111010111000100", "10001110000000100010110001000110111100101100110000", "11101010011110100000100000111100001110001011000001", "00110011101000000111011111011100110100110110011000", "10010001010011001011111011110011111100110000001110", "01111100100110100001010011010111010001011110101011", "01011001000110000101111010001100000111110001100111", "00101100001000100001011101111001100110011111111110", "00001011100010001000101000001100101011000100110000", "00000111101101110000000101010001100001111101111011", "11000100100001101000010000000100100100111111110111", "00101110011000000001010010101010100011111101111000", "00100000101001010010000101110000010000011000111110", "01001011101100101010001011001010011000000110000010", "00001111111111110110110001100100011001001001001000", "10111110110010110111010011001101101110001011000101", "11001110001001110100110010101011001111001111111111", "10101100101011011011011000010111101010101110100011", "11010000111000011100000101101101111101010111111011", "10001000100101101001110010000010110101001110110110", "01111100010010111101011110010100110101110011111110", "01100100001110111110011110001101111110111000111101", "00110110001111010000000011111100101101010011101100", "00000001100011111101101100110110000001111011000000", "01000011100101110110001011101111010110111110110010", "01011111100101111011100011001110010101111110000101", "00100100010111000010011110011011110101101000110001", "10101110101101001100010100001001011110010100010001", "11111010001000001001001011011001001000011100010110", "00111010000111011101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001000101111101101011110011001101111111", "00010000101111111101101001111011101101011110100101", "10100110001101100011000001010100000101111011100011", "10110101011011000010110101010011111010010000100010", "10100000110101000011110100100101100111000001001101", "01000100010001011001000011001001010101010000000011", "00100110001010111101111110101100100001101110111111", "00110110100011001011101101100101001011011000000011", "01011110011001000000100011111001001111000101011110", "01010011010001101101110001010010111100110101111100", "01100101000000011011110001111101110101011100101011"};
    vector<string> target = {"10010000100011100011111000111111010111111001110001", "00101110011101000111101101111011100110110001101001", "11000101101011100100100111001100001010011010010111", "11111000000010000001101001110110000110101001001111", "10100010010011011001110000101100011111101101111000", "10000101000101001010011011111010101001100000101000", "11100110111110100111101101000100011111010110100100", "11111000001010001100011000110111000011110100101100", "00111001101011110111101000011101100000101000111011", "01110001111111011101001110111001000011010011001111", "00010101100001011111011111000011110001110100111110", "11001100010111111000100000100011001011001001100111", "01101110101100110100000100001100000011001111110001", "10000011011001011110101100101000101110100001010100", "10100110111001111010000101110011111000001110011000", "11010011110111011110100010000110011001100000000001", "11110100011101110111010111110011010100111011001111", "11111000010010001111111010101110011110000010000100", "00111011011110010111101111111011011011000000001000", "11010001100111111110101101010101011100000010000111", "11011111010110101101111010001111101111100111000001", "10110100010011010101110100110101100111111001111101", "11110000000000001001001110011011100110110110110111", "01000001001101001000101100110010010001110100111010", "00110001110110001011001101010100110000110000000000", "01010011010100100100100111101000010101010001011100", "00101111000111100011111010010010000010101000000100", "01110111011010010110001101111101001010110001001001", "10000011101101000010100001101011001010001100000001", "10011011110001000001100001110010000001000111000010", "11001001110000101111111100000011010010101100010011", "11111110011100000010010011001001111110000100111111", "10111100011010001001110100010000101001000001001101", "10100000011010000100011100110001101010000001111010", "11011011101000111101100001100100001010010111001110", "01010001010010110011101011110110100001101011101110", "00000101110111110110110100100110110111100011101001", "11000101111000100010110001101001010000011111001011", "11101001011110000011001000101111110001010011110101", "10010000000110111010000010010100001100110010000000", "11101111010000000010010110000100010010100001011010", "01011001110010011100111110101011111010000100011100", "01001010100100111101001010101100000101101111011101", "01011111001010111100001011011010011000111110110010", "10111011101110100110111100110110101010101111111100", "11011001110101000010000001010011011110010001000000", "11001001011100110100010010011010110100100111111100", "10100001100110111111011100000110110000111010100001", "10101100101110010010001110101101000011001010000011", "10011010111111100100001110000010001010100011010100"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> original = {"01101111011100011100000111000000101000000110001110", "11010001100010111000010010000100011001001110010110", "00111010010100011011011000110011110101100101101000", "00000111111101111110010110001001111001010110110000", "01011101101100100110001111010011100000010010000111", "01111010111010110101100100000101010110011111010111", "00011001000001011000010010111011100000101001011011", "00000111110101110011100111001000111100001011010011", "11000110010100001000010111100010011111010111000100", "10001110000000100010110001000110111100101100110000", "11101010011110100000100000111100001110001011000001", "00110011101000000111011111011100110100110110011000", "10010001010011001011111011110011111100110000001110", "01111100100110100001010011010111010001011110101011", "01011001000110000101111010001100000111110001100111", "00101100001000100001011101111001100110011111111110", "00001011100010001000101000001100101011000100110000", "00000111101101110000000101010001100001111101111011", "11000100100001101000010000000100100100111111110111", "00101110011000000001010010101010100011111101111000", "00100000101001010010000101110000010000011000111110", "01001011101100101010001011001010011000000110000010", "00001111111111110110110001100100011001001001001000", "10111110110010110111010011001101101110001011000101", "11001110001001110100110010101011001111001111111111", "10101100101011011011011000010111101010101110100011", "11010000111000011100000101101101111101010111111011", "10001000100101101001110010000010110101001110110110", "01111100010010111101011110010100110101110011111110", "01100100001110111110011110001101111110111000111101", "00110110001111010000000011111100101101010011101100", "00000001100011111101101100110110000001111011000000", "01000011100101110110001011101111010110111110110010", "01011111100101111011100011001110010101111110000101", "00100100010111000010011110011011110101101000110001", "10101110101101001100010100001001011110010100010001", "11111010001000001001001011011001001000011100010110", "00111010000111011101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001000101111101101011110011001101111111", "00010000101111111101101001111011101101011110100101", "10100110001101100011000001010100000101111011100011", "10110101011011000010110101010011111010010000100010", "10100000110101000011110100100101100111000001001101", "01000100010001011001000011001001010101010000000011", "00100110001010111101111110101100100001101110111111", "00110110100011001011101101100101001011011000000011", "01011110011001000000100011111001001111000101011110", "01010011010001101101110001010010111100110101111100", "01100101000000011011110001111101110101011100101011"};
    vector<string> target = {"00101111011100111100000011000000100000000110001110", "11010011100010111000011010010100011011001110010110", "00111010010100011111011000010011110101110101101000", "00000011110101111110010010011001111001011110110000", "01011111101100100110001111110011100000010010000110", "01111010111010110101101100000111010110011111010111", "00011001000001011000010010111011000000101001011011", "00000111110101110011100101001000111100101011010011", "11000111110100001000010111100010111110010101000100", "10001110000100100010110001000100111101100100110000", "01101010011110100000000000111100001110001011000001", "00110011111000000111011111011100110100110110011000", "10010001010011011011111011110011011100110000001110", "01111000100110110001010011010111010001011110101111", "01011101000110000101111010001100000111110001110111", "00101100001000100001011101111001100110010111110110", "00001011100010001000101000000100101011000100110000", "00000111100101110000000101010001100001101101111111", "11000100100001101000010000000100100100111111110010", "01101110011000000001010010101010100011111100111000", "00100000101101000010000101110000110000011100111110", "01001011101100111010001011001010011000000100000010", "11001111111111110110110001100100011001000101001000", "10111111110010110111010011001101101110001011000101", "11001110001001100101110010101011001111001111111111", "11101100101011011011011000010111111010101110100011", "11011000111000011100100101101111111101010111111011", "00001000100101101000110010000010110101001100010110", "01111100010010111101011110010100110101110011111110", "01000100001110111110011010000101111110111000111101", "00110110001111010000000010111100101101110001101100", "01000001100011111101101100110110000001111010000000", "01000101110101110110001011101111110110111110110010", "01011111100100110000100011001110010101111111000101", "00100101010111000000011110010011110101101000110001", "10101011101101101100010100001001011110010111010001", "11111010001000001001101011011001001000011100010110", "00111010001111001101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001100101111001101011110010001101111110", "10110000101111111101100001111011100101011010000111", "10100110001101100011010001010000000101111111100011", "10110101011011000110110111010010111010010000100010", "10100000110111000011110110100001100111100000001101", "01010100010001011001000011001011010101110000000011", "00100110011011111101111110101100100001101110111111", "00110110100011001011101111100101001001011000000011", "01011110011011100000100011111001001111001101010110", "01010111010001101111110000110010111100110101111100", "01000101000000001011110001111101010101011100101011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> original = {"01101111011100011100000111000000101000000110001110", "11010001100010111000010010000100011001001110010110", "00111010010100011011011000110011110101100101101000", "00000111111101111110010110001001111001010110110000", "01011101101100100110001111010011100000010010000111", "01111010111010110101100100000101010110011111010111", "00011001000001011000010010111011100000101001011011", "00000111110101110011100111001000111100001011010011", "11000110010100001000010111100010011111010111000100", "10001110000000100010110001000110111100101100110000", "11101010011110100000100000111100001110001011000001", "00110011101000000111011111011100110100110110011000", "10010001010011001011111011110011111100110000001110", "01111100100110100001010011010111010001011110101011", "01011001000110000101111010001100000111110001100111", "00101100001000100001011101111001100110011111111110", "00001011100010001000101000001100101011000100110000", "00000111101101110000000101010001100001111101111011", "11000100100001101000010000000100100100111111110111", "00101110011000000001010010101010100011111101111000", "00100000101001010010000101110000010000011000111110", "01001011101100101010001011001010011000000110000010", "00001111111111110110110001100100011001001001001000", "10111110110010110111010011001101101110001011000101", "11001110001001110100110010101011001111001111111111", "10101100101011011011011000010111101010101110100011", "11010000111000011100000101101101111101010111111011", "10001000100101101001110010000010110101001110110110", "01111100010010111101011110010100110101110011111110", "01100100001110111110011110001101111110111000111101", "00110110001111010000000011111100101101010011101100", "00000001100011111101101100110110000001111011000000", "01000011100101110110001011101111010110111110110010", "01011111100101111011100011001110010101111110000101", "00100100010111000010011110011011110101101000110001", "10101110101101001100010100001001011110010100010001", "11111010001000001001001011011001001000011100010110", "00111010000111011101001110010110101111100000110100", "00010110100001111100110111010000001110101100001010", "01101111111001000101111101101011110011001101111111", "00010000101111111101101001111011101101011110100101", "10100110001101100011000001010100000101111011100011", "10110101011011000010110101010011111010010000100010", "10100000110101000011110100100101100111000001001101", "01000100010001011001000011001001010101010000000011", "00100110001010111101111110101100100001101110111111", "00110110100011001011101101100101001011011000000011", "01011110011001000000100011111001001111000101011110", "01010011010001101101110001010010111100110101111100", "01100101000000011011110001111101110101011100101011"};
    vector<string> target = {"10000100001011000000010010001011111000000111100100", "11000111010000110100000001001110011110100110100010", "01101001011001101100001101011000000010111101100001", "11111000010000111001001111111011011000001010110001", "10111100011100110100000000000111110011000001111101", "00000101010111110000110010111001011010000111010000", "10101110100000100101010000110101111100010010011101", "01100000001000110100111101000100101010110011011011", "11101001000011011000111100101110101101111100100001", "00110011110000000011110011100111101000101000010111", "00000010011100000111111101100011110100010000111011", "11101101011101111000010000110010101101111011001000", "01111101011111010100101010110010111111010011000001", "11010110000100100001101000000100001010100011101101", "11111000011011100101111100110011100011011111110011", "10000001011011010000111000100101001101101110111101", "10000100010110110011110101101001111001100101100010", "01001110111001110001011110011010001110100001011100", "11000101000001000010010101001001010011011111000001", "11001010101110011010011001001111000100101011011011", "00111011010011101101010010001001100100011101000001", "10110111110100010101010100010010011101111111001100", "01111001101011110000101000100001110111101101111111", "10100110111101100111001000011010101011001100000101", "00000111010011111011101110010100011111011011111110", "11101011001110001011101101011111010011001111100010", "10010010000110110000000000101111100110101111011010", "10100101111111001011111001001010111111010011100100", "10100111101110110010000010101001110001000101111110", "00111101100011000011111110100001111011101010111100", "10110100001111111000000011111101111000010011010101", "01011100101000001100110101101001101010000001011111", "11110010010111011110010110100110111110000001111100", "10110011011000111110010111000000001011111000111101", "11100011001001001101111010101100111010010110000111", "11100011110000010111000100010111100001110001100110", "00110001001111110010100010111100010100000010101010", "01110100101011000111101101000001111000000110110010", "10000100000010000010000000000100111100010010010100", "11100101010100101010100001001110110110000110011110", "00000100010011001000101110110111111011100000110100", "11001110110001100000100010110001001010010110100001", "11001101100010010110011011111011110111110001100111", "00001110000001000101000110001000001000110001000100", "11111001000100001101011101101001000110001111010010", "01100001011011111010101011100111011011001101011111", "01110111101000100000001010111001011010011010000110", "01001001101001100011100010001000010001011110110001", "11001111010111001011100000110101101000101111110001", "10100000011000011010101100110100111111010100101110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> original = {};
    vector<string> target = {"11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111011111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111101111111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> original = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000001000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000010000000000000000001000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> original = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000001000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000010000000000000000001000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> original = {};
    vector<string> target = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000001000000000000000000000000100000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000010000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000001000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> original = {};
    vector<string> target = {"11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000010000", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111101111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111101111111111111111", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> original = {"00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111011110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000", "00011111111110000110011100101011100101101100010000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> original = {};
    vector<string> target = {"01011100011100011000111011110001110011011111010100", "11101100011100010011111001110111110001011111010100", "11101100110110011111111011110010110111010111010100", "00000000000000000000000000000000000000000000000000", "00111100110111010110111011100111110111101110010100", "11111100111111001111100011110010010111111111000100", "11111100111111001111111000110110100101111011010000", "11110100111111010111110011110111110011010001010100", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "11110100111111001110011001110100010110111011010100", "11101100101111010111111001100111100111111110010100", "10111100101000011111011011110110110111110111000100", "10110000111000011001101011110011010111100111010100", "11111000111011011111111011110011110100110110010000", "00000000000000000000000000000000000000000000000000", "11011100111001001101111001100111100100111011000100", "01010000111111010111111011100111110110011111010100", "11110100111101011101111011110100110101111101010000", "11111100110011011101111001110111100101111111010000", "11111100111101000011010001110011110100011110000100", "11111100011111010111111001010011000111111111010100", "11111100101111001111111001110101000111101111010100", "10011100111110010101100001110111110111011111010100", "11111100011110011011011001110111110111111111010100", "11101100110011011111111010100111110111111110010100", "01001100111011011111111001010011110111111111010000", "11111100111011010101111011000111010110100111010100", "01101100111111011101110011100111110011001011000000", "11100100101111011110110011110101110111011011010000", "00000000000000000000000000000000000000000000000000", "11111100000110001111101010110111100011110110010100", "10111000110111010110111001100101110111111110010100", "11110100111101001000111010110011110111110111010100", "00000000000000000000000000000000000000000000000000", "11111100111111001010111011010111110110000111000100", "11101100110001010111110010000111110111111110010100", "11111100111011011111111011100110110111010011010100", "01111100111011011111011010010011110111110111010000", "11111100101111011111110000110110010111011111010100", "11111100011001011111011010110111110111111110010100", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "11010000001101011111111010010010100001111111010100", "00000000000000000000000000000000000000000000000000", "11001100101111011101001011110111110111111101010000", "11101100111011011101111001110011110111110110010100", "00000000000000000000000000000000000000000000000000", "11000100111110011111101010110110010111110111010100", "01111000101110011011011001110001110110101101010100"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> original = {};
    vector<string> target = {"01011100000111011000111000011001110001011101011001", "01011110000011011000101000101001110001001101011001", "01011110000011011000111000111001110001011101011001", "00001110000111010000111000111001110000011101011001", "01011110000111001000111000111001110001011101011001", "01011110000011011000111000011001110001011100011001", "01011110000111011000111000111001010000011101011000", "01001110000111010000111000111001110001011101011001", "01011110000110011000111000111001110001001101011001", "01010110000111011000111000111001110001000001011001", "01011100000111011000111000010001110101011101010001", "01011110000101011000111000111001110001011101010001", "01011110000111011000111000111001110001011101011001", "01011110000111001000111000111001110001011101011001", "01011110000111010000101000111001110001011101011001", "01011110000111011000111000110001010001011001011001", "01010110000110011000111000111001110001010101011001", "00001110000111011000111000111001110001011101011001", "00011110000111011000111000111001010000011001011001", "01011100000110011000111000111001110000011101011001", "01011110000111011000110000111001110001011101011001", "01011110000011011000111000111001110001011101011001", "01001110000111011000111000111001110001011101011001", "01011110000111011000111000110001110001011101011001", "01011110000111001000111000111001110001001101011001", "01011110000111011000111000111001110001011101011001", "01011010000111011000111000101001110001011101001001", "01011110000101011000110000111001110001011101011001", "01011110000011011000111000111001110001011101011001", "01011110000111011000111000111001110001011100011001", "01011110000111011000110000111001100000010101011001", "01011110000111011000111000111001110001011101011001", "01010110000111011000110000111001110001011101011001", "01011110000111011000011000111001110001011101011001", "01011100000111001000111000111001110001011101011001", "01011110000111011000111000111001110001011101011001", "01011010000111011000111000111001110001011101001000", "01011110000101011000111000111001110001011100011001", "01011110000111011000111000111001110001011101011001", "01011110000111011000111000111001110000011100010001", "01011110000111011000111000101001110000011101001001", "01011110000111011000111000101001110001011101011001", "01011100000011011000011000111001110001011101011001", "01011010000111011000111000111001110000001101001001", "01011110000111011000111000111001110001011101011001", "01011110000111011000111000111001110000001101011001", "01011110000111010000111000101001110001011100011001", "01011010000111011000111000011001110001011101011001", "00011110000011011000111000111001110001011101011001", "01011110000111011000011000111001110001011101011001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> original = {"10010100100010001010000111110100011010011000100101", "00110111111110100110011011111000110100011110101011", "11110100001010100100111111011100101111011111100001", "10110111010011111100010100001100111101001001001100", "11010111111101101110100110111100111111001010101111", "10101001000010101110100111111100001100001110101001", "01010000110010011100000111011100111110011000100110", "11111110010110011110010011010100011111000110001111", "01101111111101100000111110010000111110001110101011", "01010010010010010000110011010000011100011110001010", "01111111101000011110111111110100111111010111001110", "01110110111110010110110011001000100110011110001011", "11011111110001011100010001110100000100010011000100", "11010001000111011100100101000100011010011010101111", "11001101111011111010100111010100001110011010001111", "00000000000000000000000000000000000000000000000000", "01111010001110010010111111100100001110011011101110", "10011101101011101110011111110100101111000101001111", "11101110010111100010011100101100111111010001101100", "00101111011100011110000111000000000010011111001001", "11111001100011100110100111001100110001000011001001", "01010111001010010110111100111100101010011111000101", "11110111000000011000101111010100010110000000101011", "00000101101110011110110111001100110110011110001100", "11101111111000101000011101010100111100000101001111", "00000000000000000000000000000000000000000000000000", "11111001101111100000011101000100111000011110101001", "00011111000011001110100011111000011100011100100011", "00110110001001011110111011111100000110010000101000", "00000000000000000000000000000000000000000000000000", "11001000011011101110001101101100111110001001100111", "10111100011001110010111101111000110111001011100010", "10111110110100011010111000101000001001010101101111", "11111111011111110110111111111100100011011101000101", "00000000000000000000000000000000000000000000000000", "11100011111011111100111000100100011011011100101001", "11011101010010011100110001011000101111001111001001", "10101011100110111110111001000100101001011110000011", "01110011101010111100111110010000111111000101000001", "11010011111111101010011110001000100100011111100101", "10111010101011110110111011100100000111011101001101", "11111111010110000110100111111100011110010110100110", "01000111101010010110111011111100111110011000101100", "11110110011111111010110000011000101001001110001111", "00111010011111011010110000110100110110011101001110", "10010101011100111000111110011000010000011101100111", "01001001011101101110011110110100111101010111101010", "11101001110011011100111000001100110111010101100111", "11101010001010111100100100101000001101011110100111", "00000000000000000000000000000000000000000000000000"};
    vector<string> target = {"00101010100001000010111000000100010010011001010001", "01100101010101000011011110001100011000110001111011", "11111111111111111111111111111111111111111111111111", "11100001001000010010001101010110010100110101010000", "00110111010011000011111010001100100000000001110011", "01001011010000110111011000011101001101000111010001", "01000010000100111010111011000110101010011111010001", "00000010010000000110011101100111110000111111010100", "01011110001001001011011100011100100010011101111000", "10010010100101111010011010010110110100001101011100", "00011110100010110011001100100100010110010001011000", "11010000000010111010001000000101010111011111110000", "00011010010001100010101000101100000010010101010110", "00000110000100111010001000000110000000011001011000", "10010100010000101010111100001110000000000011010111", "01101111100100101110001100110101011000110001110001", "01001000000010000110101100111110001010011001010000", "00001000110110011010001100011101011011000001011100", "00111000100011000010011000001111100100011001110111", "00001011100100000010101100101101111000000111110011", "01100101000010011110011111100101011111110111110111", "01001010000111011110101110100100000001010011110000", "01000010101000000110101010110111100010000011110111", "11111111111111111111111111111111111111111111111111", "01000111100000100110011010100100111010010101011101", "10100101000001000110101000100100011101000111010101", "11111111111111111111111111111111111111111111111111", "10000000000000000011001110001100010010110001111011", "10110110100000010110101010100110100000110101010000", "00111100010010011010111010010100001111111011010100", "11000000011010100110001011000100001111000101110010", "11010101011011010010111000110100100010000001110000", "11111111111111111111111111111111111111111111111111", "00111110110110101110011001111100010010000011010100", "01000000010000011011001101010100010010110011111100", "00000000010011100010101000001110010100001001011110", "00010100100001100010001000110101100010001101011100", "00111111111001001010001001000110101000111111010001", "00010001001000001010111000010101001100000101110000", "10101010001100000110001011101100110010100011010110", "10000100110001100111011001011110110100000111111110", "01000000001100001011011101010111101110001011110100", "00111100100000100011001011001111110001100001111000", "11111111111111111111111111111111111111111111111111", "00100100000000000011011010000111010001010011110000", "00000111000100110011101101100101100010100001010011", "11011100011111000111011010001111000110011011111000", "01001011010001100010101110001111001000101011110010", "00101001000011101111101100000101100100000001011100", "11010000100000001010101010110110000010001101011000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> original = {"11111001101010101110101101111010101000111100011000", "01000000100100000110111000011011001110100110101000", "11100000100011111100110110011111000110100110111101", "01011000001010111100101010111101000100100110110110", "11010001100000110110001101001010000011100100011001", "00011101100101111000111111111110101100011000011100", "00101101100110111000111111000000101110011000001011", "10100100000111111010111110111101001101000010001111", "00000000000000000000000000000000000000000000000000", "11111001001000100000110110100010100010000100100011", "11111000101010111110100011111101101111101100011101", "11101100101100111000011101011001000111111110101111", "11111101001111110110001111001101001011101010111111", "11111101101101001000011001110011001011100000101011", "11101001100110001000111111011100101011111110111111", "11001000100111001100101010110010101111010010111110", "00111001001111101110111111111001001111111100011111", "10001100101110010000111111011011101100110010101011", "00111101101011011110010010000000001101101100011111", "10001001100101001110111111011110001111101000000110", "00011100001011011100001010110001101100111000100011", "00000000000000000000000000000000000000000000000000", "11011100101100101100101111111110001100011010011110", "10110001100000111010101011111111001100101000100101", "01010101001011001110101110111101000111110010101111", "01011100101111110010011111000001101100111110111111", "11011001101100111100011001011110101110000100101101", "01011101001110011010011111100110101010101110001110", "01110100101010111110111101100111000110110010100110", "11010001100010111110100111001111100110000000011111", "00101001100011101110101101111111101101110110101110", "00000000000000000000000000000000000000000000000000", "11111101101001101110101111100011101001111110110111", "11101001001000111110010101011010001101011100011011", "00101001000101010110001111111001101010010100111001", "11111001000011110010010111001000001110110100110010", "01110101001100111110111010011101100110011000110010", "11010101000111011100111010011001101010110000111111", "11110100101110000000110010011110001111101100010110", "11011000101101100110011100000100000110110010010101", "10110100101101110000100101001100001111111010100010", "10111100100111110010001001000101101011001100111101", "01010100101100101110000101001111100011100100111111", "00000000000000000000000000000000000000000000000000", "00111101101011010000011110111111101111111100100100", "01101100101011101110111011110000001101110110101011", "10110101001110111010010100010111101100111000010000", "00100001001000011110011101101101001100010110101110", "00000000000000000000000000000000000000000000000000", "11001001101101101110110110101110101101010100011101"};
    vector<string> target = {"01101111001011011100000100010101111000010110110101", "11111111111111111111111111111111111111111111111111", "01101101001110001001111010011000101101011000010001", "00010000011010101100101011000101000010010001111100", "10000101100100110010110010000110001100101001010111", "10111010000110110000011000101100101101001000000011", "01010000100110100111011001101101110110100110010000", "00000110010011010100110001111011111100000101010001", "11111111111111111111111111111111111111111111111111", "10000000111001010100010100001101110111110110011000", "10100011100010100100011010001101111000010101001010", "10000000011000001101000000101011101000101101100000", "01011110001010000011100110000011110000000100010100", "01101111001101011010011111010000000110010111110110", "01001011000101100110001000010101010010010111011110", "11100111110011110110100011010100110011010101110001", "00100101101110111000011100001000110010100011001000", "00101101011101111110101111011000001010000011110110", "00000110110001101001001110000101100010110100110011", "10000000000000011101001110000001010011010110110100", "00001001011000010011000010100000110010001000101100", "01101100000110101011001101001010100110011011000000", "01001001000000100100000000000000111011100011101110", "10101111001110000111110000101100100101000001011100", "11101100001000000000110000100100100010001001000010", "01010000000111110010000010100010110010000011010110", "00110011101000111010000000101100101111001101000001", "01011111011001000001110001101010001011000101100011", "10011001010010000000000111100001110010011000101100", "10100000011110111100001001000100111101001000010100", "01001110111010001010101011000001100111111100001101", "10100100000010000101111001111001010100010011001011", "00110100000011001101001010011111000110011001000101", "00001011100001001101011010111010011001101101001110", "10100110001010110010011000101000011111010110011000", "11111111111111111111111111111111111111111111111111", "01101100011101110100010100010000001001110000011100", "00010010101101011011010000010000111001110110001110", "11101011111001010000111111111011010110011000111100", "01100100010011011001001100010111100110001000101010", "01101100100110110001001000110010101111000000101110", "01111000000100101011100100111111100011001111001101", "10101010001111100100001001101110111100011001001100", "11110100010011000010011010111000111000100100110000", "10000000101001000111110001000000010101100101111000", "11111111111111111111111111111111111111111111111111", "10100110010110001010101001100100000011100010010001", "00101100000100010010000010010101111101101100010100", "00010010101000110000000001011111011100011100110000", "11111111111111111111111111111111111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> original = {};
    vector<string> target = {"01000110101101100101010111111100101000000100001011", "00111111011110001000010001110000101110101001100100", "10001111011110001101010100100011011000001010100111", "10001100011000011011001110010111101100001111010010", "01001010101000110100010110010010011101001100011000", "11111111111111111111111111111111111111111111111111", "11111110011001100100010110001100001000101001000000", "00101101101011110111001011010000111101101110000101", "00000000000000000000000000000000000000000000000000", "00011001101011001110011100001110110101001010111010", "00110010011100111100101101010100110110101110100001", "11100100010001101101000101101010011000100101001001", "10101010000111110010111010101100000100000101101100", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "00110011110001101101010011011101110001110001110010", "10001010000001001001110111110110001011010001110010", "00000000000000000000000000000000000000000000000000", "01100100101010111110100110110000100000111011111101", "10100011000110101010000110001100101011101010100001", "10110000001011010110101101011010010000100100110011", "01000101010101011001001011111010100001000100110011", "00110110101100000100111100100011111000100011100001", "10110011001001111110111100100010000000000001010111", "00100100111011011111001111111111001110111000111111", "00000000000000000000000000000000000000000000000000", "10000100111111011011100011111101101010010010101100", "10111111111110110110000111110111001101001011100010", "11101000001111100001111100101010101111110110001110", "00001010010001100011011011110101010110100110110110", "00000000000000000000000000000000000000000000000000", "11110101100011111111010101000000110111010111000100", "01011011001011100010011010010000110110100100110000", "01011010010000000001001110011110100011101110001010", "10101011111011001100100001100101000110000001100101", "01111011010010011110100011101101100001100110101010", "11100010111111011001110000010101110100111001001111", "00011000011000000011100010000101000101011101100001", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000000", "10100101000011010011000101011100111111001010001110", "00101010010101101111010101111111111001111011000010", "00001101111100111111101010011110010001110110000100", "00010110111101100000011000111100101000010101010101", "00010001000101110110001101010000111100101011011000", "00001100110101110100111111111111101101010000111110", "00101100001101111000100001101110011001001000011101", "11111111111111111111111111111111111111111111111111", "10010001011100000110000111000101110110000110111111", "10001010001100010000110010011110001000100111011010"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> original = {"1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111110111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> original = {};
    vector<string> target = {"0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000100000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> original = {"0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000100000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> original = {"1001110000000101000111101100111100101011000000101", "1100110000001011100110110110010111110010101011111", "1111010000100000110101010100101101110110011011100", "1100110100110011110101001001001000000111110111111", "0101001101111000000101011110100111110100100011110", "0100011001111000011010011110110101111100001101010", "1001111001011001011011001010111100010101111010000", "0110011111101101001011010110010111000010011101110", "1011010111100111011010111110010101001101110000010", "0110011001000100001010100010001010011000011101100", "1001011100110110010111000001000001000101100101010", "1110011111001010111101101100001001110101110000000", "0101100110100010110011110101011101110111100100000", "0000011101001100000001011111101111011100010101000", "0000101001001100110000101010011111111110000111010", "1010001000011000011011110100000001001111101001001", "1001001101011101001000111100011000101000010001011", "0010100011101010000001010011000101001000101100100", "1011110100111101100110001100111011010100101101111", "0110110111101111001110111010101100100100011001000", "0011001010001000001111000001001001011000010101001", "1010010110011111110100001100101000111000011110100", "0010100110011010001000001101100110010111001111101", "0101100010111001111100011010011110111001000111101", "1001101101000001100011110010110011001011011110011", "0001000000101110011110001001111100011100000010100", "1010010101111000011010111100100101100001001101111", "0011011011100011000000110110010010101010000100101", "1000000111101010000011110010000001001110010101101", "1111010001001100101001011000010010110110010000111", "1110110111000001111010001001111001001100011011000", "0011011110100111001001001001111100000000001101001", "0010110011000010110011111110101101111010010101110", "0010101100011000011000101100110000100000100011011", "0101110101101001101111010100011010101111110001010", "0011111101001000001011000001011111111011000111000", "0011001011111101101101001110100101100001000000000", "0100101011100110100011100110110111111111110001010", "1011110010000011000001111000011001110011111011010", "0000100000010001011000100101001010010010111011000", "1000110100000111010101111100001110111111101011000", "1111011110011001001101011110001100101001101101110", "0000001101011010110101000101010100101100010001101", "0110011001111000000010110110101101110110101100101", "0110001001110001000111111001110100100000000110001", "1110111110101010100111010111010011111001101100011", "1111110110111010001011110111110010011101111111101", "0000010000101010111100111100101010010111100000111", "0111101011011100101000100000001001011101001101011", "0011100000010000001111001100101111000011001110111"};
    vector<string> target = {"0001100011011101110011110001010110100010010101011", "0100100010010110111011001101010111010000100010001", "0001110110100101010100010001011000111111011001100", "1011000001100100001011000011101110101100100110100", "0010001111100101110010110000010110010111000100001", "0011101000111011111010011010011011001110100011011", "1000011101100111110110110000110100001101010110110", "0110000001110011011011100110011101000001101000010", "0011000000010000111110101001110001011000010101010", "0000111010100010011100000011111001100000001110000", "0111110101110011001111010000001110011010110010010", "0010111011000001111101001000010000110111110011000", "1010111110001111110111101001111110110110001111011", "0110001000100100110001100001011100111011100111011", "0010001101010101101010111100101011001100100011110", "1111001111101001011111111101111010010100100011100", "0010110011000001101111010001100011111000000101110", "0111011000111010101111110101110101101011100011100", "1101110010100110111001111011010100100100010010111", "1111111010101111110000100011011110001111101100011", "0001111010011000000010000101001101110101010010000", "1001111011000010000111011010100001010000010100000", "0001011011001011111110100010110110000010101001011", "1111111110010011111101101100010001000111100001001", "0111110111011000011001011100101000111001101001010", "1001000010111010100111101100001000010100100010101", "0001000111001100111000100001001111101010110111000", "1110100100111110111010111011111100010111110000100", "1001000010100001110110101110111001111000111101011", "0000100010010110000010110000011011111110101010010", "0010001000111011110001010110000011100001111000010", "1011110111100111101100110010110110000001000010010", "0101001001010000100100100010111111001101010111100", "0011011000101001111110000111010011011110110011110", "0111010011000011100001111101101010110111000010111", "0001000011100011011101001000101111000101100101110", "1110100111010100010000001010110110000001111010100", "0001101101101101111010010011101111001001001100101", "1100110110011000110110010111001011000100101011111", "0011000111111000001111010001111000010110001010010", "0010001101011001000111111011100110000010100001110", "1000110101111101111111011100100000001011101101100", "0010100011001001011101110111110001110110010111010", "0011011000000000001010101011111001110111101111101", "0010010111000101011110001000110010101101010011000", "1000001110111010010100001100100011101011000001001", "0100101110110010100100001011101001110110000111101", "0001100100001001111110001110001110000100000001001", "1110100000111101001000110100011100010100001010000", "1111001010011111001111100000001000101011010110001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> original = {"1001110000000101000111101100111100101011000000101", "1100110000001011100110110110010111110010101011111", "1111010000100000110101010100101101110110011011100", "1100110100110011110101001001001000000111110111111", "0101001101111000000101011110100111110100100011110", "0100011001111000011010011110110101111100001101010", "1001111001011001011011001010111100010101111010000", "0110011111101101001011010110010111000010011101110", "1011010111100111011010111110010101001101110000010", "0110011001000100001010100010001010011000011101100", "1001011100110110010111000001000001000101100101010", "1110011111001010111101101100001001110101110000000", "0101100110100010110011110101011101110111100100000", "0000011101001100000001011111101111011100010101000", "0000101001001100110000101010011111111110000111010", "1010001000011000011011110100000001001111101001001", "1001001101011101001000111100011000101000010001011", "0010100011101010000001010011000101001000101100100", "1011110100111101100110001100111011010100101101111", "0110110111101111001110111010101100100100011001000", "0011001010001000001111000001001001011000010101001", "1010010110011111110100001100101000111000011110100", "0010100110011010001000001101100110010111001111101", "0101100010111001111100011010011110111001000111101", "1001101101000001100011110010110011001011011110011", "0001000000101110011110001001111100011100000010100", "1010010101111000011010111100100101100001001101111", "0011011011100011000000110110010010101010000100101", "1000000111101010000011110010000001001110010101101", "1111010001001100101001011000010010110110010000111", "1110110111000001111010001001111001001100011011000", "0011011110100111001001001001111100000000001101001", "0010110011000010110011111110101101111010010101110", "0010101100011000011000101100110000100000100011011", "0101110101101001101111010100011010101111110001010", "0011111101001000001011000001011111111011000111000", "0011001011111101101101001110100101100001000000000", "0100101011100110100011100110110111111111110001010", "1011110010000011000001111000011001110011111011010", "0000100000010001011000100101001010010010111011000", "1000110100000111010101111100001110111111101011000", "1111011110011001001101011110001100101001101101110", "0000001101011010110101000101010100101100010001101", "0110011001111000000010110110101101110110101100101", "0110001001110001000111111001110100100000000110001", "1110111110101010100111010111010011111001101100011", "1111110110111010001011110111110010011101111111101", "0000010000101010111100111100101010010111100000111", "0111101011011100101000100000001001011101001101011", "0011100000010000001111001100101111000011001110111"};
    vector<string> target = {"1001110000000101000111101100111100101011000000101", "1100110000001011100110110110010111110010101011111", "1111010000100000110101010100101101110110011011100", "1100110100110011110101001001001000000111110111111", "0101001101111000000101011110100111110100100011110", "0100011001111000011010011110110101111100001101010", "1001111001011001011011001010111100010101111010000", "0110011111101101001011010110010111000010011101110", "1011010111100111011010111010010101001101110000010", "0110011001000100001010100010001010011000011101100", "1001011100110110010111000001000001000101100101010", "1110011111001010111101101100001001110101110000000", "0101100110100010110011110101011101110111100100000", "0000011101001100000001011111101111011100010101000", "0000101001001100110000101010011111111110000111010", "1010001000011000011011110100000001001111101001001", "1001001101011101001000111100011000101000010001011", "0010100011101010000001010011000101001000101100100", "1011110100111101100110001100111011010100101101111", "0110110111101111001110111010101100100100011001000", "0011001010001000001111000001001001011000010101001", "1010010110011111110100001100101000111000011110100", "0010100110011010001000001101100110010111001111101", "0101100010111001111100011010011110111001000111101", "1001101101000001100011110010110011001011011110011", "0001000000101110011110001001111100011100000010100", "1010010101111000011010111100100101100001001101111", "0011011011100011000000110110010010101010000100101", "1000000111101010000011110010000001001110010101101", "1111010001001100101001011000010010110110010000111", "1110110111000001111010001001111001001100011011000", "0011011110100111001001001001111100000000001101001", "0010110011000010110011111110101101111010010101110", "0010101100011000011000101100110000100000100011011", "0101110101101001101111010100011010101111110001010", "0011111101001000001011000001011111111011000111000", "0011001011111101101101001110100101100001000000000", "0100101011100110100011100110110111111111110001010", "1011110010000011000001111000011001110011111011010", "0000100000010001011000100101001010010010111011000", "1000110100000111010101111100001110111111101011000", "1111011110011001001101011110001100101001101101110", "0000001101011010110101000101010100101100010001101", "0110011001111000000010110110101101110110101100101", "0110001001110001000111111001110100100000000110001", "1110111110101010100111010111010011111001101100011", "1111110110111010001011110111110010011101111111101", "0000010000101010111100111100101010010111100000111", "0111101011011100101000100000001001011101001101011", "0011100000010000001111001100101111000011001110111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> original = {"1111111111111111111111111111111011111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    vector<string> original = {"0100110001011100001010010100101010010110110101000", "1111111111111111111111111111111111111111111111111", "0000100011000100001110010100100010101011110011001", "1110100101000110010011010101000100100010110001101", "0001100101000101010010011100000000001010110001000", "0000100001000100100110010100000101000010110001000", "1111111111111111111111111111111111111111111111111", "0010100001111100001110010101100000000011110011010", "0100100001000100000110110101000000001110110101000", "0000110001000110001010010100001001000010111111000", "1111111111111111111111111111111111111111111111111", "0100100001000110000010010100000001010111110011010", "0010100001000100000010110100100010110010110001000", "0100110001011101010010110101000100001010110001010", "1000100101000100100010010110000001100011110101000", "1111111111111111111111111111111111111111111111111", "0000100101100100010010110100010010100010110101110", "0110100111000100110010110100000000000010110001000", "1111111111111111111111111111111111111111111111111", "0010100011000100000010010100010000000110110001000", "1111111111111111111111111111111111111111111111111", "0000100001100100000010011100000000001110110011001", "0000100001001100100010011110010000100010110101010", "0000100001011111110010010100001000010010110001110", "0001100001100110100010010100010000100010110001000", "0001110101000100000110010100010100000010110101000", "1111111111111111111111111111111111111111111111111", "0000110111000100000010011110001000011010110001000", "1000100001000100101010110101000000000010111001000", "0010100001100100000011010100110001000110110011000", "0000110011000101000010010100100011010011111001011", "0100100101100101000010111100100000000010110001000", "0110100011000110000010010100000010000011111001001", "1111111111111111111111111111111111111111111111111", "1000100101000110011110010110001010010011110001000", "0000100001000100001010010110000000000011111001000", "1111111111111111111111111111111111111111111111111", "0110100001110100010010010101101101000010111011100", "1100100101000100011010010100010000001110111101000", "1011101001100110001010111100000000001011110001000", "0010100001000101011010010110000000100010111001111", "1111111111111111111111111111111111111111111111111", "0000110001101100001110010110111000000111111001001", "1010100011000100100010010100001000000011110101100", "0000100001000110000010010100010000011010110001000", "0000100011010110001010010100011001011010110001000", "0000100001010100110010011100001010000010110111100", "0010101001100100001110010110000001101110110001111", "0010100101001100000110010100000100000010110001000", "0001101001000100000010011110000100000110110001010"};
    vector<string> target = {"0000001110000001100000001000000010000001110000011", "0000001110000001100001001011011010000001100000001", "0000001110010111100000111000000010001001111110001", "0001001110001101100110101001000010000001100100001", "0000001110000001100010001100000010000101100000001", "0000101110000001100110001101001011100001101000001", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0010001111111001110001001100011010101001101000001", "0000101110000001110010001011010011101001100100011", "0000001110100011101000001110001011010001100000001", "0000001110010001100001001011001010000001100101001", "0110001110000001100000101000001011100001111010001", "0000101110100001101100111000000010000001100000101", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000001110010001101000101100110011100111100000001", "0100011110100011110100101000000010000001100000001", "1100001111001001100111001001000010101101100101011", "0110101110001001100001001010000010001011110000001", "1001011110100001100000001000100010000001100010011", "0001001110000001100000011010001010000111100000001", "0000001110001001110000001010110110000001101000011", "1111111111111111111111111111111111111111111111111", "1000001110000001110000111000000010010011100010001", "0111001110000101101000011000000010000101110000001", "1111111111111111111111111111111111111111111111111", "0000101110010101100010001000001011100001100100011", "1100001110010001101010011110000110100001100000101", "1001001110100001100101101000000010000001100000001", "0010101110100011100010001100000010000011100000001", "0101001110000001100000001100001010000111100000001", "1000001110100101101000001100000011000001101100011", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0100001110000011100000001000001010000111100000001", "0000001110000101111100001000000010111001100011001", "1000011110001001101000101100010010000011100001001", "0000111110000001100000001001000010000001100010101", "0000001111000011110000011010010011010001100000001", "1001011110000001100000001000010010110011110000011", "1000001111100011100010011000010110100001110001001", "0000011110000111110001011101010110000001100101001", "0001001110000111110110101110001011000001100100001", "1111111111111111111111111111111111111111111111111", "0000001110100101101100111010000010010001101010101", "0000001110010011101011001000101011000001100000001", "0010011110000001110101101000000011100001100010001", "1000101110010111100101011000000011000011100100001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    vector<string> original = {"1101110101011100011101111100011110011011000111010", "0000000000000000000000000000000000000000000000000", "1101010101001110011101111100010001100111001110010", "0100110101101100010000011000011010111001101111010", "1111111100011101000111110101001011111101101101011", "1111110101111111011010111101001110010111100000001", "0111011001101111000000100001011001001111111101011", "1001010001011011010111111101011110111110111000011", "0110101001110001010110111000011111011110010011001", "1110111101011011011101101100001001011100000111001", "0100010100011010010111101100010110010011111100000", "1011101101111111000110111101010111011111111000001", "1111101101111110000111111100000110001111110111000", "1011000100000101011100001101011000001001101010011", "0000110100010100011111111100010101100111001001000", "1001000000111101010111010100011111000011010110000", "1111000000010011011111011101011111110111011110011", "0010100001101110010011111101010011011111111111010", "1001110001101110011101000101011100111100111011011", "1101110101111001000101111100000111000101100100011", "1011010101000101011101001100010111100001101000011", "1101000100000110010111101101011001011111111110011", "0101101000001011011000111101001011101101001110001", "1101111100011001000110111101011001011010011100010", "1011101100011111001010110101011101110111111010011", "0011111001011010001101101001010111100010001011000", "1111101101011010011111110100001011111101100011010", "0000000000000000000000000000000000000000000000000", "0110011001111110001100110000010101011100110111001", "1001111001010111001010111100011011111111110010010", "1101101100110111000110111001001101010111101111011", "0111111001011111001010001100011011111011011100011", "0001111000110010010101110100011011111100101010010", "0011111000010011011111011000001011110000111010001", "0000000000000000000000000000000000000000000000000", "0001011100100111011011010000011000010001011110011", "0000000000000000000000000000000000000000000000000", "1101010101110110011011111101010110000011101101011", "1011100101001111001111010100011100101101000101010", "0011110001110011011001111000001010010010111011001", "0111101101011111010001100000011111110101111110001", "1001111000111010011101111100010000011010101110000", "1011010101101111001010111100001110000000101111011", "1111100001000001011011010100001010110101111100000", "1110001101111011011111010100010001111100111010010", "0100011101100101010111101101000111000010010110011", "0001101001110101010101101001011010111110100111010", "1100000000010100001010011001001111100110110111010", "0000000000000000000000000000000000000000000000000", "1110110000100110011011111100010000001011111011000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    vector<string> original = {};
    vector<string> target = {"0001000111000010000000011010001011000111100011111", "0110001010011101000000010000101011001110010001010", "0101011001001100011011100100101011001110000001000", "0110101110001000010001100111001011001110101111100", "0001000010100000001111011001001011111100000111001", "1110100000010101011000111010111011101110110111010", "1101000010010100101000001100001011001110110001000", "0001101001000111100101000010001111100110000001000", "1111011100010101011000100110111011001101000011110", "0010100010101010100000100111101111111111000101000", "1010000110000001001000011000101111010110010001111", "0011100111100000011101001010001111011110000101011", "1111111111111111111111111111111111111111111111111", "1000000011111100001010000100001011000100111111101", "1000111010001010110000101100011011010101000111001", "1010011001110001000100110101101011101100011101011", "0000010000001000010010100000101011111100100011011", "1010111100001001000101000010001011100101011101000", "1100100011000100100101000110001011010101100001100", "0000111110000000001000010001001111000110110001111", "1110100011010011000001110000101011100100100011101", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000101110010000011111000010001011010101010001100", "1010010011100100100010101000011111001100010001000", "0010011000100110011000100000111111100100000101010", "0110000001001010100010111000011011110111010101000", "1111111111111111111111111111111111111111111111111", "0100011100000100011001000100011111001101010111111", "0111011110011011110010100001001011100110101111100", "0000000111100110100001000000001011110110010001011", "0011011000001100000110100000111011010111001011000", "0011001010010000100000010011101011010100100001010", "0010000011100110110001010010001011101101101101010", "0001000110100010001100010000111011000100011001000", "0111001001010100100000111000011111000110001101100", "0100101101111011101000001010001011101100000101000", "1111111111111111111111111111111111111111111111111", "0000010001000010111100000001101011100101100011100", "1110010001111100011010000110011011100100001001100", "1010101010110001000000100011001011110110100001010", "1101001010100001001011111100001011001100100101110", "0001110000110001000011110100011011010100000001111", "0100000110100000100000110100101011110101001001000", "1000000011100010101010110001001011000100100011000", "1100001001100010110110011000111011111110100011000", "0101000111101010010110010110001011011110011011100", "1010010100010011000001010101101111100100010111110", "0010000001101100010000010011001111011101001001100", "1010100001111101000100101001101111000100001011000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test160() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 160: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 160: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test161() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 161: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 161: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test162() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 162: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 162: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test163() {
    vector<string> original = {};
    vector<string> target = {"1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101", "0101010101010101010101010101010101010101010101010", "1010101010101010101010101010101010101010101010101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 163: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 163: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test164() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 164: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 164: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test165() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 165: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 165: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test166() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 166: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 166: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test167() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 167: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 167: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test168() {
    vector<string> original = {"1001010111000100110111111111010111110110011010110", "1111111011100100101100000001010000001001011100011", "1100001100011111011011001010010101110001110101010", "0100110011011000010011001111011001111101100100001", "1101000010100101110100011011110110101100111100011", "0101001111011011001010111101111100111010000011010", "0110001110001101011000101100011001110001100001100", "1001000011000010011101010010011100111100110000011", "0001111011000110111011000100011001010100010111101", "1010101111011000000010001001011110001000100111101", "0001110100111110111111101011011011101001101001000", "0111010011001001010010001001111101001010001000100", "0011100110011111010100010110010101011000110110011", "0101111111111011110010000110100100101011001100111", "0111100101101100110000010110010101101101010001011", "1100000011101111000010111011011001100010100110101", "0100101111010010000000011110010100111010111110001", "0111110100001110110100011100100110011000100001110", "1010100111111010100000011011111100000110100010011", "0101000010010101000010111001000010001001101111001", "0000111000011011001000110000100110100010110011000", "0101100101100110101111001010101110001111111011111", "0110110110001101010000010001110100100001101110001", "0111010010110010010000000111100001000011101000010", "1100101001000001011000110010101010000110101110110", "1010110101111000000101101111110100111011000011000", "1000111101100111001011111111010001110100011100101", "0000010010010011000010110000100110110000010001011", "0001110001100000000011001000110110010011011010110", "1100100110000111111001110101010110100001001100111", "0111011111111110001011011111000011111000101100100", "0101111001101101011011111110100000001011100111101", "1111101111110000101100000101111001011110000111100", "0010101000101010111010011000101111101010000000001", "0100010111011001100010010101101000110000100010001", "1100001010100011010011101000110100110111010101010", "1101101000100011101001110101100000100001001100111", "0101110101110000100100100010101101001100001100101", "1101011000110110100111011101111111111110000111110", "1100011111000110101111001001000011011011001110011", "0101111111111001110110010000110110110101010101001", "0010000000100110011010010100001001001000000000001", "0110001100001011110101011101001000110011101011001", "1010100100101110001101000010110000010011111101010", "0011111000010010101110010001010010110001100110000", "0000110101111101001111101110010011101010111101110", "1011100011000010111010000000110111110011000010000", "0100110101011111011101100110111101101111100001000", "0101111000001100011101001000000110101101001001011"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 168: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 168: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test169() {
    vector<string> original = {"1001010111000100110111111111010111110110011010110", "1111111011100100101100000001010000001001011100011", "1100001100011111011011001010010101110001110101010", "0100110011011000010011001111011001111101100100001", "1101000010100101110100011011110110101100111100011", "0101001111011011001010111101111100111010000011010", "0110001110001101011000101100011001110001100001100", "1001000011000010011101010010011100111100110000011", "0001111011000110111011000100011001010100010111101", "1010101111011000000010001001011110001000100111101", "0001110100111110111111101011011011101001101001000", "0111010011001001010010001001111101001010001000100", "0011100110011111010100010110010101011000110110011", "0101111111111011110010000110100100101011001100111", "0111100101101100110000010110010101101101010001011", "1100000011101111000010111011011001100010100110101", "0100101111010010000000011110010100111010111110001", "0111110100001110110100011100100110011000100001110", "1010100111111010100000011011111100000110100010011", "0101000010010101000010111001000010001001101111001", "0000111000011011001000110000100110100010110011000", "0101100101100110101111001010101110001111111011111", "0110110110001101010000010001110100100001101110001", "0111010010110010010000000111100001000011101000010", "1100101001000001011000110010101010000110101110110", "1010110101111000000101101111110100111011000011000", "1000111101100111001011111111010001110100011100101", "0000010010010011000010110000100110110000010001011", "0001110001100000000011001000110110010011011010110", "1100100110000111111001110101010110100001001100111", "0111011111111110001011011111000011111000101100100", "0101111001101101011011111110100000001011100111101", "1111101111110000101100000101111001011110000111100", "0010101000101010111010011000101111101010000000001", "0100010111011001100010010101101000110000100010001", "1100001010100011010011101000110100110111010101010", "1101101000100011101001110101100000100001001100111", "0101110101110000100100100010101101001100001100101", "1101011000110110100111011101111111111110000111110", "1100011111000110101111001001000011011011001110011", "0101111111111001110110010000110110110101010101001", "0010000000100110011010010100001001001000000000001", "0110001100001011110101011101001000110011101011001", "1010100100101110001101000010110000010011111101010", "0011111000010010101110010001010010110001100110000", "0000110101111101001111101110010011101010111101110", "1011100011000010111010000000110111110011000010000", "0100110101011111011101100110111101101111100001000", "0101111000001100011101001000000110101101001001011"};
    vector<string> target = {"1001010111000100110111111111010111110110011010110", "1111111011100100101100000001010000001001011100011", "1100001100011111011011001010010101110001110101010", "0100110011011000010011001111011001111101100100001", "1101000010100101110100011011110110101100111100011", "0100001111011011001010111101111100111010000011010", "0110001110001101011000101100011001110001100001100", "1001000011000010011101010010011100111100110000011", "0001111011000110111011000100011001010100010111101", "1010101111011000000010001001011110001000100111101", "0001110100111110111111101011011011101001101001000", "0111010011001001010010001001111101001010001000100", "0011100110011111010100010110010101011000110110011", "0101111111111011110010000110100100101011001100111", "0111100101101100110000010110010101101101010001011", "1100000011101111000010111011011001100010100110101", "0100101111010010000000011110010100111010111110001", "0111110100001110110100011100100110011000100001110", "1010100111111010100000011011111100000110100010011", "0101000010010101000010111001000010001001101111001", "0000111000011011001000110000100110100010110011000", "0101100101100110101111001010101110001111111011111", "0110110110001101010000010001110100100001101110001", "0111010010110010010000000111100001000011101000010", "1100101001000001011000110010101010000110101110110", "1010110101111000000101101111110100111011000011000", "1000111101100111001011111111010001110100011100101", "0000010010010011000010110000100110110000010001011", "0001110001100000000011001000110110010011011010110", "1100100110000111111001110101010110100001001100111", "0111011111111110001011011111000011111000101100100", "0101111001101101011011111110100000001011100111101", "1111101111110000101100000101111001011110000111100", "0010101000101010111010011000101111101010000000001", "0100010111011001100010010101101000110000100010001", "1100001010100011010011101000110100110111010101010", "1101101000100011101001110101100000100001001100111", "0101110101110000100100100010101101001100001100101", "1101011000110110100111011101111111111110000111110", "1100011111000110101111001001000011011011001110011", "0101111111111001110110010000110110110101010101001", "0010000000100110011010010100001001001000000000001", "0110001100001011110101011101001000110011101011001", "1010100100101110001101000010110000010011111101010", "0011111000010010101110010001010010110001100110000", "0000110101111101001111101110010011101010111101110", "1011100011000010111010000000110111110011000010000", "0100110101011111011101100110111101101111100001000", "0101111000001100011101001000000110101101001001011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 169: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 169: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test170() {
    vector<string> original = {};
    vector<string> target = {"1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111", "1111111111111111111110111111111111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 170: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 170: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test171() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 171: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 171: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test172() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 172: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 172: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test173() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 173: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 173: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test174() {
    vector<string> original = {"0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 174: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 174: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test175() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 175: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 175: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test176() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 176: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 176: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test177() {
    vector<string> original = {};
    vector<string> target = {"1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000001000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111011111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 177: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 177: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test178() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 178: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 178: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test179() {
    vector<string> original = {"1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010001110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000", "1101010111001010010011110110100110101011001001000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 179: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 179: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test180() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 180: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 180: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test181() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 181: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 181: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test182() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 182: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 182: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test183() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 183: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 183: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test184() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 184: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 184: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test185() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 185: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 185: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test186() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 186: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 186: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test187() {
    vector<string> original = {"0000000000000000000000000000000000000000000000000", "0101110110101001010111110000111111000011011110110", "0101101111000100000111100110101001100011010111101", "0100110011111101010111001011111111010011001110110", "0100011001001100000001101111100011101001011010110", "0000100001110011001101110111111101100010011001000", "0101110011101011010111110111011101110010000011110", "0101101110001100000111011111000011000011001101100", "0101101001011111011010101110001110100011011101100", "0100011010011011010011101110011000010011011100110", "0100111101111111000010110101110011001001000111101", "0101111010011111001101100011111011110001010100011", "0000111110001001010100000000111011111000001011101", "0000001111001111011110111111101100000011010111100", "0100111010101111001110110001011101100011001110111", "0001111110011111011110100111011111101001001111000", "0100110011111001010000100010001110111011000100011", "0100011110011011010111001010111011111010001000100", "0001111110111101011101110111011101001011011111111", "0101001100111001001101010101011101110010011110111", "0001101110101110001011100011011010011010010001000", "0000000000000000000000000000000000000000000000000", "0101111111011111011100010100010101010000011101111", "0100111010010110000111111100011111111001010011101", "0101100001100011001000011011100101010011011111010", "0101110101110001011111110101011110100001011010001", "0100011100000011011011010111111111101010010011000", "0101011111001001001010101001100101000011010111111", "0100010011001001011111101111101101111010011001110", "0001011110011011000011110110001100011010011101010", "0100011111001000011011001011111010110001001101001", "0101001011001111010010111100111101100011011001001", "0100101011111111010010111111010110100011001111101", "0101111011011111011011010101111110111010010010111", "0001100111110101000101010111111111111000011101010", "0101100010011001001110101101011111101000011111100", "0101000101010101011100111000111110010000011110001", "0000111000011001011110001110111110001011000110100", "0101001011101110010111100110001000111010001011010", "0100001101110100001111110111101110011011011111001", "0101111011011011001110111101110110111011011110100", "0001010110100100001011101000010010101010010011011", "0001111110011101011110101011110001110011011010001", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000111111011010001100111110111111111010011100110", "0100110100011000011101011010111001110010011111011", "0100111110010001001010100110011011010011010111111", "0000000000000000000000000000000000000000000000000"};
    vector<string> target = {"0011100001011110000001000010011010101000000101100", "1010101101000100001011000011001100101011000100100", "0011001110000100101000000000001100101011000100000", "0011000000111100110100010001001011100100010101001", "0011011111001100111100101101001000111000000100001", "0110101000010100101001011101001000101000000110101", "0010110100010100100000100011011000100010011111010", "1110000101001100011010010001001111111000000100011", "0010100100100101011000011000011101110011100110010", "0010010110010101100010010110111100111001010100001", "0110110110001111000100010000011000111011100100001", "1111111111111111111111111111111111111111111111111", "0110010101000100011010001110011010110100110111100", "1011011111101101000010000010011100100000100101100", "1010000001000110101100010001101001110101000110010", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111111111", "0010100000010100100111001000001011100101110101110", "0011101011111111011001000010001011110100000101000", "0011010010001110010010000100011010110111110100000", "1010110000011110011000010010101000111000110100110", "1010110101001100110100101010101010100110010111110", "0011000011000110110010011001011000111100111111000", "0011001111000101000110111110101010101100101110110", "0010110110000111001001011011101101111010011100101", "0011010000101111100101100000101111110010000101010", "0010100011000101001001000000011101101010110100111", "0110000100110100100000000001101010100100100100010", "1011101000110100001111011100101001110101111110011", "1110000000010101000000010010001100110000011101000", "1111111111111111111111111111111111111111111111111", "1011001000100111101111111100011110100001001101101", "1010110001111101010010111100001001100000000110100", "1010000000100100010001100001011000110100100111100", "1010100100010100010000101111101000101000000110111", "1010001001000100100001010000001000100010000110111", "1010001011011110010010001111111001110100110100010", "1011001000000100000111000010011111101010000100000", "0111101111000101100111001010001110110100100100101", "1110100000010100100011000001001010110110001101010", "0110000000000100011100010100011010100001101101011", "0011010100101111010010101010001111110010000101101", "0011100110001110001111011001001000100010011100010", "0110100100000100101001001101011100100010000110001", "0011100110010110011101110001111000100101101100000", "0110100000000100101000100000101101100010000101000", "1111111111111111111111111111111111111111111111111", "1110001100011100000001100010111101111111010110001", "0010000000011110110001011111011001101000000101101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 187: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 187: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test188() {
    vector<string> original = {"00000000000000000000000000000000000000000000000000"};
    vector<string> target = {"00000000000000000000000000000000000000000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 188: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 188: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test189() {
    vector<string> original = {"00000000000000000000000000000000000000000000000000"};
    vector<string> target = {"11111111111111111111111111111111111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 189: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 189: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test190() {
    vector<string> original = {"11111111111111111111111111111111111111111111111111"};
    vector<string> target = {"00000000000000000000000000000000000000000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 190: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 190: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test191() {
    vector<string> original = {"11111111111111111111111111111111111111111111111111"};
    vector<string> target = {"11111111111111111111111111111111111111111111111111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 191: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 191: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test192() {
    vector<string> original = {"01010101010101010101010101010101010101010101010101"};
    vector<string> target = {"01010101010101010101010101010101010101010101010101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 192: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 192: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test193() {
    vector<string> original = {"01010101010101010101010101010101010101010101010101"};
    vector<string> target = {"10101010101010101010101010101010101010101010101010"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 193: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 193: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test194() {
    vector<string> original = {"00000010000000000000000000000000000000000000000000"};
    vector<string> target = {"00000000000000000000000000100000000000000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 194: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 194: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test195() {
    vector<string> original = {"00000010000000000000000000000000000000000000000000"};
    vector<string> target = {"00000010000000000000000000000000000100000000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 195: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 195: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test196() {
    vector<string> original = {"10011011000011101010111110111011000001010010001001"};
    vector<string> target = {"11111010010110101000000111110000011001101100010011"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 196: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 196: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test197() {
    vector<string> original = {"10011011000011101010111110111011000001010010001001"};
    vector<string> target = {"10011011000011101010101110111011000001010010001001"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 197: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 197: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test198() {
    vector<string> original = {"0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1"};
    vector<string> target = {"0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 198: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 198: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test199() {
    vector<string> original = {"0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1"};
    vector<string> target = {"1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0", "1", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 199: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 199: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test200() {
    vector<string> original = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0"};
    vector<string> target = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 200: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 200: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test201() {
    vector<string> original = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0"};
    vector<string> target = {"0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 201: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 201: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test202() {
    vector<string> original = {"1", "0", "0", "1", "0", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "0"};
    vector<string> target = {"1", "0", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "1", "0", "0", "0", "0", "0", "1", "1", "0", "0", "1", "0", "1", "1", "1", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 202: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 202: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test203() {
    vector<string> original = {"1", "0", "0", "1", "0", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "0"};
    vector<string> target = {"1", "0", "0", "1", "0", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "0"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 203: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 203: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test204() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 204: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 204: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test205() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 205: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 205: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test206() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 206: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 206: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test207() {
    vector<string> original = {"0110", "1001", "0110"};
    vector<string> target = {"1111", "0110", "0000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 207: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 207: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test208() {
    vector<string> original = {"0000", "1111", "0000"};
    vector<string> target = {"1111", "0000", "1111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 208: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 208: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test209() {
    vector<string> original = {"0000", "1111", "0000"};
    vector<string> target = {"1111", "0000", "1111"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 209: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 209: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test210() {
    vector<string> original = {"00", "00"};
    vector<string> target = {"00", "00"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 210: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 210: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test211() {
    vector<string> original = {"01", "11"};
    vector<string> target = {"11", "10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 211: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 211: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test212() {
    vector<string> original = {"001"};
    vector<string> target = {"000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 212: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 212: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test213() {
    vector<string> original = {"1111111111"};
    vector<string> target = {"0000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 213: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 213: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test214() {
    vector<string> original = {"0"};
    vector<string> target = {"1"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 214: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 214: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test215() {
    vector<string> original = {"10", "00"};
    vector<string> target = {"11", "10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 215: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 215: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test216() {
    vector<string> original = {"101", "000", "111"};
    vector<string> target = {"110", "101", "100"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 216: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 216: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test217() {
    vector<string> original = {"111", "000"};
    vector<string> target = {"101", "100"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 217: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 217: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test218() {
    vector<string> original = {"10"};
    vector<string> target = {"01"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 218: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 218: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test219() {
    vector<string> original = {"111000111000", "111111111111", "111000101101"};
    vector<string> target = {"111111111111", "111111111111", "100000000000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 219: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 219: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test220() {
    vector<string> original = {"111", "000", "100"};
    vector<string> target = {"000", "110", "110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 220: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 220: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test221() {
    vector<string> original = {"0110", "1011", "0110"};
    vector<string> target = {"1101", "0110", "1101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 221: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 221: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test222() {
    vector<string> original = {"0110", "1001", "0110"};
    vector<string> target = {"0000", "1011", "1110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 222: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 222: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test223() {
    vector<string> original = {"01"};
    vector<string> target = {"10"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 223: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 223: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test224() {
    vector<string> original = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 224: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 224: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test225() {
    vector<string> original = {"11", "00"};
    vector<string> target = {"00", "11"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 225: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 225: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test226() {
    vector<string> original = {"010", "111", "111"};
    vector<string> target = {"101", "111", "101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 226: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 226: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test227() {
    vector<string> original = {"000", "111", "000"};
    vector<string> target = {"110", "100", "000"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 227: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 227: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test228() {
    vector<string> original = {"010111", "101111"};
    vector<string> target = {"010111", "100101"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 228: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 228: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test229() {
    vector<string> original = {"000", "111"};
    vector<string> target = {"111", "110"};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 229: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 229: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test230() {
    vector<string> original = {};
    vector<string> target = {};
    P8XMatrixTransformation* pObj = new P8XMatrixTransformation();
    clock_t start = clock();
    string result = pObj->solve(original, target);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 230: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 230: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    test160() == 0 ? ++passed : ++failed;
    test161() == 0 ? ++passed : ++failed;
    test162() == 0 ? ++passed : ++failed;
    test163() == 0 ? ++passed : ++failed;
    test164() == 0 ? ++passed : ++failed;
    test165() == 0 ? ++passed : ++failed;
    test166() == 0 ? ++passed : ++failed;
    test167() == 0 ? ++passed : ++failed;
    test168() == 0 ? ++passed : ++failed;
    test169() == 0 ? ++passed : ++failed;
    test170() == 0 ? ++passed : ++failed;
    test171() == 0 ? ++passed : ++failed;
    test172() == 0 ? ++passed : ++failed;
    test173() == 0 ? ++passed : ++failed;
    test174() == 0 ? ++passed : ++failed;
    test175() == 0 ? ++passed : ++failed;
    test176() == 0 ? ++passed : ++failed;
    test177() == 0 ? ++passed : ++failed;
    test178() == 0 ? ++passed : ++failed;
    test179() == 0 ? ++passed : ++failed;
    test180() == 0 ? ++passed : ++failed;
    test181() == 0 ? ++passed : ++failed;
    test182() == 0 ? ++passed : ++failed;
    test183() == 0 ? ++passed : ++failed;
    test184() == 0 ? ++passed : ++failed;
    test185() == 0 ? ++passed : ++failed;
    test186() == 0 ? ++passed : ++failed;
    test187() == 0 ? ++passed : ++failed;
    test188() == 0 ? ++passed : ++failed;
    test189() == 0 ? ++passed : ++failed;
    test190() == 0 ? ++passed : ++failed;
    test191() == 0 ? ++passed : ++failed;
    test192() == 0 ? ++passed : ++failed;
    test193() == 0 ? ++passed : ++failed;
    test194() == 0 ? ++passed : ++failed;
    test195() == 0 ? ++passed : ++failed;
    test196() == 0 ? ++passed : ++failed;
    test197() == 0 ? ++passed : ++failed;
    test198() == 0 ? ++passed : ++failed;
    test199() == 0 ? ++passed : ++failed;
    test200() == 0 ? ++passed : ++failed;
    test201() == 0 ? ++passed : ++failed;
    test202() == 0 ? ++passed : ++failed;
    test203() == 0 ? ++passed : ++failed;
    test204() == 0 ? ++passed : ++failed;
    test205() == 0 ? ++passed : ++failed;
    test206() == 0 ? ++passed : ++failed;
    test207() == 0 ? ++passed : ++failed;
    test208() == 0 ? ++passed : ++failed;
    test209() == 0 ? ++passed : ++failed;
    test210() == 0 ? ++passed : ++failed;
    test211() == 0 ? ++passed : ++failed;
    test212() == 0 ? ++passed : ++failed;
    test213() == 0 ? ++passed : ++failed;
    test214() == 0 ? ++passed : ++failed;
    test215() == 0 ? ++passed : ++failed;
    test216() == 0 ? ++passed : ++failed;
    test217() == 0 ? ++passed : ++failed;
    test218() == 0 ? ++passed : ++failed;
    test219() == 0 ? ++passed : ++failed;
    test220() == 0 ? ++passed : ++failed;
    test221() == 0 ? ++passed : ++failed;
    test222() == 0 ? ++passed : ++failed;
    test223() == 0 ? ++passed : ++failed;
    test224() == 0 ? ++passed : ++failed;
    test225() == 0 ? ++passed : ++failed;
    test226() == 0 ? ++passed : ++failed;
    test227() == 0 ? ++passed : ++failed;
    test228() == 0 ? ++passed : ++failed;
    test229() == 0 ? ++passed : ++failed;
    test230() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22884284&rd=14552&pm=11056
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
class P8XMatrixTransformation {
public:
  string solve(vector <string>, vector <string>);
};
 
string P8XMatrixTransformation::solve(vector <string> original, vector <string> target) {
  int oo=0,oz=0,to=0,tz=0 ,i , j;
  for(i = 0 ; i < original.size() ; i++)
  {
    for(j = 0 ; j < original[i].size() ; j++)
    {
      if(original[i][j] == '0')
        oz++;
      else oo++;
    }
  }  
  for(i = 0 ; i < target.size() ; i++)
  {
    for(j = 0 ; j < target[i].size() ; j++)
    {
      if(target[i][j] == '0')
        tz++;
      else to++;
    }
  }
  if(to==oo && tz==oz) return "YES";
  else return "NO";
}

********************************************************************************
*******************************************************************************/