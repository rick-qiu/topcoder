/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=3057
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Reconstruct {
public:
    vector<string> findPoints(vector<string> dists);
};

vector<string> Reconstruct::findPoints(vector<string> dists) {
    vector<string> ret;
    return ret;
}


int test0() {
    vector<string> dists = {"0 1", "1 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 0 1"};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> dists = {"0 2 2", "2 0 2", "2 2 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 1 1", "-1 0 1"};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> dists = {"0 33 25", "33 0 84", "25 84 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 4 4", "3 -4 0"};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> dists = {"0 15", "15 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> dists = {"0 233 145 89 74 19 116 70 54 149 149 122 29 121 81 166 155 66 89 98", "233 0 480 414 173 286 441 251 413 490 698 245 146 622 580 449 290 309 164 149", "145 480 0 158 149 134 433 155 69 186 130 341 258 134 116 41 218 21 308 117", "89 414 158 0 65 26 333 285 25 8 242 419 104 242 102 85 434 115 350 131", "74 173 149 65 0 45 362 194 76 89 339 306 57 315 209 84 297 74 225 18", "19 286 134 26 45 0 195 149 21 62 178 237 38 162 74 109 264 69 186 89", "116 441 433 333 362 195 0 154 270 441 209 98 161 165 185 534 227 314 113 410", "70 251 155 285 194 149 154 0 174 377 153 38 145 113 171 266 17 86 35 154", "54 413 69 25 76 21 270 174 0 49 123 310 113 123 41 56 289 46 265 110", "149 490 186 8 89 62 441 377 49 0 306 539 160 314 146 85 542 155 458 163", "149 698 130 242 339 178 209 153 123 306 0 261 306 4 34 251 222 141 282 345", "122 245 341 419 306 237 98 38 310 539 261 0 171 201 281 474 45 224 9 276", "29 146 258 104 57 38 161 145 113 160 306 171 0 266 186 229 246 139 114 99", "121 622 134 242 315 162 165 113 123 314 4 201 266 0 38 259 174 129 222 317", "81 580 116 102 209 74 185 171 41 146 34 281 186 38 0 165 278 105 272 249", "166 449 41 85 84 109 534 266 56 85 251 474 229 259 165 0 369 50 405 82", "155 290 218 434 297 264 227 17 289 542 222 45 246 174 278 369 0 149 54 225", "66 309 21 115 74 69 314 86 46 155 141 224 139 129 105 50 149 0 185 52", "89 164 308 350 225 186 113 35 265 458 282 9 114 222 272 405 54 185 0 201", "98 149 117 131 18 89 410 154 110 163 345 276 99 317 249 82 225 52 201 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 8 12", "9 0 -8", "-2 6 -7", "3 8 -1", "-1 3 -3", "-6 -8 4", "6 -5 3", "1 2 -7", "-2 8 -9", "2 -9 -8", "3 -7 8", "-2 4 3", "2 -9 -6", "-1 -4 -8", "7 6 -9", "9 -7 5", "7 1 -4", "3 -4 8", "7 7 0"};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> dists = {"0 118 83 145 45 166 123 22 51 2 45 98 17 117 90 14 10 110 113 146", "118 0 381 227 155 278 273 224 281 130 97 350 185 201 140 84 146 382 125 360", "83 381 0 182 86 157 264 29 84 77 194 21 38 170 157 153 61 17 206 161", "145 227 182 0 36 89 506 179 326 129 298 97 90 6 51 179 85 125 42 163", "45 155 86 36 0 57 314 59 166 41 138 45 18 34 19 83 17 61 30 155", "166 278 157 89 57 0 561 142 333 172 241 78 109 123 26 250 122 84 43 374", "123 273 264 506 314 561 0 161 52 129 114 373 206 430 417 93 189 381 458 277", "22 224 29 179 59 142 161 0 41 26 73 54 17 161 108 68 26 54 149 184", "51 281 84 326 166 333 52 41 0 53 90 161 78 278 257 69 81 161 306 181", "2 130 77 129 41 172 129 26 53 0 65 90 13 99 94 14 6 104 115 114", "45 97 194 298 138 241 114 73 90 65 0 227 104 270 153 53 91 233 182 341", "98 350 21 97 45 78 373 54 161 90 227 0 35 101 90 174 56 2 125 170", "17 185 38 90 18 109 206 17 78 13 104 35 0 74 65 53 3 45 90 117", "117 201 170 6 34 123 430 161 278 99 270 101 74 0 65 137 65 131 56 113", "90 140 157 51 19 26 417 108 257 94 153 90 65 65 0 136 62 106 5 276", "14 84 153 179 83 250 93 68 69 14 53 174 53 137 136 0 34 194 149 140", "10 146 61 85 17 122 189 26 81 6 91 56 3 65 62 34 0 70 81 110", "110 382 17 125 61 84 381 54 161 104 233 2 45 131 106 194 70 0 147 198", "113 125 206 42 30 43 458 149 306 115 182 125 90 56 5 149 81 147 0 285", "146 360 161 163 155 374 277 184 181 114 341 170 117 113 276 140 110 198 285 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 6 9", "-3 -7 -5", "0 -9 8", "-2 -5 4", "-9 -7 6", "5 7 -7", "-3 -2 -3", "1 1 -7", "1 -1 0", "-3 6 0", "-4 -9 -1", "-1 -4 0", "2 -8 7", "-5 -4 7", "3 2 1", "0 -3 1", "-5 -9 -2", "-4 -4 9", "9 -8 -1"};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> dists = {"0 302 122 85 94 83 74 27 149 17 91 114 211 29 81 65 178 86 131 69", "302 0 402 681 314 321 602 277 741 219 277 232 225 225 293 281 844 404 81 513", "122 402 0 203 418 149 324 117 139 117 17 266 529 81 257 275 494 382 141 155", "85 681 203 0 221 134 67 170 40 170 206 225 502 138 154 244 89 209 402 32", "94 314 418 221 0 189 102 153 385 121 325 126 113 155 91 89 166 50 269 197", "83 321 149 134 189 0 233 180 126 134 84 29 436 30 26 270 321 293 204 38", "74 602 324 67 102 233 0 121 203 129 309 266 269 185 185 107 30 54 377 131", "27 277 117 170 153 180 121 0 242 6 104 217 168 70 186 34 269 89 88 170", "149 741 139 40 385 126 203 242 0 238 158 261 710 150 206 388 245 389 426 40", "17 219 117 170 121 134 129 6 238 0 86 155 154 42 134 38 275 91 66 146", "91 277 17 206 325 84 309 104 158 86 0 161 440 34 166 238 477 337 88 126", "114 232 266 225 126 29 266 217 261 155 161 0 341 61 9 257 356 268 205 105", "211 225 529 502 113 436 269 168 710 154 440 341 0 294 322 62 425 85 216 486", "29 225 81 138 155 30 185 70 150 42 34 61 294 0 56 146 313 197 90 66", "81 293 257 154 91 26 185 186 206 134 166 9 322 56 0 218 253 209 230 66", "65 281 275 244 89 270 107 34 388 38 238 257 62 146 218 0 241 25 146 260", "178 844 494 89 166 321 30 269 245 275 477 356 425 313 253 241 0 136 601 177", "86 404 382 209 50 293 54 89 389 91 337 268 85 197 209 25 136 0 269 249", "131 81 141 402 269 204 377 88 426 66 88 205 216 90 230 146 601 269 0 306", "69 513 155 32 197 38 131 170 40 146 126 105 486 66 66 260 177 249 306 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 9 14", "9 4 -5", "0 -7 -6", "-6 -3 7", "7 -5 3", "-7 -4 -3", "-1 5 -1", "6 -7 -8", "0 4 1", "9 3 -1", "5 -5 8", "-9 7 9", "5 0 2", "3 -6 6", "-6 5 2", "-9 -9 -4", "-9 1 2", "5 9 5", "4 -7 -2"};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> dists = {"0 516 42 97 131 32 45 110 24 110 102 139 65 17 149 89 67 20 29 142", "516 0 578 261 275 724 713 934 580 542 598 131 581 573 629 489 435 528 461 990", "42 578 0 171 77 122 101 68 10 40 184 189 45 109 53 205 41 26 121 62", "97 261 171 0 138 161 254 275 177 275 291 86 106 102 342 42 194 85 122 353", "131 275 77 138 0 291 246 261 99 65 265 76 126 226 90 274 52 107 186 253", "32 724 122 161 291 0 53 126 88 238 134 267 121 9 285 81 179 68 53 182", "45 713 101 254 246 53 0 185 49 129 33 234 196 56 162 218 90 113 38 195", "110 934 68 275 261 126 185 0 94 196 356 429 49 153 201 225 209 62 245 14", "24 580 10 177 99 88 49 94 0 38 110 171 77 77 57 197 27 36 73 90", "110 542 40 275 65 238 129 196 38 0 160 177 161 209 5 365 13 118 161 154", "102 598 184 291 265 134 33 356 110 160 0 185 321 113 205 293 101 206 41 362", "139 131 189 86 76 267 234 429 171 177 185 0 234 182 238 206 104 171 110 461", "65 581 45 106 126 121 196 49 77 161 321 234 0 108 186 114 146 13 174 83", "17 573 109 102 226 9 56 153 77 209 113 182 108 0 262 54 142 53 26 211", "149 629 53 342 90 285 162 201 57 5 205 238 186 262 0 436 34 149 216 145", "89 489 205 42 274 81 218 225 197 365 293 206 114 54 436 0 274 89 116 325", "67 435 41 194 52 179 90 209 27 13 101 104 146 142 34 274 0 91 90 189", "20 528 26 85 107 68 113 62 36 118 206 171 13 53 149 89 91 0 93 94", "29 461 121 122 186 53 38 245 73 161 41 110 174 26 216 116 90 93 0 285", "142 990 62 353 253 182 195 14 90 154 362 461 83 211 145 325 189 94 285 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "8 14 16", "5 1 -4", "4 0 9", "9 7 1", "-4 -4 0", "-5 2 -4", "5 -7 -6", "2 2 -4", "5 7 -6", "-7 7 -2", "3 9 7", "7 -4 0", "-3 -2 2", "6 7 -8", "0 -5 8", "3 7 -3", "4 -2 0", "-4 3 2", "6 -5 -9"};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> dists = {"0 261 90 62 178 50 128 66 41 117 45 93 115 61 89 91 86 93 105 82", "261 0 621 185 315 461 565 149 350 390 260 366 402 416 436 354 89 122 606 189", "90 621 0 164 230 80 42 208 65 195 217 261 269 165 201 161 308 325 99 308", "62 185 164 0 54 180 110 20 53 179 181 281 301 241 269 121 80 129 275 184", "178 315 230 54 0 366 98 54 77 409 371 461 569 443 395 113 254 341 485 314", "50 461 80 180 366 0 194 224 137 59 73 125 61 37 137 241 164 141 11 196", "128 565 42 110 98 194 0 146 41 293 317 381 435 301 297 123 326 381 249 354", "66 149 208 20 54 224 146 0 49 267 161 229 317 237 209 65 100 149 331 116", "41 350 65 53 77 137 41 49 0 242 158 200 286 174 146 34 189 228 206 157", "117 390 195 179 409 59 293 267 242 0 150 270 106 142 326 406 107 90 84 307", "45 260 217 181 371 73 317 161 158 150 0 22 38 20 56 182 101 74 118 41", "93 366 261 281 461 125 381 229 200 270 22 0 74 30 18 182 209 172 162 41", "115 402 269 301 569 61 435 317 286 106 38 74 0 26 138 360 157 102 74 153", "61 416 165 241 443 37 301 237 174 142 20 30 26 0 52 218 177 138 54 101", "89 436 201 269 395 137 297 209 146 326 56 18 138 52 0 114 269 246 174 57", "91 354 161 121 113 241 123 65 34 406 182 182 360 218 114 0 265 306 326 117", "86 89 308 80 254 164 326 100 189 107 101 209 157 177 269 265 0 9 251 136", "93 122 325 129 341 141 381 149 228 90 74 172 102 138 246 306 9 0 214 129", "105 606 99 275 485 11 249 331 206 84 118 162 74 54 174 326 251 214 0 275", "82 189 308 184 314 196 354 116 157 307 41 41 153 101 57 117 136 129 275 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 7 14", "-4 -7 -5", "-2 -3 7", "-9 -4 9", "4 -3 -5", "-8 -8 0", "-4 1 7", "-6 -2 1", "9 -6 0", "4 5 -2", "2 8 -5", "9 3 -5", "4 3 -6", "-2 7 -6", "-9 3 1", "6 1 7", "8 2 5", "5 -4 -8", "0 9 1"};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> dists = {"0 181 50 86 96 126 99 74 77 91 125 54 109 130 125 129 73 41 84 73", "181 0 281 395 141 61 114 209 262 494 176 381 414 161 42 414 422 276 453 374", "50 281 0 26 146 296 229 164 177 101 65 134 269 270 165 19 173 161 34 73", "86 395 26 0 142 398 245 142 145 129 99 166 269 266 293 37 153 203 10 141", "96 141 146 142 0 174 35 26 53 347 85 270 261 42 181 241 209 209 196 321", "126 61 296 398 174 0 81 164 185 361 293 222 205 118 101 459 253 125 414 289", "99 114 229 245 35 81 0 25 42 360 194 233 174 5 186 370 174 146 283 338", "74 209 164 142 26 164 25 0 5 273 169 182 137 22 249 275 105 129 170 285", "77 262 177 145 53 185 42 5 0 246 214 155 100 35 296 290 72 110 161 276", "91 494 101 129 347 361 360 273 246 0 318 29 146 401 334 138 90 86 75 22", "125 176 65 99 85 293 194 169 214 318 0 325 446 233 122 94 342 308 157 246", "54 381 134 166 270 222 233 182 155 29 325 0 51 264 283 217 35 17 118 51", "109 414 269 269 261 205 174 137 100 146 446 51 0 179 396 402 20 30 225 200", "130 161 270 266 42 118 5 22 35 401 233 264 179 0 251 417 179 173 306 395", "125 42 165 293 181 101 186 249 296 334 122 283 396 251 0 254 376 226 329 212", "129 414 19 37 241 459 370 275 290 138 94 217 402 417 254 0 270 274 45 110", "73 422 173 153 209 253 174 105 72 90 342 35 20 179 376 270 0 38 117 148", "41 276 161 203 209 125 146 129 110 86 308 17 30 173 226 274 38 0 169 94", "84 453 34 10 196 414 283 170 161 75 157 118 225 306 329 45 117 169 0 101", "73 374 73 141 321 289 338 285 276 22 246 51 200 395 212 110 148 94 101 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 6 12", "5 -5 0", "2 -9 -1", "-4 -4 8", "-3 9 6", "-7 1 7", "-7 -3 4", "-8 -3 2", "3 -1 -9", "5 -6 8", "-1 2 -7", "-8 3 -6", "-9 0 7", "6 5 8", "8 -8 -1", "-6 -1 -6", "-3 4 -4", "2 -8 -4", "6 1 -6"};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> dists = {"0 285 90 9 162 57 70 101 62 78 130 75 33 35 83 153 86 122 86 56", "285 0 425 306 789 370 371 524 565 277 707 290 146 150 510 456 393 451 621 581", "90 425 0 107 90 19 174 313 104 264 198 185 185 125 281 225 344 398 136 166", "9 306 107 0 189 52 29 134 43 43 89 134 38 66 54 90 75 145 123 53", "162 789 90 189 0 129 286 245 98 402 166 237 339 269 281 369 374 374 50 110", "57 370 19 52 129 0 81 286 59 155 125 202 126 110 186 114 251 341 155 125", "70 371 174 29 286 81 0 251 58 26 68 285 89 161 57 19 110 244 242 102", "101 524 313 134 245 286 251 0 181 213 243 86 150 154 114 404 73 19 77 77", "62 565 104 43 98 59 58 181 0 128 18 237 161 185 69 101 152 234 96 26", "78 277 264 43 402 155 26 213 128 0 146 253 49 137 53 69 56 170 288 138", "130 707 198 89 166 125 68 243 18 146 0 365 237 297 65 91 174 288 170 50", "75 290 185 134 237 202 285 86 237 253 365 0 98 40 248 438 181 117 101 171", "33 146 185 38 339 126 89 150 161 49 237 98 0 26 118 174 77 125 209 149", "35 150 125 66 269 110 161 154 185 137 297 40 26 0 200 266 153 161 161 171", "83 510 281 54 281 186 57 114 69 53 65 248 118 200 0 122 29 105 173 43", "153 456 225 90 369 114 19 404 101 69 91 438 174 266 122 0 209 395 365 185", "86 393 344 75 374 251 110 73 152 56 174 181 77 153 29 209 0 38 200 90", "122 451 398 145 374 341 244 19 234 170 288 117 125 161 105 395 38 0 162 122", "86 621 136 123 50 155 242 77 96 288 170 101 209 161 173 365 200 162 0 50", "56 581 166 53 110 125 102 77 26 138 50 171 149 171 43 185 90 122 50 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "8 10 11", "-8 5 -1", "-1 -2 2", "-9 0 -9", "-7 2 2", "-3 -5 6", "6 -4 -7", "-6 -5 -1", "2 -5 7", "-7 -9 0", "5 5 -5", "4 1 4", "3 5 1", "1 -9 1", "-6 -6 9", "6 -7 1", "9 -5 -4", "-2 -1 -9", "-2 -6 -4"};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> dists = {"0 299 45 138 54 131 171 94 134 75 171 149 99 89 30 50 117 46 144 27", "299 0 482 217 545 72 896 621 749 136 164 66 500 474 325 285 110 201 291 292", "45 482 0 297 45 242 162 37 149 138 198 230 42 212 45 179 180 67 189 54", "138 217 297 0 198 229 393 456 248 229 213 173 457 141 126 126 261 182 434 109", "54 545 45 198 0 341 81 118 38 237 261 299 165 125 36 158 297 130 342 45", "131 72 242 229 341 0 584 297 521 16 140 54 212 306 193 141 14 81 75 172", "171 896 162 393 81 584 0 157 29 456 612 626 276 122 213 221 558 361 483 228", "94 621 37 456 118 297 157 0 208 185 361 365 21 241 150 202 241 154 150 161", "134 749 149 248 38 521 29 208 0 409 473 501 309 97 134 194 497 290 510 145", "75 136 138 229 237 16 456 185 409 0 108 54 116 266 121 125 6 33 51 108", "171 164 198 213 261 140 612 361 473 108 0 26 264 446 105 317 90 49 291 96", "149 66 230 173 299 54 626 365 501 54 26 0 266 378 131 229 38 49 205 114", "99 500 42 457 165 212 276 21 309 116 264 266 0 314 145 225 150 101 91 152", "89 474 212 141 125 306 122 241 97 266 446 378 314 0 165 35 344 251 329 158", "30 325 45 126 36 193 213 150 134 121 105 131 145 165 0 138 153 38 254 1", "50 285 179 126 158 141 221 202 194 125 317 229 225 35 138 0 179 152 170 125", "117 110 180 261 297 14 558 241 497 6 90 38 150 344 153 179 0 43 69 138", "46 201 67 182 130 81 361 154 290 33 49 49 101 251 38 152 43 0 134 33", "144 291 189 434 342 75 483 150 510 51 291 205 91 329 254 170 69 134 0 243", "27 292 54 109 45 172 228 161 145 108 96 114 152 158 1 125 138 33 243 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 7 15", "0 3 -6", "8 -5 7", "3 -3 -6", "-1 7 9", "-3 -9 -9", "-6 3 -7", "2 -9 -7", "-1 7 5", "9 9 3", "6 8 7", "-5 7 -5", "-2 -9 2", "5 1 -2", "-3 -4 5", "0 9 6", "3 6 1", "-8 8 4", "5 1 -1"};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> dists = {"0 390 131 138 99 115 106 74 11 109 149 153 166 198 20 35 98 50 122 114", "390 0 277 666 237 405 590 364 449 861 73 195 66 906 398 433 440 506 818 574", "131 277 0 517 32 204 373 45 104 374 90 326 77 233 195 56 385 169 201 469", "138 666 517 0 381 357 50 406 209 195 403 213 462 456 134 289 86 260 356 10", "99 237 32 381 0 268 229 101 104 382 50 270 61 225 179 56 329 209 209 357", "115 405 204 357 268 0 413 69 100 170 246 154 221 457 59 164 129 33 305 269", "106 590 373 50 229 413 0 346 165 241 301 277 364 286 162 189 182 278 246 80", "74 364 45 406 101 69 346 0 41 197 153 251 134 230 90 41 244 46 150 346", "11 449 104 209 104 100 165 41 0 90 182 218 189 149 35 16 149 29 77 181", "109 861 374 195 382 170 241 197 90 0 500 370 513 235 93 162 169 67 123 177", "149 73 90 403 50 246 301 153 182 500 0 146 5 467 189 158 277 259 411 349", "153 195 326 213 270 154 277 251 218 370 146 0 157 693 101 290 59 209 545 141", "166 66 77 462 61 221 364 134 189 513 5 157 0 490 198 165 298 250 426 396", "198 906 233 456 225 457 286 230 149 235 467 693 490 0 314 101 542 260 20 486", "20 398 195 134 179 59 162 90 35 93 189 101 198 314 0 91 42 30 198 90", "35 433 56 289 56 164 189 41 16 162 158 290 165 101 91 0 245 77 61 269", "98 440 385 86 329 129 182 244 149 169 277 59 298 542 42 245 0 126 390 38", "50 506 169 260 209 33 278 46 29 67 259 209 250 260 30 77 126 0 144 206", "122 818 201 356 209 305 246 150 77 123 411 545 426 20 198 61 390 144 0 366", "114 574 469 10 357 269 80 346 181 177 349 141 396 486 90 269 38 206 366 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 13 14", "9 7 -1", "-7 -8 5", "9 3 3", "-5 9 -3", "0 -9 5", "3 7 -4", "1 1 -3", "-6 -3 -8", "6 7 8", "-6 6 9", "6 9 7", "9 -6 -9", "-4 2 0", "5 1 -3", "-9 1 4", "-3 4 -5", "5 -4 -9", "-8 -5 5"};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> dists = {"0 413 52 104 155 134 73 101 41 178 134 45 11 106 62 149 194 129 98 42", "413 0 185 521 590 627 486 710 338 731 833 416 350 621 393 326 291 248 541 709", "52 185 0 116 203 214 161 189 77 266 310 89 27 230 54 161 90 117 122 186", "104 521 116 0 283 170 349 33 241 150 318 137 59 350 14 469 86 413 2 178", "155 590 203 283 0 565 242 338 270 621 477 366 180 421 201 234 261 274 305 173", "134 627 214 170 565 0 233 101 145 12 86 35 129 118 186 421 396 347 138 174", "73 486 161 349 242 233 0 308 26 329 117 110 130 43 265 50 457 54 333 89", "101 710 189 33 338 101 308 0 230 77 189 110 82 259 65 494 221 446 21 113", "41 338 77 241 270 145 26 230 0 225 123 42 66 49 171 72 321 46 227 107", "178 731 266 150 621 12 329 77 225 0 130 75 161 194 190 549 400 467 118 210", "134 833 310 318 477 86 117 189 123 130 0 89 189 30 308 315 602 293 280 84", "45 416 89 137 366 35 110 110 42 75 89 0 46 69 113 222 275 168 117 109", "11 350 27 59 180 129 130 82 66 161 189 46 0 161 25 198 121 162 57 85", "106 621 230 350 421 118 43 259 49 194 30 69 161 0 302 169 554 149 318 102", "62 393 54 14 201 186 265 65 171 190 308 113 25 302 0 339 54 293 20 152", "149 326 161 469 234 421 50 494 72 549 315 222 198 169 339 0 453 10 467 227", "194 291 90 86 261 396 457 221 321 400 602 275 121 554 54 453 0 395 110 362", "129 248 117 413 274 347 54 446 46 467 293 168 162 149 293 10 395 0 409 233", "98 541 122 2 305 138 333 21 227 118 280 117 57 318 20 467 110 409 0 165", "42 709 186 178 173 174 89 113 107 210 84 109 85 102 152 227 362 233 165 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> dists = {"0 489 84 19 85 115 122 50 57 166 110 114 65 146 49 106 115 17 187 46", "489 0 277 582 446 830 585 619 406 579 857 725 674 641 314 459 474 544 810 299", "84 277 0 75 237 339 278 242 161 86 166 106 145 174 105 234 267 157 315 86", "19 582 75 0 182 164 193 117 126 101 41 41 50 129 110 189 212 62 200 101", "85 446 237 182 0 162 59 37 20 457 365 393 248 355 36 29 14 54 338 77", "115 830 339 164 162 0 305 49 218 337 293 309 86 145 234 281 248 54 68 137", "122 585 278 193 59 305 0 114 27 538 310 382 355 528 59 10 21 129 549 198", "50 619 242 117 37 49 114 0 65 356 258 290 129 226 85 96 77 11 185 76", "57 406 161 126 20 218 27 65 0 381 269 297 236 355 8 9 14 62 386 81", "166 579 86 101 457 337 538 356 381 0 130 50 85 74 313 500 533 243 209 200", "110 857 166 41 365 293 310 258 269 130 0 20 117 222 257 338 381 185 321 270", "114 725 106 41 393 309 382 290 297 50 20 0 89 150 261 386 429 197 273 230", "65 674 145 50 248 86 355 129 236 85 117 89 0 27 212 329 330 74 54 105", "146 641 174 129 355 145 528 226 355 74 222 150 27 0 307 474 469 153 37 134", "49 314 105 110 36 234 59 85 8 313 257 261 212 307 0 29 38 66 362 53", "106 459 234 189 29 281 10 96 9 500 338 386 329 474 29 0 5 107 497 140", "115 474 267 212 14 248 21 77 14 533 381 429 330 469 38 5 0 98 468 133", "17 544 157 62 54 54 129 11 62 243 185 197 74 153 66 107 98 0 146 43", "187 810 315 200 338 68 549 185 386 209 321 273 54 37 362 497 468 146 0 169", "46 299 86 101 77 137 198 76 81 200 270 230 105 134 53 140 133 43 169 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "8 13 16", "8 4 2", "3 -1 -3", "-6 0 7", "-9 3 -5", "-3 -7 8", "-7 0 1", "-2 -2 7", "9 6 -7", "6 -5 -7", "8 -1 -7", "0 4 -7", "1 9 -8", "0 0 7", "-3 -4 9", "-5 -3 9", "-4 1 0", "-5 9 -9", "-1 6 3"};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> dists = {"0 78 121 122 69 138 149 178 131 40 41 65 194 25 131 90 65 107 107 161", "78 0 339 164 81 178 185 24 25 114 61 35 346 57 157 90 57 301 257 121", "121 339 0 291 294 401 430 515 354 261 290 324 113 230 170 153 286 2 58 518", "122 164 291 0 317 434 437 196 169 150 89 59 138 61 413 218 29 269 401 381", "69 81 294 317 0 25 32 177 178 69 88 134 481 102 130 171 174 274 158 40", "138 178 401 434 25 0 1 294 325 86 137 221 656 171 245 322 275 389 241 29", "149 185 430 437 32 1 0 297 338 85 136 222 681 174 274 347 278 418 270 24", "178 24 515 196 177 294 297 0 29 206 117 59 446 117 273 162 85 465 429 185", "131 25 354 169 178 325 338 29 0 219 134 70 293 110 164 61 78 308 296 254", "40 114 261 150 69 86 85 206 219 0 17 69 350 29 275 234 85 251 235 89", "41 61 290 89 88 137 136 117 134 17 0 18 305 6 270 187 30 270 274 104", "65 35 324 59 134 221 222 59 70 69 18 0 269 14 270 149 6 294 318 158", "194 346 113 138 481 656 681 446 293 350 305 269 0 227 341 178 203 101 273 693", "25 57 230 61 102 171 174 117 110 29 6 14 227 0 234 141 16 210 234 146", "131 157 170 413 130 245 274 273 164 275 270 270 341 234 0 49 282 144 52 302", "90 90 153 218 171 322 347 162 61 234 187 149 178 141 49 0 141 121 113 331", "65 57 286 29 174 275 278 85 78 85 30 6 203 16 282 141 0 258 314 218", "107 301 2 269 274 389 418 465 308 251 270 294 101 210 144 121 258 0 52 494", "107 257 58 401 158 241 270 429 296 235 274 318 273 234 52 113 314 52 0 354", "161 121 518 381 40 29 24 185 254 89 104 158 693 146 302 331 218 494 354 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 5 7", "-9 -2 -6", "4 9 -5", "2 -4 7", "5 -8 7", "6 -8 7", "4 9 9", "-1 9 7", "6 -2 0", "6 2 1", "5 6 2", "-7 8 -9", "4 3 0", "-9 -1 7", "-7 5 4", "4 7 0", "-9 -1 -5", "-9 -5 1", "8 -4 9"};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> dists = {"0 430 121 166 65 24 30 44 114 41 86 89 45 126 66 66 181 5 211 161", "430 0 477 458 707 450 354 242 294 657 186 409 337 874 236 812 797 345 101 731", "121 477 0 77 254 189 237 137 339 126 213 4 262 277 77 269 584 120 314 518", "166 458 77 0 405 302 224 106 458 259 304 73 331 484 62 350 545 149 421 649", "65 707 254 405 0 29 125 209 137 26 173 222 86 17 251 27 182 98 330 68", "24 450 189 302 29 0 54 100 54 41 62 149 21 78 134 70 185 33 171 85", "30 354 237 224 125 54 0 34 90 131 80 185 27 228 86 118 113 21 189 145", "44 242 137 106 209 100 34 0 142 161 74 97 77 314 14 206 261 21 155 297", "114 294 339 458 137 54 90 142 0 185 26 275 21 222 194 226 251 99 69 109", "41 657 126 259 26 41 131 161 185 0 171 110 116 35 169 41 266 70 326 170", "86 186 213 304 173 62 80 74 26 171 0 161 35 260 94 254 329 61 29 209", "89 409 4 73 222 149 185 97 275 110 161 0 206 257 49 241 516 84 254 454", "45 337 262 331 86 21 27 77 21 116 35 206 0 171 129 129 154 38 118 86", "126 874 277 484 17 78 228 314 222 35 260 257 171 0 342 54 289 173 433 125", "66 236 77 62 251 134 86 14 194 169 94 49 129 342 0 256 381 41 165 395", "66 812 269 350 27 70 118 206 226 41 254 241 129 54 256 0 125 105 453 107", "181 797 584 545 182 185 113 261 251 266 329 516 154 289 381 125 0 200 518 102", "5 345 120 149 98 33 21 21 99 70 61 84 38 173 41 105 200 0 166 186", "211 101 314 421 330 171 189 155 69 326 29 254 118 433 165 453 518 166 0 350", "161 731 518 649 68 85 145 297 109 170 209 454 86 125 395 107 102 186 350 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 9 18", "2 -9 6", "-6 -7 9", "4 0 -7", "4 2 -2", "-2 5 1", "-2 2 6", "7 8 1", "3 -4 -4", "6 5 5", "2 -7 6", "3 6 0", "6 -3 -9", "-1 -1 8", "-1 -1 -8", "-6 9 -8", "0 1 2", "9 7 9", "4 8 -9"};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> dists = {"0 706 88 17 26 88 117 102 50 149 128 86 61 20 155 137 46 166 30 209", "706 0 542 749 626 326 537 714 666 857 450 886 693 506 917 867 666 574 666 193", "88 542 0 81 34 144 249 38 202 89 248 318 185 44 147 101 62 14 182 245", "17 749 81 0 11 129 106 131 51 74 129 163 38 41 70 62 11 139 83 246", "26 626 34 11 0 106 125 88 80 61 138 204 65 22 77 57 8 76 100 209", "88 326 144 129 106 0 81 206 82 305 56 150 113 44 315 293 134 230 62 29", "117 537 249 106 125 81 0 377 21 256 5 197 24 121 206 226 105 341 113 104", "102 714 38 131 88 206 377 0 280 185 374 276 285 74 265 201 144 68 180 357", "50 666 202 51 80 82 21 280 0 213 34 108 9 78 173 185 72 300 52 153", "149 857 89 74 61 305 256 185 213 0 293 453 152 153 14 2 41 85 305 424", "128 450 248 129 138 56 5 374 34 293 0 198 45 116 251 265 126 342 110 65", "86 886 318 163 204 150 197 276 108 453 198 0 169 138 437 425 244 464 24 281", "61 693 185 38 65 113 24 285 9 152 45 169 0 89 110 126 45 265 93 184", "20 506 44 41 22 44 121 74 78 153 116 138 89 0 179 149 50 106 50 133", "155 917 147 70 77 315 206 265 173 14 251 437 110 179 0 6 41 157 301 426", "137 867 101 62 57 293 226 201 185 2 265 425 126 149 6 0 33 105 285 410", "46 666 62 11 8 134 105 144 72 41 126 244 45 50 41 33 0 100 132 229", "166 574 14 139 76 230 341 68 300 85 342 464 265 106 157 105 100 0 296 329", "30 666 182 83 100 62 113 180 52 305 110 24 93 50 301 285 132 296 0 165", "209 193 245 246 209 29 104 357 153 424 65 281 184 133 426 410 229 329 165 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "9 15 20", "-6 4 6", "-2 3 -2", "-3 4 1", "6 4 6", "7 8 -2", "-7 -2 7", "5 4 -3", "-9 8 -2", "8 8 0", "7 -6 -1", "3 6 -4", "0 2 4", "-7 9 -5", "-8 8 -3", "-3 6 -1", "-9 6 7", "5 -2 1", "9 8 8"};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> dists = {"0 589 117 94 62 50 131 22 14 89 34 58 114 134 121 109 50 86 54 101", "589 0 800 731 437 629 202 545 611 258 377 929 497 331 484 746 429 819 665 562", "117 800 0 171 333 29 274 225 51 266 113 65 145 251 468 2 69 227 153 394", "94 731 171 0 166 174 321 86 100 137 110 178 38 84 251 185 106 16 6 117", "62 437 333 166 0 200 117 18 126 51 84 230 182 126 13 315 140 134 114 27", "50 629 29 174 200 0 145 134 14 171 52 42 146 206 301 19 36 206 134 283", "131 202 274 321 117 145 0 149 141 66 61 285 217 157 170 238 93 353 253 234", "22 545 225 86 18 134 149 0 66 61 58 140 120 106 53 217 94 62 48 29", "14 611 51 100 126 14 141 66 0 117 30 38 98 144 211 45 26 116 66 177", "89 258 266 137 51 171 66 61 117 0 35 277 81 29 102 248 67 161 101 84", "34 377 113 110 84 52 61 58 30 35 0 134 62 62 161 99 8 142 74 139", "58 929 65 178 230 42 285 140 38 277 134 0 228 318 317 65 122 170 140 285", "114 497 145 38 182 146 217 120 98 81 62 228 0 26 285 149 50 94 40 169", "134 331 251 84 126 206 157 106 144 29 62 318 26 0 203 245 74 132 74 121", "121 484 468 251 13 301 170 53 211 102 161 317 285 203 0 446 237 195 189 38", "109 746 2 185 315 19 238 217 45 248 99 65 149 245 446 0 59 241 161 388", "50 429 69 106 140 36 93 94 26 67 8 122 50 74 237 59 0 154 78 195", "86 819 227 16 134 206 353 62 116 161 142 170 94 132 195 241 154 0 14 77", "54 665 153 6 114 134 253 48 66 101 74 140 40 74 189 161 78 14 0 85", "101 562 394 117 27 283 234 29 177 84 139 285 169 121 38 388 195 77 85 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 12 21", "2 8 -7", "-9 3 -2", "-2 -3 7", "4 5 -3", "5 5 9", "-3 -2 3", "1 3 -2", "-3 4 8", "0 5 3", "3 0 -7", "-7 8 1", "-7 7 6", "-2 -6 9", "3 8 -6", "0 7 1", "-9 -1 -2", "-7 2 -1", "-7 -4 6"};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> dists = {"0 234 66 58 65 105 117 118 91 106 122 128 142 177 145 98 86 8 26 161", "234 0 126 178 107 189 261 514 529 274 38 170 388 321 589 500 458 302 308 59", "66 126 0 158 77 209 189 174 309 180 96 50 86 341 371 142 274 82 118 129", "58 178 158 0 65 27 91 308 109 94 78 234 338 75 149 286 88 94 78 117", "65 107 77 65 0 46 230 197 238 229 21 65 291 110 342 291 241 117 155 24", "105 189 209 27 46 0 216 315 170 221 65 217 465 20 258 405 179 165 173 74", "117 261 189 91 230 216 0 451 166 1 221 389 241 324 118 221 83 113 53 314", "118 514 174 308 197 315 451 0 245 422 334 134 194 371 377 126 308 114 206 337", "91 529 309 109 238 170 166 245 0 153 333 411 353 182 26 197 17 83 69 390", "106 274 180 94 229 221 1 422 153 0 228 378 218 329 107 194 74 98 42 321", "122 38 96 78 21 65 221 334 333 228 0 106 350 149 419 390 306 186 206 9", "128 170 50 234 65 217 389 134 411 378 106 0 206 321 545 258 422 168 250 97", "142 388 86 338 291 465 241 194 353 218 350 206 0 629 369 40 306 106 136 419", "177 321 341 75 110 20 324 371 182 329 149 321 629 0 290 521 219 245 257 146", "145 589 371 149 342 258 118 377 26 107 419 545 369 290 0 217 9 121 73 506", "98 500 142 286 291 405 221 126 197 194 390 258 40 521 217 0 182 54 80 459", "86 458 274 88 241 179 83 308 17 74 306 422 306 219 9 182 0 74 38 381", "8 302 82 94 117 165 113 114 83 98 186 168 106 245 121 54 74 0 14 237", "26 308 118 78 155 173 53 206 69 42 206 250 136 257 73 80 38 14 0 275", "161 59 129 117 24 74 314 337 390 321 9 97 419 146 506 459 381 237 275 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 9 12", "1 8 1", "0 -3 7", "6 2 5", "5 -4 8", "-9 0 6", "6 1 -9", "-3 -9 -1", "-9 0 5", "5 4 9", "8 8 0", "-5 9 -6", "7 -8 8", "-8 -9 0", "-5 3 -8", "-6 -7 1", "-2 0 -2", "-5 -1 0", "8 4 9"};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> dists = {"0 170 36 49 134 52 146 81 12 149 164 114 116 10 97 61 50 90 99 90", "170 0 154 211 152 258 230 93 254 179 126 160 70 98 341 49 138 62 61 62", "36 154 0 5 254 168 70 125 40 57 184 34 152 30 249 89 6 146 99 146", "49 211 5 0 307 197 61 174 41 56 241 35 209 53 274 126 17 201 146 201", "134 152 254 307 0 94 358 129 218 363 242 328 138 114 77 61 274 74 185 74", "52 258 168 197 94 0 362 81 72 369 168 314 120 74 29 125 178 86 147 86", "146 230 70 61 358 362 0 329 166 9 434 14 354 132 395 145 104 318 277 318", "81 93 125 174 129 81 329 0 121 286 21 237 5 53 182 84 101 11 14 11", "12 254 40 41 218 72 166 121 0 173 200 134 168 38 129 125 54 150 139 150", "149 179 57 56 363 369 9 286 173 0 365 3 301 121 430 134 77 281 222 281", "164 126 184 241 242 168 434 21 200 365 0 310 16 122 317 169 138 50 19 50", "114 160 34 35 328 314 14 237 134 3 310 0 254 90 381 113 50 238 181 238", "116 70 152 209 138 120 354 5 168 301 16 254 0 74 229 89 122 10 11 10", "10 98 30 53 114 74 132 53 38 121 122 90 74 0 131 29 36 54 57 54", "97 341 249 274 77 29 395 182 129 430 317 381 229 131 0 154 283 161 270 161", "61 49 89 126 61 125 145 84 125 134 169 113 89 29 154 0 101 51 86 51", "50 138 6 17 274 178 104 101 54 77 138 50 122 36 283 101 0 130 69 130", "90 62 146 201 74 86 318 11 150 281 50 238 10 54 161 51 130 0 29 0", "99 61 99 146 185 147 277 14 139 222 19 181 11 57 270 86 69 29 0 29", "90 62 146 201 74 86 318 11 150 281 50 238 10 54 161 51 130 0 29 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 5 12", "-2 -4 4", "-2 -6 3", "7 9 2", "0 6 -4", "4 -9 7", "-4 7 4", "-2 -2 -2", "2 -8 9", "-8 8 6", "1 -7 8", "-4 8 6", "0 1 3", "5 6 -6", "4 3 6", "-4 -3 5", "-1 8 5", "-5 5 7", "-1 8 5"};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> dists = {"0 241 86 29 94 30 129 5 74 2 26 68 129 89 59 8 51 131 121 142", "241 0 449 422 139 305 206 286 497 227 283 317 486 234 186 213 494 150 50 293", "86 449 0 59 310 26 305 51 14 90 42 290 59 221 281 134 125 129 355 324", "29 422 59 0 217 29 254 16 25 41 29 109 136 186 146 45 14 222 264 251", "94 139 310 217 0 210 21 137 322 76 200 94 257 33 21 90 225 189 29 38", "30 305 26 29 210 0 243 13 24 38 2 174 113 179 169 50 81 105 221 270", "129 206 305 254 21 243 0 166 339 101 245 165 194 8 70 149 270 186 86 9", "5 286 51 16 137 13 166 0 41 9 13 101 104 114 98 21 46 126 168 179", "74 497 14 25 322 24 339 41 0 86 34 234 101 251 261 110 69 197 369 346", "2 227 90 41 76 38 101 9 86 0 36 74 113 65 53 14 65 117 109 114", "26 283 42 29 200 2 245 13 34 36 0 154 141 185 153 38 77 113 201 274", "68 317 290 109 94 174 165 101 234 74 154 0 329 149 27 44 75 347 129 154", "129 486 59 136 257 113 194 104 101 113 141 329 0 126 278 201 194 146 360 195", "89 234 221 186 33 179 8 114 251 65 185 149 126 0 70 117 206 154 106 13", "59 186 281 146 21 169 70 98 261 53 153 27 278 70 0 43 136 236 46 77", "8 213 134 45 90 50 149 21 110 14 38 44 201 117 43 0 59 163 97 166", "51 494 125 14 225 81 270 46 69 65 77 75 194 206 136 59 0 324 290 249", "131 150 129 222 189 105 186 126 197 117 113 347 146 154 236 163 324 0 170 253", "121 50 355 264 29 221 86 168 369 109 201 129 360 106 46 97 290 170 0 131", "142 293 324 251 38 270 9 179 346 114 274 154 195 13 77 166 249 253 131 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 6 14", "-9 -1 -2", "-2 0 -5", "6 -3 7", "-5 2 -1", "4 -7 8", "-2 0 -1", "-7 0 -5", "0 -1 1", "-4 3 -1", "8 0 -2", "-8 -8 1", "2 -7 6", "7 -1 3", "2 2 0", "1 -1 -7", "-7 1 9", "6 2 9", "5 -9 6"};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> dists = {"0 381 54 114 166 49 50 81 98 121 131 59 144 29 90 101 114 105 113 48", "381 0 685 619 459 290 381 694 269 504 74 434 581 254 461 818 619 568 536 421", "54 685 0 182 254 131 108 53 250 209 345 69 190 109 172 11 182 117 101 86", "114 619 182 0 456 149 290 261 86 27 281 329 66 209 274 201 0 371 435 290", "166 459 254 456 0 341 42 105 418 531 245 125 614 205 26 369 456 35 99 54", "49 290 131 149 341 0 155 242 49 86 110 122 81 22 251 164 149 266 218 153", "50 381 108 290 42 155 0 53 246 321 161 29 362 69 32 187 290 21 37 2", "81 694 53 261 105 242 53 0 347 342 350 74 369 164 61 102 261 26 66 41", "98 269 250 86 418 49 246 347 0 37 89 269 74 99 286 297 86 385 393 258", "121 504 209 27 531 86 321 342 37 0 230 326 17 166 353 222 27 440 456 321", "131 74 345 281 245 110 161 350 89 230 0 216 299 86 201 446 281 294 302 187", "59 434 69 329 125 122 29 74 269 326 216 0 323 50 117 122 329 54 14 19", "144 581 190 66 614 81 362 369 74 17 299 323 0 173 434 181 66 481 457 352", "29 254 109 209 205 22 69 164 99 166 86 50 173 0 157 162 209 154 114 69", "90 461 172 274 26 251 32 61 286 353 201 117 434 157 0 267 274 37 117 42", "101 818 11 201 369 164 187 102 297 222 446 122 181 162 267 0 201 194 162 157", "114 619 182 0 456 149 290 261 86 27 281 329 66 209 274 201 0 371 435 290", "105 568 117 371 35 266 21 26 385 440 294 54 481 154 37 194 371 0 32 17", "113 536 101 435 99 218 37 66 393 456 302 14 457 114 117 162 435 32 0 25", "48 421 86 290 54 153 2 41 258 321 187 19 352 69 42 157 290 17 25 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 10 16", "-5 -2 -5", "8 1 -7", "-2 -9 9", "0 7 0", "-3 -4 5", "-4 -8 -1", "7 7 0", "7 6 -6", "5 5 9", "-7 -1 3", "4 8 -8", "-2 4 3", "1 -8 5", "-6 -1 -8", "8 1 -7", "-5 -8 4", "-9 -4 4", "-4 -4 4"};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> dists = {"0 354 42 90 110 94 94 94 61 49 138 35 91 132 161 211 98 142 128 171", "354 0 266 548 734 486 174 428 539 507 226 509 513 410 379 201 730 510 194 765", "42 266 0 158 118 248 146 30 161 41 234 113 69 126 81 305 144 182 26 201", "90 548 158 0 158 146 158 152 243 155 250 193 293 434 131 341 62 446 282 417", "110 734 118 158 0 334 388 66 181 25 492 125 77 238 177 625 30 256 222 125", "94 486 248 146 334 0 90 362 101 261 66 109 329 314 413 117 248 270 398 373", "94 174 146 158 388 90 0 266 209 261 24 193 329 302 245 45 314 324 206 481", "94 428 30 152 66 362 266 0 251 35 398 181 89 222 43 497 94 290 62 229", "61 539 161 243 181 101 209 251 0 116 189 6 106 89 408 266 201 53 285 94", "49 507 41 155 25 261 261 35 116 0 345 70 26 125 140 450 65 153 113 94", "138 226 234 250 492 66 24 398 189 345 0 197 389 306 409 9 418 300 314 501", "35 509 113 193 125 109 193 181 6 70 197 0 72 83 322 280 145 61 227 80", "91 513 69 293 77 329 329 89 106 26 389 72 0 51 246 488 165 77 123 40", "132 410 126 434 238 314 302 222 89 125 306 83 51 0 405 371 342 14 164 75", "161 379 81 131 177 413 245 43 408 140 409 322 246 405 0 494 153 497 97 458", "211 201 305 341 625 117 45 497 266 450 9 280 488 371 494 0 545 369 371 616", "98 730 144 62 30 248 314 94 201 65 418 145 165 342 153 545 0 350 274 233", "142 510 182 446 256 270 324 290 53 153 300 61 77 14 497 369 350 0 254 61", "128 194 26 282 222 398 206 62 285 113 314 227 123 164 97 371 274 254 0 299", "171 765 201 417 125 373 481 229 94 94 501 80 40 75 458 616 233 61 299 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 8 17", "5 -1 4", "-5 -8 1", "6 -7 -5", "-9 3 -2", "-6 3 7", "7 -6 3", "0 5 -6", "6 -3 -2", "-8 7 5", "1 3 -5", "9 1 -3", "8 8 -2", "4 -9 8", "-9 9 7", "1 -9 -4", "6 9 -5", "8 0 8", "9 3 -9"};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> dists = {"0 153 45 62 54 77 80 162 14 66", "153 0 216 125 153 170 137 315 125 267", "45 216 0 113 9 146 221 171 101 3", "62 125 113 0 110 237 174 398 42 146", "54 153 9 110 0 131 206 162 104 18", "77 170 146 237 131 0 45 41 99 173", "80 137 221 174 206 45 0 170 54 266", "162 315 171 398 162 41 170 0 230 180", "14 125 101 42 104 99 54 230 0 134", "66 267 3 146 18 173 266 180 134 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 3 12", "-6 -3 0", "-3 7 2", "-6 -3 3", "5 -6 4", "8 0 4", "3 -12 3", "2 3 1", "-7 -4 -1"};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> dists = {"0 194 14 146 86 56 11 65 83 74", "194 0 138 66 522 306 185 341 453 50", "14 138 0 84 126 42 5 59 153 62", "146 66 84 0 366 198 101 251 345 62", "86 522 126 366 0 66 89 65 81 308", "56 306 42 198 66 0 35 5 195 206", "11 185 5 101 89 35 0 54 116 81", "65 341 59 251 65 5 54 0 206 237", "83 453 153 345 81 195 116 206 0 209", "74 50 62 62 308 206 81 237 209 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 7 12", "2 3 1", "0 11 5", "1 -2 -9", "6 2 -4", "1 3 -1", "7 0 -4", "-7 -3 -5", "-3 4 7"};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> dists = {"0 653 26 134 54 65 59 149 198 24", "653 0 809 675 713 950 534 408 809 773", "26 809 0 74 56 99 89 173 332 38", "134 675 74 0 170 329 105 99 542 134", "54 713 56 170 0 59 197 293 420 138", "65 950 99 329 59 0 242 410 275 125", "59 534 89 105 197 242 0 30 185 35", "149 408 173 99 293 410 30 0 317 125", "198 809 332 542 420 275 185 317 0 162", "24 773 38 134 138 125 35 125 162 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 14 21", "-4 1 -3", "-7 9 -2", "-6 -3 3", "-1 -8 0", "3 7 -1", "2 12 1", "14 -1 -1", "2 2 -4"};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> dists = {"0 69 107 101 50 78 117 80 129 72", "69 0 86 314 155 213 234 173 270 81", "107 86 0 290 161 365 434 243 374 83", "101 314 290 0 45 107 206 245 254 161", "50 155 161 45 0 110 209 242 293 38", "78 213 365 107 110 0 21 134 117 210", "117 234 434 206 209 21 0 101 72 309", "80 173 243 245 242 134 101 0 17 296", "129 270 374 254 293 117 72 17 0 393", "72 81 83 161 38 210 309 296 393 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 2 8", "7 7 3", "-4 2 -9", "-4 5 -3", "-7 -5 -2", "-6 -9 0", "4 -8 0", "2 -11 -2", "-2 8 2"};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> dists = {"0 374 77 194 153 53 198 99 59 146", "374 0 677 290 539 333 680 485 533 726", "77 677 0 405 362 236 353 146 66 185", "194 290 405 0 425 245 614 533 165 644", "153 539 362 425 0 38 27 162 362 113", "53 333 236 245 38 0 89 110 206 129", "198 680 353 614 27 89 0 117 437 50", "99 485 146 533 162 110 117 0 272 41", "59 533 66 165 362 206 437 272 0 329", "146 726 185 644 113 129 50 41 329 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 5 18", "-5 4 -6", "13 4 3", "0 -12 3", "1 -6 4", "-5 -13 2", "-9 -3 3", "3 5 -5", "-9 -8 -1"};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> dists = {"0 941 965 986 965", "941 0 122 509 986", "965 122 0 171 678", "986 509 171 0 873", "965 986 678 873 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "6 8 29", "10 17 24", "19 20 15", "-9 28 10"};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> dists = {"0 986 941 941 965", "986 0 107 131 725", "941 107 0 360 306", "941 131 360 0 990", "965 725 306 990 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 5 31", "-5 -4 30", "11 6 28", "-6 -20 23"};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> dists = {"0 986 965 965 941", "986 0 725 737 523", "965 725 0 126 802", "965 737 126 0 386", "941 523 802 386 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 5 31", "-6 -20 23", "-16 -15 22", "-21 4 22"};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> dists = {"0 986 986 965 965", "986 0 50 657 491", "986 50 0 997 801", "965 657 997 0 14", "965 491 801 14 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 5 31", "-5 0 31", "10 24 17", "9 22 20"};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> dists = {"0 986 965 941 941", "986 0 123 387 425", "965 123 0 516 98", "941 387 516 0 722", "941 425 98 722 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 4 31", "4 -7 30", "-16 3 26", "3 -16 26"};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> dists = {"0 941 986 986 965", "941 0 315 325 450", "986 315 0 510 17", "986 325 510 0 665", "965 450 17 665 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 10 29", "-17 11 24", "0 25 19", "-20 9 22"};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> dists = {"0 941 941 941 965", "941 0 266 552 216", "941 266 0 814 230", "941 552 814 0 208", "965 216 230 208 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 5 30", "-8 -6 29", "-10 21 20", "-10 9 28"};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> dists = {"0 941 986 965 941", "941 0 155 172 974", "986 155 0 3 421", "965 172 3 0 378", "941 974 421 378 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 10 29", "-7 19 24", "-6 20 23", "-11 28 6"};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> dists = {"0 986 941 986 941", "986 0 341 470 77", "941 341 0 987 684", "986 470 987 0 315", "941 77 684 315 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "8 9 29", "-4 -5 30", "25 0 19", "14 13 24"};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> dists = {"0 941 941 965 986", "941 0 168 344 129", "941 168 0 608 477", "965 344 608 0 677", "986 129 477 677 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 19 24", "4 27 14", "-16 15 22", "9 11 28"};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> dists = {"0 713 45 107 72 117", "713 0 404 674 701 794", "45 404 0 98 81 150", "107 674 98 0 83 302", "72 701 81 83 0 81", "117 794 150 302 81 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 11 24", "0 3 6", "-9 -1 5", "-6 6 0", "1 10 -4"};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> dists = {"0 14 35 131 141 155", "14 0 81 81 227 189", "35 81 0 216 110 132", "131 81 216 0 542 468", "141 227 110 542 0 110", "155 189 132 468 110 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 2 3", "-5 -1 -3", "1 11 3", "-2 -11 -4", "-7 -9 5"};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> dists = {"0 464 110 11 213 146", "464 0 126 419 701 122", "110 126 0 101 299 26", "11 419 101 0 314 129", "213 701 299 314 0 377", "146 122 26 129 377 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 8 20", "-1 3 10", "3 1 1", "-14 -4 1", "-1 8 9"};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> dists = {"0 509 209 146 101 77", "509 0 680 437 932 596", "209 680 0 609 324 180", "146 437 609 0 225 393", "101 932 324 225 0 288", "77 596 180 393 288 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 8 21", "-14 -2 3", "8 9 1", "-2 4 -9", "-2 -8 3"};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> dists = {"0 245 149 36 62 99", "245 0 738 377 461 602", "149 738 0 89 161 38", "36 377 89 0 122 27", "62 461 161 122 0 137", "99 602 38 27 137 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 4 15", "2 1 -12", "-2 4 -4", "-2 -7 -3", "-3 3 -9"};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> dists = {"0 450 74 113 5 125", "450 0 644 755 473 653", "74 644 0 299 41 29", "113 755 299 0 150 342", "5 473 41 150 0 84", "125 653 29 342 84 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 8 19", "7 0 -5", "-8 -7 0", "2 0 -1", "10 -4 -3"};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> dists = {"0 522 53 26 84 101", "522 0 851 644 906 929", "53 851 0 27 89 134", "26 644 27 0 74 149", "84 906 89 74 0 41", "101 929 134 149 41 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 9 21", "-1 -6 -4", "-4 -3 -1", "-4 2 -8", "2 4 -9"};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> dists = {"0 621 66 65 56 50", "621 0 825 482 545 521", "66 825 0 59 206 230", "65 482 59 0 189 173", "56 545 206 189 0 26", "50 521 230 173 26 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "6 12 21", "-4 5 -5", "1 8 0", "-2 -4 6", "3 -4 5"};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> dists = {"0 146 68 77 89 170", "146 0 198 237 453 74", "68 198 0 105 213 314", "77 237 105 0 180 179", "89 453 213 180 0 419", "170 74 314 179 419 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 8 9", "-8 2 0", "-4 -6 5", "2 -6 -7", "5 1 12"};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> dists = {"0 261 41 197 128 26", "261 0 134 878 725 443", "41 134 0 356 297 117", "197 878 356 0 101 113", "128 725 297 101 0 42", "26 443 117 113 42 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 6 15", "-3 4 4", "1 0 -14", "0 -8 -8", "-1 -3 -4"};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> dists = {"0 149 101 180 86 116", "149 0 254 649 251 521", "101 254 0 281 89 169", "180 649 281 0 206 16", "86 251 89 206 0 150", "116 521 169 16 150 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 8 9", "-7 6 -4", "-4 -10 -8", "-9 -1 2", "-4 -6 -8"};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> dists = {"0 560 125 98 53 108", "560 0 245 546 957 716", "125 245 0 275 314 365", "98 546 275 0 189 14", "53 957 314 189 0 149", "108 716 365 14 149 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 12 20", "-4 3 10", "5 8 -3", "-1 -4 -6", "6 6 -6"};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> dists = {"0 404 113 51 149 170", "404 0 341 179 705 882", "113 341 0 134 260 341", "51 179 134 0 230 353", "149 705 260 230 0 501", "170 882 341 353 501 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 12 16", "10 3 2", "-1 5 5", "0 7 -10", "1 -13 0"};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> dists = {"0 389 65 36 38 90", "389 0 324 569 419 659", "65 324 0 173 35 155", "36 569 173 0 134 162", "38 419 35 134 0 44", "90 659 155 162 44 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "7 12 14", "-5 6 2", "0 -6 0", "-2 5 -3", "0 3 -9"};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> dists = {"0 414 129 200 89 74", "414 0 603 746 845 266", "129 603 0 629 122 77", "200 746 629 0 317 486", "89 845 122 317 0 227", "74 266 77 486 227 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 7 19", "11 -2 -2", "-14 0 -2", "2 -6 -7", "7 3 4"};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> dists = {"0 350 174 69 5 54", "350 0 694 209 425 564", "174 694 0 385 139 110", "69 209 385 0 94 145", "5 425 139 94 0 29", "54 564 110 145 29 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 10 15", "2 7 -11", "-4 2 7", "-1 0 -2", "-5 2 -5"};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> dists = {"0 101 149 107 86 38", "101 0 296 398 77 189", "149 296 0 222 417 89", "107 398 222 0 261 137", "86 77 417 261 0 230", "38 189 89 137 230 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 4 9", "8 6 -7", "-5 -1 -9", "-6 1 7", "5 -2 -3"};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> dists = {"0 539 20 170 9 89", "539 0 363 113 542 770", "20 363 0 86 29 149", "170 113 86 0 185 297", "9 542 29 185 0 140", "89 770 149 297 140 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 3 23", "0 2 4", "-1 0 13", "3 0 0", "-7 -6 -2"};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> dists = {"0 629 44 153 90 104", "629 0 893 998 809 281", "44 893 0 113 110 180", "153 998 113 0 417 305", "90 809 110 417 0 206", "104 281 180 305 206 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 12 22", "-2 2 -6", "8 5 -8", "-9 -3 0", "-2 8 6"};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> dists = {"0 354 74 56 122 59", "354 0 452 290 638 221", "74 452 0 194 234 153", "56 290 194 0 302 11", "122 638 234 302 0 333", "59 221 153 11 333 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 7 17", "8 1 -3", "-4 6 2", "-1 -11 0", "-1 7 3"};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> dists = {"0 134 90 171 90 29", "134 0 26 197 248 179", "90 26 0 81 234 149", "171 197 81 0 369 266", "90 248 234 369 0 179", "29 179 149 266 179 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 7 9", "-1 8 5", "-7 11 -1", "-4 -7 5", "5 0 -2"};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> dists = {"0 701 77 36 117 9", "701 0 590 989 794 866", "77 590 0 89 152 116", "36 989 89 0 153 21", "117 794 152 153 0 132", "9 866 116 21 132 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 4 26", "-4 -6 5", "-2 -4 -4", "-10 4 1", "0 0 -3"};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> dists = {"0 377 83 75 122 110", "377 0 402 698 881 801", "83 402 0 80 149 201", "75 698 80 0 29 41", "122 881 149 29 0 86", "110 801 201 41 86 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 4 19", "-5 -7 3", "-1 -7 -5", "-4 -5 -9", "5 -6 -7"};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> dists = {"0 347 99 65 131 33", "347 0 656 134 212 530", "99 656 0 206 452 42", "65 134 206 0 126 134", "131 212 452 126 0 254", "33 530 42 134 254 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 11 15", "-3 3 -9", "-2 6 5", "1 -3 11", "-4 -1 -4"};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> dists = {"0 221 137 137 30 83", "221 0 216 374 341 558", "137 216 0 134 125 234", "137 374 134 0 59 170", "30 341 125 59 0 41", "83 558 234 170 41 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 10 11", "-10 6 1", "-3 8 -8", "-2 1 -5", "-3 -5 -7"};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> dists = {"0 299 41 149 116 72", "299 0 282 746 723 611", "41 282 0 182 261 149", "149 746 182 0 161 185", "116 723 261 161 0 44", "72 611 149 185 44 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 3 17", "6 2 1", "0 7 -10", "-6 -4 -8", "0 -6 -6"};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> dists = {"0 317 101 99 83 44", "317 0 722 374 354 333", "101 722 0 134 278 101", "99 374 134 0 356 11", "83 354 278 356 0 243", "44 333 101 11 243 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 6 16", "-6 1 -8", "-9 3 3", "9 -1 -1", "-6 2 2"};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> dists = {"0 227 185 149 81 41", "227 0 558 266 278 402", "185 558 0 194 488 66", "149 266 194 0 398 164", "81 278 488 398 0 206", "41 402 66 164 206 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 7 13", "-12 4 -5", "-1 12 -2", "6 -6 3", "-5 0 -4"};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> dists = {"0 83 53 171 56 102", "83 0 254 68 75 185", "53 254 0 302 161 155", "171 68 302 0 179 285", "56 75 161 179 0 26", "102 185 155 285 26 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 1 9", "-4 -1 -6", "-7 1 11", "2 -6 4", "1 -10 1"};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> dists = {"0 386 86 155 62 164", "386 0 360 285 276 726", "86 360 0 129 84 66", "155 285 129 0 261 243", "62 276 84 261 0 234", "164 726 66 243 234 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 11 16", "5 -5 6", "-5 -3 11", "7 3 2", "4 -12 2"};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> dists = {"0 305 29 51 66 132", "305 0 518 134 545 701", "29 518 0 146 29 65", "51 134 146 0 189 243", "66 545 29 189 0 54", "132 701 65 243 54 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 10 14", "-2 -3 -4", "1 1 7", "-7 -1 -4", "-8 -8 -2"};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> dists = {"0 173 65 107 113 90", "173 0 374 386 468 461", "65 374 0 234 62 131", "107 386 234 0 290 29", "113 468 62 290 0 185", "90 461 131 29 185 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 2 13", "-2 5 -6", "7 -7 -3", "-8 0 -7", "5 -4 -7"};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> dists = {"0 126 42 41 206 35", "126 0 294 299 398 113", "42 294 0 29 200 89", "41 299 29 0 173 90", "206 398 200 173 0 101", "35 113 89 90 101 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 6 9", "1 -5 -4", "-4 -3 -4", "-7 -11 6", "-1 -3 5"};
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> dists = {"0 290 65 68 99 93", "290 0 621 186 149 131", "65 621 0 225 302 254", "68 186 225 0 59 161", "99 149 302 59 0 150", "93 131 254 161 150 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 7 15", "-2 -5 -6", "-4 6 4", "3 9 3", "5 -2 8"};
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> dists = {"0 254 149 204 109 89", "254 0 475 890 51 445", "149 475 0 285 216 350", "204 890 285 0 581 145", "109 51 216 581 0 306", "89 445 350 145 306 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 5 15", "7 -10 0", "2 -2 -14", "3 0 10", "2 7 -6"};
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> dists = {"0 450 3 146 83 182", "450 0 477 374 365 620", "3 477 0 137 68 221", "146 374 137 0 197 594", "83 365 68 197 0 341", "182 620 221 594 341 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 7 20", "1 1 -1", "11 0 5", "1 9 1", "-13 -3 2"};
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> dists = {"0 362 78 6 36 116", "362 0 734 278 266 554", "78 734 0 126 138 146", "6 278 126 0 30 134", "36 266 138 30 0 224", "116 554 146 134 224 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "4 11 15", "-5 -2 -7", "1 1 2", "-4 2 4", "4 6 -8"};
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> dists = {"0 539 89 161 38 165", "539 0 554 890 297 938", "89 554 0 414 131 404", "161 890 414 0 233 2", "38 297 131 233 0 251", "165 938 404 2 251 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 13 19", "-9 2 2", "8 4 -9", "2 3 5", "7 4 -10"};
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> dists = {"0 473 41 18 173 131", "473 0 738 659 734 302", "41 738 0 29 122 206", "18 659 29 0 221 197", "173 734 122 221 0 378", "131 302 206 197 378 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 8 20", "-4 0 -5", "0 -3 -3", "-4 11 -6", "-7 -1 9"};
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> dists = {"0 122 53 44 18 65", "122 0 17 38 110 365", "53 17 0 21 41 234", "44 38 21 0 62 201", "18 110 41 62 0 107", "65 365 234 201 107 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 1 11", "0 2 7", "-2 -2 6", "-1 4 1", "0 -1 -8"};
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> dists = {"0 557 62 86 50 14", "557 0 981 339 557 521", "62 981 0 234 152 98", "86 339 234 0 146 134", "50 557 152 146 0 54", "14 521 98 134 54 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "6 11 20", "-1 -5 -6", "-1 -2 9", "-5 5 0", "2 3 -1"};
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> dists = {"0 122 44 98 53 11", "122 0 294 390 117 161", "44 294 0 54 93 59", "98 390 54 0 141 101", "53 117 93 141 0 110", "11 161 59 101 110 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 1 11", "-2 2 -6", "5 3 -8", "0 7 2", "1 -3 -1"};
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> dists = {"0 65 185 27 56 168", "65 0 426 146 161 341", "185 426 0 98 293 209", "27 146 98 0 83 219", "56 161 293 83 0 248", "168 341 209 219 248 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 1 8", "-8 0 -11", "-3 -3 -3", "6 -4 -2", "2 10 -8"};
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> dists = {"0 410 80 116 50 41", "410 0 666 902 420 281", "80 666 0 116 114 89", "116 902 116 0 110 213", "50 420 114 110 0 41", "41 281 89 213 41 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 3 20", "-8 0 -4", "0 4 -10", "-1 7 0", "-4 3 4"};
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> dists = {"0 518 107 117 99 98", "518 0 441 467 497 804", "107 441 0 2 140 393", "117 467 2 0 126 419", "99 497 140 126 0 329", "98 804 393 419 329 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "5 13 18", "-1 -5 9", "0 -6 9", "9 -3 3", "-3 5 -8"};
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> dists = {"0 251 150 89 38 62", "251 0 701 338 317 329", "150 701 0 251 110 86", "89 338 251 0 45 117", "38 317 110 45 0 18", "62 329 86 117 18 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 5 15", "5 2 -11", "6 -7 2", "6 -1 -1", "7 3 -2"};
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> dists = {"0 270 77 9 53 161", "270 0 209 249 251 293", "77 209 0 62 210 20", "9 249 62 0 86 146", "53 251 210 86 0 338", "161 293 20 146 338 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "3 6 15", "6 -4 5", "-1 -2 2", "-2 7 0", "10 -6 5"};
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> dists = {"0 413 146 74 41 99", "413 0 443 153 594 698", "146 443 0 134 185 473", "74 153 134 0 189 269", "41 594 185 189 0 146", "99 698 473 269 146 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "2 3 20", "1 12 1", "-1 3 8", "5 0 -4", "-3 -9 -3"};
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> dists = {"0 234 41 134 45 54", "234 0 173 326 453 342", "41 173 0 53 86 131", "134 326 53 0 131 170", "45 453 86 131 0 105", "54 342 131 170 105 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 3 15", "-4 -3 4", "-11 -3 2", "-2 -4 -5", "-3 6 -3"};
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> dists = {"0 339 53 117 98 137", "339 0 554 810 713 50", "53 554 0 74 131 294", "117 810 74 0 29 494", "98 713 131 29 0 425", "137 50 294 494 425 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 7 17", "-6 -1 -4", "-2 -8 -7", "3 -8 -5", "1 6 10"};
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> dists = {"0 443 116 74 54 171", "443 0 635 777 401 692", "116 635 0 290 326 59", "74 777 290 0 74 317", "54 401 326 74 0 369", "171 692 59 317 369 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 9 19", "4 8 -6", "-1 -8 -3", "-2 -5 5", "11 5 -5"};
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> dists = {"0 961 962 963", "961 0 1 2", "962 1 0 1", "963 2 1 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 0 31", "-1 0 31", "-1 -1 31"};
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> dists = {"0 800", "800 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 4 28"};
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> dists = {"0 902", "902 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 1 30"};
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> dists = {"0 1000 1000 1000", "1000 0 1000 1000", "1000 1000 0 1000", "1000 1000 1000 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> dists = {"0 961", "961 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 0 31"};
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> dists = {"0 14 5 11 12 11 10 2 12 3 9 2 5 12 10 14 2 14", "14 0 29 41 26 49 24 8 50 9 29 18 27 50 34 46 20 42", "5 29 0 6 5 10 9 9 5 10 2 5 2 5 5 19 9 17", "11 41 6 0 11 8 5 21 3 12 6 17 2 3 21 9 17 5", "12 26 5 11 0 27 6 14 16 11 1 14 5 16 14 34 22 26", "11 49 10 8 27 0 21 21 3 20 18 13 10 3 17 5 9 9", "10 24 9 5 6 21 0 16 14 5 5 18 3 14 26 18 20 10", "2 8 9 21 14 21 16 0 22 5 13 2 11 22 10 26 4 26", "12 50 5 3 16 3 14 22 0 19 9 14 5 0 14 10 14 10", "3 9 10 12 11 20 5 5 19 0 10 9 6 19 21 17 9 13", "9 29 2 6 1 18 5 13 9 10 0 11 2 9 11 25 17 19", "2 18 5 17 14 13 18 2 14 9 11 0 9 14 4 22 2 24", "5 27 2 2 5 10 3 11 5 6 2 9 0 5 13 13 11 9", "12 50 5 3 16 3 14 22 0 19 9 14 5 0 14 10 14 10", "10 34 5 21 14 17 26 10 14 21 11 4 13 14 0 34 10 36", "14 46 19 9 34 5 18 26 10 17 25 22 13 10 34 0 14 2", "2 20 9 17 22 9 20 4 14 9 17 2 11 14 10 14 0 18", "14 42 17 5 26 9 10 26 10 13 19 24 9 10 36 2 18 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "1 2 3", "-1 -2 0", "-3 -1 -1", "-2 -2 2", "-1 -1 -3", "-3 0 1", "1 0 1", "-2 -2 -2", "-1 1 1", "-2 -2 1", "1 -1 0", "-2 -1 0", "-2 -2 -2", "1 -3 0", "-2 1 -3", "1 0 -1", "-3 1 -2"};
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> dists = {"0 251 107 321 283 354 283 18 374 74 285 89", "251 0 320 98 428 241 264 149 321 89 166 110", "107 320 0 194 76 321 264 101 113 105 150 126", "321 98 194 0 246 283 306 219 83 131 82 166", "283 428 76 246 0 201 164 229 97 177 90 170", "354 241 321 283 201 0 9 228 332 136 81 97", "283 264 264 306 164 9 0 181 329 113 90 74", "18 149 101 219 229 228 181 0 296 20 177 29", "374 321 113 83 97 332 329 296 0 212 89 241", "74 89 105 131 177 136 113 20 212 0 85 5", "285 166 150 82 90 81 90 177 89 85 0 82", "89 110 126 166 170 97 74 29 241 5 82 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "7 9 11", "-1 9 -5", "7 16 4", "-7 15 -3", "-8 13 11", "-9 11 9", "0 3 3", "2 19 -3", "0 7 5", "-2 16 5", "-2 7 6"};
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> dists = {"0 729", "729 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 0 27"};
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> dists = {"0 1 1 2 0 1 1 2 4 4 9 9 18 8 13 4 13 5 2 10", "1 0 2 1 1 0 2 1 1 5 10 4 13 5 10 1 10 2 1 5", "1 2 0 1 1 2 0 1 5 1 4 10 13 5 8 5 8 4 1 9", "2 1 1 0 2 1 1 0 2 2 5 5 8 2 5 2 5 1 0 4", "0 1 1 2 0 1 1 2 4 4 9 9 18 8 13 4 13 5 2 10", "1 0 2 1 1 0 2 1 1 5 10 4 13 5 10 1 10 2 1 5", "1 2 0 1 1 2 0 1 5 1 4 10 13 5 8 5 8 4 1 9", "2 1 1 0 2 1 1 0 2 2 5 5 8 2 5 2 5 1 0 4", "4 1 5 2 4 1 5 2 0 8 13 1 10 4 9 0 9 1 2 2", "4 5 1 2 4 5 1 2 8 0 1 13 10 4 5 8 5 5 2 10", "9 10 4 5 9 10 4 5 13 1 0 18 9 5 4 13 4 8 5 13", "9 4 10 5 9 4 10 5 1 13 18 0 9 5 10 1 10 2 5 1", "18 13 13 8 18 13 13 8 10 10 9 9 0 2 1 10 1 5 8 4", "8 5 5 2 8 5 5 2 4 4 5 5 2 0 1 4 1 1 2 2", "13 10 8 5 13 10 8 5 9 5 4 10 1 1 0 9 0 4 5 5", "4 1 5 2 4 1 5 2 0 8 13 1 10 4 9 0 9 1 2 2", "13 10 8 5 13 10 8 5 9 5 4 10 1 1 0 9 0 4 5 5", "5 2 4 1 5 2 4 1 1 5 8 2 5 1 4 1 4 0 1 1", "2 1 1 0 2 1 1 0 2 2 5 5 8 2 5 2 5 1 0 4", "10 5 9 4 10 5 9 4 2 10 13 1 4 2 5 2 5 1 4 0"};
    Reconstruct* pObj = new Reconstruct();
    clock_t start = clock();
    vector<string> result = pObj->findPoints(dists);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0 0 0", "0 0 1", "-1 0 0", "-1 0 1", "0 0 0", "0 0 1", "-1 0 0", "-1 0 1", "0 0 2", "-2 0 0", "-3 0 0", "0 0 3", "-3 0 3", "-2 0 2", "-3 0 2", "0 0 2", "-3 0 2", "-1 0 2", "-1 0 1", "-1 0 3"};
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=293874&rd=5864&pm=3057
********************************************************************************
/*
 * ALL HOPE ABANDON, YE WHO ENTER HERE
 */
 
 
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <set>
#include <algorithm>
#include <sstream>
#include <iterator>
#include <iostream>
#include <math.h>
#include <stdio.h>
 
using namespace std;
 
#define fi(a, b) for(int i=((int)(a)); i < ((int)(b)); i++)
#define fj(a, b) for(int j=((int)(a)); j < ((int)(b)); j++)
#define fk(a, b) for(int k=((int)(a)); k < ((int)(b)); k++)
#define fl(a, b) for(int l=((int)(a)); l < ((int)(b)); l++)
#define fdi(a, b) for(int i=((int)(a)); i > ((int)(b)); i--)
#define fdj(a, b) for(int j=((int)(a)); j > ((int)(b)); j--)
#define fdk(a, b) for(int k=((int)(a)); k > ((int)(b)); k--)
#define fdl(a, b) for(int l=((int)(a)); l > ((int)(b)); l--)
#define ri(b) for(int i=0; i < ((int)(b)); i++)
#define rj(b) for(int j=0; j < ((int)(b)); j++)
#define rk(b) for(int k=0; k < ((int)(b)); k++)
#define rl(b) for(int l=0; l < ((int)(b)); l++)
 
#define itadj for(int adx=-1; adx<=1; adx++) for(int ady=-1; ady<=1; ady++)
#define chkadj(i, j, n, m) ((i)>=0&&(j)>=0&&(i)<n&&(j)<m)
#define fe(v,it) for(__typeof(v.begin()) it=v.begin(); it != v.end(); it++)
 
#define ll  long long
#define i64 long long
#define lint long long
#define i32 int
typedef string str;
typedef double dbl;
 
#define bz(a) memset(a,0,sizeof(a))
#define sq(x) ((x)*(x))
 
#define vi  vector< int >
#define vvi vector< vector< int > >
#define vs  vector< string >
#define vvs vector< vector< string > >
#define vd  vector< dbl >
#define vvd vector< vector< dbl > >
#define vl  vector< ll >
 
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)>(b)?(b):(a))
#define ABS(a)   MAX((a),-(a))
 
#define vp(v,a)  (v).push_back(a)
#define vpob(v) (v).pop_back()
#define vpof(v) (v).pop_front()
 
#define va(v) (v).begin(), (v).end()
#define vf(v,a) find(va(v),(a))
#define ve(v,a) (vf(v,a)!=(v).end())
#define vins(v,a) do { if (!ve(v,a)) vpb(v, a); } while(0)
#define vind(v,a) (ve(v,a)?(vf(v,a)-v.begin()):-1)
#define vdel(v,a) v.erase(remove(va(v),a),v.end())
 
#define sz size()
 
#define mp(x, y) make_pair(x, y)
#define mt(x, y, z) mp(mp(x,y),z)
 
#define pfst(p) (p).first
#define pscd(p) (p).second
 
#define tfst(t) (t).first.first
#define tscd(t) (t).first.second
#define tthd(t) (t).second
 
typedef pair<int, int> pii;
typedef pair<str, str> pss;
 
typedef pair< pii, int > tii;
 
#define dbg_vint(v) do { copy(va(v),ostream_iterator<int>(cout,"\t")); cout << endl; } while(0)
#define dbg_vstr(v) do { copy(va(v),ostream_iterator<str>(cout,"\n")); cout << endl; } while(0)
#define dbg_vdbl(v) do { copy(va(v),ostream_iterator<dbl>(cout,"\t")); cout << endl; } while(0)
 
#define pq priority_queue
 
class Reconstruct {
public:
  vector <string> Reconstruct::findPoints(vector <string>);
};
 
vector< vi > ret;
vector< vi > cur;
 
int n;
int d[21][21];
 
void doit(int i)
{
  if (i==n)
  {
    if (ret.sz==0) { ret=cur; }
    else if (cur<ret) { ret=cur; }
    return;
  }
  
  for(int x=(i==1?0:-31);x<32;x++) if ((x*x)<=d[0][i])
  for(int y=(i==1?0:-31);y<32;y++) if ((x*x+y*y)<=d[0][i])
  for(int z=(i==1?0:-31);z<32;z++) if (x*x+y*y+z*z==d[0][i])
  {
    if ((i==1)&&(x>y||y>z||x>z)) continue;
  
    bool f=true;
    fk(1,i)
    {
      dbl dd=sq(x-cur[k][0])+sq(y-cur[k][1])+sq(z-cur[k][2]);
    
      if (dd!=d[k][i]) { f=false; break; }
    }
    if (!f) continue;
    
    vi r(3,0);
    r[0]=x;
    r[1]=y;
    r[2]=z;
    
    vp(cur,r);
    doit(i+1);
    cur.pop_back();
  }
  
  return;
}
 
 
vector <string> Reconstruct::findPoints(vector <string> dists) {
  ret = vvi(0);
  cur = vvi(0);
  
  bz(d);
  n=dists.sz;
  
  ri(n)
  {
    istringstream st(dists[i]);
    rj(n) st>>d[i][j];
  }
  
  vp(cur,vi(3,0));
  
  doit(1);
  
  vs r;
  
  ri(ret.sz)
  {
    ostringstream st;
    st << ret[i][0] << " " << ret[i][1] << " " << ret[i][2];
    vp(r,st.str());
  }
  
  return r;
}
 
#if 1
double test0() {
  string t0[] = {"0 1","1 0"};
  vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
  Reconstruct * obj = new Reconstruct();
  clock_t start = clock();
  vector <string> my_answer = obj->findPoints(p0);
  clock_t end = clock();
  delete obj;
  cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
  string t1[] = { "0 0 0",  "0 0 1" };
  vector <string> p1(t1, t1+sizeof(t1)/sizeof(string));
  cout <<"Desired answer: " <<endl;
  cout <<"\t{ ";
  if (p1.size() > 0) {
    cout <<"\""<<p1[0]<<"\"";
    for (int i=1; i<p1.size(); i++)
      cout <<", \"" <<p1[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  cout <<endl <<"Your answer: " <<endl;
  cout <<"\t{ ";
  if (my_answer.size() > 0) {
    cout <<"\""<<my_answer[0]<<"\"";
    for (int i=1; i<my_answer.size(); i++)
      cout <<", \"" <<my_answer[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  if (my_answer != p1) {
    cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
    return -1;
  }
  else {
    cout <<"Match :-)" <<endl <<endl;
    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.
  }
}
double test1() {
  string t0[] = {"0 2 2","2 0 2","2 2 0"};
  vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
  Reconstruct * obj = new Reconstruct();
  clock_t start = clock();
  vector <string> my_answer = obj->findPoints(p0);
  clock_t end = clock();
  delete obj;
  cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
  string t1[] = { "0 0 0",  "0 1 1",  "-1 0 1" };
  vector <string> p1(t1, t1+sizeof(t1)/sizeof(string));
  cout <<"Desired answer: " <<endl;
  cout <<"\t{ ";
  if (p1.size() > 0) {
    cout <<"\""<<p1[0]<<"\"";
    for (int i=1; i<p1.size(); i++)
      cout <<", \"" <<p1[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  cout <<endl <<"Your answer: " <<endl;
  cout <<"\t{ ";
  if (my_answer.size() > 0) {
    cout <<"\""<<my_answer[0]<<"\"";
    for (int i=1; i<my_answer.size(); i++)
      cout <<", \"" <<my_answer[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  if (my_answer != p1) {
    cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
    return -1;
  }
  else {
    cout <<"Match :-)" <<endl <<endl;
    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.
  }
}
double test2() {
  string t0[] = {"0 33 25","33 0 84","25 84 0"};
  vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
  Reconstruct * obj = new Reconstruct();
  clock_t start = clock();
  vector <string> my_answer = obj->findPoints(p0);
  clock_t end = clock();
  delete obj;
  cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
  string t1[] = { "0 0 0",  "1 4 4",  "3 -4 0" };
  vector <string> p1(t1, t1+sizeof(t1)/sizeof(string));
  cout <<"Desired answer: " <<endl;
  cout <<"\t{ ";
  if (p1.size() > 0) {
    cout <<"\""<<p1[0]<<"\"";
    for (int i=1; i<p1.size(); i++)
      cout <<", \"" <<p1[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  cout <<endl <<"Your answer: " <<endl;
  cout <<"\t{ ";
  if (my_answer.size() > 0) {
    cout <<"\""<<my_answer[0]<<"\"";
    for (int i=1; i<my_answer.size(); i++)
      cout <<", \"" <<my_answer[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  if (my_answer != p1) {
    cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
    return -1;
  }
  else {
    cout <<"Match :-)" <<endl <<endl;
    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.
  }
}
double test3() {
  string t0[] = {"0 15","15 0"};
  vector <string> p0(t0, t0+sizeof(t0)/sizeof(string));
  Reconstruct * obj = new Reconstruct();
  clock_t start = clock();
  vector <string> my_answer = obj->findPoints(p0);
  clock_t end = clock();
  delete obj;
  cout <<"Time: " <<(double)(end-start)/CLOCKS_PER_SEC <<" seconds" <<endl;
  string t1[] = { };
  vector <string> p1(t1, t1+sizeof(t1)/sizeof(string));
  cout <<"Desired answer: " <<endl;
  cout <<"\t{ ";
  if (p1.size() > 0) {
    cout <<"\""<<p1[0]<<"\"";
    for (int i=1; i<p1.size(); i++)
      cout <<", \"" <<p1[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  cout <<endl <<"Your answer: " <<endl;
  cout <<"\t{ ";
  if (my_answer.size() > 0) {
    cout <<"\""<<my_answer[0]<<"\"";
    for (int i=1; i<my_answer.size(); i++)
      cout <<", \"" <<my_answer[i]<<"\"";
    cout <<" }" <<endl;
  }
  else
    cout <<"}" <<endl;
  if (my_answer != p1) {
    cout <<"DOESN'T MATCH!!!!" <<endl <<endl;
    return -1;
  }
  else {
    cout <<"Match :-)" <<endl <<endl;
    return (double)(end-start)/CLOCKS_PER_SEC;  //I want to eventually turn this into a time of some kind.
  }
}
 
#endif
//Powered by [KawigiEdit]

********************************************************************************
*******************************************************************************/