/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11714
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class DengklekMessage {
public:
    double theExpected(vector<string> pieces, vector<string> goodSubstring, long K);
};

double DengklekMessage::theExpected(vector<string> pieces, vector<string> goodSubstring, long K) {
    double ret;
    return ret;
}


int test0() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {"00"};
    long K = 10;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {"00"};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> pieces = {"0", "1"};
    vector<string> goodSubstring = {"00"};
    long K = 3;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> pieces = {"0", "10", "110"};
    vector<string> goodSubstring = {"0", "1"};
    long K = 5;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.6666666666666665;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> pieces = {"0", "10"};
    vector<string> goodSubstring = {"000101000101010100"};
    long K = 526;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25146484375;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 9.99999999501E11;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> pieces = {"01110110111110010001110000111111001110111100011000", "01111101101010011101000010011000001100101000111011", "10011000010110111111000100000101111000010011001001", "11111010101010000111010011101001000000001110100011", "00100100100011111101111010001011000101000010001111", "11010001001001001111011001010100000100001101000111", "00110100101100011011110100001011011010111101100000", "10011000001101101010111111000000000111000101001010", "00101100111101010110000000000011100000011111010010", "11100100011110110011010111110010111101101100011000", "11100101101100011100000111000100111011111001110001", "01011001110010000011100111101010101111011000000101", "10001000000011001010100110001010000110001100111000", "00101011001001101110111000111111011011101101011010", "11111111100101111110111011011001111010000111111111", "10011010111001000110100110110000111000000011010101", "11010100000001010100001000000010111011001101011111", "10110100010001011101101000011000100001111100110100", "10110011100011101001001110010100011101111001110110", "00111010101001000001111101011001010010111010101011", "10111011010100110001110010101100011010011001010110", "00110100111000110010011101110110101110010101111011", "10000000111110111101010111011001101100100010001111", "10010111111101001001010011110000001011111000101001", "10101110001001000111100001011101100100110110111010", "01001011000011101011000010110001000001100000001000", "10011101101111101011000011100011000100110101110101", "11111110111010010000111001110001110010010110101101", "00001100100011111101011000010001010110110100000010", "10100000011000100011000001000111001100001000000000", "00001010111100011000000100000011111111001100111010", "11111001111111001011010100100110010010010100000110", "00101011011010000001111101110011001000101100011000", "10011110110001010011001110111111010100111001100011", "01010100100100110000001111110011011100000111110011", "11000010100100011101011001010111110111110011001101", "00111010111010001100010000100101100100010101010110", "11110011111101000010000100000110111100101111010010", "00010101000111101000010010001001100110011010111100", "01010101010101101010110000010101110101001100100000", "00101000010010110101011001111010110001011010001101", "01111000010001011010101110000000011010010010100011", "00100111101111011011011111110011101010011010000000", "00100000011011001010010101000100101111001011100011", "01111111111110000000101110110101101100001110000000", "01111001000101010000110000111010001110110111101101", "01001011101111100011101111001000010100100010001100", "11100101111101110011101000001001110111111100001010", "01011100110001010011110110010110100100000000100101", "11110111110000111111111001111001011000111100011010"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> pieces = {"11011100110001101111111110001011001000101100100111", "11100000011111011101000111100101100000100010001110", "11101010001011100000100101100100010001101100100110", "00100100001110011100110010011000110011001101001011", "00101110011011101111010101011000011111110011111010", "00110101111011010011100110111101010011100111011110", "10011100101100010111101010000010001100000100111000", "11001111101111010111001010000100000000101100001011", "00111111011101000101001110110110010011110100111001", "10010011111111000110000001010010100110111101101000", "01110111100101011001101010101110001000111110011010", "00010110101110001001001100101010100000101010100001", "01000011101111001110101101010001000001010110001010", "10101100000110001010110011100111101011011110010101", "00100110000000000000001101110101001101100001010010", "00100000110000100110000000000000010100001111110000", "10001000111101111001101010101001001101000011101110", "11101110000111011101111000110011010111000110011101", "01000101000110010100011110010111000011010101111110", "01101001101011001100101100010100010010110001011110", "01000000111101100111100110001101111010011111011010", "11110000111000011011110111110100000111101010110101", "11010101110101100001100100100010001101010100111001", "00110100100000011011100010110101100010111101110010", "11111010100110001001101111011100101110111010100101", "10101110100110111110000010100100010000011010111001", "01010000100110001001001010110111000010011011001011", "11100010111101000000001001010111010001010010001010", "11110011100111000011001001111001000001111101111100", "10110010101000000010111001000011010001110111000001", "11001010110111111100000100100011110101001000011010", "11011110111100001010111110100100010000101000000011", "11110010101111011011101010011010111011111001100110", "10111011101000111000011100001000010010110100000101", "11001011011011101101111101010100100100101011001100", "01010001111111101101101101110000100110001111111011", "11010101001111111111100001000110110001101101100010", "00110111011111000110010010111110010001110010010000", "10000011011110110101011010111011011001010001011001", "01111101100101100010010100000000111111010110101001", "01111011001111011110111010011000001011011001101000", "00001000111110000000101110001111111000111001010011", "00000001001110010011001100001010100100011000100010", "10001100100001100111001110001101100000101000011101", "11000011101000001110110100010101010000111110001010", "00110100011001001110000000110000101000101101000110", "00001011111101101110100001000011101011001110100011", "10110010100110100010100111000010010100100011011101", "00101010001011111000101100110010101110000101110010", "10111100000011101110100011101110000010010100111001"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5224429194420244;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> pieces = {"1111111111111111111111111", "111111111111111111111111111111111111111111111111", "110111111111111111111111111111", "111111111111111111111111", "11111111111111111111111111111111", "11111111111111111111111", "111111111111111111111111111111110111111", "111111111111111010111", "1111111111111111111111", "11111111", "111111111111111111111111111111111", "111111111111111101101111111111", "11111111111111111111111111111111111", "11111111011111111111111111111111111111111", "111111111111111", "111111111", "111111111111", "1111111111111111111111111111", "11111111111111", "1111111111111111111101111111111111111111111111111", "11110111110111111111111111", "111111111111111111111111111111101111", "1", "111111111111111111", "1111111111111111111111111111111111111111111", "111111111111111111111", "111111111111101111111111111111111111111", "1111111111111", "1111111111111111111111111111111111", "1111110111111111111111111111111111111111111111", "11111111111111111111111111111", "1111111111111111111111111111111111111", "11111111101111111111111111111", "1111111111111111111111111111111111111111111111", "11111111111111111", "110111111111111111111", "1111111", "1111111111111111111111111111111011", "11111111111111111111"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.4550084424316388E8;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> pieces = {"0", "100", "0000", "000001000", "0000000", "000", "00", "00000000", "0000000000", "00000", "000000", "000000000", "1"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.002816731436190788;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> pieces = {"000", "0", "000000000", "0000000", "000000", "00000000", "00", "0000000000", "00000", "100", "0000"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4953.405461706865;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> pieces = {"001", "0000100110000100001", "0100000001011111000110000", "110010000101", "111100000100110001100001010101", "000000000010010100", "011010101010000101111110010001000010010101011101", "1011100", "1000", "100000000", "100001101000110010", "10010101100100001110001010100100010100000", "10100000101001100", "00101000101100000111111000000000011010001010", "1101001111001110001100000001000000000110001011", "11010100101010010", "0101100100", "11001001010100000", "1000100111010010000000110000001000001110100001001", "01001001001110000010000111", "01000101001000000000", "010010010101111100000000011000011", "1000010010100111010001101010001100", "000100000", "00101000000010", "0", "010010000010000010000000100001", "0011001010010010010", "0011010000100100010011100", "000001100", "100000001110000100", "00010010010010000111001", "11001", "1000001000000100010000000100001101110001010000001", "101", "1000000", "000001001010110110011011", "010000000101001100100000010010", "001001000001011110010111010010010010100000000", "101001000100011010101", "00001001", "0110100010000001001010010010000101", "1100010001000011010111100", "1000000110000000100001111", "001110011101111000100", "11010010010000010101011010010", "01100000001010000000000001", "0000100100100010100100001", "001000100000000000", "0111100100000000010011001110111"};
    vector<string> goodSubstring = {"1"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 7.780000000005202E12;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> pieces = {"000001110", "111000000111001000000", "110000000010000010111001000000100001000001101", "1001", "0011000100101110000000", "1000101", "01110110101010011010", "000", "01010000100001100000110100110110000", "001000000110000010010001000", "0000000000000000001110110000010100000001000", "011100010000100000010011100100000000001100", "1100100001000010100111", "00100000010000100001010001", "01010000000001000010111", "11010000100111111010010011001001001001010", "111010010000010", "01100001100001010101100000100100010000", "011110000101011000010000111010000010000110001000", "0101010000", "0101101010101000000100", "1101110010000101011100101000100010000000001000010", "000010101001001", "0000", "10011010001000010100000000100", "0000010101000", "100001000010001010100000101100100111101010", "000000010000000000010100101110000110000000000010", "100101010001010010000000100001000001000", "000001000000010010110010100", "00", "1110111100100000001001000010011000", "00000111001000100010000000010111100000100000000", "000100100", "10101110100100000000101011000010001000001000", "1000000001111010000001010110110000000010100", "001110000001111010011001000100000", "0110100", "111110000001000010011001010110000001", "0111011100110100", "01100011010010000010000101010011000000010", "0000000011110001101111000001110", "101000100100001110110011000000110000001001110000", "0010111000000001010011010010001000100010011", "10010010000001110001000100101000010", "00100001111000100", "1010010100000000", "000100001000000001011000011110110100", "100010011110000000000011010000000", "00110000000100000"};
    vector<string> goodSubstring = {"01"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 5.911599999994594E12;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> pieces = {"1111100111111111101", "11", "11111101011111111111111111111111", "11011111110111101111111111111111111111110", "111111111001111111111011111111111111101111", "0111111", "101111111101111111111111011111111111111111011110", "11111011111111111110", "1011111111111111110111111101001011101101111", "111101110111111111111111", "1", "11111011111111", "01011011111111101101111110101", "1111", "111111101111111", "1101111111011111111111", "0111011", "11111110101101111111111111", "111011111111111111111111011101111111111", "1110111111110", "111111111111110101111110011", "0111111111110111111111111110111111011111101", "0110101111111110111110111111111111111111", "1111111111111111111111111101111", "1011111111111111111111101", "11011111111011110011111101110101111101000", "1111111111111111111110111111111111011", "111110101111101001", "1111111101111111111111111101111111011111010", "1111011110111111111", "11111110111101111101111111111101111111111111111", "11111111110111111111111", "11111111110111111110111111111111101", "011110111111", "111111111110", "111101101101011111111111101101111111011", "11111011", "1111111110111", "1111001011001011011111111111111110111", "11110111111111110101111111101101011", "111111111111111011110011111", "1111000111111110110111111101101111111111110111111", "111111", "11111101111", "11001101111111111111111111101111111111111110111111", "0111111111", "1111111111101111111111111111110101", "0111", "0101110", "11111111111111111011111110111001111111111101111"};
    vector<string> goodSubstring = {"111"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.7172976000000447E13;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> pieces = {"1111111111111111111111", "11011111", "11111101111110111111", "1111111101111111101", "111111111101111111111101101111101011110110111", "111001111111", "011111111111111101111011111111", "111110111111101111111111111111111", "1111101111111", "111111101111111111111111111111110111", "11111111111011111111", "1111111101011111111111111", "1101101111111111111111", "1111011011111111111111111111111111111011", "1101110111111100111111111", "1111111011111111111111111111111111111011", "11111111111111111011111111111101111110111101111111", "01111111", "1111111011110011111111111111111", "11101111111111", "11010111110111111111111111101111111110111111111111", "111111111", "111111111111110111110111111", "10101111111111", "111111011111111111", "1111110110111101", "111", "11111111111011111110111", "11111111111", "111111111111111101111111111111111", "1011111110110111111011111111111111111111111011011", "1011111111101011111111111110111111", "111110111111110111111110111111101111111", "11", "10111011111111111111011011", "11011110110110101111001111111111", "1111111011011111111111111111110111111111", "11111", "11111111111111111110", "1111", "01111110111111011111111111111101111111110111111", "1110111110111111111011111111", "11111111111111111111111111111111111111", "0011", "1111111111111111111011110111", "1", "11111111", "111001111111111111111111011111001", "1111111110111111111111111111101111111", "11111111111111111111111111111101110111111111111111"};
    vector<string> goodSubstring = {"1111"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.6872624640001533E13;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> pieces = {"0000000000000000000000000000000000000", "000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000", "00000000000000000000000000000", "0000000000000000000000000000000000000000000", "000000000000000000000", "0000000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000", "00000100000000000000000000000", "000000000000000", "000000000000", "00000000000000000", "0000000000000000000000000", "0000000000010000000", "0000000000010000000000000000000000000000000", "00000000000000000000000", "000000000", "0000000000000", "000000000000000000000000", "00000000000000000000000000000000000", "00000000000000000000000000000000000001000000000", "00000000000000000000000000000000000000", "0000000000000000000000", "00000", "0000000", "0000000000", "010000", "00000000000", "000", "0000000000001000000000000000", "000000000000000000", "00000000000000000000000000000000000000000", "000000000000000000000000000000000", "0000000100000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000", "0000000000000000", "000000010000000000", "00000000000000000000000000", "000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000", "00", "0000", "00000000000000000000000000010000000000000000000", "00000000000000000000", "000000000000000000000000000000000000000", "0", "0000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000"};
    vector<string> goodSubstring = {"00000"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.5260000000005375E13;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> pieces = {"11111111111111111111110111111111111", "111111111111111110111111101111111111101110111111", "11111111111111111011111111110110101", "111111111111", "01101111111111111011111100111", "11111100111111111111111011111111", "11111101111101", "11", "111111", "1110111111", "11101111011101111111111", "11111111101111011011111111111111010", "1111101111111111", "1111111111111111111111111101111111111111111111111", "0111111101111101010111111110111111110111111100111", "1111110111110110101111111111011", "1111110111111111110101011101101", "110111110111111111111111111011111101", "1011111111101111111111110101101011111111111", "111110111", "11111111111111110", "11011", "1101111111110111111111111111", "101111111110101111011111111111111111111111111", "111111111110001111111111111111111011111111", "1111011110", "1111111111111111101111", "111111111111011111111111111110011111111", "10", "11111111111111111011011101", "10111111111111111111111110111111110111", "111111111111011111111111101111111011111111", "11111111101111", "11101111110111011111101111111111110110111", "11111111111101111010111111111111111010111", "1101010", "101011111111001111", "111110101110111111111111010", "10111110111011111111011101101111", "11111101111111111110111111111111111111111111", "110111101111111111111010111111", "0111111111111111011111111111111111111101011", "110111", "111", "1111111111111111111111111111111", "1111101111111111101111111111110111111111111", "111110111111111111111101", "11101", "111111111111011011111101111", "1111111111111011111111111011111111111011"};
    vector<string> goodSubstring = {"101111"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.726455999999725E12;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> pieces = {"00100000000000000000000000", "00000000010000000000000000000000001000000000", "00001000000000000000000000000000000000000000000", "00000000", "000", "000000000000000000000000000110000000000000", "00000000000000000000000000000000000001000", "0000000000000000000000000000100000", "00000000000000100000000000000000000000000000", "001001000000001", "000000000000000", "00", "000000000000000000000000000", "0000000100000", "00000000000000000000000100000000000000000", "000000001000000000000000000000", "0000000", "00000000000000000000011000000000000000000000", "0000000000000000000000000000000000000", "000010000000000000000", "1000000", "00000000000100", "0000000000000", "0", "0000000000000000000000000", "0000", "000000100000", "00000000000000000000", "00000", "0000011000000000000000000000", "000000000000000010000000100000", "000000000000000000000", "0000000000000000000000000000000000", "00000000000", "000000", "00000000000000", "1000000000000000", "0000000000000000", "00000000000010000000000000000000", "0000000000000000000000", "000000000", "00000000000000000010000010000000", "00000000000000000000000000000000000000000", "00000000000000000010000000000000000000000000", "0100010000000000000", "000000000000000000000000000000000000000000", "000001000000000000000000000000000000", "0000000000000000000", "00000000000000000000000000000000000000100000000000", "000000000000"};
    vector<string> goodSubstring = {"0000000"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.9306235165613965E13;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> pieces = {"101011111111111111111111111", "111100111111111111111111111111", "11011111111111111111", "11011111111111011110111111001", "111", "11111111111111111111111111110111", "111101111111101111111111111111111", "011011110111111011111111111110111111111111101111", "01110111111111111111111101111111111111", "111110111111111", "11111111111111", "1111111011111111111010111111111111101", "111111111111101111111", "011111111110111111101111110111111011111111111", "111111111110011110110011111111111", "0111111111111110111101101111111111011111111111111", "1111111111111110111111111", "0111100111111111111111111111111111111111111010111", "10111111101111011001111111111100111111110110", "11111110111111111111111", "1011111111111111111111111111111001", "11111111111111110101111111101111111", "1111111111111", "1111011", "110110010111111111111111111111111", "11111111111111101111111111111111111110111", "1111100110111111101111100111110111101110", "111111111111111111011111111111111111110111111", "111111111111111111111111101011111111", "11110", "111111111011111111001111111111", "110101111111101111111111111", "111111111111111111", "11111011111110111010111111110101111101", "10111101010111011111111111111111111111111111111111", "11111111111111111111111", "11111111111101111111", "10111110111111111", "1011111111", "1111011111111", "111111111111111101111111100111111111011100101", "111111111111111101101", "111111111111111011111111111111111111111010111111", "111011111111111", "11101111011111", "1111111111111001100111111111111011", "1111111111111111", "1111111111111111111111111111111111111111111111", "1111111111111111111", "11111111110111"};
    vector<string> goodSubstring = {"11111111"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.405065839999622E13;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> pieces = {"1111010001101111101110010001111001", "00110", "101000001000001000101110000011000010111110110", "010000111011101111111000", "101100101001111101111010010000001111000001111110", "1010101110110000000010100000110110000", "0", "110101100110110001010110100101", "001110", "110001111100000", "1011101010", "111000101100000", "00111001000110000101001", "11001001001110110001100000", "1110000000000111000100100", "111010001", "11110001100100100010000110000010100", "11101001001110011010000111000101010000", "0000101000100101101001100111110100", "01010001100110001001101011110101000110", "000010001", "01101000100001110101001001101100010110001010", "10100100000000110001011", "011010001101001011101001000110010101011", "000000000001011010000010100", "1101001111", "010001111010110101000001", "111010101111000111010001100100", "0011010100000011101000", "11000001001000011", "00111001000110001", "00001100100110001100000110101101101000101010110111", "0000100001110101000111011010101", "00100011000111110100001100001100010110010110001", "111100", "000001011001000000010110", "1111", "0011011010010110001101001", "10111111001010111010010000000101000000", "1001100011001000011100001", "101011100010001110110101110010011010101010011", "100000010010101111000110011101001110010010", "01010100000011010101100100010010000000110000", "01110011000100000100010001010111110011000100011", "0001", "11001101000010000101000001010001110", "11000", "110001100010000001111000001010", "011011", "00100"};
    vector<string> goodSubstring = {"010111001"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.719999999998625E10;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> pieces = {"1", "00010", "0000000000000", "1000001001", "001000000001000000000010000000000", "0100000000000010000000100000100000000000", "000001000100000010111010100000000001001100", "1100", "00000000000101000001100000100000000", "000100001000000000000000000000010000", "00010000001000010001100", "000000000000010010100000100001", "0000000100000000100000000100000001100000100000", "0010000001000", "0000000", "100000100010010", "000000000011", "01000010000001000010000110010100001010", "00001000100000000001000000000100000", "0000100000000000000000001010", "010000100000000000100000001000", "00100000000000000100100000000001", "000000000000001", "0100000010000000000000000001000", "11000000000000100000000001000000", "001", "000001001100010000000000000000000010001001000100", "00001110000000010100010000000000010", "00010000000000000000000100001000000010000", "0001100000000000010010000000010000000000000", "000011100000000000000000100000010000", "0100000000000", "0001000101001000000001", "010100110000000000000010000000011100000000100001", "0000011000000110110", "00", "0000", "000011001000000", "100000010000000", "0000100001000100000000000000100010000000110010", "010000000000000000000000000", "010000001010", "0010000001010001000000001000000000000000100", "0", "0001001000000001000111001000000", "000001100001001000000100", "001100000000010", "1000000000000000100000000000000000000100110000000", "00000000000000000100", "01000000000100001"};
    vector<string> goodSubstring = {"0000000010"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 9.351931611507451E11;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> pieces = {"00000000000000", "000000000000000000000000000000000000", "0000000000", "000000000000000000000000000000", "00000", "00001000000000000000000000000000000000000000", "00000000", "0", "00000000000000000000000000000000000000000000000000", "00000000000100000000000000000000", "00000000000000000000", "00000000000000000000000000000000000000000", "00", "000000000000000", "10000000", "000000000000000000100000000", "000000000", "000001000000000000000", "00000000000000000000000000000000000000000000", "000000000000000000100000000000000000000000", "0000000000000000000000000000000000000000000000", "000000000000000000000000000000000001000000", "0000000000000010000000010000000000000000", "0000000000000000000000000000000000", "000000000000000000000000000001000000", "00000000100000100000000000000000", "00000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000", "000000", "000000000000000000000000000000000000000000000", "00000000000000000000000000", "0000", "000000001000000000", "00000000000000000000001000000000000000000000000", "00000000000000000000000000000000000", "0000000", "0001000000000000000000000000000000000000", "0000000000000000000000000000000000000000", "000000000000000000000", "00000000000000000000000", "00000000000000000000000001000000000000", "000000000000000000000000000000000000000", "000000000000000000000000", "00000000000000000", "001000000000000000000000000000", "0000000000000000", "00000000000000000000000000000100000000000000000000", "0000010", "000010000000"};
    vector<string> goodSubstring = {"00000000000"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.29276530430568E13;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> pieces = {"000000001000000001010000000100000000000000001010", "011101000001001010000000", "0100101000100100000000010", "000000000000000000000000100000000", "0010010000100000000000000100111000000000", "010000000000000", "0000100100000000001000000", "00000000000010100", "00001000101011", "000001000000001000000000000", "000000001001000010010110000000000000000000000010", "0000001", "0000000000000000100000000010000", "10", "00001000110010", "00100000100000010001100101100010000001000", "0101000000010000000011100001000010000100000000", "000000010010000000001110000100000000000000000", "0", "00000001", "1000000000001001110000011000001001000010000000", "00001110000000000010010000100000000000001000000", "0000000000000100100000000000000000001000001", "000000010001010000010000000000000000000", "000000000000000000000100000000", "00010100000100001010000000000000000000000101", "0000000000000000000000010001", "000000100000011000000000001110000100100000", "00000010010000100000010000", "0000010000000100000001010000", "00000000000000000010000000000000000000000100000", "000000001011100000000000000000010000000010", "000000001000000001000000000000101000000010010", "0000000100100", "110010000000110000000010000001", "001000010000000000", "0000001000001001000000000000000000000100", "10010000001000000001000000000010000000010000100001", "1000000", "00000100001000100", "0000000101000", "0000000000000010000000000000000000000001000000", "10010100100000001000000011001010000000000", "10010000000000010", "0000000010000", "000000001000000001001100000000000000000000", "000100010000010000000001001", "00000010", "01000000000000100000000011", "0000000000000000000000000000000000000"};
    vector<string> goodSubstring = {"000001001000"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.3810161955988382E11;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> pieces = {"1000100011001000100101011011010000000000000", "0100010110001001110000000000110000000010", "000001010010000000010010010100000000010000", "011001100101000010001", "000100000000010000000000001000100010000", "0010000000", "0001110011010010", "01100100000010001011100110010000001000011", "0000000100011000100001000000001", "100011000001001010000101001010000", "00000010010100100010000000", "01100000000000010101011", "101110000001000001100000000000011000000010000010", "0001000001001000000000000000001001000000", "00100100000010111000", "001100000001010010100101", "00110100100001100010001100000000000000100", "0000000011000100000010100100000000010001", "100100100000001100100", "00001", "000001100100000111101010000000000000000", "01", "000001000000000000000000100011110000000", "11001010101100000000010000010000000001011110", "00000000000001000000001000100000000100000000100", "00000000010000000000100010100010000111100", "10110000100010001", "011000001000101001000", "0000000000010000001000000000010000000", "10101100001110001001000010001100100010", "1", "000000000000000010100000101000001100000100", "011100000010", "1010100000011000010", "001001101010100000", "101100", "10110100", "01100000000000010000001010110001", "001000100100000100011", "10001000001001001", "001000", "11001000000000100001010010000001110100", "01000000101000011100", "1001010000", "11100000000000000000010000000100100001000100", "000000000001000000011010001010001000100", "0010000100000000000101000100000110000100101", "0000", "1100000010000010010000000110110000011100100", "000110111000100"};
    vector<string> goodSubstring = {"0000001010000"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.11686239999633E10;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> pieces = {"00000100000100001101100011010111", "001001001010010100111000000010000100000001000", "010010000100000100100111000010000101011010", "010000001000010000101000", "0000001000010110011000000010000", "0100010000111100000101010000011000101010000101", "01110", "1000010000001000000000000001", "00001001100", "10100000000100010101100000011001", "0000100000011100001011000", "001101000000001001010000100000001000000", "100100000001001001010010", "0001000001100100010100000010000", "000010100001", "100010110100010001000100010000011001000010100", "01000000000000100000101100010000", "0010010", "110000111001000010010101", "010010000000", "0000001110110001100000010000", "000000000", "0110001100000101001000000", "1000000100001001100", "100000001111011000100", "00110001001000", "010000001110000011010010010001000110", "0000001000000010100101001101100110000010100000", "000000001010010001000111000000100000", "110010000010100101000010000100100001101011000000", "0001001000000100010000010100001", "00110100101101000000000000100010000100000011", "00010101000110001101100100100011000", "0000101000010100010101010000000000000000001001", "010111", "1111010000100010110", "000010010", "10010", "0010100000000", "000011", "000000001110010101000000", "10100", "0001010000000100110010000100010000000010010000", "10000", "0001000000", "0011000011111010100000000010000000000", "001010100000010010000000100110000000011", "0", "001101100001000010010000101000010100000101", "0000000111010100000011100000100011010001000010000"};
    vector<string> goodSubstring = {"00100000000000"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 8.478746600144577E10;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> pieces = {"0100100001000000010", "0011100000100110011000000100101000001", "100010000000101001000011011010100", "0001000101000110100100001", "101000000011011101", "010001000000010000001010000011010000", "100011100011001010000000110001000", "11111100001000", "0010110110101001001", "001001000010", "00001011010110000000001001100011000100101010", "11010110000010011010100100100000", "000010010010111", "0000001000100110000100110000", "000101000000000110001111010101000100110000000", "010101110001", "1001010010111010010011001010101", "0111001100010011101110000000101001011001100", "00101000001110000000100", "0001000", "011110101000001101000000110000010100000", "010", "000000000010100000001001101010000111010001", "11000000000110010101101111110000100100001000101110", "0011001111000011001100", "000001110", "00011000100000100001110010010100", "0110010010001001001100100100110", "11000001000001000000010000000000010", "001011010", "1010000010001100000001000100000000", "0011000000010000111011", "100001101100000010010010000010010010000110001110", "1101100010000010100111100010110100", "000000111100", "01100101101001110", "10000100110101000101000100001111", "010011", "111100010000001101010000001100", "100001100100101100100001", "000110101000010", "1111001110000010", "00101000100000", "1", "0", "0110010100000000101000", "01100000101010011001001000000", "0110100010011100000000101110001001010110101010000", "00110000001000010111010001110000", "010000011000101000001"};
    vector<string> goodSubstring = {"011100011000010"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.1650979255876076E8;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> pieces = {"000001101010100001000010110101001001", "010000001111000", "001111110000000100110100000010", "0000001000000001000000010010100100000000100", "10101000000001010000100000100000010110010", "010011011000000000010100011001000010000001001", "1011001000000", "011100000001", "000000010000001100000001000000", "0000010000010000011000000001", "101000", "10101000001", "000101001001010110010100001100100101111", "0000011011100111000", "010111111010000001001100100000010", "0000000000111010001000101100000000010000", "100", "00100000000010011000010100010", "01001000001000000000010110010010100000000011", "0010010011", "00001010010111000000100001100000", "0000011000", "0000000010100010011110100000101100100110101", "000000111111010000111", "000101101010000001011", "1000000101", "00010010001000010000101000", "000001000001000101010000", "00111000010111100010000000011110101110", "0100000000111100000010", "10010", "10110010000101100011011001101", "00000000001000101100100000100010", "1", "010000001011000101100101", "10000000", "00000001000101110101", "00110010010000110100", "0100000000001000101100010000010010000000100", "001000", "00010101101000000100001000000010000000011", "00011", "00001000010001000100000000001110000001010", "0000110011010010001110010100000001", "111000000100000000001001", "0010111000010000010100010000000000001100000111", "11001101111000000011000", "0001100001011000", "10100010", "00000011011001001001000010"};
    vector<string> goodSubstring = {"0000001000010100"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 3.271999999997486E9;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> pieces = {"101010111011111111011", "011111110111110111", "111101110111111100110111101", "111", "111010101101111010111111111101", "011111111111111111111110111111011101011111", "11101001111111111101111", "101100111111011111011101011010111011111011", "11110010110111110110111111111101", "11101111111111101011111111011111", "11011110100010111011111111111111101000111111110111", "111111111111011101111011", "111001101010001101011011111111111111010", "0001", "0011011011110010", "10101111100111111101111111111001110011010101110111", "11111111111111110011111111001110111111101111", "10000111011101110011011", "101111111", "11110111111101110011110001111111111111111001111111", "0100110101011011111101111", "11101111111111111", "111111011111111001111", "01111111101110", "10010101101101111111111011111", "111111", "101111111111100101011111101111", "101110001100110011", "110110110111111001111101111", "0100111101111111111111010111110100110011110", "1101101011111111", "1000111110111111010101111101110011010111111110111", "110011111111010111111111100101", "11011111100001111001011111111111000011101", "11011010011111100110111111011111111000101", "101111100111111110", "0111110111111101111111111100111011", "11111011111111111011111100111110110001101111", "01111011", "1100111110111011111111111110111111111011111010111", "10101111111111", "111110111111", "1111001011011111111111111110111011111", "01111010111111110001111111", "1111111111101111111111111", "11011101111011111", "1110111101101001101011101111111111", "101010111101110111111011001", "0111100011011", "11"};
    vector<string> goodSubstring = {"11110110101111110"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> pieces = {"1", "11111000011100111", "0110111110100011", "1110101111110001001111000110101011010001111110", "001011011111101100", "11111110111001110111111101010111111111011100010", "100111101101111", "101011010111111100111", "011111011100100111001111110110111111", "10111011110111101111101111", "101", "111010110011111110100011000000100011010110000", "011111011", "101001111101111011111110111111111011010", "1010111111011111011110101011010111", "0", "11110011111101101111001011111101", "0110110110111", "01000111111110", "00011", "11110011101", "01111110001111100110101111001", "11111111110111101011111011111000100110011011110", "111010100111111011000011111110101", "111110101101110", "0011111011", "1010001000110111100100011111011110111", "1101101011001111011", "11011000111001001", "001001111", "00011101100111101111", "01010011111101101101110111111101110111011001111111", "000110101111100101101110101", "1111001011101111000010", "010101010101111011100110110111011111111101101110", "01100111111101011110100", "0001100111010", "111110110101001110010011111111111110", "110100010110100110001110111", "1001101100", "111010111100111111111111011001100110011111", "11011100111111111111", "11111100111111101101001111101011", "10011110110111111011", "111110111", "0011110101111111111011001", "111111110011", "1101110001101110110101100100111111111111110", "111011101110100011111110101010111111", "111001101010111111111101110101100101111111"};
    vector<string> goodSubstring = {"110101100111101011"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.1754125646521103E8;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> pieces = {"1000000010000000000000000", "01100101001000100110111000101011001001000", "10001100100001000110100001010000100100110111000101", "010000010110110001011000010010000001000", "01000000000001110111001010000100010101", "100000011010000100100001100101000010000100010", "00000001101000011100101000100100100010100110100", "010111001100010", "000001", "00000000100100100010000001100101", "100001000000100010011000110000000001", "00000110011100000101010010", "11000000100000", "100011100001000000010011101001100101001001", "01000010010000100111001000001010110", "00100110010101000010000010011000010010", "00001000100100101011111000000111010110010000", "010100000110000001110101101001101110010", "0000011000111001000", "00010001010000100000000100000", "00001010100000100010", "010000001110", "100000000100", "100001000010010001001000100001001101100010100011", "01100000000010100", "00110110101101", "100000011010000000100101011010000000100000000", "0", "0000000100011000110100010", "10010000000001001000101000001", "010", "10100", "100011101000000100000110001101", "1000000000", "01101000", "0001000000110000000000", "01", "00000010000001111011001100011001011", "0011001000010000000", "000111000001011100001", "00010010111010100000000000", "1001100101000000010001100", "0000110100", "0010101000", "000001010000000010100000000010011000000000100", "11001", "01110010001000110001100100000010", "01001100001", "000", "1001100011100001011001000"};
    vector<string> goodSubstring = {"1011000001000101000"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 8279720.623028573;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> pieces = {"1101", "1001010101000", "0000111000000000000000", "10", "000110010001110001000000000", "100100101101000", "1", "00100110010001101000010000010110100001000011110010", "00010000000101001100100011000000", "0000010001001001011", "0001001100110000", "1001010000000000000000001000100001100", "000001000000000", "0000010000010000011000000000001000100000000010000", "00100001010011100100", "1000101101010000010110010100010100000", "01001000000100110", "10010101010010000000100010001000001", "10001101100000101001100010000010", "0110110010000000100", "000000100000111110000100101001100000001011100", "0001000", "010000011101100000010000", "00100010100000100100010100010111001000100", "0001010010000010000", "001001000100000101000000011000001010100000000000", "00001", "0010100111101111000000101001000001010", "0", "0000000000001101000100000100000011100000000000010", "0010", "00000100001000100010100000010000000001111000", "000000110011000011100110000000101110010000", "00000011011000011001100011", "00001000110100011100000100100101100001111100000000", "0001000000100000001", "0000000100000000001100", "10000000110000010000011000001110", "00001010010001100000001110100000011001000010001", "011110001010001000011000001110110000", "10000", "100010010000100001001010000001110", "000000", "100000001000011100010001", "0000000011000", "00110000000001001000100000000", "0110001011000000", "000100000010011011000000000001101000110010", "010000011", "000000000000111110"};
    vector<string> goodSubstring = {"00100100000000000010"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 9985717.591882408;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.5499999999501E13;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> pieces = {"1111111110010100011111111111111", "1110111111110011111110110001011011111110101111001", "01011011", "01100110101111110000010101", "000", "101111001011111110011111111110011110110101001", "1110111110101111100111001", "101110111", "11011101110100001110011110101101010111001", "0111010111111110101111", "111111001101", "1011001101111011101", "111010100111011111110010100101", "111101011011001111111010111110111111011010010", "11011", "0", "001001110", "101001101101011011111", "0110101011101001001010111011010101", "110000011111000110", "01101101011110011011111111", "1101111001001011111111110", "11011100101111111", "1", "11011101011100011", "101101111010110110011011", "001001100111010111", "11011111001110100001", "00001111111111011010010011111111011", "01001011111001110111111110000101", "1111110101101011011101111101101111111", "10010011011010000111101", "11", "1101110110", "1011101", "1111", "111", "011100101101111001000110001111001111111111010", "1011011", "111011101111", "1100111011100011101101011110011101111", "100011100", "11010110110110011101111111011", "1011", "1010111011111111111011111010001100", "110010111111101001111", "110011011111111110000011111011111", "111111000100111001110101111101001011010110101010", "10110111001110110110110110101101100101", "010111110111111111110111"};
    vector<string> goodSubstring = {"0001110101"};
    long K = 110884575395;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.876446172108353E8;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> pieces = {"11111111111111110", "1111011111111111011111", "101111111111101111111110110111111111111", "1", "11111111101111111111111111111", "11111111111111101111", "01111111111101111", "111011111101011111110111", "11111011111111110111111111111111101111111111011", "111111111111011010111", "11111111111111111011111111111111111", "1011110110101011111111111111111111111111111111", "1011", "1111111110111111111111111001111101111111110", "11111111111011111111111111111111111111011111", "111111111111111011110111111111111111111111111110", "11111111111", "11111111", "111110111111110111110111111111", "111111111111", "1111111111111111011111", "11111111111111", "111111110", "1111111111111111111111111", "11011111111101111100111111111111111111111111111111", "111011111", "111111111011101111111111111111111", "1111111111111101111111111111101111111", "010111101111", "11101011111011011111111101111", "11110111011111111111111011111111111010111", "111111110111111011111", "111111111111111111111", "111111111111111111111111101101", "0111111111111111111111110111110110111", "11111111111111111111111111", "11111111111111111111111111101111111111111111", "111111111110111111", "110111011111111111111111111111", "1111111", "11111111111101111101101111111111111111101", "11111111011111110111111110110111111111", "1111111111111111111111111111111111111110111111", "110111111111111111111111111111111111110111111011", "1111111111111111111101111111111111110101111111111", "1111111101111111111111111111", "111111111", "11111001111111111101011111111111111011", "111111111110101111111", "1111"};
    vector<string> goodSubstring = {"111111111110111111111111011111111111111"};
    long K = 752834434240;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.5270910273652596E9;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> pieces = {"0000000000001010000000010010000000", "01000000000001000000110000000001001", "0000000001000", "0001000100000000001000000000000", "0001100", "000001100010100", "00000000000000000010100010000000000000101100000", "00000000000010000000000001001000100000100000001100", "010001000000011000100000001001010000100100", "01000001010001100000011000100000100", "01000011000100001000000000000", "0010001000010000000010101000000000010100000", "00100000", "0000110100000001000000000000000000000000011", "0000001000000011000010000", "000010", "11", "001000000110000000100110000", "0000000000000000001000000000010011000", "00", "00001000100000000100100", "0000000001100000000000100000000000", "000000000000000000000000011010", "0000000", "0100000000000000010000", "001000000000000000000", "010001000010000110000000000000", "10000000000000000000100100000000000001000000000", "0000000000", "000000000000000000000000000010000100000000000", "000000000001000000010000", "000000000100000001001000100000001000", "0001", "01000000100000001100010101000010100001000", "110001000001000000100000100100000000000", "000010010001", "00101000001010010000", "0010000100100", "0100000011010100000000000100100001000100000", "00000000000000001000000000101000", "00100000000000000000000000001001000000000000000000", "00110010001000000101000001", "010000000000000000000000000", "100000001000000001001000000100000000001000000000", "00000000000000010010000000010011001100000010", "00000001000000", "000000000000000000", "0001000101100100000000001100000000010000000010000", "000000000100", "0000"};
    vector<string> goodSubstring = {"000"};
    long K = 84476332104;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.423054500089784E12;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> pieces = {"0010111111111001001111", "0110011110110011111011111111", "11111000110110111111", "01010011", "1111101111011", "1111101001111101101", "1011111101101000111110111110111001", "1101", "1110110110101000", "1110110000011110111111111", "1100101010010011110111111111111", "011111110110010101100011110111", "010", "1111101110111101110101101011101111111", "0010101101010100000101110010100101001011101", "11", "10100111011010", "0011", "11011010110110101011001111010110", "1111111001000111011111111111111111111001", "111111101011111101110111110011110", "111111010100100011101101101111001011110100101", "1110", "111011111", "111111111001110101110100110", "111110101111101111001110110111111", "110100010101010110111110110111001011111", "01", "1111010111011001011010110111", "111", "11111111011", "10101101101110111011110011111101101110111101111111", "0001001100111100101101", "10110", "1000110110110010011011111111110111110101011011010", "01111111001111111011111010100011101101", "1101110010011101110111101110010111111011", "1111011001110111111110101111011100011011", "00010110", "1", "100101101111001110101111101110110110", "01101111", "111000000100111010", "111001111011", "11010010010011100110111111101111110100111111001110", "11111110111010110000111", "010000101111011101011101001110001", "00110110100001010110", "00111010100111001111010111011100001110100100011", "1001110001111100110011101"};
    vector<string> goodSubstring = {"111001111111011011101101110011111101111"};
    long K = 545401794178;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0025489826234459815;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> pieces = {"00000000000000000100000000000000000000", "00000000000000000000000000000000000000000", "00000000000000000000000000010000000000", "0", "0000000000000", "00000000100000000000000000000000000000000000001", "000000000000000", "000000000000100000000000000000000000000000", "00", "00000000000000000000000000000000", "0000000", "000000000000000000", "00000100000000001000000000000000000000000001000000", "010000", "000000", "0000000000", "0000000000001010000000000000", "00000010", "000000000000000000000000000000000000000", "0000000000010000", "0000000000000000000001000000000000000000", "000000000010000000000000000000000", "000000001000000000000", "00000000000000000001000010000000000", "0000000000000000000", "00010000000", "001000000000000000000000000000000", "000000000000000000000000000", "00100000", "00000", "0000000000000000000000000001000000001000000000", "0000000000000000000000000000000000100000000000000", "000000000000100000000100000010", "000000000000000000000000000000000010000000000", "100", "00000000000000000010000000000", "0000000000000000000000000000000000000000000", "00000000000000000000", "00000000000000", "0000000100000000000000000000000000000000000000000", "000010010000000000000", "10000000000000000000000000000", "000", "0001", "000000010000000100", "00100", "0000000000000000000000000000000000010000000000000", "000000000", "0000000000010000000", "0000000000000000000000000"};
    vector<string> goodSubstring = {"0000000000000101"};
    long K = 409416659601;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 8.400418238042256E9;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000", "00000000010", "00000000000000000000000000000000000000000", "000010000000000000000000000000000000000000000", "0000000010001000000000000000000000000", "00000000000000000001000000000000000", "00000000000000", "00000000000000001000000000000000", "00010100000000000000", "0000000000000000000", "000000000000000000000000000000000000100000", "00", "00000000000000100000000000000000000000000", "100000000000000000000000000000000000000000010", "0000000000000000000000000000000000000000100", "0000000000001", "0000000000100000000000000000000000000000000000000", "0001000000000000000000000000000000000000", "000000000000000001000000000000000000000000000000", "0000000000000000000000000000000", "00000", "0000000000100000000000000000000000000100000000", "0000000000000000000000000000000000000", "00000000000000000000000000000000000000000000", "0000000000000000000000", "0000000000", "0000000000000000000000001000000000000000000", "0000000000000001000000000", "000", "000000000000000000000000", "00001000000000000000000000000000000000", "0000010000", "010000000000000000000", "000000000000000100000000", "0000000000000100000000000000000", "00000000000000000000010000", "00000000000000000000000000000000000000000000000", "000000", "0", "00100000000100000001000000000000000000000000", "000000001000000000000000000000000000000", "00000000000001000000", "00000010000000000000000000000000", "0000000000000000000000000000000000", "00000000", "000000000000000000000", "000000010000", "00010000000000000000000000000000000", "00000000000000000000010000000000000", "0000000000100000000000000001000000000000000000000"};
    vector<string> goodSubstring = {"00000000000000000000000000000000000000"};
    long K = 512789416646;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.2389688816206777E12;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> pieces = {"10010010000001000110000011100100011010111110", "0101000", "0001100111011001111000001000001110101101111110", "001100010011110101010011011001010", "110100111011", "111011", "10", "10001", "01", "0001111010", "01110101110000011010011110000010001000101110", "0110101", "1101110100011001", "010100010011101", "111011001001111101001001011001110111010001", "11000011111000110100110", "00001111110010010111000010100010000101101100100", "100010001000111110001000", "011001011001000101101111011011", "100010101101", "0110000010110", "000010110101110000111100010000001110011011100010", "010001110110100", "1000000000000111110100100101000111100110100", "101010001111111101111110001010010100", "110111101100010", "1110", "11100010101", "100100001010000011110", "1111100000101", "10100110000010101011111011011100001010110100", "1111100000001", "1001110010010100", "01010000110111000101", "100", "100011010101010111100", "00010011001100011100011111101101100010000001", "10111101000001101001000010110011000000110111", "1010011101001110", "00000111101110101010100", "10101011010110001000010000011101", "111101010000011000010000011010101000", "011000000111111100101000011", "0001010000000111110011001000100010001001011", "101111001110001", "00", "0110010110001000100011", "001010010101001100111111101010101111011101", "011000111101011100000001111011010", "1"};
    vector<string> goodSubstring = {"1111010010000000101111100111100110000101"};
    long K = 550548919137;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.4084112747136456E-11;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> pieces = {"11011001110111001000111", "11101011111101011111101", "011", "11111111111011110111101", "111", "1011011111111", "11010101110111111010110110111011011101101011", "101110111100", "10110111111010010111111110101101101110", "101100101110001110101111111111111111101101111101", "101001111101111111111111111", "001101111011110111110111111110110101101", "010011110110100011111111110110011011111011100011", "11011111101111011110111110000", "0101111111111100101101101111111110011111110111011", "11010101000011110101101100101011111", "10011110111111001111111", "110100000110111111110110111111111", "11111111111111101111111011100111011010011", "1110100110111111001110100011110101001110", "011111111110011110110011011111111", "111111101111111101111111000111111111010100100", "101001111011101111101111011111110", "0001111111111111101111011110111001", "111111111111101001111", "10101101010110011111101111111111111101111111101111", "111111111101001011111111111011", "111100011011110111111011111011", "001011110001110001111101111100111111110010111111", "1010111011111001100111111111110010", "111110100101111111101110111100", "00111100010110101101111101111", "110100100011101", "01100111111101111111011100011111110110", "1101111011101011111010110011111110010011111110", "001111101000111111111111110110011100", "11010", "11010111111111111111101111000011", "11100011011100", "11011111111110110101", "11011011111111111100111111111011011111011101011100", "011111111111111111111011101011011110", "110110101111110110101111111110", "01111111110111", "01110110011011111110011010111111110101111100", "110101010110101111111110111", "1011101101101110011110111", "001100111110111111101101111111101101001101", "1", "0111101111111111111"};
    vector<string> goodSubstring = {"11010111"};
    long K = 24800889142;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 7.220550705439113E9;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> pieces = {"11111111011001111011000110000111001110111", "1010110000111111001110", "0110", "11011101111010010101", "1001111", "1111011011001111001111101101110111", "110001111111000001101", "00110001001101011110111001110111101110101010111001", "1111101", "11111010111", "111101111110100111111101011", "10111111110111111101101111111101001111", "00111111100", "01111100101000101010100001110111", "00011110111", "111101101101110110110111111010101011001", "111111011001111001111110110100101", "1110100111100111", "011011100011101110101011111010010111", "11011010001010", "0001101010111001111111", "10111001010111101101", "111100101111111111010000111110", "0011111100110101", "1010011", "01001111000100111101", "00010111011111111111100", "1110110011011001111000101011111001110", "111011010111001011111011", "100101110001", "11011111001000010011001010111011100011101101111", "110001110011011011111110011000110011100111011000", "1101111111111011", "111110111100110000111010100011111101011110000", "11110110111", "000011111111100011001111", "100001101001", "000011110111011100011111011000", "00011110111100110110111010000", "10000110", "1110011", "01001011101101111101111101111111100010011101101", "111100011100111101111011100111101000111011", "01011110101100111111011010110101101101110101", "001011111011011", "1011111010101111110110011011110", "0010111111001011011011011110100010", "11111011110111110011111", "01111101101101111011110011111011101011", "100111011111"};
    vector<string> goodSubstring = {"11010111"};
    long K = 511703043789;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 7.348055708807643E10;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> pieces = {"01111111101111101", "11111111111111101111011111111111111111011111111111", "111", "11111111111101111111111111111111101111010", "111111101111111011010111101", "111111", "1111111111111111001010111111111111111111110", "1111101111111111111111111101111101111", "11111111", "1111", "1111111111101111111111111111111111101111111", "11011", "1111110111011011111110111", "1111111111", "10111110111111011111111101111111111", "111111101111111011111111111", "1111111111111111111111111011111011", "1111101111", "1110110111111111111111111111101", "110001111111111111111111101111001111011111111111", "1111111001111101101111111111111111", "111111111110111", "1111111110111111101111111111111", "111111111111101110111111", "1111111111110111111111111111111011111111111111", "111111111111", "111111111", "1101111101110111111111111", "1101111111101111111111111101111111101111101111", "111110", "111111110111111111111111001111111", "1111011111111101111111111110110", "111111111111111111101111111110101111111111111", "111111111101111001111111111101011111111011101101", "011011111111111111111101", "111111111111111", "1111111", "01", "011110111", "11110111101111111011111111101111111", "111111111110111110111111011111", "10111111111111110100", "11111110111111111", "101111111111011110111111101111111111111111111", "111011101111011111111111111111", "1", "110110111101111111111011001111111011", "11111111111111111111111011111110111", "01111101111100110111101111", "101111011111111"};
    vector<string> goodSubstring = {"1111110111011100111011"};
    long K = 888256954384;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> pieces = {"101001101101011011111", "101111001011111110011111111110011110110101001", "01011011", "11011101011100011", "1", "001001110", "1010111011111111111011111010001100", "1101111001001011111111110", "100011100", "1011000011011010100011101111100011101011", "111010100111011111110010100101", "1101110110", "11011111001110100001", "110000011111000110", "1110111111110011111110110001011011111110101111001", "11011100101111111", "1100111011100011101101011110011101111", "11010110110110011101111111011", "1011011", "1011101", "111000111101110111111011001101", "01101101011110011011111111", "11", "010111110111111111110111", "11011101110100001110011110101101010111001", "0110101011101001001010111011010101", "11000001111111111011010010011111111011101001011", "001001100111010111", "10010011011010000111101", "1111111110010100011111111111111", "111111000100111001110101111101001011010110101010", "1011", "0", "100101111001011111110100111111111", "110111010111111010110101101110111110", "111", "01100110101111110000010101", "101111", "101101111010110110011011", "0111010111111110101111", "1110111110101111100111001", "101110111", "111101011011001111111010111110111111011010010", "0011101111111", "000010111011011100111011011011011010110", "110011011111111110000011111011111", "11011", "011100101101111001000110001111001111111111010", "101101101001111110", "111111001101"};
    vector<string> goodSubstring = {"1"};
    long K = 5;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 77.59999999999994;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> pieces = {"010111011010111001", "110001000010100011000101101000", "01101000000000010100100000010100101110101110000", "0010001001100", "010010000000101110000000011100110", "100010110", "010100100001", "0111", "11001000111101001101", "1000001001001101000100001010000000010010010011", "001000010011001000010", "00001000000011101100010001001000001011111010", "0", "1000110000000010000010111001000000110011000", "000100011101001010001001111101", "11011110010010", "1001", "00010011", "010000100001000101010000011110", "01101010001001111000000000001", "1110011100011001000000", "101011000", "000100001101101101011000000100001001001", "10000100010000100", "10011110001010101011", "00001010000100100", "110000000001111000110", "01000100100001110110011000000110000001001110", "10010000001100011100100010000001100000001", "010000100111111010010111001001101001010110001010", "1110000110010111000101001000000010000100000100011", "1010101100111101110010000101", "001000101101001010010000", "0000100100001001011001010010100010111111010100", "001001110000", "10100001000111100001101001101100001010101", "0010100", "1110001011111011101110011", "000000101100000111011", "0001111110010000100000010011100100000", "0011010010010010000101010011", "10011100001110001001011100000000000", "110111010010110000110101100001100100000100000000", "001011000010011000000", "100010011110", "1101010101111000010101", "0011110001001101000000111101000000101", "11011000000001010000000001000010000000110110000111", "00001000011101000001011011100110000010", "11111011000001010110000000010000101111"};
    vector<string> goodSubstring = {"00"};
    long K = 6;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 61.75199999999993;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> pieces = {"11110100001011011011111101101101110101", "111101110011110111111110010111111111011110100", "00111", "1011111110001111000101100101100111101011111", "111111111101111101100110", "01101011110011", "1011011011010110000110", "0111110111", "1111110111100001011101100100110", "111111111000001010111011010111110010111110000010", "011011", "11011111111100", "1011110001", "110101101101011011101110101101111111011", "100111011101101111011111111011101000011", "110111111111100111001011111", "001010110111111001111111110111111110", "0001011100", "01001001110111001111000111001001111010111010111111", "101111000011011110111101110111111101111", "001100111100110110110101101011", "01", "11011111110111110101111", "011111101111110101110110011", "111001101111011111111111110011111111100111", "01111011111111111000", "11101001110011110110111111111011101", "0111100101111110111000111101", "0111111", "110001011011111111100000011010", "1011111000111110111010101101111001011111000", "101011101110101111011111100110000110111110101001", "110010111100", "111111010", "011111001110111011110000011", "1101100110001111111111", "1011000111111100110101111101101111011011100110111", "0011011100", "1011110111011011100101110101001011101101111", "11101011110111011111110111111111011", "11011", "10010101010100000111100101111011001101100111", "1011110011101010111011010111100110", "011100110111111011", "101100111", "1111011111111010111", "11000011110010001101011111011110111111110", "1011111000111011110010101", "01101111", "1010111110111110011101110111011111101"};
    vector<string> goodSubstring = {"110"};
    long K = 6;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 24.875999999999998;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> pieces = {"00000000", "00000000000000000010000000000", "0100000000000010000000000000000000000010", "0000000000000000000000000000000000000000000", "00100000", "000000000000000000000000000000000", "0", "0000000000000000000000000100000000000000000000000", "00000000000000000000", "0000000000000000000100000000000000000001000000", "00000000000000000000000000000000000000000000000100", "0000000000000000000000000000000", "0000000", "0000000000", "0001000000000000000000000000000000000000000000000", "000001000000000000000000000", "000000000000100000000000000000000000000000000000", "000", "000000001100000000000000000000", "0000000000000001000000100000000000000", "00000000000000000000000000100000000", "000000000000000000000000", "00000000000", "0000000000000000000000000000000000000", "0000000000000", "000000000000000000100000000000000000000", "0000000000000000", "000000000000000000000000000000000000000000", "00000", "000000000000000010000000000000000000100000", "000000000000000", "00100000000000", "000000000000000000000000000001000000000", "000000000000000000000000000", "00000000000000000000001000", "0000000000000000000000010000000000", "000000000000000000000", "00000000000000000", "00000000000001000000000000", "000000000000000000000000000000000001", "000000000", "0000000000000000000000000000000000000000", "00000000000000000000000000000000000000", "00", "00000010000000000000000000000000000000", "0000", "000000000000000000000000000000", "0000100000000", "000000000000000000000000000000000000000", "0000000000000000000000100000000000000000"};
    vector<string> goodSubstring = {"0000"};
    long K = 5;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 120.01003199999985;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> pieces = {"00111", "11101111101111001111111010011111011110", "0011011110101001", "001010001111100000011", "11101", "0001010001111", "0111011010010011101101010011000111011110101000", "10001100001101011011000011101110100101111101110110", "0001110111111010000110111111100111111", "1000110111111001", "000111111110011110", "01111111100101101011101111", "01101011001010011111111110011100001001101011", "1010101111110101110001011000001100111111110111100", "111000011", "00111011010001010101001111111000111001100", "11101101111111010100111100001011111", "111001", "11110010110010010001010111110111011", "0001011011001101000101110", "0111010001111011110010111110111110011110111", "1110111", "1011011111110100111011111010", "010110010110010001010110111010011", "1110111111110100110", "11101001110100", "111111110101110000010100101001101", "01111", "000101110000010001110010101", "0111", "111", "10010000111", "1111100111111101111000111011111001111101101", "11101111", "11011110000110111001101011011111111100010110110", "0111111001011011111110101", "110011110010", "1111011111011101011010100010001010101110110100110", "11", "1001110110011011101", "01110111100110101010001010000111101110111000011", "01101111011111110111010001010", "1110110110010011111100111001000110101111011010011", "11100011001001011111001110111001001000", "100111011110011111010100110101001101111", "01011100101000010000000010110000101110011111111", "101110011101100", "111010100011111011101001111101100", "111011110001101011111011011111000011100000011", "01111111110"};
    vector<string> goodSubstring = {"10001"};
    long K = 4;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.2264000000000004;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> pieces = {"01110101001011010001101001111001010", "0110001010010100000100000110010000", "11100100011110010001011000100101000000001100", "10100", "0011000000001000000100010001000", "00111000010011000111101101100101000", "000001101111010011000000011110000001000000000010", "1000011001", "01101010110101000101", "101000011011100000001000001001001011010", "100100001000000010100111000000011011000011110", "1010001000110001010000100111011110010001101011011", "00110110010001000111111000100110", "000010010000101010100100001001010010000000101", "00100100011000110010010001011100000000000", "0011000100100010001100010011000010111100", "001111", "11100100000010000000101001000110001000100101100001", "0010010100101001110010110010000110101", "0", "1111000010010010110", "0001110011111001110010100001000000111100100000001", "00000110111001011101011100", "01010001011000001100101100100010000000101110000000", "0010010000", "001001001000000110111000100001010000100101", "010100", "00011000000000000000100101010000110110000001001", "0000001110111110100001000010100000101100100000", "01000011001110", "01011", "01101011100100110001010010100000000100", "010000010000001010100", "10001100010011000001000000111001010101011", "00101100000011100", "00100010100000000010001101001000100001100010101", "110010010100000001100", "0101100001000100100010001001010100011001110", "11001000010", "00001000010011000010100000111", "11010000011010010000100000110010101010000000001010", "00", "001001010010000100110110", "100010", "0001001011001000101000000100010010100", "10101101010011101100101001101000100001010", "01000011101111001100000101000001100000011", "01100000110000010000011100111000011", "00000", "0100000001100000010010011000010111000000111"};
    vector<string> goodSubstring = {"001100"};
    long K = 3;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.9011039999999997;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> pieces = {"10010010000001000110000011100110011011111110", "11000011111000110110110", "011001000111111100101000011", "001010010101001110111111101010101111011101", "111101010000011000010000011010101000", "0001100111011001111000001000001110111101111110", "11100110000101100010001011010001000111100101101100", "01010110110111001101", "0101000", "1", "111011001001111101001001011001110111010001", "010", "1101110100011001", "01", "11100010101", "101111001110001", "011101111111110", "0001111010", "111011", "001101010001001110111101100010", "1111100010001", "010001110110101", "1010000000000111110100100101000111100110100", "100010101101", "10101011010110001000010000011101", "100011010101010111100", "00", "10100110100010101011111011011100101010110100", "1110000010110", "01110101110000011010011110000010001000101110", "0011110111010101010010101000100111011100010001", "0111101", "0010", "01000100101110111010110001000100011100", "0011111000100011101001", "10101", "00001111110010010111000010100010000101101100100", "100000001111100110110", "011001011001000101101111011011", "101101111100", "1110", "101010001111111101111110001010011100", "001100010011110101010011011001110", "10", "0000101111100", "100100001010000011110", "1110101101110011110011000", "0011000111101011101000001111011010010011", "111011101111000010111111100100", "00010011001100011100011111101101100010000101"};
    vector<string> goodSubstring = {"1001110"};
    long K = 6;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.222780819456;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> pieces = {"000000", "00000", "000000000000000000000000000", "0000000000000", "000000000000000000100000000000000", "00000000000000000000000000000000000", "0000000", "000000000000000000100000000000000000000100000", "0010000000000000", "00000010000000000000000000000000000000000000", "010000010000001000000", "000000000000000000000110000000", "0010000000000000000000000000000000000", "10000000000000001000000", "00000000000000000000000000000000000000", "000000101000100", "00100000000000000001000000100000000000000000", "00000100000000000000000000000000000001000000000000", "0010000000000000001100000000000001000000", "00010000000000000110000000000", "000000000000000001000000000", "00000000000000000000000", "000000000100000000001000000000000000", "000000000000000000100000000100100", "000000000000000101000", "00000000000000000000000000000000000010000000101100", "01000000000000", "0000000000000000000001000000000000000000000000001", "000", "000000000000110000100000000000", "000000000000000000000000000000000", "0000000000010000000000100000010000", "000000000000100000000000000001000000000000000000", "0001000000000100001010000100000000", "00001000000010000000100000001000000000000010000000", "000000000000000100100001000", "00000000000000000000001000000000000000", "00000001000000", "00000000010000000000001010000000", "01000000001000000000100000000000000000000", "0000000000000000000", "0000000001000100000000", "000001100000000000100000001000000000000000000000", "000000000010000", "0001000000000000000000000000000000000000000000011", "000000000100001010", "100000000010000000000", "000010000000000000000000000000000000000000000000", "1000000110", "00000000000000000000"};
    vector<string> goodSubstring = {"00000000"};
    long K = 5;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 83.60640192000002;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> pieces = {"011111110110111000011010101110011111111", "011111", "11101111101100001001100101011", "011101", "1110011111000111001111011110110100110", "1111011010010111011101111", "111110101111001111111001010110011111011", "0011101111111111101111101100", "11110111100", "11010111100011110111100110110111010000110111", "110011111111101110111110", "10001111101110011100011011000011010", "110001110111010101111101101011", "101111100111001110110101110011111110111011111", "110100111", "1011101111111110011011110111110110110", "111110010011101111111111011101011110011011", "11010011111110111111111101110111110011", "01011011100111001001101111110111001110", "10110110110110111101000101", "011100011101101111111", "10", "0111111100010", "11101111001110111110110111100111011110", "00110", "11011011101101", "11011010110101101101110101100001111011101", "111100", "00111011111111111001111011000110100111", "110110111", "0111111011101011001000001111111110001", "001011111111110100001", "111", "1011111111", "11110011100110011110011011011111111011000110011", "101110", "0111011110100101011", "11", "011101110101111111101111111011011111", "10001111110101111000011", "111010", "1111", "11011111111111100101001111000100", "1011001111111111111101001011101101111101111101", "1111110001101110110111111", "11111011000111110110111111101100110110011110011", "11101110101010111001011", "01111001111101110111101111101111011111001111", "10010101011000111011111001111110101100001", "1111011011101111111111011001111011"};
    vector<string> goodSubstring = {"101010110"};
    long K = 4;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09146032000000004;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> pieces = {"0000000011110100", "0101110001001010001001101111100101111000110111111", "10010110110100010001100110010001", "1101111111110010110011011", "11001000110001101001010001001011010011001111101", "11100011001100111010010100011101011010", "1", "0011", "0110100", "100111111101100011111000000110000101101", "110011110010101000111000101011000010100", "00000111001100011100101111110011001", "110110010110101110111011011001110", "11100110011100000101101010111100100011010101010110", "10100100101000100", "010101111101010110111011111000111110", "00111001100100001111000101111010110010010", "0100101110", "11011000110100100010110110100011010", "10010011111000001111110010110010110", "11010111111110101", "110001000001001111001", "1101111001001111101001", "01000101000001000111110000111", "1011111010011001100011011110111100100110100", "001001110100000110111001111001101110011111", "01010110110111101001000010101", "001101111001011100101100", "1100101011101110000000100", "0010110010110010111010101111000111010001100110101", "000011111001001010010110", "1110011", "0110100110011", "00", "110001100001010101", "0001111111000100000011111101010001", "1010010000010011101101111100010001111111000111101", "1001010000000", "10100001101111111100011011100011011111", "10010111110100110111011110110011010100", "100101111110011010011110", "0111110111110", "1101010010110001000010010111001001011", "100110111001011110000110010110011110110110110100", "00000000001111011001100111001001101011011001010", "011011000100001111100000011011", "1111100100011100111", "101101000100101010010001011111", "0", "001010010110001101100111101100001"};
    vector<string> goodSubstring = {"0001011111"};
    long K = 5;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.10735639040000004;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> pieces = {"0", "000011111", "1010001011", "00101", "111", "000000", "0000000011", "10", "1001100", "000", "1", "0000001", "0010010101"};
    vector<string> goodSubstring = {"0000"};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9230769230769231;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> pieces = {"111111100", "01", "111111110", "1111111100", "1101", "1110110", "1100111", "1111", "001110", "111111101", "1011111", "101111", "1011111011", "11", "1111110", "0111100", "11111", "1011100", "1", "111", "111110", "0011", "11111111", "1111101111", "1110011", "0110110", "1011", "11110", "1110", "0101111", "0011111011", "111111"};
    vector<string> goodSubstring = {"11"};
    long K = 2;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 7.36328125;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> pieces = {"110", "1110110", "0110011", "0101", "1111111", "00", "011", "110111111", "0011011", "11110"};
    vector<string> goodSubstring = {"1111111"};
    long K = 3;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.1199999999999999;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> pieces = {"001100110", "000011111", "1111011010", "10100", "00011", "01", "00100101", "1010", "000010101", "00101", "10111", "111010000", "0111100101", "01111001", "0100110", "01011010", "1", "001010", "000", "11000000", "0011000011", "11", "0", "0111110100", "001011110", "010000", "1011", "100101011", "001101", "1100100", "00100110", "010010", "100", "001", "011110", "01100111", "10011", "0000010", "101101000", "1101", "001111101"};
    vector<string> goodSubstring = {"1"};
    long K = 4;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 12.390243902439028;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> pieces = {"011111011", "011111111", "01111", "1111111001", "111111111", "1", "11011111", "1111111111", "1011", "1011000111", "111", "111101", "101111110", "11101", "1110", "11111101", "1011111011", "11", "111011", "0010111111", "111011111", "1111111", "111111", "0", "111110", "1011111", "0111111", "10110", "000111110", "1111110", "101101", "1110110", "11111", "011111", "11111110", "01111111", "1101111", "10111", "11010", "10", "1111"};
    vector<string> goodSubstring = {"10"};
    long K = 5;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.666864961332539;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> pieces = {"00", "0100", "0000", "010010000", "0", "1", "0011000", "01", "000100010", "000000000", "010", "0101100110", "0110000", "000001", "00000", "100010", "1000000001", "100", "000", "001", "1100010001", "000000", "0000001", "1000", "10", "00000000", "00001"};
    vector<string> goodSubstring = {"0000"};
    long K = 6;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 10.683088056811581;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> pieces = {"1111010", "1110", "011110", "111111", "111110", "1100110101", "01", "111"};
    vector<string> goodSubstring = {"11101111"};
    long K = 7;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.3046875;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> pieces = {"10", "00000", "0", "0100000000", "10001", "00001", "101000000", "000000000", "01000", "0000010", "1000", "1000000", "000010010", "0000001000", "00", "00000000", "0011000", "011001", "0010100", "0010000000", "0000000000", "0101", "001000", "001101000", "0000001", "100", "0000000", "010000", "100000000", "0010000", "1000010000", "000001", "1000000000", "001", "000100000", "00100", "110", "000100", "000", "010", "01101", "00001010", "100001", "0000100000", "0100", "010011001", "0110000", "0000000110"};
    vector<string> goodSubstring = {"0"};
    long K = 8;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 42.0;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> pieces = {"0010", "01111", "11010", "00100111", "101", "00100", "00001111", "01110", "110100110", "10", "00", "111001", "0101"};
    vector<string> goodSubstring = {"1110011111"};
    long K = 9;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.01908196491719477;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> pieces = {"0001001010", "00010001", "1001010001", "000000", "10000", "110101110", "000010", "0000001101", "00000010", "0000000", "0001000000", "0000010", "100011", "00010010", "00", "0", "11000", "00000", "000", "0010000000", "000000101", "0000000110", "001", "01", "0000", "00001010", "0100000", "011110000", "00000001", "0010000", "0001010", "100000", "0010001010", "010000", "10000000", "00100", "000000000", "00001000"};
    vector<string> goodSubstring = {"100110"};
    long K = 10;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03102339607584346;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> pieces = {"1"};
    vector<string> goodSubstring = {};
    long K = 498;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> pieces = {"1"};
    vector<string> goodSubstring = {};
    long K = 499;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> pieces = {"1"};
    vector<string> goodSubstring = {};
    long K = 500;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> pieces = {"1"};
    vector<string> goodSubstring = {"11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111"};
    long K = 501;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.0;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> pieces = {"1"};
    vector<string> goodSubstring = {};
    long K = 502;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 3.0;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 498;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 12200.0;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    long K = 499;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 12225.5;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 500;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 12251.0;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    long K = 501;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 12276.5;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 502;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 12302.0;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> pieces = {"11", "1"};
    vector<string> goodSubstring = {};
    long K = 331;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.5125472275647422;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> pieces = {"1", "11"};
    vector<string> goodSubstring = {};
    long K = 332;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 3.1536796528395925;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> pieces = {"11", "1"};
    vector<string> goodSubstring = {};
    long K = 333;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 3.8927404922023476;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> pieces = {"1", "11"};
    vector<string> goodSubstring = {};
    long K = 334;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.729732085080005;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> pieces = {"1", "11"};
    vector<string> goodSubstring = {};
    long K = 335;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 5.662066131134402;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.9999999999501E13;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {"0"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 5.0E13;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {"0"};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 50.0;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 9.99999999501E11;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {"0"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0E12;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {"0"};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 4.9999999999501E13;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {"0"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 5.0E13;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> pieces = {"00000000000000000000000000000000000000000000000000"};
    vector<string> goodSubstring = {"0"};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 50.0;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 9.99999999501E11;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {"0"};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0E12;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> pieces = {"0"};
    vector<string> goodSubstring = {"0"};
    long K = 1;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> pieces = {};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 2.5499999999501E13;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> pieces = {"00110010000111100111001110001011011101011100001010", "00111001100100000000101110000001100010111010111011", "10100001000110110010110100101111101111110000010101", "10110001001100101100010010101011001100100111101001", "10110101100010010111000001101011111011101111100110", "01100100101110000101110111000100110001101001010100", "01000100101010001001011111000001111010111010110110", "00111100000010000111001001101101110111010100000000", "01011110010110010110100110111010110000111110010001", "00100111110111000111000101001001011001001100100001", "01011000111011101111100000100011100011011111111000", "10011011000100101100110111110100010101111000010010", "00000011111101110101001111011111101011011010100100", "01101001000011010000000011000010110100011010001010", "11010011001000010001010010111000010100111010101111", "11110100111011010011001000011001000000101101100110", "00101010001001110011100111000011101110101011000001", "01110001101011010001011010011110110100101000000100", "10101111101100101000101000000000101110000011001101", "11111011000100001111001010010110011100110011111100", "01100111100110011100001011111000110000011001110100", "10001000010110000100111000110100100111000111001100", "11100100000011111100100011001111000001000011011111", "11101110000010001111100010100001110000010001111000", "11100110011111011110111100000101101101011101110100", "00001101011011100000100001000111101000000100101101", "00010011100101011000100110001100111110000111011011", "00100000000110000101000011001011111010010101011011", "01100101011010100000101110011111110011110100101000", "00001110100110010011001000110000011100010011001011", "11111111011110010110110010010000010001000100000010", "01010110100010001011011111101010001100011100000011", "01111010100110000010001111000111101010010101001100", "00000110001000001010000011100101010110000110001011", "11111100101000010110000000110101001111100011000011", "00000101101001110111000100100010111100010101010111", "10011001110100011110111001010111011110001001010011", "10101110110100000111011000101011110101101101000011", "00010000110010011111110000110100110110100010111110", "11001110101000110110011111010010110100111111000110", "00001011100111001110000001110001100101101010100011", "10011110100011011100010011001100010010101000100010", "00000110001110100011010101110101001010100001111010", "00110101100110010101100111000001100000010001110110", "11101001111011100101101101010001100011000010111011", "01111101111001000000100011101001001111111101110011", "10100010011100100011110101000001111101101111100101", "10100010111001110011001001000110000000100111111111", "10110001001011011011000010010001101101100100011000", "00101001111100110010111010001001010111001000001000"};
    vector<string> goodSubstring = {};
    long K = 1000000000000;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> pieces = {"0", "10", "1101", "11111", "111110", "11111101", "101111", "10111111", "1111111", "11111101010101", "1010101010010101011", "000011010101", "00101010101", "010101010", "0101001010", "01001001", "0000000001111", "00010101010000010101000"};
    vector<string> goodSubstring = {"11011100001110111000110111000111011000111101110010", "11011100001110111000110111010111011100111101110010", "11011100001110111010110111000111011100111101110010", "11011100001110111000110111100111011100111101110010", "11011100001110111000110111000111011100111101110010", "11011100001110111000110111000111011100111101110010", "11011100001110111000110111000111011100111101110010", "11011100010110111000110111000111011100111101110010", "11011100001110011000110111000111011100111101110010", "11011100001110111000110111000111001100111101110010"};
    long K = 99999999999;
    DengklekMessage* pObj = new DengklekMessage();
    clock_t start = clock();
    double result = pObj->theExpected(pieces, goodSubstring, K);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22863472&rd=14551&pm=11714
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
typedef long long ll;
typedef long double ld;
 
class DengklekMessage {
public:
  int G, P, Plen[50];
  int matchLen[50][50][500];
  ld p[501][501];
  ld prob(int i, int k)
  {
    if (i >= G)
      return 1;
    else if (k <= 0)
      return 0;
    if (k > 500)
      k = 500;
    ld& res = p[i][k];
    if (res != -1) return res;
    res = 0;
    for (int p = 0; p < P; ++p)
    {
      int m = matchLen[p][0][i];
      if (m >= min(G-i, Plen[p]))
        res += prob(i+m, k-1);
    }
    res /= P;
    return res;
  }
  double theExpected(vector <string> pieces, vector <string> goodSubstring, ll K) {
    for (int i = 0; i <= 500; ++i)
    for (int j = 0; j <= 500; ++j)
      p[i][j] = -1;
    string good = "";
    for (int i = 0; i < goodSubstring.size(); ++i)
      good += goodSubstring[i];
    G = good.length();
    P = pieces.size();
    for (int p = 0; p < P; ++p)
      Plen[p] = pieces[p].length();
    
    for (int p = 0; p < P; ++p)
    for (int i = 0; i < Plen[p]; ++i)
    for (int j = 0; j < G; ++j)
    {
      matchLen[p][i][j] = 0;
      int k = 0;
      while (i+k < Plen[p] && j+k < G && pieces[p][i+k] == good[j+k])
      {
        k++;
        matchLen[p][i][j]++;
      }
    }
    
    ld res = 0;
    int smallK = 500;
    if (K < smallK) smallK = K;
    
    for (int p = 0; p < P; ++p)
    for (int i = 0; i < Plen[p]; ++i)
    {
      int m = matchLen[p][i][0];
      if (m >= min(G, Plen[p] - i))
      {
        res += prob(m, 500);
      }
    }
    res *= K - smallK;
    for (int k = 0; k < smallK; ++k)
    {
      for (int p = 0; p < P; ++p)
      for (int i = 0; i < Plen[p]; ++i)
      {
        int m = matchLen[p][i][0];
        if (m >= min(G, Plen[p] - i))
        {
          res += prob(m, k);
        }
      }
    }
    res /= P;
    return res;
  }
};
 
 
 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

********************************************************************************
*******************************************************************************/