/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8527
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class MarblesRegroupingEasy {
public:
    int minMoves(vector<string> boxes);
};

int MarblesRegroupingEasy::minMoves(vector<string> boxes) {
    int ret;
    return ret;
}


int test0() {
    vector<string> boxes = {"000307000000410903"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> boxes = {"0000000000000010609000008020070006000000030000", "0000000002000006003400075000000000000002009030", "0000800000000000000000098080000030701000010000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> boxes = {"000600009000903000061000002000010000000", "000000000090400000000490000900001000000", "000000000000000000010000100000007000000", "047600006030000001359042000000000600000", "500000000004000000300000000000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> boxes = {"060005073030000070040000009000050", "000000003000090080800000000000000", "000000400000000000070090000000000", "400000000300100003000000000780000", "000000020000050040010000050030004", "000000000000005900002420000005030"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> boxes = {"00007400000000000000070", "00000000000001006000100", "00007000000007000002030", "60000010002000000000000", "80400000108060000080001", "00000000500009000005000", "21090070000003000000000", "00030040070000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> boxes = {"300001000000700000454000000040060005000800000000", "200009707000007000000000000100100000090020026002", "000000385080000000030800429000000000009000003000", "084000000000000000002004000850000000000000000000", "400000001000000000800000000203005000000000000700", "000000047004000003606550006000050400000002000403", "000000000006000000020090000090000000006000000000", "010600002000000000000600000000050203000000007000", "000000800000000000000000005000600000000104700000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> boxes = {"00090007005300", "00000324000008", "09000000000000", "07100004000000", "78000880000006", "81000603000030", "00000005300001", "70000000000000", "20907000960000", "00000000060200", "00000000000000", "00000000060202", "00000000004000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> boxes = {"000105000000", "909000000700", "770600000000", "000000060000", "000000000080", "700000000000", "000000000600", "004000000009", "960080000000", "000050000000", "000080006300", "000000000000", "000000000654", "000000002008"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> boxes = {"000000000000", "005020070000", "000000000000", "000000080009", "000609060000", "000000000000", "709206000000", "000020000300", "000300000040", "000009005003", "000030090030", "000000000000", "000000000170", "000003900000", "000000007000", "000300300000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> boxes = {"0008000000000003800000000", "8009000005000004000003006", "0100468000000000001000003", "4000000000030000000000000", "0000060000800000060000050", "0000120000802105000000000", "0500070080000100000000500", "0200790000000000096070000", "0060000700303000060000000", "0000000901024005000000700", "0700000000000070000000290", "0400000000300010007600006", "0003000060000000000000000", "0000000010670100010000060", "9000000000010000000000803", "0000000000000003000093000", "0000000000000700000000000", "0000000700050200000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> boxes = {"20900007000000000", "00002460000000000", "30000060008040000", "50000009000000020", "00002400000000000", "80000000000450000", "00000900000000000", "00000001000080000", "00004000230000090", "00000009004009060", "00000000000030700", "00090000500903000", "00000200090000000", "00009000010000017", "00000000904802000", "00000000000000000", "00070000370000000", "00000000000000000", "22000000000900000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> boxes = {"00300000000000800000000000", "00002100500030000000000051", "00040300040000000000000000", "30070000001000000650000000", "00000000000001000002004080", "65000400000000400200400000", "02000000000001300000046206", "00000000000000000000000400", "01285000000000800000010100", "00000000000073500500000000", "00000000090080000000000000", "00000002750009000070020880", "00000000800000000107080000", "00010000309070000980000000", "01008040000000000071000000", "60080000070000000300700000", "00000602005033005000000200", "00000000000000200900100700", "00006000030907010017600000", "05000000020000005000070000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> boxes = {"950000020001060000700533000", "000009060040004010000000010", "000100000900060007000000000", "000005000000000000060800000", "002000000050000406050000000", "000000000010004000000000190", "000075000900000000000000000", "700000000002500009008000000", "040000000000600000000070301", "080003400030300080000000009", "000605080000300034000070600", "000000000000500000000000000", "050500000000090400000000000", "000005000000000020880000000", "000005000008000000300500600", "000000006000000006100000000", "000000004005000000050000000", "000500008720000000000200000", "705000005090000008500000000", "000052008000000000005000700", "300005004030800000005000006"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> boxes = {"90000000000000000", "53000024300900000", "80050130000000080", "07000000100003200", "00000000200000000", "00700000000000300", "05000000010700060", "00000000000039000", "20000000000030800", "00030000000000000", "00006000870600000", "00002006000000000", "00000500000000300", "01000000000000000", "00000200800400010", "00005000200000070", "46000000000140000", "30005000809002000", "00002000000059004", "00000001000000300", "00000000044050000", "00000700000000800"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> boxes = {"700509000000000000000000080400000000", "000000000000000000060000070000077000", "250000900007009300003000900630004000", "000007000700007040000300000000000000", "000600006000000000500007000000005500", "000060000000000003010000082000000600", "003000000000000000000600600700000000", "000800000002000010004000010000000000", "000080030000000000000906000002000000", "000000000010000000000008674000400800", "000000000000000000000000006080100700", "000000000000008100000000000500000008", "008260800007009000040000400020030000", "205001000000000080000000000007700000", "006000000009070060060080080000003400", "010000070000070000000020000003000000", "000000000000000061000000670000000000", "000000040000000078005000005000400000", "000000000000000010000300004060900000", "000050001000000000000020000000407000", "000000000600000000000000000000900500", "000007300009700001080000007000030060", "040010000000000700000000043000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> boxes = {"00070000000072", "00000010800000", "00000000006000", "68000000700002", "00106500000700", "00000000700000", "00000000000405", "00000003008000", "00215007005280", "67009000000010", "30000000000000", "00000209009070", "00000000400000", "00000000000000", "03000020000000", "00000040000000", "00030000000100", "00000000000000", "50000010000000", "01200000000000", "00000006070100", "09200700009000", "00068000000000", "00000102800005", "00000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> boxes = {"00000000000104", "00040900000000", "00000020000000", "80000303000000", "00500000000000", "00000000000080", "00000000300000", "00000000009700", "00008000500000", "00000000000000", "00500000000000", "00100076040000", "00000000000000", "00008300000000", "00000000000080", "00000020009000", "00000040000000", "00000000000601", "00000020606000", "00000000000004", "00000570000006", "05000006009200", "00000000000000", "00000400099000", "20005060500000", "20000000000610", "00080000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> boxes = {"00000904050070006008900000204708100000", "00000030400030000000030000000007001000", "00900000000007008060503000900007900060", "00000000003009700020006600400000000000", "53000000600800000000000000000033040400", "10000000300000000000000100206000000000", "00700000000000900000004100000000000005", "00000060040000506020600009047000003000", "00800805000000004000030000000000000000", "00006007000000100300008004002000000050", "00000000000000000000090000094000000000", "00009000000000000000000000000005300600", "00001008000107072000500000900000000050", "00230000003709009000008000000000000000", "00000000000000003050000000000090000020", "06000104000008000000000000000060000407", "07700000040400040000000060000200000000", "00078000000000003005000006000000000000", "00300000000000090676000000000060000400", "60000040060060000000000000000000000070", "00100000000000000000000000000009000000", "00000000700000060000500032000000000080", "01000000000700700000006600700004000000", "00000080300010060000000203000020090000", "04000000701000010000000000000001000000", "00030200080707002030050000000600000000", "06200000080007052000000000000000000070", "00000000000007042000010000000800034000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> boxes = {"0480000000000", "3000210001000", "0000000700000", "0000006000000", "0300000014800", "0000000004000", "0000000090005", "0000000000008", "0000000000000", "0000000000004", "0000000000000", "0000000000000", "0350000700000", "0000800200050", "0000006000000", "3060001092040", "0005000000042", "0000309000080", "0000830904000", "0000000000000", "0000800000000", "0400109000000", "0000000003000", "0000600000000", "0400000004000", "5000000630000", "0006000000005", "0000000010000", "0960000000000", "0000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> boxes = {"008000007000", "000008005000", "000000203040", "000002060000", "000006000300", "011002000400", "010000000100", "500000000000", "400000700404", "200600002000", "000000240000", "800095800006", "000900060600", "000001001000", "000000700000", "000000000006", "080000000010", "000000000060", "000000900067", "602050000000", "000000008000", "000000000050", "000000000055", "000004000060", "000010009650", "000000004000", "000200100871", "000000000600", "129000000000", "000000007000", "900000000000", "000000003003"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> boxes = {"0000030746", "0000000000", "0000000000", "0000000000", "0000000000", "0107080000", "0000000002", "3090007000", "0000001000", "0100048000", "0000000000", "0000000900", "0000020000", "0000004000", "0000000000", "0000200002", "7500060000", "0099050000", "0006000000", "0000000080", "0000000000", "7000003000", "0500000000", "7070000030", "0700090120", "0000000000", "0000003200", "0800000000", "0000000900", "0000700007", "0000000000", "0000500000", "0300905900"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> boxes = {"090000000000", "100300000000", "000008004300", "030000032000", "000040008000", "100000000000", "520000000000", "000000000000", "000000000003", "008000000000", "000000400000", "040010000011", "000000000000", "003000000030", "000000000000", "000000040000", "700200700000", "002000000001", "000000070700", "000070006000", "000100000000", "000000107005", "000000000100", "010000000000", "000090006002", "511000000007", "000500000000", "000000092000", "000000030377", "007000000060", "600009000000", "000070000005", "008090000700", "000000000000", "000000000080"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> boxes = {"00000800020027900000000075900000503", "97009000050000600300080003006000004", "00200000000000007000800020010000000", "00000000000100000006500004050900000", "00000820000020004065000000000001900", "00000400000000000700077100000007001", "00010000000002000300000800200014020", "00000000005000000601070040000000100", "00090000000000000000008000000000000", "00700500004000050600000020080000000", "00060009000044900000000000000000000", "75000010000006000000000000000000000", "00007000000500000050000000009007000", "80008002000067000090000000500600005", "30060000700000050005500000000006500", "00000003000090400000052600500505002", "00000017800080000020000003000006004", "90000000800009300004300050000000010", "00002700000000000005600200000200000", "90000100000030000000000000000903000", "00000500000900007000600000000007007", "00002000090100020000009050170000000", "00400000000000000000000057008700002", "39000000000000090000000000100003000", "00000000000000000000400080040000000", "90000674900001000000000920003000020", "00000000080000000700000000030000000", "00000000000000000000000000090000007", "00810593040500002000000000700000000", "00000600800009300000000000000000080", "00030000000005000000000000000000000", "00000000000000002000000000050000002", "00006000000000000010000007330000000", "00000000030000800100900000000000000", "00000000200000003000500070000000000", "00000000000065000500000000000000008", "20000000000000000000050920000700000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> boxes = {"100000080000000", "000000000000860", "080000000200900", "000010099000060", "000600000300000", "000060004000007", "000000001000080", "000000004000070", "000000000000090", "000170000000000", "000905000030060", "900000000035000", "000000009300000", "008000800004002", "000500900000020", "030070000100090", "000000097000004", "000707000018000", "000000070000000", "008040000300600", "005000000000000", "000070050004000", "600000590000000", "001000000000003", "000080001000000", "080000000000600", "650000090000000", "150000000004000", "000000000000002", "000008000000000", "000000000000060", "000000030004000", "400300000000001", "060091900200000", "900400008000000", "000570080000000", "000000700000000", "400070002000700"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> boxes = {"00040000002060000005000000500409000", "00000000000050000000300005000000006", "00000050008002050000200000008000360", "00000000000008000700000000000070770", "00590000006007490009001000000407000", "90007900000000600000920000000009000", "00000000091080086002000002000009000", "00000000000700000584900000002000105", "90800000009000000000000000000006040", "00000060000000000050007050000005500", "00900509007000005000000009000000000", "70060143000300001000000000000000000", "00900040005699000000060000000000108", "00300300000500400000040000000500000", "00006005003010002000600000006017008", "00000100000001000000000000005000000", "00000000000000003003000000000000002", "00000200000000000008000000002000000", "00000600000000000005000000808000000", "00000200906000000000080600001000000", "00000008940000000008060000020100000", "00000020050000000007500000028006010", "00000000040550000003000000000000000", "00900000000078000000300050070030000", "00000000600090090403060000005000000", "00005000000000300000005008607000000", "00700000000350000900000060008000000", "00000000000000009020030920000050000", "00007000070000900000270000000000700", "00900000000000300000000031000000000", "00000000005000000000000000010600072", "08900080000000000000000600020480000", "00000000900701030000000000060000000", "00000000500050000400000015000000000", "00000000030000000000000900000000000", "00001057950201000000000000500000000", "00000000000000000000200000000000000", "00000000000040000000000010090000000", "00000000005006050000140010000070000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> boxes = {"800000000004000000000009000000050000050400600080", "004000803400700076000000009000000000000000024003", "000000000000300000000000090000007000020300000707", "000000000000010000008000000040000000010000200000", "100000000000002000000000000702070006000900010500", "000040820000000900000070000004000001080000060640", "000000080050000067000050000004000000000000000000", "030000000000000000000200000000000000000900000000", "000000000030008000006000004000040000000000000301", "006100807000280000000030000050000700003900000120", "000000560100022100000000000030000004030000003000", "000000009080083100003000000000260000000070006000", "000004089080000000000000000003001000000206500000", "000000000000000000066007030000406080090690000800", "300000000000003009000004020000000000000001440000", "000080000000000000000009200000050000000006000000", "709000000001000050002000300000000000000082700000", "006000050300000702000000000000000040000020000000", "000000000050000000000200000100000090300200000904", "000006000000001000070000300700000500000700000000", "009000000006000000000000000000000157000000000000", "000910000000050607230000000000000010000010000000", "530000190000500000002000030000000000009003000000", "060000000000002803070000001000000807000400000900", "000000000000000300000000000000000000200600000000", "000080000040000904002000000000003000033000050700", "000000800000300000000200000051000670000000000000", "000900600000306000000004000000805000000000000050", "000000000000050000003040060100090000003000000000", "800300000000000000000010000006000900000070000008", "000000900000000309000000200000000000000000000004", "003000000700000000000809000000000000000000005000", "000000009100000001000000040000000000020090990004", "044800000400005000000000000000000080000000000600", "000000000600090200700000000000090000606000090400", "200000000000010005004000004000000000060000000000", "000001003000000100000000270000030017000010270004", "000010000006000000000001330020300004030620500000", "010000000000000030090000000000000000000000027030", "100007000100000000080000009400002000002200000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> boxes = {"00000000050009000000", "00000000002000006058", "00090000003000000070", "60009800000000400000", "00009000000080000002", "00900040000009050060", "08000000080000000009", "07000000902200030000", "40000050010000000900", "00000902260400000000", "00250050080000000000", "30020007008000030000", "00000007000900006000", "00000070400004320000", "04000000000007000000", "00000000060040030001", "00000000004000000000", "00007000100000090000", "00000002300090000500", "01009000000000700000", "00000000060000080000", "00002000000400000000", "01000000000005008000", "00020000000080000800", "00006070000008000000", "00000000040000000000", "40030000004000500020", "00043000600003049090", "02000006041000000010", "00070500006330400060", "00074001100000000050", "03010000000090000030", "00000001085300030000", "05000005020000000000", "00704000000000002000", "00001000000000034000", "00000001000801170000", "07001006005060000208", "00000007009050000000", "40080004000000000000", "00100140000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 38;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> boxes = {"0000000200606000000500000000700000000000500000056", "0030000000300890090000008190000000000045000300000", "0000000000000000000510000006000000007000000000000", "0070000000040000000020000009000000010070000080400", "1080000000000000600000000000100005000004060060000", "9009090200204090000080600000000020000000000030000", "0000000000000000000000531800001000509000007040001", "0800000000000000000009006000000040010000002000000", "0000970000090000000000500900500600000002020000000", "0410000000000027000900000000000000000600000000000", "0000000000000070000000000000000005000000044003000", "0100000090000000000038900070040003000000008000002", "0200300000000000000380000500000000000080800000002", "0000400700050000070002000090009000000000000000000", "0000000000000000000000047000100000950000000000200", "0000000008040600000050000000000300000000000000001", "0000000030000000000909683000000000000000000000080", "0000000000000000000100708000083000000000000000010", "8000002000400360000000700080100000000000000903000", "9090100500000073000000000370900090000008000000000", "0000000000000000020802080040000000000400053000000", "0002300000008000000008000000000000000002090000006", "0000200001000000405000000008000000000000030006026", "0008000000000300000009000000000000000000009060000", "0000800000070048000000000000015000000000000000046", "0300070000000000000000000009000000000010040000008", "0000000003000006000000000001040905000000200802090", "0000000000600260000080000000700007070002000002004", "0001007000000500000000002000000000400007008000000", "0000000000000066050530200000005000003900000000300", "0200020010000400000000000000807000200000000010000", "0002000000000000000006000000000000000000000000008", "0000000000000000005000000003000000000000002200001", "0003800000000051000000000090000000005080010000000", "0000407830000000040000000000000000000000008000000", "0000000000704001000000001800030000400000040000000", "0000000000000000060050000405000700009800000020204", "0000020000800000000000000009000000000000000000000", "0000000000000000008090000000001000000080009000003", "0000000500000100000000050000000007000000000000000", "9005000080074980050000090012605404400008000300100", "0000000690000000000000000000000700700000000000008"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> boxes = {"0007000000000000003000000005", "0000000000000000000090300070", "0010080002000040000000000070", "0000000000090000000006000020", "0000007009010000410000409440", "0004000000034201000000000001", "0000000090000000030000000980", "0020600000040000000000800200", "0000900000000000000000000050", "0600000001000000000000000000", "0000000904000300800000000000", "0006007000000000007020000000", "0000000000000004000000000000", "0700400000050005000002001099", "0000000000000005400009250090", "0000006000000090023000000800", "0008000000000000000070000010", "0004000009000000000000002900", "0010090000000000000000000000", "5008000020000092400020500000", "0005003000600001002209070030", "9120400000400000600000000000", "0000000000000003040040000000", "0000000000900004000600060090", "0000010000000070090000000000", "0100000000100094400000400360", "0400700000050709000008000001", "0000400000709000000000000000", "7000000000700005000002000000", "0680000800003000000800307504", "0000005300800000900000000000", "0040400000001000001000060000", "0000000000000001000000910000", "5000080000000000040390020000", "6000000040008500000000000040", "4040000200000000000000040002", "0008000200000050000020000000", "0000000482090010500000500000", "0088000000400000000000007090", "0500200000000000001006500000", "0000500000008004000000000700", "9000000000007050385000800020", "0908006007100090000003003009", "0009000000000050080000000080"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 42;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> boxes = {"0000000000", "0070200000", "0000000000", "2000000000", "0000004070", "0700000001", "0000000000", "0400300000", "0000000006", "0000000100", "5000006000", "0102000000", "0501000008", "0020000030", "0920000000", "0080000000", "0008000000", "0070000000", "0000000008", "0000000000", "0000000000", "0080090009", "0000020000", "0200000900", "4000000500", "0000000000", "8040000003", "0003000000", "0900080000", "0001007020", "0000000003", "0700000005", "0400000000", "9000000000", "0000030001", "0000000000", "0090000000", "0000006000", "0200007000", "0003009000", "0010010000", "0100000000", "0006009000", "0000001009", "0300000000", "0000053700"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> boxes = {"10000", "00900", "04070", "00000", "00000", "00000", "00000", "00000", "05600", "00003", "00000", "00000", "05000", "02090", "00009", "10201", "07000", "02000", "00900", "00000", "00050", "00500", "00010", "00000", "00000", "01000", "00000", "00000", "40090", "00004", "00600", "00000", "00604", "02000", "00070", "00300", "30003", "00000", "00000", "00000", "00000", "02000", "08010", "00050", "00000", "05000", "00500"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> boxes = {"000000040800000000004000170000000", "000030700000004000055005700000330", "305000140000000005006006002000000", "940000002000070009000008000004000", "000000000000000000000000000900000", "000000070200040000070000000029000", "000000993000000000000000000000000", "006000080100000000000090000000709", "000000200100000000080000410003000", "000090040000000000700098000000608", "000000000060203100080004830000000", "000000800000000090006000001080700", "000000000000000000000040000295000", "030000080000000090300001000000000", "030000201000000000000000000000000", "600000009000500040000000200602000", "000000093000000000000840000000100", "009000700000900000000200000030000", "000000000050000803060400000000000", "010000000059000000703800000401000", "000001720007000700000000000020901", "000000000004003000000700000000000", "000000090009000060001000000400000", "080080500000000000000000000002020", "080764000000000000000070000000000", "000100000090700000000000000000000", "005000000000000005000001000000016", "000004000000000001000040020000502", "030000030000000061008004002020009", "009000050000000300000000000600000", "000000009030077006000001000300000", "900509030080100000000300805010000", "000000000000008007009600400006000", "000000000000000300000000000060020", "000000000000001000000000700000700", "000905103300403100000000800000900", "000050000000080000008090000000000", "000010000000040000000082000600000", "000000000000000802001000000003500", "000006000000104094000000700000800", "000000000000900000007010000000400", "000000000000000000000080000200600", "000000600100000000000900000000000", "700000000000000000000200018090000", "008000000007000000000000000300000", "000580000008006000000040000009000", "000500008009070000000000000030000", "000009000020000000020000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> boxes = {"0000000030000000500050000400900008000", "7000000040000000000070000000005000010", "0000000000000000000000008050090000000", "0000010020000000000800000000000000000", "0400000000020000010734900000000000000", "0000600000000000030000960000000000000", "0003000000000002600000800000000000700", "0482000000202000090200000000000000790", "0000000009270003480000000006507000070", "0000000000000000189000000008020000000", "0000000000800000000050000000000000000", "0000000000006008090000006000000000000", "0000040000000000000007000000010000000", "0600730903600040009609000570000000340", "1002000600000800706009000060000000006", "0000000800000000080000080000090033000", "0020860305000000003000800000060000000", "2000000000800020070400000000005000000", "0060900000900600000047060000000200001", "0000080000000408000037000000700000000", "0000010040000100000000000840003500000", "8000000000600060000000000008005006900", "5000000300000000000020000004070000000", "6000000000100000080000000800000000000", "0000000050000000803000041770000000007", "0000000000000000000300000020030400061", "0002800000000000730000001090000000070", "9000000000700000300009000520060000039", "8000000000070000007000000900009090000", "0500000087030000001040000000000000000", "0000640900005000700007000027000000000", "0000000000000007000000000000000001004", "0000000000400070040010000000000270000", "0000009700000000000033200004000000000", "0030000094046068000000009009000000000", "0000008000000002000000000009000000000", "0000500007000800300063001060000500000", "0000000000000032006100000000000005008", "0000000050000000000000030000008000000", "1000000090000001000000000000000206000", "0008007000007090000001000000000500000", "0201000000000000000200000000000003050", "0000000400000000400084000700000000000", "0000000000000000000000000000900000007", "0001070060000000000000000000350200000", "0003000006070000000000000000003500000", "3200000000005000000000000006000000600", "0000885000000019000005000000400000200", "0000000060050200700800000000000009000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> boxes = {"00070006000000000000", "30050000200000000000", "00000002000000010000", "00000008000000000000", "00000000000080000000", "00000000000200006000", "00000000050085000010", "00000000008000000064", "00000000700500040000", "05900000050060000030", "00000000004007000000", "00070200000000003640", "00310600000000000700", "10000020000000000000", "00000007000005000000", "04000000006000090000", "50001000000000000000", "00230000070000000000", "00000000000800000700", "00009000000410000000", "07000007090000000050", "04000000000020009000", "00000000060000030000", "00000500000205000009", "00004000250079040000", "00040000700430000000", "05000001000000000022", "03006001000000741800", "00830081600003000000", "00000000002000000000", "00000020000000200000", "00500000000000040100", "00044000004000000000", "00300000901000000600", "00000000001000000000", "00080510000000000000", "00090000900000070800", "05000002000000400000", "00004200000900000900", "85000000000043030300", "00007000000400208009", "07004200000000000000", "00000040196980000000", "50000006550090004040", "00000080030000020000", "00000070140700700004", "00000000909280000004", "00370000002000000500", "00000000800070900000", "80703000000020000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> boxes = {"20", "11"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> boxes = {"11", "11", "10"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> boxes = {"10", "10", "01", "01"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> boxes = {"11", "11", "11", "10", "10", "01"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> boxes = {"020008000070", "000004000000", "060000600000", "006000000362", "000720000000", "000040000000", "004009003000", "000800000000", "020030003000", "000500200000", "000000300000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> boxes = {"1000", "1000", "1000", "0100", "0100", "0010", "0001", "0001", "0001"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> boxes = {"020008000070", "000004000000", "060000600000", "006000000362", "000720000000", "000040000000", "004009003000", "000800000000", "020030003000", "000500200000", "000000300000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> boxes = {"10", "10", "01", "01"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> boxes = {"020008000070", "000000000000", "060000600000", "006000000362", "000720000000", "000040000000", "004009003000", "000800000000", "020030003000", "000500200000", "000030000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> boxes = {"00000", "00000", "00000", "00000", "00000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> boxes = {"0000", "0000", "0000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> boxes = {"100000", "010000", "001000", "000100", "000010", "000001", "111111", "000000", "000000", "123456", "123456"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> boxes = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000002000000000000000000000000000000000000000", "00000000009000000000000000000000000000000000000000", "00000000000000000000060000000001000000000000000000", "00000000000000000000030000000001000000000000000000", "00000000001000000100000000000000000000000010000000", "00000000000000000000000000000000000000000000000005"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> boxes = {"0000000000", "0000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> boxes = {"0000", "0000", "0000", "0000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> boxes = {"000", "000", "000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> boxes = {"10", "01", "01", "01", "01"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> boxes = {"10", "01"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> boxes = {"0"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> boxes = {"00", "00", "00", "00", "00"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> boxes = {"1111", "1111", "1111", "1111", "0000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> boxes = {"100", "010", "001"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> boxes = {"1100", "0011"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> boxes = {"01", "10", "01", "01", "01"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> boxes = {"0", "0", "0", "0"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> boxes = {"00", "00", "00", "10", "11"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> boxes = {"10", "01", "10"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> boxes = {};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 47;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> boxes = {"52", "30", "00", "40"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> boxes = {"20"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> boxes = {"11111", "10000", "10000", "10000", "10000", "10000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> boxes = {"01", "10"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> boxes = {"20", "11", "00"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> boxes = {"20", "11", "00", "00", "40"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> boxes = {};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> boxes = {"0", "0", "0"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> boxes = {"000", "000", "000", "000", "000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> boxes = {"1", "1", "1", "1", "1"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> boxes = {"11", "11", "01", "10", "11", "11"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> boxes = {"000000000000001", "000000000000010", "000000000010000", "000000000000100"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> boxes = {"1000", "0100", "0010", "0001"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> boxes = {"15633478421563347842156334784215633478421563347842", "00000000000000000000000000000000000000000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> boxes = {};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 47;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> boxes = {"00000000000000000000", "10000000000000000000", "10000000000000000000", "10000000000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> boxes = {"00", "00", "00"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> boxes = {"00", "00"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> boxes = {"01", "10", "10"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> boxes = {};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> boxes = {"0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001", "0001"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> boxes = {"10000000000000000000", "01000000000000000000", "00100000000000000000", "00010000000000000000", "00000000000000000001", "00000000000000000001", "00000000000000000009", "00000000001000000009", "11111111111111111111", "00000000000000000080", "00000000000000007000", "00000000000000006000", "12345678900987654321"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> boxes = {"170004", "006002", "007000", "009394", "000009", "007900", "000000", "900000", "000000", "300009", "000000", "000070", "000030", "000000", "500200", "000000", "000005", "000000", "009000", "000000", "006870", "000060", "000000", "500000", "080000", "002036", "500000", "300400", "610000", "000000", "005000", "600030", "000000", "080000", "000000", "000700", "001000", "000000", "000906", "500009", "000700", "000009", "000700", "080000", "090032", "100000", "400000", "760000", "005000", "036006"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> boxes = {"22", "00", "00", "00"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> boxes = {};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> boxes = {"00", "00", "56", "60"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> boxes = {};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> boxes = {"10", "10", "10", "10"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> boxes = {"11111", "10000", "10000", "00000", "00000", "00000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> boxes = {"1100", "1000", "0100", "1000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> boxes = {"1"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> boxes = {"11", "11", "11", "11", "11"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> boxes = {"1", "1"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> boxes = {"10", "01", "01"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> boxes = {};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> boxes = {"00", "00", "00", "00", "00", "00", "00"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> boxes = {"1000", "1233", "1000", "1000", "1000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> boxes = {"00", "11", "00", "00"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> boxes = {"00000000001000000000000000000000000000000000000000", "44061416649151996638987464506533931173967894284849", "00000000006000000000000000000000000000000000000000", "75951557092244547406491697456203998066895011665325", "00000000006000000000000000000000000000000000000000", "00000000000000000000000000007000000000000000000000", "00000000002000000000000000000000000000000000000000", "35090640132148747460636180787332933917021247213069", "00000000001000000000000000000000000000000000000000", "00000000006000000000000000000000000000000000000000", "00000000004000000000000000000000000000000000000000", "00100000000000000000000000000000000000000000000000", "00100000000000000000000000000000000000000000000000", "00000000000000000000000000007000000000000000000000", "89450633420112121903297338160998855038372516920242", "00000000000000000000000000007000000000000000000000", "00000000000000000000000000007000000000000000000000", "51652253351821227152232734172987065482718012355072", "15780317807525263556577715214665356397278142671126", "94767218677312163912929116220129717458436369885198", "00000000000000000000000000007000000000000000000000", "00000000000000000000000000007000000000000000000000", "51416839246312828102090063159184247042976720932042", "00000000000000000000000000007000000000000000000000", "00000000000000000000000000007000000000000000000000", "48999490455035557244646986600236125296352867514250", "16514374317142673508904655202314967414065070457709", "99276908259867528956653891781633770472417496148235", "00000000000000000000000000007000000000000000000000", "04015798651322914424810150306428820511376511722365", "00000000000000000000000000000000000000000000000000", "00000000005000000000000000000000000000000000000000", "00000000002000000000000000000000000000000000000000", "00000000008000000000000000000000000000000000000000", "30297522729595110405416162604479611693067947558710", "00000000003000000000000000000000000000000000000000"};
    MarblesRegroupingEasy* pObj = new MarblesRegroupingEasy();
    clock_t start = clock();
    int result = pObj->minMoves(boxes);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=308453&rd=11121&pm=8527
********************************************************************************
#include <string> 
#include <vector> 
#include <map> 
#include <set> 
#include <cmath> 
#include <algorithm> 
#include <cctype> 
#include <stack> 
#include <queue> 
#include <cstdio> 
#include <cstdlib> 
#include <cassert> 
#include <iostream> 
#include <sstream> 
#include <cstring> 
#include <complex> 
 
using namespace std; 
 
const int oo = 1000000000; 
const double eps = 1e-9; 
const double Pi = 2.0 * acos(0.0); 
 
typedef complex<double>  tComp; 
typedef vector<int>  VI; 
typedef vector<VI>  VVI; 
typedef pair<int,int>  PII; 
typedef vector<PII>  VPII; 
typedef vector<VPII>  VVPII; 
 
class MarblesRegroupingEasy { public: int minMoves(vector <string> boxes); }; 
 
 
int MarblesRegroupingEasy::minMoves(vector <string> boxes) 
{ 
  int bad = 0; 
  int num[64] = {0}; 
  for (int i = 0; i < boxes.size(); i++) 
  { 
    int found = -1; 
    for (int j = 0; j < boxes[i].size(); j++) 
      if (boxes[i][j] != '0') 
      { 
        if (found >= 0) 
        { 
          found = -2; 
          break; 
        } 
        else 
          found = j; 
      } 
    if (found == -2) 
      bad++; 
    else if (found >= 0) 
      num[found]++; 
  } 
 
  for (int i = 0; i < 64; i++) 
    bad += (num[i]-1) >? 0; 
  return (bad-1) >? 0; 
} 
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/