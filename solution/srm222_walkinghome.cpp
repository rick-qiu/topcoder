/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=3444
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class WalkingHome {
public:
    int fewestCrossings(vector<string> map);
};

int WalkingHome::fewestCrossings(vector<string> map) {
    int ret;
    return ret;
}


int test0() {
    vector<string> map = {"S.|..", "..|.H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> map = {"S.|..", "..|.H", "..|..", "....."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> map = {"S.||...", "..||...", "..||...", "..||..H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> map = {"S.....", "---*--", "...|..", "...|.H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> map = {"S.F..", "..F..", "--*--", "..|..", "..|.H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> map = {"S|||||||", "--------", "|||.....", "|||.....", "|||....H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> map = {"............|....", "............|....", "...F........|....", "...F........|....", "..FF........|....", "..FF........|....", "..FF........|....", "..F.........|.FFF", "..F.........|...|", "..F.........|...|", "..F.........|...|", "..F.........|...|", "..F.FFFFFFFF|FFF|", "..F.........|...|", "..F.........|...|", "..F.........|....", "..F.........|....", "..F.........|....", "..F.H.......|....", "..F.........|....", "------------*----", "..F.........|....", "..F..S......|....", "............|....", "............|...."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> map = {"......--------------.", "F|FFFFFFFFFFFFFFFFFFF", ".|...................", ".|............S......", ".|...................", ".|...................", ".|...................", ".|...................", ".|........FFFFFFFFF..", ".|...................", ".|...................", ".|...................", "-*-------------------", ".|...................", ".|..............F.F..", ".|..............F....", ".|..H...........F....", ".|..............F....", ".|..............F....", ".|..............F....", "................F....", ".....................", "....................."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> map = {"............................|.............", "...................F........|.............", "...................F........|.............", "...................F........|.............", "...................F........|.............", "...................F........|.............", "...................F........|....|........", "...............F...---------*----*----S--.", "...............F............|....|.|.|....", "............................|....|.|.|....", "............................|....|.|.|....", ".....FFFFFFFFFFFFFFFFFFFFF..|....|.|......", "............................|....|.|......", "............................|.H..|.|......", "............................|....|.|......", "............................|......|......", "............................|......|......", "............................|......|......", "----------------------------*------*------", "............................|.............", "................------------*--..........."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> map = {"|", "|", "|", "*", "|", "|", "|", "|", "|", "|", "|", "S", "|", "|", "|", "|", "H", "|", "|", "|"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> map = {".................|.................", ".................|.................", ".................|.................", ".................|.................", ".................|.................", "................-*--------.........", ".................|.................", "................F|.........|.......", "................F|.........|.......", "................F|.........|.......", "................F|H........|.......", "................F|.........|.......", "................F|.........|.......", "........S.......F|.................", "................F|.................", ".................|.................", ".................|................."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> map = {"...........|......||....", "...........|......||H...", "...........|......||....", "...........|......||....", "...........|......||....", "...........|......||....", "...........|......||....", "...........|......||....", ".....F.....|......||....", ".....F.....|......||....", "|....F.FFFF|FFFFFF||F...", "|....F.....|......||....", "|....F.....|......||....", "|....F.....|......||....", "|....F.....|......||....", "|....F.....|......||....", "|..........|......||....", "|..........|......||....", "|..........|FFFFFF||..F.", "|..........|......||....", "|..........|......||....", "|..........|......||....", "|..........|......||....", "|..........|......||....", "|.FFFFFFFFF|FFFFFF||....", "...........|......|.....", "...........|.S....|.....", "...........|......|.....", "-----------*------*-----"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> map = {"|....|", "|....|", "|....|", "|...F|", "|---F|", "|...F|", "|...F|", "|...F|", "|...FH", "|....|", "|....|", "|FS..|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|----|", "|....|", "|....|", "|....|", "|....|", "*----*", "|....|", "|....|", "|....|", "|....|"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> map = {"FFFF..............................................", "..................................................", "..................................................", "..................................................", ".....................................|............", ".....................................|............", ".....................................|............", ".....................................|............", "-------------------------------------*------------", "..............................H......|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "................|..F.................|............", "................|..F.................|............", "................|..F.................|............", "................|..F.................|............", "................|.-------------------*----........", "................|..F.................|............", "................|..F.................|............", "................|..F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F..............................", "...................F..............................", "...................F..............................", "...............---------------------------------..", "...................F............S................."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> map = {"--------*-*-*----*-------*--*--------", "...FFFFF|F|F|FFFFH.......|..|........", ".......F..S......|..F.......|........"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> map = {"*-SH", "...F"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> map = {"..F", ".|F", ".|F", "H|F", ".|F", ".|.", "...", "---", "...", "S.."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> map = {".....|.......|.|........|...............", ".....|.......|.|........|...............", ".....|.......|.|........|...............", "....||.......|.|........|...............", "....||.......|.|........|...............", "....||....|..|.|........|...............", "....||....|..|.|........|...............", "....||....|..|.|........|...............", "....||....|..|.|........|..|............", "....||....|..|.|........|..|............", "....||....|..|.|........|..|............", "....||....|..|.|........|..|............", "....||...F|.||.|........|..|............", "....||...F|.||.|........|..|............", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|F||F|FFFFFFFF|FF|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|.............|.", "....||...F|.||.|........|.............|.", "....|....F|.||.|........|.............|.", ".........F|.||.|........|.............|.", "..........|.||F|FFFFFFFF|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", ".....H....|.||.|........|.............|.", "..........|.||.|........|...............", "..........|.||.|...-----*------------...", ".............|..........|...............", ".............|..........|.....S.........", ".............|..........|..............."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> map = {".|...................|......|.............", ".|...................|......|.............", ".|...................|......|.............", ".|.............|.....|......|.............", ".|.............|.....|.S....|.............", ".|.............|.....|......|.............", ".|.............|.....|....|.|.............", ".|.------------*-----*----*-*---..........", ".|.............|.....|....|.|.............", ".|..|..........|.....|....|.|.............", ".|..|..........|.....|....|.|...........F.", ".|..|..........|.....|....|.|...........F.", ".|..|..........|.....|....|.|...........F.", ".|..|................|....|.|...........F.", ".|..|................|....|.|.............", ".|..|................|....|.|.............", ".|...................|....|.|.............", ".|...................|....|.|.............", ".|...................|....|.|.............", ".|.....--------------*......|.............", ".|...................|......|.............", ".|...................|......|.............", ".|...................|......|.............", ".|............H......|......|............."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> map = {"--------------------------...", ".............................", "........................H.|..", "..........................|..", "..FFFFFFFFFFFFFFFFFFFFFFFF|..", "..........F...............|..", "..........F...............|..", "FFFFFFFFFFFFFFFFFFFFFFFF..|..", "..........F...............|..", "..........F...............|..", "..........FS..............|..", "..........F...............|..", "..........F...............|..", "..........F...............|..", "..........F...............|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", ".........F................|..", ".........F..FFFFFFFFFFFFFF|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", "...FFF...F................|..", ".........F................|..", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".............................", ".............................", ".............................", "............................."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> map = {"..............................................", "...................|..........................", "...................|..........................", "...................|..........................", "...................|..........................", "...................|..........................", "...................|..........................", "F..................|..........................", "F..................|...F......................", "F..................|...F......................", "F..................|...F...................|..", "F..................|.FFFFFFFFFFFFFFFFFFFFFF|..", "F.................||...F.........F.........|..", "F..........-------**-----........F.........|..", "F.................||...F.........F.........|..", "F.................||...F.........F.........|..", "F............|....||...F..H......F.........|..", "F............|....||...F.........F.|.......|..", "-------------*----**---------------*-------*..", "..................||.............F.|.......|..", "..................||...............|.......|..", "..................||...............|.......|..", "..................||...............|.......|..", "...................|...............|.......|..", "...................|...............|.......|..", "..................S|...............|.......|..", "-------------------*---------------*----------", "...................|...............|..........", "...................|...............|..........", "...................|...............|..........", "-------------------*---------------*----------", "...................................|..........", "...................................|..........", "...................................|..........", "...................................|..........", "...................................|..........", ".............................................."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> map = {"....|..........|.", "....|..........|.", "....|..........|.", "....|..........|.", "....|..........|.", "....|..........|.", ".---*---------.|.", "----*----------*-", "....|..........|.", "....|..........||", "....|..........||", "....|..........||", "....|..........||", "....|..........||", "....|.---------*|", "....|F.........||", "....|.....S....||", "....|..........||", "....|..........||", "....|..........||", "F...|..........||", "F...|..........||", "F...|..........||", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F..F|F.........|.", "H...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "....|..........|.", "....|..........|.", "....|............", "....|............", "....|............", "....|............", "....|............"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> map = {"..|..||.|..|.|.|..|.|..............|.......", "..|..||.|..|.|.|..|.|..............|.......", "..|..||.|..|.|.|..|.|..............|.......", "..|..||.|..|.|.||.|.|.............||.......", "..|..||.|..|.|.||.|.|.............||.......", "..|..||.|..|.|.||.|.|.............||.|||...", "..|..||.|..|.|.||.|.|.............||.|||S..", "--*--**-*--*-*-****-*-------------**-***---", "..|..||.|..|.|.||||.|.............||.|||...", "..|..||.|..|.|.||||.|.............||.|||...", "..|..||.|..|.|.||||.|.............||.|||...", "|.|..||.|..|.|.||||.|.............||.|||...", "|.|..||.|..|.|.||||.|.....|...F...||.|||...", "|.|..||.|..|.|.||||.|.....|...F...||.|||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..||.|...F...||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...||||..F..", "|.|..||||..|.|.||||.|...|.|...F...||||..F..", "|.|..||||..|.|.||||.|...|.|...F...||||..F..", "|.|..||||..|.|.||||.|...|.|...F...||||..F..", "|.|..||||..|.|.|.||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||H.F..", "|.|..||.|..|.|...||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||.....", "|.|..||.|..|.|...|*-*---*-*...F....|||.....", "..|..||.|..|.|...||.|.........F....|.|.....", "..|..||.|..|.|...||.|.........F....|.|.....", "..|..||.|..|.|....|.|.........F....|.......", "..|..|..|..|.|....|.|.........F....|.......", "..|..|..|..|.|....|.|.........F....|......."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> map = {"H|S"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> map = {"|||||||||||||||||||||||||||||||||||||||||||||||||.", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "S||||||||||||||||||||||||||||||||||||||||||||||||.", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> map = {"H|.|.|.|.|.|.|.|.|.|.|.|.|.", "F|F|F|F|F|F|F|F|F|F|F|F|F|-", "S|.|.|.|.|.|.|.|.|.|.|.|.|."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> map = {"S|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 624;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> map = {".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "...S.||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", "-----**----------***--------*-----*--------*------", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.H...|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> map = {".....||..........|||........|.....|.......F|......", ".....||..........|||........|.....|.......F|......", ".....||..........|||........|.....|FFFFFF..|...S..", ".....||..........|||........|.....|.......F|......", ".....||..........|||........|.....|........|F.F.F.", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|.F.F.F", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....*--------*......", ".....||..........|||........|.....*--------*......", ".....||..........|||........|.....|..F.F..........", ".....||..........|||........|.....|.F.H.F.........", ".....||..........|||........|.....|F..............", ".....||..........|||........|.....................", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> map = {"S-H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> map = {".F-H", "S.|F"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> map = {"S..", "--F", "-|.", ".FH"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> map = {"S|F", "F-H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> map = {"|...F...F...F...F....||||........-.....|.......|||", "..F...F...F...|.|.F...||....-.-.......||..........", ".S.|||||||||||||||||||||||||||-||||||||||||||||||-", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF-.-...F............F..", "||||||||||||||||||||||||||.|...FFF.............F--", "...................FFFFFFFFFFFFF...............F.|", "...............................................F.|", "...............................................F-.", "...............................................F..", "...............................................F--", "...............................................FF-", "..||||||||||||||||||||||||||||||||||||||||||||||..", "...............................................FFF", "FFFFFFFFFFFFFFF|FF-FFFFFFFFFFFFFFFFFFFFFFFFFFF--..", ".|...|............-................F..............", "..|.|.|..........|.||..F....F..F...F..............", "||||...|.........||||...F..F....F......FFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF--------------", "...........|||||....................---...........", ".............|.|....................-F-...........", ".............|.|....................---...........", ".............|.|....................-.-...........", "--------------F|....................|.-...........", "FFFFFFFFFFFF-FF|....................-.-...........", "...........|.|F.....................-.-...........", "FF-FFFFFFFFF-FF.....................||.||||.......", "||...|.F....|..FF.....................|....FFFFFFF", ".|||||||||.", "........F.................................-F.H.|..", ".........FFFFFFFFFF.......................-.|||...", ".........F.|-......F......................-..F....", "...........|-.......FFFFFFFFFFFFFFFFFFFFFFFFF...F.", ".........F.|-................F....F.....||||||||.-", ".........F.--.................F...F....F..........", ".........F.-.......FF.......F.....F...F...........", ".-.....--F.||||||||..F.....F....F----F...........-", "....-----F.-..........F......-...F..F............-", ".--------F.-.......................F...........||-"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> map = {"S.|..", "..|.H", "..|..", "....."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> map = {"S||-H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> map = {"S|||||H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> map = {"S||", "||H"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> map = {"S|H", "..."};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> map = {};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> map = {"|...F...F...F...F....||||........-.....|.......|||", "..F...F...F...|.|.F...||....-.-.......||..........", ".S.|||||||||||||||||||||||||||-||||||||||||||||||-", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF-.-...F............F..", "||||||||||||||||||||||||||.|...FFF.............F--", "...................FFFFFFFFFFFFF...............F.|", "...............................................F.|", "...............................................F-.", "...............................................F..", "...............................................F--", "...............................................FF-", "..||||||||||||||||||||||||||||||||||||||||||||||..", "...............................................FFF", "FFFFFFFFFFFFFFF|FF-FFFFFFFFFFFFFFFFFFFFFFFFFFF--..", ".|...|............-................F..............", "..|.|.|..........|.||..F....F..F...F..............", "||||...|.........||||...F..F....F......FFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF--------------", "...........|||||.......FF......|....---...........", ".............|.|...............|....-F-...........", ".............|.|.......FFFFFFF--FFF.---...........", ".............|.|.......F.....F..F...-.-...........", "--------------F|.......F.....F--F.FF|.-...........", "FFFFFFFFFFFF-FF|.......F.....F..F...-.-...........", "...........|.|F........F.....F--FFF.-.-...........", "FF-FFFFFFFFF-FF........F.....F......||.||||.......", "||...|.F....|..FF......F..............|....FFFFFFF", ".|||||||||.", ".||...F.F.................................-F.H.|..", "-.....F..FFFFFFFFFF.......................-.|||...", "......F..F.|-......F......................-..F....", "......F....|-.......FFFFFFFFFFFFFFFFFFFFFFFFF...F.", "......F..F.|-................F....F.....||||||||.-", ".........F.--.................F...F....F..........", ".........F.-.......FF.......F.....F...F...........", ".-.....--F.||||||||..F.....F....F----F...........-", "....-----F.-..........F......-...F..F............-", ".--------F.-.......................F...........||-"};
    WalkingHome* pObj = new WalkingHome();
    clock_t start = clock();
    int result = pObj->fewestCrossings(map);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=272072&rd=5868&pm=3444
********************************************************************************
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <queue> 
using namespace std; 
typedef vector<int> VI;  typedef vector<vector<int> > VVI; 
typedef vector<string> VS;  typedef vector<vector<string> > VVS; 
typedef signed long long i64;  typedef unsigned long long u64; 
 
int seen[50][50]; 
 
class WalkingHome { 
public: 
int fewestCrossings(vector <string> a) { 
  int i, j, k, x, y, z, n; 
 
  vector<pair<int, int> > q; 
  for( y = 0; y < a.size(); y++ ) 
  for( x = 0; x < a[0].size(); x++ ) 
    if( a[y][x] == 'S' ) q.push_back(make_pair(x, y)); 
  n = 0; 
  while( !q.empty() ) { 
    vector<pair<int, int> > q2; 
    while( !q.empty() ) { 
      x = q.back().first; y = q.back().second; q.pop_back(); 
      if( seen[y][x] ) continue; 
      seen[y][x] = 1; 
cout << x << ' ' << y << ' ' << n << endl; 
      if( a[y][x] == 'H' ) return n; 
      for( z = x+1; z < a[0].size() && a[y][z] == '|'; z++ ); 
      if( z < a[0].size() && (a[y][z] == '.' || a[y][z] == 'S' || a[y][z] == 'H') ) { 
        if( z == x+1 ) q.push_back(make_pair(z, y)); 
        else q2.push_back(make_pair(z, y)); 
      } 
      for( z = x-1; z >= 0 && a[y][z] == '|'; z-- ); 
      if( z >= 0 && (a[y][z] == '.' || a[y][z] == 'S' || a[y][z] == 'H') ) { 
        if( z == x-1 ) q.push_back(make_pair(z, y)); 
        else q2.push_back(make_pair(z, y)); 
      } 
      for( z = y+1; z < a.size() && a[z][x] == '-'; z++ ); 
      if( z < a.size() && (a[z][x] == '.' || a[z][x] == 'S' || a[z][x] == 'H') ) { 
        if( z == y+1 ) q.push_back(make_pair(x, z)); 
        else q2.push_back(make_pair(x, z)); 
      } 
      for( z = y-1; z >= 0 && a[z][x] == '-'; z-- ); 
      if( z >= 0 && (a[z][x] == '.' || a[z][x] == 'S' || a[z][x] == 'H') ) { 
        if( z == y-1 ) q.push_back(make_pair(x, z)); 
        else q2.push_back(make_pair(x, z)); 
      } 
    } 
    q = q2; 
    n++; 
  } 
  return -1; 
} 
}; 
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/