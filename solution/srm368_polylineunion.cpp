/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8249
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class PolylineUnion {
public:
    int countComponents(vector<string> polylines);
};

int PolylineUnion::countComponents(vector<string> polylines) {
    int ret;
    return ret;
}


int test0() {
    vector<string> polylines = {"0,0-10,10 0,10-10,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> polylines = {"0,0-10,5 5,0-15,5-10,10-5,5"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> polylines = {"1", "3,0-5,5 4,0-4,20"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> polylines = {"10,0-10,1-9,2-9,3-8,4 ", "8,2-9,2-10,3 ", "12,2-11,2-9,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> polylines = {"0,0-10,0-0,0 20,0-8,0-20,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> polylines = {"1,1 2,2 3,3 4,4 3,3-4,4"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> polylines = {"1,1 2,2 3,3 4,4 4,4-2,2"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> polylines = {"10,10-20,10 20,10-15,18 15,18-10,10"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> polylines = {"1", "", "", "3,0-5,5", " ", "4,0-4,20"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> polylines = {"1,1 1,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> polylines = {"1,1 1,1-2,2 13,13 14,12-12,14"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> polylines = {"5217,9544-8399,8309 9818,3695-1565,7399 7551,4035-", "1625,7325 6327,6927-8110,1674 8096,1687-7371,4319 ", "9343,8050-1235,579 1334,2040-6579,7210 5796,1897-6", "375,7487 3251,2091-2519,4774 2487,4148-5786,4084 1", "63,38-9262,8490 2769,6490-6965,7371 5994,864-8177,", "4336 7701,5336-9994,490 5138,9035-8455,6572 681,20", "12-2010,4829 9693,3933-4103,5609 9458,3259-9160,96", "8 6871,9622-3297,8421 6755,9640-7190,1340 6936,382", "7-1582,6446 9227,5715-9163,1575 3525,5443-4749,869", "6 4526,4206-8534,7839 4683,5297-9218,3715 7877,414", "1-8556,8377 5351,5826-4841,2931 9555,2105-6544,203", "0 780,6491-5933,8126 5949,1085-2205,6174 6951,9474", "-6528,8034 9855,1476-3679,6140 3431,5617-6773,3976", " 9339,1307-836,6408 8786,5768-8212,5677 3960,8341-", "8953,4755 3216,5819-5910,5964 7227,9165-6904,8115 ", "649,4177-8638,4510 7372,1582-6732,3396 991,802-719", "9,3505 3711,329-3189,8035 7235,3576-7177,1400 2092", ",2273-1916,6129 7019,5308-8092,7826 583,4246-4473,", "4995 7585,2311-9502,3110 817,6035-3893,6234 205,18", "08-7917,1092 3584,3917-3216,1105 7600,1897-8572,39", "2 9392,9692-4170,487 8335,7489-5000,2261 4740,9997", "-2813,551 9628,2325-2307,2315 8372,444-8360,6201 8", "460,8577-3331,7355 8019,3123-3572,7626 3709,5618-5", "020,2143 3609,4179-6389,269 3018,1944-1668,2467 78", "75,7758-1940,5560 2606,8581-1161,5327 7955,977-902", "5,600 1060,7494-9554,3434 6348,157-616,4205 8063,1", "136-6854,6715 5709,1672-5315,3242 3622,9806-3616,8", "062 3040,1496-7564,6635 9325,5646-77,8725 4694,835", "9-6623,180 1460,5754-5852,7256 4261,8887-6990,6468", " 7086,2324-22,3843 3399,3873-3996,5338 6404,7021-3", "679,8691 1045,9445-9597,1242 2011,1449-5090,752 47", ",6705-9808,2792 3205,2586-3537,6738 4370,8545-1472", ",526 6833,2534-1947,1495 5712,1310-6407,5943 2406,", "3195-9411,85 9759,4531-2639,9007 2678,1769-7059,88", "08 4682,3804-9554,7945 3617,8966-6390,3090 436,906", "6-8589,8942 7558,8348-1599,536 249,3270-736,9085 9", "153,3734-7544,146 68,9990-9344,1261 5425,3826-2838", ",6402 6560,106-7630,2391 4040,1255-150,5099 9276,5", "555-320,8740 3162,7912-3902,2998 5864,3411-2260,57", "17 1064,5016-7145,9804 3969,2212-6085,7568 2392,47", "3-6038,8923 9845,8952-1658,4746 1627,3884-1286,180", "9 6763,902-9439,2685 136,9925-9893,4419 1956,6000-", "3335,2153 9126,3021-2094,1558 8180,4174-5233,9258 ", "7095,1650-4647,2349 9193,6940-1681,6305 5652,819-1", "902,2967 7918,2414-2800,2420 4846,8054-3417,2693 9", "390,6802-5132,6752 7563,9594-901,8306 9562,6822-37", "67,6134 6877,6657-8472,9493 4198,7148-4675,1231 75", ",929-7968,6577 4539,7994-4422,1846 5670,463-7126,7", "840 2721,5059-8345,3337 6459,283-5732,9246 70,7099", "-8184,9499 8966,8026-3755,7735 6086,4243-5173,8430"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> polylines = {"1643,6895-1704,6938 5868,2445-5790,2452 1693,9391-", "1624,9437 1691,4207-1749,4232 7087,9673-7133,9597 ", "3721,9252-3683,9345 121,3420-156,3401 226,8995-182", ",8912 6968,2770-7028,2682 6294,8697-6313,8786 8088", ",5577-8073,5508 9784,3591-9840,3521 4343,5314-4248", ",5297 4566,5614-4491,5556 9034,8009-9057,8092 7003", ",732-7054,665 4581,4833-4526,4883 3530,2167-3568,2", "128 8823,986-8815,976 5657,7725-5627,7658 3038,861", "5-3054,8563 4229,4786-4219,4804 3873,6493-3824,654", "9 7225,9046-7314,8983 3878,5968-3965,5921 8135,585", "8-8099,5768 7924,1498-7924,1410 301,5353-246,5405 ", "3967,1641-4017,1679 7506,5392-7412,5393 1884,9375-", "1840,9370 9499,336-9531,305 6304,7911-6277,7887 48", "48,3045-4784,3135 5623,2352-5524,2348 7705,1008-76", "52,910 3728,2365-3719,2423 7757,4562-7715,4603 501", "5,8101-5101,8113 9516,6137-9547,6075 4047,1909-401", "1,1937 4955,8127-4922,8061 478,2331-508,2425 4418,", "6844-4465,6915 9209,1879-9237,1791 7520,6305-7573,", "6393 4406,1826-4405,1785 7963,6014-7910,6006 9003,", "5393-9073,5468 3520,9044-3428,9142 1374,2113-1416,", "2133 8957,4193-8947,4183 6072,8712-6074,8771 5016,", "6049-5062,6003 8955,5329-8919,5428 2421,7399-2411,", "7406 2792,4147-2773,4231 3190,9914-3221,9966 2027,", "5727-1998,5770 998,8611-1082,8545 8401,8593-8494,8", "677 4642,21-4580,4 5350,9418-5281,9374 6816,1597-6", "879,1682 6823,5654-6891,5582 6646,544-6726,605 735", "0,9249-7354,9180 8938,3120-8853,3213 1712,9316-178", "8,9328 9337,5749-9382,5778 5166,3699-5201,3627 637", "5,3810-6438,3890 9464,2903-9522,2878 4526,9943-446", "1,9943 9191,8754-9222,8704 1873,6721-1815,6719 603", "6,7298-6096,7299 3046,4205-3126,4253 8983,5753-905", "9,5732 9564,8257-9522,8310 1159,2841-1086,2939 386", "2,3155-3810,3246 1908,8863-1999,8791 6662,9883-663", "8,9913 7180,1622-7111,1555 5827,2443-5908,2514 927", "6,4026-9376,4113 2283,9798-2322,9861 3717,7317-372", "8,7342 1550,9925-1537,9880 9398,7607-9336,7542 138", "2,4268-1353,4191 6652,7451-6737,7455 3339,5486-340", "0,5467 6482,5714-6471,5698 234,9177-134,9205 7835,", "7528-7821,7478 2065,3467-2021,3489 2152,4920-2210,", "4999 267,930-169,888 9460,4591-9472,4511 76,7596-2", "8,7637 3309,3920-3233,4015 4175,1197-4197,1235 872", "5,822-8763,890 4289,2623-4229,2541 8623,3716-8720,", "3739 5725,9434-5756,9448 4024,2130-4009,2110 805,7", "522-876,7463 2520,9114-2606,9042 310,7037-376,7063", " 7859,5655-7853,5653 8278,4234-8294,4320 9029,2877", "-8987,2783 3390,4833-3410,4879 6964,1155-7041,1151", " 8677,8645-8664,8663 7758,2777-7755,2739 9814,9833", "-9903,9930 5487,1242-5481,1206 6555,3800-6504,3897", " 7756,769-7658,701 5602,3508-5681,3485 4664,6547-4", "687,6515 5191,5453-5228,5497 9309,6744-9214,6808"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 126;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> polylines = {"5392,4533-5203,4607 3026,3513-2914,3154 5144,7491-", "4815,7502 7942,1783-7579,1680 7493,8883-7280,9206 ", "9776,6727-9570,6344 5986,7593-5609,7580 1940,2186-", "2014,2158 7798,6924-7999,7036 437,505-345,133 7996", ",6511-8035,6229 8294,2711-8065,2891 2672,7628-2529", ",7901 5433,4076-5723,4472 2747,9727-2768,9938 3098", ",789-2948,1060 2692,5-2806,368 6665,6638-6918,6838", " 3654,9022-3285,8623 6966,3471-6680,3508 6998,2700", "-7241,2707 5198,8281-4873,8377 4047,4283-3708,4364", " 6151,2554-5858,2802 3639,3925-3605,3886 1642,3788", "-1403,3551 3888,8112-3652,8267 1582,3280-1929,3679", " 7059,4-7065,360 9364,356-9170,67 5718,4504-5666,4", "539 7059,9075-6697,8964 4078,5929-4328,5892 9717,9", "392-9843,9743 7503,7029-7363,7179 1388,1086-1536,1", "317 1090,8888-1032,9051 322,3300-597,3597 7805,765", "6-7737,7916 7809,1856-8113,1918 7785,8718-7410,873", "4 9189,9701-9155,9332 6730,957-6911,742 3122,7757-", "3293,7697 7723,9425-7425,9228 2725,1765-2424,1551 ", "499,6309-700,6049 8165,4188-8368,4383 3984,8880-37", "94,8810 8580,8870-8297,9110 9827,1033-9964,984 931", "8,7592-9381,7891 6716,5376-6502,5073 8063,9484-794", "7,9459 8871,8511-9105,8815 4460,5942-4346,6142 192", ",7602-362,7246 4326,8495-4472,8888 1721,2105-1909,", "2379 8246,9580-8353,9918 3617,9970-3359,9737 6660,", "6662-7022,6753 6805,6933-6496,7210 7000,5830-7207,", "6023 9123,8498-9361,8178 8071,8564-8299,8855 1748,", "506-1912,894 85,7150-165,7390 7119,7172-6725,6936 ", "3834,138-3844,194 8150,9113-7838,9494 6021,3131-61", "95,3388 2707,6860-3044,6965 6502,8391-6497,8041 88", "97,7971-8534,8018 5121,859-5008,460 8032,1427-8353", ",1186 1565,1650-1780,1341 1841,4363-1512,4582 7494", ",7027-7569,7004 3886,5912-4124,5893 5381,4784-5412", ",4872 2755,2275-2489,2271 3134,8100-3131,8045 9528", ",448-9632,845 3177,928-3420,1273 5291,8909-5209,91", "49 5935,1280-5751,1271 8271,7200-8643,6956 1984,31", "62-2228,3260 5437,4423-5686,4100 3601,7044-3623,70", "89 8571,8162-8613,8239 9090,422-8866,264 9331,6121", "-9012,6300 8480,4466-8249,4778 1665,9612-1332,9425", " 2773,1566-2839,1845 7068,5317-7179,5092 3440,1912", "-3661,1900 73,3412-293,3536 3834,6998-3956,7164 41", "97,6102-3896,5943 1646,6754-1398,6382 6365,4144-62", "06,4515 6789,743-7038,494 6060,602-5742,248 2515,2", "637-2550,2252 7128,1741-7023,1872 9819,1767-9470,1", "371 7869,5793-7469,6179 2546,434-2715,436 5658,518", "2-5631,4860 7004,790-7390,594 1393,4064-1243,4002 ", "7780,8389-7488,8188 130,3641-215,3451 5408,2152-57", "78,2546 9024,3892-9158,3618 5405,2092-5533,2252 83", "53,2844-8347,2738 3635,1969-3733,2293 6033,3141-56", "49,3467 2609,9747-2333,9695 3388,6744-3301,6801 99", "75,8808-9582,8591 568,262-653,569"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 121;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> polylines = {"4288,6010-4592,6452 335,661-55,818 7916,2531-7853,", "1962 7118,1179-7613,1122 5426,1439-5247,1048 3395,", "3718-3066,4507 586,9789-516,9036 9535,2728-8813,30", "08 3975,9074-3283,8959 8176,1410-8290,711 1559,525", "8-2296,5799 785,8644-753,9390 8014,8695-8117,9111 ", "5610,4316-6016,4115 1732,7740-947,6940 2641,4734-2", "921,5151 3807,2989-3399,3347 4399,364-4858,613 562", "2,7239-5703,7434 5882,6196-6022,6163 5969,9068-555", "2,9577 4462,516-4180,38 5011,3054-4718,3669 749,93", "85-1043,8655 3525,4050-4193,3256 2166,37-2750,245 ", "7523,2824-7870,2295 7798,7386-7694,7632 43,8549-27", "8,8932 4743,2118-5449,2902 5173,1311-5862,1804 177", "4,7146-2428,6386 1196,6548-533,6026 7664,9789-8150", ",9489 3691,8920-3753,8508 6305,4292-6940,4767 2841", ",5461-2899,5365 8658,208-8636,607 2598,8069-2780,8", "500 6293,5120-6764,4701 1667,5754-1526,5169 6621,5", "11-6627,1037 510,5802-1234,6173 3174,8717-2648,859", "1 3,5407-497,5047 4848,960-4870,1298 6714,1343-726", "8,1498 2934,2520-2814,1794 9401,8683-8923,8809 531", "7,6658-5013,6635 6453,1577-7105,2110 6984,9221-758", "0,9036 8949,345-8694,3 2469,8019-2099,8652 2432,60", "75-2115,5299 597,4551-888,5075 6203,4394-5463,4708", " 3963,8282-3538,8798 5817,1507-6548,1503 3044,4612", "-2620,4843 566,9760-1347,9472 8858,9287-8403,8741 ", "6440,9738-5918,9586 4288,9682-4036,9313 4517,8038-", "3907,8536 3402,7056-3079,6405 5165,5749-4496,5803 ", "1175,6400-549,7155 514,3315-78,2518 5684,3046-5897", ",2445 1161,1283-420,1604 2853,1122-2095,894 239,75", "65-953,7602 3784,864-4274,165 5563,7118-5519,6318 ", "4438,7611-4815,6885 4869,9020-4244,9741 7465,8490-", "6699,9047 1858,7080-1512,6767 5529,6953-5540,6951 ", "1672,2526-998,2990 4469,2389-5125,2621 9507,3250-9", "740,3331 1940,5546-2186,4861 5644,4475-4880,5169 2", "964,3979-3414,4260 2137,5414-1396,5078 2366,1991-2", "920,2736 5596,9289-6004,9871 1677,8886-1690,9134 3", "214,4464-2833,5036 9,6592-697,7025 2145,4952-2472,", "4364 9,7461-502,6862 2874,8332-2740,8845 322,5890-", "870,5978 6257,4169-6217,3543 4133,1474-4555,1437 5", "939,9641-6735,9445 2680,9457-2498,9252 5645,5898-6", "307,6265 9123,2855-9333,2205 253,7467-22,7232 5543", ",4317-4753,3867 3330,2149-2944,2285 1653,3255-1921", ",2943 281,1556-573,782 1012,5295-924,5185 2271,546", "2-1819,5049 8317,1535-8145,1632 80,2705-833,3157 8", "101,433-7872,139 7115,5314-7635,5278 4863,4476-447", "1,4089 8516,5008-8239,5407 1664,1835-1218,1697 430", "8,8854-4018,9076 8502,907-8412,1480 6531,1915-7157", ",1611 4425,6091-4719,6795 2483,2050-2441,1400 7605", ",7973-7369,7332 2980,1179-3629,1575 4093,2812-3641", ",3590 2744,3684-2943,3521 4591,2247-4291,1771 4162", ",5672-4273,5124 2841,1288-2287,528"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 103;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> polylines = {"440,6-440,8 13,7-14,7-15,7-16,7-17,7-18,7-", "19,7-20,7-21,7-22,7-23,7-24,7-25,7-26,7-27,7-28,7-", "29,7-30,7-31,7-32,7-33,7-34,7-35,7-36,7-37,7-38,7-", "39,7-40,7-41,7-42,7-43,7-44,7-45,7-46,7-47,7-48,7-", "49,7-50,7-51,7-52,7-53,7-54,7-55,7-56,7-57,7-58,7-", "59,7-60,7-61,7-62,7-63,7-64,7-65,7-66,7-67,7-68,7-", "69,7-70,7-71,7-72,7-73,7-74,7-75,7-76,7-77,7-78,7-", "79,7-80,7-81,7-82,7-83,7-84,7-85,7-86,7-87,7-88,7-", "89,7-90,7-91,7-92,7-93,7-94,7-95,7-96,7-97,7-98,7-", "99,7-100,7-101,7-102,7-103,7-104,7-105,7-106,7-107", ",7-108,7-109,7-110,7-111,7-112,7-113,7-114,7-115,7", "-116,7-117,7-118,7-119,7-120,7-121,7-122,7-123,7-1", "24,7-125,7-126,7-127,7-128,7-129,7-130,7-131,7-132", ",7-133,7-134,7-135,7-136,7-137,7-138,7-139,7-140,7", "-141,7-142,7-143,7-144,7-145,7-146,7-147,7-148,7-1", "49,7-150,7-151,7-152,7-153,7-154,7-155,7-156,7-157", ",7-158,7-159,7-160,7-161,7-162,7-163,7-164,7-165,7", "-166,7-167,7-168,7-169,7-170,7-171,7-172,7-173,7-1", "74,7-175,7-176,7-177,7-178,7-179,7-180,7-181,7-182", ",7-183,7-184,7-185,7-186,7-187,7-188,7-189,7-190,7", "-191,7-192,7-193,7-194,7-195,7-196,7-197,7-198,7-1", "99,7-200,7-201,7-202,7-203,7-204,7-205,7-206,7-207", ",7-208,7-209,7-210,7-211,7-212,7-213,7-214,7-215,7", "-216,7-217,7-218,7-219,7-220,7-221,7-222,7-223,7-2", "24,7-225,7-226,7-227,7-228,7-229,7-230,7-231,7-232", ",7-233,7-234,7-235,7-236,7-237,7-238,7-239,7-240,7", "-241,7-242,7-243,7-244,7-245,7-246,7-247,7-248,7-2", "49,7-250,7-251,7-252,7-253,7-254,7-255,7-256,7-257", ",7-258,7-259,7-260,7-261,7-262,7-263,7-264,7-265,7", "-266,7-267,7-268,7-269,7-270,7-271,7-272,7-273,7-2", "74,7-275,7-276,7-277,7-278,7-279,7-280,7-281,7-282", ",7-283,7-284,7-285,7-286,7-287,7-288,7-289,7-290,7", "-291,7-292,7-293,7-294,7-295,7-296,7-297,7-298,7-2", "99,7-300,7-301,7-302,7-303,7-304,7-305,7-306,7-307", ",7-308,7-309,7-310,7-311,7-312,7-313,7-314,7-315,7", "-316,7-317,7-318,7-319,7-320,7-321,7-322,7-323,7-3", "24,7-325,7-326,7-327,7-328,7-329,7-330,7-331,7-332", ",7-333,7-334,7-335,7-336,7-337,7-338,7-339,7-340,7", "-341,7-342,7-343,7-344,7-345,7-346,7-347,7-348,7-3", "49,7-350,7-351,7-352,7-353,7-354,7-355,7-356,7-357", ",7-358,7-359,7-360,7-361,7-362,7-363,7-364,7-365,7", "-366,7-367,7-368,7-369,7-370,7-371,7-372,7-373,7-3", "74,7-375,7-376,7-377,7-378,7-379,7-380,7-381,7-382", ",7-383,7-384,7-385,7-386,7-387,7-388,7-389,7-390,7", "-391,7-392,7-393,7-394,7-395,7-396,7-397,7-398,7-3", "99,7-400,7-401,7-402,7-403,7-404,7-405,7-406,7-407", ",7-408,7-409,7-410,7-411,7-412,7-413,7-414,7-415,7", "-416,7-417,7-418,7-419,7-420,7-421,7-422,7-423,7-4", "24,7-425,7-426,7-427,7-428,7-429,7-430,7-431,7-432", ",7-433,7-434,7-435,7-436,7-437,7-438,7-439,7-441,7"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> polylines = {"440,6-440,7 13,7-14,7-15,7-16,7-17,7-18,7-", "19,7-20,7-21,7-22,7-23,7-24,7-25,7-26,7-27,7-28,7-", "29,7-30,7-31,7-32,7-33,7-34,7-35,7-36,7-37,7-38,7-", "39,7-40,7-41,7-42,7-43,7-44,7-45,7-46,7-47,7-48,7-", "49,7-50,7-51,7-52,7-53,7-54,7-55,7-56,7-57,7-58,7-", "59,7-60,7-61,7-62,7-63,7-64,7-65,7-66,7-67,7-68,7-", "69,7-70,7-71,7-72,7-73,7-74,7-75,7-76,7-77,7-78,7-", "79,7-80,7-81,7-82,7-83,7-84,7-85,7-86,7-87,7-88,7-", "89,7-90,7-91,7-92,7-93,7-94,7-95,7-96,7-97,7-98,7-", "99,7-100,7-101,7-102,7-103,7-104,7-105,7-106,7-107", ",7-108,7-109,7-110,7-111,7-112,7-113,7-114,7-115,7", "-116,7-117,7-118,7-119,7-120,7-121,7-122,7-123,7-1", "24,7-125,7-126,7-127,7-128,7-129,7-130,7-131,7-132", ",7-133,7-134,7-135,7-136,7-137,7-138,7-139,7-140,7", "-141,7-142,7-143,7-144,7-145,7-146,7-147,7-148,7-1", "49,7-150,7-151,7-152,7-153,7-154,7-155,7-156,7-157", ",7-158,7-159,7-160,7-161,7-162,7-163,7-164,7-165,7", "-166,7-167,7-168,7-169,7-170,7-171,7-172,7-173,7-1", "74,7-175,7-176,7-177,7-178,7-179,7-180,7-181,7-182", ",7-183,7-184,7-185,7-186,7-187,7-188,7-189,7-190,7", "-191,7-192,7-193,7-194,7-195,7-196,7-197,7-198,7-1", "99,7-200,7-201,7-202,7-203,7-204,7-205,7-206,7-207", ",7-208,7-209,7-210,7-211,7-212,7-213,7-214,7-215,7", "-216,7-217,7-218,7-219,7-220,7-221,7-222,7-223,7-2", "24,7-225,7-226,7-227,7-228,7-229,7-230,7-231,7-232", ",7-233,7-234,7-235,7-236,7-237,7-238,7-239,7-240,7", "-241,7-242,7-243,7-244,7-245,7-246,7-247,7-248,7-2", "49,7-250,7-251,7-252,7-253,7-254,7-255,7-256,7-257", ",7-258,7-259,7-260,7-261,7-262,7-263,7-264,7-265,7", "-266,7-267,7-268,7-269,7-270,7-271,7-272,7-273,7-2", "74,7-275,7-276,7-277,7-278,7-279,7-280,7-281,7-282", ",7-283,7-284,7-285,7-286,7-287,7-288,7-289,7-290,7", "-291,7-292,7-293,7-294,7-295,7-296,7-297,7-298,7-2", "99,7-300,7-301,7-302,7-303,7-304,7-305,7-306,7-307", ",7-308,7-309,7-310,7-311,7-312,7-313,7-314,7-315,7", "-316,7-317,7-318,7-319,7-320,7-321,7-322,7-323,7-3", "24,7-325,7-326,7-327,7-328,7-329,7-330,7-331,7-332", ",7-333,7-334,7-335,7-336,7-337,7-338,7-339,7-340,7", "-341,7-342,7-343,7-344,7-345,7-346,7-347,7-348,7-3", "49,7-350,7-351,7-352,7-353,7-354,7-355,7-356,7-357", ",7-358,7-359,7-360,7-361,7-362,7-363,7-364,7-365,7", "-366,7-367,7-368,7-369,7-370,7-371,7-372,7-373,7-3", "74,7-375,7-376,7-377,7-378,7-379,7-380,7-381,7-382", ",7-383,7-384,7-385,7-386,7-387,7-388,7-389,7-390,7", "-391,7-392,7-393,7-394,7-395,7-396,7-397,7-398,7-3", "99,7-400,7-401,7-402,7-403,7-404,7-405,7-406,7-407", ",7-408,7-409,7-410,7-411,7-412,7-413,7-414,7-415,7", "-416,7-417,7-418,7-419,7-420,7-421,7-422,7-423,7-4", "24,7-425,7-426,7-427,7-428,7-429,7-430,7-431,7-432", ",7-433,7-434,7-435,7-436,7-437,7-438,7-439,7-441,7"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> polylines = {"440,7-440,8 13,7-14,7-15,7-16,7-17,7-18,7-", "19,7-20,7-21,7-22,7-23,7-24,7-25,7-26,7-27,7-28,7-", "29,7-30,7-31,7-32,7-33,7-34,7-35,7-36,7-37,7-38,7-", "39,7-40,7-41,7-42,7-43,7-44,7-45,7-46,7-47,7-48,7-", "49,7-50,7-51,7-52,7-53,7-54,7-55,7-56,7-57,7-58,7-", "59,7-60,7-61,7-62,7-63,7-64,7-65,7-66,7-67,7-68,7-", "69,7-70,7-71,7-72,7-73,7-74,7-75,7-76,7-77,7-78,7-", "79,7-80,7-81,7-82,7-83,7-84,7-85,7-86,7-87,7-88,7-", "89,7-90,7-91,7-92,7-93,7-94,7-95,7-96,7-97,7-98,7-", "99,7-100,7-101,7-102,7-103,7-104,7-105,7-106,7-107", ",7-108,7-109,7-110,7-111,7-112,7-113,7-114,7-115,7", "-116,7-117,7-118,7-119,7-120,7-121,7-122,7-123,7-1", "24,7-125,7-126,7-127,7-128,7-129,7-130,7-131,7-132", ",7-133,7-134,7-135,7-136,7-137,7-138,7-139,7-140,7", "-141,7-142,7-143,7-144,7-145,7-146,7-147,7-148,7-1", "49,7-150,7-151,7-152,7-153,7-154,7-155,7-156,7-157", ",7-158,7-159,7-160,7-161,7-162,7-163,7-164,7-165,7", "-166,7-167,7-168,7-169,7-170,7-171,7-172,7-173,7-1", "74,7-175,7-176,7-177,7-178,7-179,7-180,7-181,7-182", ",7-183,7-184,7-185,7-186,7-187,7-188,7-189,7-190,7", "-191,7-192,7-193,7-194,7-195,7-196,7-197,7-198,7-1", "99,7-200,7-201,7-202,7-203,7-204,7-205,7-206,7-207", ",7-208,7-209,7-210,7-211,7-212,7-213,7-214,7-215,7", "-216,7-217,7-218,7-219,7-220,7-221,7-222,7-223,7-2", "24,7-225,7-226,7-227,7-228,7-229,7-230,7-231,7-232", ",7-233,7-234,7-235,7-236,7-237,7-238,7-239,7-240,7", "-241,7-242,7-243,7-244,7-245,7-246,7-247,7-248,7-2", "49,7-250,7-251,7-252,7-253,7-254,7-255,7-256,7-257", ",7-258,7-259,7-260,7-261,7-262,7-263,7-264,7-265,7", "-266,7-267,7-268,7-269,7-270,7-271,7-272,7-273,7-2", "74,7-275,7-276,7-277,7-278,7-279,7-280,7-281,7-282", ",7-283,7-284,7-285,7-286,7-287,7-288,7-289,7-290,7", "-291,7-292,7-293,7-294,7-295,7-296,7-297,7-298,7-2", "99,7-300,7-301,7-302,7-303,7-304,7-305,7-306,7-307", ",7-308,7-309,7-310,7-311,7-312,7-313,7-314,7-315,7", "-316,7-317,7-318,7-319,7-320,7-321,7-322,7-323,7-3", "24,7-325,7-326,7-327,7-328,7-329,7-330,7-331,7-332", ",7-333,7-334,7-335,7-336,7-337,7-338,7-339,7-340,7", "-341,7-342,7-343,7-344,7-345,7-346,7-347,7-348,7-3", "49,7-350,7-351,7-352,7-353,7-354,7-355,7-356,7-357", ",7-358,7-359,7-360,7-361,7-362,7-363,7-364,7-365,7", "-366,7-367,7-368,7-369,7-370,7-371,7-372,7-373,7-3", "74,7-375,7-376,7-377,7-378,7-379,7-380,7-381,7-382", ",7-383,7-384,7-385,7-386,7-387,7-388,7-389,7-390,7", "-391,7-392,7-393,7-394,7-395,7-396,7-397,7-398,7-3", "99,7-400,7-401,7-402,7-403,7-404,7-405,7-406,7-407", ",7-408,7-409,7-410,7-411,7-412,7-413,7-414,7-415,7", "-416,7-417,7-418,7-419,7-420,7-421,7-422,7-423,7-4", "24,7-425,7-426,7-427,7-428,7-429,7-430,7-431,7-432", ",7-433,7-434,7-435,7-436,7-437,7-438,7-439,7-441,7"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> polylines = {"440,7 13,7-14,7-15,7-16,7-17,7-18,7-", "19,7-20,7-21,7-22,7-23,7-24,7-25,7-26,7-27,7-28,7-", "29,7-30,7-31,7-32,7-33,7-34,7-35,7-36,7-37,7-38,7-", "39,7-40,7-41,7-42,7-43,7-44,7-45,7-46,7-47,7-48,7-", "49,7-50,7-51,7-52,7-53,7-54,7-55,7-56,7-57,7-58,7-", "59,7-60,7-61,7-62,7-63,7-64,7-65,7-66,7-67,7-68,7-", "69,7-70,7-71,7-72,7-73,7-74,7-75,7-76,7-77,7-78,7-", "79,7-80,7-81,7-82,7-83,7-84,7-85,7-86,7-87,7-88,7-", "89,7-90,7-91,7-92,7-93,7-94,7-95,7-96,7-97,7-98,7-", "99,7-100,7-101,7-102,7-103,7-104,7-105,7-106,7-107", ",7-108,7-109,7-110,7-111,7-112,7-113,7-114,7-115,7", "-116,7-117,7-118,7-119,7-120,7-121,7-122,7-123,7-1", "24,7-125,7-126,7-127,7-128,7-129,7-130,7-131,7-132", ",7-133,7-134,7-135,7-136,7-137,7-138,7-139,7-140,7", "-141,7-142,7-143,7-144,7-145,7-146,7-147,7-148,7-1", "49,7-150,7-151,7-152,7-153,7-154,7-155,7-156,7-157", ",7-158,7-159,7-160,7-161,7-162,7-163,7-164,7-165,7", "-166,7-167,7-168,7-169,7-170,7-171,7-172,7-173,7-1", "74,7-175,7-176,7-177,7-178,7-179,7-180,7-181,7-182", ",7-183,7-184,7-185,7-186,7-187,7-188,7-189,7-190,7", "-191,7-192,7-193,7-194,7-195,7-196,7-197,7-198,7-1", "99,7-200,7-201,7-202,7-203,7-204,7-205,7-206,7-207", ",7-208,7-209,7-210,7-211,7-212,7-213,7-214,7-215,7", "-216,7-217,7-218,7-219,7-220,7-221,7-222,7-223,7-2", "24,7-225,7-226,7-227,7-228,7-229,7-230,7-231,7-232", ",7-233,7-234,7-235,7-236,7-237,7-238,7-239,7-240,7", "-241,7-242,7-243,7-244,7-245,7-246,7-247,7-248,7-2", "49,7-250,7-251,7-252,7-253,7-254,7-255,7-256,7-257", ",7-258,7-259,7-260,7-261,7-262,7-263,7-264,7-265,7", "-266,7-267,7-268,7-269,7-270,7-271,7-272,7-273,7-2", "74,7-275,7-276,7-277,7-278,7-279,7-280,7-281,7-282", ",7-283,7-284,7-285,7-286,7-287,7-288,7-289,7-290,7", "-291,7-292,7-293,7-294,7-295,7-296,7-297,7-298,7-2", "99,7-300,7-301,7-302,7-303,7-304,7-305,7-306,7-307", ",7-308,7-309,7-310,7-311,7-312,7-313,7-314,7-315,7", "-316,7-317,7-318,7-319,7-320,7-321,7-322,7-323,7-3", "24,7-325,7-326,7-327,7-328,7-329,7-330,7-331,7-332", ",7-333,7-334,7-335,7-336,7-337,7-338,7-339,7-340,7", "-341,7-342,7-343,7-344,7-345,7-346,7-347,7-348,7-3", "49,7-350,7-351,7-352,7-353,7-354,7-355,7-356,7-357", ",7-358,7-359,7-360,7-361,7-362,7-363,7-364,7-365,7", "-366,7-367,7-368,7-369,7-370,7-371,7-372,7-373,7-3", "74,7-375,7-376,7-377,7-378,7-379,7-380,7-381,7-382", ",7-383,7-384,7-385,7-386,7-387,7-388,7-389,7-390,7", "-391,7-392,7-393,7-394,7-395,7-396,7-397,7-398,7-3", "99,7-400,7-401,7-402,7-403,7-404,7-405,7-406,7-407", ",7-408,7-409,7-410,7-411,7-412,7-413,7-414,7-415,7", "-416,7-417,7-418,7-419,7-420,7-421,7-422,7-423,7-4", "24,7-425,7-426,7-427,7-428,7-429,7-430,7-431,7-432", ",7-433,7-434,7-435,7-436,7-437,7-438,7-439,7-441,7"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> polylines = {"440,10-440,8 13,7-14,7-15,7-16,7-17,7-18,7-", "19,7-20,7-21,7-22,7-23,7-24,7-25,7-26,7-27,7-28,7-", "29,7-30,7-31,7-32,7-33,7-34,7-35,7-36,7-37,7-38,7-", "39,7-40,7-41,7-42,7-43,7-44,7-45,7-46,7-47,7-48,7-", "49,7-50,7-51,7-52,7-53,7-54,7-55,7-56,7-57,7-58,7-", "59,7-60,7-61,7-62,7-63,7-64,7-65,7-66,7-67,7-68,7-", "69,7-70,7-71,7-72,7-73,7-74,7-75,7-76,7-77,7-78,7-", "79,7-80,7-81,7-82,7-83,7-84,7-85,7-86,7-87,7-88,7-", "89,7-90,7-91,7-92,7-93,7-94,7-95,7-96,7-97,7-98,7-", "99,7-100,7-101,7-102,7-103,7-104,7-105,7-106,7-107", ",7-108,7-109,7-110,7-111,7-112,7-113,7-114,7-115,7", "-116,7-117,7-118,7-119,7-120,7-121,7-122,7-123,7-1", "24,7-125,7-126,7-127,7-128,7-129,7-130,7-131,7-132", ",7-133,7-134,7-135,7-136,7-137,7-138,7-139,7-140,7", "-141,7-142,7-143,7-144,7-145,7-146,7-147,7-148,7-1", "49,7-150,7-151,7-152,7-153,7-154,7-155,7-156,7-157", ",7-158,7-159,7-160,7-161,7-162,7-163,7-164,7-165,7", "-166,7-167,7-168,7-169,7-170,7-171,7-172,7-173,7-1", "74,7-175,7-176,7-177,7-178,7-179,7-180,7-181,7-182", ",7-183,7-184,7-185,7-186,7-187,7-188,7-189,7-190,7", "-191,7-192,7-193,7-194,7-195,7-196,7-197,7-198,7-1", "99,7-200,7-201,7-202,7-203,7-204,7-205,7-206,7-207", ",7-208,7-209,7-210,7-211,7-212,7-213,7-214,7-215,7", "-216,7-217,7-218,7-219,7-220,7-221,7-222,7-223,7-2", "24,7-225,7-226,7-227,7-228,7-229,7-230,7-231,7-232", ",7-233,7-234,7-235,7-236,7-237,7-238,7-239,7-240,7", "-241,7-242,7-243,7-244,7-245,7-246,7-247,7-248,7-2", "49,7-250,7-251,7-252,7-253,7-254,7-255,7-256,7-257", ",7-258,7-259,7-260,7-261,7-262,7-263,7-264,7-265,7", "-266,7-267,7-268,7-269,7-270,7-271,7-272,7-273,7-2", "74,7-275,7-276,7-277,7-278,7-279,7-280,7-281,7-282", ",7-283,7-284,7-285,7-286,7-287,7-288,7-289,7-290,7", "-291,7-292,7-293,7-294,7-295,7-296,7-297,7-298,7-2", "99,7-300,7-301,7-302,7-303,7-304,7-305,7-306,7-307", ",7-308,7-309,7-310,7-311,7-312,7-313,7-314,7-315,7", "-316,7-317,7-318,7-319,7-320,7-321,7-322,7-323,7-3", "24,7-325,7-326,7-327,7-328,7-329,7-330,7-331,7-332", ",7-333,7-334,7-335,7-336,7-337,7-338,7-339,7-340,7", "-341,7-342,7-343,7-344,7-345,7-346,7-347,7-348,7-3", "49,7-350,7-351,7-352,7-353,7-354,7-355,7-356,7-357", ",7-358,7-359,7-360,7-361,7-362,7-363,7-364,7-365,7", "-366,7-367,7-368,7-369,7-370,7-371,7-372,7-373,7-3", "74,7-375,7-376,7-377,7-378,7-379,7-380,7-381,7-382", ",7-383,7-384,7-385,7-386,7-387,7-388,7-389,7-390,7", "-391,7-392,7-393,7-394,7-395,7-396,7-397,7-398,7-3", "99,7-400,7-401,7-402,7-403,7-404,7-405,7-406,7-407", ",7-408,7-409,7-410,7-411,7-412,7-413,7-414,7-415,7", "-416,7-417,7-418,7-419,7-420,7-421,7-422,7-423,7-4", "24,7-425,7-426,7-427,7-428,7-429,7-430,7-431,7-432", ",7-433,7-434,7-435,7-436,7-437,7-438,7-439,7-441,7"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> polylines = {"0,0-0,0 0,0-0,0 0,4-0,4 0,4-1,5 0,8-0,8 0,8-2,10 0", ",12-0,12 0,12-3,15 0,16-0,16 1,17-0,16 0,20-0,20 1", ",21-1,21 0,24-0,24 1,25-2,26 0,28-0,28 1,29-3,31 0", ",32-0,32 2,34-0,32 0,36-0,36 2,38-1,37 0,40-0,40 2", ",42-2,42 0,44-0,44 2,46-3,47 0,48-0,48 3,51-0,48 0", ",52-0,52 3,55-1,53 0,56-0,56 3,59-2,58 0,60-0,60 3", ",63-3,63 4,0-5,1 4,0-4,0 4,4-5,5 4,4-5,5 4,8-5,9 4", ",8-6,10 4,12-5,13 4,12-7,15 4,16-5,17 5,17-4,16 4,", "20-5,21 5,21-5,21 4,24-5,25 5,25-6,26 4,28-5,29 5,", "29-7,31 4,32-5,33 6,34-4,32 4,36-5,37 6,38-5,37 4,", "40-5,41 6,42-6,42 4,44-5,45 6,46-7,47 4,48-5,49 7,", "51-4,48 4,52-5,53 7,55-5,53 4,56-5,57 7,59-6,58 4,", "60-5,61 7,63-7,63 8,0-10,2 8,0-8,0 8,4-10,6 8,4-9,", "5 8,8-10,10 8,8-10,10 8,12-10,14 8,12-11,15 8,16-1", "0,18 9,17-8,16 8,20-10,22 9,21-9,21 8,24-10,26 9,2", "5-10,26 8,28-10,30 9,29-11,31 8,32-10,34 10,34-8,3", "2 8,36-10,38 10,38-9,37 8,40-10,42 10,42-10,42 8,4", "4-10,46 10,46-11,47 8,48-10,50 11,51-8,48 8,52-10,", "54 11,55-9,53 8,56-10,58 11,59-10,58 8,60-10,62 11", ",63-11,63 12,0-15,3 12,0-12,0 12,4-15,7 12,4-13,5 ", "12,8-15,11 12,8-14,10 12,12-15,15 12,12-15,15 12,1", "6-15,19 13,17-12,16 12,20-15,23 13,21-13,21 12,24-", "15,27 13,25-14,26 12,28-15,31 13,29-15,31 12,32-15", ",35 14,34-12,32 12,36-15,39 14,38-13,37 12,40-15,4", "3 14,42-14,42 12,44-15,47 14,46-15,47 12,48-15,51 ", "15,51-12,48 12,52-15,55 15,55-13,53 12,56-15,59 15", ",59-14,58 12,60-15,63 15,63-15,63"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> polylines = {"17,1-16,0 16,0-16,0 17,5-16,4 16,4-17,5 17,9-16,8 ", "16,8-18,10 17,13-16,12 16,12-19,15 17,17-16,16 17,", "17-16,16 17,21-16,20 17,21-17,21 17,25-16,24 17,25", "-18,26 17,29-16,28 17,29-19,31 17,33-16,32 18,34-1", "6,32 17,37-16,36 18,38-17,37 17,41-16,40 18,42-18,", "42 17,45-16,44 18,46-19,47 17,49-16,48 19,51-16,48", " 17,53-16,52 19,55-17,53 17,57-16,56 19,59-18,58 1", "7,61-16,60 19,63-19,63 21,1-21,1 20,0-20,0 21,5-21", ",5 20,4-21,5 21,9-21,9 20,8-22,10 21,13-21,13 20,1", "2-23,15 21,17-21,17 21,17-20,16 21,21-21,21 21,21-", "21,21 21,25-21,25 21,25-22,26 21,29-21,29 21,29-23", ",31 21,33-21,33 22,34-20,32 21,37-21,37 22,38-21,3", "7 21,41-21,41 22,42-22,42 21,45-21,45 22,46-23,47 ", "21,49-21,49 23,51-20,48 21,53-21,53 23,55-21,53 21", ",57-21,57 23,59-22,58 21,61-21,61 23,63-23,63 25,1", "-26,2 24,0-24,0 25,5-26,6 24,4-25,5 25,9-26,10 24,", "8-26,10 25,13-26,14 24,12-27,15 25,17-26,18 25,17-", "24,16 25,21-26,22 25,21-25,21 25,25-26,26 25,25-26", ",26 25,29-26,30 25,29-27,31 25,33-26,34 26,34-24,3", "2 25,37-26,38 26,38-25,37 25,41-26,42 26,42-26,42 ", "25,45-26,46 26,46-27,47 25,49-26,50 27,51-24,48 25", ",53-26,54 27,55-25,53 25,57-26,58 27,59-26,58 25,6", "1-26,62 27,63-27,63 29,1-31,3 28,0-28,0 29,5-31,7 ", "28,4-29,5 29,9-31,11 28,8-30,10 29,13-31,15 28,12-", "31,15 29,17-31,19 29,17-28,16 29,21-31,23 29,21-29", ",21 29,25-31,27 29,25-30,26 29,29-31,31 29,29-31,3", "1 29,33-31,35 30,34-28,32 29,37-31,39 30,38-29,37 ", "29,41-31,43 30,42-30,42 29,45-31,47 30,46-31,47 29", ",49-31,51 31,51-28,48 29,53-31,55 31,55-29,53 29,5", "7-31,59 31,59-30,58 29,61-31,63 31,63-31,63"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> polylines = {"34,2-32,0 32,0-32,0 34,6-32,4 32,4-33,5 34,10-32,8", " 32,8-34,10 34,14-32,12 32,12-35,15 34,18-32,16 33", ",17-32,16 34,22-32,20 33,21-33,21 34,26-32,24 33,2", "5-34,26 34,30-32,28 33,29-35,31 34,34-32,32 34,34-", "32,32 34,38-32,36 34,38-33,37 34,42-32,40 34,42-34", ",42 34,46-32,44 34,46-35,47 34,50-32,48 35,51-32,4", "8 34,54-32,52 35,55-33,53 34,58-32,56 35,59-34,58 ", "34,62-32,60 35,63-35,63 38,2-37,1 36,0-36,0 38,6-3", "7,5 36,4-37,5 38,10-37,9 36,8-38,10 38,14-37,13 36", ",12-39,15 38,18-37,17 37,17-36,16 38,22-37,21 37,2", "1-37,21 38,26-37,25 37,25-38,26 38,30-37,29 37,29-", "39,31 38,34-37,33 38,34-36,32 38,38-37,37 38,38-37", ",37 38,42-37,41 38,42-38,42 38,46-37,45 38,46-39,4", "7 38,50-37,49 39,51-36,48 38,54-37,53 39,55-37,53 ", "38,58-37,57 39,59-38,58 38,62-37,61 39,63-39,63 42", ",2-42,2 40,0-40,0 42,6-42,6 40,4-41,5 42,10-42,10 ", "40,8-42,10 42,14-42,14 40,12-43,15 42,18-42,18 41,", "17-40,16 42,22-42,22 41,21-41,21 42,26-42,26 41,25", "-42,26 42,30-42,30 41,29-43,31 42,34-42,34 42,34-4", "0,32 42,38-42,38 42,38-41,37 42,42-42,42 42,42-42,", "42 42,46-42,46 42,46-43,47 42,50-42,50 43,51-40,48", " 42,54-42,54 43,55-41,53 42,58-42,58 43,59-42,58 4", "2,62-42,62 43,63-43,63 46,2-47,3 44,0-44,0 46,6-47", ",7 44,4-45,5 46,10-47,11 44,8-46,10 46,14-47,15 44", ",12-47,15 46,18-47,19 45,17-44,16 46,22-47,23 45,2", "1-45,21 46,26-47,27 45,25-46,26 46,30-47,31 45,29-", "47,31 46,34-47,35 46,34-44,32 46,38-47,39 46,38-45", ",37 46,42-47,43 46,42-46,42 46,46-47,47 46,46-47,4", "7 46,50-47,51 47,51-44,48 46,54-47,55 47,55-45,53 ", "46,58-47,59 47,59-46,58 46,62-47,63 47,63-47,63"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> polylines = {"51,3-48,0 48,0-48,0 51,7-48,4 48,4-49,5 51,11-48,8", " 48,8-50,10 51,15-48,12 48,12-51,15 51,19-48,16 49", ",17-48,16 51,23-48,20 49,21-49,21 51,27-48,24 49,2", "5-50,26 51,31-48,28 49,29-51,31 51,35-48,32 50,34-", "48,32 51,39-48,36 50,38-49,37 51,43-48,40 50,42-50", ",42 51,47-48,44 50,46-51,47 51,51-48,48 51,51-48,4", "8 51,55-48,52 51,55-49,53 51,59-48,56 51,59-50,58 ", "51,63-48,60 51,63-51,63 55,3-53,1 52,0-52,0 55,7-5", "3,5 52,4-53,5 55,11-53,9 52,8-54,10 55,15-53,13 52", ",12-55,15 55,19-53,17 53,17-52,16 55,23-53,21 53,2", "1-53,21 55,27-53,25 53,25-54,26 55,31-53,29 53,29-", "55,31 55,35-53,33 54,34-52,32 55,39-53,37 54,38-53", ",37 55,43-53,41 54,42-54,42 55,47-53,45 54,46-55,4", "7 55,51-53,49 55,51-52,48 55,55-53,53 55,55-53,53 ", "55,59-53,57 55,59-54,58 55,63-53,61 55,63-55,63 59", ",3-58,2 56,0-56,0 59,7-58,6 56,4-57,5 59,11-58,10 ", "56,8-58,10 59,15-58,14 56,12-59,15 59,19-58,18 57,", "17-56,16 59,23-58,22 57,21-57,21 59,27-58,26 57,25", "-58,26 59,31-58,30 57,29-59,31 59,35-58,34 58,34-5", "6,32 59,39-58,38 58,38-57,37 59,43-58,42 58,42-58,", "42 59,47-58,46 58,46-59,47 59,51-58,50 59,51-56,48", " 59,55-58,54 59,55-57,53 59,59-58,58 59,59-58,58 5", "9,63-58,62 59,63-59,63 63,3-63,3 60,0-60,0 63,7-63", ",7 60,4-61,5 63,11-63,11 60,8-62,10 63,15-63,15 60", ",12-63,15 63,19-63,19 61,17-60,16 63,23-63,23 61,2", "1-61,21 63,27-63,27 61,25-62,26 63,31-63,31 61,29-", "63,31 63,35-63,35 62,34-60,32 63,39-63,39 62,38-61", ",37 63,43-63,43 62,42-62,42 63,47-63,47 62,46-63,4", "7 63,51-63,51 63,51-60,48 63,55-63,55 63,55-61,53 ", "63,59-63,59 63,59-62,58 63,63-63,63 63,63-63,63"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> polylines = {"0,3-0,3 0,3-0,3 0,7-0,7 0,7-1,6 0,11-0,11 0,11-2,9", " 0,15-0,15 0,15-3,12 0,19-0,19 1,18-0,19 0,23-0,23", " 1,22-1,22 0,27-0,27 1,26-2,25 0,31-0,31 1,30-3,28", " 0,35-0,35 2,33-0,35 0,39-0,39 2,37-1,38 0,43-0,43", " 2,41-2,41 0,47-0,47 2,45-3,44 0,51-0,51 3,48-0,51", " 0,55-0,55 3,52-1,54 0,59-0,59 3,56-2,57 0,63-0,63", " 3,60-3,60 4,3-5,2 4,3-4,3 4,7-5,6 4,7-5,6 4,11-5,", "10 4,11-6,9 4,15-5,14 4,15-7,12 4,19-5,18 5,18-4,1", "9 4,23-5,22 5,22-5,22 4,27-5,26 5,26-6,25 4,31-5,3", "0 5,30-7,28 4,35-5,34 6,33-4,35 4,39-5,38 6,37-5,3", "8 4,43-5,42 6,41-6,41 4,47-5,46 6,45-7,44 4,51-5,5", "0 7,48-4,51 4,55-5,54 7,52-5,54 4,59-5,58 7,56-6,5", "7 4,63-5,62 7,60-7,60 8,3-10,1 8,3-8,3 8,7-10,5 8,", "7-9,6 8,11-10,9 8,11-10,9 8,15-10,13 8,15-11,12 8,", "19-10,17 9,18-8,19 8,23-10,21 9,22-9,22 8,27-10,25", " 9,26-10,25 8,31-10,29 9,30-11,28 8,35-10,33 10,33", "-8,35 8,39-10,37 10,37-9,38 8,43-10,41 10,41-10,41", " 8,47-10,45 10,45-11,44 8,51-10,49 11,48-8,51 8,55", "-10,53 11,52-9,54 8,59-10,57 11,56-10,57 8,63-10,6", "1 11,60-11,60 12,3-15,0 12,3-12,3 12,7-15,4 12,7-1", "3,6 12,11-15,8 12,11-14,9 12,15-15,12 12,15-15,12 ", "12,19-15,16 13,18-12,19 12,23-15,20 13,22-13,22 12", ",27-15,24 13,26-14,25 12,31-15,28 13,30-15,28 12,3", "5-15,32 14,33-12,35 12,39-15,36 14,37-13,38 12,43-", "15,40 14,41-14,41 12,47-15,44 14,45-15,44 12,51-15", ",48 15,48-12,51 12,55-15,52 15,52-13,54 12,59-15,5", "6 15,56-14,57 12,63-15,60 15,60-15,60"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> polylines = {"17,2-16,3 16,3-16,3 17,6-16,7 16,7-17,6 17,10-16,1", "1 16,11-18,9 17,14-16,15 16,15-19,12 17,18-16,19 1", "7,18-16,19 17,22-16,23 17,22-17,22 17,26-16,27 17,", "26-18,25 17,30-16,31 17,30-19,28 17,34-16,35 18,33", "-16,35 17,38-16,39 18,37-17,38 17,42-16,43 18,41-1", "8,41 17,46-16,47 18,45-19,44 17,50-16,51 19,48-16,", "51 17,54-16,55 19,52-17,54 17,58-16,59 19,56-18,57", " 17,62-16,63 19,60-19,60 21,2-21,2 20,3-20,3 21,6-", "21,6 20,7-21,6 21,10-21,10 20,11-22,9 21,14-21,14 ", "20,15-23,12 21,18-21,18 21,18-20,19 21,22-21,22 21", ",22-21,22 21,26-21,26 21,26-22,25 21,30-21,30 21,3", "0-23,28 21,34-21,34 22,33-20,35 21,38-21,38 22,37-", "21,38 21,42-21,42 22,41-22,41 21,46-21,46 22,45-23", ",44 21,50-21,50 23,48-20,51 21,54-21,54 23,52-21,5", "4 21,58-21,58 23,56-22,57 21,62-21,62 23,60-23,60 ", "25,2-26,1 24,3-24,3 25,6-26,5 24,7-25,6 25,10-26,9", " 24,11-26,9 25,14-26,13 24,15-27,12 25,18-26,17 25", ",18-24,19 25,22-26,21 25,22-25,22 25,26-26,25 25,2", "6-26,25 25,30-26,29 25,30-27,28 25,34-26,33 26,33-", "24,35 25,38-26,37 26,37-25,38 25,42-26,41 26,41-26", ",41 25,46-26,45 26,45-27,44 25,50-26,49 27,48-24,5", "1 25,54-26,53 27,52-25,54 25,58-26,57 27,56-26,57 ", "25,62-26,61 27,60-27,60 29,2-31,0 28,3-28,3 29,6-3", "1,4 28,7-29,6 29,10-31,8 28,11-30,9 29,14-31,12 28", ",15-31,12 29,18-31,16 29,18-28,19 29,22-31,20 29,2", "2-29,22 29,26-31,24 29,26-30,25 29,30-31,28 29,30-", "31,28 29,34-31,32 30,33-28,35 29,38-31,36 30,37-29", ",38 29,42-31,40 30,41-30,41 29,46-31,44 30,45-31,4", "4 29,50-31,48 31,48-28,51 29,54-31,52 31,52-29,54 ", "29,58-31,56 31,56-30,57 29,62-31,60 31,60-31,60"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> polylines = {"34,1-32,3 32,3-32,3 34,5-32,7 32,7-33,6 34,9-32,11", " 32,11-34,9 34,13-32,15 32,15-35,12 34,17-32,19 33", ",18-32,19 34,21-32,23 33,22-33,22 34,25-32,27 33,2", "6-34,25 34,29-32,31 33,30-35,28 34,33-32,35 34,33-", "32,35 34,37-32,39 34,37-33,38 34,41-32,43 34,41-34", ",41 34,45-32,47 34,45-35,44 34,49-32,51 35,48-32,5", "1 34,53-32,55 35,52-33,54 34,57-32,59 35,56-34,57 ", "34,61-32,63 35,60-35,60 38,1-37,2 36,3-36,3 38,5-3", "7,6 36,7-37,6 38,9-37,10 36,11-38,9 38,13-37,14 36", ",15-39,12 38,17-37,18 37,18-36,19 38,21-37,22 37,2", "2-37,22 38,25-37,26 37,26-38,25 38,29-37,30 37,30-", "39,28 38,33-37,34 38,33-36,35 38,37-37,38 38,37-37", ",38 38,41-37,42 38,41-38,41 38,45-37,46 38,45-39,4", "4 38,49-37,50 39,48-36,51 38,53-37,54 39,52-37,54 ", "38,57-37,58 39,56-38,57 38,61-37,62 39,60-39,60 42", ",1-42,1 40,3-40,3 42,5-42,5 40,7-41,6 42,9-42,9 40", ",11-42,9 42,13-42,13 40,15-43,12 42,17-42,17 41,18", "-40,19 42,21-42,21 41,22-41,22 42,25-42,25 41,26-4", "2,25 42,29-42,29 41,30-43,28 42,33-42,33 42,33-40,", "35 42,37-42,37 42,37-41,38 42,41-42,41 42,41-42,41", " 42,45-42,45 42,45-43,44 42,49-42,49 43,48-40,51 4", "2,53-42,53 43,52-41,54 42,57-42,57 43,56-42,57 42,", "61-42,61 43,60-43,60 46,1-47,0 44,3-44,3 46,5-47,4", " 44,7-45,6 46,9-47,8 44,11-46,9 46,13-47,12 44,15-", "47,12 46,17-47,16 45,18-44,19 46,21-47,20 45,22-45", ",22 46,25-47,24 45,26-46,25 46,29-47,28 45,30-47,2", "8 46,33-47,32 46,33-44,35 46,37-47,36 46,37-45,38 ", "46,41-47,40 46,41-46,41 46,45-47,44 46,45-47,44 46", ",49-47,48 47,48-44,51 46,53-47,52 47,52-45,54 46,5", "7-47,56 47,56-46,57 46,61-47,60 47,60-47,60"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> polylines = {"51,0-48,3 48,3-48,3 51,4-48,7 48,7-49,6 51,8-48,11", " 48,11-50,9 51,12-48,15 48,15-51,12 51,16-48,19 49", ",18-48,19 51,20-48,23 49,22-49,22 51,24-48,27 49,2", "6-50,25 51,28-48,31 49,30-51,28 51,32-48,35 50,33-", "48,35 51,36-48,39 50,37-49,38 51,40-48,43 50,41-50", ",41 51,44-48,47 50,45-51,44 51,48-48,51 51,48-48,5", "1 51,52-48,55 51,52-49,54 51,56-48,59 51,56-50,57 ", "51,60-48,63 51,60-51,60 55,0-53,2 52,3-52,3 55,4-5", "3,6 52,7-53,6 55,8-53,10 52,11-54,9 55,12-53,14 52", ",15-55,12 55,16-53,18 53,18-52,19 55,20-53,22 53,2", "2-53,22 55,24-53,26 53,26-54,25 55,28-53,30 53,30-", "55,28 55,32-53,34 54,33-52,35 55,36-53,38 54,37-53", ",38 55,40-53,42 54,41-54,41 55,44-53,46 54,45-55,4", "4 55,48-53,50 55,48-52,51 55,52-53,54 55,52-53,54 ", "55,56-53,58 55,56-54,57 55,60-53,62 55,60-55,60 59", ",0-58,1 56,3-56,3 59,4-58,5 56,7-57,6 59,8-58,9 56", ",11-58,9 59,12-58,13 56,15-59,12 59,16-58,17 57,18", "-56,19 59,20-58,21 57,22-57,22 59,24-58,25 57,26-5", "8,25 59,28-58,29 57,30-59,28 59,32-58,33 58,33-56,", "35 59,36-58,37 58,37-57,38 59,40-58,41 58,41-58,41", " 59,44-58,45 58,45-59,44 59,48-58,49 59,48-56,51 5", "9,52-58,53 59,52-57,54 59,56-58,57 59,56-58,57 59,", "60-58,61 59,60-59,60 63,0-63,0 60,3-60,3 63,4-63,4", " 60,7-61,6 63,8-63,8 60,11-62,9 63,12-63,12 60,15-", "63,12 63,16-63,16 61,18-60,19 63,20-63,20 61,22-61", ",22 63,24-63,24 61,26-62,25 63,28-63,28 61,30-63,2", "8 63,32-63,32 62,33-60,35 63,36-63,36 62,37-61,38 ", "63,40-63,40 62,41-62,41 63,44-63,44 62,45-63,44 63", ",48-63,48 63,48-60,51 63,52-63,52 63,52-61,54 63,5", "6-63,56 63,56-62,57 63,60-63,60 63,60-63,60"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> polylines = {"0,0-0,0 0,0-0,0 0,4-0,4 0,4-0,5 0,8-0,8 0,8-1,8 0,", "12-0,12 0,12-1,13 0,16-0,16 0,17-0,16 0,20-0,20 0,", "21-0,21 0,24-0,24 0,25-1,24 0,28-0,28 0,29-1,29 0,", "32-0,32 1,32-0,32 0,36-0,36 1,36-0,37 0,40-0,40 1,", "40-1,40 0,44-0,44 1,44-1,45 0,48-0,48 1,49-0,48 0,", "52-0,52 1,53-0,53 0,56-0,56 1,57-1,56 0,60-0,60 1,", "61-1,61 4,0-4,1 4,0-4,0 4,4-4,5 4,4-4,5 4,8-4,9 4,", "8-5,8 4,12-4,13 4,12-5,13 4,16-4,17 4,17-4,16 4,20", "-4,21 4,21-4,21 4,24-4,25 4,25-5,24 4,28-4,29 4,29", "-5,29 4,32-4,33 5,32-4,32 4,36-4,37 5,36-4,37 4,40", "-4,41 5,40-5,40 4,44-4,45 5,44-5,45 4,48-4,49 5,49", "-4,48 4,52-4,53 5,53-4,53 4,56-4,57 5,57-5,56 4,60", "-4,61 5,61-5,61 8,0-9,0 8,0-8,0 8,4-9,4 8,4-8,5 8,", "8-9,8 8,8-9,8 8,12-9,12 8,12-9,13 8,16-9,16 8,17-8", ",16 8,20-9,20 8,21-8,21 8,24-9,24 8,25-9,24 8,28-9", ",28 8,29-9,29 8,32-9,32 9,32-8,32 8,36-9,36 9,36-8", ",37 8,40-9,40 9,40-9,40 8,44-9,44 9,44-9,45 8,48-9", ",48 9,49-8,48 8,52-9,52 9,53-8,53 8,56-9,56 9,57-9", ",56 8,60-9,60 9,61-9,61 12,0-13,1 12,0-12,0 12,4-1", "3,5 12,4-12,5 12,8-13,9 12,8-13,8 12,12-13,13 12,1", "2-13,13 12,16-13,17 12,17-12,16 12,20-13,21 12,21-", "12,21 12,24-13,25 12,25-13,24 12,28-13,29 12,29-13", ",29 12,32-13,33 13,32-12,32 12,36-13,37 13,36-12,3", "7 12,40-13,41 13,40-13,40 12,44-13,45 13,44-13,45 ", "12,48-13,49 13,49-12,48 12,52-13,53 13,53-12,53 12", ",56-13,57 13,57-13,56 12,60-13,61 13,61-13,61"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> polylines = {"16,1-16,0 16,0-16,0 16,5-16,4 16,4-16,5 16,9-16,8 ", "16,8-17,8 16,13-16,12 16,12-17,13 16,17-16,16 16,1", "7-16,16 16,21-16,20 16,21-16,21 16,25-16,24 16,25-", "17,24 16,29-16,28 16,29-17,29 16,33-16,32 17,32-16", ",32 16,37-16,36 17,36-16,37 16,41-16,40 17,40-17,4", "0 16,45-16,44 17,44-17,45 16,49-16,48 17,49-16,48 ", "16,53-16,52 17,53-16,53 16,57-16,56 17,57-17,56 16", ",61-16,60 17,61-17,61 20,1-20,1 20,0-20,0 20,5-20,", "5 20,4-20,5 20,9-20,9 20,8-21,8 20,13-20,13 20,12-", "21,13 20,17-20,17 20,17-20,16 20,21-20,21 20,21-20", ",21 20,25-20,25 20,25-21,24 20,29-20,29 20,29-21,2", "9 20,33-20,33 21,32-20,32 20,37-20,37 21,36-20,37 ", "20,41-20,41 21,40-21,40 20,45-20,45 21,44-21,45 20", ",49-20,49 21,49-20,48 20,53-20,53 21,53-20,53 20,5", "7-20,57 21,57-21,56 20,61-20,61 21,61-21,61 24,1-2", "5,0 24,0-24,0 24,5-25,4 24,4-24,5 24,9-25,8 24,8-2", "5,8 24,13-25,12 24,12-25,13 24,17-25,16 24,17-24,1", "6 24,21-25,20 24,21-24,21 24,25-25,24 24,25-25,24 ", "24,29-25,28 24,29-25,29 24,33-25,32 25,32-24,32 24", ",37-25,36 25,36-24,37 24,41-25,40 25,40-25,40 24,4", "5-25,44 25,44-25,45 24,49-25,48 25,49-24,48 24,53-", "25,52 25,53-24,53 24,57-25,56 25,57-25,56 24,61-25", ",60 25,61-25,61 28,1-29,1 28,0-28,0 28,5-29,5 28,4", "-28,5 28,9-29,9 28,8-29,8 28,13-29,13 28,12-29,13 ", "28,17-29,17 28,17-28,16 28,21-29,21 28,21-28,21 28", ",25-29,25 28,25-29,24 28,29-29,29 28,29-29,29 28,3", "3-29,33 29,32-28,32 28,37-29,37 29,36-28,37 28,41-", "29,41 29,40-29,40 28,45-29,45 29,44-29,45 28,49-29", ",49 29,49-28,48 28,53-29,53 29,53-28,53 28,57-29,5", "7 29,57-29,56 28,61-29,61 29,61-29,61"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> polylines = {"33,0-32,0 32,0-32,0 33,4-32,4 32,4-32,5 33,8-32,8 ", "32,8-33,8 33,12-32,12 32,12-33,13 33,16-32,16 32,1", "7-32,16 33,20-32,20 32,21-32,21 33,24-32,24 32,25-", "33,24 33,28-32,28 32,29-33,29 33,32-32,32 33,32-32", ",32 33,36-32,36 33,36-32,37 33,40-32,40 33,40-33,4", "0 33,44-32,44 33,44-33,45 33,48-32,48 33,49-32,48 ", "33,52-32,52 33,53-32,53 33,56-32,56 33,57-33,56 33", ",60-32,60 33,61-33,61 37,0-36,1 36,0-36,0 37,4-36,", "5 36,4-36,5 37,8-36,9 36,8-37,8 37,12-36,13 36,12-", "37,13 37,16-36,17 36,17-36,16 37,20-36,21 36,21-36", ",21 37,24-36,25 36,25-37,24 37,28-36,29 36,29-37,2", "9 37,32-36,33 37,32-36,32 37,36-36,37 37,36-36,37 ", "37,40-36,41 37,40-37,40 37,44-36,45 37,44-37,45 37", ",48-36,49 37,49-36,48 37,52-36,53 37,53-36,53 37,5", "6-36,57 37,57-37,56 37,60-36,61 37,61-37,61 41,0-4", "1,0 40,0-40,0 41,4-41,4 40,4-40,5 41,8-41,8 40,8-4", "1,8 41,12-41,12 40,12-41,13 41,16-41,16 40,17-40,1", "6 41,20-41,20 40,21-40,21 41,24-41,24 40,25-41,24 ", "41,28-41,28 40,29-41,29 41,32-41,32 41,32-40,32 41", ",36-41,36 41,36-40,37 41,40-41,40 41,40-41,40 41,4", "4-41,44 41,44-41,45 41,48-41,48 41,49-40,48 41,52-", "41,52 41,53-40,53 41,56-41,56 41,57-41,56 41,60-41", ",60 41,61-41,61 45,0-45,1 44,0-44,0 45,4-45,5 44,4", "-44,5 45,8-45,9 44,8-45,8 45,12-45,13 44,12-45,13 ", "45,16-45,17 44,17-44,16 45,20-45,21 44,21-44,21 45", ",24-45,25 44,25-45,24 45,28-45,29 44,29-45,29 45,3", "2-45,33 45,32-44,32 45,36-45,37 45,36-44,37 45,40-", "45,41 45,40-45,40 45,44-45,45 45,44-45,45 45,48-45", ",49 45,49-44,48 45,52-45,53 45,53-44,53 45,56-45,5", "7 45,57-45,56 45,60-45,61 45,61-45,61"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> polylines = {"49,1-48,0 48,0-48,0 49,5-48,4 48,4-48,5 49,9-48,8 ", "48,8-49,8 49,13-48,12 48,12-49,13 49,17-48,16 48,1", "7-48,16 49,21-48,20 48,21-48,21 49,25-48,24 48,25-", "49,24 49,29-48,28 48,29-49,29 49,33-48,32 49,32-48", ",32 49,37-48,36 49,36-48,37 49,41-48,40 49,40-49,4", "0 49,45-48,44 49,44-49,45 49,49-48,48 49,49-48,48 ", "49,53-48,52 49,53-48,53 49,57-48,56 49,57-49,56 49", ",61-48,60 49,61-49,61 53,1-52,1 52,0-52,0 53,5-52,", "5 52,4-52,5 53,9-52,9 52,8-53,8 53,13-52,13 52,12-", "53,13 53,17-52,17 52,17-52,16 53,21-52,21 52,21-52", ",21 53,25-52,25 52,25-53,24 53,29-52,29 52,29-53,2", "9 53,33-52,33 53,32-52,32 53,37-52,37 53,36-52,37 ", "53,41-52,41 53,40-53,40 53,45-52,45 53,44-53,45 53", ",49-52,49 53,49-52,48 53,53-52,53 53,53-52,53 53,5", "7-52,57 53,57-53,56 53,61-52,61 53,61-53,61 57,1-5", "7,0 56,0-56,0 57,5-57,4 56,4-56,5 57,9-57,8 56,8-5", "7,8 57,13-57,12 56,12-57,13 57,17-57,16 56,17-56,1", "6 57,21-57,20 56,21-56,21 57,25-57,24 56,25-57,24 ", "57,29-57,28 56,29-57,29 57,33-57,32 57,32-56,32 57", ",37-57,36 57,36-56,37 57,41-57,40 57,40-57,40 57,4", "5-57,44 57,44-57,45 57,49-57,48 57,49-56,48 57,53-", "57,52 57,53-56,53 57,57-57,56 57,57-57,56 57,61-57", ",60 57,61-57,61 61,1-61,1 60,0-60,0 61,5-61,5 60,4", "-60,5 61,9-61,9 60,8-61,8 61,13-61,13 60,12-61,13 ", "61,17-61,17 60,17-60,16 61,21-61,21 60,21-60,21 61", ",25-61,25 60,25-61,24 61,29-61,29 60,29-61,29 61,3", "3-61,33 61,32-60,32 61,37-61,37 61,36-60,37 61,41-", "61,41 61,40-61,40 61,45-61,45 61,44-61,45 61,49-61", ",49 61,49-60,48 61,53-61,53 61,53-60,53 61,57-61,5", "7 61,57-61,56 61,61-61,61 61,61-61,61"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> polylines = {"0,3-105,3-0,4-105,4-0,5-105,5-0,6-105,6-0,7-105,7-", "0,8-105,8-0,9-105,9-0,10-105,10-0,11-105,11-0,12-1", "05,12-0,13-105,13-0,14-105,14-0,15-105,15-0,16-105", ",16-0,17-105,17-0,18-105,18-0,19-105,19-0,20-105,2", "0-0,21-105,21-0,22-105,22-0,23-105,23-0,24-105,24-", "0,25-105,25-0,26-105,26-0,27-105,27-0,28-105,28-0,", "29-105,29-0,30-105,30-0,31-105,31-0,32-105,32-0,33", "-105,33-0,34-105,34-0,35-105,35-0,36-105,36-0,37-1", "05,37-0,38-105,38-0,39-105,39-0,40-105,40-0,41-105", ",41-0,42-105,42-0,43-105,43-0,44-105,44-0,45-105,4", "5-0,46-105,46-0,47-105,47-0,48-105,48-0,49-105,49-", "0,50-105,50-0,51-105,51-0,52-105,52-0,53-105,53-0,", "54-105,54-0,55-105,55-0,56-105,56-0,57-105,57-0,58", "-105,58-0,59-105,59-0,60-105,60-0,61-105,61-0,62-1", "05,62-0,63-105,63-0,64-105,64-0,65-105,65-0,66-105", ",66-0,67-105,67-0,68-105,68-0,69-105,69-0,70-105,7", "0-0,71-105,71-0,72-105,72-0,73-105,73-0,74-105,74-", "0,75-105,75-0,76-105,76-0,77-105,77-0,78-105,78-0,", "79-105,79-0,80-105,80-0,81-105,81-0,82-105,82-0,83", "-105,83-0,84-105,84-0,85-105,85-0,86-105,86-0,87-1", "05,87-0,88-105,88-0,89-105,89-0,90-105,90-0,91-105", ",91-0,92-105,92-0,93-105,93-0,94-105,94-0,95-105,9", "5-0,96-105,96-0,97-105,97-0,98-105,98-0,99-105,99-", "0,100-105,100-0,101-105,101-0,102-105,102-0,103 3,", "0-3,105-4,0-4,105-5,0-5,105-6,0-6,105-7,0-7,105-8,", "0-8,105-9,0-9,105-10,0-10,105-11,0-11,105-12,0-12,", "105-13,0-13,105-14,0-14,105-15,0-15,105-16,0-16,10", "5-17,0-17,105-18,0-18,105-19,0-19,105-20,0-20,105-", "21,0-21,105-22,0-22,105-23,0-23,105-24,0-24,105-25", ",0-25,105-26,0-26,105-27,0-27,105-28,0-28,105-29,0", "-29,105-30,0-30,105-31,0-31,105-32,0-32,105-33,0-3", "3,105-34,0-34,105-35,0-35,105-36,0-36,105-37,0-37,", "105-38,0-38,105-39,0-39,105-40,0-40,105-41,0-41,10", "5-42,0-42,105-43,0-43,105-44,0-44,105-45,0-45,105-", "46,0-46,105-47,0-47,105-48,0-48,105-49,0-49,105-50", ",0-50,105-51,0-51,105-52,0-52,105-53,0-53,105-54,0", "-54,105-55,0-55,105-56,0-56,105-57,0-57,105-58,0-5", "8,105-59,0-59,105-60,0-60,105-61,0-61,105-62,0-62,", "105-63,0-63,105-64,0-64,105-65,0-65,105-66,0-66,10", "5-67,0-67,105-68,0-68,105-69,0-69,105-70,0-70,105-", "71,0-71,105-72,0-72,105-73,0-73,105-74,0-74,105-75", ",0-75,105-76,0-76,105-77,0-77,105-78,0-78,105-79,0", "-79,105-80,0-80,105-81,0-81,105-82,0-82,105-83,0-8", "3,105-84,0-84,105-85,0-85,105-86,0-86,105-87,0-87,", "105-88,0-88,105-89,0-89,105-90,0-90,105-91,0-91,10", "5-92,0-92,105-93,0-93,105-94,0-94,105-95,0-95,105-", "96,0-96,105-97,0-97,105-98,0-98,105-99,0-99,105-10", "0,0-100,105-101,0-101,105-102,0-102,105-103,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> polylines = {"0,0 0,0-1,0 2,0 2,0-2,1 4,0 4,0-3,0 6,1 6,1-6,0 8,", "1 8,1-7,0 10,1 ", "10,1-11,0 12,1 12,1-13,2 14,1 14,1-13,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> polylines = {"0,0 1,0-0,0 2,0 2,0-2,1 4,0 4,0-3,0 6,1 6,1-6,0", " 8,1 8,1-7,0 10,1 10,1-11,0 1", "2,1 12,1-13,2 14,1 14,1-13,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> polylines = {"0,0-10,0-0,0-10,0", " 0,1-10,1-0,1-10,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> polylines = {"1,1 1,1-1,1-1,1", " 2,2-2,2 2,2"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> polylines = {"9147,4691-5551,4326-9638,8963 5815,2629-3589,8071-", "5926,3382-2184,2959-1767,5316 2574,872-7409,185 45", "61,7843-2316,56 6837,4155-9925,1187-6592,7062-7103", ",6555 811,8779-7928,2044-5426,4400 8689,8439-205,2", "48 3859,1120-8529,9677 4168,8599-914,8943 8830,309", "8-4101,4831 655,2502-8732,2994 775,3805-9284,8441-", "3373,7280-5969,7722 4381,9007-2865,5821-5429,5137-", "3735,1751 4649,693-4870,4319-229,3479-448,8972-962", "7,2731 139,2541 9660,3316-595,8689 7643,7489-6495,", "8812-5712,2024-7161,9360-2189,1140 2883,2894-7214,", "6623 8522,1180 2331,2708-7229,7430-7569,4872-8188,", "6634-6401,8307 4968,2418-1229,7505-607,1463-1901,6", "941-9160,8847 2054,820-7443,8053-5805,346 3608,886", "8 1037,2277-7149,717-8430,9685-7992,6415 409,7355-", "4859,877-2340,2717-9659,6545-5391,5320 6211,489-85", "42,1950 5426,2296-2242,4435-7924,9034-1149,4519 83", "3,1667-9161,7071 6516,2979-3856,312-3030,2453-8999", ",7275-2595,3767 4163,2584-5614,1679-7491,2705 3004", ",9210-8243,152-4671,927-646,470 8796,1303-1207,657", "8-3093,1775 6626,6710 5624,3985-7659,473-4137,1091", "-2770,1821-5605,9751 4814,7660-8891,4343 3562,6349", "-6996,5684-8067,2058-8636,6870 2808,8645 9434,6434", "-418,9658-1209,6136 5346,7227-1076,2055-8740,6175-", "4914,2415 3804,6759-4186,8768 2260,4451-2517,502-2", "17,9131-8854,2869-6899,4104 7635,3537-9673,6784-59", "39,8844 9074,5269-2522,9054 7436,1469-9307,1365 34", "92,1211-6742,763-2345,6832 3641,5962-4815,3207-105", ",7745 7740,2360-2032,6886-3904,7662 2977,2930-6532", ",9064-1611,789-3233,3967 4445,7365 2265,8129-1552,", "2319-8281,1523 4175,4730 4277,5914-4732,6376-9487,", "2241-6145,2394-6403,9496 2934,9638-2327,989-5302,7", "981-5345,3244 4552,9812 6104,2130-1490,5692-422,23", "75-6391,6744 3845,1020-4340,2147-4541,3331 2022,28", "27 4957,3543-5871,3833-9135,2937-8282,193 3913,4-3", "214,4128-9820,16-3471,5783 940,2526-4625,8736-1961", ",4786 7581,8117-2022,528-2293,9603 7205,5638-8575,", "3594 7936,3787-4871,7377-2583,1848 2402,2943 4802,", "7493-9513,8551-3175,4616-6577,4298-3493,3218 5516,", "3747-7119,4838 4323,476-9051,6833-619,1740 6569,19", "5-2778,991-5014,5732-1756,6259 1385,1060-5676,2018", " 2252,7395-888,8858 7483,3683 1800,1880-7282,3881-", "4010,8633-330,9022-9217,2075 3073,4145-9159,3710-6", "546,9332-392,2744-5841,7931 3236,4649-3506,9400-79", "66,5203-3764,8268-147,1370 7429,5251 7529,9262 782", "4,2415-6560,3583-8373,896 5997,1306-1698,9542-5382", ",5006-9655,8846 4239,9324 2506,8368-9739,9742 6068", ",6384-2737,1160 9422,8689 4083,6512 3534,8487-9794", ",1101-642,9531-5616,2570-2494,7103 2896,6800-2777,", "9510-2015,1264-2081,3598-1060,5748 3798,6908-5597,", "3478-2300,4298-8381,3187-2753,7683 2546,9863"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> polylines = {"2469,2019-6613,3081-9473,1144 2242,8278-2980,639-6", "66,2807 777,1250-6569,1835-4263,9036-6372,1413-605", "7,1739 5369,9645 7500,2937-4956,4448-7530,9969-111", "2,2648 468,851 3449,2569-3236,3129-5458,9705-1540,", "5092 6882,4127-498,4519-1654,8622-9345,2818-8134,7", "023 3660,4523-4491,7238-9886,1189-9270,6683-7151,1", "815 1678,4385-8700,2721-9258,1383 2363,4002 7961,8", "83-583,573-4470,9615-7717,9929-2209,2603 525,7343 ", "410,8532-8881,5570-3800,3305 5478,7690-7468,2271-1", "529,7940 4971,1941-3904,2412-4064,4010-4703,5566-5", "494,8534 8783,2216-9559,5737-4625,9308 1273,797-41", "02,8049 2870,7600-9871,1630 2478,9570 8528,2590-75", "73,6165 3138,228-9841,7241-738,9712 7555,9573-8880", ",1614 755,1862-9911,4531 7510,683-3392,8806-221,84", "60-2016,4040-7709,3974 5281,1217-2524,4160-1400,94", "99 3218,9210-8782,4421-7115,772 8977,4030 9966,856", "1-322,6510-5316,7476 6616,7014 1669,9030-9574,6542", "-2902,2886-5411,4813 8855,6213 3275,9431-202,1469-", "1287,1468-1523,5311 1489,4951-5273,8372-4766,43-70", "57,66-9979,1381 7599,4129-7016,7818-2630,500-3979,", "3505 6667,2359-6713,9353-633,9215-502,9261-783,702", "4 3351,1974-8326,734-6579,4473-2608,9471-9449,7961", " 7048,3168-183,7591 4767,1299-1220,2606-351,8205-4", "918,572 4178,2285-9309,68 2361,2431-4245,470-6022,", "686-157,823 9606,9863 7732,3031-4293,7073-9451,743", "8-1122,9061 1473,7265-3261,1243-4607,1039 4994,218", "6 7355,5697-9942,6107 764,2128 1706,1837-1319,8883", "-7693,4737-108,9471 247,8921-9592,6252-7726,7513-1", "852,1913 370,7599-2592,3109-8806,7086 8747,4271-74", "78,144-9422,589-3374,9316-1713,8304 1184,5996-2205", ",9299-9546,1183-774,8457-7261,8137 8184,9990-1438,", "1364 8524,5035-7139,1176-1001,2794-271,7284-7784,2", "669 6087,6044-5233,2379-4642,3161-6445,5610 4902,5", "156-4371,7679-1444,3241-2503,5439 4874,6877-6479,1", "-7141,6050 5503,8130-799,1702 7922,2367 4233,5825-", "466,4691 6292,1136-7117,6078-1527,3970-6493,1436-3", "940,6967 8814,4922-2480,1461-9681,5943 5183,4072 9", "548,5950 1077,4950-9184,4883-6429,6847-7983,105-61", "83,3799 8789,7769-5340,7615-2633,5755-1756,6800-82", "61,2525 9020,9547 5281,4698-647,3758-2816,4828 877", "8,6984-3830,5860-5965,5206-9005,2892-148,3226 7763", ",2014 1474,8849-604,1070-409,4000 9429,3546-9323,2", "985-7822,4709-615,9971 8678,6647-3585,494-6779,250", "7-6478,9550-3854,6863 5868,4714-63,5468-6943,4716-", "6399,1133 1238,2621-3128,6646-5969,5303-3124,7837 ", "5920,9531 6414,8208 4271,1794-8272,7877-1730,1133-", "6927,4898-366,8677 7309,3393-870,9203-1823,408 495", "2,7054-3022,8491-2693,3867-3398,1118 2684,5861-310", "9,6105-376,4478-2750,2064 7648,3794-2471,8436-5426", ",8014-6401,6943"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> polylines = {"2954,825-4588,6022 9067,210 1816,3353-8227,2023-15", "38,542 8043,8557-6036,8719-7610,3749 9690,1278-483", "9,9945-65,258 226,3521-7555,4170-8758,7328 7824,86", "17-1969,7128-9151,718-1261,1274-3050,688 2847,8731", "-2479,8011-1934,457-1225,4837-9676,2957 3020,3023-", "4328,6084-3638,8269-7026,2734 5929,2429 7726,5478-", "6752,7608-9376,8987-9883,9803 7894,2649-4185,2743-", "7580,906-4943,5410-6894,8334 4056,2432-700,3372 88", "05,7186-9615,9024 5092,8560-6167,3538-2524,2923-27", "25,6621 6453,6885-9628,2458 8286,4443-464,6048-402", "0,7698-129,9509 1908,3960-1145,6848-6950,712-6525,", "759 1141,6931 4744,9854-3657,9376-7339,8230 6966,1", "766 6330,7289-7753,7875-2973,5106-5235,8341 8222,2", "300-3445,8976-5926,8935 1434,6538-7679,3292-4224,4", "189-4644,2422-1731,7881 4576,9070-895,27 8770,6357", " 1743,2542-8856,115 7078,2415 7091,6939 3628,2221-", "6593,1285-5474,2385 117,5886-7617,8698-8846,3179 9", "741,3206-641,6215-7990,8511 9184,1332-6282,2039-91", "17,1598 6207,9616-1837,57-2421,913-3298,9509 9184,", "324-100,9092 8946,2270-5476,1151 7196,8445-7514,82", "76-686,379 6968,2418-1534,9375-68,8253-9389,8820-9", "733,2984 3030,2492-2817,783 3996,9875-3223,1171 97", "78,3401-2925,2707-2061,6973 2747,7352-848,9293-974", "6,793 9815,9046 2798,9514 5291,1322-2105,6121-492,", "9187 1663,3182-7203,6281-6058,6144-9069,9910 585,3", "049-5796,2540-3389,956 6850,702-516,6714-6227,209 ", "8628,3300-500,9684-8870,733 2052,3791 333,1151-720", "9,9878-24,243-4371,2397-4938,1688 9406,2645-3347,7", "835-5627,7334 2932,7543 1560,1922-2422,7940-6809,2", "293 9940,7163-8314,8227-9184,273 9208,1595-5966,89", "99-5015,1975-4620,7212-6126,4420 1752,1754-375,398", "7-3321,4685-7324,3376 695,6877 7858,1369-675,166-1", "518,7251-3852,9859 3929,144-3198,158-7370,23-4443,", "7818-7942,3495 1928,6327-2090,8731-2106,5250-7589,", "9414 7816,108-9045,1431-2106,9062-579,6295 3693,12", "25-6234,4267-7465,4930-3378,6257 6874,1778 4279,13", "3-8864,7311-3639,6369-5782,2048 6969,2110-3542,120", "1-262,6013-3387,6727 5691,849-5116,5613 3659,542-3", "921,9260-1038,1099-6482,1873 4871,6152-3599,2192-4", "240,8510 7430,1894-3095,7428 3357,4519-8985,8777-9", "626,5278-890,4676-7679,5820 6939,9480-1657,7512-93", "85,9056 6615,1305 213,4576 672,8816-7324,5571-9745", ",9179-3697,9374-8151,3102 7776,8380-348,8437-7194,", "3596 4132,4154-6890,371-834,4266-6650,6108 1225,19", "5-4951,8741 1600,491 1344,748-5525,7818-7047,5525 ", "4822,4983-5332,8801-5994,9497 1205,4729-1619,9643-", "1555,5471-3200,8806-79,83 5030,9903-1473,6624-5068", ",6630 3964,9054-4578,7746 640,8110-6910,6911-7487,", "7051-6321,2904 7042,4109 8598,658 9760,3858-8284,3", "798 5986,8828 2132,6537"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> polylines = {"6337,2261-7449,6955 8108,1868 1965,6665 1327,462 7", "314,369-7985,4688-201,9446-6621,4653 5884,6978-994", "4,4830-5266,2058 7528,6798-3753,6295-752,4976-4162", ",6700 7207,3364-4906,8778 5275,2331-8098,6926 8300", ",7451-5150,8991-5968,1760-7669,2112-5250,5911 2047", ",6949-4322,1540-7596,6879-3578,5074-1038,1757 894,", "8964-8577,2927 6581,9281-3618,1322-700,5110 2460,1", "338-3451,9655-6645,1207-5221,8701-1826,4672 8706,8", "994 2283,5147 304,6185-7079,7235 1382,6890-3471,35", "90-7208,3783-4484,9660 8023,998-5528,1628-9352,923", "1-5530,5307 2290,7133-5838,3016-8163,7726-4918,920", "1-583,5426 4894,3583-4965,9043 8749,3592-3251,7850", "-9823,4311 2529,2333-2642,855-6162,1880-6982,8172 ", "1077,1541-9267,211-490,9240 1074,5745 7047,9328-53", "72,7536 5199,1127-5458,5537 785,5360-7889,2921-664", "3,2720-9961,9770-7830,5893 8907,8513-7779,5625-611", "5,9226-4970,3041 5376,1535-9071,6393 198,3002-8539", ",7025 4977,7613-1613,8599 8256,1318-2358,3714-1543", ",5227-3740,6692-3395,450 9511,9676-5724,5639 1099,", "7174-7323,5250-9331,2926-9951,8600-5334,8948 3933,", "3925-7870,255-8511,6330 4816,8688-6459,4205-4655,8", "556-1153,9854 7871,442-9300,2211-3311,6123-3445,45", "49-4958,7316 3905,8345-6987,8458-3469,7830-5699,72", "42-6831,9800 1647,8487-4945,2566 5878,8300-4788,35", "13 6999,1383-8585,5619-1246,1388-8704,2030 8128,62", "33-4690,109-9018,5114-2356,8160 265,9038-7524,5235", "-7801,1912-4273,3548-9426,7180 5745,1967-44,248-88", "33,2443-3689,2512 972,1215-421,8174-2864,2160-2256", ",5536-8971,2102 9236,1139-9742,3287-2166,2227-6500", ",4368-4872,9346 1696,2391-2436,4533-3366,4139-8907", ",4948-7242,5307 7664,4560 4278,8503-604,5374-4504,", "3248-2483,2822 5789,3642-9090,1036-381,2288 3852,7", "653 6288,2185-6630,9796-9782,2314-634,3016 9377,75", "76-7157,3856-308,3654-7981,7761 1543,1661-6382,368", "2-4718,7332-9621,5471 7273,9433-6168,8951-6317,536", "-8246,5964-6824,9710 8641,344-9721,994-8151,2496-3", "883,4454-2434,6990 3977,8651-6111,2377 1582,7095-3", "272,929-9281,2093-8261,3302-697,895 407,219 1830,2", "559-3553,1846-5421,1550 9305,6004-8439,9772-9501,8", "000-1455,3494-4803,5612 6811,8273-365,2900 9705,72", "81 5008,7979 9292,9465-1294,1923-6555,1137-6559,39", "23 5863,1006-523,9109-8610,4941 4221,6396-6024,882", "1 2,6710 8363,3880 7420,3024 6884,2387-4310,98 865", ",1235 202,7794-3656,5264-6866,389-8999,9676-6071,8", "83 3173,782 4255,8571-2450,2885-7606,2617 8412,36 ", "8510,7999-8334,4329 2591,6273-6475,8618-3353,8935-", "5800,7944 7762,6942 9623,2319-188,3351-7606,8194-6", "43,3074 7197,679-169,1337-414,7216 8748,1544 2418,", "7818 1352,5371 8231,3314-1335,4502-4680,7072 8031,", "6694-4887,3842 6610,7995"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> polylines = {"8383,934-3365,7912-2304,935-5437,2674-9746,3639 64", "40,7293-2214,304 1287,7020 1040,3958 2041,3312-200", "1,8157-2880,1721 6499,904-365,2530-5895,4410-7794,", "1300 2511,7816-9011,9394-6912,883 9318,3097-5463,7", "414-1371,9411-5468,6503 3624,9623 7583,1343-3326,4", "38 3692,2969-9943,9571-7364,4992 9876,2808-2897,89", "85-5896,758-4934,3291 396,705-3155,6782-3328,7979 ", "8031,7601-23,7760 3349,8198-2245,774-344,7041-2033", ",2188 5920,1778-1841,9742-1578,8817-2108,8817 3892", ",6187 7047,2968-7375,8123-6803,5964-4802,5406 3000", ",2098-2872,174-8295,5245-8512,4295-4161,1406 3902,", "7326-7221,4289-3105,6559-4149,9329-4299,9293 1346,", "3339-714,2416 6120,9219-6044,3191 7298,7270-3593,2", "168-6463,5592-8077,3184 5402,4553-8842,5605-2164,3", "701 7392,4109 1685,8408-9754,6736-8529,4102 4648,4", "399-443,3491-760,3944-7191,8820 4733,5490 5357,356", "6 2040,46-3747,4168 7856,7194-590,2675-4360,6264-7", "096,7326 6317,5855-1581,3940-5462,9808-1646,6605 7", "079,4874-9607,849-4415,6773-2099,6042-8083,5540 44", "44,9287-8222,3460-5129,7119 3533,2558-3177,2659-55", ",9388-2048,7117 9732,3657 4605,9017 5291,9866-5359", ",8597-695,1332 6962,493-4938,1264-564,1500 6128,66", "29 9866,162-628,9950 3755,8145-1802,1941-5608,4565", "-9171,1897 5540,2842 7951,8201-178,7803-5843,9524-", "5540,2521 8675,3085-9213,5051-6292,5447-6475,156-1", "156,6921 4176,1754 862,6320-6569,9398-3318,8294-64", "79,2108 5360,1137-660,2775-6375,1203-704,7279-5954", ",9460 2479,9751-9908,3126-1125,32-4651,2142-7397,2", "879 8259,277-6846,3706-7024,7631 9621,4109-9470,11", "70-2909,3475-9850,1751 9310,2455-9289,7221-9700,13", "8-45,3493-4618,810 8577,5461-8691,662-10000,8854-5", "700,2396 5732,498 7981,119-3594,3366-6196,890-1078", ",4522-3831,9730 3970,96-3590,9077-9887,5094 6426,9", "440 5117,1180-1180,6717-3495,8592 305,9091-288,378", "5-8230,8287 4425,255-1333,9483-3314,4154-4251,710 ", "8920,9787-9673,4535-5053,8206-6069,7177 3864,2293-", "1964,8493 2133,9460-4324,8743-8108,3500 8363,8461-", "7943,6979-2211,774-1484,2335 1270,1776-7391,6460-5", "745,2021-9199,2443-9756,2892 8248,6756-6272,5613-7", "746,8787-3110,5014-4201,2324 2563,784-8728,4799 21", "41,7011-5630,5901-7172,3918-1308,3169-8914,271 180", "5,9470-3119,3507-2833,9640 2698,5911-2003,7557-988", "1,6887 665,3629-8428,9847 6517,4263-1242,2612-6530", ",2147 8917,6395-5308,9765-9234,2668 3431,7254-1165", ",7831 3864,4820-7902,798-678,750-5458,4106 3886,50", "31-372,2893-6585,1481 4193,4707 3110,1101 5778,640", "9-5679,1183 4588,4615-7857,5275-217,9408 2047,7310", "-2494,411-3913,7505 7885,2469-5030,54-1668,4469-86", "63,9737 1772,838 8629,8326-4005,6988 8593,2681-161", "6,9092-388,9080-7468,1349-1760,2435"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> polylines = {"2444,9106-8847,9333-170,6299-2102,1697-325,9576-35", "80,168-3928,4142-4313,3251-3409,5544-6893,4701-821", "5,876-2995,9733-5405,9233-3799,3717-4493,41-226,33", "95-3807,6938-4315,9073-770,3977 2174,3552-8211,766", "5 2541,1592-8216,1708-7488,5950-7906,5108-4840,678", "1-7092,900-4618,1324-2444,1970-6444,9111-7127,2670", "-2822,250-4228,2520-16,4671-6845,8859-8149,8760-14", "30,4240-7027,689-7718,9646-5833,5593-3452,5623-760", "3,1751-3075,544-2514,3299-3488,6599-347,8958-287,1", "694-4214,3169-8919,4515-4452,5309-4068,5764-1082,2", "600-4368,5499-6223,8110-4781,2086-8788,3134-4886,8", "234-9857,7469-1846,9040-5638,3449-3485,5335-7029,7", "065-1312,3772-9366,2321-7631,231-5995,3818 8156,74", "97-1865,8276-5578,7344-2125,5030-3817,8712 1286,46", "76-3716,1293-4742,3132-9546,9354-6418,9306-3078,76", "53-9975,8810-9041,2443-7340,8684-1460,6114-4269,48", "37-7781,9737-6393,1613-3738,2810-6627,6183 8992,85", "9-4575,8626-4446,3203-3827,5007-2504,3751-6829,148", "0-2533,1313-353,351-7691,1216-2676,6467-735,3606-1", "386,3491-962,2348-7165,5275-2981,7146-8005,4497-31", "22,1972-6254,2579-7586,7568-2398,81-2640,1168-2481", ",305-656,5173-7468,2834-379,9427-4111,143-4714,111", "5-4542,6577-1851,5676-2821,2786-8362,4832-7884,825", "-4483,1484 3148,130-2528,5297-7937,4316-7877,2834-", "4569,4188-1655,710-1090,3995-9186,2878-7592,3284-8", "905,5762-7613,3267-7168,2769-1131,3524-2486,9072-3", "555,2615-3824,7702-4078,7782-3176,7432-265,3093-83", "61,1052-2842,4834-9909,15-3972,5011-8295,9094-5934", ",1563-5910,8278-1047,4625-8149,3077-3227,2178-5872", ",1713-494,7861-5642,774-8206,4572-8744,9898-949,84", "71-4384,7104-8199,3791-9881,5371-5543,2170-4813,92", "54 722,7532-9658,6101-5329,4878-8105,2914-9865,812", "1-8615,5966-2686,638-8845,4265-3009,2583-4612,8394", "-3856,1191-9390,9482-9363,305-5848,2639-7452,9695-", "7226,8403-4504,8174-4130,7962-875,911-9032,3313-35", "7,739-1378,8726 1301,2990-7078,6706-2396,773-4630,", "9349-9817,2957-2319,4935-1862,2455-9907,2013-318,2", "64-5847,9159-3288,8280-9156,6758-6869,7681-8038,97", "3-3430,6673-741,2160 7820,9946-2341,6584-2292,8247", "-8063,5298-8696,7227-167,518-1503,1788-3185,432-62", "79,662-5029,1464-1698,4116-984,2709-1826,3751-7181", ",8736-9477,3986-3931,2991-9575,8375-6621,7352-3728", ",1866-171,4684-6281,3503-5291,339-771,7784-9525,84", "76-1018,8129-2244,4554-8342,3796-7547,4307-3042,16", "7-5233,4727-7718,3598-1972,242-7594,8371-1315,9673", "-4356,2401-5904,1487-2905,1715-9499,1194-748,4755-", "2883,9024-4656,2845-6641,6207-513,2997-4244,4187-8", "915,4635-8233,9477-9719,7711"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> polylines = {"4432,6482-163,3138-3812,8404-4683,5811 9105,2905-7", "453,5613 4829,6212-8126,5526-9009,7104 5249,8967-5", "095,9197-1191,4025-4592,4419-9087,567-4999,2152 34", "02,2315-9206,7116-3380,9165-9348,2110-641,8994-628", "4,7832-3357,6549-3653,4410-2819,3444-8693,3698 271", "7,8794-4291,4285 3378,5931-929,540-3934,6682-4876,", "5411 8257,5654-6080,5249-6969,8329-5691,3911-8347,", "3518-8250,100 1947,3999-7093,483-4279,740 2667,611", "1-567,8388-396,4286-8220,7249-3203,6886-2539,2438-", "8766,2538-866,9698 6558,3609-1955,9253-7502,7737-1", "735,4825 9908,5308-665,2347-8458,2364-751,4411-869", "7,9025-7352,1147-8033,7996 1650,1512-277,4172-5038", ",1348-6036,6012-5264,2674-1490,9070-3894,3844-4372", ",3225 6719,4211-6575,946-6436,6255-6358,7327-9553,", "6212-4207,3709-5342,8665-1393,5719-5996,9514 3087,", "5631-8305,9856-8926,9430-3274,9795-4099,3898-4179,", "8725-6522,8310-5964,6204-2639,2776 8851,9134-3921,", "3921-3664,4136-9855,341 6930,9856-5486,8878-9813,1", "6-9446,4869 3798,5743-920,3714-7893,2522-9044,9230", "-6272,5175-7815,2898-2031,640-4562,6665-801,7031 1", "734,7373-7228,4362-4319,9743-837,3792-9740,5210-50", "26,1362 8740,5160-8762,7481-7790,7712-2886,8884-17", "82,4061-4702,1779-8445,4892-1923,342 9296,9647-400", "9,2058-1801,7602-2472,9407-4616,3717-5079,2211-877", "3,720 6253,9460-8250,79-8963,4042-9183,2215-3994,1", "823 3517,6716 4920,8639-9013,3872-8960,6979-9859,6", "614-164,9445-4060,4654 4780,9734-1051,3305-9559,53", "19-4647,1130-92,4679-3861,7941-1935,1916-9711,8824", "-3049,6531 8001,1451-9509,8440 445,6132-6296,6405-", "1543,5099-4832,828 5883,4134-4771,2721-8447,8092-8", "185,528-5469,6388-9402,1179 5932,1968-1395,8421-64", "21,8462-9049,9835 572,7045-4419,863-2407,5672-1582", ",5247-9381,888-4688,8545 3134,6636-5899,4680-148,9", "522-8923,8157-124,5519-3939,5934 359,5474-4523,243", "2-9477,4819-6761,5095-1845,3895 3428,221-9602,1134", "-5822,3051-9687,4832-590,8957-8478,6665 8480,4821-", "6025,7336 7544,1275-2713,965-6567,1055-531,8611-53", "72,1662-4586,5506-5727,5618-6753,9093-2143,5328-12", "38,3653 1828,2609-2166,9574-5473,3645-981,1724-721", "6,1497-120,3335-7127,8181-4748,1175 7489,2785-8291", ",1109 4017,6727-4558,1167-4389,424-1662,8212-1899,", "7298-7950,3491-7136,4065-5789,4502-7078,9196-3609,", "3004 736,2264-8091,9452-2237,6474-7583,5579 5388,8", "732 1025,9899 315,4288-2664,8789 1693,3358-1573,73", "59-4226,6195-3272,768-5457,8310-573,1549-2079,6193", "-2666,8664-5321,5395 4052,7002-3704,7794-9898,3951", "-9318,830-697,212-3506,3060-4753,5135-6708,864 855", "5,5090 4011,3399-5051,9006 4793,1084-6480,3948-527", "5,113 4148,4166-9196,8264-9094,4045-5337,9592"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> polylines = {"7713,173-9516,3167 8609,7212-3627,8657 3548,2387-3", "028,6561-350,4333-1287,5695-4740,3774-130,2719-280", ",2789-3002,8848 9695,1512-9453,6183-3895,946 2961,", "1540-148,910-5616,1617-4004,1784-9424,9165-3497,70", "32-2727,9774 8546,4627-4757,9661-9942,2413-6495,46", "83-6195,3655-9838,7268-8215,6727-9346,4812 1334,77", "73-9390,982-3845,6951-6115,4473-2583,3268-4120,690", " 8747,6554-7293,4934 7234,8427-4921,9265-6539,1968", "-2884,2188-1481,3265 2315,2610-5024,7626 3053,8095", "-2567,8221 6229,2567-6687,936-7490,2618-8631,6513-", "1094,4783-3095,7057-1977,1438-7977,6142 1241,9027-", "8880,6726-9041,4930-9954,6506-4600,4495-2715,3006-", "3252,7167-3395,6361 7092,3048-9561,2757-8619,5723-", "2779,1733-3171,2793-8935,4757-1,1147 6727,3467-839", "8,7920-4425,6847-1341,9430-2436,9025-7270,5136-149", "6,6767-955,1743-8836,5623-5183,4792 7996,3410-6203", ",7337-3172,1166-3393,5138-5256,4252-2058,6860-5257", ",3175-7600,8905 6624,1324-7539,8202-4968,4972-6716", ",114-5737,7003-1794,5551-108,1999-9995,6283-3565,8", "524-1696,2239 7027,5632 9085,2492-8828,8213 4593,5", "812-3515,392-7931,3873-8842,8487-5202,8045-4861,69", "23-9796,1831-3018,6860-6854,7157-721,1542 502,4317", "-1343,5804-9375,5540-3752,428-9496,8202-2795,9564-", "4157,966-9977,6668-6588,2644 4589,8925-1835,3960-1", "898,5463-2620,4853-6395,9831-2,3341-3844,1790-4213", ",5806 5720,5180-4460,3135-3777,6294-7261,7255-5002", ",7935-1657,7237-7415,2668 1375,8337-3799,3495-8349", ",4352-4183,6419-9761,5822-8692,4185-9991,4683-4066", ",2904 8280,9703-5996,708-9043,3135-2148,3256-1571,", "5123-7791,4884-6545,65-2519,6127 6871,9927-7424,54", "5-7447,1053-5238,8263-2945,7217-1199,6307-2555,809", "0 4343,7448-583,6897 2731,1232-3882,8508 3947,7377", "-4583,5239-7436,7545-4416,5588-3011,7982-6507,5469", "-1786,1274-5298,3723-4922,9172 5823,2806-7149,835-", "2497,3798-6109,1612-119,5229-3923,9992-5017,8575-3", "157,240-8755,2562-6978,8745 3525,2835-5188,4321-80", "44,6390-5562,485-3873,4044 5788,945-4744,6595-8207", ",8285-4592,852-1922,8326-6900,9594-9834,8019-580,1", "136 8637,959 3240,3794-8982,1803-9847,9631-5192,94", "68-4419,4970-5915,4638-1232,206 9439,9571-4162,259", "0-5591,8843-6821,3756-4668,3609-4189,7957-8917,433", "5 2710,738 2771,2541-3466,7854-3045,2238-6657,8436", "-4351,8762 6088,9994-510,7513-1674,9757-5348,9353-", "6173,6509-1177,8957-4225,5209-5204,5512-7329,8129-", "6352,8993 4205,1763-4001,5494-3929,8329-7090,1737-", "758,9359-6526,7083 6282,7593-8024,1023-8612,2708-1", "665,4197-484,9789-6379,5890-5097,5688 1449,4680-64", "44,5735-1228,5654-3983,1523-4339,6237-6674,2151-92", "35,5097-4446,3199 6549,560-3268,7009 4933,1205-276", "8,6027-2405,1901-6999,8456"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> polylines = {"1690,8221-5848,2982-6251,8699 2262,982-3750,7034-5", "18,4164-2241,3284-7499,7710-1715,1767-8026,9235-24", "94,8029-9499,9347 8722,2818-5524,4947-4246,1144-52", "05,8293-6992,94-2180,1455-4797,9053-3882,293-811,3", "9-2280,7166 5126,5743-4978,2394-422,4230-3576,7472", "-9723,999-800,6394-2996,4669-9995,3023-8228,1289 7", "62,9360-9491,3347-3640,5559-5598,3372-538,5530-620", "9,8957-5161,6281-1258,8603-103,9391 2181,2967-439,", "9532 3436,5280-6353,6004-4232,5804-6242,7520-866,6", "073-1631,5732-9105,5586-2194,8308 8403,8343-3503,7", "002-9340,7005 227,8187-368,6939 3349,7379-1893,719", "6-3548,432-5743,8776-5017,1067 748,3013-9678,4525-", "2832,9853-573,1871-1353,2253-5756,8655-9073,9437-7", "624,9728-7746,9300-1215,7992 8412,2419-2851,8096-6", "871,3038-4106,8594-408,1887-3714,8198 4646,7875-82", "4,9923-2175,6298-4952,2177-1614,9010-9817,5103-548", "1,9238-8308,7562-3764,6697-6187,726 9225,3578-3250", ",8730-1695,4409-2606,4738-749,5409-1133,480-1305,6", "72 3482,3926 6175,2936-2752,8566 1392,4046-1821,37", "19-5525,5156-7015,9087 6823,8312-3799,3431-8169,95", "97-5005,6406-7965,9998-1748,6139-4649,9270-3831,56", "74-9689,8111-7755,5 1801,6497 4701,1294-6819,66-70", "81,4867 4982,4257-8056,1510-757,4578-662,4461-2426", ",754-2502,7880-2528,2774-7684,9256-8944,638-8394,7", "690 1273,5265 7053,6559-3378,7441-4521,1919-6176,1", "456-2966,582 3724,5160 5557,6901-4780,3276-6051,80", "60-7315,7308 7337,9026-8498,3581-8846,8721-6095,84", "9-8981,5405 900,9862-1317,9135-795,8155-3465,5363-", "9087,7035-3935,3237-7592,4643-3781,8716-7102,4721 ", "7206,9535-3115,9512-9311,5703 6484,7631-6612,8445-", "9385,1097-1311,8591 2106,6745-1289,6064-6229,9141-", "3076,4526-2117,1951-5732,2870-1050,6839 8257,7452-", "566,8497-8886,5038 5370,2669-359,2050-1434,7546-88", "57,8950-6773,3215-357,2042 7666,1182-5337,3666-686", "3,9617-6427,9286-336,4780-2231,5412 3876,4987-3873", ",4709-8457,7483-611,321-7867,8816-8844,2046 6696,6", "340-6697,9845-2105,5836-581,4362-5057,8522-7807,74", "44-3302,1484 5533,7975-2962,7814-3602,487-7970,791", "4-9314,2058 8259,874-796,1706-9125,6061-6984,7492 ", "9090,4407-4988,2341-7398,7611-5417,2431-5733,8882-", "7936,4639 897,3531-7133,2831-1880,9890-281,9192-11", "44,1540 3019,3246-2370,5680-2663,511-4918,9270-268", "9,1752-9363,9906-3415,87-47,5859-1576,226 6186,364", "9-7559,9959-926,3319-3589,9439-978,1207-9748,5812-", "8831,5303-8752,5427-9169,420 921,6417 1362,7401-81", "5,1876-1924,7221 985,9876-6062,5769 459,3328-3845,", "2949-4157,5127-938,4824-126,4983-1488,847-1268,887", "9-7979,656-1577,8764-6165,9768 8059,2723-4647,1239", "-1115,179-7027,6711-7655,8256-8715,1433 3841,5279-", "102,5840-822,5858 2310,7784-9052,1264-321,2966"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> polylines = {"1329,2481-3914,3982 9193,5665-1504,4963-1899,373-2", "760,3405 4024,5715-8681,9814-8708,5425-6593,4303-3", "944,4845-9042,483-9021,4825-8978,4495-6976,5347-40", "7,307 7151,1429-7472,82-1535,8655-3138,449-132,429", "5-9398,8853-8613,1025 3994,811-5657,1414 5777,1897", "-1996,3842-3898,271-7248,8423-8830,4205-6714,8138 ", "5264,9299-833,5714-8853,5713-6925,5128-4526,8784-8", "475,9029-9840,426-1841,2469 3738,1486-6407,2351 30", "4,2623-9871,5236-5144,4510-2302,9087-8385,2203-791", "8,8645 7849,4357-2360,5425-1029,7711 1456,6186 437", "6,9734-1219,8882-2312,9193-6006,7626 1241,7930-351", "8,5884-4970,6386-9668,6899-5543,4433 979,4730-155,", "7591-5302,3339-5807,2263-4798,2566-2299,9193 3518,", "8074-1464,8367-4372,2222-1230,6399-3361,6693-4157,", "5828-3805,8331-3843,3824-2488,9349-1406,8573 5824,", "8728-2070,6459-9025,1630-1901,6868 9976,6042-4408,", "5920-8142,2518-8918,9859-7630,451-6279,2278-1688,1", "786-5611,83-510,5531-4103,9178 3910,9256 5980,5715", "-5818,449-2351,2847 3405,9968-5454,3061-2282,5923 ", "2733,5919-9277,4021-5808,90-1252,964-7574,2497-275", "3,1763-3679,2755-7744,2008-8802,2498 4620,2948-637", "8,7650-8696,2840-6980,9783-5705,4150-541,9262 5641", ",3073-3163,1979-4022,1448-5024,4416-6179,1595-5429", ",7777-864,936-4514,3173-7975,744 6703,6443-9283,49", "18-4700,5399-627,6263-6603,1483-4186,1168-7888,967", "7-2839,7244-1265,415-5439,8334 4295,5591-7607,9369", "-3620,5159-6982,2120-660,1594 5578,8298-4775,2707-", "48,277-2839,5402-7649,6652-6328,7026-4269,5536-595", "1,245-9659,6614 5249,552-999,6764-3001,2855-4975,4", "619-6214,9983 5590,3407-7194,2291-3647,364-6845,72", "42-4972,6487-4591,4493-28,1299 7059,2624 9528,2282", "-8610,8184 1465,9183-3802,9292-9274,7519-4233,1094", "-6684,2681-953,6524-171,8127 7737,6050-542,3167-55", "45,2327-2265,1649-8708,9248-2608,9897-8080,8235 72", "62,5604-4895,2683-1280,1063-3236,5248-9008,5513-31", "16,998-203,9961-9234,4366-2102,6253 5508,6795-8445", ",9025-9351,8852-8748,8231-7545,1959-3177,7906-5168", ",3148-8044,5860-7140,7310 3732,1625-2623,3377-3337", ",6848 3649,1213-4394,9080-6954,7129-6153,9902-8753", ",6477-4707,5503 2251,8541-1717,6485 8656,1652-41,5", "601-9971,6875 4426,606 7763,8533-824,8195-7275,141", "1-9619,5218-5119,5307-1783,5771-2353,4950 1972,352", "9-14,899 2745,7378-2978,2345-298,2786-5531,4027-84", "53,904-515,899 1339,9094-7447,9784-9403,6557 6252,", "2754-7705,5615-3184,9684 4083,1656-5346,2326-5072,", "2539-6596,8770-9069,8937-4468,622-153,1051-1567,64", "46 2906,5539-4065,8309-8790,542-3296,7897 2079,351", "2-6696,4725-7460,4392-6718,1857-4396,2805-2654,286", "8 2801,1805"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> polylines = {"746,6598-2072,2815-5469,4694-7578,4142-8992,9349 2", "915,4280-777,9805-1297,6443-8279,1260 8905,2285-87", "65,1389-8356,5651 3096,7123-6054,272-2097,772 6791", ",3923-9144,6496-5844,4368-375,8135-2128,123-901,12", "58-3635,8571-6849,3240-6605,1569-2958,6833 2392,24", "83-9606,2691-4042,6567-7339,6738-6686,7218-4009,23", "40-1483,4260-103,8377-9832,696-2824,1306 2473,3286", "-6526,4724-7372,9322-6154,3130-9578,329-3800,9717-", "9322,2268-7389,366-8784,6060 1123,3824-8084,9695-9", "150,3685-5460,9266-571,8981-1149,8284 6952,1835-11", "57,383-4592,4324-5732,8390-8106,4170-7517,9533-989", "9,8507 8683,5645-547,591 8631,285-9435,4570-29,897", "5-9547,9495 4482,643-7595,1227-3463,4865-536,2997-", "8730,2932-2116,4706-3301,8262-8160,622-7346,9286 7", "893,955-2319,8806-4454,7602-6577,2833-2327,5562-60", "33,7202-1683,4049-2722,8340-1802,7628 5813,8164-39", "48,4449 7249,2710 7614,1948-948,8056-5948,9648-196", "7,832 5879,6365-1926,1205 9039,8407-89,3333-6055,7", "378-258,8796-6959,1774-6223,7151-6159,906-9235,11 ", "7927,3039-3987,4923-1950,7574-619,5898-2262,7658 5", "267,8863-8348,5782-9115,4305-2761,9516-8312,6249-8", "023,3020-170,5270 7408,7256-7569,6415-9454,4275-27", "7,5495-4147,4519-416,3306-963,4767-1264,3757 7047,", "9025-4408,9252-8767,7240-3488,7170-189,8157-4506,2", "590-7915,1438-8846,1761-408,4329 6982,4862-9381,44", "76-7782,1128-5895,876-4633,9824-727,7160-5285,3657", "-8066,9979-9825,3603 7981,7092-9682,7582-9020,2486", "-5326,8675 5734,4082 2715,8944-9404,8698-7558,3844", "-817,279-4912,7382-8109,9056-4340,9649-8793,8088-8", "991,7944 6971,6114-6874,2687-2785,536-5862,6627-70", "8,2807 9653,7028-5725,6469-1391,9056-413,4362-1743", ",2209-1264,5325-6052,930 4844,9018-8008,5706 6058,", "2898-9772,4794-8658,6594-3534,7477-8185,1464-9572,", "6209-3757,8916-9050,5296-736,5148-8436,9463 779,58", "67-2997,3410-3506,7463 2593,4247 8651,7145-7995,58", "22-4479,6323-9857,5471-4734,7023-6594,7145-1980,36", "50-3778,2968-3705,7128-6643,4320 7422,186-3183,672", "-5258,5963-209,3182-4210,7851-7580,7354 4981,5348-", "1897,5589-2611,5916-4139,6631 6119,1359-5138,4331 ", "9458,8036-5298,968 7050,8390-4352,4984 4561,8167-2", "376,1236-9895,2993-9420,2407-9075,4875-790,1316-90", "26,2765-3048,6009 7379,2127-6453,5523-4980,6493-28", "70,7421-6889,5702 1240,685-9931,3305-5620,6880 551", "4,951-370,5792-4867,388-2257,2765-1791,7632 2176,1", "758-9138,1472-7925,8778-3757,6709-9579,6425-3313,5", "37 5633,2301 2512,3311-5617,9501 1409,5014-6481,49", "13-7679,7355-4986,9818-9162,548 633,2724-2580,6960", "-4748,9638-6062,7416-7953,4326-4903,453 9863,6086-", "9678,4643-1339,442-6535,4220-9133,3827-1181,3016-3", "912,7890-8438,7246-3989,3073-4786,2240"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> polylines = {"4565,6080-174,4368-3337,6825-4070,5165-9318,2853 4", "103,6173-992,1166-99,9605 3358,2246-5341,6652-329,", "2599-1702,5601-5538,808-1546,2326-9485,773 738,514", "2-9558,4015-8086,5903 7224,5220-401,8583-654,9469-", "9568,1084-3330,6040-2691,2925-6603,8672-5351,4100-", "4908,8305-1709,889 2273,1662 3011,7883-8519,8739-7", "903,9993 5126,5213-6693,590-2323,5673-5240,7778-21", "86,9442-2133,9244-5847,1936-7288,6233-2219,5230-69", "40,8177 9213,917-9880,4475-4292,3302-3294,8398-405", ",3273-9478,9586-6279,2075-5477,5150 4919,1468-711,", "7321-9258,7052-4363,7637 6582,2867-885,5800-6717,7", "412-2965,1176 8336,4478-8851,6073-6478,1608-1085,8", "437-5794,9632-5109,7314-8782,928-9328,27 8585,7079", "-2520,8209 180,2154-3039,2007-9804,7592-1636,5294-", "850,7478 9702,3550-1107,2659-3744,9217-5010,738-58", "47,1058-918,7017-6344,5874 6008,4031-7630,9700-185", "3,2215-5302,7810 5105,6481 2582,8117 7212,8088-746", ",2896-2112,8319-9057,5570 4904,7707-8625,6296-3718", ",1856-6967,1194 4596,893 2406,3825-9797,9401-5584,", "9966-8082,1062 7248,4257-8232,5377-4774,9074-5722,", "343-9623,3831-9814,3428-3131,6997-714,1669-9715,43", "25 4311,6297-122,6697 9919,6097-2759,6682-5842,205", "9-7395,924-7381,3089 3233,3241-8963,7048-6670,7064", "-7956,3469-7680,4745-5460,9626-9340,3083-9381,8058", " 581,4754-1929,2524-9206,1578-3638,4688-6691,6126-", "294,2111-7738,5150-8384,3535 6526,3577-8125,2534-7", "279,4482-5186,5804-8888,3817-2953,5604-333,9347 28", "57,9928 3142,1505-6222,6481-4251,9268-640,9413-715", "0,9401-8863,5255-8832,3013-6626,5389-9871,6956 505", "6,3839-2726,8801-1754,659-2071,2072 4929,3078-5662", ",2333-9893,8071-8417,2963-2375,4143 603,4623-3485,", "5391-4222,3616-242,8874-9823,2256-6095,5226-5105,5", "957-7696,9900 9767,1971-6128,8478-1889,4695-3844,2", "869-5832,1781 9286,7004-1626,3476-8867,9889-4583,5", "111-5064,4167-6423,5904-2208,4886-1922,3597-3496,7", "314-5251,9618 3728,9384-5158,2674 80,5543-2453,955", "7 1738,6560-9265,7975-7920,2705-7289,4375-517,2086", "-9589,4271-6480,6483-8405,3185-6681,3793-9044,8022", " 3851,8484-3641,6981-3602,1625-1181,4801-9300,6056", "-8873,8820-8084,7275-5194,1578-9946,3538-5134,7281", " 1616,7948-1132,695-4488,20-9121,7813-2119,4611-95", "41,7605-2324,9100-2701,1165-3426,7125 2245,7504-47", "78,8709-1365,1408-6025,1050-9410,1310-5526,1158 62", "22,2775-3874,8489-7381,1788-7478,4074-2757,578-967", "8,7018-9263,6160-3285,3457 788,4372 6645,4159-5524", ",7420-3444,7695-7105,6834-2359,4603-8457,5540 3409", ",4029-2488,2527-4,7483-1318,3066-3822,7023-6285,74", "79-1842,8358-2729,51-4984,3709 3483,353 6927,9127-", "7310,323-2683,2608-2143,2850-6879,3421-5948,5553-4", "114,445-3511,5953-4054,6512 1417,3990"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> polylines = {"8216,7383-4409,1481-6674,9740-3250,361-5494,3185 6", "911,7175 9458,4085-3625,7928-4314,6989-8002,5676-5", "775,4190 4262,5468-9430,806-6735,5599-4893,7891-22", "99,8216 3740,5968-9154,8961-621,9234-7224,7407-257", "1,9051 6196,6979-2371,4748-3829,2951 1928,9805-406", "6,3107-3615,2734-9469,743 8763,6715-2425,3805 1385", ",8624-8936,6042-4527,3085 7098,2135-192,3919 3642,", "8667-2495,7324-7128,1281-5468,5503 9083,9316-9864,", "3015-808,1667-6551,8626 5174,5514-1555,4618-8782,4", "109-1347,6083 6345,3180-7553,2188-6909,6090 9270,9", "665 4737,5167 4898,4482 6565,4345-4050,255-3488,31", "15 9185,8289-3477,1119-8281,7966 1460,1040-4307,22", "47-8337,92 9080,4968-8051,484-6300,4246 1198,9808-", "4152,2852 8202,4186-7675,1957-1324,8845-1042,7938-", "6983,5880 8023,1782-5108,782-1953,2329-4623,4524-3", "603,6922 7850,6051-533,2486-3684,7657 3605,2887-21", "68,8651 1012,7404-6420,9044-4924,2054 6706,2455-43", "16,2503-5911,2893-7417,6270-4270,534 320,6721-9207", ",9948-8683,1932-6397,3970 6126,7575-4215,4817-5829", ",3529-1027,3258-9261,8962 7046,2495-6811,8012 3080", ",3923-5536,7355-9453,7350-8749,2256-1462,9401 5432", ",9162-731,8157-4282,3006-8300,6627-3534,8890 3574,", "9917-5425,1897-8943,6069 9960,2880-5960,8439-3974,", "7314-6767,4389-4216,6230 4897,7692-4203,6407-8218,", "4132-8414,7209-6588,4844 9225,9458-3031,8299-3723,", "2200-2222,9101 2181,1980-9019,7756-1729,9496-7341,", "4486 5665,8703-4678,7809-2011,2071-1367,8811 7291,", "7224-5606,6886 4983,7189-468,9779-8879,9785-9103,2", "690-4871,1937 5445,956-5442,9667-9783,3864 7591,95", "29-2679,9902 4046,8712 1336,7014-3698,8944-6133,80", "84-7863,8681-8466,7680 7568,369-6319,9758-1792,550", "4-5170,1764 4953,6707-6236,3536-3437,3622-4303,999", "4 5282,4039-6455,240 5617,3939-2619,1436-9116,3479", " 563,2378 6883,2135 9726,3927-2239,2562-8594,6432-", "3746,5775 3739,290-3517,6519 4837,2879-7104,5312-9", "28,8776-2473,9620 5716,9814 6525,377-7260,10000-50", "05,3917-7559,6985 6152,4495-8242,4098 1980,5467-63", ",7044-9923,837-6149,4900-3675,8106 6148,8804-8617,", "3643-1507,1863-9468,72-7332,2585 5395,7590 969,483", "3 9211,9-5477,8699-5743,1190-3107,5540-439,6744 51", "93,5928-4731,8491 3348,2133-4719,5362-4829,3420-18", "31,7304-4893,370 9727,2392 814,1644-1421,8484 8243", ",753 6066,4939-5273,5506-698,1993 3118,6725 9559,1", "151-5650,1695 8560,8999-3892,5836-8228,6865-7217,4", "697-5511,950 3960,3451-2772,8612 8838,3550-8823,34", "54-4152,831-7556,3665-641,8349 2336,8986-4451,5435", "-5074,1334-6305,287 1001,9594-1623,233-7013,7592 5", "624,1551-577,7846-6684,9174-9076,4031-9263,8594 86", "90,7228-7013,3381-6796,7676 9210,2126-2413,8600-16", "16,5514-7595,3086 6265,4709-861,9942-5566,7816"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> polylines = {"3172,1454-208,2538-6065,9969-256,2335 5770,5827 44", "43,9992-5779,288-229,707-8523,6640-7505,6874 6131,", "2692 3351,8664 7798,7376-548,7874-9162,336-7480,15", "95 3222,1851-7621,8402 3143,8394 3850,5251-2970,43", "36 474,1209-4980,2525-5101,6605 1520,1034 472,8833", "-247,2646-4241,9634-2208,7727 610,2027-4767,4792-7", "935,82-5333,8873-4287,2863 5497,6315-8840,9856 501", "9,7540-8574,6278-8377,6539 1022,7012-6645,8732-645", "8,6343-3513,9933-542,9565 1703,5410-4282,7318-181,", "8115-7497,8570-5145,7575 6700,7494-2512,5970 130,4", "544-4107,2433 2839,4534-876,4865 4390,4797-6418,99", "40-6428,3773 710,2170-2351,7315-4811,358 3241,5503", "-3281,9577-2089,290 3298,5913-19,849-5384,439 6260", ",6383-2259,4313-5331,1728-5502,8677-7877,1759 6270", ",3548-3906,1101 9409,3184 3768,2761-5929,6769 9227", ",2681-2701,3034-8418,744 5757,7127-9386,2029-7361,", "7485 9120,4065-2815,8097-4366,2667-7652,4995-8180,", "6525 2019,3003-851,1906-4091,7948-7174,3532 8997,7", "312-5029,6622-2378,6123-6588,7058 5729,5497-5695,6", "086-9981,4904 4975,9270-6873,7092-5230,4233-6252,9", "54 5278,1805-5338,2306-510,3530-2526,3728-8757,821", "2 6894,589-2610,6316-3123,2390-9165,9776 8605,9756", "-4730,8375-5247,5697 6201,926 9086,9142-2527,2651-", "6181,4423 8708,9230-9066,1248-2917,8436-4751,7038-", "506,6606 9671,6381-7215,8058-6432,8276-3972,1945-3", "066,2757 438,36-9122,6198-8725,3089-9271,4623-3853", ",2840 3997,5168-8085,8571-3321,1034-1540,5769 1211", ",3229-443,1409-7841,9487-4537,3467 1592,6533-6972,", "633-9756,7790-7593,60 433,409-9466,9310 8036,3306 ", "2435,4340-6960,1611 8171,4840 8736,5284-8751,7194 ", "5284,8870-582,5943-4812,2255-3394,1416-6873,2404 6", "183,3916-595,4348-3463,567-5987,6438-8050,6977 288", "9,3843-3196,2195-930,8173-6924,390 3286,9260-9842,", "1223-7114,5541-13,1257 4896,8131-5392,4513-6188,92", "45 2625,3786 674,762 4643,5684-8881,322-1252,2815-", "817,349 4103,9609-529,9915-7028,722-1815,2865 6711", ",2074 5955,8545-5583,9405-3108,819-1582,9686 8345,", "7814-9215,9505-3398,7225 4216,7574-8262,9158 9870,", "9072-7179,1199-3014,2734-4809,5882-9099,9725 9582,", "5680 2690,7578 8631,9160-7505,8593 5808,7807-9353,", "1532-6827,4461 6225,2722-2591,8661-6918,7424-437,6", "404-2291,2800 5645,1898 6738,2559-6328,4498-4736,7", "517-7188,4958 6074,3092-5703,9128-3588,5426 7389,5", "015-4755,8755-7257,1058-7462,1672-5551,7694 7450,8", "934-5854,6477-3214,1087-7415,1430-6166,731 9486,79", "19-5071,6543 497,3324-5854,3279-1746,6591-2424,568", "7-2943,2804 636,265-1097,726-9255,9571-6503,7574-1", "867,341 3677,8835-2285,4098-4662,2674-7746,9907-32", "31,4353 9085,8711-456,5912-9416,4772 4591,7715-943", "1,4605-6781,5317-4572,79-6582,5434"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> polylines = {"7534,4764-8746,2285-888,4775-8574,3610-5940,2789-3", "709,5095-9628,3889-5841,4336-9168,8174-6179,2504-5", "254,6992-1498,188-558,6271-6210,8129-3463,8025-386", "7,7791-1154,2075-6851,2613-7302,2042-5910,6503-159", "7,3241-8209,9619-5033,2303-476,5129-7633,4201-2271", ",7734-9002,2886-236,3770-2977,638-9742,7525-5315,6", "440-8516,4688-8380,7548-9590,6445-4026,5681-0,6579", "-6197,5624-7927,8210-4417,1230-5431,9483-8295,2049", "-6014,7702-2550,7296-9014,6250-3775,5527-1967,8755", "-3442,168-7717,1561-9085,1821-8581,8385-4963,3110-", "9813,8582-7870,2239-3469,8819-8301,2286-5414,9979-", "8759,7674-4970,1427-8757,1309-6836,5062-3816,3610-", "3778,9882-2521,7259-158,2573-958,1605-5795,8740-84", "00,7000-9239,5607-4425,7348-9634,3786-3764,3804-14", "78,5047-7553,2523-4911,7527-2588,6309-9919,1746-27", "07,6404-4741,4776-7349,5228-7913,5979-4718,9386-63", "86,3707-9314,4196-1543,6703-489,4818-8622,2255-838", "1,4253-7855,99-8705,5933-2242,3844 3239,6670-9377,", "8776-4595,8015-6443,5683-3595,573-6370,5828-3292,7", "302-7695,565-3187,9996-484,2512-1133,5442-3822,581", "6-4750,2312-1016,9756-3076,8594-5263,2309-2163,739", "4-6488,4639-322,6758-8411,2930-8758,4996-2298,5859", "-6425,3129-3124,9993-3583,690-6133,3608-502,4716-8", "107,1033-1867,5252-3846,9124-2511,4943-3416,9109-4", "827,4674-2510,9904-2833,5149-144,1999-7859,2669-57", "98,3521-4592,5362-6052,0-4687,8175-3970,3263-4297,", "5190-441,2076 5366,2278-5868,2186-5602,4475-380,16", "20-5210,5505-9417,5529-6752,7209-5067,3164-41,1352", "-5944,428-6481,41-4729,5198-246,9744-5119,997-1438", ",3401-5680,1283-3469,7884-3437,2626-4247,9071-5654", ",3817-424,9457-6665,6149-9313,8255-9607,1732-3239,", "9354 798,474-5203,1827-2073,542-5661,6200-8717,547", "4-2232,8023-1491,7679-1115,4859-184,1640-8373,4932", "-5356,9641-7384,4521-4913,3611-4296,194-3434,5345-", "5819,925-3831,4232-5853,2100-8300,5904-2457,2593-6", "15,8096-6853,5768-626,3186-5905,7969-3979,1889-260", "8,4278-9878,9336-4025,9993-1265,4790-1214,9400-325", ",5778-1089,7033-9134,5235-1139,6942-613,8512-7686,", "4675-442,2308-5494,4539-2507,2148-4037,1398-6755,6", "486-6900,6646-7717,6633-2501,2003-1403,8982-4760,3", "715-748,2807-8042,6928-3869,960-9472,259-6013,5562", "-7870,7158-1696,6456-9683,4442 4798,6919 1443,3674", "-1385,9747-1749,238-9221,3886-8681,4231-7038,5059-", "1986,507-1467,6159-7497,6934-3574,938-9175,3510-10", "44,1443-6964,1949-7231,726-5524,3883-7557,77-9824,", "8047"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> polylines = {"8459,4087-4343,5759-5919,7978-491,9006-4261,1250-3", "453,3565-9887,3986-600,6982-1953,8225-6330,7798-91", "50,9657-2973,4286-9243,6300-6448,764-4359,2122-620", "9,7363-3121,3897-2953,551-636,9040-1368,3444-8089,", "4897-9962,5900-2881,7975-6200,561-8359,5913-5570,3", "608-8973,8587-4886,8543-386,8215-336,2412-9775,582", "4-9721,6546-8176,3975-4093,2674-7197,9891-4788,654", "1-2440,5285-4339,5828-6390,6401-3392,1617-5225,474", "8-4414,40-8584,5276-3490,9300-1712,48-5872,4905-25", "29,2565-7619,5593-9346,705-595,2791-9332,6542-2906", ",6462-2290,2850-329,7245-8862,9759-5585,3722-3762,", "5165-440,9999-9299,3424-4551,5009-9914,2089-5733,4", "23-7095,3522-4227,4431-7222,6440-4060,5901-3442,76", "32-481,6966-4210,5732-6569,1890-5612,4150-9315,215", "3-2152,452-4956,833-5842,2529-5697,9507 2508,1008-", "8103,356-5662,6939-5239,5621-9682,1562-6083,2870-4", "431,6647-1936,2893-9462,6321-3011,6086-6480,1615-4", "846,3463-9498,7313-4234,8454-5229,9005-1091,2147-3", "582,7737-5755,9195 993,4815 4943,5575-3301,7968-86", "0,9374-6773,5237-2401,1401-3016,9784-4325,8881-727", "3,8941-7394,3823-3906,2585-4732,2622-1437,4997-527", "0,8314-8636,7192-8186,1164-6739,519-9566,4207-3580", ",39-6355,1505-2906,352-1214,8757-8716,5922-5941,55", "39-440,7067-9652,3334-7035,4346-422,5462-3775,8472", "-5664,6771-7935,3489-4009,4928-9135,4674-5792,4653", "-6158,3793-5224,2147-1982,9064-6064,6438-3055,697-", "8844,3083-6417,3496-8921,8495-3957,3451-3002,421-7", "193,8811-2300,8666-4672,6206-879,7388-3119,4885-86", "78,7751-9898,9278-9420,4980-2496,1879-3655,6563-96", "46,5551-125,2498-2072,7142-1671,125-1625,7108-6997", ",4673-4417,9897-6103,375-7763,9089-3973,8061-5811,", "1961-2317,3729-8709,5708-8666,1736-9378,2283-8914,", "2321-5898,102-7244,9039-242,7970-6156,8915-4667,18", "68-1764,3153-3528,9084-9252,7867-7007,2370-4331,43", "03-9112,2817-8526,6648-9463,8899-1182,8270-590,884", "1-8943,95-212,7568-6616,7265-7258,455-3402,2772-59", "25,1924-2087,6245-4112,9453-2901,1338-6720,2197-50", "14,7232-4958,5831-4730,4618-2888,4421-4340,6991-70", "86,4557 7298,2124-8741,546-8883,8832-2233,1512-851", "6,807-2894,8479-3669,7968-1948,5311-3109,5866-1958", ",9180-4138,8941-4749,6577-9465,9638-3977,1739-9904", ",4021-7225,8338-9963,8280-7112,5965-8556,8845-9652", ",423-9981,7071-6117,3624-13,4728-1672,8065-8324,31", "23-3142,3631-207,3540-3177,8970-708,9672-4771,7154", "-6570,1690-9970,1995-9039,6532-5376,8160-9663,7594", "-5743,5028-9731,9643-5450,1860-1003,9745-3946,7122"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> polylines = {"266,3870-942,6949-2703,3751-8851,2767-4999,3056-60", "37,6057-1963,2568-82,3317-5120,2409-8210,4186-3231", ",6341-3994,1262-838,3132-435,9175-3589,2185-6055,1", "358-9386,3856-8686,8076-843,3167-6224,7536-3593,69", "21-567,2260-5578,5556-7965,650-5915,1776-9196,7254", "-8516,9146-3357,3189-2363,433-2618,4871-7308,5952-", "886,8674-6749,7772-938,9572-7108,8671-5591,7162-50", "1,700-7335,6159-7888,6079-8934,6379-3632,3802-4026", ",9208-2396,3226 5838,3659-6278,3332-639,2868-3755,", "6030-3857,8411-9350,3326-1512,3607-9198,6511-7012,", "2212-626,6435-4322,4169-4181,7005-1715,9203-4308,3", "388-6863,4941-9680,2769-6102,3779-6648,7036-3065,7", "820-6231,1481-4807,8001-1607,6659-4248,6320-9611,1", "884-8319,2339-7587,1315-8320,3720-4001,1768-6235,1", "113-6055,8309-2157,3098-6877,6813-3848,8259-6078,4", "603-6084,7992-5992,3387-1124,1970-8290,8679-1641,5", "373-7712,8979-294,9960-4758,5298-8145,9693-806,876", "0-8147,4380-8557,7940-4752,303-9641,5433-1115,8600", "-7670,6798-1263,7199-9169,4740-3418,2388-8840,8537", "-7516,5059-6098,6551-2927,8889-8581,1934-693,2151-", "6531,465-8405,9920-1301,5087-1598,4235-3913,942-88", "19,3792-991,1582-6323,81-2469,159-9776,819-5879,13", "08-8938,7291-7258,3055-4989,2944-5095,6917-7383,67", "62-7760,2704-8870,6866-1101,9061-1081,1546-5339,50", "14-7676,9900-9982,6330-7568,3998-4817,3529-5917,73", "43-5712,1774-4829,5933-9956,4048-965,897-8738,6129", "-8833,9427-6292,6497-5557,8781-1406,8472-4565,6639", "-7617,6745-4153,2240-6238,8677-2206,2799 9202,1221", "-8012,3908-9816,6213-6169,2060-3025,712-9450,2297-", "2209,3530-9822,7025-2582,2068-3474,9373-3937,299-8", "995,1297-5450,7256-4572,7672-9878,9329-549,6705-61", "2,157-6370,9640-1699,428-2219,3617-5915,5803-9333,", "2748-9773,9203-1270,233-9606,3433-4811,5824-7121,4", "621-1876,3806-1477,3650-2978,6448-4231,2433-2590,4", "606-4245,4844-6351,38-3656,7024-2826,9649-3475,649", "-9852,3238-3471,3248-6681,2200-8024,4155-8776,1492", "-6377,5145-9874,1730-9257,7854-286,2851-8536,3487-", "9410,3955-3993,3859-882,6839-7567,7649-8298,4788-8", "026,1041-4289,8149-1428,2575-6730,2049-4620,9452-5", "675,6584-9393,996-8850,5548-9478,9728-3214,214-416", "9,8013-1872,3703-1620,8162-5811,3833-8621,9187-228", ",5187-4415,7725-299,5596-7645,5843-6373,8108-5770,", "3343-5418,2048-8675,6241-5968,4267-5560,8153-7244,", "261-5043,9729-7891,194-4028,6663-5850,4780-9967,26", "48-373,7157-2752,5460-1302,1751-9860,1476-5898,875", "5-802,6708-2949,1316-6662,555-8708,8917-256,2222-1", "950,7031-7225,5299-1962,919-6778,2331-6059,8891"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> polylines = {"9410,4442-9514,4397-9345,4134-9651,4065-9630,3991-", "9481,3751-9515,3894-9596,3591-9847,3702-9679,3717-", "9822,3770-9919,3725-9766,3654-9908,3554-9677,3766-", "9730,3770-9810,3944-9703,3681-9712,3788-9593,3520-", "9688,3608-9508,3489-9386,3769-9247,3832-9415,3875-", "9439,4078-9300,4058-9233,4189-9428,4021-9527,4150-", "9638,4137-9641,3835-9592,3854-9828,3827-9876,3725-", "9780,3869-9975,4105-9752,3937-9570,3732-9302,3789-", "9530,3840-9632,3756-9482,3725-9356,3984-9224,3746-", "9015,3574-8953,3647-9024,3838-9296,3819-9278,3756-", "9417,3867-9545,3920-9636,4004-9766,4057-9901,4293-", "9887,4187-9777,3956 6370,8673-6551,8565-6646,8394-", "6852,8207-6884,8255-6652,8056-6574,8225-6429,8278-", "6325,8396-6442,8191-6227,8230-5991,8309-5714,8194-", "5586,8379-5483,8311-5603,8330-5686,8070-5470,8276-", "5492,8258-5238,8223-5422,8314-5354,8044-5425,8199-", "5274,8252-5487,8181-5615,8040-5612,8297-5678,8297-", "5463,8120-5674,7933-5831,7979-5975,7710-5753,7877-", "6056,7912-6056,7714-6002,7676-5870,7593-5986,7776 ", "1853,7604-2071,7390-2096,7293-2278,7343-2188,7583-", "2103,7867-1839,7883-1661,7986-1582,8153-1740,8189-", "1572,8179-1502,8462-1696,8265-1703,8327-2006,8339 ", "4694,123-4418,136-4377,361-4229,275-4080,125-4220,", "331-4467,341-4516,419-4544,683-4583,390-4895,427-4", "754,429-4834,526-4971,295-4718,320-4875,142-5069,1", "88-4916,82-5076,326-4939,562-4981,300-5119,245-520", "2,272-5496,287-5267,271-5426,473-5296,295-5580,345", "-5614,402-5465,137-5347,259-5555,364-5799,494-5948", ",318-6032,349-6231,215-6261,371-6311,563-6504,441-", "6791,312-6912,567-6745,762-6737,698-6630,725-6772,", "466-7017,380-6754,386-6685,503-6668,566-6677,283-6", "480,233-6459,433 8833,3562-8983,3831-8754,3974-879", "8,4155-8950,4095-9097,4091-9336,4077-9286,4389-951", "2,4486-9335,4589-9542,4626-9603,4883-9649,4598-983", "6,4519-9766,4561-9937,4384-9737,4549-9800,4839-955", "4,4916-9437,5154-9237,5265-9033,5201-9046,4990-918", "2,4796-9469,4800-9262,5033-9269,4740-9358,4655 271", "6,2899-2783,2821-2829,3018-2624,3242-2405,3264-226", "8,3006-2216,3092-2079,3322 6324,7741-6448,7812-639", "7,7948-6143,7805-5917,7995-5990,8051-6090,8039-585", "5,7959-5934,8068-6037,8339-6017,8265-6175,8186-594", "9,8069-5925,8199-6044,8177-6126,8020-6308,8049-626", "0,8359-6219,8128-6355,8366-6056,8385-5836,8258-595", "9,8207-6154,8053-6000,7949-6105,7802-6321,7870-646", "0,7791-6601,7609-6770,7745-6571,7831-6408,7870-640", "5,7860"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> polylines = {"2506,9485-2294,9632-2225,9788-2444,9564-2420,9672-", "2285,9602-2268,9431-2251,9497-2117,9476-1883,9633-", "2149,9530-2047,9612-2165,9836-1963,9993-2037,9962-", "2294,9846-2136,9979-2021,9783-1759,9780-1982,9869-", "1681,9787-1782,9662-1683,9732-1908,9857-1867,9810-", "1795,9582-1815,9362-1785,9541-1554,9525-1542,9464-", "1580,9331-1544,9611-1528,9650-1503,9641-1502,9828-", "1539,9567-1622,9730-1792,9507-1990,9672-2215,9703-", "2512,9736-2699,9765-2981,9823-2936,9948-2980,9861-", "3150,9708-2924,9750-3018,9897-2815,9924-3107,9933-", "3007,9836-2769,9647-3047,9792-3247,9741-3552,9758-", "3431,9965-3706,9894-3571,9774-3493,9658-3417,9448-", "3459,9345-3645,9401-3867,9480-3904,9206-3998,8964-", "4247,8922-4033,9126 6408,2115-6235,2240-6352,2466-", "6330,2612-6566,2452-6781,2310-6800,2235-6601,2252-", "6388,2267-6147,2154-6058,2411-6107,2167-6373,2134-", "6074,2132-5927,1926-6042,1911-5805,1780-5725,1766-", "5657,2056-5812,2021-5765,1864-5636,1591-5513,1791-", "5434,1529-5183,1525-4904,1621-4956,1594-5044,1319-", "4965,1236-4715,1363-4739,1470-4574,1397-4831,1515-", "4702,1582-4758,1835-4728,1712-4451,1660-4534,1540-", "4639,1621-4569,1593-4452,1317-4579,1311-4357,1095-", "4359,869-4493,665-4625,719-4314,681-4359,737-4307,", "869-4346,1056-4390,967-4672,1078-4661,1019-4915,10", "71-4721,928-4597,921-4335,766-4389,548-4318,489-45", "40,704-4618,786-4926,838-5004,760-5310,764-5014,68", "1-5186,899-5082,1090-5335,1028-5178,1151 7986,6774", "-8058,6974-8008,7050-8177,7167-8183,6967-8381,7129", "-8518,7165-8744,6966-8567,7210-8720,7010-8869,6790", "-9042,6651-9091,6810-9184,6988-9335,6860-9393,6860", "-9294,6874-9283,6923-9411,6822-9507,7022-9486,6782", "-9531,6474-9547,6627-9422,6383-9542,6399-9836,6376", "-9854,6438-9617,6267-9730,6124-9913,6245-9949,5973", "-9936,5967-9635,6018-9609,6252-9392,6037-9362,5843", "-9416,5737-9463,5610-9337,5411-9247,5400-9233,5497", "-9224,5641-9323,5424-9327,5405-9062,5388-8939,5368", "-9083,5483-9148,5447-8984,5221-8792,5306-8877,5356", "-8902,5366-8732,5245-8792,5036 2700,7134-2728,7398", "-2754,7511-2641,7502-2756,7311-2949,7454-3152,7385", "-3065,7331-2917,7568-2754,7697-2556,7481-2442,7363", "-2387,7419-2577,7492-2410,7598-2429,7749-2621,7666", "-2437,7854-2356,8069-2356,7856-2654,7823-2635,7723", "-2663,7992-2427,7933-2413,8160-2388,8260-2432,8486", "-2434,8612-2329,8391-2521,8495-2705,8640-2747,8838", "-2492,8924-2634,8789-2693,8956-2573,8707-2399,8583", "-2494,8387-2522,8076-2587,8121-2420,8029-2401,8307", "-2486,8155-2734,8002-2679,8073-2625,8120-2346,8132", "-2528,8217-2503,8505-2384,8752-2200,8964-2193,8751", "-1893,8826-2135,8978"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> polylines = {"8179,9509-8230,9579-8308,9586-8338,9589-8351,9629-", "8316,9568-8314,9491-8306,9401-8337,9431-8313,9522-", "8273,9496-8294,9488-8299,9514-8247,9478-8224,9564-", "8249,9644-8274,9560-8253,9468-8295,9520-8261,9604-", "8278,9695-8243,9623-8256,9697-8287,9709-8297,9653-", "8356,9694-8413,9649-8481,9626-8570,9620-8598,9654-", "8686,9619-8704,9639-8675,9655-8697,9630-8735,9671-", "8824,9704-8794,9705-8813,9788-8804,9736-8716,9781-", "8735,9818-8796,9759-8721,9790-8638,9738-8613,9767-", "8671,9800-8622,9842-8690,9817-8632,9844-8684,9890-", "8709,9858-8638,9866-8682,9938-8619,9906-8623,9956-", "8614,9922-8546,9983-8524,9946-8615,9912-8544,9880-", "8616,9863-8600,9925-8551,9977-8469,9990-8455,9965-", "8386,9997-8436,9933-8370,9930-8430,9999-8448,9937-", "8483,9991-8401,9943-8386,9947-8429,9886-8458,9933-", "8509,9966-8480,9995-8509,9905-8543,9853-8527,9795-", "8491,9823-8393,9833-8481,9877-8551,9879-8521,9909-", "8475,9945-8487,9893-8417,9883-8373,9801-8314,9832-", "8221,9803-8236,9840-8218,9918-8161,9859-8164,9780-", "8204,9704-8161,9639-8083,9683-8151,9730-8230,9729-", "8279,9671-8359,9706 3786,7896-9378,1488-3835,9199-", "3271,6452 2541,2889-1650,3596-6252,3983-4124,7146 ", "3034,8595-9745,6686-9643,1448-3528,5631 6157,5615-", "1858,6122-4480,3819-2793,1563 3052,8266-8543,2170-", "8623,7966-854,1814 5410,2242-6225,2504-729,1661-13", "35,1427 9192,3763-6290,2158-7789,8834-4448,897 701", "9,5024-9922,7385-26,2578-1922,2715 4885,4157-2122,", "465-2279,4586-6828,2976 6560,8768-1507,4131-6637,8", "368-3209,2842 5000,5828-5740,9499-395,3868-8892,18", "7 8651,8494-1071,8814-2607,8678-2834,4072 4537,749", "2-2078,6036-9012,7895-7741,9985 5195,6650-5017,924", "9-3169,1831-7660,8226 8804,8170-3116,3399-4666,919", "9-8771,3086 2978,4395-3072,9842-4993,5585-3077,698", "6 3021,9530-8504,6234-7297,3111-9762,6244 6571,249", "1-4323,5857-4083,9741-8989,3061 6460,2886-3163,210", "4-5190,2204-6600,1934 2854,8169-3753,750-8815,7847", "-8456,7909 4142,1835-6026,8038-4281,2518-5009,6866", " 2722,852-1671,9332-3471,7884-769,659 2763,9932-32", "14,5012-8025,9032-7200,892 2722,1957-883,2032-9941", ",1536-4451,9339 7376,5162-7680,476-7342,2735-4666,", "3767 3099,1142-9027,6337-6996,6570-7580,874 5886,8", "37-9870,1873-3844,4989-6947,7069 179,6566-8103,783", "0-8247,1199-7440,3632 5187,6701-9436,5119-9965,252", "8-3670,4102 438,4142-712,2696-4650,8514-9351,9371 ", "2322,535-5525,9220-7368,6167-3811,3550 1379,7547-8", "746,1913-6624,704-7405,7264 2382,1810-5417,6840-20", "20,3426-7568,9088 2862,2459-2051,9359-8730,7512-91", "27,1401 621,2130-9376,5730-9280,9068-7693,3187 510", "0,1737-2441,7518-4781,2803-4613,9846 6685,8243-166", "8,30-196,8706-2243,9236"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> polylines = {"2002,8776-2028,8684-2068,8696-2038,8738-2006,8707-", "2004,8746-1938,8696-1868,8680-1872,8715-1934,8684-", "1853,8659-1861,8619-1911,8560-1871,8508-1935,8465-", "2021,8506-1957,8498-1896,8506-1899,8469-1900,8376-", "1858,8425-1807,8399-1863,8402-1923,8384-1993,8438-", "2030,8468-2015,8437-2099,8403-2025,8356-2035,8380-", "2016,8382-2082,8349-2116,8304-2178,8257-2176,8216-", "2174,8273-2156,8270-2174,8224-2207,8197-2258,8114-", "2215,8172-2254,8178-2342,8192-2333,8232-2432,8224-", "2442,8189-2365,8131-2405,8137-2469,8187-2426,8224-", "2357,8270-2366,8357-2456,8351-2470,8427-2453,8512-", "2472,8485-2443,8471-2386,8433-2476,8450-2468,8400-", "2480,8426-2412,8359-2373,8389-2414,8458-2331,8459-", "2377,8453-2286,8415-2365,8380-2371,8449-2308,8495-", "2270,8422-2226,8367-2242,8453-2241,8552-2166,8580-", "2139,8582-2096,8654-2077,8709-2092,8705-2061,8680-", "2099,8686-2027,8661-1944,8716-1994,8639-2047,8648-", "1997,8619-2000,8642-1974,8596-1938,8652-1985,8626-", "2053,8644-2143,8665-2216,8728-2170,8780-2106,8714-", "2093,8758-2162,8819-2072,8855-1993,8860-2040,8773-", "1987,8733-1937,8748 8410,6463-8361,6462-8351,6535-", "8326,6501 3419,4928-3437,4933-3359,4905-3446,4877 ", "9086,6078-9005,6059-9021,5963-9050,5983 4631,3537-", "4544,3510-4581,3493-4492,3505 8019,4825-8017,4865-", "7935,4822-7998,4887 1125,1961-1052,2027-1036,2055-", "1033,2075 2513,5192-2457,5256-2447,5351-2528,5393 ", "4260,7847-4277,7755-4205,7720-4171,7779 1525,1887-", "1505,1952-1524,2049-1436,2037 4106,4203-4184,4158-", "4271,4124-4227,4133 7762,904-7705,870-7649,943-770", "1,986 7626,8387-7719,8367-7669,8284-7679,8243 5540", ",5937-5589,5880-5623,5835-5691,5782 2343,4781-2296", ",4744-2327,4727-2358,4796 2851,9035-2753,9034-2767", ",8966-2797,8892 9042,949-9012,859-9043,829-9090,74", "5 3710,4610-3738,4634-3751,4642-3767,4649 4255,856", "6-4241,8581-4224,8485-4209,8399 3470,7777-3527,775", "2-3597,7755-3533,7693 3206,4865-3184,4871-3179,484", "8-3213,4808 4808,3431-4781,3393-4733,3400-4759,341", "6 2092,6716-2116,6691-2078,6618-2009,6667 2029,645", "8-1934,6484-1940,6387-1984,6311 8345,6055-8365,604", "6-8340,6054-8271,6102 4293,8598-4216,8569-4171,855", "3-4144,8583 7120,5823-7171,5902-7102,5893-7070,590", "7 9987,6836-9990,6824-9979,6888-9941,6838 4503,648", "4-4562,6491-4555,6498-4500,6472 489,8039-445,8061-", "417,8151-460,8147 4395,8945-4427,8873-4489,8889-44", "38,8876 9795,4551-9777,4621-9729,4699-9793,4629 31", "51,5376-3114,5285-3140,5351-3104,5347 2992,1504-29", "81,1418-3027,1503-2960,1545 1829,872-1765,862-1723", ",851-1816,861 9267,3927-9300,3917-9354,3935-9265,3", "937 2555,67-2598,132-2637,188-2619,151 2342,9082-2", "400,9107-2379,9105-2404,9167"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> polylines = {"6660,9860-6590,9856-6517,9872-6603,9830-6603,9872-", "6596,9868-6555,9888-6517,9956-6507,9989-6602,9985-", "6674,9926-6610,9873-6651,9795-6719,9819-6656,9814-", "6717,9888-6751,9911-6693,9891-6676,9902-6628,9915-", "6698,9930-6664,9876-6664,9791-6617,9789-6622,9814-", "6715,9815-6788,9760-6806,9736-6708,9752-6613,9769-", "6572,9715-6595,9634-6542,9716-6591,9739-6512,9704-", "6527,9719-6450,9702-6513,9775-6540,9783-6551,9873-", "6515,9796-6474,9835-6493,9916-6489,9995-6560,9996-", "6506,9962-6563,9983-6501,9970-6455,9935-6378,9904-", "6429,9856-6357,9908-6305,9958-6298,9905-6314,9828-", "6240,9812-6244,9786-6204,9802-6184,9897-6224,9879-", "6284,9900-6256,9959-6173,9918-6253,9910-6215,9850-", "6169,9784-6262,9751-6263,9737-6322,9787-6360,9801-", "6416,9826-6503,9853-6540,9831-6474,9817-6528,9742-", "6586,9790-6527,9778-6542,9743-6491,9702-6483,9702-", "6558,9704-6501,9700-6430,9701-6457,9797-6472,9856-", "6456,9954-6395,9931-6449,9879-6512,9837-6526,9802-", "6514,9901-6547,9918-6578,9877-6584,9902-6528,9820-", "6554,9875-6538,9850-6547,9836-6544,9837-6635,9799-", "6606,9759-6547,9822 680,4587-907,4473-1073,4271-10", "86,4474 2756,7266-2742,7037-2485,7088-2523,6992 65", "48,6182-6601,6003-6629,6292-6749,6410 2762,8133-26", "88,8257-2562,8130-2863,8133 107,2287-174,2571-206,", "2289-115,2422 1161,238-975,184-1205,294-1151,300 8", "932,9460-8958,9173-9017,9406-8736,9343 2533,2619-2", "614,2322-2500,2258-2468,2442 3622,1147-3579,1268-3", "387,1045-3414,977 2494,2849-2424,2591-2675,2510-25", "38,2340 8616,4801-8854,4731-8972,4713-9163,4689 47", "62,2732-4543,2720-4436,2724-4239,2491 9572,4419-97", "85,4328-9845,4193-9830,4481 6259,3624-6365,3595-63", "86,3409-6641,3587 767,6994-710,6786-700,6470-615,6", "185 5477,7698-5430,7493-5248,7692-5314,7993 1082,4", "824-1327,4656-1079,4546-1091,4828 7264,2287-7425,2", "035-7669,1856-7455,1764 7693,7322-7768,7296-7767,7", "482-7676,7366 7084,8760-6871,8969-7157,8906-7051,8", "902 6915,3090-7077,3237-7163,3012-7323,3048 2672,6", "717-2449,6674-2581,6573-2790,6659 4955,3537-4900,3", "472-4818,3660-4660,3844 5515,555-5685,530-5901,408", "-6137,345 3811,8056-3650,8118-3545,8044-3775,7891 ", "6613,3488-6344,3565-6373,3823-6198,4040 284,9274-3", "47,9401-328,9504-171,9705 6281,6264-6167,6491-6120", ",6706-6063,6698 5566,2526-5421,2562-5522,2264-5301", ",2335 1579,1159-1764,1230-1753,1020-1864,911 3888,", "9169-3969,9023-4232,8884-4013,9105 6693,8593-6780,", "8747-6672,8966-6706,8680 9227,563-9452,461-9350,28", "5-9473,397 1218,297-1487,191-1583,421-1570,295 188", "3,7254-1913,7405-2068,7630-1949,7604 9615,3139-952", "3,3000-9705,2789-9761,2957 1577,3965-1367,4069-132", "0,4082-1504,3970"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> polylines = {"4520,4036-4616,4110-4789,4241-4860,4369-4875,4226-", "4942,4151-5223,4218-5021,4244-5183,4247-4990,4268-", "5153,4142-5025,4011-4913,4198-4815,4392-4947,4656-", "5071,4396-5316,4231-5153,4258-5377,4338-5394,4113-", "5450,4201-5535,4027-5288,4172-5106,3966-4950,3758-", "4997,3743-5165,3897-4994,3752-5010,3548-4794,3704-", "5077,3785-5150,3615-4937,3441-5160,3594-5417,3472-", "5255,3631-5180,3504-5360,3705-5384,3511-5429,3744-", "5420,3827-5348,3565-5217,3712-5471,3537-5535,3308-", "5733,3455-5761,3632-5691,3520-5753,3321-5885,3404-", "6062,3285-5938,3157-6187,3211-6045,3228-6209,2986-", "6211,3056-5951,2960-5778,2980-5730,2943-5587,2975-", "5460,3140-5224,2958-5221,2696-5103,2559-5397,2454-", "5320,2710-5032,2600-5173,2817-5306,3039-5134,3249-", "5279,3005-5046,2923-5204,3098-5111,2842-5076,3120-", "5197,3302-5326,3260-5420,3505-5678,3501-5635,3244-", "5637,3534-5440,3706-5397,3738-5208,3947-4913,3963-", "5102,3959-5279,4031-5575,4064-5342,4137-5197,4163-", "5244,4229-5097,4400-4932,4419-5241,4364-5357,4276-", "5325,4278-5432,4222-5271,3995-5443,3832-5225,3901-", "5369,3824-5280,3791 4776,90-4709,223-4855,193-4790", ",140-4784,157 1608,8326-1545,8437-1457,8587-1383,8", "464-1377,8599 9957,3637-9953,3680-9853,3791-9731,3", "877-9877,3773 1013,2836-874,3102-634,3197-700,2908", "-731,2595 5904,3313-6001,3426-5951,3320-5837,3517-", "5597,3469 8432,5802-8520,5844-8487,5936-8356,6022-", "8535,5942 9537,8933-9753,9026-9891,8959-9710,8861-", "9594,9133 9655,5111-9536,5244-9465,5484-9239,5475-", "9046,5253 6611,1370-6549,1405-6537,1625-6358,1411-", "6109,1576 4252,9855-4206,9565-4068,9668-4297,9821-", "3995,9885 8638,4348-8707,4288-8848,4045-8609,3935-", "8545,3689 9654,7592-9793,7641-9845,7335-9657,7290-", "9376,7301 3976,9501-3900,9318-3974,9178-3962,9201-", "3926,9361 7266,85-7085,92-6798,144-6859,133-7006,1", "8 4795,6970-4848,7157-4674,7339-4502,7361-4362,732", "9 9350,231-9157,151-9179,393-9421,286-9644,313 502", ",8645-712,8521-724,8536-513,8754-681,9021 7257,373", "3-7398,3832-7305,3759-7507,3672-7268,3654 4726,920", "4-4483,9179-4466,9176-4275,8947-4223,8644 8125,825", "4-7969,8424-7941,8453-7827,8193-7550,8324 6519,138", "-6582,405-6702,113-6572,352-6353,526 4091,9055-418", "1,8843-4324,8869-4095,8653-4365,8638 885,387-1097,", "533-1145,472-850,473-758,675 8355,4109-8099,4190-7", "970,3955-7813,3922-7897,3988 3106,5082-2825,5189-2", "783,5137-2869,4925-2618,4838 1991,3427-1708,3485-1", "903,3579-1913,3392-2049,3271 9180,1550-9160,1837-8", "940,1957-8801,1963-8788,2214 2082,4038-2193,4057-2", "449,4004-2602,4223-2562,3974 8430,1454-8367,1180-8", "558,1153-8272,1031-8174,1113 9746,6347-9853,6584-9", "749,6767-9640,6997-9420,7190"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> polylines = {"5708,6513-5950,6520-5977,6298-5957,6182-5970,6028-", "5697,5995-5418,6018-5450,5772-5501,6075-5391,5808-", "5655,5905-5795,5736-5769,5479-5660,5275-5872,5387-", "5746,5272-5818,5094-5554,5177-5477,4933-5370,5212-", "5610,5344-5837,5405-5742,5300-5972,5414-6005,5268-", "6163,5485-6133,5340-6007,5388-5947,5437-5966,5422-", "5999,5204-6282,5219-6044,5229-5773,5114-5602,5277-", "5591,5454-5446,5444-5451,5714-5371,5548-5231,5268-", "5170,5211-5284,5329-5214,5499-4946,5354-5008,5443-", "5248,5292-5532,5352-5382,5446-5392,5146-5287,5095-", "5130,4873-5372,4937-5352,5063-5390,4937-5168,5111-", "5200,5262-5006,5307-4785,5471-5027,5543-4968,5485-", "4771,5630-4610,5661-4532,5768-4282,5810-4008,5737-", "4244,5833-4331,5709-4338,5457-4196,5336-4247,5221-", "4086,5367-4239,5207-4331,5325-4300,5610-4271,5653-", "4057,5829-4225,5988-4524,6063-4324,6122-4568,6129-", "4491,6334-4430,6165-4636,6080-4682,6275-4675,6249-", "4913,6413-5161,6306-5058,6107-5267,5979-5300,6132-", "5323,5889-5362,5778-5304,6077-5151,6306-5340,6499-", "5192,6427-5384,6586-5466,6677-5579,6910-5459,7025-", "5665,7262-5954,7237 9722,446-9915,668-9976,647-994", "7,595-9645,644 2614,7180-2520,7327-2358,7324-2067,", "7238-2162,7219 6595,4906-6830,5036-6725,5105-6766,", "5162-6653,5288 8370,7590-8170,7501-8125,7410-8247,", "7351-8195,7088 4348,242-4128,362-3954,606-3708,804", "-3898,806 5414,1737-5631,1608-5679,1898-5630,1731-", "5589,1841 5790,5049-5796,4854-5803,5133-5738,5174-", "6035,5214 1111,290-1026,490-1120,778-927,705-1089,", "533 2400,4326-2651,4314-2511,4427-2344,4317-2341,4", "022 203,4839-136,4899-84,4733-221,4945-390,5140 66", "88,9723-6824,9597-7083,9593-6972,9311-6836,9181 57", "36,9902-6028,9791-5850,9643-5547,9680-5528,9407 20", "55,812-2243,1022-2409,863-2551,863-2817,704 3922,5", "88-3812,785-3938,723-4116,522-3912,417 268,9938-53", "5,9783-318,9687-18,9779-258,9789 8235,7598-8151,75", "40-8367,7414-8131,7467-8437,7519 1720,189-1742,330", "-2044,253-2216,51-2333,302 3583,5406-3508,5283-347", "5,5118-3204,5252-3313,5499 7327,3466-7391,3460-759", "9,3349-7446,3302-7457,3415 2740,9662-2888,9463-299", "9,9563-3005,9612-3126,9374 6286,1729-6333,1503-636", "1,1731-6503,1471-6453,1770 68,1801-77,1976-178,171", "6-255,1661-382,1372 8300,2203-8252,2137-8056,2015-", "8099,2110-8063,2356 5069,1258-5029,1467-5058,1499-", "4938,1281-4997,979 6908,4133-6915,3920-6794,4161-6", "712,4396-6879,4664 7061,5446-7105,5689-7317,5647-7", "167,5777-7232,5622 3661,3078-3433,3060-3303,2805-3", "431,3003-3511,3055 5857,7777-5653,7773-5488,7897-5", "513,7701-5633,7834 334,1730-568,1703-548,1526-390,", "1574-629,1710 6222,7640-6203,7686-5932,7635-5927,7", "657-6035,7767"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> polylines = {"2910,3129-2684,3099-2840,3005-2662,3180-2591,3462-", "2346,3526-2344,3662-2400,3864-2276,3763-1984,3823-", "1936,3988-1847,4118-1863,3931-1709,3729-1598,3501-", "1331,3653-1166,3509-988,3594-986,3478-951,3710-721", ",3653-887,3762-778,3469-644,3343-941,3380-724,3247", "-892,3505-661,3542-420,3563-382,3257-129,3235-148,", "3159-374,3291-146,3085-39,3357-102,3589-237,3617-3", "86,3554-220,3342-52,3147-39,2910-65,2621-260,2622-", "332,2731-393,2922-366,3040-251,3223-427,3346-155,3", "306-397,3426-464,3630-245,3783-401,3951-444,4126-7", "11,4207-417,4321-427,4477-342,4696-402,4964-257,48", "59-103,4662-154,4609-296,4718-350,4440-387,4435-20", "3,4549-83,4618-193,4651-196,4737-41,4688-260,4602-", "252,4552-233,4747-293,4951-395,4746-99,4777-84,502", "0-286,5096-113,5219-94,5491-233,5522-522,5646-554,", "5360-366,5361-218,5288-473,5295-697,5083-420,5151-", "329,5339-181,5384-325,5328-271,5293-469,5271-169,5", "346-168,5232-370,5183-417,5095-461,5228-571,5360-8", "77,5367-882,5656-727,5572 1659,5509-1694,5472-1784", ",5402-1895,5380-1866,5429 5762,3916-5811,3913-5803", ",3915-5954,3771-5949,3526 455,5142-629,5018-538,49", "21-528,5164-639,5457 9808,4421-9783,4696-9507,4553", "-9475,4489-9670,4498 6307,692-6355,381-6149,549-60", "65,479-6201,317 668,9331-802,9377-930,9521-760,958", "7-944,9447 4417,7448-4167,7592-4388,7603-4219,7555", "-4185,7769 9999,8609-9927,8737-9639,8845-9512,8910", "-9289,8840 5917,8502-5871,8715-5966,8903-5814,8810", "-5998,8658 8859,1866-8754,1705-8812,1573-8781,1492", "-8812,1723 9585,2931-9459,3031-9458,3035-9557,2914", "-9859,2998 4483,6864-4276,7093-4135,7319-4046,7545", "-4092,7266 3149,3986-3310,3717-3140,3701-3186,3909", "-3176,3650 3490,9709-3726,9818-3674,9933-3588,9637", "-3860,9645 4287,6472-4112,6274-4286,6435-4481,6251", "-4436,6426 6117,2879-6021,2687-5931,2962-5996,2711", "-6127,2780 515,2733-767,2570-647,2523-802,2307-847", ",2200 8589,6945-8370,6914-8541,6888-8683,6788-8838", ",6847 9191,9943-9131,9934-9246,9970-9231,9812-9318", ",9904 8544,2744-8465,2778-8488,2953-8675,3192-8654", ",3354 205,9271-210,9282-28,9171-289,9319-498,9453 ", "1208,5181-1162,4934-1202,5003-1427,4851-1344,4582 ", "6030,8678-6296,8792-6036,8677-5921,8688-5989,8674 ", "4699,6548-4761,6705-4958,6942-4691,7077-4754,7090 ", "9349,4281-9195,4378-9318,4478-9156,4480-9107,4486 ", "1846,211-1717,321-1803,343-1943,126-1718,225 1602,", "950-1812,811-1911,1028-1961,769-1728,916 7831,157-", "7961,83-7957,208-8131,305-7839,403 8245,3047-8419,", "3179-8505,3074-8450,3017-8499,3117 7418,4799-7586,", "4673-7362,4526-7574,4601-7587,4732 9320,479-9405,6", "40-9414,410-9491,599-9396,741 8750,2983-8840,3096-", "8647,2847-8799,2877-8664,2635"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> polylines = {"691,8861-496,8880-405,8746-541,8682-803,8711-525,8", "635-517,8483-475,8691-629,8857-720,9012-579,9146-4", "21,9350-118,9407-16,9448-194,9688-174,9725-377,960", "2-521,9840-436,9879-236,9823-344,9571-402,9458-671", ",9301-826,9389-588,9342-638,9431-539,9656-591,9782", "-711,9618-765,9909-694,9884-820,9966-952,9806-1003", ",9996-1068,9980-1338,9940-1040,9925-1271,9741-1084", ",9940-1132,9836-1407,9844-1323,9796-1361,9721-1566", ",9570-1760,9621-1804,9567-1820,9667-1907,9640-1837", ",9339-1760,9114-1475,9026-1333,9104-1422,9166-1239", ",9108-1188,9360-1261,9124-983,9108-1016,9018-980,8", "880-1084,8589-980,8807-1094,8612-991,8592-1215,837", "8-1297,8271-1513,8239-1326,8453-1400,8185-1341,815", "6-1445,8361-1380,8054-1545,8076-1393,8229-1329,850", "6-1368,8444-1338,8307-1424,8566-1331,8700-1450,872", "9-1271,8971-1163,8869-1060,8878-804,8711-740,8910-", "684,8951-695,8765-524,8762-719,8862-956,8836-1063,", "8979-1358,8934-1201,8911-1328,9030-1220,9133-1064,", "9024-933,8954-1113,9103-1115,8948-862,8973-847,894", "9-682,9056-745,9311 6280,1954-6521,2064-6611,2088-", "6872,2097-6762,2012 1988,4139-2240,4209-1998,4327-", "1983,4514-2042,4643 2961,3065-2874,3130-3131,3215-", "3373,3056-3197,2794 233,2485-206,2742-203,2957-356", ",3223-259,3440 4216,7293-4258,7387-4356,7417-4370,", "7327-4201,7088 18,1229-80,1526-327,1692-518,1544-5", "55,1421 7658,3863-7605,3775-7875,3688-7762,3806-77", "31,3557 4902,5829-4916,6003-4811,5930-4899,5784-47", "39,5651 4735,3567-4970,3720-4891,3983-5174,4012-52", "13,3947 8,6917-251,7100-333,7006-425,7206-351,6909", " 4586,8058-4602,7781-4554,7710-4523,7829-4312,7860", " 2192,9264-2035,9258-2217,9148-2439,8940-2299,8839", " 9084,4398-9213,4559-9422,4541-9448,4556-9575,4719", " 6805,4950-6843,5214-6675,5357-6958,5414-7031,5660", " 7634,83-7458,333-7222,210-7375,19-7437,227 1716,5", "99-1835,343-1774,206-1511,336-1351,362 6475,8657-6", "214,8708-6070,8677-6097,8401-6082,8204 8489,5807-8", "656,5555-8701,5737-8612,5772-8327,5831 1626,6797-1", "341,6672-1520,6485-1489,6508-1553,6526 1869,2453-2", "076,2663-2219,2758-2400,2552-2122,2675 8415,1159-8", "417,902-8426,1010-8206,831-7901,849 3456,5603-3600", ",5395-3492,5634-3457,5360-3751,5439 4324,3438-4110", ",3257-4213,3273-3959,3123-3680,3184 6361,2448-6193", ",2702-6291,2844-6141,2770-5936,2814 9695,7587-9710", ",7588-9786,7700-9795,7456-9742,7389 5419,9965-5303", ",9964-5363,9816-5499,9576-5241,9733 1358,8287-1511", ",8434-1364,8281-1109,8190-925,8290 385,2966-544,31", "34-580,3315-571,3258-445,3017 5229,8806-5127,9001-", "5228,8842-5235,8722-5319,8611 4877,6225-5178,6165-", "5201,6461-5487,6401-5594,6594 2855,6524-2864,6599-", "2930,6731-3030,6910-2776,6849"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> polylines = {"6289,6349-6163,6415-5972,6459-5858,6684-5906,6854-", "6141,6667-6393,6739-6409,6507-6570,6472-6362,6257-", "6303,5967-6247,6096-6122,6241-6415,6240-6350,6159-", "6586,6002-6695,6016-6914,5914-7005,5841-6876,5811-", "6941,5922-7165,6092-7052,5901-7352,5842-7138,5813-", "7278,5888-7500,5848-7478,5772-7749,5882-7752,5991-", "7947,5892-7997,5911-7932,5918-8018,5866-8170,5976-", "8005,5833-7832,5696-7809,5803-7668,5625-7742,5420-", "7831,5271-7661,5249-7521,5306-7697,5294-7787,5134-", "8042,5021-7881,5216-7669,5393-7894,5352-7641,5290-", "7837,5169-7619,5303-7623,5520-7510,5613-7759,5434-", "7672,5599-7435,5462-7179,5526-7247,5769-7259,5687-", "7133,5844-6834,5876-6653,5811-6597,5755-6444,5489-", "6551,5562-6795,5696-6631,5483-6586,5409-6510,5609-", "6273,5805-6184,5613-6238,5375-6494,5421-6618,5328-", "6770,5224-6776,5303-6734,5288-6829,5588-6721,5390-", "6726,5227-6509,5241-6405,5246-6480,5165-6588,4977-", "6810,4957-6613,5195-6509,4973-6602,4937-6761,4774-", "6894,4587-6992,4292-6740,4367-6796,4417-6781,4493-", "6717,4471-6591,4571-6424,4596-6392,4288-6633,4096-", "6456,3968-6502,4264 897,9157-727,8568-1427,7887-21", "00,7942-1912,8145 2834,6943-3182,7272-2546,8005-27", "90,7430-2007,7879 5321,3922-5166,4497-4516,4398-41", "16,4311-3163,4227 9167,947-9181,292-9453,259-8691,", "524-8499,210 7384,5953-6538,5578-5861,5386-5580,59", "69-5497,5293 5576,7837-5120,8616-5913,8569-5014,87", "45-5907,9035 2098,1819-1799,2307-1000,2489-1807,20", "10-2091,2368 2502,6784-2175,7083-1410,7723-1811,85", "61-1618,8899 9208,7859-9438,8047-8604,7617-9396,79", "62-8758,8548 5081,8153-5177,8845-4975,9127-4859,91", "12-5351,9358 1771,6359-2216,5502-1644,5523-1444,45", "47-1830,3712 7601,966-8123,1331-7494,957-7019,1739", "-7268,2240 4979,8929-5244,8619-5906,8414-6013,7993", "-6436,7857 7057,5364-6182,5438-6101,5098-5666,5730", "-5488,6220 2582,8830-2880,8230-2085,7711-1345,7159", "-1697,6657 3665,1807-3475,2764-3682,2652-3752,3575", "-4117,2999 1558,3457-700,3355-636,2836-1142,2060-6", "70,1342 7709,1455-8429,1133-9033,649-9357,1125-874", "6,1422 8345,2917-9277,2774-9648,1883-8828,1361-901", "0,1012 9758,2692-9380,3577-9863,3627-9633,3311-959", "2,4126 3683,4288-3592,4378-3430,4944-3115,4414-307", "3,3486 4880,6919-4645,6170-4410,7115-3556,7627-291", "0,7277 9292,245-9890,488-9657,819-9449,199-9491,77", "3 1280,9936-872,9338-1123,9205-149,9142-109,9555 1", "748,6115-2347,6713-2025,7329-2449,7310-3146,7393 8", "611,4460-8762,5397-8034,4770-7754,4238-8564,4260 8", "815,9080-9319,9084-9703,8480-9551,8153-8939,8072 9", "254,2255-9596,1797-9804,1232-9509,2064-9912,2731 5", "844,263-5555,13-5622,305-4875,780-4162,760 2789,59", "50-2623,6239-2910,5731-3374,5201-2622,5348"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> polylines = {"6519,3555-6441,3647-6413,3749-6394,3598-6265,3837-", "6275,3651-6383,3911-6491,3745-6783,3776-6623,3919-", "6530,3671-6538,3964-6314,3934-6408,4000-6310,3898-", "6573,3874-6357,4084-6277,4193-6453,3931-6608,4032-", "6370,4040-6378,3949-6136,4018-5994,4045-6146,3797-", "6199,3823-6010,3625-6140,3497-6313,3420-6597,3354-", "6335,3375-6471,3195-6449,3161-6560,3353-6777,3164-", "6718,3124-6786,2870-6720,2822-6474,2900-6416,3064-", "6649,2878-6513,3121-6457,3322-6424,3574-6301,3646-", "6220,3682-6373,3916-6535,4125-6319,4262-6623,4203-", "6736,3931-6748,4180-6812,4357-7091,4314-7161,4020-", "7172,3764-7025,3865-7167,3933-7274,4191-7334,4444-", "7047,4418-7329,4331-7312,4578-7151,4594-7072,4802-", "7251,5055-7101,5193-7266,5388-7326,5426-7169,5342-", "7305,5063-7576,5067-7661,4787-7751,4744-7674,4533-", "7742,4695-7483,4706-7402,4992-7718,4998-7871,4921-", "7679,4824-7736,4761-7552,4593-7365,4644-7304,4469-", "7493,4647-7343,4843-7529,4643-7489,4736-7724,4884-", "7675,4870-7577,5001-7613,4999-7531,4931-7800,5006-", "7675,5105-7518,5092-7522,5233-7399,5079-7378,4814-", "7453,4892-7455,5124 4946,9576-4180,9751-4029,9313-", "4411,9536-5041,9373 7180,8714-6931,8487-7652,8003-", "7355,7584-7296,6805 9571,4651-9263,4763-8506,4893-", "9178,5184-8938,6119 7852,7828-7090,7946-6322,8060-", "5767,8598-5202,7896 9230,5401-8803,5165-9741,4870-", "8863,4679-9372,4861 3444,1181-3685,1021-4445,510-3", "721,660-4047,1230 5186,1128-4831,736-4758,468-4455", ",1176-5373,1475 9793,8090-9963,7584-9761,7744-9680", ",8430-9309,8431 5880,6993-5257,7523-4381,7480-4481", ",7661-4407,8388 3493,6433-3598,5595-4044,5929-4019", ",5739-4514,5165 7791,7378-6942,7741-6758,8646-7402", ",8441-7303,8478 8211,8562-7436,9184-8371,9074-8971", ",8669-8468,9047 4631,2046-5130,2757-5636,2321-6043", ",3221-6445,2313 6216,1169-6355,1149-5358,1222-5829", ",1104-5785,1721 7016,8843-6434,8578-6153,9470-5575", ",9015-4595,9063 2852,1426-2360,2296-2517,3081-2423", ",2116-3402,1969 5144,4793-4512,4257-3984,4793-3453", ",5044-3247,4514 412,6223-638,6683-380,6620-1176,61", "91-560,6737 540,2819-557,2362-476,3183-2,2482-252,", "2351 8394,2762-7699,3368-7660,3101-7016,3598-6212,", "3227 9358,2072-9144,2284-8380,2896-8037,3559-8106,", "2973 159,8925-782,8971-856,8156-1122,7583-1477,833", "1 807,6904-716,7381-1562,7730-910,7737-536,7424 55", "75,8290-6230,8130-5930,7632-5922,7514-5353,7377 99", "19,6930-9305,6418-9949,6244-9436,6984-8602,7017 93", "54,2502-9638,1793-9000,2547-8294,3051-7920,3144 22", "79,9044-1895,8129-2184,8920-1961,9714-2687,9771 89", "28,1547-9099,2189-9945,1723-9686,2311-9894,2707 44", "66,1022-5200,927-4924,1797-4967,1515-4275,1895 935", "0,277-9537,750-9634,963-9865,268-9603,1027"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> polylines = {"5739,1008-5540,914-5687,1076-5824,842-6018,625-611", "7,367-6263,647-6390,523-6449,777-6554,528-6524,251", "-6371,268-6324,236-6046,211-5731,216-5676,287-5633", ",378-5718,249-5635,106-5485,61-5415,302-5244,303-5", "008,494-4768,378-4991,454-5132,679-5246,581-5133,5", "68-5262,498-5511,665-5502,370-5546,359-5661,251-57", "94,85-5826,146-5813,267-5580,250-5775,418-5628,470", "-5622,669-5540,435-5778,519-5989,589-5896,744-5800", ",986-5576,809-5564,700-5788,921-5953,759-5933,893-", "6215,902-6217,1016-5983,1005-5937,812-5624,808-572", "1,742-6002,825-5943,818-5691,750-5499,617-5318,743", "-5079,616-4987,507-4812,616-4734,659-4692,710-4527", ",720-4641,431-4695,169-4798,133-4973,176-4751,25-4", "900,294-4911,282-4960,210-5034,445-4961,538-4915,3", "77-4790,231-4832,381-4867,611-5102,693-5189,832-51", "62,613-5069,496-5183,773-5031,1020-4789,855-4844,6", "97-4791,990-4702,866-4692,941-4758,1219-4642,1210-", "4846,1180-4570,1110-4655,1248-4386,1095-4164,1038-", "4056,1333-4064,1406-4128,1625 2257,8022-2504,8676-", "3005,8891-3294,8262-2602,8425 3635,128-3430,1078-3", "586,1123-3655,218-4540,330 8709,5202-7940,5559-798", "6,6507-7882,7410-7102,7219 9038,6852-9449,7035-874", "3,7148-8863,7316-9434,7463 9998,8549-9630,8179-978", "2,8124-9459,7455-9973,7363 9696,3957-9527,4475-882", "6,5107-8659,4148-9149,4711 9104,4706-8999,4460-881", "5,3620-8074,4026-7386,4706 3345,3318-3750,3230-392", "2,4043-4721,3586-4984,3575 7611,5279-8078,5983-884", "1,6415-9173,7014-8955,7298 6164,9546-6337,8627-712", "3,8853-6441,9199-6697,8680 3488,6324-3333,5361-287", "1,5709-3053,5582-2491,4819 7921,7193-7222,6487-668", "5,6909-7395,7572-7084,8087 6815,3564-7395,3019-676", "3,3610-6629,3717-5775,4075 2869,8840-2146,9077-144", "2,9303-2103,9768-1987,9631 5547,9859-6240,9369-709", "4,9685-7476,9980-7183,9294 2021,7286-1413,7301-103", "9,6513-629,5744-167,6584 8467,3765-9026,3709-9691,", "4227-9929,3771-8979,3872 733,8560-585,8202-464,797", "6-320,7361-1225,7165 3910,5193-3746,4597-4084,4260", "-3362,3842-3495,4117 4614,4875-4420,5593-4397,6330", "-4809,6824-5061,6448 5453,4675-5144,4848-5109,3906", "-4353,4334-5018,3656 8907,9180-7964,9241-8630,8923", "-8544,9154-9083,9751 8370,3063-7534,3317-7889,3848", "-8609,4165-8069,3472 755,834-1406,763-2187,427-250", "2,40-2203,899 1430,631-1705,453-1605,409-2217,391-", "2811,232 7540,4160-7829,3255-7533,3365-7523,3372-7", "729,3487 8837,5252-7938,5301-7720,5017-7753,4404-7", "483,3503 9240,3559-8274,3442-8418,3038-9140,3719-8", "574,3354 5095,2336-5972,2272-6144,2809-6584,2032-6", "307,1438 7292,5719-6889,5799-6459,5790-6532,5341-5", "593,5393 5134,560-5107,458-4950,697-4266,684-4804,", "393"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> polylines = {"4923,8755-5036,9030-4952,9314-4899,9504-5121,9659-", "5115,9770-5261,9835-5207,9650-5253,9601-5338,9657-", "5199,9469-5254,9260-5562,9303-5449,9327-5389,9463-", "5281,9244-5216,9097-5378,9202-5543,8974-5703,8773-", "5815,8928-5698,9035-5582,8962-5601,9066-5502,9335-", "5577,9083-5504,8987-5519,9194-5660,9402-5919,9282-", "6063,9473-6125,9302-6061,9212-6048,9017-5958,9276-", "5986,9520-6215,9697-6406,9470-6444,9293-6212,9477-", "5983,9483-5843,9404-5874,9410-5704,9373-5811,9350-", "5738,9637-5961,9790-5810,9652-5603,9670-5524,9498-", "5524,9662-5583,9838-5529,9805-5524,9649-5294,9618-", "5399,9323-5197,9294-5226,9530-5188,9466-5131,9543-", "5177,9369-5162,9460-5351,9597-5118,9467-5271,9356-", "5023,9270-4834,9104-4756,8829-4782,9119-4580,8877-", "4606,9177-4869,9225-4896,9228-4867,8938-4986,8936-", "4926,9107-4968,8958-5071,8976-5062,9076-4993,8838-", "4722,8783-4582,8939-4620,8689-4674,8521-4932,8351-", "4833,8070-4876,8231-4884,7974-4857,8001-5053,8074-", "4959,7999-5159,7936-4947,7854-4696,7768-4746,7749-", "4833,7751-4613,7551-4464,7678-4462,7910-4603,8039-", "4734,7845-4699,7973 9825,4618-9902,4911-9846,5846-", "9708,5264-9772,5586 6287,669-5378,755-5801,219-614", "1,747-6179,1335 2354,5553-1979,4627-2365,5471-3067", ",5004-3865,4409 9656,9293-8855,8845-8698,9628-8182", ",9026-8572,9195 34,5825-955,6136-544,5446-985,5099", "-1478,4314 7817,6271-8258,6095-8887,5576-8587,5688", "-9015,6215 1766,4612-2000,3773-1896,3999-1483,4463", "-2220,4131 597,5883-923,5034-623,5889-351,6797-519", ",7240 2548,7668-2962,7319-2516,7533-1578,7537-1427", ",7176 9784,1558-9567,1284-9946,1564-9343,1252-8793", ",1387 4464,749-4794,280-4858,732-5226,397-5335,101", "6 9916,2691-9838,2305-9490,1545-8713,962-9608,1300", " 4753,7988-5168,8508-5054,8957-5399,8918-4679,9329", " 8653,2542-8370,3191-9006,2802-8642,2591-8487,2332", " 7547,7859-7839,8630-8744,8816-7973,9076-8510,8835", " 8348,3017-7710,3105-7818,4064-8725,3702-9595,3731", " 7079,353-6849,60-6492,609-7396,493-7152,1331 7467", ",3740-6918,3442-6393,2765-7146,2529-8061,2910 3584", ",5453-3767,6363-3618,6805-3752,7433-2925,7467 9119", ",1836-9625,2627-8798,2818-8482,2233-8589,2716 6302", ",709-7186,422-7381,1097-7871,799-6926,1077 6813,31", "64-6671,3853-7604,3504-6800,3737-7451,3329 495,911", "9-1003,9978-259,9331-849,9977-1542,9808 9512,2855-", "9100,2958-9402,3364-9275,4130-9034,3911 5482,9342-", "5554,9795-5892,9118-6447,8859-7127,8609 2950,60-27", "22,884-2100,689-1815,993-2307,1577 6064,5623-6976,", "6002-7599,5548-8154,5137-8159,5328 5592,6591-4681,", "6334-5546,6596-6374,7041-7133,6581 1442,7684-1916,", "8391-2787,8758-2404,8853-1587,8334 1498,6790-1888,", "6020-1388,6498-1463,6948-762,7272"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> polylines = {"2858,3529-3103,3678-2998,3724-2916,3701-2764,3946-", "2813,3754-2817,3832-2941,3939-3140,4092-3384,4099-", "3584,4324-3663,4373-3599,4401-3598,4499-3492,4436-", "3676,4328-3484,4475-3417,4693-3486,4500-3542,4432-", "3556,4327-3517,4342-3630,4349-3688,4178-3946,4131-", "3889,4165-4085,4184-4042,4213-4154,4295-4017,4119-", "3768,4089-3679,4387-3642,4415-3664,4652-3685,4954-", "3510,5215-3558,4903-3852,4934-4136,4992-3922,5091-", "3742,4999-3711,5109-3881,5232-3905,5242-4102,5267-", "3895,5446-3732,5185-3876,5235-3933,5413-4213,5520-", "4302,5641-4391,5633-4208,5476-4480,5528-4325,5408-", "4088,5285-3931,5244-4217,5167-4270,4937-4124,4787-", "4121,4976-4036,5161-4347,5178-4308,4891-4427,5036-", "4476,4810-4548,5042-4347,4897-4291,5094-4484,5336-", "4295,5331-4122,5555-4356,5615-4472,5855-4489,5753-", "4785,5807-4914,5636-5110,5673-5090,5783-5155,5504-", "5234,5316-5169,5439-5220,5680-5153,5717-4952,5624-", "5145,5398-5317,5547-5537,5501-5539,5665-5555,5908-", "5522,5754-5832,5734-5657,5649-5744,5573-5824,5708-", "5702,5882-5691,6106-5675,5986-5727,5992-5535,5930-", "5268,5903-5256,5783 6048,4476-5855,4214-5608,4628-", "5638,4609-5605,5116 691,9202-1139,9331-1658,9121-2", "308,8682-2784,9394 1009,4827-1530,4897-1895,4689-1", "467,5395-908,5650 919,7911-929,8803-992,8669-1021,", "8521-1580,7918 7669,70-7641,911-8268,1063-8067,846", "-7437,1026 1808,1360-1391,1257-1732,379-2346,400-1", "678,641 7515,6523-8403,6930-8311,7882-8499,7497-91", "98,6943 7663,2446-7331,3265-7709,3997-7076,4718-78", "49,4684 927,3342-530,2454-845,1975-1270,1286-1751,", "1519 5296,7558-5928,7722-5765,7097-5779,7849-5014,", "7493 2947,2904-3387,2492-2727,2207-2395,2135-1523,", "2525 7882,7178-7162,7128-6892,6407-6390,5664-7042,", "5167 1138,2186-1121,2234-626,2218-370,2024-944,269", "9 2855,9624-3004,9210-2562,8383-3119,9156-2467,969", "0 8423,7363-8403,8180-9105,8877-8256,8860-8552,797", "6 2282,8104-2176,7330-2430,8241-1851,8880-2414,837", "7 1726,8402-1090,8101-1066,9049-470,8606-916,8501 ", "2483,7452-1867,7436-1969,6776-1073,6462-931,6511 5", "954,1815-5457,1788-5892,1086-6818,1136-6812,1448 9", "764,1080-9893,1712-9932,2219-9871,2759-9379,2110 7", "341,7004-7833,7526-7270,7832-6897,8432-6778,8857 2", "755,6689-2933,6442-2237,5781-1720,6232-1626,5245 8", "084,4651-8448,5432-7492,5224-7239,5867-7368,5914 9", "285,3146-9844,3160-9609,3130-9060,3687-9379,2745 6", "804,4345-6727,4631-6888,3980-7139,3475-6865,2901 3", "865,6175-3470,6523-3555,6772-3098,7590-2464,6912 3", "138,6777-3532,6970-3499,6326-3352,6620-2468,6729 8", "398,936-7984,763-7704,1611-7903,1267-7938,356 4189", ",8205-4467,7714-3978,8084-3782,8828-3779,9505 7322", ",9411-6998,8886-7237,8292-7835,7555-7586,7841"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> polylines = {"1779,5177-1677,5219-1697,5001-1900,4796-1634,4668-", "1657,4420-1483,4447-1471,4154-1425,4287-1248,4044-", "1225,4077-1217,4018-986,4147-1250,4010-1287,3746-1", "118,3907-1105,4150-1294,4066-1224,4326-944,4369-90", "2,4488-1078,4385-1210,4249-1211,4118-1169,3862-138", "6,4008-1201,3773-1199,3768-1129,3742-1240,3540-139", "1,3662-1649,3652-1911,3547-1907,3389-1912,3264-213", "6,3378-2251,3671-2484,3687-2636,3938-2735,4129-296", "4,4329-2871,4395-3094,4596-2798,4599-2941,4350-297", "0,4382-3142,4420-3087,4478-3066,4430-2964,4161-277", "9,4401-2972,4595-2859,4829-3006,4805-2849,4555-285", "8,4636-2786,4480-2872,4438-2840,4564-2631,4589-234", "1,4691-2459,4850-2346,4728-2205,4982-1925,4936-195", "6,4903-2029,5183-2164,4963-2050,5166-1878,5403-158", "8,5498-1636,5404-1730,5239-1756,5330-1683,5447-169", "0,5184-1560,5393-1369,5343-1072,5360-1108,5537-127", "0,5729-1208,5430-1341,5186-1465,5311-1210,5299-139", "7,5229-1174,5006-1168,4970-1212,5010-1353,5096-133", "2,5218-1389,5406-1357,5466-1198,5354-1177,5180-138", "6,5181-1424,5336-1434,5131-1183,5007-1218,5032-133", "8,4842-1382,5037 1611,1548-1187,2029-955,2198-435,", "2554-1237,1985 10,8269-379,8325-770,8726-430,8070-", "299,7306 6287,3877-6993,3813-7817,3710-7339,3484-7", "942,2743 322,2791-382,2716-495,2305-32,2875-168,33", "78 5732,2620-5017,2998-4040,3181-3451,3939-4009,41", "13 4326,7460-5051,8096-5185,8062-5388,8431-6226,89", "28 4615,9164-5333,9064-5861,8651-6451,8765-6162,81", "95 5859,4471-4989,4563-5531,3802-4934,4316-5356,40", "35 6371,8152-6990,7968-7487,7703-8457,7507-8580,76", "40 9931,6658-9995,7633-9287,8277-8997,8785-9208,83", "95 6778,446-6496,53-6712,689-7057,172-7156,982 324", "2,5372-3794,5451-4272,6192-3859,6911-4257,6573 688", "7,3122-6588,2610-6656,3021-6920,2524-7691,2592 740", "6,3532-7752,4387-7610,4358-6850,4545-6692,4698 666", "8,3541-7457,3048-6870,2530-7329,2823-7070,2029 267", "5,578-2562,314-1883,667-1190,103-561,160 15,4718-6", "97,4132-86,4813-477,4633-721,5475 6284,9386-6113,9", "265-6393,8606-5437,8619-5679,7768 4077,516-3975,13", "86-3552,666-3425,996-2896,499 885,5927-1052,6882-8", "63,6078-391,6330-537,5907 7166,6737-7209,7296-6874", ",7623-7469,7414-8246,6931 8563,2959-8403,2203-8376", ",1813-8435,2711-7748,2021 2990,6182-2419,6465-1793", ",6811-2055,6115-2930,5951 953,4792-1897,4667-2127,", "5638-2196,5519-2120,5824 2931,484-2937,989-3077,90", "5-3046,15-3164,471 9890,9886-9586,9772-9323,9672-9", "713,9036-9433,9347 476,4439-1233,4004-1299,4106-19", "43,3430-1454,3873 8100,3397-8237,3715-8535,2880-85", "82,1950-8646,1512 9297,5748-9451,5698-8747,5942-83", "61,6723-8437,7456 7860,570-7279,1279-7346,1417-733", "3,1808-7736,2573"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> polylines = {"8618,1244-8611,1028-8462,1118-8275,1354-7978,1453-", "7872,1370-7951,1397-7947,1705-7875,1698-7592,1640-", "7373,1518-7162,1389-6997,1187-7068,1265-7219,1337-", "7213,1507-7212,1441-6958,1439-7239,1460-7107,1503-", "7333,1583-7213,1723-7051,1813-6827,1632-6767,1864-", "6544,1739-6766,1936-6911,1978-6960,1944-6885,1772-", "6928,1607-6645,1745-6759,1519-6840,1263-6786,1105-", "6667,1219-6516,1481-6461,1569-6276,1398-6225,1114-", "6208,858-5966,1042-5746,1056-5696,1282-5978,1271-6", "163,1183-6182,877-6244,960-6334,1094-6271,1062-634", "6,867-6265,1087-6197,1136-6199,1095-6274,1087-6092", ",928-5949,1090-5802,1251-5977,1069-5818,1061-5814,", "948-6048,955-6259,809-6000,798-5876,828-5739,865-5", "690,747-5591,463-5789,512-5862,645-5693,451-5710,4", "23-5528,549-5230,637-5089,450-5367,516-5494,665-53", "63,536-5446,256-5257,468-5244,200-5067,257-5234,44", "1-5243,303-5217,125-5317,372-5119,257-5047,104-488", "4,305-4837,195-5015,81-4784,187-4916,112-5015,52-4", "859,132-5136,18-5187,147-5216,310-5183,488-5495,51", "3-5792,437-5579,350 4937,601-4704,1510-4869,2093-3", "967,2317-3321,1908 5066,2470-4196,2635-4177,3442-4", "419,3738-4526,3521 1896,3862-2743,4091-3288,4459-2", "668,4369-2108,4922 3745,5751-4600,5375-5058,5257-4", "673,5902-4350,6027 309,1381-344,1773-431,881-77,13", "14-32,1278 3178,6146-3222,7056-3388,6806-3928,6148", "-3448,5449 781,9664-52,9886-550,9169-199,9292-306,", "8847 1692,9247-1708,8365-2452,8345-2894,7791-2719,", "7957 2857,6692-3642,6726-3159,6692-3838,7233-3265,", "7003 5599,6958-4990,7281-5591,7010-6273,7307-5353,", "7530 4148,5322-3503,5868-3576,5070-3792,5900-3846,", "4961 9657,4266-8894,4453-9263,5197-9999,5068-9253,", "4830 1994,68-2492,74-2194,633-1222,866-1976,255 96", "05,6398-9670,7049-9215,6824-8902,6719-8593,6336 97", "99,7904-9780,8805-9248,9384-8629,8845-9141,9551 24", "6,723-806,1395-555,1928-728,1889-510,1183 5185,41-", "5239,40-4765,309-5164,149-5404,1012 6655,5347-6249", ",5690-6548,4777-6244,5514-6776,5741 4403,2894-4321", ",3572-3389,3605-3181,3929-3376,4631 4615,5779-5504", ",5391-5310,5759-5376,5281-5683,6150 3249,5116-3168", ",4726-3108,5211-3000,4461-3319,3918 5048,8773-5172", ",7999-5167,8599-5178,9138-5230,8393 7201,3621-8064", ",3883-7962,4187-7104,4269-6855,3876 9904,7874-9109", ",8095-9045,7526-9481,8296-9965,8427 1603,4801-1730", ",4601-754,4412-186,4201-99,3909 369,1002-801,1088-", "1152,538-1519,1008-2076,1395 6678,7606-6328,7166-6", "176,6502-6477,6006-7067,5456 6987,4205-7781,3975-7", "747,3164-8170,3839-8852,3339 1687,8318-1963,8226-1", "218,7744-1862,7315-2156,6980 9450,6872-8876,6116-8", "832,6559-8845,7478-8296,6935 3244,3745-3960,3596-4", "589,3256-3875,3943-3117,4537"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> polylines = {"3842,1143-4103,1160-4172,1362-4076,1443-3892,1261-", "3750,1415-3832,1379-3746,1215-3460,1221-3393,1368-", "3361,1663-3474,1797-3674,1776-3583,1737-3513,1656-", "3721,1621-3458,1789-3652,1961-3806,1906-3947,2035-", "4044,2202-4291,2275-4341,2503-4388,2655-4556,2441-", "4558,2358-4320,2352-4129,2245-4148,2349-4007,2326-", "4211,2163-4120,2372-3935,2121-4086,2343-3923,2595-", "4087,2689-4008,2452-3784,2348-3993,2572-4302,2562-", "4394,2357-4380,2284-4138,2255-4324,2194-4188,2042-", "4262,1834-4232,1849-4207,1589-4262,1454-4010,1372-", "4093,1372-4187,1300-4410,1425-4139,1547-4139,1632-", "4154,1711-3948,1657-3837,1562-3732,1423-3817,1675-", "3738,1597-3590,1601-3727,1705-3848,1755-3919,1661-", "3907,1774-4019,1489-4049,1660-4022,1820-3859,1646-", "3988,1447-3830,1553-3706,1750-3869,1727-3908,1585-", "3944,1415-3835,1616-3913,1764-4048,1893-3937,1735-", "4236,1633-4010,1459-4264,1546-4432,1334-4415,1023-", "4274,1084-4043,1222-4230,1194-4000,1223-4284,1335-", "4327,1614-4219,1891-3930,1961-4194,2123-4099,2141-", "3901,2363-4073,2138-4273,1981-4465,1967-4481,2198-", "4740,2303-4477,2157 4988,7349-4729,8209-5436,7994-", "4728,8272-5038,8810 8269,5755-7939,6363-8870,6477-", "9070,5961-8918,5470 730,2072-967,2609-1258,1736-15", "11,773-885,257 9727,2244-9452,2493-9635,3062-9976,", "3452-9366,4088 6534,873-6592,330-6738,546-6109,126", "3-6505,2099 1116,1880-1663,2627-1942,2004-2695,142", "3-2612,1298 7275,2092-6348,2099-5758,2273-5173,161", "1-4612,823 124,2396-305,1674-314,1817-217,1280-164", ",919 550,8968-1238,9161-2134,9033-1685,9346-1812,9", "480 7581,1657-7936,1715-7934,2144-8535,2200-8407,2", "860 5800,231-6626,585-7554,430-7062,1040-6927,324 ", "188,6021-137,6179-252,6636-536,6346-1462,6401 5211", ",3276-5182,3186-5206,2834-5962,2236-6530,2987 2286", ",3655-1381,3900-930,3637-936,3048-1067,3166 6788,2", "54-6291,1011-5569,1253-5196,880-5947,1521 6067,316", "0-6899,3022-7098,3661-6652,4285-7134,4201 8391,313", "1-7559,2972-7835,3852-7460,4113-7689,4456 406,6227", "-821,6492-1673,6687-1457,5980-1080,5079 5012,6557-", "5328,6595-4700,6776-4562,6049-4749,5119 9606,8345-", "9983,8648-9929,7911-9832,7206-9594,7071 8964,3588-", "9679,3535-9068,2880-8871,2370-8679,2287 9355,1279-", "8567,849-9191,1362-8719,1346-9056,1687 7290,356-77", "85,95-7004,544-6456,1340-5603,1129 430,6631-98,739", "5-1083,7334-544,7917-151,8804 8797,9455-8722,9467-", "9660,9482-9903,9169-9538,8793 2620,7828-3262,7691-", "3270,8115-3156,7460-2349,7660 9608,1243-9619,703-9", "772,1553-9856,1711-9529,2606 9281,3127-9781,3719-9", "650,4536-9342,4169-9083,4408 3179,4609-3728,5013-2", "958,4971-2942,5175-2758,4642 5249,982-5844,430-603", "2,736-5323,371-5762,996"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> polylines = {"3741,6553-3774,6582-3874,6601-3768,6408-3762,6266-", "3553,6348-3865,6370-3720,6456-3655,6710-3509,6669-", "3385,6738-3225,6890-3247,6942-3433,6852-3242,7075-", "3171,7331-3411,7513-3504,7250-3456,7078-3728,7085-", "3901,6854-3948,6746-4121,6554-4017,6740-4098,6852-", "3955,6887-3935,6684-4073,6542-3982,6733-3990,6582-", "4276,6689-4441,6898-4148,6896-4341,7146-4574,7247-", "4520,7109-4715,6943-4566,7149-4551,6854-4786,6819-", "4820,6711-4858,6952-4988,7142-5207,7204-5204,7138-", "5370,7336-5381,7100-5557,7275-5823,7369-5774,7255-", "5515,7209-5372,7472-5236,7403-5251,7183-5261,7441-", "5095,7638-5101,7706-5202,7735-5082,7513-4778,7478-", "5008,7326-4847,7176-4671,7214-4574,7067-4413,7174-", "4269,7280-4105,7442-3942,7173-4117,6943-4151,7103-", "4221,7202-4088,6987-3801,6883-3650,6679-3773,6421-", "3895,6147-4042,6237-4185,6276-4093,6401-4267,6563-", "4499,6704-4784,6700-4686,6988-4678,6808-4566,6597-", "4508,6734-4769,6627-4744,6803-4838,6627-4920,6788-", "4811,6724-4751,6863-4732,6595-4528,6378-4619,6153-", "4621,5845-4647,6030-4528,6036-4302,5901-4044,5868-", "4166,5814-4457,5903 308,1729-763,1955-1309,1204-16", "07,1682-2104,1709 800,9643-1423,9498-1008,9458-145", "2,9247-627,9384 7945,1373-8866,1272-8597,636-9486,", "245-9660,228 9850,8938-9840,9663-9851,9145-9764,87", "79-9564,8468 4119,2504-3631,2617-3955,3422-3274,32", "65-3026,3813 8332,8963-7713,8556-7987,8093-8535,87", "25-9099,9476 9350,9051-9340,9389-8735,8919-8015,85", "45-7156,8241 640,5170-1258,5535-2066,5387-2297,576", "0-1701,6387 393,7838-1106,7525-1368,7713-487,7269-", "453,7049 6315,9620-6593,8678-6624,8366-6215,8832-5", "285,8881 3577,8147-2964,8573-3280,8380-3407,8666-3", "591,8663 3750,2521-3397,2764-3033,2764-2562,1902-3", "150,1790 3832,2305-4382,1838-5035,1731-4771,2319-5", "211,3099 1325,5414-415,5667-1199,5490-1547,4675-12", "47,3792 8866,1120-9001,1264-8200,757-8574,450-7697", ",513 9639,5668-9748,5049-9873,4129-9676,5099-9532,", "4825 8557,1466-8009,1234-8427,1734-8313,1697-8291,", "1125 9305,5000-8412,4895-7910,5157-7141,4779-7187,", "4967 3045,8424-3981,8311-4671,8967-4029,9406-3854,", "9276 136,1476-396,1736-642,1191-1185,1065-1023,129", "8 6118,3243-5537,3100-5517,2930-4868,2294-4239,248", "3 9565,3938-9734,4187-9818,4063-9411,3924-8680,369", "2 9356,817-8590,334-8123,1168-7883,1112-8093,382 9", "920,1389-9282,1192-9599,1220-9591,1690-9842,2172 5", "073,1912-4678,2007-4742,2625-3995,2653-4645,3135 1", "934,6256-1482,6556-1824,6558-2332,6407-2160,5462 1", "621,9346-1833,8655-1571,7932-1579,8879-1844,8624 7", "049,1836-7586,2038-7637,2680-7401,2972-7009,3865 5", "31,583-1267,962-503,1476-345,1325-1001,1423 7035,1", "12-7191,1076-7818,1655-7152,2335-7317,2194"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> polylines = {"9608,6699-9822,6727-9765,6914-9694,7032-9607,7001-", "9695,7005-9704,7098-9764,6822-9668,6880-9964,6936-", "9894,6733-9930,6449-9793,6657-9772,6617-9785,6529-", "9649,6501-9889,6596-9941,6443-9718,6240-9616,6317-", "9619,6049-9756,6122-9596,6301-9705,6332-9787,6325-", "9975,6562-9908,6456-9892,6589-9790,6404-9967,6438-", "9741,6438-9709,6444-9807,6727-9620,6839-9779,6732-", "9716,6943-9494,6948-9573,6648-9778,6837-9767,6559-", "9599,6397-9759,6473-9646,6692-9606,6681-9692,6934-", "9578,6753-9752,6781-9450,6752-9615,6826-9483,6573-", "9658,6461-9881,6371-9617,6277-9804,6490-9780,6383-", "9769,6124-9636,6295-9886,6394-9684,6218-9917,6308-", "9809,6593-9848,6882-9989,6742-9882,6879-9667,6886-", "9865,6900-9813,6620-9587,6741-9788,6684-9522,6841-", "9758,7044-9940,6977-9887,6956-9876,6846-9775,6910-", "9745,6688-9657,6549-9887,6598-9984,6353-9721,6481-", "9712,6497-9626,6334-9681,6243-9733,6090-9955,6127-", "9811,6156-9893,6299-9954,6409-9705,6448-9485,6407-", "9432,6465-9458,6752-9173,6777-9028,6742-8796,6641-", "8811,6652-9104,6580-9033,6854-9056,6635-9334,6580-", "9373,6381-9288,6439 5807,2244-5370,2723-4692,2553-", "5184,3063-5474,3813 5216,6152-4436,6697-4201,7522-", "4413,8020-5290,7999 9271,7854-9280,7372-9517,8192-", "9652,8857-9606,9442 1545,7521-1722,6681-1891,6802-", "2698,6268-1977,6869 6138,419-5315,97-5489,495-5486", ",315-5502,317 5237,2144-4796,1508-5455,1925-6041,1", "790-6040,1382 9478,6700-8995,6996-9220,6191-9050,6", "347-9419,7247 9670,3659-9640,3219-8931,3336-9156,4", "249-8679,4745 5620,6324-5271,6773-5008,7429-5214,7", "614-4694,7224 2522,3981-3312,3987-4194,3764-4834,3", "720-5538,4074 7488,2451-6876,2814-6418,2013-6622,1", "162-7171,1876 6250,3730-6001,3365-6158,3542-5716,3", "696-5798,2955 7732,5745-8147,5295-8146,5602-7256,5", "609-7833,5209 9847,7211-8987,7064-8896,7197-8375,7", "259-8921,7339 7983,1161-7229,881-6794,1040-6633,99", "6-6247,653 6736,9199-6519,9774-6905,8913-7365,8175", "-8116,8237 7126,1528-7542,2266-6859,2580-6812,3134", "-7349,3869 6849,5901-6855,6465-5964,6882-5431,6669", "-6303,7043 1567,2377-901,1688-720,1600-140,1166-47", "1,1767 1399,4911-2016,5557-2696,4998-2112,5344-236", "3,4708 6970,1386-7749,929-6896,961-7867,1047-7041,", "719 9860,8318-9257,8805-9366,9036-9765,9336-9878,8", "807 590,6338-192,6847-836,7372-359,8221-334,8476 2", "83,9528-99,9533-916,9022-635,8216-63,7553 7789,37-", "6863,102-7011,539-7714,469-7076,634 6052,1922-5687", ",1398-5513,1439-5393,1630-4681,2124 9438,7840-9012", ",8563-8053,8666-8716,8426-8800,8069 5839,5313-6086", ",4973-5229,5362-4990,6181-5481,6178 7570,91-7471,8", "-6901,664-7003,848-7653,719 4946,9585-4879,8646-54", "97,8829-5483,8004-6452,8018"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> polylines = {"2024,4176-1994,4425-2056,4443-2225,4593-2377,4844-", "2297,5040-2309,4813-2312,4950-2063,5055-2251,5085-", "2415,4892-2678,4760-2579,4672-2512,4981-2605,5132-", "2726,4919-2471,4758-2161,4750-2378,4599-2297,4575-", "2404,4474-2368,4575-2239,4411-2032,4244-2240,4140-", "2357,4141-2385,4011-2566,4113-2452,4277-2461,4310-", "2355,4491-2453,4643-2499,4918-2463,5035-2271,5070-", "2338,5070-2287,5128-2527,4992-2231,5007-2023,5209-", "2154,5420-2272,5332-2214,5423-2094,5478-1987,5471-", "1920,5370-1927,5266-1933,5096-2077,5346-1965,5156-", "2000,5333-1725,5449-1924,5684-1914,5876-2063,6092-", "2074,5936-2205,5842-2285,5988-2289,6227-2193,6454-", "2013,6265-2243,6063-2039,6300-2161,6539-1993,6500-", "2041,6467-2110,6650-1949,6518-1928,6226-1844,6006-", "1927,5777-1804,5864-1795,6150-1932,6066-1703,5929-", "1611,5705-1705,5610-1754,5360-1625,5326-1403,5246-", "1373,5441-1566,5305-1824,5268-1809,5479-1783,5482-", "1769,5773-1771,5892-1655,5693-1569,5876-1670,5761-", "1780,5765-2029,5655-2193,5747-2165,5872-2410,5862-", "2460,5863-2406,5737-2606,5752-2722,5853-2720,5736-", "2850,5870-2936,5896 5005,5170-4806,5113-5066,4628-", "5244,5468-5070,4673 5134,838-4208,851-5154,806-437", "1,823-3845,376 2969,1941-3599,1938-4440,1968-4676,", "1907-4047,1907 9236,81-9232,44-8599,550-9004,1450-", "9468,626 9026,7464-9633,8258-8811,8259-8831,8498-8", "029,8389 4346,2354-4997,2632-5558,2730-6333,2599-6", "828,2153 3737,7559-4187,8139-4878,8660-5176,8922-4", "991,9703 6913,4081-6838,5076-6664,4922-6021,4999-5", "791,4852 7017,7259-6578,7063-6592,8062-6224,8948-5", "563,8477 3366,6432-3407,6150-4230,5783-3827,5569-3", "062,5844 1631,3576-1852,3400-1575,4115-1241,4855-1", "671,4726 6249,798-5270,815-4481,209-5449,63-5015,1", "79 1356,5746-1467,6381-2336,5914-1534,5392-1364,52", "04 5948,4381-6048,4910-6318,4948-6327,4047-5543,39", "38 6844,1093-7790,1253-7472,1224-7127,1676-7331,20", "25 9535,5127-9358,5853-8603,5955-8322,5028-9008,44", "29 3355,2198-2610,2742-2794,3549-3141,3030-3251,22", "84 885,9679-909,9340-1177,9642-328,9522-213,9051 8", "681,5441-8401,4862-9254,5138-9717,4995-9755,4549 4", "935,653-5791,1015-6470,378-6357,1325-5844,1492 816", "4,3187-8060,4071-8007,4982-7741,4867-8633,5118 821", "2,6673-7541,6902-7845,6088-7185,6201-7256,6252 547", "6,1336-5666,1264-5131,1736-5984,1933-5395,2464 732", "2,567-7056,605-6716,458-5864,132-5106,604 8883,687", "6-9404,7662-9680,8103-9725,8838-9654,8975 6941,633", "3-6633,5816-6782,6644-6334,6941-5615,6524 182,8191", "-92,7621-516,6918-781,7796-677,7422 9892,7192-9583", ",7134-9575,6430-9258,6723-9980,6723 3211,5246-3911", ",4944-3382,5574-3035,6355-3316,6231 5623,6187-6276", ",5493-6636,5300-6948,5633-6458,6310"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> polylines = {"1249,2495-1095,2289-1456,2978-1578,3509-635,3403 8", "707,3000-8455,2255-8769,3095-8373,2353-9236,2323 8", "079,5523-8723,5957-8475,6424-8457,6200-7941,5847 9", "589,6762-9256,7677-9435,7896-9463,7721-8677,7563 9", "326,1266-9087,1071-8635,986-8742,1206-8444,815 666", "1,6394-6941,6933-6559,6054-7248,6234-8213,6187 898", "3,8764-8743,7943-8555,7462-8605,7475-8406,7248 114", "7,2254-2010,2184-2995,2293-3303,2755-3011,2772 569", "3,1246-5041,1095-5022,1591-5160,1787-4761,1162 758", "5,9627-7773,9339-6987,9644-7562,9220-7034,9651 548", "2,565-4536,658-3738,81-3336,353-3367,1102 4202,240", "1-3489,2982-3757,3463-3978,3423-4054,3558 6906,343", "7-6867,3097-7746,3135-7561,3718-7753,3337 186,6220", "-459,5897-149,5432-557,5644-1227,5492 1057,477-112", "8,257-580,141-641,804-635,49 7538,1805-7685,2714-7", "358,2423-7572,3095-7004,3465 2899,7814-3033,8354-2", "788,9125-3316,8623-3377,8479 7498,2994-6937,3726-7", "172,3354-7926,3533-7525,2732 2333,3280-1963,2552-2", "275,2028-2469,2364-3159,2137 8880,5898-9398,6417-8", "988,5525-9529,5360-9150,5731 8149,4835-7832,5711-7", "822,4875-8123,5806-7597,5638 4970,3335-4781,2981-5", "308,3299-4935,2703-5399,2479 8394,8868-8694,8723-9", "351,8432-8424,8650-8658,8454 7639,459-7183,1342-66", "03,1263-5949,1504-6299,1700 5155,8929-5285,8485-52", "00,8147-5524,8456-4957,8209 4391,7443-5182,6926-44", "89,7233-3605,7598-3632,7971 3855,8316-3873,8239-38", "32,8909-3769,8447-4725,8202 9080,2112-9293,1757-97", "32,2558-9488,3157-8583,3408 9253,9883-8641,9118-93", "44,8642-9185,9214-9030,9688 4472,9199-5176,9361-46", "56,9462-5338,9928-6105,9325 799,7674-744,7533-963,", "7551-1050,7356-920,7508-906,7209-1060,7477-1060,71", "79-1118,7160-1160,7190-998,7198-1181,7072-1287,696", "8-1315,6909-1601,6893-1848,7076-2033,7036-1930,713", "8-1809,6920-2095,6919-1940,6744-1791,6777-1831,699", "9-1777,7165-1585,6959-1601,7233-1825,7159-1569,725", "5-1475,7257-1493,7015-1200,6911-1235,6788-1523,682", "4-1279,6671-1134,6786-1106,6986-1308,7183-1519,708", "2-1670,6849-1623,7069-1681,7258-1959,7358-2037,715", "6-2036,6947-2071,7173-1953,7280-2097,7072-1995,717", "9-1720,7025-1878,7210-1849,7172-1839,7111-2054,713", "1-1865,6967-1598,6883-1364,7000-1231,6784-1214,676", "6-1355,6626-1165,6692-1095,6582-1094,6493-1295,645", "4-1495,6689-1531,6740-1665,6870-1610,6695-1669,678", "0-1469,6989-1750,6894-1604,7120-1594,6968-1489,713", "5-1519,7227-1354,7065-1248,7165-1489,7249-1493,725", "4-1676,7138-1455,7095-1731,6955-1565,7097-1854,702", "7-1668,6993-1569,6892-1638,6666-1551,6419-1721,666", "9-1945,6516-2113,6450-2190,6400-2145,6402-2289,619", "1-2327,5929-2427,5936-2623,6113-2781,6096-2539,627", "0-2387,6543-2267,6329-2212,6423-2327,6522"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> polylines = {"9522,2535-9131,2404-9315,3258-9537,3338-9628,2364 ", "6599,3775-5945,4198-5956,3410-6569,3726-5939,4409 ", "777,1779-815,981-1478,1606-1072,1359-329,767 1131,", "3706-480,3387-179,3393-888,2715-400,2197 7236,11-7", "033,172-6117,157-5171,115-6038,395 296,3510-947,41", "93-733,3278-945,4020-1746,4337 8841,4825-9700,5316", "-9785,6104-9003,5552-9221,5695 1672,8045-1767,7398", "-1421,8334-1654,8871-1185,8952 9042,5199-8099,5485", "-8799,5979-8433,5148-7458,5005 1572,4569-1972,4202", "-2304,4006-3103,3985-3138,3507 1363,1431-1316,1762", "-1964,1073-1833,335-1183,285 7279,9060-7516,9735-7", "522,9135-7727,8891-7746,8424 8502,604-8030,1058-77", "38,1528-7014,1709-7361,896 281,855-179,1387-639,12", "06-864,355-278,510 8904,3347-9756,3450-9798,3177-9", "734,2731-8943,2327 5307,5337-6138,5828-5962,5195-5", "171,4747-5258,4951 7476,5247-8047,4447-7620,3984-7", "630,4952-8078,5179 143,1791-359,2686-255,2925-814,", "3233-754,2325 1792,8466-1661,9299-1549,9642-2036,9", "994-2684,9921 126,9461-339,9859-973,9327-1679,8848", "-1640,7903 6225,6384-5640,5653-5963,6336-6122,5990", "-6862,6240 2345,3535-2761,4419-2878,3621-2630,3634", "-2471,4281 517,7882-756,7181-332,6329-956,6058-116", "6,6849 3459,8289-3149,8234-3158,8443-3310,8955-316", "5,9874 4462,6784-3960,7595-4481,8030-4268,7225-482", "3,7020 4586,8241-4072,7702-3351,7715-3619,8321-328", "2,8269 7606,6011-7233,5382-6545,5255-6105,4599-595", "8,5365 8723,3659-9163,3820-9771,3715-9114,4404-891", "6,4119 3299,4438-3615,5158-4505,4807-5006,4180-522", "2,4462 5757,8397-6224,7881-5759,7835-5775,7495-631", "3,7235 7980,3108-7936,3237-7761,3372-7719,3400-761", "8,3596-7440,3598-7411,3469-7295,3180-7341,3484-740", "9,3472-7331,3558-7110,3659-7201,3825-7347,3676-726", "8,3765-7392,3948-7455,3851-7462,3661-7485,3889-767", "1,4090-7917,4019-8058,4009-8021,4229-8100,4205-831", "5,3987-8200,4145-7963,4240-7726,4118-7667,4171-748", "0,4316-7215,4162-7269,4145-7116,4162-7015,4079-673", "1,4075-6529,4084-6307,4094-6483,4140-6260,4285-648", "5,4456-6323,4619-6057,4593-6107,4588-6075,4748-602", "3,4661-5748,4777-5781,4549-5634,4674-5458,4492-530", "9,4609-5271,4363-5435,4276-5406,4077-5299,3973-550", "6,4192-5715,4177-5473,4236-5662,4406-5918,4316-603", "0,4150-6222,4306-6516,4299-6559,4604-6620,4399-648", "9,4308-6693,4092-6479,4054-6523,3926-6385,3695-648", "3,3951-6608,3744-6555,4037-6729,4256-6883,4531-663", "6,4531-6431,4403-6434,4182-6270,4062-6153,4062-604", "2,4249-5924,4068-6030,4266-5960,4491-5729,4659-572", "2,4547-5909,4325-6068,4555-6273,4751-6169,4680-614", "3,4378-6344,4185-6299,4346-6469,4152-6356,4439-623", "7,4431-6442,4334-6737,4396-6897,4434-6907,4448-690", "3,4153-6644,3973-6360,4022"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> polylines = {"5619,8789-5017,8004-5093,7977-5015,8218-5138,7829 ", "8053,9388-7199,8961-7695,9251-7336,9873-6565,9740 ", "7742,5274-7906,5650-7534,5395-8200,5457-7883,6125 ", "3831,5272-3000,5222-3173,4340-2230,4240-2475,3989 ", "4465,8882-4755,8834-5588,8323-5085,8014-5738,8403 ", "2195,7584-1846,8029-2431,7287-2200,7853-1402,8270 ", "634,586-437,735-403,547-1266,348-2168,746 7801,366", "9-7334,3382-7973,3822-8684,4407-8796,5334 1176,747", "9-1906,7213-1717,7675-2088,8283-2503,7673 1969,905", "0-2966,9077-2169,9648-2235,9887-1740,9421 6762,571", "6-6173,5569-5545,6318-4687,6249-5219,6804 40,4623-", "564,3883-812,3518-978,3424-1393,3148 3573,4960-351", "8,5953-4123,5540-4756,5156-5368,4913 1718,3342-922", ",3637-519,3697-70,3668-735,3289 200,7816-697,6958-", "911,7221-1406,7834-1177,7506 4917,5893-5284,6676-5", "801,6161-4824,6181-5392,5698 3,133-383,633-582,119", "7-517,1404-464,2171 9292,5951-9022,6686-8505,6263-", "9217,6767-8509,6112 209,7806-1110,7559-1133,7324-1", "936,7402-1694,7270 7812,7831-8362,7649-8417,7610-8", "513,6639-7906,7346 7277,7052-7581,6574-8032,7046-8", "362,6175-8926,6561 4044,1016-3345,1498-3595,1890-3", "764,1296-4213,1955 1314,9107-428,9395-526,8832-297", ",9258-351,9315 1564,7495-1932,7670-1237,7901-1018,", "8442-1782,8141 3641,1434-3354,2326-3534,2342-4011,", "2313-4631,2454 97,6973-408,7419-785,7387-336,7910-", "699,8384 201,7674-286,8588-634,8124-543,7547-1134,", "6932 5732,8755-5058,9399-4731,8796-5656,8488-5835,", "8191 6514,5653-6348,6256-5874,6419-5851,6126-5594,", "5416 4886,9276-4184,9499-5029,9107-5992,9235-5975,", "8598 7508,3945-7557,4841-7947,4308-8920,4159-8649,", "3336 1041,8366-841,8294-647,8375-630,8266-461,8183", "-600,8327-889,8259-973,8315-1027,8591-910,8691-801", ",8493-1012,8681-997,8975-899,8708-810,8424-692,816", "6-764,8116-555,8047-560,8130-615,8013-807,8222-951", ",8114-1082,7982-1006,7871-964,7731-792,7888-757,76", "02-800,7555-633,7708-886,7598-1099,7463-1390,7402-", "1636,7540-1845,7375-1983,7527-1908,7742-1679,7823-", "1433,7740-1425,7774-1243,7763-1149,7844-1181,8025-", "1321,8140-1100,8089-1101,7976-1175,8078-1136,7812-", "1428,7880-1355,7587-1493,7522-1360,7255-1401,7542-", "1296,7706-1095,7814-1081,7779-940,7854-914,8030-98", "4,7776-1045,7695-984,7467-843,7348-960,7611-723,76", "11-605,7533-856,7629-770,7418-565,7195-592,7108-73", "4,6953-721,7057-523,7026-265,6932-340,6752-225,701", "0-471,6961-774,6932-489,6817-545,7128-672,7266-885", ",7361-796,7562-779,7342-731,7118-704,6906-931,6782", "-1039,6676-1319,6670-1344,6936-1171,6784-1305,6956", "-1388,6910-1519,7139-1724,7045-1545,6793-1806,6964", "-1978,7142-1969,7196-1918,7282-1631,7322-1660,7518", "-1793,7255-2030,7212"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> polylines = {"4471,9825-3719,9547-3137,9124-3373,9160-3724,9313 ", "463,831-629,1064-610,1645-592,1165-584,2089 9968,4", "401-9743,3970-9411,4507-9854,4135-9562,3491 6334,1", "981-5844,1997-6626,1493-6554,2427-6576,2275 2597,2", "405-1882,2446-1922,2389-2152,2576-2975,2132 8224,8", "641-7236,8649-7233,8187-6508,8147-7040,7363 6120,4", "179-6252,5165-6482,4675-7116,4244-7842,3736 5173,3", "884-5215,2931-5114,2344-5770,2744-5376,2209 6471,8", "231-6168,8880-5815,9519-5870,9024-5955,8701 3989,2", "489-4596,3197-4440,2893-4718,3220-4594,3507 5663,4", "524-5600,5158-5725,5869-6079,5119-6639,4397 5383,3", "943-4601,4554-3839,4794-4394,5052-4318,4084 6076,6", "551-6127,7084-6351,6813-6002,6260-5107,6440 3045,5", "82-3982,359-4225,1216-3940,1235-4523,1684 9791,326", "1-9648,3587-9906,4003-9859,4311-9764,5132 5866,704", "4-6357,6993-6919,7453-6059,7328-6044,8272 7783,242", "2-7889,2498-8055,1528-8104,2037-8362,2709 6517,621", "5-6957,6983-6857,7718-6563,7995-7085,7824 2511,328", "3-3170,2584-2640,2062-2606,2854-1915,2731 9064,565", "2-8775,5491-8749,5561-8385,4678-8620,3827 4416,667", "0-4000,7354-3362,7282-3667,7958-3540,8463 5173,198", "0-4969,1108-5505,840-6275,563-7020,206 7268,7767-6", "866,7004-7315,6577-7132,6593-7732,6182 2610,3081-2", "149,3191-2131,3463-1986,3027-2320,2506 3742,4414-4", "433,5078-4649,4220-5234,4597-4834,4185 2686,2676-1", "919,2784-2487,2303-2851,3032-3621,3074 4674,5675-5", "050,6526-4310,6672-4951,7392-5160,7177 5181,7251-5", "849,7418-5938,6719-6729,7036-7069,6172 27,8855-347", ",9260-85,8365-164,8896-90,8539 7427,3434-7874,3772", "-7441,4153-6882,4616-7336,5270 3472,8974-3632,9242", "-3592,9469-3809,9364-3729,9552-3874,9802-3814,9960", "-3637,9704-3565,9921-3816,9809-3943,9655-3689,9733", "-3378,9766-3234,9684-3318,9981-3045,9900-2963,9634", "-2729,9582-2777,9651-2550,9815-2249,9853-2200,9796", "-2309,9711-2139,9763-2399,9737-2156,9823-1907,9959", "-2056,9734-2098,9677-2346,9750-2365,9605-2479,9368", "-2360,9620-2362,9405-2394,9463-2326,9681-2214,9396", "-2359,9656-2152,9710-2095,9463-1789,9438-2027,9250", "-2113,8977-1933,9121-1980,9041-2149,9272-2364,9195", "-2168,9148-2249,8865-2248,8649-2245,8391-2439,8451", "-2231,8610-2465,8676-2547,8579-2433,8344-2291,8064", "-2606,8078-2809,7953-2571,7784-2858,7745-2609,7582", "-2628,7396-2530,7581-2461,7744-2556,7547-2340,7654", "-2410,7634-2608,7837-2700,7704-2603,7473-2631,7564", "-2939,7622-3088,7596-2834,7453-2857,7414-3118,7252", "-2968,7017-2985,7166-3168,7209-3020,6998-3051,6951", "-2920,6730-2869,6880-2894,7191-2723,7306-2655,7152", "-2753,6913-2588,7138-2653,7259-2734,7465-2770,7381", "-2636,7097-2818,7309-2726,7145-2714,6953-2431,6816", "-2523,6918-2271,7084-2540,6999-2476,7217-2245,7012"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> polylines = {"1576,1318-1307,1443-583,1693-913,2378-1313,2960 81", "63,7759-8087,8070-7637,7648-7219,8103-7439,7808 78", "95,1763-8198,2600-7522,2060-6915,2722-6572,3099 42", "22,4287-4721,4122-4782,4534-4962,5327-4402,4563 51", "84,9185-5505,8766-5138,8140-5501,7762-5928,7492 66", "19,5513-6759,5861-6403,5124-5906,4830-6202,4491 37", "2,1701-917,2518-1518,3260-1445,3527-963,3333 5480,", "5640-4614,5293-4443,5715-4230,5080-5109,5125 7981,", "2118-7229,2308-6662,2323-6851,1558-7566,2110 8177,", "4524-8169,4675-9081,4705-8170,4799-8823,5158 5578,", "91-6096,693-6875,509-7305,242-7203,1147 4062,3272-", "4912,3205-5073,4182-5340,3305-4458,3393 2601,2918-", "2461,2237-2189,1531-3074,1226-2797,1459 9278,9486-", "9226,8831-9838,9304-9901,9768-8990,9696 2740,2640-", "2748,3151-2714,3103-3480,2514-3186,1937 9589,1139-", "9571,1157-9068,868-9497,1434-9461,2267 4076,2240-3", "922,2791-3628,2790-3589,3167-3366,3241 6833,4704-6", "882,5654-7300,5830-6963,5217-7367,4624 8419,9234-9", "184,9862-8754,9020-9125,9066-9853,8674 4431,9853-4", "736,8941-5186,8985-4752,8285-3919,7807 3922,9105-3", "752,8235-3536,8968-4128,9293-5018,8996 3439,2187-4", "398,2414-4496,2747-4434,3567-4493,3176 8824,6248-9", "495,5680-8920,6282-8602,6483-8824,6607 8888,7799-8", "061,7262-7545,7982-6856,8654-6974,8103 715,8825-12", "30,7980-1119,8420-181,8314-439,7961 3910,1269-4110", ",684-4244,474-5191,598-4674,436 754,6330-1431,6046", "-1212,6211-1405,6219-1181,6230 665,2109-1589,2245-", "690,2096-362,2337-158,2479 1060,1131-979,1735-1645", ",1611-2004,2438-2272,3150 402,5355-96,6211-338,527", "6-362,4598-271,4212 9866,5879-9945,5854-9866,6067-", "9937,5772-9701,5628-9718,5332-9805,5065-9645,5306-", "9508,5025-9586,5262-9439,5297-9619,5470-9660,5682-", "9537,5919-9531,6097-9623,6292-9549,6118-9379,5883-", "9192,5710-9218,5780-9003,5695-9107,5721-9137,5559-", "9237,5285-8974,5373-8961,5135-8975,5398-9160,5479-", "8989,5281-8942,5444-9219,5484-9366,5380-9166,5522-", "9048,5300-8882,5216-8833,5157-8608,5274-8424,5309-", "8147,5307-8110,5371-8040,5602-8206,5397-7931,5515-", "7979,5496-7697,5462-7941,5648-7808,5861-7823,6168-", "7564,6274-7300,6269-7260,6140-7337,6043-7417,6185-", "7284,6308-7276,6349-7295,6057-7304,5989-7330,5738-", "7337,5756-7232,5793-7269,5983-7540,5973-7459,5817-", "7414,5990-7499,6042-7576,5767-7653,5630-7797,5670-", "7881,5425-7846,5734-7752,5435-7807,5520-7932,5701-", "7969,5979-7869,5990-7998,5708-7862,5663-8050,5537-", "8170,5472-7999,5432-7786,5561-7911,5567-8073,5677-", "8149,5650-8219,5949-8067,5779-7925,5712-8010,5642-", "7934,5860-7790,5839-7805,5754-8093,5630-7896,5504-", "8099,5690-8382,5605-8263,5373-8282,5516-8045,5350-", "8063,5432-7914,5611-8032,5666-8025,5756"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> polylines = {"8579,1582-7708,1742-7862,2574-8580,2924-8379,3458 ", "4970,7925-5736,7655-5867,6994-6052,6420-5561,6310 ", "745,1382-146,950-103,1165-512,1830-1213,1811 9198,", "7265-8333,6940-9221,6854-9119,7635-9767,8040 384,5", "751-310,6644-199,6789-424,7458-724,7097 1399,5753-", "2126,5200-1462,5192-1974,5014-996,4859 9454,3497-9", "507,3540-9198,4268-8967,4184-8254,3828 8985,6313-8", "329,6754-7386,7014-7969,6365-7210,5734 8724,646-90", "99,541-8957,1172-8423,1749-7914,2425 5550,9973-501", "9,9998-5384,9621-4903,9175-5693,9142 8294,1830-825", "8,2197-7306,2250-6476,2803-6479,2340 394,4440-414,", "4655-1214,5129-612,5311-699,4672 3425,9693-3582,96", "74-4042,9800-4662,9417-5473,9956 1636,1161-1567,14", "61-1407,2056-2348,2224-2426,3127 268,1484-260,1043", "-658,1136-422,1080-71,981 903,7739-233,7696-265,75", "88-387,7188-800,7466 2489,9988-2147,9672-2337,8971", "-1984,9743-1803,9809 5803,6082-5805,6580-5595,6573", "-5722,6240-5335,6069 8002,8895-8216,8210-8713,7375", "-8770,7947-9458,8476 711,7179-426,6615-334,6108-87", "1,6433-266,6320 7602,1887-7846,1210-8586,1452-9116", ",981-8936,491 3768,5147-4138,4936-4701,4850-4283,5", "082-3375,5154 2224,9597-1635,9475-2096,9006-2335,8", "144-2003,7613 1988,7078-2121,7217-2401,7148-2868,6", "926-3243,6061 7742,8766-8272,9477-8333,9698-8810,9", "283-8548,9886 4149,690-4262,1445-4244,679-4861,745", "-5837,821 9813,4567-9240,5215-9630,4329-9791,4489-", "8999,4024 8934,7688-8998,8217-9092,7636-9241,7641-", "8575,8380 2954,404-2693,55-2054,362-2304,1109-2779", ",323 9740,206-9689,647-9703,93-9824,1024-9779,869 ", "1499,5598-1552,5512-1572,5236-1640,5307-1564,5380-", "1557,5445-1635,5345-1762,5180-1974,5304-2134,5441-", "2188,5536-2439,5652-2564,5455-2774,5564-2989,5528-", "2861,5326-3141,5369-3237,5462-3197,5722-3058,5962-", "3247,6193-3323,6006-3471,5922-3426,5713-3495,5706-", "3185,5695-3084,5933-3099,5986-3145,5901-3215,6064-", "3297,6080-3438,6148-3455,6303-3375,6402-3174,6339-", "3307,6412-3231,6272-3319,6515-3496,6368-3645,6642-", "3619,6427-3596,6330-3724,6522-3872,6580-3852,6536-", "3958,6518-4099,6316-4015,6210-4158,6460-4201,6565-", "4477,6594-4480,6516-4307,6756-4457,6856-4593,6614-", "4559,6655-4296,6777-4312,6991-4333,6847-4170,7111-", "4102,7285-4051,7255-4315,7303-4102,7164-4112,6962-", "3844,6951-3875,6916-3787,6670-3648,6543-3558,6402-", "3515,6340-3359,6408-3219,6201-2918,6216-2921,6506-", "2713,6592-2619,6727-2666,6695-2536,6586-2371,6526-", "2162,6509-1997,6713-2236,6633-2011,6744-2162,6811-", "2068,6511-2117,6236-1925,6251-1819,6531-1746,6569-", "1511,6488-1567,6312-1615,6369-1877,6406-1782,6403-", "1708,6693-1918,6523-1738,6538-1966,6462-1813,6563-", "1552,6669-1648,6377"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> polylines = {"718,7755-1101,7754-1716,7847-1644,7946-2315,7471 1", "547,542-1983,1138-2477,413-1821,950-1555,711 6657,", "5124-5988,5017-6132,5524-6313,6017-6719,5237 3446,", "5018-3086,5159-3088,4972-3177,4449-2252,4271 8574,", "7973-8865,8056-8750,8728-8483,8697-8705,9378 6926,", "4858-7841,4730-7114,5068-7351,5858-7394,6699 438,4", "874-596,4224-246,5130-286,5248-639,5091 4255,8227-", "3557,7544-2880,7653-3447,7077-3580,6788 4882,6739-", "5116,6741-4687,5869-4970,5421-4306,5322 8355,7323-", "8887,6839-9432,7585-9862,7088-9838,6891 9202,3471-", "9111,3154-8987,2661-9582,2484-9593,1842 2739,9174-", "2777,9199-2234,9924-2821,9652-2642,9101 7636,5771-", "7871,6092-7726,6889-7768,6959-7711,6064 6774,2153-", "6490,1566-6115,2355-5830,2706-6075,3573 2982,8329-", "2967,7757-3020,8698-3437,9294-3581,8708 2541,3223-", "2834,3167-2288,3696-2710,3565-1911,4023 1610,9718-", "2077,9699-2090,9990-2356,9027-2430,8387 4959,3279-", "5397,2897-5433,3221-4547,2950-5041,2850 6339,4187-", "5441,4257-5662,4153-6370,4660-5646,4721 5938,8783-", "6896,8497-6310,8604-7035,8836-7366,8008 428,6896-9", "99,6094-606,6407-14,6980-150,6104 3393,3117-3947,3", "455-4381,3764-3715,3258-4108,4100 2141,1334-2336,2", "050-1740,1649-2171,2027-2859,1867 2606,8761-2222,8", "263-2722,8269-2215,8106-2501,7781 7909,4723-7966,4", "743-8827,4297-9042,5238-9824,5568 6317,3474-6967,3", "143-7842,3073-7701,2101-7009,1816 6031,8900-6188,8", "954-6190,9079-6720,9167-6760,9148 9144,1139-8457,1", "112-8658,895-8413,64-8525,233 4373,6339-4340,6193-", "4397,6000-3608,5773-4566,5879 5253,8013-5467,8546-", "4980,9195-5302,9493-5774,8857 6520,3960-6630,4229-", "6779,4112-6566,4098-6380,3906-6120,3925-6222,3874-", "6328,4138-6404,4200-6533,4428-6396,4622-6363,4372-", "6259,4107-6234,4368-6183,4277-6108,4381-6003,4442-", "5994,4737-6145,4684-6110,4500-6189,4283-6303,4184-", "6136,3931-5894,3966-5723,4198-5745,4248-5743,4239-", "5897,4363-5969,4360-5933,4401-5882,4685-6187,4691-", "6426,4888-6674,4769-6622,4515-6789,4320-6554,4408-", "6396,4267-6446,4344-6423,4035-6328,4324-6320,4496-", "6527,4661-6223,4646-6220,4370-6493,4332-6524,4426-", "6600,4318-6684,4179-6606,4139-6583,4356-6464,4461-", "6327,4220-6306,4000-6204,3849-6403,4005-6171,4115-", "6324,4064-6246,3900-6360,3933-6328,4174-6120,4305-", "6194,4071-6080,4104-6092,4016-5910,3979-5714,3793-", "5616,3972-5428,4076-5228,3964-5314,3866-5342,4019-", "5537,4220-5656,4101-5684,3938-5939,3889-5887,3875-", "5578,3843-5501,4079-5313,4256-5567,4078-5687,3971-", "5437,3844-5269,3968-5075,4023-4968,3864-4944,4069-", "4953,4218-4891,4339-4968,4281-4809,4052-5118,4070-", "5129,4359-5264,4383-5409,4520-5174,4616-5425,4653-", "5599,4767-5332,4764-5408,4653-5691,4519-5570,4433"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> polylines = {"4920,8284-4758,8549-4530,8847-4293,9774-4191,9474 ", "308,9487-540,9729-884,8880-524,9147-22,9355 9051,8", "253-9367,8285-9797,8189-9988,9154-9670,9079 8602,6", "767-9022,7318-9484,7915-9516,7962-9780,7357 7764,1", "981-8635,2060-9229,1754-8660,1735-8048,2180 9834,7", "692-9720,7522-9123,7100-9037,8036-8527,7245 9101,9", "085-8673,8537-7973,8653-7685,9419-7790,8429 6751,1", "682-6246,1731-6565,2445-7026,2714-7291,2149 4184,7", "895-3577,7635-3476,7675-4084,7174-4508,7949 462,18", "47-959,1330-801,1751-674,1416-392,504 6373,9258-57", "96,9484-5482,9898-5153,9621-4698,9489 7969,8237-87", "03,8252-9633,8300-9017,8675-9036,8630 8942,1059-88", "53,1674-9820,1607-9759,658-9909,977 1832,3308-1917", ",4131-1898,3807-2350,3722-1398,3808 3437,7789-2840", ",7774-3105,8277-2738,9089-1931,9261 5686,6462-5452", ",7391-5651,8354-5541,7744-6446,8137 2507,9982-2918", ",9335-2734,8852-2110,8640-1427,9263 841,8993-1267,", "8536-355,8133-976,8772-1521,8851 2511,4642-1892,42", "89-1501,4101-2296,3784-3163,4152 3391,2430-3701,25", "31-3704,1868-3280,1144-3037,290 7153,1992-7783,203", "8-6860,2212-7410,1504-7170,1651 6686,7082-6505,792", "8-6246,7358-6026,8328-6012,8346 619,7166-428,7903-", "385,8773-791,8762-850,9645 648,4854-631,4586-612,3", "667-298,3935-843,4746 5460,1412-5430,561-5561,932-", "4812,1051-4462,1834 5448,7379-5820,7700-4844,7651-", "4459,8029-4725,7755 8944,1274-8887,312-8746,378-83", "86,1178-8128,1670 5467,7259-5764,6951-5497,6056-61", "84,6199-6242,5991 2928,9631-2543,9961-3403,9820-28", "18,9620-2877,8843 6315,9414-5973,9431-6257,8769-62", "49,8622-6537,8858 9898,2971-9707,2872-9687,3011-94", "57,3027-9266,2878-8987,2929-8959,3090-8717,3250-89", "66,3177-9137,3403-9284,3584-9586,3578-9566,3783-98", "05,3742-9744,3895-9773,3969-9801,3870-9663,3830-94", "12,3964-9459,3667-9164,3659-9187,3655-8903,3736-89", "76,3564-8920,3764-8960,3577-8656,3516-8821,3491-90", "11,3470-9046,3384-9011,3647-9144,3809-9197,3700-93", "69,3809-9342,3674-9087,3597-9092,3691-9271,3726-89", "67,3780-8844,3910-8735,4149-8921,4332-8748,4284-89", "08,4202-9136,4308-9178,4327-9246,4272-9429,4235-92", "95,4244-9413,4216-9217,4381-8961,4273-8840,4101-90", "29,3953-9104,4114-9021,4310-8915,4414-8922,4644-87", "55,4679-8860,4499-8821,4762-8904,4784-8966,4578-88", "47,4829-8813,4749-8633,4922-8484,4862-8344,4927-84", "44,4757-8355,4597-8365,4644-8442,4756-8373,4600-84", "53,4848-8208,4903-8188,4935-8079,4968-8214,5125-81", "76,5087-7980,5076-8167,5229-8026,5162-7991,4975-78", "04,5113-7900,5066-8203,5102-8369,4972-8384,5157-84", "84,5135-8323,5367-8551,5497-8747,5537-8533,5311-83", "63,5251-8254,5083-8346,4974-8255,5107-8148,4955-84", "36,5081-8541,5318-8529,5190-8361,5270"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> polylines = {"2553,250-1920,311-1912,724-1518,478-955,471 1714,7", "773-1804,7565-2563,8119-2955,8303-2859,8456 7034,7", "244-6248,7005-7029,7118-7044,7640-7981,7737 9278,3", "29-9158,147-9481,344-9216,868-8703,508 6131,7620-5", "553,7693-5457,7617-6078,7403-6918,7226 1316,9115-7", "86,8958-739,9386-730,9416-416,9466 5502,6153-5397,", "6097-4863,6312-3920,6176-3854,6611 2931,5744-2540,", "6240-2890,6751-2533,6488-2813,5845 4720,1509-5038,", "2208-4230,2450-3501,1992-2977,2637 2904,1382-3786,", "1129-3652,1806-4641,1933-4934,1053 4866,7898-4788,", "7472-4581,7981-5096,8536-4170,8200 9719,7012-9524,", "7401-9082,8260-8640,8576-8825,9182 8339,6697-8582,", "6019-8932,6846-7988,6917-8259,6137 5719,3752-6018,", "4432-6719,5001-6302,5140-7140,5069 9886,1562-9220,", "2091-8454,1559-7676,1895-8384,1683 9106,5946-9559,", "5165-9470,4337-8953,4157-8290,4731 9883,4447-9970,", "3915-9289,4290-9880,5089-9677,5518 2355,1077-1967,", "1759-2667,2343-3582,2364-4109,3202 6863,2789-6523,", "1947-7303,2296-6565,2794-6915,2780 4310,9549-4667,", "9793-3939,9435-3900,9992-2922,9853 7151,8848-6456,", "9301-5816,9300-5175,8903-4274,8537 7377,5485-7641,", "5291-7963,4589-7646,5493-7014,5258 1682,773-1359,4", "43-999,1050-1228,510-1853,25 6244,1630-5943,1685-5", "571,1258-4653,1524-5245,1255 2678,5971-3117,5772-3", "843,5683-3254,5370-3401,5951 9739,4690-9069,4465-8", "255,4798-7730,4345-8426,4533 7590,5051-7024,4417-6", "667,3922-7503,4254-7818,4237 6520,8196-6208,9031-6", "073,9162-6147,8340-5478,7862 6092,8429-6597,8988-7", "117,9006-6222,8605-6267,7837 624,587-752,737-1334,", "773-1323,635-529,861 399,9072-313,9130-566,9316-49", "5,9422-540,9326-710,9589-524,9635-601,9832-326,972", "6-575,9618-750,9379-599,9154-530,9060-746,9161-912", ",9233-939,9260-930,9465-931,9567-1240,9535-1342,96", "43-1079,9593-1014,9789-1072,9608-1136,9839-1336,97", "40-1644,9762-1553,9695-1774,9871-1607,9862-1830,96", "42-1708,9353-1838,9531-1678,9430-1565,9314-1716,92", "68-1685,9094-1770,9369-1728,9289-1725,9211-1688,93", "50-1990,9405-1894,9597-1879,9563-2192,9587-2217,94", "33-2217,9163-2050,9192-2028,9267-1917,9353-2094,95", "73-2099,9876-2319,9718-2069,9599-2219,9679-2302,97", "51-2156,9848-2223,9816-2136,9694-1850,9806-1628,99", "58-1692,9924-1425,9787-1494,9760-1417,9462-1426,97", "67-1217,9776-1049,9852-774,9919-813,9792-869,9750-", "1100,9573-1129,9750-1071,9489-1005,9766-1059,9506-", "961,9713-1158,9585-1033,9321-1036,9169-980,8953-94", "6,9066-857,8956-1154,8949-1389,8767-1403,8631-1540", ",8464-1343,8655-1166,8765-1056,8962-1231,9067-998,", "9087-1046,9128-796,9257-1075,9342-803,9255-633,935", "4-928,9419-994,9337-1217,9238-1301,9058-1161,8869-", "935,9071"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> polylines = {"2964,383-2065,362-2466,403-2684,1213-2444,679 9516", ",865-9502,589-8522,571-7573,575-8006,685 5559,5644", "-5162,6492-4320,5968-4044,6548-3435,6553 4607,2095", "-5022,2023-5365,2181-5697,1731-5137,1471 5499,5873", "-4855,5874-5235,6558-5747,6728-5733,5776 7178,4844", "-7121,4785-6329,4802-6919,4845-7395,5517 3836,50-3", "254,473-3539,1297-4493,1029-5368,731 5116,5169-550", "7,5612-5515,6554-5140,6538-4422,6622 4579,8983-419", "0,9550-3281,9848-3858,9356-3369,8937 3201,967-3561", ",889-3116,1179-3152,1655-2332,1902 1098,2316-1706,", "2566-2265,2753-2861,2661-2195,2882 2385,4630-2472,", "3829-3245,3863-3253,3025-3531,3338 3344,3345-3644,", "3692-3410,4645-3584,4732-4192,3991 847,2135-1537,1", "454-1642,1573-1866,1358-2308,1725 1381,2763-690,23", "09-534,2187-154,2183-895,2798 9162,527-9077,1300-8", "739,1461-8771,1895-7891,2332 9732,1931-8938,1763-8", "560,952-7908,364-7391,603 2062,9051-1249,8799-495,", "8511-508,8899-80,9511 3796,2204-3512,2973-3609,206", "0-4312,2092-4177,2933 6858,7158-6457,8055-5819,856", "1-5504,8067-5447,8777 9610,6655-9048,6279-8633,705", "8-8647,6828-9324,7088 2744,9651-2202,8942-2670,941", "3-2944,8663-3479,7925 1816,655-1936,646-2832,250-2", "367,916-1921,1355 7528,1967-6676,1927-7401,2378-80", "49,2413-8606,3070 5551,5755-4961,6395-5574,6514-55", "72,6933-6243,7048 8477,5214-8731,4482-8347,4474-84", "71,4767-9371,4471 3628,9087-3425,9939-3952,9847-38", "83,9343-4677,9531 3599,6025-3365,5396-3218,5780-39", "05,5181-3071,5637 7551,8320-7283,7801-7810,7249-80", "35,6959-7493,7678 1612,8964-1185,8928-511,9407-570", ",8584-649,9239 5549,5650-5616,5796-5409,5690-5119,", "5791-5332,5887-5510,6076-5646,6039-5726,6177-5666,", "6336-5634,6175-5557,6193-5307,6290-5304,6136-5217,", "6275-5206,6556-4898,6551-4843,6406-4750,6477-4858,", "6210-5045,6025-4889,6003-4680,5903-4677,6195-4887,", "6081-5125,5957-5306,6142-5361,6217-5434,5963-5204,", "6067-4957,6052-4712,5981-4924,5873-4866,5652-5087,", "5823-5316,5668-5221,5653-5145,5643-5096,5359-5065,", "5085-5306,5038-5193,5252-5156,5420-5074,5707-5131,", "5422-5039,5169-5197,4981-5100,4728-5303,4808-5452,", "4886-5635,4830-5477,4887-5423,5068-5484,5163-5555,", "4923-5402,4736-5685,4831-5975,4779-5776,4964-5634,", "4997-5415,5107-5593,5270-5636,5314-5848,5333-5618,", "5303-5547,5609-5490,5645-5572,5495-5583,5243-5319,", "5293-5088,5233-5015,5398-4869,5243-4760,5372-4607,", "5337-4802,5226-4757,5195-4660,4900-4749,4989-4895,", "5203-4648,5330-4589,5394-4733,5484-4936,5388-4656,", "5529-4741,5585-4643,5567-4695,5307-4569,5212-4559,", "4918-4422,4695-4717,4702-4657,4708-4599,4565-4504,", "4462-4717,4319-4809,4250-4932,4261-4656,4373-4624,", "4297-4839,4204-4950,4088-4825,3926"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> polylines = {"4400,7162-3711,7471-4289,7593-5070,8111-4283,8683 ", "1458,3110-606,3048-366,2407-36,3072-219,3500 5607,", "9709-6467,9973-6418,9190-5804,9597-5826,9601 5701,", "4827-6233,4843-6502,5444-6455,4793-6061,4575 1061,", "5672-1751,5845-1118,5823-2019,5584-1402,5088 5461,", "4500-5322,4857-5253,4898-5891,4627-5689,4037 9799,", "2794-9461,2141-9037,2895-8279,2466-8990,2265 4509,", "8-4168,316-4199,179-4940,580-4468,1288 7374,677-68", "26,58-6798,47-6540,179-5917,28 7270,2338-7736,2711", "-7173,3403-7599,4254-7264,5015 2417,7356-1981,6704", "-2901,7091-2776,6730-3587,6301 1526,5019-2181,4654", "-2806,4979-2319,4678-1842,4530 8675,5728-8355,5112", "-9023,5251-9117,5970-9415,6519 759,1307-1255,951-6", "95,754-435,132-162,609 2229,8022-2302,7176-2327,73", "05-2304,6455-2087,7334 2652,9664-2946,8810-2089,84", "41-1629,9048-2394,9202 6256,9106-5677,8465-5007,91", "23-5595,9513-6408,9147 6417,2864-5637,3139-4910,32", "77-4549,3673-4624,3951 5662,4088-6221,3528-6463,34", "03-6181,3178-7041,3045 2512,5906-1685,5372-1573,46", "60-2156,4133-2199,4403 9043,1641-9437,1341-8450,14", "40-7953,1048-7320,895 3112,2161-3448,2441-3967,273", "3-3824,2241-3382,1786 2962,6280-2606,6621-2771,743", "1-2851,7518-2861,7806 3073,6571-2407,6646-2260,724", "6-2863,7637-2758,6703 2594,5216-3319,5579-3756,584", "7-3422,6183-2918,6923 5624,6582-5944,6510-6242,604", "8-5335,6315-5765,6043 8276,5842-8202,5735-8153,512", "8-8030,5856-8933,5603 7574,6735-7550,7574-6808,744", "6-6532,8387-7177,8988 9367,4263-9630,4935-8928,550", "0-8568,5782-7597,5986 4930,6080-5817,6427-5564,714", "7-5657,7332-5381,7943 6251,9852-6060,9724-6050,955", "6-6299,9521-6304,9566-6197,9579-6000,9377-6285,940", "4-6282,9463-6519,9548-6759,9702-6678,9401-6835,953", "4-6625,9431-6803,9687-6627,9619-6668,9595-6648,972", "3-6841,9822-6997,9792-6794,9621-6837,9404-6649,941", "1-6436,9596-6445,9683-6499,9437-6555,9326-6507,923", "1-6261,9115-6192,9218-6235,9068-5952,8988-5711,903", "6-5611,9219-5575,9481-5588,9394-5698,9142-5782,936", "4-5920,9331-5963,9552-6200,9349-6083,9084-6071,937", "1-6000,9658-5996,9759-5904,9675-5729,9753-5587,977", "6-5816,9939-5984,9714-5864,9872-5785,9759-5806,969", "0-5858,9396-5883,9364-5915,9417-5768,9438-5896,933", "9-6165,9359-6168,9064-6288,8779-6479,8614-6448,840", "0-6366,8411-6319,8675-6597,8656-6717,8617-6723,892", "9-6926,8937-6878,8798-7111,8950-6870,8972-6938,920", "6-7094,8966-7210,8977-7410,8738-7504,8487-7261,855", "7-7021,8638-7071,8372-7039,8184-6749,8230-7056,820", "3-6907,7953-6860,7686-6868,7850-6945,7562-6972,755", "7-7021,7665-7311,7619-7280,7812-7507,7931-7394,767", "8-7177,7669-7089,7833-6859,7841-7003,7775-7198,792", "7-7281,8158-7404,8293-7271,8330-7248,8325"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> polylines = {"1000,1000-1000,1000 1000,1000-1000,1000"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> polylines = {"0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 9,9 0,0 0,", "0 0,0 0,0 0,0 0,0 0,0 1,1 0,0 0,0 0,0 0,0 0,0 0,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> polylines = {"9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-", "9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,", "9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 ", "9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 8,9-8,9 9,", "9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9 9,9-9,9"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> polylines = {"56,91-74,68-71,34-37,40-24,52-5,30-95,6-94,63-70,9", "8-8,43-84,49-25,40-99,26-1,41-68,76-67,50-18,24-10", ",41-33,41-45,47-29,57-64,51-66,24-22,10-53,88-38,8", "2-75,89-15,15-9,26-3,68-18,77-53,70-64,89-82,64-63", ",97-55,28-31,45-69,71-81,97-37,44-78,86-76,27-43,5", "3-32,43-12,52-81,35-5,82-23,86-2,69-19,6-34,66-11,", "74-97,17-14,32-76,30-68,3-31,7-60,44-40,74-78,44-7", "9,52-86,11-97,85-6,10-16,0-18,77-3,2-19,29-13,0-82", ",85-88,42-49,51-47,19-93,61-6,87-39,23-34,85-22,78", "-88,84-84,81-58,56-58,2-83,62-14,77-62,96-90,97-48", ",50-22,39-53,47-35,15-91,59-96,26-4,77-61,19-52,44", "-52,45-47,10-24,10-39,82-31,39-88,53-56,21-13,36-3", "5,78-45,66-25,70-97,36-14,21-92,1-98,75-73,44-7,50", "-13,72-55,31-22,52-6,86-59,10-98,14-92,72-38,34-4,", "37-26,63-37,1-55,92-67,29-26,53-55,92-65,85-68,68-", "21,20-58,91-1,79-45,17-90,0-34,37-26,28-44,90-44,4", "-96,81-62,99-4,16-8,40-25,11-80,73-45,94-85,53-84,", "3-21,38-38,29-18,63 143,124-167,196-101,187-120,11", "1-110,197-113,183-123,166-177,174-147,101-147,157-", "162,193-196,132-122,146-127,169-184,161-137,145-19", "4,128-115,104-167,195-144,188-171,177-195,110-184,", "146-199,173-182,183-176,146-178,197-195,125-146,15", "3-114,123-120,131-111,103-160,114-161,178-166,127-", "157,158-120,189-136,152-177,156-139,135-134,112-16", "1,168-193,112-165,156-131,191-174,131-187,152-118,", "185-164,199-126,132-142,182-172,135-140,162-170,16", "0-147,169-133,109-129,181-146,194-103,174-166,163-", "147,134-186,140-178,134-185,157-141,194-176,163-19", "9,183-197,100-160,191-160,167-128,108-189,146-140,", "110-184,187-151,143-130,150-143,198-184,168-125,12", "1-115,169-132,166-101,143-144,183-174,150-169,156-", "164,187-133,150-160,106-193,125-169,144-147,144-19", "4,151-119,190-163,178-199,145-163,130-173,132-167,", "117-167,169-126,194-181,137-187,142-148,114-139,14", "7-143,194-190,160-111,190-132,185-115,183-180,147-", "177,115-199,143-112,103-124,166-160,180-169,150-14", "5,193-107,156-155,193-139,199-111,150-141,130-115,", "175-158,125-173,130-145,138-133,102-105,196-163,14", "6-178,130-132,175-169,147-155,177-123,128-127,110-", "160,162-144,191-166,153-131,111-142,176-166,104-10", "6,139-136,199-197,164-146,151-126,175-122,130-160,", "195-124,129-191,183"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> polylines = {"10000,10000 101,102-102,103 104,105-105,106 ", "10,10-20,10 20,10-15,18 15,18-10,10", " 1,1 1,1 ", "20,21-24,24 23,23-27,27"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> polylines = {"5678,3336-3033,1458 5923,2474-4936,1076 3554,3780-", "8753,157 5260,8394-1858,8107 2883,5655-1257,2346 9", "8,3901-1935,5818 8543,8073-733,8353 8339,4032-3033", ",2963 4314,4066-5497,3468 7184,6715-513,4316 8452,", "6735-7098,6912 8839,7817-8544,9345 2700,1458-9300,", "7999 5063,331-2270,213 3675,3417-3010,6890 5764,31", "83-9142,2752 8092,2197-1718,9808 9327,7680-235,651", "5 5748,7717-4529,1101 4874,2117-4884,2573 6730,424", "4-6347,7040 9152,7520-4439,157 1783,1765-7287,8728", " 3242,71-3473,5808 7287,6453-5885,4010 6789,8194-9", "258,1138 8782,4499-3172,758 9943,4820-2837,7865 94", "99,6071-7190,6425 5703,7840-7499,1226 2827,8636-13", ",1236 7878,4257-2985,5426 177,1434-1847,4920 2331,", "6033-6254,7234 8167,5336-9280,9340 1730,8150-2107,", "6379 1603,4856-7246,1923 6481,1887-9512,3863 1172,", "1572-6787,7271 7049,8826-1938,1829 7309,714-3164,6", "826 5362,3588-2520,1122 4181,5179-1406,8976 5480,5", "813-7380,5170 233,3727-8855,4494 6248,4385-2913,13", "13 4231,2614-6784,4676 1108,9422-5378,3232 8268,24", "33-5652,2079 2773,19-3591,585 1660,4400-1075,6225 ", "2955,8276-8058,4502 2185,2861-74,9165 9855,2596-23", "64,65 3608,3270-9675,8284 8590,5782-5124,9406 944,", "7394-2436,6225 2266,5915-3347,1554 7388,9-5962,321", " 3889,553-501,7670 9383,3835-5980,6408 1815,7228-5", "119,2793 8744,1984-5053,4421 3916,5770-8256,7744 3", "298,9660-1496,5632 8184,455-632,7302 9993,9379-556", "1,3930 9943,2490-2757,3305 6896,6471-2469,6016 838", "3,5841-3886,3791 3051,4112-4359,7906 7599,1907-810", "1,1823 7634,9646-5717,7613 9842,1059-8357,132 2338", ",6463-9360,6400 1158,1544-1800,198 3451,8180-2551,", "3481 2139,8758-2186,6916 2565,4387-5299,1554 8950,", "407-7717,2471 7362,9721-5436,3057 2355,5555-5119,5", "564 6413,520-7520,9515 4914,8070-3269,4605 4457,58", "08-5155,8870 9067,7474-2215,6026 7081,1892-8777,81", "78 1280,2711-5882,1331 6266,2297-3493,1554 9970,68", "30-9305,9030 729,7326-4040,5742 7383,3100-3703,70 ", "7518,9985-6420,8202 8135,5559-5208,7921 3797,7534-", "8310,5090 9610,9516-5578,6924 275,429-2782,9022 18", "96,9992-5710,5057 210,2907-2438,8989 7482,8630-527", "5,9734 453,1964-3502,7326 3375,2073-4295,7780 3460", ",4007-1958,1105 869,7313-4979,3213 1727,909-6293,7", "834 633,2027-4642,8960 8584,9748-3922,7851 3332,40", "4-3031,1149 1812,2975-867,8297 8462,7469-9868,7103", " 9006,8272-6747,6041 6606,7417-937,672 6138,9862-9", "667,9446 2802,3959-3540,1034 3279,5523-8065,1370 1", "211,3192-4626,3599 3895,6062-9091,8254 3796,2003-7", "438,4149 6700,6518-5588,2720 8193,7500-4970,9845 1", "472,842-6241,9524 2476,5503-1079,3237 2812,4310-59", "75,7277 7008,8579-2560,7906 8269,437-6161,794"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> polylines = {"9,1-5,1 1,1-3,1 11,1-13,1 5,9-7,9 9,9 23,9-11,9"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> polylines = {"1,1-3,3 2,2"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> polylines = {"0,0-2,10 1,5"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> polylines = {"1,1-10000,10000 9999,9999"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> polylines = {"0,0-2,2 0,0-1,1 0,2-2,0 0,1 ", "3,2-9999,10000 2,3-10000,9999"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> polylines = {"0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 ", "0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 1,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> polylines = {"1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 ", "1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1 1,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> polylines = {"0,0-10,0 20,0-30,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> polylines = {"1,1-1,1 10,10-20,20"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> polylines = {"1,0 2,0 3,0 4,0 5,0 6,0 7,0 8,0 9,0 10,0 11,0 12,0", " 13,0 14,0 15,0 16,0 17,0 18,0 19,0 20,0 21,0 22,0", " 23,0 24,0 25,0 26,0 27,0 28,0 29,0 30,0 31,0 32,0", " 33,0 34,0 35,0 36,0 37,0 38,0 39,0 40,0 41,0 42,0", " 43,0 44,0 45,0 46,0 47,0 48,0 49,0 50,0 51,0 52,0", " 53,0 54,0 55,0 56,0 57,0 58,0 59,0 60,0 61,0 62,0", " 63,0 64,0 65,0 66,0 67,0 68,0 69,0 70,0 71,0 72,0", " 73,0 74,0 75,0 76,0 77,0 78,0 79,0 80,0 81,0 82,0", " 83,0 84,0 85,0 86,0 87,0 88,0 89,0 90,0 91,0 92,0", " 93,0 94,0 95,0 96,0 97,0 98,0 99,0 100,0 101,0 10", "2,0 103,0 104,0 105,0 106,0 107,0 108,0 109,0 110,", "0 111,0 112,0 113,0 114,0 115,0 116,0 117,0 118,0 ", "119,0 120,0 121,0 122,0 123,0 124,0 125,0 126,0 12", "7,0 128,0 129,0 130,0 131,0 132,0 133,0 134,0 135,", "0 136,0 137,0 138,0 139,0 140,0 141,0 142,0 143,0 ", "144,0 145,0 146,0 147,0 148,0 149,0 150,0 151,0 15", "2,0 153,0 154,0 155,0 156,0 157,0 158,0 159,0 160,", "0 161,0 162,0 163,0 164,0 165,0 166,0 167,0 168,0 ", "169,0 170,0 171,0 172,0 173,0 174,0 175,0 176,0 17", "7,0 178,0 179,0 180,0 181,0 182,0 183,0 184,0 185,", "0 186,0 187,0 188,0 189,0 190,0 191,0 192,0 193,0 ", "194,0 195,0 196,0 197,0 198,0 199,0 200,0 201,0 20", "2,0 203,0 204,0 205,0 206,0 207,0 208,0 209,0 210,", "0 211,0 212,0 213,0 214,0 215,0 216,0 217,0 218,0 ", "219,0 220,0 221,0 222,0 223,0 224,0 225,0 226,0 22", "7,0 228,0 229,0 230,0 231,0 232,0 233,0 234,0 235,", "0 236,0 237,0 238,0 239,0 240,0 241,0 242,0 243,0 ", "244,0 245,0 246,0 247,0 248,0 249,0 250,0 251,0 25", "2,0 253,0 254,0 255,0 256,0 257,0 258,0 259,0 260,", "0 261,0 262,0 263,0 264,0 265,0 266,0 267,0 268,0 ", "269,0 270,0 271,0 272,0 273,0 274,0 275,0 276,0 27", "7,0 278,0 279,0 280,0 281,0 282,0 283,0 284,0 285,", "0 286,0 287,0 288,0 289,0 290,0 291,0 292,0 293,0 ", "294,0 295,0 296,0 297,0 298,0 299,0 300,0 301,0 30", "2,0 303,0 304,0 305,0 306,0 307,0 308,0 309,0 310,", "0 311,0 312,0 313,0 314,0 315,0 316,0 317,0 318,0 ", "319,0 320,0 321,0 322,0 323,0 324,0 325,0 326,0 32", "7,0 328,0 329,0 330,0 331,0 332,0 333,0 334,0 335,", "0 336,0 337,0 338,0 339,0 340,0 341,0 342,0 343,0 ", "344,0 345,0 346,0 347,0 348,0 349,0 350,0 351,0 35", "2,0 353,0 354,0 355,0 356,0 357,0 358,0 359,0 360,", "0 361,0 362,0 363,0 364,0 365,0 366,0 367,0 368,0 ", "369,0 370,0 371,0 372,0 373,0 374,0 375,0 376,0 37", "7,0 378,0 379,0 380,0 381,0 382,0 383,0 384,0 385,", "0 386,0 387,0 388,0 389,0 390,0 391,0 392,0 393,0 ", "394,0 395,0 396,0 397,0 398,0 399,0 400,0 401,0 40", "2,0 403,0 404,0 405,0 406,0 407,0 408,0 409,0 410,", "0 411,0 412,0 413,0 414,0 415,0 416,0 417,0 418,0 ", "419,0 420,0 421,0 422,0 423,0 424,0 425,0 426,0 42", "7,0 428,0 429,0 430,0 431,0 432,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 432;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> polylines = {"0,0-1,1", " 2,2-3,3"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> polylines = {"0,0-4,4 2,2-4,2 6,6-4,4 5,5-7,7 0,0-0,2 8,8-10,10"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> polylines = {"1,1-9999,9999 30,30-30,9999 40,40-9999,40 0,0-10", "000,0-10000,10000-10000,0-0,0 50,50-100,1", "50 150,250-200,350 10000,1-9999,1 1", "423,6534"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> polylines = {"0,2-0,3-0,4 1,1-1,3 5,0-5,2 4,1-6,1 ", "3,4-3,5 3,5-3,6 5,3-5,4 5,4-5,6 5,5-5,6 5,6-5,7"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> polylines = {"0,0-10,5 5,0-15,5-10,10-5,5 ", "0,0-10,5 5,0-15,5-10,10-5,5 ", "0,0-10,5 5,0-15,5-10,10-5,5 ", "0,0-10,5 5,0-15,5-10,10-5,5 ", "0,0-10,5 5,0-15,5-10,10-5,5 ", "0,0-10,5 5,0-15,5-10,10-5,5 ", "0,0-10,5 5,0-15,5-10,10-5,5 ", "0,0-10,5 5,0-15,5-10,10-5,5 ", "100,100 100,100-99,99 100,100-5,5 ", "60,0 50,0-70,0 100,100-5,5 ", "30,30 30,30 6,6 100,100-5,5"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> polylines = {"1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,10 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> polylines = {"0,0-0,0-0,0", " 10,0-10,0-12,0 11,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> polylines = {"1,1-3,4 1,2-3,5 5,7-7,10 8,2-10,6 9,4-7,6", " 10000,0-0,10000", " 3,7-3,9 3,11-3,13 1,10-3,10 5,10-4,1", "0 8,5 4,1-7,3 7,1-5,3-7,1-5,3-5,3-7", ",1 8,1-13,2 10,1-10,3"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> polylines = {"10,0-20,0 0,0-30,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> polylines = {"0,0-10,5 5,0-15,5-10,10-5,5"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> polylines = {"1,1 1,2-1,3"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> polylines = {"1,1-2,1 0,1-4,1 13,1-9,1 10,1-11,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> polylines = {"0,0-1,1-1,1 7,7-8,8-8,8"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> polylines = {"5678,3336-3033,1458 5923,2474-4936,1076 3554,3780-", "8753,157 5260,8394-1858,8107 2883,5655-1257,2346 9", "8,3901-1935,5818 8543,8073-733,8353 8339,4032-3033", ",2963 4314,4066-5497,3468 7184,6715-513,4316 8452,", "6735-7098,6912 8839,7817-8544,9345 2700,1458-9300,", "7999 5063,331-2270,213 3675,3417-3010,6890 5764,31", "83-9142,2752 8092,2197-1718,9808 9327,7680-235,651", "5 5748,7717-4529,1101 4874,2117-4884,2573 6730,424", "4-6347,7040 9152,7520-4439,157 1783,1765-7287,8728", " 3242,71-3473,5808 7287,6453-5885,4010 6789,8194-9", "258,1138 8782,4499-3172,758 9943,4820-2837,7865 94", "99,6071-7190,6425 5703,7840-7499,1226 2827,8636-13", ",1236 7878,4257-2985,5426 177,1434-1847,4920 2331,", "6033-6254,7234 8167,5336-9280,9340 1730,8150-2107,", "6379 1603,4856-7246,1923 6481,1887-9512,3863 1172,", "1572-6787,7271 7049,8826-1938,1829 7309,714-3164,6", "826 5362,3588-2520,1122 4181,5179-1406,8976 5480,5", "813-7380,5170 233,3727-8855,4494 6248,4385-2913,13", "13 4231,2614-6784,4676 1108,9422-5378,3232 8268,24", "33-5652,2079 2773,19-3591,585 1660,4400-1075,6225 ", "2955,8276-8058,4502 2185,2861-74,9165 9855,2596-23", "64,65 3608,3270-9675,8284 8590,5782-5124,9406 944,", "7394-2436,6225 2266,5915-3347,1554 7388,9-5962,321", " 3889,553-501,7670 9383,3835-5980,6408 1815,7228-5", "119,2793 8744,1984-5053,4421 3916,5770-8256,7744 3", "298,9660-1496,5632 8184,455-632,7302 9993,9379-556", "1,3930 9943,2490-2757,3305 6896,6471-2469,6016 838", "3,5841-3886,3791 3051,4112-4359,7906 7599,1907-810", "1,1823 7634,9646-5717,7613 9842,1059-8357,132 2338", ",6463-9360,6400 1158,1544-1800,198 3451,8180-2551,", "3481 2139,8758-2186,6916 2565,4387-5299,1554 8950,", "407-7717,2471 7362,9721-5436,3057 2355,5555-5119,5", "564 6413,520-7520,9515 4914,8070-3269,4605 4457,58", "08-5155,8870 9067,7474-2215,6026 7081,1892-8777,81", "78 1280,2711-5882,1331 6266,2297-3493,1554 9970,68", "30-9305,9030 729,7326-4040,5742 7383,3100-3703,70 ", "7518,9985-6420,8202 8135,5559-5208,7921 3797,7534-", "8310,5090 9610,9516-5578,6924 275,429-2782,9022 18", "96,9992-5710,5057 210,2907-2438,8989 7482,8630-527", "5,9734 453,1964-3502,7326 3375,2073-4295,7780 3460", ",4007-1958,1105 869,7313-4979,3213 1727,909-6293,7", "834 633,2027-4642,8960 8584,9748-3922,7851 3332,40", "4-3031,1149 1812,2975-867,8297 8462,7469-9868,7103", " 9006,8272-6747,6041 6606,7417-937,672 6138,9862-9", "667,9446 2802,3959-3540,1034 3279,5523-8065,1370 1", "211,3192-4626,3599 3895,6062-9091,8254 3796,2003-7", "438,4149 6700,6518-5588,2720 8193,7500-4970,9845 1", "472,842-6241,9524 2476,5503-1079,3237 2812,4310-59", "75,7277 7008,8579-2560,", "7906 8269,437-6161,794 99,99 99,99 0,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> polylines = {"1", "3,0", "-5,5 4,", "0-", "4,", "2", "0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> polylines = {"5678,3336-3033,1458 5923,2474-4936,1076 3554,3780-", "8753,157 5260,8394-1858,8107 2883,5655-1257,2346 9", "8,3901-1935,5818 8543,8073-733,8353 8339,4032-3033", ",2963 4314,4066-5497,3468 7184,6715-513,4316 8452,", "6735-7098,6912 8839,7817-8544,9345 2700,1458-9300,", "7999 5063,331-2270,213 3675,3417-3010,6890 5764,31", "83-9142,2752 8092,2197-1718,9808 9327,7680-235,651", "5 5748,7717-4529,1101 4874,2117-4884,2573 6730,424", "4-6347,7040 9152,7520-4439,157 1783,1765-7287,8728", " 3242,71-3473,5808 7287,6453-5885,4010 6789,8194-9", "258,1138 8782,4499-3172,758 9943,4820-2837,7865 94", "99,6071-7190,6425 5703,7840-7499,1226 2827,8636-13", ",1236 7878,4257-2985,5426 177,1434-1847,4920 2331,", "6033-6254,7234 8167,5336-9280,9340 1730,8150-2107,", "6379 1603,4856-7246,1923 6481,1887-9512,3863 1172,", "1572-6787,7271 7049,8826-1938,1829 7309,714-3164,6", "826 5362,3588-2520,1122 4181,5179-1406,8976 5480,5", "813-7380,5170 233,3727-8855,4494 6248,4385-2913,13", "13 4231,2614-6784,4676 1108,9422-5378,3232 8268,24", "33-5652,2079 2773,19-3591,585 1660,4400-1075,6225 ", "2955,8276-8058,4502 2185,2861-74,9165 9855,2596-23", "64,65 3608,3270-9675,8284 8590,5782-5124,9406 944,", "7394-2436,6225 2266,5915-3347,1554 7388,9-5962,321", " 3889,553-501,7670 9383,3835-5980,6408 1815,7228-5", "119,2793 8744,1984-5053,4421 3916,5770-8256,7744 3", "298,9660-1496,5632 8184,455-632,7302 9993,9379-556", "1,3930 9943,2490-2757,3305 6896,6471-2469,6016 838", "3,5841-3886,3791 3051,4112-4359,7906 7599,1907-810", "1,1823 7634,9646-5717,7613 9842,1059-8357,132 2338", ",6463-9360,6400 1158,1544-1800,198 3451,8180-2551,", "3481 2139,8758-2186,6916 2565,4387-5299,1554 8950,", "407-7717,2471 7362,9721-5436,3057 2355,5555-5119,5", "564 6413,520-7520,9515 4914,8070-3269,4605 4457,58", "08-5155,8870 9067,7474-2215,6026 7081,1892-8777,81", "78 1280,2711-5882,1331 6266,2297-3493,1554 9970,68", "30-9305,9030 729,7326-4040,5742 7383,3100-3703,70 ", "7518,9985-6420,8202 8135,5559-5208,7921 3797,7534-", "8310,5090 9610,9516-5578,6924 275,429-2782,9022 18", "96,9992-5710,5057 210,2907-2438,8989 7482,8630-527", "5,9734 453,1964-3502,7326 3375,2073-4295,7780 3460", ",4007-1958,1105 869,7313-4979,3213 1727,909-6293,7", "834 633,2027-4642,8960 8584,9748-3922,7851 3332,40", "4-3031,1149 1812,2975-867,8297 8462,7469-9868,7103", " 9006,8272-6747,6041 6606,7417-937,672 6138,9862-9", "667,9446 2802,3959-3540,1034 3279,5523-8065,1370 1", "211,3192-4626,3599 3895,6062-9091,8254 3796,2003-7", "438,4149 6700,6518-5588,2720 8193,7500-4970,9845 1", "472,842-6241,9524 2476,5503-1079,3237 2812,4310-59", "75,7277 7008,8579-2560,", "7906 8269,437-6161,794 99,99 99,99 0,0 2,2 3,3"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> polylines = {"5,5 1,0-2,0 3,1-3,2 2,3-1,3 0,2-0,1", " 0,0-10,10 0,10-10,0 5,5 11,11-10000,10000"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> polylines = {"0,0-4181,6765 2584,4181-2584,4181"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> polylines = {"1,0 2,0-0,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> polylines = {"0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,10 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,5 1,8 2,2 3,3 4,9 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,2 1,3 2,4 3,5 4,6 5,7 6,8 7,9 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,4 1,5 2,6 3,7 4,8 5,9 6,6 7,7 8,8 9,9 10,1 1,1", " 0,3 1,4 2,5 3,6 4,7 5,8 6,9 7,7 8,8 9,9 10,1 1,1", " 0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8 9,9 10,1 1,1", " 0,1 1,2 2,3 3,4 4,5 5,6 6,7 7,8 8,8 9,9 10,1 1,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 44;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> polylines = {"0,0-1,0 2,0-3,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> polylines = {"0,0-5000,5000 5000,9999-5001,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> polylines = {"0,0-10,0 11,0-12,0"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> polylines = {"0,0-0,2 0,1-0,1"};
    PolylineUnion* pObj = new PolylineUnion();
    clock_t start = clock();
    int result = pObj->countComponents(polylines);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=251074&rd=10936&pm=8249
********************************************************************************
#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <set>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>
 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<int> pnt;
typedef pair<int, int> pii;
 
#define RA(x) (x).begin(), (x).end()
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())
 
template<class T>
void splitstr(const string &s, vector<T> &out)
{
    istringstream in(s);
    out.clear();
    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));
}
 
 
static int cross(const pnt &a, const pnt &b) { return imag(conj(a) * b); }
static int area(const pnt &a, const pnt &b, const pnt &c) { return cross(b -a, c - a); }
 
static bool isect(const pnt &p1, const pnt &p2, const pnt &q1, const pnt &q2)
{
    if (max(p1.real(), p2.real()) < min(q1.real(), q2.real())) return false;
    if (max(q1.real(), q2.real()) < min(p1.real(), p2.real())) return false;
    if (max(p1.imag(), p2.imag()) < min(q1.imag(), q2.imag())) return false;
    if (max(q1.imag(), q2.imag()) < min(p1.imag(), p2.imag())) return false;
 
    int c1 = area(p1, p2, q1);
    int c2 = area(p1, p2, q2);
    if (c1 < 0 && c2 < 0) return false;
    if (c1 > 0 && c2 > 0) return false;
    c1 = area(q1, q2, p1);
    c2 = area(q1, q2, p2);
    if (c1 < 0 && c2 < 0) return false;
    if (c1 > 0 && c2 > 0) return false;
    return true;
}
 
class PolylineUnion
{
public:
    int countComponents(vector <string> polylines);
};
 
static int parent[2600];
typedef pair<pnt, pnt> line;
 
static int root(int x)
{
    if (parent[x] < 0) return x;
    else return parent[x] = root(parent[x]);
}
 
int PolylineUnion::countComponents(vector <string> polylines)
{
    string pl2 = accumulate(RA(polylines), string());
    vs pl3;
    splitstr(pl2, pl3);
    vector<line> lines;
    for (size_t i = 0; i < pl3.size(); i++)
    {
        vs p;
        replace(RA(pl3[i]), '-', ' ');
        splitstr(pl3[i], p);
        vector<pnt> pnts;
        for (size_t j = 0; j < p.size(); j++)
        {
            int x, y;
            sscanf(p[j].c_str(), "%d,%d", &x, &y);
            pnts.push_back(pnt(x, y));
        }
        if (pnts.size() == 1) pnts.push_back(pnts.back());
 
        for (int i = 1; i < SZ(pnts); i++)
            lines.push_back(make_pair(pnts[i - 1], pnts[i]));
    }
    memset(parent, -1, sizeof(parent));
    int N = lines.size();
    for (int i = 0; i < N; i++)
        for (int j = i + 1; j < N; j++)
        {
            int ra = root(i);
            int rb = root(j);
            if (ra != rb && isect(lines[i].first, lines[i].second, lines[j].first, lines[j].second))
            {
                if (parent[ra] < parent[rb])
                    swap(ra, rb);
                parent[ra] = rb;
            }
        }
    int a = 0;
    for (int i = 0; i < N; i++)
        if (parent[i] < 0) a++;
    return a;
}
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/