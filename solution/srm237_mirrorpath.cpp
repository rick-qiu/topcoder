/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4462
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class MirrorPath {
public:
    vector<string> path(vector<string> map);
};

vector<string> MirrorPath::path(vector<string> map) {
    vector<string> ret;
    return ret;
}


int test0() {
    vector<string> map = {"#.#", "#.#", "#.#"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#|#", "#|#", "#|#"};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> map = {"############", "#######/....", "######//####", "#####//#####", "####//######", "..../#######", "############"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"############", "#######/----", "######//####", "#####//#####", "####//######", "----/#######", "############"};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> map = {"##.#####", "##./`/`#", "#/..../#", "#`....`#", "##`/`/.#", "######.#"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"##|#####", "##|/`/`#", "#/++++/#", "#`++++`#", "##`/`/|#", "######|#"};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> map = {"###", "...", "###"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"###", "---", "###"};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> map = {"###", "#/.", "#`.", "###"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"###", "#/-", "#`-", "###"};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> map = {"#######", "##/..`#", "##.##.#", "##.##.#", "...../#", "##.####", "##.####"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#######", "##/--`#", "##|##|#", "##|##|#", "--+--/#", "##|####", "##|####"};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> map = {"###########.#", "#/........./.", "#.#########.#", "#`........./#", "#############"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"###########|#", "#/---------/-", "#|#########|#", "#`---------/#", "#############"};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> map = {"########.##", "#./......`#", "#../.`....#", "#.`...../.#", "#....`.../#", "###.#######"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"########|##", "#./-----+`#", "#.|/-`..||#", "#.`+-+--/|#", "#..|.`---/#", "###|#######"};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> map = {"##################################################", "#.........../.........`....................../..`#", "#..../........................................../#", "#............................................`..``.............#", "#................................................#", "#................................................#", "#................................................#", "#................................................#", "#.`../................``............/.............#", "#....`............................................", "#................................................#", "#................................................#", "############.#####################################"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"##################################################", "#.........../---------`....................../--`#", "#..../------+---------+----------------------+--/#", "#....|......|.........|......................`--`#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#....|......|.........|.........................|#", "#./--+------+---------/------------`............|#", "#.|..|......|.........|............|............|#", "#.|..|......|.........|............|............|#", "#.|..|......|.........|............|............|#", "#.|..|......|.........|............|............|#", "#.`--/------+---------`------------+------------/#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........|............|.............#", "#....|......|.........`------------/.............#", "#....`------+-------------------------------------", "#...........|....................................#", "#...........|....................................#", "############|#####################################"};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> map = {"##################################################", "#./`../`../`../`../`../`../`../`../`../`../`../`.#", "#/..`/..`/..`/..`/..`/..`/..`/..`/..`/..`/..`/./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "................................................/#", ".............................................../.#", "#./.../`../`../`../`../`../`../`../`../`../`...`.#", "#.`/`/..`/..`/..`/..`/..`/..`/..`/..`/..`/..`/`/.#", "##################################################"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"##################################################", "#./`../`../`../`../`../`../`../`../`../`../`../`.#", "#/++`/++`/++`/++`/++`/++`/++`/++`/++`/++`/++`/+/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "#./+++++++++++++++++++++++++++++++++++++++++++++/#", "#/+++++++++++++++++++++++++++++++++++++++++++++/.#", "#`+++++++++++++++++++++++++++++++++++++++++++++`.#", "#.`+++++++++++++++++++++++++++++++++++++++++++++`#", "---+++++++++++++++++++++++++++++++++++++++++++++/#", "---++++++++++++++++++++++++++++++++++++++++++++/.#", "#./+++/`++/`++/`++/`++/`++/`++/`++/`++/`++/`+++`.#", "#.`/`/..`/..`/..`/..`/..`/..`/..`/..`/..`/..`/`/.#", "##################################################"};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> map = {"##########################", "..........................", "##########################"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"##########################", "--------------------------", "##########################"};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> map = {"#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#", "#.#"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#", "#|#"};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> map = {"###.#", "#/./#", "#`.`#", "#/./#", "#`.`#", "#/./#", "#`.`#", "#/./#", "#`.`#", "#/./#", "#`.`#", "#/./#", "#.###"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"###|#", "#/-/#", "#`-`#", "#/-/#", "#`-`#", "#/-/#", "#`-`#", "#/-/#", "#`-`#", "#/-/#", "#`-`#", "#/-/#", "#|###"};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> map = {"##.########", "#.........#", "..`.`.....#", "#..`......#", "#.`.`.`...#", "#....`....#", "#...`.`.`.#", "#.........#", "#.....`./.#", "#.........#", "###########"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"##|########", "#.|.......#", "--`-`.....#", "#.|`|.....#", "#.`-`-`...#", "#...|`|...#", "#...`-`-`.#", "#.....|.|.#", "#.....`-/.#", "#.........#", "###########"};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> map = {"##################################################", "...............................................`.#", "................................................`#", "#./...........................................`..#", "#/...........................................`...#", "#../........................................`....#", "#.../......................................./....#", "#................................................#", "#................................................#", "#................................................#", "#........../.....................................#", "#........................./......................#", "#................................................#", "#...................../..........................#", "#.......`........................................#", "#..................................`.............#", "#.................`..............................#", "#................................................#", "#................................................#", "#................................................#", "#................................................#", "#.............../................................#", "#..................................``......................................../...#", "#..`........................................../..#", "#`............................................../#", "#.`............................................/.#", "##################################################"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"##################################################", "-----------------------------------------------`.#", "-----------------------------------------------+`#", "#./-------------------------------------------`||#", "#/+------------------------------------------`|||#", "#||/----------------------------------------`||||#", "#|||/---------------------------------------/||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||....../.................................||||#", "#||||...................../..................||||#", "#||||........................................||||#", "#||||................./......................||||#", "#||||...`....................................||||#", "#||||..............................`.........||||#", "#||||.............`..........................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||.........../............................||||#", "#||||..............................`.........||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#||||........................................||||#", "#|||`----------------------------------------/|||#", "#||`------------------------------------------/||#", "#`+--------------------------------------------+/#", "#.`--------------------------------------------/.#", "##################################################"};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> map = {"##.########", "#.........#", "..`.`.....#", "#..`......#", "#.`.`.`...#", "#....`....#", "#...`.`.`.#", "#.........#", "#.....`./.#", "#.........#", "###########"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"##|########", "#.|.......#", "--`-`.....#", "#.|`|.....#", "#.`-`-`...#", "#...|`|...#", "#...`-`-`.#", "#.....|.|.#", "#.....`-/.#", "#.........#", "###########"};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> map = {"########.##", "#./......`#", "#../.`....#", "#.`...../.#", "#....`.../#", "###.#######"};
    MirrorPath* pObj = new MirrorPath();
    clock_t start = clock();
    vector<string> result = pObj->path(map);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"########|##", "#./-----+`#", "#.|/-`..||#", "#.`+-+--/|#", "#..|.`---/#", "###|#######"};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=10383461&rd=6536&pm=4462
********************************************************************************
#include <vector>
#include <iostream>
#include <string>
 
using namespace std;
 
class MirrorPath {
public: vector<string> path(vector<string>);
};
 
vector<string> MirrorPath::path(vector<string> map)
{
vector<string> r(map.size());
 
int cx = -1;
int cy = -1;
int dx = 0;
int dy = 0;
 
 
for (int i=0; i<map.size(); i++) r[i] = map[i];
 
if (map[0].find('.')) {
  cx = 0;
  cy = map[0].find('.');
  dx = 1;
  dy = 0;
}
 
if (map[map.size()-1].find('.')) {
  cx = map.size()-1;
  cy = map[map.size()-1].find('.');
  dx = -1;
  dy = 0;
}
 
for (int i=1; i<map.size()-1; i++) {
 if (map[i][0] == '.') { cx = i; cy = 0; dx = 0; dy = 1;}
 if (map[i][map[0].length()-1] == '.') { cx = i; cy = map[0].length() - 1; dx = 0; dy = -1; }
}
 
 
 
 
while (cx >= 0 && cy >= 0 && cx < map.size() && cy < map[0].length())
{
 
//cout<<cx<<" "<<cy<<endl;
 
if (r[cx][cy] == '.') {
 if (dx == 0) { r[cx][cy] = '-'; cy += dy; } 
 else if (dy == 0) { r[cx][cy] = '|'; cx += dx; }
}
else if (r[cx][cy] == '|' || r[cx][cy] == '-') {
 r[cx][cy] = '+';
 cy += dy; cx += dx;
}
else if (r[cx][cy] == '`') {
 if (dx == 0) { dx = dy; dy = 0; }
 else if (dy == 0) { dy = dx; dx = 0; }
 cy += dy; cx += dx; 
}
else if (r[cx][cy] == '/') {
 if (dx == 0) { dx = -1 * dy; dy = 0; }
 else if (dy == 0) { dy = -1 * dx; dx = 0; }
 cy += dy; cx += dx; 
}
 
 
}
 
 
 
return r;
}

********************************************************************************
*******************************************************************************/