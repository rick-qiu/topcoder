/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=7760
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class RailwayTickets {
public:
    int minRejects(vector<string> travel, int seats);
};

int RailwayTickets::minRejects(vector<string> travel, int seats) {
    int ret;
    return ret;
}


int test0() {
    vector<string> travel = {"1-3 3-5", "2-4 4-6", "1-2 2-3 3-4 4-5"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> travel = {"1-10000", "2-10000", "1-9999", "2-9999", "5000-5001"};
    int seats = 3;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> travel = {"2-3 1-4 3-4"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> travel = {"2-3 1-4 3-4 1-3 2-4"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> travel = {"2-3 1-4 3-4 1-3 2-4 1-2"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> travel = {"1-2 2-5 2-8 234-236 56-878 6-34", "234-776 3242-8000 999-1000 3-14", "121-122 435-3455 123-987 77-999"};
    int seats = 1000;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> travel = {"2-3 1-4 3-4"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> travel = {"1-2 2-3 3-4 4-5 5-6 6-7 1-3 2-7 1-2 1-4"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> travel = {"22-33 33-34 10-50", "1-40", "2-55"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> travel = {"2-4 2-5 2-3 1-6 1-2 3-7 4-6 1-5 1-3 7-97 4-5 4-36", "4-7 4-64 1-2 3-5 4-8 3-72 2-6 1-2 1-3 1-9 5-9 5-6", "5-27 5-6 5-6 4-8 2-9 5-8 4-7 5-6 7-9 1-2 1-6 5-82", "2-9 2-4 6-8 2-9 8-9 4-5 1-50 2-8 8-9 1-3 4-5 8-81", "2-4 7-8 1-36 9-30 3-8 1-4 2-9 1-9 5-6 5-6 3-9 1-4", "1-2 1-8 2-6 1-7 4-7 1-4 9-30 1-8 7-8 1-8 4-9 3-62", "4-34 6-9 3-6 6-9 1-4 2-9 5-9 2-3 4-6 9-63 6-8 1-7", "2-9 1-2 6-8 4-7 2-5 8-9 6-9 4-5 1-2 15-74 2-4 4-7", "4-6 4-7 6-46 5-8 2-89 2-5 5-7 4-5 2-6 2-3 3-5 2-5", "3-4 78-91 5-8 1-7 1-7 5-6 2-3 7-8 6-7 1-4 5-8 5-7", "5-61 8-38 1-8 3-5 4-9 3-8 1-6 1-5 2-7 5-9 1-5 7-9", "5-45 8-9 4-8 7-9 6-8 3-5 5-8 4-8 2-8 5-51 2-9 2-4", "3-6 5-6 3-4 1-9 7-8 3-6 3-4 2-36 4-7 5-56 6-7 2-8", "6-9 1-7 3-4 8-9 7-8 8-9 3-8 1-34 1-5 1-8 9-36 5-7", "1-7 2-9 3-5 2-8 5-9 2-8 9-11 6-47 6-9 4-5 7-8 3-7", "3-7 1-6 3-21 7-15 1-2 3-9 1-5 5-7 1-4 3-9 8-9 3-4", "2-4 6-9 1-5 3-68 1-5 2-3 1-4 7-75 1-4 3-4 1-2 4-8", "5-26 5-7 2-5 4-5 1-45 3-5 5-8 3-8 1-6 1-4 1-6 1-7", "2-3 7-9 8-53 3-6 3-6 1-13 5-6 6-7 2-3 3-4 6-8 4-7", "1-7 4-6 1-8 2-3 5-6 6-8 2-80 2-3 1-2 3-9 8-79 3-4", "4-7 8-9 4-9 8-23 3-9 6-9 1-2 8-9 8-40 4-7 3-8 1-8", "5-76 4-8 5-31 5-7 1-6 3-4 4-7 6-9 2-8 6-9 3-4 1-2", "2-8 4-30 5-8 8-52 6-9 5-8 1-7 2-5 2-5 6-7 7-9 3-9", "1-5 1-7 3-5 6-7 1-4 2-8 5-9 2-6 2-97 2-19 5-9 4-7", "4-8 1-2 3-8 7-8 1-9 1-4 4-5 4-98 2-6 2-3 6-62 3-8", "1-7 2-7 3-8 2-9 5-8 2-9 2-9 6-8 2-88 7-8 8-9 9-82", "6-82 7-8 4-5 5-9 2-81 5-6 7-9 4-7 2-8 3-7 1-7 6-8", "2-7 5-8 4-8 4-9 6-8 5-6 1-21 4-7 5-79 1-3 6-7 7-8", "4-99 3-8 7-8 6-38 4-6 6-8 5-8 7-8 4-8 8-9 3-7 4-6", "8-33 8-9 5-9 7-8 1-9 2-9 8-9 4-8 4-5 1-6 4-7 4-81", "3-9 3-4 8-25 8-66 1-7 1-4 1-2 5-9 3-8 3-6 2-9 2-8", "7-8 1-3 7-8 6-7 6-7 3-6 5-6 3-92 2-12 3-4 4-9 6-7", "6-7 1-4 2-3 2-7 9-26 2-4 5-41 8-9 8-9 2-4 6-8 3-8", "5-9 8-9 6-41 2-8 2-7 1-2 6-48 3-6 7-9 1-4 1-5 1-4", "3-7 1-6 1-4 1-4 6-7 1-3 9-88 2-44 2-3 5-8 4-9 3-5", "2-7 3-8 2-5 1-6 1-3 2-5 6-32 2-6 6-7 5-6 1-11 4-9", "1-6 4-8 5-50 4-5 1-7 8-49 1-8 3-4 3-9 7-8 2-8 8-9", "4-6 7-8 4-7 4-60 2-3 3-33 1-9 1-3 3-4 4-7 3-4 6-7", "2-5 2-6 4-5 5-69 1-4 3-6 4-5 1-7 4-41 1-3 3-4 3-7", "6-7 8-9 2-7 4-6 1-4 2-8 3-44 5-79 1-8 1-2 1-2 5-9", "5-9 8-9 6-9 8-97 2-6 3-9 7-78 8-9 3-4 6-9 2-7 7-8", "2-8 6-47 1-5 5-9 3-9 1-4 7-8 1-2 3-8 7-68 4-5 7-9", "7-8 2-6 5-6 1-9 5-6 6-9 7-35 6-7 3-9 1-87 2-5 1-8", "1-2 8-9 6-9 4-8 4-9 3-8 1-65 2-4 3-7 4-9 1-30 6-8", "3-4 5-6 7-8 1-3 8-85 4-7 2-7 1-5 6-56 3-9 2-5 7-8", "3-5 1-5 1-2 1-4 1-9 6-7 1-4 4-7 4-76 4-6 8-43 2-7", "6-7 1-9 2-5 6-8 1-4 7-8 6-31 4-19 2-6 4-9 2-7 1-4", "3-9 6-8 2-8 2-5 7-8 3-4 4-7 5-9 7-83 1-86 6-7 2-8", "4-46 6-99 1-6 2-3 6-7 4-5 1-4 2-4 4-9 5-9 1-6 2-4", "32-71 1-7 4-9 3-4 3-5 5-6 7-9 6-8 2-4 4-9 3-8 7-9"};
    int seats = 301;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> travel = {"7-44 2-5 9-84 1-5 2-5 1-2 1-2 1-9 7-8 3-7 3-5 1-8", "6-9 3-81 6-7 7-8 5-6 2-3 7-9 5-8 9-45 2-3 6-7 1-5", "5-7 3-8 2-10 1-4 1-64 1-4 8-9 5-8 1-3 4-5 4-7 4-5", "2-3 5-7 2-4 6-8 1-8 2-3 3-22 2-6 1-7 2-7 2-3 9-22", "1-3 5-7 6-8 7-9 1-2 8-9 6-9 1-9 1-3 5-11 5-20 2-4", "1-2 2-8 1-5 6-51 6-7 2-4 6-9 2-8 2-98 3-8 5-9 5-9", "1-4 3-5 2-3 2-67 1-75 2-7 3-7 1-2 1-4 8-9 2-3 1-7", "3-9 2-4 3-6 3-7 1-3 5-59 4-6 5-9 5-58 1-2 1-2 1-9", "2-3 3-93 4-6 3-8 1-5 1-6 3-35 7-8 1-4 2-5 4-8 6-7", "3-8 3-4 1-2 6-23 1-7 1-2 7-8 1-3 9-51 4-7 7-8 4-9", "1-5 2-9 1-8 5-17 8-71 1-7 7-9 2-6 4-8 2-4 1-2 7-8", "6-9 7-8 1-4 6-7 9-45 7-84 1-5 3-8 4-9 7-9 3-6 4-6", "5-9 1-2 4-6 1-7 1-2 1-8 6-7 7-68 3-7 1-6 6-34 1-2", "4-9 8-72 1-6 7-8 1-4 2-5 1-2 5-7 4-9 2-9 3-7 2-28", "4-8 1-9 1-3 4-7 1-4 3-7 1-82 8-9 3-4 3-5 1-15 1-8", "2-6 4-7 2-88 6-7 1-5 3-6 9-67 1-2 2-4 3-5 3-9 2-7", "3-5 4-9 4-6 6-61 4-7 1-7 7-59 5-8 4-6 2-7 5-7 1-8", "1-7 4-54 4-7 4-5 4-6 7-9 5-7 2-3 1-5 3-5 4-43 3-7", "3-8 3-9 5-6 4-5 5-6 3-5 7-83 5-7 5-78 3-8 4-5 4-8", "3-7 1-3 2-11 1-6 6-7 1-8 3-4 8-9 1-3 1-2 6-35 4-7", "1-2 4-5 2-79 4-9 1-7 6-7 3-6 3-4 1-2 4-34 3-6 1-6", "4-9 4-5 1-6 8-96 5-6 4-5 5-6 1-3 4-5 5-6 2-9 7-85", "1-8 3-9 3-8 1-2 7-18 5-9 2-5 1-3 2-7 1-5 1-5 3-87", "5-6 3-4 6-7 3-21 1-5 7-81 3-4 1-5 3-4 7-8 1-9 2-4", "7-8 4-8 5-7 4-5 7-78 2-6 2-3 3-7 2-5 8-22 3-9 4-9", "7-8 4-8 3-5 2-8 1-6 7-8 2-3 3-4 2-19 7-28 5-7 4-5", "1-2 4-5 3-55 7-9 4-7 1-9 8-9 3-9 5-64 4-6 5-7 4-8", "2-8 4-5 2-6 2-6 3-43 3-39 2-8 5-8 6-9 2-6 1-5 2-9", "2-7 1-9 4-8 9-37 1-9 4-5 7-8 4-6 1-4 6-9 2-3 5-14", "5-94 3-5 2-5 1-3 6-9 1-5 3-4 6-51 2-8 1-2 6-8 1-3", "5-7 5-8 2-3 6-7 3-74 1-8 1-7 2-9 1-9 7-61 2-6 2-4", "5-6 6-7 8-9 4-8 1-5 3-27 5-8 1-4 3-9 9-24 2-5 1-7", "1-7 1-8 1-3 2-6 4-7 5-7 7-62 1-2 1-8 8-90 1-9 5-8", "4-8 8-45 6-9 1-7 3-6 3-7 2-4 6-8 5-46 7-8 3-7 2-3", "1-3 5-6 4-7 4-9 1-7 4-42 3-7 2-6 5-14 6-7 3-4 6-7", "2-5 5-6 6-9 3-6 2-8 2-3 6-9 7-8 2-78 1-9 7-8 3-60", "3-8 1-2 9-39 4-9 2-3 5-6 4-5 1-19 6-7 1-2 8-9 4-8", "5-7 1-18 3-88 3-6 6-7 6-8 3-4 1-6 2-8 2-6 4-5 5-8", "6-7 2-3 1-6 2-88 4-5 6-9 8-9 2-5 3-5 2-4 7-47 1-8", "2-4 5-7 6-60 7-8 2-9 2-6 5-8 4-6 5-9 6-9 9-33 6-9", "3-4 5-9 6-7 1-2 3-8 3-62 7-48 1-5 3-4 5-8 3-4 6-8", "62-75 6-9 4-6 1-9 6-8 1-2 8-9 2-8 6-8 3-4 2-8 6-8", "1-3 3-9 3-83 5-8 3-78 3-4 5-8 1-6 7-8 2-4 4-7 2-3", "3-38 1-8 4-5 5-9 3-8 5-49 3-7 7-8 4-8 6-7 4-6 3-7", "5-6 1-9 5-8 6-40 7-8 6-9 2-8 2-7 3-4 4-93 5-7 2-3", "4-5 1-24 2-3 1-81 1-4 1-3 3-4 1-2 1-9 7-8 8-9 5-7", "3-6 1-42 6-8 4-6 2-4 1-7 5-8 4-9 1-6 9-77 6-9 1-3", "2-5 3-6 3-6 1-9 4-6 4-5 6-50 2-33 3-7 1-5 6-8 3-5", "8-9 3-6 3-6 5-8 8-9 2-5 8-9 6-7 5-53 1-6 4-91 4-7", "1-3 1-9 6-7 8-9 4-6 2-6 6-17 4-63 6-9 2-4 3-6 2-9"};
    int seats = 291;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> travel = {"4-5 8-9 1-5 2-4 2-5 3-6 8-85 1-4 5-6 5-51 1-9 6-9", "1-3 2-3 2-9 2-9 5-6 8-9 6-66 4-9 5-6 3-91 6-8 1-2", "8-78 8-9 7-8 3-6 1-6 1-3 8-9 4-8 4-6 6-57 5-8 1-9", "4-9 5-9 2-5 2-5 6-7 4-5 4-9 3-47 1-92 5-9 1-8 2-9", "1-8 2-5 9-22 3-9 1-5 4-6 5-8 2-4 8-9 3-4 7-58 2-8", "3-9 8-9 1-6 4-9 6-8 1-2 3-4 2-4 7-9 6-8 1-6 18-61", "4-8 6-98 4-8 6-9 5-6 2-5 3-6 7-26 2-8 3-7 1-6 4-5", "3-4 6-7 2-9 1-4 1-2 4-9 3-7 7-8 7-10 3-97 4-5 5-8", "3-65 6-7 2-3 2-4 3-6 6-7 6-7 6-57 5-9 6-7 4-9 3-9", "6-7 1-5 1-96 1-2 3-9 7-8 3-8 2-36 2-7 4-7 4-5 2-3", "8-9 3-23 6-8 2-7 6-8 4-8 6-7 3-8 2-4 6-8 3-8 5-83", "4-9 8-10 7-8 7-8 1-2 3-6 1-93 4-9 4-6 1-2 7-8 1-3", "5-6 2-3 1-2 2-8 7-8 6-7 1-2 1-82 4-9 4-9 3-4 2-61", "4-9 7-9 1-61 6-8 2-7 5-9 4-35 1-5 1-6 3-9 2-5 1-7", "3-4 2-8 1-21 4-34 7-9 1-9 5-9 7-8 7-8 2-4 2-3 2-9", "2-5 4-7 7-16 2-8 3-9 1-5 8-9 2-8 1-5 4-9 1-8 9-69", "3-8 1-3 8-9 2-3 1-2 8-64 2-7 1-7 4-9 1-5 1-2 2-59", "6-8 8-9 6-7 4-9 8-9 3-6 1-5 5-6 5-7 5-8 69-72 6-9", "4-5 3-4 6-72 5-6 7-8 7-9 6-58 1-8 1-7 8-9 1-7 6-9", "3-4 1-5 1-2 1-7 9-19 1-4 8-9 6-8 4-8 5-7 1-51 5-7", "4-5 1-2 3-6 1-5 4-91 1-99 5-8 3-8 2-5 3-5 4-5 6-9", "4-8 1-8 8-58 2-8 1-4 2-5 1-19 4-5 2-9 1-2 3-4 6-8", "5-8 3-6 8-9 2-57 2-6 6-94 1-5 5-7 1-3 5-7 7-8 7-8", "3-4 3-5 1-99 1-2 5-9 1-5 2-15 6-8 2-5 6-9 3-9 1-9", "4-9 3-7 3-19 2-7 2-7 6-9 1-8 1-9 8-9 1-23 1-2 1-3", "3-4 2-8 3-4 6-7 3-9 5-9 8-9 3-7 7-91 2-8 8-99 1-2", "1-5 3-4 5-6 2-5 5-6 2-7 2-22 1-2 1-2 2-8 3-7 7-40", "3-9 2-6 8-9 3-8 1-8 2-3 2-5 9-41 4-7 5-7 1-63 6-7", "1-7 8-26 9-68 8-9 3-5 3-8 7-9 8-9 1-7 1-2 4-9 2-7", "1-9 1-8 4-5 1-6 2-5 8-57 1-6 4-35 1-4 2-6 2-8 4-9", "2-3 3-5 9-28 2-7 4-7 6-15 2-5 2-7 1-2 8-9 6-8 4-8", "1-2 6-8 7-69 4-7 3-8 5-9 1-4 1-87 8-9 7-9 3-4 5-9", "2-9 1-38 6-7 3-6 5-6 1-80 8-9 5-6 4-9 5-7 5-8 5-7", "2-6 1-7 1-3 9-34 1-3 6-7 5-30 2-5 7-8 8-9 5-7 2-3", "4-5 4-6 1-2 1-8 7-9 3-4 1-2 4-5 2-5 8-99 4-51 5-6", "6-7 4-8 4-56 3-5 7-18 6-8 2-9 1-2 2-4 5-7 3-4 8-9", "4-8 2-6 8-9 2-41 7-27 3-9 1-2 1-5 4-7 2-4 3-8 1-2", "7-8 1-7 8-9 3-8 4-8 5-64 1-9 2-9 2-3 7-12 1-2 2-6", "2-4 7-83 3-5 6-8 1-7 1-2 2-5 4-23 3-8 4-5 8-9 5-6", "5-6 3-7 6-58 7-79 4-7 8-9 7-9 5-8 2-3 6-9 4-8 1-6", "1-6 5-9 3-8 7-90 4-8 2-56 5-8 5-8 3-8 1-6 5-8 3-5", "1-3 7-36 8-9 1-3 6-9 1-7 8-41 4-5 2-7 3-8 2-4 1-9", "2-6 1-7 7-97 3-5 1-4 4-9 2-3 1-10 2-8 4-8 1-7 8-9", "3-5 3-4 7-8 1-9 1-2 8-13 6-8 3-4 3-6 3-8 9-17 3-8", "1-2 2-4 5-6 6-25 5-7 6-46 3-5 4-7 1-6 4-5 8-9 1-7", "6-9 6-8 1-56 1-6 2-8 3-5 3-8 3-4 3-70 1-5 4-5 5-9", "3-6 3-7 2-6 8-78 2-9 5-96 1-6 8-9 3-5 3-6 1-2 1-8", "2-6 2-26 5-6 3-4 1-9 4-5 3-81 2-6 2-4 4-5 5-7 4-7", "3-5 8-91 1-95 8-9 3-8 7-9 1-5 2-3 8-9 3-5 1-7 2-6", "5-9 4-5 1-2 2-6 3-7 7-9 6-8 4-17 2-7 1-53 1-5 4-6"};
    int seats = 300;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> travel = {"3-9 2-4 1-7 2-6 3-7 3-6 4-9 6-8 9-61 3-55 3-9 2-3", "6-7 6-9 4-5 2-3 1-7 6-9 7-8 2-6 5-9 5-9 6-89 2-34", "9-90 4-5 7-85 3-9 6-9 3-9 7-9 3-7 4-6 4-5 8-9 5-8", "1-9 4-95 2-9 8-9 1-4 4-5 5-27 5-7 2-3 2-4 4-7 1-6", "3-8 8-9 2-82 7-9 4-8 8-75 3-7 1-6 5-8 1-3 4-8 2-8", "2-6 7-8 2-8 4-6 7-8 1-7 2-8 5-74 2-7 1-8 3-55 3-7", "3-9 6-9 1-2 8-76 2-6 2-8 8-9 5-9 4-7 1-5 4-9 1-32", "3-8 2-4 2-20 1-2 6-7 8-9 5-9 8-9 3-8 8-12 1-4 4-7", "4-5 1-3 7-94 2-6 1-9 3-8 7-8 4-6 3-5 1-6 5-50 3-8", "3-7 8-52 3-9 1-4 3-4 6-8 1-9 6-8 4-33 5-7 2-8 1-5", "4-6 5-7 1-9 4-43 5-7 5-7 9-31 1-4 1-7 3-7 1-3 6-8", "4-6 2-4 3-5 2-98 4-5 2-7 7-9 5-9 5-9 3-56 5-6 1-3", "2-98 7-9 5-7 2-5 1-8 3-4 2-3 2-8 5-8 3-87 2-3 5-9", "4-59 2-7 3-8 5-6 1-6 4-74 2-4 1-4 7-8 1-5 8-9 4-5", "5-9 3-5 4-8 1-3 3-61 1-9 1-5 2-87 1-3 7-8 6-9 2-8", "1-2 4-9 1-2 1-9 4-9 4-9 4-37 3-6 1-60 1-4 3-9 3-7", "1-4 3-9 8-71 8-9 2-9 1-9 7-78 8-9 6-8 6-9 1-2 7-8", "8-9 4-9 1-9 7-8 3-6 1-7 1-5 8-44 3-38 3-6 1-4 3-4", "7-8 2-4 4-8 4-9 6-7 2-3 5-6 2-3 3-9 1-4 3-96 1-16", "4-9 3-7 1-3 3-4 8-9 3-6 3-40 3-60 1-8 1-7 3-7 2-4", "2-5 1-3 5-27 1-7 4-9 1-2 8-68 4-9 4-5 6-7 8-9 6-9", "8-9 1-8 7-9 6-96 7-9 4-5 1-3 1-7 4-9 7-8 4-8 4-60", "2-8 8-9 8-9 2-5 9-46 3-7 4-9 1-7 2-3 8-70 1-6 2-5", "6-9 1-2 8-9 6-59 5-8 4-10 1-5 1-7 1-3 7-9 1-2 3-4", "2-9 2-8 2-75 2-8 6-77 1-2 3-7 3-5 5-7 2-5 3-5 1-7", "8-9 2-4 3-4 4-11 4-5 2-6 2-5 1-6 4-6 5-6 4-5 5-96", "4-5 8-9 1-9 7-21 3-6 1-8 3-8 6-8 6-8 4-6 1-5 5-57", "7-8 8-10 1-9 3-7 1-26 7-9 4-9 1-5 2-5 5-7 3-5 7-8", "1-2 7-98 3-7 4-6 1-7 1-4 4-6 4-5 1-2 4-5 9-84 1-7", "1-4 2-5 2-7 7-12 5-6 3-4 1-2 2-4 6-52 4-5 1-9 6-7", "1-5 4-74 3-5 4-50 2-3 4-6 2-7 7-8 2-3 1-6 1-2 7-9", "7-23 4-9 3-6 5-6 2-4 2-75 5-7 3-8 4-9 2-3 6-8 2-7", "1-7 4-9 3-8 1-9 9-82 1-2 3-7 5-7 3-5 2-8 6-15 1-4", "3-9 3-60 2-7 1-6 3-6 6-8 2-4 1-45 3-5 2-7 3-5 3-6", "2-6 4-5 1-3 3-4 3-4 9-54 3-5 4-73 1-3 5-6 3-9 3-9", "1-2 4-8 8-9 6-9 6-7 4-6 5-76 7-8 2-3 8-58 4-6 5-7", "4-19 5-6 2-21 2-3 5-6 2-4 1-2 4-7 1-3 2-5 3-8 3-6", "5-9 3-6 2-6 6-7 5-9 2-6 3-9 4-9 8-9 8-97 9-49 6-8", "1-5 5-9 2-3 3-7 1-5 9-74 1-7 2-6 5-35 3-6 3-7 8-9", "4-9 3-7 9-47 2-19 2-3 4-5 2-7 5-8 3-9 5-8 5-7 4-8", "9-99 6-8 6-7 1-5 8-64 1-3 5-8 1-8 2-9 6-7 5-6 5-6", "1-3 5-8 1-2 7-19 3-7 7-8 2-65 5-6 5-8 3-7 2-5 8-9", "1-4 1-3 7-53 4-8 6-9 2-6 7-8 1-9 5-8 1-4 9-41 1-7", "5-8 2-3 2-7 4-7 5-52 1-5 5-7 7-14 5-8 3-4 4-7 3-5", "4-9 4-34 3-5 3-6 5-6 7-8 2-5 6-7 2-31 1-2 6-8 3-7", "6-68 1-2 3-7 3-8 2-7 2-14 3-4 5-8 2-4 2-3 5-8 3-7", "3-4 3-8 4-5 6-60 2-3 2-3 4-9 3-9 6-8 4-9 1-2 4-65", "1-9 4-9 2-4 5-6 4-11 1-2 3-7 1-4 3-6 1-6 2-6 2-10", "8-9 7-9 8-9 9-21 1-6 3-5 4-5 5-6 7-9 8-9 3-7 8-63", "2-7 4-5 7-86 1-2 4-7 4-8 3-6 2-4 4-36 4-7 3-4 2-5"};
    int seats = 310;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> travel = {"3-88 7-84 8-9 1-4 6-7 2-6 7-9 1-4 2-3 4-9 5-6 1-3", "6-8 7-8 2-5 1-6 6-47 2-3 2-9 3-4 4-9 2-3 5-14 3-7", "2-45 7-8 2-5 4-8 4-7 2-5 2-9 3-8 9-62 1-5 2-8 2-3", "8-9 5-7 2-3 6-8 2-42 4-39 3-7 3-9 3-4 3-7 5-9 1-8", "6-52 2-9 1-7 5-7 5-8 2-61 2-7 6-8 4-8 4-9 7-9 3-8", "7-8 1-9 5-6 5-6 6-7 1-4 1-2 2-8 1-2 8-36 1-9 7-99", "3-4 4-13 6-9 3-4 2-4 1-4 2-64 3-7 2-3 2-6 7-9 7-9", "3-9 2-4 4-9 7-8 4-8 4-6 5-8 9-87 4-9 4-53 1-8 7-8", "5-6 8-9 2-7 1-6 5-12 3-65 2-4 3-5 1-4 4-5 3-5 3-8", "2-5 1-6 5-6 3-5 5-7 3-9 1-8 1-10 4-9 3-6 7-76 1-5", "3-4 5-6 8-70 1-6 1-6 8-94 4-8 2-3 4-6 1-7 1-4 2-5", "5-9 6-7 7-64 2-5 1-6 2-4 3-6 1-6 2-6 1-2 7-47 1-3", "7-9 6-7 6-9 2-6 8-53 1-2 5-85 2-6 2-4 2-7 6-7 2-9", "1-3 5-8 1-5 5-7 4-5 4-9 3-8 7-62 2-7 4-5 8-94 2-6", "4-5 3-6 1-8 2-3 3-8 5-6 4-49 2-3 3-9 3-4 5-32 2-7", "6-9 2-6 4-40 6-8 1-3 2-5 2-3 6-7 6-9 1-5 9-67 1-4", "3-5 6-7 8-9 4-5 1-4 1-67 6-7 2-8 4-6 4-7 9-74 1-5", "2-3 1-9 8-93 4-9 9-28 1-8 4-6 1-2 4-8 4-8 1-4 2-6", "3-4 1-5 2-4 1-5 2-7 3-8 3-9 6-38 2-6 5-8 2-7 7-38", "5-9 6-8 6-9 1-4 5-8 2-26 5-98 1-2 4-7 2-3 3-6 5-8", "7-8 1-3 1-4 2-5 3-8 2-8 1-9 1-2 4-5 2-24 7-79 6-7", "5-8 2-3 1-3 3-6 1-9 8-33 5-9 6-7 6-7 6-63 2-7 6-7", "2-5 3-8 1-9 4-6 1-8 6-7 2-4 5-34 5-7 1-2 2-6 7-58", "5-6 6-7 3-9 1-2 1-61 6-7 3-7 4-6 7-8 6-96 6-7 1-2", "7-61 5-6 1-2 5-6 1-2 2-9 5-6 2-3 3-4 1-2 6-9 4-69", "3-5 6-9 9-67 5-7 3-5 3-9 4-5 1-9 6-8 1-7 3-82 4-7", "2-3 3-4 3-7 4-6 3-7 5-15 1-5 1-8 1-51 3-7 5-6 2-5", "2-3 1-58 6-7 1-2 2-8 4-6 4-8 6-7 2-5 6-56 7-9 7-9", "4-8 6-7 1-3 7-8 8-9 7-93 4-6 2-3 8-85 6-7 8-9 3-7", "2-16 5-9 1-6 3-4 4-8 2-3 5-7 2-3 3-96 4-7 3-9 1-2", "2-3 1-3 6-9 6-80 2-5 1-6 8-77 1-7 5-9 6-9 6-7 4-5", "7-8 2-9 4-5 1-7 7-9 3-5 7-16 3-4 1-24 3-7 1-8 2-6", "5-8 4-64 2-6 9-53 2-7 3-6 2-3 5-6 2-3 3-9 2-6 4-5", "3-5 3-7 2-6 6-7 5-45 4-9 1-2 3-4 6-7 1-7 9-16 1-8", "7-8 4-8 5-7 5-6 7-9 4-8 5-8 5-8 7-40 1-6 2-9 9-83", "7-9 4-5 3-9 7-8 1-4 1-2 4-7 3-46 1-7 1-7 5-47 6-7", "2-8 3-18 3-6 3-4 1-6 5-6 4-8 2-6 4-5 2-6 3-33 6-7", "7-61 2-8 5-8 4-9 4-5 3-6 5-54 4-5 2-7 5-6 7-8 6-7", "3-9 8-49 1-5 7-8 8-58 1-7 4-9 1-2 6-7 6-9 5-9 3-8", "4-7 3-8 1-6 4-9 1-2 2-3 3-4 9-86 3-8 5-98 5-6 4-8", "2-4 8-9 3-9 5-7 3-7 3-20 6-7 8-95 2-9 3-7 1-2 4-6", "7-9 1-8 5-6 1-5 2-7 1-2 5-7 2-73 6-9 1-7 6-9 8-11", "8-9 6-9 8-9 7-96 7-9 1-4 2-9 1-2 3-9 2-5 1-3 3-80", "4-7 4-8 1-7 4-93 3-8 6-9 6-7 1-5 3-8 2-7 8-73 1-5", "3-5 3-7 6-7 5-84 6-7 1-4 3-8 4-9 3-4 4-87 3-7 1-8", "7-9 1-9 5-6 6-8 4-7 3-4 1-2 4-33 6-7 3-6 9-21 1-2", "1-6 7-8 1-4 3-5 1-7 3-6 4-88 1-8 5-57 5-6 3-7 6-9", "2-7 8-9 3-84 6-7 1-8 4-5 7-8 5-71 7-8 2-3 3-4 1-2", "7-25 6-7 1-6 7-8 1-2 2-4 2-9 5-80 2-3 3-6 3-7 3-9", "7-74 3-6 4-9 2-6 3-4 4-8 1-50 4-6 2-6 3-6 8-9 3-6"};
    int seats = 299;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> travel = {"3-7 3-6 4-6 4-9 5-9 1-34 2-7 3-8 4-6 2-15 4-5 2-7", "2-6 3-9 3-4 1-48 1-6 9-71 1-6 5-8 7-8 2-3 1-7 2-5", "3-7 3-4 1-3 2-5 7-8 3-6 1-2 6-7 4-9 9-59 6-7 4-74", "4-8 3-7 6-8 3-4 1-3 1-3 7-9 82-91 5-6 3-6 5-9 1-4", "6-7 4-25 1-2 1-6 9-75 5-6 2-8 2-3 7-8 2-5 6-9 5-9", "7-9 3-4 5-6 3-80 3-6 2-3 4-8 3-4 1-2 8-68 5-6 1-3", "2-9 1-5 1-61 9-62 3-8 3-9 8-9 2-3 3-5 7-8 7-8 1-6", "6-9 3-5 2-9 3-69 1-2 3-9 4-9 2-82 4-6 5-6 8-9 1-2", "3-4 4-5 3-5 4-7 4-5 6-8 1-3 3-4 1-5 6-7 5-80 7-13", "7-68 1-2 1-8 5-8 6-7 5-6 7-9 1-8 1-48 8-9 1-7 5-6", "1-6 2-7 5-8 1-2 7-8 1-7 1-8 3-6 4-17 6-7 1-9 9-27", "2-6 2-4 3-9 2-16 5-6 4-8 1-6 4-8 1-6 1-8 6-39 1-2", "2-7 4-5 7-9 3-7 7-9 5-31 4-96 5-7 3-5 1-4 4-7 1-2", "7-8 2-9 8-22 3-8 6-32 5-7 1-2 1-4 5-9 5-7 8-9 3-9", "3-8 5-8 3-7 5-96 4-9 5-33 5-9 1-8 3-5 1-2 7-9 4-9", "6-7 8-9 1-8 3-6 1-86 4-23 2-5 2-5 5-6 1-6 2-4 1-7", "3-4 7-9 1-4 4-6 4-9 5-84 2-3 2-69 8-9 3-9 4-5 1-8", "1-44 5-8 7-8 2-8 1-5 5-9 6-91 3-5 3-4 7-9 3-6 6-7", "4-57 5-9 1-4 6-8 4-8 5-6 2-5 2-36 8-9 7-9 4-9 4-5", "5-9 2-5 3-62 4-9 8-9 1-2 2-9 3-9 5-8 2-9 2-6 7-34", "5-8 6-8 1-2 4-7 3-6 2-98 8-76 2-4 2-5 2-6 3-9 4-7", "2-8 2-5 6-9 1-9 4-5 3-4 4-8 8-9 8-40 3-10 8-9 5-6", "3-7 8-9 1-5 9-71 3-8 1-3 4-9 3-5 4-7 5-6 6-7 7-62", "4-43 7-9 1-3 3-4 3-4 7-8 6-8 4-7 2-5 3-7 9-70 6-9", "3-5 2-5 1-6 3-4 2-4 2-9 1-2 2-60 1-4 5-8 7-14 2-5", "2-9 2-3 5-26 3-6 5-60 4-8 1-2 5-8 7-9 3-9 2-4 5-9", "5-7 5-20 5-6 5-9 2-7 2-8 6-78 1-8 4-8 2-5 1-9 3-5", "1-72 1-2 5-7 2-5 8-9 6-7 8-96 7-9 5-6 1-8 3-4 5-8", "7-9 3-4 5-79 2-3 2-8 3-4 2-5 2-16 2-6 6-7 1-6 7-9", "24-80 5-9 5-7 1-6 1-2 2-5 4-5 1-6 1-3 2-8 2-7 1-4", "3-4 2-7 7-8 3-5 5-9 2-90 5-8 3-4 1-2 5-6 4-8 1-53", "6-7 6-8 6-15 5-7 7-32 4-8 5-7 6-8 1-2 5-6 2-7 3-4", "2-34 5-6 4-6 5-7 3-7 6-7 4-72 5-6 7-8 1-4 5-9 8-9", "4-33 1-6 1-6 4-5 2-7 1-3 3-7 4-5 5-9 5-8 4-8 7-58", "1-8 5-6 3-4 3-4 8-22 6-7 6-9 4-8 3-4 4-40 2-6 5-9", "4-6 6-9 2-9 1-7 1-2 8-9 8-9 9-68 5-20 5-6 2-9 7-8", "6-34 4-8 5-6 2-9 3-4 1-6 4-8 6-68 6-9 1-8 5-9 2-4", "2-7 8-9 9-14 2-4 6-7 4-7 3-7 3-4 4-33 4-9 4-9 2-4", "8-17 4-8 1-7 7-35 3-8 8-9 3-4 5-9 3-5 6-8 1-4 4-5", "3-8 7-9 1-3 5-6 3-9 6-8 4-17 6-8 9-54 4-5 3-4 5-6", "5-6 4-5 4-9 3-56 4-5 4-5 1-3 6-36 3-6 2-7 6-9 2-5", "3-8 5-6 4-24 3-7 3-7 1-2 3-8 1-2 8-36 2-3 5-7 3-4", "2-8 4-7 6-7 1-7 1-5 3-4 3-6 6-83 2-5 1-2 8-38 5-7", "2-61 3-8 6-8 1-63 3-4 4-5 1-5 8-9 2-9 5-7 2-4 4-5", "5-7 3-8 4-9 2-4 1-5 4-8 13-41 1-5 4-6 4-5 1-2 8-9", "3-5 6-18 1-4 1-2 6-7 4-6 3-4 6-70 8-9 4-8 1-7 1-3", "1-3 4-5 2-4 3-7 2-23 4-7 9-36 4-5 4-8 6-7 1-9 3-4", "2-4 7-35 5-8 4-7 5-8 4-6 4-5 3-7 1-7 3-6 1-49 4-9", "2-8 5-6 2-6 4-8 1-2 2-4 2-81 7-15 1-3 7-8 4-8 3-6", "3-7 4-5 4-74 5-7 7-83 3-5 7-9 3-7 7-8 5-8 3-9 6-9"};
    int seats = 300;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> travel = {"7-9 3-9 3-7 2-3 9-81 7-8 8-41 7-8 3-6 3-5 1-4 6-9", "1-3 7-8 2-8 5-8 1-4 3-6 5-62 1-12 5-7 3-9 5-9 2-9", "2-8 1-5 2-9 3-5 5-7 1-4 4-7 6-9 15-86 6-8 6-9 1-6", "6-7 1-6 7-9 7-98 3-7 5-6 4-8 6-44 3-9 6-7 1-4 5-6", "3-8 3-6 2-7 6-80 6-7 3-7 3-7 3-8 2-75 1-2 3-5 1-3", "2-3 2-6 1-5 1-3 3-11 5-6 4-6 7-9 4-9 2-4 9-69 4-5", "4-28 2-6 2-8 1-9 1-2 3-4 1-2 7-95 1-9 1-6 6-7 1-2", "2-9 2-9 7-19 4-5 1-4 1-3 1-4 8-9 8-9 3-34 4-8 4-6", "1-4 1-4 6-7 1-9 2-3 6-9 6-7 9-11 4-9 6-69 5-9 2-4", "6-8 1-3 1-9 2-9 6-7 2-5 5-7 5-6 4-61 7-8 8-47 8-9", "4-7 2-4 1-4 1-32 5-6 2-7 1-2 3-41 4-8 2-4 7-8 8-9", "3-5 4-19 3-5 1-4 7-8 5-7 2-54 1-2 5-8 2-6 3-6 5-6", "2-6 1-2 2-8 4-5 2-9 1-9 7-9 3-62 2-9 2-44 2-3 4-9", "2-78 1-3 2-8 3-6 7-9 2-4 2-3 2-94 3-9 6-7 1-7 2-8", "6-7 6-8 6-9 7-9 7-8 5-33 7-8 1-7 4-6 8-87 3-4 6-7", "5-9 2-4 2-3 7-83 1-2 2-7 7-9 4-5 9-17 8-9 1-7 4-5", "1-2 4-6 1-7 8-9 2-6 1-2 1-6 1-9 6-9 2-53 2-5 4-17", "2-3 2-8 1-2 8-9 7-8 4-9 1-5 5-9 3-4 5-57 7-8 9-24", "4-6 1-3 1-2 2-4 4-7 3-73 3-8 2-9 2-65 4-9 6-8 4-9", "4-58 8-9 5-7 7-9 2-4 7-8 4-9 3-72 2-3 3-7 5-7 2-8", "3-44 2-3 2-3 1-5 1-5 4-8 5-6 1-4 3-9 8-89 1-5 2-3", "5-6 5-9 2-70 1-6 1-6 2-8 7-9 5-6 8-83 2-7 1-9 2-5", "6-9 2-5 3-8 1-39 1-8 2-3 3-4 3-4 2-4 1-7 6-18 4-5", "3-5 2-5 1-8 3-4 2-7 5-9 4-69 2-6 4-7 5-8 3-8 4-81", "4-7 1-7 7-8 2-9 1-3 1-3 8-9 3-6 7-8 6-8 4-37 7-66", "3-5 4-7 8-9 5-6 1-58 8-9 2-8 5-9 1-4 4-7 1-2 7-68", "3-7 1-3 2-9 2-4 3-98 3-5 8-9 5-9 3-9 2-3 9-62 1-6", "1-5 7-8 9-41 1-5 1-7 2-5 5-6 4-8 6-8 5-8 2-6 1-81", "7-9 6-9 5-14 7-13 6-7 5-8 7-9 1-4 3-4 3-5 7-8 1-7", "1-3 3-8 3-9 8-49 5-6 3-4 2-8 1-9 5-6 3-9 6-30 6-7", "5-9 8-9 2-94 3-9 2-9 3-5 8-9 6-8 2-38 4-5 1-3 7-8", "1-2 2-4 2-3 4-8 2-9 5-7 5-9 6-7 3-7 9-99 2-62 6-8", "3-6 3-9 1-5 7-9 1-7 2-8 76-99 5-8 5-9 6-8 2-9 2-3", "8-52 3-4 5-35 4-5 1-3 6-7 3-5 3-4 2-6 1-4 2-4 6-7", "6-8 7-9 5-8 8-9 4-6 5-9 2-9 4-7 6-8 3-76 5-24 1-2", "4-94 7-59 4-5 4-5 2-8 2-9 3-4 4-8 7-8 2-4 4-7 4-9", "5-9 3-6 5-6 8-9 5-6 1-2 6-8 5-7 5-9 5-6 4-86 1-36", "7-8 2-3 4-5 7-80 2-6 4-8 6-8 1-2 5-9 5-33 3-9 5-6", "4-8 5-8 2-5 9-63 3-4 3-7 8-57 1-7 4-8 5-8 1-7 5-9", "3-9 4-8 5-59 6-7 5-8 3-4 1-84 3-5 5-9 2-7 4-5 3-7", "1-4 8-77 4-8 2-4 5-6 3-6 3-4 1-5 3-4 4-8 8-24 4-7", "6-7 5-65 3-70 3-8 8-9 4-7 3-9 1-2 4-6 3-6 1-5 7-9", "6-8 3-4 6-7 1-8 5-22 3-4 8-88 5-9 6-9 2-8 8-9 3-4", "6-8 2-7 3-31 6-8 1-8 8-59 3-9 2-3 2-6 5-6 2-6 5-7", "7-37 3-4 6-8 3-4 1-7 4-8 2-7 4-5 4-9 6-7 3-65 2-3", "5-58 1-8 7-9 1-5 2-4 3-8 6-8 7-9 6-9 1-4 1-3 3-91", "3-81 1-5 2-26 2-7 6-9 1-8 1-3 1-8 1-2 2-8 1-9 1-2", "4-9 3-9 2-6 3-5 1-2 1-12 9-93 4-5 3-7 4-6 2-9 5-8", "2-8 1-8 1-7 7-8 3-97 3-5 4-8 6-8 3-9 3-5 4-9 9-38", "1-4 2-3 3-80 1-8 3-5 7-9 1-2 1-2 4-84 1-4 1-2 5-7"};
    int seats = 292;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> travel = {"2-96 4-5 1-7 4-6 3-6 4-7 7-91 2-5 2-6 2-8 6-7 4-8", "2-6 2-6 3-7 5-7 5-52 3-7 9-24 3-5 3-8 2-8 2-4 4-8", "1-4 5-6 1-4 2-7 3-7 1-6 1-8 3-4 1-3 5-70 3-53 1-8", "5-6 1-2 4-8 1-31 7-9 8-96 2-3 3-4 1-3 3-4 1-2 6-8", "4-5 8-9 2-9 5-9 1-5 4-15 3-4 8-9 4-6 8-20 6-8 8-9", "2-5 2-5 4-8 3-5 4-6 2-5 1-7 2-9 4-52 1-7 6-18 1-4", "5-50 3-8 2-8 1-7 7-8 8-9 1-6 6-7 6-64 3-7 1-5 2-3", "3-8 4-5 1-69 6-8 3-6 1-2 1-4 3-4 1-9 4-88 4-6 4-6", "2-8 5-8 2-7 3-58 1-7 1-4 6-19 5-6 3-4 6-7 2-6 7-8", "3-6 5-7 8-9 2-9 1-2 6-9 5-8 2-6 9-98 1-85 4-7 3-7", "1-8 1-78 1-5 5-9 7-8 3-8 3-5 6-72 6-7 6-8 7-8 2-6", "1-6 3-6 4-31 5-8 3-7 8-9 1-3 6-8 5-7 7-55 7-8 5-6", "1-44 9-28 4-7 6-8 2-4 1-5 5-7 3-7 3-6 4-5 1-5 2-3", "6-7 2-76 6-16 1-2 1-2 4-8 1-2 2-4 1-5 4-6 4-7 2-9", "5-6 7-70 2-6 3-95 4-5 6-8 1-5 5-8 1-9 8-9 1-5 1-4", "5-7 4-5 2-8 6-9 6-9 2-55 5-7 5-9 3-9 5-91 5-8 1-8", "3-9 4-8 3-8 1-30 1-8 3-4 4-5 3-4 5-9 3-4 3-87 7-8", "1-2 5-6 4-6 1-2 1-2 1-7 8-91 1-3 8-96 1-3 1-6 3-4", "6-9 8-59 6-37 5-9 8-9 5-6 1-2 6-7 3-4 5-8 2-3 8-9", "8-9 3-4 2-6 5-8 4-7 7-23 2-3 2-4 3-6 7-9 5-71 6-9", "5-9 2-7 8-76 2-7 4-8 5-8 7-8 1-75 1-5 3-8 5-6 1-7", "2-4 7-14 1-4 6-62 5-8 2-3 2-8 1-4 4-9 1-2 6-8 1-5", "3-73 8-9 1-7 4-8 4-5 1-7 1-5 2-7 7-35 4-8 3-5 8-9", "3-7 9-99 4-7 1-4 2-4 1-6 4-5 2-4 7-8 1-62 7-9 4-9", "4-9 2-6 1-8 1-52 4-7 7-8 3-68 5-6 1-2 2-5 2-8 6-7", "2-5 5-9 2-3 5-6 7-9 2-8 16-68 6-9 2-8 2-8 1-2 1-2", "3-6 2-96 5-6 3-6 4-13 4-7 1-8 6-7 3-6 4-9 3-8 6-9", "1-3 5-7 4-5 1-6 2-5 3-6 5-8 7-21 1-8 5-8 3-8 1-99", "4-57 6-7 1-2 3-5 3-7 8-84 8-9 1-5 2-9 8-9 5-9 2-9", "1-7 2-6 2-42 2-3 4-8 6-7 8-9 4-5 3-8 4-6 1-88 4-8", "7-9 1-8 2-6 5-7 3-54 4-8 4-8 1-2 1-41 1-7 2-4 4-5", "1-2 3-6 6-8 2-3 7-8 3-8 2-50 2-8 1-9 5-9 1-8 7-38", "2-9 1-3 1-3 7-8 1-4 4-6 5-8 2-3 5-6 1-63 1-2 9-36", "8-9 5-7 3-6 2-6 5-8 5-6 4-85 4-5 6-15 6-8 4-8 4-6", "1-41 7-8 4-9 4-9 3-7 2-6 4-6 3-5 1-11 1-6 3-6 3-6", "5-6 2-8 7-8 1-2 7-92 3-6 5-6 2-5 5-9 6-24 6-7 4-8", "4-5 9-59 3-9 2-4 2-3 1-45 8-9 4-7 3-5 6-7 2-3 2-7", "7-8 1-8 6-7 8-9 9-20 4-6 6-7 2-14 5-7 2-8 1-2 1-6", "6-7 7-8 2-8 4-8 3-7 6-8 8-9 9-72 2-6 2-6 3-4 1-75", "4-9 1-2 4-8 2-5 8-9 3-7 8-87 7-8 9-64 1-7 3-8 2-3", "6-9 1-2 3-7 4-7 4-40 1-6 2-4 2-5 6-9 5-9 2-7 8-39", "6-63 2-5 4-7 8-33 4-7 7-8 2-3 4-5 4-5 3-4 2-6 2-8", "3-6 5-6 6-7 4-7 4-8 4-97 1-7 2-89 5-7 3-9 7-9 2-6", "2-3 3-82 1-5 2-6 1-2 2-4 4-6 4-5 3-4 3-86 7-9 5-6", "2-62 5-9 2-6 3-9 1-2 7-8 2-3 5-8 8-9 1-8 6-8 4-67", "3-5 1-9 6-98 4-5 1-7 2-9 2-3 1-2 5-6 7-8 1-7 5-36", "5-27 6-8 5-81 4-7 3-7 2-5 1-7 4-8 1-9 3-7 2-4 6-7", "6-9 1-9 4-10 2-4 5-52 4-8 4-5 5-6 1-8 1-4 6-7 5-6", "1-7 2-5 7-8 3-97 1-2 2-79 3-5 6-7 4-7 3-6 1-2 3-4", "7-66 2-4 2-3 4-8 3-8 6-7 1-6 4-8 2-6 4-6 9-63 5-6"};
    int seats = 309;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> travel = {"7-42 3-4 6-15 3-8 2-7 1-7 2-4 1-2 1-9 5-6 5-9 2-9", "2-3 5-7 2-3 4-9 2-8 1-4 3-7 3-8 3-9 5-28 5-9 1-91", "2-4 3-4 2-3 3-7 6-71 3-5 6-7 1-2 7-8 4-77 1-8 2-7", "2-5 4-9 6-24 1-2 3-8 2-5 3-7 2-3 2-7 2-6 4-69 3-5", "1-8 4-9 4-9 1-4 2-4 8-9 6-37 7-90 1-6 3-7 1-5 2-4", "3-4 3-5 9-23 3-4 7-65 5-7 6-9 5-6 1-9 1-8 2-7 3-4", "3-21 3-6 4-6 2-6 3-6 7-8 7-9 7-8 9-35 6-9 3-7 3-4", "5-8 5-79 1-6 3-6 1-3 3-9 7-9 1-6 7-90 3-4 4-6 6-9", "1-5 1-6 5-8 2-6 3-4 2-6 9-40 3-8 7-8 3-57 2-9 1-7", "4-9 3-7 2-6 6-7 2-5 7-8 9-40 6-27 6-7 8-9 3-8 4-6", "4-5 2-9 7-96 8-22 3-6 2-9 1-5 5-7 5-6 7-9 2-3 3-4", "7-9 3-5 5-8 6-7 5-9 5-98 7-87 8-9 6-9 3-5 3-4 1-4", "9-38 1-5 8-9 2-3 1-8 1-3 2-3 1-2 6-9 2-3 5-56 3-5", "6-9 2-4 1-7 2-3 1-4 3-7 4-20 2-7 4-6 3-7 2-42 1-4", "5-9 3-25 2-8 3-7 5-6 6-9 8-9 2-9 1-7 1-8 1-90 8-9", "1-8 1-3 9-69 6-7 2-7 1-8 1-5 2-9 1-7 2-8 4-96 5-8", "5-8 5-36 6-7 2-9 3-6 5-6 8-36 6-8 1-7 6-7 7-9 4-7", "4-8 1-7 2-3 6-9 1-4 8-9 1-9 1-4 2-7 3-8 15-28 1-2", "7-8 3-24 4-8 4-9 5-7 2-81 3-8 2-9 4-9 1-4 1-9 1-4", "2-7 1-6 2-8 5-6 6-7 72-79 5-9 5-6 1-6 1-2 1-3 3-8", "5-63 1-3 4-30 5-7 2-6 6-7 2-4 3-4 1-9 1-2 1-3 1-3", "1-2 4-7 1-5 8-9 9-15 5-33 8-9 1-8 2-4 3-6 1-2 1-4", "6-9 1-3 1-3 3-7 4-7 3-8 8-45 3-6 3-4 6-8 3-21 1-7", "6-8 2-6 1-4 2-7 5-8 2-80 3-8 6-9 6-8 1-7 3-4 1-18", "1-5 3-5 4-6 4-5 2-5 1-2 4-5 32-48 2-5 1-9 2-8 4-9", "3-9 1-98 5-6 6-57 8-9 7-8 7-8 2-6 4-8 1-5 1-8 2-6", "1-4 4-9 4-7 4-7 6-7 2-78 3-7 4-8 4-9 5-6 8-9 7-67", "3-36 3-7 5-9 6-7 1-5 1-5 1-2 1-6 2-6 5-7 6-68 3-6", "2-83 1-3 7-8 7-9 5-7 6-11 2-4 7-9 1-3 4-9 1-8 2-5", "5-7 3-8 2-8 4-9 4-5 6-8 5-9 4-7 1-4 5-14 7-14 4-7", "5-6 4-7 9-24 4-6 1-2 2-3 5-6 4-6 9-98 5-7 1-2 2-4", "8-9 9-13 1-74 4-9 1-3 6-8 7-8 5-8 3-8 5-6 4-5 4-7", "4-9 7-95 4-5 1-8 1-6 8-9 7-8 8-88 2-9 1-5 4-5 2-5", "1-4 4-7 7-97 7-9 1-4 2-8 3-7 5-37 3-4 2-8 7-8 5-7", "3-8 2-6 6-8 1-9 1-8 5-90 3-9 2-7 1-6 2-7 2-7 8-86", "1-3 6-7 2-44 4-9 5-37 2-6 8-9 5-6 2-9 3-5 2-5 5-6", "1-8 1-2 6-27 1-2 7-8 2-5 2-3 1-5 6-9 4-6 9-38 4-6", "4-9 1-8 4-87 8-9 4-5 2-40 4-7 4-7 8-9 2-6 4-8 2-8", "1-7 7-14 3-5 4-8 3-4 4-8 6-7 4-6 4-5 8-9 1-5 3-62", "8-46 1-8 6-83 1-4 6-8 1-9 1-4 4-9 1-9 3-4 2-3 4-5", "6-25 4-9 1-5 3-9 2-7 1-9 7-8 1-8 6-49 7-8 5-7 8-9", "1-5 7-8 7-8 7-9 2-7 3-33 5-9 2-8 7-89 2-5 3-8 1-5", "5-7 6-7 7-9 4-8 1-7 5-48 2-5 3-5 7-10 3-9 6-8 4-5", "7-8 6-9 3-37 1-6 3-6 5-6 8-9 6-80 4-6 2-6 2-5 2-4", "1-2 7-9 5-8 4-93 7-8 4-5 8-28 7-9 5-7 2-5 1-6 1-2", "1-6 4-6 2-5 3-4 8-43 5-7 2-4 7-9 5-43 8-9 6-7 4-6", "6-8 4-6 4-5 7-80 5-8 3-9 5-69 8-9 2-4 2-7 5-8 4-7", "7-9 1-5 3-9 6-9 3-4 1-2 9-12 2-4 4-9 3-60 1-6 1-6", "2-3 4-6 5-7 7-8 1-6 9-87 3-4 5-6 5-9 2-7 7-39 7-9", "6-7 1-3 1-2 8-49 3-46 1-5 7-8 3-8 2-4 2-9 2-9 7-8"};
    int seats = 294;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> travel = {"1-2 4-9 1-34 2-55 2-7 1-2 4-7 4-5 1-2 3-4 2-7 3-9", "8-92 2-8 8-44 6-8 5-9 3-8 5-8 6-8 1-4 4-9 2-3 2-6", "3-4 3-9 2-5 4-8 1-5 6-9 1-8 2-58 2-4 3-41 2-6 2-6", "2-5 3-5 1-7 6-7 2-6 8-72 4-9 3-8 6-41 1-6 1-6 1-4", "1-4 9-48 7-8 7-9 2-8 3-5 3-4 7-9 2-3 1-44 1-9 2-7", "1-2 5-9 7-9 7-9 1-2 3-8 3-6 7-9 5-42 7-22 6-8 4-6", "8-9 4-8 3-52 6-9 2-3 3-6 2-3 6-7 3-4 5-76 5-8 2-4", "1-7 3-9 4-7 5-24 3-9 5-95 1-4 2-3 5-6 3-8 4-7 6-7", "3-7 3-4 5-7 5-8 1-41 2-6 2-8 1-7 1-11 2-3 2-9 6-7", "3-6 4-6 5-7 7-8 2-42 3-39 4-6 1-7 1-8 3-4 4-5 4-6", "1-4 2-4 5-17 1-9 3-5 6-13 2-7 3-7 1-3 3-4 1-7 3-6", "4-9 3-5 1-2 5-8 3-4 5-6 2-5 2-6 4-9 4-5 47-59 1-7", "4-5 5-88 1-6 8-9 8-9 6-7 3-6 4-6 3-8 6-7 6-7 6-69", "2-4 7-9 2-8 5-8 1-40 1-6 1-6 1-9 5-36 4-9 4-9 4-6", "4-7 6-8 8-9 2-7 1-6 5-6 1-69 4-9 3-59 5-6 4-5 8-9", "4-6 1-4 1-3 3-61 1-7 4-5 1-5 2-4 1-3 2-80 3-7 1-5", "4-5 4-9 8-9 7-52 1-7 2-6 4-5 4-9 2-5 1-2 5-9 7-65", "1-4 1-25 2-5 4-6 1-13 5-7 6-7 2-3 3-5 1-9 1-4 3-5", "1-5 4-66 5-9 2-6 7-9 1-2 4-5 3-9 2-81 2-6 1-7 7-8", "3-5 7-8 2-3 3-6 2-3 6-7 3-9 1-2 9-19 4-88 3-5 1-8", "8-9 1-2 2-4 3-6 3-7 3-4 4-5 3-9 7-9 1-2 28-48 1-7", "4-8 7-9 1-2 3-5 1-5 1-5 8-19 3-5 6-25 1-5 7-9 6-7", "8-9 1-3 1-7 6-8 1-4 7-8 7-63 5-39 3-5 2-8 7-9 3-5", "1-7 6-8 1-7 2-4 1-39 2-4 4-6 2-5 3-5 4-7 1-7 3-48", "4-8 7-9 5-86 8-9 2-4 6-7 8-9 3-71 3-4 5-7 7-8 4-8", "2-8 3-9 4-5 4-7 1-2 5-6 7-18 1-2 6-7 4-6 9-82 2-3", "4-6 1-8 1-5 5-7 7-9 2-6 4-6 9-91 5-8 2-7 7-8 7-97", "6-7 2-3 3-5 4-8 3-99 3-4 7-9 5-7 3-4 9-71 7-8 4-7", "2-28 4-7 4-7 5-8 5-7 4-5 5-9 1-3 9-77 2-6 6-7 2-3", "5-7 2-4 3-8 4-9 6-7 1-2 1-89 2-9 2-3 1-7 2-5 8-50", "8-9 9-64 4-9 1-8 8-14 4-5 5-9 2-4 2-3 3-8 3-6 2-3", "5-7 7-9 3-5 3-4 1-2 3-4 2-8 3-55 8-88 4-6 7-8 6-7", "7-9 7-9 4-6 3-5 3-4 2-5 3-68 4-7 6-36 3-9 2-3 4-5", "5-6 2-4 2-4 2-7 2-7 2-89 9-27 5-9 1-8 7-9 5-9 1-4", "1-9 3-4 8-87 5-6 1-7 6-8 4-6 3-4 4-6 2-5 3-6 2-37", "3-5 1-9 2-72 5-9 6-7 5-8 8-65 1-7 2-7 4-5 1-2 1-4", "4-8 3-7 1-4 4-8 2-9 3-7 6-9 2-5 6-92 6-7 4-28 7-9", "1-2 7-8 2-3 4-67 4-8 5-7 9-80 3-4 4-5 6-7 3-5 4-6", "1-2 4-5 1-8 7-8 1-7 1-9 4-79 3-5 7-8 5-19 1-7 3-4", "6-8 4-16 1-7 2-9 1-9 1-3 2-99 3-8 5-8 4-5 4-5 6-9", "6-7 4-7 4-6 9-78 4-6 6-8 6-9 4-7 4-6 2-3 7-30 1-5", "1-9 9-13 1-2 5-28 6-7 2-3 7-9 4-9 4-9 5-7 2-3 4-7", "1-2 4-9 4-6 6-28 1-8 1-2 2-8 8-40 3-6 6-9 4-5 3-8", "5-9 6-7 1-54 4-8 3-4 3-8 2-7 5-6 7-8 3-9 3-7 5-43", "3-7 4-94 4-8 2-3 5-8 1-3 1-8 1-8 1-9 2-90 3-4 7-8", "4-6 2-5 3-27 1-5 1-3 4-5 5-7 1-2 4-6 2-5 4-7 9-84", "5-6 2-9 2-4 3-8 1-5 6-7 5-8 1-9 2-19 5-87 1-2 2-4", "5-28 3-6 2-9 5-7 3-6 3-8 1-2 8-9 2-3 7-10 8-9 2-5", "7-8 8-85 1-6 1-56 7-9 2-7 5-9 1-4 1-2 6-9 1-8 1-4", "4-74 1-3 7-8 2-6 6-8 3-5 1-12 3-4 2-5 2-9 4-6 2-6"};
    int seats = 297;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> travel = {"6-95 2-8 2-3 8-9 3-9 2-6 1-48 2-7 2-9 2-8 1-2 5-6", "8-9 2-6 1-3 4-71 1-2 2-4 2-5 7-9 3-8 6-7 5-70 2-5", "1-6 2-4 5-8 3-5 1-8 3-8 5-7 1-7 6-19 1-3 5-7 8-18", "6-7 7-8 3-7 5-9 2-4 3-93 1-8 5-79 2-7 7-8 7-9 3-8", "1-2 8-9 4-5 2-3 8-76 1-2 1-31 4-9 7-8 5-7 4-7 4-8", "1-2 2-6 7-8 1-2 5-6 2-9 5-7 2-5 2-3 3-42 6-66 5-9", "4-9 4-9 5-6 2-4 4-7 1-6 4-5 6-51 5-6 3-42 2-4 1-2", "1-11 5-6 3-6 5-7 1-3 6-7 3-6 3-6 5-7 4-9 5-75 1-4", "2-34 3-7 1-7 2-5 4-5 1-7 8-98 8-9 4-9 2-6 5-9 4-8", "4-5 4-5 4-9 6-7 3-39 3-4 2-3 1-5 2-5 2-96 6-7 3-7", "2-6 1-9 3-8 3-4 3-9 6-9 5-9 4-71 3-5 5-7 3-58 5-9", "8-83 8-9 1-8 1-4 3-9 1-5 4-5 6-7 6-34 5-9 5-9 1-2", "7-9 2-3 1-6 3-8 3-6 6-47 1-7 2-7 3-6 4-5 3-96 5-6", "1-6 3-24 1-4 2-7 2-7 1-3 2-5 2-60 3-5 2-6 6-7 4-5", "2-7 3-8 2-3 1-3 2-9 5-8 5-72 1-47 3-4 2-3 3-5 6-7", "1-9 3-6 4-5 4-5 1-97 1-2 3-26 4-8 4-5 3-6 2-5 3-4", "4-64 2-4 1-64 3-7 3-6 5-8 3-4 5-6 1-4 2-6 1-2 2-7", "7-8 1-4 2-4 7-9 6-35 1-9 3-5 2-5 4-7 4-44 2-5 3-4", "4-9 3-8 1-5 2-8 2-5 3-86 5-13 7-8 2-7 2-9 5-7 3-4", "5-6 3-6 1-7 3-7 2-7 4-5 4-5 6-75 1-2 6-7 1-7 5-85", "3-7 2-6 1-81 1-5 5-6 6-7 7-91 2-6 1-5 4-7 4-7 2-3", "7-9 2-5 2-5 3-27 1-6 6-7 1-95 1-8 4-8 5-9 3-4 6-8", "2-94 2-6 4-8 3-7 5-58 1-7 4-8 1-2 4-7 7-8 6-8 7-9", "1-8 2-44 6-7 2-3 3-8 3-7 7-8 6-7 1-2 9-24 6-7 6-9", "6-31 7-9 1-4 3-9 3-8 8-9 4-31 5-6 3-8 4-5 4-6 8-9", "5-7 2-6 5-8 1-9 5-8 4-5 1-3 7-63 5-8 5-56 1-8 2-8", "7-10 2-9 2-9 9-97 1-2 2-9 1-7 7-9 4-7 1-8 1-3 4-9", "7-8 3-5 3-4 8-9 1-34 5-6 2-5 8-9 5-6 6-7 5-46 3-9", "5-7 1-2 2-6 3-7 6-7 3-4 5-8 7-8 1-50 1-79 3-5 3-4", "1-6 3-9 5-8 4-5 4-5 8-9 2-6 1-6 6-7 6-7 9-83 3-90", "3-4 1-7 1-8 7-78 1-6 7-8 1-75 1-2 3-7 1-7 2-6 2-8", "2-6 3-6 2-13 8-66 4-6 4-9 8-9 2-6 4-5 1-7 2-3 3-5", "7-9 5-87 6-34 2-9 6-9 4-6 4-6 5-7 2-8 7-8 1-4 4-5", "2-3 1-7 5-8 1-9 4-8 2-6 8-25 3-7 1-9 7-9 1-37 6-8", "8-9 4-9 6-8 8-63 5-9 3-5 2-8 2-8 8-84 3-6 5-6 1-8", "1-6 5-6 9-82 6-61 2-7 7-9 4-7 1-2 3-8 7-8 4-7 7-8", "2-8 5-7 1-2 1-3 3-8 1-9 3-8 3-5 5-7 7-18 2-30 8-9", "3-9 5-8 1-2 8-9 1-3 1-2 6-8 5-63 4-9 3-8 7-8 7-20", "6-7 5-7 3-25 3-8 4-15 1-2 5-7 3-6 3-9 3-5 5-8 2-8", "5-6 1-4 4-9 2-8 3-4 5-6 8-9 3-87 2-7 4-78 3-8 1-5", "1-9 1-9 7-9 3-71 2-7 1-9 4-5 2-3 1-32 6-8 4-6 1-6", "2-8 3-8 2-5 6-8 4-6 4-6 9-14 2-5 4-6 1-60 3-6 3-8", "1-4 5-8 1-2 4-5 6-9 3-4 6-7 1-35 2-53 6-8 1-4 1-7", "6-8 2-3 3-8 2-4 2-18 4-52 5-7 6-8 1-6 1-7 1-5 8-9", "6-7 3-4 1-2 5-9 6-8 4-5 2-3 3-7 3-6 6-9 8-49 7-67", "3-6 3-7 5-6 7-8 1-2 6-20 1-3 2-3 2-95 3-9 5-6 4-5", "4-8 3-5 6-35 4-8 7-8 3-7 3-4 2-4 2-8 4-5 1-36 2-4", "6-7 9-78 3-7 2-4 4-5 6-21 1-7 1-7 3-8 5-6 6-9 5-6", "4-9 6-7 4-8 1-6 1-6 9-49 1-6 6-8 4-7 1-7 2-96 2-4", "1-2 8-65 4-9 3-4 4-5 5-8 2-5 6-9 5-6 6-8 4-5 7-43"};
    int seats = 315;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> travel = {"3-75 5-9 2-7 1-2 4-6 1-67 4-5 6-8 5-9 5-6 2-8 2-8", "3-6 3-9 1-3 2-13 5-7 2-5 4-6 6-8 4-7 2-65 2-9 7-9", "6-65 2-7 2-4 2-4 9-48 4-5 1-4 8-9 8-9 1-8 8-9 2-6", "4-7 2-6 3-4 5-7 6-41 2-9 4-6 6-9 1-6 2-4 4-92 6-7", "2-8 1-53 6-9 6-7 2-3 2-3 7-8 2-3 6-8 1-3 2-32 4-8", "7-8 3-4 4-89 4-7 2-7 1-6 3-9 2-8 5-9 7-8 6-55 1-5", "3-5 1-4 4-14 1-8 1-8 1-2 2-35 1-2 2-9 7-9 7-8 5-7", "4-5 1-5 3-27 2-8 8-49 2-5 3-4 3-8 1-6 1-6 6-7 2-6", "1-6 6-8 6-95 1-6 1-8 3-6 2-8 3-4 6-8 3-4 8-44 1-8", "3-4 1-5 2-9 2-8 7-9 7-8 1-3 3-9 1-6 3-33 5-9 5-21", "5-7 2-7 2-7 3-9 2-8 5-74 4-5 5-57 1-3 5-6 8-9 5-6", "8-9 5-59 5-6 5-6 4-5 3-8 1-7 1-9 4-19 1-6 1-7 3-8", "6-69 6-7 2-7 7-8 8-9 4-9 2-3 1-9 6-7 5-28 3-7 1-5", "5-6 9-51 2-5 4-5 6-9 1-5 1-9 4-5 1-7 8-55 1-5 2-3", "2-7 9-30 1-5 4-8 1-5 5-7 2-6 5-9 8-53 4-9 4-8 4-5", "1-7 6-9 1-7 3-6 3-99 6-89 1-7 2-3 6-8 4-5 2-8 5-8", "2-7 7-8 9-90 7-9 3-6 4-8 2-7 5-8 4-7 2-58 1-5 1-9", "2-7 7-70 4-6 1-8 4-5 2-6 7-8 2-4 7-95 7-9 6-9 2-3", "8-9 9-86 6-7 2-3 1-6 1-5 5-9 7-9 3-4 4-52 3-5 3-4", "5-7 3-18 4-8 6-8 4-5 1-9 5-8 1-2 3-7 1-6 8-54 5-6", "5-8 1-8 7-8 6-49 6-9 2-5 1-79 3-8 8-9 6-9 3-9 8-9", "2-5 2-8 4-6 4-9 4-19 5-9 7-9 7-8 4-9 4-5 3-5 9-86", "1-6 5-6 1-9 8-9 7-9 4-9 1-2 2-8 5-93 3-55 4-8 3-6", "4-7 3-8 5-40 2-6 5-8 6-7 3-9 2-13 7-8 2-4 6-8 4-5", "3-5 2-4 1-8 4-5 4-5 1-9 3-4 2-8 7-8 1-87 1-5 2-37", "1-2 5-9 5-53 3-8 4-7 9-97 3-5 6-7 7-8 4-5 5-6 1-7", "2-3 9-89 2-7 2-9 7-31 3-4 4-5 7-9 1-6 4-8 7-9 5-9", "9-73 3-4 2-4 8-61 3-7 3-4 2-3 2-6 5-7 2-5 3-8 2-5", "2-8 5-8 2-8 2-4 6-7 2-93 1-2 2-26 1-4 7-9 3-8 5-9", "2-43 1-7 5-8 3-4 6-9 7-8 5-34 5-6 5-7 3-7 6-7 5-7", "1-8 1-6 5-6 5-7 1-6 7-67 3-7 4-5 2-4 4-6 5-9 4-96", "5-7 1-21 6-9 9-50 5-6 4-6 5-6 3-8 3-4 1-7 3-8 3-4", "1-4 3-7 6-9 4-6 5-6 3-8 4-5 5-7 1-2 4-84 4-8 9-40", "3-7 1-7 7-8 4-9 6-7 4-8 6-8 7-49 1-5 6-31 4-9 4-9", "7-8 1-7 5-6 4-6 1-12 8-9 4-7 6-7 5-6 5-6 2-8 4-90", "5-7 6-15 3-8 4-5 2-9 1-4 2-4 3-5 1-8 4-8 3-5 1-23", "8-9 6-89 6-9 3-4 4-7 7-8 2-26 5-6 8-9 8-9 1-9 4-6", "2-8 2-8 4-34 3-4 2-9 2-3 6-27 1-5 1-2 2-9 2-5 2-4", "4-6 2-7 7-9 1-2 8-51 1-4 5-9 4-7 4-6 5-82 4-7 4-6", "7-8 4-34 5-9 4-6 3-4 1-6 4-5 6-7 1-4 1-3 1-99 3-4", "2-9 1-6 4-5 6-8 2-3 1-69 2-6 4-6 2-3 1-2 5-82 1-4", "1-2 1-4 3-7 1-5 9-91 1-7 1-2 1-2 7-8 3-7 2-8 5-76", "2-7 1-7 1-5 2-66 2-9 8-78 1-2 5-6 4-7 4-5 6-9 3-5", "8-9 3-5 1-2 3-4 1-4 3-5 5-10 5-8 2-8 5-73 3-8 5-7", "5-6 3-9 2-8 6-9 3-9 7-97 4-9 7-9 2-41 1-3 3-5 7-8", "1-3 3-7 7-12 3-5 1-9 1-2 3-6 5-68 1-2 2-4 1-6 2-3", "2-8 4-8 2-5 4-5 2-3 1-28 1-9 3-8 4-8 9-10 1-9 6-7", "3-6 2-9 3-7 4-5 4-6 2-7 4-6 6-9 6-7 3-7 30-37 5-7", "5-6 6-9 1-2 4-5 4-24 3-30 4-9 4-5 1-4 1-8 2-9 7-8", "3-36 6-8 1-9 4-6 1-9 2-3 1-7 3-4 2-8 5-6 9-42 3-9"};
    int seats = 315;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> travel = {"1-6 3-5 1-3 1-6 1-4 6-30 1-7 2-7 2-8 1-2 3-7 9-13", "3-4 2-3 1-6 5-86 2-7 1-7 1-6 2-4 2-7 6-23 4-8 6-8", "5-7 8-9 2-3 1-65 5-9 8-9 6-9 1-2 3-5 7-8 2-64 7-8", "1-5 5-8 5-8 5-9 9-23 1-7 4-8 8-47 5-8 5-8 2-4 4-9", "1-4 4-7 1-2 1-2 2-3 4-7 3-32 5-8 1-5 7-41 3-8 2-6", "3-9 7-8 5-7 6-8 4-5 3-5 7-17 4-5 6-7 1-9 2-49 4-5", "1-2 4-7 7-9 8-9 2-73 5-7 4-6 3-59 3-5 3-4 2-9 2-5", "5-8 5-9 3-7 8-9 1-2 7-8 1-6 2-7 2-8 5-6 6-81 4-31", "3-4 1-5 3-8 4-6 1-3 1-5 1-6 5-8 5-6 5-9 6-14 3-34", "9-48 1-5 7-8 7-91 1-2 8-9 4-6 4-6 1-9 6-7 2-4 5-8", "6-8 6-7 7-39 7-9 5-6 5-9 4-5 1-2 1-5 5-9 7-9 9-51", "8-9 2-6 1-9 2-4 4-41 5-9 1-3 5-9 7-8 1-4 2-3 6-21", "5-6 3-5 1-6 3-8 3-7 2-3 8-14 7-8 2-3 5-9 9-19 1-4", "7-26 6-9 6-8 1-3 3-8 4-5 8-72 2-8 4-7 2-3 2-7 5-6", "2-44 2-8 2-98 5-9 6-7 5-9 8-9 4-7 6-7 1-9 1-5 5-8", "7-76 4-7 6-9 1-8 4-6 6-9 4-6 1-4 5-6 7-23 1-2 7-9", "8-99 1-3 6-7 4-5 4-7 6-9 5-9 2-3 5-6 6-8 9-57 6-9", "2-4 1-7 1-6 1-9 6-8 1-4 1-5 6-7 1-5 3-5 2-97 5-57", "3-4 8-51 3-5 5-7 2-3 2-4 9-46 3-9 3-4 3-5 6-8 4-9", "5-7 1-81 7-8 4-9 7-8 3-4 4-8 3-4 6-9 2-15 2-5 6-8", "1-7 5-7 7-8 2-9 1-4 9-23 1-6 1-4 3-7 7-80 1-4 1-4", "4-7 6-9 2-8 8-9 3-77 1-3 6-9 3-9 1-2 7-32 3-7 3-4", "5-7 3-8 3-5 5-7 3-6 6-56 6-9 9-19 1-3 2-3 6-9 3-7", "4-39 2-9 1-64 4-7 3-9 4-9 3-9 6-8 2-4 2-7 1-3 4-9", "2-61 6-8 3-7 6-8 4-8 1-6 2-49 2-4 4-6 1-6 7-9 5-6", "4-8 3-5 3-8 1-8 1-7 1-2 2-8 3-44 8-65 2-6 6-7 5-6", "1-3 9-36 1-6 6-7 4-9 2-7 5-9 4-5 3-6 3-7 6-8 9-82", "1-78 3-5 3-6 4-9 1-6 3-54 1-2 5-6 6-9 2-4 6-8 2-3", "4-9 3-4 9-72 1-2 2-6 1-7 5-71 6-8 4-5 2-9 5-7 7-8", "2-7 2-3 3-8 6-17 2-9 5-9 6-76 1-4 3-8 4-8 5-8 5-7", "3-7 1-6 1-71 5-6 4-7 4-5 2-8 8-9 4-5 3-5 1-43 2-9", "2-7 3-6 5-8 6-7 4-7 7-54 1-8 1-9 9-44 3-5 1-3 1-4", "6-8 2-6 1-3 8-9 7-8 5-6 3-4 5-6 7-13 2-80 6-9 2-5", "3-4 7-9 8-78 2-4 2-9 1-3 7-9 4-5 8-9 6-29 4-7 3-6", "6-8 2-3 5-6 1-9 5-6 1-5 3-8 9-63 5-62 4-8 6-7 2-7", "8-9 4-6 2-7 3-4 3-4 1-5 5-70 6-9 4-7 1-9 3-79 2-3", "1-7 3-5 5-29 2-7 6-8 6-30 1-4 1-4 1-2 1-2 5-6 3-4", "4-9 2-5 5-83 1-5 1-2 3-6 6-9 1-3 8-9 1-6 1-5 5-62", "2-5 4-6 1-4 1-2 73-80 7-8 4-8 2-6 2-5 1-8 6-8 4-5", "6-9 1-3 3-6 5-22 2-8 3-5 1-9 5-8 7-99 5-7 1-2 7-8", "3-6 1-7 8-9 7-8 2-9 2-7 5-58 6-27 4-6 3-4 7-9 5-7", "4-6 5-6 6-9 1-4 7-8 2-8 1-9 3-21 1-4 1-3 6-7 4-95", "3-4 7-46 1-8 6-9 6-78 5-6 6-8 3-5 7-9 8-9 3-4 2-7", "4-9 7-9 8-9 5-46 6-7 3-6 6-8 5-9 1-2 2-9 4-7 1-62", "2-6 5-9 4-5 1-22 2-9 7-9 9-32 5-7 4-7 5-8 2-7 2-3", "2-6 2-4 6-9 2-4 6-13 3-9 4-65 4-7 4-7 1-4 3-5 1-8", "1-6 6-7 4-6 2-6 1-55 1-6 3-8 5-58 4-9 1-9 2-8 4-9", "7-9 6-93 7-9 2-3 5-8 4-6 7-68 5-8 4-5 2-6 2-9 6-7", "7-9 8-10 5-8 6-9 8-37 2-9 3-4 1-3 1-4 2-6 2-8 6-8", "4-6 2-6 6-8 1-3 3-65 1-9 4-8 7-8 8-53 2-3 2-4 1-4"};
    int seats = 288;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> travel = {"2-3 1-4 6-83 1-8 2-9 4-7 1-6 3-5 7-9 3-6 8-9 8-19", "3-5 1-52 2-7 2-9 4-6 5-9 6-9 4-5 3-5 2-5 1-9 9-15", "5-8 1-5 9-74 2-4 9-82 5-7 5-7 1-6 2-7 1-6 5-6 5-9", "2-3 2-9 8-9 7-8 3-7 3-19 3-9 1-2 3-4 6-92 5-8 4-5", "7-9 4-5 8-9 9-33 4-5 6-9 3-6 6-9 7-27 4-5 2-3 5-9", "1-2 4-9 8-9 2-3 1-47 2-4 5-7 6-75 2-3 1-7 3-4 6-9", "1-2 1-2 1-3 2-7 9-73 8-9 2-6 2-8 3-88 2-5 4-5 4-8", "2-4 2-9 4-8 6-7 1-9 4-8 4-5 9-98 1-2 1-6 6-82 4-8", "2-3 3-8 5-7 6-7 7-28 3-5 1-5 1-2 2-7 4-5 6-7 3-86", "1-9 4-5 4-9 3-7 2-5 2-3 8-9 2-4 5-85 1-7 1-72 5-7", "7-8 1-66 4-5 5-8 3-7 2-6 5-9 1-6 4-78 2-6 5-8 1-6", "3-7 2-8 6-7 3-4 3-9 4-89 3-9 5-8 5-96 1-3 2-6 1-9", "4-9 1-4 4-6 5-9 20-90 2-7 6-8 1-4 1-3 5-6 1-6 5-7", "4-9 5-6 4-7 4-5 7-26 4-5 2-28 5-9 1-9 2-3 4-7 2-5", "2-6 1-30 1-2 4-9 2-7 1-47 1-5 4-7 1-6 4-7 1-7 1-2", "3-4 2-7 5-9 5-20 2-8 3-8 3-5 3-4 7-9 1-6 2-74 1-7", "5-68 1-5 1-6 3-6 4-6 4-6 4-75 6-7 2-5 4-5 6-8 8-9", "6-55 7-8 1-4 3-7 4-7 5-9 3-9 4-5 4-9 6-9 4-64 2-3", "2-8 5-89 2-9 5-9 4-9 4-20 2-7 3-6 2-6 6-8 6-8 1-5", "3-4 1-15 4-6 4-5 3-4 1-5 4-9 2-7 5-65 5-6 2-3 7-9", "6-9 2-8 4-9 3-60 3-62 4-5 2-9 2-7 2-6 1-2 1-6 6-9", "1-5 4-56 4-6 1-9 1-7 4-7 1-7 2-8 3-7 4-5 3-7 2-31", "1-9 7-9 5-7 7-8 3-4 5-21 6-85 1-6 6-9 1-7 1-8 2-7", "1-9 9-49 5-6 1-9 7-28 2-8 4-6 2-4 1-8 1-9 6-8 1-8", "1-9 2-7 1-2 9-56 1-3 1-6 4-7 5-9 5-85 2-6 1-3 2-7", "1-5 1-2 1-8 6-9 5-6 2-3 2-4 4-13 5-15 4-7 2-3 7-9", "1-4 5-6 2-7 8-18 5-6 1-4 4-8 2-6 7-8 4-5 2-7 3-23", "1-2 5-7 2-7 3-9 4-7 1-48 1-5 5-7 2-3 2-92 3-4 7-8", "4-8 5-32 1-2 3-8 3-5 4-95 2-8 1-8 2-9 4-9 5-9 7-8", "3-4 6-47 1-4 7-8 4-8 5-8 4-6 3-4 2-47 1-2 2-4 1-8", "4-6 2-4 5-8 1-90 4-6 3-7 4-5 8-9 8-9 6-67 5-7 4-5", "3-5 5-9 1-6 7-8 1-4 4-7 4-14 1-5 1-7 6-8 1-5 2-99", "2-11 3-9 2-5 6-8 4-6 6-7 6-7 5-8 3-5 9-76 3-6 2-6", "2-8 2-8 2-5 64-79 1-2 2-7 2-8 1-5 2-3 4-7 5-6 6-8", "6-7 3-6 3-86 2-8 3-9 2-7 3-7 2-5 5-7 1-7 3-6 7-69", "3-5 2-4 1-3 2-9 2-3 7-39 4-6 2-3 8-9 8-52 1-9 6-8", "1-9 7-45 1-5 6-9 8-97 1-8 3-6 7-9 4-9 2-3 7-8 5-9", "2-7 5-7 1-2 2-5 3-19 5-47 1-9 3-4 4-9 1-6 5-6 3-4", "5-6 2-4 6-8 2-8 1-5 8-9 4-9 1-60 2-6 5-46 4-9 1-7", "6-9 9-45 4-9 3-5 2-90 1-6 2-3 2-6 1-2 2-6 2-5 5-9", "2-7 3-7 2-3 1-5 1-9 3-44 2-90 4-5 5-9 2-6 1-9 4-9", "4-7 3-5 4-89 6-7 4-5 2-8 6-98 3-8 2-7 4-5 4-5 1-2", "4-8 8-9 1-8 1-8 1-8 4-61 4-9 6-24 2-3 3-9 8-9 5-7", "7-9 1-6 2-9 6-8 6-9 8-9 7-9 2-18 1-9 6-7 8-9 4-39", "5-64 5-8 1-7 6-7 1-53 5-7 2-6 4-5 2-3 5-9 8-9 1-2", "1-8 2-6 6-40 4-5 7-96 5-9 3-5 2-8 3-4 2-5 2-9 2-3", "6-8 2-6 3-10 7-97 1-9 4-5 3-8 4-7 3-5 5-6 2-3 1-4", "2-9 2-3 2-7 2-9 2-24 5-8 8-68 1-8 5-6 4-5 8-9 5-6", "9-87 6-59 2-6 6-8 4-9 5-9 1-2 4-8 7-9 2-4 6-8 1-6", "3-7 1-98 1-8 1-3 6-85 4-5 1-2 3-4 1-7 5-6 5-9 3-5"};
    int seats = 322;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> travel = {"5-8 3-48 3-9 1-3 4-7 3-8 3-6 6-8 3-62 3-9 3-6 4-5", "1-8 6-9 5-7 5-9 1-6 6-8 3-8 1-3 4-53 2-65 2-8 5-6", "5-7 4-31 3-6 5-6 6-9 4-6 3-6 6-9 7-8 8-71 4-7 2-6", "6-8 2-5 3-9 1-9 1-5 2-9 4-7 4-92 2-88 6-9 1-4 4-7", "1-3 1-6 1-56 5-6 1-6 2-4 2-7 5-42 2-8 7-9 1-2 3-5", "2-8 2-9 5-8 2-5 1-9 1-7 2-9 7-35 6-8 4-7 2-5 1-16", "3-9 6-9 2-9 2-8 3-4 1-5 2-9 5-8 9-65 5-7 1-36 4-5", "1-9 6-7 5-8 3-4 5-9 2-83 9-90 5-8 1-2 1-5 2-9 6-9", "7-9 7-9 6-9 3-40 8-9 5-7 5-7 7-62 3-6 1-2 3-7 2-4", "7-8 5-7 5-20 6-9 1-5 6-69 2-8 3-4 4-6 1-3 4-7 2-5", "3-6 2-4 1-3 6-58 3-15 1-5 6-8 2-7 4-5 7-9 7-8 1-2", "4-8 1-5 3-8 5-43 3-4 2-5 2-8 1-32 5-9 1-3 3-7 2-9", "1-5 4-31 1-5 6-8 7-86 3-4 7-9 1-2 1-9 1-7 3-8 1-2", "3-8 6-7 1-2 9-37 7-8 2-29 1-3 7-8 1-6 6-8 1-5 2-6", "7-8 1-4 5-8 8-32 8-9 9-83 3-4 7-8 2-6 4-9 3-5 2-9", "1-9 6-8 1-2 1-2 1-5 3-7 7-8 2-9 9-35 1-4 2-76 6-9", "5-6 5-6 1-2 2-3 1-2 3-4 3-4 1-9 1-6 5-6 2-88 5-42", "2-75 1-2 3-9 5-6 5-8 9-38 3-9 7-8 2-4 1-8 4-8 4-8", "7-14 4-9 4-6 2-3 1-4 8-9 6-9 9-76 1-2 6-7 1-6 5-7", "2-9 5-9 1-9 2-5 2-3 4-6 6-8 4-6 6-53 2-80 1-5 5-7", "2-7 3-9 6-7 7-19 6-61 2-6 4-5 2-7 3-9 5-9 6-7 2-6", "3-8 1-51 1-7 4-9 7-16 6-7 3-4 3-9 1-5 5-9 4-5 2-4", "8-67 1-7 2-7 7-9 2-6 2-7 8-9 4-8 5-6 1-15 3-6 1-6", "2-4 5-71 4-7 4-6 5-7 5-6 1-6 1-6 4-5 5-44 4-5 2-5", "8-9 8-54 5-6 1-6 1-8 2-5 3-4 7-8 3-34 1-7 1-6 6-7", "2-3 2-7 1-8 5-7 2-6 2-4 1-4 1-55 3-7 8-9 8-58 8-9", "5-9 4-9 6-7 6-79 1-20 1-7 2-7 1-6 1-5 7-8 5-9 4-7", "2-9 5-6 1-2 1-3 9-39 1-7 4-6 1-8 6-8 7-24 4-6 6-7", "3-9 5-8 5-6 5-9 3-7 76-86 1-8 2-8 8-9 4-8 3-9 7-8", "3-4 1-4 1-9 7-8 5-76 1-7 3-7 6-50 3-5 4-8 8-9 1-4", "1-7 4-9 4-66 6-7 3-9 2-48 4-5 5-6 5-9 3-7 8-9 7-8", "2-3 5-9 1-2 6-9 4-9 2-7 6-7 1-5 7-24 2-3 1-6 5-53", "3-5 8-9 6-7 7-9 2-9 8-9 4-5 1-18 6-8 1-8 6-7 4-57", "2-8 1-2 7-9 4-29 4-9 2-8 3-9 4-8 3-74 1-2 3-4 5-8", "2-4 9-88 5-8 2-6 7-8 9-82 7-8 1-7 3-6 7-9 4-9 3-6", "1-2 2-3 6-7 7-79 5-8 5-7 6-9 1-14 2-9 2-5 2-3 1-5", "6-8 3-7 3-5 2-4 6-58 6-7 4-8 8-9 1-3 1-7 5-6 1-56", "3-6 3-4 2-5 7-9 3-9 6-7 6-9 4-5 4-9 2-24 9-11 1-4", "2-6 3-88 6-9 4-5 6-7 4-5 7-9 1-6 3-7 6-9 8-64 5-6", "1-2 7-8 1-5 6-60 6-9 4-5 3-8 4-5 2-69 6-8 3-8 1-3", "6-34 2-4 1-7 5-9 5-9 5-7 4-9 7-52 1-9 3-5 3-8 1-2", "8-9 4-5 2-3 6-54 1-2 8-9 2-5 7-9 4-6 1-5 6-83 4-6", "4-9 4-8 1-8 3-22 7-8 2-3 1-7 1-7 2-6 4-5 8-9 6-56", "6-7 5-8 2-9 4-6 1-7 3-30 4-9 3-4 4-5 2-8 1-49 5-8", "2-8 7-60 5-8 1-5 6-9 1-9 1-2 2-9 2-6 3-9 5-7 4-90", "1-5 6-9 3-65 5-6 4-9 1-3 6-89 3-8 7-8 6-7 3-8 2-3", "2-5 2-23 8-9 4-8 4-7 2-4 2-3 2-7 7-9 5-8 2-3 2-32", "3-5 1-93 3-4 1-8 4-7 5-8 4-87 2-7 7-8 4-7 3-8 1-5", "2-31 4-9 5-33 2-7 3-7 4-7 6-9 2-5 7-8 1-2 3-4 4-6", "2-9 6-7 5-6 1-4 7-9 2-5 6-8 1-2 1-80 3-7 1-7 5-24"};
    int seats = 242;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 71;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> travel = {"4-8 1-7 5-8 6-58 2-9 4-16 2-7 1-8 5-6 2-8 4-7 2-3", "6-9 2-76 1-2 1-2 4-8 6-9 9-70 3-8 2-7 3-8 5-7 3-7", "6-8 7-8 7-26 1-4 4-6 6-7 2-6 5-9 7-9 5-6 1-88 5-8", "5-7 2-8 8-93 1-7 5-7 9-16 3-4 1-4 3-6 3-5 7-8 6-8", "2-5 7-9 2-3 1-4 1-7 5-6 13-77 1-8 2-4 1-5 2-8 3-9", "6-9 1-9 4-34 3-5 2-6 1-5 3-4 4-9 3-9 4-97 1-3 1-7", "1-6 4-46 3-6 7-9 7-9 2-4 3-5 2-10 5-6 4-9 1-9 1-3", "3-5 4-8 1-7 7-20 1-8 5-63 1-7 2-8 2-5 2-6 1-6 5-9", "1-3 6-38 2-3 2-7 3-7 5-6 5-6 1-44 1-8 5-6 2-5 2-9", "5-93 2-4 4-5 3-4 6-7 1-4 1-9 1-6 4-9 6-21 2-4 7-8", "6-9 1-4 8-9 7-48 5-8 4-7 5-7 2-5 4-6 3-9 1-7 3-32", "1-2 5-7 1-2 4-8 1-7 3-9 5-7 8-39 5-8 3-8 8-9 1-48", "6-7 7-8 5-6 2-6 1-4 1-2 2-5 4-5 5-7 1-8 3-26 4-64", "1-9 3-4 3-9 6-7 81-93 1-5 6-7 8-9 7-8 4-8 3-6 6-7", "5-6 9-80 4-5 2-5 8-18 2-3 3-8 1-3 6-8 1-7 1-8 6-7", "3-6 3-4 3-5 9-76 6-9 1-2 1-8 3-9 8-24 7-9 4-5 5-6", "2-3 7-8 1-8 6-7 4-6 6-7 6-47 5-8 3-9 2-94 2-5 2-7", "1-7 1-3 1-7 2-6 4-5 2-9 2-8 7-83 2-6 6-47 2-3 1-2", "8-9 3-4 5-6 7-9 3-83 6-7 1-2 3-50 3-5 3-6 5-9 3-9", "6-22 1-4 2-5 5-9 6-39 1-6 3-6 3-7 1-9 1-4 2-9 4-5", "4-7 1-2 1-6 5-6 1-2 2-3 4-94 5-9 4-9 6-93 1-2 1-8", "5-6 9-92 2-3 4-8 6-9 6-47 3-9 2-6 6-8 6-7 4-7 2-4", "4-98 3-4 2-7 2-8 1-7 4-5 5-9 3-9 6-71 5-7 3-7 5-8", "1-3 2-7 2-6 2-9 6-91 3-5 4-6 2-3 2-6 6-9 9-34 1-8", "6-69 4-5 2-3 4-5 6-34 1-7 1-3 1-9 1-5 1-6 5-7 7-9", "2-3 4-5 5-9 3-6 2-3 4-23 8-44 5-6 5-7 4-5 4-5 2-5", "1-9 1-7 2-6 1-6 3-9 6-7 4-5 2-41 3-6 2-51 2-9 8-9", "8-20 6-7 3-4 2-3 3-9 2-5 2-5 3-6 4-8 2-12 1-2 4-6", "1-9 7-8 1-8 3-62 7-8 4-6 7-9 5-84 1-6 1-7 2-5 1-5", "2-5 4-6 3-6 1-8 2-8 4-5 1-46 5-66 3-5 1-2 3-6 5-7", "4-8 3-5 4-45 3-5 3-7 2-3 2-6 4-9 2-9 3-5 2-5 6-72", "2-4 3-92 2-5 1-5 9-23 7-8 8-9 4-7 4-5 3-9 5-6 1-6", "5-9 7-8 2-29 3-4 1-7 5-7 7-18 2-4 2-9 5-6 2-5 6-9", "6-9 9-73 2-9 4-7 1-4 8-9 4-5 4-6 7-9 4-8 2-3 6-54", "1-4 68-76 5-7 1-3 5-6 7-8 2-7 1-7 2-3 1-4 7-9 8-9", "5-9 3-5 7-8 4-7 3-4 1-7 3-5 8-9 6-9 5-10 3-92 1-4", "4-7 7-8 1-5 6-7 5-9 6-8 9-20 2-8 4-94 1-3 2-9 1-4", "4-7 5-6 1-8 1-2 4-79 8-9 7-8 4-6 4-7 8-90 2-7 2-7", "6-7 2-7 1-3 1-6 4-8 4-6 5-9 1-5 8-9 5-94 2-56 5-8", "1-4 5-8 4-5 1-8 1-6 6-99 4-9 6-8 1-9 5-7 5-22 3-9", "2-3 1-2 1-60 6-7 1-8 2-6 6-54 7-8 3-6 3-9 1-5 2-3", "1-2 2-3 7-9 1-3 3-6 4-8 6-7 2-3 2-3 5-77 3-4 7-91", "1-3 9-43 3-9 3-6 3-4 1-2 6-7 5-6 1-3 9-49 1-6 2-4", "1-7 5-6 2-8 2-9 7-9 5-7 7-8 2-5 2-9 8-95 2-5 1-44", "3-5 1-3 2-43 2-9 2-3 6-9 6-8 4-7 1-9 3-9 9-55 3-9", "4-6 7-8 2-7 8-59 3-8 2-4 1-2 9-64 2-9 2-6 2-7 4-6", "4-6 1-94 3-4 4-9 7-10 6-7 3-9 2-8 6-8 4-6 3-6 5-8", "4-5 5-9 7-8 7-8 2-8 3-9 1-6 2-9 2-7 4-9 2-7 22-26", "6-7 4-7 7-32 3-9 9-92 3-7 4-6 2-8 2-7 6-7 1-9 4-7", "4-5 1-5 1-3 1-2 4-51 6-7 2-9 4-6 1-4 5-71 2-4 3-4"};
    int seats = 218;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> travel = {"2-87 2-6 1-6 1-3 6-7 1-4 4-9 4-9 7-9 1-2 3-4 4-65", "3-7 4-9 2-3 1-8 2-95 6-77 7-8 1-2 8-9 1-7 5-7 2-5", "6-7 7-8 7-9 5-6 1-7 2-5 6-8 5-6 7-83 3-9 3-5 3-39", "5-8 1-2 1-9 2-5 7-9 3-4 1-4 7-9 9-90 3-4 7-47 2-4", "5-9 6-9 1-2 3-7 3-95 5-86 1-6 8-9 3-6 2-3 1-4 7-8", "4-5 8-32 4-5 5-9 2-5 8-57 6-7 2-4 7-9 1-6 2-6 2-5", "9-31 5-6 1-2 7-14 3-9 4-8 4-9 5-6 2-4 1-9 1-3 2-5", "2-15 1-6 4-9 1-4 1-9 6-7 1-9 1-71 4-7 1-5 2-7 3-7", "5-9 3-4 3-5 1-5 1-4 2-9 2-7 1-28 4-7 2-5 4-9 2-12", "8-9 8-9 8-30 5-7 1-8 6-94 7-8 2-6 1-3 4-5 4-8 2-5", "1-6 5-7 4-9 3-5 1-9 2-4 9-19 4-5 2-3 3-9 4-55 4-7", "3-4 7-9 4-6 4-5 2-38 2-4 3-7 8-67 1-2 3-7 7-8 6-9", "5-7 5-6 2-3 4-57 5-8 7-8 7-20 2-6 6-9 3-9 4-8 5-8", "1-5 5-6 4-5 5-7 8-40 1-7 1-8 1-5 8-9 5-59 6-9 2-7", "3-8 3-4 2-4 7-8 2-36 2-7 8-9 8-9 2-9 3-88 5-9 1-2", "1-4 1-10 1-6 5-6 4-7 4-5 1-2 2-7 8-58 3-6 3-5 2-8", "1-2 8-9 7-34 2-3 2-96 2-9 1-2 1-7 2-9 2-9 2-5 4-5", "2-6 23-57 5-6 6-7 4-5 2-4 7-8 5-6 4-8 3-4 2-3 7-9", "1-2 4-7 6-9 5-7 6-9 2-6 1-43 2-22 4-9 3-8 4-9 6-8", "1-2 1-9 4-6 1-9 1-2 3-9 7-14 3-48 3-9 6-8 4-6 5-6", "4-7 1-5 9-87 4-7 5-6 1-6 1-2 1-4 6-29 1-4 1-7 1-7", "5-6 3-4 6-8 4-27 3-4 4-8 8-29 5-6 6-7 3-9 1-3 4-5", "2-3 6-8 4-6 7-8 1-9 7-98 6-48 1-2 5-9 1-4 2-3 1-9", "6-9 7-8 7-9 5-8 3-6 7-49 1-5 5-80 6-9 1-5 5-8 1-7", "8-9 8-93 3-7 6-9 1-7 6-7 6-8 3-9 8-80 3-8 7-8 4-7", "5-6 8-9 2-3 3-7 8-45 6-7 5-9 2-35 7-8 5-6 3-4 5-6", "3-7 5-6 9-20 4-7 3-6 1-2 3-89 5-8 1-6 1-4 5-6 5-8", "1-29 5-64 1-8 3-7 2-8 1-2 4-5 4-7 2-7 6-7 4-7 4-7", "2-9 2-5 1-6 2-7 1-2 52-99 1-6 1-9 1-9 7-8 7-8 5-9", "5-9 4-9 2-81 9-94 8-9 2-6 6-7 4-6 6-9 1-2 1-5 6-7", "6-8 8-9 1-7 4-6 1-99 2-38 2-5 1-7 3-5 5-6 8-9 5-6", "1-60 2-7 3-4 1-2 7-9 3-8 3-4 1-9 6-9 3-7 1-9 8-88", "3-33 3-5 4-5 5-8 4-74 2-3 5-7 8-9 3-5 4-6 5-8 4-6", "7-8 5-8 3-6 3-7 1-6 2-10 7-32 2-4 1-2 4-6 5-9 4-5", "3-9 5-6 5-6 1-3 1-64 1-8 4-8 1-2 1-9 3-8 5-35 2-3", "8-9 3-7 2-4 3-9 3-9 2-8 4-9 7-9 8-69 2-92 4-6 2-4", "5-6 7-9 2-7 5-6 7-8 5-8 3-53 1-2 3-9 1-9 6-77 4-8", "3-6 1-5 3-30 3-7 9-36 5-6 1-2 1-9 6-9 3-6 8-9 4-6", "5-9 3-86 1-8 2-3 5-6 5-8 3-8 2-3 4-5 4-98 4-8 6-9", "8-28 2-9 2-8 2-7 6-7 5-41 6-7 1-8 1-2 5-9 6-8 2-5", "1-2 1-43 2-3 1-9 2-9 4-8 3-61 3-5 3-5 5-6 4-9 5-6", "2-8 5-8 4-9 4-75 2-5 2-8 6-9 3-4 8-91 1-3 1-9 7-8", "2-4 8-9 1-3 6-8 5-6 2-16 1-3 2-7 3-5 2-5 5-14 2-8", "2-7 4-7 2-77 5-8 2-7 5-9 2-7 7-9 1-2 3-7 6-7 5-74", "6-7 2-7 6-91 2-5 1-18 1-3 4-9 5-6 1-2 6-7 5-6 5-6", "3-5 1-9 7-9 2-75 2-9 1-6 5-8 6-24 6-7 2-3 1-6 3-5", "2-8 1-2 2-3 2-3 1-9 2-8 1-8 5-7 3-13 5-8 4-30 2-6", "9-51 1-8 4-9 2-3 2-3 2-18 6-9 1-9 2-4 6-8 5-6 1-6", "5-6 2-3 2-3 26-91 6-7 1-8 2-6 5-6 8-9 3-7 3-6 3-7", "1-5 1-3 5-7 7-9 1-2 3-4 9-59 6-71 3-9 8-9 1-2 1-3"};
    int seats = 250;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 64;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> travel = {"3-6 5-7 4-8 1-2 6-21 2-7 2-35 6-7 1-8 1-7 5-6 4-6", "7-69 6-8 3-7 1-4 3-6 4-9 3-4 1-3 1-6 6-9 6-54 3-8", "3-5 5-6 5-9 6-9 5-6 3-5 2-6 2-6 3-4 3-4 6-25 8-19", "7-8 6-72 2-5 5-7 6-63 1-9 6-7 1-9 5-9 1-3 1-6 5-9", "2-6 2-3 8-58 1-2 2-8 4-5 4-5 1-5 1-3 7-14 4-6 7-8", "3-7 3-8 2-8 4-5 1-2 7-9 9-34 5-6 6-7 3-7 8-88 2-5", "3-87 4-28 3-4 3-4 5-6 3-6 3-9 3-4 1-2 5-9 1-6 8-9", "3-7 2-6 3-8 1-4 1-7 4-7 5-9 3-8 4-9 3-7 6-39 1-91", "3-7 1-85 5-10 1-4 5-8 1-4 1-8 1-4 2-6 5-8 2-5 7-9", "6-9 6-8 7-80 8-9 2-6 3-8 8-9 4-9 2-5 1-3 5-93 7-8", "2-3 8-9 5-8 2-3 1-7 6-33 2-3 5-22 6-7 2-9 7-8 2-9", "1-4 2-7 2-6 5-9 8-9 1-9 7-92 1-8 7-9 1-3 2-3 5-41", "5-8 8-60 7-9 3-5 6-7 5-6 1-2 7-41 1-8 5-6 4-5 7-8", "4-6 7-32 6-8 4-5 3-8 6-7 3-8 2-3 2-8 3-40 4-5 2-8", "2-6 6-8 5-8 7-8 8-9 1-8 4-8 3-8 9-18 4-58 1-9 8-9", "1-75 6-7 1-2 3-7 5-38 7-9 3-4 3-5 1-6 6-8 4-7 4-6", "2-7 2-5 7-8 1-9 3-77 3-5 3-33 4-6 4-7 2-3 3-9 1-2", "4-9 2-3 2-5 4-8 1-2 4-6 2-28 2-5 4-68 1-8 7-9 5-8", "8-9 3-9 3-5 1-3 6-7 6-65 1-3 1-2 5-9 3-6 3-7 8-76", "1-5 7-8 6-7 6-8 3-7 1-8 3-5 8-9 3-4 5-21 5-47 2-3", "4-9 5-9 5-8 2-3 8-41 1-7 1-6 3-4 1-7 3-9 1-95 2-7", "1-4 2-7 2-3 4-5 4-5 2-5 6-31 2-9 3-7 9-51 5-8 1-6", "6-13 3-9 1-4 6-80 3-8 5-9 1-2 3-7 4-8 3-8 3-5 3-8", "2-4 1-7 5-8 8-9 3-7 8-22 3-4 2-3 1-8 3-68 1-9 1-6", "2-5 5-6 3-8 1-3 5-8 6-7 8-14 2-69 2-8 3-8 6-7 1-2", "4-8 1-7 4-6 1-7 6-7 2-7 2-9 7-25 3-5 4-81 7-8 6-9", "5-7 5-7 4-8 2-3 7-8 2-9 3-54 4-8 3-9 9-74 7-8 7-8", "2-9 2-9 3-4 5-8 3-9 1-5 6-7 1-98 1-9 1-6 6-8 4-60", "1-2 1-2 6-7 7-9 1-7 4-50 5-6 5-7 2-9 8-9 1-2 2-38", "5-6 1-6 7-8 4-8 1-13 5-9 5-77 1-6 2-6 6-7 1-3 4-9", "1-6 4-5 3-8 3-4 2-5 3-7 7-8 6-64 2-6 9-92 3-8 3-5", "2-9 3-7 4-5 4-9 2-99 1-6 6-92 5-7 1-7 3-6 1-2 6-8", "2-9 5-9 7-9 4-6 1-75 7-8 2-8 3-6 4-8 1-3 3-50 2-4", "4-6 1-2 1-3 4-9 5-6 1-28 4-8 3-4 4-7 9-19 1-2 3-9", "2-7 4-9 4-7 9-21 1-5 5-6 1-7 3-4 3-67 6-7 5-6 4-9", "2-5 3-5 3-9 1-2 3-9 4-6 2-6 1-8 1-9 8-17 7-54 1-5", "7-9 3-4 7-9 3-5 5-6 3-5 6-8 3-9 4-5 1-5 4-5 17-73", "3-4 2-8 20-22 6-9 1-3 1-2 1-7 6-8 4-6 1-4 2-4 7-9", "8-9 1-5 1-5 1-7 1-4 7-8 1-8 3-24 7-8 1-6 3-8 4-15", "9-20 5-8 6-7 1-8 4-10 3-4 6-8 3-4 4-9 2-5 4-7 3-7", "7-91 3-95 4-7 5-9 8-9 1-6 1-6 3-5 1-4 4-5 4-8 8-9", "1-4 5-6 3-5 4-7 1-4 6-56 3-4 8-67 5-6 1-3 1-8 2-3", "5-9 2-3 8-9 4-8 4-6 5-6 71-91 5-8 2-7 2-7 1-8 7-9", "8-63 2-4 1-6 9-24 1-2 1-7 6-8 5-7 4-6 3-5 2-5 4-7", "1-5 7-8 1-5 6-58 1-9 8-9 1-3 8-11 3-8 4-6 2-9 3-4", "4-8 7-9 8-9 3-5 3-66 1-3 3-7 7-9 3-7 3-8 6-68 7-8", "2-53 5-6 6-8 6-33 3-4 5-6 4-6 4-5 7-9 4-9 4-6 4-8", "3-6 6-9 8-48 5-9 5-7 1-6 7-23 3-5 4-9 2-5 2-9 2-6", "1-2 3-8 4-5 3-4 1-3 4-5 6-9 3-7 2-5 2-4 8-11 5-23", "1-7 9-15 3-9 1-2 1-5 3-5 4-8 4-9 5-6 7-64 6-8 4-7"};
    int seats = 233;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 69;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> travel = {"8-9 1-38 1-8 6-7 4-7 5-9 1-9 8-23 1-2 5-6 7-8 4-9", "2-8 5-8 3-7 9-35 7-8 1-2 2-6 7-8 1-2 2-3 1-52 5-9", "7-8 1-2 4-6 1-5 5-8 2-4 3-8 2-43 5-65 1-2 2-9 6-7", "6-8 5-6 6-27 1-9 2-7 2-6 7-22 5-9 4-5 2-3 8-9 5-6", "3-5 1-9 3-6 2-3 2-5 4-99 2-6 2-3 1-9 3-39 5-9 6-8", "2-8 3-7 1-6 3-8 2-3 1-7 3-5 4-5 5-6 6-15 8-68 6-9", "4-6 5-6 5-8 1-2 2-4 2-5 8-9 5-6 1-4 4-47 1-8 8-51", "6-7 8-27 3-4 1-3 1-9 5-9 2-9 8-80 2-8 5-6 1-3 3-9", "7-9 2-9 9-24 1-7 2-9 2-3 5-16 1-6 8-9 8-9 7-8 4-7", "9-13 8-16 5-6 4-5 8-9 8-9 1-5 2-5 2-8 6-7 5-7 2-6", "2-6 7-46 5-7 6-9 3-5 4-6 4-5 4-5 4-7 1-5 6-56 2-6", "9-80 1-2 5-11 2-3 1-7 8-9 4-8 3-6 1-3 5-7 4-8 4-9", "2-9 7-8 7-48 5-88 5-9 3-7 4-5 4-8 2-7 6-9 3-9 2-9", "5-8 1-2 1-2 8-10 7-9 1-8 1-2 1-5 4-9 1-8 8-9 6-29", "6-8 7-9 2-7 2-8 4-33 2-72 4-8 6-9 2-9 1-2 5-6 4-7", "4-49 4-6 1-8 4-8 5-6 2-79 6-8 5-9 3-5 4-8 1-6 6-8", "7-8 4-7 4-7 2-3 6-7 1-30 8-9 1-70 4-5 4-8 1-2 5-6", "4-9 1-9 2-4 4-58 5-51 3-7 1-5 2-5 2-9 1-4 6-8 3-9", "1-4 1-2 2-3 3-64 4-8 3-4 6-53 5-6 7-8 6-8 6-9 1-2", "5-9 1-2 8-9 4-5 2-7 2-9 2-4 2-57 1-3 1-5 6-15 3-5", "6-8 8-75 5-8 3-5 7-8 2-4 5-8 3-5 7-40 1-6 3-4 2-7", "9-47 4-47 5-8 1-6 6-7 5-7 1-6 4-5 5-8 3-4 4-5 6-7", "3-9 1-3 6-7 2-5 3-54 1-6 4-8 8-9 4-91 1-4 2-7 3-7", "5-7 3-99 6-7 1-7 7-57 2-7 2-9 4-6 7-8 1-3 3-9 6-7", "5-7 1-2 9-12 1-9 3-7 1-6 1-5 3-60 1-9 2-5 6-9 4-8", "5-15 1-7 7-15 3-6 5-9 2-3 4-7 4-6 8-9 4-7 4-6 7-9", "3-4 5-72 1-54 1-6 5-8 5-8 2-3 4-7 2-3 6-9 8-9 3-8", "1-8 1-2 5-6 7-8 4-9 1-6 1-4 2-8 7-9 2-74 2-3 7-58", "3-5 1-2 4-9 1-9 6-7 1-7 2-7 2-9 3-6 6-9 5-14 4-94", "7-8 1-3 1-4 1-6 1-3 1-8 4-5 8-51 3-8 4-5 5-7 8-59", "1-6 5-9 9-73 8-9 2-8 1-12 2-4 3-7 4-6 3-8 4-6 5-6", "4-7 7-8 8-9 1-3 6-7 4-52 4-14 2-6 4-7 1-6 1-7 7-8", "4-7 1-4 4-8 3-7 3-4 4-9 3-6 2-8 7-63 7-57 1-5 3-4", "5-8 6-7 2-57 7-8 1-2 4-5 8-9 6-7 4-50 3-9 1-7 7-8", "5-8 4-7 6-8 5-45 2-7 4-5 1-9 5-42 1-2 4-8 3-7 3-6", "6-9 7-9 1-3 2-4 1-5 7-8 7-8 4-8 2-12 2-6 6-87 1-7", "2-6 4-6 5-7 3-4 3-7 2-5 6-7 4-8 5-96 3-5 3-7 5-58", "4-7 7-9 1-5 5-8 6-61 1-2 1-4 8-9 4-6 7-8 1-7 1-38", "5-9 1-4 4-10 3-90 6-7 1-8 1-2 1-2 3-4 3-9 4-7 1-2", "7-9 3-6 6-7 2-74 3-96 1-2 1-5 1-8 6-9 1-7 2-7 3-5", "4-6 8-9 2-4 6-23 6-9 7-8 2-7 1-9 6-9 5-9 5-9 6-44", "3-4 5-8 4-9 2-8 6-9 3-8 2-3 7-82 5-92 3-5 1-4 4-8", "3-7 3-5 4-6 1-7 4-6 4-6 3-58 2-9 7-8 1-7 1-3 3-15", "3-7 6-85 8-57 5-7 6-8 8-9 1-9 3-8 3-5 2-9 3-8 6-9", "5-53 2-5 1-4 4-34 7-9 1-7 5-6 5-8 4-9 1-2 1-5 6-8", "3-5 4-6 1-55 6-7 2-6 3-5 3-9 3-7 2-4 8-60 2-8 4-9", "3-54 6-9 3-6 1-6 1-6 5-7 6-9 2-6 2-8 6-7 2-8 8-13", "8-9 5-6 1-2 2-14 1-3 2-6 1-5 4-56 1-7 3-7 2-3 3-7", "4-5 6-45 1-3 4-7 5-6 3-9 7-9 5-7 4-5 7-11 2-5 4-8", "1-5 2-9 1-2 9-72 8-40 1-6 4-6 2-5 1-9 2-9 2-9 3-4"};
    int seats = 244;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 71;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> travel = {"3268-8215 4211-7237 3981-5720 300-7450 1491-8789", "1771-7175 3713-9445 3211-5705 6274-9026 2923-7544", "2263-3106 6424-8497 3788-6130 866-6232 4142-9326", "3673-6038 5116-9232 7251-8875 5080-8862 1019-1554", "4479-9029 1967-7490 213-2720 2964-7065 6825-9505", "6790-7652 1697-5021 484-9621 8356-8861 103-5776", "2085-3848 3903-9470 3463-4613 4781-6230 6214-6625", "4487-9787 4968-9526 4117-5813 4392-7337 2511-5472", "1706-5321 3385-6586 1523-3928 303-8857 4259-8145", "3985-5354 1066-6959 6336-9696 1512-5546 400-7556", "3279-5029 5669-5869 3064-9572 2028-7436 6446-8399", "1654-6493 8036-8286 2060-7910 1029-5343 977-9587", "2253-9859 1636-6455 2306-6495 5664-9156 2041-7683", "4004-4980 5686-8696 2025-4984 2194-3902 1922-5834", "2427-5566 5703-9617 4589-7683 785-5187 580-7511", "285-6612 7914-8259 4183-4707 1728-1941 502-4391", "3547-7970 5529-9409 4597-8098 1555-5806 90-6184", "1705-2731 979-5841 3840-6985 7511-7951 4343-6238", "4221-6948 170-3179 1555-5689 2205-8715 669-9548", "2919-5660 2596-3933 1025-4681 349-2105 394-655", "2576-8435 1566-7574 4485-7681 290-1281 905-2722", "7727-9524 4047-9639 468-4462 1026-1784 6838-6946", "5672-7122 2462-5246 695-4921 6533-8233 6551-8500", "3756-8355 7101-7450 3855-8745 3189-7683 2731-3047", "3427-6868 6533-8291 4680-5019 3502-8747 4700-6464", "2286-7572 3287-7704 6693-7153 3894-9739 2796-4008", "6469-8480 7910-8816 2158-3228 4503-8945 8231-8362", "1892-8082 2165-3310 815-1335 9029-9941 3299-8308", "6250-8946 120-4892 1366-1878 8868-9891 3276-4921", "1910-2799 1986-6651 1166-2661 2080-3514 478-4398", "271-1184 3367-7091 1104-7896 3152-8880 1977-7402", "2956-3190 7943-8912 1226-3110 634-1938 942-8027", "661-4075 2406-5705 2887-3795 400-7091 6403-8757", "402-2149 2258-9308 31-2986 7447-9633 3596-8566", "3033-5881 2909-7373 862-9118 5615-6962 4118-7764", "2292-6295 4527-9148 8035-8682 1923-6777 1964-7269", "6742-7154 1571-1893 2536-9522 1754-6806 1320-7039", "455-7299 3980-5166 2444-6427 4821-7229 4311-5895", "5585-5811 7753-9611 3302-9909 1314-2988 2248-8446", "1936-3331 3100-7439 5726-7574 3358-7451 875-4550", "148-9996 6100-8299 2033-3204 2237-2287 5567-7663", "2473-3355 309-3545 4929-7171 7023-8035 7380-7542", "2130-5502 7716-9517 8661-9950 2006-7121 7873-8999", "6256-7405 380-8537 1561-5566 4165-8364 8124-9558", "5410-7828 1943-3266 2172-8249 2410-4325 4391-5392", "2520-6361 2823-2942 1142-9104 5015-5800 7926-8772", "802-2225 45-2436 2652-6161 710-8724 2754-5449", "4652-7606 1891-3845 1706-4119 7722-8614 228-1370", "6440-8467 2173-9427 5017-9674 4115-9284 6974-7828", "1983-3158 6777-8810 39-3647 5644-7966 2104-9433"};
    int seats = 52;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 80;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> travel = {"4015-9629 715-4523 3372-9490 3153-4325 7540-9928", "2255-9111 2478-5347 1924-9563 1265-3567 6184-8565", "5479-6742 1000-7908 685-5200 4982-9817 829-1723", "5803-8285 7910-8202 7803-9589 1733-7443 8809-9522", "3423-9072 923-4921 2264-6137 4957-6728 1772-2981", "181-2995 4594-7896 6252-9329 3856-6257 5005-5957", "7696-9852 4182-7193 4582-8169 6207-7773 3568-9696", "321-3087 7077-7476 3177-4962 7109-7897 1344-8003", "2954-4540 3322-5316 1088-2198 2408-5723 7272-8226", "1637-5774 5059-7026 3706-9929 1774-7934 1910-8350", "1544-7004 3834-8576 1176-1381 3733-9657 5170-7738", "5365-6459 1647-2815 853-5072 837-5014 1719-4931", "857-6457 1548-5903 7154-9138 3307-8218 7215-9298", "1603-9467 3146-6742 1202-1424 4082-5032 108-7831", "376-7885 2634-7907 9271-9437 6683-7881 2888-4477", "1551-3207 362-1515 2418-4349 4983-8438 806-7583", "115-7376 5247-5870 249-4618 3414-3547 558-7310", "2311-6972 6680-7404 7420-8415 8939-9659 5557-8931", "502-6048 2943-7645 1347-7469 1181-5687 367-8669", "4063-9397 459-4050 1990-9033 1387-8601 2732-7452", "6289-7924 3705-9647 5508-8250 2723-6559 26-1823", "5215-9031 3280-8469 2241-9451 7155-9565 1909-8214", "1948-8065 5182-5996 870-5767 2547-7496 6262-9331", "299-6991 1670-3586 6562-6709 7170-8042 1935-7906", "9434-9552 1361-3337 378-3450 3650-3672 5152-9741", "3802-4601 4850-8260 123-2586 2495-8129 5718-8255", "1364-9203 1182-5331 2089-2894 2753-3471 808-1574", "3866-9943 1049-5080 5505-8614 3730-9271 1653-2448", "829-8038 2465-6422 4889-8590 239-5715 3091-5084", "3795-3877 3851-6676 3062-4129 4927-7035 1399-3833", "1177-9528 8959-9989 3129-7410 8727-8949 1658-2217", "541-6469 2495-4739 2430-9774 2045-2172 2901-3208", "1209-8602 1887-3318 3479-7242 1444-7211 3681-4288", "4131-8009 1419-2401 2017-2803 4153-5889 1409-3417", "764-9456 3329-7048 350-5937 2029-3706 2189-9861", "1611-4758 1286-5324 2113-4369 57-6027 1412-3573", "682-684 22-2434 326-3338 4195-8554 2933-8732", "4581-4672 2142-4238 2112-5882 6325-6723 7281-7758", "3151-3710 569-7276 611-7005 615-8586 1077-9513", "1876-7945 433-7675 6397-6470 4579-9758 2484-7673", "57-2718 390-7466 4662-9103 3992-8695 1541-5918", "64-5838 2904-6028 1110-8931 117-2715 701-9623", "1095-8496 3607-5440 1934-7243 5189-6834 55-3241", "5471-9652 2762-2817 934-7531 1850-8125 4337-8853", "1907-8208 5537-7968 881-8924 2677-6925 1611-2760", "6273-6517 2828-5258 5999-8316 1366-5760 4181-6234", "172-3248 6526-6541 8852-9555 3957-4529 3332-4040", "53-2205 1866-9897 4373-9837 2871-6037 3641-4605", "2979-5009 757-4493 3696-6195 6320-8524 104-7416", "2624-9626 8019-9008 4529-5453 1453-6674 413-5889"};
    int seats = 39;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 102;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> travel = {"7722-8984 2565-3052 6558-8311 2727-4489 2981-3096", "5022-5387 3021-8107 1985-5197 6205-6940 4970-8643", "2616-7748 576-9473 158-6712 3066-3896 6116-9573", "81-8098 1644-2164 1557-8255 146-1855 497-8354", "3252-4881 6402-8469 1083-4715 1984-5412 1149-5171", "617-5306 830-3552 8486-9381 4673-9991 3510-6452", "1438-4557 3918-9014 7169-8383 3025-3305 1221-7888", "6049-7449 7823-9121 8746-8999 4079-8346 6181-6841", "2770-8382 6333-6874 4762-9707 6696-9057 2155-4505", "2200-3382 4465-8104 3646-6274 2057-8894 3163-7677", "90-3384 1483-5103 5471-9818 3112-5108 3450-6665", "1201-9597 1577-5426 953-4567 5214-6539 3511-5833", "7161-8561 1335-4479 3051-8209 2912-4183 4662-6932", "2664-4784 6596-9251 7310-8869 1150-5048 4613-5637", "2850-8534 3137-8012 4379-6647 4890-7852 2917-9585", "754-1002 1503-7340 2481-6343 1047-4196 6964-7793", "2840-5654 2009-8136 650-6803 3786-5307 3653-4073", "5654-6972 2952-5873 8852-9866 5506-8794 485-2585", "7878-8347 1276-6768 114-4794 646-9252 5297-6312", "3095-8541 8811-9693 168-419 3028-9274 4636-9284", "4801-7830 6037-7637 4478-4922 35-8852 2431-5816", "723-4811 4314-9766 2406-3466 2641-6536 3936-7055", "1995-7867 5630-7783 7653-8644 8905-9898 843-8888", "2293-5415 4218-4908 6919-8255 2528-4318 3063-3090", "3102-6674 1633-4048 6781-8191 1088-6277 6234-8444", "3152-6128 1585-9991 2344-8160 560-7330 236-1005", "3533-4928 5233-7662 1744-3496 5432-8182 591-9522", "7152-8250 5788-6095 3908-5317 57-137 4828-8864", "2487-8033 395-7137 823-2697 6871-7860 5253-8906", "1753-5667 1387-5309 6962-9600 3780-3796 2442-8347", "7265-7913 6892-7040 1538-6055 258-2224 7650-9540", "7280-7995 1596-1974 8639-9130 1315-3861 6640-6973", "6770-8493 4207-7417 4060-6614 7446-7619 1969-3162", "1629-6799 3297-5415 1277-5024 673-7281 3635-9483", "4066-7564 3416-8979 3042-8549 492-3908 616-6244", "161-6823 7540-8443 4311-4320 2462-8770 4953-6228", "4261-5465 3852-3907 1761-6297 1031-2940 231-3188", "7083-9493 4755-7286 6491-8361 96-9370 2300-3908", "3631-9419 3644-6533 2341-9824 6784-8796 242-6070", "605-3542 6197-7777 3471-7679 4027-9752 24-6108", "3592-9386 1401-6584 1706-2046 5492-6734 2973-6537", "756-9829 3390-5377 926-1616 1406-3811 9016-9598", "7729-9944 403-3558 1451-1788 3114-8623 2457-4192", "2598-9573 1124-9406 2923-8618 3813-4312 2663-9104", "2053-9257 2989-9287 113-860 3474-4318 153-9785", "7581-8293 5595-7053 4386-7061 533-9336 4645-8898", "876-5971 5929-9795 7929-9115 580-5783 1629-8609", "7705-9947 6480-8832 449-3751 2136-4522 2975-5507", "1974-7451 232-2954 2775-5193 2145-4945 1684-4356", "4192-6576 1707-3728 3722-7999 476-3837 138-882"};
    int seats = 63;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> travel = {"34-97 7-30 31-59 54-80 17-89 40-81 6-30 17-36", "94-95 3-94 26-45 16-41 6-85 24-66 32-36 12-75", "79-88 20-41 14-40 74-76 11-97 37-42 10-49 13-78", "32-95 24-37 49-67 19-43 12-73 8-79 20-61 3-61", "50-92 97-99 5-89 8-61 56-64 12-25 11-100 23-72", "15-75 10-77 82-91 15-65 41-42 25-99 8-99 58-100", "23-48 19-69 17-47 1-10 16-46 66-81 54-78 27-31", "64-79 36-66 26-53 32-58 35-43 14-21 13-74 76-77", "12-99 71-72 71-85 21-22 26-34 11-19 9-64 24-82", "43-87 71-90 51-53 12-50 35-40 40-42 25-63 34-40", "23-70 8-32 1-86 65-92 46-48 8-71 66-98 37-79 6-85", "50-76 15-57 4-47 25-27 24-68 74-91 62-93 62-72", "37-71 4-48 16-57 85-86 39-75 31-93 51-54 26-36", "8-47 49-78 53-91 63-65 72-98 36-99 15-86 42-54", "27-40 11-63 24-61 45-78 14-47 54-75 21-82 11-44", "40-65 43-53 42-78 9-89 32-99 75-81 55-83 42-63", "5-13 16-45 24-59 25-99 3-50 46-89 17-88 44-99 4-8", "89-90 9-81 81-82 33-93 39-49 18-53 74-87 22-93", "4-63 35-74 5-50 17-98 31-61 27-28 1-18 45-61 92-94", "13-34 42-78 73-91 41-63 65-71 61-89 33-78 20-97", "12-91 8-87 6-59 26-49 8-62 5-21 15-36 30-45 20-37", "57-67 48-62 5-62 13-83 24-34 9-74 7-76 43-59 55-65", "17-21 12-18 69-74 45-88 12-15 61-63 12-43 28-81", "43-79 22-28 51-60 31-41 88-89 27-69 78-83 56-57", "10-73 67-70 10-57 11-88 4-48 18-80 34-92 34-94", "47-67 12-65 98-100 63-90 12-92 2-86 4-32 11-26", "51-57 34-88 31-33 16-18 59-61 46-51 38-100 41-72", "9-29 1-75 26-83 24-48 19-89 28-51 33-35 43-78", "1-78 26-41 28-70 9-97 8-84 39-57 26-41 6-7 49-81", "10-38 10-56 38-63 19-51 42-67 62-97 12-96 16-58", "31-72 50-64 37-51 60-99 51-77 63-90 30-82 11-79", "81-84 77-92 18-64 50-67 60-92 47-50 15-28 48-72", "74-91 23-47 45-70 35-41 15-71 3-54 70-96 68-86", "56-83 16-71 15-39 39-43 34-65 85-90 38-83 8-71", "2-25 46-50 40-94 24-87 24-65 79-93 31-63 21-68", "69-76 5-13 69-100 16-50 34-69 6-57 40-62 55-69", "18-100 6-89 65-78 7-57 16-84 38-87 21-77 2-39", "40-87 26-74 12-17 37-65 26-74 58-68 3-84 4-67", "22-41 63-70 3-65 45-46 50-88 51-70 5-77 21-22", "29-92 11-42 32-79 43-61 56-70 92-99 53-94 8-9", "24-65 89-96 66-70 3-57 28-78 6-31 4-49 67-68 29-98", "54-94 22-43 7-52 23-50 76-77 35-70 52-89 66-90", "7-75 14-89 35-65 54-93 46-68 34-39 4-48 5-26 58-75", "9-45 1-56 19-40 82-94 34-60 20-74 24-33 13-47", "46-74 6-10 36-82 78-79 18-67 56-62 45-82 7-36 3-86", "36-99 7-38 3-82 12-24 28-79 68-89 16-50 58-85", "21-39 33-53 62-99 63-69 11-18 34-37 20-40 57-81", "54-97 44-60 75-90 36-63 28-37 79-83 38-42 37-85", "75-79 46-79 85-96 12-87 66-73 4-86 1-7 37-47 37-55", "55-70 30-53 17-28 38-39 20-46 3-92 1-58 53-63"};
    int seats = 126;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> travel = {"67-75 8-81 58-89 30-58 63-100 36-99 11-36 11-34", "20-35 49-96 3-30 30-91 89-92 54-62 22-76 9-18 3-26", "43-82 11-81 93-97 29-80 19-89 54-63 55-64 35-83", "15-93 13-47 30-72 10-64 4-29 46-98 35-37 31-48", "45-65 4-77 19-31 28-77 7-93 47-98 19-48 33-56", "56-82 60-73 26-99 43-93 22-32 47-63 28-90 11-39", "90-97 50-82 53-85 51-98 72-99 42-84 4-29 17-55", "11-45 38-63 84-90 42-47 18-52 49-67 26-72 69-83", "13-39 11-70 9-61 44-67 48-58 55-100 69-92 13-19", "54-65 37-47 15-68 13-39 30-86 14-79 58-71 42-79", "9-80 34-69 76-88 13-89 47-78 20-83 13-40 21-56", "51-76 26-30 80-84 31-47 5-58 77-91 34-56 49-89", "7-35 27-74 14-35 24-35 64-94 54-89 40-89 16-34", "39-82 17-98 10-89 78-89 31-37 7-95 49-57 50-88", "27-91 60-89 5-39 14-79 58-69 37-94 3-7 24-92 12-83", "55-98 56-65 15-90 56-100 39-63 11-85 38-46 44-51", "83-84 18-62 7-37 29-72 94-96 19-99 5-91 22-60 7-57", "7-58 13-21 59-78 52-100 40-73 76-92 21-51 1-25", "33-91 63-75 4-29 47-71 74-84 39-84 6-91 99-100", "35-49 27-34 33-82 56-64 11-29 16-38 1-93 8-20", "65-95 40-89 49-72 62-78 5-44 9-24 6-53 77-98 47-60", "6-30 65-80 1-59 32-57 20-51 45-62 35-85 45-59", "22-67 19-62 78-93 76-94 13-54 3-19 50-84 37-55", "40-42 5-74 17-76 44-61 28-67 10-91 22-37 80-86", "51-52 30-46 58-67 34-62 38-54 58-74 24-40 4-32", "3-57 14-93 23-56 47-91 32-74 23-41 52-69 2-80", "70-75 12-26 22-23 31-82 15-92 22-38 1-15 3-39", "54-95 55-83 53-91 59-77 19-53 38-68 3-4 62-77", "40-67 58-60 35-89 3-39 2-99 83-96 26-27 76-91", "20-30 79-94 92-93 41-49 38-89 12-63 29-78 52-94", "6-51 56-95 89-99 42-69 14-62 21-56 24-69 34-81", "4-99 14-79 24-79 25-97 20-46 18-81 28-53 82-94", "71-84 3-24 13-38 56-97 25-57 45-46 19-95 8-74", "11-66 65-96 37-96 35-58 56-84 9-73 19-28 40-81", "77-95 49-74 63-76 7-26 70-94 35-70 45-71 5-94", "16-53 63-100 21-30 9-99 7-96 7-38 18-59 16-41", "47-52 6-98 35-66 35-55 27-78 26-54 1-59 42-98", "46-65 30-49 8-96 61-86 6-21 19-32 13-88 82-92", "10-59 94-95 48-63 40-47 8-98 35-57 10-41 51-93", "54-69 53-69 15-17 77-93 39-73 73-78 34-75 53-74", "59-62 86-97 30-99 52-70 60-66 50-98 10-37 87-89", "50-82 36-50 22-40 7-92 82-87 88-93 33-87 16-78", "63-64 16-58 3-21 40-94 68-84 30-56 4-21 46-94", "6-27 41-65 4-97 62-82 58-72 18-20 1-16 56-68 45-82", "19-45 55-56 7-46 22-92 87-90 35-42 15-80 22-89", "24-53 54-60 25-100 36-42 2-16 13-45 61-93 19-62", "2-73 81-95 60-75 43-72 32-86 28-30 8-34 41-90", "48-98 22-93 8-55 3-70 20-67 21-74 83-90 17-39", "77-97 17-70 1-26 2-51 22-79 12-60 82-96 12-40", "30-90 65-100 30-68 25-80 17-63 17-59 2-73 45-67"};
    int seats = 115;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> travel = {"1-80 17-63 37-44 69-70 40-78 3-29 6-45 1-73 71-91", "57-96 25-55 43-68 45-91 21-26 8-50 35-74 28-73", "62-72 11-66 7-40 8-42 73-83 38-82 6-40 1-74 1-42", "7-9 92-93 34-87 2-34 70-78 30-62 67-96 39-44 47-56", "14-100 10-37 75-85 42-79 39-62 37-59 47-48 16-35", "5-81 66-70 21-52 82-99 33-75 26-32 51-93 21-34", "32-42 5-7 20-26 39-40 86-95 27-39 32-66 29-53 8-62", "21-24 50-72 37-43 72-79 21-74 47-73 34-40 35-39", "37-58 1-76 8-51 54-94 26-60 62-93 25-39 50-51", "18-62 29-49 23-88 34-66 84-100 12-98 7-77 16-81", "5-31 14-74 37-57 71-99 17-73 94-97 52-71 53-91", "50-59 91-95 25-28 83-92 63-99 33-43 25-32 36-67", "3-8 32-54 17-84 29-100 42-58 30-62 16-36 28-90", "17-35 23-87 16-25 95-99 8-74 29-47 26-71 44-71", "9-54 7-79 23-71 64-74 8-64 13-88 74-75 35-89 13-39", "12-25 27-96 24-73 57-98 33-83 27-80 1-35 96-100", "49-53 35-49 15-75 11-78 36-94 7-39 56-89 38-65", "39-86 12-43 29-81 16-46 15-68 12-65 19-72 14-21", "37-89 21-78 37-39 33-59 12-41 72-98 10-66 4-90", "4-63 28-63 16-61 8-15 59-73 3-48 70-100 18-77", "23-99 10-53 25-41 40-45 38-58 19-74 3-14 49-68", "17-68 40-84 47-96 16-56 35-71 16-93 52-73 59-79", "10-53 55-71 24-98 19-61 73-85 50-93 65-81 55-77", "14-15 88-100 27-34 38-64 27-43 69-92 83-90 39-78", "24-40 26-94 94-96 5-65 52-70 2-9 68-78 26-53 11-65", "74-75 49-67 41-61 59-71 52-90 2-41 74-75 5-94 3-79", "22-32 6-57 24-33 43-61 54-100 59-83 8-22 26-45", "8-9 11-30 29-58 37-87 35-37 8-44 1-36 39-57 33-98", "50-67 53-77 62-63 10-52 4-10 4-35 22-28 53-71", "30-65 38-99 75-92 39-70 3-68 18-34 69-89 4-91", "23-45 22-51 39-95 24-58 1-50 1-45 23-55 33-44 8-14", "78-84 36-97 9-47 16-70 39-72 50-87 43-98 42-83", "60-99 35-48 12-23 1-92 27-46 14-70 44-53 36-97", "6-97 13-92 47-67 12-42 6-9 26-89 61-89 73-93 54-82", "25-42 10-86 24-85 90-99 84-93 56-61 67-99 72-73", "13-36 75-93 50-88 23-85 67-78 36-73 19-97 28-34", "69-75 92-95 52-97 4-98 26-31 3-86 4-69 45-70 67-90", "40-64 31-99 31-99 36-54 5-17 56-98 57-72 11-55", "21-99 43-73 36-66 31-66 14-43 24-81 27-69 6-23", "43-57 70-77 16-44 61-77 67-80 3-23 12-47 27-45", "47-90 28-98 36-42 29-36 8-56 51-56 5-6 61-95 18-71", "65-85 17-58 10-23 51-70 40-74 32-76 18-55 21-75", "3-22 5-57 27-78 10-66 7-13 4-9 4-37 21-67 39-79", "18-93 87-100 49-71 2-100 42-78 24-55 1-88 47-91", "1-52 3-26 40-96 48-61 33-72 5-37 33-76 15-71 8-31", "36-78 69-91 33-95 8-64 22-35 15-78 1-55 45-67", "9-35 22-51 22-23 55-86 27-74 1-9 11-44 25-70", "39-52 74-76 51-61 28-35 61-64 45-86 17-19 8-22", "21-29 19-36 74-90 58-60 21-55 38-96 16-70 24-31", "38-53 30-81 9-56 31-47 17-63 18-59 10-93 68-88"};
    int seats = 173;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> travel = {"48-77 52-87 17-39 27-89 16-90 52-98 86-96 67-72", "23-39 32-85 36-68 29-37 4-96 23-26 90-93 57-90", "81-91 30-47 46-70 37-67 1-54 26-77 34-60 19-70", "44-46 20-31 29-87 6-85 22-64 53-61 78-89 44-96", "16-56 38-77 60-92 45-75 56-98 32-70 88-94 2-24", "17-81 38-94 6-26 11-60 12-93 28-32 88-89 52-53", "6-72 61-99 1-69 90-94 97-99 15-50 49-56 31-44", "52-86 26-97 22-95 79-86 4-41 32-73 27-79 8-58", "37-94 52-75 30-72 1-57 68-95 77-87 15-81 72-96", "6-86 59-61 30-58 68-86 41-88 13-18 25-79 51-74", "1-5 39-40 30-50 17-68 18-69 20-40 26-74 3-78 12-76", "17-50 1-93 30-88 68-77 17-83 8-82 37-87 97-100", "23-40 58-76 28-39 3-97 50-84 82-97 20-58 7-37", "23-28 2-72 35-80 45-55 40-100 24-81 49-52 7-26", "30-88 58-78 18-99 35-49 61-72 10-38 15-46 48-84", "52-87 80-99 8-90 32-33 17-37 81-95 65-70 76-86", "19-30 48-56 19-39 61-86 16-92 15-47 12-96 22-24", "97-99 37-87 71-74 19-99 62-89 34-84 17-81 59-84", "64-99 14-89 37-91 33-62 39-99 55-68 36-91 8-88", "37-84 28-52 7-72 5-86 47-76 17-34 62-67 22-43", "49-60 33-55 16-84 43-46 38-61 45-46 49-65 35-78", "23-79 36-37 2-36 78-94 2-5 16-26 69-80 68-100", "12-23 34-51 63-70 34-72 53-69 12-98 3-50 30-48", "40-95 45-85 27-88 40-68 7-66 31-86 22-96 16-58", "17-66 10-73 34-98 28-63 83-97 71-98 48-95 13-90", "55-91 49-87 53-56 4-56 13-96 79-87 26-49 75-77", "76-99 15-84 76-96 25-65 26-89 11-68 71-85 20-65", "1-57 3-92 34-56 36-80 2-38 39-67 36-79 2-45 30-97", "52-57 38-96 2-72 16-21 49-62 9-54 69-71 56-92", "1-11 10-34 10-15 45-92 23-35 36-67 7-54 47-63", "25-44 50-72 18-42 22-32 25-69 25-59 17-25 17-48", "15-29 2-39 50-61 84-100 78-93 41-57 52-68 13-97", "4-67 15-69 30-54 57-94 41-84 48-80 4-16 19-38 8-52", "90-91 33-70 53-56 3-24 8-95 46-58 61-77 36-77", "72-75 45-69 47-65 10-93 23-99 32-95 28-80 20-71", "25-28 8-11 56-68 2-25 44-92 19-73 19-23 6-73 21-94", "46-84 36-68 18-52 58-68 3-35 27-40 1-7 32-97 11-85", "10-49 71-92 33-61 23-84 76-91 23-85 23-42 2-30", "9-84 13-32 4-74 60-99 34-84 6-89 80-90 45-68 15-45", "72-78 18-86 53-78 40-43 32-86 7-57 67-86 8-81", "81-84 83-90 6-61 30-74 23-51 31-86 73-94 60-78", "60-97 3-66 63-82 19-94 1-10 45-55 21-55 68-89", "28-84 1-46 26-95 58-92 22-61 70-97 17-87 12-85", "57-78 40-45 25-94 5-84 90-91 32-95 32-55 61-95", "38-94 51-54 22-39 10-40 59-73 19-24 9-79 45-70", "39-95 16-59 18-44 60-65 50-76 43-100 12-44 28-47", "92-99 31-96 55-77 32-95 29-45 40-74 84-91 6-57", "4-6 15-40 17-31 9-10 9-84 15-55 44-47 66-93 44-82", "26-79 4-35 27-43 8-13 26-90 77-95 25-33 24-74", "49-80 36-92 71-84 10-99 69-93 31-55 20-27 21-43"};
    int seats = 123;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 95;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> travel = {"73-91 73-74 25-42 7-79 48-59 37-73 24-35 24-72", "21-58 25-45 95-96 15-84 13-49 24-75 5-8 51-98", "29-43 27-67 94-95 19-81 34-73 16-41 24-72 2-98", "47-60 64-81 26-78 20-51 12-56 21-24 56-80 13-20", "19-42 6-64 53-86 83-86 1-46 2-43 34-98 4-23 38-84", "13-28 34-85 3-29 80-83 36-72 27-94 13-25 8-76", "21-56 38-54 72-73 43-64 44-54 7-15 62-86 67-87", "71-87 54-95 72-94 8-35 42-56 70-90 38-39 51-78", "67-92 36-99 75-98 16-48 20-58 40-80 27-66 10-26", "45-60 17-73 75-85 60-93 12-66 45-100 83-85 2-8", "26-33 47-64 46-54 7-42 24-37 47-67 15-70 24-81", "19-99 19-56 5-47 63-72 57-83 14-81 10-52 21-46", "11-51 38-43 11-35 2-86 62-83 54-85 10-66 78-82", "19-96 11-14 3-16 22-86 3-9 48-59 21-22 4-67 32-34", "21-29 17-78 37-77 32-43 50-91 38-44 36-89 38-61", "8-87 46-93 63-86 58-91 31-62 10-37 31-91 73-84", "19-27 5-81 65-87 13-15 59-84 30-92 7-25 8-33 58-86", "26-71 7-43 17-41 61-62 7-97 26-99 4-88 4-45 63-97", "18-24 1-32 37-71 8-40 53-73 12-49 86-99 44-46", "14-97 39-57 61-69 57-92 33-37 19-30 13-88 67-98", "43-82 14-98 7-25 66-89 48-62 5-69 40-64 20-45", "84-97 34-58 7-89 1-5 75-99 53-86 46-82 37-60 22-70", "59-87 3-82 37-71 29-58 8-22 66-92 45-46 29-33", "5-76 28-41 40-50 21-76 26-37 31-72 22-62 73-80", "20-94 42-46 50-52 37-94 7-81 40-43 5-76 28-98", "38-71 3-87 39-61 66-100 23-57 48-76 45-81 24-100", "12-13 23-31 53-92 53-64 16-32 22-87 57-96 7-73", "11-17 45-75 17-76 29-30 20-100 11-77 55-57 55-79", "21-38 43-79 30-62 5-34 1-43 74-80 73-83 39-98", "32-67 80-81 35-84 25-89 39-70 6-92 26-96 42-45", "52-77 49-77 8-73 86-92 22-37 40-69 25-51 51-80", "4-96 81-85 7-42 26-56 42-99 35-89 14-27 24-57 4-80", "7-92 16-29 18-98 50-77 7-69 11-19 37-48 7-20 65-84", "41-98 31-90 71-82 51-90 35-53 8-66 44-45 19-93", "45-65 7-39 18-49 46-95 29-94 26-31 19-78 24-48", "25-68 53-73 18-46 12-43 70-77 9-85 8-23 13-14", "50-73 29-42 3-79 30-87 22-59 16-33 1-73 68-88", "14-27 43-68 16-67 9-47 20-27 86-93 40-87 40-46", "46-77 8-71 37-44 30-87 77-81 50-75 27-57 76-87", "51-90 16-45 59-60 14-63 59-100 77-91 64-65 41-89", "24-90 28-71 29-69 39-68 80-98 47-72 90-93 21-68", "20-59 7-11 45-86 77-95 21-25 6-14 34-43 21-89", "53-83 25-53 51-91 76-96 15-19 35-72 10-53 97-98", "79-93 60-70 80-81 9-75 31-80 28-71 17-66 77-86", "19-80 38-97 85-98 32-91 89-90 45-95 21-92 13-87", "54-67 55-90 11-99 24-36 52-63 5-30 18-87 8-99", "5-22 32-62 52-69 12-90 46-48 15-45 12-17 9-17", "56-58 2-71 72-86 3-14 13-42 30-36 8-56 15-57 68-83", "47-74 22-45 20-52 48-70 2-20 26-89 5-15 28-57", "69-86 5-51 56-96 37-70 11-73 30-80 24-89 37-48"};
    int seats = 115;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> travel = {"4823-6766 1455-5106 3908-8607 1843-7158 1094-3643", "3900-6922 6484-9200 2185-4987 1201-6104 6214-8156", "1589-4042 1873-7693 2561-4196 1394-8449 2248-3868", "1450-5424 4311-9547 2115-2760 1121-5475 5248-9046", "6487-9327 1801-5568 6170-7821 5854-7290 1484-7057", "2425-2604 2194-5001 4405-7340 5208-6828 1575-1946", "1557-4589 4303-5004 1541-6456 3654-6355 1934-3039", "2917-9833 1090-1184 2219-5724 4163-5337 2276-7501", "3784-6415 1968-6339 1357-3895 3527-5335 8251-8268", "2092-9932 6448-7843 6712-9242 7984-8002 3552-8140", "3692-8106 4596-8225 1713-4185 3746-7381 2398-4312", "4396-8460 5178-5202 3611-9848 2657-4933 2695-5279", "1495-8902 2379-3573 5170-9694 3923-7852 1358-5008", "6841-9237 7988-9316 6673-9612 2931-8943 3957-8443", "8542-8644 8482-8858 1837-9418 2660-3365 2695-6333", "1655-7268 9039-9683 2702-8729 3325-8900 8869-9556", "2165-6875 7643-9143 6590-9580 1891-3034 5746-6050", "6654-8349 3736-4793 7654-8105 3062-4598 3845-9596", "3328-5568 7454-8602 5105-9814 2554-6554 3171-9107", "6213-9020 3781-8320 4647-5357 5469-9523 6436-8650", "1757-6663 2848-5341 3653-8090 1860-5368 3811-4777", "4650-4881 5177-8856 2874-8002 5910-8271 2229-5846", "9201-9656 7978-8356 3979-5278 6825-9516 1034-7760", "5763-8419 7122-7499 5623-8992 8435-8877 1701-7953", "1225-2589 2224-4151 3024-5548 5421-7648 2825-9504", "4585-9440 7908-9103 1514-1772 5194-9049 3816-6353", "5870-7640 1763-4840 3988-8585 1105-7213 8001-9733", "3991-7156 6515-9096 3401-4265 1028-5671 3201-5559", "2294-6547 4008-4218 6577-9653 4149-4721 4007-6780", "2586-9999 3263-6799 1819-5931 2159-7499 3114-5550", "3652-7286 3996-4778 3898-6419 1368-2905 2315-7443", "7299-7558 1961-4507 1449-4738 6016-9652 3664-4167", "5096-5548 4403-7046 6049-8346 2892-7352 4161-9154", "5677-7789 9495-9819 3780-5772 3246-3928 1526-5227", "2557-5314 1461-1522 8468-9990 7810-9291 4358-9487", "5588-7809 2430-6011 1585-7357 3706-9723 2249-4146", "3276-6533 2805-3777 3791-4203 5118-7512 5573-7587", "7030-8488 1066-4413 1225-5011 3365-9497 1033-7154", "4999-8791 5245-6852 3973-9888 3389-6748 6930-9373", "3272-9418 5635-9010 1953-6342 6139-6146 3771-5819", "4116-6597 1232-8645 3717-8085 4934-7275 1911-7571", "1882-5610 1176-9179 8963-9341 9624-9851 1800-6950", "7743-7970 6105-9444 3567-6869 5143-6931 1963-4152", "4667-8840 1747-8854 3600-6558 5340-5788 8490-8709", "6242-9933 5569-9529 4726-7300 5522-7265 3688-7722", "6878-9584 1661-4895 2218-7843 4796-9992 2343-8381", "2694-3233 2592-4822 1531-9507 2219-8704 1984-5466", "1299-5250 5835-8888 1602-1724 7499-8313 6352-7981", "1505-2770 5528-8998 1565-8363 1124-3388 6588-6717", "5020-6728 2889-9789 5461-8638 3668-5863 7872-9595"};
    int seats = 113;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> travel = {"1287-9228 5502-9558 3553-5151 5466-8086 6001-8611", "7371-9200 1488-2988 3785-4148 1413-4386 3503-7444", "5259-7459 2139-5791 7505-9640 8873-9334 6700-8281", "4936-8191 1043-9825 1485-5711 1862-8394 5382-6853", "6776-6805 4517-6546 2535-2940 6864-9410 1028-6025", "1850-8079 1526-1661 6276-7039 3721-8812 2259-5739", "5694-7902 1935-4939 1996-8041 6691-8785 4153-9929", "4028-5576 4486-8639 4837-4982 3296-6973 2219-7351", "6129-8772 2708-5197 2282-9088 1841-8778 1354-4493", "4369-9564 3851-7529 7182-9180 1348-5358 7695-8439", "2925-6993 4736-9075 1152-5558 2330-6054 4449-8509", "2230-9924 1086-7076 2527-6012 4070-8007 9091-9946", "4123-6453 1806-6497 2052-8398 4986-9128 3073-5684", "2031-9098 6106-9303 7343-9073 7473-9607 1385-5127", "6780-8244 4918-7124 1619-9121 3446-9089 8899-9956", "6923-8677 2920-8106 3864-6225 2320-7138 3579-9605", "1411-5445 5941-6639 3526-8571 4938-7631 3936-9471", "3322-8767 5537-8743 7679-8133 3052-6319 2600-9600", "8196-8528 3164-6537 5122-6209 7427-8953 1145-4949", "4771-8633 2845-8557 2030-6297 8145-9396 1690-6724", "6011-9755 7365-7861 7048-8974 5853-8226 2795-5724", "2218-8919 4158-6770 2134-8678 7591-8612 2567-3108", "4369-7962 2051-2621 1075-8799 4606-9407 2478-3055", "8035-9123 1667-6236 7594-8887 4477-5981 2997-7691", "5814-7890 5767-6145 3609-8007 4121-9306 1616-8920", "6944-9913 6404-9668 9378-9880 6516-8800 3478-4463", "5586-6418 5120-7865 1648-7432 6427-9011 2505-3088", "2279-7270 3328-4590 4712-5428 8042-9694 4312-9598", "5714-5803 3337-8699 2148-9535 4643-9196 6014-8089", "2505-9349 3356-8256 7589-8783 1574-8478 2704-5057", "2925-5513 4168-9417 1936-8317 2933-4645 1029-8950", "5379-8699 3226-3710 6406-6579 5093-5945 1117-1569", "5057-9242 4846-5815 5697-6290 4731-6918 5958-8057", "6427-7556 3484-6689 1079-5718 1258-8823 2517-5965", "4969-8722 5938-6221 4656-8401 3007-3301 1688-7141", "7712-8591 5084-7156 1642-9482 5940-8370 2420-8912", "8896-9163 2038-9909 1255-2307 2268-5089 1052-6233", "3229-9670 2609-8597 3067-5297 6313-6657 2436-6435", "5466-6543 2282-8933 2771-9855 3309-8280 6975-8873", "2630-3001 5462-9279 5682-6842 4348-5814 8563-8889", "2967-4212 4175-4408 1930-7826 5884-7649 2488-9031", "3163-9125 4679-6396 2191-3443 3822-9148 4888-9543", "7220-8261 1985-5289 1429-8768 5628-7931 3152-9558", "3358-5118 2201-4687 4248-7875 7092-9287 1294-2241", "8596-9309 7742-9117 2115-2164 7215-9550 6169-7664", "2821-7803 8896-9194 2663-4440 2854-7473 4179-6225", "5190-9475 1822-9468 5822-7818 1371-9632 1620-8284", "3737-8188 2132-7967 4240-7449 1183-6918 1725-4238", "4505-8340 3643-6072 1512-5839 7191-7258 6575-7528", "1459-2256 1849-7845 1972-5920 8307-9126 3367-6827"};
    int seats = 96;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> travel = {"3103-6200 5931-7098 1193-3044 8303-9513 9258-9913", "3315-8564 1598-4675 2392-3324 3985-4524 1725-8844", "7530-8494 1628-3138 6861-7226 2449-5042 1555-9983", "2560-7976 1778-2941 1653-5102 3351-5068 2374-9193", "5737-6054 3970-9076 3941-5476 2183-3604 1791-5809", "2555-6417 4906-6467 5323-5816 7404-7893 6264-8305", "2087-5062 4059-9812 2153-9879 5958-7198 5826-7760", "6752-9982 2475-9991 4466-8691 5743-9041 3873-7406", "5256-8889 7341-9239 3203-6073 1101-1736 4750-5616", "7146-8706 1683-5322 5827-6227 1559-8190 6151-6598", "1510-4057 6923-7476 7315-8955 6772-9086 1533-6906", "7174-7626 5860-6201 4751-5111 4342-8511 1911-4222", "8097-8161 4914-9755 3866-7927 5180-9407 5337-7751", "1647-6352 3707-6361 2590-3340 9474-9574 1274-8566", "5609-9019 1322-6736 7103-7214 7108-8589 5596-7145", "3840-7844 2573-4288 2749-6324 4055-5534 4187-9939", "8240-9194 1028-3842 7416-9635 2875-9981 3665-9644", "4345-8251 7905-9763 2780-3380 2887-7193 1784-4899", "4658-9932 1888-4329 1444-7272 2868-5777 1616-6832", "2354-8483 1353-8841 7236-8360 1888-9332 7875-9687", "1631-8173 9178-9714 5468-6762 1494-8433 4794-5606", "4643-7155 2742-8738 7075-7743 2096-9117 6751-7810", "2811-4320 8419-9591 2492-8886 7769-9535 2877-4076", "1128-5948 7085-8625 1496-2661 1005-3531 4745-5046", "5412-9305 4298-9816 5942-6302 2325-8479 3198-8209", "2920-4454 2163-5548 1799-9879 8910-9348 2500-7144", "4729-9133 6308-6469 7082-9933 5602-7992 1926-4400", "7690-9365 3997-5771 1273-5062 2651-9763 2884-4222", "5339-9621 2489-3693 3134-8757 5051-9211 8526-9179", "4352-8511 5289-8088 6044-7083 3774-8423 3504-8004", "5046-9210 1455-7994 2578-9543 2459-7030 1459-4103", "6822-9369 1149-2981 5239-8769 3921-9492 2884-5629", "3221-9324 5968-7342 1506-3502 1809-3702 3081-8989", "1465-4396 2341-8471 2020-9797 5769-9760 7161-8198", "1375-7069 3731-6657 2354-4097 7415-8167 2278-6546", "6913-7464 5836-7829 4322-8200 3559-4891 2888-5825", "2342-9337 4836-6531 1013-3769 4200-8519 2375-3845", "3900-4664 1240-4833 4053-8357 1353-8196 8202-8282", "7130-8785 3416-5223 3260-9904 3686-6427 4821-8896", "6027-7608 4547-8918 2225-7702 7519-8849 5932-8351", "5791-6930 2633-3944 4242-8298 5888-9820 3620-6995", "3172-8802 3888-9598 1024-3349 1122-8102 1351-8616", "2378-5888 1088-6405 4347-6246 3375-8647 1079-4647", "4773-5342 1267-8224 9703-9750 6912-7483 6996-7686", "8649-9500 3671-4658 4558-7705 6898-7481 3063-8069", "1841-8500 1854-8530 6502-8510 8847-9453 7145-8557", "1909-4196 3413-9802 3488-9575 2393-7285 7120-8756", "6835-7470 8680-8805 1966-5130 2718-7178 1912-3926", "3440-9972 6432-9551 2023-7664 1211-5620 6981-9970", "7547-8302 3428-9245 4308-8365 2479-8553 5840-7521"};
    int seats = 45;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 96;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> travel = {"1756-7611 1661-2218 2039-9728 1396-8552 3632-7989", "4474-7056 8471-9727 4274-4728 3577-7796 2037-7699", "6943-7572 9375-9660 2802-3102 4177-8057 1227-9727", "5618-8236 1262-4556 4080-5619 3336-6543 1480-5271", "2157-4620 8476-9330 5597-6188 2475-5275 4544-7005", "1886-6612 2756-4605 5810-6450 1013-1269 7697-8885", "1250-3069 8297-9137 2097-6585 1042-6816 2311-9716", "5122-6176 2674-6989 3134-7366 6000-6197 1755-4216", "5163-9249 2013-4722 2022-4439 2097-7242 2015-5687", "4060-6831 2833-3083 5180-5212 3430-4613 4473-4801", "3119-4694 5395-9484 6566-7062 1856-5709 8889-9929", "1840-9572 1956-5867 6762-9803 1416-6264 3155-6557", "1231-1264 3301-4983 3732-5109 4319-7676 1612-4016", "7228-9910 3058-6575 6135-7536 3353-9818 1899-8821", "5543-9440 5460-9711 4157-7985 8931-9651 1595-9446", "2083-7847 3789-9475 5632-6484 2101-5874 2420-2713", "6727-8230 1053-8959 1621-7781 5852-6025 1663-2975", "1539-4308 6387-8734 2228-4027 2531-5463 4367-7427", "1557-3918 2431-2988 1498-4723 1119-7013 3288-4636", "5368-7929 3025-9629 5375-7490 4998-8169 1284-5214", "1479-8682 3207-7889 7060-9429 4625-7418 1641-6071", "3748-8695 1013-3131 1598-7623 5403-9303 7044-9422", "7995-9636 5764-9522 2283-2669 1660-4463 3412-7514", "1310-6836 2174-5304 1587-4639 1001-5495 3859-7530", "2753-8882 2305-6300 2295-9318 6731-8850 3673-4840", "5503-6312 2147-6328 1577-3442 5087-9910 2438-3100", "2553-3231 4036-6840 5835-8989 2101-4771 4844-6358", "1964-4077 5481-8299 2624-7765 7024-8477 1446-3121", "2702-3625 8818-8859 4291-7084 2094-4774 1681-1752", "3197-4023 7080-8645 4168-5160 5961-8894 2747-9999", "4225-4818 4344-6864 3351-7556 2556-5927 8496-9500", "1357-7835 6813-7228 6005-7052 3575-8217 1971-4846", "1529-6678 3374-9231 1381-7755 6223-7586 1944-4251", "8966-9987 5408-8549 5870-8181 6060-7708 1700-4533", "1851-3048 4259-8908 4733-7070 1314-8511 2359-4619", "1823-9081 2470-6404 1772-5039 3090-4524 6183-8492", "1783-8439 2130-8887 1951-3331 3280-7586 1093-6967", "2258-4450 6086-7882 1325-9256 3813-9379 3055-4607", "2239-9069 2960-5360 2948-4904 9302-9876 7824-9245", "2555-7293 4814-6118 3919-6679 4288-6247 4195-8302", "3796-8530 2204-9259 7580-8717 7729-8816 1831-7067", "2783-3890 7506-9607 4784-8061 4984-6435 6913-7515", "6990-7245 1245-7798 4932-6550 6412-6546 2815-8460", "2242-8437 2503-3397 3664-9173 1466-8163 8486-8692", "2713-9230 7804-8755 8184-9914 3975-5737 1441-3556", "2420-5168 3382-7247 1943-5642 2374-8463 6457-9607", "3005-8892 1991-8108 2954-8484 2990-4185 3941-6190", "3332-4802 3926-8530 4545-8496 4484-7874 6387-6613", "5222-8562 4742-5572 3969-6405 3083-9464 5232-7201", "9223-9699 1375-8620 3767-5911 4698-6329 1116-6914"};
    int seats = 101;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> travel = {"1997-3351 8305-9168 1045-1821 1789-8544 2534-4757", "4988-5256 4130-9863 2130-8190 2717-8532 5899-7932", "3016-7548 2951-6062 4142-5139 6677-7898 7138-7883", "1906-9283 4358-8998 5264-6627 1492-5978 9182-9982", "2641-5019 4078-4172 5141-6799 1035-1502 1038-3461", "1823-3568 2434-6363 5426-5539 6207-6780 6980-7833", "1213-6515 2386-8071 1032-3788 4709-8005 2413-4869", "1129-9849 6865-7675 1233-9214 1950-8177 3180-9179", "7647-9270 8348-9549 1085-9140 5497-6072 7146-8838", "2034-5671 3874-5735 3064-6454 4550-7781 2447-9422", "1099-6788 5301-9826 2783-7623 2124-5183 6876-8002", "7391-7759 3293-8428 3024-4503 1537-4555 5517-8218", "1643-5239 2293-9215 5771-6078 2742-7006 7398-8953", "3779-4630 2165-9028 3778-7292 5244-9227 2677-2696", "5477-5872 2184-4144 5742-6365 6799-9594 9434-9728", "6165-9862 1165-1328 2000-7322 5055-9695 5302-7198", "5258-5641 3389-7717 1749-3399 1751-8066 2146-9203", "6990-8081 6136-7448 1222-5503 3193-7328 2271-9098", "6156-6567 3414-5045 8422-9857 2538-4576 4779-4910", "5935-6036 3895-6276 1413-9360 4068-8573 1584-4647", "8552-9520 1415-1544 1322-3934 4253-9712 2039-2280", "5593-9668 4940-6066 1346-2858 4657-4772 7023-8498", "1660-3288 2474-9962 5914-7050 5685-6627 1833-4353", "2769-3915 1640-2177 1154-5370 5874-9876 7186-8263", "5114-8526 2842-2941 2735-8705 6450-9406 3565-4996", "1968-2717 1445-3409 5085-8112 4628-9615 4582-5961", "2698-3950 1912-4426 7529-9595 4232-4685 4573-8255", "4197-4451 1618-2854 4497-7656 7825-9963 4068-6276", "1419-6690 1544-7548 3519-5967 3013-6320 3788-4737", "5344-6508 1186-3211 3473-3737 6013-9691 1533-1728", "3034-5563 2131-4002 2632-3646 3879-9573 4451-8071", "1741-8798 5294-8825 6320-8994 5541-9168 5155-9595", "2784-3981 3705-8331 1253-3494 2658-3174 3497-7419", "6773-7081 3526-9540 1226-4843 5783-7695 1895-6851", "2105-5111 4302-8151 2234-8124 3535-6001 1105-2854", "6611-8568 4225-8014 1781-9665 8913-9670 5099-6019", "2316-5368 6621-7617 3966-4317 1363-4089 2301-6651", "3246-5458 3582-7255 1617-9112 4283-6058 2305-8190", "4313-5175 1464-6523 9244-9919 1727-4265 3057-9495", "1419-7448 3334-5763 2173-4286 4261-7727 2062-5858", "4581-5896 7226-9419 6319-7674 1689-3983 1548-6816", "6792-7122 4058-8690 4704-5339 8498-9652 4872-9563", "2298-2575 3222-9734 2360-2387 4111-4725 3786-8595", "6211-9149 3554-6788 3321-3394 6130-7411 5399-5730", "4363-5959 1062-6814 4541-7633 4501-6130 8504-8899", "3657-9999 2183-2923 8075-8754 7562-8572 1148-6212", "3981-9079 2268-5905 6159-7238 2898-8198 1112-2109", "6828-9446 1223-3057 1800-7931 4566-5724 6464-8494", "7005-7577 6740-9708 3073-8343 4244-8702 1935-9039", "1415-8434 3066-5249 5091-8801 1163-3014 5046-6485"};
    int seats = 33;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> travel = {"1629-9360 75-2496 200-8186 30-100 123-9301", "2389-4953 7453-9209 1386-7913 4560-5765 2608-9136", "3323-7854 688-4013 6737-7682 7680-8159 2207-8898", "3238-6122 6517-8950 1378-4905 137-958 521-5331", "3722-4964 1640-2751 3960-6596 4041-9662 2868-6813", "1434-2018 76-6138 7759-9063 4509-4609 6361-8232", "2187-5507 826-2856 3075-8801 7887-8327 439-6211", "631-2845 458-7760 3986-9063 947-9262 3642-5384", "1154-3712 2809-5741 8523-8889 9020-9828 380-1496", "3-1282 1-1137 843-3388 479-4918 1659-4289", "9484-9758 9085-9808 72-9165 5641-6940 3972-5953", "723-1468 1375-4802 3376-9380 1028-2903 158-7501", "459-4091 1091-3694 6774-7076 2246-7450 1255-9836", "5500-9450 1290-2197 6797-9470 4787-7162 219-5544", "2566-5541 2024-2710 1133-9048 1054-2381 1508-9244", "5033-9490 166-9857 1088-2531 7240-7531 872-9268", "1911-8073 4603-6498 5296-9961 4392-8196 6392-9570", "5711-9232 6759-8071 802-8091 2377-2860 340-1113", "103-6501 1560-3063 7488-8255 33-5303 38-5957", "375-9917 701-1458 196-6107 405-9988 355-8963", "4230-4752 4816-8511 3114-5375 100-687 800-1052", "9038-9514 8777-9328 5599-9821 2984-9521 613-9841", "1132-8589 2010-3682 1928-2393 4201-4746 6148-9665", "2329-9348 3343-9625 516-3032 3338-7519 3956-4824", "5672-9518 1348-1695 1519-9903 963-9951 717-7135", "2144-9664 1405-3013 4530-5955 320-9591 873-8829", "226-6133 273-307 1868-6357 2106-3758 886-2130", "1261-7173 1247-6431 2364-4369 607-9813 3382-8802", "1878-5552 2366-6626 8652-9156 5300-8206 2580-6734", "1663-2098 5745-9633 5775-9687 3659-9730 555-6285", "420-4911 1240-5898 5385-8555 4368-4956 34-5346", "274-8644 2206-3517 7193-7368 405-9652 947-9246", "937-5312 3491-6409 4317-9221 8419-9977 8-6451", "8268-9139 4739-8626 2376-2411 8183-9942 105-3697", "933-7971 8098-9839 3435-8886 2831-7200 8145-9979", "184-6085 6967-7177 4268-8727 4767-5449 1739-2544", "166-5614 1012-1259 331-9206 6178-6688 2136-3110", "5634-9803 2331-2628 1264-6693 132-5022 312-3226", "59-9044 5502-8847 353-5915 203-9907 286-2266", "250-9961 3847-5831 741-5800 3826-8678 4684-9394", "6-4200 5077-9008 996-3813 1884-7667 4129-7826", "2775-5980 102-644 1471-1765 1930-5520 1685-6754", "1013-2754 4346-8186 225-1284 1417-2330 3207-4735", "1883-4699 7880-9211 2545-4625 609-3557 9890-9981", "606-8689 4077-9371 4232-7207 295-2257 2928-9500", "343-6742 8159-9785 343-8218 1520-9613 1049-7096", "654-9401 789-7393 2940-8734 4851-5546 2459-8691", "2422-9746 780-2050 252-2025 834-7333 8077-9270", "5619-9692 3547-9991 8438-9825 5870-9853 6594-7702", "2833-4015 3040-6037 6861-8426 46-1150 4219-8973"};
    int seats = 66;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 66;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> travel = {"439-3708 4611-7446 5533-9997 2757-4923 112-6791", "55-9355 4496-6153 3380-6022 7684-8667 1999-8079", "1172-8565 3895-5101 9455-9833 2242-7929 86-8311", "4650-9036 143-2599 9078-9907 9187-9223 73-1598", "9271-9716 1478-5583 3413-4299 8206-9904 3668-6372", "1769-4735 1923-4956 108-7105 1772-9495 5451-8085", "4205-6362 922-9857 299-2880 9321-9821 8502-8958", "4202-9287 4164-8231 1392-8454 3355-9809 6197-9804", "8390-9935 378-5877 1061-9502 3342-5405 5507-6139", "1798-7152 174-1258 7174-7237 778-7138 3553-8156", "335-4652 1284-9903 190-365 3164-4995 910-2748", "1221-2621 7417-8307 2182-9308 628-8656 3953-9634", "2888-5641 2829-8355 578-3981 6776-8576 462-9434", "568-8691 47-223 5492-7520 809-8792 2018-6799", "2668-5168 5650-9854 6730-8867 8626-8791 370-2358", "2315-9264 39-8460 986-2636 2232-5534 2606-6956", "1083-7072 1919-7604 2727-3947 3906-9479 1453-9541", "151-3117 7125-7794 1024-2516 3163-5277 7673-8124", "3868-7457 5128-7338 2238-9011 150-545 1682-6740", "5660-8606 1002-2309 867-6228 2267-9282 4321-5856", "4562-7747 139-7756 2403-6765 4631-5070 342-8882", "475-6636 3814-9957 2599-5252 8424-9401 3805-8162", "528-6829 5626-7076 7905-9306 6412-9999 59-5339", "2672-8724 1432-4032 7800-9522 8625-9665 8217-9521", "730-3816 632-7117 1639-1717 4425-8634 1749-8310", "3478-8141 829-2303 8183-8271 20-185 9550-9974", "374-1106 1285-9560 1575-9270 7975-8775 3500-9384", "2555-9148 3842-5418 3-439 970-7825 857-3873", "7221-9613 1398-7223 4605-4639 6533-9876 152-9440", "7304-9825 798-9054 1047-1608 4261-5721 2456-2759", "3686-9464 480-8816 113-714 3110-3125 1397-5411", "5049-5123 325-3474 3050-8326 6421-6723 9507-9562", "4778-5428 1063-4002 813-2573 6008-9951 3116-8980", "51-9300 1496-2400 478-7974 1732-7603 8001-9066", "4305-6871 2041-2154 7072-8811 3356-9685 135-8056", "976-6053 3370-6194 496-1283 738-1354 3586-5087", "884-6826 7-9264 10-4242 621-1665 8137-8883", "5390-7499 27-8940 6045-8871 6834-6917 2978-9906", "2383-8995 6654-9646 6656-8570 275-7023 684-5316", "156-9644 2105-6795 2944-9141 3001-9817 8565-9559", "274-2654 4822-8917 9217-9367 2933-7562 3401-7298", "1112-9969 3952-9407 6987-8758 3864-9184 3186-9919", "36-7630 2-9598 252-280 1007-5265 6491-7303", "3473-7711 8282-9192 3632-5687 6442-8429 4742-7388", "2372-8773 2888-5693 6400-7834 1185-7338 6240-9142", "5111-8964 4776-9917 2443-5288 192-1412 594-9379", "2503-3569 2597-6173 9209-9631 1785-2320 4334-4518", "3187-5218 3300-4035 1159-9956 1924-6683 6590-9365", "7792-9992 3-6876 7804-9092 4720-6690 835-8660", "8386-9969 2527-9923 9105-9234 7648-8521 4575-9956"};
    int seats = 81;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 55;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> travel = {"9789-9865 6594-8036 2379-4564 1669-8473 6711-8734", "697-7319 4355-9696 1375-7319 1760-9636 7248-9327", "7683-9565 5111-9663 3158-7376 4512-8078 686-9601", "156-8881 6403-8618 6344-8838 2628-6332 5980-9894", "942-8743 5884-6627 1834-6096 2938-8394 1448-5534", "4756-5680 223-9997 3992-8491 2810-5947 573-6219", "1515-8920 813-3633 3373-7644 5806-9134 387-5930", "2761-9957 2896-7440 529-8885 1628-3806 4853-9762", "4320-7352 741-7060 2475-4280 2578-7688 7714-8263", "403-9682 1436-3929 3237-3467 2032-5123 203-613", "1928-3140 1506-2737 3559-7707 1849-7476 30-6187", "3579-8408 7916-8593 7879-9906 5563-7577 2291-3348", "2661-4962 4513-9179 2147-9544 994-9119 4821-6285", "1138-4412 631-8371 870-5799 4134-6544 194-8597", "38-2520 2097-5361 8476-9946 912-9383 2887-6755", "7684-9995 4076-5174 3383-7941 1870-5353 8490-8877", "277-9737 376-5553 621-1977 1191-1283 6574-8410", "7576-8974 8304-8890 2732-6390 3744-8557 3757-3851", "1589-7950 3072-7483 7567-7827 3048-9939 6254-7867", "4876-8493 3418-9364 376-8315 2866-8085 3896-9570", "7757-9660 232-2449 4547-9962 2959-5267 1105-3422", "8280-8647 144-3734 997-4782 3499-5732 259-6813", "8071-9958 588-905 5456-9310 7785-9770 687-8397", "2358-9999 4889-9550 157-660 1069-7808 9197-9367", "3102-3508 443-1402 81-600 8716-9599 234-8803", "7701-8715 2219-6523 129-381 5065-9355 180-7525", "559-9972 234-9444 3846-4049 3314-4673 3774-6790", "8841-9973 6120-7568 79-3972 141-9185 651-4149", "7573-9754 282-9979 1885-3327 804-9686 854-8530", "1854-8877 255-8677 2932-5315 208-3672 6591-9043", "9121-9414 3134-9661 1915-9826 971-5933 503-934", "4515-7708 1764-6003 3706-9839 830-9725 807-5429", "6001-9987 4416-5306 2146-2978 1826-5159 6841-9677", "4981-9301 818-9940 774-3825 3252-9945 3597-5600", "3199-5090 112-9521 3288-7266 2433-9304 196-7002", "3751-4394 7076-8926 3814-4348 802-8790 6877-6906", "5648-7331 497-8932 5976-7113 1938-6314 6907-7166", "2915-4235 5169-6733 276-6835 76-101 950-9337", "2772-7910 1171-9064 593-8175 76-132 606-2413", "3187-5845 131-668 3262-9543 7164-8455 230-9351", "5263-6842 264-2211 49-8442 1791-4074 314-722", "7174-9493 3990-7600 6464-9830 5685-9694 538-874", "9589-9984 4423-8634 5246-7823 7473-7625 9282-9534", "9563-9897 3765-8649 1078-9501 343-5230 471-9817", "3503-9871 6509-9084 466-8995 1965-7691 49-2758", "128-9679 7260-8974 4349-8073 6040-8510 1094-1726", "1900-8372 1368-6795 193-5024 4850-8604 4579-8015", "683-1373 108-2302 6594-7706 2576-4652 5946-9365", "5693-8192 592-9381 847-3066 463-8491 541-8771", "8187-8773 914-2904 1695-3576 885-7540 3275-9978"};
    int seats = 66;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 68;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> travel = {"5110-9314 911-4846 7488-8131 4013-6685 100-8736", "9224-9929 290-1357 4307-9828 1085-6853 2648-7869", "1816-9854 4459-6679 88-5036 9787-9844 5010-9956", "7407-9246 1678-2991 2477-3437 1732-7144 997-2613", "3731-8698 23-8148 4671-6751 301-5160 253-8280", "3473-4032 292-7782 5847-9784 15-832 934-937", "8421-9961 1663-6834 1193-9957 713-6416 2276-6170", "6431-6909 5068-8526 6534-8414 1737-3880 2037-5174", "8199-9806 1066-1883 352-8148 1885-3855 7968-9993", "8291-9772 1378-3507 2512-8521 4161-7836 4469-7917", "5773-7663 2973-9615 1169-2143 8-7552 5953-8723", "48-413 463-9925 1572-4048 2646-6731 1011-2356", "137-9828 465-9641 6115-6909 3094-7578 615-9890", "4338-9729 1877-9117 3443-3607 180-9458 5860-8536", "945-8573 4530-9806 1015-9914 1071-6575 3428-9831", "1361-7308 249-5890 1387-6477 4727-9513 369-3188", "477-8222 248-5160 240-302 5800-6406 4742-8225", "6190-8754 4159-9350 8832-9759 8748-9385 2745-6701", "7451-9011 741-4499 8691-9463 3358-4873 1440-6128", "152-1133 6641-7820 3390-8761 1344-9236 29-9603", "296-8430 9003-9984 702-5006 229-9153 7212-9634", "5762-9024 3676-5742 224-5743 1662-8660 1129-2786", "1075-9697 992-1485 946-8393 3070-6720 4298-7872", "704-8963 6126-8033 6019-7038 65-3327 209-9449", "98-625 332-4619 246-9215 2086-6404 5755-9611", "2557-8354 3063-8538 957-3011 324-5175 8641-9496", "2623-7995 971-9670 1501-4390 2901-5536 7833-9307", "1225-7553 6842-8238 6595-8958 351-3859 1553-9201", "139-9852 601-8916 7329-9242 5849-9911 1939-2851", "1682-5524 2585-4782 9400-9702 5331-6547 3576-8689", "1240-7273 3079-8509 2549-8863 591-4826 5029-6594", "230-1383 9085-9925 963-9434 5200-7549 1455-4146", "497-6735 2144-8794 838-2522 5-4551 809-2730", "6155-6833 2091-9995 3614-5813 471-1697 4177-7970", "6617-7643 2870-9154 4806-8760 3693-9128 5770-9587", "8246-9414 7307-7941 1653-3012 1452-9171 4233-8532", "4205-7084 673-2106 5610-9845 973-5182 3532-9049", "333-3796 7423-8781 167-1757 2321-8709 321-8842", "5949-7259 606-2109 2189-2723 2949-4918 1308-8465", "824-8763 6573-9408 4640-7475 1822-2688 1490-4858", "806-2030 633-1857 5991-6981 733-4620 3540-9467", "9340-9792 1499-1692 4747-9844 2647-7462 5034-9628", "662-9943 693-8862 3038-9405 9394-9771 4683-4982", "5619-9782 245-5558 202-5666 6298-8387 3520-8948", "142-331 387-2662 927-950 902-5720 1200-6240", "4585-9923 703-8574 77-1384 8267-9855 573-4723", "1873-2205 3383-9344 3224-8114 1264-3075 67-7980", "971-3189 568-8383 350-4919 1165-4031 377-8444", "8140-9293 894-8125 8186-9478 7653-8656 772-7751", "602-787 4133-9036 289-4898 98-5725 4068-9777"};
    int seats = 44;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 99;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> travel = {"7016-8070 3405-6690 1762-9269 3786-5951 102-2493", "4026-7645 150-2807 4006-8666 6119-8328 7853-9857", "6967-7296 4367-8520 349-2063 3380-9078 7463-7706", "713-2154 5374-6578 2-8974 2382-9125 5708-8009", "7962-8931 2649-8423 6654-9343 1166-5975 10-400", "1642-5567 4496-7728 2299-7092 1531-5289 7119-8023", "4024-4278 6838-8449 3620-9653 1499-7480 8934-9810", "1136-5271 1342-6227 2062-9978 1421-4254 1857-3615", "109-2536 7811-9961 4365-9746 1890-9908 1860-10000", "3565-9992 3087-5638 814-988 9073-9812 4558-6962", "405-8929 3163-8815 1799-9110 4401-9193 7088-9453", "19-3233 6446-7279 5619-8521 2131-6894 765-8051", "2466-7977 6286-8875 122-9962 345-4636 1203-9808", "8784-9919 1709-4548 3860-9749 1-4980 2496-4507", "868-9209 6130-8654 5919-9812 796-6557 5388-6592", "3772-7326 1659-2462 1550-9790 441-5432 452-9473", "3074-9133 1374-5083 2775-3544 195-5676 1821-3620", "138-8468 66-7994 5276-9206 516-1482 5857-6457", "301-6551 2696-3558 5802-7777 2772-3688 2153-3045", "7660-9557 3220-8079 5899-8337 261-6881 2188-7980", "106-8093 4391-9190 74-130 1118-7741 5011-8303", "5883-8991 97-8746 175-9708 2994-4506 2345-7725", "70-6875 9184-9512 8562-8595 251-5902 2119-8289", "4291-6416 8344-8760 1583-9863 2237-2364 4312-8074", "5753-6198 4477-5501 5868-9474 1975-9003 2622-3717", "241-9598 2353-7364 1725-8285 7787-9702 5891-6828", "2224-4390 6689-6946 2265-4494 2346-4001 7333-9105", "25-7223 6325-7486 863-6725 1346-4673 7258-9784", "8726-9861 4185-9462 8171-9827 5688-7194 242-680", "275-4830 1109-9155 1358-8725 7694-9732 1284-7496", "1051-7217 171-8519 257-2392 346-5359 776-2106", "8949-9557 1864-9305 3750-5131 367-8244 150-7904", "8754-9535 120-178 7918-8008 8995-9871 4179-4581", "2753-4021 2425-3638 485-7891 1749-3024 1033-5694", "1398-7305 8451-9933 5523-8693 1105-7889 1881-9816", "178-7204 553-8683 8837-9192 185-4401 366-9062", "698-2618 1949-8867 3073-4990 5614-9065 948-2790", "406-9386 3077-7383 5695-8828 3064-9359 3608-4306", "159-9275 8643-9144 1510-3773 8804-9317 2210-8290", "9010-9818 2059-9841 5311-7484 469-9826 3237-9555", "1132-2135 4629-5867 6451-9636 4148-5751 1507-7276", "4744-5496 8565-8605 3383-7923 3085-9613 2932-6848", "29-9827 723-8141 1958-3834 2813-4779 7056-9531", "2357-4527 93-2520 5135-7644 4863-9285 371-7778", "5989-6132 523-9605 3621-9870 8929-9620 1448-9961", "8724-9517 8436-8646 1287-9865 4988-7680 2091-8811", "7999-9765 541-4600 3417-6967 4170-8411 6013-9583", "525-5625 9593-9659 1075-9201 2430-3465 557-559", "8374-9939 4319-5886 3538-6406 2708-6608 172-4197", "4723-6950 205-4112 558-7286 1294-5086 913-7967"};
    int seats = 100;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> travel = {"5030-6812 6236-9888 2660-2758 2289-4296 409-8280", "3071-4255 1390-8163 7643-8781 7227-7816 4468-9052", "8189-9216 8333-9652 2178-5358 2568-9749 192-9934", "8684-9799 126-2325 4081-5269 426-3556 8218-9818", "2663-3893 9286-9788 1629-9314 843-2187 4805-8653", "9002-9251 7996-9207 1750-5366 341-5138 2225-3467", "4405-4615 2656-6546 7990-8184 2371-3534 6303-9445", "2853-4460 8392-8998 482-8157 2556-6242 6092-9081", "273-4283 1963-9935 8103-9051 1430-4003 5104-9948", "6036-7644 710-7089 1224-7874 663-8266 1498-5722", "327-6500 609-6179 1530-2381 5002-9604 1656-8223", "535-1420 312-3530 2138-7389 1093-3316 1797-5577", "4756-7900 3071-7944 1585-5202 6498-8008 1025-1144", "2293-4442 2706-3789 6750-7695 3211-6219 2028-2126", "544-3269 401-5822 394-7680 1730-7064 906-2927", "131-8908 3793-8345 5166-9947 191-3343 7204-9558", "3088-7955 6932-9550 6570-9709 8385-9323 932-1423", "1779-8790 7944-9908 1566-2204 5376-9444 6821-8789", "4608-8963 2532-9846 1152-1589 763-8012 1061-8892", "613-8395 80-3929 571-9852 1204-6859 2288-9769", "5876-8360 9706-9855 7074-9940 5411-7568 4094-8565", "4133-7954 2760-4658 2281-3633 8223-8367 4048-9561", "1053-4891 4491-9681 6065-7673 260-2780 4231-8820", "4528-9492 5061-5730 1173-9892 176-181 6860-9532", "9138-9906 2051-3030 2530-3064 757-2238 2038-6906", "4560-5834 93-1277 2352-6004 3750-9119 5741-9548", "169-1253 285-7036 4016-4894 547-1239 8665-8816", "4892-9686 216-8150 7421-9061 663-8875 291-4157", "9736-9944 2850-3796 6983-9842 295-2906 658-7487", "1005-9512 596-8793 353-8860 2791-5468 1413-7460", "1582-7520 6121-8698 107-1250 222-4123 9712-9727", "3997-8272 185-6985 283-2117 2068-3137 4979-5786", "444-2859 3234-9940 524-8188 8885-8890 1068-1944", "749-5577 6-2703 8417-8446 9319-9728 5746-8911", "758-3174 578-1374 7855-8580 1230-8196 1509-2846", "1036-3825 2036-9594 1309-9990 95-5353 1479-9441", "6528-9213 1919-6848 3605-9961 685-5149 295-5643", "994-5625 7737-9595 5467-9774 4156-6938 2083-7750", "56-1216 211-1679 886-2310 917-6973 4183-8855", "468-8711 9910-9984 527-4012 849-6383 234-3199", "783-9325 2055-3811 238-9377 4571-9568 27-8586", "2092-5918 54-1472 3697-4710 303-2843 726-9320", "2168-8289 341-3456 1518-5519 2321-2641 585-7441", "4738-6708 9748-9998 975-8448 1312-8374 7345-9990", "4584-5706 657-5748 3120-9981 4887-6162 3210-4471", "6533-8342 209-1623 7506-9422 8418-9654 1536-7959", "6767-7943 6055-7493 691-9963 1514-8357 7373-9342", "6060-8889 7270-9242 749-8233 2492-9249 8232-9680", "91-1758 3225-6795 7190-9168 2605-7718 5985-8550", "32-381 1837-3453 261-364 641-9914 1812-6078"};
    int seats = 108;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> travel = {"7433-9818 917-2138 1095-4798 1804-9583 36-2903", "4298-5375 1342-9915 1815-6843 8425-9527 3743-9631", "583-3805 4875-5835 297-8155 4570-6517 4635-8186", "2177-6310 358-8914 5631-6243 5607-9115 1703-7516", "6128-7199 4582-5623 4841-4907 433-3526 6890-8448", "9327-9969 4927-9899 7784-8432 104-7781 959-3547", "7516-8693 5600-5748 3114-8883 966-9533 476-1053", "496-3271 582-3190 7723-9816 525-7382 2731-8518", "117-9533 625-5659 3747-9296 2007-2045 5575-6270", "1232-5089 6622-9034 5597-9850 790-5128 8892-9256", "1190-9800 6026-6144 833-9496 973-2762 4182-4234", "4269-7922 101-945 3385-7247 1725-7833 1015-7697", "2754-6794 863-5146 2077-4235 6537-9298 4663-6658", "362-8128 5530-8944 274-6958 2425-7248 7-5889", "18-8268 4627-6351 3673-6224 3449-6420 443-7023", "8271-8600 2578-6351 1194-8012 1181-8999 198-6891", "484-9477 4009-9777 111-1792 5477-5914 1410-2163", "1353-9639 180-4337 1822-3446 4427-8238 903-8492", "2380-7668 5776-6654 1115-7226 4585-8140 862-4633", "2974-6238 4679-7549 1951-3206 1397-9487 3765-8554", "2886-9726 376-6478 1279-7973 4086-5250 705-1829", "5127-9620 572-620 9278-9695 5551-8131 4534-7254", "165-2026 21-3863 4812-5415 7504-8431 3770-4366", "5901-7106 942-4612 919-7572 2604-3704 458-3473", "179-9643 1236-9869 368-3672 7366-7369 1137-9509", "372-2159 1126-6742 2966-3013 1538-7072 543-2843", "895-4662 62-9881 1157-9458 2114-8773 397-4245", "4837-8957 237-5620 5871-7404 8150-9163 5871-9901", "136-1263 1826-9707 1760-5537 1059-9954 8493-8861", "444-4821 4744-8570 312-8875 3724-8656 4363-6617", "500-555 237-3309 3390-7225 3111-8825 458-9724", "7200-7908 315-8219 2227-6522 9268-9991 1860-6822", "1315-9911 3010-7525 8155-9525 9603-9833 2855-9667", "320-3379 311-3391 3507-6816 99-5151 1676-9348", "1480-4700 8-3421 3114-8860 1798-3450 3827-3991", "5445-9649 260-9936 8996-9336 3044-4282 7951-8845", "518-5316 599-9573 1492-3688 819-7185 8098-9194", "3009-7288 149-442 4318-8081 23-2899 2746-9717", "2817-8259 8635-9772 287-6298 752-2830 5456-6350", "9959-9963 9251-9835 127-4023 3834-3836 864-9658", "4535-8032 89-7710 19-6203 1657-9665 8264-9247", "8304-9071 2979-2986 5324-9273 1487-6336 2340-9991", "676-9862 6635-9903 1042-5027 835-3636 1004-3731", "1185-5035 6891-9970 153-9844 905-9264 2548-3285", "6070-8427 272-9972 5730-6435 4518-5913 1569-2523", "371-3197 1355-3556 7344-9335 292-6551 3789-4513", "3782-5818 698-3564 402-9759 383-7810 1175-7782", "1188-8600 8702-9316 408-8185 549-8714 5429-9140", "3978-8020 4285-9752 9089-9750 8232-9816 342-9209", "2190-7898 1036-3633 3807-7793 2702-4646 304-1753"};
    int seats = 123;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> travel = {"1664-7570 2201-9780 6418-9998 355-5173 2206-5190", "1225-7859 4879-9390 5592-9068 2323-9101 883-9222", "9691-9855 706-4175 21-466 1736-2233 1873-3330", "1695-8383 1414-6307 1928-8983 3210-4108 3036-7931", "2040-6594 1337-4071 1127-6756 4983-5782 1398-2143", "436-1358 4735-5456 6493-8390 33-4543 2941-4629", "2879-5671 693-9908 2174-6178 968-7855 137-9527", "2990-8292 2677-9873 2604-9994 1640-6527 8683-9753", "4592-7183 261-8157 9672-9806 6228-9991 2720-6063", "356-1682 1692-2792 4140-8318 265-9869 6291-9063", "2105-2713 685-9010 237-8058 3708-7301 6948-8272", "15-1593 171-7099 380-4298 612-3589 593-8579", "2484-5494 955-8075 99-4259 695-1868 6956-9440", "631-8619 4551-9550 8492-9321 1287-8116 2444-4765", "4407-9123 3945-6110 19-8368 3897-7470 71-653", "115-4545 6968-8063 2586-7345 1514-2343 1-6453", "8342-9231 877-5383 4656-5112 2972-4002 61-182", "3307-7396 1221-2583 1730-8920 1309-9147 1197-8559", "2559-3735 7621-7908 6507-7374 886-1960 8841-8929", "4661-9560 649-9950 4063-8286 22-4751 4353-7783", "9231-9360 835-1241 1848-5343 651-2104 4254-4474", "572-4818 1786-2719 645-5647 5187-9361 3366-9146", "5913-8739 239-602 344-6839 623-9793 2577-9591", "517-8374 5174-9110 2106-9720 1238-7339 481-8881", "3365-6600 609-1167 866-3638 2059-9897 80-7599", "1379-9665 909-1578 2353-3704 2970-6123 156-786", "1578-9897 1712-9212 6730-9020 2172-5842 622-4955", "196-3916 1047-7332 751-9994 171-7470 725-3576", "602-3328 3104-7790 4287-9689 3772-8435 182-458", "153-1171 40-9806 5052-8998 1089-4655 742-9305", "6630-7303 19-1204 3017-4069 2137-4025 358-6312", "818-2458 1901-9116 646-3085 1269-3707 337-8783", "686-2208 207-7576 6577-7032 275-7553 314-629", "7375-9220 2260-9107 627-2037 115-8411 136-7333", "2911-4755 6324-7420 1034-9666 8147-9587 7800-8949", "7353-7852 2226-9215 6481-7265 3430-8679 8260-9440", "1804-6470 5701-8924 2470-7604 3391-8512 3377-8921", "621-6358 5042-5332 5003-9622 8211-9439 7733-9904", "24-3743 34-1234 9836-9898 1381-1901 1558-5419", "7287-9874 3293-9259 5909-6245 386-9711 536-7204", "962-9356 1306-5934 3412-8268 4457-9745 4681-9819", "3894-7827 34-372 8071-8127 7395-7629 6826-8737", "3244-6989 255-9946 1710-9981 4955-9427 931-9021", "5628-6015 3355-5158 4287-9019 240-8334 3286-6392", "3208-9754 2540-3218 8271-9353 2786-4723 603-6725", "6452-9958 3007-8789 2269-7219 1116-3288 2343-9984", "1122-2625 1768-9733 917-5515 9572-9580 4373-9769", "8341-8712 2862-7911 2717-9968 651-1685 276-5649", "963-6957 2506-3898 1402-8412 648-9461 1982-8263", "2715-8775 2136-8053 4158-4735 362-3338 2130-3988"};
    int seats = 131;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> travel = {"5476-8469 823-845 481-925 8164-9867 6350-7609", "1909-2024 302-430 765-2809 601-1621 9255-9571", "3181-8336 129-1104 6329-8684 6501-9453 6354-9675", "2116-4572 2795-5556 391-3527 2568-5482 1471-9884", "9486-9639 39-4217 1187-1348 1187-7301 893-3813", "2968-5439 4552-7741 1210-1940 93-783 9076-9880", "2858-6624 9299-9864 439-2647 258-8169 5775-7127", "4967-9900 2392-7769 5176-8914 1043-2303 1200-9618", "824-5891 1428-8291 1569-5506 6469-9566 7871-8115", "116-3393 1984-3188 2227-8955 491-1544 743-3726", "221-8906 617-3398 3767-5940 4301-9496 7490-9113", "3930-5809 7290-9483 35-9310 2270-3350 4-2197", "128-2569 5667-6638 5751-9263 6219-8468 5471-9944", "5505-9969 7798-8974 158-9616 4056-4665 586-8943", "154-8146 2399-9138 289-8596 1170-8602 8174-8483", "6338-7982 2323-9914 1151-8284 2263-5236 3-9801", "322-3846 8385-8860 638-9038 7820-9481 61-9996", "244-9490 369-7366 570-7347 2760-9465 268-5515", "652-9240 277-8027 3585-8816 5678-7732 79-6340", "4294-5957 8273-9726 54-592 21-1579 1089-2001", "245-1879 2550-4303 3948-9738 114-9693 3592-6250", "1521-8069 9836-9939 4848-5701 6322-6376 3775-7800", "703-3282 6303-9767 9792-9856 5092-9400 3408-6544", "851-1177 729-9359 3462-9329 6841-9296 460-3589", "4691-7336 1775-9732 6921-8264 2087-9703 6777-8788", "5975-8696 6805-9225 7241-8232 2891-7781 5167-6230", "1506-9761 2375-6161 4020-7591 1705-8762 6449-8127", "1020-1974 2532-6139 2940-3876 4728-7397 5742-9655", "1227-9382 6986-7596 6951-9395 2850-6206 558-5827", "465-826 1378-9664 410-9260 5955-9403 323-1475", "8910-9757 1186-2136 11-9104 7686-9862 980-9389", "380-692 298-9723 2654-4840 9824-9966 6277-9840", "4479-5315 1850-9653 8722-9842 1921-4550 24-9930", "1333-4538 467-5276 48-3317 8440-9450 4001-9560", "7664-9809 913-9510 3926-9865 5049-9046 829-6678", "7889-8719 49-1086 3283-6488 1091-7932 1481-9779", "2670-6871 4121-9804 10-7135 685-3939 9516-9863", "2234-9583 497-8266 2275-9206 138-6433 2249-6595", "1350-9523 756-810 702-7666 8875-9974 7009-9294", "225-2390 4352-6444 653-9861 8051-8652 23-1934", "4627-6155 134-580 1540-7333 1682-3016 310-9476", "1220-9873 1072-6529 3551-9034 2047-7190 4239-7376", "910-2516 2304-6583 992-7835 33-889 8624-9779", "221-7365 8035-9528 2361-4181 4024-4519 5130-7636", "433-2500 208-2145 2275-9991 187-452 872-4527", "857-4996 186-586 6198-9877 87-271 5448-9541", "7586-8489 3524-9829 5431-9902 147-1577 833-5282", "1894-2684 10-7311 1173-5890 685-7149 4919-5641", "3678-6869 8197-8986 2270-9100 9088-9184 321-6810", "4391-8429 3561-4230 1153-1858 2798-9999 1996-4596"};
    int seats = 112;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> travel = {"660-9786 4237-6398 5023-7390 5717-5970 1869-1971", "2765-7591 881-7367 619-5423 662-5011 118-322", "1025-7317 7856-9131 356-1036 26-6152 1008-4491", "5916-6084 134-1734 319-6230 18-1373 112-9329", "22-7725 2019-8038 355-5895 1233-5569 971-4231", "1613-9504 3786-9355 4351-9559 717-9187 6861-9123", "7875-8477 3486-6977 5467-8484 1553-1614 3798-9517", "64-3532 704-8859 505-1385 258-2297 3838-9277", "364-9305 5140-9224 102-9212 8452-9825 421-9645", "1415-6444 8440-9775 168-4160 1636-9928 1182-5951", "4776-8156 6106-9848 4797-9723 9037-9894 961-3327", "6210-6364 8310-8468 1368-5004 3564-5052 3896-8184", "705-2800 5-4608 215-9783 3872-6023 5607-7123", "1867-5606 1823-7882 22-6078 77-4586 3419-6911", "1179-3078 7810-9693 826-9622 9464-9840 8659-9609", "8378-9098 1504-9953 2373-5547 9326-9482 1098-7230", "1144-7738 6400-8776 422-515 1106-4363 3026-5735", "2648-3899 767-1888 4294-8073 1635-3995 3488-3510", "2592-8096 6347-8082 5419-5797 2766-3511 7869-9711", "620-878 4815-6072 2692-2915 147-1713 4950-6271", "7237-9980 3247-9554 1388-5643 7124-8855 3889-5056", "3188-4757 3101-3639 425-7663 7328-9793 2974-4353", "769-9329 2349-8941 8570-9857 2762-4810 9754-9766", "85-8334 3637-9193 2507-9812 3849-8918 127-5111", "1745-6378 1579-9940 928-6866 7160-9460 121-8501", "735-2535 1107-3371 1607-9632 4065-5792 2600-4065", "673-8430 272-8053 1826-2744 4602-9920 1452-9977", "6385-9969 369-6617 1569-9517 5993-9708 4482-9402", "4640-9903 5617-8671 7124-8310 2471-7937 1052-4795", "7390-9389 131-9836 54-9136 8952-9951 6460-8953", "3676-8279 8184-9987 1304-5598 1602-4118 2530-9003", "368-3321 300-352 4567-9162 2352-8849 7874-9599", "473-1874 3401-9223 6003-6999 4282-9406 1397-4096", "112-9237 3450-5001 704-6808 60-9830 9256-9357", "8711-9037 5756-9389 4702-7226 30-9525 76-8941", "2494-4977 7109-9969 8864-9785 49-9374 3762-6537", "1356-7697 1297-9133 5025-8612 1329-4492 1909-5186", "5129-6037 1770-9950 3453-4926 5025-8856 8699-9882", "103-696 618-9417 626-9265 1462-8955 7360-9418", "929-3684 6743-10000 3361-9514 1706-3969 2050-4148", "4868-8174 125-2559 581-2136 609-9736 160-9353", "88-2287 822-2085 1347-2669 3137-8458 1603-9401", "80-9668 886-1227 4838-9611 2194-9461 1025-8238", "2433-6792 287-3129 8971-9858 624-6173 589-1664", "1181-3431 183-9063 8020-9835 5947-8327 1157-4044", "5566-9866 160-8798 5743-6548 3606-9343 115-1204", "8315-8983 7473-9942 1002-2462 492-3629 4831-7764", "1990-9493 2191-7068 1188-2284 66-5182 1637-8700", "699-8666 73-5294 1598-7099 2522-2835 8621-8876", "5607-8216 1270-8268 4672-9994 1081-6601 535-3600"};
    int seats = 120;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> travel = {"5503-6491 8500-9931 2641-7782 2484-9064 4726-9365", "3212-9159 5319-6419 8964-9772 7239-9028 1224-2662", "2412-6864 8600-9747 6087-7886 9426-9832 9590-9999", "8521-9969 4742-8794 1371-9506 8128-9152 5371-8355", "9573-9623 6133-6579 1257-5806 7425-8213 8993-9617", "6797-7904 8407-9487 7054-8830 8241-9243 8334-8778", "3953-5812 3580-9001 5565-8197 3134-4913 5693-9350", "8248-9697 2436-8157 8216-8671 6404-9844 7696-9934", "2288-8880 7960-8142 5874-7820 7191-9529 5661-9148", "7841-9727 6000-8675 8050-8439 8484-9702 6140-9980", "8157-9393 5632-9900 2375-7572 2272-9060 8103-9163", "9711-9957 8170-9866 7774-8609 5572-8689 8344-8606", "7791-9611 8076-9907 4249-4983 9322-9331 5984-8040", "4373-4622 3498-8326 6836-9297 9788-9965 9489-9796", "3900-9406 8152-9982 4555-9536 8229-8267 9458-9909", "4243-8441 3668-7069 7116-8649 7164-7728 9827-9844", "9143-9951 5896-9245 6632-7724 4515-8165 3488-7870", "6274-8095 9355-9907 6551-7913 7934-8626 6221-6838", "4344-9516 5348-7264 7699-7891 604-9291 6982-8245", "3628-8055 7173-8019 8822-9806 3989-6048 3071-5574", "6438-7577 5268-7991 6850-8705 5880-9948 3956-8820", "6475-8978 4961-9891 8423-9279 5139-8948 6993-7475", "3814-9902 7303-9908 5295-9340 9561-9781 4857-8264", "6099-9626 5002-5808 7380-9241 9294-9686 5073-8373", "2485-9573 8118-9496 5989-9374 8588-9076 2262-9971", "6185-9564 8611-9589 7785-9296 3079-9952 8676-9233", "7393-8477 8569-8814 5775-7396 160-7034 3034-3111", "9718-9836 1841-4056 3351-7253 5217-9620 6639-7884", "9407-9448 7178-7851 6598-7852 8405-9913 8746-9724", "7960-8638 8172-9736 4655-9808 8580-9158 9371-9818", "6542-7859 8023-8305 3885-4969 7757-9772 2569-5917", "3178-6463 3090-9839 6490-7288 8520-9973 7157-9906", "8218-8842 7864-8255 8377-9793 984-9601 9337-9856", "8466-8822 5303-8970 5936-7258 3927-9008 7489-7804", "2649-8887 4223-8235 8111-9912 8703-9657 4672-9186", "7446-8220 9781-9792 3091-7793 6125-6175 3185-6436", "3256-9975 8448-9914 7756-8149 2889-4773 6969-8530", "8777-8965 8240-8850 4788-7331 9320-9756 8150-9718", "8631-9387 7910-9050 7109-8186 6364-9296 6851-6876", "4909-8696 6749-9429 7840-9788 4108-9772 4526-9996", "7267-8326 5994-8231 3607-8938 6111-7449 8804-8984", "3666-7664 5692-9521 7861-9716 5601-7089 7892-8556", "6427-7817 4681-9345 8454-9866 6946-9506 5415-9543", "7854-9830 4915-9878 6237-7618 5129-7799 3724-8103", "6701-7416 3247-5919 7137-9754 8988-9897 8602-9757", "6938-9337 8448-9707 6305-7916 4648-9833 5517-6762", "4361-6428 9495-9730 8339-9882 8097-8790 2340-8283", "5605-9206 4145-7271 8188-9220 5901-9885 9676-9939", "4434-9484 7620-9514 5872-9760 9336-9543 4687-9215", "8381-8497 1436-9630 3650-8513 7691-8586 3649-7263"};
    int seats = 82;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> travel = {"7003-9280 6653-9564 5938-9919 8881-9998 5945-9427", "7355-9409 9189-9459 4514-9038 8579-9253 9178-9500", "5226-9762 8894-9929 7780-7849 7073-9386 2289-7169", "9808-9940 3492-9668 8849-9902 8233-9886 5402-9339", "2854-8376 8273-8889 8740-9724 8221-9919 2512-8850", "7316-8019 7101-8005 7626-9953 7991-9798 9354-9800", "5338-6183 3784-9292 2518-9167 8054-8547 3609-9306", "7100-7802 8987-9995 6630-8949 9248-9503 6178-9013", "4184-6458 7585-8153 8586-8750 6495-9264 4753-8106", "5490-9754 7785-9741 6355-8852 2879-9426 4762-8191", "9278-9682 1829-4289 5114-6673 8448-9910 7816-9842", "7240-8849 4240-7548 8007-9064 7454-8493 3290-4717", "7823-9146 6974-9958 7709-8658 7658-8128 5121-7011", "8119-8799 5521-8265 7834-9474 6579-8874 6995-9129", "6106-9983 5618-7293 3994-8398 9678-9708 5142-9561", "2733-5173 3727-7688 710-6727 7175-9763 9559-9736", "5966-9871 6491-7930 4829-5137 7860-8007 9305-9756", "7417-9026 6649-9557 8998-9836 9827-10000 2430-7410", "4931-6437 5771-9781 9433-9640 5758-8564 3340-9147", "9397-9995 4516-7033 6734-9954 8246-9938 6770-7983", "1351-3885 9790-9863 5330-6245 7404-7855 4005-7973", "6616-8832 5211-8322 3240-9160 9822-9828 1594-8680", "6644-9910 4302-8496 6920-8090 2783-7340 8705-9969", "980-8595 7098-9794 2122-8963 8214-9406 8170-9609", "3193-5398 4593-9402 3684-8955 6118-8082 8428-9716", "1009-9897 7957-9927 9126-9685 7128-8451 7035-9045", "5540-9912 636-9189 9324-9351 6034-9482 4173-9860", "9024-9857 7576-9030 8346-9279 7170-9253 2365-9456", "9704-9770 314-9858 2735-7137 3910-7912 3199-9369", "5576-7896 5326-8990 4065-9917 5797-6836 7373-9243", "7020-9192 8709-9899 8895-9890 6047-7276 8613-9200", "5596-6096 8535-9707 8291-9463 8250-9160 7902-9596", "8097-9606 5606-9743 6423-7214 6491-9299 8325-9660", "5149-8323 7856-9264 3287-5937 591-1551 9597-9944", "9855-9943 7892-9376 9790-9869 5411-8860 6273-8901", "4481-9456 8616-9521 7745-8585 9183-9745 4114-8723", "9283-9698 7221-9135 5799-7603 5153-7976 4103-8475", "5647-9317 3846-9786 9815-9929 9222-9832 6367-8819", "9761-9802 8858-9930 8195-8865 7715-9132 2140-8147", "7079-9432 7858-9728 8167-9891 4671-9922 4663-9611", "5221-9812 5915-6184 4067-7572 6251-9958 9665-9861", "7558-9070 3943-9839 5727-9998 9757-9863 2170-7945", "4582-8867 7248-9674 8447-9874 7862-9673 5928-8321", "8247-9666 7047-9850 8574-9743 6726-6735 9406-9754", "5266-9450 4898-8734 6402-9933 5483-8981 8726-9552", "9013-9330 9954-9967 3917-9096 6090-9161 5723-6644", "8949-9759 5739-6035 7057-8758 2209-9808 6458-9962", "2473-6874 7963-8784 5802-9756 8292-9331 7131-7974", "8542-10000 7067-9604 5646-9996 976-8178 9295-9791", "7008-7517 9449-9503 8523-9036 9333-9564 9253-9980"};
    int seats = 131;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> travel = {"7869-7946 2033-7180 5453-9389 5314-8547 5064-9320", "9314-9487 5667-8684 7477-9040 6173-9838 9800-9912", "7133-9991 2985-5424 3613-9749 3923-6733 6290-8646", "9019-9863 5601-7087 3936-9759 8512-9899 4372-6466", "9320-9995 2907-8882 7756-9262 4535-9181 1902-7899", "7307-7354 8157-8465 9865-9970 5936-8442 1435-4124", "2634-8655 4716-7377 7565-8651 5055-9011 9158-9973", "5474-6789 2368-8704 2591-9376 3151-3305 4391-8720", "8043-9910 8061-9272 4757-7760 4590-9840 8459-8930", "1896-2421 7317-7728 9261-9280 3017-5645 6536-9960", "8280-9789 8457-9576 5323-9352 9403-9808 9240-9378", "3114-8716 9091-9915 2032-9378 9894-9955 6998-9993", "8331-8684 4996-8528 7285-9592 4522-6687 2681-3104", "5764-6425 9849-9876 6410-9180 8657-9677 7154-8769", "6168-8555 3108-6076 3053-7408 5597-9582 7585-9474", "6746-9331 7072-9796 6429-9817 4997-8671 9159-9652", "8842-9627 9000-9869 6221-6987 7512-8235 7149-7667", "2840-7014 5937-7230 8447-9767 4751-9055 5080-7258", "6145-7991 4649-8828 5851-8982 7879-9421 9544-9845", "6729-9806 7071-7263 6975-8048 6001-9580 4045-7188", "4380-7915 3057-6908 8813-9034 8077-9450 6506-9681", "9383-9995 9066-9590 8883-9663 7277-8609 6431-7157", "7519-9860 1695-4646 4986-8939 8302-8491 6315-9953", "4828-7839 3927-6709 7228-8699 5640-9936 7359-9658", "5285-7506 7285-8867 9462-9612 7979-9774 3460-9793", "8345-9946 9850-9886 5477-9356 7605-9861 6793-9502", "9388-9552 9409-9426 8532-9733 6358-9879 6647-7465", "132-8125 4797-9706 3458-8405 9342-9554 9361-9885", "8549-9913 3309-4137 5904-9905 7078-7082 8487-9645", "6289-9472 7813-9800 7505-9809 5124-8643 938-4676", "7723-9152 4256-8902 8030-9382 8581-9386 8238-9936", "7202-7812 2356-5043 3822-9525 2432-9876 7868-9952", "8430-10000 7553-9833 4514-8830 8386-8756 3826-9391", "5838-9165 1920-9825 7312-7696 5089-9563 7777-9954", "6045-9121 7147-9784 8239-8683 7178-8826 3977-9571", "4387-9601 7778-9970 7881-9698 9149-9765 8296-9418", "2260-9052 1057-9527 9301-9872 9396-9930 9255-9691", "3726-4020 8963-9331 4181-7045 3458-9553 5403-9449", "1304-9813 8178-8816 9017-9970 8591-9621 7738-8886", "8336-8701 4799-7791 6285-9208 2658-9564 8350-9781", "5801-9511 1574-9407 8833-9987 5018-8942 3221-9840", "7223-9981 436-3483 4326-6259 9838-9940 7857-9450", "3184-9966 5642-7122 6716-9306 3592-7583 2294-9663", "9888-9986 4715-8624 3959-4883 8824-9849 8821-9821", "5096-9849 8845-9349 7291-9900 3684-8651 8118-9883", "6890-9303 6639-9554 8508-9670 6604-9375 8093-9366", "4031-7697 4849-6991 9174-9401 1217-7100 2527-8663", "7116-7684 3655-7282 7244-7978 6779-8758 9746-9843", "1090-4139 9199-9219 4511-6992 8889-9284 7635-9656", "9490-9653 8915-9451 8551-8922 3372-6021 5399-7394"};
    int seats = 67;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 67;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> travel = {"4130-7265 5429-8995 6941-9281 590-9371 6074-8804", "5499-9528 7806-8347 8716-8985 5617-9053 5499-9821", "4215-6875 4312-4976 9703-9864 3376-8654 6390-9171", "1453-6126 6036-9317 7692-9998 8706-8729 9450-9999", "6588-9202 7015-9939 9177-9484 6702-9239 6651-9887", "4703-7821 7585-9639 1481-7057 1102-9314 6545-9445", "6832-8539 9963-9970 4961-7784 4206-9167 5204-7805", "4068-5225 2315-9547 7448-9000 9647-9784 4998-9422", "2733-7303 9181-9745 3551-5741 7401-9945 4490-9823", "9118-9187 9867-9977 6309-8302 6657-9943 7636-9085", "7839-9343 9396-9908 3726-4791 4954-9115 8466-9558", "6768-8071 7239-8860 6083-7028 8353-8744 8579-9053", "1729-9818 7055-9870 4030-5526 6176-8342 7647-8955", "8904-8928 2926-9140 8437-8559 2459-8521 8072-9548", "9142-9340 8296-9532 7517-9953 1764-9947 5231-9090", "9849-9928 4035-4779 8466-9508 7730-9404 7278-7837", "6558-9978 7543-9798 4063-8336 7799-8161 9662-9897", "5594-8956 4697-9672 7076-7114 1615-9934 9848-9993", "6075-8472 4808-9167 7834-7991 6812-7202 6347-8651", "6947-7615 3123-4191 7284-9244 2889-5561 3330-9199", "5850-9120 8272-9919 6700-8531 9174-9553 6654-8365", "1980-2205 5871-8455 7754-9379 7374-9861 6841-9975", "3068-9011 9491-9968 5848-8196 8186-8347 6526-9229", "9274-9675 4736-9516 1352-9519 8105-8697 2513-9451", "8589-9006 8628-9376 8380-8971 4526-7232 5834-5916", "3966-7063 5984-8450 5462-9868 6185-9846 7298-9427", "9018-9533 6556-7506 5856-9821 4729-9884 1848-6213", "2861-9793 2413-9377 6661-8103 8653-9910 5171-9200", "4699-5842 4536-7827 6045-8137 7349-7686 7157-8640", "5588-9388 5402-7796 8233-8539 1779-6261 9377-9484", "7803-9950 3178-9891 6945-8775 5265-8188 4536-8739", "2221-7385 5998-8234 6092-9525 2920-8607 2940-8000", "9310-9485 6521-8213 4392-6130 1225-9593 8788-9970", "5498-9555 6732-8047 5140-6117 5815-7848 7025-10000", "3718-9975 9379-9448 7090-9820 9359-9645 6279-9137", "9414-9948 2160-3574 7057-8001 4969-9587 9519-9817", "6150-10000 4646-9953 6516-8469 9793-9932 928-5850", "5349-7184 4875-8587 6654-9269 8255-8377 7457-9534", "6098-6275 8375-8964 9951-9957 8721-9253 2412-8879", "5935-6566 7932-9897 4849-9800 7843-9133 6793-7240", "9343-9912 6834-7679 5288-8150 6157-9202 3548-6214", "3599-8147 9052-9914 7892-9994 6891-9758 5356-8224", "7375-9414 4878-9836 9084-9759 4538-7073 5038-9730", "2426-9909 6535-9724 8550-9180 4366-7437 9383-9711", "5750-7992 8170-9930 5576-7506 4543-8079 6270-9110", "7708-8914 2405-8894 7454-9949 2652-9072 2860-3637", "8607-8912 7172-8610 4957-9058 6719-7644 7103-9086", "5896-8198 5225-9982 3180-4526 8566-8935 8700-9670", "9385-9747 8027-8344 6178-7110 8050-8464 5345-7059", "8959-9266 6089-9209 7740-9712 3472-4103 2737-5230"};
    int seats = 96;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 40;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> travel = {"8759-9560 9777-9913 7236-9628 4527-9886 7933-9920", "4986-9294 4412-6023 5560-6070 9016-9392 741-7355", "3543-4889 5491-9688 9699-9849 8067-9915 8376-8891", "2850-6627 5831-9332 2295-8938 5204-8090 9468-9774", "7933-9999 5496-7130 6482-9569 7263-9680 9391-9968", "5158-8575 6243-8953 8084-8557 3470-4921 6713-8496", "3958-6571 8328-9581 9839-9863 5315-7823 9169-9917", "4865-9954 4350-9298 5965-8829 7256-9792 5272-8381", "5503-9960 9294-9999 9618-9988 7802-8878 3542-8060", "6903-9149 5594-8557 7268-8843 233-9520 7730-9961", "2276-3429 6581-8336 4096-5518 2029-5502 4733-9317", "2067-4080 2985-9726 5528-9625 8377-9280 2779-4946", "4426-8867 9032-9718 7736-9556 7318-9761 9256-9903", "6575-9296 702-8306 7051-9796 9721-9970 2197-5563", "9156-9236 3744-6785 9920-9961 7407-8822 7740-9725", "9887-9945 4712-8959 7535-9328 6357-8887 6909-9042", "5724-9881 8548-9898 5929-9273 7616-8459 5395-8946", "3930-6086 4533-5355 8638-9218 5390-5822 8242-8731", "4462-9586 2601-4319 8547-9488 4475-8593 7381-9557", "2501-5828 9926-9939 8053-9923 5380-5401 7975-8497", "7504-9836 4949-9398 4627-7757 5746-9396 1603-9672", "2712-9635 9308-9690 5078-8931 6439-8891 7793-9157", "4570-9884 6004-7881 8391-9957 7150-9553 5618-7747", "3826-9599 2235-9751 6163-9740 4984-7251 6318-7423", "4105-6765 1537-9342 6315-9973 7308-8556 5474-9311", "9251-9321 1959-5108 8701-9185 2153-7732 4325-9799", "5964-8880 4330-8934 7366-9403 7097-9059 694-9623", "3053-4556 8576-8777 8416-9122 9348-9385 5159-9311", "6520-7035 7510-8076 4694-9532 3938-9880 5653-7010", "4009-5723 6838-9423 3151-4765 9272-9866 9526-9971", "7994-8003 7388-9744 9217-9941 8506-9752 8040-9225", "7464-9854 7568-8528 7412-9920 9114-9509 7333-8686", "9203-9820 3398-5824 8350-8423 8515-9960 9078-9638", "2670-7374 6909-9679 8133-9185 4255-7140 5148-9423", "9650-9943 901-9584 5533-6967 9635-9783 6190-9778", "5586-8863 8864-9037 7050-9665 8226-9196 9375-9927", "4034-8978 4582-9376 4612-9692 8136-9376 8350-9670", "7025-8309 6784-9599 4874-7514 8793-9847 9630-9890", "7127-9759 5070-9748 5427-8976 3014-7528 8647-9411", "4442-9431 2931-7028 4401-6014 3364-8592 8309-8986", "7064-8315 9603-9758 5988-9860 3094-6428 4879-9911", "6884-7804 7942-9670 6439-9390 9126-9392 9571-9972", "6524-7049 7282-9517 7686-8083 6983-9535 8689-9855", "8404-9655 9883-9893 8206-9588 6855-9961 7187-9083", "6485-9079 3777-9278 3272-5796 8007-9957 2687-9190", "6836-9937 5973-6165 4525-8574 9388-9572 7186-8791", "9464-9891 3574-6368 3453-9667 6862-9094 1774-9300", "6506-7100 5988-8384 7677-8341 2696-4471 8577-8777", "6935-9934 2909-8157 8673-9285 5990-9574 5361-8838", "6049-8304 5363-8585 5975-9671 9305-9940 6453-9510"};
    int seats = 78;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 57;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> travel = {"319-7941 4131-5424 48-3047 507-3492 5235-5719", "525-5957 1096-3064 1187-3070 31-4569 1611-3166", "996-7173 2-1450 5539-5915 344-612 357-2530", "110-2605 12-5252 251-904 87-212 2634-5159", "56-2391 33-1237 2523-3150 179-3477 1000-5953", "945-1183 201-1756 442-7109 1631-6620 955-3639", "2510-4103 2526-4445 126-6679 3533-8479 2133-6222", "341-2764 2820-3541 1878-8944 2115-4027 948-1231", "329-2822 4-7083 238-3302 64-4721 3511-6065", "5997-6960 2416-6735 3825-7392 20-1579 282-1113", "2068-3007 1255-3540 1610-2599 339-4832 241-3981", "2122-2322 1741-4222 646-2475 530-1903 531-2374", "1205-6425 4057-5201 615-2079 133-662 347-3541", "1398-3652 3683-6989 3345-4964 275-4863 372-711", "5882-7606 669-2284 561-1853 1333-7920 1727-7389", "1273-5392 396-1647 306-2698 244-592 4051-4373", "1361-5422 1701-2853 469-5212 2159-4073 333-692", "1050-1998 1742-2894 83-8882 110-1707 1194-2056", "61-7513 2291-4663 286-2470 78-5623 4061-6493", "262-576 296-7363 988-5660 474-8807 54-1163", "642-3241 2473-2493 515-1370 618-910 15-548", "1961-2150 2498-3588 1493-3267 476-2623 96-3515", "5360-6722 2400-5113 2759-6577 264-6959 2818-3223", "851-6080 147-4236 1733-2573 2605-4977 1207-1990", "850-5018 1305-6823 162-2246 3-2794 192-801 1-16", "232-424 1186-3390 5206-7100 928-1340 759-3973", "1589-8393 1463-2315 392-2565 607-1761 182-1795", "94-2993 717-893 19-1218 2397-6101 278-1503", "890-2214 160-4157 870-4422 981-1594 731-2079", "224-5087 3254-3910 48-1587 567-3624 241-2877", "29-810 293-3511 200-2710 730-2918 73-4313", "1085-8096 1618-5452 156-567 625-3606 2284-5099", "449-2340 5882-7559 740-5673 2700-2861 869-1363", "17-5705 101-2742 278-7630 230-1012 4665-7028", "3910-4364 660-739 690-4952 1183-4051 706-2140", "1351-3427 152-6930 3531-3822 2986-3461 732-3635", "1429-3466 208-8643 705-2354 86-1085 370-449", "570-2723 409-435 2281-3451 1291-3002 189-1234", "1477-1586 266-3615 658-1957 268-2155 223-619", "280-4465 755-1242 78-5274 3454-3834 238-6472", "4919-5585 514-4056 3021-5298 3746-4385 1917-7819", "137-1051 2872-6105 1079-4620 443-1716 1272-8507", "2134-4457 2179-2375 2015-8083 44-4404 2319-2423", "590-998 518-5278 1516-3589 1313-1399 600-1579", "288-7516 679-2108 1604-1745 223-1537 876-889", "2210-5888 30-5174 1591-2380 82-1736 161-2749", "738-1030 2094-4962 1371-1657 747-3101 854-988", "326-2541 533-786 320-1560 2772-3128 48-281", "496-1746 156-1547 732-1656 804-2027 1429-6400", "565-1276 221-6089 365-5395 21-657 925-3970"};
    int seats = 136;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> travel = {"34-3263 51-764 509-2216 1387-8740 1815-3986", "4836-5595 706-2932 140-2634 456-681 474-583", "589-1376 1449-6894 4036-5951 160-606 894-3588", "240-4259 1748-3199 1156-3351 1003-2070 2058-3308", "1766-2014 272-3885 903-1028 4-1595 354-1049", "167-5784 1399-3847 435-1003 658-2082 3886-4540", "525-5762 1962-2978 1216-8236 178-7659 469-737", "81-5615 2405-3676 1245-1568 87-2397 319-4345", "449-1399 4032-6270 371-2140 480-564 5356-5361", "2501-3095 882-986 833-2039 1322-2929 532-1097", "1289-5416 295-3104 565-4688 1382-2384 1450-1865", "1157-1426 2173-2406 2668-4239 2157-2195 810-1487", "624-3491 3303-5070 808-3660 1869-8266 3770-5626", "1391-2437 1028-5381 19-360 557-1269 386-1695", "470-2262 980-1350 1865-2564 109-6723 924-8567", "3175-3338 319-811 3438-3622 2077-4280 77-3756", "518-1213 205-460 2141-2620 146-1915 255-1283", "860-4437 1611-3045 807-3493 798-6269 4485-6103", "1631-2787 1532-3102 5862-7770 68-234 1221-7857", "299-2760 2218-4898 2820-7498 78-2834 4150-5669", "458-626 419-1662 196-821 1248-4600 4756-4864", "3797-8238 91-357 3350-8661 8-603 3413-3736", "2925-4117 23-642 13-489 280-4093 573-639 1373-6804", "1783-2704 185-6990 3354-5284 1058-3462 1568-1742", "573-933 3025-4272 1798-2738 590-1896 673-7793", "198-4256 1139-2418 3317-4210 363-478 761-2275", "141-929 3294-3455 569-4561 792-2178 433-8158", "154-521 3587-4799 255-298 1259-5055 3279-6978", "153-1059 2472-5166 110-6700 488-3096 2327-2376", "2981-4527 68-4380 517-1586 716-5419 3-367", "2585-6569 26-760 335-1133 2205-3947 210-271", "1770-2790 742-1084 97-493 1523-4323 276-762", "472-5938 2527-6729 2791-3977 4365-9208 1111-4404", "1438-4270 730-5476 169-978 8-5558 1968-6550", "7122-7377 270-3944 1474-1640 282-1786 5656-5695", "1076-6528 1600-4395 228-692 896-4202 732-2888", "1967-2087 108-6731 75-1588 542-4715 3553-3837", "1695-1797 226-488 807-6875 90-3903 4753-8917", "1876-4477 1012-1659 4010-7787 71-6154 1282-2756", "1730-8210 95-6544 397-3453 1369-3013 323-3959", "5476-6148 967-2748 1622-2411 2864-5078 2377-2917", "405-4746 418-2046 27-770 5628-8585 1547-2146", "2271-6032 179-738 123-408 3354-7438 264-4119", "71-2032 411-4353 196-5463 711-3068 134-2338", "1504-5514 2622-4634 1864-5135 4332-5627 991-4364", "71-5206 847-1218 751-6053 339-2415 678-3656", "5-1578 124-2978 266-315 801-3940 2532-4015", "268-9772 827-1404 2553-4027 260-2018 172-240", "2785-7276 1641-6334 931-3862 383-3255 915-4189", "21-3472 277-2215 15-4547 370-2163 27-1704"};
    int seats = 125;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> travel = {"1884-5235 4016-6551 2047-3612 3791-5855 3116-4580", "7250-8517 670-8483 1188-8882 1847-4584 160-2478", "2852-4624 731-1576 35-38 22-3274 1566-1641 6-1512", "399-3675 1421-7036 645-3210 483-4708 2213-5967", "3-1391 481-3969 362-2291 1148-3222 2505-5017", "172-2398 7394-7425 263-1114 99-1479 1178-5203", "7-5580 366-6382 2544-4950 1244-7762 952-1531", "1380-2234 335-1519 945-4505 493-3223 197-1059", "1340-1374 873-886 1934-4993 1610-3025 5-4072", "3131-8077 1187-4674 59-6734 77-2170 1119-3224", "2123-4025 706-2717 3303-5320 3055-5297 453-805", "669-6090 1233-6576 394-4047 2457-5161 1230-4910", "103-129 126-2564 4980-6651 1497-3052 1706-1818", "771-1031 1817-7249 1743-3464 247-3726 240-2121", "938-5332 3258-4368 620-6834 471-1140 2094-2850", "512-8773 239-613 694-989 3824-9094 377-559", "754-2399 307-527 2183-3851 2110-2482 273-1178", "352-5656 318-8438 179-2583 59-3764 2619-5009", "3662-3973 3910-6899 1790-3929 490-8208 542-818", "2498-3321 4167-7579 862-1477 459-6351 583-4850", "80-2472 156-3316 1101-6834 2079-2763 2109-2381", "1809-7036 21-4500 296-4935 1260-2258 1870-2852", "1519-3774 1405-5345 60-2427 828-1682 431-1583", "1776-2502 22-64 1036-2310 1718-2080 312-8760", "1344-2374 5679-8224 3623-7946 1849-2023 272-435", "193-196 296-2376 58-5739 726-3802 2745-2937", "803-839 71-1076 89-124 1399-1553 2408-5019 18-1408", "498-793 42-547 419-587 5709-7847 149-870 2404-4333", "2944-8193 1565-1570 2401-4979 1875-2583 288-6318", "6265-7534 4273-5189 21-2537 1811-7325 953-4667", "121-5612 695-3002 482-4904 34-147 129-398", "1386-6754 528-2870 1100-1421 2267-5194 2154-3438", "571-4289 1080-3816 985-1157 3204-8515 222-1540", "2527-5052 1239-1345 600-4379 354-2119 3428-5977", "3070-3508 78-1638 280-3701 1571-4024 657-6990", "2510-3724 1687-2151 54-1284 566-796 511-801", "556-4289 136-1368 2831-7242 162-1323 1235-3580", "4518-5927 298-2109 2924-4761 1024-4129 1768-1984", "171-766 1632-2744 112-5461 440-1068 317-542", "777-6393 1878-3484 1279-1917 1348-1863 77-1407", "323-2056 811-2523 458-5496 120-7192 212-3993", "200-7672 2352-4799 1558-2170 597-1151 2042-7115", "1048-1952 768-5587 1835-3167 724-5665 1716-2563", "108-1814 107-4044 807-6827 793-4634 73-2420", "1077-6412 601-2132 4906-8351 1445-7816 5850-7720", "115-1149 1576-3115 653-1330 2-4303 4292-7458", "1084-2553 6313-7639 1491-7061 256-1132 10-5008", "425-8320 1044-8126 4443-7709 641-4054 4638-5732", "454-3811 2935-6718 505-4731 381-4722 16-2665", "812-2100 1898-4837 785-3298 613-1159 705-9439"};
    int seats = 133;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> travel = {"2675-4160 222-7801 1373-3137 659-3695 132-4253", "799-4289 1817-6265 1881-3818 1599-3320 526-2111", "1471-8920 102-571 5435-5763 821-1664 213-9143", "237-790 187-5631 165-2625 791-3695 145-332 530-742", "622-1226 591-717 1268-2591 280-777 1886-7204", "3628-4040 2586-6387 50-158 439-4436 2099-5268", "3417-4156 6121-6146 506-2696 449-674 117-7916", "837-1503 11-673 422-3187 1230-2813 1405-1442", "3059-3199 71-2268 523-898 3899-4049 1101-1500", "4012-5755 111-211 1601-3445 298-3794 3350-5505", "76-1692 454-4617 2409-5801 1416-2036 33-7166", "1666-2347 414-3505 2617-3381 1480-3408 478-5983", "320-917 977-9422 818-4108 581-752 1454-3860", "79-398 77-4254 879-1539 691-2702 2764-4861", "11-383 2352-6496 413-639 261-667 3985-6663", "1385-1636 410-4734 631-5787 2848-5379 229-1848", "3300-4336 1805-2161 1352-8882 3279-4538 886-8181", "828-2038 36-53 1656-2391 503-989 1070-5748", "323-5541 119-791 781-3447 3661-7208 67-3424", "1418-1542 121-351 1351-5527 2433-7278 727-3679", "1290-2016 2784-5073 4292-5185 980-3105 1717-1764", "675-2678 163-5289 80-4825 1074-1623 6226-7525", "1866-9456 20-369 1499-3238 984-1096 810-879", "1714-3112 1128-4578 1231-3405 1134-7280 859-1470", "3145-8112 1598-4494 377-4492 151-4214 573-1589", "154-842 187-1209 1298-2262 66-1029 53-353", "527-5298 1373-1783 470-2979 2100-7427 813-3928", "80-1456 4251-5556 1340-2812 857-999 556-3092", "409-1291 184-5827 550-5229 2984-6518 319-1553", "2234-7776 588-8924 3174-4797 5327-6795 1699-5540", "527-3260 132-516 2914-3078 204-938 394-2129", "4033-7783 2113-3537 76-1302 3118-3260 243-2096", "2721-5614 2674-3806 2517-5355 1975-2565 782-1596", "1899-3531 1419-3858 80-956 2549-5108 459-5696", "937-5389 143-652 1189-1407 2592-6292 1832-2220", "6063-8501 481-4923 738-1685 1208-6908 1009-2009", "881-3364 357-1671 9-1802 1019-1102 1840-2939", "1152-5664 500-1341 2917-5742 494-1970 2539-4362", "235-349 862-1382 568-2244 629-1432 137-2734", "1336-5997 880-2005 89-6629 106-4636 3411-7553", "930-4739 1100-3407 1645-4034 2795-7460 312-1007", "35-3046 2022-5020 180-1973 1442-5546 1267-3033", "2058-3714 310-6827 1004-2780 3647-7268 219-1457", "28-3694 652-1639 5153-7179 672-908 807-2805", "1969-6531 4-2127 3077-3309 1514-2984 228-1862", "582-2456 4749-4969 9-4521 723-2503 166-4998", "2134-3631 333-2430 475-1473 689-8421 1872-4643", "22-184 1504-4809 1967-2675 240-5732 1015-3919", "245-1147 2794-3426 438-489 136-2280 1365-3372", "59-1092 1208-1874 47-5473 470-5074 124-294"};
    int seats = 123;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> travel = {"774-3770 498-1429 1556-5756 456-1356 213-2490", "997-1127 993-1946 3792-8149 1856-3996 1337-1514", "462-1817 3218-6161 1683-3104 427-1827 996-1773", "379-5696 178-1641 1524-2520 574-1909 868-1898", "4940-5646 106-4056 1580-8168 3537-4533 2090-3381", "75-7836 3-982 1435-5897 422-4351 140-1779", "1789-2123 1895-1917 335-7151 2622-2985 184-8302", "45-806 63-4958 2787-5485 49-2239 2067-4289", "3678-8099 185-2530 2225-2935 172-1354 488-956", "3103-3681 445-705 3218-6260 3258-4103 778-1351", "4209-4555 1746-2051 417-2729 4192-5016 1037-1125", "1570-6264 1563-9908 1367-2395 2269-2613 5099-7364", "5780-6150 1454-5280 3535-6363 1999-4447 591-5109", "8-1504 7819-8007 1165-1677 1690-1898 1793-4415", "324-9125 971-2531 1517-8458 71-1937 1243-5019", "382-589 1132-2268 5327-5712 5028-6880 492-2426", "1237-2529 4616-5150 241-908 4604-6435 580-3717", "2075-8630 60-6422 9-2871 2661-7961 83-2949", "2166-2265 476-4507 937-6989 15-912 1380-7135", "1633-9161 4396-8890 1337-4452 4030-4873 4469-5434", "2233-7224 2079-2405 1290-3355 191-8008 1272-2772", "1609-3854 2633-8494 2169-3988 21-5851 3-2402", "480-878 3-5630 48-6891 6-537 905-2524 295-7500", "1133-1556 371-5289 1679-7189 549-1839 1725-2969", "1429-1752 626-1080 489-1951 2040-2699 1885-6805", "287-706 758-3454 2390-2686 20-819 286-5108 27-1383", "2281-2898 200-820 578-2525 1524-4714 766-1531", "230-292 2603-4513 827-2045 4884-6603 3193-5707", "495-1184 779-5237 3630-4656 5120-7131 87-9511", "1149-3824 125-993 556-871 1537-3075 1338-2946", "1775-2070 187-1574 303-472 1213-2241 76-4442 61-88", "959-2665 47-513 2102-2143 1415-2498 635-1904", "1110-2819 3649-6030 213-5320 1098-1276 32-420", "1647-5204 2993-4550 904-2358 1275-1937 3027-4681", "1330-2105 339-812 467-5485 725-1064 985-1910", "5042-7425 589-3310 159-4583 1103-4445 735-1417", "3217-3323 257-1574 425-750 3767-4025 2964-6250", "3251-3709 693-2603 818-2440 863-5938 382-7112", "4759-4769 3080-5585 84-490 753-4982 765-2386", "1902-2361 45-2250 2419-4042 759-3227 398-4645", "32-924 500-2206 218-475 1023-1325 152-5455", "2010-5060 120-1711 1132-4555 870-7477 1875-2955", "36-5060 243-696 132-4898 152-7089 210-1962", "843-1591 519-2824 943-4599 236-265 3700-4539", "3321-4701 2337-5961 4894-7597 1142-9905 2256-7418", "350-4585 27-6099 771-2391 396-6163 172-1901", "493-7331 1807-5154 53-4588 136-3460 1389-4998", "1392-4508 486-2824 3085-7002 2412-2790 76-362", "935-3224 5091-5466 1968-4816 1605-1681 675-778", "894-2233 3-5244 1322-5316 833-950 1525-2350"};
    int seats = 128;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> travel = {"3332-4128 1753-3883 113-2511 72-368 1239-5198", "1158-1370 381-1013 305-3060 2229-6558 982-2155", "2073-5038 4001-4159 70-1527 878-3496 147-2441", "101-657 1484-2650 236-3836 2692-5667 1476-2037", "4810-5429 694-4723 49-3618 513-9493 78-2195", "627-7443 2525-2845 1144-6741 2134-3705 3503-5983", "2923-3687 1042-6899 139-3390 128-8852 586-2453", "1312-4298 542-1556 168-3574 2076-9050 180-4736", "518-7837 558-6854 637-2447 316-884 618-1769", "1223-4397 1164-4999 2492-6473 178-1661 4-2966", "78-8582 185-4013 488-1341 1733-2116 1029-2381", "1657-4292 1803-2922 18-1374 998-2672 123-4796", "254-2614 901-3978 1182-3470 1888-5759 2019-2575", "433-3192 392-3323 342-1209 1200-1997 162-2308", "3482-4860 661-2178 812-2858 69-512 57-1496", "412-2342 63-1052 1550-2353 266-5233 1534-2670", "81-3029 2532-3253 376-2353 1810-2581 1616-6468", "94-5160 1439-4887 340-1245 3688-4101 365-1268", "4789-5118 1423-7092 1066-5378 872-5786 1223-4430", "847-2421 858-2995 2846-5935 2785-5256 295-5143", "178-1158 139-733 263-4152 5269-7077 332-2825", "351-630 57-1491 1796-2353 2059-3481 1148-2154", "85-1930 339-481 1225-2538 361-5174 1093-1173", "102-3011 309-1000 3491-4333 1794-4327 77-5593", "1617-6065 1866-4851 3756-5500 2677-7771 212-5920", "195-4617 109-3876 116-4225 2941-8427 150-2890", "459-4038 119-7369 18-3244 15-336 1135-5385", "2616-5619 196-402 3027-5020 3798-6413 970-1185", "369-8370 41-546 1898-7442 163-4930 295-3171", "901-4125 486-656 42-526 932-4369 374-5048 346-6946", "491-1635 1282-2193 1556-3076 1572-3305 521-4405", "2029-6998 382-678 1312-5562 3-6915 1659-3576", "226-1998 224-5341 1183-1490 756-2338 643-3096", "272-3845 46-7124 620-1329 745-1470 83-182 51-1381", "312-347 3122-6028 318-3759 445-502 1631-3954", "3144-7082 1307-2915 643-1749 3811-5140 959-1949", "129-787 455-5180 599-2185 39-7485 7292-8431", "350-3943 2305-2415 1182-6473 463-1853 1358-1978", "3172-5088 567-6803 3562-3886 927-3441 1113-7076", "566-753 718-5045 2259-5689 2479-4513 416-974", "2181-4767 108-4933 102-2964 3675-4589 744-3440", "2272-3686 1665-4867 1807-3338 186-2591 2051-3028", "517-6771 5400-6217 1343-3858 148-457 2174-4135", "2098-2732 6652-7034 1438-3898 1247-3857 42-902", "4317-4837 957-1501 1661-3527 85-2380 212-544", "89-569 734-2496 811-6169 2984-3157 1864-3950", "270-2318 446-2724 1029-3584 314-6523 2471-3584", "1098-7349 40-2619 118-5504 1390-1595 944-995", "896-5433 1906-4234 63-341 1408-5144 3123-4125", "1052-2250 976-2441 224-225 252-628 1719-5096"};
    int seats = 148;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> travel = {"886-1781 30-2348 549-1182 1723-2959 181-1606", "608-1364 16-7810 832-1944 37-1040 5492-6184", "136-1959 643-1891 144-1095 1133-5160 691-1545", "3-7540 2586-4631 14-415 1693-3014 560-5353", "105-7213 1523-6669 743-4378 721-1590 1556-4409", "1282-3443 79-3555 422-3607 100-5121 439-1742", "2488-4464 2083-2175 1046-4101 2393-7402 17-9465", "7-2968 310-2947 2639-4782 1347-4339 16-3712", "5-879 951-956 263-3365 987-1953 85-8665 141-188", "14-666 565-3111 690-2045 571-4954 1690-5027", "2061-7196 111-473 153-3466 4208-9112 560-1089", "299-4099 1639-3071 1950-2906 1383-2992 3141-5440", "519-3720 1667-2381 321-322 516-4425 1850-2877", "1614-5611 75-228 5168-6171 10-854 3056-5617", "3987-5527 3552-4406 2739-4095 103-116 8-3477", "3080-7268 421-2813 256-329 3603-3864 616-2330", "2083-2768 3897-6511 39-2188 2124-2205 2119-4497", "743-1946 2976-3570 182-3256 894-7019 130-3333", "1411-1781 995-2316 3387-6252 960-2003 310-6508", "1978-3039 2861-8005 738-6888 1977-5142 1297-4586", "206-1517 4426-8490 2154-7291 2961-6343 500-888", "136-8337 809-2247 201-1441 4675-5614 5-3105", "750-920 2448-4922 328-896 160-399 101-1800", "327-1563 2764-6775 2832-3309 1622-1901 3644-5506", "1644-4353 1962-6311 105-855 826-4240 1803-4479", "197-8596 312-1605 372-596 115-1809 429-566", "3280-4034 2756-3176 1929-2461 1258-2107 1021-3116", "1571-2290 927-8813 39-4879 5240-5868 339-923 3-36", "1234-4419 593-2750 2793-6391 143-667 179-5812", "867-3904 1142-1291 864-1502 32-6116 2959-4098", "701-1112 470-4965 1598-3444 1384-1526 919-4173", "1099-2720 350-2395 959-3145 2149-4135 1129-1876", "193-2138 692-5439 4604-8511 668-1978 6089-8875", "2205-7767 595-3702 807-1564 1296-2229 2053-2524", "210-7625 52-987 1233-5670 3189-3475 821-1689", "4549-5705 3274-6959 304-1255 501-764 5122-6930", "1417-5867 476-990 305-2174 819-2591 3640-5444", "3134-6151 361-439 209-1371 2636-2716 1570-3608", "726-1491 669-4753 1229-2474 318-4209 472-3849", "3752-5446 1447-7650 86-7263 6802-8276 248-7595", "2081-3906 61-137 3528-9788 1077-2002 2220-2732", "29-2045 422-3511 372-5662 2455-3997 2320-6086", "902-5754 407-975 841-3505 568-4008 1167-4885", "279-4304 1237-1460 2311-7965 38-3110 818-2303", "945-1504 3093-3713 545-2044 2043-4705 1080-3022", "118-7567 2587-2667 2201-2517 641-1762 229-1068", "49-5212 2054-8093 3927-6570 2673-6471 460-5417", "672-673 361-888 494-6888 979-4120 825-2050", "3638-4971 345-1624 757-5655 1617-2305 1439-1552", "2002-3585 1450-5861 12-59 467-4368 231-3900"};
    int seats = 124;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> travel = {"237-1812 52-226 3835-8602 15-2182 2356-4546", "2627-3166 1371-7173 301-1948 4409-6674 175-6059", "360-1789 20-22 155-7237 852-5289 332-6392", "1261-2239 36-980 687-3369 2775-4585 41-1368", "191-3794 102-1410 1344-2220 1892-3755 1961-5496", "229-3579 1236-1286 599-2421 1579-2514 2567-4767", "1570-2861 202-561 2681-6238 2255-2459 217-1127", "76-7825 910-1293 1437-7445 423-4121 1691-5761", "1542-3953 518-912 757-2750 1778-3522 1043-4041", "4-5 94-5190 938-5546 25-1738 3864-7196 1490-4402", "465-756 537-1826 1267-5852 1175-4342 690-3747", "115-3798 2071-2577 2577-2976 5644-7645 1336-7291", "3023-4143 367-2953 407-1570 71-1866 942-1091", "967-2453 91-3330 1053-6532 1146-6121 909-3296", "625-4833 3153-8182 351-1276 772-6345 632-2007", "1143-3704 3-346 288-9237 96-2067 4681-6411", "134-7442 866-1138 311-434 1234-1454 217-569", "1537-3867 27-2343 804-2476 208-355 3070-5303", "200-3523 1632-2271 341-1865 2257-4210 350-1181", "181-6563 2002-4473 47-1842 4564-5347 124-560", "701-7543 2204-5418 1965-4206 2259-6479 491-4759", "82-2730 1041-1458 332-671 391-2516 849-3823", "12-7699 2828-8819 1894-4933 285-937 480-1593", "3557-6009 329-1653 466-4124 823-2889 209-1270", "379-1726 3933-6412 152-2326 944-2026 1213-4692", "665-2479 150-4720 104-1863 325-737 411-1672", "3566-4043 1478-5424 617-7218 575-1045 1213-3542", "171-5469 1279-2180 2833-2869 4715-7705 190-5060", "523-3076 3015-7151 201-2674 202-8602 2504-5894", "1738-4083 992-1613 2128-7877 4349-7633 1292-4857", "1291-3261 2416-4332 386-1177 4598-7917 774-4369", "160-3387 3296-5356 2662-4485 980-2787 289-1736", "202-5688 1538-5899 10-3220 1498-1829 2727-2932", "2839-3209 329-3936 921-4374 336-7081 3020-4829", "2387-6046 271-2398 2777-3204 3132-5956 1262-6257", "807-2185 631-1126 238-6247 1656-5864 450-3064", "529-1955 29-3867 2-6630 20-3359 1745-5009 762-5204", "3092-6505 1411-2991 1096-6906 1368-4848 362-650", "90-435 2218-6172 2499-4411 1068-1218 670-3707", "543-7882 2088-2574 1622-5023 175-3037 997-5128", "1353-1646 7306-8145 353-5757 2026-3261 1699-3927", "412-829 237-8336 562-738 83-388 2134-8960 81-2538", "711-831 209-4991 1686-1753 989-2043 368-606", "1474-6444 2439-4591 1039-2544 773-1534 440-792", "19-3373 4-398 1557-3295 1711-9042 3625-3706", "1895-5368 361-1269 252-1956 923-9659 92-1205", "15-1419 3551-4723 1309-6092 3084-3211 549-3493", "423-2312 411-2118 1137-1182 316-1101 323-2650", "2982-4991 83-148 1877-5191 1117-2559 703-3289", "560-6924 482-2401 946-3443 462-4769 4560-4881"};
    int seats = 136;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> travel = {"67-254 463-1954 89-5299 59-1733 545-3196 4007-4379", "5438-5723 1033-4461 1762-1830 9-7820 917-1709", "1016-3346 600-919 1755-3001 138-2000 2876-3068", "548-1932 37-885 170-7655 333-786 2615-4227 72-6453", "1065-1098 688-3481 858-9170 5151-6431 760-4077", "2773-5533 3511-3896 1523-4395 518-1311 2684-4518", "501-3930 1250-5452 128-1313 1158-2431 834-2466", "5392-6067 1565-7252 796-1204 3341-5366 72-1213", "180-6808 221-3712 2476-9031 4104-5264 4472-4605", "1381-4114 84-776 2311-7530 260-2209 2136-6084", "706-1093 639-5097 457-7235 713-4706 3953-5943", "64-5510 2430-3917 512-5284 1099-1394 1809-1848", "440-4651 1285-2893 1826-4863 1104-5491 252-3890", "4835-5515 2299-3278 305-2002 23-9494 183-3213", "1511-3821 770-933 2947-4250 4300-4800 1408-3199", "169-2009 6711-6945 2783-4776 1770-1956 51-412", "19-541 299-1674 589-1410 1394-4699 3514-7178", "123-4187 452-1225 920-1376 1658-2451 1657-4361", "85-606 746-4541 2863-5808 1050-5431 472-5339", "712-5732 415-2425 1582-7924 4838-6492 1637-6664", "2631-7637 1664-4072 4293-5183 1214-3206 2152-4488", "126-188 1672-3362 66-4438 1873-3643 1580-1710", "101-924 1695-3690 642-4240 2030-5597 2307-6411", "2315-4237 85-351 52-5572 1104-2476 1428-2948", "37-1075 381-8054 167-2018 948-2739 323-4212", "2462-5237 2577-4407 160-1140 895-1110 124-554", "403-806 1173-2638 279-5401 1283-2252 108-711", "1428-5568 510-4568 118-1685 494-5205 3478-3908", "167-5608 41-2287 147-167 1205-2895 261-3860", "1839-2095 28-3067 2791-4992 597-947 1276-2569", "1140-2124 112-792 819-1229 1362-2171 3035-5082", "429-7806 265-1374 960-1655 2668-8969 102-6621", "149-8779 1132-2087 27-3020 255-836 3869-8244", "3042-4275 1433-4272 320-2237 1037-3508 2432-2451", "327-1371 1324-1651 374-3686 1201-2136 667-3894", "731-3456 2465-5247 275-2209 969-1139 818-4639", "1771-5115 2136-3475 1553-3446 4390-7236 2296-2845", "60-499 495-2837 301-5575 310-4059 3461-8833", "3858-6392 818-4311 963-5234 618-4578 1131-1143", "138-7250 275-2415 2230-6322 3295-4026 112-1540", "2837-5178 1201-2639 3445-7847 2663-4718 2081-4130", "246-1740 527-2494 1712-6513 107-303 2604-4328", "766-1512 87-308 244-7162 150-1827 900-4073 146-269", "2828-3447 238-2311 3516-6386 195-7590 555-1073", "274-538 248-4574 874-5209 611-1745 2790-3632", "150-405 233-569 1260-1293 1596-4678 528-9572", "106-1335 1160-9020 3666-3671 2153-6527 4864-5549", "1516-3561 1025-4789 2752-3934 351-691 3240-6693", "2666-4769 2506-7282 1320-8301 2138-2964 2037-2792", "631-1773 135-197 2020-4758 6019-6725 681-2535"};
    int seats = 124;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> travel = {"885-3226 915-2282 262-1264 2017-2286 653-2185", "272-559 332-8242 3101-6661 357-689 2478-5185", "46-2577 552-1128 1582-2506 314-1779 2012-4649", "2117-2910 1602-3024 256-1154 7233-7654 2258-7219", "180-3998 389-2146 1201-1763 196-3475 38-62", "111-3600 112-3881 2864-4460 4326-5210 436-4387", "2476-2808 2369-7031 2636-2978 2365-5155 1729-2760", "2003-4375 2084-2574 5750-5888 377-1442 3095-3830", "1144-3364 42-3603 161-2684 2668-6657 55-650", "2250-4147 702-3051 605-6151 419-3497 5185-6324", "885-1101 46-410 40-1630 2071-4149 1057-5897 18-459", "1259-3769 1737-2966 69-137 2247-5748 3215-4242", "968-2364 487-4745 1422-8156 412-2033 1788-1999", "3338-5415 813-3098 2647-4627 37-1307 2047-2367", "502-2206 1107-2114 4-5328 414-2282 2561-7576", "2245-3560 2450-6774 733-2629 12-6317 66-5971", "259-4954 274-4134 95-364 1597-7384 311-6059", "6-2256 1805-3822 1341-3172 383-2299 929-4001", "284-7064 807-3269 1449-4799 1095-1801 326-4191", "2302-2810 207-291 5628-7093 573-7353 2803-3784", "1021-4314 640-1106 257-1864 456-4537 4717-7128", "311-1106 107-2709 641-5745 3486-4203 3556-3749", "75-3141 3089-5261 553-6801 99-1085 1310-4256", "106-7423 2-1290 4953-7921 4815-7379 483-7426", "762-2364 119-524 2343-5099 1034-5235 3060-6373", "630-7382 123-6167 1001-2051 812-8147 1216-3090", "6066-6873 1430-2444 1600-2613 4930-6984 1496-3369", "389-2364 1350-2003 1772-4338 30-1870 1448-5273", "2164-3330 2237-3074 1086-3669 928-4121 1220-3100", "282-1326 1102-5449 287-633 15-1844 958-2494", "740-772 11-2438 850-1911 3134-3298 788-3550", "53-1287 340-2728 1-4170 260-7416 2220-6318", "11-100 161-3958 2811-5911 5832-6126 472-5600", "840-8969 338-414 1618-3826 295-2374 436-1508", "451-1085 14-6719 28-7040 359-2306 169-2606", "454-1597 672-6089 699-2288 1798-5780 1667-1978", "453-1206 51-8051 1386-3115 717-2120 2585-3290", "121-7067 1091-2550 251-946 270-5334 172-709", "424-2040 1713-3917 4255-5977 184-356 4875-5016", "4763-6472 923-7211 8-1290 932-1938 1840-7512", "660-735 355-446 2959-5083 3-604 76-5326 460-2179", "2609-4631 6460-6869 1012-2650 427-1911 540-1591", "87-6454 2108-3007 335-1319 233-2411 220-808", "308-7376 1389-3111 1-1278 222-4186 1178-3773", "1097-4592 980-1475 214-2980 495-2946 432-3450", "2681-3557 210-1768 1247-7786 2386-2654 203-867", "1322-2217 201-968 2528-4779 105-5907 1167-1216", "2537-8096 2513-3307 217-1344 131-2927 310-567", "963-4264 4992-5233 2019-2699 3491-8022 4095-4667", "974-4230 679-6346 515-6654 2184-2575 1169-3740"};
    int seats = 133;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> travel = {"4089-4388 4977-7438 3856-8657 1827-9355 406-7113", "4204-8120 5-8098 3720-8687 5033-8747 3258-6104", "140-6338 1013-7556 2710-3236 1171-6782 921-6419", "7517-9235 4755-8853 1741-7999 5665-9654 113-4246", "471-9464 2995-7214 169-8338 1517-5626 1032-7126", "2230-8940 366-8933 3344-6212 2976-9526 2749-3740", "3381-6540 442-7491 2684-4442 2450-8736 822-2657", "13-8620 2376-9897 5911-8630 5539-5887 799-7525", "1283-6565 2113-8993 1442-2947 904-9913 5167-9779", "262-9847 112-7775 742-7604 2831-7769 4183-9441", "2722-9595 898-7522 2123-8390 617-8625 1229-9488", "685-3836 4089-8826 871-6445 702-9649 3135-9539", "2279-9346 525-6777 21-9443 16-6350 14-9644", "850-5627 3557-6244 434-8051 500-8286 1132-6122", "5514-8355 6649-9206 1545-7495 1963-8560 2623-4032", "317-5904 8124-8125 526-8695 2766-6169 102-9983", "1138-8252 1187-9230 1616-4072 1884-8717 6028-6336", "503-4132 1887-9199 3280-7627 56-2931 510-6015", "8677-9835 1528-7380 3713-5755 1012-9711 1155-9863", "2021-8245 4519-4719 423-8967 834-6706 220-3839", "6081-8191 2961-8581 7012-7611 3182-7816 1033-8744", "919-7758 149-9923 5071-6979 3257-8073 304-7280", "4379-8653 666-8942 2242-5398 2743-9539 251-9848", "8497-9512 5155-9982 1827-9661 925-3341 1332-6630", "3850-9762 4589-6461 238-8407 7439-9529 4055-4338", "6069-6516 1476-8634 287-7707 4253-8029 2227-5663", "4951-9044 431-2973 350-8131 5917-7259 793-9089", "16-8700 1623-8225 8187-9907 23-9274 2988-7602", "3198-9690 3073-4737 8295-9145 2133-9752 340-9956", "138-9008 4134-8236 1915-4216 3325-9320 938-8583", "5209-7427 4027-9483 264-9786 621-9073 3863-8501", "913-6481 3098-8189 462-3821 4476-6549 2073-5572", "1019-3980 5995-8428 4663-8620 197-3882 437-9175", "218-7296 2128-9909 287-6154 2380-9522 2640-7317", "220-3854 256-7878 6746-7531 1215-2924 2708-9706", "3258-5460 2347-3561 1485-9963 1970-9973 2551-9199", "5102-5378 6034-6624 4062-5312 2209-9610 4391-5039", "2887-3129 539-6869 2969-3255 3470-4931 3122-4614", "4387-5966 357-8567 6440-9756 7405-9320 234-8535", "3359-9906 1189-9870 979-8570 1314-3448 1135-8007", "1780-9605 1860-6987 1983-8886 822-9681 1769-3147", "670-9995 6986-9101 3290-8021 340-9543 4430-5940", "1995-6992 4409-8882 203-6120 546-9904 6158-7297", "1265-4600 5390-9830 2627-6151 3958-8257 526-9965", "828-9289 87-4397 651-9943 99-8333 501-9720", "1236-5291 54-6589 5044-5544 466-9339 1073-8596", "4722-9476 229-9923 866-9469 100-8761 4448-9739", "347-2618 2764-7310 4922-7666 5957-9473 2317-9994", "4437-7349 2058-3089 147-8680 728-3482 1729-7236", "5062-7337 252-2497 756-9517 4767-9644 465-8895"};
    int seats = 185;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> travel = {"815-7930 2792-8672 1231-9949 1270-8799 1504-5550", "890-6671 3211-5172 583-9627 2378-8926 1994-8050", "729-5303 291-8913 5481-7813 925-8339 2853-3778", "5043-9614 815-8222 1237-9769 4712-6310 6974-9491", "393-9508 277-7701 1778-6654 2803-7124 1944-9902", "3011-4561 4152-8700 162-9173 5056-9070 569-7815", "1883-8936 4996-9812 1027-6346 1528-4792 2676-7549", "908-6128 5777-8956 2362-7494 2054-9692 5833-9688", "3412-8988 1124-9711 3421-9684 4351-9667 1314-4949", "2410-6867 8172-8629 2381-4612 2033-7307 1904-6550", "2804-5936 1858-4708 1845-5928 155-9686 3757-7349", "974-8149 3754-7829 33-9398 4978-8373 419-9924", "840-9886 3947-8431 6-9749 1571-3005 194-8606", "4771-9434 2186-9737 5209-8494 4221-4396 1432-8879", "2763-8246 103-9540 143-9708 274-9649 685-4036", "2095-9567 539-3637 3699-8606 1237-9854 936-8822", "2653-7724 255-9761 52-8101 2641-9354 210-9494", "400-6236 2560-5387 4435-8594 2130-6139 807-8488", "152-9786 3204-6425 6114-6309 1946-8073 1720-8739", "1510-5512 4600-9782 6591-9442 3928-8492 2618-9716", "1397-6261 692-9574 3141-9248 1526-8184 1092-9270", "4423-8940 2434-9927 869-9284 3514-4265 16-8776", "364-9408 732-8889 114-7651 324-7360 466-9732", "6550-9302 413-9111 2559-8663 163-6322 2417-7906", "40-8578 2327-7690 2020-9865 57-9595 3145-9261", "1630-9503 5391-8874 3627-4612 6337-8945 7154-9849", "4134-8035 6149-9986 4632-9644 1006-7056 2043-3331", "76-9116 1357-4650 1224-8498 3377-4264 7893-8862", "6889-8557 66-3792 797-7508 4779-8984 2310-9900", "3572-8712 404-7266 5-8925 2595-9296 861-7743", "2432-9853 629-6080 1668-9482 2353-7826 3775-5960", "4542-9375 928-8874 6094-7061 4060-7961 55-6688", "5290-7498 8444-9527 3143-8985 577-8572 134-3661", "31-6254 3575-4399 1400-9032 2590-7513 5910-8991", "3682-5840 2294-9594 689-8772 1754-5857 254-9713", "24-7857 602-4457 3392-5610 1947-9551 3508-7533", "5823-9559 522-4769 528-4439 3323-9397 789-4005", "1295-5144 1053-7168 240-8837 1824-6212 4200-8245", "2071-8509 219-9816 758-4506 2794-5799 997-6899", "312-3477 121-5990 3876-9767 72-8880 7274-9633", "117-8237 6454-9529 1310-3401 1063-6000 3191-8403", "1765-3814 1730-9935 687-9028 6590-8189 2636-9128", "2950-8368 923-9737 667-8477 1279-9120 2239-9101", "932-5621 40-9176 5540-5714 5466-9992 383-3168", "171-8981 4899-8906 4758-9559 168-9987 263-4521", "3379-6911 2396-3362 1616-7237 2179-4282 293-8962", "3589-3912 1212-9666 3196-8368 1155-9776 428-9360", "1391-9998 2114-6929 647-8293 8330-8975 2364-4371", "3740-7018 6658-6699 299-3526 219-9021 196-9763", "4877-5141 514-8070 4140-5901 18-7550 1778-2913"};
    int seats = 190;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> travel = {"3025-9859 1720-5037 3-9486 4072-9676 3444-8268", "59-9149 5757-7804 2547-3254 6333-9770 5906-7782", "687-8435 4827-5513 7-5776 7370-7737 746-9854", "2625-5191 277-4847 1387-8379 2523-7406 4329-7105", "9-8202 447-7969 34-9495 990-5952 1377-9036", "544-8889 6699-8657 4568-7074 2957-9157 3640-9475", "4431-5001 937-9336 1159-9538 2437-9126 4764-7439", "6242-6507 501-5344 807-9845 2888-9368 1852-9905", "932-7566 1146-4185 1383-2685 3317-7956 195-3787", "5835-8388 693-8021 4126-8298 2463-6192 32-5162", "1099-8939 3128-8719 2373-9526 2245-6755 479-5392", "232-9208 180-9680 2345-4901 107-7393 143-8879", "5456-9325 6344-9394 14-9669 5292-7320 66-6471", "1152-7828 2315-9033 3488-8304 1083-5692 1865-6762", "3505-8150 6028-7063 299-3814 316-7668 4654-8783", "1196-5572 1152-9929 2740-7373 243-8500 3130-8464", "147-9915 4716-7554 2714-7001 425-9291 3940-9692", "5232-7527 4727-9836 3993-9921 5451-7695 2060-8055", "2072-9621 4463-8288 4619-4763 3354-8249 1439-7420", "1274-9196 2286-7905 600-9375 7391-9315 2057-8858", "2269-4673 1819-8456 1010-6441 3714-6795 6530-9923", "1796-9796 1660-8119 403-7450 8-9498 1900-4417", "2518-7958 8787-9065 5677-9129 2256-7046 204-6887", "674-3893 3571-7564 1047-9952 2415-6674 347-8454", "2952-7393 1256-9782 1471-9849 4348-7094 592-8867", "2352-9337 1363-2621 2853-8837 2441-5409 447-5456", "1791-8263 4074-8593 549-6700 3300-8557 3901-4564", "1306-8974 1591-5289 3395-7451 979-9904 5020-9899", "1948-4779 1345-9180 4480-4822 4183-6784 4124-9374", "4489-8415 4570-8268 6315-9652 189-5994 4172-6143", "4338-9603 9459-9537 2112-8278 2326-7521 2459-8247", "1557-9778 3278-4344 1690-6076 2999-9273 1539-6221", "2324-8934 4065-7053 3242-7539 2685-4748 2343-6349", "69-9093 303-8156 5123-6954 991-1835 1478-9506", "1972-4892 1224-4360 46-6744 1780-6778 4114-5485", "4618-5917 2724-7259 128-6651 2449-6091 1169-9576", "6191-8920 1231-6504 179-7395 2546-9842 2050-9519", "1249-8084 5233-6884 3669-9047 1165-4627 4384-8838", "2926-9104 1379-8246 2918-9994 2429-9185 5190-6204", "494-7708 2329-6341 3398-7368 367-9383 5058-5537", "332-8819 1859-9076 3027-9547 4934-7545 3382-9954", "419-6662 3576-6130 4000-4720 4034-7086 6289-8008", "5994-9990 730-8115 1999-4937 2171-8833 2000-7013", "4399-5419 1136-8074 7133-9421 1383-9926 2161-4874", "6049-8540 1440-8586 93-7983 2550-9776 3973-9345", "4098-6232 50-9682 23-5708 3796-7761 818-9944", "2585-8791 1792-9777 2719-9861 359-9834 1454-6877", "7310-9131 1242-9532 6963-9048 1395-9815 388-9616", "65-4748 2366-2751 1039-7739 3550-9746 311-8229", "2534-7401 472-8985 1077-9929 2732-9183 158-5241"};
    int seats = 199;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> travel = {"644-5187 892-9784 189-8834 2501-9454 10-7518", "3706-7490 2525-9882 125-7723 3867-9941 1264-7933", "8188-9340 3245-9842 949-4797 6537-9723 1607-9962", "5886-6903 1483-9239 1826-8840 886-9109 1801-6762", "4041-9641 2528-8950 1019-8309 3356-3475 167-9997", "174-5565 285-8846 3019-4009 3118-7217 3998-6882", "696-6877 2544-5057 1601-9377 5530-8369 1520-3313", "610-7958 6423-8810 1601-4954 1314-9231 1194-2549", "86-5111 1143-9825 563-9496 2063-9012 751-1011", "578-8794 2815-6981 3263-9985 2134-7255 5148-9336", "6386-7009 2223-5270 1385-7476 1574-9152 229-6721", "2140-6084 7186-8510 3762-9882 385-8156 148-8272", "3028-7834 7207-9336 4158-7417 3241-8279 2465-9507", "222-6054 324-5116 29-638 3915-7743 2301-9277", "7336-9863 3829-5591 1302-9681 5650-8279 2809-9494", "2489-6429 2801-7434 841-1280 2181-9253 6540-6793", "21-5781 2464-5680 834-7749 453-9924 118-7272", "2322-8125 5330-9180 5235-7761 232-6437 6470-8813", "4484-4829 3334-9001 2709-5031 2583-2668 1544-9888", "741-7920 13-5177 982-7006 4462-9443 3063-9958", "66-8721 7411-8462 3338-6783 3728-9064 2480-6657", "5464-7853 3844-3875 2349-6066 1060-9766 870-6852", "2628-6856 391-6792 1857-6700 197-9897 1807-9631", "861-7498 748-8319 42-3341 2283-4764 6837-10000", "682-5153 196-9492 8027-8428 4006-9978 73-9336", "708-3308 2316-9156 3406-9608 951-3046 1126-4126", "1613-9172 247-8856 6031-7220 2152-3226 3936-9402", "1891-9714 3886-8728 5352-7604 1544-5890 3014-5161", "1885-4660 4255-6538 3498-8618 1761-9998 97-8887", "345-7645 6813-9068 1465-9124 420-9296 777-7388", "6370-7472 3497-7785 558-3101 6532-9296 1917-5336", "161-8806 83-7130 184-9510 84-7195 3405-7960", "5527-8241 1593-5539 3147-3292 135-8655 517-6608", "1842-8662 2452-7628 6779-9999 798-2971 5065-9887", "800-7991 600-3325 1343-6354 4368-9182 3498-9859", "342-8499 2551-3791 379-8955 2100-9456 381-8207", "1058-6882 1743-3213 4575-7962 1679-6928 4933-9234", "3602-5976 798-1305 3967-9941 6682-9125 3396-8940", "4244-5499 1147-7321 37-7270 5112-8240 682-5622", "3502-7847 1342-1580 244-9054 2646-9832 7046-8530", "1422-7170 3135-9415 397-2797 582-9985 4871-7598", "428-8071 1477-7126 5195-9058 864-7214 8065-8801", "1968-9536 2836-5338 7509-7533 7507-8621 6084-9463", "190-6752 1839-8142 1063-9688 2701-9684 1042-9839", "7381-9114 743-7429 3597-4549 1197-7171 1216-7841", "3078-8717 227-9419 6484-8348 3735-5785 2491-5848", "4506-9311 7537-9327 3854-8292 1590-8127 1921-6533", "11-5447 565-7676 3362-5227 7860-7890 632-9051", "5381-9357 279-3482 715-6379 2892-6924 1124-6908", "1450-6030 2096-7208 5713-9882 31-5173 5110-8601"};
    int seats = 114;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 67;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> travel = {"357-4695 23-8113 3527-8681 3159-7294 340-7364", "1434-5026 5969-7062 1402-5812 3935-9627 963-9666", "289-8627 2685-9922 1510-9016 4579-6892 7738-8258", "389-8027 3726-9835 616-8521 4380-4797 103-6893", "2824-7452 819-5205 2116-6519 2339-9634 4435-9228", "2472-2744 2831-9847 1666-9524 420-9990 2084-6183", "2696-8422 3364-9972 5842-8701 437-7543 196-8469", "1976-9870 778-3829 1729-8105 3643-9655 3359-9148", "643-7812 3116-3274 1570-6683 246-5827 11-8887", "1148-7909 707-9882 2283-4952 582-9003 846-9999", "139-9560 2876-9912 3008-8333 2300-9909 693-6790", "623-7137 758-6487 1873-9756 4866-9272 3177-9278", "1495-9426 194-3638 1804-9802 1194-9932 7085-9710", "1700-9878 2295-7627 3883-6490 4862-8069 1897-8899", "614-7763 3431-7357 180-8912 5846-6241 820-7158", "3001-7381 395-6383 5809-9988 4226-5096 151-8093", "5637-9065 3497-4886 3631-8517 1671-8816 8713-9249", "399-6689 1190-9865 783-7973 2965-9718 1747-6851", "8664-9030 923-8365 329-3646 209-8668 3342-9308", "1431-9683 1634-8318 229-7946 568-7450 1530-8008", "7339-7737 682-9328 520-5396 2588-9677 185-7062", "3072-9735 897-1206 125-147 1340-9912 4715-5949", "5711-7124 2193-6612 4124-6606 897-9133 5052-8248", "2007-7889 1481-9621 4490-8638 188-6936 5074-6910", "5633-9726 18-9781 3981-8629 1602-7895 4485-8599", "6565-8909 5481-9886 1576-8664 956-6468 2524-9824", "2230-8856 3888-6636 6577-8972 2727-9984 4505-9707", "4005-8139 3840-8157 3190-6369 6172-9464 1423-7442", "2475-9262 1981-9129 5602-8066 1477-9246 3803-5379", "287-3173 883-9930 8015-9551 975-4323 153-9424", "2076-9349 2003-7499 950-9464 3520-4327 3284-6334", "153-2295 776-7655 615-5859 1426-9933 2724-8009", "8432-9631 5427-6978 4272-4298 105-8141 949-8417", "1052-6512 493-5269 1736-9724 815-9943 1822-9199", "310-9842 3262-5255 1261-9153 6321-7257 1161-9933", "1427-2223 5946-6715 5064-7941 1279-8933 494-9195", "558-5299 3639-5751 683-9702 1075-9936 880-8631", "3857-7806 2978-8596 6232-7888 2295-9054 4644-5466", "1028-8084 167-9032 2747-5600 4606-8567 1380-8047", "1420-6571 1334-4707 5877-8178 1206-8279 4839-9110", "838-8854 4164-7209 519-8674 777-8794 2674-9555", "5087-8269 4458-8502 1137-9613 706-7285 842-5674", "1604-9113 413-5428 1273-2234 4368-7353 97-7173", "4675-7935 3049-4726 953-3975 6539-8609 644-3579", "1247-9945 5182-5557 2067-9685 567-9616 196-4851", "3495-4488 3949-8764 390-6041 2809-4094 3960-9283", "1598-9591 4710-6051 4423-9797 4232-9106 221-7581", "2994-4165 397-7722 442-6646 494-2928 5767-7173", "1525-8270 3509-4867 764-9719 7762-9945 671-9846", "242-7903 5213-9958 106-4734 98-7380 309-6678"};
    int seats = 137;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 55;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> travel = {"532-9156 3516-9754 717-2522 6771-6772 178-7125", "3671-8625 442-8731 3514-7600 3293-8500 1036-5657", "19-7516 4015-9207 2749-7874 1409-9198 373-9014", "2074-8207 4010-9104 1145-8366 1246-1890 1286-9985", "721-9818 54-5432 1787-5057 1957-9275 192-1446", "2215-3693 4062-8392 12-9925 6181-9593 462-7773", "3979-8478 3072-6124 7054-9591 780-2628 3269-4739", "2781-9911 6836-9520 6626-9458 3194-5843 1406-9911", "6073-9775 5662-9861 817-7515 5899-5951 249-7499", "28-7027 2234-7795 2286-9972 4197-8952 560-2265", "3434-7012 73-9128 3919-5488 967-8463 1796-8299", "960-9567 4394-6952 3073-5752 73-3944 4908-6450", "298-1922 311-2515 838-4088 4562-9408 96-9999", "2928-8750 5162-5504 275-9194 2039-3683 2916-8643", "1743-8593 5283-6111 2144-8088 96-4960 8417-8497", "7447-9087 921-6309 222-8710 3606-8301 82-8526", "3654-9095 3403-8666 2111-4794 1827-3307 5353-8358", "3637-9987 677-9515 4398-7668 1333-7282 3871-8894", "1475-9367 4185-7605 4137-9029 4767-6116 2228-4547", "2781-9478 4919-9822 1176-9941 43-9077 879-3455", "3078-9016 375-9697 2654-7351 773-6767 2342-6554", "14-9768 597-4388 838-9498 5083-9820 957-6640", "3361-5529 194-8294 4361-8507 82-6736 2586-5652", "87-7995 794-8858 4060-9744 290-9266 3158-9310", "7060-9973 5899-8520 3351-7708 5776-9728 5278-9934", "3890-8576 7475-8755 207-8212 1103-9594 2875-9428", "2055-2647 6435-7148 1906-8846 2835-3922 1224-9170", "1773-8935 2503-9461 5012-8271 73-6250 1238-8525", "938-7392 4163-7715 5223-9183 53-7626 1283-9886", "2122-9474 3511-7236 1603-9870 1297-5200 135-9164", "8055-8689 2260-6821 477-8630 491-9909 1548-8680", "898-4820 2512-9105 2435-7754 646-7159 2290-4276", "1103-9038 1242-9959 566-9415 393-8050 326-5650", "1867-8879 6941-7528 6444-8246 4234-9526 3634-5814", "1651-7221 11-9895 3702-3810 7184-8493 4168-9871", "371-8638 1813-7243 16-8581 2554-9317 1223-3084", "1513-7202 3427-9583 5301-5799 1609-9004 58-2884", "834-9631 4972-9056 2812-6534 3046-9670 1572-9834", "5107-6541 1346-9412 66-9974 3594-9765 130-8225", "6982-7263 13-9756 353-8481 1052-8044 2558-3505", "844-9005 20-3048 5332-7021 2263-9020 4229-6080", "2235-7277 6146-9901 2603-8396 931-9269 3536-5121", "905-7038 935-5347 3864-8998 3941-7233 1071-3119", "3193-9938 591-8476 2241-9573 2691-9735 1456-9766", "98-6981 470-9224 3144-3720 3256-4641 359-2133", "4911-6944 622-8439 6724-8218 180-4639 4453-6768", "478-5811 4340-4507 377-5669 4081-5195 184-8255", "1359-9895 765-3636 1856-9140 2006-8579 4218-6288", "368-7543 4769-9824 143-7006 288-6634 2364-4848", "1718-9984 92-5483 3604-7821 4990-5368 2421-3863"};
    int seats = 155;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> travel = {"177-4910 1204-7872 4463-8456 4811-7456 4392-9332", "2898-5560 3700-7950 6447-7229 7377-9800 5229-9868", "2392-4280 261-7133 7295-7623 2091-9995 1697-8780", "5439-5544 1124-7555 596-9533 339-3414 9387-9681", "4471-7911 679-9994 3035-9179 6263-8194 778-9369", "145-9305 667-9962 782-4013 3252-3380 2978-9973", "1677-8482 1176-2597 1293-4631 717-6449 1954-5655", "5815-9964 2901-8239 340-6803 1312-5724 690-9790", "415-7427 3519-8686 1239-3261 1964-7666 3283-8772", "3492-9471 1717-5592 4054-8066 1357-9832 1181-9479", "1492-9130 931-6334 5858-7365 45-9381 2092-4482", "584-5478 2074-9294 433-8981 3744-9175 7080-7165", "132-7212 1860-7660 1186-9882 3668-6827 4219-5512", "2041-8272 7-8157 1880-7047 4694-5567 1918-7941", "606-9978 3323-3980 1713-8064 941-9656 4269-8619", "3780-6870 166-9774 1618-9139 105-6322 1219-9226", "2671-7882 330-7956 1079-8036 117-8983 6242-6704", "3448-9083 463-8652 902-8160 2365-6154 3428-5993", "2429-3683 3909-7095 4500-8708 1994-9745 2492-6328", "3988-8974 638-7094 3282-9094 721-9806 624-6145", "1553-9990 2270-6770 561-7573 4037-9532 1212-7491", "5608-9726 4562-7438 3335-9556 1402-8862 458-8887", "674-9762 3451-8788 705-5300 211-8057 4673-6881", "2109-9324 2447-8199 1231-7918 2120-9844 6218-7618", "305-9830 1992-6500 4957-9368 169-9545 1499-2722", "1705-9485 2092-8099 4236-9900 4408-7712 2196-4249", "629-8330 336-4474 461-5426 3369-4379 295-3298", "348-8889 318-8836 4989-6497 5678-9912 3768-5521", "4159-9056 800-9087 1395-8046 7523-8548 1943-8690", "1247-6552 7-5841 2424-5765 6644-8146 5239-9207", "2722-5384 348-3636 870-5414 6956-9805 940-9792", "605-8308 1103-7419 3544-8348 798-9295 2673-9558", "2266-5782 1269-6256 3516-5873 934-8946 160-9824", "100-8014 1666-9255 2422-9064 1958-9391 3316-9903", "2353-9795 477-4326 532-8494 3064-7780 577-9794", "1032-8027 2743-9402 8642-9256 3707-9509 1764-9784", "819-5847 2228-6432 768-9222 5616-6303 1025-9547", "120-5435 523-9052 3260-4922 4009-4512 417-1546", "792-8684 22-8545 1904-9772 1718-9662 2328-8340", "1720-8302 455-8449 1774-5521 1421-9451 1548-5142", "7949-9541 1058-6083 3481-9953 542-9147 2852-9503", "3385-5751 114-9051 757-3734 702-7955 245-9993", "2669-4590 182-7409 4924-7564 1880-7870 5028-6181", "68-9561 2317-9127 419-9085 332-7437 1444-6024", "1642-9591 1099-8318 493-9695 234-7247 3117-3273", "8202-9986 1416-5797 2691-4153 1332-6871 505-7139", "1609-7067 687-3755 4010-9372 2590-9996 1556-8437", "2053-8030 1532-8047 2256-9324 1065-9559 2637-4626", "3636-6518 6948-9522 3488-6684 361-7507 846-6143", "634-5933 768-2582 2561-6972 650-9005 1616-8775"};
    int seats = 150;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> travel = {"7594-8011 3569-8505 5368-9867 4540-8969 5-8606", "890-7764 31-8589 149-8261 3994-8097 19-6871", "2135-6537 659-9578 2108-7477 4218-8190 6715-8120", "2813-3908 2337-6505 3019-8050 3267-5692 714-1745", "95-9961 388-7064 882-9897 757-8930 3025-7006", "1347-8517 2595-9388 530-9847 1874-9989 2443-2647", "4608-9223 5809-8626 2097-9916 162-9008 5954-9401", "96-6643 3230-9723 920-9598 867-9898 1342-5738", "5911-8964 5551-7122 87-8085 171-9563 1215-6009", "303-6677 1204-9616 3239-9823 82-9007 4921-6423", "584-8857 1486-9016 2741-9807 5026-9779 5249-8078", "112-9732 108-6591 936-7394 1028-6413 4689-8933", "2086-4018 2377-9069 797-9997 6305-9052 3481-8330", "513-7819 927-7743 513-4447 422-7423 1933-6708", "3404-9610 863-9871 604-9667 169-9997 1480-7895", "1701-9619 6202-7859 1023-6713 619-7317 3706-6561", "5397-6219 1705-9721 5967-6442 69-9825 1923-9955", "4894-9674 1115-9446 1580-7480 4051-9707 1471-9738", "529-8724 2969-7569 1611-9549 316-8318 159-4362", "1636-5595 2985-7517 6192-9407 6549-8860 8852-9176", "97-9221 1263-7872 952-8020 4959-8466 1204-9948", "29-6623 1224-8660 2241-9988 4672-9610 382-8510", "5815-9722 652-9353 3683-5430 573-7056 157-9971", "756-2575 785-9362 8713-9955 605-9216 4499-6560", "6072-7480 4968-9856 226-5247 1530-2151 1182-4742", "1250-7714 1324-5484 1274-9073 145-3818 2188-9597", "841-8980 3696-9660 1982-9677 6264-8746 4191-5331", "4696-7140 3669-8170 122-6881 3817-8751 1027-6868", "1050-9924 3727-4174 1139-9911 455-7650 1646-9427", "6344-9092 275-9711 6791-9946 495-7336 6592-7679", "2900-8188 895-3792 235-8309 1180-4058 2309-3562", "2868-4692 660-8676 3707-5410 57-9090 3674-9587", "1285-6993 134-9287 780-9025 4218-9791 2790-8009", "1615-6324 62-8142 4720-9480 4905-9858 225-9484", "684-3308 2960-4937 252-9893 537-8623 699-7229", "1770-8020 2110-8868 2-9958 3153-9432 1369-4672", "746-8135 9-8569 812-9497 2682-7757 3810-8408", "628-3382 1040-8614 8393-9039 629-8450 83-9855", "25-8655 1260-7978 3347-4270 6579-8635 2809-9725", "1589-7828 44-7379 2177-9466 1135-2367 759-4497", "3816-8043 56-9961 1939-9770 69-5154 203-9926", "3558-9190 3380-7836 2245-9106 4379-6207 17-9562", "2477-7658 2197-6598 4098-8271 8781-9842 1483-7606", "4282-9855 6096-9223 50-9506 591-5326 2265-7534", "1172-9716 156-9706 3301-9243 964-2978 327-6569", "94-5725 4071-9291 1290-8858 1082-9279 3400-9979", "1370-8261 1011-5882 2569-3677 2615-9908 433-9905", "285-7179 1440-8864 1291-9469 3241-9252 972-2672", "323-7384 1706-9594 2901-9260 8769-9960 596-9727", "3827-7046 6466-9703 8043-8538 3518-4998 605-6043"};
    int seats = 178;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> travel = {"54-6368 9-6424 23-5508 14-9835 11-9621 53-9868", "27-9051 62-8127 12-9961 24-7782 10-7043 24-9905", "58-7635 13-7392 15-8286 6-9622 1-9102 5-9856", "3-8673 88-6377 34-9421 86-8536 65-8887 1-8628", "30-8418 26-6507 27-8032 27-9904 50-9754 9-7797", "20-9516 5-8912 19-9708 16-8939 66-9997 7-7934", "1-8664 58-8811 39-9865 46-8755 3-7045 15-7192", "4-9273 55-7370 45-4827 2-9954 10-9886 69-4620", "36-2786 46-6773 39-9922 2-8615 64-7895 11-9884", "52-6952 23-9444 25-9936 28-8963 31-7783 7-8336", "3-9379 16-5426 27-9375 57-7677 17-5571 23-3521", "29-7262 9-4178 1-9102 9-7823 77-3264 42-7106", "71-8586 45-5784 26-4689 11-9808 39-9648 19-8148", "11-8604 46-9314 34-6486 16-9732 6-8553 28-8819", "4-2648 32-9554 8-6964 30-8447 60-9392 36-6737", "55-7539 52-8249 6-9170 12-3300 6-8263 24-8726", "61-9143 31-7699 24-9216 5-8950 65-5873 14-1958", "1-9301 78-9678 19-9364 16-8500 1-8908 13-7359", "70-8814 10-6108 55-9351 3-8373 43-9598 6-8068", "23-8707 25-9996 17-7813 3-9726 19-9410 45-7582", "2-9033 48-9131 10-9320 11-7598 75-8229 30-7745", "42-9837 22-9821 53-8002 5-9673 3-4959 5-7588", "36-9048 5-9545 60-6058 88-7729 39-6134 22-9828", "8-7815 29-9620 31-3987 65-9552 27-9482 40-9957", "33-8996 3-7818 1-7323 45-9647 89-4433 29-8502", "3-9655 1-9721 7-6964 23-8149 34-8934 2-8449", "2-9989 32-8546 45-3256 65-9670 25-9379 5-5095", "54-9964 2-9935 51-1390 32-7209 18-7390 16-6237", "10-6594 17-4543 9-9127 60-7172 2-8176 2-5078", "12-8673 30-9987 23-5382 19-8265 27-5513 22-9617", "54-9941 14-4995 7-4966 20-8892 31-9993 65-9638", "2-8011 87-4219 18-9815 27-9177 36-5583 51-9330", "7-9803 27-8957 53-7537 8-8900 34-3070 61-9736", "30-6790 58-9224 69-7466 14-2866 42-3237 16-6339", "7-9226 6-8718 15-7787 17-6884 8-9424 11-6922", "13-9736 38-7681 3-9457 39-4766 16-8625 9-9530", "32-7096 1-5466 1-6324 7-9964 18-7887 29-9949", "30-8556 24-9943 8-9173 2-2580 1-9939 40-8701", "4-4203 7-9987 28-9078 13-6847 4-9229 60-8845", "55-9316 43-7457 46-4413 47-4903 22-7813 59-9155", "11-6966 35-8876 26-9957 9-8421 8-7959 33-7707", "9-5680 1-9577 49-9786 63-4051 82-8397 76-8533", "1-9901 4-7830 20-8938 11-4406 9-9392 50-1835", "83-8187 4-4319 43-7597 3-8947 8-8659 14-6991", "2-9683 64-7585 2-6586 1-6493 8-6232 36-8891", "37-8007 36-9008 45-5548 36-3565 5-9945 3-8543", "49-9411 31-8217 93-5332 4-4277 84-6849 39-8727", "23-9974 50-4658 63-5207 53-8471 3-8879 14-8162", "30-6900 23-6923 44-8503 37-8346 21-9998 21-8738", "16-7915 9-7377 11-8833 48-7586 16-8968 59-9161"};
    int seats = 205;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 95;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> travel = {"1-7497 55-7017 3-9763 80-8811 20-9337 19-3203", "37-9159 7-9358 5-6388 23-9465 20-7630 8-6528", "5-5253 30-9646 1-3736 21-4336 24-8437 14-8225", "34-8489 10-8616 1-8263 36-6925 14-7838 77-8900", "13-6673 15-6309 5-3496 10-4031 29-6939 5-8887", "2-7856 85-8722 1-6779 17-7421 2-9963 63-9560", "32-6755 4-7419 23-4683 53-4127 14-9985 20-8511", "27-9076 52-4374 4-6650 30-7321 39-4676 7-4521", "45-9954 1-6574 4-9103 2-9023 20-8524 2-9629", "7-4797 17-8392 71-3105 8-7631 39-6983 20-9888", "74-8794 40-9886 3-9813 21-2952 10-7867 10-9989", "72-9041 24-8889 38-9981 4-9049 8-8054 53-1712", "68-9713 24-4781 53-8847 38-9887 60-8863 80-8414", "32-9223 4-9297 42-7812 21-8189 35-7999 11-8767", "63-9643 8-5940 21-3549 46-9963 95-5879 46-4253", "48-9226 11-7706 68-9958 1-8316 48-6200 12-8579", "6-6670 32-9916 6-8787 17-8859 11-8678 3-5051", "18-2701 51-9717 7-9511 8-6445 6-3940 21-7679", "1-8929 55-7990 20-6485 1-8650 24-9958 7-8093", "67-8424 43-5262 5-9333 10-8766 17-9987 5-9130", "14-9421 32-5369 3-9497 13-3198 3-6432 37-7986", "13-9690 97-7142 4-5283 40-9118 12-7968 56-9347", "91-3448 7-8588 11-7960 88-9968 2-5931 34-3066", "40-7945 47-7141 12-9877 16-9659 15-3658 3-9049", "51-7739 49-8869 16-7541 18-8775 41-8927 15-9153", "23-8277 42-6958 2-4448 51-5639 61-6908 27-8140", "5-9922 12-9924 46-6239 60-8914 28-9332 30-5773", "4-8429 12-8664 2-9191 9-8385 25-7398 4-9980", "37-7140 33-6157 20-6967 20-9807 32-4247 25-7387", "4-9810 4-9629 38-7343 42-6667 25-7725 28-9191", "37-8523 47-9730 42-9542 9-8180 2-7751 8-9061", "3-8281 49-8372 14-9261 28-8633 39-8981 3-9843", "3-9163 43-7824 1-6188 51-7660 19-9714 16-9988", "22-9257 9-9402 3-6951 3-9189 17-9894 21-9030", "63-5205 8-4123 11-5152 30-2256 17-9421 2-9883", "17-8613 9-8529 3-9684 8-9992 34-8422 61-7099", "4-8839 5-3669 1-9921 46-6933 43-7688 39-8662", "9-6407 79-9024 45-8037 21-5617 42-9923 10-9674", "35-9025 17-4303 7-8758 24-9661 10-7444 52-5107", "3-9195 35-5625 18-9397 21-7418 36-6263 28-5031", "56-9467 23-9521 46-8646 50-7216 47-8477 46-6696", "61-9961 18-5759 66-7988 13-9731 58-9929 4-9923", "78-5784 14-8208 8-9944 3-9753 23-9802 3-9736", "18-7762 77-8996 24-7043 10-5773 1-9970 34-5469", "27-9548 36-8849 38-5374 21-8895 10-4072 50-9012", "5-8776 13-8682 52-5192 2-9131 11-7246 1-5376", "49-9640 10-8944 34-9251 54-9666 54-7722 76-9930", "2-8588 9-8129 11-9806 37-9590 44-9173 66-8485", "16-7208 34-6258 9-9643 37-9887 7-8907 3-6915", "30-8906 83-3323 73-9206 54-9963 6-9459 22-9887"};
    int seats = 252;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> travel = {"14-8264 19-8450 18-7374 48-9643 30-8227 26-5277", "20-8232 30-4124 7-8288 30-8896 1-8547 10-9724", "70-7456 20-9681 3-9812 2-4182 2-8891 10-8555", "9-7128 23-9390 46-6873 6-6673 1-9817 85-8082", "28-7325 14-7915 67-8038 18-8107 5-4686 12-7266", "30-9401 6-9828 43-7768 35-5549 19-8451 28-9014", "14-9956 4-9151 6-8363 6-5560 22-3346 6-9539 2-5934", "53-4708 42-9175 4-8494 21-8295 7-7272 7-5959", "49-5995 10-7007 4-9527 4-9658 50-9250 25-8839", "59-8851 61-9758 22-9987 22-9676 2-8805 19-9121", "9-9331 15-6501 69-9033 18-4824 26-4504 10-5618", "6-7996 32-7052 39-9162 44-6437 89-6961 1-9916", "3-8324 40-9388 95-9967 16-7077 45-9035 8-6466", "2-7836 21-8452 14-7296 5-8556 40-9311 23-9971", "46-3118 51-9059 28-9536 1-8853 30-9833 40-9712", "3-8709 14-8307 16-9710 44-9681 43-8835 3-8523", "43-5030 1-8875 1-2567 44-6693 2-9794 1-8662", "63-8958 6-9733 48-5164 27-9949 22-8553 32-5767", "10-9925 1-6137 11-4658 38-4351 21-9333 6-8265", "49-5015 10-9538 21-4606 79-7052 16-9268 2-7146", "20-9650 14-7538 36-6397 6-5305 33-7544 12-8648", "56-8992 6-7535 20-9062 4-9504 16-9894 6-9229", "27-7795 57-3605 6-8903 12-8711 7-3741 24-8020", "18-7548 34-6906 1-9453 33-5321 34-7531 32-9188", "9-9384 8-9939 1-3525 6-7979 9-7256 5-4930 8-9956", "12-5296 98-8705 7-4592 49-4156 5-8798 72-9243", "61-6840 12-7236 6-6182 4-9889 44-8422 12-9480", "81-7763 30-9914 2-8227 49-5077 23-9709 47-8787", "3-8670 45-9582 4-9884 1-4625 9-9530 55-9063", "54-9037 13-9787 46-5966 38-8609 10-9582 6-2672", "6-7277 7-7060 52-9941 64-8172 20-9074 1-9728", "9-7157 1-8116 17-7280 24-9081 42-8605 88-8869", "22-9852 14-7751 3-7044 15-9961 11-8337 4-6083", "3-7799 2-6591 5-9221 3-5123 14-8384 14-9711", "73-4975 18-9779 49-8120 21-2611 8-9692 12-9982", "1-8532 5-9092 71-9306 13-7267 23-8367 66-7228", "22-9861 19-6310 46-9312 26-5540 45-8761 1-9687", "3-8866 11-8969 2-9579 30-9935 7-6588 37-8300", "58-8254 53-3363 36-8022 81-4718 10-9479 17-8583", "28-7509 19-8836 20-8272 32-9198 7-8664 24-6575", "73-9285 14-7947 4-7130 5-8462 42-8687 50-9822", "15-6835 2-9823 1-9781 2-8793 23-9953 28-9811", "14-7822 10-6719 31-9811 3-5429 40-8088 42-5885", "45-8755 43-8332 27-4921 2-7316 22-5834 2-8068", "11-6967 11-7514 65-9754 45-9027 47-6308 15-7052", "3-7893 12-9676 19-7938 5-9675 70-2779 43-8267", "27-9987 9-9656 30-9073 95-5071 37-9280 16-3267", "1-6917 24-4808 76-3928 25-5797 4-6967 55-7925", "4-8959 12-9091 7-6193 87-9074 73-7033 72-8726", "44-5811 13-8820 84-8256 57-4884 30-8972 19-6838"};
    int seats = 221;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> travel = {"6-8436 6-5729 4-9621 5-7085 62-8484 3-7876 9-9828", "13-9938 78-6994 61-8173 28-5621 70-7231 6-9251", "9-5849 8-9058 3-9391 8-8709 28-4986 10-8343 1-8588", "2-9549 37-9748 16-9403 42-9036 36-6026 24-4294", "33-4752 1-9393 14-9081 11-6073 13-8498 1-5659", "22-2594 8-3742 2-8103 20-2963 59-1313 52-8903", "52-8502 16-7070 18-9645 29-9925 37-9390 12-8832", "14-9564 55-8915 30-7826 62-6095 14-9361 10-9368", "16-7393 13-9418 12-5630 15-4224 19-8247 1-7903", "29-5497 34-7035 16-9157 14-9550 26-7039 14-8801", "17-8493 28-9284 28-6881 80-6913 12-9695 1-9736", "18-8729 31-9196 15-8325 32-9475 1-6945 64-6612", "47-7917 19-7641 5-9587 20-7677 25-9138 20-5192", "3-7909 9-3733 62-9596 3-9120 2-9268 62-9607", "71-8992 9-9138 4-7549 16-9325 61-9112 1-8669", "12-7174 16-9992 4-4523 20-8113 81-5230 56-7539", "1-7801 3-9436 27-8239 18-7126 50-9990 1-1846", "78-10000 3-9224 36-7276 43-5342 26-9539 7-9435", "19-5541 8-6392 24-4171 46-9606 21-3340 92-4949", "57-8012 7-7465 88-8896 63-5627 41-9915 7-9986", "9-6455 13-9345 9-9880 75-8343 26-8571 28-7069", "26-8890 28-8304 42-9981 11-7923 33-4614 7-2378", "55-3089 75-9565 38-9904 66-4591 31-5924 29-9872", "5-9479 22-9719 32-9397 84-8933 23-9393 34-9445", "51-9428 28-9650 16-6671 26-9899 12-9880 25-4645", "20-7038 10-9757 14-9224 57-6202 45-7109 39-9847", "1-8856 22-9744 30-6018 1-9124 3-5073 21-6271", "41-6090 53-9401 46-7179 55-6449 13-7368 22-9387", "36-9507 7-5396 21-6242 12-9853 15-2312 9-8975", "25-7006 64-6421 5-3798 44-9021 9-9219 8-9724", "7-8088 15-9571 3-8064 25-8563 49-9952 26-7609", "44-8489 18-9987 11-8792 4-9773 10-6188 61-6399", "22-8197 77-9728 14-6955 58-7760 25-6298 67-9579", "4-8086 49-7334 11-5992 37-8415 41-3426 43-9454", "3-2934 4-8980 16-9782 17-9872 1-5814 26-8473", "29-6130 17-9225 60-6269 66-7572 24-9893 11-9380", "8-9619 28-8369 39-8791 21-8192 30-7888 9-9609", "51-5954 9-8880 2-3675 21-9188 54-3864 32-9255", "50-8550 67-8020 25-8333 23-8735 9-5585 15-9592", "3-8863 6-6203 2-8687 14-7219 13-9836 31-8405", "22-5674 35-7209 45-5038 7-9009 2-7104 6-9895", "10-5861 15-1823 57-5689 4-8820 34-6053 56-5374", "16-9464 33-9749 65-5272 38-8140 66-5510 5-9348", "3-9057 48-9801 55-4583 31-4603 40-9920 58-8922", "5-8697 32-6056 73-3471 12-9742 22-8332 15-4311", "34-9415 49-5612 7-9178 69-7583 39-6184 1-5905", "78-6505 2-8919 25-5044 79-4630 10-9040 2-2652", "14-7082 26-9655 42-8213 35-6162 51-3061 20-9055", "6-6290 19-9283 32-8122 3-9609 92-9435 13-8861", "60-8366 15-8042 74-8875 12-6238 3-8819 24-9788"};
    int seats = 212;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> travel = {"33-9280 20-9112 57-9906 17-8699 37-2288 10-7172", "17-8606 1-7242 10-4603 13-7450 22-7536 24-9888", "10-9269 32-9697 25-6449 40-9602 37-9792 44-7774", "1-9977 51-5171 86-8881 21-9939 65-3850 44-6494", "56-8817 16-9680 8-6834 20-5915 21-6723 1-9181", "4-4809 11-6405 24-7767 40-6552 25-7509 22-9762", "15-9145 12-3368 42-9455 2-9044 34-6938 47-7173", "3-9988 10-8938 16-7035 68-6685 43-8980 33-9789", "29-9520 40-6252 26-7659 18-9856 32-9174 11-9968", "9-6269 4-8787 67-9651 51-6617 37-9816 18-5991", "62-1544 30-6735 7-3786 59-9705 19-9718 47-7313", "17-9994 19-9333 63-5459 1-9089 25-5161 65-6675", "49-5725 48-5230 19-7254 8-7805 45-9958 31-9789", "2-9916 26-9017 29-8592 11-9932 51-9374 53-4554", "36-9796 24-5092 63-6279 90-6195 27-9367 28-6348", "16-7215 29-9523 64-6191 18-9774 31-9209 38-9551", "17-9361 50-8456 4-8053 83-7650 6-8332 5-7987", "33-7936 50-8402 5-4514 4-6624 5-8958 5-6960", "56-9902 16-7714 42-8798 20-9835 34-9919 41-4983", "15-6144 32-8206 8-7763 16-7663 21-7702 14-3655", "8-9996 3-9771 21-7669 70-8956 33-5189 2-9929", "8-4721 2-8732 6-7517 2-8046 5-3019 45-9847 1-8073", "56-9016 48-9687 2-5278 6-9457 31-9656 26-3724", "18-9345 25-2811 16-1485 45-9568 12-8428 19-9501", "14-9731 7-7639 41-9726 38-7925 51-7232 30-9765", "40-5480 56-8903 46-4721 30-4719 73-6765 15-9974", "2-7667 12-9768 7-9324 56-9229 5-7841 66-7735", "14-7035 23-8824 7-4382 54-8809 7-9770 25-5137", "11-4037 43-9003 28-4390 27-7013 1-7918 33-3624", "19-1232 1-9408 3-5894 1-7742 58-5916 52-8778", "15-9158 26-7107 4-8146 37-9752 20-9092 4-8868", "75-9934 21-7096 23-9601 39-8004 37-9454 18-6586", "20-9832 89-8335 8-9401 49-7443 54-8321 89-5661", "17-9721 11-7546 47-9927 4-8621 6-8435 47-7994", "18-8341 3-4742 9-9572 7-8749 77-9995 19-9927", "52-4855 27-8653 15-3606 11-8245 3-9346 21-9476", "2-7451 34-9900 46-8993 63-9052 47-9560 57-8304", "22-7055 71-7687 24-3676 46-8461 26-7148 5-7949", "22-5958 5-8466 29-5899 26-9415 29-8779 4-8421", "16-8367 11-7146 4-2302 37-6618 24-5151 12-9250", "78-9424 1-6404 13-8830 6-7846 3-9188 19-3373", "37-9786 72-2823 2-7707 30-6387 71-9844 41-9753", "72-5274 2-7232 10-9674 3-9872 14-1900 11-9905", "19-9489 11-8419 8-7716 80-4403 60-9536 9-9463", "59-8037 4-6629 12-7054 28-5594 15-7601 42-4849", "61-9967 10-4318 1-8699 16-9967 59-8199 16-9870", "34-8716 71-7043 27-8194 7-9949 47-8837 4-6851", "22-9202 3-9417 26-9193 45-7521 63-8831 11-9190", "82-8866 9-6308 3-7770 8-8668 26-8995 66-9933", "5-9509 5-9677 8-9824 73-8209 46-9472 25-9874"};
    int seats = 297;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> travel = {"202-1707 728-1428 56-1254 1191-3444 1310-4087", "574-6005 2521-3663 2577-8160 87-2721 7570-8833", "1286-1702 607-952 755-975 20-249 4239-8377", "238-4618 2414-7488 296-1726 679-4507 355-7514", "1351-7686 2665-3099 569-1463 1190-2112 2250-5171", "255-1406 1511-2252 1671-3043 737-6125 601-7775", "147-499 389-1830 2048-6317 1321-6271 2171-6737", "1164-3275 4983-5512 71-1667 771-1531 1322-5523", "761-1023 5479-6237 5546-7409 528-2193 696-3674", "470-2230 3850-6884 257-550 597-4355 3856-5273", "669-3255 1144-1827 37-528 76-2838 175-3362", "2181-2999 1571-2792 987-5524 258-3934 2514-6622", "4481-6790 129-8868 747-5750 713-1354 387-8284", "1442-7285 1100-3092 1400-3344 634-2229 91-323", "395-907 189-6781 632-2932 3764-5648 424-5222", "140-3220 448-3291 2031-7230 176-652 1285-3811", "1507-5114 568-1826 3895-8830 1021-1253 604-4763", "2568-9457 762-4529 650-1966 523-1887 169-273", "2629-2781 1575-3926 6929-7391 316-1062 2058-3385", "202-3904 702-1701 774-4047 627-689 6817-8337", "430-572 702-8154 144-1619 1965-2761 238-2449", "780-1628 853-1665 416-893 1061-1146 1276-3741", "111-2065 7144-7554 576-1422 1247-1356 113-3049", "246-723 1245-3568 2940-5687 760-6376 163-264", "3755-4253 49-2319 7722-8525 303-8009 1585-4046", "881-2603 432-2329 111-703 1093-3063 736-862", "4512-5346 680-5727 85-3490 659-1419 2828-8090", "195-3101 1021-5799 348-807 2377-4775 3138-3737", "1877-3726 1481-3918 3464-7994 234-1811 2772-3201", "5133-6381 2174-6329 1409-1573 1001-1836 3012-5148", "5103-6114 1180-5649 37-2204 1260-3415 298-646", "380-2448 16-1921 417-1527 1814-7760 399-2100", "1135-3957 619-1194 824-6168 498-4358 186-1928", "193-282 4272-5113 1100-1369 666-5233 903-1213", "2049-2818 1431-2229 519-4973 359-3934 402-785"};
    int seats = 16;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> travel = {"440-5012 458-637 957-1177 340-4276 2769-3431", "630-1490 2096-7436 48-969 1911-4492 1389-2386", "441-824 1863-3279 962-1151 1621-2069 424-1287", "2539-6824 2951-4864 462-1930 2243-2979 3987-4391", "2258-2550 76-2001 68-3671 917-3477 266-1899", "1267-2832 1311-3401 3881-6366 4325-4749 160-1620", "2110-4482 651-2633 114-2122 4261-4486 170-1067", "17-2542 392-4712 2018-2605 2534-5084 29-1550", "185-1074 714-884 1171-1738 488-1644 1399-1885", "539-893 955-995 1011-1589 764-1983 961-3996", "61-248 138-658 92-1389 2132-3464 259-2622", "3304-4510 1910-4996 2024-4075 254-1405 3118-5246", "7215-9659 217-587 3311-6656 168-2772 1012-3301", "698-5977 639-2469 590-3620 200-1054 947-1034", "556-2670 1586-5180 21-55 3480-3763 219-446", "1617-1770 1682-3154 43-246 149-530 968-3466", "345-1389 267-3167 1518-2327 694-4954 443-576", "2186-2557 2039-3938 2624-4752 1852-3191 638-6514", "1101-3601 9-1659 1691-2234 1116-2152 394-3890", "1825-2660 78-3402 79-342 474-896 4318-6391", "312-5515 3023-4774 624-5989 2338-2381 1532-2337", "971-1329 954-6445 1350-1560 1808-5389 3567-5701", "81-219 254-1328 82-5006 1123-1548 1115-6308", "1821-1920 1177-1595 1381-5349 1813-2782 4071-8709", "281-449 490-808 3979-7555 1123-2265 948-3220", "1992-6767 109-111 2680-3675 928-5622 3312-3832", "2545-4378 1300-5771 1264-6997 672-3446 109-1974", "5630-8455 1396-2508 454-4920 210-2900 1833-3687", "3370-4980 399-1738 1553-3816 723-1021 1736-3391", "1663-5738 1900-2296 526-1377 1923-3100 308-2595", "1588-4485 1876-3085 1156-3690 772-1074 2404-3231", "2618-3628 691-7454 726-4374 1825-2075 123-429", "1489-1917 1915-3168 1246-2043 3527-5106 634-1474", "580-3122 5911-6068 982-1415 1758-4726 479-976", "2119-3652 2912-3497 860-7660 1496-1629 26-2991", "135-3156 184-6283 5835-7847 519-5528 1134-2339", "2316-3356 666-3495 2191-4340 2467-3017 311-1300", "3765-8621 184-192 1084-1365 881-8380 150-1462", "2498-4020 278-8662 1460-2667 10-649 3312-5663"};
    int seats = 6;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 136;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> travel = {"308-1667 111-7784 1026-4677 467-1606 213-3087", "3-590 1168-5741 1716-1797 2960-5722 60-898", "1120-7736 766-3467 2853-3288 358-700 3482-6091", "3963-4139 4802-5086 4077-4218 272-307 228-1476", "25-915 871-8508 717-3430 5747-7405 334-2018", "4235-7719 45-1947 1579-2049 1025-5547 161-2519", "354-4066 2530-7408 4377-6159 1208-3902 433-1182", "843-1517 1116-5521 99-5783 211-2925 2126-3125", "3497-5048 865-1837 1135-2740 119-149 300-2900", "160-2704 5373-7905 811-4701 5160-5387 2447-3497", "2715-4290 5033-7028 1721-2610 3360-8570 1313-5682", "361-1223 229-549 429-4843 681-2461 757-5394", "1331-6328 473-5103 1153-2024 328-698 1231-3488", "1875-4052 297-1966 328-575 291-1256 1714-5027", "108-131 3974-4200 68-5603 176-2812 578-4893", "518-4226 297-5502 587-3929 2006-3827 260-3788", "14-7750 170-7615 1776-2606 774-3905 1582-1674", "1561-2333 7-3949 1543-7676 3749-4622 865-3145", "687-4527 2020-8907 1272-5231 508-4392 166-643", "1392-2087 3687-4050 264-2546 862-5002 1050-5518", "231-1694 1942-4090 543-922 687-4797 162-4332", "598-2788 1256-5546 2259-2325 1052-1394 1016-1420", "1740-2418 2997-3237 657-5246 360-2296 488-7831", "3623-8015 702-1255 426-1544 1781-2695 174-3479", "618-6401 97-334 163-5913 2753-7241 4202-7368", "1439-3807 766-4058 298-2415 955-978 720-869", "215-2835 196-4792 72-89 397-6499 611-1226 244-2554", "400-2531 281-615 589-3558 148-221 781-867 489-1449"};
    int seats = 6;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> travel = {"1153-1887 1199-7419 60-3135 4231-6472 4032-4161", "329-7245 435-512 431-1511 261-5063 208-1318", "455-3915 89-743 2036-2593 130-2467 2049-4216", "681-951 4309-4863 697-4081 1218-1621 1472-3779", "1328-1553 151-974 602-4206 625-686 88-1906", "1574-6672 427-3560 329-1177 2904-3380 658-1225", "3-509 1305-4464 2859-3186 676-7227 540-2671", "2046-5670 926-2851 1542-5753 1531-2745 534-3114", "980-2700 81-166 115-1011 3203-4007 211-2138 3-1577", "5750-5769 663-820 955-1602 1834-3632 132-395", "35-750 1406-2584 266-2270 174-5252 1224-2921", "74-99 1303-6439 397-606 721-1899 2134-4620", "628-4608 70-274 2800-7052 333-1653 2161-4954", "61-9503 1661-2926 3858-6735 267-301 5138-8847", "712-5394 2741-8491 4073-4735 83-770 682-1504", "535-2790 26-2698 1523-2944 1266-2066 1150-1357", "117-1533 164-2104 366-3708 1803-2609 1583-4033", "2098-2156 655-6728 4003-4869 1547-2585 86-1965"};
    int seats = 9;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 44;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> travel = {"1546-2429 395-1432 3925-5838 1660-4300 1895-6036", "2045-3161 3039-3878 1161-8755 211-2809 1233-2823", "35-5375 1037-1239 9-171 143-362 184-436 4102-5975", "496-4634 1946-3127 165-1709 2733-6920 1395-9022", "624-1773 536-2691 2997-3183 734-4477 412-4141", "809-986 1233-1508 1091-5667 539-2679 192-1275", "665-1777 955-6171 907-1723 1164-2910 1660-4981", "954-3314 2510-6546 1838-2746 773-2070 1554-1729", "1727-1862 2090-6997 1455-5264 79-1738 2223-6456", "35-606 617-3455 484-2155 323-1157 2644-4804", "141-3712 149-158 488-1041 887-1352 5602-5626", "394-1391 816-1954 291-1576 4871-7456 45-2653", "2354-3798 501-1742 77-2040 503-543 684-2664", "1103-8666 2079-6666 1076-3032 1131-4063 642-4648", "531-1516 1866-3499 30-451 1650-6223 311-3984", "1865-2742 277-2149 2317-2584 506-5353 5179-5489", "1270-1998 2-1463 1152-6828 5630-6925 79-3243", "318-1285 5628-8278 5632-6421 568-4046 135-1436", "873-2855 4616-9673 395-2516 7466-8667 8-8945", "717-1499 6-569 1965-1993 4288-5271 894-1254", "25-3196 21-354 230-1906 1692-6892 107-840", "4238-4653 1179-4481 1163-4872 3912-6172 135-684", "512-4544 92-384 794-4659 1146-5490 1138-1200", "2023-5028 1295-3468 1420-1623 2064-4651 109-6280", "347-2859 173-2508 1483-1774 83-1593 356-1035", "579-2594 2855-5868 4038-4676 117-6039 351-699", "1716-6684 343-4597 1773-2783 1818-2112 1358-6588", "257-1262 1225-3473 489-7483 2070-7453 392-3693", "667-841 1071-3996 577-641 1636-1714 1354-1793", "556-1563 4-1677 1902-5054 1842-5694 2027-6195", "436-3474 942-1047 965-1470 1695-1873 1920-1941", "3540-4809 415-3879 2302-6689 1804-3063 3586-3790", "777-946 211-2249 758-2786 498-2070 986-1333", "2566-2727 2298-7135 37-883 4899-5787 382-883", "1221-1961 2135-2209 2287-5128 3048-4525 508-1171", "187-400 268-2910 2-2442 78-4175 3466-4436 148-614", "390-2393 1065-7058 978-1075 434-927 333-6560", "1587-2733 283-1295 89-2556 678-2467 24-2220", "1726-1797 585-7764 2996-4171 1581-6724 288-4980", "315-2990 259-5664 2355-5645 392-943 1387-3955"};
    int seats = 90;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> travel = {"740-2849 1488-3781 733-5405 746-2950 1590-3888", "26-7899 3878-6939 314-2509 2507-3402 557-1828", "3424-4928 2079-3675 3404-3821 1796-2199 2836-5477", "382-5847 421-3364 183-211 43-1815 2252-5688", "762-7033 1476-3369 1201-3597 4756-6425 456-4107", "4146-4204 2900-4399 165-562 1946-6678 2101-4641", "2524-4910 423-4382 3037-5809 894-934 311-3437", "186-571 618-8978 3939-9475 5963-8596 54-3412", "1067-2724 293-5052 99-1347 5318-5973 2767-3631", "274-950 1741-2430 206-2975 5235-9562 545-2082", "531-1736 419-684 368-8751 33-3563 2183-3769", "291-5844 3507-4406 426-910 9-1464 341-8769", "492-1432 1553-1640 611-3211 43-6976 46-863", "326-2235 506-4242 297-1049 4-506 2139-2918", "4097-4145 2258-5732 280-511 746-4141 1027-3118", "93-4876 1505-3909 602-853 1490-3518 2473-6596", "1794-5360 2535-4516 32-1276 477-2404 629-1568", "5661-6221 5219-5829 674-2444 2565-5742 112-613", "851-8263 1713-3030 3168-3187 1670-2090 2992-4527", "27-487 353-2045 2306-3460 2262-3334 598-2268", "121-530 3891-5640 1430-1534 4016-6239 279-1793", "1543-3135 2190-5065 207-753 1048-5855 763-1079", "6045-7551 2278-4660 389-6298 213-1957 2212-3885", "226-1098 321-1206 1231-3778 384-2142 3183-8959", "265-3670 3178-3713 110-5935 1837-2489 92-3250", "904-4845 43-7603 246-1698 755-6833 1755-5220", "4180-4813 1187-1273 94-830 1356-1462 1344-4205", "336-1396 595-2471 857-2930 4967-6872 1845-4886", "27-433 5694-6359 1951-4783 2372-2846 29-720", "173-4048 1370-6939 23-136 85-1143 4619-5730", "1254-5291 362-1054 4452-7816 1657-3579 3368-8674", "1380-2063 24-4239 1278-1505 1255-3074 177-3200", "433-1562 677-4917 740-5796 3575-4540 37-732", "4661-7288 130-3656 4994-5014 534-3496 1104-3353", "888-4404 1332-1911 29-185 1612-2907 103-360", "543-5022 2250-3832 3480-6651 6152-7252 1516-2169", "1760-2126 194-6164 341-5025 175-2167 49-4137", "410-2419 56-539 1102-3901 5096-5128 1610-2602", "786-1355 2103-5254 374-2415 338-2260 1121-6228", "976-1370 1520-1770 1446-5746 1112-4409 576-4098", "34-157 1208-2752 342-2388 176-4729 693-1159", "652-2516 3490-5427 645-4800 1138-6560 393-1030", "2312-4061 636-888 974-1356 142-2196 1316-1851"};
    int seats = 14;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 121;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> travel = {"250-7387 1499-5762 936-1025 130-4824 1332-4443", "1897-3624 929-1458 517-738 549-779 1569-2852", "1297-1640 3555-7639 3523-3781 3067-5940 2287-4104", "1055-3477 773-1815 807-7109 102-1095 638-8003", "597-4028 1491-1884 1197-3117 133-4122 138-5055", "1030-2620 363-3901 3297-4681 1092-2290 678-817", "429-2174 151-192 1012-1223 345-4543 3238-6184", "2592-5033 440-460 3972-5649 1112-8968 1741-2265", "7-83 2011-4575 80-2019 437-8209 4651-6745 333-1387", "1090-1270 231-1829 2796-3166 4800-5534 1028-3045", "1215-1838 4161-4756 776-6285 826-1553 23-25 6-975", "557-1035 13-6830 1824-5262 612-4159 588-3668", "506-848 159-2537 267-1087 1336-3284 3318-7650", "1558-2359 836-3505 858-5422 2-97 166-258 818-1403", "1453-4382 3275-6191 564-1195 1822-3005 100-1158", "55-78 1960-6835 3142-5900 348-903 4412-8936", "2358-6535 1849-3657 118-3494 496-1121 23-8289", "2125-3421 6956-8464 3581-6776 1632-9571 888-4985", "1131-2436 17-3526 174-3327 1525-4597 554-4165", "2374-5551 73-3108 322-1518 688-1539 1771-3494", "823-2865 33-2714 3440-4569 2-5655 40-1915 37-4196", "2840-5167 2181-7146 2205-7492 2077-2263 3-1169", "281-1456 1085-2062 2930-4982 1130-4979 636-1636", "1-996 332-3835 93-5900 1320-2816 3395-6920", "25-5444 179-2249 47-1801 515-5274 866-1102", "549-8411 1719-4395 19-799 1643-1803 502-6115", "318-6479 236-3216 2565-7195 2426-7259 3738-5196", "3627-4193 3105-3135 361-2648 120-4852 79-1124", "1883-2099 578-2298 115-3008 1004-1680 3866-5806", "1214-4206 2052-3653 468-847 1029-1235 1007-2994", "2452-3004 2533-7536 134-2669 2822-4843 2355-3146", "8-4207 314-2620 11-5907 2510-7041 1200-2017"};
    int seats = 5;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 122;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> travel = {"1063-7093 919-4725 422-4436 236-825 117-1540", "2442-5747 4191-5801 1549-6180 1865-3218 1243-2047", "104-113 5662-5874 218-6531 45-181 5855-8125", "1440-1861 613-2733 176-2997 367-4140 968-2805", "5911-5985 1685-4544 383-815 867-1724 494-6916"};
    int seats = 3;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> travel = {"1484-2299 1626-6374 2943-7536 230-2970 45-2836", "916-3494 516-731 21-1252 963-995 621-3978", "283-2579 907-2092 1934-2749 2975-5718 83-1574", "312-3314 330-5613 1575-3544 483-2835 1383-3415"};
    int seats = 9;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> travel = {"286-3583 288-1596 1632-6273 930-1278 126-158", "541-3147 585-1488 375-5536 529-2383 1-1734", "1833-6042 909-3436 825-3581 29-1532 463-3904", "1384-2617 1257-2516 131-6320 1564-3987 2387-3098", "1370-5548 2547-4145 1202-1817 3812-4510 4858-9212", "503-2058 349-3486 101-2834 2734-2876 667-2215", "433-3973 928-1988 2720-6591 118-4682 698-4764", "2519-4821 1680-2946 725-2190 73-542 1829-6732", "1279-2221 2216-6217 72-1023 383-719 137-2237", "1958-3602 259-2745 114-2557 355-2507 198-4201", "324-2293 1117-1849 3049-6001 542-1729 1275-7283", "864-5545 841-3124 713-2532 1357-7085 2590-3546", "180-1624 27-1513 357-2880 526-4081 795-1008 19-166", "978-1652 897-4690 27-2567 728-2610 31-456 708-2205", "1931-7034 1036-1651 471-657 172-4187 956-3990", "331-709 1281-3070 421-1549 442-1502 592-963"};
    int seats = 48;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> travel = {"41-50", "36-45", "31-40", "26-35", "21-30", "16-25", "11-20", "6-15", "1-10", "13-33", "1-10000", "9999-10000", "9998-9999", "100-110", "101-109", "102-108", "103-107", "104-106", "200-203", "201-204", "202-205", "203-206", "204-207", "205-208", "206-209", "300-320", "300-315", "300-310", "300-305", "305-320", "310-320", "315-320", "2814-5454", "2345-4598", "4865-4869", "3509-4000", "4000-4001", "6000-6001", "6001-6002", "6001-6003", "6000-6002"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> travel = {"1-3 3-6 1-4 1-4 4-5"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> travel = {"1-6 2-5 5-8 4-6 4-9"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> travel = {"3117-9067 4426-6389 611-8102 4983-6451 194-8622", "1755-7039 4896-9594 639-5281 2421-5168 1884-9346", "4697-8866 391-5834 190-7633 184-7840 2130-8818", "680-6754 601-8614 146-8253 2152-9862 3964-8319", "4908-7814 1477-9555 1212-5618 2265-5430 4532-5967", "699-9943 1156-9523 258-7588 4465-8159 3511-8763", "1066-5947 3166-8381 3541-5947 3043-7298 3195-9465", "271-7585 2201-7716 2107-6207 4697-6303 2612-8834", "416-9068 176-6646 3449-6355 3080-9920 1322-7989", "1598-7593 3510-7198 72-8653 4123-5659 2998-6860", "1900-6000 1321-9121 1985-7037 1916-9913 4486-8954", "200-5742 4209-6568 170-6845 4880-9682 2208-6109", "707-5260 4076-8850 125-8027 2775-7608 129-7885", "3146-9547 1715-5482 4169-5150 308-8339 3505-6794", "1698-6106 956-8218 2344-6642 2098-6134 737-5680", "634-9556 931-6955 4905-5253 2489-5280 1755-9871", "2177-6073 416-6702 4232-8087 4976-7481 515-5261", "1658-8939 4439-9991 448-8982 4619-5243 632-6071", "2220-9062 991-8782 3673-7834 1303-6564 1929-5503", "4899-5722 946-6448 2223-8407 795-8687 2845-8578", "1548-8684 486-8241 1724-6465 1654-5338 3131-7169", "1467-5256 2513-9859 3319-9657 143-8202 1507-6277", "685-7703 271-5024 3251-6313 312-8476 4196-6851", "1521-5489 184-6102 2893-9799 1785-8849 2188-5246", "3344-9463 1860-8259 4017-8872 2833-8173 2684-9442", "2016-6089 3517-8977 40-8299 3206-6284 4147-9998", "3676-5770 4388-5918 1031-5021 1736-7443 374-7390", "2074-8481 787-5778 1786-8382 3346-5523 1086-5980", "936-5714 884-9736 1097-7187 2086-5649 522-9753", "1983-9261 2689-6637 2237-9920 2066-6793 4199-9279", "1387-6497 977-6012 2122-7548 2246-8203 3565-6703", "2573-6540 2371-7258 1655-6921 1081-9360 3392-7299", "511-8961 868-9592 1676-7034 500-7137 791-7776", "1257-9377 704-5273 968-5087 3543-9516 3567-8496", "4187-8457 4199-8438 3365-7627 1666-6086 341-8909", "2815-6361 3013-6155 3339-9753 2526-8707 4250-5631", "3080-8180 3839-8314 3422-7518 992-9146 1840-6970", "1566-9309 4474-8763 1971-8682 2054-8148 1509-7709", "4430-6716 2690-6067 1772-9664 1260-5542 3573-8632", "967-7515 3171-5989 2200-8169 3851-5656 2937-8445", "4407-6279 314-9428 2372-7524 2074-8328 2174-8462", "1103-9935 1418-5588 1154-6464 596-6127 4214-6496", "2371-7407 3306-8860 4834-7497 4853-9224 520-7880", "2794-6127 1466-6586 445-6372 2272-7108 3100-9088", "3597-6520 2553-5716 4754-7493 2591-8258 3358-9960", "2810-5887 687-5866 260-7020 2436-7314 4102-6029", "2870-5469 1732-5457 1075-7579 844-6396 3317-6275", "512-5025 723-8586 58-8972 3175-9096 2184-5039", "2296-6659 1984-5723 4504-6232 4301-7233 1481-5591", "506-7409 2859-7703 558-9819 4121-5562 3657-5029"};
    int seats = 27;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 223;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> travel = {"1-2 2-3 1-4"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> travel = {"1-4 4-5 6-7 1-3 3-6 5-7"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> travel = {"41-8549 6334-7172 9169-9935 1478-5270 6962-7122", "5705-8080 3281-6670 9961-9984 2995-7932", "4827-5090 2391-9386 3902-4055 292-2966 7421-8084", "9718-9873 5447-8961 4771-5851 1869-5519", "5667-5968 7035-8034 8703-9168 1322-5621", "7673-7683 5141-7993 8253-9880 5547-6473", "2662-6067 37-2933 8723-9525 7529-8307 2316-5351", "2190-4032 288-1258 9040-9342 9264-9832 7446-8265", "5890-8509 4370-8460 5006-6143 4393-7941", "9629-9638 4084-6290 8756-9400 4966-7308", "3931-5963 6944-8823 4626-5201 5537-9223", "6118-8200 2929-5328 4833-4946 4639-7492", "2704-5338 3977-6283 1673-7405 5021-8871", "6924-7540 6270-8369 6777-9458 5097-6900", "3986-5248 9161-9339 2355-4187 3655-6539", "4031-4145 7350-8500 6941-7252 3966-7396", "1107-4619 8007-9379 5457-8658 7753-9148", "4945-8799 2209-4176 4221-5472 6422-9900", "7506-8066 6413-6885 900-6191 8762-9179 7410-8589", "7624-9153 1548-8031 7595-9231 3602-8758", "291-2000 9374-9752 4596-7001 7348-9331 9668-9916", "8281-9577 53-2052 6418-9282 6900-7588 8127-8594", "3728-6077 4648-5723 7807-8035 4310-5237", "2813-5140 4309-6234 8935-9346 600-5849 6519-6746", "2798-4293 6224-9680 5844-9361 4989-7625", "3195-3265 3093-3622 523-2110 9314-9899 7448-9680", "3458-3534 580-1536 4798-9675 9589-9837 8009-9283", "472-5038 8538-9134 6038-6445 8190-8887 7958-8023", "9815-9948 9156-9695 6202-8836 4272-7143", "328-3630 6362-7610 8875-9183 9869-9968 3844-5260", "1881-9522 322-9295 21-5720 3557-6261 7892-9093", "5075-5937 2600-5110 1003-9878 7861-9715", "3401-6591 5255-7443 5002-5591 4182-8649", "7088-9394 8617-8863 9832-9852 4169-6323", "5721-5794 9976-9985 2368-8164 1425-3405", "3434-6851 7441-9276 145-8350 1718-5471 6139-6979", "6279-9949 6687-9277 2549-5084 9866-9951", "193-3774 3297-3604 8286-8965 4488-9746 2455-5554", "8114-8499 1316-4619 5786-9621 4313-5920", "1185-3608 912-2632 1832-6441 4313-9321 8321-9410", "3646-6212 481-4625 3196-9810 7129-9290 5535-8125", "1173-2812 2044-7791 6292-6775 7253-8048", "6154-8742 4745-9629 3186-4685 4474-4866", "2168-8354 8787-8988 7958-9223 202-3827 6477-7368", "9314-9756 9334-9900 4372-7647 1833-5402", "7487-8141 7518-8249 7773-8865 1763-4431", "7192-9945 3102-4684 9213-9757 4802-8901", "527-3152 1543-3467 1023-4064 3061-3364 1003-1444", "7505-7653 2725-8481 8492-8634 7222-7950", "3064-4028 9187-9417 2413-3039 4270-4790"};
    int seats = 20;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 82;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> travel = {"1-2 3-5 1-10"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> travel = {"1-20 19-21 20-50"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> travel = {"1-1000 1000-2000 995-1005"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> travel = {"1-300 1-3 2-4 3-5 4-6 5-7 6-8", "7-9 8-10 9-11 10-12 11-13 12-14", "13-15 14-16 15-17 16-18 17-19 18-20", "19-21 20-22 21-23 22-24 23-25 24-26", "25-27 26-28 27-29 28-30 29-31 30-32", "31-33 32-34 33-35 34-36 35-37 36-38", "37-39 38-40 39-41 40-42 41-43 42-44", "43-45 44-46 45-47 46-48 47-49 48-50", "49-51 50-52 51-53 52-54 53-55 54-56", "55-57 56-58 57-59 58-60 59-61 60-62", "61-63 62-64 63-65 64-66 65-67 66-68", "67-69 68-70 69-71 70-72 71-73 72-74", "73-75 74-76 75-77 76-78 77-79 78-80", "79-81 80-82 81-83 82-84 83-85 84-86", "85-87 86-88 87-89 88-90 89-91 90-92", "91-93 92-94 93-95 94-96 95-97 96-98", "97-99 98-100 99-101 100-102 101-103 102-104", "103-105 104-106 105-107 106-108 107-109 108-110", "109-111 110-112 111-113 112-114 113-115 114-116", "115-117 116-118 117-119 118-120 119-121 120-122", "121-123 122-124 123-125 124-126 125-127 126-128", "127-129 128-130 129-131 130-132 131-133 132-134", "133-135 134-136 135-137 136-138 137-139 138-140", "139-141 140-142 141-143 142-144 143-145 144-146", "145-147 146-148 147-149 148-150 149-151 150-152", "151-153 152-154 153-155 154-156 155-157 156-158", "157-159 158-160 159-161 160-162 161-163 162-164", "163-165 164-166 165-167 166-168 167-169 168-170", "169-171 170-172 171-173 172-174 173-175 174-176", "175-177 176-178 177-179 178-180 179-181 180-182", "181-183 182-184 183-185 184-186 185-187 186-188", "187-189 188-190 189-191 190-192 191-193 192-194", "193-195 194-196 195-197 196-198 197-199 198-200", "199-201 200-202 201-203 202-204 203-205 204-206", "205-207 206-208 207-209 208-210 209-211 210-212", "211-213 212-214 213-215 214-216 215-217 216-218", "217-219 218-220 219-221 220-222 221-223 222-224", "223-225 224-226 225-227 226-228 227-229 228-230", "229-231 230-232 231-233 232-234 233-235 234-236", "235-237 236-238 237-239 238-240 239-241 240-242", "241-243 242-244 243-245 244-246 245-247 246-248", "247-249 248-250 249-251 250-252 251-253 252-254", "253-255 254-256 255-257 256-258 257-259 258-260", "259-261 260-262 261-263 262-264 263-265 264-266", "265-267 266-268 267-269 268-270 269-271 270-272", "271-273 272-274 273-275 274-276 275-277 276-278", "277-279 278-280 279-281 280-282 281-283 282-284", "283-285 284-286 285-287 286-288 287-289 288-290", "289-291 290-292 291-293 292-294 293-295 294-296", "295-297 296-298 297-299 298-300 299-301 300-302"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 151;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> travel = {"1-2 1-3 1-4 1-5 2-10 3-11 4-10 5-11"};
    int seats = 4;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> travel = {"1-3 3-6 6-8 2-4 4-5 5-7"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> travel = {"1-2 1-4 3-7 5-6"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> travel = {"2-4 6-8 3-6 4-9"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> travel = {"1-2 1-3 2-8 3-7"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> travel = {"1-5 5-10 4-6"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> travel = {"5-7", "1-6", "6-10"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> travel = {"1-3 3-9 6-7 8-9 23-29 22-24 25-26 111-129 113-167", "2-4 4-6 223-345 657-999 786-1042", "1-2 2-3 3-4 4-5 23-29 23-29 1-2 1-2 2-3", "1-4 2-3 3-5 6-7 1-9 1-11 1-2 1-3 1-99 1-44 1-12", "1123-1232 2323-3242 324-2353 23-7777 12-6666", "1-2 2-3 3-4 4-5 23-29 23-29 1-2 1-2 2-3", "1-4 2-3 3-5 6-7 1-9 1-11 1-2 1-3 1-99 1-44 1-12", "1123-1232 2323-3242 324-2353 23-7777 12-6666", "1-2 2-3 3-4 4-5 23-29 23-29 1-2 1-2 2-3", "1-4 2-3 3-5 6-7 1-9 1-11 1-2 1-3 1-99 1-44 1-12", "1123-1232 2323-3242 324-2353 23-7777 12-6666", "1-2 2-3 3-4 4-5 23-29 23-29 1-2 1-2 2-3", "1-4 2-3 3-5 6-7 1-9 1-11 1-2 1-3 1-99 1-44 1-12", "1123-1232 2323-3242 324-2353 23-7777 12-6666", "2-9 3-9 4-9 5-9 6-9 7-9 8-9 11-99 22-99 33-99", "2-9 3-9 4-9 5-9 6-9 7-9 8-9 11-99 22-99 33-99", "2-9 3-9 4-9 5-9 6-9 7-9 8-9 11-99 22-99 33-99", "2-9 3-9 4-9 5-9 6-9 7-9 8-9 11-99 22-99 33-99", "2-9 3-9 4-9 5-9 6-9 7-9 8-9 11-99 22-99 33-99", "2-9 3-9 4-9 5-9 6-9 7-9 8-9 11-99 22-99 33-99", "1123-1232 2323-3242 324-2353 23-7777 12-6666", "1123-1232 2323-3242 324-2353 23-7777 12-6666"};
    int seats = 4;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 138;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> travel = {"1-12", "10-18", "16-30"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> travel = {"1-10 8-12 10-100"};
    int seats = 1;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> travel = {"1-1000 2-900 3-4 5-6 7-8"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> travel = {"1-3 2-5 5-6 4-8"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> travel = {"1-3 1-5 5-7 4-9"};
    int seats = 2;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> travel = {"1-2 1-3 1-4 1-5 2-20 3-11 4-20 5-11"};
    int seats = 4;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> travel = {"4-6", "5-7", "4-5", "5-6", "1-5", "1-7", "3-5", "4-7", "2-4", "6-7", "6-7", "2-4", "5-6", "3-6", "3-4", "1-5", "1-2", "4-7", "5-6", "4-7", "3-5", "2-6", "2-3", "3-7", "3-4"};
    int seats = 7;
    RailwayTickets* pObj = new RailwayTickets();
    clock_t start = clock();
    int result = pObj->minRejects(travel, seats);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22628392&rd=10672&pm=7760
********************************************************************************
#include <stdio.h> 
#include <map> 
 
#include <algorithm> 
#include <string> 
#include <vector> 
using namespace std; 
 
typedef vector <int> VI; 
typedef vector <string> VS; 
 
#define SI(A) ((int)(A).size()) 
#define ALL(A) A.begin(),A.end() 
#define REP(i,N) for ( i = 0; i < N; ++i ) 
 
typedef pair<int, int> TP; 
 
VS SPLIT(string s, string sep) 
{ 
  VS res; 
  string t = ""; 
  int i; 
   
  s += sep; 
  REP(i, s.length()) 
    if ( sep.find(s[i]) != - 1 ) 
    { 
      if ( t.length() ) res.push_back(t); 
      t = ""; 
    } 
    else 
      t += s[i]; 
 
  return res; 
} 
 
map<int, VI> End; 
int N; 
 
class RailwayTickets 
{ 
public: 
  int minRejects(vector <string> travel, int seats) 
  {     
    int i, j, a, b; 
    N = 0; 
 
    End.clear(); 
    REP(i, SI(travel)) 
    { 
      VS S = SPLIT(travel[i], " "); 
      REP(j, SI(S)) 
      { 
        sscanf(S[j].c_str(), "%d-%d", &a, &b);         
        End[a].push_back(b);         
      } 
    } 
    VI A; 
    int res = 0; 
    REP(i, 10345) 
    {       
      VI B; 
      REP(j, SI(A)) 
        if ( A[j] > i ) B.push_back(A[j]); 
      VI E = End[i]; 
      REP(j, SI(E)) 
        B.push_back(E[j]); 
      if ( SI(B) > seats ) 
      { 
        sort(ALL(B)); 
        res += SI(B) - seats; 
        B.resize(seats); 
      } 
      A = B; 
    } 
    return res; 
  } 
};

********************************************************************************
*******************************************************************************/