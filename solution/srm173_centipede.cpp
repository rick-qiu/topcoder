/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=1955
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Centipede {
public:
    vector<string> simulate(vector<string> screenLayout, int timeUnits);
};

vector<string> Centipede::simulate(vector<string> screenLayout, int timeUnits) {
    vector<string> ret;
    return ret;
}


int test0() {
    vector<string> screenLayout = {"# #", "# # # #", "# # # # #", "# # #", "# ## # #", "# # ## #", "# # #", "# #"};
    int timeUnits = 24;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # # #", "# # #xxx# #", "# xx# #", "# ## xxx # #", "# # ## #", "# # #", "# #"};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> screenLayout = {"# #", "# #"};
    int timeUnits = 16;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "#xxxx #"};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> screenLayout = {"# #", "# # #", "# #"};
    int timeUnits = 24;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#xxxxxxxxxx #", "# # #", "# #"};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> screenLayout = {"# #", "# # #", "# # #", "# ## # #", "# # # #", "# # #", "# # # #", "# # #", "# # #"};
    int timeUnits = 74607;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # #", "# # #", "# ## # #", "# # # #", "# #xxxxxxx #", "# x# # #", "# xx # #", "# # #"};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> screenLayout = {"# #", "# # # # # # ##", "# # # #", "# # #", "# # #", "## # # # #", "# # # # #", "# # # # # #", "# # # # #", "# #", "# # # # #", "# ### # # #", "# ## # #", "# # #", "## # #", "# # # # # # #", "# # ## # #", "# # #", "# # # #"};
    int timeUnits = 598273167;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # # # # # ##", "# # # #", "# # #", "# # #", "## # # # #", "# # # # #", "# # # # # #", "# # # # #", "# xxx#", "# # # #xxx#", "# ### # # x#", "# ## # #", "# # #", "## # #", "# # # # # # #", "# # ## # #", "# # #", "# # # #"};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> screenLayout = {"# #", "# ## # ##", "# # # # # # # #", "# # # ### #", "# # # #"};
    int timeUnits = 0;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#xxxxxxxxxx #", "# ## # ##", "# # # # # # # #", "# # # ### #", "# # # #"};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> screenLayout = {"# #", "# ## # ##", "# # # # # # # #", "# # # ### #", "# # # #"};
    int timeUnits = 20;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# xxxxxxxxxx #", "# ## # ##", "# # # # # # # #", "# # # ### #", "# # # #"};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> screenLayout = {"# #", "# # #", "# # # #", "# # #", "# # # #", "# # # #", "# # # #", "# #"};
    int timeUnits = 12;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# #xx #", "# #x# #", "# #xx #", "# #x# #", "# #x# #", "# #x# #", "# xx #"};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> screenLayout = {"# #", "# # #", "# # # #", "# # #", "# # # #", "# # # #", "# # # #", "# #"};
    int timeUnits = 535893420;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# #xxxx#", "# #x# #", "# #xx #", "# #x# #", "# #x# #", "# #x# #", "# #"};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> screenLayout = {};
    int timeUnits = 999999117;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#xxxxxxxxxx};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> screenLayout = {};
    int timeUnits = 823984;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # # # #", "# # # ## # ##", "# # ## # #", "# # # # # # # #", "# # # # # # # # # #", "# ## #", "# # ## ## # # #", "# # # ## # # # #", "# # # # # ## #", "# # # # # # ##", "# ### # # #", "# # # # # #", "# # # # # # #", "# # # #", "# # # #", "# # # # # #", "# # # # # # #", "# # # #", "# # # # ## # # #", "# # # # # # ## ###", "# # # # # # # #", "### # ## # #", "# # ## xxxxxxxxxx ## #", "# # # #", "# # # #", "# # # # #", "# # #", "# ## # # # # # # # # # #", "# # # # #", "# # # # # #", "# # #", "# ## # # # # # # #", "# # # # # #", "# ## ## # ## # # #", "# # # #", "# # # # # # ##", "# # # # # #", "# # # ## # # #", "# # ##", "# # ## # # # # # #", "# # #", "# # ## # # # # #", "# # ## # #", "# # # # # # #", "# # # # # #", "# # # #", "# ## # # # # # #", "# # # # # # #", "# ## # # #"};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> screenLayout = {"# #", "# # # # # #"};
    int timeUnits = 123456;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # # # # xxxxxxxxxx #"};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> screenLayout = {"# #", "# #", "# ## ##", "# # # #", "# #", "# # ##", "# ## ## #", "# #", "## #", "# # #", "## # #", "# ##", "# ### #", "# # #", "# # ## # #", "# # # #", "# ## ## #", "# # # #", "## # #", "# # ##", "# # #", "# # #", "# #", "# ## #", "# # ###", "# # # #", "# #", "# # ##", "# # #", "## ## #", "# # #", "# # #", "# # #", "# ####", "# # # # #", "# # #", "# ## # #", "# # ##", "# # # #", "# ## #", "# ####", "# # # # #", "# # # #", "# #", "# # ##", "# #", "# ### #", "# # # #", "# # # # #", "# # # #"};
    int timeUnits = 193;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# #", "# ## ##", "# # # #", "# #", "# # ##", "# ## ## #", "# #", "## #", "# # #", "## # #", "# ##", "# ### #", "# # #", "# # ## # #", "# # # #", "# ## ## #", "# # # #", "## # #", "# # ##", "# # #", "# # #", "# #", "# ## #", "# # ###", "# # # #", "# #", "# # ##", "# # #", "## ## #", "#xxxxx # #", "#xxxxx # #", "# # #", "# ####", "# # # # #", "# # #", "# ## # #", "# # ##", "# # # #", "# ## #", "# ####", "# # # # #", "# # # #", "# #", "# # ##", "# #", "# ### #", "# # # #", "# # # # #", "# # # #"};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> screenLayout = {"# #", "# #", "# ## ##", "# # # #", "# #", "# # ##", "# ## ## #", "# #", "## #", "# # #", "## # #", "# ##", "# ### #", "# # #", "# # ## # #", "# # # #", "# ## ## #", "# # # #", "## # #", "# # ##", "# # #", "# # #", "# #", "# ## #", "# # ###", "# # # #", "# #", "# # ##", "# # #", "## ## #", "# # #", "# # #", "# # #", "# ####", "# # # # #", "# # #", "# ## # #", "# # ##", "# # # #", "# ## #", "# ####", "# # # # #", "# # # #", "# #", "# # ##", "# #", "# ### #", "# # # #", "# # # # #", "# # # #"};
    int timeUnits = 489389203;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# #", "# ## ##", "# # # #", "# #", "# # ##", "# ## ## #", "# #", "## #", "# # #", "## # #", "# ##", "# ### #", "# # #", "# # ## # #", "# # # #", "# ## ## #", "# # # #", "## # #", "# # ##", "# # #", "# # #", "# #", "# ## #", "# # ###", "# # # #", "# #", "# # ##", "# # #", "## ## #", "# # #", "# xxxxx# #", "# xxxxx # #", "# ####", "# # # # #", "# # #", "# ## # #", "# # ##", "# # # #", "# ## #", "# ####", "# # # # #", "# # # #", "# #", "# # ##", "# #", "# ### #", "# # # #", "# # # # #", "# # # #"};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> screenLayout = {"# #", "# # #", "# #", "# # #", "# #", "# # #", "# #", "# # #", "# # #", "# # #", "# # #", "# # #", "# #", "# # #", "# #", "# # #", "# # #"};
    int timeUnits = 534625;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # #", "# #", "# # #", "# x#", "# #x#", "# x#", "# #x#", "# #x#", "# #x#", "# #x#", "# #x#", "# x#", "# #x#", "# #", "# # #", "# # #"};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> screenLayout = {"# #", "# # #", "# #", "# # #", "# #", "# # #", "# #", "# # #", "# # #", "# # #", "# # #", "# # #", "# #", "# # #", "# #", "# # #", "# # #"};
    int timeUnits = 987654321;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # #", "# #", "# # #", "# #", "# # #", "# #", "# # #", "# #x#", "# #x#", "# #x#", "# #x#", "# x#", "# #x#", "# x#", "# #x#", "# #x#"};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> screenLayout = {"# #", "################################################ #", "####### #", "####### ##########################################", "####### ########################", "######### ############### ########################", "######### ### ########################", "######### ### ####################################", "######### ### ####################", "######### ################### ####################", "######### ################### ####################", "######### ################### ##########", "######### ############################# ######", "######### ################################# ######", "######### ################### ######", "######### ################### ####################", "######### ################### ####################", "######### ################### ####", "#### ########################## ######## ####", "#### ############ ####", "#### ############ ################## #############", "#### ############ ################## #############", "#### ##### ################## #############", "#### ##### ######################### #############", "#### ##### ######################### #############", "#### ##### ######################### #############", "#### ##### ############ #############", "#### ################## ############ #############", "#### ################## ############ #############", "# ############ #############", "# ## ############################### #############", "# ######", "#### ################################## ### ######", "#### ################################## ### ######", "#### ################################## ### ######", "#### ################################## ### ######", "#### ############## ######", "#### ############## ##############################", "#### ###### ##############################", "################### ##############################", "################### ##############################", "################### ##############################", "################### #############", "########################## ######### #############", "########################## ######### #############", "######################## ###### #############", "#################################### #####", "############################################ #####", "############################################ #####", "############################################ #####"};
    int timeUnits = 234893;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {xxxxxxxxxx};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> screenLayout = {};
    int timeUnits = 909238432;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "################################################ #", "####### #", "####### ##########################################", "####### ########################", "######### ############### ########################", "######### ### ########################", "######### ### ####################################", "######### ### ####################", "######### ################### ####################", "######### ################### ####################", "######### ################### ##########", "######### ############################# ######", "######### ################################# ######", "######### ################### ######", "######### ################### ####################", "######### ################### ####################", "######### ################### ####", "#### ########################## ######## ####", "#### ############ xxxxxxxxxx};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> screenLayout = {};
    int timeUnits = 87;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "################################################ #", "#######xxxxx #", "#######x##########################################", "#######xxx};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> screenLayout = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    int timeUnits = 2400;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#xxxxxxxxxx #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> screenLayout = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    int timeUnits = 2399;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "#x #"};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> screenLayout = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    int timeUnits = 2398;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "#xx #"};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> screenLayout = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    int timeUnits = 2401;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# xxxxxxxxxx #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> screenLayout = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    int timeUnits = 4800;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#xxxxxxxxxx #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> screenLayout = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    int timeUnits = 4801;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# xxxxxxxxxx #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> screenLayout = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #"};
    int timeUnits = 4799;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "# #", "#x #"};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> screenLayout = {};
    int timeUnits = 982483198;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {xx # # ## # #"};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> screenLayout = {};
    int timeUnits = 982483199;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {x # # ## # #"};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> screenLayout = {};
    int timeUnits = 982483200;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"#xxxxxxxxxx};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> screenLayout = {"# #", "# # # # # # #", "# # # # # ##", "# # # # # #", "# # # # ##", "### # # #", "# # # # # ##", "# # # ## #", "## # ## #", "# # # ##", "# # # # # #", "# ## # # # #", "# # # ## # #", "# ## # # #", "# # # # # #", "# ## # ### ##", "## #### ## #", "# # # # #", "# ## # # ## ###", "# ## ## ## #", "## # # # ##", "## ## # # # #", "# # # #", "# ## # # #", "# # # ##", "# # # # # #", "# ## ## #", "### # ##### #", "# # # # ## #", "## # ## # #"};
    int timeUnits = 87;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # # # # # #", "# # # # # ##", "# # # # # #", "# # # # ##", "### # # #", "# # # # # ##", "# # # ## #", "## # ## #", "# # # ##", "# # # # # #", "# ## # # # #", "# # # ## # #", "# ## # # #", "# # # # # #", "# ## #xxxxxxx### ##", "## #### xx ## #", "# # # # #", "# ## # # ## ###", "# ## ## ## #", "## # # # ##", "## ## # # # #", "# # # #", "# ## # # #", "# # # ##", "# # # # # #", "# ## ## #", "### # ##### #", "# # # # ## #", "## # ## # #"};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> screenLayout = {"# #", "# # # # # # #", "# # # # # ##", "# # # # # #", "# # # # ##", "### # # #", "# # # # # ##", "# # # ## #", "## # ## #", "# # # ##", "# # # # # #", "# ## # # # #", "# # # ## # #", "# ## # # #", "# # # # # #", "# ## # ### ##", "## #### ## #", "# # # # #", "# ## # # ## ###", "# ## ## ## #", "## # # # ##", "## ## # # # #", "# # # #", "# ## # # #", "# # # ##", "# # # # # #", "# ## ## #", "### # ##### #", "# # # # ## #", "## # ## # #"};
    int timeUnits = 17;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# x#", "# # # # # #xxx#", "# # # # # xx##", "# # # # #x #", "# # # #x##", "### # # xx #", "# # # # # ##", "# # # ## #", "## # ## #", "# # # ##", "# # # # # #", "# ## # # # #", "# # # ## # #", "# ## # # #", "# # # # # #", "# ## # ### ##", "## #### ## #", "# # # # #", "# ## # # ## ###", "# ## ## ## #", "## # # # ##", "## ## # # # #", "# # # #", "# ## # # #", "# # # ##", "# # # # # #", "# ## ## #", "### # ##### #", "# # # # ## #", "## # ## # #"};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> screenLayout = {"# #", "# #"};
    int timeUnits = 39;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "#x #"};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> screenLayout = {"# #"};
    int timeUnits = 5;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# xxxxxxxxx#"};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> screenLayout = {"# #", "# # # #", "# # # # #", "# # #", "# ## # #", "# # ## #", "# # #", "# #"};
    int timeUnits = 24;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # # #", "# # #xxx# #", "# xx# #", "# ## xxx # #", "# # ## #", "# # #", "# #"};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> screenLayout = {"# #", "# # # # # # ##", "# # # #", "# # #", "# # #", "## # # # #", "# # # # #", "# # # # # #", "# # # # #", "# #", "# # # # #", "# ### # # #", "# ## # #", "# # #", "## # #", "# # # # # # #", "# # ## # #", "# # #", "# # # #"};
    int timeUnits = 598273167;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # # # # # ##", "# # # #", "# # #", "# # #", "## # # # #", "# # # # #", "# # # # # #", "# # # # #", "# xxx#", "# # # #xxx#", "# ### # # x#", "# ## # #", "# # #", "## # #", "# # # # # # #", "# # ## # #", "# # #", "# # # #"};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> screenLayout = {"# #", "######## #", "## ## ## #", "##### # # # ###", "## ## # #", "# #", "# # #", "# #"};
    int timeUnits = 1000000000;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "########xxxxxxxxx #", "## x ## ## #", "##### # # # ###", "## ## # #", "# #", "# # #", "# #"};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> screenLayout = {"# #", "# # #", "# # #", "# ## # #", "# # # #", "# # #", "# # # #", "# # #", "# # #"};
    int timeUnits = 74607;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "# # #", "# # #", "# ## # #", "# # # #", "# #xxxxxxx #", "# x# # #", "# xx # #", "# # #"};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> screenLayout = {"# #", "######## #", "## ## ## #", "##### # # # ###", "## ## # #", "# #", "# # #", "# #"};
    int timeUnits = 999888999;
    Centipede* pObj = new Centipede();
    clock_t start = clock();
    vector<string> result = pObj->simulate(screenLayout, timeUnits);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"# #", "######## #", "## ## ## #", "##### # # # ###", "## ## # #", "# #", "# # #", "#x #"};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=7503639&rd=4670&pm=1955
********************************************************************************
#include "vector"
#include "string"
#include "algorithm"
using namespace std;
 
class Centipede {
public:
  vector <string> simulate(vector <string> screenLayout, int timeUnits);
};
 
vector <string> Centipede::simulate(vector <string> screenLayout, int timeUnits)
{
  vector <int> x(10);
  vector <int> y(10);
  int i, dir = 1, steps = 0;
  
  for (i = 0; i < 10; i++) {
    x[i] = 10 - i;
    y[i] = 0;
  }
 
  while (y[9] < screenLayout.size()) {
    for (i = 9; i > 0; i--) {
      x[i] = x[i - 1];
      y[i] = y[i - 1];
    }
    if (y[0] != screenLayout.size()) {
      if (screenLayout[y[0]][x[0] + dir] == ' ') {
        x[0] += dir;
      } else {
        if (y[0] < screenLayout.size() - 1) {
          dir = -dir;
          if (screenLayout[y[0] + 1][x[0]] == ' ') {
            y[0]++;
          }
        } else {
          y[0]++;
        }
      }
    }
    steps++;
  }
 
  timeUnits %= steps;
  dir = 1;
  steps = 0;
  for (i = 0; i < 10; i++) {
    x[i] = 10 - i;
    y[i] = 0;
  }
 
  while (steps < timeUnits) {
    for (i = 9; i > 0; i--) {
      x[i] = x[i - 1];
      y[i] = y[i - 1];
    }
    if (y[0] != screenLayout.size()) {
      if (screenLayout[y[0]][x[0] + dir] == ' ') {
        x[0] += dir;
      } else {
        if (y[0] < screenLayout.size() - 1) {
          dir = -dir;
          if (screenLayout[y[0] + 1][x[0]] == ' ') {
            y[0]++;
          }
        } else {
          y[0]++;
        }
      }
    }
    steps++;
  }
 
  for (i = 0; i < 10; i++)
    if (y[i] < screenLayout.size())
      screenLayout[y[i]][x[i]] = 'x';
  return screenLayout;
}

********************************************************************************
*******************************************************************************/