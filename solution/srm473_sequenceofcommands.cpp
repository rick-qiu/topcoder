/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10979
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class SequenceOfCommands {
public:
    string whatHappens(vector<string> commands);
};

string SequenceOfCommands::whatHappens(vector<string> commands) {
    string ret;
    return ret;
}


int test0() {
    vector<string> commands = {"L"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> commands = {"SRSL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> commands = {"SSSS", "R"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> commands = {"SRSL", "LLSSSSSSL", "SSSSSS", "L"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> commands = {"LR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> commands = {"RRRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> commands = {"SRSRSRSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> commands = {"SSSSSRSSRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> commands = {"SSSSSLSSRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> commands = {"S"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> commands = {"SRRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> commands = {"SSRSRSSRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> commands = {"SRSRSRSR", "S"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> commands = {"LSRSLLRRSLLSSSRRRRRLRSLRLLLSLLLLLSRSSRRLRLRSRRSSRL", "RLLSLRSRLRRRLRLSSSRRRRRLRRLSRSRRLSSSLRSLRLRLSRRSRS", "RRSLRLRRLSLLRRRLRSRRRRRSRRSRSRSSSSRLRRRRRLSLSRLLLR", "LRRSRRSSRRLSRRLRRRRLRRRLRSRLRRLSRSLRRSSRRSSRSRRRSS", "SRRLSLRRSRRLRSLRLRLSSLLSLLRRSSRLRRSRLRLSSSLSRSRLSS", "SRLRRSSRLRSSRSRSLRLRRRRSRRLLLSRRLRRRRRRRRRLLRRSRSL", "RRLLLRLLRRSLSSLRRLRRRRRRSRRRSRRSRRRSRRLRLRSLLSLSRR", "SLRLRLSRSRLLRRSSLRSLLRLLSRSRRRRSSLRLSLLRSLRRRSLLLS", "RRLRSRRLRLRRSSSRLRRLLRLRRRRRRSRSRLRRSRRRSRRRSLLRRR", "RLLLSSLRRRSSRSRSLLRLLSSSSRSRRRSLRRRSLLLSRSRRLLRLSR", "LSSLSRLRRRLSSLSRRRRSRRLRRSLRSSLLLSRRSRRSRRSRRSLSRL", "SRRRLSSLRSLRRRLLLLRRRLLLLRLLSRRRLRRLSRLLRLLRSLLSLR", "RLSRRSLRLSSLRRSLRRRRLSLSSLLRLLSRLRRSSSRLRRLRLRSSRL", "SLSRRSLRLLRRLLRLLRSLRRLSRLRRLRLRRRLRRRSLRRSRRSRLRS", "SRRRRSRRRLRRRRRLRRRSRLSLRSRLRSRRRRRRSRRSRSSLSRLRRS", "SLRRSRLRSRSRLSLSSRRRRLRSLRRRRSLRRLRLSRRSRSSSRRRLLR", "RRLLRRRRSRRRRLRLRSSLLSRRRSLSLLSRRRRSSSRSLLSRRRRRRR", "SRRSRRRRSSSLLSLRRLLRSRRRRRRSRRLRSRLLLRSRLRSLRRRRRS", "LRSLRRSRLRRRSLRRLRRSRSLRSRLLLRSLLSSRLRLRLLRLSSRLRR", "RSSSLRSRSSRLRRLLSRLRSSRRRRRLLLRRSRRSRRRSRRSLSSLRRS", "SRLSSLLLLRRLLRRLRLRSSRRSSSLLLRSLRRSSSRRRSSLLRRLRSR", "LRRLLLRSRRLLSRSLRLRLSRSLSSLRRRRRRRSSRRRSRRLSLLLRRL", "LSSSRRSSLRRRRRRRSSRSRSSLLRRRRRSRRLSRLSLLSLLRRLRRRL", "SLLSLRRRSSRSLSLRSRRLRRSLRLSRRRLSLRLRRSRRLRRRLRLRLR", "LLLSRSSRSRRSRLRLSRRLLRSRSSRLRRSSSRLLLLRRRSSRLLRRSL", "RRRRLRSRLRRLSRSSSSSRLSRSSRLRRSRLSSSRRLRLRSRRLSRRRL", "LRRRRSSLLRRLSRSSRRSRSLRSSRSRLRLLLRLSRRRRSSRLRRRLSR", "RLSRLRRRLLLSLRRSSSSSLRSRRSSSRRLSRRLLRRSSRRSRSRSSRS", "RLSRLSSSSRRRLSLRRLLSLRRSSRSRRRSLRRSSRLRSRRSRSRLSRR", "RSSRRLLRRLRSRRRRRSRSSSRRLSSRRRSSRRSRLRRSLRRLSRSSRR", "RLSLSLRLLRLLSSRLLRRSRSRRRRRRSRRRSRRRRRLRRRLLLSSRRR", "RRLLRRRRRRRRRRSLRRSRRLLSRLSLLLLLSSRLLRLLSRRRSRRRLS", "RRRRRSRSLRLSSSSLLRLSRLRRRLSLSSRSSRSLRRRSLRSRRSRRSR", "RRSSLSLLRSLRSRRRLRRLLLSLLRLSRRSLLRRLLRLRRRSSRLLSRL", "LRLSSLSRRSRRSSSSSLLRRSSRLLRSRRLLSSRLRLSRRRLLLRLRRS", "SLLSRRSSLLSSLLSRRRLRRLRRRRRLRRSRLRRSRRSRLRSLRSRSLS", "LRLLRRSLRLRLSSLLRRSSLRSRRSRRRRLLSSRRRSLRRSLRLLLRRS", "LLSLSLRRRSRSSSSRRSRRSSRRRSRRLSSSRLLLRRSRLLRRRLRRRR", "LRLSLRLLLSRRRRLLRSSRSRSRSSLLRSRSRLRSRLLLLLRRRRSRRR", "RRLRRSLRLRLSRRSRRSLSRRSLRRRSRRSLSLSRRRLRRRSRSRRLRL", "LRRRRRLSRRRSLRRSRRRLLSRLRRSRRRLLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> commands = {"RRRRRRRRRRLLLLLSSSRRRRRRLRRRRRRSRLRRRLRRSRRRRLSLRR", "RLSLLLLSRRRSRRRRRLRRSRRRRRRSRRRLRRRRRRLLLLRRRRRRLR", "LRSLRLRRRRSLRSRLRSRRLLLRRLLRRRRLLRSRRLLRLRLRRRRRRR", "SLRSRLLRRRLLRRRLRRSRLRSRRRRRRRSRRSLRRRRRLRRRSRSRRR", "LRRLRSRSRRRRRRRRRRRSRRRSRLSRRSRRLRRRRRLRLRRRLRRRRR", "RRRSRRRRRSLLLRRLRRLRRLRRLRRLLLRRRSRRRSLLLLRRRRLSRL", "RRLRRRRRLLLRRLRLLRLLSRLRLRLLRRRSLRRRRRRLRLRRRLRRRL", "RSLLRRRRRRRRRRLRRRRRLLLRRRRSRRSLLLRSRLLRLRLRSSSLRR", "RRRRRRRRLRRRRLRLLSRRRLRLRRRRRRRRLRRRSLRRSRRRLRLRRR", "RRRLRLRRRRRRRLRRRRRLRLRLRLRRRRRRRRRRRRRRRRRRRRLRSL", "RSRRRRLRRRLRRRRRRRRLRLRRRRLRLRRLRLLLRLRLRRLRLRRRRR", "LRLRRRLSRLRRLLRRLRRRRRRLRRRRLRLLLRRRLSLRSRRRRRLRRL", "RRLRLRLRSRLRRRLRLRRRLRLRRRLRRLRLRLLRRSRRLLRRRRLRSS", "RRLSRRRRRSRLRLLLLRRRRRRLLRRRSLRRSLLSRLLRLRRRLRRLLS", "RRRSRRLRRRLRRRRRLRRRRLRLRLLRLRRRRRRRLSSSRRLLRRRSRS", "LRRRRRLRRLLRRRRRSLRRRRRRRRLRRRLRRSRRRRLLRRSLRLRRLR", "RSRRSLLLRSRLRLLLRRRRRLRRRLRRRRRLRLRLLRRRLLRLLRSRSR", "RRRLRRLRRRRRLRSLLRRRRLLRRLRRRLRLLRLRRRRRRLLRLRRLRR", "SRRRLRRRRRRRRRLSRRRLRLRRRRLLRRRRRRSRRLLLRRRRRRSRRL", "RLSLRRRRRRSRLRRLRRSSRRSRRLRRSLRRRRRRLLRRRRRRRRLRLR", "LRRRRRRRLRRRRRRSRRLRRRRRRRRRRRRRRRLRRRLRLRSRRRLRRR", "RRRRRRRRRSRRLRRRRLLRRLRSLRRRRRRRRRLRLRRRLRRLRRSRRL", "LRRRRRSSRLRSRRLRSRRLRRRRRRLRRLRRLRRRLRRRLLRLLRLRRR", "LRSLRSLRRRRLRRLLLLRRLRRSLRRLSRRRRRRLRLRRRRLRLLRSRR", "RLSRSRLLRRLRRLSRRRRLRRRRRRRLRLRRLRRLRRLRRRRLSRSRRR", "LRSLRRRLRRSRSRRRRLLRRLRRRRRRRRRLRRRRRLRRRLRLLRRLRL", "RSRLSRLRLRLRLRRRLRRRLRRRRRRLLLLRRRLRRRRRRRRLRRRRSR", "RRRRRSRSRRLRLRRRRRRLRRRRRRRRLRRRRRRSRLRLRLRLLLLRRS", "LLLRRRRSSLLRRRRLRRRRRRRLRRRRRRRRRRRRSLRSRRRSRSRRRL", "SLRRRRLLRRRLLRLRRRRLRRRSRRLRLRRLLRRRLRRRRRRRLRRRSL", "RRLRSRRRRLRRRRRLRRRRRRRLRRLRLRRLLRRRLLLRRRRRRRLRSR", "RRRRRRRRLRRLLRRSSRRLRRRRRRRLRRRRSRLRRRRRRLSRSRRLLR", "LSRRLRRRRRRLRLRRRRRRRLRRLRRRRLRRLRRRRRRRRLRRRRRRRL", "RRRRSRRSRLRRRRRRRRLRRRLSLRLRLRRLLRRRSSLRRRRRRRRRLL", "LRRRRLRRRRRRRSRLRLRRRRRRRLRRRRLRRSRRRLRRRRLLRRLRRR", "RLRLLRLRRSRRRRLRRLRRLRRRLLLRRRLLRRRLLRRSLLLRRRRRLS", "RRLSLRRRRRSRRRRRLLRRRRRRRLRLRLLRSRRRSRRRLRRSRRRRRR", "SRRRRLRRRLRRRLRRRRRLRSRRLLRRLRRRRRRLRRSRRRRRRRLLRR", "SRRRSRRLRLSRRRRRRRLLRRRRRRLLRRRRRLRLRRRSRRRRRRSLRL", "RRLRLRRRRRLRSRRRRRRRLRLRLRSSSLLLSRSRRSLRRRRSRRRRSL", "RRRRRLSRRRSRSRRRLSRRLRRSRRLRLSRSRRRLRRLRRRLLRRLRRR", "RLLRRRRRLRLRRRSRRRRLRLLRRLSLSSLRRLSRRSRSLRRSSRRRRR", "RRLLRRRRRRRSRLRRRRRRLRRRRRLRRRRRLRRRSRLRRRRLRRRLRL", "RLRRRLLSRRLRRRRRRLRRRSRRRRRRRLRLRSLRRLLRRRRRSRLRRR", "LRLRRRLRLLRLRRLRRRLRLLRRLRLRRRRRRRRRLRRRSLLLRRRRLR", "RLRRRRLLLRSRSRRRLRRLRRRRRRRLRLRLRLRRLRLRLLRRRRLRRR", "RSLLRRRRLRLLRRRLRRRRRLRLRSLRRRRRRLLRRRRRRRRLRRRRRL", "RSRRRRRLRLRLR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> commands = {"RSSRLSRSRRSSSRRSSSSRRRRSSRRRRRRRRRSSSSRRSRSRSSSRRS", "SSRRLLSRRRSRRSRRRLRRRSRLRRSSRRRRRSRSLRRLRRSRSRSRLL", "RSRRSSSRRSSRRRRRSRLRRSRRSSRLSSRRRSRSRRRSSRRRLRRRRS", "RRSRRSSRSRRSRRRSRRRRLRSRRRLRSSSSRSRRSRRLRSRSRRSSRS", "SSSRRRRRSRSLRRRRLRRRRSRRRSRRRRRRRRRRRLSSRSLRRRRSSR", "RRRLRSSRRRSRSSRLRRRRRRLRSRRRSRSSRRRLSSSSRRSSSRSRSL", "RRRSLRRRRSRSRRSRRSRSRRRRRSRRSSSSRRSRRSSSRRSRLRSRSR", "RSSSSRRRSRRRRLLSSRRSRRRSSLRSSRRRRRRSRSRRSRRRSRRRSS", "RRRRSRRRSRRSRRRRRRRRRRRRRRSRSRSRSRRRLSRRRRRRSSRRRR", "RRRRLRLRSSSRRSSSRRSRRSRRRRSLRSRRSSLRSRRRRRRSSRRRSS", "RSRSRSRRSRSRLLRLRRRRSRRRRSSRRRSRSSRRRSSRSSSSRRSSSL", "SRSRSRSSRSRRRSSRRSRSRRRRSSRSRRRRRSSRRRRRRRRSRRRRSR", "SRLSRSRSLSRRSSRSRRRRRRRSRRRRLSRRRRRRRSRRLSRRSRRRRS", "RRSRLLRRRSRRRSRSRSRLRRRRRRSRRSRSRRLRRRRRRSRRSSRRRR", "RSSRSRLRSSLSSSRSRRRSRRSRSRRLRSRSSRRRSRRRRLRRRRSSSS", "RRSRRLLSSRRSSSRRLRSRSRRRRRRLSRRLRRRSRSRRRSRRRSRRSR", "SRLSSRSRRSRRRSSRRSRSRLRSSSRRRRRRSSSRSLSSRRRLSSRSSR", "RSRSRRRSSRRSLRRRRSRRRSRRRRLSRSSRRRSRRSRRRRSRLSSLLS", "RSRRRRSRRSSSSSRSRRSRSRSLRRRRRRRRRSRSRLRRSSRSRSSSSR", "RRSRSSRRSRRSRRLRSRRSRLRRSRRSSSRSSSSSSRRSRSRRSRRSSR", "RSRRRRRRRSRRSSSSRSSRSRSRSRRRLSRRRRSRSSSSRRSRRRSRSS", "SSSRRSSRSRSRRSRSRSRRLSRSRRRLLSRRSRSRRSRRSRSSRRRSRR", "SRRRSSSRSSRSRRSSRSRSRRLSRRSRRRSSRRRRRSRLSRLLRRSRSR", "SRRSRRSRSLLRRRRRRLRLLSSSRLSRRSRLSRSRRSRRRLRRRSRLRS", "RRSRRRSRRRRSRRSRRSRRSRRRLRRRRSSSSRRSRRSSSRRRSLSSSR", "SSSLRSRRRSSSRRSSRRSLSRSSLSSSLRRRSLSRRRLRRRSRRRLLRS", "RRRSSRRRLRSRSLRRRSSSRSSSSSSRRSSLSRSRSRRRRRSRSRRLLR", "SRSRSRSRSRRRRRRLSRRRSRLRRSRSRRLSSSSRSRSSRLSLRRLRLR", "RSRRRRSSSRRRRSRRRSRRSRSSSRRRRSRSSRRRRRSSSRRSRSSRRR", "LSSRSLRRRRSSRRSRRRRSSRSRSSLSSRRSRSRSRRRSLRRRSRRRRS", "RRSSRLSSRLRLRRSRRRLRRRSRSSLRRRRSSRRRSRRSLRSSSRSSRR", "SRRRSRRRRRRRRRRRRRRSSSRRSRSRSSSLLSSRSRRSRRLRSRRSRS", "RRRRRRSRRRSSRRRSSRSRRSRSRSRSSSRSRRRRSRRSSRRSSSRRSR", "RRSSRRSRRRRSSRRSSRRRRRLLSRRLLRRRRSRRSRRRSRRSSSRRRS", "RRSSSRRSLRRSRSRRSRSRSRRSRLRRRRSSSRLRRSRRRRRSRSLSRL", "RRSSRSSRRSSSSSSSSSRRRRRRRRRRRLRSRRRRRSSRSRSSSRSSSR", "SSRRSSSLLRRSSSRRRRSRRLRRSSRSRRRRSRRRSRRSRLSRRSRSRR", "RSRRRRRSRSRSRSRSRRSRRRRRRRSSRRSSRRLSRRSRRRSSRSRRRR", "RRSRSRSSRRSSSRRRRSRSRLSRRRSRRRRRRRSRRSRSRSSRRRLRSS", "RRSRRSSSRRRSSRRSRRSSRRLRRSSRRRSSRRRSRRRSRRRSSSSRRR", "SRRSSRRSRRSSSRLRSRRSRSRSRRSRRRRRRSSSRRSSSRRRRRSSRR", "SSRRSRSRSRSRRSSRRLSRRSSSSRRRRRSSRSRRRRSSSRRSRSRRSR", "RSSSLSSSSSRRRSLRSRRRRRRRRRRSRSRLSRSRSRLSRSLRRRRRSR", "SRSRSRRLRRSRRRRSRRSRSSRRRRRRRRRRSSRSRRSRRSSRRSRLRR", "RSRRSRRRRRRSSRSRLRRRRRRRRSSSLSRLSRRRRSRSRSSSRRSRRL", "RRRRRSRSSRRSRRRRRRSRSLLRRSRRRRRRRRSSRRSSSRSSSRLRRS", "SSRSRRRSSRSRRRSRRSRSRRSLSRRRRRSRRRLRRLLRRRSSLRRRRR", "RLRRSRRSRRRRRSRRSRSRRSSRRSRSRSRSRRRLRRRRRRRRRRRSRR", "RRRRRRRSSSSSLRSRRSSSSRSSRSRSRRSRRRSRRSSRLRRRRSSRSR", "RSSRRRRSSLRSSSSRSSRRSSRSSRRRSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> commands = {"LRRSSLSRRRRRRSRRRSRRRRRLRRRRRRRRRSRLRSRLRRRLRSRSRS", "RRRRRLRRLLRRRRSRLRRRRLRLLRRRRLRRRRLSRRRRRLRLRRRRRR", "RLRSRRRSRRRRLRSSRLRSLLRRRRLRRRLRRRRSRRRRSRRSRRLRRR", "RRRRSRRRRRRRSRLLRRRRRRRRRLRRSRRRRRRRRRRRRRRRRRLRRR", "LRLSRRRRRSLRRSRLRSRSRLSSRRRRRRRRSRLRSRSRSSSSSRRRRS", "RRRSRRRRRLRRRRRRRRRRRRRSRRRRRRRRRRRLRRRRRRSRRRRRRR", "RSRLSRSRRRRSRLLRRRRLLRRRRRRLRRRRRLRRRRSRRRRRRLRSRR", "RRRRRLLRRLSRRSRRRRRSRRRSRRRRSRRRSRLRLRLLRRLRRRSSRR", "SRRRRRRSRRRLSRRSRRRRLRRRRRRRLRRRLRSRRRRRRRRRRRSRRR", "SRSRRSLSRRLSRSLRRRRRRRRRRRRRRRSLRRRLRRRLLRRRRLRRRR", "RLRRSRRRRRRSRRRRLRRRRRRRRSRRRRLSRLRRRRRLRRRRRRLRRR", "LRRRRRRRRRSRRRLSLRSRRRRLRRRLRRSRRRRRRSRSRRRRRRSLRR", "RRSLSRRRRRRRRRRRRRRSRRRRLRRRRSRLRLSRRRRRLRRRSSRSRL", "RRSLRLRRRRSRRRRRRRRSRRRRRLRRRRRSRRSRLRRRLLLRRRRRLR", "RSRRRRSRRRRLRRLRRRRRRRLRRLRRRRRSRSRRRRSRRRRRSSRRRR", "RLLRRRRRRRSRRRRSRRSLRSRRRRRRRRLLRRRRRRRRRRRRRRSRRR", "LRRLRRLSRRRRRRLLRRRRRLRRRRRRRLSRLLSRSRSRSLRRRRRRLS", "RRRLRRRLRLRRRSSRRSRSRRLSRRSRSRRRRRRRRRRRRRRRLRRSRS", "RRRRRLLSSRRRLRRRSRRRRRRRRLLRLLRRRRRRRRRRSSSRRRSRRL", "LRRRRRRRLLRRRRRRRRRLRRRRLRLSRRRRRLRRRRSSRRRRRRRSLR", "RSLRRRLRSRLLLLRLSRRRRSSSRRRRRLSRLLRRRSRRRRRRRRRRRR", "LRRLRRSSRRRRRRRRRRRRRRRRRLRLRRRRRRRRRRLRLRRRLLRSRR", "LRRRSSRRRRRLRRSRRRSSLRSLRRRRRLLRRRRLSSLRSRRRRRRRRR", "RSLRSSRLRRSLRRRRRRRRRRRLRRRRRLRRSRRRRRSRRRSRSLRRSR", "RRRRRRRRLRRRRLRRRRRRRRRLRRRRLSSSRRRRRRRRRLRLRRRRRR", "SRRRRRSLRRRRRRSRRRRRRRRRRSSRRRLLLSRRRRLRRSRSRRRLRR", "SRRRRRSLRRRRRRRRRRRRRRRRLRRLRLSRRRRRRRSRRRLRRLRRLR", "LSLRRRRRRRRRRRRRLSSRRRRSSRRRRRSRRRLLRRRRLRRRSRLLRR", "RRLLRRRSLSRRSSSRLRRRRRSRLRRRRRRRRRRRRSRLRRSRRRLRSR", "LRRSRSRRRLRRRRLRRRRRLRRRRRRRSSSRLRRLSRRSLLRRRRLRSR", "LRRRRRSLRRRRRRSLLRRRLRRLRRSRRRRRSLRRSSRLLRRRSRRRRR", "RLRSRRRLRRRRRRLRRRRRRRSSRRRRRRRRLRSRRRRRSLRRRRLRRR", "LRRRRRRRRRRRRRSRRRLRRRRRLRRRRRRRRRRRLRRRRRRLRRRRSR", "RSSLRRRRRLRRRRSRRRRRLRRRRRRRRRRRRLRSLRRRRRRRRSSRLR", "RSLLRLRRLLRRRRRRRRLRLLSRRRSRLRRRLRRRRRLRRRSRSLRRRL", "RSSSRRRRRLRRLRRRRRRRRLRRRLRRLSLRLRRRRRRRSLLRRRRRRS", "RRLRRRRRRRSRSRSRRRRRLSSRRLRLRRRLLRSRLRRSRRRLRRLRRR", "LLSRRRRRRRRRSSLRSRRLRRRLRRRSRLRLLRRSLRRRRRRRRSRRRL", "RLSRRRRRRRRSRRRLSLSRRLLRRRRRRLRRSRSRRLRRRSSRSSSRLR", "SRRRRRRRRRRRLRRRRRRSLRSRRRRRRRRRSRSLRSRRRRRRRRRRRR", "RRSRSRRRSLRRLRRRSRRRRLLRSLSRSRRRRRLRRRRLRRRRRRRSRR", "RRRRRRRRSRRLRSRLLRSRRRRRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> commands = {"RLLRLLLLLLRLLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> commands = {"LRSLRRLLRRRRRRLLRRSRSRLRSLRRLLLRSRLRRLRLLRRRSRSRRR", "RRLLRRRSRRRRRLSLRSRRLLRRRSRRRSRRRRLRRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> commands = {"LSRRSLLSLRLLSRRSRSRRLSRSRRSSRSRRLRRRSLSRRRLRRSRRSS", "SRLSSRSLRLRLSLLSSLLRSLSRRRLSRL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> commands = {"LLSRRLRRRLLLRRLRLRRRLRSLRLLRLLLLLLSLRLRLRLLRRRLRRL", "LLRLLRLRLRLLRLRLRRLLLLRRLLLLRRLRLRLLLLLSRLLLRRRRLL", "RLLRRLLLLLLRRLLSRRRRRRRRLRRRLRRLLLRLRRLRLLRLRLLLRR", "LLRSLLLLLLLRRRLSRRRRLRRRLLLRLRRLRRRRLSRRLLRSLRRRRL", "LLLLLRLLLLRRLLRSLRLLRLLRLLLRLLRRRLRRLLLRLLRRLRRLLR", "RRRLLRSRRLLRRLRRRRRLLSRRRLRLRRRLLLRLLLRLRLRSRLRSRR", "LRRLRRSSRLLRLLLRRLLRLRLLLRLLLRLLRLRRRRRLRLLLRSRRLS", "LRRLLLRRRLSRRSRRRLLLRRRRLRLLLLRSLRLLRRSRRLRRLRRLLS", "RSRLRLLRRLLRRRLRRLRRLRLLLLLLLLLRLRLRLLRSRRRLSRSLSR", "LLLRRRRLRLLLRSLRLLRRLLRRLRRRLRLRLLLLLLRLLRSRRRRRSL", "RSLRRSRLLRLLSLRSRLLRLLRRLLRLRRLLLRRRLRRLLSSRRLLRLR", "RLRLRRLLLSRRLRLRLRLLRLRRLRRLLRLLRLRRLLRLRLLRRRRRRL", "LLRRLRLSRRLRLLRRLLRRRLLRLLLRRLLRLRLSLLRRLLRLLRRLRR", "RLLLLRRLRRRLRRLRRLRLLLRLLRLLRLLRRLLLRRLRLSRLRRRSRL", "RLLRLLLRRRRRRLLRRRLLLRRRRRRLLRLLRLRRRLLRRLLRRRLRSR", "LSLRLRRRLRLLLLLLLRRRSRRLSLLRLLRRRLSRRRLRSRLLLRRLSR", "LRLRLLLLSLRLRRSLRLLLRLRRLSLLRRRLRLLLRRRSRLSLLLRLRR", "LLRRLLRLLRLLLRLRRRRLRRSLRRLRRSRLLLLLSLRLLLRLRLRRSR", "LRLSRRLLRLRRLRSLLLLLRLSRRRRRRLLLSRSSLLSLRLLRLLRRLL", "RLRRLRRLRRRRRLLRRRRRRRLRLRSLLLRRLSSLRLLLRRLLRRRRLL", "RLLLLLRRRRSLRRSLLRLLSRRLLSRRRSLLLLRLRLRRLLRRRLLRLR", "LRLLRSRLLRRRRSSLLRRLLRRRRRRLLRRLRLLLRSRLRRRRRRLLLR", "LRRLRRLRSRRRLRRLRLLLLLLLLRRLLLRRLRRLLRSRLLRLRSLSLR", "RLLRLRSRLRRRLRRRLRLLLLLRRSRLLLRLRRLRRRLLLRLRLRLLLL", "RLRLSRLSLLRLLLLRRLRLLLRRRLRLLRRLSLLLRLLRSRRLLRRRRR", "LSLRRLLRLLLRRLRRLLRRSRRSRLLRRRRRLRRRLRRLRLLLLLRLRL", "RRLRSRRSLLLLRLRRSRRLLLRLSLLRLLRLRLLLLSRRRRLLLLRRLR", "RRRLLRLLRRLRLLLSRRLRRRRLSRLLLLLRLLRRLLLRRRRLLLLLRR", "LLLLLRLRRLRLLRLRLRLLLRLRLRRLRRLSRSRRLSRLRRLSLRRRLL", "RLRRRRRRLLRRRRLRRLRRRLRLRLLRRRRLLRLRLLRRLLRRRRRLRR", "RLRRRRLLLRRRLLLRRLLLRRLLLLRLRLRRLLRRRLRLRRLRLRLLSL", "RRRLRRLLRLLRLRRRRLLSSRRSLLRLRRLLRSRLRRLRRLRRLRLRLL", "LLLRRLLLLLRLLLRRLRLLLRLLRLSLLLLRRLLRRRRRRLRRRRRRLL", "RRLLRLSRRRLLLRLLLRSRLRSLLLRRRLRLLRRRLRRLSSLLLRLRLL", "RRLRLRLLRRLRRLRRLLRRLRRRRLLLLLLLRRRLRLLRSLRLLRLLRR", "RRLLLLRRLRRRLLLRSRLLLRLLLSLRRRLRRSLLRLRLLRLLRLRRRR", "LLRLRRLRLRLLRLLRLLRSLRLRRLLSLLRRLRLLSSRLRLRRLLRLLR", "LLRRRRLRLSRRLLLRRRRLRRLLLLLRLRLLSRLRLLRLLLSLLRRLLR", "LLLLRRLLRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> commands = {"LRLLLSRRRSSLRLLLSLLRLLLLSSLRLLLLLLRRLRSRSRRRLRSRRS", "SSLSSRLLLRLRLRRLLSSRLSLRLRLLLRLLLRLLSLRRRLLLRSRRLL", "LLLRRLRRRRLRLRLLLRLRSLLSRSRSLSRLRLSLLRLRLLSRSLSLRS", "RRLLRRLLLLLLLLLRRLSSRRLRSLRSLRSRSLLSLRRRRSRRSSSRLS", "LLRLRLLLLSLLLRSRRRRRSRLRRRRRRSLLSLLRRSLSSLSSSLRLLR", "SLSRRLSRRSRLSLLRRLRRLSRSSLRLLSRRLLLRRLRSLRLRLLLRLL", "LRLRSRRSRRLRLSRLRRRSSRLRSSLLRLLSRSLLLRSSLLLSRRLLLS", "RLLLLLRSSSRLSLRRLLSRRLSRSSLRRLRSLRLLRRLLLSRLLLLLSR", "RRRRSLRLRRLRLRRRLLLLLRRLSSLRRLLLLSRLLSLRSRRSLLLLRL", "RRLLSSRRRLLRLLRSRSLSLSRRLLLSLRLLLLLLSRSLLRRLLRRLSL", "LSSSRLRRRSRRRLSLSLLLLLLLLRLLRLLRSRSRRSSSLRLLRRRLRL", "LRRRRSLRRLRLSRLLSLRRLLRSRSLSSRRLRSSLRSSRLLLLRLLSLS", "RSRSLRRRRLLSLSLLSSRLLRLRLLRLRRLLLRSLRSLSSLLLRRSRLR", "SLSLLLLLLRLRRLSSRRSLLSRSRSLRRRRRRSLLRSRLLSSSRLLSSL", "RSLLLLRLLRLLLSLLLLSSSSRLRSLSLRRRLRSLLRRRLLRLSRLLLR", "RLLLLLRRRLSLLRLRRRSSSRLSLSRLSSLSRLLRRLSLSLLSLLRLRR", "LRLLRRSRLSLRLRLSRSRLLLSRSSRSLLLLRSLRRSRLLLSRLRRRLR", "SSLLLRLLRLLSRLSRRSSRRLLLRRLSSRLLLLLLRRSSRLRLRLRLLL", "RLLRSLRLRRRLRRSLLSRSLRRRRRRLRSRLSSRRLSLLSRRRLLLSRR", "SRSLLRRLSSLRLRLLLLSSRSLSSLLRLSRLLRLLLLSRRRLRRSLLRR", "RRSRSRLSRLLRRRLLRRRLRRSSLRLRLLRSLLRRLRLLLLRRRRLLLL", "LLSSLSRRRRLRRLLRLSLSLRLRSLLSSLSLLRRSSLRLLLLLLLSLRL", "LLLLLLRRLRRRSLSLSLSLLLRRLSLLSRLRLSRRLLLRRRLLRRSRLR", "SLRRLRRSLRLLLLRSRRRRLLRLLSRLSRSRRLLLRRRRLLLRRLRLRS", "RLLRSRSLSSRLRLRRRRRRLLSSLRLSLLLLSSRSRLLLLRSLSSRRLR", "LLRRSLLRLRSSLLRRRLSRLLLLLLLRRRRLSLLRRSRLLSRRRLLRLL", "SSLLLRLRLLLSRSLLLRLSLSRRLSLSSSRSSLRRRLRSRSRLLRRLRS", "RLRRSSLRRSRSLLSSSRRRLSSSRSRRSSRRRLRLLRRSSRRLLRRRLR", "LRLRLSRLRRLRSLLLLLLRRSSRSRRLLRLLLLRRLLLRRRRSSLLRLR", "LRSRLLLSRLRLRLLLRRLRSLLLSSRLRLRRLSRSRRRSLSSSRLSRRS", "SRLLLRRSRSLLRLRRRRLLLLRLRRLSRSLRLRRRRRRRRLRLLLRLLS", "LRRLLLLLRLRSRSRRLRLRSLRLLLRLRRSLSRLRRSLLSSLRLRSLLL", "LSSRLLLLLLLLRSRSLLLLRLSLLSSLRLLLLRSRSRLLSLLLRRSRLR", "LRRRRSSRRRRRSLSLRLLRSLRRLLSLLSRLLRLRSLLSRLLSSRLRSR", "SSRSSRSSRLLLRLRRLRSLLSSLLSRLSLLRLSLLRSLRSRRSSRRLRS", "LLSLRLSRLLRLLSRRRLRSLSLRLRSRLSRLLSSRRSRLSSLSLLLRLL", "SRSLSSRLSRSLSRRRRRRLRRSLLRSLRLSRRRLSRRLRLSRRRLLSLL", "LSSSLLRRLLLRRRLRLLLRLLLRLRLSLLRLLRLRLRLRLLLRRRSRLS", "RLLLLRLLRRLRRLRSSLRLRLLLLLRLRLSRLRLLLLLRRRSRRLLLLL", "RRLSRRRRLLRRSSLRLRRSLRLRRSLLSLRRLRRLRLLLSLSLSRLRLS", "LRLLLLRLRRSLSSLSLSLSRLSLLRLRRSRLRLRLSRSSSSLLLLLLRL", "RSRRLLLSLSLRLLLLRRLRRRLRLLLLRRLRRRLLLRLSRLLRLSLRLL", "LRLRLRSLLRRSLSSLLRLLLSRRLRLLRSLRRRSRRRLRSLRRRLLRSR", "RLLLRLLR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> commands = {"LSLLRRRLLLSSRSLLLLLSSLRLSRLLRLLLRLRSLLSRLSSSRRLLLS", "SLLLSLSSLSSSLRLLSSSSSLLRRRLSLSLLLSRLLLSSSSRRLLSLLL", "SLSSLSSLSLLRRRSSSSRSSSRLLRRLRSSSSRLLLRLSLLLLLLLLLL", "LSSSSSLRLLLLSLRLLLSRRSSLSRRLLSSLRRSLLRLLLSSLRLLLLR", "RLRLSLSLRLRSRLSLLSLSSRLSRLSSLLRLSSSLLLSSSLRRSRLSRR", "LSRSRRSSSRRLRSSLLRLRLLLLLSSRSSLLRSRRLSLLLSLSLRLSLL", "RSLSRLLRLSSLLSSLLLSLSSSRLLSRLSSLLLSRLLSRRSSSRRLLLL", "LSSLRRSRSSRSLRLSSLLLSLSLSLSSSSLSLRLRLSSLSLRLSRSLLR", "SLLLLSRLSSRRLSLSRSSLRRSLSRLLLRLLSRSSRLSSLRLLLSSLRR", "SRRRSSLLSLLSSSRLLLLLRLLLRRRLLRLSLLSRLLSRLLSRSRRLLL", "SLRLLSSLSRLRLSLSRLRSRLRLLSSRRRRSLLLSSSSLRLLLRSSRSS", "SSLRSRSSLLLSLSLSLLSRRLSRSLRSLLLSRSLRLLLLLRRLSLRRRL", "LLSSRLLSRRSLSRLRLSRLSLRRRSLSRLRSLSRLRRRLRLRRLSLSLS", "LLSLRLLRRLSLRLRSRLSLLSLLLLSLLSRSSSLLSLSSSLLLLRLLLR", "SLRSLSSLRSSSRSRSRLLSSLLRSLSSSRSRLLLLLRRLLSLSRLSSRS", "SSLLLLRRSSSLLLLSSRSRSLLSSRLRLLLSRLRSSLRSLSSSLRRLLL", "LSSRLLSLLRLLSSRSRLRSLLRLSRSRRSRRSSLRRLRLLLLSLLRSLS", "LSSRLSRSSRLSSSSLRSSSLLLSLRRSLSRRLLRRSLLSSLLSLSRSLS", "LLLRLSRLLLLSSRSRLSSLSRLSRLRRSSLRLLSLLLRRRLLLSLSLLR", "LSLLSRSRRLSLSRLLSSLSRSSLRLLSSSSLLSSRRLRLSRRSRLSLSL", "SSSLLLRSRRLSSRLSSLRLRLSSLLSSLSSLLLSLSLRLSLRSLLRSLR", "RRSLLSLSSSLLRSSLSRLLLSLSLRRLLRSSSSLSRRSSLSRRLLLSRL", "RRRLRLSRLSSRLSSLLRLSSRLSSLLLLLRRRSSLLRLSLLSRLRSLLL", "LSSSLSLLRRSSLRLRSSSSLSLRRSLLLLLSSSSLLLLSSLLRLLSLSS", "LLSLRRSSSSRSSSLSLSLLRSLLRSRLSRRSLSLSSSRRLSLLRSRRRL", "LLRSSSRSLSRRSLSRLLSSLLSLSLRSSLLSLRSLLLLSSLLSSRLSSS", "LLLRLSSLSLRRLRLLLRLLLLLLSLSLLRRSRLSLLLLSRLSSRSRSRL", "LSSLLRRSRRSLLLLSRLLSLLLSLSSSLRRSLSLLLSSRLLLLSLLLSR", "LLLRRLRSRSSLLRSLRSSLLRRSLLSLSRLLLSLSRSLSRLLRRRLRLL", "SLLRLLSRSSSRSSSLLLRSSRRLSSRLSSSSLSLSSRSLSLLRSRLSLS", "LLLLRLRRRSLRSLLLLSRSRSRSSSSRLLLLLLRSSSRLRLRLLLLLLL", "LLLLRRSLRLSLRLLLRSLSLRLSLRLSSLSLRSLLSRRLLLLSLRLRLL", "LRSLLLRLSRRLSRSLLLLSRSRSLSSRSLLLLLLSSSLSLRLSLLSLSL", "SSRRLSRLRLSLSRRRLLLSLLLSLLLRLSLSLRLRSSRSRLSLRSLRLS", "RLLRLRLSLLSLRSLLLRLLRRRLRLRLLSLLLSSLSLRLSRRSLLSSSS", "RLSLLLLSSLSRRSLSSLRLSLLLLSLRLLRLLLLRRRLLLLLRLLLLLL", "SLLLLSLLSLSSLLSLRSSLLRRLLLLLSLLRLSLLSSRSRLRSLSRLLR", "LLLRLLSLSLLRSLSLLRSLLLSLRSRLLSLRLLRLSLLLLRSLLRSLLL", "RRSRRRLLRRRLLLLRRLRSSSSLSLSLRSLSRRLLLSLRLLRSRRSRRR", "LSLLRLSRLLSLRSLLRRSRSSRRLLLRLLRLSLSSLRLLLLRSRLLSRL", "LSRRRLSRLSLLLLLLLLRSLLRRLLLRSLLLSLRLLLRRLLSLLSLLRR", "SSLLLRRRSSSLSLLSSLSLRSSLSLSLRLSLSSLLLLSRLSLLSSRLLS", "SLLSRLLRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> commands = {"SLLLLSSSSLRLSLLSRSSRLSSSRLSLSLLSLSLLLLSLRRSLLRSSSL", "LLLSLLLLLLLLRSLSSLLLLLLLLSSLLSLSLLSSRSSSLSSSLSLSSS", "LSSSLSSLLSLRSLLLSSLLLSLRSLLLLLLSLLSSLLRSSLLLLLSLRL", "LSSSSLSLLLRLSSLLLLLLSSLLSSLLSLLLLRLSSLLLRLSLSSSSLL", "RRSLSSSLRLRSSSRSLLLSSRLLLSSLLSLSSLSSLSLLLSSLSLSSSS", "LSLSSLLSLSLLLSSLLRLLLLSSLSRSSSLLSSSSLSLLLLLLSSSSSS", "SLLSLLLLLSSLLLSLSRSLLSLLLLLRLLLSSLSSLSLSLLLSLSSLLS", "LLLLLSSLRSRSSLRLRSSLSSSRLSLSLLSSSLLSLLLSLSLLLLLSRL", "SLLLLLLLLSLSLSSLLLRLSLLLSLLLSSSSLLRLSSLSSLLLSLSLLL", "LLSSSSLSLSLSSSLLLSRRSSLSSLLRLLSSLLLRSSSRLSSLSSSLSS", "LLSSSLLLRLSSLSSLLSLLLRSLLSLSLRLSSLLLSLSLSLRSLLLSLS", "LLSLLSLSLRSLSSRLLRLSSLLRSSLRLLSLSLSRLSSLSSSSSSLLRS", "SLLLSSLLLLSLSLSLSSLLLSSSSSSRSRSSRSSLSSSSSSSSLSLLSL", "LSLSRLSSLLLLLRSSSSSSSSLLRLSSSLSSLSLSLLLLLLLRSLLSLS", "LSLLRLRLSSSLSLLRLSSLSLSLRSLLSSSSLRLRSLSLSLLSSLRSRS", "SSLLLLLLLSLLSSLLSSLSSLLLLSLLSSRLSLLRSSSLRSSRRLLLSS", "LSRRSRSSLLLLLLLLSLLLLLLSLLLLSSLLSSSLLLSLLSLSLLRLLL", "SLLRSLLLRLSSSLLSLLSRLLLLSLLSRLLLLLLSLLSLSSLLSSSSLS", "LLLLLSSLSRRLSLLSLLSSSLSLSSRLSLSSSLLLLLSLLSSSSLSSRL", "SSRSSSSLLLSLSLRSLLLSSLLLSLSSLLLLLLSSRSLSSLRRLLLLSL", "SRRLLLLSSSRSLSSSSSLLSSSRSRSRLSLLRLSLRLLSLLSSLRSSLS", "LSSSRLSLSLSLSSLSLSLLSLLLSLLLSRLLLLSLSSLLRLSLLSSSLS", "RRSLLLSRLSSSRLLLLLLSLSRLSLRLRRSSRRSLSLLLRSLLLLLRSL", "SSLSSLLRLLRSLSLSLLSLLLLLSLSLSLRSLSSSSLRSLLSLLSLSLL", "SSSLLSLSSRSLLLLSLRLLSLLSLSLLSSRLSSLSSLSLSLLSSRRSLR", "SLSLLSSSSLSSLSLSLLSLRLSLSSSSSSLLLLSSSLSSSSLLLLRSLL", "SLSLRLLSLLSSRSLSLLSLLSSLLSLSLLRSSSSRLLLSLLLSLSSSSS", "LLLLLLLLSSLLRRLLLSSLLLLSLSLLLLSLSRSLSSLRRSRSLLLLLL", "SSLLLSSLLSLLLLLLRSLLLRLSSSSRSLLSLRLLLLLLLLLSLLLSSL", "SLSLLSLLSSLSSRLLLSSLLLSLSSLLLLSLLLSLLLSLSSLSLSRLSL", "SSLRLLSSSSSRLLSSLSSRLSLLSLRSLRLLSLLSLLSLSSSLSLLLRS", "RLSSLRSSLRLSLSSRLLSSLSLLLSLLSLLLLSLSSLSLSSSSSSSLSR", "SLSLSLLLSLSSLSLLSRSLRLRLSSSSSRRSLLLSLLLLRSLSSLSLLR", "RLLSSRLLSSSLSLSLSSLSLSLLSSLSSLSLSLSLLSSLLRSSLLLSLL", "SSSLLSSLSSLLLSSLLLSLLSLLLSLLLLSLSLLLLSSSRLRLSLLLSS", "LSSSLSLLLLSLLRLLSLLLSSSLLSSLLLLLSRLSLLLSLLSRSRLSSL", "LLLSLLLSSLSRLLSRLLLRSLLSSLLRSSLLLSSLSLLLLSSSLLLSLL", "LSLLSLSSRSSLLSSSSSLSLLLLLSLLRLLSLSLSLSLSSSSLLSSSSS", "LLLSLLSSLLLSLLLLLSLRLLLLSSLLLSLLLSLLSLLSSSSSSSSRSL", "SLLLSSLSLLLSLLSLLSSSLSLSRLLLSRSLLLSSLLLSLSSLSLRLSL", "RSLSLSLRLLSLSLLLSSSLLSRLLSSSSSLSSLLSSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> commands = {"RSLSRRRLRRRSSLRRRLSLRRSSRRLSSSSRSRLLSRLSSRSRRLRRRR", "SSRSLRSSRSRSRRLSSRSSRSSRSLSRRLSRLRSSLRSSRSSLLSRRRR", "LRRRRRLRSRSSLLRLSSRRSSLRLRSRRRSSSSRRRRRRRRRSRSRRSS", "RLLSSSRSSRLSLLRSRRRRSLSSLSSRRSSRRLRRRRRSRSLSLLRRLR", "RRRRRRLLRSRRLSSSRLRSSLRLRRRSRSLLRSLLRRRSRSLSRLRRSS", "RRSRLRSSSRRRRLLRSLSRLSRSRSLLRLRRRSRRSSRLLLSLRRSRRR", "SLSLLLLLSRSRRLRLRRRSRLRRRRLRLRSLRSSRRSLLLSSSLSLSSR", "LLSRRRSRLLSSRLLRRRLLRRSRLRRSSSLRSRRSRLRRSSSSRLRSSR", "RRLRLLRLRRLRSSSSRRSSRLRLLRRLRLLSLRRLLLRLLRRLLRRSSR", "RSRSRSRRSRRRRRLRSRSSSRSSRLRLRSRSSRSRRRRRSSRRLRRRLR", "LRRLLRLRSSLRSSLSSSSSSRSRSSLRRRSSRSRSLSLRSLRRRLLRLS", "RLRRRSRLSLRSRLSRRRLSSSRSSSRLRLRLLLRSLLSRRLRRLSRLSR", "LSRLRLSSLSRRRSLRRSLRLSSRSLSSLLRRSRRSRRSSLRSRSSRSRS", "LSSRLRLRRRRSLLRRSSSRRSLRRSRRRRLSLLSSLRRLSSRRRLLRRR", "SRLSLRSSSRLSSRSRLRSLSSSSSSLRSSSSSLSSLRSRLSSRRLRSSL", "LSSSLSRSRRSSSRSRRRRLLRSRRRSSRSSSSSRSRLLLRRSLSRSSLL", "SRRRSLLRLSRLLSRSSSRRSRRSRRSSLSRLLLSRSSRSRRRRSRRSLS", "LSLSRLSRLRSRSRRSRRRRRSSSSSLLSLLLLRRLSSSLRRSSLSRSSL", "LRSRSSSRRLRRLRRLRRSSRRRRSSRSRRSRSRSRLRSRRRSSRRLSSR", "LSRLRSRLRRRRSLSLSLSRLSSLLSLRRRLSLSSRRSRRRRRRLSRRRL", "LLRSSRRRRSSSRLSSRSSSLSSLRRLSRRRRLRLRLLSSRSLLSRLSSL", "LRLRRRSRRSRSLLRSLLRLLLSSSSSLRSLSRSSSLRSLSLRRRRSRSL", "RRSSLRLRLSRSRSLRLSRSLLRRRSLSLLRLRRSSSRRRRSLLSLRRRL", "RSLSRSLLSRSRRRLLRSLRSSSRLRSLSLRSLSRRLRRRLRSRSSRRRS", "LSRSSSSRRRRSRRRRRSLLLLRRRLRSLSSLLRSRSRRRRLRSRLRSRS", "RSRSLSSRRLSSLRSSSRRLRLSRLSRRLRRLRLRRSSSSSRSSRRRSRR", "RRRRSRRLRSRSRRRSSSSRSLLRSLLSRRRRLSSLRRSLRLLSRSSLRS", "RSRSSLLSLLRLRRRSRSLSSSSLLLRSSSRRSRSSSSSRLSLRSRRRRS", "LSRRSSSRSLRSSLSRSRSLSSRSRRRLLSRSRRRLRRLRLSLLLRRLRL", "SRLRRSRRSRRSSSLRRRRSRRRRRLRSRLSLRLLSRLRSSSSSLLSRRL", "RSLLRSRSLSRSRRLRSLRSRRLRLRRRRSRRRRSSSSSSSLRLRSRRLS", "SLLRSSRLSLSSSRRSSRRRLSSRLSSRRRSRSRRLSSRSRRSLRRRRRL", "SRRSRRRRSLLSSRRSRRSSRRRRLLSSLRLRSRSLRRSLSRSSRSRRRL", "SLSSRLSRRSSRRLLSRSLRRSSRLRRRSLLLLSSRSSLLRSRLLSRSRS", "RRLRSSLSRSRRSSLRRRLSSRRSRRSSLSLSSSLRRSRSSRRRSLSSSR", "RRRSSRRSRLSSRLSRRSLLRSSSLRLRSRRSLLRRSLSSRSSLLLSSRL", "RRLRRLSSSRSSRLSSRSRSRSSRRSRSRLSSLLRSLSRSRSLSRRRSRL", "LSLRLLRSRRRLLRLSLRRRSRSRRRRSRLLLRRSRLLLRRSRSSRRRSL", "RLRSRRSLRLRLRLSLSSRRSLSSRSLSRRLRSSSLSRLLRLSSRRSSLR", "RLRRSRRSRRRRRSRSLRLLLSRRRRSSSSRSSSRRRRLSLRLRLRRRSL", "SRRLRSRSRSRLRRRSRSSRSSRRRLSRRLSRSLRSSRRLSRRRRRRSSS", "RRLSSLSRLSRSLSLRRRRLRRSSSRRSLRSSLRLSRLSSRRRSRRSSSS", "RRSSRLSSRRRSRRLSSRSLLLRRRSLSLSRRLLRRRSRRRLRRRRSLSR", "RLRRSRLLLSRRLRSRSRLRSRLSLSSSSLRRRRRLSLRRSLRRLSRSRR", "LRSRLSSRLRSRRRLSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> commands = {"RRSSSLSLLLSSLLRRRRSSRLSLLSRSRSLSLLSLSSRLRRSRSSSRLS", "LSLLRLSLSRRRSLSLRRLLLSSLSRLRSSLRLLRLRSRLSLLLSLRLLR", "LSLLSSLRRLLSLRLSLSLSRSLLSRRLRRRLLRLSSLRRLSRSLSSRRL", "LRLSRRLSLSLLRSSSLLRLLRLRRSLRRSLSSSLRSSLSLRSSSSLLRL", "RLLLRRRSSLRRLRLLLRRLLRSSRLRSSLSSRLLLLLRSRRRLLLRSSR", "LSRRSRLLSRSSLRLRRSLLRSLLLLLLSSLRLRRLRLLLSRLLRSLLLS", "LRSLSRSRLRSLLLLLLLSRRLRLRLRLSLSSRRLRRRLLLLLRSSLLRR", "LRSRSSLRRRSSRSLLRLSLLSLSSRLRRLRLSLSSRSLRRSLRLLSRRL", "RLLSLLRLSSSSRLLLLRLLLSSRLSRSSSLLLSRSSRSSLSRLLRSSLS", "LSLLRRSRSRRLRLLLLSRLLLRSSSLLLLRRLLLLRRRLLRLLSLSSLR", "LRRSLLLRRLSRSRSLSSLRSSSLLSSSLLSSRRRSLSRLSLRLLRSSLL", "SRSSLSSRSRLSRRSLSRRLRSRLLLSLLLRSLSRSLRLSSRRLRLSLLS", "RRLLRSLRLRRSRLLSSSSSSRRRSRRLLRSSSLRSSLRRLLSLLSRSRR", "RRRLRRLRSSSSSLSSLLLLSLRRSRLLRSSRLSRLSLSSRSSLLSRSLR", "SSLRRLSSLRRRSLSSLSSLLRLLSSRLRLLLLSRSSSLRSRRLRSRRLL", "RRLLLSLLSRRSLLLRRRLLRSSLLSRSRLSRRLLLRSRLSRLRSSRRLR", "RLSLLRLSSRRSRRRSRLLSSRSSSSSLRRLRRSLLLSSSSSRLSLLRSS", "SSLLLLSLRSSLLLRRLLRSSSSRRRLLLLSSSRRRLLLSSLSLLRRLLR", "RLSLSRLLLSSSSRRSSSLRLLLSSSLLSLSSRSLRSLSRLLRRLSSSSR", "SSLLSLLLRSRLLLSSRRLSSRLRRRLRSLSLRLLRLLRRLLLLLSLLSR", "LLSSSSLRRSRRLLRLLSRRSSLLSSRRLLLLLRLLSRLRSSRSLSRSRR", "LSLLLLSLSSSRLLSLRRLSLSLSLRLLLSSLSRSSLSLSSLSLLLRSRS", "LLSLLRLRLSSSRLSSSRLLSSLSLRRLSLLRLLLLSLLLRLLSSSLLRL", "RLLRRSRRRRRRSSRRLLLRRRRRSRRSLLLLRRLLRSLLRLLLRSLSLL", "LSSLLRLLSSLLSSSRLLSLSRRRRRRLLLSSSSRSLLSSSRLLLLLLSL", "RRLSRLRRLSRRLSLSLRLLLSRRLLSRRRSSSRLLLRLLRSLSRRSRRL", "SSSLRLLRSLRSSLLSRRLRLSLRLLSRSSSRRRLLSRLLRSSSSSSSSS", "LRRRSLLLRLLLLLRLSLSSRLRSLLRSRSRSRRRRRSLLRLLSRSRLSL", "LLRSRRRSLSSRSLLLRSLRLSLSRLLSRRSLRLRLLLRSLLRSLRLRRR", "SSLSSLLSLLRLRLLRLLSSRRRLSSLLLSSLLSRRRSSRLRRLSSRLSL", "SLLRSRRLLRSSSRLRSRSLLRSLLSSRRLRLSLRRLSLLRLRSRLLSSR", "LLSRRLLSLLLRSSLSLLRRSLRRSRSLSLLLRLSSLSLSRRLSSSRLRL", "LLRSLRSRSRLSSRRLRLRRRSRRSRRLSLRRLRRLRLSRLRRRSLRLSL", "SRLRLSLLRSSSRRRSSLRLLRSRLSSLSLSSRSRSRLSLSLRSRRSRLL", "LSSRLSLRRSLLLLLLLSLLRLRSSLSSLLSLSSRLRRSSLLSSRLRSSS", "RRLRSSRSLLRSRRLRSLLLSSRLLRLLLRLLLSRSSLLSSLLSSSLSLS", "SRRLSRLSRSSLRRRLSLLLLRLLLLSRLRSRSRRSSLSSRRSLSLRRLL", "SLSLLSSSSRSSSSSLLLSSRSRRLLRRLRLSSLSSRRLLSSRRSRSLRR", "RLRSLRLLRRSLSLRRRSRRLRSLLRSSLSSSSRLSRSRLLSRSRLSSRL", "RRSRRRLLRRSRRRLRLSRRLRLSRLLRRLRLRSRLRSSSSRSSSSLSRS", "RLRSSSRSSLSSSRLRSRLRSRLLSSSRRLLRRSLLRLLRLRLSLRSLLL", "LLRSLLSSSRRSSSRLSLSRLLLRLRLSRSRLSSSSRRLLLLSRSRLSSS", "RLSSSLRSSSLSRSRSLLRLLRSSRLLSRRSLLLRRRSLSRRRRSSRSSR", "LRLSLLLLRRRRLLSSLSRLRSSRLLRRRSSLLRSSSSRSLSSLLSLSLR", "RSRSRSSSRSSSRSLLSLSRSRRRSLSLSRSSRRRLRRSSSSRRSLRRRS", "RRLRLRLLLLLRRRSRSSRSRRLLSSLSRRSSL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> commands = {"RSSRRSSSLSRRLSLRSSRSRSSSRSSRRSSSRRSSSSSRSSSRSRSSSR", "SSSSRRRRSSSSLRRSSLRRSRSRRSRSRSSSSLRRRLSRRSLSRSRRSS", "SSLLRSSLRRLRSSSRRLLRSRSSSRSSLLSSSSSRSLSSSSLSSLSSRS", "RRRRLLLLLLRSSLRSSRSRSSLSSLLRLLLSSLSSLSSRRRLSLSSSRS", "RRRSLLRSSLRRSRLSRSSSLSRLSLRRSSSSRSLLLRSSRSRSLRRRSR", "SRSSRSSRSLRLLSRSRSLRSSSRSLSLLSRLLSLRSSSSLRRLSLSSSL", "SLSSRLSSRSLSRRRSLLSRSSLSLSRSLSRLSRLLSSLSRLRLSLRRRS", "SLRSRLSLRSSRRRSSRRRSRSRSSRSSLRLRLSSRLSRRSSRSSRSRLR", "SLSSSRSSSSRSLSSRLRSRLSSSRRLRSSSSSSRLSSRSSLRSSSSRSS", "RSSSSLRRSSRRSRRSSSRLSLSSRRSRLSLSRSSRLSSSRRRLLSLLLS", "RRSSRLSRSRRRLSSSSRSSSSLLSSLRSLSSSSSLSSLSLRRSSLLRRS", "LLLSRLRSSSRLSSSRSRSSRRSSSSSSSRRLRRSRRRLSSRSSRLRSRL", "LSSSSLLRSRRLSSSSSRRSSLSSLRSSSLSLSLSRRRRSSSLSSSSSLL", "SRRSSSSLRSSSSRRSRSSSRSLSRLSLRSSLSLLSSRRSSSLSLRLSLL", "SSSSSRSRRRSLLSRSSRLRSLRRRSLRSSLLRRRLRLRLSSSSSRLRSS", "SLSRRSLLRRRSRRSSSRLSSSLSLSLSRRSRRSRSSRRLSSSRRSRRRL", "SRSSSRLRSRSLSRRSSLSSSSSRLSSSRSLRSLSRRRRSSSSRRSRLSR", "RRRSLSLLRSSSSSSRLSRSSLSSSSLSSSSSRLSSLLSSRLLSSSSRSR", "LSSLLSSRRRSSLLRLRLLSLLSSSRLSSSSRSSSSSSLSSRSLRSRSSL", "RRLLRLSRSLSLSRRLRRSSRSLRSLRLLRSSSSSRRRLRRLSSRSLSSR", "LRRSSSLRRSSLSLRSSSRRSRSSSSRLSLSSLRSLSRSLRRSSSRSSLR", "SSSSSRRRRSSRRSLLSSRLRSSSSRRSRSLSSSSSRSLLRRRSRSRSRS", "SSSSSRSRLSSSLLSRLSLSSSRRRLRSSSSSRSLSSLSSLSSSSRSSSS", "RSSLSSSLRRSSRLSRLSRRSRSSLSLRRLRRSRSRLRSSLLLSRRRSSS", "RLSLRRSRRSLLSSRRSRSSRLRLSRSSLSRSSSRSSSLRRRRRSSLSLL", "SRSRLSSSRLSLLRSRRSSRSSLSSSRSRRSSSRSLSRSRSRRLLSLSLS", "RRRLSRSRRRSRLSSRRSLSLSLSLLLSSSRSSSRSLSRSRSRSSRSLSR", "RRSSSSSSSRSSSRLSSSSSSLRSRSRSSRRSSSSSRSLLSLLLRSLSSL", "SSLSSSSRRRSRSRRRLRLSSSSSSLSSRRSSLRSLRSSRRRRLSRSRSL", "RSRRSSSSSSSSSSSRRSSRRLRSRRLSSSRSSSSSSRLSSSSSLLRSSS", "LSSSSSSLSRSRLRRSSRSRLSRSSSSSRSRSSSSSLSSLSSRSRSLLSR", "RSRSRRLRLLLRSSSRLSSLSRRSLLRLSLSSRSRSSSSRSSLSRSLSSS", "RLRLLSRRLRSSSSRSSRSSRRSSLSLRRSSLRLRSSLLLSSRRRSRSLS", "SLRSSLLSSLLSLSLSSSRRSSLRRRLRSRRRSSLRRSSRRSSLLSSSRL", "SSRRLSRSRLSSSSSSSLSRSSRLRSLSSRSSRLLSSSRLRLRSSRLSSS", "SRLRSSSSSLSSLLLRSSSLSRLLRRSRSSRSRRRSSLLRRLRLRLRRSS", "SLSRSLSLSSRSLLRSSSSLSRRRSSLRSLSSSRSSSSRLSLLSRLSSRR", "SRSRSSRLRRSSRSRSSSSRSLSRSLRRSLLRSSSSLSLRRSSLRLRSSL", "SSRSSSSSSRRSSSLRSLLRSRLSSSRLLSSRLRLSRRRSRRSLSSRRRR", "LLRSLRRSSSRSRRSLSLSRSSLRRSRLLLSSSSSLRSRRSSRSRSSSLR", "LRRRRSSSLSRSLLSSSRRSLSSSLRSLSLSRLSRSRSSSSLSSSL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> commands = {"RSRRRRRRRRSRRRSRSRRSLRRRSSSRSRRRLRRRRRRSRRRSSSLRRS", "SSRRRRSRRSRSRRRSRRRLRRLRRSRRRRSRRRSRRRSRRRRRRSSRRR", "RRRRSSRRRRRLRRRRSSRRRLRRLRRRSRLLRRSRRRRLRRRRSSRSRS", "LRRRRSRRRLSLLRRRRRRRSRRRRSRRSRRRSSRSRRRRRSRRRRRLRR", "RRRRRSRRRRSRRRLLSSRRSRSRSRSRRSRRSRRRRRSRRRSRRRSRRL", "RRRRRSSRSRSRLSRSRRRSRRRRRLRLRSLLSRRSSRRRRSSSRRRRSR", "RRSSSSRRSSSRSRRRRRRSRRSRRSRRRRRRSSRRSSSRSSRRRRRRLS", "SRRRLRRRRRRRSRSRRSSSSSRLSRSLRSRSSRSRSRSRRRSRRSSSLR", "SRSRSRRSRRRRRRRSSRRSSSSRRRRRRSRSRRRRSRSSRLRRSRSSRR", "SRRRSRRRSLSSSRRRRSRRRLSSRRSSRRSSRSSSRRSRRRSRSRRSSR", "RSRSRRRRRRRRSLRRSRRSRRLRRSRRRRSRSRSRRRRSRSRRSRRRRS", "RSRRLRLRSRRLRSSRLSRSLRRSRRRLRRRRRRSRLRRSRRLSRSRRRR", "RSRRRSSSRRRSSSSSSRSSRRRRRRRRRSSSRRSRSRRRRLLRRRRRRS", "SRRSSRSRRRSRRSRRRRRRRSLRRRRLRRSRSRSRSSRRSSRSRRRRSS", "RLSLRSRSRSRSLRRRRSRRSRLRSSLLSSSRRRRRRSRRRRSRSSSSSS", "RRRSRRRRRRRRRSRRSSRSSRRRRRRRRSRRSRRRRLRRRSRSRSRSRR", "SRRRRSRRRSRRRRLRRLRRSSRRSSRLRSRRRSLSRLSRRLRRRRRSRR", "SLSRSRRSRRRRSLRRSRRSRSRRRRRSRSRRRRRLSRLRRLLRRLRLSS", "RLRRSRSSRRRRLRRRRSRRRSRRRRSRSSRSRRRRSRRRLRRSRRRRRL", "RSRRSRRRRRRRSSLRRRRSRRRSSLRLRSRLSSRRSRRRRRRSRRRRSR", "SRSRRRSRRSRRRSRRRRRRRSLRSRSRRRRSSSSRLRRSRSRRSRSSRR", "SRLLRRRSRRRSSRLRRRSSSRRRSRRRRRRRRRLSRRRRLSRRRRRRRS", "SRSLRRRRRRRRRRLRSLRRSSSLRRSRSRRRRRSRSRRLRRRSRRRRRR", "SSRRRLRRRSSRSRLSRSRSRRRSSRRRRRRRSSSLRSLRRRLSRRSSLR", "SRRRSRSRSRRRLRRRRSSRRRRRRRRSRRSRRRSRSRRRRRRRSRRRRS", "SSSRSLRRSRRRSSSRRRRRRRRRSRRRRRRRRRSRRRRSRRSSRRRRLR", "LRRSRRRSSRRRRSRRSRRRSSSRRSRRRSSRSRSSLRLRRRRSRSRRRR", "RRRSRRRRLSSRSRRRLRSRSRSSLRRSRRLSSRSRRSSSSSSRSSRRRR", "RRRSRRRRRRRSRRLRRRSSLRSRRSRSRRRLSSRLSSRRSRRSRLSRRR", "RRRSRRLRSSRSRRSSSRRSRSSRRSRSRRSRSRSRLSRLSSLSRRRRLR", "SSRRRRRRRRRRRRRLRRSRRSRSRRSRSRSRSRSSRRRRSRSRRLRLRR", "RRRRSRRSRRSSRRRRSRRRRRRRRRLRRRSRRRRRSSSLRRRRSSRSRS", "RRRLRRSRRRRRSLRSSRRSLSSRSSRRRRRSSRSRSRRLLRRLRRRRRR", "RSSRSSRRRSSRRRRSRRRRRRSRLRSRRLLSRRLSRSRRSRRSSLRSRR", "RSSRRLRRRSRRRSSRSRRRRSRRSRRSRRRSRSSRRRSSRRRRRRRLSS", "SRRLSRRRRRSLRRSSRRRRSRRRRLSRRRRRRRRSRRLSRSRRRSRRRR", "SSSRSSSSRRSRSRRLSSSLRSRRSRRRRSRRSSRRRRRRLRSSRRLRRR", "RSRSRRRRSRRRSSRSRSRLRSRRRRSSRRSRSRRRRRRSRRRRRRRRRR", "RRRSLSRRSSLRRSSRSRRLRRRSRRRRLLRRLRRRRSSRRSRLRRRSLS", "RRSSRSRRRLRRRSRSRRRRRRSSRSRRSRSSRRRRRLRRRRRRRSSRLS", "RRSSRRRRRSRSRRRRRRSRRRRSRRRSRSRLRSRRRRRRLSSSRRSLSR", "SRRRSRSRRRRRSRRRSRRRSRRSLRSSRRRRSRRLRRRSRRRSRRSRSR", "SRLRSSRSRRRRRSSRSRSRRRRLRRSSRRSRRRRRRSRRRSRRRRSSLR", "RRRRRSLRSRRRRRLRRRRSRLRRSRRSRRRRSRSRRRRRSSRRRRSSRR", "SRRSRRRRRRSSSRRSRLLRRRRSRRSRSRLRRRRRRRRRLRRSSRRRRR", "SSLLRRLRSRSRRRSSLRRSSRRRRRRRRSLSSRSSRRRRSSSSSRSSRR", "RSSSRSSSSLLRSRRSSSLSRRRRSSRRRRRRSSRSSRSSRSRRRRRRRR", "RRRRRRSSSRRRRRRRRSRRRRSRRRRSRRRRRRRLSSRSRRRSRSSRSR", "SRLSRRRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> commands = {"LLRRSSSLLLRLSRSRSRLLRRSSSRSLSRRRLLLLRSLRLSSRRLLRRL", "LLRLLLLRRRRLRRRLRSLLRSLSSSSLRRLRRSRRLLRLLLRLSRLSSL", "RRSLRLRLSSRSLRLLLRLSRSSLSLRLLSSRLLLLRLLRRSSLRLLLLL", "RLRSRSLLSLLLLLLLLLRSRLSSRLLLSRLRLSLSRSLSLSSLLLRLRS", "RSLLLRSLSSLSRRLLRSLLSLLLRSLSSSLRSSRRRSSSLRLSRSLSLL", "LLLLLLSSLRLRRSRSLSLRLSLSRLRLLLLRRRSLLLLSRSLLSRSLLS", "RLLSSLLSSRSLSLSLRRRLSLLRLLRLSSLRSRLLRRSRSLRSLSLLLS", "LRRRSSSSLLSLLSLSLRRLSLLLRLRSLSRRLSLSRSLLLRRLSSSSLS", "SRLLLRLSSRSLLLLRRSLLRLSRLSLRRSLLSSSLSSLSLSLLSSLSLR", "LLSRSRSLRRLRRSLLLSSLLSSLRLSRLRLSLSRLLLLSSLLRLLLSLL", "LLRSSLSRSSLSRLSLSSLSSLSSSRLLRLRRLLLLLLSSRSRLSRSLRR", "SRRLLLRRLSSRLSLRLSLSLSRSLLRRSSSLLSLLSLSLSSLRRSSRLL", "SSRRLSSRSSLSLSSRSSRSLLLRLLLRLLLLRRRSRRLSSSSLSSSSSS", "SRSSLSLLLLSSLRRLRSSLRRLRSRLSSLSLRSLSLLSLSLSRLSLLLL", "LLSSLLSSRSLLLRLRLRSLRSLSSSRSLRLRSLRLRSRLLLRSRLLLSR", "RSSSLLSSLLLRSRLSRLLLRLLSLLSLRRLRLSRRSSLSLLRSRSLLRR", "RLLRLSLLLSSSLSSRLSRRLSLLLLSLLSRRRSLSRSLSLSLLSLSRSL", "LSSLSSSLSLLSLLLRSRSSRLLSSLSSRLLRSLLRRSRSLRLLSLSSSR", "LRSSRSSRLSLLLSLRLRLLSSSSLRLSSLRSRSRLSLSRRLRLRRSRSL", "LLRRLLRLRRLSSLRLSSRRLRLRRLRRLLLSLSLRLLLRRSRLRLLSRL", "SSLLRSLSSLSLSSLSLLLLSRRRLLSSLLRLLRRLRRRSLSSRRRLSLL", "LLRSLSSLLSLRSRLLSLRRLLRSSSSSLRSSRRLLLLRRSSLSSRLRLS", "SLRLLRLSRLRLLRSSLSRSLSLRSLSSLLRLLSLSLSRLSRLLRSRLLR", "SLLSLLSSSRLLLLSRSLRLSSRSSLLLRRRSLLSRRRSLLLRLSRSSLL", "RSRSRLRRSRSLLLSSLSRLLLRSRSLLRSLSSSSSLLLSRLSSSSRSRL", "LSRSLLSLLSLSLSSRSLSRSLSLLRSRSSSSLRSRLLSRRRSRSSLSRL", "LLRSSSLSLLSLRRRRSSRSLRSSSLSSSSLRLRSRRSLLRSLSLSRRRS", "RSRRLRRLLLLSLLSLSSSRLLRRLSRLLSRLLLLRRSRLSLSLLLSSSR", "SSSLLLSSSLSLSLSSRRLRSRRRLRRRLLSLSLLRSRSRRRSRRSLLSR", "RRSLSRLSLSRRRSSRLLLRSRLLSRLRLRLRSLSLSLSSSLRLLRLLRL", "LSLLRLLSRSSSRSLSSLSRLLRSSSSSRLLLSRRSRSRRSSRSLRSLLS", "LSSLLRRLRRSLLLSSSLRSRSLSSLRLRRLSRLLRLLLSLSLSLLRLLL", "LRSLSRRSRLLSSSRSSRRLLSSSSSLLLSRLRLLLRSRRLSLSLSRSLL", "LLRLLSRSRRRLRRLSSSSLRSSSRRLRSSSLRLSLSLLRLSLRSLRLRL", "RLSSLLLLSLSSLRLSRLLSSLSLRLLSRRLLRSLLLLSRRSLRSLLSSL", "LLRLRLSSLRRRSSRLSRSRSRRLSSRSSLLLLSSSLLSRLLLRSRLLRR", "SRLSLSLSRLLLLSSSLRSSSSLRLSSRRLSSLSRLSSRLLSRRSLLLSL", "LSRRSRRSRLSSRSRSRRRRSLRLSSRRSSRSLSSLRSRRLLSRLRLSLS", "LLSLSSRLRLSRLRLSRLLRRRSSRLLRRSSLLSSSLSLRLSSLRRRLSR", "LRLLLLLLLLLSSRSLRLRLLLRRSSLSRSRLSLLSSSLSLLSRLLLRLL", "LLSSSLRLSSSLRRRRSLRSSLRSLSLSRSLLRSRSSLLRSRSSLLRSLR", "LLRRSRSLLLLSRLLRLLSSRRLLRLRLSLRLSRSSLSRSLSRRSSLSLR", "RRLSLRRLLLLSSLRSSRLRLLLRSSLRLRLLRLLSRLSRRLLLLLLSRS", "LRLSRRRLLLLLSSLRLSRLSRLSSRLSRRLRLRLLRSSRLLLRLLSRLL", "SLLLSRSLLSLSSSRLLLSLRRSRRLLLRLSRLRSLRRRSSRSRRLRLLL", "SLRLRLLSLSRLSSRSLSRSSRRLRLRLSLRRSSSLSRSRLSLRLLSSSL", "LLRLSSRLRRRLSSSLRLRLSLSSLSRLLSSLLRRLRSRLRSLRRSSLSL", "RSRSLLLRRRSLRLSRSRRLSRLRRRRSSLSLLRLRSSRLSRSLSSLLLS", "LSLSRRLLLLLRLLLLSLRRLLRRRSLRRRSLSRRLRRSRRLSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> commands = {"SLSLLSLLRRLSLRLLRLLLRRLSSSSSSRLRLRLLRSRSLRRLSLLRLL", "RLLRRSSLLRLRLLSLSLLSLSSLLLSSLRLRLSSLRLLLSSLLRLLSSL", "SSSRLLLRRSLLLLRLLRLLRLSSLSLLLSSSLRLLSLLRSLSLRLLRRR", "LLRLLRLLLSLLSSSSLSLRLLLLLLLLLLRRSSRRSSLRLLLRLLSLSS", "LLLLRSLSLLSSLRLSSRRLLLLRLRLRRRSLLRLRLRSSLLRRRRSSLL", "LRLRLRSLSLSLRSLSSSLLLLSRSSRRSLRRLSLLLLLRLRLSLSRRRS", "SSLLRSLRRLLLRLLSRLSLLLSLSLRLRLLLLLRSRLLLLLLLLRLLRS", "SSLLSRLLLSSSRLLLRSRLRLLLSSLRLSRRSLSSLLSLLLSRRSSSSL", "RSLLRSRLLLLLSLRLLLLRSLSLRRSRLLRLLLRLLSSSLRRLLSLRRR", "RLRRLLLRRRLSRSSLLSLSLLLLLLSLLLLSRSLLLLRSSLSRLRLLSL", "RSRLLSRLRSLSLLSLRLLLRSSSRLRLSLRLLSLSLSLLLLLLSLLLRL", "RRSLLLRRLLSRLRSLRRRRRSLSLLLLSLLLLLRSLRLSLSLRSLRLRS", "LSLRLLSRRSLLRLLLSSLLSLLRRSSLSSSLLRLSSSSRRSRRSLLSLS", "SLLLLRRLRSSRLSLLLLSLRLLRLLLRRLRSRSRRLLLLLLLLRSRLLS", "SRLRSRLRSLRSLLSLLRLRLSRLRSRRRLLSLLLLLSSSLSSLSLRLSR", "LLLRLLSRRSLSLSSLSSRLLLLSLLRLRSLLLSLLLSRRLLLRLRLLRL", "SRSLLRSLLLLSSLLLLLSSRLRLRLSRSLLRSLSRRLSSLSRRSRLLLS", "LLSLLRRLLSLLSRLLLRSLSSRRRRRRLSRLLSSLLSLLLSLRLLSLLL", "RSLRRLSLSRLLSRSLSLRRSLLRRLSLSLSLLSLLSSRLLLSSSLLSRR", "SLSRLLLSSLLRRLLSLRSLLLRSRSLLSSLLSLSLSRLSLRRSSRSLRR", "SLLRLLRRLLSSSLLLSSSLLSLSSRSSLRLLLLRLLRSSLLLSLLRLRS", "SRLSRLSLSLRLSSRRLRLRLRSSRSSSLLLSRLRLRLRLRRSRRLSSSL", "SSLSLLRSLLLLSLSLLSSRSSLLLLLRRLRLRRLLRLLRLLSSRLLSLL", "SSRSSSSLRRLLRSLRLSRLRRRLLSRLSLRLLLLRLRLLLRSLRLRLRL", "SLLRSRRRSRSSRRLRSLSSLLLLSRLSSRLLRLRRSLSLSRLRRLSRLL", "LSSRRSLLLLSSLLSRLLSRRLLSSRLLLLLLLLRLLSSSRRLRLSLSLL", "LRLRSLSLSRLLLSLLLSRLRRLLSRLRLLSLLLSSSSSSSLLLRSRLLL", "LLLLRLLLSLRSRLLLLLSSRRRSRLSSLSLRLLSRSSLRLLSLLLRLSS", "LSLSLLRSLLRLSSRSLSLSLSSLLLSSLRRRLLSSSRLLLLLLSSRLSR", "SSRSRRSLLSSRSLSLLLLSLLSRLLLRLSLLLLRLRSSLRSSRSSSRLR", "LRSSLLSRLSLLLLRRSSSRLLLLRLLRLSSLLSRLSRLSRSSSLRSLLL", "RSLRLRLLLLLLLLLRSLSSSRSSLSLRLLSRRRLLLSRLLRRSSRLLSS", "LLSLSLLLRLSSLRLLLSSRSLLRLLLLSRSLRLSSRRLRLSLSRLLRRR", "LLLRLSRSRRRSSRLSRLRLSSRLRRLRLLSSSLSLLLLRRSRLSLRRLL", "LLSLSSSLSRSLLLLSSLLLRLSLRLLSSRSSLSSLRSRSLSLSRRLLRR", "LRRLSRLRLRSLLLLLRRLSSLRSLSLLLSRSLLSRSRLLLRLRRLLLSS", "RSRSLSRSSLLLLLLLLRRLLLRRSSSRSLLLRRRSRSSLSRLSLRSRLR", "LRRRRLLRRSLSRLSLSLLSRSLRLLLRRSRLSRSLSSRLSRLLSRSLRL", "RLLLLLRLSLLRLLRLRRLLLLSSLSRRLRLRSLSLSLRRRLLLSSSRSL", "SSRLLLSLLSLLLRLRSRLRSSLLLSLRLLSLLLSLLSRLSRSRSRLLLL", "RLSRLRSSRRSRLLRLLLSSRLLLLRLLRRLLLRLLSLLRRSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> commands = {"LLLLLLLRRLLRRLLLRLLLLSLRLSLSLLSLLLRLSLLLLLLRLLRSLL", "LLLRRLSLLRSRSLRLLLLLLLLRLRLLLRLLLLLRSLLLSLLLLLLSLL", "SLLLLSLLLLLLLSLLLSLLSLSLLRSLLRLLSRLRSLLLLLRLLLLLLL", "SLLLLLLLRLLSLLLSLLLLRLRSLLLLLLLLSSRLSLLRLLSLLRLLSL", "LLLLLLLSRLLLLRLLLRLRLSLRLLSSLLRLLSLSSSRLLRRLLRLRLL", "LLLLRLRLLLLRLLLLRLSSLRRRLLLLLLLLLLLSLLSLRLRRLLRSLL", "SRLLRLLSLSLLLLLLLSLLLLLSLLLLLLRLLRLRSLLLSLLSLRLLRR", "LLLLLLLRLLLLSLLLLLLSRLLLLLRLRLLLLRSLSSSLLLLLSLLLLS", "SRLLLSRLSLLLLLLLSLLLLRRLSLRLLLLLLLLLLLLRLLLRRLLLLL", "LRLSRRLLLLRRRLSLLLLLRLRLLLLLSLLLSSLLLLLLLLLLRLRRLL", "LLLLSLLLLRLLLLLLRLLLSRLRSLLLLLRSLLLLLRLLSLSLLLSRLL", "LLLLLLLLSLLLLLLLLLRLLLLLLLRLLLLLLSLSLLLLLLLLRSLLLL", "RLSLLSLSLSLLLLLRSSRLSLLLRLSLLLLLRRLLLRLLRLLRLLLLLS", "LSLLRLRLLLSRLLLRLLSSLRLLLLSSSRLLLRLRLLLLSLLLRLLLLL", "RLLLLRLLLLLLLSLLLLLSLRLLLLLSLLRSLSLLLLLLLLLSSLSLLR", "RLLLRRLRSLLLSLSSLLLLLLLLLSLSLRLRLRSLRLLLLLSLLLLLRS", "LLLSLLRLLLLLSLLLLRSLLLSSRLLLRLSLLLLLLSLRLLLSRLRSSS", "SLRLSLLLSLSLLRSLLLLLSLLLLLRLLSLLLRLLLLLLRSLLLLLLRL", "SLLLLLSLLLLSLLLLRLLLLLLLLRRRRSLLLLRLSLRLLLSRLLRLLS", "LLSLRLRLLRLSLLLLLLSLLLLLLLLSLLLLLSLLLRLLRLSLLSRLLL", "LLLLLLLLLSLSLSRLLLLSLSLLLSSLLLLSLLLRSLRLSLRLLLRLLR", "LLSSLRRLSRLLLSSLRSRLSLLLLLLLLLLLRLLLLLLRLLLSLLLLLL", "LLLSRSLLLLLLLLSLSLLSLLRRLSLLLRLLLLLLLLLLSLRRLLLSSL", "LLLLLLLLSLLRLLLSRSLLLLLLSLLLRLLLLLLLLLLRLRLLLSLLLS", "RLLLLLLLSSLLRLLLLSLLLLLLLRLRRRLLLSLSLRRLSRLRLLLLLL", "SLLSLSLLLLLLRLLRRLLLSSRLLRLLRRLRLLRLLLSRLLLRLLSLRL", "LSRRLLLLSSRSLSLLLSLRRLLLLSRLRLLRLLLLRLSLLLSLRLLRLL", "LRLLLSRSLLLRLRLLLLRLLLRLRLLSLLLLSLSLSLRLLSSRSLRRRL", "LLSSLLLSLLRSLLSSLLLLRRSRLLLSLLLLLLLLLSLLLLRLLRLRRL", "LLLLLRSLLSLLLLLLLLLLLLSLRSLLLSLLLLLLRSLLLLLLLRSLRR", "LLRRLLRLLLRLLLLLSLLLRLSLLLLLSLSSRLLLLRRSLLLSLSLLRR", "SLLLLLLLRLLRSLLSLLLLRRLRLLLRLSRSLSLLLLLLSLLLLRLRRL", "LLLRSLLLLLLRLLLSLLRLLSLLLLLLLLRLSSSLLLLLRRLLLLSLRL", "RLRSLLRRLRLSLLLRLLLSLLSLLSSLLLLLLRLLLLLLLLLLLLLLLR", "LRRLLLLLLLLRLLLLLLLLLLLLLLLLLLLLRSSLLLSLLRLLLLLLLL", "SLRLLLLLSLRSLLSLLLRLLLLLLRRLLLSLLLRLRLLLLLLLLLLSLL", "LLLLLLLLLRLLLLSRRLRRLLLSLLSRLLRLLSLLLLSSSLLLRLLRLS", "RSSLRLLLLLSRLLLLLSSLLLLLLRLRLLRLLLLSLLSSRLLLRLLLRL", "LRLLLLLRRSLLLRRSLLLLLLRSRLRSLLLLRRLRLSLLLLRLLLLLSS", "LRLLRLSRLLLRLLLLLLLLLLRLSLLLRRRLLLLLSRRRLLLRLSLSLL", "LRSSLLLLLRLSLLLRLLLLLSLLLLLLRLSLLLLLLRLLLSRLLLSRLL", "RLLLRLLLLRSLLLLSLLLLLLLRLLSRLSSSSSLSLRLLSRLLSLLLLL", "LLLLLLLLLLSLLLSLRSRLLLLLLSLLSLLLLLRRRLLRSLLRLLRLLL", "SLRLLLLLRLLRLSLRLRLLLSRLLLLLLLLLLSLLLLLLLLLLLLSLLL", "LRLRLLLRLRLLLLRLLLSLLLRSRSLLLLSLLSSLLLLLSLLSLRLLSL", "RLLSLLLLLLLRSRLRLLRLLLLLRLSLLLLSSSLSLLSLLLRLRRSRLL", "LLRLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> commands = {"RRRRRLSRSRRSSSLRSRLSLSSSRSRSSRLSSRSLLRSRLRLLSRSSSL", "SSRRRSRSLSSSRRSLRLRRSRRRSLLLSRLSSRSLSRSSLSSLRLRRRS", "LSLSLRLRSLSLSLSRRSSSLRRRSLSRSRSRRRSRLLSRRSSSLLSRRR", "LRSRLRSLSSRRRSRRRSRRRSRSRLLSRLRSRSSRSSSRRLRRRSRLLR", "RSSLSRRSSLRLSLRRRRLRSRRRLLRLLSRLSSRRRRRRRLSLSSSRSR", "RLRRRSRRLRLSRLRLRLSRLLRSLRRSLSSSRRSLRRSLRLSRRLSLSL", "LLSSRRLLSSSSRSRRRRSSRRSSSLLSSRRLRSLRSRLLSLLSLSLLRR", "SLRLRSSLLSRLLRSSSSLRSLLRSSRSLRRSRRRRSRRRSRSSRRRSLR", "SRLRSRRSSSSLRRSSSRLRRLLLRRLRSSRRRSRRRLSRRLSRLRRSSS", "SRLLSLSRRSSRSSRRLSLSRRLLLRSRLRSSRSSRRRLLLRLRRRRRLS", "LLLRSRSRSSRLSSSLLSLSLLRLRRLSRRLLLSRRSRRSRSLSLSRSSR", "LLSLSSLLRSRRRSRSSSSSLRSRLSSRLRLSRSRSRLLRSRRSRRSSLR", "SSLRRRRLRRSRRSRRRLRSRRRRSRRRRSRLLRLSRRLLRSRRRSRRRS", "RSLSSRRRRSLSSLSRLLRRRRSSRLSRLRRSRSRSLRRRRSLRSSLLRR", "RSRSRRSLLSSRRSSRSSSSRLRRSRRSRLLLLSSSRSRSRLRSRRLSRR", "LSSLSLLSSRRRRRRLRSLLRRRRLSSSSRSSRRLRRLSRRSLRSLLLRS", "SLSRSRLLRSRSLLLLSLLSRRSRRRRLRLRLLLRRLLLSRRRLRRSLRL", "SLRRRLRSSRSRRRRSRRRRSLRSLSSLRRLSSSLRRRSSRSLSSLSRRR", "SRRLRRRSRRLRRSRSRRRSRRLSLRSLRRSSRSSLRSRSLSSLSRSLLS", "RLRRSSRLLSRRLRRRRSSRRLLRLSRLRSLRLLLSRRRLSSSSLSRSRS", "SRRLSLSLLRLSSSLSRRRRRSRRRSRLRSRSSRSRRLSRSRRLSLLRSR", "RSSRLLSSRLRSRRLSRRSRLRRRRSRLSSSRRSRLSSRRLSSLSRRSSS", "SSSLSLRRRRSSRSRRRLSRRSRLLLLLSLSRSRSRRSSRRRRRLRRRRS", "LSLRLSRRSRSRSRSSRRSSLSRLRLRLLSLSRLSLRSRRRLSSLLSSLS", "SLSRSLRRLLRRLLRSLSRRRLRLSRSSRSLRLRSRRLLSSRLLSLSRSR", "RSSSRRRRLLRLRRSRRRRRSRRLRSLRLSLLSRRRLLLRRRRRRSLLLR", "RSLRLLLSLRRSLSRRLRRSRLLLLLSSRRRSRRSLSSRRRSRRSLRLLR", "RSRSLLSLLRRSSRSSSSRLLRLLRLRLRLRLRSRLLRRRSRSLLSLRLS", "LSLSRSSLLRSSRLRRSSSRRSSSLSSSSSLLSRRRRLRRRRSRSRLRLL", "RLSRRSSSRLLSRLSSRSSRSRRSRSRRRSSRSRSRLLRLLSSRLRRSRL", "SRLLRRRSLRSLSRLRLLSSLRSLSRLSSLLSRSLLRRRSLRSRSSRRRL", "LLRSRSSSSSSSLRSRSLRRSLLLRSSLRRRLLSSLRRRSLRSLSRSRRR", "LSSRRRSSSRSRRSRSLLSSLRLSLSLSRLRRRSSRRRRSRSSSRLLSSR", "RSRRRSSRRRLLRSRLLRRRRLRLSRRRSRLLLSRRSSSLLSLSLLRRRR", "SLRRRSRLSSLSRLRLLSLSSRSRRLRSRRLSSRRRLSLRLRSRSRRSSS", "RRSLRLSLLRSRSLRLRRRLRSSRLSLLLSSLLSSSRLSRLLLRRRRRRS", "LRRSSRLRSLSSRRSRRSRRLRSSLRRLRLSRSLLSSSRSSRRLLRRLSR", "RLRRRSRRRSSSSSLSRLLRRSRRLLLRRSRLSLRLSSRRLSRLRRRRSR", "RRLRLSRLLLLRRRRRRLRSSRLLSRSLRLRRSSSSRRLRRLRRSSRRRS", "SSSRSSLLRSLSLLRLLRSSRSSSRLRLRRRRSLRRSLSSLRSSLRSSRR", "LLSSRLSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> commands = {"RRLLRRRRRLRLLLSRRLRLRRRRLSRLRRSRLSRRRLRLRRRRRLRLLR", "LRRLLRLRSRLLRSRRSLLRSRLRRRLRRSLRRLRLLLRLRRLRRRRSLR", "RRLRLLSLLRSSRLLRRRLLSRLRSLRRSLLSLRSSRLRRRRLRLLSLLR", "RRRRLRLLRLRRLRRSLLLLLSRLSSLRRLLSRRRRLLRRLRSRRRLRRL", "RSSLLLRSRSRRRRRSRLLLLLRLRLRLRRLRLRLLLRRLLSLLLLRRRR", "LRLLRLSSRRRSRSLSLLLRLRRRSRRRSSLRRLRRRSRRRRRLRLRRRS", "RRRRRRRRRRRRLSLRRLLLLLRRRLLSRLRLSLRLLRLLSLLLRLRLRR", "RRRRLRLRRRRLRSRLRRLRLRLRRRLRLRRRLLLLRRLRRLLSRLLLRR", "RRRLLRRRLRRLRRLRLLSLLRLRLRLLRRRLLSRLRRRRRSLRRRSRLR", "LSSLRLRRRRLRRRRLLLLLRRRLRRRLSRSSRRRRRRRRRRRLLLSRRL", "RLRRRLLRRLLRRLRLRRLLLLLRRRRLRSLRSRRLRRRLRSLLRLLLRR", "RRSRRSRLRLSSRSLLRRRRSLRLLSRRLLRRLSRRLRLRSRRRLLRLRL", "RLLRLRRRLLLLRRLLRRRRRRLSLRSLRLSLLLSRRLRLRRSLRLRSRR", "RRRRRRLRRLLRSRLRLLRRRRRRLLLRRLSSRRRRRRRRRLRRRLRRSR", "RLRSRRRLLLRRRLRRRRLRRSRRLRRRLRRLLLRRLRRRLRRLRRRRRL", "RRRRRRRLLLRRLLRLRLLLRRLRLRLRRRRRRLRRLLSRRLRRLRRRLR", "SRLLLRRRRSRRRSRRRSRRSLRRLRRLRLRRLRRRRRLRRRLRLRLSRR", "LRRLSSRRRLRRLLRLLRRRLLRLRLLRLRRRRLLRSSLSRLLLSLRLRL", "RLLRLSLLRRRLLLLRLRRLRRLLSRRRSRRRLLRRRSRRRLRLRRRLRR", "RRLRSRRLSRRLLRRRLRLLRSSRRLRLSSSRRRLLLRRLSLRLRLRLRR", "LRRRLRRRRLRSRSRRLSRLLRLSRLLRSLLLRRLLRSRLRRSRLLRRRL", "SRLRRRSLRRRLRLSLSRRSRLRRRRRLRRLLRRSRRRRRRRRRRRLLRR", "RRRRRSRLLRLRRRSLRRLRRRLRLLRRSRRRRRLLRRLLRLSRRRRLLL", "RRSRRLRRLRLRLRLRRRLRRRLLLRLRSLLLRRRLLLRRLLRRLLLRRR", "LRRRRLRRRLLSLRRLLSLLSRLLRRRLRRRSLRRRLLLLRLLRRRLLLR", "RLRLLRLRLRRSRLRRLRRRRRLRRLLRSRRRRRRRRLRRRRRRRLLLSR", "LLRRRRRRRRRRRRLLRLLLLLRSLLLLRRLSRLRLRLRSLRSLRLRLRR", "RLSLRLRSLRRRRLRRRLLSLRRLLLRLRSLLSRLRRLRRLRRLLLRLLR", "LLLRRLRSRLLRLRRLLRRRRRRLLLLLLRRLLRRLLRRRSRRRLRLRRR", "SLLLRRRRLRLLLRLRLRLSRSLLRSRRSRRRLLLLLRLRRRRRSLLLRR", "RLRRSRLLLRRLRRLRRLLRLRRRLRSRRRLRLRRRLRLRRRLRLLSLRR", "RRLRRSRLLRLLRSRSRLRRLRRRRRLLLRRLRRLSRRLRSLSRRRRLSR", "RLRLLLLSRSRLRLRRRRLLLRLRRLSLRLRRLLLLLLLLRRRRRRRLSR", "RRLRLSLLLRSRRLRLSSRLLRRLRRLSRLRLRSLSLSRRRSRLRLRRRR", "LLLLLRRLRLRRLRSLLRRSRSLRRLRRRRRLRLRRLLRLRRRLLRRLLS", "LLLRRLRLRRRRRRRRRLSRRRRLLLRRRRLLRLRRRRRRRRRLLLLRLS", "RRRLLLLLLLRRRLLRRRRLLRRSRLLSRRRRRLRLRSRRLRRRRLRSLR", "LRLRLRRRRLRRRLRRRLRRRLRLRLLRSRLRLRLLRRRSRSLRRRRLRR", "RRRSRRLRRLRLLLRRSRLLLLLRRSRRLRLRRRRSLRLLRSLLRRRLRR", "LLRLRRLLRLRLRLLRRRLLRLRLRRRLLRSLLLRRLRRRRLRLLRLLLR", "RLRRLRLRRRLSRRRSRLSLRSRRRSRRLRLSRRLRRRRLSRRRRLLSRR", "LLRRRRRSLRRRLLRLRRRLLRLLRSRRRRRSLRLLLLRSRRRLRRLSRR", "LRRLRLRRLRRSSSRRRRRRLSSRRRRRLLSLLRRRRRRSRLRRLRLLRL", "RLRRRRRRRRRSRLLSRRSLLRRRLRRRLRRRRRLRSLRLRRRLLRRRRL", "RRSRLLLRSRRRRRRLRLRRLRLRRRSRRLRLRSLRRLRLRRRRLLLLRR", "RRLRRRLLRRLLLLLLRRLRLLSRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> commands = {"SLLLRSSSLSSLLSSLSSLSSSSLSLLSLLLLSLRSSSLLSLLSLSLLRL", "LSSSLSLLLLRSLSLLRLRLRSSSSRLRLSSLSLLLLSSSSSLSSSLLLR", "LLSSRLLLSSLSSSLSSRLLRLLLLLLSLLLLLLSRLSLSLSLRLSLRSS", "LSLLLSLLLLLLSRLSLLSSLSSLLSSSSRSSRRLLSRSLSLLSSLLSSS", "RSSLRLLLSLLLSLSLLSSSLLSSLSRLLSSSLSLSSLLSSLLSSRLSLS", "LSSLSLSLLLSLLSSLSLSLRLLLSLSLRSLSLSSSSSLLLLLLLSSSLL", "LLLLLLSSLLSSLSLSSLLLLLLSLLSSSLLSRLSLLSLLSRSRLLSLLS", "LSLSSLLRSSLLSSLSLLLLLLSLSLSSSSLLLSLSSLLRSRLSLLSLSL", "LLSSSLSLSLLSSSLLLLSLLRSSLLLSLLLSSSLRLLLSLSLSLLSLLR", "LLSSLLSSLSLLLSLSSLLLLSLSRSSLLSLLLLLLSLLLSSLLSSLSLL", "LSLSLRSLSLSRSLLLLSLSLSLLLLSSLSSSLSSLLSLRSLLSLLSLLL", "SLLLSSLSSLLSSLLSSLSLLLLLSSLLLSSSSSSRLSLSSSLSLSSLLL", "LLLLSLRLLLSRSLLLSSRRLLLLSLLRLLSRLLSLLRSLLLSSSSLSSL", "SRSLLSLLRSLLSLSSSSLLLSSLRLLSSRLSSSLLSSSSSLLSSLLLRS", "SSSSRSSSSLSLLSSLLSLLSLSLLSSSLSSLLLLSSSSLLSLRLLSLLL", "SRLRRSLLLLLLLLLRSLLSSLSLLLSSSSRSSSSRSSSSSSSSRSSSLR", "LLLSRSLLLSLLLSLRLLLSLRLSLLLSLSSLLSLLLLLLLLSLLSLLLS", "SLSSSLLSLLLSLSLLLLSSSLSSRLLSLLSLLSSSSLRSSLRSSSLRRL", "SLSLSLLSLSLLSLLLLSLSSLSLSSRSSLLLSSSLLLSSSSLSSSSSLL", "LLLSSLLSLSSLLLLRLLLSRSLRRLLSSSLSRLSSLLLLLLSLLLLSSS", "RSLLLSRLLLLLLLRLLLRSLSSLSSLLRSLLRSLLRSSLSLRLSLLLLL", "SSSLLLRLSRRLRLSLSSLLLLLLSLLLLSSSLLRSLRLLSSLLLLLSLL", "LLSSLSSRLSLLSSLLSSSLSLLLSSSLSLLLLLLLRLLSLLSLSLSRLS", "RLSLSRSRLSRSSLSSRSLLLSSLLLLRSSLLSLLLSLLLLLSSSLLLLS", "SSRLSSLSSLSLSSLRSLLRLLSSLSLLLSSRSSSLSLSLSLSSLLLLSL", "RRSSLLSLLLSLLLLSSSSSLLRSLLLSLLLSLRLLLSSRSLSRLLLSRL", "SSSSLSSSLSLLSSSLSSLLSSSSSLLSLRSLLLLSLSSLLRSLSLLSLL", "LLLLSLLSLSSLSSLSLLLRRLSSRLLLLSSLLLLLLSSLLRLLSLSSLL", "LLSLSSLLLLSSSSRSRLSSSLSSLSSSLLLSLLLRLLLSSLSSSLRSLS", "LRSSSSLSSRSLLSSLRSSLSRLSLSLLLLLLSRSLSSSSSLLSLLRRLL", "LSLLRSSSLSLSLLSLLLLSLSLRRRSLRLSLSRLSSLSRLLLSSLSRRL", "RSLLSSRLLSRSSSSSLRLRRSSRLSSSSLSSLLLLSLSLSSLSLLSSSS", "SLSSLLRSRLSSLLSSLLSSLLLSSSRSLLRLSRSLLSSLSSLSLSLLSR", "LLLLLLSLRLLSSSLRSLSLLLLLLSLLSLSRLSSSRSLLSLLLLLLLLS", "SLSLLLLSLSSSSSLSSRSLLLSLLSLSLLLLLSSLSLSLSLLLLLLSSL", "LSLLSSLLSSLLSSLLRRSSLLSRRLRLSSSSSSSLLLLSRLLLLLSLSS", "LSSSLSLLSSLSLSSSLSSSSLLLSLRSLLLLLSLLSLLLLLLLLLSSLL", "LSLLLLLLSLRLLSLLRSSLSRLSSRLRRSSLSLLSLLLLLLLSSLSLSL", "SRLLLLSRRLSLRLLSLSLSLSLLLSLLLLSLSLRRSLLSLLSRSLLSLS", "LLLLSRSLSSLLLLLLLSLLLLSRSLLLRRLSRSLLLRRSLLLSLLLLLL", "SLLLLSLSLSSSLSRSSRSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> commands = {"SLLRSRSLSLSLSLSRSSLLSSLRSSRSSSLRSRSRLLRLSSSSLLSRSL", "RSRLLSLRSLSRSRRSLSRRSRRLLLSRLRSSSSRLSSLLSLRSRSSSSR", "LRSLRRLLRLRSRLRRLSSRRSRSLRSRSLLRLRSLRLSSLSLRSSRRSR", "RSSRSLSSRSLSSRRRRLLSSLSSLLLSLRSSLRRSRLSSLLRLRRLSLR", "RLLRSRSSRLLLLLLSLSSSSRSSLRSLRSSSSRSSRLRSLSRSSLSSSS", "RRRSSRRRRRLLSRSSRLSSRLSRSRLSSLLSSSRRLSSSRRLRLSLRSS", "LSRSRSSSSSLSSLRRSRSLLRRSSLLLSSSLSSSRSSLLSSSRSSSRLS", "SSRLLSSRSLSRSSRSLSLLSLSSSSSRSRRSRRRRSRSLLSSRLSLLRR", "SSLRRRLLSLRLSRSSRSRLRSSSSRSLSRSRSSLSLSLSLLSSSRLSSS", "RLRSSSRSRSRSRRLSRLSSSSRSLSRLSSRRLRLLSSSRLRSSRRRLSL", "SRLLSSLLSLSLSSRSSRLLSLSRLSRLSSSRSRRSSRSRRRSLRSSRRR", "LSRSSSSSLRRLSSSRSRSLRLSRSLSRSRSSSLRSLRLLLRSRLSSSLS", "SSRLSRLSSSLRRSRSRRRSSRSRRSRSSSSSSSSSRRLRSSSSSSRRLL", "RRRLRLLSLLRRRRLRLLLSSRSLRLRRSSLRSSRLSRLSLRLSSSSSLR", "LSRSLRRSRSSSRSSSLSRSSLSSSSSRSRLSLLSRSSSSRSRSLSSLLR", "SSLSSSSSSSSLLLRLRSSLSSRRRSSRRRRSLRLSLSSRSRSSSRSLRL", "LSSSRRSSRSLSRRSLLSLLRSSRLLSLSLLLLSSRLSRSLRRSSSSLSR", "SRSLSLRSSSLLLSSLLSRRRSSRSLSLSSRLLSRLSRSSLRLSSRSRSS", "SLRLSLSLRSRRSSSLRLSLRSLSRRSLLRRRLRSLLRSRRRSLSSSSSR", "LLSSRRSRSRLRRRSLLSSRRRSSLSSLRSRRSLSRLSRSSRRRSSRLRL", "LSSLLLLRLRSRSLRRLSSLSRRRRRSRLRLLSSRLRRSLLLLLRRLLLR", "LSRSSSSSRLRSSSRRRRLLRRSLRRSLSRRLRRSRRLRRLSSLLSSSSR", "SRRRSSSRSRRRLLSLSSRRLSSSLLRLSLLSLSSSRLRSSRLLLRRLLS", "SLSRLLRSSLLSRRLSLSSLRSLSSSSSLLSSRRSLLSRRRRSRSRLSSS", "RLLRRRSSRRLRRLLLRSRRRSRRSLRLSRSRLSSRLRLSRSRRSLSRRR", "LRSSSSLLRRSRRSSRSLLRLLLSRRRLRRSRSSSRSSSRSSSLSSRRRS", "SLSSLSLRSSSRSSSRRLLRSSRSSRLSRLSLLSRLSSSLSSLSLRSSSS", "SSSRRSRSRLSSLSLSSSSRRRRRRRSLRSRRSLRSRSRLSRSSSLSSRR", "SRSLRSSLSRRSSSRRSRLLRLSLLLLRSSRSSSLLSRRRRSSSSLRRLS", "RRRRSSRSSSSSSSRLSRRSLSLSLSSLRLSSSLLSRSSLRSSSSLSSLR", "SLSSLSSSSRRSRSSRRSSSRRSLSLSRRLRLLLLRRLLSLRRLSRSSLS", "SRSRSRSLSLLLSLSSSLLRRSRSSSLSRLRLRLLRSLRRSSLLRRSSSR", "SSRRLRSSRSSRRRLLSLSSLSSSSSLSRSSSRRLRSRSSSSSLSSRSSS", "LRLSSRRSRLSRSSLLLSSRRSRSRSSRLRLLRSSRRSSSSSLSSLRSRR", "RRLRSLSRSLSSLSSLSRLRSRRRSSSSSSLLSSSSLSRSRRSRRSRLRR", "RRLSRSLSSLRLSRLLRRRRSSSRRRSSSRSSSRSSLSSRLLRLLRSRSS", "LSSSLRRSSRSRSSLLRRRRSRRSRRRSSRRSRSRRRLRLLSLSSRSRLS", "SRSSRSSSRSLLSRSLLRLSSRLSSRLRRSSLLLLRSSSRRSSSLRRLSS", "RRLSSSRLRSSLLLRRLSSSSSSSSRRSLLSSSLSRSLSLRLRRLRRSSS", "SSLLRRLLLLRRRSLSSSSSSSLSSLSSLSSRLRRRRRLSLRRRSLLRSR", "LLRRSSSRLRSSSSRSRLRLLRLSSSSRRSLSRRSLSRSRSLLRSLSSLR", "RRSSLSLRLSSRSSSSSSLRSLRL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> commands = {"LSLRRLRRLRLLRRLRRSLSLRLLSLRSLLSSRLRLLRLRRLLSRLLLRL", "LRSLLLLRLRRLRSRRRLLLSSSSLLLLRRRRSSLRSRLLLLLLLSLLRL", "SLRRSRLLLRSSLSLRSSLRLRRRSLRRSRLRLLLLLSRLRLSRLLSSLL", "LSLRRLSRLSLRRLRLLRLRLRSLLSRLLRSRRSRLRLLRSLSSSLLRSL", "RSLRSSLLRSRLLLSRLSSLRLLRSLLRLLLLRRLSLLRLLRSLSLLLLL", "RLLLRLLSLLLRLSRLLSSLLRSLSLRRRRSLSLLSRRRRLRLSLLRSSR", "LLLRRSSLSRRLLRSRLLRSRSRLRRRSRRRLLRSLLRRSRLSLLSLRSR", "LLLLLSRRSSSLSRSLRLSLRRSSLRRSSLSLLLSLRLRLRRLLSSRSRS", "RLLRRLLRRRLLLRLSLLRSRLSLLLLLLLSSLSLLLLLRLRSSSRRRSR", "SLRLRLSLLRLLRRLLLSSLLLLRRRLLRLLLSLLLSSLRLLRRSRRRLR", "SLSLLRSLLLRSRLRLLLSLSLLSSRRLLLRRRRLRLRLLLRRRRSRRLR", "LRRLSRRRLLSSLLSRRRLRSLRLSSRRRLRSRRSLLSLRSLSRLLRLSR", "SSSRSRLLLLSLRLRLLRLRSRLRRSSLLLSLLLSLSLSRLSLLSRRSRR", "SRRLSLLLRLSRSLLSSLRSSLRRLLRRRLSRRLLRLSRRSSLRLLSLLR", "SRLLLSRLLRSLRSLLLSRRLRSRRRRLLRLSLLRRLLRLRRLLSSLLLR", "RSSLLRSSLRRLRRRSRSRRRRLSLLLLLLRRSRLRSSLSRRRLLSRSLL", "LRSRLLLLRLSSSLLRSSSSLSLSSSLSLLLRLRLLSRRLLLLLSSRLLS", "RSSRLLSRLLRSSSRLRRRRRLSSLLRSSSLLLLRLLRRSSLLLLLRSSS", "RRLLSRLRRLSLLLSRRRSRLLLRLLLSLLSSRRLLRLSSLRRLSRSRRL", "LLSLSSLRLRRLLLRLRLRLSRLLLLSLLRSLSSLRLLLRRRLLRRRLRL", "LSSLLLRRLRLLSLLRSSRSLRRRLRRLRLLRLLRRSLRSRLLSLRLRSR", "LRSRLLRRRSLLRRRRLRSLSLSLRLSRSLLLRLRRSRLLSLLLRRSSRR", "SLSRLSLSLRSLLLLLSLLSLLRLRRLLRRLLSLSRSSSRSLLLSLRSSL", "RSLLLLLLLRLLRSLLLLLRRSRLRSLLLRRLLLRLSRLSRRLSLRLLLS", "LSSLLRSRRLRRRRSLSLLRLSSSLRSRSLLLSLSRSRLLRRLLLSRLLL", "LSRLSLRLLRRSRSLSSRSSLSRRRSRSSLLRLRLLLRLRRRSSSLRRLL", "SLLLLRLLRLRLLSRLSSLRSSSLSSRLRSSLRLLSRRRSLRLLSSLLLS", "LSLRSRLRLRSLRSRSRSLSSLLLLRRRSRRLLLRLLRRRLSSSRLSSLS", "LLLSRSLRLRLSSLRLRSLLLLSSRSLSSSLSSSRLRRRLRLSSLSLSLS", "RLRLLLRRRLRLLSLLLLRSLSLSLLSRRRSRLSLLLLRLLRLSRLLSLS", "LLRSLLRLLLLSLLRRRSLLLLSLSSRSRRRRLRLLRSRLSSRLLRLSLR", "LLSSSSRLRLRLLSLSLLRRLLLRSLRRSRLRLLRRRLRLLSLSSLRLRL", "RSRSSSRSLRLRSSRLSRSLRLRLLLRRLRLRSLLLSRRLLLRRLSLSLS", "RSLSRLRLRLLLRLSLRSRLRLSRSRSRLLLRSLLLSSRRSLRLSRSLRL", "LLLRLRLLRSLRLLLRLRLRLLLRSLLSSLSRRSLSLLSLLSSRLLRRRL", "LLSRLRSLRRRLSRLRLSSRLLRLRRRLLLLLRRLLSSSLRRSLSRLLRL", "SLRLRSSRRRLRSRLRRSRSSRSRLSSLLRSSRRSLRRRLSSSLLSRSLL", "SSSLLLRLRRRSRRSLLRLRSRRLRLLRLLSLLLSLLSLLLLSRLLLLLL", "LSSLSRLSSLLRRRSLRRLLRLLLSLSRLSSRSSSLRLLLLLLSRRSLRL", "LSRLLRRRLRRRLRRSSRLSRRRRLRSSRSRSLSLRRLSSLRRLSRSLLR", "LLLSSSLLLSRLSSSLRLLRSLLLSRLRLSRSRLRLLRRRRLSSLRRLSL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> commands = {"RSLSSSLLLSLSRSRSSRSRRSSSRLLSLSLRLSRSRSLRSLRSLSRLSR", "SSLSLRLSSRLLLRSSRLLSRLRSSSLSLRSSRSRSSRSSRLRRSLRSSL", "LRSSSSRRSSLSSRRLLLSSLLSSRSSSLLLLSSLRSLRLLRRRRSSLRL", "SLLSSSRLSLLSSLSSRRSRSSRRLSLRSSRSSRLSSRLLLLRSSLLLSS", "SLSLLLSLLLSRLRLRLSRLLRSSRLLSRSRSRRLRLLSLSRRRSRLRSL", "LRLLRRLRSRRRSRRSLLSSSSRLSSLRLRSRLSSSLRRRSSSSSRRLLR", "SLRSRSSSRLSRRSRSRRSSSSLRRLRSRSRLRLSLLLSRRLRSLLSSSR", "LSSSSRSSSSSSLLLSSLSRLSRRLSSLSSRLRLSSRLLSSSRSRSRSLL", "LSLSLSLSSLRRLSRRSLSLRLRSRRRSLRSRLSSSSRLSLLLLLSSLSL", "LRSLRSSSLLLSLLRRSLSLSSSSRLLLSSSLSSSSSRSSRSRLSLLLRR", "RSSLRLLLSRSLRSSLLSLSRSLLLSRRSSRSRSSRRSSRSLSLSRRSRS", "SSLRRSRSSLLLLLRSLLSSSLLLSLRRLSLRRLRSSSSLSRSRLRSRSS", "RRRSLRLLLLSSLSLLLRLSRSRLLLRSRLLLSSLRRRLSSSSRSSLLLR", "SSLSSRSSRRRLSLLRRRLSRLSSSSRRRLLRLLLSRLSSSRSRSLRSLR", "LSRSSSRRRLSRSRLLSSSSSLRRSRSSSSSRRLSLSSSRSSLSRLLRSR", "SRLSRSRRSSLSSSLSSSRSLLSSSSRLSLSLRLSLSSRSSRLLRLRLSR", "SRLSSLSRSRSLLRSSSLLRRLRSRRLLRSSLRLSLRLLSLRRSRSSRSL", "LLRLLSLSRSLSSRSSLSSLRSSSSLLLRLLRLSRRSRRSRSSSSLLSRR", "SRSLSSSRLSLRSLRSSSSSLLSLSLSSRLLRLLSRSSRLSSLSSLRLLR", "LRRLRLSLSRRLSRSSRSLRLSSSRSSRLRLSLRRSSSSSSSSSSSLLSR", "SLSRLLRRRLSLSSRSRRSLSLLSRRLRRSSRRSSLLLLSLSLLRLRSRR", "LRRLRRSSSLSSLRSLLLSRSLSSLSRSLSRSLSSRRSRSLSRRLLSLRR", "SSSLSSRRLRLSSRSLLRLLLRRSSSSLSRLRLSSSRRSLSSSLSLSLSL", "LRLSRRSLLLSRSRSRRLSSRSLLLRSRRLLSRSSLLLSLLSRLLLSLRS", "RSSRSLLLLLSLSLSRLRLSSLLSSRSRLRRRRRLSSLSSRLRSLSSLSL", "RLSLLRSSLRSLRSRSSSRRLLLLSSSLLSLRSRRSSRSSLSSLLLSSSL", "RLSSSLRRSSSSRRRSRRSRSSRRSRSSSRLRLRSSLLLRSLLSLRRSRS", "SSLSSSLLLRSSLRSSRSLSLSSSSSSRSLRSLRSSLRRLSRSRRLRSRL", "SSRRLSLLSSRLSSRRSLRLRSLLRSSSSSSRSLLRLSSRSSSSSSLLSL", "SRSLSLSLRSSSLSLSLLSSSSLLLLSLSSLSLRLSLRLLRRSLSRRRLR", "RSRLSSSSSRSRRRSSSLRSLLLSSRRRRLSSLRSRSLSRSLLRSSRLLS", "LLSRLSSLSSLRRSLSSLRSLSSRRRLSSLSRLSRSSSLSLLRRSRLRRS", "SSSSSRLLSRLLSSRLRSSRLRSSRSRLRSSRSSSSSRSSLRRRSSRRLL", "SLRRRLLRLRSRRRSSSLLSRLSSSSLSLRLRRSLLLLLRRRSSLRSLSR", "LLLSRLSSRLSLSRSLRRSSRLSSLSLLSRLLSLRRSRLSRSRSLSSSSS", "SLLLRLSSSSSRLSLRLLSSSRRSSSSLSRSLSRRSRSRSLSRSLSLRRL", "SRSSRSSSRSSLSLLSLLRLRLSSLSLRRSSRSSLRRSRLRLLSRLRRLL", "RLSLRSSRLRSSRSLLRSLSSRSRLRRLSLSSRSSRSSLLLSRRSRRSSR", "SSSLRSLSLSRLLRSLSRRRSSRRSRRLRSSLSLLLSSRSSSSSLSRSLL", "LSRLSSSLLSSLRLLSLLSSSLLSRSSSLRRSLSLLSSSSLLRSSLRRSL", "SSLLRSRRLSLSRLRRLSLRSSSLLSRSSRSRRLSSSSRSSLRSSLRRSS", "SSRLLSLSSSRRRRLSSSLRRSRSSSSSLSSSLLLSLSSSLLRLRRLSSS", "RSLLSSSLSSLRSLLSRSRLSLRSSRSRRRRLRSSLSSSLSSRSSLSSSS", "RRLSSLSSSRRSRLSLLSSRRSSRRSRSRLSSRRLSSRRRSRSRLRSLSS", "SRLLSLRLRSRRLSSSRLLRLSLLSSRSSLSLRSSLLRSLRSLRLRLRLR", "LRRLRSLSSLSLSSSLSLLSSSLLSRLLLRSSSLLSSLRRRLRSSRSSSL", "LRRSLRRLRRSRLRSSSRLRRSSLLRLLSRLLSSSRRRSRSRLSRLLLRS", "RSRSRLSSSSSSSSSRLSLLSLRLLLRLLRRSSSRSSSRRLLSLLSRSSL", "SRRSLLRSLRLLSSSSSLRLLLLSLSSSLLRRLRRRRLRLRSSRRSSLLR", "RRLS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> commands = {"LSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> commands = {"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "LSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> commands = {"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SRSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSRSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSRSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> commands = {"SRSL", "LLSSSSSSL", "SSSSSS", "L"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> commands = {"SRRSRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> commands = {"SRRSRRSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> commands = {"LR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> commands = {"SS", "LLSSS", "RRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> commands = {"SRSRSRSR", "S"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> commands = {"LLRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> commands = {"SSSS", "R", "SSSS", "R", "SSSS", "R", "SSSS", "R"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> commands = {"SL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> commands = {"SLSRSLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> commands = {"S"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> commands = {"L", "R"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> commands = {"SR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> commands = {"RL", "RL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> commands = {"SSSLLSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> commands = {"SRSRSRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> commands = {"SS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> commands = {"SRSL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> commands = {"SSSS", "L"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> commands = {"LLLLLLLLLLLLLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> commands = {"SLSLSLSL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> commands = {"SRSRSSRSSRSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> commands = {"LSLSLSLS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> commands = {"LSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> commands = {"SRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> commands = {"S", "R", "R"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> commands = {"SLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> commands = {"LLLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> commands = {"RRRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> commands = {"L", "SSLSSLSSL", "SS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> commands = {"SLSL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> commands = {"SSSS", "R"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> commands = {"LLSRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> commands = {"SLSLSLSLSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> commands = {"LRLRLRLRLSSSLRLRLRLRLSSSSLRLRLR", "LLLLLLLSLLLLLSSSSSLLLLRLRL", "SSSSSSSSSSSSSSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> commands = {"LSRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> commands = {"RRRRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> commands = {"S", "L", "S", "L", "S", "L", "S", "L"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> commands = {"SRSLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> commands = {"SLLSLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> commands = {"SRSRSRSSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> commands = {"SLLS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> commands = {"SSSSSLSLSRSLSRSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> commands = {"LLLLRRRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> commands = {"SSSSSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> commands = {"SSSSS", "SSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> commands = {"RSRSRSRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> commands = {"SRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> commands = {"SRSRSRSSR", "SRSRSRSSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> commands = {"SLLSSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> commands = {"LS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> commands = {"SSSSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> commands = {"RLRL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> commands = {"SSSSRSSSSRSSSSRSSSSRSSSSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> commands = {"SRSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> commands = {"SLSLLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> commands = {"SRSRSRSRS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> commands = {"SRRSLLSRSLS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> commands = {"SSSSSSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> commands = {"LLSLL"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> commands = {"SSRRSSRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> commands = {"SRLRR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "bounded";
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> commands = {"SSSRRSSRRSSS"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> commands = {};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> commands = {"SSRSSRSSRSSSSR"};
    SequenceOfCommands* pObj = new SequenceOfCommands();
    clock_t start = clock();
    string result = pObj->whatHappens(commands);
    clock_t end = clock();
    delete pObj;
    string expected = "unbounded";
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22696982&rd=14155&pm=10979
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
int dx[4]={0,1,0,-1};
int dy[4]={1,0,-1,0};
class SequenceOfCommands {
public:
  string whatHappens(vector <string> commands) {
    int x=0;
    int y=0;
    int dir=0;
    int i,j,k;
    for (i=0; i<4; i++)
      for (j=0; j<commands.size(); j++)
        for (k=0; k<commands[j].length(); k++)
        {
          if (commands[j][k]=='L')
            dir=(dir+1)%4;
          else if (commands[j][k]=='R')
            dir=(dir+3)%4;
          else
          {
            x+=dx[dir];
            y+=dy[dir];
          }
        }
    if (x==0&&y==0) return "bounded"; else return "unbounded";
  }
};
 
 
 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

********************************************************************************
*******************************************************************************/