/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=3094
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class ImageSteganography {
public:
    vector<string> encode(vector<string> image, string message);
};

vector<string> ImageSteganography::encode(vector<string> image, string message) {
    vector<string> ret;
    return ret;
}


int test0() {
    vector<string> image = {"255123212001201222"};
    string message = "hi";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"254120214003200222"};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> image = {"255123212", "001201222"};
    string message = "hi";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"254120214", "003200222"};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> image = {"123234213001023213123145", "222111121101213198009", "121122123124125", "132212093039", "213110"};
    string message = "Hello 1";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"120234212003023213122145", "222110121102213198010", "120120120126125", "135215095039", "215111"};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> image = {"018017024216082230021043088042086156006047121237", "063017015030236167097140081129247076158172075169", "125145181183056022052017124165227233048229019218", "167099209242179117064213087108145242158032161046", "019173050161125093121110023145062025073157039044", "242126210095181141068025089069238103076124214072", "102134208160185001154200206045121070225041155005", "229121179235203207141126102073043020099208161183", "086149131211149084211145132068112168109089239088", "113221052046008039175058171173030077166116203249", "222114220251037081215003047151190190162035062078", "154152063136033080197145107034116148102085083207", "021234047083108108253062239115246175022010131246", "156043049023027196194020055142011028057120209018", "118077003164047180187159097155038237032198026052", "083026101227063248008024097021138144250196021184", "104001186153004035080100059098134028243049130229", "223156252094068211051119183083060023010012013036", "255077122084158058187131030013123054251105096083", "143143236016187102049138115221043151205084229177", "010109089064091218237197173115204238129058190224", "001163070139196231145100117006124056102093104128", "082227197038021090058040227223030084133202147237", "140205195166246230025083187215004043185104167130", "036004051133046225010118172046177187221124129012", "228247138235146198145149019089041173165070215196", "024203003033222254207036183048084219146028216108", "005242064076235118224092018012245077135152116255", "021233175216196126052109143072166055129069217128", "082161078028029106082005080174119107243092164094", "151018051187176135144175242077140194057010057241", "003111110060244207054148213055089003183182217146", "054146183092182239154008099170234192021223224200", "197253114150027012167119215030188173024244180023", "112026124104120215088046005191164238161192238218", "162017082205144110163119171209081226077218039196", "168211003118182125085146176125209226050156255115", "043200116050074045093001255128180128065041212153", "113170120030029091015182070078056182200247167070", "216006053250047153206150078020008146145102181197", "021229094077086122175207072045012226042219061149", "180036184176061156136145153117205077199231250249", "088239120220079014244154176014227108072248210162", "062229235236250107198029087007254092221018045241", "127107243093210077108128006118244068212017129086", "148161212066033128195118181108107093248241147064", "154133208053074134226238180098141233035164227048", "215186026126149215073097001131080171101240207092", "004126144242217123017241158102208082078209222114", "208071210017136095130234107171052097220236198237"};
    string message = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"019018025216083229021043089042087157007047121236", "060018013028238166096142083128246076157174073169", "126146181182059021054016126166225234050230018218", "167098210240179118065215086110147242159035162044", "016175049160127094120111023144063024073159037044", "240126208092183140068024089068237101076126213072", "103133208160186000153202204046122068227042152004", "231120177235200206143124103075040020096209161180", "085150128209151084209144133069113169109090237089", "115221053044010037175059171175031079167119203251", "223115223251039083215003047151191191163035063079", "155155063139035083199147107035119151103087083207", "023235047083111111255063239115247175023011131247", "159043051023027199195023055143011031059123211019", "119079003167047183187159099155039239035199027055", "083027103227063251011027099023139147251199023187", "107003187155007035083103059099135031243051131231", "223159255095071211051119183083063023011015015039", "255079123087159059187131031015123055251107099083", "143143239019187103051139115223043151207087231179", "011111091067091219239199175115207239131059191227", "003163071139199231147103119007127059103095107131", "083227199039023091059043227223031087135203147239", "143207195167247231027083187215007043187107167131", "039007051135047227011119175047179187223127131015", "231247139235147199147151019091043175167071215199", "027203003035223255207039183051087219147031219111", "007243067079235119227095019015247079135155119255", "023235175219199127055111143075167055131071219131", "083163079031031107083007083175119107243095167095", "151019051187179135147175243079143195059011059243", "003111111063247207055151215055091003183183219147", "055147183095183239155011099171235195023223227203", "199255115151027015167119215031191175027247183023", "115027127107123215091047007191167239163195239219", "163019083207147111163119171211083227079219039199", "171211003119183127087147179127211227051159255115", "043203119051075047095003255131183131067043215155", "115171123031031091015183071079059183203247167071", "219007055251047155207151079023011147147103183199", "023231095079087123175207075047015227043219063151", "183039187179063159139147155119207079199231251251", "091239123223079015247155179015227111075251211163", "063231235239251107199031087007255095223019047243", "127107243095211079111131007119247071215019131087", "151163215067035131195119183111107095251243147067", "155135211055075135227239183099143235035167227051", "215187027127151215075099003131083171103243207095", "007127147243219123019243159103211083079211223115", "211071211019139095131235107171055099223239199239"};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> image = {"251190015092031025240055033054024120230127087215", "213041224212231163241111102159167043171167113232", "239163090155175094064041027075249232005090207120", "201139204150028109028156255092031023196150226183", "207199120138168175229218008224130198200117081194", "237192025178189156038090066003044029191021018211", "095102121166190204083124046127070090013094104176", "056179145024101168177122030218120235069049081202", "050061182227250185231088008225137027197129231149", "045066084246245026196065095240209207239195032141", "247193179140109156172219098117246226122083137124", "203016079061236253052020106064120138104053102105", "010133058101037211105221184022138093017185196196", "187146007094249149074098059009181100211142240067", "060244199016102073230047213018202196213174229247", "187094146084207090175209159117165127114183035018", "228052030176029015118103170101051200184040108232", "078187222228064045149170183115080107138000251157", "042095052206146052196233116058233203218068159015", "166112046033141207030127176216244247134236066114", "149239077119100219213051016167171080076172103034", "210213223046252155009028193190156072095051009039", "219108095164185144089107161179003177024059108242", "047031104067177119152178108038239041066014096206", "233092177222181230049035101143184015134232104132", "017241153239190020187060247209063158115188084183", "051116190028047069054110217022125136161234196113", "175045031157123092120051043102222187115072033105", "068005084236166011069035019144231168248035114123", "088254069084029050150114082205174178100147178218", "133171250208120219137109095174153032171197004109", "215047243190136098132102115206240045179153088239", "081063140234084058000149030201183178170056005053", "038177242105101221132117208245089218245250193053", "060004031213244098075012226101155111061068149060", "090116107075120047021175161172097066023191052220", "165022034209012092175184204234190031202120065009", "205111171132054051153180023155211220183100008243", "129027189033134087102127039171244252214206026018", "147241033098152017066224145076162098213030096227", "104049121176240063036016073029210163080149018224", "029051161167050110055186032004248097175097035041", "230030022245056146224241174093105069018154147102", "049035230008136232001155068230133011236168052085", "001190184020159123223203085237048030169138088156", "013120083241163205053155226079021081255128236065", "014179064069235039253241093176059038086159134095", "219251239139230015089189139124095048205200213142", "184085241113224093053047228048167005090130009131", "095029177254035126014089242098020070144061161096"};
    string message = "YZ 0123456789aBcDeFgHiJkLmNoPqRsTuVwXyZ 01234689";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"249190013094030025240052032053025123230125087215", "213043224214231161242111102158167043170167112235", "239161091155174095067043026073250232004089207121", "200137204151031109030157252093028022196150224183", "204198122138168173229218008227128199201118082195", "236193026178188156037091066002046028189021019210", "092101121167191206082125045125068091012094105179", "056179146026101168176120028216120232068048081201", "051062181227251185231088010227137026199131230151", "045067087246247027199067095243211207239195035143", "247195179143111159175219099119247227123083139127", "203019079063239255055023107067123139107055103107", "011135059103039211107223187023139095019187199199", "187147007095251151075099059011183103211143243067", "063247199019103075231047215019203199215175231247", "187095147087207091175211159119167127115183035019", "231055031179031015119103171103051203187043111235", "079187223231067047151171183115083107139003251159", "043095055207147055199235119059235203219071159015", "167115047035143207031127179219247247135239067115", "151239079119103219215051019167171083079175103035", "211215223047255155011031195191159075095051011039", "219111095167187147091107163179003179027059111243", "047031107067179119155179111039239043067015099207", "235095179223183231051035103143187015135235107135", "019243155239191023187063247211063159115191087183", "051119191031047071055111219023127139163235199115", "175047031159123095123051043103223187115075035107", "071007087239167011071035019147231171251035115123", "091255071087031051151115083207175179103147179219", "135171251211123219139111095175155035171199007111", "215047243191139099135103115207243047179155091239", "083063143235087059003151031203183179171059007055", "039179243107103223135119211247091219247251195055", "063007031215247099075015227103155111063071151063", "091119107075123047023175163175099067023191055223", "167023035211015095175187207235191031203123067011", "207111171135055051155183023155211223183103011243", "131027191035135087103127039171247255215207027019", "147243035099155019067227147079163099215031099227", "107051123179243063039019075031211163083151019227", "031051163167051111055187035007251099175099035043", "231031023247059147227243175095107071019155147103", "051035231011139235003155071231135011239171055087", "003191187023159123223203087239051031171139091159", "015123083243163207055155227079023083255131239067", "015179067071235039255243095179059039087159135095", "219251239139231015091191139127095051207203215143", "187087243115227095055047231051167007091131011131", "095031179255035127015091243099023071147063163099"};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> image = {"167064024", "005097178092036049096236116203", "003090202014201041019038149170104081183123083060", "186169", "156088053015156205073049186208230226014017", "056076001234248240046167236063161029133199118", "030020187079138205107055181", "125048139022141245154121021144056167161083121208", "039112073225036239255058092059043201067202176115", "159150108013116179214089109055138157193", "047"};
    string message = "My dad is a Steganography expert";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"165067024", "007096179092036048098239117203", "002089202015201040016036151168106081183122080060", "184171", "158089052012156207072049186211230227015017", "057076002235250241044166238061162030133196118", "028023186079138205106054182", "126048138023140247152120020147059165162080123210", "038114075227037236255058094059042203067203179115", "159151111015119179215091111055139159195", "047"};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> image = {"213096012028245230137034077057", "176242127229006200032092208168", "050237060195230253046120247042", "207179063133182198102176150004", "191169002115230053053157208124", "087004168035034039237060146017", "010231152069212232167138018165", "103146147239179159016187146077", "141112198126164183034235218228", "220037162184177026171055183242", "162075138216126146129201047071", "103164094099123224229057031000", "119119019142239096213182181022", "033192177080128172059136053217", "159168207033224114048042119145", "203172019228137078114222181094", "192027005007023001005214021066", "183121194057140036092186152213", "025164014207043173014208242029", "234105169001037128099018154110", "184238091123016179032095039179", "068070224049180099087076095120", "174228053212226035231044169146", "075128053253117136111053039142", "061196192140030235076064122221", "217111214001242019040043149041", "128050187240087236035008197151", "234100028027244092129221091028", "040000100166058186208037130014", "221206074191101153043072103074", "201250062191226194197069125005", "187209088000168038066122206230", "124065146004180222047178203245", "108243031142152027170245244050", "238051074218076061125153031191", "109157166047172226128016039109", "108182030166165170102068037187", "061030249038204027191203152021", "068073047214075237134136131236", "147221172239250235012020168071", "120183190017055236026222084098", "126034019137072109113053098054"};
    string message = "The quick brown fox jumps over the lazy dog";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"212097013030244230139035077056", "176240127230006203035094211168", "050237063193229253046120244040", "204179061132183198101178150005", "188171000114230052052156208124", "086005170034034036239060144016", "008229154071215234167137018166", "102146145239178156016184145078", "142112196127167183033232219230", "220036160186179026170052182243", "163073136216124146129202047070", "101164093099123224231056028000", "118119017141238098213180182023", "035195179083131175059139055219", "159171207035227115051043119147", "203175019231139079115223183095", "195027007007023003007215023067", "183123195059143039095187155215", "027167015207043175015211243031", "235107171003039131099019155111", "187239091123019179035095039179", "071071227051183099087079095123", "175231055215227035231047171147", "075131055255119139111055039143", "063199195143031235079067123223", "219111215003243019043043151043", "131051187243087239035011199151", "235103031027247095131223091031", "043003103167059187211039131015", "223207075191103155043075103075", "203251063191227195199071127007", "187211091003171039067123207231", "127067147007183223047179203247", "111243031143155027171247247051", "239051075219079063127155031191", "111159167047175227131019039111", "111183031167167171103071039187", "063031251039207027191203155023", "071075047215075239135139131239", "147223175239251235015023171071", "123183191019055239027223087099", "127035019139075111115055099055"};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> image = {"000001002003004005006007008009010011012013014015", "016017018019020021022023024025026027028029030031", "032033034035036037038039040041042043044045046047", "048049050051052053054055056057058059060061062063", "064065066067068069070071072073074075076077078079", "080081082083084085086087088089090091092093094095", "096097098099100101102103104105106107108109110111", "112113114115116117118119120121122123124125126127", "128129130131132133134135136137138139140141142143", "144145146147148149150151152153154155156157158159"};
    string message = "aiCI9 84Di slkjf94IND D IkIlsW93kJfpkLiF";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"003002001003004006007004008009010008014015015012", "016016017019023021022023024025024027028030028028", "032033035034038037038037041042040041046044044046", "050051051049054055053054056058059056060061060060", "064064064065068068068068073074072073077078077078", "080082081082085087086087089089090091095092094095", "097097098098102100100100106106106106109109110108", "115112115112118118117116123123123123127127127127", "131131131131135135135135139139139139143143143143", "147147147147151151151151155155155155159159159159"};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> image = {"160161162163164165166167168169170171172173174175", "176177178179180181182183184185186187188189190191", "192193194195196197198199200201202203204205206207", "208209210211212213214215216217218219220221222223", "224225226227228229230231232233234235236237238239", "240241242243244245246247248249250251252253254255"};
    string message = "Is it Ph33r tomek or Ph34r tomek";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"161162160161167166164164168171168170174175174172", "176176176176181182180182184186187184190191188191", "194192192192198199198197202202203201206207207205", "209209210208212212213214218216219218220220220220", "224225226224230228230231233234235232239238236236", "240242243242245246246247249250251251253253253254"};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> image = {"119128028013037007213057013161000", "051060008003124021033063141190026", "041098137004010088156012002009057", "132024055017165001064223157061002", "098086023002018058047041011034097", "061049021039070038020031156043016", "031132012004016027070107013001130", "094060015057052000014000038053078", "070012074151068058004030017054157", "163001143021043055027007032099019", "073151000051001021096015027178201", "041043039054011029136090101031077", "016191100024018077014094008028006", "006046014102009000016027005170094", "107030198004031065008041143051022", "135042167073035018008059006042213", "006004165105018015002082179150059", "162151005062039020009027094043037", "050135155086082024043036047038111", "119010144166118080103222027108041", "092141004033067045084206027006099", "157089024115045226022002132036094", "070028079122052138015095056068019", "193151094106046118045007191032007", "172056129179017043060085114010005", "002020072049000056005013096108066", "005136010011043003055119062041045", "025058007041051002053084012003065", "061017112098007151001077022056189", "062017120194010163115006057017147", "031018001000089002035027025031004", "008043065041099095001060053044049", "091087096196150115008122128058069", "014018103062164007125066025115100", "159021007004013043028048023067009", "053088015110098140009163033173048", "194010001002009017128002028000191", "002052014080121006161131038097068", "000104001032013115078071032050056", "191024159098011075062112027104116"};
    string message = "Oh do you know the muffin man at 250 Drury Ln";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"119131028014036006212056012162003", "049061010002124020032063140191025", "042098139007010088156012001009058", "132026054017166002065220159060000", "096086023002018056046043011033096", "060048023037070039023030156040018", "028132014007016026068106014000128", "092063013058055002013000038054076", "068012075150069058007030016052156", "163001143022042055025005035096016", "072148001048000023098015027178200", "043042039052011028136088100031076", "016190102027019079015095011031007", "007047015103011003019027007171095", "107031199007031067011043143051023", "135043167075035019011059007043215", "007007167107019015003083179151059", "163151007063039023011027095043039", "051135155087083027043039047039111", "119011147167119083103223027111043", "095143007035067047087207027007099", "159091027115047227023003135039095", "071031079123055139015095059071019", "195151095107047119047007191035007", "175059131179019043063087115011007", "003023075051003059007015099111067", "007139011011043003055119063043047", "027059007043051003055087015003067", "063019115099007151003079023059191", "063019123195011163115007059019147", "031019003003091003035027027031007", "011043067043099095003063055047051", "091087099199151115011123131059071", "015019103063167007127067027115103", "159023007007015043031051023067011", "055091015111099143011163035175051", "195011003003011019131003031003191", "003055015083123007163131039099071", "003107003035015115079071035051059", "191027159099011075063115027107119"};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> image = {"043", "002", "018", "019", "119", "013", "067", "010", "174", "164"};
    string message = " 5";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"040", "000", "016", "018", "118", "015", "067", "011", "175", "167"};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> image = {"085079029027143043061", "061013148033002199024", "081005004043018091025015", "067054005041167067200034008033", "116003083068109162088195", "009160000126078055011057", "113006146026010", "058219108181150040076001048112049001198120033069", "072188077033078028075173159007025054075110", "090042075186013135003074012023", "103010001169068", "105019111067147026001007016013028109017209", "064091044236006022035098007129005030060", "149151028041044", "011200096067130032212021056048011161081", "000151234209136005009195038004028", "078151212000142047085009109091080002", "057084007013004010082060044068", "017009075087007077000001", "085029106013020204052087126013042022023000024151", "030001041014057", "067090230016148007042009026", "058103161029033201048045150", "084104000", "102023049012001159123005018160092108053", "102044", "020215008106012164032072", "051", "027067221056087053161191091051058045022037", "110016087007046067170207028170003116024", "067069039069084113014145054049058091204099149046", "147025108030", "132014034187015018013037052008042", "030083131033045092034025007029218142009", "104016066093009019025090027", "161044057101098", "054135071062030237179001000026023044158", "059044204029165111128067", "217011097007102018140116024", "025186003137009132093002002112059021072001025", "010"};
    string message = "My Body lies over the ocean and over the sea";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"085079028027140043060", "060012150032000197026", "082006007041019088027012", "064052006041166067200034011035", "117001083070108160088193", "010162000124079055011057", "112007146024008", "056218111182150040078003051113048000196121034070", "073191077035079029075174157004026054072108", "088043074185012134002074015021", "100008000169070", "106016108067147027001004019014028108016210", "067090046236006023035097004128004029063", "150151031041047", "010201099067131035215023059051011163083", "003151235211139007011195039007031", "079151215003143047087011111091083003", "059087007015007011083063047071", "019011075087007079003003", "087031107015023207055087127015043023023003027151", "031003043015059", "067091231019151007043011027", "059103163031035203051047151", "087107003", "103023051015003159123007019163095111055", "103047", "023215011107015167035075", "051", "027067223059087055163191091051059047023039", "111019087007047067171207031171003119027", "067071039071087115015147055051059091207099151047", "147027111031", "135015035187015019015039055011043", "031083131035047095035027007031219143011", "107019067095011019027091027", "163047059103099", "055135071063031239179003003027023047159", "059047207031167111131067", "219011099007103019143119027", "027187003139011135095003003115059023075003027", "011"};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> image = {"042010006137011076058078003004004034", "044040225109048113", "028163040024116187004107046003034036005181168089", "035159169050035200087", "016060049071057009049", "115225086009120015049021002019076029063016054", "063078087072009010024067045008164054140101010", "045038066012084017036066168116"};
    string message = "Kawigi was here";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"043010004139010077057076003007004034", "045040226111048114", "028160040025116187007106045001035038004180168090", "032158171051033200087", "018063051069059011051", "115227087011123015051023003019079031063019055", "063079087075011011027067047011167055143103011", "047039067015087019039067171119"};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> image = {"067017043015126091175", "017006064001032021035008000006076150000201", "114066023017055075145004000005", "011048053062187097022216137", "000054052020004105063025009049130004068038204160", "074048072018096008109058003180033055", "197050003064155044012", "186157214026", "011051", "166169017", "004012084129069018040197023091025054006046005", "204108063100079004104105005144025", "014139031161022", "070046057004127127145"};
    string message = "Alphabet soup is yummage";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"065016040014125090174", "018006066000034023034009000007077151003201", "114067022016052072145007002005", "010050055063186098022218136", "000052055020006105063026008048128007068039207163", "074051073018099009110059002181033052", "198051003065155047015", "187159215027", "011051", "167171019", "007015087131071019043199023091027055007047007", "207111063103079007107107007147027", "015139031163023", "071047059007127127147"};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> image = {"138090175107049012103132021001201113", "116027021144212024016008023016140002", "161004010108125108009099095116065057", "030022209126051110000049017166048106", "122001018030049102038081027015069008", "055106048042053052001121078020001004", "009027010106011120135028000000138039", "010020000035147009046122080000006054", "113025209040000105124004083088075093", "087070000143055011026152030025069176", "007038045003066189062085057071091016", "000002000000178011005011011127061017", "018015020015009102018106010023190080", "179055049054119132031053094001028002", "032029003050085166101049042004173004", "037020126058088053105083113201092145", "004004173066011064020081042004014161", "063010049002064002047098091003051098", "000072006020053047083166148037009066", "083103016022077028086001003018001016", "046046069056137156081140070090022137", "092032010037040094004052038038027003", "011029036068006001113012100035054068", "076124014059036028086002036008080012", "195037058173115022013094062097145049", "009126123051000015050018085024064017", "066118104022074127139050078042055157", "136072004006089054014130063011027114", "025050019063018040117017001099110100", "122108025016102017017085200054102219", "085050017011151080057080101157053018", "000139025191021120167062007005150169", "228069127058122020042091002067045011", "004091024014089061127116060169017004", "064000083002059002041006003043117004", "082010087151200080000067029052004051", "034062072088002137044101150086020025", "150017133009028007082119105005034089", "097016037100011039103002102001000017"};
    string message = "Yummage isnt a word in any of 3 languages I know";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"137090173107051014103133022003201114", "119026021145212026019011021016140000", "163004010109127110008098094118067058", "028020208127050109000048016165048107", "121002018028051102038083025012068008", "055104050040054054000120076023002005", "008026010107008123132028000001138038", "008020002032144008044122083000004052", "114025210043002105124006082089072094", "087071002143054009025152030027071177", "005039046000064188061086056068088016", "001001002000178010005010010125060019", "019015023015011103019107011023191083", "179055051055119135031055095003031003", "035031003051087167103051043007175007", "039023127059091055107083115203095147", "007007175067011067023083043007015163", "063011051003067003047099091003051099", "003075007023055047083167151039011067", "083103019023079031087003003019003019", "047047071059139159083143071091023139", "095035011039043095007055039039027003", "011031039071007003115015103035055071", "079127015059039031087003039011083015", "195039059175115023015095063099147051", "011127123051003015051019087027067019", "067119107023075127139051079043055159", "139075007007091055015131063011027115", "027051019063019043119019003099111103", "123111027019103019019087203055103219", "087051019011151083059083103159055019", "003139027191023123167063007007151171", "231071127059123023043091003067047011", "007091027015091063127119063171019007", "067003083003059003043007003043119007", "083011087151203083003067031055007051", "035063075091003139047103151087023027", "151019135011031007083119107007035091", "099019039103011039103003103003003019"};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> image = {"095005080086012131168008022048021043019036", "034087048014008002056005062049048200189", "000051039114006059064139163181056016043010049102", "025055163001020076078014132175109000065014025048", "044069016002045012171155156", "117002085246007058155044", "045121106000011047122053008001", "155072020015082199179165008079090018054087004"};
    string message = "Foo and Bar are my my kids names";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"094005080085014130169010022048020040019038", "033084050014010003057004060048050200188", "003050037112007058064136160183058017040011050103", "027053160000020079077014135172111000064012027049", "046071016003044012168153157", "118003084246006059153045", "047122104000008044122054011002", "153075021014083199177165011078091019055087007"};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> image = {"009065036066074123061007062065003071000", "089058216073072040006060000128071019050", "033006246032133007081044112036007117020", "000059181011073075025002004000093004008", "034143000027005044016138000025129000030", "044123013006066165002057053057110058015", "077010000017002051081025029104011030032", "163015101021040001081031034163056028004", "099026025001057010036085007013100051006", "082028064052038023044033128003027063003", "011080011103057012003008000054011014104", "142005090161000003175040024139149029059", "028047031135005020039020014001128027007", "039176120102002001069060106008045030019", "028045013027029027017091180063004007073", "033227157083113027026004078014190195086", "036135118114016226021033047032000064032", "053054013005043013066015015009005005039", "017000028001082180158015042141066071001", "123009040044037045004031019100021056020", "069169149070043070168101023072022086015", "163034039113061053042016102069008039215", "012012004172019006008002003178060050065", "047168114111013074012011035003077146047", "032079152031010041011130006038044066022", "040006111075049003003063099043117001025", "013006003061073005014077013038019147006", "069073010074015032080011100090064107172", "016033131029026003047023003116006042166", "173216008075142004012061114090009143004", "008061129019045014129004064009175004024", "013003090102015111029005081031028194082", "174127006012084126013005066021005024077", "071009011096000024061049041037067000033", "132058146030098011026184016003041043002", "142096212022094047021136013045071029029", "110017002087001070133074035015025026159", "039059018140084099069064003025002001037", "030091000078016004010007121046002039001", "008009036022045005136091031141098068038", "005123016053014009104006135173044108032", "073138027011026011008106031004019073036", "103105101054008132174011057015059014063", "052111075067000075081148021008067113100", "054008003019085114090064100050060024091", "005003024151091001171118013024016185153", "032113111095008003065006158040146084000", "015017186031114088075015030114037071001", "073003051178016116083075091010104045014"};
    string message = "lots of room and short message";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"010065038065074122062007062065003070000", "088056217074074040004062000128068016051", "034005246034133006082047113038004116020", "003058181008074074026003005000092004009", "035142002024006045018138000027130002031", "046120012004067165002059055057109059014", "077011002019002049081024030107011029035", "163015103023043003083031035163059031007", "099027027003059011039087007015103051007", "083031067055039023047035131003027063003", "011083011103059015003011003055011015107", "143007091163003003175043027139151031059", "031047031135007023039023015003131027007", "039179123103003003071063107011047031019", "031047015027031027019091183063007007075", "035227159083115027027007079015191195087", "039135119115019227023035047035003067035", "055055015007043015067015015011007007039", "019003031003083183159015043143067071003", "123011043047039047007031019103023059023", "071171151071043071171103023075023087015", "163035039115063055043019103071011039215", "015015007175019007011003003179063051067", "047171115111015075015011035003079147047", "035079155031011043011131007039047067023", "043007111075051003003063099043119003027", "015007003063075007015079015039019147007", "071075011075015035083011103091067107175", "019035131031027003047023003119007043167", "175219011075143007015063115091011143007", "011063131019047015131007067011175007027", "015003091103015111031007083031031195083", "175127007015087127015007067023007027079", "071011011099003027063051043039067003035", "135059147031099011027187019003043043003", "143099215023095047023139015047071031031", "111019003087003071135075035015027027159", "039059019143087099071067003027003003039", "031091003079019007011007123047003039003", "011011039023047007139091031143099071039", "007123019055015011107007135175047111035", "075139027011027011011107031007019075039", "103107103055011135175011059015059015063", "055111075067003075083151023011067115103", "055011003019087115091067103051063027091", "007003027151091003171119015027019187155", "035115111095011003067007159043147087003", "015019187031115091075015031115039071003", "075003051179019119083075091011107047015"};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> image = {"000047199145074042020167058086007", "076", "064054078245083040119096001116103"};
    string message = "7 Chars";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000047199144072040023164056086004", "078", "067054077244083042117099002119103"};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> image = {"003026113107024065"};
    string message = " ";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000024112107027067"};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> image = {"135045028038014044005001078050113", "007007005027052059126000176000203", "093040096038184153041050000106004", "006023012002111065187050022030030", "071026022045027007115177051044000", "051092067033013056002105095024015", "041019075001031090084018057047002", "047100046001122078013025191014024", "011018072021052066093107040000004", "068004060113073035014003091063038"};
    string message = "dplass are you reading this";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"134047029038014046006001078051114", "005005007026053059126000176000203", "094041096039186155043049000104004", "007020015001110066187051022028028", "068024023046027007113179050045002", "051093067032014056002106093024014", "040016072002031090086016058047000", "046101047002123079015027191015027", "011019075023055067095107043003007", "071007063115075035015003091063039"};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> image = {"064056102166096161003002000055093", "030032013066009029048146127003053020127034018037", "005009", "067013209061003157151026210011081019005", "137100006115115013140002040062107033", "010138094053012020003111022012000169109159130014", "001016010009064065007002111125013078129058020", "114150009028153068010034021007144009013002007", "186065037", "018159222141", "063", "064014003", "023074021005041188007", "006093171", "091087", "018012012019020016", "233027", "000153037021047021158022110121050087016035", "007082135071058068055011110030044158197007031", "015083022027179075032008021055", "051132003008135", "016015053066077056113006030121020102197104061172", "040045028008154", "114062045167", "002079012013001", "045002154022017", "088128197089064001009000123103", "000157", "072059007013038054186159024103", "064024047066035139044010", "141213084", "005050", "169238023073191021072066083118", "127011079057065114054076022004170209056035057003", "075006034017165058080084003068016103100021081", "128177004024053"};
    string message = "can you say jagged array";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"065059101167098161000002002052092", "028035012067009030050147127002052020124033019038", "007010", "065015208063000156148024209010083018005", "137100006113112014143003041062107033", "008136092055014021000111022012003170111158129015", "000019011011067067007003111127015079131059023", "115151011031155071011035023007147011015003007", "187067039", "019159223143", "063", "067015003", "023075023007043191007", "007095171", "091087", "019015015019023019", "235027", "003155039023047023159023111123051087019035", "007083135071059071055011111031047159199007031", "015083023027179075035011023055", "051135003011135", "019015055067079059115007031123023103199107063175", "043047031011155", "115063047167", "003079015015003", "047003155023019", "091131199091067003011003123103", "003159", "075059007015039055187159027103", "067027047067035139047011", "143215087", "007051", "171239023075191023075067083119", "127011079059067115055079023007171211059035059003", "075007035019167059083087003071019103103023083", "131179007027055"};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> image = {"123234213001023213123145", "222111121101213198009", "121122123124125", "132212093039", "213110"};
    string message = "Hello 1";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"120234212003023213122145", "222110121102213198010", "120120120126125", "135215095039", "215111"};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> image = {"123234213001023213123145", "222111121101213198009", "121122123124125", "132212093039", "213110", "203"};
    string message = "Hlo 1 2 ";
    ImageSteganography* pObj = new ImageSteganography();
    clock_t start = clock();
    vector<string> result = pObj->encode(image, message);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"120234212002021214121146", "222108120100214197011", "120120120127125", "135212092036", "212108", "200"};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=11879970&rd=5871&pm=3094
********************************************************************************
#include <string> 
#include <vector> 
#include <iostream> 
#include <algorithm> 
#include <sstream> 
 
#include <cstdio> 
#include <cstdlib> 
 
#include <cmath> 
 
#include <functional> 
#include <numeric> 
#include <cctype> 
#include <climits> 
 
#include <queue> 
#include <map> 
 
using namespace std; 
 
typedef vector<string> VS; 
typedef vector<vector<string> > VSS; 
typedef vector<int> VI; 
typedef vector<vector<int> > VII; 
typedef vector<vector<vector<int> > > VIII; 
typedef unsigned long long u64; 
typedef signed long long i64; 
typedef long double ld; 
 
#define ALL(S) (S).begin(), (S).end() 
#define SORT(S) sort(ALL(S)) 
#define UNIQUE(S) (S).erase(unique((S).begin(), (S).end()), (S).end()) 
#define REV(S) reverse(ALL(S)) 
 
#define si size() 
#define cs c_str() 
#define pb(x) push_back((x)) 
#define mp make_pair 
 
#define fi(i,S) for (int i=0;i<(S);i++) 
#define fd(i,S) for (int i=(S)-1;i>=0;i--) 
#define ftype(i,S,T) for (typeof(T) i = (S); i != (T); i++) 
#define foreach(i,S) ftype(i,(S).begin(),(S).end()) 
 
#define debug(x) cerr << #x << " = " << x << endl 
 
template <class T> ostream& operator<<(ostream& os, vector<T> v)  
{ 
  os << "{"; fi(i,v.si) os << (i?", ":"") << v[i]; os << "}"; 
  return os; 
} 
template<class S,class T> ostream& operator<<(ostream &os, const pair<S,T> &p)  
{ 
  os << "[" << p.first << ", " << p.second << "]"; 
  return os; 
} 
 
template<class T> string tostr(T a) 
{ 
  char buf[10]; 
  sprintf(buf,"%03d",a); 
  return string(buf); 
} 
 
int go(char c) 
{ 
  if (c==' ') return 0; 
  if ('A'<=c && c<='Z') return c-'A'+1; 
  if ('a'<=c && c<='z') return c-'a'+27; 
  if ('0'<=c && c<='9') return c-'0'+53; 
  return 0; 
} 
 
class ImageSteganography { 
  public: 
  vector <string> encode(vector <string> image, string message)  
  { 
    VS ret; 
    string s,cur; 
    int idx=0,pos=0,val,t,mval; 
    fi(i,message.si) 
    { 
      val=go(message[i]); 
 
      t=val&3; 
      s=image[idx].substr(pos,3); 
      pos+=3; 
      mval=atoi(s.cs); 
      mval&=(255-3); 
      mval|=t; 
      cur+=tostr(mval); 
       
      if (pos==image[idx].si) 
      { 
        ret.pb(cur);cur=""; 
        idx++; 
        pos=0; 
      } 
 
      t=val&12;t>>=2; 
      s=image[idx].substr(pos,3); 
      pos+=3; 
      mval=atoi(s.cs); 
      mval&=(255-3); 
      mval|=t; 
      cur+=tostr(mval); 
       
      if (pos==image[idx].si) 
      { 
        ret.pb(cur);cur=""; 
        idx++; 
        pos=0; 
      } 
 
      t=val&48;t>>=4; 
      s=image[idx].substr(pos,3); 
      pos+=3; 
      mval=atoi(s.cs); 
      mval&=(255-3); 
      mval|=t; 
      cur+=tostr(mval); 
       
      if (pos==image[idx].si) 
      { 
        ret.pb(cur);cur=""; 
        idx++; 
        pos=0; 
      } 
    } 
    while(idx<image.si) 
    { 
      s=image[idx].substr(pos,3); 
      pos+=3; 
      mval=atoi(s.cs); 
      mval|=3; 
      cur+=tostr(mval); 
      if (pos==image[idx].si) 
      { 
        ret.pb(cur);cur=""; 
        idx++; 
        pos=0; 
      } 
      if (idx>=image.si) break; 
      s=image[idx].substr(pos,3); 
      pos+=3; 
      mval=atoi(s.cs); 
      mval|=3; 
      cur+=tostr(mval); 
      if (pos==image[idx].si) 
      { 
        ret.pb(cur);cur=""; 
        idx++; 
        pos=0; 
      } 
      if (idx>=image.si) break; 
      s=image[idx].substr(pos,3); 
      pos+=3; 
      mval=atoi(s.cs); 
      mval|=3; 
      cur+=tostr(mval); 
      if (pos==image[idx].si) 
      { 
        ret.pb(cur);cur=""; 
        idx++; 
        pos=0; 
      } 
      if (idx>=image.si) break; 
    } 
    return ret; 
  } 
 
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/