/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8504
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class IncreasingSequence {
public:
    int getProduct(vector<string> digits);
};

int IncreasingSequence::getProduct(vector<string> digits) {
    int ret;
    return ret;
}


int test0() {
    vector<string> digits = {"12345"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 120;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> digits = {"543210"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 45150;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> digits = {"20210222"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 932400;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> digits = {"1111111111"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 1356531;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> digits = {"171829294246"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 385769340;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> digits = {"3", "235", "236"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 264320;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> digits = {"1920"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 380;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> digits = {"100000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 100000;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> digits = {"281002820"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 7924200;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 354999020;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 812745631;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 846847051;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 899413275;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 83256619;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 177456960;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> digits = {"10100001111111111101111111111001111011111110011011", "10110101111101111111111111111100111110111110011110", "01111111011111000101111011111111010110011110111111", "01100111111110111111011111001111111010111110101000", "00111011011111111111111111111010101011111111111011", "11100011111101100101111110111111001111011111101111", "11010111111111111111001111011110101110101001111111", "01101111010111111111111111111101110111101101011101", "10111111111011111111111111110111111010111011111111", "11111110110110111101101110111101001111011111110111", "01111010111101111100111111110111111111111111111100", "01011010111110101011100101100110110111111011110111", "01100111111011101011111111111101001111011111111111", "11111110101111111111011111010011111011001111110111", "11111111110111101101100110111101110110111011110101", "11111111100011111111111101111101111111111111111001", "11111110111001111110111100111110111001101011101110", "11111101011001111111111101111111111000101111111010", "00111011011110110100111011111111111110111111011011", "11011111110111111101111111111111111010111111111100", "10011111110011100111111010111101101011111110101111", "11011111111101101101111111111111111111011101101011", "11111101111111111110111101111011011111111011011111", "10101011111111111100111101111111111111101111111110", "10111001111101111011011011011000110110101111110111", "11111111101111111111110111111011001111111010111111", "11111111111101101101110111111010111011011111111110", "11111101100111101011011010101111011111111011111111", "11111111011111110110111110011111110101111101111001", "11111101111111111010111111100111011111111111111011", "11101111111101111110111011111111111101011011011110", "01110111011110100011100111111011111100110111011010", "11110110111111111111111011111111001011111111111111", "11110111111111101100111101111111011111110110011110", "00001111111111111101111111111111101111111011111110", "10001110011111101111111011101111110101101001110101", "11111011011101111110111110011101111110111011111011", "10111101110111111010111110111110110101111111111111", "11111111110101000111111101111111111110111110011111", "11111011110111111011111111101110111111111011101110", "11111110011111111011100101110011011101101111110011", "11110111001001111111001001111101110111111110011011", "10010011111011110111110011111010101010110011111111", "11111110111111101111011111111110111110111101111101", "00101011111111111111101110111011101111011111111110", "11111111110011111111011001111110101111101011101101", "01111010110111110011001011011111111010111111101111", "11001110111111111111111110110101101111111110111001", "11111110111111111110011111011101111101111111111111", "1011111011010111101101111101110111111111111101111"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 986795933;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 820020265;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 746401865;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 413284424;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> digits = {"10000111110100000000010011110011000000010011100110", "00001011100001110101110100110101001110100111010010", "01110001000111110011001110001101111110100011010110", "00100011011100100001001001001011000100011100101011", "00111100110000101000001001111000000111010101110100", "00001000011110000110000100011101111100011010000000", "01101100110000111000100010110000110110110111011101", "00100001001110111100011010110101100010101010001000", "01011000101001010001010000110001110000011110001111", "10101001101000000010001101111101100011010101100010", "11100000111110001001010010111111010110111111011100", "11110101001001001101010000100011000000110001011010", "10001101111001010001111100111111111001001001110001", "01010110010100111000011010111010100001101000111011", "11001101000111010110100010000001101100011000000110", "00111111100000111001110101000100011101000001010001", "10000100110100110100000111111110011100110111110111", "10111001111100010100000110110010010111111111000010", "00010101000111011110011111011011000010110111100010", "10100100010000011010100110100010111101101111011110", "10001101011001100001101000101011101101000000000101", "00010001010100101101110111110010101011100001111110", "10111111100111111100010101110111110110101111000100", "01100101011001110011111010010010011010011001111111", "11110110000110011101110111000010010111001010100000", "01010010010100100000001110110001000000110100110000", "11101001000110110100101010001001101000011100111111", "10000110011100100100010101100101111011101111011001", "01100111010101001010110111001011000010111111010100", "01101000001010101010011101101011111000010101101110", "11101100010110011110011010101000011010000000101010", "01011001011111011100101110010101111111101011010100", "10010111001101101100001011111010101100010110111101", "01111111000000011101001011111010011001100010100110", "11000110110000100011101000101011010010101001100000", "01110010010011100011100001100010010100100011110110", "11100011001100001110010000101111111001101010100111", "01111000000111011111111111011111110101000100010101", "01100111111011101110100101011000101111111010010110", "00100110001100010111010100100000111101001010000101", "11110110101010000101001001010110101100100000100100", "00010101000011101100011111000101011010010101100110", "01111100011101010010010101000010110010100100001011", "00001000100100001011111001010010011101000010100000", "01110101101101000110011111101001101101100001100101", "11001010010011110001001100100000110111101000110010", "00110100011011010110011111111001110001000110100000", "10010010101101010110101101000011110110110011101101", "10101000010110000010100010110101110001011110001101", "0010000001111100100100111010111110100111011010110"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 57843137;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 320082191;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 748091767;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 400782659;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 587801386;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 101653880;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 277730313;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 773113766;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 261243614;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 650149510;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 436886909;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 405829618;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> digits = {"11111011111111011101111101111111111111111011111101", "11111011111111101111111111111011101101111111111110", "11111001111111111101111110100111111111111111011110", "11111111110011110111111111111111111111000110111111", "10111111111101101101111111110110111111111111111111", "11111111111101111111111110111100111111111011111111", "01111111111011011101111010110010111111111101111111", "01011110011111111110111111111010111111111111111111", "11111111011010111111111001011110111011111111111111", "11111101111010111111011111111111010111111011111111", "11111101100111110110101101111110111111111111110111", "01111111011110111111111111111111101110111111111111", "11111111011111110111110110110111111101010111111111", "11110111110111011111111101111111011101101001101111", "11111111011011101101111111111111110111011111100011", "11111111111111111111110110111110110111111111111111", "11111111111100111111111100111111111001111111111111", "11111111011111001011101111101111101111111111011111", "11011111111100111111101101111111111111111111011111", "11011011011111101001111111111110111101111111111111", "00111101111111111110011111111111110110101011001111", "11111111111111111111100111101111111111101011111111", "11101111111111011111111111111111111111111111101111", "01111110011111111111111111111000101111111011011111", "11101011001101110111010111111111110111011111011111", "11111111111100110111101111111110110110111111111011", "11111111111110111111111110111101110101011110111110", "11011101111111011111101110101111111011111111111101", "11111101111111101111111111111111111111111111011111", "11110110011111101111111101111110110011111110111101", "01001101011111111101111111111010111111011101111111", "10111101111111111111101011111110100111011011111011", "01111101111101110110010111101111111111100111011111", "10111111111111111011111101101100101101111010100111", "11110111010101111111111101101011100010101111010011", "11111111111111110111111111111110111111101111111101", "11011010110110110100111111111110100101011111011111", "11101101111111111011000111111111111101101011111111", "11101111100011111011100011101101111111111111101111", "10111111111110111101111011111111011011011001111111", "11111011111111101111000011111111111111101101111111", "11011111111100110111000111011111101111111111111111", "11111111111011001101011111011111111111111111111011", "10010101011111111101111111111011110111001111111101", "11111011111111011101111111111111111011111111111101", "10010111011111111111111101100111111011111011101111", "11111110111101101000111011111011111110111011111100", "11111111111010001011101111111111111110111110011011", "11111111001011111111011111011000011110011111101111", "1111111101111111110110111001111111100111111111000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 486276833;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 832665435;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 252035334;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 998474160;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 611356767;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 299732389;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 43117709;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> digits = {"10111111011111111101101101111011111111110111111110", "11111011111011111111111110110011110111111101011011", "11111010101110100110101011011111110011011111110110", "11101111111101110110011001101011101111111011111111", "11011111111100011001101110101111011001111010111010", "10111010101111011110000010111000011000111111011111", "10111101101101111101101100110111110100100110111110", "01010010111111111111101100100011001110101111010111", "11101000011111111111010101011011110010100100001100", "10100111110111000101000101101110011100111011101111", "11111010110101110011101110111111101111011111011111", "11110101110011111110011101110100011111001110010110", "11110111111111101111010000111100101011110111001100", "11111111101011011111111111101111110111111101101011", "11111010100111111100010111011011100011111011100000", "00111100111111110111011111010111010101101111100111", "11110001111011111101110100110110111011001010110111", "01011111111101110001010001110001101111011000001111", "10011010110110010111110110111011110111011101100111", "01101100101010101101011111001111111001111110111011", "11111110011011000111011001100110101111111111111111", "11010110111111101111000110111101111101111111111110", "11110101011101111111111010001101111011101101111011", "10101111110011110001011111000010111110100111010111", "11011101100010111111111111100111001111110111011110", "10101111011000101110101111000111111111101110111110", "11111011011111110000111110110111010001011111011011", "10011111111000111010011001010111110110110111110000", "01111011101111001111011101111111101000110100111010", "01011111111111101100011011110111011110111101110110", "11001110000111101111111011011101001001110001111001", "10111110100111110101111001011110110101010101111101", "11110111100111111110111000111010111111110110111101", "01000010101110111000010111111001111001111101101100", "11001111111111010110010111001111111111101101101101", "11111111100001000011010110101000011101111011101110", "00110011110111111111011110101011010011100011000111", "11111101011101111010111111001111101100100101100000", "00011111001101111100101100111101011111101011111111", "11100101111000011011110111110110111110011011111000", "11101110011111010100110001110010101000001001111111", "01101101101001001111111100001000101011110110010101", "10101101110001111010011001110111111011101011101001", "01111101111110011111110011110111111111101111101011", "01010011010111100110111111110011100010111101111111", "11001110011111001110111110110111111110111111111110", "11110101011001111001101011111011111110101010011011", "00011000111011110011110100001100010111001111111110", "10000111010101011111101010110111110111011111010011", "1111001111001001011101111110011011011001111101010"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 862860732;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 781375251;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 521564813;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 457890601;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 736257508;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> digits = {"12345678910111213141516171819202122232425262728293", "03132333435363738394041424344454647484950515253545", "55657585960616263646566676869707172737475767778798", "08182838485868788899091929394959697989910010110210", "31041051061071081091101111121131141151161171181191", "20121122123124125126127128129130131132133134135136", "13713813914014114214314414514614714814915015115215", "31541551561571581591601611621631641651661671681691", "70171172173174175176177178179180181182183184185186", "18718818919019119219319419519619719819920020120220", "32042052062072082092102112122132142152162172182192", "20221222223224225226227228229230231232233234235236", "23723823924024124224324424524624724824925025125225", "32542552562572582592602612622632642652662672682692", "70271272273274275276277278279280281282283284285286", "28728828929029129229329429529629729829930030130230", "33043053063073083093103113123133143153163173183193", "20321322323324325326327328329330331332333334335336", "33733833934034134234334434534634734834935035135235", "33543553563573583593603613623633643653663673683693", "70371372373374375376377378379380381382383384385386", "38738838939039139239339439539639739839940040140240", "34044054064074084094104114124134144154164174184194", "20421422423424425426427428429430431432433434435436", "43743843944044144244344444544644744844945045145245", "34544554564574584594604614624634644654664674684694", "70471472473474475476477478479480481482483484485486", "48748848949049149249349449549649749849950050150250", "35045055065075085095105115125135145155165175185195", "20521522523524525526527528529530531532533534535536", "53753853954054154254354454554654754854955055155255", "35545555565575585595605615625635645655665675685695", "70571572573574575576577578579580581582583584585586", "58758858959059159259359459559659759859960060160260", "36046056066076086096106116126136146156166176186196", "20621622623624625626627628629630631632633634635636", "63763863964064164264364464564664764864965065165265", "36546556566576586596606616626636646656666676686696", "70671672673674675676677678679680681682683684685686", "68768868969069169269369469569669769869970070170270", "37047057067077087097107117127137147157167177187197", "20721722723724725726727728729730731732733734735736", "73773873974074174274374474574674774874975075175275", "37547557567577587597607617627637647657667677687697", "70771772773774775776777778779780781782783784785786", "78778878979079179279379479579679779879980080180280", "38048058068078088098108118128138148158168178188198", "20821822823824825826827828829830831832833834835836", "83783883984084184284384484584684784884985085185285", "3854855856857858859860861862863864865866867868869"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 466386111;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 967476133;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 850576064;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 797383159;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> digits = {"32208757407835000618150000300009270000056270361120", "04954201370577130005510000070040000025776000005513", "10000043308228000008621000007080756000200000742003", "60006482000657000006282000097938000009353000032997", "00006000097700398502950947400392002004521000001000", "00789120100683320000056800015920050010000191760058", "12609008300000770000970011600099140990000084567000", "03796600092009894000034400000268300000260900048006", "35460009116800004900960003206726006250053400064810", "00089740849905663800002155300073000722000137590047", "35207300074940000049070000095000064003383000004000", "07990000800004544000006300300001344009200007700009", "50000400000394000099800000700002000002762008600000", "23650135004349300000500011707500001743000783200008", "08008206503159209000014210004119004980000523400223", "96000657840700000991000577500451075799000029200835", "00052601239000060007337700000853940436041130000944", "50283000081200000780085557000290008549900086849000", "01840006675000096500700005690000025000480007000695", "40000519300004120050004000700001200000151103880007", "87540000010556500299103816300085106800006801000270", "00006980064007716302005501970000094800051000040000", "03731904475000217880615260000370005431609000007068", "00000790000401729400099000496079006312906770000025", "00000839097574000004550072394021390006910000840006", "97260100681190038181000060001584002560000047981000", "04590000092500699070831000096000020000034845002763", "10000300088464000638870000800049515007000009545000", "80000057120000164000080084200002890457870000038980", "00937750917000032003600446200051000011300192007667", "30002005000057517008016600000700000400040000531000", "06200066164000088000009105433000026970000800005984", "02993800579870539015000600054000060000091427013155", "00000380040002172200003479500003777107630067130008", "62400364600311900000460392750070600079835000357000", "49005980100004527700054000091400082270000326140000", "90768000938200007453700350000072181000962000396290", "00006155009540054600007533300000100010580080700000", "61518006280009742709527600012000025500090000076160", "02850000807341004480000027840007600189307274000387", "07400038270000099632000062625004798700008380160066", "60000410000710003600768100000318700000500066100000", "60000012882001317000005000213900000150000052007280", "00034700004177308880000870000044000995000001971000", "75200449390000387140060000140006270051960005500780", "00753000005315700009500470000963000064000998014457", "00708800000860000623600150000417530000586120006281", "50054463000160016900000130008518408747800014630005", "14300004960079500985306197700019454000400073714000", "00258000023239008000357009000035891025008000886"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 380241175;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> digits = {"11211651326899357467533916755753191578764737871000", "00000000000000000000000000000000000000006326613006", "51837495196861193400000129964725561489000000000000", "00000000000000000059369803525365186937815726826987", "64158646648457975500000000000000000000000000000000", "00000000000000000831188461937254944911563673439884", "63670000000036617476687644291471974281239119217100", "00000000000004813114173582826159141950000000000000", "00000000000000000000000000000000000000315248676500", "00000000000000000000000000000000000700000000000000", "00000838572445592735000000000000000000000000000000", "00003885557556876966232793000000000000000000000000", "00000000000000000000000000036514647754914871946369", "95432486357888100000000000000000000002693558394342", "83932627149543891376644645000000000000000000000000", "00000000000000000000000000061871790000000000000000", "71997824194994789868958911179669754955660000532873", "15964351128548638000000000000000000000000000000000", "14669341861636616298157724722148951000000008356221", "00683474464788480000000000000000000002677678186126", "98294258888424719437682593568428725127300000000000", "00000000000000000000000931922142793767528456687144", "49769000000000000000000000000000000000000000000000", "00047979925871211286822718849811691700000000000000", "18418578968171548473564619651928625997569266995700", "00000000000000000056112874487214644824775957731321", "00000000000000000000008565329993323700000000000000", "00000000000000000636732426389857612423960000000000", "00034251441872386667556457523612891868329353625222", "35960000000056875110000000000000000000000000000000", "00000000000055221975983763418698891000000000000000", "00366894225483331288915983582966517396259663600000", "00000000000006587757397351377541694918154132755950", "00000000000000059900000000000000000000000000000000", "00000000081895517138785478912469679521871465386732", "11517000000000000000000000000000000027164559585156", "69493389872100000000000000000000000000000000000000", "00000000081398658370000000000000000000000000000000", "00000000008276532163553986479399346155479279521996", "26513154110000000000000000000000000000000000000000", "00000000000446916296715999343272366150000000000000", "00000000000095570000000000000000000000000000000000", "00000000000000000095626681253615832345733872658938", "74752991276219799700000000000000002692895673931573", "13712634351423898965697151152422000000000000000000", "00000078359272321581895781800000000000000000000013", "70000000000000000000000000000000122823999318982197", "56442911670000000000000000003595419632489745985262", "16126461216979686069331393730000000000000000000000", "000000000085314213227586681271881"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 910417096;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> digits = {"51666000004000000000000000000001735412879929596483", "43600000000000000000004596928574579438600000000217", "99810000028711871999248143821100000000000963547300", "00073755277737336765500000000000000000000000000476", "19550082545136633578574000000000000000000323454833", "73658382978900000000000000007516483232426300000000", "00000000000000426987000007697224968900000000065181", "34800000000000000000000000003272571255159347440000", "00000000000000000000056662558293000000757600138940", "00687697788774827254000000000000000000000000045367", "96319899500000035479696681400000000000000000000000", "00036899730000497295171400000000400000000000000000", "00000000412988291000037387334831952894200002269181", "87948519764276588100000000000000000000000025745728", "67576115827438240000006000000008282468722781265677", "28858540000000000000000000000898951947622165671500", "00000000000000000958100000000182651739459931718612", "80379400000000000002776632250000000000000011347641", "79464394773170000000000000000014584923962971378000", "28296835232911914976273000000009543563438671387690", "00000984345245675250000000000000000000000091449800", "00000000000002000000000000588556400000000000000000", "00000000986636874400000000000000000003766154178716", "68000000000000000127738591553179760000000000000000", "00002849413314118229870000000000000872456200000000", "00000000000000929794964613936379293318000000000143", "79624876696000000000000060000000000000000000006331", "16338445617349410000000000000000000000194839143165", "36677000000728674564000000000000000000009678865187", "51753379516312000000000000002384652188348996900000", "00000000000000000021937143647000000000000000000721", "93713000000007711747259277549983150000000009185532", "59217825880000000000009472000002671139618992677637", "57000001213395550000000000000022524763519831776900", "00005594298652562000000003665393879468160000009590", "00000000000038875991158147365814617300000000000000", "00000000003684500000000000291370000000000000187379", "66159319835679769164094449985584207576600000000000", "00000000000000043950000000078426500000829000000031", "91914616742400000000000000000000000058985367000000", "00000000000000001343353651652900000247344886737772", "39178500000000093943353000000000000000000000374945", "24872721129100000000000000000000001000000794423967", "11253830000000003591719814425000000000000000000000", "00000442800000000976483300000000000000000000219972", "55281358287293000000000000092837800000000000000000", "31494525916675294400000076156381575200000000000005", "32843836112254371491600000000000000000000000004325", "73165587251168935943250000000000000597568342556895", "20000000000000000012881477969"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 319895205;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> digits = {"63140000000000000000000000000000000003764528873231", "35965258734729513591766124682694200000000000000000", "00000000267542566949463650000000000411576824944393", "77736219365939118327129657524400000000000000000000", "00000000003795534000000000000000000000000998427334", "51147321984817628227559667964512311892312660000000", "00000000000000000000000000000000087912642293197485", "72634216555744996675376974269570000000000000000000", "00000000000000000000000000000003393589736513163285", "45465293848932000000000000000000000000000000000000", "00000000000000000008198541489353257124000000000000", "00000000000000000000000000006978237645731613650000", "00000000000000000000000068882387246000000000000900", "00000005966159886537921949659159919594563435121342", "37328145715000000000000000000000000000082429857254", "42000000000000000000000000000000000000000000000000", "00027762514461943387425672270000027861335898352549", "57692689599278723439989818321395578952007254253187", "26899589732962565679295697600000000061355418216886", "18967524638179356124100000992528759995145727570000", "00000000000000000000000000000000000000000000000049", "76514697236800000000000000000000000000000000000000", "00000437123700000000000000000000000000000000000000", "00000000099836381818361969173652499522453355759126", "52833620000000000000000000000000000000000000000000", "00000878463782889261562382749125443861616117154217", "81000000000006799456754881198846550000000000000000", "00000000005532294471112512926765385592458418398589", "57000000000000000000000032727953700000000000000005", "68346526416921626193231533934638363244980000000000", "00000000000000000000017373483575630000000000948127", "31692389319738300000000000000000000000000000000000", "09186171957388287303597888522561612259724473747567", "43888236815544962907192534546127900000000000000939", "21264716457549375821131575777556658137460000000000", "15364400000000000000000000000328493879896317253614", "17319651148000000000000000264143962682421257959599", "34896320022265475194000000049921312518743318346816", "44472590000000000000000006241319156652897235444195", "46759313836597475343123673885220000000000000000000", "00000000000000000000000000000003744824641295856364", "75597652719343737786973129000000000000000000000000", "00000000000000000004424687747594897133786412455681", "52837659971560000000000000000000000000000000000000", "00000000000004526744656379878619748544288900000000", "00000000002337344356867686994916433144248865841100", "00000000000000000000000000013878857437294934625134", "63766694289314834813660000000000000000000000000000", "00000000448227986527752919000000000000000000000000", "0000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 784578553;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> digits = {"76368700000000000000068170000000017000034525900000", "00993133345000000000018421878874932800000000000000", "00006484841588763300060000000000093582623633100000", "00000000062480000314357006428234958270000000000000", "00004581373443110000000000000769335579512365000000", "00000000743997868331523456700000000000000477451700", "27569589756000000000035936658942677620000000000000", "00000768187922000000000000000000075451762838442480", "00000000000000000089600000099517557620000000893138", "24941440000000000483864217000000000008521525195125", "29572000000000013574492562624000000065366588129767", "22930000000000013671448600000000000000300000000000", "00088987000000000323222254394675812500000067724588", "89199691110000000000023137372799726672130000000000", "00000007629000000000000025782632388922944000000000", "00000000056891859823699125200000008862736219871852", "90000000000000000721187446021132599239837283000000", "00000000000006319100000000000000000788787900000000", "00000000062829945345948671880000652000099188225578", "24000000000000000494100000228572555611832631100000", "00000052000000000000000668282266000000000007825640", "00058121277876739600000000000011132742410000000000", "06215000006552231275715257284000000000000057625758", "96723629940000002932693328300000542875523733377000", "00000000049847431200000000000000000002917594321610", "00442464005800000000000000000648433993441338761000", "00000003229174279493000000885474581847659470000000", "00000000284873393846000000000000000034462448723191", "16400000000000000000200000000436767246000000000900", "00000000000880000000000092619213473800000000000008", "58859539538475830017200000089147437636780000004800", "00000000000000007541976000000000000000040000000000", "00000006000000000000085861230000000000000000465162", "88939823000000000000072739238440007555125660000000", "00287623600005721900000000005152756596111000000000", "00000004764948766967279100000000000000675455964345", "44000000000000002993800000900000000055681617190000", "00000000000161884900000356200000000000000065623337", "82349238450000000000000004522743456864722670000000", "00000002393497190000000000000000039655527282263441", "00000000000000227163777415500000000000006367989496", "43000000000002993235664897845115000000048584489397", "70000000003542951365275583000000000000732848589000", "00044268000006687296000000000000000000995000000000", "00000005227894366400000000093949697456339700008000", "00000972578494434725710000000060000000060004794482", "89253922867000000000000002385198367498288730000161", "97824208442988230000385452519567700000000000000000", "77844225941593150576892885000000393000000000000930", "00000003850009395187117478300000128280"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 880350300;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> digits = {"69284868388873388844324921133843959411324182989114", "25434972942227165434000000000000945228613547431547", "00000000000000000000000000000000000000000000000000", "00000000000000000000008232626327175868000000000000", "00000000000000000000000000000000000000000000000000", "00000816827547764633949166638376447854615768646776", "12238515657380006994295877235216869411653996426368", "17454431522576681177200000000000000000000000000006", "18363689373443695829253688500000000000000000000000", "94371555914741434395372449292835659258496653493862", "75628794853329394570000000000000000000000000000000", "00000000000000000000000000004544175995827878398236", "83445484575872700722679284663915566738569282671315", "92266222851765125783816797314649755698000000000427", "41915566158373867477678715565000000000000000000000", "00000000000000000000611799128641148181175454133119", "84796624242754565242463131843395992895681419600000", "00000000000000000000000000000000000000000000000000", "00000371151196179267944271493963133891116275251936", "54211897311324200000000000000000000000000000000000", "00000000031269349741688641654135964734883008410000", "00000000000000000088192996593622855815351859134339", "44767359692000000057225469165885566251273199627123", "83337749228454861823967269697699000000000065666261", "93633584626875775958475592616146800796317771899724", "56896721548483538488238123260000000433345320000000", "00000000000000000000000000000000000000739934334962", "67745700264760000000000000000000000000000000000000", "00000000000000533359868665738991862562951456852936", "00000000000000000789569671536739536192418782745317", "61835984491168000000000000000000000000000000000000", "00000000000000000000000000048747274500000000000000", "00000000000000000000000000000000000000000054466276", "65828849236645215535378358374500000000008667829955", "13361987911555776585158455852528800000000000000059", "27576367235672188259659453582751351627793757825967", "86928661898383379100000000000000000000000000000000", "00059296173470000000000007764334339324393537165962", "88231998373539995651321183235339539491936159249930", "00000000000000035267521899960000000000000000000000", "00000000000000757421261682773291235572343592297347", "79348573872199964267153937256226880000000000000000", "00000003558858174900000000000000000000000000000000", "00000000000000000000000000000000213273798397388700", "00000000000000000000000000000000000000000000000000", "00000000000000063639000000000000000000000000000000", "00000000000000000000000095239492577811978390000000", "00000095472645462939248263348765376819992614916800", "59817986178463882724787000000000000000000000000000", "0000000000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 348201140;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> digits = {"88873248447685896000000000000000000000000000023441", "14160093955624191413124474542683658897400000000000", "00786566885518661969783648738712252684492851679621", "60000000039322849954377984971388377511782593800000", "00000000000000000000000000000000007622532257321397", "27156142468569189975279723151584768579453888000000", "00000000000000052637939259442291591679131761324945", "29000027541112748953661162274527842175221792941255", "18979839279680000000000000000759125000000000000000", "00000000000000000000000002735737581825864969700000", "00000000000000000000000000000000000000000000000698", "82137473711900000000000000000000000000000005984758", "41286937331135845792588558349485100000000000000000", "00000000000000000000000000051189957349898586199242", "43337461951497366182674500000000000000000000000000", "00000000000000000000009682399558446300993547781367", "27627613588166396742476000000000000000000000000000", "00000000000000000007996898163484894127195839236920", "00006121124872486352421448000000000000000000000000", "00000000000083687300000000000000000000000000077321", "33815544728862372722271594786147464514196125000000", "00000000000000000000000000000000000000000000077186", "13974518372966217525782785679193526463434842690000", "00000000000007853519248661128347975876354459248322", "67700000000000000000000000000000000000000000000000", "00000000000000077600000000000000000000000000000000", "00000000000053827222345453995898978569738726166365", "34719775556941385835500000000000000000002221328771", "32523381745542893959000003134875332000000000000000", "00000868742836943754260000000000000000000000000000", "00000000000000000000001149267831915368335189516253", "41673583733935924171119330000000000000000000000344", "58835653621220000000078373938971315142466859316944", "88424787419273327300000000000000000000000000000000", "00007487864661937416949312698214667978261956233691", "54798227611381992000000000000000000000000000000000", "00009653927693840000000000000000000000000000000000", "00000000000000000000000000004136742979797217643973", "32719584800000000000000595277429144725168735763746", "12429738857224943243810000000000000000000000000000", "00000000000000071655585246936377179269599731558921", "71382678826457461795371900000000000000000000000000", "30000000000000000000000000000000000000000000000000", "00000000235730000000000000000000000000000000000000", "00000000000000000013348764896937653213968384224234", "38000057664916191299387662867546296939697798819865", "70000000000000000000000000000647697926779975454837", "77400000000000000000000000000000061634243862776641", "85394977968696242243962497188313745449580000000000", "00000000000000000007814"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 922163196;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> digits = {"13726484255717716611472486140000000000000000000000", "00000000000000000000000000000000000000000006428284", "38429881126355000000000000000000000000079357321362", "35784000000000000000000000000000000000000000000000", "06628599814668289362536867700000000000000000000000", "00000000000000002922597200871775435000000000000000", "00000000000000000000000000000000000000000312658951", "98894133821665659986287798991222992622313577274663", "57135598000000000000000000000000000000000000000000", "00000472237896153252443241242797491866848940000000", "00000000000000000000000003811571300000000000000000", "00000000000000000000000000000000000000000000000000", "00000024291446693995648618219811262614369131534854", "74582110000000000000000000000000000000000000000000", "00000000000000000004254212721153751957192974718912", "86000000000000000000000000000000000000246725215800", "00000000000000000000000000000000000567122513217569", "96979588800000000000000000000000000000000000000000", "00000000000000835378811549293223751996232755534654", "53332846593195000002669680000000000000000000000000", "00009545482118236373882726989436385649996151329576", "95959931683110000006640000000000000000000000000000", "00000000000000000000000003429742861315217422887810", "00000000000000000000000000000000000000000000000000", "00000169753486600000000000000000000000000000000000", "00000000000000000000000000000035525555750000000000", "00000000000000000000000001925942152826957749813200", "00000000000093211253821152567193400000000000000000", "00000000000000000000000000000000000000000003112789", "37949978621434746359281132457482972880008132649888", "89252751848689865590000000000000000098478797573527", "72811669126492429581289364359600000000000000000000", "00000000000000000094212691835851683970000000000000", "00000000000000000000000000000000000000000000000000", "00000782126864726262420000000000002511463572932396", "73927497466278864783115317338922534551000000000000", "00000000000000000000000000000000000000000000000000", "00000000003378836651786357646451312179496973776185", "49189637388475288253815712229500000000000000000000", "00000000000000000000000000000000000000000000000000", "05477635477775468562138955219395199852177572000000", "00000000000000000000000000000000211611454143473800", "00000000000000000000000000000000000000000000000000", "00000000000004767914677497287345929149341940000000", "00000001515622482244872389877774991855427971744366", "56966685116152131841200000000000000000000000000549", "11979438614963567989281938786435849600000077658216", "46776952442978566434678957792191000000000000000000", "00000000126500000000000000000000000000000000000000", "00000009885724437425411949718888111658186"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 384151635;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> digits = {"84647020827933182740000000004124857890000000050000", "00000000963584000000000000099454479729870000000000", "00005200000000647176700000643593000000000000000657", "55742840000000000000000792893596340000000000074495", "67269227800000000000150000063894617256008558700007", "64000006981383847500000000758764917951372500000000", "00000834765353864677900000000000151000000000000200", "00021353433500000000083026272429819589430000000000", "00000000715000000028471400000000000732400003625556", "57467386890000000000000000555246000000349529400000", "00000824633265791452369004358528157500000000000000", "28300000008129300006000000878138511226500000000006", "00000000000016400000064884723777198500000000000005", "13457300000000000000015115769478000560000000000000", "00000763388598951000000000400000000000008178254000", "00000000006844828224421163610000000000972620000004", "68000000000000000005487381467000000000000000002342", "53594000000000006473973000000000000060000000000000", "01673599703948534868519300000984253038743200000000", "00000000291315369400000000000009213394744300000000", "00792781654765529125000000000610000000004619518882", "78425430000000000086583000000000491383816000086005", "00000000000048195266000542000000000000000006518152", "52148800221836831800000000002821670000033000000971", "40000000000957269894451252490000044787964296624053", "75350000000000000000845497315996290000081368139949", "16246000000000000045767004257665166618330000000000", "00019594384787800000000000000023390000000000000000", "00635712112327397440000000000000000500000000000000", "00004389276841600000010000000038644969555800000086", "74817331227100000064000000000000000002521007119146", "82190000002366200031236000000017747000000000081700", "00051391262460000000000005426594543495000000000558", "82783351770000000841816555540000000000000000001745", "78400000000000000008443735638250000003642262560000", "00539184237722165000000000000000689334000009395382", "68000000007521197000000000000000000594168000000005", "46941752830000000000000000525831337961228000000000", "87428678424660000000000000005676625997023148987870", "00000002734376160000000000000002158364414656444320", "00000000008745470000000000009258845993791600000002", "00000006475373609349847951412381920025189753940000", "00000000000074184959589587720000000000000000383726", "10000031323278875600000000000000005700000000000000", "01812321158794000000000000000000954800000000000000", "00068641534575561009933413969526770000000000000000", "00448181535547916321000000009888358852920000000000", "00000000959671221246692900000000000000462115656478", "52290003444495255000000667169158244292257000000000", "0000485928000005352746463123646000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 433015733;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> digits = {"49691827448331775500000000000090000004996311000000", "00000000900000000000000004600000000000000000000000", "11756225872834600000072996190000000000000000000027", "93000000005945282232377776713523100000000000008313", "00000000000000000006466597800000008175500000000000", "00000007890128213494841740000000000000001000000000", "00000000000007534984631987930000000061757689455525", "56470000000000000000000000017569457000000000000000", "63943328474472135752000988233325416118937300000000", "00000000000012358261237845244670014686783541822400", "12150785335944824494165800000000000000069994862427", "75631476600009583772100000000000000002000000000024", "64769697269630582475544378275994700067251682328314", "29445000079342635966579181700000000000072490000000", "00000000000000365635741143932159420000000000000000", "51618200000000000044280000000000000002491373445474", "75440000000000000000000000726318822783383832425320", "00016845400000000000000433997779603151000000000000", "01741813343459672974000539535500000000000000254735", "13728839129400000000000000010000000000009457946549", "00000000321843619165493400000000000000000000027472", "83762676188200000000000000000031954745534943853775", "35600043658116645000000000000000000000040000000000", "00526688542845417275034568457221738721510000000000", "00833640000000000000000007549529175137000000000000", "00000000498952767600009999341738865478000000000000", "00000000000900000000000024192315814843000000000000", "00000000008425284323330000000000000000019006746599", "14375517453267120000000000002221563523536554375000", "00020000000000000000000004000000000197625449100476", "49414300000084477338854213763300000000000000008219", "59000000898432358663483288648900000000000000000000", "65545814284832600000000063571660000000000000000025", "00000427512600000000000512491117591586388517210000", "00000000000000007049518453124778863142800000000000", "09841758599947675414000000000000429594297591491000", "00000000000004620000000000000000646924424522751497", "16500000000000000000693939416917252950000000000000", "00000054816811635647585752100743910555295893733927", "00000000094567432252492839900000000000000000053469", "18359420000000008629422340000000000000000000000089", "29380000000000000000000000547689279356277174417500", "00000000000000009551870000000000000000000072929468", "51119754180000000952931444817395355100000000000004", "73008362984417752600000000001530000000000000000697", "93847992376600000000063517841541748004386189723161", "44825719000000000869000000000700000000000000094751", "43672465789323536500000000000000000000000369639435", "00000000000000000098679895400000000000000000279238", "16294252200000000000000000081418919446"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 933446973;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> digits = {"11314315284167254573759100000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000899966472338524286000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00489417741556456946822753700000000429436241559838", "91151579539196398611792997844268869512679561766998", "44786533950000000000000000000000000000000000000000", "00000000000000000000000000866723891815598586621730", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000017874887300000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000008467531991251291898888515913261588", "76359376996900000000000000001629367829167741548713", "21249222582922762315972923946655859873617617664000", "00000000000000000000000000000000000000000000000000", "00000000000000000042361472482981348163323798633762", "31784417471156565819100000000000000000000000000000", "00000007765848668899956934444694227353666193577172", "44995785911985199168131481433700000000000000000000", "00000000000000000000000000000000000000000000000022", "37344169612617276252179786694267932296400000000000", "00000000000000000000000000000000000000000000000000", "00003482213484277359666614194888744749241177855738", "11921899415787935472592558538748892961144000000000", "00000000000000000000055661451176121344289665524926", "91412296864925393898000000000000000000000002459324", "81255443843635193645135355685953228717831237784641", "21437762277266134225214000000000006153457864867637", "88185849573866444153000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000083255895919571772425567112446253631764369754", "69768691512936382635612129196539000000000000000000", "00000000000000000000000000000000000776651671178436", "48668848747731261700000000000000000000000000000000", "00000000000000000000006919641745735528931451388267", "81992353457986887547121617333320000043231483841657", "34281884126938550000000000000000000000000000000000", "00000000000000000000000000000000000000000092641482", "58273145844216777285638568653619200000000000000000", "00000000000000000000000000000000067782000000000000", "00000000000000000000000000000000000007814745673656", "76354492257869575298868965149366898552881160000000", "00000000000000000000000000000000000000000000000000", "00000000004261881478962117118836699873783174372264", "11843579411112000000000000000000000000000000000000", "00000000000000000000000000009735123831955919254822", "46229000000000000000000000000000000000000000000712", "67396858478381917141471173632344145776357786690000", "00000000000007887595464259315441176846772945116314", "37171875147123541820000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 891830060;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> digits = {"30000000038297454400000041782267045591974600000000", "01482894539000075351713100008500018732000037461960", "00003000000069133238639000078676167000000057000000", "64539252211000000000177935000000000063187150000000", "78658891180441400000167734500397956689570000000000", "03666453221500000059320000000228561192200000036948", "00259543138500000000480000000003844849299047141842", "00000000070000007004200000000267290000000000891823", "45424000000000016325000000024496500000000000129726", "82180993185913000000000001990000000007658937898700", "00726416191700000002540000532140000002841800000006", "38555824170000002537359900000011005783914840290009", "55320000000000758113500000000061079668868720000008", "22357520000200000900000745523124000000731850007429", "80000000008887000739110003192134741700000853000000", "00000157782491180820000010000000092628171200000088", "56441990000000463129880000000003737316940178000000", "00009863332600000000000315000000045000000000003982", "57398081687467000000099158996000649394132340034000", "00002546266900786528000012000000348596358200000000", "60000000928450000085361457669000000000001898845600", "03759500007914640007519936430000046150000000005679", "90000000003220000030006200000000005568500000000829", "37240262932300000000000321276000000004176310006624", "70000668278784700043000000000054500000000005593673", "00000200000000003719677000000021818877170000000000", "05891235000000523806918728572800000003000060000000", "00045228610000057680000000056000000002630000001238", "36685905006400000000004296139230000000667942422100", "00058562000001800001394540000000007330000074165418", "00000000712690000000000530000053279319194000000007", "29637400009763000005901779700000000663459686009349", "22886310000800000000000513378237500000000093556162", "90000000316675659000270000034192004764002294369877", "70000000000076236176200043000000014100000000002457", "81700000000019083768768400000253700036000002922690", "05746455000007000000000677590003856000000001828000", "00065000000001368300000000000169500438000000099524", "00006213300001235800044831961700000488200000000025", "14628616900000000002166151007001248621445000000799", "50000000002531991000000047133451600000000254177700", "00004000188290982459834000000064220000000000086000", "21436160000000929900000025257480000000000095692220", "00023132661600000003000000000400000007955888762002", "42762255008670000003900221731673000000000042153345", "13000000005940615426566000000000021727213000213700", "00000076552771000000000002164370000360900004451980", "05500000000028373826574000008489986970000000000535", "64000636900000097351191200669599880000000003324444", "00000000058900000002161100001360000008591"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 48785576;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> digits = {"21003306209707008300905905100900400800400805100709", "00500450090270079063003038044002502300390200700810", "02800490101020012006304007040830500140902005700480", "10040020070150320805067007028008002800305100650053", "00400800450870700540730028092056002005003500190960", "09500408070030920960500260065018070038030450610027", "09400200900410025031009100910130080010010550990030", "01207058006200980906003006004003401018056010580740", "09043099007002008701010500600906008200550490090660", "06005006400808047005405090930990020701002006051020", "40053008005300120086009009104600250040049070860080", "07100120077040803101400170020810600200903040900505", "03003006049030040710400201040170081001002305004009", "07073042008020030360070900150790090120300400190090", "70108081030047003800980092063093060900640017064050", "07700120730018001051001021070029005807202900405700", "10070092010600780073054095005023030301900730096002", "10034008701500701200670020304002006204003040503303", "00270037010100100340070068007028003401001900709506", "20072006900240045060080806800130330080050400680090", "38008002063007100160590802008042028019069007609020", "70010950030040061060908051090040260031010021013001", "10430082005107400101002040900230060083008500407040", "70100860070086016080670690730970820070900800160034", "02016003026008062009039010010904005900602061009106", "30080035002400102088091004400710306200420070040060", "04010090090207053008702003001001004409053013052004", "40066010050016009090029002403040020520807002609080", "50052007050080010088009400260640030306030080060040", "60088080082007004709009040309007009006060090140029", "08030801009001089003020038003094016051026001007008", "03060039070010700600910309082016080040800800460090", "28009002600840440706500508403100400700509003080930", "08204095008006004064007402001200450015003005600808", "01100660070051015001066007600408007608405002050064", "02008060470081086060032003100900260409309702600300", "19068006002007008005406300680020020030930020303007", "80091006400780047033005803010801008009900800350220", "08004093040730980608006900509060707007505604700220", "08803104040940080080022070100610030550640802011004", "00400703083030720010022009001002005900700540230900", "10090270020800440085005026001304300580019009003030", "73079004002600209090220079080038030026083009900200", "90074005400900605040016040030890070600200960320550", "20048007004500100800490605019003004109800600105400", "14008207500100203400160710090097002060809409803900", "60036003032007030350037062050830701600300510011001", "90018070250320076004004306007502060570202900690303", "02700307102505200360012091005002086007207006400690", "2030970800700350600100540070050450070099002701001"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 408566345;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> digits = {"35153165900003163833789678839000000000277394462483", "86475279118313992121398124937138725121267795994793", "51837919539100000000000000000000000000000000000000", "00000000000000000000000000000000000001625286247115", "83584379613145334636129661813112624997943837363479", "37650000000000000000000000000000000000000000000000", "00000000000000000285723135472788656343933417417593", "00000000000000000000000000000000000000000000000000", "00000000000000000000000003134428296841953489398280", "00000000000000005435153181933579941716197289000000", "00000000000000039783797178972674528771761589934554", "00000000000000000000000000000000000000000000000672", "64898298479521937935185582181557665555956777530000", "00000000000000000000000000000000065736194385524419", "22453462994259632399741486468113595235299782740056", "91759741329299564438968797939637837726671565562596", "75462221572840000000000000000000000000000000000000", "00000000000000000000000017515385954266179582125349", "11939952335345928677263777273282338529622999475600", "00000000000000000000000000000000000000000000000000", "00000351518934261958828758929485832227545439557337", "27147900000000000000000000000000000000000000000000", "00000000000000000000018116958738874342161519926765", "82469155218772120000000000000000000009932173767574", "86758000006626213174595335615819127568869691573148", "87447292459574192200000000000000000000000000000000", "00000826538857937843864676641263541261484197118934", "19540000000000000000000000000000000000000000638829", "82366451268332493329639214597879366497938946937558", "68290000000000000000000000000041552225987477458786", "94474960000000000000000000000000000000000007821517", "94289358914262338483213872792372528441000000000000", "00000000283895187861276382645283927971395187199396", "89971654885422427841285639524595150000000000000019", "47767968800000000000000000000000035256684131397756", "99231849789314778526534985974445132700000000000000", "00000000000000000000000000000000000000000005166492", "84664771851577966699349672859865687866438485217200", "00000000000000000000000000000000000000000000000000", "00000000000000000000000003559451378855547755275798", "33817594634621447955465120000000000000000000000000", "00000000000000000000000000000000000000000000000000", "03737420000000000000000000000000000000004000000000", "00000000000000000000000000000000000000000000000000", "00000000850000017668165536514820000000000000000000", "00000000000000882974317264526691874589188339887516", "61969336622965367528132951635687524552165000000000", "00000000000000000000000000000000000000000000000000", "00006898678451779816000000000000000000415844179498", "66938386678192733355668298246264238230000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 686652925;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> digits = {"24845981377000000000481596971680000002361100000000", "00000000665853758728286674160000000000000000000000", "00000000002711915112352614384151988328293619128571", "00000000000000000000000000000000000000034636964311", "73241511300000000006654196368500000000000000000000", "00000000000009000000000000000000000000000000000004", "15340000000659654373644875996312270000000000000000", "00000000000000000068364316648335941924006473671313", "59537557184148525773411940000011655335500000000000", "00000000000000000000000388352287573652781239672519", "62861930000000000000000000000000000052527890000000", "00031253796252448121257456200000000000000000000000", "00000000000337144398778971349864888349319975666345", "70000000000000000000000000000817363987767618979933", "83682894498920000000000000000000000000000000000000", "00000491489653477574974229866569481361426450000006", "32189492452144516324985857512548155389713730000000", "00000000000000000456684594370000000000000000000000", "57317945271241349963841558785735000000000000000000", "00000000000005345647721962969875871978572500005747", "65267572956796865452634600000000000013781273360000", "00069335588226482823700000000000000000000000000000", "00000000000000777831221684148454491249790000000000", "00000000000000058399689300000000000000000000000000", "00000512471541397395680000000000000000000000000000", "00000000000008625484160000000000000000000000075178", "30000000000000000000515687941633674649687325787226", "60000004547472432434000000000000000003552541712798", "29847775676346666000000000000000000000000000000000", "00961279288585245676865661331499571816875484017259", "24554535478651140000000000000000000000000000000000", "00066000000000000000000000000000000003986854892589", "94194486819881736872346460000000000000008462375571", "86344346164655900000000000000000000000000000000577", "32617911332745783476555651379626592000000000000000", "00000000000000000082827537115696987933898998460000", "00000000000000000000000000004561157191000000000299", "33946793776821728845627656161000000000000000002948", "51967769153822821484779158221641941000000000000000", "00000085236396688764682584498370000000000000000000", "00000000027873164635800000000000000000000000000000", "88634946119210000000000000000000000000000003587696", "82318426781349532279284213000000059325773255698613", "12877157990000000000000000000021335166559985571561", "84894488281000000000000000000000000000000000000000", "00000923489100000000000000000000000000000000000000", "00000001292129156232978236183369672375342100000000", "00000000000464223433300000026513931159558127549638", "95213265200000000000000000000000000000000000000000", "000024454213000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 662215885;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> digits = {"14922189996989200000000000000000000009500000009938", "39859939995500000000000000000821767338324575264282", "25847500000000001798458128816700000000000000000000", "07212727535371691000000000004836718253167855430000", "00000000139776724768727788923000000000000000002900", "00000000000000000000000751111128265349284815400000", "00000000563519382100005563121823290000000000000355", "82296432339197977372642000000000000000000000000000", "22925888555985548857730000001737744339293327820000", "00000000000016329877400000075570000000000000000000", "00000000494796854314346260000000003875682212911014", "99000000000000005337452364756687180000037851611377", "81393004900009773519812954948000000000000000000000", "00000069822419247513600082437000000000000761579599", "93395996689000000289281921224782600000000000000000", "00000004500000000023812359613350000000000000006924", "58641916841476945500000000000000000000000094200000", "00000000368760000000000000000000000038600000000000", "00000075935748086277343557281869799381472000000017", "84000000000841744967293331579956831625004874154794", "33250006589762828680000000000000000000002548348783", "00000000000000000000229946612200000000000000000000", "00653197225000000000039636675881319520000000000000", "00000000005797761316292536958746963570000000000000", "00000000088581929691569271934979003361198479957192", "00000000000000000000000247000000000000000000000000", "00150000053324481157735648948754566600000000000092", "23972487333600000000000088794497370000000434256388", "59239000000002276458000000000000000002870000000000", "00000524354226542724256281242900000000000000575688", "36174634383999132413400000000984671251315617344590", "00521000000000000000226247847766148896166330000000", "00000000000022874447763794365000000003696948961641", "84752327650000000000000000064416837848371862742923", "30000000000000000071784178842687180000000447544365", "68597274591966967200000000000000000000000001818464", "82437714759862676876000893592755428941592600000000", "00000000000000003841765498546831611100000000000041", "36447517338000000000858230000048914459973000000000", "00000000000000023990000000000000187828619675291543", "91900000000000000000000000000324815552678564000000", "00000000000251889271600003430000000003862457132377", "33530009934500000000000000000000000044874686000000", "00000000000000000000092000000000000006442000000000", "00000000000008439211500038270000000000000000092741", "55864269799559768256000000000000000002513598200000", "00000000000000000000014874730000000000000012130000", "00000000000000006314419698487945000000000000000000", "00000069894755388297159577210000172573000000074472", "32614978620000000000000000661222287"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 357955164;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> digits = {"26879592534181655000000000000000000000000097931000", "00000000000000000000000000000000000000000000000000", "00003553334152573117177981796831965253265355945176", "86234148347550000000000000000000799400000000000000", "00000000000000000000000000000008553774453123388000", "00000000000000000000000000000000000000000000000000", "00000000000925758422741163774964175968974681313565", "57885312546221735626955349500000000000000000000052", "93182632764981943412397618216973334394987914672156", "95000000000000000000000000000000000000000006763000", "00000000000000000000000000000000000000000000000000", "00063985497391293111918600000000000000000000000000", "00000000000000009989862221235665489884725189186744", "28454614648642915296400000000000000000000000000000", "00000000000000000000271828838538376158582988294129", "98542727574643121939114750000000000000000000000000", "00000000000000000000000000381248177948832113464860", "00000000000000000000000000000000000000000000001348", "10000000000000000000000000000000000000000000000000", "00000000008358638225100000000000000000000000000763", "15669522269912148624968234368468493827879522417545", "81220000000000000000000000000000000000696000000000", "00000000000000000000000000000000000001982754446995", "70000000000000000000000000000000000000000053573961", "42233294811118637512199242500000000000000000000000", "00000000000000000000000000000000000007422117736568", "47894816646171194700000000000000000000002266368739", "62964872268266794239000000000000000000000000000000", "00000000000017868561949973739221894733253298131634", "42616758450000000000000000000000000000000000000000", "00000000000000000000000004827364791545000000000000", "00000000000000000000000098561798578779863111147588", "15128500000000077112895641380000000000000000000000", "00000006834741693863131755871981594257128682811424", "19554852532666483768200000000000001267558424795165", "23765926734546979928966700000000000000000000000000", "00000000000000000000000000065247977268985771232864", "19711137549959348178763243976964524473220000000000", "00000000000000000000000000000000000810000000000000", "00000000000000000000085481691582432733477331553614", "27841377643485167925325000000000000000000000000000", "00000000000000364246312775124265698363645300000000", "00000000000000000000000000000000000000000007427612", "63276281323783873531975334938879841500000000000000", "00000000000000000000000000000000000000000000000053", "54753783624224611438248837358662145685322816947216", "88644887954577755710000000000000000038210000000000", "00000000016736792656342978711559753595769271886697", "26258879971800000000001478613827871734612232929397", "9523331712718"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 612895559;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> digits = {"82331852989548282586328565957326778482246285386515", "99254894455319380000000000000000000000061639836993", "16322677593524877998751849425245261127933529352988", "42433714621189559550000000000000000000000092166834", "28126312382593173248671700000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00009447800000000000000000000000000000000000000000", "00000008438994939753534151157393288638899977469273", "94961422224137138973896599126600000000000000000021", "45372782482675164696592641159624745000000000000000", "00000000000000000000000000000000000075257445765465", "66630000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000874587481476", "33827773595158819822514237826000000049252785671891", "19454557431587290000000000000000000000000000000000", "00000000000000000853457000000000000000000000000000", "00000000000000000013617186961526484864326944719874", "31943877422787187233461135777279910000000000000009", "28425825929613938591374000000000000000000000000000", "00000000000000000000000000000004441258778488212681", "81929287464871331697385486699398659133623815397825", "81514717000429933487732383618483721116684118322623", "68442500000000000000000000000000000000000000000000", "00000000000000000000000000000000063436243322137535", "82592332155477149187499655000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00427795461446117273548689953933647836752328221956", "43565131550000000000000000000000000000000000000000", "00000000000000000000005137933628638664999777631349", "29962346714713436588300000000000000000000000000000", "00000000000000000000000000000000000000000000002333", "27928547945294933776837282567935733995579627932347", "57441313161481199393796256387755558000000000000000", "00000000000000000000000000000000000000000000000008", "17742000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000314434", "67715700000000000000000000000000000000000549164852", "94282195526262541655952423697139527299562629884000", "00000000000000000000000000000000000086616137519275", "83257887491724347551656583583446354916521383326443", "74198900000000000000000000000000000000000000000000", "00000000000000000000000000000000068343111597273577", "64132745320000000000000000000000000000000000002485", "37557627997815156323995183197487789821919571327952", "38273828561734784449400000000000000000007452265816", "74464435576999793326232838932534698929434851842515", "66696511783192789300000000000000000000000000000000", "00000000000000000000000000000000465324949263121659", "59244815349441225518878900000000000000000000000000", "000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 132577175;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> digits = {"29417496596186738611727994274622215000000000000000", "00000000019962577193455869532770000000000000000000", "00000000000000000000000000715563121873438329257617", "84671478165126844241540073731441215230000000000000", "00021587422855341000000000000000951784876889954539", "11925484823725634533926400000000000000000000848120", "00000000000000000000000000000000000000000000000000", "00000008989396835172173398473625185722812958193139", "31237476882828868367334549299000000000000000000000", "00000000000000000000000000000000039629955844732814", "28287599227382955857226135219942485420000000000000", "00000000000000000000099266723640000000000000000000", "00000000000000000017972000000000000000000000000000", "00000000000000007778611521241713135443246261465196", "91494643182731819481988184877487617900000000000000", "00000000000000000000000000000000000000000000000000", "00000001257549453422499342528971169557253134143512", "40000000000000000000000000000005349482625235572320", "00000000000000000000000000000000000000000000000026", "88111328782472884000000000000000000000000000000000", "00077339832135968314449286889680000000000000000000", "00000000000000000000000000000000000000003118223521", "96499233168822165793916831457000000000000000000000", "00000000000000000000000000000000000000581793159189", "78000000000000000000000000000000000000000000027799", "39343965721544715489951196272712619699633264127941", "31692442440000000000000000000000000000000000000000", "00000000000000000000000000011955688233141112984737", "87272441758471728867212310000000000000000000000000", "00000000000000000000000000000000087444875784289956", "61923195233311931151378453135736262000000000000000", "00000000000000000000000000000000000000000000000000", "95827228362192143496228595971445583685558413700000", "00000000000000000000000000000000000004000000000000", "00000000000000000000000000000000000000000384336942", "30000000000000000000000000000000000000005559717794", "46489961200000000000000000044563525234328991694667", "71676382536676247223486637687355574153544700003544", "66258673193342647982898399375780000000000000000000", "00000000000000000000000000037913380000000000003452", "36877628597131988732100000000000000000000009516769", "35726928672716125700000000000000131551471638193212", "07443225169175375385551354854597283241171918922768", "16698691457735633289000000000000000000000000000000", "00000000000000000000000000000081963329156342229637", "26619749355217351823712427558658766427597000000957", "12292233634291692141699122446000000273597751285671", "70000000000000000000000000000000000000000000000000", "32847836824813189385000000000000000000000000000000", "000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 370979788;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> digits = {"93277525285714469600000000342821939300000000000000", "00009276375973600000056293458142000000000349268498", "94184700000000000000000004900000000000000000003195", "81133164814459370000000000000000002112328262490000", "00000000000572000000000005000034924164363000000000", "00000000027888124537942670000000000000717288731000", "00000000000095978000000000039835448620000000000496", "61237934645800000000279957443844996923800000000001", "83329866529910000000000000000007671933944299300000", "00000000743258146726754358220000000000000000000030", "00467521000000856000000000000464000783874500000044", "47487675392367186000000000001762656773599997700000", "00000000000054519762662287697300000000000026495900", "06179260000000080000000000000001643734383564311500", "00000000000007957518289765374000000003962385000000", "00000000000093179827592123220000000000000000000011", "64242625200005941448684842879715200000000004900000", "00000000048864594263286700000003458892442652736200", "00000000000055221566431029575347937400000000004790", "00000009116557280000000000000000067180000000000000", "00000001331622191944235120000007213139278351596300", "00003900000000000007825256669719492744800000000000", "00001265143000000000000000007659573661179436300000", "00000002499898577946000000000000000810002471237848", "56500000000868852900000000000143460000000022257194", "77850000000000000000790000595718654891281300000000", "00000073180000000000000066528865322121368950000033", "14587993292223900000000036269482900000000000000000", "04724200000000035772294358252298600000094888248880", "00000000000067700000000000005398533290002524037747", "88848531646190000000000000000000021778410000000000", "00000008533332668178396400000456575247975812300061", "98715712300000000000001299000000000000000000004549", "54113471300000659169857161661286900000000000061921", "78000000125949433794900000000008800000000009735882", "64000593152714828195158730000000330000000097291723", "32798000000000000006427928256171300000000973749633", "74000000000000000062216351612393000000000000000000", "00931192318832779473801340000000000000661472436868", "97463750083000000000933841555326936770000000000000", "00003682300008185646361874370000000000000004863115", "73703134661525482927738000000000000000443884254627", "40000000000006241927342763232100000000000000000098", "19100000077855273576591540000074676816793200000000", "00000000043000545990740000000747282172587000000000", "00000000563457800000000000009120000000000000717244", "70000000000090000000087635576519868381352078324854", "77655128000000853528524717900000000000000000015566", "17716000000000008448476424290000000000000000000079", "8574516911000000000000001198551845963190000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 314467845;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> digits = {"98885269348362175972429184567588913199572000000000", "69133532469332153933000000000000000000571423666646", "13538342465517465884764547116673145895332590000000", "00000000000000000000000000000000000000000000458243", "59484226300000000000000000000000000000000000001679", "21139616667266615557341838400000000000000000000000", "00000000000000872932118454946657000000000000000000", "00000000000000000000000000000000000900000000072148", "89876851178798594542185864247622879866247581622230", "00000000000497813342323650000000000000000000000000", "00000000000049527242718692979185726363561783294224", "54000000078958328397965000000000000000000035977731", "52993868314635776778824519633787496992529578413000", "00000000000000000000000000000000008613351286553939", "87937577296819172985500000000000000000000000000000", "00035195236383729666665122555335796000000000000000", "00000000000000000000000000079818311187673949484543", "15614791748143742331938416518000065738927781975727", "77375216529553536400000000000011819726654974238424", "96558255000000000000008478135881584672398200000000", "00000000000000000000000009811787576563647374000000", "00000000000000000000000000000000000000000000000000", "00189477120000000000000000000000000000000044541417", "43984486168497259993193984674185626125478716900000", "00000000000000000000000000000000000000000000000027", "99873893881918363816248294794871592900000000192922", "10000000000000000000000000000000000000000000000065", "16244596617291000000000097585135385615972915177275", "32359197916000000000000000000000000000000892100000", "00000000000000000000000000000000000833100000000000", "00000000000000000000000000008974682964572619932298", "73316233865489539264100000000000000000000000000065", "58157368495187767653536263392750000000000000000000", "00000152529497700000000000000000000000000000262845", "36283323876561527189611933499800000000000000000000", "00000000717111694934417564000000000000000000000000", "00000000000000000000000006814968357754672574760000", "00000000000000000000000000000000000000000228746427", "84337955899840000000000466700000000000000000000000", "00000000000000000000000097166416498128421253832900", "00000000000000000000000000000000000000000000000014", "78575313455766191722787297792352583182314893385000", "00000000000000000000000000000000000597500000000000", "00000000000000000000000000000000000000075589118578", "24397866311612728181982381386661450000000000000000", "00000000000000000000000000000000000812416731723785", "79255944740000000000000855597816659522452475168171", "88891665388676329346000000000000097915346483921215", "42162695391523124386735116770000000000000000000000", "00000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 239373305;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> digits = {"53835562277844350000000000000000000000000000000000", "00000000000000000000000000000000000000000000004965", "23923315719562134876515667761516970073378686929188", "45463751277519128697197413567685153614571335836288", "85128592631645556641614473000000000000854483775124", "78696191913118517929379278499853628468182386351272", "58374399496732440000000000000000000000000000000000", "76137237417568118559332124457735595468324992541712", "96775645218492352873310000000000000000000000000000", "00000000000000000000000000000000000000082182331247", "58673379965449456548413731714783618974787156884884", "53237535835191543881558620000000129776548339688276", "53824821794464634529000000000000000000000000000000", "00000000000000000000000000000096617671547228214965", "61936817773111547645651691621911864100000000000000", "00000000000000000000000000077937156124665498651425", "69932941996700000000000000000000000000000000000000", "00000000000000000000000000000000000000066324227649", "83544845751636891151290000000000000000000000000000", "00000000000000000000049626963586171430000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000098396826944233783955232849316", "29182487686923354351876964912826442185437113000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000459167816495286519", "24769412965784134557518983798359537825464199327898", "96791212752191448937500000000000000000000000000000", "00000000008391479214347322937544413797361823525519", "73489870000000000000000000000000000000000000000000", "00000000000000000000000000000084864295862212814853", "48644823635217615943318177674219169925258297579581", "33623000000000000000000000000000000000000000000000", "00000525000000000000000000000000000000000000000000", "00000000000000000000087137622231759141000000000000", "00000000000000000000000000000000000000000000021212", "48982755574243757878973225486515763784251385783372", "51637995753532300000000000000000009538657421738668", "83377579338659338694774655612674626562923732718449", "67316736725294845913397920000000000000000000000000", "00000000000000000000000000000000083764111688856642", "25336567884165944693253866597726954961200000000037", "41555278721341765154858778323262844770000000000000", "00000000000000000000000536719687625326818293551367", "21859123887923271442685667687558386842313790000000", "00000000004226165537516224266271193160000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000177195346942143881814891113849222", "55869339329183179137432632241823264299723196369219", "56000000000000000000000000000000000000000000000000", "0000000664675194196315949283581687134654"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 885639029;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> digits = {"15668282477415000000000000000000000000004977281681", "26172250008735599726742200000085154335987436768890", "87500067821771817198967558600000000002113972778000", "00000000000000000000001001823215117228300019888826", "72447697651528600000000000000000000002140000000000", "00000129477485417700000000000000000000000000006973", "60000000000000000000000000014371327381719593246253", "00000000000000000008686476232132653996600000000037", "11867386939523100000000000000000009719584393528700", "00009599539384735000095789782928519464541100327685", "58929528398786718880000000000000000000000000000553", "64283564263433000000000000000000000000000041400000", "00000000000003442360000700000000000000008291385986", "74699000000000000000000000000022324878415396813741", "12667540000000000000738963145537129297281136238400", "00000000000000003190000000000000790000068456718187", "83763858728750000000000000000000007131471856934781", "46689275560000000000000000000000004662270000000000", "84000000000000000003382898847566952418000000000000", "00000000008348589692620000000000000000000000000001", "62457861464932927320000097498649940045775352000000", "00000000000538858951495889588375610000000000000000", "86275563276787514000000000000000000000000008315774", "81000000000000000000000000000478897922154587675200", "00000000000000000000098415671172511794446994929300", "00000000000000000000475391682863696527700000000007", "98721613488691215600000000000000959900000000000000", "00711183446716849441866680000945435248699000000000", "00065391773923826781796178000000000000000000000159", "18735923741263859100000000000000000000000000006673", "88579752830000000000000000000009234964000000000000", "00000003222199759925447000000000000000004200000000", "00000000000000000000474400000000000000000000009467", "80000000000000000000000000059748134669587172300000", "00000000000000491427676314954534897527000000000000", "00000000842264269160000000000000346761485120000000", "00000000000000000000633432546146428471987920000087", "31935153820000000863400079668838184441247186874459", "00242561321346539755600000000000000000000365284915", "29731324512926000000000000000000000059373125323219", "23258449691000000000000000000000000000546871567580", "00000000073517321483557424527739830000000000000002", "92663568000000000000000000000068800000000000000000", "00000000000733419358900000000000000000122466272889", "79627963522800000000000000003000000000000000000578", "52695759723823998000000562167159661593500000000000", "00006647824639573515270000000000000000000257827493", "21434490000000022368955667665861875287830000000000", "00000000000005390000000000088143445626396772517423", "6000000000000000000002867341933757554353371"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 891539455;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> digits = {"98455604000000000007386658800074150000000000000179", "35791621416000000529931357839000000000019941284497", "00000000086979000000000000665373971180000000005613", "89323900000000000000480000000008960976351875345200", "00000000451000086928920000000000027730000000000006", "00000000000005288262000000000077003910000000000000", "01333838220000000000091349948900000218496677453880", "00000000009989800758739400000000000086393178953600", "00000000000961723000966532751529800000655586710073", "00000000000947756690000000000000967000000000000073", "53624798676000003533457100069912274683000000000042", "64000000001795644319990000000000000099416246880000", "00005197936167007698968896799000000000049516500000", "55135825656000000000454747724600000000000000684721", "80000000000005174119170000018518210007185602855921", "18381160000337666100000000000000421815686700400000", "94400005000000000000082714239451160000000000378000", "00000000075516965290000000000000158634168220000000", "00000800000000004008890000035935439627800000000067", "77530000000000000056940000000229593314711000000000", "84000000642340063074949003643125756140004836615786", "68530000001989311850000000000001641155615000062977", "22000000092922996300000000000000492380000000000069", "66880004300000000000539557348140000000004429767597", "48100000000000000142640000000000200000000000779568", "71480000000000015263228579466000000000716647620010", "09934125542492000784757400000000000000427176869679", "00000000000005428642652000097212954500000466547861", "39000000042896528368168000000004891547699600000000", "00014617187868900005897226110000000000083800000000", "00575642000018445006000000004384517700000000000844", "63479217590000000007279357005323312005434197693600", "00000000019956297789614061607767712614500000214346", "22543190000000000002579617885420005662566001322349", "71691680399638960003342168460000058118422600000000", "00043100238623245981400000000004367197436000002943", "97250087000000000005300000466000000000016991989130", "00004373000000527762989798900000231000000000000003", "37883294495000000000680000000378586611358300009286", "89000008315283000000000000002000000046476845873000", "00949620000067873685000000000000009986123391790637", "83160680000000264885700000000583000017360000009466", "98936520742970046321671920000000000003336549958481", "00009898958327970002622642100049662248715631000000", "00000007489540000000023583618009777913635100000000", "01232872860000000000000839218931100001226332882000", "00007994655979800033923595523000511921091141560000", "76782200000256293600000008762282110000000000000020", "00000000000573594713133300000000079800000000000300", "000978275261490816921630000050000064594593418"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 592307431;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> digits = {"12759791319961791813936737774666429715176394863257", "28375344678749668379000000000000000000000000000000", "00000000000000000000000000000000000000000068956932", "95637754152933389196672729647461654341839147541741", "15635796811370000000000000000000000000000000000000", "00000495816692432249878334389471399776422962184887", "35000000000000000000000000000000008618273667319213", "81911978524267758246131967446245397465248162400000", "00000000000000000000000000000000000000000000000000", "00873400000000000000000000000000000000000000000027", "91497951646139358964282407683363728426700000000000", "00000000000000000000000000000000000000000000000000", "00000000016584584003214833218546000000000000000000", "00059248575214231885184322512419225178594423932526", "91931522236637440000000000000000000000000000000000", "00001165483138864957277769823173819937370000000000", "00000000000000000000000000062176866416162882452758", "73539000009661574138667352785942547118971128934600", "00000000000000000000005889979277315774326821987616", "45841992420000000000000000000000000000000000000000", "00098514747438600000000000000000000000000000000000", "00000000000000000000376151989185419675860000000000", "00000000000000000000000000000000000000000000000000", "00713713586959886292752366991972500000001661589479", "28424791522174432261986756912313693467410000000000", "00000000000000000000000000000000000072760000000000", "00000000000000000000000000000000000000000000000000", "00000000017624813166568458578986658823253846574797", "84263581239432883736824418986567000000000000000000", "00000009955971257599641538258575749221136568281583", "78000000000000000000000000000000000000000000000000", "00000050005612934547829400037994744991592745999416", "37559119595289887258815000000000000000004311799498", "87716322561694881723567735982579453765795991125436", "00000000000000000000000000000000000000000000000000", "00000000000000000085375487439451339186397869795625", "26799000000000000000000000000000000000000000043245", "92000000000000000000000000000000000000000000000000", "00000000000007116466487912865355494375800000000000", "00000000000008697335792757547141523671687234683944", "23139263217252127537100038858300000000000000000000", "00000000000000024568367349995524119179645973861716", "84400000000000000067345591528943413456549278600000", "00000000000000000000000000000000000000000365000000", "00000000065727422386767532569933342882192466212887", "71000000000000000000000000000000000000000000000000", "00000000000000000000000004257115851191964472388435", "67963138267389532234738183611425000000000000000000", "00007318311194926131923113714200000000000000000000", "00000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 359622249;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> digits = {"19738968489746786940000000000000000002173439898682", "93421955200000001526142455120044834922235281526185", "00000000000000000000000000000000000243782625233352", "00000000136658000000426813379359915246339573348445", "59220000000000000000000000000000000080000000000000", "00000000087941897136542465951918347669872000000000", "00000000000000000091400000000000000000000000000345", "59314398891319257599867865889539000000007812898668", "65894817864168000000000000000000000000000000000001", "61499944418811679000000005639519513008727824811824", "63661300000711695441000008900000000000000000000000", "92223578898661272497678261635000000000000000000007", "69527136594845149000000000000000000000000000000672", "19823789958778865579479445889971000000000000000053", "68727497192200000000000000000000000000000000479515", "80000000052886991945577548684632851970000000000000", "00000196235968669592672886313813247232162900000000", "00011000000000000045184245000000000000000000000000", "00000000000446000000000000000000000000000000000094", "83900400004815513583692132617775832969600000000769", "34958719621825900000009000001000000000000000000005", "42825957294159191574784652026114766285555171741000", "00000000000000000000000000000000007814978829156671", "45867851684877275270000000000054338735892264139242", "73733698929780000000000000000000000000000009611290", "00000000000000000580000000000000460000000000004959", "30000000000000000000000000000000747141429853437114", "66000000000000003184497987593921459129574500000087", "86646255884958874168675139176950000000000000000000", "00000000000000025646692247715734421293191823436600", "00000000000000000000000000000021837867696781267869", "93852172428640000000000000000000000000000000000051", "00000000000891598100000000000000000000000000000000", "00925929293922481820000000000000000047997882381781", "81938991581437576000000000000000000000000000000000", "00006571375119826242695129577547000003380000000000", "00000000000000000000001836371433598734335300000000", "00000000003865245115736186925445000000000000000000", "00000000000000039918892272781897000000000004654511", "28256586588781321246152877000000000000000000000000", "00002728655528458458500000000000000047847688714700", "00000898599867894700000000000000000000000034485983", "15863235869458600000000000000000000000000039133483", "91898654414236817947564266000000000003364764463728", "75828698214865330000000008793800000000000000000000", "00000386723177421929912392426978444573650000000000", "97834729725916139547433573593294224100000000000000", "00000000000000000119282988444544963512149000000000", "00000000000000000000000007452134323561945680000000", "0000000000000000053516714455156954951569569282422"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 648139914;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> digits = {"59593822344191558200000081515400812938237262383809", "66949796569000000009990000000000000074880000000000", "00395657000004313000197395226928457500000000000000", "00000052634251316696196100000094689463512196843320", "00000000000000000762264424000000000000000079412500", "00000000001545481500000000845789957878867612600000", "00000488621000000000065000000000000000000007185319", "58500000000000003126819200000000000056724776643943", "23400000000040000000000003622879677129956496000327", "43955321783628620000000000000064587824687000000477", "54611500000074177284000000023244100000000000005997", "59369000055600000000000000684136223428500000008667", "39563393358992880378696824000000000067269395216845", "42000000000000000363634799273000000000000000139100", "00000000079517355140000000000000004647155549877997", "17035649542000000000000000000051246289745836560000", "00873391000088523440000002369255281211176666007242", "12989493000000000000075346900000000000038435893784", "69372524000000084171134871790000000008048000070000", "00000778292425757473814000000000688169558948163531", "00000000000000000000775259825133700000000000000000", "03792568726814938150000000231787318110000000027187", "00013649836855471531200049877700000005934164800000", "00000000000000413557600000000385415400000000000000", "00627461657798400000000000000009851369200081428842", "87174296973500000000000000018535667458669278500000", "00009320000000000000062273444118359659000004461800", "00000900000000000000899132800000000051580061254400", "00000000000939231485725167520180000000000000000000", "97982500000000000000027883284751497969890000000000", "00000012187467281236824000002916924486500000000018", "64852900000000000000000006499518764400000000000088", "61686384700000000000000000007621510000032713617153", "39936312000000000000007588545588540000000006325923", "60034597691776229180000000000000000000024535975629", "81446271700000775241558657911910034180000000000000", "00004269198817600000000000000063694000185291157896", "10000001832140000006539942552241756398400000000001", "69313478259200000000000584692235281778548000000000", "00000043000000000000042432899363921930000000000000", "00000145315411582737491900000000003354950000000000", "65000000000000000007518411900000005637718817170000", "00000000000000211514577828429423000000000000006381", "11636126795399400000000000000000083418537462990753", "22537536527976000000000000000094897463429772491760", "00000000000005363697987481362343700002966898933854", "73410000000000000000000858000000000000658111519345", "00081933384448000003660000000000000000006174565566", "70000000000133300000000000332200000000000669274210", "0000000003268883874643182000000000000000569523852"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 259808713;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> digits = {"44692524667180000000000000000000000028800000000000", "00000000192288139961342385917285847277724539896000", "00000000000000008210000000000000000000000000000000", "00000000000000000083949461627000000000006356725446", "11343955325146888979600000000000000000000000000000", "00000069211191766596653554346912355865513888718990", "00000000000000000839544177399449864335216754794756", "34997953535000000000000000000000000006472116424252", "75115342149254223647524000000000000000000000000000", "00000000000081100000212428897846927535946888797314", "98887000000000000000001662898948647853152492544448", "55998279000000000000000000003899711396585571365318", "51562136845181226234638979770000000000000000000000", "00000000000000006181566451487400000000000000000000", "22581645526951700000000000000000000000000009876700", "00000000000000000000000000000089298928783947433252", "49361334593314216321700000000000000000000470000000", "00000000000000000000000000061742373262347592321264", "63121600000000000000009453421423978666863216691817", "13787725116989988500000000000000000000000000000000", "00062493233268438421128758387000000000000000000000", "00000000000000000000000000875384368594494654500000", "00000000000000854361363719000000000000000000518826", "25471994988732819225915155565934418585400000114486", "18163167954755296316743695122726225574926310000000", "00000000000000000008814378972982173900000000000000", "00000000000000000000000000000000037727732314177885", "67172843292567827855691635400000000088911179900000", "00000000000000000000000000000000000000000863165738", "62913489816678638200000000000000000000000416914938", "55764547613634323726433000000000000000000000000000", "00000000082989559839132711724934787641597919464954", "41614000098388812185899618226958853943300000000000", "00000000000000000000000000385352168264796268491371", "35427348453575112000000000000000000000000015267451", "17619851395749374634462647854789720000000000000000", "00000000000000000000792857361786579833542290000000", "00000000000000818000000000000000011687113143258834", "90000000000000000000000000000000000000000000571898", "80007224263183926168644635293288814387685566156396", "44000000000000000000000000000000000000000005749566", "38359646636997541327519476000000000000000000000000", "00000000000000000027896349661295450000000000000000", "00005399273515117385385378747557369435983934154000", "00000000015876593915623863583737467847323295662188", "26400000053351249251300000000000000000000000000000", "00000000000000000000873756263855934812466797425585", "15728859066672114366008185734849267466649800000000", "00000000000000000000000004634757247172693979732919", "96193962478774000000000000000000000000000087165844"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 917604077;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> digits = {"88149900004272747629212288250000000004143244448247", "00051419927667793300000077559319828923114000000007", "20000000000000000046258590000024379774834594180000", "37896437655715131500000000000006778823371336911100", "00000425380000000000491991597658000004733552804275", "79924236429000000000005574849738687309224756228946", "00000000000443770000000000014359124967554200005710", "00000888742884419465800009877681628428000000000000", "19730000000000008395499856686643760000000000084562", "10000000000000000005868700000000000000002855615149", "97000004329935625968840000001511990000000000000004", "39489100000000000006244980000741557000935000000000", "00088225991735181380000007000000331224673000000382", "44714838656457800000000000937200000000000000092869", "29363968770000000000000000295886389710000000000000", "06625986885188500000000000000534685000000008178388", "70000000000074785726548122000000089635100000000000", "00053856937824310054447532600346000000000000000044", "65137848853323000000000000000000428727714640000000", "04869428646185800000000006000000000946188176000000", "00000000249519000000006449794241306712541732100000", "00058269000000000000000000656000000000000318195938", "65427820000000357178140000092239500000096768141300", "00000000024773423657581697400000000001539686443000", "00520000000003521255366348300000000059700000000000", "00000023254613000000000000093459358400000000000084", "53447146877935170000006263287467000000000876850000", "00000000030000000000000000050000000000000000931137", "65955200089245000000000018462984731645916700000000", "11756646527714449000000000000008241681255170000000", "00005599274112372738900006132922367886000000900000", "00128612000300000000000000007691755394000000000000", "00000238200000000000000000080000000769272000122881", "86133300000000000000000942593747817874795000001353", "15800000000000000009112852559937900000000000325957", "57213000000000000000569200000000825733131165329680", "00000000774495561320000051343294878364000000000000", "09723565810000002282830000000000000003577616000000", "00000924777459589004982182800000008933554977826451", "41000000000000000004560255000000000003392963288262", "91390000000000000000100000000000000004874856234000", "00000001998697319237830000000000000078399716725762", "80000000096275529944497000050000000000000000960000", "00000000000000866585465500000000000800000000000081", "94934126499400038686612534489325400000000000000000", "04762522952229470000000000000064783192458612066824", "32185124352600005585442100000000000000342452389922", "47791000000000028657957263000033493600009217120000", "00003313758100000000030000000000089134800000000000", "0000900000000000000000770000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 42966185;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> digits = {"43113651634964132187483956739767432780000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000852457844794837578186578984234967", "38447594110000000000000000000000000000000000000027", "65631193532763574236281211316742954963124188992296", "67689899634468775954468171600001741569761865759967", "33113833238989185252954729933514457476913930000000", "00000000000000000000000000000000000000000000000000", "24737628263469948700000000000000000000000000000000", "00000000452564544777178117595684787894566842856968", "97746965822944591484961364000000000000000000000000", "00000000000000000000000000000000002232982484854593", "93000000000000000000000004452166142255749000000978", "87269381941468414119443188000000000076953493252889", "76356852227817794656451456734491545000000000000000", "00000000000000000000000000000000000000000000000000", "00000000064228444477849258646911753671573556792834", "34645257264542791565000000000000000000000000000000", "00000000000000000000000000000000000000000001888953", "86594551219797355945233379515323780000000000000000", "00000000025000000000000000000000000000000000000000", "00000000000000000000000563932218724735145783000000", "00000073968431334716231679918323325821954156189162", "11449167132371167752497827500000000000000000000000", "00000000000000000000000086193759724351288381785938", "24425525383541788297619897417000000000000000000000", "00000000000000000000000000000000000000082200000000", "00000000000000000000000000000000000000000000000000", "00000000000000000346766338982266343254631917741139", "79234251121627349434646931497673336827879851000000", "00000000000000000000000000000000000000000000000000", "00000003934128327168422241122387557662613991583251", "18539646216692734600000000000083311714194472482172", "74883573838200000000000000000000000000000000000000", "00000000000000000000000000000000000006514924413983", "81937126597513984778753329193423548723115226831500", "00000000000000000000000000000000000000000000000000", "00000248274198928481969946000000000000000000063931", "83594369322718276614321818165835664528270000000000", "00000000000000000000000000000000000071313689677169", "94217581715286452829996394758982688542700000000000", "00000000000000000000000000000000000000000000000000", "00000000000008621846865236362651631529551748687568", "89673683000000000000000000000000000000000000000000", "00057439978576419587846935791716196121838549825225", "95644257569491000000000000000000000000000000000000", "00000000000001425986633684611154985000000000000000", "00000000000000000000000000000000000002457968767918", "41336284952514472173100000000000000000000000000000", "0000000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 965789458;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> digits = {"78445516000000000000000000000000000000000000000022", "68144144889134652946239749418381000000000000000000", "00569126937686859453100000686986176466954419583816", "95944859215327454519332241898790468134557668929864", "72218383700000000000000000000000000000000000000000", "00000000000000993949831765711336596167386994673141", "37800000000000000000000000000000000000000000000000", "00000000593278426941762973900000000000000000000000", "00000000000000000000013341152467185648176991663253", "21220000000000000000000000000000000000000000000000", "25218149669893386300000000000000000000000000000000", "00000000792211727277652422975442392700000000000000", "00000000000000881954263499649711776783625158355819", "29274596157260000000000000000000000000000239331541", "21469134845428418681125294677893926666958274100000", "00000000000000000000000787374119141363984525499140", "00000000000000000000000000000000000000000000013114", "21197237580000000000000000000000000000000000000000", "00000078421726472981734329274535499544832863319246", "16721000000700000000000000000000000000000000000000", "00000002313164135852598946313355979892366483436715", "00000000000000000000000000000000000000095699387991", "44996682680000000000838576822522563475627788841481", "53628181292537700000000000000000000000000000000000", "00000000000000229274916258568909632232462798286311", "12773431589635650000000000000000000000000000000000", "00000000008433132914457135644984343588954747400000", "00000000000000000009979261765641858654794512243458", "68115788990000000000000000000000000000000000000579", "16744514513726554719476983474997000000000000000000", "00000000000000000000000000000000000261816238271812", "18784712364995266500000162225543462791237641920000", "29998000000000000000000000000000001247945231734345", "33517636400000000000000427138354736959284229195481", "44389500000000000002716891315175648247883492489348", "00000000006188219449788465841848124971646252437852", "78000000000000000000000000000000000000000000000646", "15344261197817000000000000000000000000096657749256", "95523922263756616147166543499630000000000000000000", "00000000000000000000000000862766832559831337784243", "89876428947686154499100000000000000000000000000008", "95257121218297946876321393222438538466124411569700", "00000000000000000007698445533744700000000000000000", "00000000000094663566377437285767826984348719000000", "00000000000000000000000000000000000006585691515210", "00000000053443649290000000000000000008832672537744", "33532928719915887494000000000000000000000000000000", "00000000000000003462912631231822476517325622626900", "00000000000000623656582678498289335411000000000000", "0000000000000000005862"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 293319782;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> digits = {"14397984006100079300851141000023329000400000002445", "76009371793905236168600000000516568500000000630744", "23800000400000035640052041220000000117431100000000", "25989600003900001141239900003372800004431700000000", "40070000004782786023075430000055638300009714002600", "00095888073380000040000002405620000594168770006437", "69940597220079000000097397400000000453790097600000", "47900000002613762500000000204489400486690000007860", "00000049200977372000000317000000284350006673000023", "72663400000000873634200068300000300637560000008120", "00000672120200000000744004742489800005000000023934", "07662000000155859790069000020000078500000005228000", "03735000076600977210000000935639280000000900000727", "37200000092716950000086243972000005683438300000424", "00001345500695928110287201410000747918400000004918", "14560000045381100000747891300000567869250534200000", "00680861680000093311618040000083506378200003864000", "00000741633730000089200287441000000051930923626890", "31000004470000000094690026994000000864873100000361", "24874000400000000541700000000174828140932372800787", "30000000421750000000092873200059978587083433867000", "40008700000028544000085934396088897000900000003261", "40000040000000021123200000000500000004500844200002", "31370000064250000096883720000001007372100074141880", "00053087444230000223241710000001830061411913000886", "23605218610000000400000000363892000000009520000095", "21700700000000216200036887694000000369297000008800", "00007524639000000036613100000097282000008329297000", "00067850000007845959800000051169620000046639000000", "04829915000035944000000003000000039340000008292000", "15330800000043722000028532200524916600005129800000", "05009700000941000001515720000238373900000037219510", "00002000998579000000097617006000000947739000000914", "30000092000067741708358900000007119686400065277220", "00000772660000086643456000283386760000000525000279", "54880083219130000014895944000000080000031793545000", "00053000951195000000093000005716750663390000006155", "50007980000000644540000005733493000000292480096270", "00000008358000000766707274150000006000000842420000", "00084123810525456000031790000085382300000037250000", "00620000000099434015510008341600033538180000091340", "61000000054600770000000022662909730000000087653347", "00310000092897130000000378968000872900130784610000", "53744310000009547400000237255400042410693000400000", "00268188940023429452000000600008452200004697660000", "57400000798126430000000574935306984479000000028787", "20000000468571850000007530016439900000000880000000", "08610008283840000994000007239189900087000000001755", "97870000000800000002441748500000003179156900000009", "8000969267400000817638200002720000000061549"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 805920690;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> digits = {"85257238782492400007436467866548840000000000000000", "00003000000371792444323900000000009282744144536646", "51191995240000000000000000000000008885158169332000", "00000008567574000004929500000000784226875559198835", "53526280399931273834622517238517239000000000000000", "00065627972766000000983236283612561357347526400000", "00000000000285900000000000000038478735883119600000", "00000000000000003363354761525520000000000000000000", "05375226784714017139795261775915210000000000000000", "00017129472354221964484774545000000000517685837615", "13417256571583000000000000000000000738561599359721", "97420000000006784559468132576963000000000000000085", "57195693647000000000000083663798432515000000094680", "00000000000000000000043639782866921386191769950000", "00000000000000035493816919757221100000000000004391", "65729460000000000853956841676464500000000000007673", "97968787422474472000000000882683377397998136876741", "33600000000000000325931000000000000000000000000513", "36314949743000000000000000000035739250000000000000", "00000000000000612377363941800000000000656964000000", "00000000000087000000000000000000000092565918279000", "00000000000000000000000500000000000012891759000005", "97968897249872951112300000000000000895769578261538", "51270000000000000063135381884000000005000000000000", "00000000000000466732500237395154719714000000000049", "54313557726756381769665450000003677851443121338587", "02270000000000000000000000000081476660000000000000", "05352565845400000000000000000083284496975695199350", "00000004741923851168730000000000000000000000000036", "67981275465737274000000000000000000000000159432874", "85574973423533118000000000000000000259736987196196", "00000002989910000000000000000000000000003951146629", "77700000000000000000855267615124841320000000000000", "00000351687878495563747946930000000000424500000000", "00000000000000004864248433581831529379419000000000", "00000000000008414294283850000000000000000009953266", "24693661770000000000060000000000897462153194694881", "95928100000000000000000000000086492959737616299897", "62628900000000000000000000000216578646450000000000", "00138896316744929831830000000000000000000003895355", "78475142566849682340000000004673583559210000000000", "00000000000000314487748545928994874925480000000000", "00000000362900059600009984928426642782569933000000", "67516678145000000000000000094751621587484216445800", "42792583961818464000000000000000000000007922833871", "26387674772938000000000000000000000000324781384158", "29224126600000000000000000006954352512979298000000", "00000000000113827294258100000000000000000000005441", "31486280000000000076766467539736100567296773287616", "8722579500000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 613719281;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> digits = {"33300000000000000000000000000741347966468749654666", "22775328741221778432362256800000000000000000001638", "21168427817139571143438912283483943292374576396817", "76571176421492000000000000000000000000000000000000", "00000000000000000000000000008553489181391174749541", "19123237832143688825512889443314618976551136500000", "00000000000000000000064418286912131839896177918918", "85817750000000000000000000000000000000000748119162", "12871625644153297000000000000000000000000000000000", "00068498144300000000000000000000000000000000000000", "00000005718491556347784879333621166295622239516165", "62398663422241347378261584231600000000000000000000", "00000000000000000000000000002933672475492924279263", "48373289743668137554552782893256588895664696292924", "20000000000000000000000000000000000000000000000000", "00000079264862538299749583662434629895331346657168", "11313166177653843000000000000000000000000000000000", "00000000000000000000000000000000000000009569626989", "83716332153956822385462758314462621576867289000000", "00000000000000000000000004312578861775417131836896", "84558616690000000000000000000000000000000022418152", "18858725472581318660000000000000000000000000000000", "03144873271788536883155636649465399172563968271987", "98969183786653900000000000000000000000000000000008", "46294288252743538264272789981276412831368500000059", "65385638625371893700001669569766739592925416871211", "71758975894723946837669997000000000000000000000000", "00000000000000000000005216688172557693469897838832", "42774719843692453287965347164795733723333544600976", "24632682134418146621852184194191726982175813132480", "00053342600000000000000000000000000000000000000000", "02535498831659943682836357572147824677774561929787", "54475894554856938815000000000000000000001248385537", "42200000000000000247956296677476325158384872883300", "00000000004156177249938514668412345500000000000005", "66322493282868844166524768627993489813400000000000", "00000000000000000000000000000000024365827825841391", "58668199000000000000000000000000000000000000000000", "00000000000009149295745567467300000000000000000000", "00000000000000000000000000000098000000000000000000", "00000000000000000000000000000000000000000000000000", "00090000000000000000000000000000000000000000000000", "00000000000000000004485329837488691844546281525429", "27575000000000000000000000000000000000000000000000", "00000000000000000000047341247258497227574841839483", "49235947299881982998510000000000000000000000000000", "00000222294335674233553743829700000000000000000000", "73529817796997323598938732766777971885941628869294", "97186688455286600000000000042228554339821328952456", "721831539581365411876364"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 930686030;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> digits = {"52547675617159878139542700000000000000000000000000", "00000000000004317398988227889467500000000000000255", "15292546916769126513100000000000000000000214881498", "86959453838213288657682356354819117718000000000000", "00000000000001848394365395836873700000000000000000", "00000000000000004854813177154672349271000000000722", "93275187998457933903294711622334535700000000000000", "00000000000000000000018472741239223162866234894242", "35678237993272880000651676661817212446624856832300", "00000000000000000085581569800000000000000000000000", "21881857248449583120000000003357133788000000000000", "00000000000000000376610000000000000000000000000000", "93261786433943971829822483936849300000000000000000", "00000000000542184856153771397728681457600000000000", "00000000000054694381717114727007131851385153327154", "75591154465383357985978400000000000000000000000000", "00000749582963672625735733862134529234124500000000", "00000000000000000000000000000000000859267200000891", "37379839827394291178471584277191175926867000000000", "00065135951675437688991727558100000009988699233661", "53917178323969624411500000000000006819937994811678", "40024482363536388932454295951416167211164300000000", "00000000000000000000000000000001159785169900000000", "00000000000000000000000000000000000298719000000000", "00000114225135461952928633568521800000000000000000", "00000000000000000000000005244295175000000000000000", "00000000000000000000000082821322469471124454531700", "00000000000000000062842257158857933168400000000000", "00000000000000000000000000000001276792277217318974", "58151295636937611565656530000000000349319992766481", "67327552875287496158223900000000000003984216274925", "75375363174933580000000000000000000071975324754521", "31996536765763122577824368470000000000000000000000", "00000000000000000036731217521879441868427373267491", "13649665149000000000000000000000000000000000000000", "00000000851286992122823969269227836982676636900000", "00000000000000000000000082362675696787519000000000", "00000000000000000000019489688196337736372840000000", "05787412000002358496774255810000000000000000000000", "00000000000000000000413248955664992874688185961000", "00000000000000000000056577162241362794855829822532", "14512378612585588500000000000000000000000665567746", "68517377365000000000000000000000000000000000000000", "00000069271934856239138324567787700000000000000000", "00000000000000000000000000042521317184451966637151", "82199132273600000000000000000000000000000000000000", "00000000631368867919999571624177292872133966626640", "00000000000000003798261726933524334683983395124277", "22923772494000000000000000000000000000000000004678", "96175996399946854271644369862"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 551111487;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> digits = {"47000000000000000000000000000000000000000000000000", "00000159361142600000000000000000000000000000000000", "00000000000000000000000000000008284994227764851183", "17351413349742417541331127637145782386942894222958", "77699296712310000000000000000000000000000000000000", "00000000000000000000000000000000000000000000002782", "63000000000000000000000000000000000000000000048985", "24455292371839223672132552686493822143515932745598", "43656455416119974000000000000000000000000000000000", "00000000000000000000000000000000000000000963144646", "65579539193513876512545457222000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000084794164861163392311965446", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000007617", "98243000000000000000000000056856773365588981816643", "31475877555178838535100082535743169411237162488478", "79849845399170000000000000000000000000000000000000", "00000000000009351877374893688491529552728251829343", "75132871362756715472178689516493666399845900000000", "00000000000000000000000018472532722936243628682169", "19619132688215695756416381479582664723872161826191", "80000000000000000000000000000000000000000000000000", "00000000000000000000000000008893341336889128871776", "14672242984821743699224418161569246383313823339656", "47566998837779516760000000000000000087291274421721", "74212947753700000006195746732939400000000000000005", "53397896333936768255855138386369342989113883971763", "50000000000654654354770000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000077352786973441000241718939958000000", "00834833484727136251329233443624948000000086613386", "87631168429352353468677132584637665211722438878438", "82773655487100000000000000000000000000000000000484", "79253952161287318683263529714000000000000000000000", "00000073211991723459489829144935322454447453864756", "32556313242000000000000000000000000000000000000000", "00000000000000000000000000000000000005647265313983", "13413375537115662844214527998238987925172445243771", "32717166858368966772526366113000000000000000000000", "00000000000000081610000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000034568512476594679566368868854839457645275999", "55388368237686899953151458874552455565287358000000", "00000000000000000000000000000000000000000000000000", "00000000000000988257358129783181792681988514963667", "42144328918612595155858332000000000087246156973549", "30000000000000000000000000000000000000000000000000", "000000000000000000000000000000008"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 534431473;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> digits = {"82787877742672187152225005543776613972110000000000", "00000000000000000046577257144827700076446956665160", "00666274464163918814338796200000000000003354374939", "96000000000000000000000000097741876596340000009613", "46337873782519959940000000000000000006876531987643", "34769186512749200052534419714328524586619702852000", "00000000000000000258981656354783000000000000000000", "00027115192279994538255263833882000000001324615562", "42611357290000000000000000000000006228260000000000", "00000000000000000014545393130000000000000006886622", "26437471957681551391000000000000000000000000018794", "76357000000000007891397864264762894776890000000000", "00000000007126732347965275579182657267200000000000", "00000000333186934740000000000000000000000006748960", "00000000000008800000000000000000000047119232000000", "00000000880000000009189479982987569271641221725300", "00000000000000000000032467985345944341124258422200", "00000000000000000000000000031359933811682384449491", "32840000000000000000000000346812945224215300000000", "00000000000000000000757316169162154738428798000000", "00000000004761689958976394912700000000000086826658", "95793661797785270000000000000000000000075322642958", "43898854319541552700000000000367935367574377421996", "89634200000000000000000002457274962378180000000000", "00000000000000513695789119624920000000000008445660", "00000000000352589382768470000000000000000000085178", "25719684324925420000000000000000000000000348523961", "30000000000000000000002823364321512131220000000000", "00000000000723610000000000000004233354362388300000", "00000036214000000000000000000000000000089000000000", "00000000000000000353978209123615119658220000000000", "00000000003981412694319560002313763522993228600000", "00000000005384934325899737174235839000000000000000", "00000000000779886538561814583153100000000000000000", "00000000099416698923347000000000000000000000000000", "50000000638185426152632426938140000000000956791619", "35621000000094945558168000000000000000000000000000", "13296000000000000000007482229171695597160000000000", "00000110000000000000000000082918229719835890000000", "00000000000000061332722218915421521189700000000000", "00000047431697311266340000000812169859300000314641", "28719616120000000000000293531827245890000000000000", "00000000000894346999143197961842682900000000000000", "00000000000982376316425338000000000000000000000007", "24863719311246838460000000000000000000000000009559", "65845162000712364738815554250000000008736328227169", "99800000000004527118770000000000872586975000000000", "02119661834719435226229000000078739785725228646688", "00000000000000600000000000957343300000000000008977", "73836584436343988642000000000000000000000000006779"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 416714460;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> digits = {"14959287566774495162287294471243464685865788432891", "79529372851540000000000000000000000037859989478117", "34326472589512477831182939277839211264375616219853", "37916984712484121356100000000004313544535514434967", "44936199419197845287357256794165446737886497156928", "73788511264278961528380000000000000000000000000000", "00000000048473627971971437474733688000000000000000", "00000000000000000000000000000049988211578617945422", "71441344332299825516900000000000000000000000000000", "00000000000000000000000000000000000000628668614458", "55523919164724238622837979899643343342879945873150", "00000862998985492117533284322499765714123613746963", "12195318453336328422953521152800000000000000000000", "00000000000000000000000000000003979255278987176333", "67957898437647633276662787189241967838134873488579", "86242543653600000000000000000000000000000000000000", "00000000000000000000000000000000852777865341335616", "14945872638316618315896335431135779480000000000000", "00000000024462121338731331253537000000000000000000", "00000000000000000000000000000000000000000000000000", "00000024117638824772654872853373374177513254763656", "65677353451345638278157125755684637249657672335860", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000065228", "59762839416381333323589425571252327245167875113548", "18413734898292880000000000000000092121278513541882", "48583491667166845341713214949857397658143336716676", "45304656834297135263592579266393617448899968815942", "22643825793287342864675379421895152233716328649420", "00000000000000000000000000000000000393718744466132", "77845896244773384931265362255466413282613487194177", "52418623522693643009926148371545861729828297115976", "83893449162349724329615842457928638724477951528825", "17580000000000000000000000000000000000000000000000", "00000000028872566931558216754125393251744263859812", "82958518174481449686831711800000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000094878773272421945864338472332955925582", "35763613652983849263628555487575320000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000928736612395911528956614153", "82282798355493195252935452453357777174856262429232", "92991561423547000000571963446133725878433253322664", "66599466791982152848257394412541345700000000000000", "00000000000015000000000000000000000000000000000000", "00000000000000000004199421843585112751872894376846", "64812169363363618564835379311949753558788894398699", "20003977683634749745176668429953249600000000000000", "000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 171243372;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> digits = {"32199263797271000000000000000000000066614786181389", "60000000000000000477141798724776491972510000000000", "00000000008724997999333155400000000000058756876844", "80000000000000000216329691888729761140069335278624", "10000000000007710000000049531431500000000000000000", "00000000008836748285363963726724628000000000000000", "00011222952546800000000000003671629446199200000000", "00000000000009349985716214003481243351513370149776", "86922832861411764522100000000000000035696188988248", "39456543684600000000000000045137661455448162981568", "70023153154864273274353924680000744995841910000054", "32663385362262476393210000000000000000000000000751", "54372158284838000833672172962992184717667531000000", "00000000955671327095238427284871535647068666900000", "00000004641251456441924885241640000007571584727559", "46300000071571242741832877000000992945483662262281", "73170000000000637442376380000004364240000000000000", "00000000000073289559400000000000000000000000000059", "38497372679155169197600000000000185877236133658518", "79000000000000000000000000042473433481956344777962", "00000000000000000000000272516740000000000000000000", "00684423567443188312298747000000000000000008982000", "00000000000000000000092132924188647600000000000000", "00000000775785825728376000000000000000000007249631", "33850000000000000024395769798000000000000000000000", "00318549529573954668426600000000025111681734548889", "56365825000006351922512396288377800000000001189631", "12447382520000008878647185635743900400000004182326", "93000000009418529993365000000000000033988467553177", "26000000000000000069000000000000000000324357857579", "27218980000000000000000000000114693244520021542221", "39988184300000000000000000038644327911329159158011", "82600786894864427722223676565614008458548592860000", "00000000000000000000484753427228759823300000000000", "00000000000023213008951998849319900068428729227368", "66439138033236448290000000000000886895832646800018", "73813618114684630000000000000000000000001946992778", "27255141000715700000000000006812592873129743140000", "00000000000000000126393225379835255991000000000000", "00000000000000031596999000059416674500000000000000", "00000000000226930000006562410000000000000000006885", "18163249668782917776930000000000000000007654854866", "52000000000000000000000001321312185735973058444663", "37257210000085000000000000000829943258379152587600", "00200000000000006848226379992735651948397100000000", "00000003314000007231798844866183582300000000000379", "27174635389488000000000000000000693694580000000000", "00000000000000067358832424427100000000000000003260", "00000062548591554363693361210090000000000000000000", "000067759893964919167577900000000018"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 22362371;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> digits = {"97687846460000000000000000000000009879327249700000", "00000000000001884538945186553622451000000000000086", "22414833863875016681854227989950000826373879833481", "11118000000000000000068623239267778446187638210004", "34859365692288956355700000000000000000000000001938", "15962123658279500000000000094324500000083422327900", "00000000000000000005658986184223000000000000000652", "59727973553597200000000000008000000000000000000092", "75716257610000000000000000000000928727487100000000", "00000000000000000761131757955348478387860000000000", "00000000036000000000000000000000007722598170007311", "15227656452981665200000000003845368810000000000000", "86687000000000000000000000000837971775100000000000", "00000000000006583541717199000000000000000000000000", "02600000017000000000000000064129000000000000000000", "00000098264915754794300000029861610000956636254214", "83234900000000000000000000000167956512158887128621", "40000000066399696355263856000000000263549310004180", "00000000000000000000006757413910000000000000000969", "48715471226341463000000000000000000000096714752948", "39840000000000000000000444752251000000000007584960", "00000000000000009711388484174169442475520000000000", "00000001781598000000000048597625600000000000000000", "00000000444654700000000000000773232423227233678555", "25480000000000000000000025452780000000000000075971", "62181237008500000000000000000000000593000000527724", "22588000000000000000000000000024417443815330000000", "00000073000000000015256296577922959530000000000000", "00098186773678415649296000000000625119815747473000", "00000000000000746181933534525000000000425892972485", "44839700067817183144725736600000000000000000000014", "62883427923998917000000000000000358000000000000000", "00069344954387000000000000000000000096257352441399", "45000000000000000000000000783136169682000000000000", "00000027718000000000000000000000179657423912000000", "00000057000000459000000000000001789580085975596218", "77122000000000000000000000000050000000127574662983", "80000000000000000000056939499641345262379576410000", "00000000049759512277723586400000008345779780000000", "00000600000000000000000019413994729000000009582000", "00000000000001472396653315463176544232000000000000", "00035611000074169246888520000066765000000000000000", "97691210006373919131397567000000086888586838951000", "00000000038349143000000003377894849253892231689600", "00000000226116728625916562696680000000025289893211", "16000000070000000000000008400000000000500000000000", "00811572629000000000000000000062135131527360000000", "00000000000000008424341991300000000000000000984774", "43971000000000000000000061673966869642563382132000", "00113517140000000000000091991189561463000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 117099877;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> digits = {"53556668551761263743813566649818452400000000000000", "00000000000000923552884161616417836523784000000000", "00000000000000000000986511328529620000000000000000", "00000000000000004942251619747269921470000000000000", "00024000000000000000000000000000000000000000072524", "56413861182471638618317832632000000000000000000000", "00000000000000000000000000083462993627997448400000", "00000000007599679775429194760000000000000000000000", "00000000004495000000004185666698255791744000000000", "00000000000000000000000000000000000072566784315379", "15627100000000000000000000000000000000000000000100", "00000000000000000085926657658948993894729219142999", "00000000000000000000000000000000000000000000000000", "00913643341496300000000000000000000000000000000000", "00000000000000000046951758535325135687751343647866", "33671880000000000000000000000000000000000000000000", "00317982392713278454165159500000000000000000000000", "00000000000000000000000000004887155627245464468975", "59269600000000000000000000021487377778544417259250", "00000000000000000000000000000000000000000000079112", "97931997220000000000000000000000000000000000000000", "04264372000000000000000000000000000000092257368128", "12872726472189472356655937000000000000000000092485", "16242158493292700000000000000000000000000000000000", "00000000000000002373567817348000000000000000000000", "00000000000007112287914626675500000000000000000000", "00000000000000000000000000000000014662899381781842", "68146922432852000000000000000000000000000000000000", "00000000000026547988695161839935686274711789892566", "58199819716000000000000000000000000947241396425540", "00000000000000000000000000000000492196000016857222", "82924618422878949913336325480000000000000000000000", "00000000000000000000493962918399922599323179312344", "34000000000065776239355723862763978627000000000000", "00000000000000000000000000079949962827356399154691", "17660052642854576846896627418557384335574983600000", "00000000000000000000000000000097543112922958436132", "57868275354841197965300000000000000000000000000000", "00000000000133624986434000000000000000000000000000", "00000000000000000000542453281462944823582588843775", "44439997281800000000000000000000000000000000000000", "00000245446734161479891512913224741751567200000000", "00000000000000000000000000000000000081255642655655", "00000000000555166979183322912900000000000000000000", "00000000019833623557885241372435816278416000003465", "45994464600000091233964823332137000000000000000000", "00000000000000000005418900000000000000000000000000", "00979937676616354831292626747881375676465467700000", "00000000000000000000000000000032183585118309999844", "1798384532981778591199534642464622393755"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 462580209;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> digits = {"25500000227300000091363619783675647475935579510000", "00000000067969824000000000000000000000037438750000", "00000000000000000000000003537757722268853174000000", "00000000000000000000037423389785955364300000000000", "00003471525439688539317746200000000000000000008147", "25861000000971988995144383458879363540000000000000", "15756434763594642322515787900000000000000000000000", "00000035188699800000000000000000000002142643836994", "51599840000000000006561008938143619387899100000000", "00000000000000000000950000000000007594563537618000", "00000000600000000000008118885461500000000000000000", "00000000000094464998821739536191392348500000000000", "00000696283900000000000000000003361636467843947700", "00000000000000056797464381420000007000000000000000", "00052985313475812715744770093186341000000000000000", "00000000000001619528985676498781928735600448127865", "89120000000000000000028667114793636586482240000000", "00089000000000000000000000000000047775348548281300", "00000000000000000000074650000000000000000000341736", "65613851231783592982000000000000000000007681000000", "00000000000000000009829144168655843623300063100000", "00086543725429676622651120000000000000000000000000", "00081467136000000000000000000000000000008197764889", "26284279558382700000000000000000004891356397869453", "64492000000000000000000000000000170000000000000000", "00000044571827717273367142325476000000000002586487", "00000000000000004754364184516421667140000000000000", "00424266648000000000000000000000000567326854945747", "44597656574450000000000000000427336444985000001933", "79877820005200000000000004154512851316939363144341", "21000000000000000000001617698661367000000000000000", "00129478930000000000000004311415310000000024372156", "11197277895249692200000000000000000000077961200000", "00000000000092787572615349673700000000000000888814", "89432639855393954493000000000000000000000000000781", "24685484475671316458600000000000000005193356261368", "47413500000000000000000000000362879281991725349887", "51700000000000000000000000000003239951683969487000", "00000000000000000718218000000000000000000000004748", "45688587916374995640088967255832321411840000000000", "00000000671739888397939274257871900000000000672000", "00000000008852874122844289437636660007875173697491", "42524800000000000000000035648976845739489682831595", "00000000000000000000336218847128952784119000000000", "00000000000000045332632332379377374324921000000000", "00086617573852000000000000000000000000000001385242", "22736490000000000004511983600000000076623993568986", "75394492441724000000000000000000000007547299000000", "00000000000051585268737213830000000000000000000000", "0000004235937835493769636494000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 778695452;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> digits = {"38335996670000000000000000000000000000000000000000", "61139868532454890000000000000000000000000000000000", "00000761712475181113844463700000000000000070000000", "00000000000000000000000000026953555642959483417188", "00000000000435968900000000000000000000000000000315", "66298252484500001734632967588131656543243927000000", "07466512373341133255600000000000000021183533835393", "17321130000000000000000000000000000000000000000642", "94654536325758371916583691945200000027726742148228", "43178932851966988652900000000000000000000000000000", "00009823967149122783357864446644774477338824000000", "00000000000000000000000000000000004632000000000000", "00000000000000000006846787000000000000000000000000", "00000000098311428931121894977820000000000006156711", "63355613170000000000000000000000000000000000007436", "89329836592594579242540000000000000000025831363755", "11642778678766943300000000000000000000000000860000", "00096488196734386395272381824295823000000381163791", "38000000000000000000000000074772697628796461369913", "11686833899700000000000000000000000000000894241372", "70000000003564380000000000000000000000001269774700", "00000000000000000000000000000018974758735682641417", "65568916710000000004311745940000000000000000054682", "88164637356635661566541298422170000000000000000000", "00000000033161549949531471792278415175300035644415", "46984337176325196225771987951000000000000000000000", "88928822776274951460000000000000000051650682919726", "67925129551774684247000000000000086147586660000000", "00000000000248143862851900000000000000000000000013", "57149839167534488747638310000000000000000000000000", "00000004311463312676967446554266368735487955920000", "00000000011125983854668197327147637529992269950000", "00000000000000000000000516755200000000000000000000", "00000000000094372882110000000098963445377944180000", "00000000000000000000000000055817431828398679229627", "86239800000000000000000000000000000000000000044633", "33647394433872777685367676750000000000000000000000", "00000000005782314581848492685419977291746640000000", "00000000000000000000000000000000373129947588188371", "00000000006562684513174225376829000008886139991000", "00000000007813724173355171437923693989993636200000", "00000000000000000000000000000000675282313489468600", "00000264217497664911655762666924169162878800000000", "00000000012796394195662880000000000000000000000000", "00000084593898838479324194993158194940000000000000", "00072727556414546578822268667000000000000000000000", "00097000000000000000000000622351646426286370000009", "17583799752996258337910000000000000000746118947917", "75147456292176762687964331640000000000000000000376", "000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 58851066;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> digits = {"50000007794506885620002990098212700000098655909265", "69000000820000977400000281810000943100003693550085", "60000007572200002700002000211700000048745800000071", "07228000900001530000003899480000006000006246709456", "11000005696220004099100090059007006655120000915940", "00005600000870000002170000054450000014766102062645", "70000005300000019200425004742250000009527203440000", "00658360000046700007890754600452290590000058526000", "16720000358100857780072000003679008628140000004476", "65000050165036685000066665009572320000526400097500", "00089627300000072500362310005330001700002000920000", "14194000430000008353150462000048400000054002592007", "00070000068521706833460360000664400260008800018000", "08877300000053500000080003540000579870161000000617", "00000018881000252340000099885404100004820905310000", "00875960000003000680000770527005756590004382980098", "90000940000309647007849900899208456000566000062655", "00000270005700000064290000087000012000840060300180", "00000366100075500000782407160004900013682300000997", "84600759550563700000080000521127000000540063456200", "00008952520700040000670005729870007872008716310000", "09413000000846011931300000079700046974000352800004", "53179000645000097000004080189000009000000600034312", "60000007200096000009602380000004400000132313000010", "00007942100000010000005000031577500030000057600061", "33605747250000009950001000002610871454000062937009", "99800400009000000927233000027000000419393000882000", "43585000053920000298400000435001000032200004754100", "00318546008300040529600000220030000218701153300000", "08575000000260197890000007426000543880009860007840", "00800030009913906000435077760156000981300000257000", "68000292700001610049000985800000634000400020000028", "00017162007596000034710000262530000007175600000066", "43000200000075462000800000100095080636500000339499", "04914570000799200000031921100006118100000056660000", "00858215000382328000000551591000000557000590000078", "00004215330000008620027130000162660000006164001542", "42000000758270000009159220000046700480000027110000", "37678800000050047577010000640007650076800890000683", "11008424109858000060045939300000592409868000001504", "90000470050046009830971167046997000100000877593000", "26991200000052979007724000592254000000713001400042", "37000021700006832100046000000595940000024483000070", "00177930933885000020000073268035500522005328005380", "00003065000000719800005320000004747019368503006764", "80000008420004700000039454300000589300088226000007", "62960000002000034329001223300000078259901443006800", "00172000000210150040684980000008600564000000695580", "33300483900000015286800847100322000007359250000013", "98001188000063000000220007637460094870005732630000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 777992779;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> digits = {"31339671258599128967626438212778376215148423436482", "42481619386389500000000000000000000000000000000000", "00000000000000000000872238324961287696183678641117", "37876172366200000000000003858493575384957952285973", "00000000000000000000000004336663696675411193211497", "68682251789711595771399332637969880000000000000000", "00000000000000000000000000000000000000000000003443", "22762672628122911952678976556731972557738169161000", "00000000000000000000000000000000008174180000000000", "00000000000000000000000000000000000000000000000000", "00000000000000326919676868414828779676731314459567", "41319417252619784297400000000000007134551922870000", "00000000000000068349526114477500000000000000000000", "00000000034600000000000000000000000000000000000000", "00221213165328258325363882394432222718395487296445", "73629697284639657540000000000000000000000000000000", "58218531774626755578959742143329226826557378549833", "78739372575498526392576472700000000000000000000000", "00000008431143528976100000000000000000000000000000", "00000000000000000000000000000000000000273785776645", "17844596934128382856792941877965284169939712200000", "00000000000000000000000000000000000000000000000025", "65000000000000000000000000000000000000000000000000", "00000000000000000000000000630000000000000000000007", "20000000000000000000000000139726451294586431966589", "56167365356382239935499000000000000008188956875683", "81418529857194249722977243654896354894958768594566", "68756670000000000000001344929999633714814863156835", "77465692189578236472454517957392530000000000000000", "00000000000000000000000000000000000000000000000000", "00059156131183744315897893311866295263356988988956", "56754356000000000000000000000000000000000000000000", "00000000000000000000000000082272919529491953159300", "00000000000000000000000000000000000000000000000000", "00000009179115896432546344138657131363718615377790", "00000000000000000000000668716987990000000000895657", "15573413522615426399917324914340000000000000000000", "00000000000000000000000000000000000000000000000001", "79922414475551833694497391119784731298821261270000", "00000000000000000000000000000000000000000000000896", "41283523655379100000000000000000000000000000000000", "00000000000000000000839524548447837981588782624871", "91824317690000000000789914662375684678856599947119", "86724696000000000000000000064766378714759296472159", "19314188114299847193380000000000000000000000000000", "00000000000000000000000034374386841947526563532317", "35314198119191684835344391966259737555400863682732", "51164583000000057100000000000000000000000000000000", "000000000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 758910806;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> digits = {"74182249217834182417982682698249773194000000000000", "00000000000000000000000000000000000000000000000000", "00000000364963575762681594178735498835139525414663", "31843743000000000000000000000000000000000000000000", "00000000000000000000000000000000618531151300000000", "00000000000000000000000000000000034794727826768616", "68998339564466259392666739649348957531539512831238", "47478639669864046694121155858482334398569935261693", "18111872164343463728000000000000000000000000000000", "00000000000000000000000000000000000000000000009116", "86287284311759174734487400000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000351298777136457623585838931353545142982", "37589515625347561965466354437293785937999000000000", "00000000000000988515917175821725353899633833232114", "39846735953838761851319834967686166180000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000338243929168835846", "68389524182869978593495328881242277969860000000000", "00000000000000083455538444129825329612453553222618", "46593556697191514688925384678467886386755451464221", "22393538000000000000000000000000000000000000000000", "00000000000000000000004732336654634861354239985998", "19523383441731277837793296517869499781000000000000", "39315959945836149732791765391189314739197777672699", "18881394444841684346445454369000000002228188738442", "41791821000000000000000000000000000023788953134455", "87182671514565123954522312462347479811122342800000", "00000000000000698259577599461915865762517881221218", "45176223283382624210000000000000000000000000000000", "00008878542577961424435394164448385191297386494987", "92988500000000000000000000000000000000000000000000", "00000000000000001489457219186515959767259338575565", "46951960000000000000029147756150000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000957855878673000000000000", "00000000000000000000000057288987000000000000000000", "05892475298492887357333264716912227869787000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000017796913234424598473892987352143", "10000000000000000000000000000000000000000000000000", "00000004527962321113725000000000000004314623578582", "34464257877129926539625563352889134143497183517124", "76646000000000000000000000000000000000000000000000", "00000000000000412868246332715492459246285992834491", "22851216100000000000000000000000000000000000000000", "00000000000000000000000000000000000000000004885761", "72129978686756443763110000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 211820294;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> digits = {"10000000000000000000000009612455584766948322400897", "93959532414433843426600000049755190000000365529161", "46590000000000000000003244882241942441243359900000", "00000600000000000000000000000049300000000000000000", "00462631696243785724612360000000086122766138951618", "63960000000091822794944452529247384000000000000007", "00000032599892300000000000000011427665590000000000", "07881260000000000005820000000000000000000000871832", "66186262187299000000096225934416742137100000000000", "00000003654666489144560000000000000000000000008563", "64300000000087231348826777269124400000000000000000", "00000006527774432573792465469700000000000000000000", "31197200717452866190000000000000000000700000000000", "00000069566868130071763668782481731597600000132537", "14682974200000000000000000962617167810000000000000", "00000000097780001400000000097657688727179782830000", "03464500000000000000001732200000000000000000000000", "03870000000000000000000000092265186900000000000000", "00000007596800000000000000000000000013769633881367", "91818421250193781921146649781374000000000069136542", "51900000000000000083134636756973400000000000329500", "00000000000000000032000000000000000000000000384951", "54554731724598330000000000000954598582000000005798", "19415283841271572000000000000000000000004281291112", "87851177800000000811231894548917110000000000000036", "12554634781000000000000242972423523112565446360000", "00000000090000000000000000000005942860000000000000", "00000000028698420000000009835314619316688931591000", "00000067442924253477800000041452000000000000000000", "00022785178900003648146370008878964922726723614235", "00000000000000000000000351756694895866489372819000", "00000000009536700000114871626495788551952184000000", "00000000000008516768000000000002269490000000094527", "00329642499372910000000000000400000000000000000004", "83533784864791541844000000000000000005788132143691", "61240000002463498698482218825000000000009852231711", "63838643226124000000000023768716926100000049180000", "00000000000000004386796557900000000000000000000000", "03353927193100000000000000000227820000000000000000", "52214355417436914228117000084189684511684389485000", "00000000000000000096759119876000000000005779698665", "63968427654000000000762243000000000185747487200000", "00000000000051381435596563872542197000000000000000", "00000000062613991979178832431527000096142156842237", "91993000000000000916360000000000000021512977668842", "55425683850000006992261478000000494548733274711927", "00000000000000365512828040000000000000001186649215", "92375835356419000000000045683193235863021222845716", "77388000000000087278286745411516344000000048867172", "97294578700000000000000006132650000000000000000072"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 568876342;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> digits = {"71753933149256593534652714794445437537582383479690", "00084633496229952935220000072619582362165423638196", "36834879126622699959000000000000000000000000000000", "00000000000000000374888163368854914416272641314200", "00000008753711333729625865261864527534515498120000", "00000000000000000000000000000000000000743146374943", "74528856861725215758860000000358621264782824192524", "55762188713849000000088932722758815452810000000000", "00000000000000000000000000000000000004000000000000", "00000000000000000000000000000651147389154227196212", "48866854626762489418000000000000000000000000000183", "11473528000000000000000000000006463925817154694315", "49133986412477342729634383460000000000000000000000", "09614840000000000000088538394715647218589167531618", "14851836746378000000000000000000000000000000000000", "00000004351524429842518126197264539879126286145420", "00000000000000000000000000000000000000099137272766", "38159681546167354383399630000000000000000000000000", "00000000000000000000000072319785911768788119912832", "53316000091967485965437151600000000000000000000000", "00000000011499252698964220000000000000000000000000", "00000000000461894216464743721763884911000009897841", "98744110000000000000000000000000062974200000000000", "00053854579000000000091527826253466324443779361249", "85593565712616000000000000000000000000000072251362", "56433554659915465385865844757000000000000000000000", "47579178722514289418694522269646786884736000000006", "73686549287622538532848167134863200000000000000000", "00000000000000000000000000047611728564913282131000", "00000112189621746174195323549341548687898824791955", "12265600000000000000000000096212593962877367794466", "84468352433790000000000000000000000000000000000413", "92455327954376531932284632529414282972812486339800", "64247592867543932982427562388200000000000000000000", "00000000000000000000025673553583600000000000000000", "00000000000000000000942859971992246693553628857354", "76496736550000000000000000000000000000000002363957", "63489954529840000000000000000000000000000000000000", "00001434368649254788571367178158669000000008431171", "01627273563757169365644237774855592300000026776355", "49679461700000000000000000000000046248649336644854", "85483343259886272228951319880000000355125484455529", "44963881554533424228000000000000000000965811267816", "33337697497191351692912761876237249000000000000000", "00000000000000000000000000002413155145788000000000", "00000003615824374876726997264796000000000000000000", "00000000000831786234391434200000000000000000000000", "00000000000000034714345388153583456523239886572400", "00000000000000000000000000000000000000008849262882", "937376685450000074769145712623615178712846348492"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 714782753;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> digits = {"55659000000086297257362007113242750012111251239000", "00000000053645182944200000000000007111754434150002", "46694930000000000036739000014493288112000009649356", "89091000000009913290000576473550055548486741000000", "08726420600032822998662720000000000034347648930000", "00000460000006000000007000739585000000655224480021", "15332634000000000072913009846383000000000000052991", "10000008245656770000000083565240000000000945202811", "39158043950149532242431000000047745100000004874131", "59965000000000000673753340000000913000521774400000", "00000031494510079862900000023675359183000000000090", "00000000062943692000825500000000063329319577900000", "32361692683000000000004626000000273473323931000000", "00000048900000831147394500000000000462966000000000", "00002422368759998003000000026586871590074100000000", "00839668880000770000000000332785271716000000000000", "36573442000000000084344000000000000165611125100002", "51947149400000000000007584000091882920000000063176", "77110000000000262373114410005571000062575000000000", "00032465200000000088997370000000000000811926000000", "00000711571500397217900044514859495400000000000028", "11126981000000014312770007992251416000000937586853", "00000019881696539170000000004673749682490004474400", "00000057377886500066274926004716563870000000000072", "87855297150000000000000827922152790000009500000000", "00000385648562000000019400000016552200000000000561", "23956360000000000000700000949668008520000000000004", "36000000000003183570000000032785100284137727000039", "53000000000958358318247100014557151009242864231687", "00000029133150000000754752000000711200000160000000", "04417489700000007969465900000076826188860000000000", "00052800000000000024910000000002548570000058486337", "30000000000000468529371518300000000190086186192292", "22000000674482286325200000000000015185000000000069", "71000434378434900000059548000000911090000000007873", "00009143400000000000005000000082694941480080000082", "15646200076371647492000030000000005173254110000000", "00039233227257400000973828819881800000000717486130", "00000000006036241173178300000911246716074714739300", "00000000031202293000000000034000000000232725480000", "00000051215792600000365339319755000049662291967000", "00084835262700000000000001762917982000000000080059", "88585740000000005800028000000000000017735992888000", "00000000087956500000800000386600000000000013600000", "00000009800064412600000058516174930558941690000000", "00005834255596813000000000200000028482400000000000", "00638273721553800000030000000000000863463397745023", "19898800000009970003239200009769000000779857965870", "85380969864517135000000096130000003624429140000004", "1455656334500000000512253394200000000200000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 772669406;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> digits = {"67948942969390000000000000000397900001321852619484", "85994735798530000000000000000000000677415277592642", "74500000394162400000000000000000000000000002393581", "12386957777267935986596000000000000000000000072715", "00000000149617157547794564844285676842000000000000", "00000000000000000783139515000000000000672794668839", "92189953539172400000000005282228786749427536814640", "00008130000000000000000048259746869100000000000000", "00002235683348421478833197863968511000000001613859", "52963656690000000000099428000000000016487216688427", "15644955488500000000000000000000000000637322473700", "00000000000000000006000000000029586744119372853792", "99435000000000000000000000000018818841100000000000", "00000000000005197169393714836221560000000000000000", "00000000005318223849843600000000000000000000000251", "38257212284517765957590000000000000007222425222546", "58499670008456383634682700000000000000600000196566", "26000000000000000000066619161180000018879248648338", "99548100000000000000000000000001393322449593000000", "00287641447643751352983725697514000000000046791243", "26891637596919547759340000000000000000000000000005", "57314687832534253000000000000000000000000000314800", "00000000000000009262337867363882192878295000000000", "00000000043634941883242565175124680000000000000000", "00003929534830000000000757964300000000000000000043", "29686351793912515600000000000000000001526769587328", "53534446573390000000000000000000063563493531693760", "00000000000000000000006313149961386232897687400000", "00000000000000000000032559521499565424775618900000", "00000158510000000000000000000075913963174844844696", "15585240000000000000000000033723494222581281737993", "00000000002568191879939279118642355300075266786674", "76653731519853446640000000000000000000000952476134", "38678691195611432202896600000000000000000000007310", "00518874000000000566272146140058934683700000009529", "17988873485879529000000000000000742691594413826712", "60000000000719464682285968000000000074349694454439", "35912773525000006189575115683168280000000000000000", "00000000000000227956416940000000000000000000000000", "09848459500000000000089786188969231870000000000000", "00136171722732921254111000008443447854126791594943", "22785700000000000000000023758500000000000015764786", "38476782565391900000000000000000000000000000257239", "72768261438818366290000000000000000000000000000000", "24458840000000000000000135922538573768979237000000", "00000000000000007329498569797247836792799114910000", "00000008298687376373626932114421544181000000000000", "00000000000008465246489578342558000000000000000000", "00000000001388174367519882734626260000000000000000", "0000070000000000000000000000967400000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 466052979;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> digits = {"85655997619968394673388737874100000000000000427518", "85939297921269813887219756000000000000000000000000", "00000008172422148775771761364472000000000000000000", "00000082854434373600042693000000000072391000000000", "89000000000000000000000000000000000000000018181858", "81916496947646755281121910000000000000000000000000", "00000000000000000086485581688800000000000000000000", "00000000061193200000000000762964924415291931512925", "92417171618000000000000000000179193489496700000000", "00000000000000000000298000000000000000000000000000", "00000000000031843729231712462236537485422443553855", "00000000000000000000000000000000000000000004916510", "00000000006641649995826968293724996145141167636000", "00000000000000000000007233199811932799989000000000", "00000000000000000000004161211796421533971564931147", "75718859000000002153357875887264840000000000000000", "07891578612272423452899780000000000000000000000000", "03372000000000000000000000000000000068841794759453", "25182333963462500000001981354816955650000000000000", "00000000000000000000000000003323659452241340000000", "00000000000000074000000000000000000000000000000414", "11765274588495593428870000000000000000000000000000", "00000000004259845349515618521931761569933258131320", "00000000000000000000000000000000000072595823329487", "58428769333000000000000000002141797539800000000000", "00000000000000000003573331260000000645670000000000", "00000000000000000000000000000142119765791823627151", "48471700000000000000000252568864942159000000002621", "79328516767444417454412573666221700000000000000000", "00000000003243117867952124574691754174600000000082", "69000000000000000000000000000000000000000377558492", "66813627198512800000000000000000026157125261646339", "48000000000000000000000000000000000000000000464351", "96482181700000000000000000000000000000000000000000", "08567135982212000000020000000000000000000000000000", "00000000000522361167561231974839000000000000000000", "00000009945289989931798764914251100006000363249113", "79857427193596462313300000000000000000000058453639", "72897293719675467837822229745120000000000000000000", "00000000000000000000007246898673684300000000086129", "82544440000000000000000000000000000000000500000000", "00000007146575248162757565890000000000000000000001", "83678772496000000000000000000000000000009800000000", "00000000000000000000013465342816756674359672242600", "00000000000000000000000000000000043221477224727773", "00000000000000002178955850000000000000000000000000", "00000000003788493175266998681818267300000000000000", "00000000000000000057782641989228400000000000000000", "00099767944571458410000000000000000000000000000000", "629819694486636000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 894424238;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> digits = {"87663500000000000650000009200000000058126269000000", "00000754400000700000000004232000000003855390000009", "00058500000349861721000000000002022357579788000000", "00245491775000859327473190000000095885439000310044", "84248000000000008496700000000000641272000000000183", "38596030000000632195120000000002000000006917450000", "00057922890061963181500000000329960009356457465100", "00000000100000001873195659000000008918790097213400", "03847745000000000022727000000000008500000038427000", "90008400000000006000000008795727505836975520592298", "00005674009125289480000000000110000000093334991200", "08523440000200000062313129770973323964900000000023", "43395780000006173127342000000212842927400058000000", "00006889076000968998200000000001471350000000000623", "00070000012156673510000000043330000009729919800000", "00000043373835000000000498300000068340000979600262", "19600000793000000000700000000395971100000000053000", "00053675771000087351890002218000000005814340000000", "49487140000000000577851422200000000001749942000000", "00000288800000000345463943000095779265300000000643", "90000000000800002791652000000250000000000095000039", "10005995779900000000094721612000025728170000000000", "97280000003251114000000160000000000513189912500496", "48487680000000000275430007282700000000000690000054", "39797459035000008195300000031200007577478200000005", "70000706258750600000000000711600000100002794300000", "14223440000000089800252000000006000000000641000095", "77656861800000000559245833100000000009295584300081", "91596418000000000397167600000000000326187300000000", "00030000000000021416196722000000091357558290000086", "72000000031241000000000446000000272100000000000667", "50000447587000000000003800000098568300072187136431", "00002500003235114669600000332945007655000000004430", "00000000008001885000008646200051107000000000484934", "75000720000000007140000000945288368300008830070057", "26000000575690059300000000055895000000000067438821", "60000000000764100032611900000005000000000078774995", "69203588726830000000000026697552500009000000009000", "00001665872341500000006530000000000050000000041100", "00000516220000000009810000000547000682000011195800", "00000000905598428368000000000046768478700000005500", "00000000796800000013688338075917300038131931888000", "00000427592940008600003652557100000000000364586747", "99000000058462000000000002800000000002733123000000", "00025400095000000783856270930688870000000143750000", "03300000272726274000000000003956795100000000600089", "94000325474909471000000000082357612806232800000000", "00228454679209793454291000656683348100001137516600", "00004428924700000000078973000024329438280000000000", "141899528001570072251285000004100000133388211"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 753783761;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> digits = {"63934191434338696332456200000000000000000000000000", "00000000000000000000000000000000000000000734589616", "94921489531638794555548637758323123000000000000000", "59897272851155295837993393451600000000000000000000", "00000000000000000000000000096748414124945688158829", "18985275441877527373293843997878672939841912000000", "00000000000000000000000000000000000000000008134874", "26871613914797897633287319481478321700000000000000", "00000000000000000000000000000000000000000000000000", "00000436216615146619367200000000000000000000000000", "00000000000000000000000000000000000000002544737450", "00000000000000000000000000000000000000000069327853", "48678913287578565886877145866918136414865981820000", "00000000000000000000000000000000000000000000000000", "00000000000089329162600000000000000000000000000000", "00500000000000000000000000000000000000000000000000", "00000000300000000000000000000000000000031536163792", "54987858181585151464810000000000000000000862851945", "63335675146714869964371866697456848534463119885145", "94151344253420000000000000000000000000000000000000", "00000000000000000000000874268827776790000000000000", "00000000000000000000000000000000000000000912515500", "00000000000000000000000000000000000000000000000000", "00000001455713733186643492516341427583719149147215", "83281162865325153680000000000000000000000000492363", "13971364234259400000000000000000000000000000000000", "00000000000000000176796661716779334467244871481718", "76599439286425957464423656744651800000000000000000", "00000000025596143334125142639228579892973836300000", "00000000000000000000000000000000000000000000000853", "98516799176474000000000000000000000000000000000000", "00000000000000000001562215773755121435613863486757", "96387967753455287800000000000000000000000000000000", "00000000000000000000000000000000000000031816819863", "83586392678200000000000000000000000000000000000000", "00000000000000000000000000002152228671488129815691", "88183734633921148947342536968790000000000000000000", "00000000000000000000000000000000000000000007595593", "15952522599333661556888158222956456168000000000000", "00000000000000000000000000000000000000000000000000", "04112296857451376346166712263531635755669962431221", "91737668724913148795659928340000005692211281567138", "89553312674255761197312816876721455563780000000000", "00000000000000000000000000000000786273359662852733", "93984457419981565635216300000000000000000000000000", "00000000095754328659716853599127271386786663826726", "29800000000000000000000000000000000000000000000000", "00000000000000000000000000009237323739400000000000", "00000000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 576061861;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> digits = {"11566113674916120000024286553476817581885835490000", "00000000000631711885151376216216854290000000052647", "33952424882000000000000000000005782536891645453082", "84711946158617844396490000000000000000000094587310", "00000000000000004651381900000000000000518277121350", "05132741988758393610000343585239450000009883273380", "00000000528289749861457434221454777259000000000000", "00000037824468868400000000000000000000000489449289", "19993913238449277230000000000000000000043842445511", "68851737846463111440000000000059166234671578328000", "00006633576446336982898862121800000000333000000000", "00000003800000000000000000000000624868688621211274", "27124533280000245355826500000000938876718976986752", "45000000000000000000000000000000539999596487830000", "00000000000000000000084626496964674250233178157480", "00000000000000000000000000003836795445431120000000", "00000000008594181566596566965457000000000000000000", "00025261789647246000000000000000848523861517841517", "37892358820000000000000000095583647793938658144967", "79671150000000000000000596300000000000000000000086", "91383859816227266124971135000000000000729455271628", "21190000000000000000007179693324235227725395000000", "00006141919781484000000000000000000000000001586757", "31972657269978324785270000000000000000000000000373", "70000000000000000000000494328664537777892200000000", "00000000024982912623486869862822650000000000000868", "18557945915133532336000000031129000000000000000000", "07468375000000000000000034778418423639627421892710", "00000685868649567858877000000058633861539487262800", "00000000000000000000000755268634998688513640000000", "00000000000000000000001421637247159681769356162917", "21000000000833582430000000000000025282919219300000", "00000000000531697200000000000000054442246377636948", "16732656370000000000000002622420000000000000000000", "00000066595876677646575798833007967621492839546000", "00000000843351613962998682722000878900000008576298", "17269854866000120000000000000000696180000000000000", "00000000000000000586566968375823550000000000000000", "00000000000072161663378758144874657140000000000000", "00012499645896587259193832419000000000973321441267", "96427946241027347736636858849871600000000000000000", "00000800000000000000002744823165792796346000000000", "00000000000000000000049461104500000636841397300000", "00000000000045557162000000000000000000000050000000", "00000000000000000061006647698275168293811576149626", "65000000000000000000000000125969437828116200000000", "00000072000000000000000000000076660000000000000000", "00000879285462961940000000000000000000021000000000", "00000000000892100000000000000007380000000000000000", "000000000058745442500000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 671429294;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> digits = {"73335494553773790000000000000000000000000000000003", "31676989723534720000000000000000000008200000039154", "45227783577007617154416620000000000000264919823756", "59935674726220000000000000000009824889335146713842", "77649000000000000000000000000000000000000000919769", "37856137385455438678856681350000000000000000000000", "00000000005000000000000000000000000000000063322714", "21348515767310000000000000000000000000004513747525", "97615512340000000000000000000000488484999497322736", "45969857393976845900000000000000000000000007697759", "67466726991200000000000002791412911436131896825369", "12443953940000000000000000000000000000000000572561", "97283736879681798597437792800087584282529750000000", "00000551319000000000000000000000000000000000000035", "78287329552392243839735391500000000000000000000000", "00000000091882334531133939689152546514548772000000", "00000000000000000000000007175586156717759617645279", "00000000000000000000000000000000000000077264591922", "96342457898548771242156839890000000000000000000000", "00000000000003964675000000000000000006845853785778", "70000000000000361744962186111455474649691399000000", "00000006419177599410000000000074598811272491113131", "44839238652659632470000000000000000000000000000000", "00000079981991000000000000000000000000000000000006", "76584864866224272961795633237846743649000000000000", "00000000000696524948719929311861532855619150000000", "00000000000000000000745598972789266378916749937910", "39582000000000000000000000000000000000011799683865", "52417889212527379553158568100000000000000000000000", "00231700000000000000000000000000000002771366612700", "00000986599633958253643546176950436969675644342754", "95152977811486300000000000000000000066667159624633", "88000000000000000000000000000000699241984322425417", "65648819000000000000000000000000000000000000001558", "36634662745556155451638338680032881000000000000000", "60000000000000000000463115919293237917878785731885", "22112798000000000000000000000000000007265769945172", "58954313392348270384978478316676320000052332418368", "20000000000000000000000000486259788337587571716600", "00000000000000000000000032766223946181120000000000", "00016157537294987761528848338510000000000000000000", "00000000000000000990000000000000000453777681487453", "33238398992334900001714246553000845323465128392360", "00000000000000000000000000000000000348984167235355", "79683465733300009868649243263000000000000000000000", "00000000000000000136882199197256139900000000821418", "55573228200000000000000000000000000000000005157313", "18920000006458757748846562445394000000000000000039", "95994457548682249247416319682455375400000000000000", "000000000548470000000000000451331973837191"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 201086447;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> digits = {"77529971944986837322957846254422973185992977491315", "13343742323877700000000007334915572874531939358131", "53834398189454146485949638874156193959784237367749", "33762359150000000000000000000012255945963247289653", "43354882324425932472249162176194356151145964983800", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000003728371", "43861119963117287611633535676926847383145346931000", "95518659294213235133757731158173153782612652159531", "77592647600000000000000000000000000000000008245261", "94789234393972435639668961895543174892462278517423", "54818722348926611691592249224470000000000000000000", "00000000000000368758878841694421741988386379186800", "00000000000000000000000000000000265000000000000000", "00000000000000000000000000000000004736375987538687", "81528518187193254688343671419119752138985655347629", "97556000000000000000000000000000000000000000000000", "00062822416871477893655556332500000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000634158250000000000000000000000000000000", "00000000000000000000000000000000000000000000000448", "81548237243676714756263523200000000000000000000000", "00000000000000000000000000000000000000000000000008", "58459941678383448762886638545872816569595756344389", "13244116476424369949278759938870000000000000000000", "00000000000000000000000000000000096228525412896985", "27262379634393556228233349246735915423630000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000284449654799212888", "36179915295684617331933851322522114115195519949747", "31963245000000000000000000000000000000000009371575", "34982621139227962862876665576235795739655871566915", "16461521777265223900000000000000000000000000000481", "38213351466497710000000000000000000000000000000000", "00000000000000000000000000000000000006551351484896", "74929696913986274784836666784000000000000000000000", "00000000000000000000000000000000000000000004416623", "73794565358883000000000000000000000000000000016699", "34922811141839956338969435793128912678854469683347", "36000000000000000000000000000000000000088976600000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000011836628325214", "35594534471263419715714258859482727855135512967785", "57811600000000000000000000000000000000000000000000", "00000000000475964572555959496159732728783337116000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000005527983735465999213535", "19647362423260000000000000000000000000000000000297", "41684731136145789971731171852456863189756859328499", "7179886617319799371259331756414985"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 853667034;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> digits = {"19452589957256000000000000000000000000000000000000", "00002387000000000000000000000001651488582533966134", "35250000000000000000000000000000000000000000031831", "17242687512944279696782681710000000000000000000000", "00000004448838438774692628595776881869295000000000", "00000000000000000042642368162541900000000000000773", "12712128295727461144568531343970000000000000000000", "00000000000000000000000884377334437545134354423365", "72447158833000000000000000000009956733443946219470", "00000000000000000000000000000000000000003460000000", "00798594495143215148006358837749938432711935263383", "39655872300000000000000000000000000000000078378138", "62119879759364178515839146000000000000000000000000", "00005468000000000008426975853983565598551581770000", "00000005314153561171536594254282872870000000000000", "00000062558289961885314542540000000000000000061992", "44637988412284000000000000000000000000000095987718", "23927227337700000000000000000000004000000000000000", "00000000000000000000000001993455893416371400000064", "51000000000000000000000000000001248674831731243851", "20000000035897943193974491166617756000000000000467", "76875787994978800000009468511463211614253579559600", "61278775991228380000000000000000041615136452729687", "98324927678957261998853140000000000000000097284226", "49662894264918662000000000007345997958858695348354", "37727224666000000007443425799350000000000019000000", "00000000000000000000000000000000135272636273539427", "55237243575733000000000000000000000000000527722262", "78674959929500074382758738187759468761974229168846", "56883500000000000013198791944987993896161741000000", "00000000334413192973425784778473314800052318745357", "67216958949494595456793519759000000000000000000009", "33563161317744917416151710000000000000000000933577", "29676818355999482881454213917998760229437238556143", "43137125227759461153134280000003168655348417921621", "21780000000000000000000000009222969693357153835002", "96957793118565678458225867488543735986520000000000", "05828382816195812345575591698744742274440000000000", "00000046566183218896384597278000000000000000000000", "00000000000005775592740000000000000000000000000000", "00000994588295288958720000005543657662835958937753", "66692587119254713228600000000000000068736544877191", "99160000000000000000000914266424545879193000000000", "00000000000000000094512223919593385899342377895682", "78621000000001332116122255143574635800000000002933", "96635997618291444091372846321810000000055859721957", "61859362268677837587414243110000000000000000000000", "00003418535267535878113876746426431895553000000000", "00000000000000000000005829485596546586927843187233", "959264435970000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 787400354;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> digits = {"87469597469310000000000000000000000000000000026126", "56227522972783945638477246000000000000000000036589", "85652832922355532272885332312275452400000000000000", "00558652298544742649810000000000000000000000000551", "38100000000000000000000000000000000000000022983333", "73445642915493693294497000000006718621794539880000", "00000000000000000000000000562674639243282997387737", "34484461000000000000000004449913665187663633642817", "42897720000000000000000000000000000000071724193900", "00000000000000000000096218946114543782639175554686", "00000000000084844255658582138411172739652866878552", "53337000000074742529177992000000000001485586899931", "86820000000000000000000295998535922364233562166882", "97532151663722500000000000000000000003987412440000", "00000000000000000921182688748398272178748663365649", "67194600000000000006922441289652263647243959160000", "00000000078966569288297917219160000000000000013346", "29938177241373521599736320000000000000000000000027", "97623966683882290000000000000000000000000000000000", "00000615658857863666859247781723987000000029678135", "17162999766335736896792724451800000000000000000000", "00000003322887598694287898368117349000000000000000", "00000896136236595628149272648553540000000000000000", "00000000000031786695644991158472269539631446814500", "00000000000000000023148835138281635153286433232447", "71375177677731100000000000000000000000000000000006", "12954626829442456141386175711468000000496476248825", "33286995000000000000000006838984717574547687192682", "00000000542815154736128466438640000000000000000000", "00000000000000000000000000935748328887915500007564", "66854974826592398726643683395469133569691000006166", "86900000000000000008263377764354796274000000000035", "28128722639182598200000000000078459244971188797929", "43214867112655325965368544700077557262487512258897", "48835778610000000021975377455338878258895751916285", "00000000000000000000000085588121747912297155863345", "56244326551800000000000000000000154793758278946981", "82123677914718938684720000000000000000000000000000", "00000100000000000000000000000000000000000000009812", "65276599716770000000000000000000000000000000000949", "95397299368725293214613584362889721721878000000000", "00000000000000000000000000000988272438284164496813", "53910000000000000000000000345971363754559180000000", "00000000000000000000000000000000000018538255536292", "34000000000000000000000000000000000000000000958499", "29174172458534269851975612945121515300000000000000", "02736494957921126830000000000000000000000000000000", "00000000000828273522141687492776000000000000000000", "00000000000000000000000000003233755741390000085315", "00000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 917674815;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> digits = {"56657424937787727633267100000000000000000000000000", "00000002523194924179529666348950000000000022300000", "00000000000000000000000034642745723217632227359223", "61116264826881230000000000000000000000000000899119", "23933366547783639568331391228438820000000000000000", "00729955592247916436725850000000000000000043156370", "00000000000000000000000009719685576532945495791536", "99492767739624700000000000000000000000000000000000", "00881595152178439154443400000000000000000000000000", "00000000000000000550000000000000000000000000098155", "62432231665263962769689658198512000000000000000009", "68618993351643267275794619679757840000000056951614", "10076000000000000000000000000000000000000000092345", "51969693700000000000000000000059459723700000000000", "00000000000000000000000000067297285785523000000000", "00000000000000000000000009711674646148840000000000", "00000000000000000000000086114298836474798664743363", "00000000000000000000000000000000000000000000088165", "47647665484173341383590000000000000000000013795757", "21546414646592130000000000000000000000000000000000", "00000000000594261477294751533898683692998613290000", "00000000000000000000000000000000000001383722971678", "17161876818228600000000000000000000000000000000000", "39328395212993288989578830000000007688276111671300", "00000000000000000000000518500000000000000000000000", "00000084868939683962248259889125800000000000000000", "00000000000009586857561623220000000000000000078517", "21984424613451468794700000000000000000000000000000", "00000000087866387474313932956374659654930000001315", "79326756613293683500000000000000169645595418751769", "26376249697173314000000000000000000000000288767595", "60000000004510000000000000069629658624100000000000", "00000000000068359128561757827500000000000000000000", "00000000000000000000058454657817613194942362376233", "49215840000000000000000000000000000000000000017489", "47758736265100000000000000000000000000000000000000", "72275424872519657344153796893693772151584000782118", "88649625547442672569484281835029400000000000000000", "00000000651313196828719253342116245816681483328000", "00000000000000002223954321793979713328612500000000", "00000000164747633332199000000000177522716213188595", "78244460047563932765921774489160000000000000000000", "00000000000000000799000000000000000000000000000000", "00000000000003281389217634431943526112266629629419", "78000000000000000000000000265926844185172241371626", "00000000000647767324154249184519111900000000000000", "00000367217336593221515791462270000000008734238513", "00000000000004192985531169117625412153598460000000", "00000656398678500038880000000000000000000008665312", "4459590000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 141244058;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> digits = {"94837857982393165733965722356454888969539471497992", "96243172389444483657000000000094957874221171782347", "52274741823282200000000079363546994463842328792422", "72159483351817289253635165829522625941481223594976", "84584217100000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000473", "84932567874227255557621287958579387819319164267476", "55166654625254997000000000000000000000000000000000", "00000000000000000000725393473951894382573936182300", "00000000000000000000000000000000000000000000000000", "00000000000043000000000000000000000000039496221893", "99934611863585124944993812334595000000000000000000", "00000000000000000000000000000000664681859458937618", "13963733492971979524776421483888228142600000000000", "00000000000000000000000000000000000000000328686355", "29672356327377338666800000000000000000000000000000", "00003575626445714694162923375754725537145282182000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000432384272893834888597144", "36539879752589961329188322246298967424823799433873", "31192279000000000000000000000000000000000000000000", "00000000000551421466337584271877157796178842588482", "24877478217439386815632910021858227682242725257381", "86744544636342111891282344696782626448449400000000", "00000000000000000000000000000000000000000000000000", "08117652511221631225373459446466519882522868478386", "74672397716600000000000000000000000000000000000004", "88165442155462665272535667331983175656247139436382", "48294128618769311523100000000000000005963338311161", "57781892587181663563846454274747467348947595532685", "94378146777215928825897480776747156388184892587623", "19818563267425968741600000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "05342722948964439139170000000000000000000000000000", "08249235293743368166771635619657324812275193730000", "00000000000000000000000008900000000000000000642165", "42344858616979654182263894396793147334153923472627", "33935317522888644672859489246900000000000000000000", "00000000000000000000000000000000000000000002163212", "51365123782656735718538300000000000000006734423264", "23231175692653553178967447614118817654367261695492", "21869691174833426554464646243630000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000928467946597477393975217619767137", "66279483674696683291553145167521791850011787862755", "67631892918487558146389000000000000000000000000000", "00000000000000000000000000000000000000000000000026", "68846258489835734835829724379117498000000000000000", "0000008849721112273799959400000000571374"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 872220513;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> digits = {"19247332623565356349666528233847700000000000000000", "38855476292241163455738113571712632348668898333388", "91681771977004772146952958314224297757735157150000", "00000000000000008775811941281886431587355846821713", "29569252741781897647700000000000000000000000000000", "00000000000000000000000000000073191293144285382765", "65733884123797914988552000000000000009742636372936", "94750000000000000000000007941596292486925428354463", "72184621628993500000000000000000000000000000000000", "00000000000000000000084446000000000000008177632719", "10000000000000000000000000000000000000000000000000", "00000000370000000000000000000000000000000086532491", "84559849339363956144295678879581545348679142828666", "46000000000000000000000046337443918577168945946439", "44943586300000000000000000000000000000000000000009", "83772688596373523185851646653721383230000000000000", "00098336728959819393849962616851946649999436613139", "48176941200000003394339861861578362427668000000000", "00000000000000000000831346158448344461429942843284", "14127456145344612700000000000007938889583434525654", "65291781453945494287973334798271000000027336722182", "58915434389145459592528692687537799351961722456967", "22535490000000000000000000000000000000000000000000", "00000391433176151232931334400000000002886291422564", "26672265289459891196315424282890096582295872995972", "45875467816616633658737534372516492555388910000000", "00000000000000000000000000000000000000000000000000", "00273288895256892289694617633225855783353100247357", "12838246299862842829964478492991214566241592754942", "59900000000000000000000000000000000000000000000562", "89199896614145395976362676993466722767810000000000", "00000000000000000000000000000000000000000000000000", "06688149326694934146331178733259369394821173587126", "55872353761714839000000000000000000000000000000000", "00000000000000000000000000029586878399486512400009", "82981641971342243129881479422822216225954286740000", "00000000000000000000000000000000000000000000000056", "48271000000000000000000000000000000000000000000043", "73674141778677758871000000000000000000000000000000", "00000000000000000000000000000000000623442486464583", "69825356677459391637638131000000000000000000000000", "00000000000000000000000007597742784785275284000000", "00000000000000000000000000000000000212866946237225", "28793985334278925000000000000000000000000000000000", "00000003125358215261851899789562851611717983991735", "33444386868718215176270000000000000000000000000000", "00000000000000000000000039213585656477586799259952", "76356353151167000000000000000000000000000000000000", "17485388444429222681277970000000000000000000000000", "0000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 688316699;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> digits = {"35315427312949793970000000000000098169781361009512", "27518571351572987515000000167227299279547169422961", "84681846968916728510000000000000000000000000000000", "00000000000635149798399384885525347295633243000000", "00000762637917627300000000000000000000000000327266", "45181643233989150009136929351186311598861881532473", "15864327320000000000000000009761863274889751625783", "00000001745361594848426941000000000000000000000002", "35895126623565315385000000000000000000081764561564", "73582585832337996457311300000000000000000000000000", "00000000000000005965222512852122700000000000000000", "00000000000000000000000257315552627735700000000000", "00000000000000000000001458553149216332793645157837", "89273235252000000000000000000000000411975966722132", "55133652999660000000000091650000000000000000000000", "00000000000000000000000000004787749891642229199419", "41985696224860000000000000000000063318535862977714", "42947756193329732676129141156768750000000000000025", "44141864914547200000000000000000000000000000447288", "34968198947943543443774237319210004755700000000000", "56977231235423347443222893252368111541197763000000", "00000000000000000007912754863846419812462254253815", "36974672171596595118816590000000000000099172410000", "00000000000000000000000000000000000000095600004642", "41645755636343357516593963944847439292455275521340", "00000000000000000000000000000052138715240000000000", "00000000000000000000000000000000038558173217373285", "61825134596173694263935377350000000000000000000000", "00000000091952939154796174739836652534178685600000", "00000000000000000000000000000432969426113396465647", "88424285474738000000000000000000000005672242312849", "17232431319713340019315171243856356127387238914931", "75339441916600000000000000000000000000000000000003", "37818882841761775578812232614172254518633766781000", "00000000000000000000000000000000000077511877276883", "37265123618194215728217533359300000000000000000000", "00000000000000000000157583662928883754810000000009", "65664338399775951714468282737116299499988180000000", "00000000000000000000000000000000000000008947647738", "43492157853699350000669452622189992372863533174212", "66100000000000000000000000000000000000000000000000", "65659361359220000000000000000000000000000000000000", "00065633198638885466894900006242568510000000000000", "00000000000000000000113823768288826644112354710000", "00000000000000000000000004689393128811750000000000", "00000000000000000000000000041688118447749535852791", "41855674000000000000000000000000000000000000029246", "34193149839472544149859793879700000000000000003716", "34828573900000000000000000000000000000000000000274", "7452938253832729457685"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 266699628;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> digits = {"51160000000000000000000000000000000000000099498864", "85362321598887974855229000000000000000000000000000", "00000000000000000000000000003680466776578000000000", "00000000000000000000004697876739138289116782889000", "00000000000000000004997678918181249491787399815235", "96268300000000000164861895247857894268238000000000", "00000000000000000005367000000000000000000000000387", "65698237485851439400000000000000052414400000000000", "00000000000000000000000000000000937329822443745342", "57225663368816100000000000000000000000000000000000", "00002659458722359163100000000000000000000000000000", "00000000008810000000000000000000000000000000000000", "00552994841937853596453345600000000000000000000000", "00000000000000000000000000000001732600000000000000", "00000000000000000000000000000000000008455800000000", "00000000000000000000000000042837425258123378967715", "28651800000000000000000000000000000000000000000000", "00000000078698554181527516674335700000000000000023", "54745474338444624661365643468446932299813168000000", "00000000000000000000000000000000000000000000000526", "92832563779859296388173557674136415500000000000000", "00000000051916791117250000000000000000000000000000", "05371449566445578554482316674196739400000000051373", "61493781641484629647753462112923717193934979491490", "00000000000000000392262242834945700000359217733715", "89548420000000000000034696975445961124981400000000", "00000000000000000000000000000000000000000000000869", "65985617979512826995694200000000000000000000000000", "00000000007423151261000000000000036844663796278431", "21524689883583932483498437912188789983640000000000", "00000000000000000000000000000004313691551562336783", "45286000000000000000000000000000000000000000000000", "00000000983842733526177882863687660000000000000136", "91571600000004394826733362200000000000000000000000", "00000000000000000000000000000000048981117784129567", "00000000000000000000000000000000000000000000038419", "54958422441947653646757181416400000000000000000000", "00000000000000000000000000131948342675469900000000", "00000000000000000000031715553619123171985991417678", "55111445118774271000000008615191662754165714815218", "43467819522277879212261443911000000000000000000000", "00000000000000000787633241931573197461924179415129", "43971157788416440002595858385249432546317452878836", "67629139793370000000000000000000000000000000000000", "00066818636645181818571272517738848147877989174000", "00000000000000000000000000000000000000845578414312", "57941455275293596169111917857000000000000000000000", "91000000000000000000000000000045375572815376677538", "65498736562965711982958100000000000000000000000000", "00300000000006441"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 771233516;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> digits = {"44736943219327287513154398678520000000000000656414", "00000007476968981947941678423774727794000000000000", "00000000000000007391181739000000009800000000000000", "00000000000002169152000000004939831966941555688635", "27297619313794752600000000000000000000000000000000", "00000000071600000000000000000000000000000431565656", "35730000000000000000000000000000000000000000004472", "31200000000000000463517693687157900000000000000000", "00000000000000997681279278613387551212677228748100", "00000000000086415853417173526418997643000000000035", "17598959128762965565732242337450000000000000000000", "00007679782311341675428679541000000000000000000000", "00000002674581659851549120000000000000000000000000", "00000000002958169372766719932716784838983600000000", "00000000000000000000000151879476382971425630000000", "00000000000005762257321823000005428416444829743561", "25359451439123000000000000000000000000003300000000", "00000000818591321882746924471931428189900000000000", "00000000000000000000000000000008745991151187255919", "93878000000000000000000000000000008114189778463933", "91449683250000000000000000000002352517730000000000", "00000000000000000000005613288454940000000000000000", "00000002942689284515818897373677198200000000000000", "00000000000000000000000000000382966363587851216351", "13697554475835861340000000005100063331170000000000", "00000000000000888852279597143324618938829220000000", "00000000000000000000000000564356614393241886649570", "00000000000000000072437781779916979261353472947146", "69958300000000000000000000000000000000044622658415", "72218967652300000000000008761514226472451950000000", "00000000000021447413526773389618818299677400000000", "00000000000000000122829524212143530000000000000000", "00000000000083000000047725551718800000000000000000", "00000000000845437286355700000000000000000000000000", "00000000000000074451116386847885517966524351480000", "00000000000000000891827753168343995000000000074269", "67461868969468477787000000000000000000000000000000", "06254834557213234948311452427275765118263384000000", "00000000099791815558298835689382971568395973882399", "56000000098523292340948162379157768557335593858400", "00000005957873135297281664578440020000000000000000", "00000000000000000829162798434662741151482378278274", "89000000026313978735110000000000000000000000000213", "51915739600000000000000000004338219585844310000000", "00000000000000000000000000000035457342471633100000", "00000000000000000000000000000008144799259987197334", "74613654394538479185200000000000000895786870000000", "00000000000000009317563163435421396741667500000000", "00000000000000000000000000000000070000000000000005", "33279912629213383899417447634528261300"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 56283231;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> digits = {"54375631669143933164827674189418393000000000000000", "00000000000009479458861783891327547781454258765000", "00000049657155779921247515764336371900000000000484", "57238351977312185411530000000000000000006872257676", "48388700000000000000000000000000000005791932668896", "56313443829648120000000000000000000000000000000099", "14916592824365913122198258891632472494000000000000", "00000000000000000000000000000057723969443617862491", "37290000003378593871864587321259320000000000000000", "00000000000000004746353431100000000000000000000000", "00000000000049947986126227699216194200000000000659", "11887118118119000000000000000000000000000007192651", "39985216622514573981970000049357662575752725334339", "52863763533248668000000000000000000000000000000000", "00000004856768898468769371426323312264998849717730", "00000000132694648712386168233386489226813565000000", "00000000000000009878583462380000000000000000000000", "00000000000011716739499657622763165572711391600000", "00000000000000000000000000000000000255351198489117", "56132957699217892170000000000000004573389834534683", "60000000000000000000000000368435363866143100000000", "00000000000000000000000000000008796492000004721878", "62264296934386468632914700000000000000000000000000", "00000000000000152485458525187521313731848466757588", "28382000000000000000000000099912134554643458452155", "51811186334265386800000000000000000000000000000000", "00000001462000000000000000000000000000000000000000", "00021844278548848000000000000000000268966948392991", "23583725358725674597000012949826254557979499414675", "96235372000000000089261317831114328547416000000000", "00000000000000000091797000000000000081838799223160", "00000000000000000000000000000000000000469416922897", "19713646666278000000000000000000756764158534357691", "98978630000000000000000000083366100000000035879577", "51414564488363248961345616448180000000000000000000", "00047860000000000000000000000000725637849559168566", "92615375974191590000000000000000074595327839816974", "61000000000000000000000000066463883792127598600000", "00000000000000000002867227193141421718266596545148", "10000000000000000000000000009466674812540000000000", "00000000000000000000000000005863760000000000000000", "41693315178879646000000000000000000000000000000000", "00000000021942863776449387877362372577913000000003", "29878586986510000000000000051000000000000000000000", "00000000000077185753315511142816883300000000000094", "46344466496252442891100000000000000000000000000000", "00039373547576535976438179000072939687175215713565", "88630000000000059893584597613513334314129539726820", "00000000000000000000000000158579111538765574342246", "6677416947755499"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 64667231;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> digits = {"95422997287879286181368633638699191976422688300000", "00000000000000000001589573188754268345475571900000", "00069965512133445946829746553849514454718448758754", "91321547914154739100000000000000000000000000000000", "00000000000000000000000000000000000009564557237846", "75798344743442389289992184000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000465368000000000000000000000000000000000000000", "00000008823393955811549630000000002900000000000000", "00000000000000000000000281795164977555697169444815", "38718222442141833969445199000000000000000000000000", "00000000000000000000000000000000000006486271482941", "78371556794466719934355195896891283000000000000000", "00000000494531975676663266776000000000000000006467", "35245633433162984771291872278893379718818966311698", "12452955746275264924859342857600000066616952121749", "77165662649141799247274874799452377532832995417939", "00000000000000000000000000000000000000000000000000", "00004979893966192784438962971854695845551553217296", "72600000000000000000000000000000000000000000000000", "00000000000000775849211318867514567262198663855674", "00000000000000000000000000000000000000000000000000", "00000000189973566621286138423451165898000000000000", "00003479547262694934281573592875377238000000000000", "00000000000000000000000000000000000000000000000392", "49618138352379537816414214568865623785524858425226", "56373237881552592900000000000000000000000000000000", "00000000000000000000000000000000000000000000000026", "74153167923366291226487235666253171855737795196956", "85963963123234975195800000000000000000000000000000", "00000000000000000437175636893582393946834924162977", "59643200000000000000000000000000000000000000000000", "00000000000000000000014134726589732868767816991612", "69434798143139616958959612167325337121697434351270", "00000000000000000000000000000000000000000000000000", "01265178919575934768659549548500000000000000000000", "00000000006583218000000000000000000000000000000000", "00000000000000000000000000000499872875244219288233", "21198776245941000000000838487355715923945324849899", "69797155784197259713822517377765754679594347750000", "00000000000000000000000000000000000000575796857519", "19224455659716267632272116896337416567800000000000", "00000000000000000000000000000000000000007562891871", "36988891729131964812229417914236611500000000000000", "00000000000000000000000000008883416658755559255555", "67549925586924316388552382622142734564845700000000", "00000000000000000000000000000000000000000000000004", "00000671948944418859821942774362675633977390000000", "00000000000000000000000000000000000000000000000000", "000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 353201363;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> digits = {"31581864936893142385691118977222958874265742437946", "72400000000000000000000000000000000000000000000000", "00000000000000000000000000000000000116516670000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000006629879794332878784877", "23874600000000000000000000000000000000000000000000", "00000000000000000000000000000000006457958868854878", "20000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000002334333", "35422141177186474923645918476241263992986424882387", "12826619736416683588900000000000000000000000000000", "00000000004665192517287723924115125538722831813584", "78845236727929657438576851668634611975974311927000", "00000000000000000000000000000000000000000000000028", "98664318738000000871678261631321541114109879587895", "87415834587899525942255781891871593117000000000000", "00000000000000000000000000000000000000000028493886", "84354818544998329316300000000000000000000000000000", "00000000000000772687219515173269248268969280000000", "00000000000000000000000000000000000000000000000000", "00000000000000095167865384863343575399468553888885", "26494197941192216645857587761282727186529164214390", "00000000000000000000000000000000000000000000000000", "00000000000000000000000081527898162744159665461548", "66881100000000000000000000000000000000000000000000", "00000000000000000000002716634118543126911872123363", "29335373157959420000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "07968523234618549423521142281567348492900000000000", "00000000000000021422338249246825778264872535862978", "94861133958277634734741511346335719147653183258672", "35947000000000000000000008432685791193462491000000", "00000000000000000616157678557184346426367611211395", "53117729242132444293951291223466636771148431331218", "87496752000000000000000000000000000000000000000000", "78521767177720000000000000000000000000000000000000", "00000000000000003487634934766333171900000000000000", "00000000000000000000000000092339917297189500000000", "00000000000000000000000000000000000000000000000000", "00218342763274826957615976192324292389777258343254", "60000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000693882712486", "70000000000000000000000000000000000000000000000000", "59988937936272966931788993648248696915618000000000", "00000000000000000000000000000005738861355211394594", "99928515412525776733841744191349256899396666727429", "83820000000000000008275133578586422643982518371746", "62133966621916517597543731735164566571877584898384", "39760000000000000000000000000049426934533526963691", "5349796741536186879400000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 779981750;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> digits = {"22999752186417344698600000000000000000000000000000", "00000000000000029656711649489579185896352268519918", "70000000000000000000000000000000078334100000000000", "00000000000000000000000000000096613233116237968541", "76795771782152164232220438719200000000458864359792", "78222941576974919936579288736725225500000000000007", "22794589274517823141211321875462891945912453742590", "00000000000000280000000000000000000000015356972997", "45571413383194316597237335697331243977200000000000", "00000000000000002947530000052246877877261253317400", "00000000000000000000000000000000000000000000000000", "03212815833278448543176551913731625179737471372579", "10000000000000000000000000000000000000000928326800", "00000000352529291736793174916127184339718893100000", "00000000000000000366944874484000000000000000000000", "00000000918532515819748356336364691000000000000000", "45946000000000000000000000000000055669152796218758", "96256700000000000000000000000000007151656979685811", "47349556789764929654339589960000000000000000000000", "00000000000000009475553261836229833283000000000000", "00000000000013254838961493554900000000000000000000", "00000000000001419171832687577563362233455425867832", "76100000009994954954316971419581435598156600000000", "00000000000000000000000000000000000000000216321829", "49979169341586437275795313248910000000000025450000", "00000000000000000000000000000000000002397272466634", "89847722953635287340000000000000000000000000000000", "00000000000000000000092426137254158559819190000000", "00000000000000000000000000000000000000086328193852", "34358141427900000000000000000000000000000000069334", "96967699468983262552000000000329168279165495481413", "64944966538640000000000000000000918272646329673772", "44285812978945868935895412255300000000000000000000", "00078933987000076219787395594682179891236187296131", "59519793999277365800000000000000000492476357763233", "16513629116370000000000134564456699613525637938416", "22895975979677499447879181000000000000000000000000", "00000005576664356394474820008341797549833961775852", "35761991923500000000000000000087798461677799335525", "37663746619395989811900049943738913346884992562613", "69255835000000000000000426934758721768652714865521", "12983000000000000000000000000000000000000086400000", "00000000000000000000000000000733669927841666858000", "00000000000000000000000514671686383198273000000000", "00000000000000000000000000000000000000009272900000", "00000000000000000000000000000000000000000057449587", "45458000000000000000000002571398267682842998349161", "00000000000000000000000000000000005739894114263974", "35177339135741518999122418323727000000000257289556", "18000000000028278889"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 308000429;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> digits = {"65619232833586363793632685249691957463423219744767", "72829531372226977468949346619266000000006949225100", "00000000000000000000000000000000000000000000000000", "00000000237643338489285643639968249174859217387222", "46225287813675400000000000000000000000000000000000", "00000000000000000000000000000000000000000000000088", "97100000000000000000000000000000000000000000000000", "00000000000000000000000000036182922728861262366414", "66377778391117539493531371667315152412986624722666", "83662947000000000192194316767227674829352732466875", "67586813324324000000000037539987139599315214458449", "83655343999119745818836635851154246651829477942953", "37762895295121852821200000000001712576000000778779", "37273863441792627332128614876692869973315720000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000959113716595171581955734", "87665475936698545736521555249128412433966391884944", "79875286939964775516760000000000000000000000000000", "00000000000000000000000458198382173147345698942891", "92499137000000000000000000000000000000000000000000", "00000000000000000000000000000000009939195950000000", "00000000000000000000000000000000000000000000000043", "68922495916838285132638487573967315000000000000000", "00000033134962176861328257740000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000017299146870000000000000000000000000000000", "00000000000000000000000000000000000000000096211435", "88133477978556465837665645916841535171255278279445", "28237224687526640000000000000000000000000000000000", "00663523848121279528412569852128568335619365696593", "95226861743163723431524927005916794154836711536866", "35542588437651476726465959532211116635234153267700", "00000000000000000000000000000000000000000000000000", "00000000000031661277596477954242947525519716513755", "16387992734879936575121955372282549966343155600000", "00000000000000000000000000000000000000000000000000", "00000000000997972837692161552743568155113698574172", "11256917339925533162690000000000000000000326492989", "33868641625578145515644154247661652125934174428155", "42936699911844128633000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00001257585179668574843169175253998719664832987499", "31591773227441695859671569362869450000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000423152963755387183800000000071634961", "18978357833844962722359996689811333195488753312435", "39619736229544899537664974842983500000000000000000", "00000000000000000000000000000004358553159572783968", "32819256126686997237124565453844831419366462183268", "6827"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 566912136;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> digits = {"11930009900009531575620003433700000076761064265000", "00870000000865343359700716000058100000000049000000", "05188541000000319442081363410000000000199368380781", "00000017560022836182003543415361000000223226530000", "00000037813683730000000252346731000000079791494385", "00848793000000006889270000000053310000982730000000", "02997005669193019385000300000000016712799200036103", "52000000072322000000000052500000023768683000065312", "11271300000068297573299053767868420015588756458024", "18566636300000000058271676659000000003443200000000", "09625009900723596800000000000674750000000000463452", "36881000004740000000994640003270073140000000000542", "51451110000000086408481115000000007200086713695418", "00041496463780000028000233500000000002917429500000", "00000071489210000003956616000000005286008965000012", "00000679920000002734646800099571164400181000007500", "00000837487197000000000005136198546000009222636500", "00000039800000000064458972000003100000000684588158", "00000005642460619953500000001953911936000000006413", "29900000000185163374610098200045727195313000592439", "31148000329800000000000655789332740000070000000029", "36830000000000980000008381934621800800000000004670", "00000000005918000000001819700000000012398374000623", "24212573000005350975065350000000000090000000000423", "81553170000331936900000000000342146779850000000000", "03700000000000125395700000008599550000001000982661", "00000007945796810000000000296272000004000000077974", "00082393170000000004381837461500339752215000689300", "00002279956485200000072644794690000913097793400000", "00006700000000009600000000057500000000357329700439", "00090000000097159400000008175500000065229297000000", "08717529900000000455319316510048618893000002100000", "00000532745312100008386674000000000094004314170062", "00718795000000000004629312316200800971920000000742", "36311240000009781840000008793590000041315700000000", "00878153074791760000000124273193000089976000012751", "00000000003357000000000008934400000000983112401158", "60002075500000003581830000000021858003776033356000", "00008313867510000004327657973100000000278667232740", "00388260053400000082620000001275200000284297367440", "00000057964261529000000000008860314769000007647900", "00000004744000000009131083339844000000001900000000", "28000000000002300000000000152734725700061900000846", "62183000042118685400000000093733000000000086122400", "00000000027754177100000006241400000364844255830001", "84000180456353000000947251254007420000000009057880", "00000000004976820000000003134700000007237682000000", "99791000000000087718769500001741600000041234453776", "00000008767451845800000000000573700000000339388600", "0000000663189000000343100000000000546000007000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 582484177;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> digits = {"27468990000000000000000075966632184637400000000000", "00000000007979148123174134711000000000000000000007", "13769732917278992200000000000000000000006177656237", "60000411241185217325262000000000493628392412000000", "00000000000000051152746900000000000000000000006768", "33839552192838400000336266363631922222000000000000", "00000023800000000000000000000008638661834593000000", "08272643245633575597000978443486464349461832990000", "00000000251834648700000000000000000000000449364226", "23630000000149599996742521684200000000000000000000", "00036721149931298359950000000000000000385718418857", "62453660000000000005899600000000000004858470000000", "00000009291618861184287000000000000009443200000000", "00000092470000000000000000000000661594000000000000", "00000000037273753462815422389005521900027397464763", "55881411517000000000000077563238344156974932900000", "00000000000001537999452000000000000000000000065943", "43600000000000000000130000796169161219753700000000", "00000000037833973481929334330000000000000000000000", "09349054750000000000000000000002965483758177155690", "00086317600000000000000000008919652667000000000000", "66900000023351179273346182200000000000000000000001", "54761543845426273900000000016327732587989000000000", "00000000121565771370000000017117341994000000000000", "08615622329187493210048481691982321464970000000000", "00000002862711273346419000000000000141646646231839", "75955880000000063289185571986664600000000000000000", "00713574490000000000000052225365296000000061771689", "72161526987200000000000000000009340000000000000000", "00016893465600000000000000000974899685856829900873", "16955513341585493400000000000343571913853100000000", "00000000000048658988400000000000000000771328899285", "68587874932000000000000000000000003636491000000004", "68579289836965738975000007879391224312488152118000", "00000004996428556125181000000000000005643981291147", "82625000011643392600000000000000000000544923000000", "00000004000273657977398900000000000000670000000000", "00000000815172539691600000016153966747214451390045", "48452384789857357645000000000000000000054781995200", "00000000000004226981355359224948527100002310012917", "18527688380000000000000000244742696114759130000000", "08500008687778592294977637297002215242700000005828", "42897956665682745780000000000578567173752282211380", "00000000000000000817666532913179734864400000000000", "00000000009565928845884923189000000000000000000000", "00381223948422800000492898248313163696450000000000", "00000000000356892282000523574500000000000000000000", "00913816225000000000000005791406456439000000000000", "00015719000000000000000012314562832260000000000971", "38899299520000000000000000000965937"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 501140951;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> digits = {"91151334825682981853561686199870000000000000008919", "83232957754731612436448322585137268983313952793283", "12596219000000000000000000000000000000695776936837", "78115262458547443156318376223351793725800000000000", "00000003952435925437599384971948766149251141118813", "66366682643279620000000000000000000000000000000000", "00000000000000025799918773768369222848116854841800", "00000000000000000000000000000000000000000000616352", "71000000000000000000000000000000000000000072386000", "00644123925935361852272692158473958811436748873613", "52934252355500000000000000000000000000000000000000", "00000000163543272355273457842600000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000029637277691195871991571991853217900000", "00000000000000000000525355463522974763974281551649", "46925853742485484266523166348871235176247400000000", "00000000000000000000000000000000000000000000000000", "00000000000000000006676812929100000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000039389661346972838495342292260000000", "92339533671678391891867614964765162497978127548199", "33328931560000000000000000000000000000000000000000", "00000000000000000000000000000000000000672600000000", "00017755587117197385225246869177452229279858348336", "45695000000000000000000000000000000000000000000000", "00000000006528932741291619472561222386673739256189", "35793696349598925791689000000000000000000000000000", "00000000000000000000023333212536681561421312921264", "46677829116361331200000000000000000000000000000000", "07375376623710000016127737452696712464186698968791", "26613418917780000000000000000000000000000000000000", "00978792336687589821100000000000000000000000000000", "00000000000000000000000000000000078399931166485554", "75288936481468615323931483583587767931215275349884", "88774200000000000000000000000000000000000000000000", "00000000000000000000000000000000000000002253645779", "15867746417800000000000000000000000000000000000000", "00000868843767723657234828663347323377950000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000934557598117625412813541686", "62162762625600000000000000000000000000000000000000", "00000000000000000000000000000000000000392739268523", "44279356214592763825591193260000000000000000000000", "00000000000366388841686422551983849411681732592132", "23221789938378000000000000000000000000000000000000", "00000000000000000000000000000000000000000000008943", "93322334384418314518845394000000979992342518124333", "47667113237356265113738494464115141172493464878635", "87335879840000000000000000000000000000000000000000", "000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 593907932;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> digits = {"92492595692291883986130000000000000795470000000000", "00000000000062587421340000000000640000000051763263", "48200000000613957541924300000000000000000000000027", "75186689451400000000003111215982916328722920000000", "00747275623379800000000066630000000000947700000000", "00000000000000000091158400001191000053528400000000", "00000000000687439594847581221592257480000000000000", "00000373179712298727889671813760000000029000000000", "00000000897400000000000000000000000355557314820000", "00000000039559157143266332341780000000000000000006", "00000000000000000000053965175373000009697393639221", "20000000000000000000000132276421693251929183424000", "00009628675510000000000169317793228820000000000000", "07536732817571588149560000000000000000328000000000", "00000000546415878414680000000000052862988216663287", "90016893151215400000000000000000000009261960000000", "00000000393000000000000005475479118983000000000000", "00085828495356793930000000008135922238398816176272", "90057000000000000938339633810000000000000000000009", "81435982560000000000000000003394475363851868158639", "51500000000000009115600000000000000000674000000000", "00000006488853742291733469870047878000007748323400", "00037256987163660000000000000517851600000003172178", "32751373000000000009238377512743382422600000000000", "00000006754672218489518929894000000000000000000000", "63147000000000000275117511426781000000000000000000", "05672198217592276360000000000004354949771352000000", "00000000000078998270000000000000041695422688411461", "90000000000000000002771996289960000000000000000000", "63251494212413211858779553000000000386847734854000", "00000000000000004333354347614600000000000000000000", "00057248400000000942828230000000000000000000489177", "23621326393755739486000000000000076133757160000000", "00003889116223131580000000000000000000007467459331", "00000000000490000000000000036246200000000000000000", "00043000000000043235451470000000000000322755329194", "78945261000000000000000000000977427454271000000000", "00000000000003861752459171239936000000000000000000", "00000000615000000000076175543791920000000000000000", "26112713552638659716000008237200000000000000008958", "00000000000000000009586365414817719752500000000000", "00000000000052323272663146310000000000000004367836", "63741931612480000000000000000000046962989456824452", "13672000000000000018538000000000000069000000000000", "00000948979938874742840000000000000000701614945994", "44618253600000000188952200000000000562523419149722", "71381537000000000000000056221781613792293000000000", "00000009248886889144131941162785000000000000000000", "95834283910000000000000083500000000000000000006500", "0000000000099910000000000000000000218334500000800"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 261257000;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> digits = {"89135000000000000000000962656934177700000000000448", "40000000000000000000000177163229927910000002000000", "00000000223943837176124134957610000212629639299392", "45811160000007645959110944263400076389934654164930", "00000000000000006718798288000000000000007941927195", "51753956754121000400000000000000000000003000000000", "00000000000729978372777354863000000005915184338793", "00000000000000000599163000000000000000000000021817", "10000000000021412396000000000036400000000000000518", "29252152143023100000000000000003000000000000000000", "00813414694000000000000000000000044866294843622027", "59526395386242316163000004800000057181986523139112", "42320000000000007611571475852173284479310754218758", "65733281000000000000000000000536973677923532521276", "18000000000000000000000092153262782671927975148009", "67218791315557477000000057174568388256766844900000", "00000000023593595900000818553635000000000000000009", "68333493973380000000000000062235521828490000005345", "51435419259292831480000000000000187516859896000000", "00196141976319000000000000000000151758425937680000", "00000000000000000066322400000008770002759532949996", "35416533850000000000000000000008356442778645000000", "00008000000000000082652196821857568182700000000000", "00000865123824921400000000000248597398874337504000", "00007630000000000001856775648854619322251990000000", "00014661587564863622445664800006396792393913517995", "70000000000000000000043449000035252551669994595379", "15000000000000040000000000006785754513782956217316", "40546629189244577669981993000000000000000000000001", "78929117390000005638917597733436115350000000000000", "00000000007962521782800000027858813166002000000000", "00000000526719925422251698371000000000000000000000", "01933498700000000000000000000000082322745149549142", "00000000095782284960000000000000000000000764815600", "00000000000026474000000000000000411848968981800000", "00000000000000000001644699386874160000000000000000", "00003159133788370000000000000000000559881691865714", "92850000007941318400000000000000000000000662624727", "38297698600000000006333528342684181696176800000000", "00000000451382913552291730000000000000000000002368", "48886343170000002194975611372625453427000000000066", "38957111233739294271320997234489000000531961161744", "45590144681114951100000000008195000000000000000000", "00000226865000000000000000000876727497885666495976", "80000000000000016943176533253400000432598000000002", "74116987551995941000000000737274474000000000000000", "00800825748734577312100000000000006527761862872900", "00000000002744849334431189500000000000000000000000", "86948910000000000000000000245976782251185944200007", "38356697587355075000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 714044982;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> digits = {"92769495413553239936810000000000000000000572868300", "00000000000000000000438298682415986179642700006887", "00000362447162738573721499186000000000000000000057", "77239877437636137416000000000000000000000539400000", "00000466235646779005383395100000000000000000327158", "52690000000000000755537213839285853111175000000000", "00000000000000771000000000000000384247896637112382", "70000000004959374116961289851880000006554144685666", "91103188495189096484174129814000000000000645519953", "54382400000000003214268361000034916339693370000000", "00081324180000000000001190000000024423382151342600", "00000003918835928820825754000002411820000000000793", "92812189621137200007640000000628191626900000000000", "47838381257217341545620000000000000000000000014690", "00000000000034376994763442267000000000000000000000", "07289635141338698487915100976633481000000000000000", "00000000928873744929796560000000000000017587000000", "00000040000000000000000000525953734846626729998260", "00000000218222647000000000007855681730000000000000", "00000000001783146896647530000000000018598158002155", "77696989700000000000538753100000967215313949614100", "00000000000000000000062488135300000000033358000000", "00000000000847387595290000000000000000049242426527", "10000000000000000400000000000000005311414818425564", "81356548000000000858745671563525180831229569137492", "38162000001000000000007467131431511211127737800000", "00000000000000000079995365227539760000000000000000", "00099962539244224294598000000000059726429185428158", "62000000000000000054820000000000000000000000692440", "00000000666214198235259976348000000000000000000000", "07146528373622794453730000000000100000000000000003", "67355653796589827429981000000000006390000000006147", "87128523548291255290000000000000486948239825347845", "26839000000000000000000000009566000008472282192822", "50000000000000029999736194863850000000000470000000", "00000000000016652552669846742364000000006426569108", "68485568328250000000000000007300000000000072794779", "65552162654660000000023759839513588006122394441254", "77899890000000001710000000000000000000000110000000", "06585244213759490002400000000000000188450000000000", "00000000932100000000006515227600000000001563418000", "00000000000000000443371850091496600000000568726663", "72377000442268612385345895994300000000000000000009", "53574943000000000000000097650000000000000000000021", "34983261512587141626000034200000000042278942800000", "00000000000000057914000293661458736774633000000000", "03859967362473743200000000724594200000000000000000", "00099763000000000033000035626156577991865280000000", "00000000817338697800000000000000000000000085868139", "00000000000008368230000005723965326119795"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 240436089;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> digits = {"76319250000000000000000036747364206322165544611590", "00000023794000000001864890000844100000484268110000", "00000000009528312620000000000000001480565956900062", "96865400000000753840000000000076133153573700000000", "00744430000000000000000045625300000000000074357228", "17664200000005648342210000000000118627472744615000", "00000000000625453766344008164978252940000000000000", "02957841743600000000000000007319678122300000000027", "89932268419200069343261529870000000000000000656495", "70000000000000003863244610000000082262192000000000", "00000006675765522848000377752414145600000000000046", "95167941000762256422988638000000000000000003664173", "99885416000000000429287490000032315000000003282521", "69137977000000072324243122227000000652114118700000", "00779428979763440000000000000000041813376900000000", "00000006549896115742650000000000091687000000000000", "02842747515119120000000000000615998570000431300082", "89496469761000000000000000032925000000000000004699", "57115361000009683824346648619000061331900000000000", "00000056456282430000000000666212540000040200000000", "00005723752481280049460032217630000000006231924584", "73807424582900000000024882652000000000000000568783", "30004000000000000000005983339000007242894316216176", "10000002426263953379660000000000000000348500000000", "00006721475417178830000000000000000355628168899906", "32826299200000000000831514971866676000000000070000", "00000000000087949900000000000000000878149646711526", "27000001343318735000000000622418100000000296531738", "15654000000000918477727331100000000000049953000000", "21824167000000240000000000613000359217876725100000", "00007244645960000001115664237980043856659665270000", "00016952977534146340134233613674450000000557349442", "95568374000000000000009743416540000000000196778783", "77997000000000041855000000868734894160000005287931", "41410000000000000084656999778100000278295000696142", "29000000000000000485523546346800000000000000074624", "68572391300000000000002128579000000000000001651864", "00000000000000000700000066924586111996330000000000", "00000055725848319817956000000000000700414700233948", "20000000000000560000006878247000000000000029289666", "57721677000000000000000004774866800000000000002753", "18180000000000359147135212790000000000000000053000", "00000037956500000004358597934322789000000918582759", "06711939413564420000000000005764369734397300000000", "97935719000097200000002362979772994227073664000242", "52581200000000000002327000000000009650000000000000", "46657795863000007985860000000084229200000000000000", "28000000064693425472985024500000000005192435200000", "00061757589210000000000000099922840000034926880000", "00000000056425939294270000000000021569000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 784772420;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> digits = {"24711862559581683275984600000000000055672641549936", "87176000000000000000000000000000000007534763369358", "33216844000000000000000000000000000000001540000000", "00000000023333386229832240000000000000000464119761", "48565447914392470000000000000000000000000000003816", "63260000000000000000000000000000914818575861716274", "37992657823295562000068357447345739287433732542285", "19000000000000000065900000000000000000000578284557", "68147300000000000000855352100000000005391349353133", "38400000000000000000028523182615818393283217920000", "00017226584541763894599986832933159762000000000000", "00000000000000000356269768327164556500000000000000", "00000000000000000000087940059732927968100000000000", "00000000000000000000000000041852959912132000000000", "00000000000000000008836915881000000000000000000000", "00000000000000648994568146112982936718376853656142", "61000000000099849427300000000000000000007921752122", "25231857786426882722664696910000000000000000000000", "00000000006824545241839683344628431368719434367840", "00000009456541233138843425300000000000027896641162", "24455722313200000000000000000005151000000000000000", "00561151654886247000000000000000000000000000000000", "07564571629366417267239518335354791342000000125756", "95912996227556231367634324450000000000000000000000", "00013763425752700000000000000000000000000000000075", "26661376123463437478653969000000005543399997568868", "21937817700000000000000000000000000006228741234887", "76629576000000000000000004553414815420000776685573", "48717198378296565942268870000000091524745936976937", "76000000000003170000000000000000000000000000000000", "02885335315289199714871535568593997000000000009113", "97498992367451688384362243390000000000000000000000", "00004713132338356833246889526949195211890001000000", "00000000000000074996523767172492858925916421854391", "80000000000000000000000000000000000000335776426310", "00000000000000000000000000001139358553655700000000", "00000000000985625457230000000000000000000000000000", "00000044432185478354691618580000000000098986975312", "61871186550000000000000000000000000000000000009259", "60000000000000000000000000000000000087659851936113", "41000000000000000000000000000000008735822488938847", "21869976613611668820000000000000008847381390000000", "48696841392772698595363934251184692894500000000000", "00577493321751170000000000000000009625492373187867", "24231655397329758166152000000000000426675354719878", "45581255839200008387354816188712969298844000000000", "00000000000000000000000004466929543169315884665646", "72176757814320000000000000000000000000000000053945", "87571799548444532450009891292377963911437356123924", "30000000000000000000000000026473726912113"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 744204840;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> digits = {"89938348444781927884900065197392786513000000000000", "00000000000000000000000000032684227540000000000000", "00000000000000000000004970000000000000000000000000", "00000135978222943324561626000000000000000000000000", "00722167245698700000000000000000000000000000000000", "00833938826482400000000000000000000000665296353555", "57110000000000000000000000000000000000000542115752", "75516775111350000000000000000000000000000000000000", "00000994474461449435253883179273928637571272000000", "00071326928934538268149698134317755521000000000000", "00000000000009459126894195979700000000000000000000", "00000002994531193737500000000000000000000000000000", "00005568958267726149770000000000000000000000000000", "00000592376794442521274144647349156472198000000000", "00000000000000000000000000000000003821919177645429", "83000000000000000000068000000000000000001962493167", "99464535433218149413241622459498000000049567443528", "37429313374244174853954394491420000000000000000008", "47553392293459733313227595757459935768000000000000", "00000000000000000061327729973578998413276525847273", "94559420000000000000000000000000000000007759514494", "79252615900000000000037716113534641266996939873782", "89417299946000000000000000000000872169159526918166", "68672431798319533761262000000000000000000000000959", "33391881738379837432532000000000000000000000000000", "00053849130000000000000000000000000000000000000025", "46246191399750000000000000000000000000000000000000", "00000072145685618762185172960000000000000000000000", "00000000000000000058955614818441953768642197686734", "11131543990000000000000000000000000000000000000000", "85536175790000000000000000000000000000000000003663", "82345467156469535000000000000000000000000000008653", "95458248362411993985860000000000000000000000000000", "00000000002928198513528585488436614622861629257164", "31900000000000000000000000000000003559427726357974", "79183824772614245600000079957311419766265748479342", "49612390000000000594190000000000000000000000000000", "00000000000007933221512113000009382577620005333731", "81118915662768737895647137111373500000000000000121", "27962519694942100000000000348641595448173513188470", "00000000000000000067988339438795497136756399359428", "89151329000000000000000000009675243886672661641182", "42533649400000000000000020000000000000381994494141", "61687897444498214879534479276300000000061673574671", "43434717386100000000000000000000000000000000000000", "00077962000000000036900000000000000000000000000000", "00000001000000000000000000000000096348410000000000", "00000000000000000000000451232676638374865000000000", "00000000000000000000000000000004622000228764351000", "000000000166739858425844578672341398639548"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 373311206;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> digits = {"83000000493881647648686600002000028324534800093265", "84000000000000000028211236653515480000000000011000", "00000000491374934363721256200000000000000000097715", "88188571412930000000004690000000000000564242257411", "90000000000000194098622259852865947950000000000000", "00000115123284773368938800000000000000000000026200", "03965452000006859300000000000000000000030000000000", "00000026487966113800318945000000000069969934462884", "00000000000000000000694100000000000000000000094867", "56000000000000000000000362264710000000000000000000", "00438971622963877441000000000011922445000464460000", "65184226996242890000000000000000675752963196362000", "00003300000000000000000000867967444600000000000218", "00000000000000000055725430000000002795286561414936", "61645000000000000000044232160778883468700000000000", "00008380000000000375526000000000723256489000000000", "00000000000235590424798875210000000000003400000000", "00021482355839468747000000000000001427566128436100", "00000000006747599600000000000000006697231352100000", "00700000000000000000000074281276898823914005142683", "13298729787148004291583679731122717490002600000000", "00007242325637618746556000000000000000000000362415", "45597676000557416683100007652494174487119000000095", "35297246840000000000000000000012900098936983689318", "91000000000000022900000000000001843600000000000000", "00069243450000000000060000000000000000491767718928", "58318763700000008827772270000000000000850000000000", "63281784952154580000000000000007384932915735162005", "44300093186318940000000002687388250000000000000000", "03553900042147514319846186656000000000000000000092", "45171391000000000000000686000000000000000000001295", "83191564750000000000000034627433174335467000000258", "00000000000000012117939000000000000685627340000000", "00000059222630000000000000000000005148622121639390", "00000000000000004341430000000400000000459235228462", "12413525800000001681839196779923683300060005854242", "77195544416695000000000000000381618989831832784510", "00000000000000059417177793800046555400000000005193", "33719200000000068353554453535307786583860000000000", "00000419461145941936200066574743300000000000000939", "52334630000000000000000000979512335642867760069639", "18361317721000006594282100009424969000000000000004", "67517447317000000000000000000000877000000000000533", "88690000004735300000074198435255541514256900000000", "00000000017397185000003877336614300000032000115172", "34214600000000000897985000000000000000005642466876", "74930073245472872940000185520000000000000000000021", "51878113932915277000000000000082527457161990000000", "00000000000067934972459317990000000000000577009758", "21744243297700000000000031912755239686"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 506812636;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> digits = {"28263655854685257957772357336469799456138113396624", "50000000000000000000000000000000000000000000000000", "00000000000000313569324519511338347967183686999000", "00000000000000000000000000000000000000000000000004", "77888866176437721871139348434457458784847395617932", "24784258282180000033225464816556267311295195487336", "21841320000000000000000000000000000000000000000000", "00000000000000001958442512522973717377869548678835", "52414773938673239257916746715500000000000000000000", "00000000000000000934786326979974328285251659672777", "80000000000000000000000000000000000000000000000000", "00000000000000055981247266266432949579718444282469", "43887155812115446000000000000000000000000000000000", "00000068913354137396973981160000000000000000062848", "62738542893724955446514484414421396346954884655827", "52678689000000000000000005745566113752253763223996", "15395100000000000000000000000007473444796649623318", "65559432544000000000000000009831526000000000000000", "00000000000000000000000000000000000000000000056165", "00000000000000000000000000000000000000000000000000", "00097593769981749743442197529842588166836000375658", "79365966619426400000000000000000000000000000000000", "00000000000000000000862718212332429928422195258527", "62592764386962584588528618668325700000000000000000", "00000000000000000000000000000000000000000000000000", "19795872619000000000000000000000000000000000000000", "00000000001164336411821168727614291263579834425675", "63494932741957000000000000000000000000000000000000", "00000000000000000000837654362375245355798423364766", "73777653982899323477713769196000000000000000000000", "51789994154165815485412455673636743493381157398976", "27531893419900000000000000000000000000000000000000", "00073734677948919639614193638967692255177599875451", "66376116247758882280000000000000000000000000000000", "00000000000000000000000081400000000000000000000000", "00000000000000000091677773364642416722338682125200", "00000000000000000000000000000000000000000000000000", "00000000000008600000000027160000000000000000000000", "00000000000000000000000000000000000000434834911867", "49159820000000000499934875895453631386418727875831", "83723955788400000000000000000000000000000000000000", "00000000000000000000005000000000000000000000000000", "00000000000959155858719971951245276416538588654592", "58251325457339729000000000000000000000000000000000", "00000000000000000003957991666275171659191883735229", "87665635449766926896325795492591259661800000000000", "00000000000000000000000000000002794517669749722966", "14275425464345953549465361526872943000000000000000", "00000000000000000000000000000000047257723770000000", "00000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 743024775;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> digits = {"38388519816697719919581668815493247111276956177039", "13463416851694301000000000000000000000000000000000", "00005593512831155829782242539673826547274483271669", "96188580000000000000000000000000000000000937563859", "36800000000000000000000075149559938495698483848727", "64000000185182729736972923959613981723754670000000", "00076185841736574933661935947912753756913300000000", "00000000000000000000000000000000000000000378566399", "81642624858616579467476431154586255535964493900000", "00000000000000000000000000000000006698259438810000", "00000000000000000000000000000045587964761793571326", "92143252445118758382000000000000000000000137746969", "33653949297361631936625145934500000000000000000000", "00000075732764539263729611389445152651635622776496", "00000000000000000000000000826228787161848354682700", "00000000000000000000000000000000000000000000887533", "69221617732782900000000047461241473956265351261468", "65325000000000000000000000000000000000000001719618", "29661429699764697426515365000000000000000000000001", "61946238493540000000000000000000000000001472322922", "57111346238350000000000000000000000000000000007197", "77985783476622261629713677000000000000000000000000", "00000099193455612839100000000000000000000000000000", "00000000423000000000000000000000000000000368494738", "77642637645148000000000000000000017677556182461526", "79691872782169586525676316817551183550000000000003", "97618253284877643900000000000000000000000000000000", "00000056913987398836722716382348294833414848940000", "00596763539773516493973410032282497346360000000000", "00000000000000000000000585496975843668282418315634", "64266442340000000000000000000000000000000000000000", "00000000000005147500000000004382669718817353958652", "62949355584194122575651840000000000000000000000000", "00000000000001449493446455984624519735972257738341", "16000000000000000000000078412158994374188832417336", "71473547267483187346240000747432274266488587329296", "74000000000000000000000000000000000007927743822124", "61516585500000000000000000000000000000000000000000", "00000000000732769566556388132796933334184638553729", "35838834674000000000000000000000000000000000000000", "00000000007648364679196695779161557155823173993786", "69329940000000000000000000000000000000000000000000", "00000000007241711162441476699525112773818332893500", "00000000000000000000482951116853654383595995564575", "88311827979636512267298786300689235235479633460000", "00000000000000000000000000000000000000000000000000", "01979000000915596355671314715621823282548500000000", "05585863254295620000000000000000000000000000000981", "56112149854159441642294218543969000000000000000000", "279177444333314696919"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 209129524;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> digits = {"32912675417643496968331457924229547249379874736596", "97155158679994449938522294754189475161598000000000", "00000149477191388894875527290000000000000000000000", "00000000000000000000000000000000000000000000004426", "68475142822969814382864000898585498414312783395471", "26893624183386220000000066635178744655292261146232", "92215574724274927186723342732396500000000000000000", "00000000000000000000000000000000000000000005984362", "96843392555529159840000000000000000000000000008673", "57265453379572595126387981188472386987823249778275", "80000000000000000000000000000000000000000021833649", "93222346332149762400005316466315377827263359782769", "57152357294256646954236245188444688364838794600000", "00000000000000000000000000000000000000000000000000", "00000003193413595333245614655981984531736622752462", "63492926386528446247189324696911461386913083136654", "49249484128181439972330000000000000000000000000000", "00000319866930000000000000000000000000000000000000", "00000000000000000000000000000000009272513548542772", "98672600000000000000000000000000000000000000000000", "00000000000000082292560000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000003516145585577758988379632239222393879", "00000076162632517644876413329176526847418232828815", "58475729431923813343827177132423563000000000000000", "00000000057136318286494462258862518997478934233298", "98737523387488411727316721873381356812765700000000", "00000000004129719536913181286186632416314734100000", "00000000008419525700000000000000000000000000000000", "00000000000000000000000000000000000000000171649136", "96971294662626577637261511533940000000000000000000", "00000000000000000000000000000000000000037379493954", "67487458725812411297292823634395928327431612515651", "62834000000000000073926416491223682313964869415381", "68523342182882357847117651677892926761588795456461", "21264959680000000000000000000000000000000000000000", "00000000000000000000000000000000000000000627641181", "54746464613428575428853234197349138974267778143662", "48544565369736596324446000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "01126632723442572317287364194525565797278194138489", "21515900000000000000000000000000000000000000000000", "00000000000000000000000000000000000000007748333741", "75218141224599947177115713267362158618154691632586", "45529813445400000000000000000000000000000000041491", "38722165596383991935899373863544837579872357848739", "53424947528866959473715400000000000000000000000000", "00000000000000000002851215643100000000000000000000", "00000000000000000000000000000000000000000000000000", "000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 923046163;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> digits = {"34342151862000000000032472718145980000000000000063", "18128429900000000000731365961000000000000000123173", "39792000000000000000023574382369370000000000000000", "51670304795232775929630002159486005273000000000000", "00031239887620000000008497700000000000000092529613", "45912000000000000000048862900000007416218000006137", "52677000000037846276000000005800000034457000000000", "69311297630000000000000003100084621378235720000000", "33531000000000050000004316572600005200000000000004", "00000000006191823800000093262136523253530179000000", "00000034845656918421100082678430000000000300000000", "00009393860058226488300013585529850005894215851843", "50006888174437000000000042116496658500000002689762", "98279171300000005391542267480000000056819124490000", "00762631857962917000000000000463657226348200000000", "00000000526142759632280000000000718421878000000000", "00003925680000000000000062537555778900000000000530", "00000000134346193000000000000000049277993169447300", "00000000000028256984820000524252267550000000000495", "02005654741331341640447999483000000000087447569252", "98982000244000006264144684981146000000000008388552", "45120100000000000272396400053168600000000558000000", "00771211621247456600000000000000843266763617616000", "06143979830093466363210000000000987281138660000000", "00000008144266750000000000000001554745000000007000", "00000000009475141258300024358362400047926978279000", "51395118572300000000000002775628332897393000000000", "04287631513448043958228924186000000056749000003478", "44579900000000001763544576982260000040000000000000", "00080000006489818200000058812256007000000040000000", "30220000004626698687000000000000004262329647426576", "00000000005699562285952000000007853200000006929834", "74315994600000000000000005855747389237951000006863", "91180000000000000001461325541313280000000000000004", "26252630000002433686435296396000000515537400000000", "00000003731770000009198654380000000000000000781836", "85566198000000006928484000000000000000921000005000", "00000003596626394504815580000000050000000000239338", "66156900005496154652000000879600000000000800000000", "00000000530000000000874221484258800000000001933900", "00000000000002789000000000005518538000000005033800", "00065429199700000000000004190000632229817914657400", "00000226000000000008165300000000000002200000000000", "00188187677380000000043394000000000052178300000009", "13287000029339814422512000000000000251929457438000", "02347280008483800000399885162200000000000000022649", "16134600000000016115122552620000000784274485869860", "00000000436600496000000000318983976800007712815941", "67245800000000007853933315691200000000000000884483", "36817235410000000000000000591585398575000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 409403841;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> digits = {"88603533717194698387159353993892131954000000000000", "00000000000000000340000000000000000000000068783834", "27000000000000000000082103763991291356374121446195", "54591824600000000000000000000000319255316868000000", "00000000000000000000000000086557962416437464325498", "89167700000000373478929836919624356785561580000000", "00000000000519400000000000000000000000000812769663", "42300000000000000000666548857633467762842997642775", "44900000000001883390114821792454975196952100000000", "00000004548578000000000000000000000000000000003392", "31882000000000000000000000000000009456885948583132", "91738339334375700000000000000000000000000000000016", "33159775776881744886578645622184100005168266693210", "00000000000000000000000000000001200000000000005226", "38573126700000624970000000039524648193864239000000", "74226173400000000000028629875483139388960000000000", "00000000000000576928751482585539788496284665146523", "00000000000000000000000001657464877735497200000000", "00000000000000000000000018514989423797862700000000", "00000000000000000000000009776198539243792886379224", "78981311687100000000000000000000000000000000033457", "34791515000000000000000000000000014462969671639578", "80000000012486622517289416925735454465279000000000", "00000000000000000002222283938219256965941200816365", "22000000000000000000000048364412771218817269423246", "29587932000000000000000000000000000327683155196141", "38832886156420000000000000000000000088645326775856", "41478600000000074282247759885269859000000003215670", "04000000000000000000000000000000000000029634842633", "86418776669770000000000000000000000000000000064219", "50000000000000000002351409714751759982469751441238", "93896900000000000000000000000000000000000006487553", "27634711934725600031338262499273568112345341500000", "00000041277811769274533957129000000000000000000001", "22774131941277153873200000000056611937946773229253", "68281473396617000000000000000011692197122987900000", "00000000000000000000000000674823183388444717382716", "69754359222000000000000000000000000000000087533537", "81578979723576412241600000000000000000000000006612", "16887457151545320000000000000000000537843333194635", "99352159424818595823000000000000000000000000097292", "54758834237100000000000000000000000000000000000221", "26415297546725938527729111368831900000000000000000", "00000000940000000000000000000005488468297646995917", "52650000000000389952391421221947362399770000000000", "29925566700000000000000000000000000000000000094626", "59461181794738112258800000000000000000000000000000", "96538442484746241384353500000000000000000000000008", "57230000000000087714929116686236373918733149100000", "002562836000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 395303783;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> digits = {"40076700313004960001007290064610087000470000292900", "00769000588200031800400002001200004000177062100001", "17000056000072100118023000078390004140380003510045", "60017000942500200002009000020060007074000041506000", "90009622000267300008689007009000095500900560330000", "60003420300006143000090008543000025200771600001632", "00006396000300083470000240768200001209619007000103", "26700002585009500002000092640000122012400074840131", "00078570000600006096820914600800649700002500004253", "00002420041000035780000320043000059600541000082700", "55100321301753001000240004005536007000100081390004", "00590000148000030000251000798000037000662806730002", "87600860077011450000860900800531400004150985404968", "06811098500005310892000021000085300005000700044990", "00020016000052900024870062100004200328005631005000", "04095150001770000375000070061008240002002000100907", "90009067000714500060611009230039470007795000059003", "50002100197500006900069760004000502745000040079790", "00035000033060004648000110000979800928004490000180", "00030002003000036220921500004700003520089500007810", "00110002400006600005200200659000072730002874074870", "00360001300006954009000060001574000604669007200060", "01320050050600212000980137705696031600500030000883", "00009700008960076300040000720000612800090600870004", "89000016550008624009252003251000669500861900134700", "00600085500002002000072720077705901909000026640000", "80008000293800400031000099370374021440418900006000", "04420861005757000779007990000800007730000234009300", "56200900740000700346107800084000786004007100076000", "75710155900021200236902250000783800003700004880000", "37860500404524000090009940000900026000079200005540", "15000038903850004534000014280007836001937006600008", "14900025000042150900420125200005187000200084460009", "40000938008520073300667066098800600623400004150796", "10003077303460003190006927000500002000800001790006", "00060070050008690408054420007104035081409528004515", "04600820000200809080000308600255600850000801895002", "00004700775090030510552900835300003000200009040000", "48000154502810040003000634000659020000500785400031", "93000060081990040080009592000074042600001400091900", "98000100009764000143000931060370065900043000044075", "00002000058450000400044506990000686703009700850052", "00099300071520080006900007888000034400039760001077", "00030091002006325000087209008560000424307900762600", "08408000620000800061200046000078002870045830012025", "61000573088095860001460688700430000189000032460000", "36004005106132015057300656006446000400008070032000", "33088490405170367500431000085000820037860795000900", "90008043260000912600007241026300939200003620000904", "00800009093504930008205600618000554001102857000644"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 887072579;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> digits = {"39200000000000000000000000000000000000000000000000", "00000000006456182335697469828291366229182566549555", "63464814433498594486180001350000154386443391895287", "58254467247273995443952651695837896220000000000000", "00000000000000000000000000000009331586499698329415", "71673914918798557522495831880000038761692271154000", "00000000000000000000000000000000000000033644499667", "29152548916818112873876843551444768124241429759321", "72471400000000000000000000000000000000000000000000", "00000000000000000001597857492829373261756896441586", "16715346525139746851477561772656461963388500000000", "00000000000000000000056663962586323922645451219963", "62643784463795744480000000000000000000000000000000", "00000034664966845984412599751998262816985964544716", "94786152587579578600000000000000000000000000000000", "00000000000000000000000196934879172733452544144217", "32321782132999576247334164240000000019837758813952", "19425751785369514569793999187358339351586526000000", "00000000000000000000000000000000000000000000000000", "00000000000028800000000000000000000000000000000000", "00000000000000000000000000000764590000000000000000", "00000000000000002894659317500000000000000000000000", "00000000000793664385321350000000000011663223634813", "28383486862000968852266975227966866131963531961000", "00000000000000000000000000000000000000000080000000", "00000000000000000000000000000000000000000000000000", "00002267434851532724154978932733845817169979177375", "40000000000000000002143152324361627422310000000000", "00000000000000000000000000000000000000000000009681", "85666893197756565965764649921919981926793951867869", "48119834177376929325000000000000000000000000000000", "00000000000000000000000000784000000000000000000000", "00000000000000000000000000000000000000000000000095", "72771928184113312927312957948863702731255855243167", "94995224958278475332776898974277494129269825000000", "00000000002852749597678334587381934748334181892177", "33446687284548884798253328457162420000000000000009", "59977251378573799512353956788237145292458994778471", "36397118000000000000000000000000000000001639566822", "60000000000000056451485776573454658377920000000006", "32896937148618549288241757718451568959176332123482", "70000000000000000000000000001917875477192341269892", "00000000000000000000000000000000000000000000000000", "00000000042912175151857983838957684593186855471493", "88539217224545862797419228277847270000000000000000", "00000000000000000000000000000889823193294168566779", "96111892311351131548385213495658417443200000000000", "00000000000000000000000000000000000000000000000000", "00000000000087874486762766479912976764269329445527", "8342536362693635732855282"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 55821713;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> digits = {"46376100000000038356000000000415120000007451377760", "00000815241300000003100066118994600000088100000007", "32810000009319739900000004390000006800542529500002", "79900000000069976000000009117900001154670004219830", "00040031227984000000000268363800000000354443921006", "55487607015313456100051187392500000048559000090000", "00037847400025921000045550500830000000007161549300", "02397339009160000788548966000089464140000000883106", "79100000000056000226982165000295320456006883669002", "96000539000915160093963000000385345880000028890000", "45237664000022000000831700020000384175560000000009", "15470000000317005915135270000000470083155449600000", "00147437000000130000000023276144000003610000000017", "35471000000091388000039500000002417629900000014720", "00000000628249442000000000381332000653912000000863", "85840000465846700000000094351908722338300000000730", "02636349380000000001748780000004447136900000002661", "70000319600000000582200000000086328318007184000005", "67072879270004646700000003742138000087600081449680", "00000215785130002000000000169332570000000005148700", "00000008481700007000000008565000090007751000000535", "36400078564120000000692947600002845205319576180000", "00998480754658130000077468786300000000094900012400", "00004585000715734000000019439590000318008441900000", "00760000732000002000000007938284320000000022749587", "70000000008000555261200000000106621972308857482400", "01620723349000008323000000000199281000099710000000", "00674148702199670000009132678037763260000000080000", "07434498000134900000000058100007755786250000008400", "59250000581498900000094593008077850006000004676770", "00009110099000000064000000005750032382669806722265", "10000000008300000008400000000094974624100000097008", "98700000811662200000006987818001810000000677655123", "00000059000000022181149900000042680000000020000000", "73658000564090000000098947808299017935800000073513", "88300000001385953450008001848000000718005724508636", "60000000002257361200090054179500000000900044464000", "00000478531009005250013932814600000093008708000742", "43000056217000009000054375100000462784000682160000", "78751799400000009970000041300000354000050000000040", "00799535640000027410000877000000052000062890039900", "00000001665110377000000000784000000086610000084100", "00893518410000000069000000000517892057217800082823", "00009306227856908200024570000000007748600000720000", "08914400004139398000014196400000759774311000000001", "93330926000048592810046274000000000327920016670000", "00000430773762047933873007285600000000043151552404", "31495375000005000022283000098590000000008620000059", "50094000000000930833393000000894440000000428799270", "000000005000485355950000000008336294450000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 818970085;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> digits = {"77603258400060000060435755700048595000000023900000", "07135500038272100010000025432550006168490000011281", "00785630000600000008158000000195800000001414900000", "03289828000769161300068651000017273830000885305848", "00000097236840000002313000000084000005060000046005", "60004779870006767000007858340030000004460000002000", "00051797000182983300401000002853820000000730001190", "00000940000007700000927660756000229745500210001392", "44200000005000000624004000013657800400000003896700", "00492000002000005890900007156083891130009859681000", "00064939500000845625409300000005934650000458067100", "82255480716777500702927200026145720714601220000059", "84095870000000133146800400000002200091193100001245", "55403000000016399000000064888580000006800000018000", "51831000811169800000791960001219800000974490000038", "27500195000000543660244904500002000684000080000001", "58351000008733380000002982880009000000953694500173", "40069546150000007393000000544042344000035000058933", "00241680218500000255900008527432000076870083496008", "73000009001578420046008650000000670025463470002638", "90000377550000000624380000067955520005000008500003", "50586500070000328752007172147000472145200000700000", "01190575000000014001000698256000000786594900000007", "57160002928000000844400007780000000340000087490000", "05820037906250000009990004200058009990000008611003", "58897700000009798008423240000005430081968000000020", "00028425000000269400002200082170799000007232980000", "00013743000001355840000059566000059650000800000040", "00034000900000004849780000007132290004005594000004", "24343500000009866816000000100008535810000329200028", "94789000000080009495340000152423005730000005654848", "00035549400003489000004782436000616949707000000051", "00009385571008093000552636500000443000000200035001", "33136400000183612000008327400800000003261007514200", "02900000008766000144334200000005246000004000393445", "00000032875600000481754000000052444000234650009400", "00000500000040000000629205716000000061229907517517", "00000026460464000100004592300500000042587000593100", "00000584100062000000027600006219800000092266300060", "00815610007951000005889210000007420000000614951600", "00020005111000000187000000047655900089719094720000", "27990002850000009700005000000390730009200000090045", "63000000393400000181297000028792240000530000098852", "59000341500564990000684159000000017000002620000006", "82100006871000000736500054200001544700078295300048", "22510000005000279044400000094730000000597000000900", "00459704000000383000845717007547366000000010000002", "91300007114000000036560000058250000001789400064141", "00000490000092201746200000006213300069931300008750", "00610035148640095507329000000971630664990000000430"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 686999995;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> digits = {"63500000672300004053806516370000026300032100113000", "82166800000555100857071490000042637090002461870000", "00844100005150000081600000770000007400000890008486", "88000990251000068886801492000019980045250000006457", "00000030047760080000094100045650689059000000850000", "00690000001700858176078698000058480000006000181000", "00596470046000384059107500000900000079426036277000", "00099200000048725040158180000004713870000980000001", "96560000027327606000142000785171000235700003657570", "00000344577000000673500064100884005126100001158780", "00083500723003848059000876550016140000023900300058", "29620007482300068190000900090000400000080015161500", "00394000473095380087220000700001290000005753780006", "88700005920000008916000000570002190081097000280200", "35154076860000325140004100042153700000711900930000", "02200000094157086100000096200000750085094882033912", "50000017597400000015655088073550000004559500008296", "90000005847000000549313000008880498629009510000005", "53142000000668100001500044290000700000074399600000", "40000414555000543300600268747000000861000055100389", "39100000099310031328006230003300729320001500083000", "06000002008689007100000320002760068991900001000703", "19887018441400063054760000008139560000811770000027", "00008127008996500085412700086203000072068693300293", "37407433000009890000553832000300200000852400000760", "00983800054000006600007000200000053751805130000900", "00004800745110023900536414036924800964510000381000", "00480000120000004417100045959000065000005382075643", "30000350846600001700442620000009959000072194800007", "00005424700000751000000424940120007117680000692034", "89500000035763500122282000088000009834800076048976", "20007649200009913700030000497001300008587630449000", "19866100001850000013260021952900000600090000008795", "45000009959049900024510004713680000031798000001541", "15000006028236000100240195000093659200000023780000", "04870000064000090004623500084009889051391000067385", "00000040006384600006300001000022000000700000616810", "39002230000135160000003460000002824000073727500664", "00000187148000050453787076330060001958750389500017", "80760023133300000077000005455980000935248006997990", "17000645127008446200180000008831750000828204400000", "41164208584000000638003828800018720100001117310000", "04558903100000930000700000100994202689330000052029", "40000012450474981000500011000000247160000052776000", "05613400000045410000957400062500092534808005600035", "76950545370000006000009000004300005800000933300005", "30000093000000153000002639006100082353400010700003", "00000183000054850000020007725500111066828003545000", "00040000001359907069500090000055159021800087000004", "80000066800224000000900009000003906484001100015155"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 75100796;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> digits = {"35889536711964923873875859483721164124000000002118", "32568887000000000000000000000000000000000000439993", "57131519955523639465124713976585763447659000000000", "00000000000979576172941833968748164981600000000000", "00000000000000000000136394779648738140000000000000", "00000000000000000006568494349200000000000000000064", "95811328496297779213157846786474198000000000000000", "08222121661244339683414879348665697300000000000000", "00000000000000000000000000000000000009359966511844", "38212122756755692283572219500000000000000000000000", "00000000000000000000000099515774382389951243477633", "54317726767833125300000000000000000000000000000000", "00000000476516141916811327858543981458327300000000", "00000000000000000000000000000018146721000632393927", "22288272145775677480000000000000000000000000000000", "00000000000000000005523875114863116891229774000000", "00000000143222641177318792865647858393338499899162", "54263420173377542655348947725929529636185000000000", "00000000000000000000000000000000000000089227437261", "67457332929591660000000000002624810004258819515156", "65599439485655959715648736879884828910000000000000", "00000000000000000000000000062438565482271124841545", "95633471129748661100000000000000000000000000000000", "00000195589853544999996788216581426683656293000000", "00000000000000000000000591381600000005674122741791", "25733288138999843476656118546000000000000000000000", "00005423971467317592800000000000000000000000000000", "00037993433691162178828774971924428000000000185942", "61289263789333336811881467757337866958657833380000", "00000003845638848376876315943236497729947300000018", "19965871667493600000000025657318978200000000000000", "00000000000000000003261996526869746334389916894936", "63895868856761868147000000000000000000000000000000", "00000000000000234851177255841324454316556377124343", "73766791635674000000000000000000000000000000000000", "00000019275186169132144495465824620007973461686289", "70000000000000000000000000762781631244166463190000", "00000000000000000000000000000000000000094231429846", "23629514418912440833516542370000000000000000000000", "00000000004674824429233812816991000000000000000000", "00000000000000000000000000000000042148286899155143", "58371667428933216197810000000000000000133638119847", "35147887975166624567841666650000000000000000000000", "45728794600000000000000000006622837249918948877639", "69453773355348343649700000000000000000000000000000", "00009626398244274651426587592959198617511171469876", "19476000000000000000000155121295535827386166576928", "57175494947612673521528771000000000000000000000000", "00000000000000000000034764356672431643369831615000", "00000000000000006711937"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 984128991;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> digits = {"89617547833344273125798366346241729296657864294365", "18373200000000000000000000083761124653826470000000", "00000093974132168435413679128141169784286439116452", "93000000000000000000000000000000000003226734638538", "17969882224846126587273812000000000000000000000000", "00000000000000000000000000000000000000000541668362", "51641732954291144776587169173525400000000000000000", "00000000000000000000000000000000000000000356593518", "70000009669359788248627949856519836724173364000000", "00000000000000000000000000000000000000000000000000", "00000000618479197638463317400000000000000000000000", "00000000000009367294346447874812365847192880000000", "00000000000000000000000000000000000031482912344395", "37618219428531224128141000000000000000002717873515", "74754217221663121000000000000000000000000000000000", "00000000007533845379289390000000000002667285542673", "95886947496386838638524343595000000000000000000000", "00000000000000000012228896627581296000000000000000", "00000000000000000000000000000000000000000000000063", "99397687642715246731886642118918400000000000000000", "00000000000000000000000000000000000018713458717812", "22535694117783444398557976991826231700000000000000", "00000000000057863348999672537663177497335438833884", "56868162318176726855560000000000000000000000000000", "53489383141133120000000000000000000000000000000000", "00000000000000000000000000000003545471493239189833", "23681273323695719577594876894491257621156700000000", "00000000000000000000000000000000000000000000007487", "94818947643884753328159861521448384394764245135359", "58495744171562800000000000000000000000000000000000", "00000000000000000147169974217538797156779775242868", "27121825419700000000000000000000000006345884652373", "78771963561465937323480000000000000000000000000000", "00000000000000000000000000000038596557871263668918", "34278132791615525531869622323539823129577800000000", "00000000000000000000000000000071441768995671000000", "00000000000000000000000000000000000000001532779435", "37353712590000000000000000000000000000000000000000", "00001774153272814719865689442371295191576892154366", "27870000000000000000000000000000000972826285258775", "50000000000000000000000000000000000726837573537837", "96178299625283157937588514915800000000000000000000", "00000000000000000000000000000000000000000000489551", "28268595713368327135158197534496196272800000000000", "00000000000061554624200000000000000000000000000000", "00000000000000000000000000062169824732448287557772", "13857129951815448768453929920000000000000737995565", "89999193138593293394851915214758969538429552634353", "61750000000000000000000000000000000000000000000000", "000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 792696909;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> digits = {"10000000000000000000000003485325400000000000000000", "00000000000000225751527934783112369675734912789968", "78474460000000000000000000000000000348553312448239", "56462439000000000000000000000000000000009752234717", "28254995000000000866292226513561646773572512523149", "39000000000000000000000000939863449854156497000000", "00000000000000000000000000000000007625170000000057", "37522200000000000000000000022677350000000000000000", "00000000000000000000000000698852451768581836715721", "45149000000000000062342197937258135619229461132945", "50000000000005912471114600000000000000000000000000", "00000084883224396700000000099175783885899159762357", "94999976524600000000000000000004429337166922492155", "97266300000053846189646533973893894052182989885631", "13158252355742162516415342266992300000000000000000", "00000000000000000000000007926611494831752123465489", "62551719374600000009762717751235448816174985771817", "62000000000000000000000000000000000047993968392748", "95176284388172658375449252869132100000000000001328", "52156985419692289591413688997259188584119000000000", "00000000000000000000000000000000005898998773631835", "78584459250000000000000000002964591586946164143844", "58364489258200000000048168194191911681000000000000", "00000001672898177518456752147317447885199248380000", "00000000225881612826548260000000000000000000000000", "00000000000000000002555725362985226786415897136924", "53900000000000000000000000000009547571159936341489", "47698451000000000000000000000000000000643431386663", "71429344764245821541619000000000000000000440000000", "00000000000000000000000000000000000000083842262521", "49315221245165427670000000000000000000000000000000", "89698533689397453281431900000000000000000000000000", "00000000000031916766516421817997726238933813146860", "00000000000000000000777223221383858336488661478722", "48415382341300000002689979237916191621329579130000", "00000000000000000016328393948223287494293326858974", "89622313854000000000000000000000000000000000000000", "00065533611390000000000000000000000000000000000000", "00000074800000000000022897391691251587484318485431", "15864588868899290000000000000000000000941161712991", "62400000000000823277478246317923752610000000000000", "00000000000000047575516724522461543974286758747417", "67526955847000000000000000000000000000000000000034", "81169632277745719968563914177836371464735640000000", "00000000000051931264388773925244931393428765478313", "42551520000000047000000000000000000000000658953584", "66132931624624216466848411629795416430000000000000", "00000000000000000000000000000000006969343152629271", "94710000000000000000000000000000000138247944829679", "25481228287750000073618789731935"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 44393220;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> digits = {"99338174783715489000000000000000000000000000000000", "00009327629349645481927894943321356714437678926976", "80000000000131359550000000000000000000000000000000", "00000000000000556187262713768519344716500000000000", "00000000000000000000000000000664797586772467267697", "26481186216850000000000000000000000000000000000000", "00000000008671975182915218713831169691343286661489", "73288499327000000000000455878987534871462439351753", "51893711745594576224000000000000000000000000000000", "00216575541249556583593124227236675721374973358978", "49533000000000000000000000000000000000000000000000", "00000008256775237482112258482471239891557611718790", "00000000000000059374675467194269936796311826510000", "00000000000000858479967647850000000000000000000000", "00000000000000000008488476550000000000000000000000", "00000552992195738916259253693637963294833925883273", "97000024221495672531339174000000000000000000000000", "00000000000000000000000000000024161934868283785153", "51371492642134867461218000000000000000000000059610", "00000000000073332268661831438524769623332356639000", "00000740000000000000000000000000000000000000000000", "00000000001355563679726354742784168622186591612787", "74922900000000000000000000000000000000000000000000", "00431691756879641494741346158945619649623956000000", "94867652912758627255556428468557000000777151374559", "27667975538394393126000070000000000000000000000000", "00935662578196813237515762914571350000000000211371", "32914224147000000000000000000000000000000000000000", "00000019187824574614263883000000000151119512364168", "11755279000000000000000000022959357362497383548462", "77361920000000000003157456719000000000000000000000", "00000007877759829438954511866984400000000000000000", "00000000000000000000000003331378399910000000016715", "11187746298919743457427574454431347600000000000043", "94218296562998626839513165375973735732485438561600", "00000000000000000000000000000000000000000000063482", "23800000000000000000000028871582997749918217227758", "16576394522427342332598827720000000000000000000000", "00000000000000000000000000000000052873584725729652", "72258938353513486638563521693967000000000000000000", "00000000000000088392280000000097359753961864541577", "57129883642834490000000000000000000000000000000000", "00000000000000006871829999418383223921429600000000", "00000000000000000000000000786722394386780000000000", "00035523612300000000000000000000000000000000000009", "17481543681838358952179918000000000000000000000000", "02485944622461841344893858678595618460000000000000", "00000372225632973682215711612768446738196567849258", "95000000000000000000000000000000000000000000000000", "000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 620069259;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> digits = {"83932383149537559117819159692786273215849718131977", "55631167911360000000000000000005677324944555158122", "45551856783000000000000000000000000000000000000000", "00000000000000000000000000000000358864638471624867", "23326769991765767593000000000000000000000000000000", "00000000000000000000000000037768111394882275231546", "21671296451894547678231324121439264233954700000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000063246365187179363952593", "79900000000000000022180000000000000000000000000000", "00000000000000000000000000000000000052515769682754", "74395757211148219372257534911943321869321483937740", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000092233641293877", "84893621858912848473872833364112331856741000000000", "00000000000000000000000000000000000000000000000000", "00000000761153665337600000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000026489223144678122896614787228772653381916", "92617886646788466879514459596978438100000000000000", "00000000000009667929596346239155362477628763899354", "86156511000000000000000000000000000000000000000000", "00000000008766554742646125772144673817349120000000", "00000000000000000000000000000000014116790000000000", "00000000000000000000000000000000000000000000000000", "00000000000000915789565342862547284521756982346491", "93318976117745496986175797532143283518299838584613", "42000000000000000000000000000872596215438334766745", "51294362178881394995542110000000000000000000000000", "00000000919172969238365534915424671869776795112100", "00000000000000000000000000000000001531391881487561", "18661253979550000000000000000000000000000000000000", "00000000000000000000000000000000000025497362643369", "96432126577876426569712613871913253557529543292673", "62797399642374212537900000000000000000000000000000", "00000000622475542800000000000000000000000000000000", "00000000000000004382573796517866987373163712886364", "00000000000000000000000000000007587766713500000000", "00000000000000000000000000000000000000000000138711", "42643688311427787818334558127588464672235226629652", "61683259000000000000000000000000044877371676854561", "32145292242866185938731298337759791277695341194487", "86822300000000000000000000000000000000000000000000", "00000000000000000000362331784653973192623843562417", "91129985942551212827777724614319188322627342236374", "16971498790000000000000000005847521712335693000000", "00000000000000000000000587864527228935154268245675", "15392457600000000000000000000000000000000000000000", "00000000000000000000000000009572991387947882682341", "283870000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 279766687;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> digits = {"80000000000333568000000000000000015489184800000000", "73197300000000038256833900000000000004679855490002", "43461000000008468466191652970000095814869652300283", "58185200000088239693550000000000000096243739700000", "14757544448500000000001598755910000000003726834336", "29895800355638152223980000009663743900000975800000", "00000009843237212691000527600000000000031841659000", "00000000698815563679000000871273517696530000000000", "00958664322856000000522659000000000000003810000000", "00000008217183773743310000000000833641297790000000", "00000000018898124000186217003635644951670956363144", "62359000000000883757281555319093881190000000000748", "00000000000063779166700000000338383963773930001573", "61600017574781747000219500000000112800006776320000", "00858130000000000000005491676527642571000000000000", "00072330000093228000000000075005396562800000000000", "00000487923000118263370000000006500000010000000000", "00000435651607194158745000000000001824632614660002", "98526377439572000000000000071293762884400000000006", "00000008169280000006832258366250000006233457481143", "90000029000046170000000000009615418235673200089630", "00052984886751700000000599497537400000000061866326", "40000065743914836000000000000000177249768829000025", "34000000000357576533000000000000000028611267900900", "00000000000628693800000024563472000300000000000059", "34936439836800000000000000033432988983800005000000", "00000000010000000000384996000000000023599874375700", "00091550000000000000000524654651470000000009630000", "00004342974560000695190008852526666120000468500041", "83700000001134971552419000000018224360571976635640", "00000000000001435712761302188894318450000004000000", "00000000535149790025573974848000000028847985266373", "00003838511941800078230134337399500000000000000007", "87612432000000000000007935662944630000297683842367", "54140000006786942579683640000000002316520000000093", "16720000000005235972235600000000000049491420000000", "00000828812534220000000000000000573730000000043840", "00299829000000000000000025298223830000000214166594", "87000322400000000000000394561250000000000722841166", "19215400000000000032685900000000000923551240000000", "00000004940000000000000043452000000000063400000083", "18858958000000000068150089922833390000000000000000", "96935523121529000000000005795300000000000000044718", "11000000000000000077265489988480000000000024913575", "84000000000000398800000000000000015498700000751216", "88211951400000013200008900006973890910000000001000", "00031666800033494968273000000000000027725676440000", "00000000852013276824100000007724761680000000200000", "00072648813000000000000053687598136442300000000000", "0000024384751430000000057000005895359900000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 403662167;
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> digits = {"34527925449921391987716518768249762894686384518820", "00000000000000000000000000000000000000000000000000", "02479119672791851862754939621627515366575121223347", "78430000000000000000000000000000000000000000000000", "05846249458166738433386646272547829228341531276963", "21916000000000000000000000000000000884832513545438", "62118889964441927861875571162706182115813174766793", "55627632271891151000000000000000008199295561622280", "00000000000000000000000000000000000000544736632265", "37395587763415464473348910000000000000000000000000", "00000000000532263922462123527747895988123000000000", "81225933391391235480000000000000000000000992482648", "96669922455535861329854114487787334567700000000000", "00000000000000000000000000000000000000000518156565", "00000000001835189549784171882924773379978792564386", "39735800000000000000000000000000000006951231328641", "85580000000000000000000000000000000000000792571411", "58559541100000000000000000000600000000000000000000", "00000000000000000000000000003431000000042898921373", "49795758000000000000000000000000000043386344289356", "71992300000000000000000000000000000000000000000000", "19481724496883357749246777818432723222647631721620", "00000000000000000009896824213525286523116552460000", "00000000000000000008871200000000000000000000000000", "00000000000000000000014242988539842579377317832833", "19667220000000000000000000000000000000000000000527", "00000000000000000000000000000000000000000168795828", "16225391277321238346156969218800000000000000000000", "00000000000007726318225210000000000000000000000000", "00000000000000000000246817495877166227146267147865", "46658269247821687900662629166694917665989623799657", "42481391331517885878900000000000053484776731215325", "72646864126812728565700000000000000000000000000000", "00000000000000000000312437929000000000416877000000", "00000000000000000000000000000000000733157683200000", "00000000000000000000000000006629768118600000000000", "00000000000000000000000000000000000000043139139526", "61762384713515613321959880000000000000000000000000", "00000011984993222191688632317856711438278271334700", "00000000000000000000000000000000000000445765497822", "94816541769811445799512566000000000098367332796515", "39542958264221737772682896326782652170000000000000", "00000000000000000000000093784187168759470000000000", "00021551842466288387827295427700000000000000000000", "00000000000000000000000000000000115800000000000000", "00000000000000000484894964953637263615187781577739", "92118793000000000000000000000000551221677464658222", "25614293747658187927415824886860004311255214514253", "38873987194166800000000000000000000001115387547564", "20000000000000000000053551478000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 436275845;
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> digits = {"86529267365319275262400028757659288353337644552128", "00000000000000000000000000000000000000000000000000", "09112751173187423800000000000000000000000000000000", "00000000079593375547490000000000000000000000000000", "00000000000000000000000029614627359685556295000000", "00000000000000000000000000000000000000000000000000", "04800000000181159457443956671884233577777554529963", "88353319322929240000000000000000000000000000000000", "00000000000000000000000000461382438797495625856964", "86252931121150000000000000000000000000000000000000", "00000000000000000000000600000000000000000000000000", "00000000000000000000000000000000000245419237852739", "27599161979257875119774668948358636741288122920000", "00955713749528564197975799800000000000000000000000", "00000000000000000000000000000000000817743675147956", "43952321581894576116514519652657919964162398100000", "00000000000000000000000000000212471184546357281620", "06891149841998000000000000000000000000000000651975", "75777514812866439274553493321362470000000000000000", "00000000000000000000000892614959666682777538852648", "86168272218956281388189831247682000000000000000000", "00000000000000000000000000000000858563313274728117", "20000000000000000000000000000000000000000000927479", "97439946456345657355198748184843186363361000000000", "00000067787265534000000000000000000000000000000000", "00000000000000026933917521264223695237800000000000", "00000000000000000000000000000000000000000000000000", "05519126500000000000000000000000000000000000000000", "00000000000000000003600000000000000000000000000000", "00000000000000000000049257143743552723561887935386", "21175500000000000000000000000000000000000000000000", "00007242300000000000000000000000000000000000000020", "00000000000000000000000000000000000000000000000000", "00878683843718159698145213544898921265134263477686", "51910000000000000000000000000000000000000000000007", "94645578556200000000000000000000000000000000000000", "07632962669459727259397542831525000000000000000000", "00000000000086725929873589424471781695570000000000", "00000000000000000000000000000000000000000000000000", "74553972727293725738119669934632989652353653661688", "43861643233000002386283253489592955152783361445548", "35962879512751700000000000000000000000000000000000", "00000006352136236235998915713879560000000000000000", "00000000000000000000735458932584942939932117195331", "87862343545484732494835743440000497956212717457792", "16747126572947231722259368960000000000000000000000", "00000000006321936917631288848341560000000000000000", "00000000000000000003613784747259232658539238497463", "35359195273629214926662897918000000000000000000000", "00000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 648940147;
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> digits = {"35188184696377946311577565535495690000765389366225", "72175462431000000000000000000000000000009716246272", "77899411352900000000000000000000528921172955741717", "53000000000000000000000000000000000000008237369997", "67855314554000000000548963631971631338317886640000", "00000045000000000000000000000000000000000000800000", "81725294100000000000000000078115895758371765912886", "20022422538649823268729682172945248829258000023562", "39489874525648998231834600000000000008885855881913", "76162116596270000005873600000000000000000000000000", "00000006522819656852698324422685663162412111449966", "00000000000000016949597479655797254675242624798624", "91178989000000000000005000000000000000000008744732", "21519458643183376639815752638138964620000003716833", "99817391843657929742000000000000000000000166793328", "79117782166500000003517179429162761366112540000000", "00000000000000000000000000216657289537356513817567", "62000000000000000000000000000088828515274714197988", "19984217771569746230000000000000000000000000000798", "88488847685717000000000000072751574267889363848424", "77188000000000127154247449532869064716293932877738", "83438749197137985865483400000076345747627267257398", "16113224428234358564249200000000000000000052285658", "72946664117831500000000000000000000000000000000000", "00945100000000000000000000000000001463871729829746", "99946769739857221548200009462287923171000000003852", "12959900000000000000002127756748911839863446633316", "22449985139000000086983179677737825816878843858566", "84976461871000000000000000000000017287368784755281", "11356879245327500000000000098133367487748819775910", "00000000000543500000000000000000000000000000000000", "00004486886358474694526300000000052742640000052536", "68236727731716834539718415199563185986400002774123", "71259770018382633394179000000000000000000000026843", "78348729235690000000000000000000000063817217546841", "47186246765694752677798235515200000000181764559851", "45315900000000000000000000000000009217814315138881", "68757434634553000000000000000000000000000000004955", "51878738776991269938818373623326423400000006867732", "16166759231798422299900000000000000000000000000000", "00006636391754264243859922879228737833848540000000", "00000000000000000000000000000007894813251564967887", "43691995000000000000000000031114466973862887459814", "55000000000000000000000495478388541643487543966554", "91393650000000000982752339436500000000017179268132", "92595821189533386581961868314750000000000000000000", "00000000000000007489422735712363155259924651379123", "22913276000000000000000000000000000000000000000001", "52531394422159888792977000000000000000000000000000", "000000000012959916000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 206702380;
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> digits = {"66035640811400003005607700008000005988300052600700", "00053440038180000210000142600097660010038200564490", "00535560003616000099500005006000005694027400006600", "00710003661000004720002341900020007510000800000300", "06144807100800000621270773300004000272190000884400", "05530004221000472000427000100083970006168000014746", "00004204783029000092001510000678004400730000063570", "00001790000220093700499007000084700179024000886580", "07000003963000004597000096200866600008552094860029", "22000005760000310000646100002400002117060053500580", "05097410000288300046752000539600003175400996200344", "90000078600276900002638000140093398003000671006728", "01700510065834000100002000009500002300000653290090", "00336000088470000805240084490056000003540761810028", "44009240000315580003130026550097138000080000351000", "80097666000027000040286870008000028000773680328600", "00079069156008000748900327009800004700002421800454", "00008820054980000900990017231028470000678000004252", "00000766000038525000700000413500731410062350000015", "33400013100019810000076182000061400999006850004241", "00045000010031370000197067570012478073930043186000", "09977000010001005023000040000050003660600001918800", "00064000020980000064130005300000422000047810210339", "70000029170000039880000633100004219000389500005790", "00069000009697000360130000941000027659000009301787", "10000028990200009200000549300043824000004560003560", "03214004772000910984600003303671000008540000151600", "00087900059032830000069120000400270200003700078750", "78705213100009278900022250082520006825000772950002", "10007000001987700007940006200000218140480000476100", "26000002490143590003000076890005312053300000943200", "40061925000900162001000001060008900001709482000761", "00000736013000032800980000082910000620000400003744", "00500092830036721080031600000780000173000002563200", "83580377093000060003014502000710069308700009596600", "83689000001548010022827000574590013805124100000980", "00004009699090296440000033970005792003875200000400", "05600029000003745800000273780009400281650004007470", "86500000952000005700000846800054353040099500060000", "05927900000160596730000950000030000067220079950288", "90130000021350007260770088177000033049180008100057", "00078273000436000062000004270000051400082000085300", "00800602650020070020924507733209337000040000082000", "85416000780238007200000343400008534100080004070000", "60090370000248540005706926700004300862790228320050", "19700002528608000002627077800006315009020000099060", "25032131000009902000088000300000723090000081975006", "10000472130202528000002000768840880040000011209700", "00060000034004000009879500000595650110005311500000", "5794800030000208375000410010004578303191000342300"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 704644353;
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> digits = {"57976904695000000440088100900007710000001536022906", "64298500040000000800271765000000015222800957649300", "07557600004000986086000000085400000493786207986870", "65197500000714200009000043514200000005100856268007", "76989000000087865800000011649770000280071737400000", "00950000063243000089593500000022384600000006500057", "00004814000025440000049882006264300072730000300001", "13740000898709556561000001692400000157400059958500", "26170000073288400000003250000084926000000881220500", "00000710004826523000849490000000491200000003332650", "00009238390300086600922457000557405000003810000003", "87300005700000014000093000006400000006500017132990", "00000016000061400001800000072747300031671910000510", "00751428900000001160000002730000060000057660024110", "97660000003500075120000000611000001379053500000091", "50018320000090000022225180000022963300000270004431", "92001200023961710000000300000051440092200000058812", "90000038560068255280001484190600941000000925105023", "60006500000088630000928044952000000843266007693272", "07888842000000679575600000078300000391490000002800", "09463020000470009157000000012760002800000012261000", "00009624200000122130000600017892011000007171600000", "82592700097965000000047194370000069872000006000000", "29491000002195000000077707380000991000000871774089", "60000006400002351277048358720008320000577892000006", "38550000092210000000970000005383000367721000000063", "84350043560000000979000000083000000095659920005200", "00000642000000068900000003587970000043600000016588", "10000585000223640000110000089300000055972160165000", "00002653850000009166800095190000046950000000450050", "00182290001749209700153645100435000000223234000000", "06000008580522058000256851600000002490091813650000", "00983817800549490000025860613861300000054000000070", "00000579756000779755000005576000000500000005528100", "00835624800049467750000006282321041400005268800000", "15248530000012869530000000480000094006110000008674", "10000445189400000003996148000967166400000061200043", "49000980000794691700001502614450051000315747300002", "99026661091565800561250792056300000134000330000000", "35896800000007209578750005793016873000000427845000", "41910000098896860689473034279500000008096664460000", "73038545900000039282700000970039339000044792610000", "03120000009932635000079000000386140000082800891615", "03000007841310029540000090000082100084000000970000", "55984170005735900000019671100092150000008900000183", "55300800000002548700009000936532203963300568661000", "09918000095845900000002400000884817400007000720007", "10000000627297004006476360008477000000291204539500", "55495000000127870500000081229800000700000929000197", "48610000093000027740009238990791174072000000043120"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 95288356;
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 216099237;
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 359486067;
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 45483742;
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 334799293;
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 667994681;
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 676536168;
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 123865759;
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 690669631;
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 596981921;
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 944131974;
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 344;
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 177800;
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test160() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 796542644;
    if(result == expected) {
        cout << "Test Case 160: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 160: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test161() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 694036560;
    if(result == expected) {
        cout << "Test Case 161: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 161: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test162() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 255548377;
    if(result == expected) {
        cout << "Test Case 162: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 162: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test163() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 443446049;
    if(result == expected) {
        cout << "Test Case 163: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 163: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test164() {
    vector<string> digits = {"99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999900038"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 483881107;
    if(result == expected) {
        cout << "Test Case 164: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 164: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test165() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 817599791;
    if(result == expected) {
        cout << "Test Case 165: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 165: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test166() {
    vector<string> digits = {"77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777777", "77777777777777777777777777777777777777777777777770"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 598590640;
    if(result == expected) {
        cout << "Test Case 166: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 166: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test167() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 802299340;
    if(result == expected) {
        cout << "Test Case 167: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 167: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test168() {
    vector<string> digits = {"10000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000020000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 763858089;
    if(result == expected) {
        cout << "Test Case 168: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 168: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test169() {
    vector<string> digits = {"10000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "20000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 625491259;
    if(result == expected) {
        cout << "Test Case 169: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 169: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test170() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 638766253;
    if(result == expected) {
        cout << "Test Case 170: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 170: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test171() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 98429847;
    if(result == expected) {
        cout << "Test Case 171: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 171: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test172() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 832569668;
    if(result == expected) {
        cout << "Test Case 172: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 172: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test173() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 875273000;
    if(result == expected) {
        cout << "Test Case 173: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 173: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test174() {
    vector<string> digits = {"9", "98", "987", "9876", "98765", "987654", "9876543", "98765432", "987654321", "9876543210", "98765432109", "987654321098", "9876543210987", "98765432109876", "987654321098765", "9876543210987654", "98765432109876543", "987654321098765432", "9876543210987654321", "98765432109876543210", "987654321098765432109", "9876543210987654321098", "98765432109876543210987", "987654321098765432109876", "9876543210987654321098765", "98765432109876543210987654", "987654321098765432109876543", "9876543210987654321098765432", "98765432109876543210987654321", "987654321098765432109876543210", "9876543210987654321098765432109", "98765432109876543210987654321098", "987654321098765432109876543210987", "9876543210987654321098765432109876", "98765432109876543210987654321098765", "987654321098765432109876543210987654", "9876543210987654321098765432109876543", "98765432109876543210987654321098765432", "987654321098765432109876543210987654321", "9876543210987654321098765432109876543210", "98765432109876543210987654321098765432109", "987654321098765432109876543210987654321098", "9876543210987654321098765432109876543210987", "98765432109876543210987654321098765432109876", "987654321098765432109876543210987654321098765", "9876543210987654321098765432109876543210987654", "98765432109876543210987654321098765432109876543", "987654321098765432109876543210987654321098765432", "9876543210987654321098765432109876543210987654321", "98765432109876543210987654321098765432109876543210"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 587339661;
    if(result == expected) {
        cout << "Test Case 174: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 174: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test175() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 261056739;
    if(result == expected) {
        cout << "Test Case 175: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 175: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test176() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 362348877;
    if(result == expected) {
        cout << "Test Case 176: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 176: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test177() {
    vector<string> digits = {"43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894", "43278400234000234002340023400", "923084029834080923840", "832740923809808234908032894"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 208765526;
    if(result == expected) {
        cout << "Test Case 177: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 177: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test178() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 563060171;
    if(result == expected) {
        cout << "Test Case 178: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 178: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test179() {
    vector<string> digits = {"98968934759235798498679379792845728959867982729759", "04305943059029494021058108019240859649859394999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "98968934759235798498679379792845728959867982729759", "04305943059029494021058108019240859649859394999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 840488103;
    if(result == expected) {
        cout << "Test Case 179: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 179: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test180() {
    vector<string> digits = {"90000000300000067767652000330071267773687316000001", "00000298340064883000020018738420000046280000009604", "49987300000600000000000000360093495120000066960064", "51371825410000971000000080027470000540000710003183", "00036821010000012165404867000005000004200000998000", "06971319045516669435481500013430000000780000000005", "54800482575533735646700000682000046846129160059726", "20000000789100849000200936500000643757982000002273", "78930001954094344000002000005360004382574397000549", "97248549491000755300553318700000567172659900000426", "80078817725600000900009184355176300001300053583000", "04500000698471113239493258076837223060000059201673", "44936447087100000000789130009283873100079974526800", "40000005510008700005585600003200000020000000300009", "77375171122260000621667000000500000738637874578656", "00000161730000017818838900418200000720553557853383", "12000005856500050700000087236000073999569162447900", "00092462000487810390096361432400490000020003195593", "52430487341500900000053500000617919036880002728900", "00117963313423000003100007650000000090004276524091", "47829699742100005173792096822571865809571239750000", "45146980672427342002902000003300006600000000000080", "00009000588647775489700000150000013962950400700001", "54000026556000022200000435420072218738000183131688", "56555863180870000000018455620000559500043722314849", "53485719236346000000008296690021553703644658000012", "79000002358632663393000009000499800600013610053296", "66197940000000000622510000093012743326521310096400", "35402018292035605005996715875749493737450000092700", "20000068613432226008877001695000001005810000098137", "93429002000004000000000600005458000056900213984630", "00007117916009427313351340005800300000237000766700", "00072315795590000090005000690000733364976610340006", "38475262068500000846588000100000917352000000099670", "00005655400024600005260008694181000040535741000000", "00080000158903404000000006627290096655534000800063", "58688694401826720002510000039639669855597099000249", "09724700000294556000150000068586395640310000600488", "59558714006630187000054523708125813011000915000025", "15680180000011000060000089500000096559500000135000", "90310004000004000009000771938547200026650000470094", "40000400021000556070000000003765000090001843000022", "10000057781495000002810265042875000066883512764400", "00049100072840000066978597630000004314100000557852", "08000942000097971884818449000000000041145799562577", "00000900765000095967623884000006307979477007554589", "58957955075619434400008538748542245551327186312297", "99000001825900900000984000772858108600010000672380", "00040000008900008971310082700008618208689000017300", "00769205863560000000976383300000970543009700000508"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 898935542;
    if(result == expected) {
        cout << "Test Case 180: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 180: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test181() {
    vector<string> digits = {"24273031855487303318455390444266883189566034987228", "06471597939519351448208569432624484733459300465501", "54130036374738795131644840426633377392121506578203", "38799393572115000921358333315548637578046257977961", "20805130508104591281646415105019290925296018668906", "28282566518802921183365443222205025571324107319659", "28572034478540707530903278387809858071621695967633", "95347032003011894532949818796225770675995228509972", "27817014179536253102276451441475178099728693238568", "99575092726677359566742787282974841552744303250206", "88317309140080526263617669171452285135259358302928", "30126810754278321693388982103618640344511960914093", "33144085211520043400811410750685921349181445469900", "90306723240321737138962519128448400173417661035740", "56691983379073074921029739206703585695154051671065", "36735348517842618872314830563118911768519295687684", "81751258809290327104498674441209574602402521774504", "15601347951176034270305732779743223579485594317945", "99766013023657083787555610700179046979471757757247", "11469576690302863778497164856230576435094245523811", "85288846330835699170034609160290818895548551112229", "44590501124034134289967490722137788748171706331960", "17883800241538417020939914324145033335359605466368", "48357402745197640915601777541447282144638159133154", "71708684010702723191575276727296487447070040234863", "93165025407381158848541145495245653176828676994998", "86319965027593227285461133272172923820324193445166", "70203756689429667083524458022689631027897959835845", "11777458774783225593662173653204301348138718050509", "08751708230296209902209592199112007177190449281373", "50465508402744015709923535348395353004976340743243", "35562835438503146107860567111545213419252225639479", "15710304611084320412155303917600173423804903557690", "02776805193494320870820177643846013816555897521529", "61382050418079309765243118544832160567528647700676", "19252359097330055831319916912894721176178011137632", "98588649798757169840622963452971822818707772580495", "67988742281191639927994741747893514580738149223217", "11670299768825981880161776008171468489458260950038", "14644304607512128232916536138631116578139882224140", "55321704200823908881172204665061705897237339859738", "05729975647474645519194403922522017116670510184658", "68925154379721994072997099067865858363823917308725", "01494686266815518178500795972224586146862466119056", "00609759403860722190036818010570763730800389371512", "71849941248266895303326411157294590794830759558090", "34518840512580487555174669271376747632685055026771", "50017731446313801149122772932849952845180733213448", "58275926366957677058057400736431259753509396365080", "91785784348680479106110273025934205703330218477689"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 905432421;
    if(result == expected) {
        cout << "Test Case 181: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 181: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test182() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 65526586;
    if(result == expected) {
        cout << "Test Case 182: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 182: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test183() {
    vector<string> digits = {"234892734237947239479283749827394732947", "234782374923794723749823794729347923749827394", "2347923749723947293749273497239479237497293472", "234782374923794723749823794729347923749827394", "2347923749723947293749273497239479237497293472", "234782374923794723749823794729347923749827394", "2347923749723947293749273497239479237497293472", "1203891082398120382903810283018203812038021478", "3472893479749730020284350283405803450238405984", "345890345028045820984052834085203480583405820", "43758347593475937495739457924702743827034957374", "43578934579347593749573947593479573457349537495", "34758459737459734957347953475394753745932205728", "34579834759347593749587349857934759374957353957", "234782374923794723749823794729347923749827394", "2347923749723947293749273497239479237497293472", "1203891082398120382903810283018203812038021478", "3472893479749730020284350283405803450238405984", "345890345028045820984052834085203480583405820", "43758347593475937495739457924702743827034957374", "43578934579347593749573947593479573457349537495", "34758459737459734957347953475394753745932205728", "34579834759347593749587349857934759374957353957", "234782374923794723749823794729347923749827394", "2347923749723947293749273497239479237497293472", "1203891082398120382903810283018203812038021478", "3472893479749730020284350283405803450238405984", "345890345028045820984052834085203480583405820", "43758347593475937495739457924702743827034957374", "43578934579347593749573947593479573457349537495", "34758459737459734957347953475394753745932205728", "34579834759347593749587349857934759374957353957", "234782374923794723749823794729347923749827394", "2347923749723947293749273497239479237497293472", "1203891082398120382903810283018203812038021478", "3472893479749730020284350283405803450238405984", "345890345028045820984052834085203480583405820", "43758347593475937495739457924702743827034957374", "43578934579347593749573947593479573457349537495", "34758459737459734957347953475394753745932205728", "34579834759347593749587349857934759374957353957", "237482734972394729837492701042347103413940123874", "234871973940139481204104371840748023041234812374", "247198491031834710374123794237498127304131049829", "234781798471890347180237403274813279412738490714", "127481204173489179023471297430912734723423657236", "123445645890283495349573845793475973485793475934", "345489357347593475743857349573498579347593745347", "147832749274972394728342058435023458240528475204", "453498537485793749520204358723475023457283573847"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 603392488;
    if(result == expected) {
        cout << "Test Case 183: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 183: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test184() {
    vector<string> digits = {"23573234500234503450350305305035030", "30534534530453245035032007580907900", "23424241234234200230504504053405807", "19236413185643111110091658189618545", "98190396655610498474953957315931754", "31831413353159315395934593759739573", "87193863590101379376931759341759371", "03005604506045604356043506405604455", "03405032050305203053045005700800105", "01305301503040654075680670806704560", "03503050320645065070548070854056070", "02305026042064506054063460457087867", "00130505203405400650706548076086078", "03052060406076806050960807600480678", "03200808709600340010135050657068068", "23573234500234503450350305305035030", "30534534530453245035032007580907900", "23424241234234200230504504053405807", "19236413185643111110091658189618545", "98190396655610498474953957315931754", "31831413353159315395934593759739573", "87193863590101379376931759341759371", "03005604506045604356043506405604455", "03405032050305203053045005700800105", "01305301503040654075680670806704560", "03503050320645065070548070854056070", "01305301503040654075680670806704560", "03503050320645065070548070854056070", "02305026042064506054063460457087867", "00130505203405400650706548076086078", "03052060406076806050960807600480678", "03200808709600340010135050657068068", "23573234500234503450350305305035030", "30534534530453245035032007580907900", "23424241234234200230504504053405807", "19236413185643111110091658189618545", "02305026042064506054063460457087867", "00130505203405400650706548076086078", "03052060406076806050960807600480678", "03200808709600340010135050657068068"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 742728029;
    if(result == expected) {
        cout << "Test Case 184: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 184: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test185() {
    vector<string> digits = {"171829294246"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 385769340;
    if(result == expected) {
        cout << "Test Case 185: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 185: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test186() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 857073242;
    if(result == expected) {
        cout << "Test Case 186: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 186: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test187() {
    vector<string> digits = {"21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718", "21341412412412712941247128410004174128414124141419", "42141248124712473568561252350123523905802358302958", "41412947128941729471298479128479128459126578126578", "24523195123795723195272315423412341236845123087809", "24125724121880000008989174147149127492817419414718"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 197929651;
    if(result == expected) {
        cout << "Test Case 187: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 187: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test188() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 505143296;
    if(result == expected) {
        cout << "Test Case 188: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 188: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test189() {
    vector<string> digits = {"10139257987658383771998579309960632061267749603530", "86457078059247353992782730585909425055271929910417", "63682460263350247921981258526191478176699255550589", "63068532631428210194971212115961799235217229799535", "09915229998266379569682057187558273684325559788295", "99600822860333712833657708587509100227984985197873", "29331870025305427799211319447732978846389942344885", "32286203516191219843607741180355027879786603688856", "74954792435235962271128179627363481512427354570708", "79752158818817025670658473974591038846837274042097", "49781892447606376942973887525691555484295683876694", "70794984272067154290503613168958707745244013795802", "70393483002137761917628960836419179627170551556655", "84117275480682086570995006313258884644391673726370", "79751748921027562937404191634716302329286202069489", "27950867383211559377862762957335917143907719045670", "29850546862446666848769448239482078808534036201937", "70851229652202316018209353121574436335939360045653", "14241408199202234092382174204404362210570700922983", "40863633568904764012064462035019074013408147540824", "10518986202470664814423329989829593766959136053404", "24332871525007539820984307325783865467662216353823", "22489795073596937745629050674530334801260246429785", "51526946871241284905026315905651808096915391668686", "63549005099965567560750243102738842825709406845433", "91920513560581688178127174858099969164902753803643", "71287899202615951685813317519506675578194338412856", "31338275150081897929824670260308037755262584428768", "34340103293746215388385827607817585234728023650546", "69490489282028057735751171864922438676217704717574", "79572275957239660633181472752060586585586066971423", "71589638252775116362407616040704536131093986130298", "46834406288472077213159290565429535968742103892937", "81830456821354421009779565454250335306952317938460", "92498415510644212050647832099318271344502125791861", "37049008609623767443673771482951859347593714601312", "17861971037802420512911748106713524433326885863846", "16913514957213252697443200761834737194319101882485", "59753933555154017291819005121625615032697185966416", "71618780256247435475300094226145254829049428353262", "65174468288775757758585005807435231939153138929683", "55275981556807744940185257396404723872238275963370", "98676204330157859527468847336496339308453473726797", "12759761596141108145892483269007482284072536317697", "90462066039772885217384016848375722791585994578689", "55546232932097243445930342276169705362366362186777", "92811131867715518789116621674015488809478721532368", "71303981539532217066221062575357427309595468584806", "13566521373397160403099671044727212944368027212231", "81382999705005146694036826217451105861546046604101"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 502187727;
    if(result == expected) {
        cout << "Test Case 189: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 189: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test190() {
    vector<string> digits = {"32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "432343256654", "4234234234234", "75676576577867896655436434765", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "32101230130543503240123005430534054024023034123", "5464565345234", "22423423", "0000000000000000000000", "000000000000000000000", "000000000000000000000000000000000000000", "0000000000000000000000000000000", "6786786787", "0000000000000000000000000000", "0000000000000000000000", "99999999999999999999999999", "00000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 247740107;
    if(result == expected) {
        cout << "Test Case 190: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 190: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test191() {
    vector<string> digits = {"1000001000010001001010"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 709694000;
    if(result == expected) {
        cout << "Test Case 191: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 191: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test192() {
    vector<string> digits = {"66055568368469891871569565485081079351914941482194", "00000000000000000000000000006000000020500000000600", "00000800030360807560050000001010700000000000000070", "00000007000070009210007008030100010000090000480000", "00004000009000000600100009800010000000050000003000", "00009000001000000000200000500000000002000006000073", "00000070005000000070000000000300100008000046000000", "00002600000030000000000000000080070000000000000000", "70000000070860000700000008200928000020000090000006", "00002000000000000060000000002000000000008700000008", "00006000090200000500000100004000000000000001005800", "00000540005700000010000000300000500004000000000000", "03800000080000000040090000200037000000000010000200", "00000000050000000009090000071000000001030000000000", "00000000000040060000000007000000000000000540000300", "30002001010010000009200000040080000002009000000000", "90007000000000040100006000000005000000000000000000", "00800000003000000060000008000000000000000000000000", "03000000000000080800000000000000000000000000000090", "30000000010000090006000000700058000200400000000000", "00000000090095050600000300003000079000000000000000", "00000000000900000000050009003005000000000000000000", "00200480006000710000000000004000000000000005700050", "06000000000000030060040000000240800000000000000000", "03000700009070006005000000001000000800020200450001", "05000090000100830006030200100000000000000070008000", "00000000000000000000000000007908000000000060045100", "00000090000000000040000000800000000000000007000000", "00080000000000500004000000030000810000060780000000", "03000000000004000003000070030300000002000005000000", "00000200000000000900000060000000000300000001000400", "40000600700000900000000300000000000303076000000000", "00600000000000000208702000000000000000000000800050", "05000010000005000004000000009000500000060000000000", "00080000000030000000000000000000000000000000001000", "00008000000000045310860000030000007097040000000000", "02360003000000010000000000700005000000000060971060", "00000000000002009000000000000000000000000000000000", "00000000000000000000709700500002000000329000002000", "00000009000000000000000040000009000000000000070060", "70000000000008004664000000000050790000000400000000", "10000000000006500000200000070000000000000090900000", "06000000704510000400010300000000005000000000000200", "00090140000000000005004001000000008090000000100400", "70000500003000000009000000600090000305002000000200", "40000000070000000000050000002000006070000000000600", "00001300000000400000060000000900000090000000910000", "00000060600090000000000002000000000000000000200000", "00000000000002000000000581000000050000000000000500", "00000000000000050000000607000000001002006000000800"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 47497645;
    if(result == expected) {
        cout << "Test Case 192: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 192: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test193() {
    vector<string> digits = {"123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890", "123456789012345678901234567890"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 522357071;
    if(result == expected) {
        cout << "Test Case 193: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 193: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test194() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 823132073;
    if(result == expected) {
        cout << "Test Case 194: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 194: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test195() {
    vector<string> digits = {"11020"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 220;
    if(result == expected) {
        cout << "Test Case 195: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 195: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test196() {
    vector<string> digits = {"29298511706732585992200263633048327406894191268577", "96088091136945181481244469942831714281786833821134", "22574668986248157098739685638650534505614807533863", "00755869727421607692720809008572012712618639640080", "08913913831769429006721480162525209098998351676808", "53563822469764116872285510707842145471945536676412", "35363095210001345312084621024388039587592044833885", "17773252538104406704709530664268342727674043004227", "21471372096932101691428918990739705927557439394590", "32186340147791821257509716439611735157517596666294", "42388240086730514377680939663209867732958505373195", "04738966996728078013528343028610715286032893379011", "70675748051046294388754285988025028344298519272449", "08073346841188574261024988437958071250280840837307", "78013379093885961255333101598539277782260447901338", "77741197902159850657423022497550439847907085108664", "05888913982917040491943987882323284460392050378633", "88603498201059234643919390399044777794937007369948", "52799772663841355713862127901567373048345578841269", "85163294104321492901024481660445779798895119417465", "36685771095265690528601748198446688647164820010572", "39860520256262399797338108698723222263774025720101", "69056318865529559850653314725946113732168893364220", "28533181903388294795125419676054432865123451812976", "82913529044826481244284130300858659549701469734110", "06075869501793016424235590789937779927157862847569", "55526564774484086077891564319949151723105246155391", "80137545455901398177380474114782787310621365057833", "97020081935023193586406954825492739061210620256373", "58744267988819634391090298593779750433009038252176", "65475973704580567804951500060177091104121245985743", "37869852884354153331384935528728942445167978717335", "50688812873025168387578091852029510065592371696024", "78645138687665674504402043919014373906596205294212", "32314855309255396624630090269779324560345115151255", "50712125590510954622961830251229504767318219980510", "12185069266762845201981574280251964185246492561232", "25384488454116291293189907247015049905508540896375", "89433770592857168156890913604227280788476814598074", "33122705839309901064623878747161456368710493764966", "13915877100333777422228575401325679583939506156338", "86584703591746671151001103232299818301023667877462", "26775388095285839610278976416093975105888360070819", "32094490564959359432215707235918950310623128456786", "82080744664596279240245689556253700236264394827974", "66654752892811134562032887290514822617147949786597", "33289286572893421992151248111969494287118473768509", "96419164472666283824218499314224829825208629837876", "65719995543481212407690137717140503570614444832126", "09400651696137022313656190489182806612367697944970"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 823362027;
    if(result == expected) {
        cout << "Test Case 196: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 196: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test197() {
    vector<string> digits = {};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 722251612;
    if(result == expected) {
        cout << "Test Case 197: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 197: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test198() {
    vector<string> digits = {"37583274416999036447836078418454904876775345034833", "81813885598877342431290929423725009337600234572651", "89280429109195057816242542312353499998956163867347", "44195173354351875965045306168188983337876247858261", "85769563242630423008438776111596766697245090931580", "63597346454632442117269792334042455021704535050554", "61115701021085100050187250289052137507222856970191", "03527931716934095562762794193162088896386387534570", "78527921072923506594094998938250485137971986692037", "31559875894001222259219575375303972255585513061560", "52737371974207257286286741098775414809732482549693", "32799054694582726385514518600471094827648970542521", "56041722299288389776433448860927402239537482929123", "15817521816547647953236402876730570829103329909904", "62828197183700767933495926768774981956151957999148", "93437158298009479953787856810520545050870613062732", "18429558394718273724834063877670454868120696355758", "46647108510452967899705887347587792411973465483743", "04792631693235626763724319630255269664441547909450", "65130324894309913828670463457901464859556804282884", "08282773202675441784502752378773784180792287578754", "74195775313905446368321547951884465238317648191309", "25511962776827354594427909979321941950422493245639", "32207814834553234120455543740469124860628610406116", "24504845558227219137834392561649606964953971900099", "86308727483118277063108014869677700149502120767168", "67614478813439667253781005884133623504075552836137", "78633050257590547339746883137596139454534019308146", "91422201051113572573414270728145079257396534509940", "19018678197732959594235231404465018715969539623128", "03588463052966773870948183867944806780815937952902", "79792201290148950969583065505039779355557860491873", "27635443154121371064594630710515889911060152824812", "23474240796672621043435611678935362743890852890525", "91032311141856330555539934634083310135345869747736", "59884588535705668889936291919886054410597421804577", "38078486663331813151936784093690826592671532338868", "86305579357106227876519265025189883895965248480583", "42454133801079813449368965417777606204653486349246", "20479615735308306360752687115819319253968435478966", "97257506688223636907332875822360720044575919270573", "67084788030249365005115381451880399230388564126978", "68474419237758556707422787259331216849461944234458", "81408197014090747325290370914833115315041312426046", "58185845428695724920430390725860513552505694063726", "92343695914098335213337602679996885248274125978105", "72339475901347236402296709978663139124507789249080", "74233292186698081166678626503896134537425858459162", "46886186753695088905392154141908066643875255681227", "47006660296475646999447571831016426715138852942646"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 580545231;
    if(result == expected) {
        cout << "Test Case 198: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 198: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test199() {
    vector<string> digits = {"1213"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 156;
    if(result == expected) {
        cout << "Test Case 199: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 199: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test200() {
    vector<string> digits = {"12310123012001230012307300467534879878654320908007", "02303200023040023040004304003204000043274982347324", "00234002300000002340001234021340021303210400132401", "92003240034045002436001324000324004001435024500404", "90000013040324001243000030204060030023432021340000", "91329491324913204000003499130001300501230400123000", "00013402130400123400124990020030400000000000000000", "00134012300021300321404302005040400300000000000000", "03214032104023100000120012300403020000000000000000", "13240032400123400000003040305060504000000000000000", "00000132400321401324004342001234000000000000000000", "13240123401234001234003140050500400000000000000000", "12340123400012340000004321400132400000000000000000", "13240132402314023140013145003425000000000000000000", "31240132401324000123424350002345050000000000000000", "13240123400401320400004235023450000000000000000000", "00123401234012340000002435024350000000000000000000", "42304000000000000000000000000123412343124000000000", "32014000000000000000000000000000000000000000000000", "00000000000000000412342134213423546734732838475647", "32132357435888883246324321423144444000000000000000", "13241234123441341341324012340231400012340001234000"};
    IncreasingSequence* pObj = new IncreasingSequence();
    clock_t start = clock();
    int result = pObj->getProduct(digits);
    clock_t end = clock();
    delete pObj;
    int expected = 708733753;
    if(result == expected) {
        cout << "Test Case 200: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 200: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    test160() == 0 ? ++passed : ++failed;
    test161() == 0 ? ++passed : ++failed;
    test162() == 0 ? ++passed : ++failed;
    test163() == 0 ? ++passed : ++failed;
    test164() == 0 ? ++passed : ++failed;
    test165() == 0 ? ++passed : ++failed;
    test166() == 0 ? ++passed : ++failed;
    test167() == 0 ? ++passed : ++failed;
    test168() == 0 ? ++passed : ++failed;
    test169() == 0 ? ++passed : ++failed;
    test170() == 0 ? ++passed : ++failed;
    test171() == 0 ? ++passed : ++failed;
    test172() == 0 ? ++passed : ++failed;
    test173() == 0 ? ++passed : ++failed;
    test174() == 0 ? ++passed : ++failed;
    test175() == 0 ? ++passed : ++failed;
    test176() == 0 ? ++passed : ++failed;
    test177() == 0 ? ++passed : ++failed;
    test178() == 0 ? ++passed : ++failed;
    test179() == 0 ? ++passed : ++failed;
    test180() == 0 ? ++passed : ++failed;
    test181() == 0 ? ++passed : ++failed;
    test182() == 0 ? ++passed : ++failed;
    test183() == 0 ? ++passed : ++failed;
    test184() == 0 ? ++passed : ++failed;
    test185() == 0 ? ++passed : ++failed;
    test186() == 0 ? ++passed : ++failed;
    test187() == 0 ? ++passed : ++failed;
    test188() == 0 ? ++passed : ++failed;
    test189() == 0 ? ++passed : ++failed;
    test190() == 0 ? ++passed : ++failed;
    test191() == 0 ? ++passed : ++failed;
    test192() == 0 ? ++passed : ++failed;
    test193() == 0 ? ++passed : ++failed;
    test194() == 0 ? ++passed : ++failed;
    test195() == 0 ? ++passed : ++failed;
    test196() == 0 ? ++passed : ++failed;
    test197() == 0 ? ++passed : ++failed;
    test198() == 0 ? ++passed : ++failed;
    test199() == 0 ? ++passed : ++failed;
    test200() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8394868&rd=12174&pm=8504
********************************************************************************
#include <map> 
#include <set> 
#include <cmath> 
#include <queue> 
#include <vector> 
#include <string> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <cassert> 
#include <numeric> 
#include <algorithm> 
#include <iostream> 
#include <sstream> 
#include <ctime> 
using namespace std; 
 
typedef long long int64; 
typedef vector<string> vs; 
 
#define For(i,a,b) for (int i(a),_b(b); i <= _b; ++i) 
#define Ford(i,a,b) for (int i(a),_b(b); i >= _b; --i) 
#define Rep(i,n) for (int i(0),_n(n); i < _n; ++i) 
#define Repd(i,n) for (int i((n)-1); i >= 0; --i) 
#define Fill(a,c) memset(&a, c, sizeof(a)) 
#define MP(x, y) make_pair((x), (y)) 
#define All(v) (v).begin(), (v).end() 
 
template<typename T> inline int Size(const T& c) { return (int)c.size(); } 
template<typename T> inline void checkMin(T& a, T b) { if (b < a) a = b; } 
template<typename T> inline void checkMax(T& a, T b) { if (b > a) a = b; } 
 
const int maxn = 2510; 
const int mod = 1000000003; 
int n; 
string s; 
int dp[maxn][maxn+1], dp2[maxn][maxn+1]; 
int zero[maxn+1]; 
 
int compare(int i1, int i2, int j1, int j2) { 
  i1 += zero[i1]; 
  checkMin(i1, i2); 
  j1 += zero[j1]; 
  checkMin(j1, j2); 
  int res = (i2-i1)-(j2-j1); 
  if (res != 0) 
    return res; 
  if (i1 == j1 && i2 == j2) 
    return 0; 
  while (i1 < i2) { 
    res = s[i1]-s[j1]; 
    if (res != 0) 
      return res; 
    ++i1; 
    ++j1; 
  } 
  return 0; 
} 
 
int64 getNumber(int i1, int i2) { 
  int64 res = 0; 
  while (i1 < i2) { 
    res = (res*10+s[i1]-'0')%mod; 
    ++i1; 
  } 
  return res; 
} 
 
struct IncreasingSequence { 
  int getProduct(vs digits) { 
    Rep(i, Size(digits)) 
      s += digits[i]; 
    n = Size(s); 
    zero[n] = 0; 
    Repd(i, n) 
      zero[i] = s[i] == '0' ? 1+zero[i+1] : 0; 
    Repd(i, n) { 
      int minK = -1; 
      For(j, i+1, n) { 
        if (j == n) { 
          dp[i][j] = i; 
        } else { 
          dp[i][j] = -1; 
          checkMax(minK, j+1); 
          while (minK < n && compare(j, minK, i, j) <= 0) 
            ++minK; 
          For(k, minK, minK) { 
            if (dp2[j][k] != -1 && compare(j, k, i, j) > 0) { 
              if (dp[i][j] == -1 || compare(dp2[j][k], n, dp[i][j], n) < 0) 
                dp[i][j] = dp2[j][k]; 
            } 
          } 
        } 
      } 
      dp2[i][n] = dp[i][n]; 
      Ford(j, n-1, i+1) { 
        dp2[i][j] = dp2[i][j+1]; 
        if (dp[i][j] != -1 && compare(dp[i][j], n, dp2[i][j], n) < 0) 
          dp2[i][j] = dp[i][j]; 
      } 
    } 
    printf("dp found\n"); 
    int best = 0; 
    For(i, 1, n) 
      if (dp[0][i] != -1 && compare(dp[0][i], n, best, n) < 0) 
        best = dp[0][i]; 
    int i = 0; 
    int64 res = 1; 
    while (i < n) { 
      int j = -1; 
      For(k, i+1, n) { 
        if (compare(dp[i][k], n, best, n) == 0) { 
          if (j == -1 || compare(i, k, i, j) > 0) 
            j = k; 
        } 
      } 
      assert(j != -1); 
      res = (res*getNumber(i, j))%mod; 
      i = j; 
    } 
    return (int)res; 
  } 
};

********************************************************************************
*******************************************************************************/