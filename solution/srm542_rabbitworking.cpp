/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11054
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class RabbitWorking {
public:
    double getMaximum(vector<string> profit);
};

double RabbitWorking::getMaximum(vector<string> profit) {
    double ret;
    return ret;
}


int test0() {
    vector<string> profit = {"071", "702", "120"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.017676767676767676;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> profit = {"061", "602", "120"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.015228426395939087;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> profit = {"0"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> profit = {"013040", "100010", "300060", "000008", "416000", "000800"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.021996615905245348;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> profit = {"06390061", "60960062", "39090270", "96900262", "00000212", "00222026", "66761201", "12022610"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06871794871794872;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> profit = {"00", "00"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> profit = {"09", "90"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.022727272727272728;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> profit = {"09999999999999999999999999999999999999999999999999", "90999999999999999999999999999999999999999999999999", "99099999999999999999999999999999999999999999999999", "99909999999999999999999999999999999999999999999999", "99990999999999999999999999999999999999999999999999", "99999099999999999999999999999999999999999999999999", "99999909999999999999999999999999999999999999999999", "99999990999999999999999999999999999999999999999999", "99999999099999999999999999999999999999999999999999", "99999999909999999999999999999999999999999999999999", "99999999990999999999999999999999999999999999999999", "99999999999099999999999999999999999999999999999999", "99999999999909999999999999999999999999999999999999", "99999999999990999999999999999999999999999999999999", "99999999999999099999999999999999999999999999999999", "99999999999999909999999999999999999999999999999999", "99999999999999990999999999999999999999999999999999", "99999999999999999099999999999999999999999999999999", "99999999999999999909999999999999999999999999999999", "99999999999999999990999999999999999999999999999999", "99999999999999999999099999999999999999999999999999", "99999999999999999999909999999999999999999999999999", "99999999999999999999990999999999999999999999999999", "99999999999999999999999099999999999999999999999999", "99999999999999999999999909999999999999999999999999", "99999999999999999999999990999999999999999999999999", "99999999999999999999999999099999999999999999999999", "99999999999999999999999999909999999999999999999999", "99999999999999999999999999990999999999999999999999", "99999999999999999999999999999099999999999999999999", "99999999999999999999999999999909999999999999999999", "99999999999999999999999999999990999999999999999999", "99999999999999999999999999999999099999999999999999", "99999999999999999999999999999999909999999999999999", "99999999999999999999999999999999990999999999999999", "99999999999999999999999999999999999099999999999999", "99999999999999999999999999999999999909999999999999", "99999999999999999999999999999999999990999999999999", "99999999999999999999999999999999999999099999999999", "99999999999999999999999999999999999999909999999999", "99999999999999999999999999999999999999990999999999", "99999999999999999999999999999999999999999099999999", "99999999999999999999999999999999999999999909999999", "99999999999999999999999999999999999999999990999999", "99999999999999999999999999999999999999999999099999", "99999999999999999999999999999999999999999999909999", "99999999999999999999999999999999999999999999990999", "99999999999999999999999999999999999999999999999099", "99999999999999999999999999999999999999999999999909", "99999999999999999999999999999999999999999999999990"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.47;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.017676767676767676;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.038917089678511;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.058673469387755105;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> profit = {"00000100000000001000000000000000011000000000000000", "00000000000000000000000000000000000000000000100000", "00010100000000000000000000001001000000000000000000", "00100000100010000000000000000000101000000100000110", "00000010000001000000000000000000000000000000000000", "10100000001001000000000010000000000000000000000000", "00001000000000000000000000000001000000000000000000", "00000000000000000000000010000000000000000010000000", "00010000000000000000000000000000000000000000000000", "00000000000000000000100000000000010000000000000000", "00000100000000000000100000000100000000010000000000", "00000000000000000000001010000000000100000000001001", "00010000000000000000000000000000000000000010000000", "00001100000000000000000000000000000010000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000001000000000000000000000000", "10000000000000000000000000000000000000000000000000", "00000000000000000000000008000100000100010000000100", "00000000000000000000000000000000000000100000000000", "00000000000000000000000000000000000000000000000000", "00000000011000000000000000000000000100000000001000", "00000000000000000000001000000010000000000000000001", "00000000000100000000010000000000000000000000000000", "00000000000000000000000000000010000100000000000000", "00000101000100000000000000000000000000000000000000", "00000000000000010800000000001000000000000000000000", "00000000000000000000000000000000000100000000010000", "00000000000000000000000000000001000000000000000000", "00100000000000000000000001000000000001001000010000", "00000000001000000100000000000000000000000000000001", "00000000000000000000010100000000000000000000000000", "00100010000000000000000000010000000000000000011000", "00010000000000000000000000000000000000000000000010", "10000000010000000000000000000000000000000001100000", "10010000000000000000000000000000000000000000000000", "00000000000100000100100100100000000000000000000010", "00000000000001000000000000000000000000000000000000", "00000000000000000000000000001000000000000000000000", "00000000000000000010000000000000000000011100010000", "00000000001000000100000000000000000000100000000000", "00000000000000000000000000001000000000100000000000", "00010000000000000000000000000000000000100000000000", "00000001000010000000000000000000000000000000100000", "00000000000000000000000000000000010000000000000000", "01000000000000000000000000000000010000000010000001", "00000000000000000000000000101001000000100000000001", "00000000000100000000100000000001000000000000000000", "00010000000000000100000000000000000000000000000000", "00010000000000000000000000000000100100000000000001", "00000000000100000000010000000100000000000000110010"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.020202020202020204;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.038917089678511;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.061224489795918366;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> profit = {"049160074171", "409171168060", "990090186081", "110001211111", "679000168070", "010100161102", "011211010111", "768166107190", "486181070080", "100101110001", "768170198000", "101102100100"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.11028867505551443;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> profit = {"017012201002", "106800086861", "760971197681", "089020168780", "107200066770", "201000210102", "201102018101", "089661106770", "167860860880", "086771178060", "068870078603", "211002100030"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.12174479166666667;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> profit = {"076789089959", "701996076216", "610114111171", "791089139907", "891807039709", "964970168809", "001101010111", "871336101826", "961998010738", "921978187048", "517000123400", "961799168800"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15125072716695753;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> profit = {"088797181879", "808668041879", "880769020786", "767069036962", "966608160628", "789980190796", "100011001181", "842369000896", "110600100010", "887967180097", "778629891902", "996286160720"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.16263157894736843;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> profit = {"079790869796", "707581998987", "970760966269", "757060798984", "986601997768", "010010111101", "899791096689", "696991908776", "986871680797", "792971677099", "986860879906", "679481967960"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.19624819624819625;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> profit = {"086886097397", "807194878589", "670967995796", "819088842890", "896807969768", "647870069999", "089890068098", "979466606687", "785299860688", "357879066078", "989969988709", "796089878890"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.19902482269503546;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> profit = {"010100800080", "102111101010", "020100111110", "111002110010", "010000020201", "010200001102", "811100001081", "001120001001", "011001110100", "001021001000", "811100800001", "000012110010"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.04060913705583756;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> profit = {"010411100021", "100001072178", "000000011000", "400020101110", "100201010001", "110010211111", "100102012202", "071011102098", "021101220010", "010101200001", "270101091008", "180011280180"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.05994897959183673;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> profit = {"0160878876170819167780879", "1021310100212021201102060", "6200866697871619875970907", "0100181000102010110102104", "8381047999180606078670868", "7168406997171648198980697", "8061760727191919005670679", "8160997067180817187860778", "7090992603764007068671877", "6070977730030716066891699", "1281111170031010111111011", "7170879863300107098760799", "0212011040100010111101701", "8060669807010006086881786", "1211041101101000101112100", "9190689776070600067671796", "1281010100101010000102811", "6071790866191806009771689", "7150885786181617090190567", "7191696868171816171071789", "8070787679160817079700796", "0202000011101121210100117", "8091866786077717865771088", "7600697779190809186891808", "9074879879191606197967880"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.32753357753357754;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> profit = {"0619708067611970826881273", "6077619889820760907350770", "1702618767910841898160690", "9720608604801899977310771", "7666009888600660879970660", "0110001401011311500111102", "8988910886819770787971571", "0876848068911171679971666", "6860808607611970829801770", "7974816870910884866981771", "6898608969000871699771170", "1210011111001309510021102", "1001019110010002104011001", "9788637198830081599783681", "7649617778700800816771471", "0019010104192100111001002", "8989857688651581069790131", "2097708726910911607351491", "6787907996904961970711881", "8313919989700770737070881", "8561717708721870951701907", "1000011111111311011010002", "2767615677110640148890079", "7797607677700870398800701", "3001021601021112111172910"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3271299796452457;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> profit = {"0711010101113011011118211", "7069868194197061789898117", "1603986199887589868667036", "1930989086098669789666118", "0899086099178988966866108", "1688808187068877676778109", "0869680199177679386978018", "1110011001211010111115111", "0998989009192787796867107", "1496979190178806819979118", "1180101211000001100710222", "1989767197008859497878009", "3778887128080677880866016", "0056986078086088669699108", "1686877180057806909897009", "1199879076197860766686006", "0787963178148697097758007", "1868678191098606909864509", "1989666169070996790967249", "1866879189788686789089119", "1966677167176998566808109", "8876688579086976847980009", "2101110111200100052110021", "1131001101201000004100201", "1768898178296896799999110"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.37972222222222224;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> profit = {"0010310101102110021111001", "0079997780861698307874788", "1709658670894999919896889", "0990879960861907909879576", "3968069881880665618889977", "1957609900690998917168738", "0789990871870867607778666", "1769898060971668607898623", "0876807600890666707697691", "1000101000101002111101001", "1888868981080975806967477", "0696897790800299700896739", "2141000101000910060110110", "1699698660929076909687776", "1990696660791706608688886", "0897587862590660907787877", "0399696671870969018690688", "2010110001006000100515011", "1799877771600987800989779", "1888817861981667659098279", "1797867990691888918906185", "1469988871760787059860996", "0785976660471788607219087", "0887736290731787817789809", "1896786311790667819956790"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.39531790369779196;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> profit = {"0197798866797866601666896", "1010100100111101131101111", "9106926862687978701677826", "7060897978670963911766696", "7198076867266966600897787", "9029709986979968811676377", "8067690968969775901768193", "8189899087688868710797469", "6067686809979649801897878", "6028768790867866611889938", "7166299698076967800189997", "9187676876706889811987866", "7170699897660698810662658", "8199997868986099611777797", "6076667646689907601777189", "6183685896798970811978692", "6179689786888668001766866", "0301010101011101002300110", "1111011011010111120111040", "6167867788196779731068969", "6076976998886777601606968", "6176768779972778601860339", "8186731489986716810993076", "9129879673965989614663709", "6166773988768792600989690"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.41164453524004085;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> profit = {"0767679717422798980767200", "7069816818869996970996699", "6606676708788989691732997", "7960966608996776881889679", "6869087919766699680566999", "7176806807647999970907878", "9666760927769961921989877", "7876989019768868860777787", "1100102109050001111116041", "7888977990976769617959978", "4879767709099987770968858", "2689646657908878380866978", "2986679806980797991689683", "7997699807987049790896987", "9987996606879406280699889", "8696991819787960561648618", "9968699816739725090768770", "8798872611789986908877889", "0011001017001001080100101", "7978599719986866781087686", "6938608715668994670809777", "7629679769869698870790487", "2696988709896986781674088", "0997977847578881780878809", "0979987718883798091677890"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.44043232620977646;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> profit = {"0877698898097887769867870", "8098699660697268698619781", "7908606777987979779869791", "7880666889836786769979990", "6666068918963867664481671", "9906609787889889877983701", "8966890776799980778698796", "8678977087969978676092690", "9678187801867766796677600", "8079876710670676719969168", "0698987986099767849949881", "9983689667907667788908670", "7776399970970766796396971", "8297889976767078998689760", "8678688767666706740899881", "7896790866776860567666380", "7677687677877975081768881", "6976677791489946809669893", "9899478669986807190786780", "8689496069993686767076781", "6167889976409896668708851", "7999138279986996896680790", "8779677661869783887787070", "7899709906877688898859700", "0110116008101010130110000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.44696969696969696;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> profit = {"0686969987899966988690669", "6059776780986997296881768", "8506867979069967947195598", "6960798979679767687996689", "9787097769979996769898768", "6769909687879879690974661", "9678790866896596999966886", "9799768095880660799788962", "8877686906768286761998989", "7099976560877896984788866", "8906988878086766668686737", "9867779867806816988966870", "9699996087660868876776789", "9997985628788069996897898", "6966979689616600999789697", "6777696066668900698878689", "9296769779698996073675666", "8948699968687999707649777", "8677909914886698370886788", "6819899797697878668071803", "9899976898867987748709878", "0156846888666798596190836", "6756768998787866677888077", "6698668686378998678073708", "9889816296709879678386780"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4774857142857143;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> profit = {"0010000000101000001011200", "0010000100001000000011202", "1100001100001000001000011", "0000000002020120000100000", "0000011010010020010100000", "0000107000010108001102010", "0010170000000114101101000", "0110000000000000000001110", "0000100001000110000000000", "0002000010000000040000000", "1000000000002000000000000", "0002110000000011010000000", "1110000000200000000010201", "0001011010000001010100020", "0002201010010000000100010", "0000084000010100001001010", "0000001000000000000100100", "0000100004010100000100000", "1010011000000001000001000", "0001111000000110110001010", "1100000000001000000000101", "1100021100000001001100100", "2200000100002000100011011", "0010010100000211000100100", "0210000000001000000010100"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.032148900169204735;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> profit = {"0011110010200010100110000", "0001010110000021002020210", "1000010018008711000100008", "1100001000000001020211010", "1000000016101701000200008", "1110000031102020200100000", "0001000100010010002002110", "0100001000010000001002020", "1110130001300200100020000", "0080610010209821000000009", "2000110032000113100200102", "0000001100000010002111010", "0080120009000800000100008", "0070700028108002000100009", "1210021002110001010001201", "0111100001300210000220001", "1000020010100000001111020", "0002000000000010001022100", "0200002100020000110002100", "1012210000211102100010000", "1201000020010002120101200", "0001002200010010122010110", "0200001000100020011021010", "0101001200010000200001100", "0080800009208911000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08934707903780069;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> profit = {"0000100000022110220000202", "0070011891700008000700001", "0700011880800005011711000", "0000000001000000001010000", "1000002001022120110001211", "0110002110011100201102011", "0110220110112000100021100", "0880011091900007011810000", "0980011900700008110721001", "0101100100001100200110000", "0780001970000009001701001", "2000211000000440111000242", "2000212001000110111001111", "1000110001041010110000021", "1000200000041100210002101", "0850000780900000102710000", "2000121012011121010122012", "2010100110011110101101101", "0011010100111002010202111", "0770010871700007112011001", "0011002121000001200102101", "0010121010101020212120100", "2000201000021010011011002", "0000110000041200101000000", "2100110010121110211110200"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.11843079200592153;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> profit = {"0018719191129017119080910", "0002011212101022010000020", "1000001010102101001111101", "8200708171119009103080810", "7007017172008028017070410", "1100101020120111010111231", "9118710091107008227080800", "1201100000111200001001111", "9117729001007024018090810", "1201201010002121101110002", "1111011100011111101202011", "2001020100102120101110020", "9129807172120027218070810", "0010010201110020010402011", "1200210022122201011111001", "7219818041107010107080910", "1001002001112001021000201", "1100112010001110201211010", "9013707181118017110090810", "0010010001210410020000000", "8018718091017018019000810", "0010010100200210010000002", "9018428180008009208080000", "1201130110121101011010002", "0010010102100110100002020"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.18105263157894738;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> profit = {"0122027011111101101142310211151110221", "1040701379866684677701966071789869809", "2402052010010112101812100201011011120", "2020121100111000103012100511100011120", "0701000788788989969601978080986999809", "2052004110011001050121019211011010020", "7121040001301111110022110112110011111", "0301710097788668868780896081674967807", "1710810908638999777734768090698996968", "1900801780578897697811776191897919976", "1801703765078747213701976190999897906", "1611810837704786988609766480993861809", "1601811888840688887611967071908898717", "1610901698776068672401698091986096908", "0810801699488606896810969190598877658", "1420911897768860996711998071987598608", "1611901876298689077400787170999868919", "0700651679188799707601836171668778708", "1713900877387266770710758080598889817", "1780610778766487467060886061666796506", "4011022831001011001602901212511110011", "2122112041191101010020001311100011010", "3911901877979699787890088170776679619", "1600711967766969835800807091676067709", "0600890686667898768611870181908786209", "2025021001140010110023101012111001126", "1701811899987997778611798100096617609", "1111012101001101010121011200001001121", "1701901668999959965651769100069448918", "5810811799990898969610770190609886412", "1910610487938687988610668161990666816", "1800900999888085878710607060486068719", "1611911691969979678911768010486600619", "0911901769718678889601976171866800807", "2811801899987966978500672161948768016", "2022021067001050101011100202111110101", "1900901786697888987610999691826997610"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5332905159494755;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> profit = {"0177408175718909218090768801167776878", "1011011310020600140212101111110111410", "7107989066806371617170679861189989719", "7170686786816676476240689790179596717", "4096078676807767909101229990198779718", "0188707179614788807164779991067897608", "8196870170918669219091666990179679707", "1307611000121101111202010111201117021", "7168777009379466906086689961066999908", "5066690090708669817181898887196996912", "7088869137002878908060987861097797017", "1201011270000010021822030002200100110", "8066748198200682909063967781188667817", "9636776146806089715074756981067498807", "0077686066718806606970989980597867586", "9016789169802960006161669691089979819", "2164982198909760027061980660058986808", "1417001101020100201212010019210710111", "8076979167819566710071867880097718609", "0212110201080091020012160102205110011", "9174069088626776617101300771019186807", "0200141261023401121210100152201000011", "7166276068909796908131007320077678609", "6078276189836586816600006770078483618", "8199996098707699007000760961476687806", "8187999198807996608171379060088788917", "0169999168608889618075276601073719218", "1110010117121101090212001010261301010", "1111101201021050020202004002031081010", "6187967069908698519010777876307266816", "7099879166708779807591786831170879618", "7195786199716489977110646773028068716", "7189797199906967811180788810867606908", "6196979796707879608060837891169860908", "8477767099018858816080668920086799059", "7111100201111081010101010111111100500", "8097887182707769819171986780068688900"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5390365448504983;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> profit = {"0221011101001010002100111101121110070", "2010014112010111012000111001081010111", "2100001102031056101011101010010061000", "1000770740676667670896186839608769787", "0007060870886647731668073829908966698", "1107601661699796665198079977706716989", "1410010096182811001510111111027110017", "1117860070968996731887197697717663648", "0104769701196799780987046969617996899", "1220016010000000412110211100010000101", "0006861910090769780779098798716799767", "0137898690907966691697176878868688969", "1016692860070997686669373960619488686", "0106678970799089561878178988806765889", "1156491990669809770198098997708597793", "0167761690967990731698098976818688946", "0016760774766577080698173999708638782", "0107360381898673801896167908417798740", "2210151102016101010100201702020011111", "1008615891766816681083088888918968369", "0019691881796799990806169686817796699", "0016880770979888860360088978716899986", "1111001102013100112010001001121110011", "1108771941977799760868000896816777689", "1116391761863888371898100680808189659", "1008891691789999997869086080660968996", "0013271960976897900887098808909969683", "1109971790880876982868160080906863796", "1006970760786878740987188699019166768", "2810002111161001012111210600100010101", "1108867770689688870876168096900867793", "1007971690764756670978171998108077829", "1166611690988698391699178666616705773", "0019660360988578881869079893607750897", "0107690681796879771369066967717878079", "7108981490668894841698185989609279708", "0107897891796936201996199636813937980"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5710828796128251;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> profit = {"0199878898597795077700914068889771066", "1000101300110312011122111100011111616", "9009879938676966767900817889466811066", "9090617689887270097710717668997761192", "8186078788667761608791819777666781089", "7071708656719671966821908766868171089", "8197880877696681866701608878696991173", "8396768097667971696871018989967851178", "9038857909798570679910808977978891177", "8089867790987671889841733938781770186", "5168676679028361777811605776466931167", "9178619698207670967910716679989641086", "7067796787870891718710916897176882196", "7392766956368081617701719668697811196", "9167678777679801787611906889889891073", "5260111101101110101172020120018011211", "0070698668797671083801717770677441077", "7169066978761180807717918787779770069", "7177866699778771370910416788999760064", "7197787898897761879000766877796890066", "0201920714111017011001120000111002200", "0200111101100112170010010080001101211", "9187896087679790794710008668768660097", "1111100103011102111621001111061112111", "4177988883566960786600810878667890066", "0186778999768681777800618067696911666", "6086767873779682788708617607799766198", "8098768978697890078700818770697280079", "8049686997491680679710706676077885192", "8169669678687981779910666999709691177", "9167686781696798799611817697790771179", "7187719887968880477801618972867061179", "7116879597348191476900619168897601068", "1111111110112111100021020160511110110", "0601001111101102000022010610111101011", "6169887778689971766601916697977761108", "6662993876766631794601716689279980180"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5909803921568627;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> profit = {"0519719687996116899988776786819794184", "5008806867869007969978979769919386179", "1002010100111229081014100070013011811", "9820716836978006868769987066706979177", "7807097796777009787686689689808688066", "1011900100100721010110100111111011211", "9606700819768019487696868006816892168", "6818718086687106867797668799709699198", "8603901806887116866889760972709168686", "7706609660968116989677696967707788017", "9819717689067107027876046189928877096", "9617706886608014787676986669819799786", "6918708778780110678769776798608679377", "1020070111101014110000001111010270211", "1020021011011101011110100010010071290", "6796919666740410987676994669617888178", "8908704889076109067997478199718684168", "9686818668287118606879629908907688367", "9918707769778017760897871779016878768", "9907616786867016988098878961917737899", "8716819987776017979908869766906189199", "8849606797669006797880899678707879087", "7919618676097019468888068779919889198", "7708806669487009727769606196609877169", "6907908806666104891899860778919778096", "7700610799167106197976717087726997168", "8676810976869116907667797808916777166", "6906916927998109989168968780818879179", "8907818777986006790997969798059677173", "1110011000210111101100101211501000161", "9936816997898007876767999668910998067", "7309608617876208668718887978609078176", "9817819968797778887387877977709706167", "4619812988799018488799978779708860098", "1181021160073221137810110111110110001", "8717616981987197666998969667766769009", "4917618867667108878997896869317678190"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6277915632754343;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> profit = {"0893846979789789676068966870602816997", "8078678899819797467191786681709718768", "9706606787668977977099847081719912489", "3860019968778697979198869881208907887", "8660019979877997679899488680818809878", "4701100010001010101111110002020111110", "6869900965929675777098997790816657778", "9879909019999719679178976061318802686", "7986716108976687396099877670908708476", "9978905980887688891097666699706818974", "7867809998037776106087696990810608897", "8167702978308698687259786280308913668", "9988719967780393999136769881808817786", "7796906766763078773066917880986709776", "8979917188799707978079767631807718840", "9777705978683870686186977991809701788", "6499617638169796076188796390946809606", "7677707799089778708968967981709958869", "6779917961679386680009698792406819777", "0101810100021001190004011007111121110", "6999919799853678860002497701706806689", "8198918897796696889420880871107848177", "9788419986677979796048086698817812967", "6846819776986167969198808180718446783", "6679807676669777678170680694719017766", "8608607066928869397078616080807703776", "7888809679988839989007989800907617799", "0111020109001011012711804000111022101", "6772808397838988974171877891019818969", "0010121100100800400100111001101020111", "2998806886088679696167789771910617667", "8799816878698777898188840760806005176", "1110015001011010051204141012121001111", "6827917288837981989168267372807510868", "9748817649867787687161977771916118067", "9688717877968748067187686790616716604", "7897808664786608697097736691917618740"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6365327380952381;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> profit = {"0187672907168350878779993616117779997", "1001100120109020111160100111110101011", "8009667919777719787929778799618879779", "7190369678878808666699798669809988698", "6163087619689808769786969499816799976", "7066809616493907697667599766717768876", "2079790809769906696879686779719799986", "9196668009879806897690978078608606967", "0217110001111110110101101301421000011", "7098969910977779994699879966706776787", "1178647819089619887976888036806997889", "6077896717809969988897364695908886988", "8978939917990915996899678898927787899", "3078899817699008678998646996817289627", "5210000017161000140111110180710410001", "0098876609995800696986799868916677878", "8176766819899616089868746986807698976", "7186699919889749807878897777016679799", "8176976704786806970679378687909866278", "7196768616988919886097666866517797997", "7629867909799918677906872796608999866", "9099679019679816889760707988716897687", "9177956918836617783687098899956988776", "9079698707867419497670906972608678657", "3088996819848609678627860789709766666", "6176477039068918976879897086846779979", "1196967706399986878698978807718996706", "6199969816658608677668929670906866978", "1168877647899879809567967879007789668", "1110111020002111010101500410000001117", "7089679816687706769786689686700686687", "7189777607987246668798967798706087977", "7078969007988817976999876796808808669", "9198989606767907896797886966916780669", "9076989907898608972986766979616966069", "9179778618889207797968756707618766609", "7198666717989718698767676968877799990"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6895300308473962;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> profit = {"0984666760676887098298686078699988681", "9083779860788977178669767188974689871", "8806697871885989666887788468979796189", "4360678971899617688893708178669979671", "6766096780997594798988973162686796961", "6797906691799876889698699176647676660", "6978660981981678688688288187698967890", "7889769090086608967877077065834977642", "6677898904887679896978658016661917961", "0011011040009181111000006211101010001", "6788979080099687188799777198976976960", "7889998880906686689998468198678888871", "6859791679960668687898989109686765860", "8996586661666058089679198057872887690", "8781977078886507687788788167016876561", "7797468891768870978789797199998607761", "0166786981166069099676489096897074670", "9768988691888887909684828197686967880", "8868898761897978990886469179989998910", "2688966890798677668096767108796778970", "9689898770999788788906766989876863761", "8973888780988989646660899167636298971", "6777962060749177484778060079797989961", "8680798750768989826669608166968798680", "6788398786789887989769080249977997890", "0141111002111011011191012000100111808", "7867678611990569997086764003977897781", "8888267561889779679897969030887887771", "6996666861966809869786799198067699820", "9776849360778719988973967078608266760", "9499678411686268769666787077780766981", "9679769990987886099782979188627068281", "8897976711786870769769899198966607680", "8969667770685767478838987177966870970", "6816968690988657689979968877879269083", "8787669460676966781767689087268887800", "1191100211010011000011100811001100300"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6925939050318922;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> profit = {"0966666768991198792076778990499668868", "9068998686991989976479899889869868696", "6606787876670089639066667779379677967", "6860898787890993669166877971669920989", "6978088696971269979097926988860692687", "6989809774670968968099713667968379986", "6878890986789887760178949967896986496", "7687679068771961576188976777578469676", "6878978609681766769187787969999767278", "8667646890891869870199677766777868468", "9968967768081656897199766769966789648", "9979778789800798699176998887778478878", "1100109111100110101211101110011080901", "1909298978671099636008986904687676788", "9889668666591906988069848677705777967", "8993987169680960878167369991668726376", "7966997578861698096181976968666896889", "9736766767990387908189669999977781697", "2699980690791688680096491687877678866", "0401001111112001110001101770017001050", "7766997889971066889009876668883987269", "6966798879961897196190848976959795884", "7868979976791983964188076792868677698", "7967214787690846769074707989727088868", "8977639677681689691168670799697797898", "9879969797781969996769797061627867769", "9877866766681079698767989600679077683", "0991877796970471897086299100973886607", "4836898597970676698089876669098727968", "9676669797671806677185629277909688738", "9999086897681758677739877793890978898", "6869639478740677876097607808769088669", "6672978666878772987089789678287807783", "8870296978980676618175787776788870647", "8699694624689793868028688766978676077", "6968889776470867896568969680639684708", "8679766688881876976094888937888937780"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.7122077922077922;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> profit = {"0950639948786889769168898899899688368", "9066873785967268688167819266968977856", "5606386989839976976166766896669977999", "0660869766666796966867687977096997864", "6838099377664778678119977882687989887", "3786908878777989897098686786968868488", "9369980796886267896862489777677886888", "9797387079682988976196699664679578279", "4886779707669525779198976672978899779", "8596786970928905677127776687977269617", "7986678669077069669193896879666808167", "8636678862707766768129687676786987469", "6796476298770029879078076666787676676", "8297792959070084879078877260939996788", "8679786820662809476188478969579676769", "9866897855969490687089148977792899867", "7699688976678846081028389999999769688", "6876799777667778803199879998260996977", "9866876697989967130069776576787966799", "1118108111110010010011111100011000101", "6666196992927788296107767867898279847", "8767982687398889899170776889896896976", "8876964697860841387177099698969839976", "9168788977987774877167906768797799756", "8967769966676788996176960676770748849", "8289877666866299995188676086996686786", "9697887678776667997068967807627897997", "9667267427966097986079886670786899677", "8960696699677957927088977967078999981", "9669867777688379968199697928708788966", "9896787987667992907186970676880888969", "6999988582896968799028877688978078886", "8779868796087979696079394899988706860", "8777986899876669966096998679988860966", "3898848276146778697189978796999889086", "6596888771667866879047754897866866801", "8694788997796897879176669677169606610"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.7369579945799458;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> profit = {"0996194088988887989767187887636878898", "9096799477698868787877869976387188796", "9908889966986666674897988676699889796", "6680993988029987668796871770889648676", "1789016667816787476994798869016933976", "9989103958966959869788898886786686986", "4993630832889786679887997766269699978", "0499698087877686993659687736806987989", "8768653807890897679667989867687768971", "8768782770679068797709796767668987979", "9690898886086779995378967699398697778", "8982168797807966788788869786676769976", "8869669709670699796897728976866795766", "8869797680796088688788749878876987899", "8668858896769808991696967979997768788", "7867796678969880976887987667667977270", "9766486967977699077977687969979967669", "8876767979989897709666986177775796797", "9748699397586816790076799779997677576", "7887978667378768960097695699878867889", "6799988560789898767908878689968768807", "7776487979887867766780979979398735876", "1898789697987799697689097869969797767", "8687999889662468889977907767987767967", "7981887796798977769589770977867668898", "8967887787679896917669879067779668678", "8777686366987776677987667608899930796", "7660966677966897979999977780668687086", "6368072866368896979893998786069699767", "3898186086976796779769686796606767797", "6799669678866677957888977998960896776", "8186966979677979976877776696678099910", "7884389868969867697663966638969907819", "8898369787795787767785778807976970706", "8776999999797872675888798670777987079", "9997787877776987697807669798697110709", "8666668919866980976976778866776096990"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.774995854750456;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> profit = {"0000010001002000000100010102000100000", "0000000000410010010000000000000000010", "0000000002001200000002010000001000000", "0000000000000000000010002000000000000", "0000001080020001000010902000000000001", "1000000000300000010000000010000000000", "0000100000000000000020100000100000002", "0000000000001100200000000000000001000", "0000800000010000000010700000000000000", "1020000000000100000000010000000000020", "0400030000000000000000000010000100010", "0100200010000011000020001110000010100", "2010000100000000101001020000000000000", "0020000101000000002000020001001001000", "0100000000010000010000000010000000100", "0000100000010000010100000000000020200", "0000000200001000000000000000000002000", "0100010000000011000000001120000000000", "0000000000001200000000000000001000000", "1000000000000001000000000110000200110", "0001102010020000000000101000000000001", "0020000000001000000000020100010000000", "0000901070000000000010001000000010001", "1010000001002200000002000001000000000", "0002200000010000010010100000100020101", "1000000000010000010101000000020000000", "0000010000110010020100000000000020000", "2000000000000100000000010000000000000", "0000001000000000000000001000000000000", "0000000000000000000001000200000200000", "0010000000000100001000000000000002000", "1000000000100000000200000000020000020", "0000000000010002000000102020000000400", "0000000100000100200000000000002000000", "0000000000010012000100001000000040000", "0100000002100000000100000000000200000", "0000102000000000000010101000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.04060913705583756;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> profit = {"0020221000011011000000300000010000000", "0002000111000100101010011110001001011", "2001001000004000020000201001000121001", "0210000110021000100100002000010100002", "2000040000001023000000000000000030000", "2000401000012002010000200002210000000", "1010010000012001000000201000100002010", "0101000010200000701821081080007200110", "0101000100001010010000010001021200013", "0100000000100100100122000110002000200", "0000000201000000100012010210000000000", "1002011000000020020000201000100012010", "1041122010000021010000201002120000011", "0100000001000000001001000100000000000", "1000200010022000000000000000000121010", "1000321000001000020000100000220000000", "0101000701100000000802090091007000101", "0020010010021002000000001000100010001", "0100000100000100000112010100001001100", "0001000801000000801001061070007001101", "0100000202100000001002000110000000100", "0000000102200100202120000100000000000", "3020022000022001000000000001210020000", "0100000810100000901600001271007202100", "0112001100011000010100010001000202011", "0100000001200100001011020000000001000", "0100000801100000900710070000008101010", "0010020010002000100000111000111100012", "0000021000011002010000200001010000000", "1001010020002002000000100001100100000", "0100000712000000701700070081000002111", "0011000220000010000000022011010001000", "0020300000010020010000200000000000000", "0110002000020010001100022110002100000", "0000000102000000101110010000001000000", "0100001110011010000000001011001000001", "0112000030001000110100001002001000010"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09707903780068729;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> profit = {"0001111001200001201211001010100101110", "0001000101010110000000011002201010002", "0000220000002001100012000200100200120", "1100008107200000160100098190110008104", "1020040001100001120201000220100002011", "1020400002000000110120001100000001200", "1008000017000000180220170030001019105", "0101000021010100010000011012010010001", "0000001201020000010000010002122011001", "1107127110010210191010079181101029007", "2002100000001001214220001100100001111", "0100000121000020020000111012101020001", "0020000000100002000010000000100200010", "0100000102000000010000110002021000000", "0100000001020000020000002011022000000", "1010100000102000000013000100000100140", "2011111001200000011020010210200000120", "0006218119120120100110099271110017100", "1000000001400000100122011210100001100", "2001212000200000011011001100000000121", "1010022001201001212101100000000100000", "1020100000000003002110000200100100000", "0000001000010100000010012002111010201", "0109007117010100191000109081100018209", "1108010109110020091100290191221019109", "0021210001100001222102001000000100101", "1009203108010010171000089000111019107", "0200000221020210010000211000131002002", "1211100011111000211001112011001010110", "0001000120000220010000102013000011001", "0100001021010120000000101011100021002", "1020000000002001000011000100000000020", "0100001112020000010000111010112000000", "1008219019100000071000089092011000109", "1011021000100001111100221110100001001", "1020100000101004200200000000100200000", "0204105117110000000100199172012009100"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15415939499709133;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> profit = {"0100012200000001021020101104000000220", "1010012000002010011100200101000020020", "0102188000111199879900102001111810991", "0020410010000011101001010000122102002", "0014020001200221001100000010100102101", "1181209121100189897821101100021810971", "2280090222111187987910001120011712071", "2000012000020002001030001001000000110", "0001022002100100110002010000100000003", "0000112020000110000200010120101003110", "0010211010000000012100020120201004102", "0010001200001011102011200200000020010", "0210001000010001111110202003000200000", "0010211011000002111001020120020201014", "0191288001010009858901210110011810980", "1091197200011290128701120100011700981", "0081089010011181076821211120011900590", "2170098010101152707912211011000712781", "1191177100221188670801110000210812871", "0190189002101097898000012110100800790", "2000021300011000210000100102000000110", "0001010020010111121000001011001101010", "1210010000022021221010001004000100010", "0001000011200212111100000000113103210", "1020011100002000110201100101000020110", "1100011001120111100110001000101110000", "0000102002200210210101000000020004100", "4110000100003000010021401000000000010", "0011100011200000002100010100001000112", "0012021000000211101000010020000100001", "0012011001100011100001030100100100001", "0081187000002287978801110100011001790", "0210011000020010011000002100000000110", "0002202003400100022001030040000100112", "2090190101100099578710021010100711081", "2290077101010188987911111001100911800", "0012111030200401011000000000211002100"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.22340425531914893;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> profit = {"0011081080110780111871100007907008797", "0010000001100120010201111001111120111", "1101100212021201001102420201010001020", "1010401211241111242210041110121001210", "0014024012411101224103200101021102101", "8000201088110790010870001007818107778", "1001410200021000211001000101021020001", "0022002001100101320011120200001110101", "8011180007120990001771108107819008778", "0121280170010910101990019208828108858", "1102410110041201031010020111101200021", "1024112021400011022210100101010001210", "0011101000100001101002010020000010000", "7121170199200080011740021009707109997", "8201090091010800112871008003728209769", "0011100100111000111000110110010120000", "1002202301001011010104140101021211001", "1104211200320111102112221010000000112", "1012401011121121020210001201020002110", "8212180079020780112082118007708108870", "7001070179110470011801009107818007928", "1120301110002010420210200211110121011", "1140200110010001120102000101021112111", "0124000201201201420100000101020010010", "0101010089000180011890000108729009387", "0021101212110001102012111000020111210", "0001000000102001010001000000000100000", "7110171078110930101771118000911001797", "9101080088100770000781007009009008978", "0112212012010021202011222201000001012", "7101181198100780100880109001900008429", "0100110101200121200101100110000001000", "0200002100001002100002110100000000000", "8011270088010990102871209101818100987", "7102170178020970011890103207904009097", "9121070075210960011721118109712008907", "7100181188100790120081107007829007770"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.2904211956521739;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> profit = {"09690078871883068609276068907090911198785604728078", "90161169671969176711967198802061941066889707978986", "61061068991689189908877099806471610199766776798996", "96601087870986159606968198713181800176888909777887", "01110111101001100121911511111112071211013021100011", "01001011101000100010910201011111222110101120103027", "76681107787748078769798069717180911166769706778983", "89871170731799077809996008806160710178966616578686", "86981177021270189819667096708060671069866619776989", "77970083200665066201618071108140705098788907846897", "11101171100100141110010100010108622111010120302011", "89690077261066087816779066908181801169998608789681", "86880049760606028806968056718187610069978607099768", "39961089050660169606977067816081710069698617199888", "01111100101001011130000201021202115111091020017000", "67850077864826107609989083612071901098976607958879", "86990087961789170809990199703170910123866819967969", "67961078821886168015678476810160711176699659777769", "01002160101100300105111103027111458201020011216111", "91861099910666099550776171911091801188679917678797", "29899979660799099617088196918161911187977226776798", "76761199611767089717809128911020801167996608760989", "67781086780987090816890176716910701168968024868798", "01015200001000201411111000110202112101100130710681", "69991060970656089707927009818071610165889619797687", "88981198610667139631686090937061370038666318967587", "98871078710978067809997189069161501088977616876888", "00011110001011210121111113600202122245001121117910", "72631176880886123071816087900191911178776066798877", "00411111011110201110109200121011122110111121201000", "96781186640888077619621076609100711092636759686887", "01112100008171210011100211121100012503001121110101", "99680297676867199748987163519170000116991910689869", "14107211702011101150100117021211002200011511010000", "11001210152100510181111200121212020100021010151111", "10112111001100101121111110021105121011100111100909", "96971167691666192708866063847190100107398319779069", "86961068981999183618778158858023600170979707794987", "78780179870996098606999186907160900139068818167679", "88681066681979976927796086707130912097608906679698", "59683196680888166909768096716161111089880916899988", "67790176691666068609260163610171950137899017678787", "00702201102001201511202311126252111110101101010006", "47691066970877079917684098616191010197866710614865", "79771175783701099726778779817261601177168606096875", "27970077740899156717766196719081815079679711908998", "88870388662999787768608077678160901094799804680999", "09980096980678089717797665898081801909669708899069", "78981288891868076619989888817080601068798806799607", "86671736971188099917898177807071901997988765589970"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.768197645498259;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> profit = {"02688611067467601278690788601181967889067176978968", "20101021100810120100100110012112101161200101111101", "61088712098763910065167868011061438679178079886787", "80807804058766717086867888610091873867196579969778", "81870860096167916307687988901190599767279299778878", "60788011165827616076976982910061798099077084886698", "12106101100010121211002110012211001100204110111701", "11240110110000111211110201121161111110190101191000", "01000111003110111111001043112212191101201201111100", "60959601009977008088769977217170399797107167998997", "70886500390979906199767799804460918787199088779980", "48771800199099879168886969900080629678169077772874", "61666210177904617166896666800090089886199066799889", "70367700079940808167786688800191676978197068798298", "61979611109868019188877866880560997797168789196098", "02111121100710101211001010521212111131114100100010", "10076611186978910077872697901180868787169079889779", "21003022101111120011011001012299011100219110150100", "70680711189666817107686989710091699776168288666488", "80567611189867817170696677701000669866067189717869", "61186901077887808066068739901780793888195098881898", "90668701066898707189607708701590787926116177666064", "00777620197666712166870659911160799689129168868793", "71889912097966806096776069710067917668187077689996", "81688810479668619087305603700785978856069034667795", "80888201379968607197989930900491677776086097697858", "60069901128988859077979779000380377879068177999897", "01110112110000820110001100004251107011201100001110", "12101021274000011201111000040102511151701201101010", "11001021214001521200751074321002110011110211401111", "81699616176899618990896689850000767897187189986266", "12110111200001020910000751012200100010201108030010", "91485701139606918066777996315171076688097176779678", "60379901991287916196989177701160705767068188970966", "71839811198996718199379787771070650899099041988778", "81687011177689717178896687801080678063089119697546", "86766901098787938076828657715191869606169197066677", "91977900177868717066869866911170879360077166987979", "02112021211111111210111100027112000010001100011015", "60797709009699616166912868600180969867009186678986", "70869740179997849987569796811071789997190178699775", "11052011210000710121011000112211110111111011000701", "70779810068766807188976739700180784196087106919688", "61999401178768909089878747701198681976068160784679", "91897811197777118167868666901490799609066097076076", "71867819197799908561866869900083778968179018709877", "81698611189298609067168977911160908767189094690798", "91778670199882007148807978810120697569097766087063", "60877900098789917086969995911161767477187087779607", "81788810070498809089843658700160868679565189678370"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.7967836257309941;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> profit = {"06866919068616006776607992789770619067198076756078", "60897709189607608967919569699861519147091076699176", "88079707098903716696679937676760812168067186866077", "69708809197806908777319869597920705167189878006067", "67980719096706608918608786686780709338167098986196", "97787027079816917889217994977771907567168169909087", "10001201111011121110011010181502014211200801001108", "99799710177607709569816789499970619189169069666067", "01010011010129120051110001100111021100100210210209", "68999717108607606269607676868091819067167087878099", "89876917080714907380788786997988907086088197298066", "66987806167009618976709667346480618179388096884169", "10000110201000010102221001005001311200211100010311", "67366617974900716767706687997720816057089016837066", "06796917169607017476856688460969717076077067386199", "00100120200111101114171010116012110201110101000202", "68688719067806710877719789988984618398079086969089", "79679815023917418077617788908881606092069198867186", "76971816568706717708907774677758717184096088699198", "67678909190627647780818876667971809168148067915287", "69636208167727817698009767767875716166771186879189", "01710111108020571101000100100002181601100201100411", "79998716078916619778900779698630918199489187778079", "95987907067606607778717067889786286068189068679289", "96368918078608818877607607779781816189087086767168", "29796409166717809846709770768880800187097166688188", "76656914189309419966716877066870706178166186968977", "89798789069409618076609876606871619068067794667186", "99676719087657068877708998660961606162198077776067", "78797759109407909879806778889091617079086176978169", "76628707198802618857703888776901816198169182898157", "01000120118010924181520610011110021110201101111111", "65877906089638716678719288766680006677067197837198", "11100011210111111010181810010112000100200100800250", "99259749197816708679618660696761600177698168896189", "01113521100120023011161011101011611011106201100200", "64663618068705709986609688766791707109067199798178", "77878719076907618248619897882980707190199036988497", "10011121110320010001714100101012026101000210106110", "99686606068818717694708889669860609069008066968076", "81797809078819709968109977678691708679080096578166", "00180180201010010100121001170111111210200000110201", "77879606189901608986808686897780906093169006896188", "66688919077606716887617866647621708196066060860067", "76809906282808309869817676967981888179195188096387", "59608006179813806691707768667791309098067196906126", "69666916088407609795908978876881706088688060660187", "01001010200130120112140211910111121214101210311018", "77769806096616908898817868786651958079176086828106", "86776787996916929687919988767971809087066187767860"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.8284758719541329;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> profit = {"07711817899861719118688996666889116676109916908882", "70710708667790968116857799957674007688017606849798", "77011906899960781017896667687986006998709908658689", "11102111010001101221101010101010111001010120111110", "10120010410202000111011100000101210010121620217010", "87910017078970896809879758686897016777708690998168", "10011101030132110221061100501110221101121010101110", "78610710867790779018888866776798008976818919689677", "86804008077660879016788773665854117756518707983907", "96911736706781998112673788698967508766916616843768", "97900807760980878046656767867868017908806816826489", "87902917679071996018066546698697018776864817988898", "69600739688700756117995467867999118736709606777798", "10012020010100140210110001111010180900111121101110", "79710817898971087119688696756688018989917606727996", "16800917797954806119696796799486108789718907689879", "98110609988660760006776871887899116578606717968784", "11021820010012110026011091001300161910010021004900", "11121021114111110201007110000101281000020021011101", "86711918626870996610596679678289806809619604777889", "68810808766091667005087686691998707768817716966999", "85901768875691897109806698986796019486606702948676", "87611918836650866176760896698897116687709908689799", "97601718777540678016668099986769016697414988768764", "99610506786460997917899909969668008697918816796693", "69700806387671661109686990887067119977817903849866", "69610657668681778006696998086859107889611919497886", "65800807696961598007989868809987109876707909797988", "67710616587871697108168697690868918666618313879986", "86901817898690648312978760898079119768619919868488", "87810919566991889008999666586709147878618615869977", "94601708478790869019867987978990007896609606878899", "10012020150011011128701001119110010100320110000111", "10011120101118101680011101001140101710021021111101", "67610618787880886116796689798977010667609709699996", "66900719779779975908746669886788176086802606819999", "78901707560730887100688997876679016808819608599696", "68810716668660998009867777966886007680709917877887", "10701718598871976006867498676666306887019816988769", "01012021110601110121100111101110220010100010111000", "97901818866491786009769487178989019299900619996387", "96916609768861697006779989993966107669806018597458", "10022911011102001220100810101110120001111101010017", "66800009766761677114628863993956019687609810866966", "98612916988971769007996778478888016858919508089698", "04511908842870286017648694997667019197819916808778", "89817819336871798417689869779898019997816706980779", "87610116974871987918967768899498119968703409677069", "89811617068991978008979696888879109998608516977607", "28900807789880694019969436686879116967907876889970"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.8653125;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> profit = {"09088891881861797878199667717110985698982988699948", "90188991860760687996149886906510770799459817886596", "01010102003102001001141011020031101201110112101094", "88106890491881426777097769809911061976797696288937", "88060980291461979189179974609601885699626888788976", "89189080971880989978198978718901171979896776097776", "99098800960910868775197687918610880776882767967997", "11200000001402400001211001111118052111011010110110", "88042990081881797947179777707801771966367969789619", "86099760801761798971090607916800791906888089677886", "10311101110112010001191001160112111801110810110011", "87184894871080779936087168619601991596877669677767", "66086810861800996866186997605811761766678699888486", "10211002112000811000540000110021811001101100000110", "76049984770798086928088697809711740786696798907697", "98027860991791809098068996716703960669876965766999", "77169980780961690668096898812601960789937477666989", "89071970990980906099189177806910970867776169862766", "79078770470360296906166656647902890799896988887676", "86179851711660888960096817916681991986988766866982", "11101112101015000110080011081012112001110111114103", "94497991799884869869809389716801981887676926897798", "99179871901760886966090687817810681198790146688492", "68079960760190698168036088817110781696786989799868", "68167780700690999751188806719810081769689786793997", "76194871771870768767197860919618761966697289778959", "79086791791661878869078879007490770975986786989811", "10200111016101011041811111000012002070131001311111", "76099881760950962676167799700611861797889786898607", "15096961881680776996088186406001970788846778676697", "11310011001012100108101111911004112010211001111101", "00111108102111131021210008021140001110101107010000", "97108180771978799989196707708910040762669898793669", "87068785791961466799188886706710400678697068876797", "50115102111111000001211111021021000110311001000110", "67296971998570767879081679907701761077867867777876", "99079771600960868698089966779811671706659880977987", "89169961661661699796178696507800280760761732956678", "94176880381861689789167766918821663867088768897668", "85192981681770973798179889838410691656802786596776", "29076621780781667668060697619611971791820989895966", "98168770908661794197191972707701800887779097668779", "81198761681690967686124888808700960683688908688699", "87268670990990857986166969616817881702869780678776", "68127091761680976888186777938610780799858666087186", "98088961871780066686198997819711970775999687808664", "96188770970780766276478938918610360776765888780866", "95099791680741699769174899816610671896679767168066", "49937791181681998678099695110900691787676797866608", "86476670961760799662382879117710970678866996646680"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.8782021782481976;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> profit = {"07679809966609776996384678860819978236961869789768", "70088108798416899676760856680818796876871938989767", "60018021011120101710002600714120011011011011830101", "78106908877806666997921960390809979667130817989777", "98860619988617886888670678890606089136360969686678", "81096003767848719377760767381606576879091608768697", "00201001100080110010102000191020101110001021810011", "98189310889809879666661797661708783669660818689809", "97089718086719988698761866770817770967990928789699", "69178608808917699692840668781717978957681816780437", "68178709680718875987880883681809668089661906977896", "64186808797016996767670998670709979763680818796776", "01201480111101110114101070101110000111011021100011", "96067809978610087665681979981418767888730909988766", "78168718968910080768690869661838967889961808998897", "79068117897918809998780799991816679667890709628781", "69166909895607090896760696980618869969960817786979", "96798306669716798068690886860906898697761616696170", "97198716998616699608091587790717878788790709296879", "66078706827745886880760588871888889778961819866989", "37096716788616677607030765781719997778991716568706", "86027606648708986996300827977609777896841996877866", "40210021100011000010000500112070011001111111010111", "68696707868909876855785046897817889778989618888898", "75067609668977699888620406690739999669877619767666", "86008707683809996678570660850919666697650617689795", "86738316776619699878791868081107569696670606837387", "68199896788708698697871995801676689789860819797939", "00400111011011110001172700110019101114111010011009", "88186607878714886978760879160006866888976926488978", "11200020110011311018107131071000000101221119010010", "98096608779908868678990799769600978899871707579689", "97090517796907968888970896561809079887591617568898", "79178708776706676978971896680607706276670906968998", "86199613088907799889771996991608960866890919789697", "28061816990718869677780766671818828066971709977999", "37163716658618866987790769981809876607781988098987", "66176909779318979788861897694819766670990600678890", "98013006966607989779981986681928568979060919768793", "67136906986813696696941875761727979789600717849886", "11100110011010100101111970001611100110000010041110", "89089608989809878678791666680917699796970016679986", "63116021210120001101191111011210101080111101081110", "98179818866819897699661897690697769980970610966988", "79896786779719967628580876870405597906780609088687", "88388618887908928996671868391817668797644786808767", "99096809907608886666870879771809889788891916880687", "77176608648707879189781867390906896998781919676056", "66077910939716987778061969830718999989981818868507", "87178719976616719099661865799809887970360608777670"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9222423146473779;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> profit = {"08186197976957478758199698999866189980671060162035", "80586891848866977694382296999888167661481071696198", "15008626389687977798076888768878064370760080789178", "88009799966666869677098978849678098967670090978688", "66890799749684676476197773976669119990860170977198", "18677087887677868979077888799679098760781071667183", "99299806778999689798067198788078077960991000789197", "71699760667977687897576886366981066760891090778146", "98397876069667790998082899974686497990799070686098", "74864876607882968661167688698856561671690060628067", "68969787970666767998099999968779186990771590376087", "98666699686086775979179698679838187980751180989176", "56868797686807999777066661988983070190740191883088", "76764797726670778699067488869888086970791081778163", "49986866797797089677169869657888166911971071893096", "77767688966797806897167799698679166991781091868189", "87796897087598960990166239169978084970681160966066", "76764978969976689024166766866898155981711281987086", "59977799969779799209179666688845169860891660787077", "84876987818979770490099688678697187960671171987136", "13001005010100111110001010101140200112111202101100", "98799767869766666679009468893989089790078090727147", "92687776279967976699190899988687169826760191866768", "62897818869664872766048086979898096999890181697007", "99877898989968693668169808787778174871880160876097", "86883886989818999668089680869762161898790181787167", "99789773969698661866189978090777168780670061667029", "99647986796786596687098786909963186870790160879099", "99896986488989789688138979090697087997986070677070", "88866609687898869886196877796086266660681092699187", "68776778857388877949488976769807156361981049668061", "68889981669838898857097882737670569991280121728067", "11001000451100110111201011110215011112111101011150", "86691976968878668568086976688656106890731190588196", "97489876716706664597099641867669160673770060986099", "96399797969919999989178988789639186090980181776076", "86769666979897197866192979879669197900960150699166", "01070000010000110100206918007011203000012911100111", "64768798767777976786107887679692177990000077988189", "78676899997549788197176989798888137861001161996149", "11000111901101111111180000006110110002010111114100", "00001000005110001261201111010001110119011012000100", "67897709769898796867099868667942096851761101876190", "01000100000011110101201101100291100101711210000211", "16799677663987889979178687686667059761991080068045", "69877687827887966888026978677962188790891070609187", "26987798686938386777176767797988186690864060890066", "01161111000101010001117001000100110011111112010050", "39789894968786986873046096297866599761840091486506", "58888376877683696676078777990717069661990001576060"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9348244704488224;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> profit = {"08666768732756688686997866190077871807156816498579", "80688677815992966666679669290086696919978606748667", "66098999806868798687887786171079786911666716879766", "68905688316998789568968668090176897618888809978777", "68850848704976687987787477066069986802967918979676", "76968078916888679689966686090277827406677709638668", "67984706808679778616698999061199985608969606896777", "87988860909876786778686798060196528811768807965769", "78837989069987877726276406066099769808986908297786", "31010100600010011110110101112200010021110120001101", "25664689900698788966669969180179897709787909699966", "79899868906087898496098778071186868803727917677979", "59697877819806276986979889161168988818946919898669", "62886896708760956899967686180079886717618906875669", "69776677807829019979799867066098877716889916896679", "86988778718975106698779886190997629719676903676687", "86897986718866960986966992010169196806837906769963", "66659667719498969068986777090067896719776909648999", "86868817216989798609606996091186863819979608078786", "66787968606669986890868696090078169608699716696988", "96897966216099779968079696161566982007976816776785", "97868698716976976806706688090077695336996809609168", "79787686609897996668960899091197289614869989879796", "86764697419786889796668068470086286807777719677668", "66867899006788689799989608181168867617791706978876", "69687698619896762766689880171174997618766601766708", "12100000011011010000100411002101090220000011001001", "99796966618768691999699787000069989719789617699786", "00106010620110600010101011200251800060100121018004", "00010211021110091010501011102000010120060011001111", "78776799907867996687679867065008669665677817986788", "76969796909689879768677684191080896701789929678664", "86789895708898861881962289098068083906917609767798", "79898282619688729966898869980169806304735606568117", "16676758907886796639259677090096360919776008868697", "89968468807887778786036866270167939019986708698970", "01110001020011110110031011216260001101011028010101", "79182681819387696998764778090051649910897917779646", "19689697917796868796998777071067977908089606699879", "57686766818241873779796796080678137819808906836867", "68687798607768967699669716090079756617980806677885", "86789768919999999967889776061089660709698013796687", "10101000020110100001108100112112000021000101111001", "66698967809796636986699961171179968887666310987686", "47899689206688867606768697060096758607686719066967", "94777396909797976479707776091087666917937918606867", "88989865719785669886699786198168788809967617660498", "56776677719966669979717687070176716916888606984097", "76677676806766786988869670080186919704768808669906", "97676879616999973968586868164184877016975716778760"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9660547785547785;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> profit = {"06986667889870879893987918699860697789906868866881", "60719675932460869488789916658891696746714776767880", "97068596369270799396186807608760866774718136775890", "81607869986981677786798716888791669768908966976791", "69870747889680968709861806867881679996719868869880", "66587066277620878698078906766793766866706188699980", "67964606898970777618779007509871778889616877696798", "75697660887790874889798819766770697976800897696381", "89398288077771776649869706766770997986717777799740", "83688798709791697898987615876787676887918966787784", "92969787790740798898946306869952789899617886769771", "84296697777060779798869713989871859678817778967790", "76788279794601699692689897879990798777911632877661", "00010000110010500010101010010182010021121101081111", "88769878767765088986878659767971877961416988638791", "76976777799790806760796918786781685986907636669971", "99978874678990860988883808889676666199619799826791", "84377668688760979058896816788888699869708687786971", "98980918499991868507897806658799787898906792676991", "38669889988820608870798718896881598829819969897380", "97178077899861878887077068986891766666619976099981", "88896779684680798999706307766890876797908769666161", "79681898976991863678760818899661676886896738697860", "99878908763780698887038008967761616688706678669881", "11010001010191510101601006010201100110021111011001", "86766679656370988668878860097770708876918692788061", "66688757788980778768978900088810273929819996797961", "95086606676871688859869619806861363887616866998880", "98887696669990769886669707860160889868896669497853", "88778787779891976878886727881070669768716679998781", "69698977785798787898996607166700876997812878997661", "01011310072102116891101110010000081610021114111481", "66866776967870866675786617238680088967615745776860", "99667679978591786989677100768678807699719776973671", "76699687769980756978666608339961870999617996896750", "77779889988670991888678618988796969079717936778600", "84769687889772689692698817286691699706819897699660", "96486696679871169989676806978870799960807686867130", "97797768796891496798698709868780676788008898668870", "01101010111112101001109021119112111110001100000011", "64889660787711679869986618966621597797810618968180", "87198188798761967679977616986681779986816076699901", "67366879768730839896763719966771479398901709597290", "86668877766821869729698812669984566676808690786960", "87798666777980668768066607794991798768609657099691", "66776999986678362879969618999991779796606998906961", "67569966979771896667967918787871636897808976960680", "88878973777761797993918800988764867661801929696071", "88998898487961979798866806685868675063718096968701", "10010081041011111110110111103111010000010100110110"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9938351254480287;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> profit = {"08201201020091101021100101000001200001011081101001", "80930096610767788766799896679986069977699698968999", "29068179618397679986688260678667167696786867986976", "03601188848696846682796897846779098966689771937679", "10810086108398826797877769789966048977045776776899", "20110001020070000000011110008031218010001001001000", "09788006117897799869908666479987187779696968999686", "16986160816699697719877979986899177288957668878937", "06681018019967863689686671778777066197986796768678", "21140211100010110061100106110110130001001110130000", "00888076900866776978786388677786067764787796776768", "07363086908099989798997966976767374686878686796997", "96999799616907899778666968896969098868868764889169", "17768079706970389768699666667966068997667697466666", "17688076817983066796766966778798168766947968779788", "08742099617898609636778881967670196767596792677999", "18966097306999690871827767988981098789989888886797", "07967087609777768064778656686989076216827677966689", "26889061867976937608867696678978197766695999667769", "16627099918888661480768798899878069664667788648339", "17678098617966778787059787666986197898777966569776", "09897107808969672766507783777977186889898769866896", "09867187606769687878970976898787387268488986969699", "18287169613996987667779076686887066779882992689698", "09696167708666686599887706878778087798689898678867", "16079069168686617668736660786793180799669969798781", "06687049716986799668678687007988076966969698086786", "07748078717796768879679878007869089977617682668687", "09869896807667878689678686770899069778773889766869", "09679098717799769998997877988066176069657699896892", "08676389718666978877878879869607068788879778878989", "16796179706796801988677783899670197271877699861918", "20100211010300110010113001000101001100071001302500", "06694187636796699796988688786769008679896896767787", "09788877607488868679767670699687180068968976989783", "09699072107689777276882777997072160078679629879899", "07967178906869668166986799677687076705697889699691", "17667098714687679664898989678981098850666177691766", "06760069907886959866784866967688089666078889857696", "19884095808766498296798886617577796796707879667788", "19695167617887769757788299973797168976870737899896", "06877096717676978697979989668676089681887099808886", "89677066919869698798668996988979097287873908976967", "18716188606647828798696289829989166997997980968667", "19997098717784768966589667067888379866868899096689", "06837097637986778664666879866976068799569076906796", "18676198806696976678969988686681279991779868660967", "09968069607916797673786687768899577867678896679078", "09779083706966899863799968886981088996989866896706", "19699067808796897999669871679298073916686677967860"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0241389045736873;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> profit = {"09977596867978699788058095697866614338667487776991", "90867861988978976288169986976689908878997616888940", "98068587976266678896177868896767888799977686667460", "76606946878998866679067979199889818895097766788661", "77860785669786797067088609996877209969997786697861", "58597027789786686666079897768977987587796896869870", "96848209976868787677097979779879019796809872182861", "61765790769776964998069887897799717978889976076981", "89986797096872679767066987688796907797697087286881", "68776876900989699687198889767996919669917788702760", "78689969600686679876148476776676717987699678669601", "99297787896066777984069948898698706994695773991862", "77698867788606699999187978768969806969697977899751", "88686686296660788698176876760798619865066996778970", "69687679666767077884166779917780717867679756786604", "97769886797798707787088679693869619889666178978960", "96867674999798770679177688987978606696976899789660", "72860669768996876078189187867986808866787667867981", "88976679687899887709089668999767708868899936878761", "88697678776498479890499868767997919768997968688193", "01100000011011101104010101091010111009010010121002", "56768796694687687889108696968888206799879969856871", "89778979688976687999080989497976907867489769887970", "09896898984998766168169096967921608998778697789660", "98670978887477778866098908879077709869798865199970", "56899797796886998788169680766388717469896996768690", "69819778677877969897094987068881668971107988789890", "97999679867966198696969676606966618799648636907790", "76696897876880737797187796860777717869698999899491", "86788987796697789979089903897099666878977786698790", "68687779997969867869187278867904806667377897888980", "69797799666898098677086178167940709976789987239980", "69882907997786766879129677667687007789698586987761", "10810811011001110001100001611600001101117510100002", "48889797797669796889167897887669710886269969976761", "38789579769998886887078984978869718078689884677970", "37996897968966689666096966796767808706968896919780", "88959768797495796688997899199876916860799887889661", "69909788696660669789084778166937612697095863639560", "69799908919996767899178799049778916869908668692990", "77777699779576966797099886788779879989580936782860", "46677889076799718699097689969789559888869086796380", "81868977887779579636166969839898816898663807789700", "76666626788376689768099756869677609467386670979691", "78676810276987797886188717798682919698667779063621", "78689687806997878678258896809983807718398987609810", "68787926629198689788167998979889706799922699390861", "99468889876879696971089696874799707976598376688092", "94666768860657066869077679999988606786696809216900", "10011011101210400113210000001000121001000001101200"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0616047837574747;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> profit = {"06968968688991669788090927869666768867988969678499", "60926996498861788977780936066996797789968679069687", "99086687868971776977981626897899688886989989786868", "62808978077941679868670983676679878767967996996707", "86680689689977969997960910888846788767966874968997", "99696099899661646588890876607616766999696999687687", "69878906496880976686681787769667377977778797696982", "86789960858680886869840999677679679792287797197986", "64806848069870787888680677706797686968888689962779", "89678995609990974658760987898766897697679662397871", "88879968990871896977981293887778979779877888868967", "98999686898071166878690789998866696599779986698976", "96747688797700666887880776978676679768817997776966", "11117100001100000010002116110110111101130115111751", "67769698798160088766991876667398769669887678697996", "68776478879660801878891897698986769684778707476875", "98699666746660810686881779787377887856782777968997", "79989568869880786092770966376966966689899888698698", "87769886857781678907821966650639888688266968776696", "87787869887870686270271697876628698579788896069868", "07969868679680988782061789666788859888899975767879", "98876984868980998727600299886908697878967868886967", "00100010001002111011100110110110000015000111011001", "99699879692771887996721066899878866889766668985798", "23281789789871797669891609926787683797681678818667", "76630679773966679667990690666681777786949979876676", "80868676788991667368681896019697819876792769989988", "66978067098971698757681926106667788867607877611877", "96768797687880787606660966960979847675886869878616", "69868666777861393966791876669096642976867966889775", "69974167967671987632801788967909969979968887688697", "66996679768660867698880871779690867987987878698667", "77687736689661778986860867878698094880696487666686", "69878677897971668689590687184466908649989697869866", "87888679679691997688970637987297480797871877676968", "87877997967571668665880877886999867038768995996785", "68866979697960685887871898767778849308991866489669", "79677972879981946989885976675697097880669236688976", "99999672868781877827890769768899698796099963787979", "86866978877713878968960684908668987696907686971787", "88976687897970782968970619276787691819970791995796", "96998977668991677898981669788988468982967019779969", "67897999868891707869761677676687897963689108996676", "99964977928675877886581889979678777566361980838676", "60799661938671649670780988968866686946799798089997", "76896899696971976976681817817889667988879793809868", "89668767278861768869761586918988696698715968990671", "46879699789997989668890766986766689769977966986096", "98609888776765979996760967871796866867789677967909", "97877726917661657868971876876577668596976966781690"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0858004385964912;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> profit = {"08788667998979778898999769721998876778699977777881", "80687999797969682889896869675678799382988679995761", "76066879688669989869976698667976668818797878888671", "88608676888767697995988246878887798977978773191841", "87680786468907647667878786889957796678998187699891", "69867099967877269969376467278079947866658671867771", "69778906898979889388797878788677696797687988998660", "79966960868646756978779816968776976865989966899770", "97684988078659972769866779867569683266999669967681", "99886696708966665766653790798709899469969968867171", "87888788880873998766869872786887768267586666975960", "99679896698067896788736786989359896966188868677790", "76660774567606708874927869866878796887626787998770", "99977796963760986666769866898907879776937778798791", "76966287969879099646868698698898889998896678658991", "78894685769908906887879667896189868679769777877881", "82977996258686960668177999696697880438686898896770", "88896939777786686049477946686246997889896676866890", "98696687666876486406867696779368677678987860798786", "89957988966846678960971999898796708695857696976741", "98998377868797881489089766298788898878686486799860", "99787797656326677767809986868696878687968768787790", "96688679639679897771990907769998796686896792679671", "78627488778788669969799088769759786976538799589860", "66948671797866969499680807978699837968687988968611", "99866786902696879669667870986684999799262899669790", "76688279877988686678287799079860976768966907693891", "27678786698869999879966678706697679996892277079891", "15789888786968866698889986960986759688866996896861", "96989067578389816237769766869077788766789995887660", "97785777608570989469899598698709676668798669748880", "88677976997987897686868994076790739056896698866876", "87677969687878888967887789967767069467722946998160", "79699497896997868970979839775873607998968577766871", "69886766398669980778886679699869970187787996979762", "73896878242987964866866997796760491099799966936590", "78177696666687973879788769698665698908679988789871", "82878675697676898985876689868686787980769583977981", "69799669995169876898698562988778797767098997989771", "98979588968823968985869386696899268976907697895681", "98788879996867696677686872626986287999870858776860", "96871699696877678686477798929966959995968095866870", "77778786666687779769869989079969479688995900888640", "79837186986878878606682989776598676683778500678671", "79816898989697688879776596608878979979987886078765", "79899699667799579697987866979846967387897687709880", "75819789775788876686979989396786869697956688890661", "87688767619777987877876867888688187589768866786060", "86749767876979987984697619996687676978786747686601", "11111100110001110061001010111006012011110001501010"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.119340451412353;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> profit = {"06799977786969536688776666797786899678686568986998", "60936288668498768606882997776892776988679678866779", "79074868988777966967966687686979777796999667778768", "93707699778296986487976789988816875788886388987979", "96470889778999668066218188999666987968978378797987", "92868097688787866819786767685687668881996693846678", "78698906887798668887676826869776978989778966793968", "78899760879678896787666977676588608689966759889677", "76977688069879968877676667969961987679978666879898", "86877887602667988958994659976688997766968972860888", "68888879920778979877909689868968768798687797789948", "94729776867077389698886877899768926978956776989888", "69799897767706777687886770896968876769688868996879", "98769788978760169779966889689978976881968664748879", "57996868999371098902869668986989869976988948079798", "36686669687876909876676467977977922887679886798779", "68668686889979890767889798666886887898987658772666", "66940887898667987065707888976669607969476867678659", "80686188757987076602886789779697796786687969877679", "86776977787879267520897680897696767799889986667968", "78992766699889868788066988884866696878796689979466", "78671876790886678089603786897818686867868886879689", "62668666649666969767630595866668758778556989780689", "69671789666878647876975076460784889867878097999999", "69888627658778669888889706897380676899989878977878", "67798767799709878890865660878987677788676678982879", "77699686998886996978888488098879988669956678698768", "97889867676998876779896697909098698999716836773887", "76689596968969676697476078890987977789673998679878", "78986675969799998666886739809089869376867947688668", "89716878686667878699616888798806826989889669778757", "62966768188888976976688407987960857878726998967888", "87789696997989898677667866969888066986748696097866", "97778670896277628096985877897625608698769799966898", "96757888778666927767668967887967680887889976787794", "69779896677978988977887887697398968093679878967889", "78986888769768789689767698698787898906659399886868", "88688199968891678969878798999698687360997984699967", "66989979996969969468785896976887778669060967699837", "87987976768586878788965787517682468759609788769896", "69968686887688897679686896663796899997090589762766", "56633697697786986899689086689969679839975046081668", "67687965679766485668888977739469997798688408776677", "88788369627684868796969788868798696894789680978689", "98797878887997077686987999676679097986677079066896", "86789498768894797776778978977876968689966877607989", "66877639909968982877990972839887767769992168670979", "97799696889888776669466988788678887889887666899049", "97678767984877976576688977687658699866396678987406", "89897887888899896998699989878878684987766879699960"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.1578666666666666;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0338409475465313;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> profit = {"01100020111001000010000001001200001002000000000000", "10111001000110010000101201111102001100000101000100", "11000112200000100000001000114200001001000100000002", "01000000000010000001100000000012110000021000011120", "01000000000010001000010000000011110100011010110100", "00100011100000100010000010000100000001100000000001", "20100100101000200000000010000100000000000001000000", "01200100010000100010000100112100000002000201000001", "10200110022001100000000000000000000001000001000001", "10000001200001300010000010000000000002000000000002", "10000010200001200010000020000000000000200000000002", "01000000000090070000191101110001001920010070017100", "01011000000900090100182100110001000700010070018000", "10000000111000000010000000101000001000000101000001", "00100121132000000010000020001200000000200002000002", "01000000000790000210121101010000001900010190000000", "00001000000000000101000000000020000010001000210000", "00000000000010021001100000000001210020000020011010", "10000101011001110000000011200101000001000001001001", "00010000000000001100000000000010200020010000300110", "01010000000110010100010000000000100110011020030010", "00001000000980020000101102010000001710010180028000", "01100000000120010000010200121101002102000111001000", "02000001000110010000012002230100001000000110000000", "00000110012000200010000000000100000001100001000000", "11000000000100010010020200110101000000000411001000", "01100001000111000020001201020100001001000021000000", "01100001000110010000012301200000001000000200001000", "11400002000001100000001000000000001001000001000001", "21200111000000200010001111100000001000000001000001", "00011000000000002001000000000000110010010000410200", "02021000000110000110001001000000210100011100111020", "00011000000000000202100000000012020010011000110110", "00011000000000000100000000000011200000010000010010", "11100000000101010000012100111100000102000010001000", "01001000000970090000171000000001001000000080018100", "00000000000200001202110000000010100000021000121000", "20100102120000000010002010101000002000000101000001", "00000100002000200000000010000000000000000000000000", "00021000000110010001110000000011110020000000120210", "00011000000000001000100000000001100010000000100140", "01100002000001010000011104020001000001000021000000", "00001000000770090200281101200000001800000200008000", "01000011100001200010001011101100000001000100000001", "00001000000000002003000000000041100010011000000020", "00011000000110001100320000000011110120020000000200", "00010000000780000110081001010001001810000080000100", "01011000000100000001000000000020100100021000021020", "00020000000000000101100000000002110000014000200200", "00200101122001200010000000001100000001000001000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.11398963730569948;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.1976911976911977;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> profit = {"09009000789920000100900701020090009918009201105001", "90018100375911000010700801011010008809017000119001", "00020020000001212112022000002200010010010031010211", "01201010101120202021112011011112011110020220110010", "98010100789911020110800900100010008918008100119000", "01001000000100000000100201000020001000001000001000", "00210000000002212102014010111200100010000121110110", "00000000000021001000020010002000000000110000120211", "73017000018911010010900720110080008717008100017002", "87008000107911010010800801011090007819007001229001", "95019000870701000100900901000070007818018001108001", "99019100997000010000800801010090009927017000111001", "21021002110001022220110210021001100000121113201002", "01101021111010022100000200200201110110101210110010", "00220020000000010110044000200401210000010121100221", "00102010110122102120020211200111010120020012021012", "00220021000022020001001010001100220000010001000140", "10101010001021110001001111200112200121111220031110", "01121000110020120001111112000111121112012000200111", "00210020000000001110022020000203140010010000100100", "97018100989810000010000810100070008108008001018001", "00210012000010420012002000100204130020110101200201", "00220040000000401112020000200102030020110000000022", "78009200789822020110800010010090009819027101108001", "00010011200010011112100101220011211241020211101114", "11010100011100010120000010000000001010000100111002", "00001010100002220200112020001001112100000002210014", "21010010110120000000000120000102021120100213000112", "01210012010010001000000000100201001001200002112111", "00210020000002411112021000012000220020210220120220", "91011200897900010110700910000000009918018101107000", "00020000000011110213042010121000310000400110020011", "00000010000011202211010020100203020000310021100302", "00110000000001112024033010120201200010220021020111", "98018100877900000010800911211090000718029000118001", "98019000788901010110100820110090007007019100005000", "10111010111201020211022141020210011000111010020100", "89008000798700000120800910001080008700027201016000", "00000001000011000100011000012204320010020222010102", "01120001001120121111011220000110122112201102200023", "97008100878711000120800700000080009917010101129001", "20021010100012100200010121020211000102211022221211", "00320020000011210200000010010201220010200200200211", "10100010011030121000110110232010110001221200210120", "11011011021121100021020111201110101000021222022011", "01111012120101020300100001101202021021102201200010", "59009100798110010100800811002070008506009100200001", "00200012000000201111020010011200310010100221000002", "00110011000001214110002010111201010000020112110001", "11100001211120120010112142421001211000231110101210"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.28864864864864864;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> profit = {"00189001920270091807001107118111797201818001708802", "00189121710180172918021008010100979100817010728910", "11002002200100010201010011041030101020012020101100", "88007011711080090915101018108002778010917102708100", "99270101900082190709111017007111988110807010809800", "01001010022002210100000200002201112000111001000111", "02010100011110010021111001000011202202002010000002", "11211000100110010001010000012010102010111020101100", "97279001021180070908101117118000777221719201500802", "21010210200002000020100401200201000100000100201112", "00010210100001221101101100101000000101011201210012", "21100011100010010101010000001000022010010020102200", "78088011800101091819120028209101977010818000919911", "00002200021010110121000101202002101100200000120140", "01001200002001000010002201001202011200001301121000", "97199111702191000803111109113201889010907000919800", "12000000001010000221100001101000111002020001140012", "89297100901181082017010009108102778001919101918810", "01010020020012102101200102100100111002201200010110", "78159011801191031710100107018110878111708001819021", "00011010111010011021000100000102010102111000021020", "02101011000120010100000001010020100000001000101200", "11011010101000210000000001101202000100001000002102", "10000200141001210011100000000400111000101101021132", "00111000100020000000000001011000002020111000202100", "78187010710081191927011010028200748020718010919710", "10010000121022011110001000002201112001001200030110", "11400001100000010001010012000000000000001010100000", "80187202801192131808001018200000788120908011507901", "11001200020010220111102402200001111100111204110011", "10301011000000000001020000000000011040010020101100", "10021110010012210200202000100100102102100200021020", "79179121700091081718010107107101077110709000608711", "97078100700270181717100104108110707000718100919210", "79188222700271191818000128208112770101909121908910", "21001020211001200001101000001101101000111202041120", "00211001200110010001000022002040100000001000001000", "10000020101000002121200000100002001000110104011003", "88098101700082090927100117009101779101007021718902", "11110101101110002100100011000110010101000011010011", "87277121901080170918111118118100989110700212817700", "00010000212000300120000100200202011201002004001121", "01201012000200000000000001011020002000211000001000", "10020100101000101101000100001400001204112400241102", "77178001522191191908010029015110699000708002003910", "02000000001012214111200201300102010401111004001011", "88189001010290190809112129007011898111807111310901", "89118101810291080810021117109010729100907101909021", "01000100011014001112200301100102111200010200110201", "20000120222010002001002200001100100003210102011110"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3756906077348066;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> profit = {"09987070811691174871210981700191708711021108990190", "90897190701970098982011881700181818700111005781180", "98077191921971197871201950920090817800100007981190", "89709171211890188870111790810271719611201109781190", "77790090911880079990101870721001729810111009890291", "01110002011000400101402100202002021041200110122412", "79979001802781287580000890720171311700012009672060", "00110210021212210102220002022212141012100100010101", "87929080001770077971110980901180917121210209871090", "10211102000120011021120100021210020100010220021011", "11111121100110110022420000001011120020201102201002", "69988072711080172880112970700180719910000007990050", "97798081721801177290001871920081915700110009971151", "10100012000010311112401121040001101101140200212402", "10110422001113010002212210121010001120100000103002", "79987081711771108881111980100082709801221108781190", "48789070710271080770100881710091708910001009990181", "89889151900821087071111880700191707811000007980030", "78779080722891087701001881800071819700101108771192", "12100102112002210110212101123010121111200102012100", "20211402114104211102021010022101011211401100001201", "11010002122100110101200211110010111112141410021211", "01111200000211210112100011111122210010101111100200", "98978180910981298881020070900081718901011009881180", "88597090800772188880111700821072819910021109790080", "11000002000011001011011000100011011101011001111100", "77987270900790117781011981011191707801001008871191", "00212022020024201002211020101021010001100111002200", "00001202111000100003201010110111121111111100100000", "11020012120100000100101000101002121102112211021311", "98970071811880189971012871921001707700111108780171", "11011212001011021110102121111210221112221001001220", "78877031901791077781012780701172019500000100981190", "01112214122110000012111111012202100010201021002212", "88799111700951198791110891701171900701120007881072", "77868070110971189871210991801171507011200106870180", "10011401202100201101111010001001010102012100111010", "10010102100001010101120101111202001120012211101002", "01121201202011120012411000011112021200010201100100", "21001010110014020000040121001112002011102301010100", "11011020001000011010111111101211010022020220113404", "10010101221002010011141010011210100112232000001200", "00000100020000000000011000010100020001002000000101", "85799090902790089782001991810181017601110000710160", "97978160802992179970001871801070908811101007022021", "98889271720971089871020891700280808710011001201091", "01110220111012310012110101120101121011003100210120", "11112401000014011011222101120312120100114211001000", "98999160910550098390010880900172917810000006292000", "00001201012012201020110000100110022002004010110000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4928977272727273;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> profit = {"0655", "6025", "5209", "5590"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.04081632653061224;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> profit = {"02200863", "20017148", "20053716", "01501390", "07310400", "81734072", "64190708", "38600280"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06380208333333333;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> profit = {"0144927531774246", "1024687883712365", "4206103997132276", "4460885245777033", "9618050056428903", "2808504214583259", "7735040966967751", "5892029053031044", "3894516508770055", "1375646380618452", "7717459076018930", "7137286371103964", "4227837108830672", "2320927004996007", "4673055455367001", "6563391452042710"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.18206521739130435;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> profit = {"06953123290882640228394227526436", "60536411353983411936338255179166", "95077130598474226390878204048571", "53703349555598385952152834703155", "36730616771402331382811625982675", "14136003068410516148763447384700", "21341005211587637653556823013842", "31096350235764565398566542721105", "23557022025155569886401465778621", "95957613205224721289780194098751", "03851815550120725367566261663077", "89454457121006458898501194067369", "88790186522000510058856048324077", "23482074540600720863067410738402", "64233565577457058950922860089597", "41283136622512501139241468860762", "01651675915800810766208690327433", "29393163823808917045656451880381", "23958459886956536408982453051091", "86022838697883096580510516943726", "33818755475580922695078147904138", "93751656086056240581702578755588", "48821366106167218620820721789418", "22286485412104846445157093746515", "25032424696941669551472900471640", "75445732541480080136781300304477", "51079307706037083809977743059598", "27408812796623862854058470507624", "69832431883748907013459614970075", "41516781670304574307154564560051", "36757040257670963892381147927501", "66155025117972723116888507845110"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4107142857142857;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.3333333333333333;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> profit = {"09999999999999999399999999999999999999999999999999", "90999999999999999399999999999999999999999999999999", "99089888888888888388898988898888889889888899889888", "99809888888888888388898988898888889889888899889888", "99990999999999999399999999999999999999999999999999", "99889088888888888288898988898888889888888899889888", "99889808888888888288898988898888889888888899889888", "99889880888888888288898988898888889888888899889888", "99889888088888888388898988898888889889888899889888", "99889888808888888388898988898888889889888899889888", "99889888880888888388898988898888889889888899889888", "99889888888088888288898988898888889888888899889888", "99889888888808888388898988898888889888888899889888", "99889888888880888288898988898888889888888899889888", "99889888888888088288898988898888889888888899889888", "99889888888888808388898988898888889889888899889888", "99889888888888880288898988898888889888888899889888", "33333222333232232033332323332333333323333333323233", "99889888888888888308898988898888889889888899889888", "99889888888888888380898988898888889889888899889888", "99889888888888888388098988898888889889888899889888", "99999999999999999399909999999999999999999999999999", "99889888888888888288890988898888889888888899889888", "99999999999999999399999099999999999999999999999999", "99889888888888888288898908898888889888888899889888", "99889888888888888388898980898888889889888899889888", "99889888888888888388898988098888889889888899889888", "99999999999999999399999999909999999999999999999999", "99889888888888888288898988890888889888888899889888", "99889888888888888388898988898088889889888899889888", "99889888888888888388898988898808889889888899889888", "99889888888888888388898988898880889888888899889888", "99889888888888888388898988898888089889888899889888", "99889888888888888388898988898888809889888899889888", "99999999999999999399999999999999990999999999999999", "99889888888888888388898988898888889089888899889888", "99889888888888888288898988898888889808888899889888", "99999888999888898399998989998998999980999999989899", "99889888888888888388898988898888889889088899889888", "99889888888888888388898988898888889889808899889888", "99889888888888888388898988898888889889880899889888", "99889888888888888388898988898888889889888099889888", "99999999999999999399999999999999999999999909999999", "99999999999999999399999999999999999999999990999999", "99889888888888888388898988898888889889888899089888", "99889888888888888288898988898888889888888899809888", "99999999999999999399999999999999999999999999990999", "99889888888888888288898988898888889888888899889088", "99889888888888888388898988898888889889888899889808", "99889888888888888388898988898888889889888899889880"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.3334234355994052;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> profit = {"099900001", "909900000", "990900000", "999000000", "000009991", "000090990", "000099090", "000099900", "100010000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0703125;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> profit = {"0090900", "0008080", "9000900", "0800083", "9090000", "0808000", "0003000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.04568527918781726;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> profit = {"0890091008", "8090080009", "9900090009", "0000900880", "0009000990", "9890000009", "1000000100", "0008901080", "0008900800", "8990090000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08923076923076922;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> profit = {"00000800088980088008", "00990099800009900980", "09090099900008800890", "09900089800008900890", "00000000200100000000", "80000000089990089009", "09980008900008900990", "09990080900008800980", "08982099000009900980", "80000800008890089008", "80000900080990098008", "90001900089090098009", "80000900099900099009", "09880088900000800890", "09890098900008000890", "80000800089990009009", "80000900098890090008", "09880099900008800080", "08990098800009900800", "80000900088990098000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.2031578947368421;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> profit = {"09008000000000089000", "90009000000000098000", "00000090000009000008", "00000000009000900090", "89000000000000098000", "00000000990000000800", "00900000000009000008", "00000000020000102002", "00000900080000000900", "00000902800010000800", "00090000000000900080", "00000000000001002120", "00000000010001120000", "00900090000110000009", "00090001009010000090", "89009000000020008000", "98008002000200080000", "00000800980100000000", "00090000008200900000", "00800082000009000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08717948717948718;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> profit = {"000009009890088090008989909000", "009900880009900808980000090888", "090800890008800809980000080898", "098000880009900909990000080999", "000000001000200000000000000000", "900000008980089080008889909000", "088800080009800909980000090899", "089800800008900908990000080898", "900018000990099090009889909000", "800009009090098090009889909000", "900008009900099090008999808000", "098900980000800808990000090898", "098920890008000809880000090899", "800008009990008080009888809000", "800009009890080090008989808000", "088900990008800009890000090999", "900008009990089000009899809000", "089900980008900900890000080889", "099900990009800808080000090999", "088900890009800909800000080999", "800008009980098090000888808000", "900008008890089080008099808000", "800008008890088090008908809000", "900009009990089090008980909000", "900009009980088080008889008000", "098800980009900908980000000999", "900009009980098090008899800000", "088900880008800908990000090098", "089900990009900908990000090908", "088900980008900909990000090880"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.33776971163541036;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> profit = {"000000980000900080000000000880", "000090009000009900000090000000", "000000000908000009008000880000", "000000010200000000010020000000", "090000008000008900000090000000", "000000000080000000880800009009", "900000080000900090000000000990", "800100800000800090000000000980", "090080000000008800000080000000", "009200000009000008009000980000", "000008000000020000990900009009", "008000000900000008009000890000", "900000980000020080000000000990", "000000000020200002000010000000", "090080008000000900000080000000", "090090008000009000000092000000", "800000990000800000000000000880", "009000000808020000009000990000", "000008000090000000080900009008", "000108000090000000800801008009", "008000000909000009000001980000", "000008000090000000980000009008", "090290008000018900000000000000", "000000000000000200011000000200", "008000000908000009009000090000", "008000000809000009008000900000", "000009000090000000980900000008", "800000990000900080000002000090", "800000980000900080000000000900", "000009000090000000890800008000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.14312317105613195;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> profit = {"000009000000000080200000009000", "000000000080090008000200000000", "000000200200020020000010000002", "000000008008001000200200000008", "000000900000000900200009080000", "900000000000000080000000009000", "002090010000000800000008080000", "000000102100010020000000200000", "000800020008000000000000000008", "002000010000000000009000000990", "080000000000092008000000000000", "000800008000000000000000000009", "000000000000000000080090800000", "092000010090000008000000000000", "000100000020000100000020002100", "000090800000001000000109080000", "802008020000000000000000008000", "080000000080080000200000000000", "200220000000000002020000000100", "000000000000800000200190900000", "000000000900000000000000000890", "020200000000000100010000002020", "001000000000902000090000800000", "000090800000000900000000090000", "000000020000800000090080000000", "000080800000000800000009000000", "900009000000002080000200000000", "000000000900001000108000000080", "000000000900000000009200000800", "002800008009000000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08717948717948718;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> profit = {"0009989880880009090999980000900809080000", "0080000008009980909000008088089080808999", "0800000008008890908000009089089080909899", "9000999980890008080888890000800809090000", "9009088980990009090998990000900808090000", "8009809980880009090988890000800909090000", "9009890890980009090998990000800808090000", "8009998090990008090898980000900909090000", "8008889900980009080898990100900908080000", "0880000000008990809000008088088080908898", "8008989990080009090989980000900908080000", "8009988980800009080999990000900809080000", "0980000008000890908000008098099080808898", "0980000009008080909000009098089090808998", "0890000009009800908000008099088090808999", "9008999890990000080999890000800808080000", "0990000008009990009000009089088080808888", "9008999980980008000889880000800808090000", "0980000009008980900000008098098080908998", "9008999880990009080089980000800909080000", "9008989990890009080809990000900808090000", "9008888880990009090990980000900909080000", "9008989990990008080999080000900809080000", "8009999890890009080898800000800808090000", "0890000008008980908000000089088080908999", "0000000010000000000000000001000000000000", "0880000008009990809000008008098080808889", "0890000008008890908000009180099080909888", "9008988990990008080899980000000908080000", "0880000008009880809000008099009080909999", "0990000008009980808000008089090090909889", "8008898990980008080989880000900008080000", "0880000008008990808000008088089000909899", "9009898980890008080989980000800800080000", "0890000009008880809000009089099090009888", "8009999980880008090898890000800808000000", "0890000008008880808000008089099090900998", "0980000008008990809000009088098080809089", "0990000009009990809000009088098090809809", "0990000008008890808000009098099090808990"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.48924988055422836;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> profit = {"0000000000800000999000009909000000000080", "0089000809000090000080090000000008800000", "0809000828000080000080090000000008900000", "0990000809000080000290080000000008800000", "0000090000009009000000000000009890009009", "0000900000008008000000000000009990009009", "0000000000090800000008800080800000080800", "0888000009000090000090090000020008800000", "0020000000000200000000000200002000000000", "0989000900000090000090090000000008900000", "8000000000000000889000008809000000000090", "0000009000000800000009900080810000080800", "0000980000000009000200000000009890008009", "0000008020080000000009900090800000090800", "0988000909000000000090090000000008900000", "0000980000009000000000000000008880009008", "9000000000800000088000009808000000000080", "9000000000800000809000008809000000000090", "9000000000900000890000008809000000000090", "0002000000002000000000000220000000000000", "0889000909000090000000090000000009900000", "0000008000090900000000900090800000090800", "0000008000090900000009000080800000080900", "0998000909000090000090000000000008900000", "9000000000800000988000000808000000000090", "9000000020800000888200008009020000000090", "0000008000080900000209800000900000080800", "9000000000900000899000008900000000000080", "0000008000080800000008800090000000090800", "0000000200010000000000000200000020000000", "0000990020009008000000000000000980008009", "0000890000008008000000000000009090009008", "0000990000009008000000000000028900008008", "0888000808000080000090080000000000800000", "0898000809000090000090090000000008000000", "0000008000080900000009800080900000000900", "0000990000008009000000000000008980000009", "0000008000080800000008900080800000090000", "8000000000900000899000009908000000000000", "0000990000009008000000000000009880009000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.2158845962526944;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> profit = {"0000000020020010020000000000000001010000", "0000209000000090800000090000000000000008", "0000000000000008000000000880200000099000", "0000100000800000000090000000000008800000", "0201000020000000000002000202000000000000", "0000000082001800000000008000000000000890", "0900000000000090800000080000000000000008", "0000000000001000080000900009090800000000", "2000280000000800000000009000000000000880", "0000020000000010000000000200010011000000", "0008000000000000000080000000200008900000", "2000000000001000009908000000009080000000", "0000010100010010000000000000000000202000", "0000080080000000000000008000000000000890", "1900009001001000900000090000000000000008", "0080000000000000000000000880000000088000", "0800008000000090000000080000000000000008", "2000000800000000000000800009080900000000", "0000000000090000000809000000209090000000", "0000000000090000008008000000008090000000", "0009000000800000000000000000000008800000", "0000200000080000009800000000009080000000", "0000000900000000080000000008090800000000", "0900008000000090800000000000100000000009", "0000080090000800000000000000000000000980", "0080200002000008000000000080000000089000", "0080000000000008000000000800000000089000", "0000200900000000090000800000080800000000", "0020000000200000002000010000000200000200", "0000000901000000080000900008000800000000", "0000000000090000009809000000000080000000", "0000000800000000090000800008280000000000", "0000000001080000009908000000008000000000", "1008000001800000000080000000000000800000", "0008000000902000000080000000000008000000", "1090000000000008000000000880000000008000", "0090000000002008000000000990000000080000", "0000080080000800000000009000200000000080", "0000090080000900000000008000000000000800", "0800008000000080800000090000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.12333333333333334;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> profit = {"0000000900001000020008000000000000090000", "0000000080000900000000000080000000000000", "0000008002080000800000000100101000000000", "0000000000800000020000000000000080000080", "0000000000000000000000000000002800900908", "0000000000001000009800000000081000000000", "0080000000090000820000000000000000000000", "9000000002000000000009100000200000080000", "0800000000001800010000000080100000000000", "0020000200200220000100020000000200000000", "0008000002002000000000000000002090000090", "0080009000000000800000000000000000000000", "1000010010200000200000002000000002000100", "0900000082000000000000100080001000000000", "0000000002000000000000100009000009009000", "0000000000000000000080098100000000000000", "0080008000082000000000100000000000000000", "2002002010000000001000002000000000001001", "0000090000000000010900000200080000000000", "0000080001000000009000000000280000000000", "0000000000000008000000298000001000000000", "8000000900000000000000000200000000080000", "0000000100000110100020000000020100000020", "0000000002000009000090008000100000000000", "0000000000002008020080080000000000000000", "0010000000000001002002000020000022000001", "0800000080000800000000000200000000000000", "0000000000000090000000000000000009008000", "0010000210000000000200010000000220001000", "0000080000000000008800200000000000000000", "0010210000200100000010000000000002020000", "0000800002000000000000100000200000800809", "0008000000900000000000000200200000000080", "0000000000002090000000000209002000009000", "0000900000000000000000000000000800000909", "9000000800000000000008000000002000000000", "0000000000000090010000000008100009000000", "0000900000001000000000000000000800900008", "0008000000900000000000200000000080000000", "0000800000000000010000000100000900900800"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08717948717948718;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6615758886335992;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3013489083576693;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> profit = {"00000000209000009000000920000000800009000090000000", "00000008090900000000000000089000000000000000000008", "00000890000000000000808000000090000080000000000090", "00000000000000000909000000000909008000000000080900", "00000000000000000090020008900000000000099000009000", "00800090000002100000809010000080000090000000000080", "00900900000000000000809000000090000090000000000080", "08000000080900000000000000088000000000000000000009", "20000000010000000000000002000001020020000000000000", "09000008100900200000000000099000000000000000000009", "90000000000000009000000900000000900008000090000000", "09000009090000000000000000088000000000000000000009", "00000000000000090000000000000000080800800808800000", "00000200000000020002000000002000000001000000001000", "00000100020000020000000000000000200000002000000200", "00000000000092200000000000000000090900900808800000", "90000000009000000000000900000000800009000080000000", "00090000000000000008000000000808009000000000090800", "00009000000000000000000009900000000000098000009000", "00090000000002000800020000000808009000000000090900", "00800880000000000000008000000080000090000000000090", "00002000000000000002000000000000000010000020200001", "00800990000000000000800000000090000080000000000090", "90000000009000009000000000000000900008000090000000", "20000100000000000000000000001000001000000000102000", "00008000200000000090000000800000000000088000009000", "00009000000000000090000008000000000000089000009000", "08000008090800000000000000009000000000000000000009", "09000008090802000000000010090000000000000000000009", "00090000000000000808000000000009009000000000080900", "00900890000000000000809000000000000090000000000080", "00090000100000000808000000000900008000000000080800", "80000000009000208000000900000000000009000090000000", "00000000200080090000000000000000000800800909900000", "00080000000000000909000010000908000000000000080900", "00000000000080090000000000000000080000900808900000", "00800990200000000000918000000090000000000000000090", "90000000008001009000000800000000900000000080000000", "00000000000080090000000000000000080900000909900000", "00009000000000000090000008800000000000008000009000", "00009000000000200080000008900000000000080000008000", "00000000000080080000000000000000090800900009800000", "90000000009000008000020900000000900008000000000000", "00000000000080080000000000000000090800900900800000", "00000000000080080000020010000000090900900808000000", "00080000000000000909000000000808008000000000000800", "00009000000001000090000029900000000000098000000000", "00090000000000200809000000000908009000000000080000", "00900880000000000000909000000080000090000000000000", "08000009090900000000010000099000000000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.18050179211469533;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> profit = {"00020000000000000000020000201100000001000000010010", "00080082008900000000000000000000000000010000000000", "00000001000010000000000000080000008009000000000900", "28000080009910000000000000000000000000000000000000", "00000000000000000800000000000000000880000090001090", "00000000010201000000000010022000000000000011000000", "08080000008800000000000000000000000000000000002000", "02100000020002200220000020000000000000000000000000", "00000000090000000000000008000900000000000800000009", "00000102900000000000000008000900000000000800000008", "08090080000900000000000000000000000000000000000000", "09090280009000000000000000000000000000100000000000", "00110000000001100100020102000000000000000000000000", "00000102000010000000800000800009000000000000900000", "00000002000010000000008000009000090000028000000000", "00000000000000008008000890000000000000000000080000", "00000000000000080009000990000000000000020000090000", "00008002000010000000000000000000000890010080000090", "00000002000000000000090000000090900000000008000000", "00000000000000089000000880000000000000200000090000", "00000000000008000000000000800008000000000000901000", "20000000000020000090000000000080900000000009000000", "00000000000000800000000000009000080000009000000000", "00000000000010089008000090000000000000000000080000", "00000102000000099008000900000000000000000000080000", "00000000880020000000000000000800000000000900000009", "20000000000008000000800000000008000000020000800000", "00800200000000000000000000000000009009000000002800", "10000200000000900000009000000000090000009000000000", "10000000990000000000000008000000000000000800000008", "00000000000000000090080000000000800000010009002000", "00000000000009000000800000800000000000200000900000", "00000000000000000090090000000080000000100008000000", "00000000000000900000008000009000000000008000001000", "00800000000000000000000000090000000008000000000800", "00008000000000000800000000000000000090000090000080", "00008000000000000900000000000000000900000080000090", "10900000000000000000000000090000008000100000000900", "00000000000100000002000000000002100001002110000000", "01000000000000202100000000200010000000000100000100", "00000000000000800000009000009000080000200000000000", "00000000880000000000000009000800000000110000001009", "00009100000000000800000000000000000980100000000080", "00000100000000000080090000000090800000000000000000", "00000000000009000000900000800009000000000000000000", "10000000000000089009000880000000000000000000001000", "00001020000000000000100000020020010000000100010000", "00900000000000000000000000080000008009010000000000", "10009000000000000900000000000000000890000080000000", "00000000980000000000000009000800000000000900000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.1196095571095571;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> profit = {"00010000000000000009000800090000001001000000000000", "00008200000020000800000001000000000000000000000800", "00020000000000000000008092900000000000000000001000", "10200012000001002100000000000000000000001000020010", "08000000000000000800000000000000000000000000000900", "02000002020100000000000120002000000220000000000010", "00010000800000000000000000008000000000080000002000", "00020200000000990000800001000009001000000000000000", "00000080000000000000000002008000000000190000000000", "00000200000009000000000000000000000000100992000000", "00000000000000000000000000000000080080000000092000", "00000100000010008000090000000000000000000000000008", "02000000000100100002000000100000100000021200020000", "00010000090000000000000001000000000001000890000000", "00000009000010090000900000000008000000000000001000", "00000009000000900000800000000009000000200000000000", "00020000000800000000090000000000002000000001000009", "08018000000000000000000000000000002002000000000900", "00000000000000000000000000000090000900208002000000", "90000000000020000000000900090000000000200000000000", "00000008000000980000000000000008000002000000000000", "00000000000900009000000000000000000002000000002009", "00800000000000000000000080800000000000000000000000", "80000100000000000009000000080000000000000001002000", "00900200000000000000008000800000000001000002000000", "01200001200001000000000000020000020200000000000022", "00900000000010000000008080000000002000100000000000", "90000000000000000009000802000000000000000000000000", "00000280800000000000000000000000000000080001000000", "00000000000000000000000000000000800000000000800090", "00000000000000000090000000000000000901009000000000", "00000009000000890000800000000000000000000002000000", "00000000000010000000000000000800000001200001800090", "00000000008000000000000002000000000080000001080000", "10000001000000002200000000200000000220010010000020", "00000200000000000090000002000090002000008000002000", "00000200008000000000000000000000082002200000080000", "10000000000001000200220010000010100020010000000000", "00000000110000020022000000100000200020000000000202", "00000080900020000000000000008000001001000000000000", "00010000000010000080000000000090000800000000000000", "00000000090028000000000000000000000000000090000000", "00000000090009000000000000000000001000000900002000", "00000000020000001020000120001002110000000000000200", "00000000000000000000000000000800800000000000000090", "00020000009020000000000000000000080080000000000000", "00100020002000100000020200000000000200000020000220", "08009000000000000900000000000000000000200002002000", "00010100000000000000000002000900902000000000902000", "00000000000800009000090002000000000000200000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0916;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> profit = {"0000000080", "0070607006", "0700706007", "0000000090", "0670007006", "0000000080", "0760700007", "0000000090", "8009080900", "0670607000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06769230769230769;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> profit = {"00000009000000000000", "00707000600067677006", "07006000700066667007", "00000009000000000000", "07600000600067676006", "00000009000000000000", "00000008000000000000", "90090980099800000990", "06706000000076776006", "00000009000000000000", "00000009000000000000", "00000008000000000000", "06606000700006676007", "07607000600060776006", "06606000700067076007", "07607000700077706006", "07706000600066660007", "00000009000000000000", "00000009000000000000", "06706000600076767000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15263157894736842;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> profit = {"00000000900800809088", "00000000000000000800", "00000000000000000800", "00006607067000070000", "00060606066000060000", "00066007076000070000", "00000000000000000900", "00076700077000070000", "90000000000000000000", "00066707007000070000", "00076607070000060000", "80000000000000000000", "00000000000000000800", "00000000000000000900", "80000000000000000000", "00076707076000000000", "90000000000000000000", "08800090000089000000", "80000000000000000000", "80000000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.10140636565507032;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> profit = {"00000000800000000000", "00000008000000000000", "00000000060070600060", "00000000800000000000", "00000008000000000000", "00000000900000000000", "00000000000800000000", "08008000009000000009", "80080900000000090000", "00600000000070600070", "00000009000000000000", "00000080000008009900", "00700000070000600060", "00000000000800000000", "00600000060060000070", "00000000900000000000", "00000000000900000000", "00000000000900000000", "00600000070060700000", "00000009000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06564102564102564;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> profit = {"000800000000000000000000000000", "000070000070660767660067676000", "000900000000000000000000000000", "809009898809009000009900000898", "070000000060770766770066666000", "000900000000000000000000000000", "000800000000000000000000000000", "000900000000000000000000000000", "000800000000000000000000000000", "000800000000000000000000000000", "070060000000670667660077667000", "000900000000000000000000000000", "060070000060070776670067766000", "060070000070700666770077767000", "000900000000000000000000000000", "070070000060760077770076776000", "060060000060760707770067767000", "070060000070660770770076766000", "060070000060670777070067766000", "060070000060770777700077677000", "000900000000000000000000000000", "000900000000000000000000000000", "060060000070670767670006776000", "070060000070770676770060676000", "060060000060770777760076077000", "070060000060660766670077707000", "060060000070670676670066770000", "000800000000000000000000000000", "000900000000000000000000000000", "000800000000000000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.24792792792792792;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> profit = {"008808000099800800008009000000", "000090090900000000800900009999", "800000000000000000000000000000", "800000000000000000000000000000", "090000000000000000000000000000", "800000000000000000000000000000", "000000007000067076060060760000", "090000000000000000000000000000", "000000700000067066060060670000", "090000000000000000000000000000", "900000000000000000000000000000", "900000000000000000000000000000", "800000000000000000000000000000", "000000606000006076070070760000", "000000707000060076060070760000", "800000000000000000000000000000", "000000706000077006060070670000", "000000606000066060070060660000", "080000000000000000000000000000", "000000606000076067000070770000", "800000000000000000000000000000", "090000000000000000000000000000", "000000606000077076070000770000", "900000000000000000000000000000", "000000706000077066070070070000", "000000607000066076070070700000", "090000000000000000000000000000", "090000000000000000000000000000", "090000000000000000000000000000", "090000000000000000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15368421052631578;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> profit = {"000990000000800000000809000900", "000000800000000000000000000000", "000000000000000800000000000000", "900000000000000000000000000000", "900000000000000000000000000000", "000000900000000000000000000000", "080009000000080000009080900000", "000000006606007006000000006006", "000000060607007006000000007007", "000000066007006006000000007006", "000000000000000800000000000000", "000000067700006007000000007006", "800000000000000000000000000000", "000000800000000000000000000000", "000000077606000007000000006007", "008000000080000090980000090080", "000000000000000900000000000000", "000000066607007000000000006007", "000000000000000900000000000000", "000000000000000800000000000000", "000000900000000000000000000000", "800000000000000000000000000000", "000000800000000000000000000000", "900000000000000000000000000000", "000000900000000000000000000000", "000000000000000900000000000000", "000000067707006006000000000007", "900000000000000000000000000000", "000000000000000800000000000000", "000000067606007007000000007000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.11783854166666667;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> profit = {"009000000090800000000000009800", "000000000000000000000000080000", "900000000000000000000000000000", "000060700700000070060000000000", "000600600600000060060000000000", "000000000000000000008000000000", "000760000600000060070000000000", "000000000000000000000000090000", "000000000000000000009000000000", "000760600000000070070000000000", "900000000000000000000000000000", "000000000000000000000000800000", "800000000000000000000000000000", "000000000000000000008000000000", "000000000000000000000000800000", "000000000000000000000000090000", "000760600700000000060000000000", "000000000000000000000000900000", "000000000000000000000000080000", "000660700700000060000000000000", "000008009000080000000980000000", "000000000000000000009000000000", "000000000000000000008000000000", "000000000000000000000000800000", "000000000008008009000008000080", "080000090000000900800000000009", "900000000000000000000000000000", "800000000000000000000000000000", "000000000000000000000000800000", "000000000000000000000000090000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08247422680412371;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> profit = {"0070700076760600060060060767700070766006", "0000000000000000000000009000000000000000", "7000700066770700060070070667700060776007", "0000000000000000000000009000000000000000", "7070000077660700070060070766600060767007", "0000000000000000000000008000000000000000", "0000000000000000000000008000000000000000", "0000000000000000000000009000000000000000", "7060700006770600070070070767700060667006", "6060700060670600060070060676700070666007", "7070600076060700060070060777700070767007", "6070600077600600060070060767700070676007", "0000000000000000000000008000000000000000", "6070700066760000060060060777700070667006", "0000000000000000000000008000000000000000", "0000000000000000000000009000000000000000", "0000000000000000000000008000000000000000", "6060700076660600000070060767600070666006", "0000000000000000000000008000000000000000", "0000000000000000000000009000000000000000", "6070600077770600070000070776600060777006", "0000000000000000000000008000000000000000", "0000000000000000000000008000000000000000", "6070700076660600060070000676600060766006", "0909088900008089808908800000089809000980", "7060700076770700070070060066600070767007", "6060600067760700060070070607700060677006", "7070600076770700070060060670700070767007", "7070600077770700060060060677000070667007", "0000000000000000000000008000000000000000", "0000000000000000000000009000000000000000", "0000000000000000000000008000000000000000", "7060600067770700070060060767700000666006", "0000000000000000000000009000000000000000", "7070700066760600060070070767600060066006", "6070600066670600060070060676600060606006", "6060700076760700060070060777700060660007", "0000000000000000000000009000000000000000", "0000000000000000000000008000000000000000", "6070700067770600060060060767700060667000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3433333333333333;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> profit = {"0000770607000070000000707006067000600070", "0000000090080900080090090800000980089900", "0000000000900000000000000000000000000000", "0000000000800000000000000000000000000000", "7000060706000070000000607006076000600070", "7000600706000060000000607007066000700060", "0000000000900000000000000000000000000000", "6000770007000060000000606006067000700070", "0900000000000000000000000000000000000000", "7000660700000060000000707007077000600070", "0098009000009009908908000080900008000008", "0800000000000000000000000000000000000000", "0000000000900000000000000000000000000000", "0900000000000000000000000000000000000000", "7000760606000000000000707006077000700060", "0000000000900000000000000000000000000000", "0000000000900000000000000000000000000000", "0800000000000000000000000000000000000000", "0000000000800000000000000000000000000000", "0000000000900000000000000000000000000000", "0900000000000000000000000000000000000000", "0000000000800000000000000000000000000000", "7000660607000070000000006007076000600060", "0900000000000000000000000000000000000000", "7000770607000070000000600006077000600070", "0800000000000000000000000000000000000000", "0000000000800000000000000000000000000000", "6000670607000060000000706000076000600070", "0000000000900000000000000000000000000000", "6000760607000070000000707007006000600060", "7000660707000070000000607006060000600060", "0900000000000000000000000000000000000000", "0800000000000000000000000000000000000000", "0000000000800000000000000000000000000000", "6000670706000070000000606006066000000070", "0800000000000000000000000000000000000000", "0900000000000000000000000000000000000000", "0900000000000000000000000000000000000000", "7000760707000060000000607007066000700000", "0000000000800000000000000000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.20896750308515014;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15368421052631578;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.11783854166666667;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> profit = {"06070007777700760766760006000060006076767006000007", "60060007667600670677760007000070006077777006000006", "00000000000000000000000000000000080000000000000000", "76000007776600760677660006000060006077776007000006", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000090000000000000000", "00000000000000000000000000000000090000000000000000", "77070000766600770666670007000070006076776007000007", "76070007067700670677760007000070006076767007000006", "76070006607700760766670006000060006066677006000006", "77060006770600660766670006000070007067666006000006", "76060006776000660667770006000060007066667006000006", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000080000000000000000", "76070007676600060666760007000070006066676007000006", "67060007766600600676760006000060007067666007000007", "00000000000000000000000000000000080000000000000000", "76060006677600660067660007000070007066776006000007", "67070006766600670607760006000060006067676006000007", "67070006766700660770770006000070006076767006000006", "77060006766700770677070006000060007077767007000006", "66060007677700660667700007000060007076766007000007", "00000000000000000000000000000000090000000000000000", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000090000000000000000", "67060007766600760766670000000060007076766007000007", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000090000000000000000", "67060007767600760767660006000000006067666007000006", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000080000000000000000", "00808990000088008000009890888908800900000990889880", "66060006667700670766770007000060000076777006000007", "00000000000000000000000000000000090000000000000000", "77070007766600660667770007000060007007677007000007", "67070006667600670676760006000070006070676007000006", "77070007766600660767770007000060007066067007000007", "67070007676600760776660006000060007077606007000007", "77060006776700660667760006000060007076760006000006", "00000000000000000000000000000000090000000000000000", "00000000000000000000000000000000090000000000000000", "66070007766600770666770007000070006077776000000007", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000090000000000000000", "00000000000000000000000000000000080000000000000000", "00000000000000000000000000000000080000000000000000", "76060007666600670776670007000060007076776007000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.44434285714285715;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> profit = {"00000000000000000000000000000800000000000000000000", "00880090909009090900000080000008008008080000000899", "08000000000000000000000000000000000000000000000000", "08000000000000000000000000000000000000000000000000", "00000000000000000000000000000800000000000000000000", "00000006060000007066706000707070070070000660700000", "09000000000000000000000000000000000000000000000000", "00000600060000007076606000706070070070000760700000", "09000000000000000000000000000000000000000000000000", "00000606000000007077606000706060070060000660700000", "09000000000000000000000000000000000000000000000000", "00000000000000000000000000000900000000000000000000", "00000000000000000000000000000900000000000000000000", "09000000000000000000000000000000000000000000000000", "00000000000000000000000000000900000000000000000000", "09000000000000000000000000000000000000000000000000", "00000707070000000076606000706070060060000660600000", "09000000000000000000000000000000000000000000000000", "00000607070000007007706000707070060070000770600000", "00000606070000006070606000706060070060000670600000", "00000706060000006076007000606070060060000770700000", "00000000000000000000000000000900000000000000000000", "00000606060000006066700000606070070070000770600000", "00000000000000000000000000000900000000000000000000", "08000000000000000000000000000000000000000000000000", "00000000000000000000000000000800000000000000000000", "00000707070000007077606000006070070070000670700000", "00000000000000000000000000000900000000000000000000", "00000706060000006076606000600060070070000770600000", "80008000000990900000090908090000900800908009099000", "00000707060000007076707000706000060060000660700000", "08000000000000000000000000000000000000000000000000", "00000000000000000000000000000900000000000000000000", "00000707070000006067607000707060000070000660600000", "08000000000000000000000000000000000000000000000000", "00000000000000000000000000000800000000000000000000", "00000707060000006076607000707060070000000770600000", "08000000000000000000000000000000000000000000000000", "00000000000000000000000000000900000000000000000000", "08000000000000000000000000000000000000000000000000", "00000000000000000000000000000800000000000000000000", "00000607060000006076707000607060060070000070700000", "00000606060000006077707000707060060070000700600000", "00000000000000000000000000000900000000000000000000", "00000707070000006066706000706070060060000760000000", "00000000000000000000000000000900000000000000000000", "00000000000000000000000000000900000000000000000000", "08000000000000000000000000000000000000000000000000", "09000000000000000000000000000000000000000000000000", "09000000000000000000000000000000000000000000000000"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.26528532608695654;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.20691073632250104;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.1563157894736842;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> profit = {"07353024335677320277071716487351841880204305856167", "70002431643542606363633887256585831834740823564160", "30074723340131640575116624237182231866375874223323", "50701770308358484146800763180122381803814280020336", "32410468433346758017586758113260874275265374755614", "04774042623234662441623514726412010023886425318275", "23276403176741846624211113648454187204441103325738", "41308230214804186801452165354126300768780014827201", "36334612075386302584630764833170104472370523633366", "34403271704283351517776804181828113106120466541667", "53083364540210582733224163516024337720025232350852", "65133278322002638043820246338717517078817126448068", "74354340881004728062275786267583658134783786368235", "72186414630240500740238408670503467427837842682207", "36647681335675027087043830166557661728123866064713", "20485648058320201257787842616511548088854175765253", "06048266212880710321771833741105708803138261207645", "23510468557007023022886661550138608563481724086351", "76741420813464852200487682217752687310101020061574", "73567141473320771200208178830331615545244231845651", "06185624672822077842005235535074787583044153388572", "73108215372273487880003316727725827430635480421041", "13606312064058371678530835843642005601442300225022", "78677511781274888661238027857657788646866286880676", "18265116606480343687313203151081145332711245482054", "67438435443668023128565730204227261331580422222015", "42211763815326167528578812066502601057757171504685", "85381245381367614513324550604505073128845113322101", "76703684316870661070573714640173031685770042102534", "35112441180755551173076602551076345015236534128314", "58826152722180510353724582007702206515121845521056", "15220246084733715821452717253620143330450180847255", "88238013113564657666780712600321068430304106181350", "43387180013156640081820846073404600885504583000636", "11114070437787188875775851131563800435263838837716", "88882027417014708535546633016053484062373500786108", "83607206702732280614830433528113383603033447622684", "04635348260847883305301621785550055230566566637678", "27382847310878181412064875787214352305004262018457", "04716848722183253804434618547325006736000436788003", "40545610005737348114452610750610443336400133138334", "38823410542178812702143224110581158545241052443850", "02787201263284676223580842714348083046633500240807", "53404534362662651401300652132450638076263200513873", "85207338653436072008342842531158108766071425076757", "56225122345468660864822882020224803823183441701858", "64305857310882457615815022422817107627888303610065", "11336272368022726356500600615302367166403888780080", "66231730665630154575742751803155531087503507556804", "70364581672857335141212645514465066848734073785040"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6456;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> profit = {};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.34285714285714286;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> profit = {"06957885612934815058134515050404432954450812902808", "60065116962390686110941391145821335782069507060094", "90056773272808958528053517364352454308415275709288", "56505764318148883226510992491643948587045991277150", "75650533487030770669610231973324542043338497697129", "81775034807678453874095323729957326987312742989927", "81763306324002135472310479411360661937192972915678", "56343460014066875628701715299123783560830065249773", "69234830083483594167482817446542024199680042835337", "16718021807608623323499630335853074066408928893876", "22287744370842541474843285569003155270089232624012", "93810600468052124964521122642646749502000028567363", "39043706804509047459417649408139161150983388736861", "40880826382290687172489403284805556301873835488715", "86987418565106001543555265839506519487391396556555", "18587537924248001094033589490283135317511582508568", "56830355431477110645847367281074392233370004868498", "01526846134941506004463710910624021859651249337567", "51226772627657494004064209587832283246463781917112", "80869428734492345440885066996568966206330160586017", "19056037448544508408096007108323354515762077275554", "34511910894218534668909127605826179747851560471570", "41300501293179537345690151594950169951549469693336", "53592347862164253720011029440159160155159400002059", "19193271138240686106025209489726879283746914407058", "51721395705293597096771990871944622839368126262760", "01349742435642842959165448044922831974567686912438", "54697219436408398189009487407477249615247240985071", "05413919659284901076854091470354648196503680017926", "48363931580618520685389179943043826005298854446859", "02542562450430087236225524275407372651310541212391", "41234703233695634428360964274370628437696593808398", "43495367001715513029311186826836092837405377585864", "33544268275465139286576672344272900228381251940642", "25482613445916952136499092198628200563044285234335", "97350995102513432822579128961064825062957962059775", "58084836967050813540145583719053326605170387743623", "42873770960201773966571539456517783250566849128023", "40403318640098353643785173525236430915024805587510", "56143193808087917563654546640919084576207522358745", "09558220089033110130219968773806514706470309452093", "85294790092038350271054491626855322938853004535078", "10799476423283980486766012848549758684020001260098", "27517225282885624910709046600413715279529410284627", "90726992886574558395246042990428592071534522046588", "06079814392638506318779006181410843542855368404723", "20977959534768688776513272257628504938782504640048", "80211967380387554510553007409833863760570006570052", "09852277371661569611573556372599643722149792824508", "84809783762315588727406980816918425533053887838280"};
    RabbitWorking* pObj = new RabbitWorking();
    clock_t start = clock();
    double result = pObj->getMaximum(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.7332;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22675302&rd=14734&pm=11054
********************************************************************************
#include<vector> 
#include<string> 
#include<algorithm> 
#include<cmath> 
#include<utility> 
#include<set> 
#include<queue> 
#include<map> 
#include<cstdlib> 
#include<cstdio> 
#include<cstring> 
#include<iostream> 
#include<sstream> 
#include<climits> 
#include<sys/time.h> 
using namespace std; 
 
#define REP(i,a,b) for(i=a;i<b;i++) 
#define rep(i,n) REP(i,0,n) 
 
class RabbitWorking { 
public: 
double getMaximum(vector <string> in) { 
  int i,j,k,l,m,n,mn,mx; 
  double res, tmp; 
 
  n = in.size(); 
  rep(i,n) rep(j,n) in[i][j] -= '0'; 
 
  k = 0; 
  rep(i,n) REP(j,i+1,n) k += in[i][j]; 
  res = k / (double)(n*(200-n)); 
 
  rep(i,n) REP(j,i+1,n){ 
    m = 0; 
    m += in[i][j]; 
    tmp = m / (double)(2*(200-2)); 
    if(res < tmp) res = tmp; 
  } 
 
  rep(i,n) REP(j,i+1,n) REP(k,j+1,n){ 
    m = 0; 
    m += in[i][j]; 
    m += in[i][k]; 
    m += in[j][k]; 
    tmp = m / (double)(3*(200-3)); 
    if(res < tmp) res = tmp; 
  } 
 
  rep(i,n) REP(j,i+1,n) REP(k,j+1,n) REP(l,k+1,n){ 
    m = 0; 
    m += in[i][j]; 
    m += in[i][k]; 
    m += in[i][l]; 
    m += in[j][k]; 
    m += in[j][l]; 
    m += in[k][l]; 
    tmp = m / (double)(4*(200-4)); 
    if(res < tmp) res = tmp; 
  } 
 
  while(n>1){ 
    mx = 1000000000; 
    rep(i,n){ 
      k = 0; 
      rep(j,n) k += in[i][j]; 
      if(k < mx) mx = k, l = i; 
    } 
    rep(i,n) in[i].erase(in[i].begin() + l); 
    in.erase(in.begin() + l); 
    n--; 
 
    k = 0; 
    rep(i,n) REP(j,i+1,n) k += in[i][j]; 
    tmp = k / (double)(n*(200-n)); 
    if(res < tmp) res = tmp; 
  } 
 
  return res; 
} 
 
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/