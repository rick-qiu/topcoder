/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4461
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class MirrorPlacement {
public:
    int mirrors(vector<string> map);
};

int MirrorPlacement::mirrors(vector<string> map) {
    int ret;
    return ret;
}


int test0() {
    vector<string> map = {"#######", "##....#", "##.##.#", "##.##.#", "......#", "##.####", "##.####"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> map = {"########", "##....##", "##.##.##", "##...`..", "#####.##"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> map = {"##################################################", "#................................................#", ".................................................#", "#................................................#", "#.................................................", "#................................................#", "##################################################"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> map = {"########", "##....##", "##.##.##", "##.../..", "#####.##"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> map = {"###########", "...../.....", "#####.#####", "###.....###", "###.###.###", "###.....###", "###########"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> map = {"########.##", "#.......`.#", "#.......#.#", "#..#...#./#", "#//#....`.#", "#...#.....#", "###.#######"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> map = {"########.##", "#./......`#", "#../.`....#", "#.`...../.#", "#....`.../#", "###.#######"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> map = {"##################################################", "#..............................................#.#", "...............................................#.#", "#..............................................#.#", "#................................................#", "#..............................................#.#", "################################################.#", "#.#............................................#.#", "#..............................................#.#", "#.#............................................#.#", "#.#..............................................#", "#.#............................................#.#", "#.################################################", "#.#..............................................#", "#................................................#", "#.#..............................................#", "#.#...............................................", "#.#..............................................#", "##################################################"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> map = {"#.#####", "#..####", "##..###", "###..##", "####..#", "#####.#"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> map = {"###", "#..", "#.#"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> map = {"####", "####", "#..#"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> map = {"########.##", "#.........#", "#/.........", "#.........#", "#`....../.#", "###########"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> map = {};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> map = {};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> map = {"##################################################", ".`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`.#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "################################################.#"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> map = {"##################################################", ".`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`.#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/``#", "#//`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/#", "#`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`/`.#", "################################################.#"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> map = {"#.#", "##.", "###"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> map = {"#.#", "#..", "###"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> map = {"#.#", "#/.", "###"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> map = {``};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> map = {};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 1359;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> map = {"#.################################################", "#.......``.......###############################", "##################.###############################", "##################........########################", "##################.######.########################", "##################.....``.....###############", "###########################.######.###############", "###########################........###############", "##################################.###############", "##################################........########", "##################################.#.#.##.########", "##################################.#.#.##.########", "##################################.#.#`...########", "##################################.#.####.########", "##################################.#......########", "##################################.######.########", "##################################/............./#", "##########################################.#.#.#.#", "##########################################.#.#`..#", "##########################################.#.###.#", "##########################################.#.....#", "##########################################.#####.#", "##########################################.......#", "################################################.#", "################################################.#", "################################################.#"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> map = {"##################################################", "##..`...///.#.../`/.....``/``....`#`//.../.##`...#", "#.../`./``.`/.`/...`.`../`/`/.`/`//....`/`/`.`.`.#", "###//.##.`#../../.....#...#`.#`./`.`.#...../#`#.`#", "#.#`./.##../``.##..//..`././```.``./#./.#.`...`.`#", "#`./`./#`...``.../...`#./#/`#.`/./`...##..//..#..#", "#.`./...`.`.`././/..`.`/../.`...`#/.#.#`..`..`//.#", "#././##...##`/.#//.`/./...`/`.#`##``/.`../.`..#..#", "#.`.//..`..```../...#..`...#.../.#`/`......#`./..#", "#`...`..``.`./#/....#`#`/`/`...`.#``.#....//.``/.#", "../#../.`./`.```/..`..`..`/`/`.`././.`#`.`/....`.#", "#.../#/../..../...#/.//....`/.`...`..../`.#///...#", "#/.../`/`//.`.`/`...`/..#`#...`/..../.`./..`/#.`/#", "#`//`.#``/...///..`.`/#/#..#../.`.`.`./#./`/./..`#", "#...``././//`.```/...``...``.#/`....#../...``./#.#", "##./#/.../../`````#./.#..`/.///././/`..`#/..`#`###", "#.``.`///.`...`/.``...#....#../..`#/`.`/.`.......#", "###..#.`/....../#.#`/./...#.`....././.`#/..`..//.#", "#.`/#.#/`..//#``././..`/#/.`.`...`#./.`../.`/..#.#", "#/.//.#./..``./`../.`#/`/`.``/..`/..../`/`.`.....#", "#..`.///``//.../``#/.``.#...#`/.#..././..#`.#./#.#", "#/..../#...#``../././.```.`.#.#..`#/#.`.`..`/`#./#", "#``./.#/.//``..#`../#`.`.....#/./..##./..``.//...#", "#`#`/.`/`/.#/#`/`...#/.#//.`.../``//.//`#...../..#", "#/././/.//`.../.``..#/`.#`/`//../../..../..`..`//#", "#..`.```.....``../.`./#./`....././............`.##", "##.///`#`..`/`/.#`/..``#.#`....`````..../.```....#", "#/.#``....`.`#/...`#..#`.``..#`.....`.`.``/.##.`.#", "#..#``#/./.....//./``...#.`....//.../......#../..#", "#..#.//`///..#/...#/.`.`//..../#//....../``./``./#", "#./......#./#..`..//`.```/`#//.`./././/.##...`../#", "#.`#...../.#.`./......``#`/...`/``#./././..//.`./#", "##``.....`#....#/..`.../#.#`##/..#.`..../..//.``.#", "#.`/`/....`#..`./..`./#`#/`../`.........#/#......#", "##`.././..//`/./`.#....././...../`/.../...././..`#", "#....`.```..#`..`...//.`./..`#`..``..`/.....###`.#", "#././....../../`..`.##...####//./`.`..`.`#//`.```#", "#.......//.``/.`.``../.`.../.`#/../..`/...../.`./#", "#`/.....`.#`//.`/..#``//`..#`#..`.`./#``.#`.#.#/.#", "#.`.//#`#/.`....../.#.`././#/../`/....#/#/`.``/..#", "#/```..`.`.`.#.`/./../`.#..`////./..#..`...`#/...#", "#./..`.`..#``..`..`///.//...`...`..```../#`..`.``#", "#`......`./``.....`#```./#/.../#./../.``.#.`/..`.#", "#`.`#.#....../.`/#..//./`.`./`./.`###./././...`...", "##../.../`...``...`.`.`./#./`#.../#`.#`.```/#.#/.#", "#/./`.....`.```#..`../.`.```/.###//`./``....`#/#.#", "#`..#.`.../../`#.//..##..##/..././..`##`.`/#.`#.##", "#``/`.`.#...../...../.../.``##/...`./``./##.#//`.#", "#.##`///...../.`.##/.`/...`./.../``/.//./`./..`.##", "##################################################"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> map = {"################################.#################", "#/.`.#/`.`.`//#.`../..../.``.`......`..##/.......#", "#`...``/#`#././...``/./././`.#./../`.`#...##/##./#", "##......`#.##..`.#././...`../`/`/..`.`./...`#//..#", "#`.`..#.....`../##./.`./`#``/....#./#.`/##.``/#..#", "#../..#/..`.//..//...`.`...`......``.`./.#./..``/#", "#`../......./...///`.`../...`.`#./....`/`/./....`#", "#.../`#`././//.``./..../.`/...`/``./#/``#//......#", "#/.`.../.#/...`../``..//`..//../..`/.``.#.`/..#``#", "#/`...#./..`.............`.`././`./../.##../.#.`.#", "#/..../..`../..``../#`..``../././...``.//..../`..#", "#/.../``./`.`/.//...../.`.../#``/.``/`#.#//.`#//##", "#.`....`.../`..#.`//.`/.#/`.#`.`....../...`//....#", "#.#.``//`..`../.`../../`..././/..#/`../..#../#`.##", "#./`/./#.`#//`././....`/#.#.`./`....`.`#//#//`.//#", "#...#/./.../`#.#/..../##.`...`/./`...#`..//.`/...#", "#.`/``././`./.../.``./...#....`.``.``/`.../.`.`###", "#.//........./`..`.`.`/``.`..#..#/`./.`##/..`#..##", "##......`/`#``/.`.....//`...#`.#././...``./.`....#", "#..#.``/`.#..`//`/#.`../.#/.#.././/`#./../`/`....#", "#/#`.../#``#.`#`..`/#./`....././.`..`../../../.`.#", "#//`../..`.`.`......`.`//.`/.`./`./#..`#./.#...//#", "#./#.#///.`..``.....`/.#./#/#....././..`./`#../.##", "#`..#//#./.`.`....`....``...``#`./../`...#///`../#", "#/..`...`./.``#.../.```..`.#./.../.`##```./```../#", "#`..`..`.#/.....##...#`..`.`./```.#/#/...`##.``./#", "#..``##//`#.`#.../..`.#//#//#`...//.#../...`./#..#", "#/.`../.#..//...//```.../``.#./././...#../.../...#", "#`../..///.`/./``.#/..`....`..`/`#.//.``.#.#/...##", "#`.`/././/``.#`#..`/./#.`#..`../../.....#..`.././#", "#.`#..`.`/#//.....`/.#/.`.././/##.`/.......#..../#", "#.../././.`....`.`/.##..../..`.`/......./.../..`/#", "#./`.`.#...#/#....`/`.`../.`./#...`...#.././`.`.`#", "#..`/`../`/.#./`..`....././#/.`#/./.``../...../###", "#`..#....`./...../.......`//#/./...../..`//..`..`#", "#`/.../....//.../`/#/#`##`..`/`./`...#.```...//#.#", "#.`.`./.../`......./#`#`..`...`/...`.#/.../.#.#..#", "#.//....`..``.``....#`#/.#..`./#/.#``.....`..//`/#", "#..#`...#.``../#.#..`....//..#.``./``.....#.`.//.#", "###`./.#..///``#.``./././/`.`.`.`#/..#././...#/./#", "#``#/....././#/..`#``/`.///..#.../`./``..`/`.....#", "#...`/.``./`..`#.`/`./#.#..`.`./..``./`##.`./#..`#", "#..../`./#..#../..`..#`/`...`/.`//#...`/#`...../##", "#/`..#..#`/``.##./.##.//``#//.`/./``../../`#/.``.#", "#./...`//.`.#././../....././...``.`.`.`..``./....#", "##`.``../#`.`/../.`.../..`...##.//.##..#.///././.#", "#./```/`.`.....`.#.``.``.`/`...//....../..../..`##", "#`....`../.#..#`..``..`../.......#.....#..``#/`//#", "#./.`##`../.`..//../.../`/``/``/.../..``.#../...`#", "#################################.################"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> map = {"##################################################", "#///#///.`.`/.`#`##.#..#.`././/#//`..#../../`/#./#", "#/./`../.#.``/....../#./.#`.`....`..//`....`/./#.#", "##`./``/...``...#/#..`.`.#./#./././//`.#..`.//#`.#", "#//`..``.#../`...```./.#/....`#`../...``#`..``..`#", "##``..`/``././/./..#///.``../...//#`./././..#./`.#", "#/.#..#.#....``.`./...//....``/..`.#`..`.``/./../#", "##..``/.`/`/.`.`...##/...../..```...`...././.`../#", "#./.``/...../..#`..`.`#..../`.`/##.#`./.``..#`#/##", "#/`.`..//.#.../..#//.`.`..../`/#..../#/.../`././.#", "#.`.....#./`...```.`./.......`.`.``../`/..`.../..#", "#..`/.`./././.`/#../.`../.../`/.`..``..`..`/..`..#", "#/`...//`.`//...././##``///.//`../.`....`../.././#", "#```#`/....`....``../`.```........`//.```../`.`/##", "#.../#/`#/`#.###/.///#/./`//..#//...`///.`.`/....#", "#/#..`.`../#...`/./...`.#...#../#/#.``..//#.#`.`.#", "#``#/#/.../.#..#./.`./...../#....`.#`/....`#`.``/#", "##...../`...//./#`.#//../......#/`..#```..`/`//..#", "#`.`/.//.`../#```/.`/...//.`.`#.`.`#...#..#.`/#.`#", "##.`#/.`#...```.#``.`../#..`#`.`...``./.`././.....", "#..``../.#.``./`.//`/./...#./.#.`.../.`./#.#././/#", "#./.#..`#...//./#./#/.`./```..../../#/`///...#`..#", "#.//.../#//````/.`.`./..##./`..```.``....``..`.#/#", "#/....../`/#.//./.`````//.../`.#.`.`/.`.``....../#", "#..#./`..`..`.`...#.`..#..#.#/./``..`.......##/``#", "#/.`.#``#`//`/`/`//..`/`../.......#`....`#./.`///#", "#..`/..`..`././.././/`#`./```/.`/..///../``./../##", "##/#.``../.....`.`/../../.../../..`../`/.``...#`.#", "#/``./#././/...////.`.......///.#/.`./`#/........#", "#/../..////`.#.#``..#/#/.`#/``#././.`##..``..`#./#", "#/#.`...##/../....`..`././`/.`..//./..../.#//#.###", "#/.....`./``/`#`#`.`.`.`...`#.#`....`.`.``/.///..#", "#....//``//./#...`....../`./...`.//......#/#/#..##", "#.#`/.#////`..../.../``...`#/.#./.`../../..`/....#", "#/.`./..`..`.//./.....`.`/`.`/`.`...`....#././/..#", "###.#.././..//``.../..`#/.`//.//.#/`.....`../#`..#", "#`/./.`.`#`../`/.`..``//..`..`../....`.`/#.`/...`#", "#..#./..`.`.../#//..../#./........../.#/`../..#`.#", "#/....`/#.#..../..`.``...`.`/#./``..../``././.#.`#", "#..``.``.../.../`#`..//`./#`../...../#...`/``..#.#", "#`.#`#....`.`//...`.`./`.`..#.#.`#./.##...`/./#./#", "#.//#.#.//./../..#../.`.`.../#/...//./.``.`./....#", "#/#./../```///...`.#`....././/.`/.`/`##....#.../##", "#`./`/#/..../.#..```...`../``.//.#/```...`./..`./#", "#...#/`/`/`.``..`#`.`/`````.//..//./..#.#..../...#", "#...`/#./.#```./`..`....``#`/.....`/./.`././/.`.##", "#`././/..`/..////./.....`#../`.#....`/.`#.`//``..#", "##`../.#../``...#../..`#.`./`..#````/#.#.##..`/./#", "##`/.`../....`./.#/`.//./.#/..`..`./..``#`...`...#", "#######.##########################################"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> map = {"################.#################################", "#`/`/`.././../.`..//`/..`/.../#...`...`...``/..`.#", "#....././/...`......`.`#``.../..`......#.#../.`./#", "#//`../..#...#`.`...`/...///`#.......`.`..`..`/..#", "##`../.`./...//.``.`.//`.``/#.`...``/........./#/#", "#....`/../../...#/.#.`#../...`#../``/...///.```/##", "#..//./`//.`./..`...#./`../#..``....#..`###.../#`#", "#.../....`##...#/./....`//`./`.`./```#.``#.`.`//`#", "#..#/`/./`.../`/..#.../.#`/./././#.`#.#.....#...`#", "##../.`///#..`#`//./#//./..#....#//#.`.``../`.../#", "##`#/```//`/.``#..../.`.`...///#`../.#.`..##....`#", "#`/..#`...`..#`../.#.#`./#......`.`../..``..../..#", "#`/......`../`#...##/#`#.../.`/./.....`//`/.//#``#", "#/..#///...../.../.`././.`/./.#//....`....///`..##", "#./../.`/````.`.../....`/.```/`./`/#.#.//`...///.#", "#.`.......`../`.`#./../.`#.`./.`#.//....###..##/.#", "#/././.../..#..../.`../..`#.`.#.#..``/`//...``...#", "#./`/`/`..###..#..##.../`#..//.#`/.../`..##.//...#", "#`.#.......`...../``......../`.``#/#``..#/..`/...#", "#/`/#....`/..../...../....//.`.//`..`/#../.`.``.`#", "#././....#`.`./../.`../``././.#............./.#..#", "#..`.`/``..`#./...#./`#`./.....`/`//...`..``/`...#", "#.#/../..../``#...##`..`.`/.`..//././......`.`..`#", "##/.`.../.`///.##..#/././`/..```....`..`./#`.///##", "#..#/./`./#./``.../..`.``.../../`..`/.//...`#../.#", "#/..#./...`......//`#..`.`#`....`....//.#/`.``/.`#", "#.....#.`../`//.....`/`.#..#.```.../.`...#/#/``./#", "#.`#/#`...`..`.#.`./`..../../..#...//#...#`.`.//`#", "#.`#...`....``.//`/#`.`/....`...`./#`...////`/.#.#", "#.`//..`..////./.````#`.`././/...`..././..#.``#`.#", "##`...#/`#./.`.../../##.`././.`/.../../#/../`...##", "#./......./.`./..//`...`.```.#.`/..`.......`./`#.#", "#./`.../.#..`.///.../##.//`./.`...#..//`.....#...#", "#....#..``#..../../.`....#././`..`...../.#`.....`#", "#./#//.##/......./..`/.#.`...#..//`...././`......#", "#..../.``/.##..#...`.///`/.#.......#/./#...#``#./#", "#`./.``..#..`/../.`././/./#```.//....##/`./.`/.//#", "#/`..#.`/`//.#///...#./`..//...../#..../#`/./../`#", "#`./`#.#`..#....//..//...#.....`...`./..`#`//../.#", "#./`##.#.`/#/#..//...`/#```/...`/``./././.```#//`#", "#..`..`....`..#`...#`./``...`/..`.#.`/.`/////#`./#", "#./``//../..`/##.//./../.#`..`./`..//`.`#.`/`..#.#", "#.`/../##.`/#./#../.`..`.#....//..`.###......./.##", "#...../`../...//`.././.`/..`./....#.`....`#.//`.`#", "#.##/.`.....##../...`..`/....`.....`/.``../....`.#", "#..`/`.//`.#/..../..``.....//.`.`..//./...#./`..`#", "#..`./`/#/.//../#..../`.#/../...../`./`/./.#``.``#", "##.``..#/.`/..../`.#/.`..``#`.//..#./.`/.`/..#./.#", "#.././``..//..`./`...`.././..#``.#..../.#/./...`.#", "###################################.##############"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> map = {"############################################.#####", "#`.`.....`.```##`.`###.``./#`#.//`..#/..`./...`.##", "#`.#..`.##/..```..././..``....##./`.#/``##..#.`..#", "#`..`#`....`#`/`#...//#/.#.#..#.`./..../...##.//`#", "#`.//``/..`.```#/`..``/`./#./`./.`##/#`/.`##`.//.#", "#`./`../..#``##./../#/###../#//.`/.#.#`/..../#../#", "##/./``#..##`/``.#./`##.#`#`#.`..#.`../#/`#.#/#.##", "#`.``..##./`.`.`../#.../.`././```#.#`#``/../.#...#", "#...`/``.......`//`##.`..`.///.`.`../#/.`...///.##", "#/#.`/.`..#/`...`#.#.`##./`.##`../#`.`#/#``.`##`##", "##.//.``/``##`#.#./.#/#`./`.`./....`.`#.../`##`./#", "#...#/#.``./....././...#`.#....#`.../#.`/##`#``#.#", "##..../.#.`.../#...`/../#``....#/##`./..../..#/`##", "#./##`/...#.`.`#`///#/./``#`/.###.##.###/.//.#..##", "#....``./...//.#...#.//`##/#/.#/`//.`##/..#/#./``#", "##.....#```##/#...././/#`/../#.//#`/#####`//.`#`/#", "#`...``//.``..//#..#``....`.#````/``##..../`.../##", "#.`.``#```...#.`.`./././`//##.././#./`./#...#/.#.#", "##.`//./..#./``.....`.#./#`#/``#..`.`.##../`..`.##", "#.`./###../##`#.`.`...///##./#./`#..##`.#...#.#..#", "##./.`.````###../..#./.`#../#.`.``../`../#./.#/./#", "#.#.#/`#.//.#.#./`.##/`/`#//.#.#..#.##.#`.//`##/`#", "##`#.``#./..//.##`.``#.`//#/..#.``.#/`..``..`//#`#", "#.`/#`..#`##/./`...#````..`/#`..#``#`/##/##.#..`.#", "##.#`.#`.`.../.../#.###/#.`.#.`###./`.#.....###..#", "#/#.../...#..`#.##/.`.//./.`##.#.`..``..#.`.#../.#", "#./`....../`#.``.``..//.#/`.#`..```/`/#..####....#", "#.#/.//..//`/./`.`##``#`##.`..``.`.....`././`/.`/#", "#.##`#/#../.##`.#`#/..`.`/...`#././`.....#`#./#//#", "#...#/.`...#`.`/#..//...`###``/`#.#./......#`./`.#", "#/./...#.`./...`.#``#/`..#/#..//`#..//.#..../#``.#", "#.#`#`.//#``..#`/./..`./#.```./..#.#`/`/#/#//`...#", "#..`.`.`#....`////`/#..`./`../##././`/..../..`//.#", "#`/...`.#`#.#.....##/``##`#.`#//`....`.#``#`#.####", "##`...#.../#.##`..#.``././``#..`#`##.//`...`./#/##", "#/..#`.#.`..##.`.##`.#..//`##..`//.#./`/#..#/`..##", "#.`.#.`.`.#/`/.../...`.#``....`.`...`/#/.`./`.##/#", "#....#``/``#`/.#`...`.`/.`##.#`.#///`//...``///./#", "#.#/./#`#`./.##/#/##/#..`..//#`/..`.....//#`###//#", "#.`#./#.`##./```/..#/#./.`../#`./`#...`/`#.##./#/#", "#../.``...`..###.#./#/#.`#..#./#/./.#./..../....##", "#/#/##..`/./.#.###/./`/`./`/#.#.#./.#.#`./`.`/``..", "#..###//#..#..../#..`.`.`.```#`..`#./.``#./`.#//`#", "##/.//.//...//#/`...`#..#`..#./.##/`##/.``.#..`#.#", "#`..#`#/..#``.#```#/...#`#`./`/```#..#`/.`.`#//.##", "#.#..#.##.#.../..#/.#`##.#...`/##/.`..#``#`..#``.#", "#....#`#...#/`.``../`.##/#`....#/`.``#../..`.....#", "#.../`/.``..`/`#./..``.`#.#/`/`./..`./``#`./#..//#", "#./.#/#./#..#/./.`##.#/#./#.#/....#//./``.#./#/``#", "##################################################"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> map = {"##################################################", "#./`../`../`../`../`../`../`../`../`../`../`../`.#", "#/..`/..`/..`/..`/..`/..`/..`/..`/..`/..`/..`/./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "#./............................................./#", "#/............................................./.#", "#`.............................................`.#", "#.`.............................................`#", "................................................/#", ".............................................../.#", "#./.../`../`../`../`../`../`../`../`../`../`...`.#", "#.`/`/..`/..`/..`/..`/..`/..`/..`/..`/..`/..`/`/.#", "##################################################"};
    MirrorPlacement* pObj = new MirrorPlacement();
    clock_t start = clock();
    int result = pObj->mirrors(map);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8355516&rd=6536&pm=4461
********************************************************************************
// You will never see how this line looked after 4 challenges failed! 
#include <algorithm> 
#include <string> 
#include <vector> 
#include <map> 
using namespace std; 
 
#define LS < 
#define Size(x) (int(x.size())) 
 
// All macros with parameters "k,a,b" run the "k" variable in range [a,b) 
#define FOR(k,a,b) for(typeof(a) k=(a); k LS (b); ++k) 
 
#define INF 1000000000 
// produce TC-style answer 
int tcize(int n) {return n<INF ? n : -1;} 
 
#ifdef floyd 
FOR(k,0,100) FOR(i,0,100) FOR(j,0,100) w0[i][j] <?= w0[i][k] + w0[k][j]; 
#endif 
 
#line 3 "MirrorPlacement.cc" 
 
int dx[4] = {+1,0,-1,0}; 
int dy[4] = {0,+1,0,-1}; 
 
struct Tpos { 
  int x, y, dir; 
  }; 
 
int dist[60][60][4]; 
 
class MirrorPlacement { 
  public: 
  int mirrors(vector <string> map) { 
    // !FDI 
    Tpos origin, dest; 
    int X = Size(map[0]); 
    int Y = Size(map); 
    FOR(x,0,X) if(map[0][x]   == '.') {dest = origin; origin.x = x; origin.y = 0; origin.dir = 1;} 
    FOR(x,0,X) if(map[Y-1][x] == '.') {dest = origin; origin.x = x; origin.y = Y-1; origin.dir = 3;} 
    FOR(y,0,Y) if(map[y][0]   == '.') {dest = origin; origin.y = y; origin.x = 0; origin.dir = 0;} 
    FOR(y,0,Y) if(map[y][X-1] == '.') {dest = origin; origin.y = y; origin.x = X-1; origin.dir = 2;} 
    FOR(x,0,X) FOR(y,0,Y) FOR(d,0,4) dist[x][y][d] = INF; 
    dist[origin.x][origin.y][origin.dir] = 0; 
    for(int t=0; t<10000; t++) { 
      FOR(x,0,X) FOR(y,0,Y) FOR(d,0,4) { 
        int d1; 
        switch(map[y][x]) { 
          case '#': d1=4; break; 
          case '.': 
            dist[x][y][(d+1)&3] <?= dist[x][y][d] + 1; 
            dist[x][y][(d-1)&3] <?= dist[x][y][d] + 1; 
            d1=d; 
            break; 
          case '/': 
            d1 = 3-d; 
            break; 
          case '`': 
            d1 = (5-d)&3; 
            break; 
          } 
        if((d1 < 4) &&  
          (x+dx[d1] >= 0) && (x+dx[d1] < X) &&  
          (y+dy[d1] >= 0) && (y+dy[d1] < Y)) 
          dist[x+dx[d1]][y+dy[d1]][d1] <?= dist[x][y][d]; 
        } 
      } 
    return tcize(dist[dest.x][dest.y][(dest.dir+2)&3]); 
    } 
  }; 
 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/