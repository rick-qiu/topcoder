/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4496
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Elections {
public:
    int visit(vector<string> likelihoods);
};

int Elections::visit(vector<string> likelihoods) {
    int ret;
    return ret;
}


int test0() {
    vector<string> likelihoods = {"1222", "1122", "1222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> likelihoods = {"1222111122", "2222222111", "11111222221222222222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> likelihoods = {"111", "112", "121", "122", "211", "212", "221", "222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> likelihoods = {"1122", "1221", "1212", "2112", "2121", "2211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> likelihoods = {"1111111111111111111111", "1111111111111111111111111111111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> likelihoods = {};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> likelihoods = {"11112222111121", "1211221212121", "112111222", "11122222222111", "112121222", "1212122211112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> likelihoods = {"21111211112222212212212122", "22111112122122221122211111221222212212221"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> likelihoods = {"11122221212221112112212122121122121211112112111122", "22121122121112212121222222212212211212121212", "22112221222121221222", "12222121211222121121112121112112121111222211", "211111212111222122221111122111112221211", "22212212112", "211122211122122212121121", "2121121211111112221112112", "2111122211211222222111111", "12122111122112212211", "111121222221121122121122121121111122111112", "12112111122211122222212111", "2211221222", "22121211212221221111111221211111122112112212111", "122111211211121221121121", "12221221112122111121122211221111212122211211221", "22111221222122111", "211121212212121222212221222221111221122112221111", "211212221211121222", "1112211212122121212121", "222221122122221221111121112211221112112", "2112122211221122112212212122212221111212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> likelihoods = {"21212212211121212111221221122222", "2111222111221122", "122121222112212212211211212111122112121212211", "121221211222121211212121121222121122111112122", "22221121222211122211212", "11211122121122111121122112122211111221221", "2221121112211211121222", "21121111111222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> likelihoods = {"22122222211112112222", "11211222121122211221212111111121121212", "2212211212121222221111222122212212121111", "2121221121221", "1111112222111211111111112212221", "2", "21122221121212121122112211121212112", "2121112211221112212121122", "2122", "22221212121", "2212121121212222222212221212122112", "1212222121122111222121122121121112112112221212", "11222221211111212222212112212", "11111111211222221", "122", "121221121", "1121221122221122212122", "112121121211212111222", "12222121111221221211121", "112112122211112121222121", "1212112212212221121111212211212211112121212211", "1111121112112222111122112221", "12221211211221112212211122221222112112", "22212212211111", "1121221111212112211221111", "1112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> likelihoods = {"1211121211222112112", "2112121211221211112112221221111211112", "22212212212122212121111222112111212212111212112122", "21111112122212121121222212", "211111211121221221111221121111112221112211111", "12112121112211221222212221212122", "221221111111221112221212", "12112111212122222111221111222122212", "221221221212221122111221112221221221122222", "222111212211221111111221122121121222112", "111122121111112221122211111222222211", "111211211112", "2111121122212211122222121121211111121122212", "112121112212212122222222212221222122221222", "222221112222222112112121211", "212111211", "1212111211121211112112111112122212112221222112", "1211122211221212111111121212", "12", "21211111211122111121211222211111", "21222221122211122121112", "212122221", "11221121121111111121211211222111", "22222111122111212122121221", "1111221112111111221222111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> likelihoods = {"21111122222112221112122111", "221221222122211112112222111121211112122212212", "21111122222", "211", "212212112111111112", "11222222222111211211112", "121121122112111122211211211222222121222121121", "11111211", "221211221111112111222111122221", "222211211221222221211212112", "1112222221121221112112", "1222212", "2221121211222111211121212212112211222221211", "222111212221111222122121212212211222111", "12122222121212222222121221112212", "1112122121211221221211222122122212121112221", "221211", "222111112211", "1111212111222222222222121", "12212221112211122121112121122121121112111211", "12222112212212111121212", "2111111121121211222222221122211111211122", "12221121112121211111122121121111112121", "211211221222112211121121212122221221122221222212", "11", "21121211121112121211212111211212", "222222221112221111211122122211121212212112211", "12222121121212", "21121222121112222121122221122221222112", "21121211111112121212121122122222111112222", "1111111", "12212211121112222212122112112221112211", "2212121121222", "12212221222211222111211212111222222212111211", "2121212122", "22", "12112111222221211122221222", "11122121", "22211111212112111221122111222221211222", "21212111222122122122222122121211221", "111112222111112122212111112222221121111121", "1122221211121221212111121111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> likelihoods = {"21222222111221121122112212222112112212221212121", "1221211221111", "211121121222111212111111", "211121211221222222112", "12122121212111211112112212121122211112112", "111112222121122211", "1121222112212122212221121111211111121112211211", "122221221112212222112212121121", "21212221221", "211122212122122112121211112112", "211222211221111", "222121", "2111122112121222221111", "2212112211222212121221", "2122221112122221121112211211221212111222122211", "221111122111111212211122221222221111112", "221211212212", "11212121121222211221121112211", "21212221221122122", "2", "1222112122211222", "21121112222112122211211122221212111", "12112212122211221112111122121122112211112221122121", "2222122221122212121222", "221112111122111121111", "12112111221111122", "2221212222221221222222222111121", "1112221221111221221111222112111112122112", "211122122122211222221222", "222111112222121121111212212121222111222", "212221121111122122121", "121212212121122122221211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> likelihoods = {"222112212121122111111111122222212211111122211", "21112212222221", "11122", "22211212112122111222222221121221112111212212122", "22121111222212122211211122221111222121112221112121", "1122", "2121111111121112221122122222122222122", "211221", "222221212221121211111", "22", "1111", "1211122221211222222122", "121112", "12", "222122212121211211122121211", "12211122111212111111121212211222111", "121121222222211221211212221121211221221", "21211111222221212122222222222112", "11122122211112221112122121122", "1111111111222222221212111222212", "12", "21222211111212212122111121", "111212111222212222", "11212211211111211", "2221112212112", "222121121211112212112", "22112111221212122222122211212121212221", "222211", "122211221112112212222121222111", "12221111212212122221122112112121222122211", "222122111122", "212111", "2112222111111111111121121221112", "2112111", "12211222221212121111211111122212121", "1122121122111211222122111122122212221212222", "2222111212222221112211221122211111122121221122", "22112222222112222111112221211", "1122111111221112211211", "211122222211111122", "211111112122122121", "2122112111222112212211121222", "21111122122121211112122121", "211222112122212121112122222112212222121122222121"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> likelihoods = {"21212212222111221221211111", "1121221122112112222211122122112221122221212122", "121112112121112121", "12211111221112211111211", "2111111211221112221212122112212111", "1222111", "1111222221211111211211222122111121112", "222211111111121121121122212122112211", "211111221111212212212122221211221122111", "1221222111121111211212112121211", "12121", "212111211122121122121111111122221121"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> likelihoods = {"11221121222212211211212111212212211221112221122112", "2212", "2111212121111", "22221222212221112112211222222112112", "212122122222121111", "2121111122221222", "212221122221121111112121221211121", "211211121211211222212111112112121212212122221", "212211221222212112111221212121111221211221", "1122222221112111222", "122211222212212212121", "22211112112112121112112112", "221221221112211211212", "22121", "21212111112111221121", "21111122122112121111121221212212122", "121122221211221211", "22221212121212111122222212211111212112221111211", "21222221212221111212121221221221112122122", "2211222112122122121212", "1211212122211211121112211212222212111222121", "22212", "21211211112122", "1112122", "2121121", "1221211112111222211212112122", "12212211121221221", "2212211111222222222", "112221212121221122222221212121121211", "211111212222222121212111222122", "222221212222111221112112111211222", "211112222221", "222221112", "12222212112112212111121121121221112112212221111", "112212221121121222111111121", "2122211211112212221112112112222211211222212", "121222221212", "12122222222211", "12222121", "1121112212111221111122122112211222212211122121212", "1112111111111211122221222111111111211121211112", "22222222212211121211121", "111221121211112121111122211122111", "2222122122211112211222221112221112", "11", "2111121211222112211", "2112222122111212211121122212221121212112211122", "1121112212221121111221212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> likelihoods = {"2211211121111221111221121", "2212222111112112111", "2112112122221121111", "112112222212222", "111222222222211122122111112122111121112112221122", "22111112", "1111122122121222112221212211", "22112221212121212211221111122111122222222", "2221121211121112212112112112111112221122221", "1122112222221222121222112221211", "21221121221121222112222122", "21112", "122222111212111211212221", "12111222212212221221121211121122211112221121122221", "1121221121121122112221122111", "1", "2221112222122211", "222211112", "11111221121211211122221121112122122", "122111", "22211212212112111221221", "2221222222111212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> likelihoods = {"1111221111222212211212222122211211121211111", "11212111121211122211122211212221222221122211", "12212212111211222221221121221111212211121", "1121111222112111212122222112121112222222122222112", "12211212221222211222111112112222121121112121211122", "211111112112221", "2212222121121122112111121112221", "2111111222112211", "12111112122111121122121211122212211212111", "21222121211112112221211112211", "211111212122221221112121211112212212211212212", "112", "11122222221122122122112222", "2121211111221112", "12121221221112211112221112", "212221", "1111211212121212121211", "12211112111212211121112222122112122121", "1211221112221221121112222112221", "12222121211112212212", "2211122122112122211", "11211212211221122221122211112211122222221122", "22212121222211112112112121111", "1112121121211212112112221212212211122", "12211122112212222121", "222221222112112222112111211212121112112221", "2221121121212212121222221112122", "112122111", "111211122211121221212221", "212112122221122112122122121111212", "22112212212122212111112211221112221212", "21221211111111212221121222222221221122211212222112", "222111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> likelihoods = {"1112211", "122222211122222222112", "1112212221212112112211111112", "221211112221", "121121221112", "2", "1212221112121212122121211", "1222222222121222212212212122211222222", "1212212111221", "22112112211", "11221112111112212212121212212221221121121211121", "1211112122221111211", "211222122211221111221222212222222221122212112111", "22211222111122211122212221222122122", "211211222221111112", "122121122", "2121212222121222111121112121121212122", "222111222112122221121122212122121211211212221", "22112111211112212212211122212111122", "11122211111112221122222122122211112121", "2212", "11211221121222112121121112111122122222222", "1211121", "121221122111111111212", "1", "22111221121211121111112221111212112", "11121222221222221", "11122111222122221212211111111122222121212121111", "12111222212212222211222", "11211221111121221212112211111222111222112212", "1212121122212212222221122121212121222222221212121", "21", "11212212122212122", "12111111112212121", "222112212122221221221122", "222", "11222121221122221112112", "1212222222221121222121122222212122221", "22222211121221112222121212221122211111111221212", "211111112122122221121111211121112212121112122111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> likelihoods = {"2121112211111121212112221222111112", "112112211221222221221222211111112122211211", "1221222111121211112122221222112211212211222122", "21221111122", "121222122221221111111", "11121121122211222222122211222111211111111222122", "1222222122111111122122221221212121212", "21212122221112121112212211122222212221", "2111112221111121112121121222222", "1211111212121121221222221122", "221111211222122122211121122", "22111211212212121112122212112121221211122121", "111222211111122121211112221111122221", "12222222212112212112111222212221221", "1111122121", "11", "12211121121121212211", "12111111121122212122112211122212212", "2221221221111211221222221111212221121", "211221", "21221112", "12221211122211211121212111211121122", "1212112121122222", "221122111112122121221111211211122", "1212121221", "221121221211112211121211212122221222", "12222", "212211211221111212221121212", "1", "11211112112211111112121221", "21122", "212111212121122122", "2222211111112121211121221221221112", "2211111122122211111112212212222112211221112", "1121111111221112121222111111111121", "2112222221221221222121112221122212122221122112122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> likelihoods = {"212", "211112122122111122111121111211121211112", "2111221212111221221122121112111212222221", "1222221111222222221221112221222112211", "12222222212222112212211122212222222121111", "1212221212111221212211121122222111221112222", "1121", "12121221", "1212211212121221221221121222221122211", "2111212221122222121112121222111112222112221", "11212221221212212221221111221", "122121", "2121221121212122122222122", "1121111122222122212121121211", "1212122111122122222111", "212221221", "1121221122", "12111211222222122212", "222122121221211122212211122212121121221122122122", "12212212122221111122221221212222222", "21111221211121222122", "12222121", "11221211122221212112212211211111121221", "1122212211222121", "1111111111122111222211212112111", "12111", "12211212212222121111122122112", "121122222212221112222122212221111221122221212222", "212", "12112121221122222122211222112", "222122122212122221212222111222222", "21211211121221212211221112222211222212222122221", "1121111221221121211122211111122111111212121", "2112122", "221122111121111112221212", "21222112121", "222121221121212222121", "2212122212222221222212212121112121211111122222121", "21211", "22211212111222111221111221212122", "22222221211", "21212222122221112211122211221112211211211", "2121221211212212111222222", "2112221221211121212122111122111212111", "21222112122", "22212122212122122222112221111122112211121222222221", "1211222211221121221221211112112221221122121112212", "2221222111122212211122222121221", "2222221221111112222111112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> likelihoods = {"212112", "111211111212111222121211212122", "1", "1112212111212211211122121212111222211222121112", "2111111212212112", "2112121122112121212221221122112", "1112212112112121122211221121221122211", "12222212111121111112221222222121112111222", "222121212212111221", "122", "12221122121221121111212221111121112", "212122222221121222122121122121211", "2222222211211222112212112121112221212221122222", "212222222221", "122222121112212122121112121", "11212112211212", "1212", "2112222122112112121112", "12111", "211", "1222", "22221111112221222111122112221221112221222112121122", "211121212", "1122121221212221112122122112221121122212211112", "222211212111211111221222121212112222221", "212211211121122212", "112221222112221122222221212211111111222", "211121221221212222211221121211", "11211", "12222122222121221222111211211121222111211", "1122122122121", "1221112212122111111211111112112", "21111212111112211121", "11211222", "22111211122121121221222211221112122221221122", "1221211211211221111211111212222212121221112222", "11121221121221122121112211", "11222122121222221212222211122211211", "1212111111111221222211121222221211111111", "1121", "12212111122212122", "21", "221221222212", "22211112221", "22212112221122122121112111222211221222222", "1112122121121112211111112222111111", "1212112221", "121"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> likelihoods = {"11222211121111122112111212212121212", "2122211222121111221221221212111", "112121122122121", "122211211222111122211", "2", "111122111222221121221121222112122121122", "2222111212221222122212211212221", "11112121212121212211222221221222222212111122122", "111221122", "211212211211212222211211", "212112112211", "21112221121122212212", "11222111", "111122122112112221", "112121122222111221212112", "211122222", "2112121112221211221221", "11", "1212211121112211211", "111121111111121212221222211221212", "2111111212121", "12", "12211211112111211122122121121222111222", "221121222122221212112222222221222122221111211", "1212", "1122211222211111222111112221222212", "12112122212211122112212222221212121212122112212", "22211121111211212222222112222111211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> likelihoods = {"2", "22211212", "12111121121222221221221212211212122122122112222", "1111112212121122211122111112212111221221121", "2121211", "1122121221221112212111121212221211211", "21212221122", "21221121221111212221111112221221121122211211222", "121", "1222212222112122121222", "1", "22221221222122111222221", "121221121221221121212121211221", "22222222122222212222121212", "211212112222", "11212221212212112121112112212211221221", "1211221112121121211211111222212111212211", "22212211221121211211121121112112212112211", "122112222212112212211122", "1112", "1221222121212122112212121221212212", "22222221221212222121212122121", "12112211121111112121212111222222211212", "21211121221111212112221112112222112221121112221", "1211221211122121212222", "2212111122211212", "111222211112222222221122121", "22111112221222222212212121211", "222211212221212221112221121222211211222222121", "1112121222122211222", "11122", "21212211221112211211222121", "2112222121122121122121222122121212222212", "1222", "1211122121111122112", "1111122211122222122222212121", "21121122111221122122211212222", "22221121211211111111222111221121", "1221112212222222221", "22121221112121211221122211211222221121111", "1221121112121122112112122221221111111121222121", "2121221222112211222111111112112", "22112211112122212211221122212121121211211211212111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> likelihoods = {"122221111222221121", "12112112221122122221112121222", "211122212222222111122112112112212111121", "222111212111112122121122221111211211111", "211221212221212121211212", "11122212211111221122222221122122122112212121111", "11212222111211", "22121111112222211111221211212111221222221122121", "1212222212122221121212", "12122211221122111111222122122222", "221222122111222221", "2212111", "2222121211112111", "11112211222122112", "1221222111112211222", "121121121211122121212111", "121211112112111212111221221211112222122222211222", "11211221112121212", "21222111121222222211212122211212122", "211112221222222222122112111212111112212212121212", "111222221222", "21122", "12222211212122221", "11", "1111211212112112121121222111211212122221222122222", "12211211122111222112", "22222122222", "2211212212221122", "211212122222121211121212", "22122111221222", "222122222112211111222222121221121121", "1221122212121111222212221111112121221221", "11122122121222222122221122221122", "112212121221111", "22212", "2221222212121112111121122211", "211212111", "212222211211111212112111", "2222222222122121222222222222221111212212121212", "2211221112112122221122221221222112212111", "2122112221211", "21212121211", "2211222212211112111122112111221", "22121221122121222222111221212222112112", "121111212112121122121112221212222222221112221211", "22122222221121222112222122222221221111112122211212", "112212211", "12122122121121221122112122222212211122222121221111", "112212122111112121121121212221122211111212212121", "111111111221121222222212212121121112112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> likelihoods = {"22221211", "1222222222211222221112112212", "122222121111112221122112111121121212", "122122", "22221222122211212122222221222212211122122", "211111112112121121111", "12212211222211121222112211222221111111122121212", "111221221212112222", "2111122", "2", "22221111212212212122111", "211122211121222222121122211211121112222221", "22222211222211212211212121122121211222211", "122111122112112212221112112222121121121121111", "12112212211222222", "1221212211221212111221", "1112121221121211222211112112122221212221122212", "21122121121121112222", "21221211122111121111112222", "22222122221211", "1221111121121222122221112121", "112121211", "122221222121222212212111212122222122121221122", "2121212", "211111122211221111111212112122122111211121121112", "22111112121222212", "222222222", "2122", "122122222212111122112122122212122122", "2121211112122122222", "2122122222122211212111222222112", "1121112112211111221212221", "2121111", "1121222212211122221221221122221221211212112", "12211211222112212112212211211111121", "212221", "222211111122122112222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> likelihoods = {"2212121112112112212", "22211221212122121211211211211111212", "212222221212121112212111212", "222111222", "21221121221111211111", "11212112122211111122221111221", "211221111111122212122221121221", "11122212211221111212", "121111", "21122122221112122211112212", "222111212212222", "2112212211111122222", "2221221121121211212111112112212121222111212212111", "2222212212211", "12221122122122122212111122221212211121111111221", "1221221", "1222111222", "1221222221112111222112", "112221222222121121222", "212222121122222", "11221121112111211211212121112", "11222112212221111221112111122111212", "21221212112112121211212222221211111", "2122111122122121221121121222211112111112222", "2122121", "111121211222111112111122121", "212112211112221", "111211112222211122211122212221", "111112121121", "121212121122211112221222211121222111122222122", "1211211211122", "2122212211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> likelihoods = {"22212212111212112", "2111112", "1211221112211122", "2211112222111221122", "221122111121212111121212221122111212", "11111121221122111111122222112212212222211122112211", "211212112211221", "121222121212111212111211", "122111121222112112222222211211112", "221212112111111122212121212222112111222221221", "11222121211222121211221121111112221121", "1211211", "2122221212112221122", "222222211111222222211121121222", "1112222212222112112211212122112", "1111211212121222222211122121121212121121222211", "1222111211122211112112112112221221221222112", "1111211211111112121221122121", "12121121212111222221122222122211121221", "211212211212121112122112", "1211", "222112", "22222122212211211121211121221222222121121111111", "112122121211121112122222111111112111112111", "21", "212212222122122112221222", "2212121212112221211121122211221221112121111", "21121221222122222112212221222211211121122211221121", "22122221221122211111122", "2222212211112221111112221222122212121111", "11211122221211121222", "222122122121112111122112122112221112", "212111211122212", "21122211212112221222111121212", "21111222112211121111121211212221212221112", "2121212211221221212222211", "2112112222222212211212122", "121112111212111211211212122221111112221222121221", "1221211112212121122212112212212212211112", "212121121111221222211212121122222222221"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> likelihoods = {"121222122221111212111221212111121222211121122", "12122211122", "1222111", "1212222211212", "11212122122112211111", "221121212222221", "111222222212221212222122221212111112111122121"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> likelihoods = {"11122112222121112122121212212222221111212222", "221121122112212221212121121212211212221212212211", "1111222221222112211121222121112121212121122", "1121212221221221221222122122212111121211111121", "211122211112211112211222121122112221111111121122", "21212112111121222222111212112222222", "1111", "1112112122222112212212112111112222112", "22221111221211221222122122122", "12112", "1211221221212222221121", "111211221221211122222", "2221122111222211121122212112222", "2222211111121", "11212211", "21212121211", "11211111121212221211212212222112221", "22121222121221122121212211", "1222122211111211112211111221212221211", "11221221121211211221211", "221212212222212111212221212222212211111222211", "221122211122222212222111121222121111112221", "2221221121111121111121112222221211112221", "11121111122121111112211212212112", "222122212121111112122212221112212", "211", "1211211122221212222212111212112", "2221212111111221121112222112222212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> likelihoods = {"12211", "11221122", "21112111", "1222221121", "1222211222121212121112221", "1112222221212122222112222111111222112111121", "211112222212222", "2212122211111", "11", "22", "1", "121112211121111111121221212212", "1212221122212121", "22211112122222121212221222222122122222222", "1121222122112221", "11211122212222111122111221121111211222111112211", "21", "11211121211121", "121222111122211122", "1122111", "221111221121121222111221212211", "121112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> likelihoods = {"11212222222221211112212121111", "2122111122221", "2221122211", "21112211222222122212121222211", "122222122211222211221221121121211", "11212112", "1112212211122222122112212122122121", "211", "211122122211211122122112121122122212121112111222", "112", "2221121", "222221211122222121212121211", "11221122122221122222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> likelihoods = {"1221121221121", "11111211211221211111122122122121111", "2", "21", "22222222111112111212", "21111211111121121112221121221111211111221222221", "1121111112111121112111112121212", "11222222221", "122111221222212111211", "2212212221221111211112211221212211221111221212", "2111221112212211121122222221211221211121121212222", "22222122121222", "111211111", "21222122111211111", "11222", "112221222111122222122122", "1121211221121211112212122222121221221122112", "21222112222222211222121222221221111", "1112121222111221", "11222212212111211211212", "1222212222221222112211212122122212", "12112111122112112212221112", "12212221122222112122111221221212111212211222", "221221121211212122112222211212", "2111111222211121211222", "21121122", "1211122212121211122", "111211122221211121211222211", "111212221112221122211112211122122122121", "12212221121222222221211121221212211112", "1211121111111211221211222121122111", "1212211112112211221222121212121111121222211211122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> likelihoods = {"111212212221112122122222111212111211111111121121", "122121", "2122212222112", "121221222122221112212211121222121222211222222221", "21221121111111221121211121112112221222", "1121221212", "112122111", "21211121212222211222122211112212", "1", "1", "211222111", "2211212111222112122111211122211221", "121211111121222111111212112221212212", "12122212222112111", "2222221111111211212222121211111121111222112", "222222221211221112122222221212112222", "2211122111211", "2212222122111212112121121211222211221211211122", "212211211121112211", "12122111212112121111222112222121211211112", "2112222111211211112221112221212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> likelihoods = {"121221221122211111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> likelihoods = {"11212211112222121211212222222212122122", "22122212221212121211211222222221121112211111122111", "2", "211211111112211121112112111111112", "1111112211211121222122121121112211", "1122221212121211111112221222211121212211111222112", "122122111211212222211112122122212111111112212", "111221111111112111212212212111", "2122121211112122212222211111211211211222121", "2121122222212121221222221221222211221121122", "1212211222211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> likelihoods = {"12211121"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> likelihoods = {"11221221122112122112111211222111121221221", "122112121112221111122122111", "12112121112211112122212221111211", "2111212121221212222121121212112221", "2211211112112121121122211111", "12221", "1", "22211121222221", "2112211121112222112211212122111112111112222121", "112121111212122211222212212221", "211212211111212121122112211222122221212", "12122112", "221122112122212121121121", "221111121122122212121", "111222122221211222112111122222122122221", "11121211112", "11221221211112112122221", "1212122212122222222112211111", "21111211112112", "22111222222211112", "121211211221", "111122212211211122111111", "12222121222112212222122111211211111", "211122212", "12112112112112112221212111122121122212122212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> likelihoods = {"22222122122211111222212", "222", "1221221122221222221222222", "22211", "212222121221122212221111", "11221212111211211122212122221", "122221222222211", "12221", "22", "11211122222122", "22112221212111211112112212221211211111221222", "22112112211221112221221111111121212111221222", "222221222121121211112222", "12221211222221212222121222112121122122", "22121221122212222122121111", "221111211111222122112", "2112121", "11121", "112111212211222111212111112222211221", "2112121121122111121211221121121221222", "22221122122", "212121212122112121222212221221211121212122112", "11211", "11122112222", "2221112222112221122211221111221121", "221", "11111222211122222112221121222221212211", "122211112111121222121111111111", "121121222211222112211112111122112", "112111212122111122121221222112", "1121212111", "2211212222111122122122121122222111", "221212211221221212211112221", "1221121222212211122111111111112212222222222", "2212221222222221211112121221121212121121212222", "122222111212", "1122222112111122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> likelihoods = {"2121122222211", "1111122111212211212222212211122111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> likelihoods = {"122222", "222111212112121222221221212121111121221122222", "2211211221222211", "2212222212222121211121122122121211212221", "11222221111112111222", "11", "222112112221122221111222121212111", "1111212122211111111", "11212221112121211221211121111221111", "1", "1212111221111122211211211121121211221221211", "12121122122212122", "2121122221212222", "11211122111211122112121221221212", "211212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> likelihoods = {"22221121212212121122111122121122", "11211212121112122122121212211112121121", "2222221121211111111121222212212221", "11222121111211112", "11211212111221111112222212111212222211221", "11222222222122111211112211211212112221", "12111212121111211112221112", "1222211121212211211212", "2112221221112212121111112112112121121211212122", "12212221221111", "11122221122111221222222122221211212121122211211222", "1221211112221211", "21212212211111212222222212122121111122", "22112222111221112122112212211111111221111222111", "2121221111", "2222121221121112212212221222122121111121112", "212111112221122222111212122", "2211111222212222212111222", "122111212211212121", "1111211212121211111122122222212222222212", "1221112211122221122122111111121221122121", "2111", "22121112122221211112111121221112122212121121111221", "2212112221221111122211212222111122212122111", "21221222211112", "22112222221211121121122212111122", "21111112222212221221212122212121211221222121222111", "2", "12221212121112221112121", "11", "21221222121222211221121111221211111222", "122121222222222112222112111112", "12221211211121121112212211121122212222222212121111", "11222122212211111122221221222122121122211", "12112222122121221122212222221111122212212112121122", "1221221112112112221111222211222121", "121121211112111212222212212222", "22221221211222112221122122121112122222211", "222121112122122111221111211", "1211222222122211121122212221212", "1", "212222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> likelihoods = {"112222121212212212121212221221211111", "2112111111211211111221111111111222221112211", "211", "22211122112221111212", "21121121211211112111122122122122212111112121212111", "122111121121", "12211211212122111122", "221", "1122", "21222212111121122212221122122221112121222211212111", "21212222221", "222211222", "11111211111112212122112", "111111", "21222212", "11212222221111121122212221112111112221121122221", "111112211221112222221212", "112121221112111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> likelihoods = {"1222212222211212222212222111111212222111", "22211112112221221222122221212112122212", "21122211212121211121111222121", "212", "21121212", "111212221221", "12121212212", "2122112222221222121221222111", "11", "21112121211221111112121221111122111211122111122122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> likelihoods = {"1211111211222122222", "1111112", "12121121121211112122112", "222212212112222222212122", "11221112111221222111212", "1121221221211111111112112112112111112212112", "112121122111122111212221211212211211", "2122121122112121221222112212221", "2111111121222121211221112122211111211211121", "2212222221121212211111212112212212112112122222", "212112111222111111121112111", "222222211211122112211", "21222221222221121122212112221222212211", "121212222211112122112222122121111112122", "22112221121221222221111111", "12122212112212122222112121211121221111212", "21212221121222221121121111122112221222122111", "221212212122121212221122111122122221122", "1222121222112222122212212121212", "2211222121112112222112112112211121", "1111122212212122", "22211121221122122222212122121222121211221211", "2222212211221112112211221212122212211221122222", "2222211222211112112211121", "211122221122211212", "22221222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> likelihoods = {"2", "211", "1122222222112121211211112221121212", "21112", "212222121111", "11211222112112111122221", "211112212121", "111112221112222212211221122112121212221112221112", "1112122", "211212122212211211222121111211221212121122122", "22112122212111112112222", "12112211112211221222212211112212222", "1212222222221221111111211", "22111122112221122", "221212122221", "1", "111", "212121221222222112122122", "12111211122222111211111211211211111", "222211112222111121111", "12111211211122111111112221212212121221222122", "2222121111", "11221121111221121221222211211", "21222222111211", "2222211211211", "111221111", "11211122122211212222222112211222222122122122211", "2221121211211121221211212111111212", "221222222111222121121212211", "11222211222221212112212121212221212211112122111121", "221121112", "222221122111122112111111111112111", "122211112111121212222211211212111111121122112", "121122122121111112", "121221112121222122222121222222121", "2111111221211221", "1221122222111222111112221111222", "21211211111222122211", "111211111121111212221122122112111", "121", "212221112111121111122", "11212111122121122221122221", "221121211211212122121222211221122121", "111211", "12121111212122112121111211121222211211122", "1", "221112211122211121121211", "11211212212221111212121112221121221211221", "121121121111121111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> likelihoods = {"12221212111111212212221221211111212212121221211222", "211122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> likelihoods = {"12212211211211", "112111222121112211221122122121", "1211122112111222112221", "111221222111212112122221111222222111111", "222122112121122221111", "112112211122112211112222222", "222212", "22121", "221211211221122121111211112122", "22211111212212", "2212121112222221121212111221", "21122122222", "121122221211121221222111212111112211122121", "112111112111121112112", "1222122211122121122122111", "111112122111112211122111121", "221212112121222112221", "2211121121", "122221211211121221112211111121212221122", "2112211212221122112221111121221111111212", "12212122121112121122111", "1221112212222112111212211222222222", "221222221221112222122212212122111212221112", "12211111211211", "222212122221212122112221211122211212", "221212", "1112221211222212212111", "1112212122222212221211221122211", "221111111112211212121121112221122222212112121", "22222111212222211122222121", "1121211121222211211112111121212221112212222222", "2211", "112222211111211122121212111211111222222211222", "212222121221222112122122221", "1211122222122212111", "2211112111122222211122112122212"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> likelihoods = {"212121121211121222112222212222111211112121222112", "1211", "12211111122212221112221122122121122221122", "2122221121121121222211121222211122111221", "1121212221111212121122", "212211221221112222222222121121212", "211122212111211222221222", "212121122221112212211121122221212121122221121122", "22211121111122122222211121211221121211212112", "21121222211212221122121122", "112222221112", "21221111121121121211212222112111211212212", "112111111211112121211211111122112112221", "22111221222221122", "21211121221212111121221121121122122222122221122111", "11212111211112112212212221111211212122121221111211", "121212211221222211221112212111112", "22112", "222", "11122222111112222121111111122122222222112212", "1121212211211111221121212212222211111", "222112221222122221112222212111212112", "212111212221111222122222122112", "2121112222121221222212", "111221122111221", "21222121111111221121222222212212112", "11212122121122221221111212221112121", "2112221112222122211211212211111221222111121", "21221211", "121111222122122122122111212222122", "122222", "21", "12122211121", "21", "211112221112121212111211221122122112112111", "1122122212122222221212122112222222211222221", "11211211112121121122221112222222222221", "122111112121211222211122221211211222", "21", "2211112122212212112122111221211221122122121122", "1221211112212212122111111", "111211112121221212221221111", "22222121122112112121111222212122221211122", "111111222212111121221221222222122212122221221111", "122121222221221112221212122121122112", "22111211222212221", "11111121212122", "2112121222222221211122122222122121212112", "11112212212111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> likelihoods = {"12112111212222122212211221121222121", "12121121112221112222112", "21222112221112211112221", "2221122221212212221212211212111211111122221211", "1212221111122122221111221122221221111212", "222222221222112", "2122212222122222111211221", "2111211111221121122121112112112222221211211", "2111121211111112212221112112121222212222112", "222212122112121111222211121221121", "2122112221212222222111", "222212221", "1221111222122222121111112111221211122121", "2112221211112122212122", "211122212122", "2221222111212", "111212211221211222111", "21222212111111111111222211212212", "2211211111212122222", "11212", "12222212222211221122", "2112212222222211211222211221222122221", "21221112211221122212221212111121", "22112221221221222111122", "11122222222211222122122211112", "1121111112", "2112111222212111121112222222121211112212121212221", "21111112111222211112221221111221121222", "11211212212112212112121222112", "21121121121212121211222122", "21121111211112121111", "22121111221112211211122211222221222121", "22122211211212212222111112122222222212211222", "122222121221121121222221122221222222111", "122111212221112112221111211112222222121221211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> likelihoods = {"122221121112", "112211222111222122121211", "2112122122211122112212", "122211221111112", "111212222222222221211122211221122112", "1112221121211112222111", "121221112111221121121221211221212122222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> likelihoods = {"22211111212222122212122222121112211", "1211111112212", "212212222111122111212", "11222121", "21212222211122", "211221222112211122", "12111122221221111212122221221121122121", "211121221211112112112", "22122212112212211211211222111211", "1112221122121", "111221", "112222222112222212122122111212", "12222122221212112112121121111", "2111122121212221222112121121112122", "111221212212222122212211112222", "212211111122112111212212212211222112122", "2112121221211121122212122", "1222122", "22222111122112122222212222222211211", "222222211", "121222122212111111222112", "211122211212211121212111112121211221111122112121", "121", "12222222221212112111", "121111212122112111112222122121121211", "22122211121122221212221", "22111", "11111111121221211211222112111211111222211112", "222211221211", "2211211212111212111222122221211122111222121212221", "1122222221112", "2", "111222221121211122122", "12221122221221122111122112", "11211122121221121122212212112211212112122112212111", "221", "212122221111112221", "111122122121121222121211211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> likelihoods = {"122111112221222222222", "1", "22111", "1122", "122222121122211211222122212221111112212", "2112112121221121221112211122212122", "212211122222121111122221211211112211212212221222", "122221221122121121112121111221", "1211222122122221222222121112111211112121", "21222212111212", "21222111112221211222121121121121", "12121222222211222122212222211222112211222221221121", "21222222212121112", "2112122222", "222122112121212111111222221211211211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> likelihoods = {"121121222221121112121", "12212222121221212221212111222211211112", "211112212122212222211112221122122212111", "1112221112121212122211"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> likelihoods = {"1221111222212122121221222112211222222212221221121", "11111212211211221121112121121212121211", "111122112212", "12222122111112121111122211221122111221", "2221111112122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> likelihoods = {"2212", "22112122122112112212121122212121", "22221112", "221112", "21221121122221222122121212111", "122212121221111211111111", "21122121212122211211", "21121211221122212212211112122221112111112112222211", "111221212", "2222112112121122221221111122112212221212122111211", "11111112112111221221221121211222211212", "11221111211121112111", "2112112121122221111111211212122111211", "22111222122211211112211", "121221121112211222221111211122", "1222121222211111112221222222111111111211112211122", "112212221", "211111212111112112122122112121", "2211", "1112212", "1211112122121221222112111", "122222122212122112212211222211121", "2222122122212222111", "1112211222222111", "2112", "21112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> likelihoods = {"11112222111121", "1211221212121", "112111222", "11122222222111", "112121222", "1212122211112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> likelihoods = {"11122211222111111112121", "11122211222111111112121", "11122211222111111112121", "11122211222111111112121", "11122211222111111112121", "11122211222111111112121", "11122211222111111112121", "11122211222111111112121", "11122211222111111112121", "11122211222111111112121"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> likelihoods = {"2222", "1211221212121", "112111222", "11122222222111", "112121222", "1212122211112"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> likelihoods = {"122222", "1111222222222222222222222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> likelihoods = {"1122222", "122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> likelihoods = {"111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> likelihoods = {"11112221111", "11221111", "122211111"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> likelihoods = {"11112", "11122"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> likelihoods = {"1"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> likelihoods = {"2222", "2222", "2222"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> likelihoods = {"12", "22"};
    Elections* pObj = new Elections();
    clock_t start = clock();
    int result = pObj->visit(likelihoods);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=11787671&rd=7226&pm=4496
********************************************************************************
#include <vector> 
#include <string> 
#include <map> 
#include <algorithm> 
using namespace std; 
 
#define FORI(X)  for (i = 0; i < X.size(); i++) 
#define FORJ(X)  for (int j = 0; j < X.size(); j++) 
#define RFORI(X)  for (i = X.size() - 1; i >= 0; i--) 
 
class Elections 
{ 
  public: 
  int visit(vector <string> lk) 
  { 
    int ret = 0; 
    int i, ct; 
    double best = 99; 
 
    FORI(lk) { 
      ct = 0; 
      FORJ(lk[i]) 
        if (lk[i][j] == '1') 
          ct++; 
      if (best - (double)ct / lk[i].size() >= 1e-9) { 
        ret = i; 
        best = (double)ct / lk[i].size(); 
      } 
    } 
 
    return ret; 
  } 
}; 
 
 
// Powered by FileEdit
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/