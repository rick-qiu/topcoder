/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8025
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class WeighingScale {
public:
    vector<int> count(vector<string> measures, int A, int B);
};

vector<int> WeighingScale::count(vector<string> measures, int A, int B) {
    vector<int> ret;
    return ret;
}


int test0() {
    vector<string> measures = {"?+????", "-?+???", "?-????", "????+?", "???-?+", "????-?"};
    int A = 1;
    int B = 4;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 4, 1};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> measures = {"?+?????", "-?+????", "?-?????", "????+??", "???-?+?", "????-??", "???????"};
    int A = 0;
    int B = 3;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {10, 0, 0};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> measures = {"?+?????", "-?+????", "?-?????", "????+??", "???-?+?", "????-??", "???????"};
    int A = 1;
    int B = 4;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 4, 1};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> measures = {"??+?", "???+", "-???", "?-??"};
    int A = 0;
    int B = 1;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0, 0};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> measures = {"??+??", "???+?", "-???=", "?-???", "??=??"};
    int A = 0;
    int B = 1;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 0, 0};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> measures = {"?+???++?????++", "-??=?=???????=", "??????????=???", "?=??+?==??????", "???-???-???-??", "-=????????????", "-??=???=?-+???", "???=+?=???????", "??????????????", "??????+???????", "??=???-????-??", "????+?????+???", "-?????????????", "-=????????????"};
    int A = 6;
    int B = 2;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 10, 36};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> measures = {};
    int A = 22;
    int B = 36;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> measures = {"?=+=+++++=+=+=+++=+=+=+++=+=++=+++=+=++++++++++++=", "=?+=+++++=+=+=+++=+=+=+++=+=++=+++=+=++++++++++++=", "--?--===--=---==--=---=-=-=-==---=-=---=-==-==-==-", "==+?+++++=+=+=+++=+=+=+++=+=++=+++=+=++++++++++++=", "--+-?+++=-+-=-++=-+-=-+=+-+-++-==+-+-==+=++=++=++-", "--=--?==--=---==--=---=-=-=-==---=-=---=-==-==-==-", "--=--=?=--=---==--=---=-=-=-==---=-=---=-==-==-==-", "--=--==?--=---==--=---=-=-=-==---=-=---=-==-==-==-", "--+-=+++?-+-=-++=-+-=-+=+-+-++-==+-+-==+=++=++=++-", "==+=+++++?+=+=+++=+=+=+++=+=++=+++=+=++++++++++++=", "--=--===--?---==--=---=-=-=-==---=-=---=-==-==-==-", "==+=+++++=+?+=+++=+=+=+++=+=++=+++=+=++++++++++++=", "--+-=+++=-+-?-++=-+-=-+=+-+-++-==+-+-==+=++=++=++-", "==+=+++++=+=+?+++=+=+=+++=+=++=+++=+=++++++++++++=", "--=--===--=---?=--=---=-=-=-==---=-=---=-==-==-==-", "--=--===--=---=?--=---=-=-=-==---=-=---=-==-==-==-", "--+-=+++=-+-=-++?-+-=-+=+-+-++-==+-+-==+=++=++=++-", "==+=+++++=+=+=+++?+=+=+++=+=++=+++=+=++++++++++++=", "--=--===--=---==--?---=-=-=-==---=-=---=-==-==-==-", "==+=+++++=+=+=+++=+?+=+++=+=++=+++=+=++++++++++++=", "--+-=+++=-+-=-++=-+-?-+=+-+-++-==+-+-==+=++=++=++-", "==+=+++++=+=+=+++=+=+?+++=+=++=+++=+=++++++++++++=", "--=--===--=---==--=---?-=-=-==---=-=---=-==-==-==-", "--+-=+++=-+-=-++=-+-=-+?+-+-++-==+-+-==+=++=++=++-", "--=--===--=---==--=---=-?-=-==---=-=---=-==-==-==-", "==+=+++++=+=+=+++=+=+=+++?+=++=+++=+=++++++++++++=", "--=--===--=---==--=---=-=-?-==---=-=---=-==-==-==-", "==+=+++++=+=+=+++=+=+=+++=+?++=+++=+=++++++++++++=", "--=--===--=---==--=---=-=-=-?=---=-=---=-==-==-==-", "--=--===--=---==--=---=-=-=-=?---=-=---=-==-==-==-", "==+=+++++=+=+=+++=+=+=+++=+=++?+++=+=++++++++++++=", "--+-=+++=-+-=-++=-+-=-+=+-+-++-?=+-+-==+=++=++=++-", "--+-=+++=-+-=-++=-+-=-+=+-+-++-=?+-+-==+=++=++=++-", "--=--===--=---==--=---=-=-=-==---?-=---=-==-==-==-", "==+=+++++=+=+=+++=+=+=+++=+=++=+++?+=++++++++++++=", "--=--===--=---==--=---=-=-=-==---=-?---=-==-==-==-", "==+=+++++=+=+=+++=+=+=+++=+=++=+++=+?++++++++++++=", "--+-=+++=-+-=-++=-+-=-+=+-+-++-==+-+-?=+=++=++=++-", "--+-=+++=-+-=-++=-+-=-+=+-+-++-==+-+-=?+=++=++=++-", "--=--===--=---==--=---=-=-=-==---=-=---?-==-==-==-", "--+-=+++=-+-=-++=-+-=-+=+-+-++-==+-+-==+?++=++=++-", "--=--===--=---==--=---=-=-=-==---=-=---=-?=-==-==-", "--=--===--=---==--=---=-=-=-==---=-=---=-=?-==-==-", "--+-=+++=-+-=-++=-+-=-+=+-+-++-==+-+-==+=++?++=++-", "--=--===--=---==--=---=-=-=-==---=-=---=-==-?=-==-", "--=--===--=---==--=---=-=-=-==---=-=---=-==-=?-==-", "--+-=+++=-+-=-++=-+-=-+=+-+-++-==+-+-==+=++=++?++-", "--=--===--=---==--=---=-=-=-==---=-=---=-==-==-?=-", "--=--===--=---==--=---=-=-=-==---=-=---=-==-==-=?-", "==+=+++++=+=+=+++=+=+=+++=+=++=+++=+=++++++++++++?"};
    int A = 44;
    int B = 17;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {483, 372, 273};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> measures = {};
    int A = 40;
    int B = 46;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {441, 372, 315};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> measures = {};
    int A = 0;
    int B = 25;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 576, 0};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> measures = {};
    int A = 0;
    int B = 1;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 253, 0};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> measures = {"?=????????????????????????????????????????????????", "=?=???????????????????????????????????????????????", "?=?=??????????????????????????????????????????????", "??=?=?????????????????????????????????????????????", "???=?=????????????????????????????????????????????", "????=?=???????????????????????????????????????????", "?????=?=??????????????????????????????????????????", "??????=?=?????????????????????????????????????????", "???????=?=????????????????????????????????????????", "????????=?=???????????????????????????????????????", "?????????=?=??????????????????????????????????????", "??????????=?=?????????????????????????????????????", "???????????=?=????????????????????????????????????", "????????????=?=???????????????????????????????????", "?????????????=?=??????????????????????????????????", "??????????????=?=?????????????????????????????????", "???????????????=?=????????????????????????????????", "????????????????=?=???????????????????????????????", "?????????????????=?=??????????????????????????????", "??????????????????=?=?????????????????????????????", "???????????????????=?=????????????????????????????", "????????????????????=?=???????????????????????????", "?????????????????????=?=??????????????????????????", "??????????????????????=?=?????????????????????????", "???????????????????????=?=????????????????????????", "????????????????????????=?=???????????????????????", "?????????????????????????=?=??????????????????????", "??????????????????????????=?=?????????????????????", "???????????????????????????=?=????????????????????", "????????????????????????????=?=???????????????????", "?????????????????????????????=?=??????????????????", "??????????????????????????????=?=?????????????????", "???????????????????????????????=?=????????????????", "????????????????????????????????=?=???????????????", "?????????????????????????????????=?=??????????????", "??????????????????????????????????=?=?????????????", "???????????????????????????????????=?=????????????", "????????????????????????????????????=?=???????????", "?????????????????????????????????????=?=??????????", "??????????????????????????????????????=?=?????????", "???????????????????????????????????????=?=????????", "????????????????????????????????????????=?=???????", "?????????????????????????????????????????=?=??????", "??????????????????????????????????????????=?=?????", "???????????????????????????????????????????=?=????", "????????????????????????????????????????????=?=???", "?????????????????????????????????????????????=?=??", "??????????????????????????????????????????????=?=?", "???????????????????????????????????????????????=?=", "????????????????????????????????????????????????=?"};
    int A = 49;
    int B = 0;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1128, 0};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> measures = {};
    int A = 9;
    int B = 0;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1128, 0, 0};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> measures = {};
    int A = 37;
    int B = 18;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {47, 1081, 0};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> measures = {};
    int A = 37;
    int B = 49;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 1128};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> measures = {};
    int A = 17;
    int B = 46;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {105, 225, 752};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> measures = {};
    int A = 14;
    int B = 26;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {441, 36, 6};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> measures = {};
    int A = 15;
    int B = 37;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 47};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> measures = {"??+??=+??=?-??+-", "??+?????????????", "--?---=??-??-=??", "??+??=?-??-?????", "??+??=+???-???+?", "=?+==??-????????", "-?=?-????????==?", "???+?+??+?==??+?", "???????-??-?????", "=?+?????????=???", "???++??=+????+??", "+??????=????+???", "??+??????=?-????", "??=???=???-????-", "-???-?=-????????", "+????????????+??"};
    int A = 3;
    int B = 7;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {61, 15, 3};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> measures = {};
    int A = 22;
    int B = 10;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {10, 60, 264};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> measures = {};
    int A = 28;
    int B = 16;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {174, 108, 69};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> measures = {"?+????=????+?????", "-????????????????", "??????-?=????????", "???????????=?+???", "???????-???????=?", "????????=????????", "=?+??????????+???", "????+????????+?+?", "??=??=?????-=???-", "?????????????????", "????????????????=", "-??=????+????????", "????????=????????", "???-??--?????????", "?????????????????", "????=??-?????????", "????????+?=??????"};
    int A = 13;
    int B = 7;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14, 0, 9};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> measures = {};
    int A = 32;
    int B = 45;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {627, 132, 66};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> measures = {};
    int A = 38;
    int B = 7;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {185, 186, 234};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> measures = {"???????????????+????+?????", "????=????????????????????+", "??????=???????????????????", "???????????????=?????????=", "?=???????????????????+????", "??????????????+????+??????", "??=?????????+?+???????????", "?????????-????+?-?????????", "??????????=-??????????????", "???????+??????????????????", "????????=?????=???????????", "????????+?????????-???????", "??????-?????????-?????????", "??????????????????????????", "?????---??=?????-?????????", "-??=??????????????????????", "???????+????+?+??=??+?????", "????????????????=??+??????", "???????????+??????????????", "?????-???????????-?????-??", "-???????????????-?????????", "????-?????????????????????", "??????????????????????????", "???????????????????+??????", "??????????????????????????", "?-?=??????????????????????"};
    int A = 22;
    int B = 8;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 42};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> measures = {};
    int A = 9;
    int B = 10;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {70, 50, 45};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> measures = {"?+++?=??", "-??=---=", "-????--?", "-=??-?-=", "?+?+?=?+", "=++?=??+", "?+++???+", "?=?=---?"};
    int A = 2;
    int B = 7;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 14};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> measures = {"??????=?????????????????????=", "?????-???????+???????=??-????", "???????????????????-?????????", "??????=??????????+????=????+?", "?????-?????????????-?-???????", "?+??+???+???????+????+?????+?", "=??=????????????????-????????", "??????????????????????????+??", "?????-?????????=???????=?-???", "??????????+=???+????????=??+?", "?????????-?????+????????-???=", "?????????=???????????????????", "?????????????+??+?????=??????", "?-??????????-?????????-??????", "???????????????+?+??????=????", "????????=--???-??=??????????-", "?????-??????-????=????-??????", "???-??????????-==????????????", "?????????????????????????????", "??+?+????????????????+???+???", "??????+??????????????????+???", "?=??+-?????????????-??????+??", "???=????????=+??+????????????", "????????=????????????????????", "?+???????=+???=??????????????", "????????+??????????--???????=", "???????-?????????????-?????=?", "???-?-???-????????????????=??", "=?????????=????+?????????=???"};
    int A = 26;
    int B = 0;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {28, 72, 206};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> measures = {};
    int A = 29;
    int B = 5;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {144, 0, 78};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> measures = {};
    int A = 20;
    int B = 11;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {50, 46, 45};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> measures = {};
    int A = 15;
    int B = 26;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {297, 28, 0};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> measures = {};
    int A = 12;
    int B = 24;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {45, 110, 186};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> measures = {"?-=?????", "+???????", "=??=-=--", "??=?-?--", "??++????", "??=?????", "??++???=", "??++??=?"};
    int A = 5;
    int B = 6;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 3, 2};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> measures = {};
    int A = 17;
    int B = 27;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {55, 75, 143};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> measures = {};
    int A = 13;
    int B = 8;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {45, 63, 85};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> measures = {};
    int A = 29;
    int B = 23;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {319, 72, 15};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> measures = {};
    int A = 27;
    int B = 7;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {448, 119, 136};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> measures = {};
    int A = 19;
    int B = 18;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0, 1};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> measures = {"???????????????", "??=????????-???", "?=??????????=??", "????????=??????", "???????+???????", "??????-????????", "?????+??????+??", "????-??????????", "???=???????????", "???????????????", "????????????+??", "?+?????????????", "??=???-???-????", "???????????????", "???????????????"};
    int A = 9;
    int B = 12;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> measures = {};
    int A = 8;
    int B = 17;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0, 2};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> measures = {"???????", "???=+?-", "???????", "?=?????", "?-???=?", "????=??", "?+?????"};
    int A = 5;
    int B = 2;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 2};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> measures = {};
    int A = 4;
    int B = 37;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 36, 510};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> measures = {};
    int A = 0;
    int B = 4;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> measures = {"????????", "????-???", "????????", "????????", "?+??????", "????????", "????????", "????????"};
    int A = 2;
    int B = 4;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> measures = {};
    int A = 8;
    int B = 43;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {571, 120, 45};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> measures = {"????????=??", "????????=??", "??????????-", "???????????", "??????????-", "???????????", "???????????", "????????+??", "==?????-???", "???????????", "??+?+??????"};
    int A = 0;
    int B = 8;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 2};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> measures = {};
    int A = 15;
    int B = 8;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> measures = {};
    int A = 25;
    int B = 17;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> measures = {};
    int A = 11;
    int B = 27;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {18, 1, 0};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> measures = {"????+?", "??????", "??????", "??????", "-?????", "??????"};
    int A = 3;
    int B = 0;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> measures = {};
    int A = 15;
    int B = 14;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> measures = {};
    int A = 18;
    int B = 14;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> measures = {"???=????????", "?????????-??", "??????????=?", "=???-?=?????", "???+?+??+???", "????-??-????", "???=????????", "?????+????+?", "????-????-??", "?+??????+???", "??=????-???-", "??????????+?"};
    int A = 11;
    int B = 7;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {18, 0, 0};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> measures = {"??????=????=?", "???-???????=?", "?????????????", "?+?????=?????", "????????-?-??", "??????+??????", "=????-???????", "???=?????????", "????+??????+?", "?????????????", "????+????????", "==??????-????", "?????????????"};
    int A = 2;
    int B = 3;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> measures = {"???????????????+", "??????=????????+", "???????????????+", "????????=???????", "????????????????", "??????????=--???", "?=??????????????", "????????????????", "???=??????????-?", "????????????????", "?????=??????????", "?????+??????????", "?????+??????????", "????????????????", "????????+???????", "---?????????????"};
    int A = 3;
    int B = 12;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 0, 0};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> measures = {"?+???++?????++", "-??=?=???????=", "??????????=???", "?=??+?==??????", "???-???-???-??", "-=????????????", "-??=???=?-+???", "???=+?=???????", "??????????????", "??????+???????", "??=???-????-??", "????+?????+???", "-?????????????", "-=????????????"};
    int A = 3;
    int B = 9;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {45, 5, 0};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> measures = {};
    int A = 22;
    int B = 1;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> measures = {"???-?", "??--?", "?+?=?", "++=?=", "???=?"};
    int A = 0;
    int B = 3;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 1};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> measures = {};
    int A = 30;
    int B = 29;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {256, 96, 120};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> measures = {};
    int A = 16;
    int B = 33;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> measures = {};
    int A = 36;
    int B = 41;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {45, 130, 582};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> measures = {};
    int A = 23;
    int B = 31;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {216, 324, 476};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> measures = {};
    int A = 7;
    int B = 9;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 369};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> measures = {};
    int A = 40;
    int B = 23;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 120, 875};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> measures = {};
    int A = 42;
    int B = 23;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {360, 330, 345};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> measures = {};
    int A = 19;
    int B = 17;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {329, 374, 425};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> measures = {};
    int A = 34;
    int B = 5;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {153, 306, 633};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> measures = {};
    int A = 3;
    int B = 15;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {737, 238, 136};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> measures = {};
    int A = 28;
    int B = 12;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {120, 272, 477};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> measures = {};
    int A = 26;
    int B = 28;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {66, 0, 190};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> measures = {};
    int A = 4;
    int B = 11;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {153, 0, 315};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> measures = {};
    int A = 1;
    int B = 20;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1008, 120, 0};
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> measures = {};
    int A = 1;
    int B = 7;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {231, 308, 589};
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> measures = {};
    int A = 12;
    int B = 5;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {666, 240, 190};
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> measures = {};
    int A = 33;
    int B = 41;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 723};
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> measures = {"???????????????????????=??+?=???+?????????????????", "????????+???????-?????????=???=?????????????+?=???", "????????+=???????+=??????=????+?????????????+?????", "???????????????+???????-??????????????????????????", "????????????????????????????????=??-??=???????????", "?????????????==?????????????????-???-??==??-??????", "?????????????????+?????????????+??????????????+???", "????????????????????????????????++???????+??+???=?", "?--????????????????-????-?-??-?=??????????-??????=", "??=?????????=??????????????+???+?+????????????+???", "????????????-?+????????????????+???????+??????????", "????????????????-?????????????????=???????????????", "?????????=+??????+=??????????????++??+????????????", "?????=?????????=?????-?????????????????????-??????", "?????=????-????????-??????????????????????????-???", "???-?????????=??????-???????????????-????-????????", "?+?????????+?????????=+?????=?????????????????????", "??-???-?????-????????-????????-???=???????--??????", "??=?????????=???????????=????????+?=????????++?+??", "????????+?????+?????+?????????????????+???????+???", "???????????????+???-??????=?????????=?=????=?+????", "?????????????+??=+???????????????????+?????+??????", "????????????????-???????????????????????=?????????", "=??+????????????????????????=???????+???????????=?", "????????+?????????=??????=????????+????????+?????+", "??=?????????????????????=??????????=?????+??+?????", "-=??????+???????????=??????????????????+??????????", "?????????-??????????????????????????????+?-???????", "=???????????????=??????=??????????????????????????", "????????+??????????????????????????=??????????+?=?", "?=-??????????????+?????????????????????????????+??", "??????-?=--???????????????????????????????????????", "-???=+?-????????????????????????????????????????-?", "???????-?-??-?????-??????????????????????????=????", "???????????=-????=??????-???????????-???????=?-?-?", "????+?????????????=??????=???=????????????????+???", "?????+?????????+????=??-??????????+???????????????", "????????????-????????-????????????????=?+=?=??????", "????=??????????????-=????????????????=????????=???", "?????=????-???????????????-??????????????--???????", "?????=????????????????=????-?????????-???????=-???", "???????-???????+?????????-???????????=?+??-???????", "????????+????????+?????????+???????????+?+??+?????", "?????+???????+???+??=-??-????????????=????????=+??", "?--????-??????????-??????-????????=???????-???????", "??????????????????-?-????????????=??????=????????=", "?=????-??-????+????-?????????-????+-??=?+??=??????", "??????????????????-???????????-????????????-??????", "???????=???????????????=?????=??+?+???????????????", "????????=???????????????-????????????????????=????"};
    int A = 47;
    int B = 20;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {120, 224, 784};
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> measures = {};
    int A = 20;
    int B = 35;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {328, 210, 207};
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> measures = {};
    int A = 7;
    int B = 31;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0, 0};
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> measures = {};
    int A = 46;
    int B = 23;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 15, 596};
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> measures = {};
    int A = 8;
    int B = 21;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1037, 78, 0};
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> measures = {"?+???++?????++", "-??=?=???????=", "??????????=???", "?=??+?==??????", "???-???-???-??", "-=????????????", "-??=???=?-+???", "???=+?=???????", "??????????????", "??????+???????", "??=???-????-??", "????+?????+???", "-?????????????", "-=????????????"};
    int A = 6;
    int B = 2;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 10, 36};
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> measures = {"?+???++?????++", "-??=?=???????=", "??????????=???", "?=??+?==??????", "???-???-???-??", "-=????????????", "-??=???=?-+???", "???=+?=???????", "??????????????", "??????+???????", "??=???-????-??", "????+?????+???", "-?????????????", "-=????????????"};
    int A = 7;
    int B = 3;
    WeighingScale* pObj = new WeighingScale();
    clock_t start = clock();
    vector<int> result = pObj->count(measures, A, B);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {18, 12, 11};
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=19929536&rd=10773&pm=8025
********************************************************************************
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <fstream> 
#include <iostream> 
#include <sstream> 
#include <vector> 
#include <string> 
#include <algorithm> 
#include <queue> 
using namespace std; 
 
#define Min(a,b) ((a)>(b)?(b):(a)) 
#define Max(a,b) ((a)>(b)?(a):(b)) 
#define prr make_pair 
 
//typedef __int64 ll; 
 
class WeighingScale 
{  
  public: 
  int n,m; 
  vector<string> map; 
  int l[60], r[60]; 
  bool adjust() 
  { 
    int i,j; 
    for (;;) 
    { 
      int bakl[60], bakr[60]; 
      memcpy(bakl,l,sizeof(l)); 
      memcpy(bakr,r,sizeof(r)); 
      for (i=0; i<n; i++) 
        for (j=0; j<n; j++) 
          if (map[i][j]=='=') 
          { 
            l[i] = l[j] = Max(l[i],l[j]); 
            r[i] = r[j] = Min(r[i],r[j]); 
          } 
          else if (map[i][j]=='+') 
          { 
            l[i] = Max(l[i], l[j]+10); 
            r[j] = Min(r[j], r[i]-10); 
          } else if (map[i][j]=='-') 
          { 
            swap(i,j); 
            l[i] = Max(l[i], l[j]+10); 
            r[j] = Min(r[j], r[i]-10); 
            swap(i,j); 
          } 
      for (i=0; i<n; i++) 
        if (l[i]>r[i]) return false; 
      bool okay = true; 
      for (i=0; i<n; i++) 
        if (l[i]!=bakl[i]||r[i]!=bakr[i]) 
        { 
          okay = false; 
          break; 
        } 
      if (okay) return true; 
    } 
  } 
    int OPT[60][60], COUNT; 
    int TYPE[60][60]; 
  void put(int a, int b, int t) 
  { 
    if (TYPE[a][b]!=0&&TYPE[a][b]!=t+1) 
    { 
      TYPE[a][b] = -1; 
      return; 
    } 
    TYPE[a][b] = t+1; 
    OPT[a][b]++; 
  } 
  vector <int> count(vector <string> _map, int A, int B)  
  { 
    int i,j,k,u; 
    map = _map; 
    n = map.size(); 
     
    for (i=0; i<n; i++) 
      l[i]=10, r[i] = 30; 
    adjust(); 
 
    int bakl[60], bakr[60]; 
    memcpy(bakl,l,sizeof(l)); 
    memcpy(bakr,r,sizeof(r)); 
 
    COUNT = 0; 
    memset(TYPE,0,sizeof(TYPE)); 
    memset(OPT,0,sizeof(OPT)); 
    for (i=bakl[A]; i<=bakr[A]; i+=10) 
    { 
      l[A] = r[A] = i; 
      if (adjust()) 
      { 
        int bakl2[60], bakr2[60]; 
        memcpy(bakl2,l,sizeof(l)); 
        memcpy(bakr2,r,sizeof(r)); 
        for (j=bakl2[B]; j<=bakr2[B]; j+=10) 
        { 
          l[B] = r[B] = j; 
          if (adjust()) 
          { 
            COUNT++; 
            for (k=0; k<n; k++) if (k!=A&&k!=B) 
              for (u=k+1; u<n; u++) if (u!=A&&u!=B) 
              { 
                if (l[k]+l[u]>l[A]+l[B]) 
                  put(k,u,2); 
                if (l[k]==r[k]&&l[u]==r[u]&&l[k]+l[u]==l[A]+l[B]) 
                  put(k,u,1); 
                if (r[k]+r[u]<l[A]+l[B]) 
                  put(k,u,0); 
              } 
          } 
          memcpy(l,bakl2,sizeof(l)); 
          memcpy(r,bakr2,sizeof(r)); 
        } 
      } 
      memcpy(l,bakl,sizeof(l)); 
      memcpy(r,bakr,sizeof(r)); 
    } 
 
    vector<int> ans; 
    ans.push_back(0); 
    ans.push_back(0); 
    ans.push_back(0); 
    for (i=0; i<n; i++) 
      for (j=i+1; j<n; j++) 
        if (TYPE[i][j]!=0&&TYPE[i][j]!=-1&&OPT[i][j]==COUNT) 
          ans[TYPE[i][j]-1]++; 
    return ans; 
  } 
   
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/