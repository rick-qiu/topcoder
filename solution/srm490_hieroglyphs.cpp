/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11230
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Hieroglyphs {
public:
    int minimumVisible(vector<string> hier1, vector<string> hier2);
};

int Hieroglyphs::minimumVisible(vector<string> hier1, vector<string> hier2) {
    int ret;
    return ret;
}


int test0() {
    vector<string> hier1 = {"0 0 10 0,10 0 10 3"};
    vector<string> hier2 = {"0 1 10 1", "5 1 5 4"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> hier1 = {"1 1 1 5"};
    vector<string> hier2 = {"3 2 5 2"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> hier1 = {"0 2 6 2"};
    vector<string> hier2 = {"5 1 6 1,8 1 9 1"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> hier1 = {"10 20 10 30,15 20 15 30", "10 20 15 20,0 30 30 30"};
    vector<string> hier2 = {"0 5 0 15,5 5 5 25", "0 5 5 5,0 15 5 15"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 65;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> hier1 = {"10 10 10 20,10 30 10 40", "10 10 20 10"};
    vector<string> hier2 = {"10 0 10 20,10 27 10 35", "10 0 20 0"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> hier1 = {"4 3 6 3,3 2 5 2,0 1 0 2"};
    vector<string> hier2 = {"3 0 3 3,0 9 3 9,3 9 10 9"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> hier1 = {"10 3 20 3,14 15 20 15,6 16 7 16"};
    vector<string> hier2 = {"15 16 15 19,5 8 5 12,0 19 19 19"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> hier1 = {"17 7 18 7,6 0 12 0,21 7 30 7"};
    vector<string> hier2 = {"14 13 19 13,1 25 27 25,0 5 23 5"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> hier1 = {"34 4 34 14,16 30 27 30,8 26 19 26"};
    vector<string> hier2 = {"15 3 15 9,11 25 27 25,11 12 11 39"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 70;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> hier1 = {"50 22 50 38,39 9 39 23,4 44 21 44"};
    vector<string> hier2 = {"20 26 20 36,5 1 34 1,24 6 39 6"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 84;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> hier1 = {"35 7 35 32,41 52 44 52,30 19 30 29"};
    vector<string> hier2 = {"8 18 8 55,45 25 45 29,11 46 38 46"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> hier1 = {"47 36 47 67,40 60 56 60,5 0 15 0"};
    vector<string> hier2 = {"26 31 30 31,9 11 62 11,35 2 67 2"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 130;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> hier1 = {"9 0 9 2,7 0 7 8,3 10 9 10,2 0 2 2,7 8 7 9,0 6 7 6", "0 4 0 6,7 4 9 4,2 5 2 8,6 2 6 6,8 0 8 10,0 6 0 9", "0 5 7 5,9 6 9 10,5 2 5 8,6 1 6 2,2 7 7 7,5 0 5 2", "2 1 6 1,1 2 8 2,2 3 2 5,4 0 7 0,0 3 7 3,4 2 4 10", "5 9 6 9,1 4 1 5,7 5 9 5,2 2 2 3,3 0 4 0,2 4 7 4", "3 7 3 10,1 2 1 4,6 0 6 1,0 1 2 1,3 0 3 6,2 8 2 10", "7 0 8 0,0 9 2 9,0 2 1 2,0 0 3 0,6 6 6 8,0 0 0 4", "7 3 10 3,7 6 8 6,3 6 3 7,9 5 9 6,10 2 10 7,4 9 5 9", "10 7 10 8,1 1 1 2"};
    vector<string> hier2 = {"0 10 9 10,3 7 3 10,4 4 4 5,4 5 4 7,4 1 4 4,3 7 9 7", "8 0 10 0,1 1 9 1,6 0 6 9,10 4 10 5,2 6 3 6,7 3 7 5", "9 1 10 1,3 5 3 6,0 5 5 5,9 6 9 10,10 0 10 3", "9 7 10 7,8 5 8 9,10 8 10 10,3 3 7 3,0 3 3 3", "4 7 4 8,2 2 6 2,1 8 1 10,7 8 7 10,1 3 1 5,1 6 2 6", "6 6 10 6,9 2 9 3,6 2 8 2,9 0 9 2,2 9 7 9,4 0 8 0", "1 2 2 2,1 1 1 3,0 6 1 6,3 4 3 5,1 7 2 7,2 6 2 8", "8 3 9 3,5 4 5 6,2 4 2 6,0 9 2 9,0 8 7 8,0 7 0 9", "2 1 2 4,7 7 7 8,0 1 1 1,8 1 8 5"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 195;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> hier1 = {"0 7 1 7,6 13 13 13,3 14 3 19,6 6 8 6,17 8 17 14", "15 3 15 18,13 7 16 7,13 13 17 13,2 20 15 20", "5 1 5 5,4 15 13 15,11 12 20 12,3 12 3 14", "5 5 5 10,6 14 12 14,13 0 13 9,19 0 19 11,0 8 12 8", "9 10 9 13,10 16 18 16,18 13 18 17,4 13 6 13", "7 2 7 20,11 4 13 4,20 10 20 12,6 0 20 0,14 1 14 5", "9 3 17 3,0 13 3 13,13 18 13 19,2 14 6 14,17 4 17 8", "7 9 8 9,4 18 17 18,5 18 5 20,16 0 16 3,6 2 6 20", "2 4 8 4,12 2 14 2,5 0 6 0,3 8 3 12,0 9 7 9", "11 2 11 10,19 11 19 15,0 0 0 3,2 15 4 15,15 5 20 5", "9 10 13 10,0 11 7 11,12 14 20 14"};
    vector<string> hier2 = {"4 2 4 20,19 15 19 16,2 2 2 6,12 1 12 12,9 1 9 20", "2 13 17 13,6 10 7 10,15 8 15 9,1 16 1 17,0 13 0 16", "1 10 1 16,6 0 8 0,9 12 18 12,5 3 8 3,16 11 16 12", "1 9 11 9,1 2 1 10,6 2 6 18,4 0 4 2,1 4 14 4", "5 11 20 11,2 8 16 8,10 3 10 16,0 8 1 8,6 17 17 17", "12 5 17 5,8 19 13 19,2 0 2 2,0 5 2 5,5 19 5 20", "12 17 12 20,3 17 6 17,13 14 13 19,0 3 0 13", "11 15 11 19,1 11 5 11,16 9 20 9,7 10 16 10", "2 9 2 17,15 15 18 15,2 17 2 20,13 2 13 14,8 4 8 5", "7 4 7 15,14 19 20 19,3 2 3 3,1 8 2 8,17 4 17 5", "14 10 14 18,5 2 5 11"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 482;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> hier1 = {"10 10 10 24,19 22 26 22,3 14 13 14,21 16 21 28", "10 2 10 10,10 1 10 2,29 8 29 23,5 16 21 16", "7 24 28 24,1 16 5 16,21 8 21 16,18 16 18 20", "2 3 2 14,11 4 18 4,3 8 15 8,24 25 25 25", "4 25 24 25,1 8 3 8,24 12 24 13,28 7 28 9,29 3 29 8", "5 23 29 23,23 7 23 28,25 10 25 29,18 10 18 16", "15 10 15 24,14 17 14 26,5 0 5 18,0 9 1 9", "11 9 11 25,27 14 27 18,15 4 15 10,3 11 3 24", "2 14 2 30,10 27 22 27,17 7 17 10,0 19 0 24", "24 23 24 27,3 3 3 7,24 5 27 5,5 11 29 11", "12 19 21 19,22 20 22 25,6 20 17 20,18 5 18 10", "2 17 5 17,26 15 26 21,13 21 13 23,8 6 15 6", "12 19 12 23"};
    vector<string> hier2 = {"10 18 30 18,0 13 13 13,5 1 5 22,22 23 28 23", "4 19 18 19,3 5 22 5,8 30 17 30,16 26 19 26", "24 3 24 28,11 8 11 27,7 15 7 21,10 7 23 7", "23 2 23 27,3 1 3 20,14 6 14 16,4 20 11 20,9 4 9 26", "2 5 3 5,15 3 15 24,3 21 23 21,16 29 18 29", "18 13 18 23,28 4 28 25,17 4 17 16,4 10 4 25", "2 29 16 29,13 17 13 29,22 5 23 5,12 6 12 19", "0 23 14 23,1 20 4 20,1 4 1 24,3 9 11 9,4 22 10 22", "22 30 28 30,10 23 10 26,12 4 12 6,5 17 11 17", "18 0 25 0,8 4 9 4,1 1 1 2,22 4 22 18,13 2 13 6", "2 23 2 24,6 20 6 23,30 0 30 14,7 1 18 1,18 0 18 1", "27 6 27 22,23 1 29 1"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 790;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> hier1 = {"31 23 31 31,30 30 31 30,5 28 5 35,11 19 39 19", "27 21 27 25,17 14 17 31,1 13 34 13,22 10 22 34", "20 28 20 37,5 1 14 1,20 3 20 24,11 12 22 12", "32 4 32 34,25 4 32 4,5 35 5 36,38 4 38 22", "7 3 19 3,15 25 29 25,26 14 26 29,8 29 8 31", "14 35 18 35,13 25 15 25,9 26 36 26,12 37 13 37", "5 23 22 23,22 23 26 23,25 9 25 10,40 9 40 20", "26 10 26 14,5 11 5 13,33 30 33 40,40 24 40 31", "1 35 14 35,12 36 27 36,27 4 27 17,3 2 12 2", "26 8 26 10,18 10 18 22,17 5 32 5,1 14 37 14", "40 20 40 24,36 20 36 24,13 30 30 30,18 35 31 35", "16 1 16 33,19 20 19 25,33 24 33 30,34 14 34 40", "22 5 22 10,5 2 5 7"};
    vector<string> hier2 = {"3 3 3 29,30 37 36 37,9 11 9 31,9 0 9 11", "5 8 5 12,16 12 26 12,12 4 12 20,17 11 17 15", "19 26 19 37,2 1 2 12,4 14 4 35,27 33 27 39", "21 14 21 25,14 37 30 37,1 35 27 35,33 14 33 25", "18 30 20 30,2 12 2 40,17 21 37 21,15 28 39 28", "38 32 38 34,8 10 8 33,10 8 10 12,12 15 36 15", "33 40 35 40,0 28 6 28,19 27 40 27,14 5 22 5", "32 20 32 34,7 3 7 14,14 8 22 8,4 36 33 36", "28 2 28 26,10 28 10 40,13 9 20 9,10 6 10 7", "11 16 11 37,20 8 20 14,15 19 40 19,3 39 29 39", "13 28 15 28,14 13 14 27,15 24 23 24,26 26 26 38", "15 38 30 38,4 3 4 14,4 1 5 1,0 21 17 21,31 4 31 5", "16 25 16 37"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 1054;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> hier1 = {"10 10 43 10,30 30 48 30,23 42 23 48,3 5 4 5", "0 45 33 45,45 26 48 26,11 12 11 14,4 3 4 50", "41 9 41 28,44 33 44 40,36 38 43 38,13 30 20 30", "10 13 45 13,7 7 42 7,19 21 19 32,43 17 43 43", "21 3 21 42,6 18 46 18,4 12 11 12,16 49 34 49", "37 36 37 44,38 8 38 50,19 2 44 2,23 19 33 19", "10 43 12 43,13 40 29 40,20 29 20 46,30 0 30 8", "6 9 30 9,8 17 37 17,47 8 47 19,45 39 45 45", "21 30 29 30,23 28 35 28,8 29 8 45,4 25 42 25", "21 21 35 21,16 9 16 32,13 32 13 40,14 19 14 42", "36 37 36 46,22 28 23 28,25 9 25 43,33 23 33 30", "12 31 24 31,5 15 5 21,1 36 3 36,9 5 9 22", "40 20 40 21,33 32 33 36"};
    vector<string> hier2 = {"17 18 17 43,22 22 34 22,18 42 28 42,21 14 49 14", "27 33 34 33,39 19 42 19,16 4 16 50,17 19 27 19", "14 30 23 30,14 27 44 27,42 36 42 49,1 15 29 15", "11 10 30 10,34 31 48 31,5 8 13 8,36 23 36 48", "15 37 40 37,13 21 15 21,16 41 27 41,2 47 22 47", "33 28 38 28,20 31 23 31,49 23 49 33,13 25 35 25", "10 11 10 35,2 0 2 4,40 0 40 23,14 23 17 23", "21 37 21 40,46 1 47 1,44 11 44 19,3 3 35 3", "8 4 38 4,13 12 28 12,39 28 39 40,26 0 26 46", "6 0 6 48,35 33 35 44,9 35 9 48,10 44 10 50", "25 21 25 37,10 43 10 44,26 40 35 40,22 47 32 47", "3 30 14 30,19 18 22 18,0 27 0 32,42 13 42 31", "7 45 33 45,16 38 27 38"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 1334;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> hier1 = {"1 0 1 13,9 23 46 23,55 8 59 8,9 13 9 17", "6 6 6 56,6 39 11 39,54 41 54 48,7 16 39 16", "23 32 23 56,13 20 48 20,2 42 2 55,30 5 30 11", "27 16 27 41,11 22 39 22,6 34 18 34,23 2 37 2", "2 53 47 53,44 40 45 40,3 26 3 41,12 31 33 31", "56 43 60 43,18 7 56 7,3 6 3 26,15 17 15 49", "28 1 45 1,0 21 0 36,1 13 1 33,45 1 54 1,5 51 16 51", "12 2 12 13,43 52 46 52,6 59 15 59,22 0 22 36", "28 32 47 32,11 46 56 46,55 10 55 20,9 31 12 31", "0 17 28 17,4 22 11 22,1 49 56 49,6 5 51 5", "50 41 58 41,37 29 37 36,32 36 32 49,27 5 27 16", "35 25 35 32,9 57 40 57,22 59 26 59,48 20 51 20", "9 5 9 13"};
    vector<string> hier2 = {"3 13 16 13,0 53 44 53,23 15 51 15,29 34 56 34", "4 24 54 24,59 29 59 36,8 37 42 37,10 17 10 22", "1 17 1 37,48 1 48 42,21 35 27 35,5 56 5 57", "35 21 35 33,43 24 43 51,12 54 52 54,18 3 18 21", "15 14 35 14,10 15 10 17,30 46 49 46,5 41 5 48", "53 7 53 17,44 48 44 60,24 49 43 49,34 1 34 43", "10 40 32 40,14 60 59 60,54 24 60 24,3 44 3 58", "9 0 49 0,16 10 38 10,49 29 49 55,9 10 16 10", "24 56 42 56,22 13 48 13,25 8 60 8,31 7 31 21", "0 6 20 6,49 5 49 29,4 30 37 30,16 28 32 28", "28 58 46 58,1 42 45 42,44 53 52 53,21 3 27 3", "44 15 44 26,30 20 30 53,7 31 27 31,2 26 23 26", "32 40 59 40,12 33 17 33"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 1695;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> hier1 = {"12 13 12 53,46 20 46 61,2 20 11 20,6 4 61 4", "11 16 11 68,43 6 43 34,29 34 67 34,65 37 65 60", "41 17 41 38,49 25 64 25,18 51 19 51,44 3 44 65", "31 51 40 51,14 13 28 13,32 32 32 48,5 5 5 42", "0 6 60 6,54 47 54 64,0 18 4 18,14 14 32 14", "20 43 20 52,21 42 69 42,26 10 26 38,10 18 10 24", "7 27 34 27,44 62 70 62,32 26 32 32,9 10 70 10", "30 61 55 61,50 8 56 8,34 27 54 27,28 8 28 25", "1 10 9 10,7 42 7 50,55 37 64 37,23 28 23 44", "50 50 50 51,31 60 44 60,2 49 36 49,5 3 5 5", "67 24 67 56,8 30 8 64,32 14 32 26,31 35 31 69", "34 0 34 22,20 1 51 1,69 15 69 21,69 43 69 47", "34 70 45 70,70 10 70 68"};
    vector<string> hier2 = {"66 49 66 52,51 1 51 58,2 8 32 8,13 10 67 10", "7 31 45 31,16 8 16 63,44 5 51 5,14 25 14 46", "11 52 42 52,55 32 63 32,14 6 27 6,32 8 33 8", "38 48 38 59,51 64 53 64,8 30 8 61,35 10 35 63", "22 46 64 46,19 65 45 65,29 17 47 17,59 49 59 50", "46 55 61 55,11 30 11 52,20 43 59 43,31 20 31 56", "9 52 11 52,7 14 7 56,52 16 60 16,36 41 36 60", "26 16 48 16,3 63 26 63,58 21 58 55,18 53 37 53", "13 15 33 15,14 62 60 62,38 40 60 40,63 16 63 37", "19 12 19 14,37 24 37 43,64 51 64 58,22 33 33 33", "5 66 68 66,20 12 47 12,43 7 43 47,8 4 8 16", "21 29 21 40,18 44 18 55,28 56 60 56,15 49 15 61", "31 45 57 45,54 42 54 47"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> hier1 = {"40 37 40 74,11 1 71 1,24 43 70 43,53 11 75 11", "2 61 68 61,39 9 50 9,23 65 52 65,75 61 75 71", "57 11 57 76,75 23 75 61,50 0 69 0,71 1 80 1", "28 67 56 67,77 60 77 71,43 18 75 18,31 41 31 74", "10 39 65 39,35 41 35 64,46 21 53 21,64 8 64 19", "49 66 63 66,69 48 69 51,56 60 67 60,27 31 27 32", "43 9 43 53,19 27 53 27,6 69 48 69,54 4 54 46", "24 70 24 74,44 38 46 38,51 3 51 28,31 74 68 74", "27 9 27 31,4 37 30 37,35 6 35 41,22 80 32 80", "42 2 80 2,22 31 39 31,22 59 22 67,31 11 50 11", "26 40 49 40,50 53 50 58,25 10 25 31,39 47 67 47", "19 54 65 54,9 3 72 3,10 13 47 13,11 21 11 58", "53 22 53 67,55 37 55 40,65 39 80 39,52 4 52 16", "9 31 9 39,15 62 53 62,61 55 61 67,63 64 68 64", "68 32 77 32,7 48 7 67,28 3 28 26,1 74 31 74", "40 1 40 16,37 30 49 30,23 17 54 17,28 60 28 75", "66 9 66 63,11 65 11 77,35 14 60 14,52 53 52 59", "13 8 25 8,3 65 23 65,6 68 20 68,29 18 43 18", "53 62 57 62,39 36 66 36,18 42 69 42,9 17 9 31", "74 44 74 45,23 33 38 33,17 18 17 52,31 22 31 31", "45 29 50 29,23 40 26 40,12 7 12 59,10 67 28 67", "64 78 75 78,58 8 60 8,36 41 43 41,48 5 48 26", "27 25 44 25,34 70 66 70,5 52 5 60,19 56 72 56", "69 0 79 0,40 0 50 0,47 25 60 25,29 60 29 75", "45 3 45 29,13 33 17 33,18 23 70 23,29 44 55 44", "38 22 38 24,49 19 49 79,0 25 0 40,3 4 3 26", "0 3 0 25,0 41 27 41,15 50 15 52,51 28 51 39", "16 18 16 35,22 12 22 48,20 14 35 14,1 7 1 14", "48 66 49 66,64 25 64 49,21 32 21 60,7 33 7 34", "2 3 2 25,2 2 2 3,54 21 65 21,13 37 13 49", "9 35 58 35,4 61 4 72,39 75 56 75,34 25 34 36", "38 71 45 71,9 50 80 50,41 31 41 80,7 55 35 55", "49 19 57 19,49 16 49 19,23 29 31 29,16 19 18 19", "38 59 41 59,20 10 20 47,2 39 2 56,19 57 34 57", "18 66 18 67,0 28 69 28,72 61 72 74,52 65 72 65", "11 51 13 51,4 1 4 39,61 15 69 15,2 75 39 75", "7 14 20 14,70 7 70 9,71 19 71 42,28 43 28 48", "64 20 64 25,7 29 7 33,68 28 68 52,22 48 22 58", "45 68 51 68,10 19 16 19,46 76 69 76,35 6 50 6", "26 36 39 36,8 51 11 51,29 63 39 63,70 43 75 43", "12 40 22 40,50 64 50 66,56 13 63 13,54 2 54 4", "0 40 0 41,54 46 54 79,58 78 64 78,24 49 50 49", "14 4 22 4,7 41 7 48,20 46 54 46,32 80 65 80", "62 55 62 75,32 20 32 55,20 47 20 57,30 13 30 23", "13 32 17 32,11 18 29 18,30 40 30 47,6 2 6 11", "7 8 13 8,49 6 49 16,35 53 80 53,26 59 38 59", "34 77 61 77,13 23 18 23,10 59 20 59,45 34 68 34", "5 5 5 7,25 31 25 36,18 45 18 66,43 41 55 41", "69 33 69 48,9 72 64 72,11 22 65 22,13 2 40 2", "36 18 36 19,3 23 8 23,35 76 35 77,2 33 2 39"};
    vector<string> hier2 = {"17 8 17 26,41 25 41 41,29 33 29 54,30 63 33 63", "58 9 70 9,33 45 33 73,75 15 75 49,4 62 6 62", "47 13 47 65,44 3 44 65,78 12 78 60,31 31 31 74", "3 46 34 46,51 73 74 73,17 33 17 41,18 64 18 76", "31 56 49 56,6 4 74 4,42 13 50 13,73 52 73 62", "45 43 45 46,13 14 51 14,67 7 67 26,67 35 78 35", "59 43 59 77,45 80 68 80,5 46 5 62,23 13 23 65", "39 43 75 43,11 7 11 21,51 49 64 49,1 44 3 44", "34 16 34 59,17 48 66 48,17 26 17 29,38 59 57 59", "46 27 46 80,49 51 75 51,42 50 80 50,51 57 57 57", "18 34 18 64,42 78 52 78,66 7 66 8,6 40 64 40", "6 70 8 70,7 33 49 33,63 57 63 64,5 62 5 63", "51 14 72 14,23 7 23 13,51 64 51 79,11 56 12 56", "64 45 80 45,42 8 42 21,44 57 51 57,63 32 63 45", "56 49 56 80,63 45 63 57,0 4 0 73,57 2 57 80", "3 16 3 74,25 26 79 26,65 38 78 38,49 4 49 15", "49 56 59 56,12 49 40 49,18 44 58 44,60 21 60 38", "63 20 63 32,1 41 34 41,14 6 34 6,16 21 65 21", "70 16 70 53,13 58 78 58,42 21 42 77,27 13 42 13", "34 46 54 46,53 32 53 49,21 16 21 49,41 50 41 80", "28 31 28 57,38 17 38 39,26 16 26 31,78 68 78 69", "7 32 18 32,40 61 54 61,13 26 24 26,72 62 80 62", "11 10 17 10,5 23 23 23,18 16 18 34,52 17 79 17", "40 28 80 28,34 47 58 47,13 52 63 52,54 30 79 30", "2 9 58 9,14 55 14 60,27 64 38 64,29 9 29 26", "62 58 62 60,1 0 1 69,29 34 51 34,14 66 35 66", "77 29 77 53,20 0 22 0,54 28 54 43,69 16 80 16", "19 43 19 73,45 31 46 31,17 39 18 39,55 29 55 74", "19 22 47 22,61 12 63 12,4 36 4 40,77 53 77 56", "3 8 62 8,19 43 39 43,6 15 39 15,24 73 38 73", "6 55 34 55,36 18 56 18,55 6 55 29,12 74 74 74", "71 13 71 76,56 18 73 18,15 14 15 78,27 54 27 62", "27 62 27 70,29 16 67 16,9 60 21 60,27 13 27 53", "22 42 65 42,61 18 61 70,40 8 40 55,41 22 41 25", "68 15 68 67,0 72 70 72,35 6 35 9,64 70 77 70", "29 53 66 53,32 25 77 25,18 65 69 65,8 24 24 24", "8 14 13 14,5 29 61 29,54 11 54 28,24 31 27 31", "16 11 16 37,73 26 73 38,53 64 69 64,70 1 70 16", "0 41 1 41,47 10 48 10,75 51 79 51,16 37 16 76", "8 17 8 50,30 37 30 54,52 46 52 71,74 74 78 74", "17 29 17 33,44 65 44 78,33 17 33 45,11 25 11 69", "1 46 3 46,76 67 76 70,40 55 40 65,28 38 48 38", "54 5 57 5,12 69 62 69,59 56 73 56,27 11 27 13", "2 69 2 72,39 15 64 15,43 12 59 12,75 49 75 79", "49 19 54 19,70 54 70 63,14 51 14 52,14 38 14 51", "48 0 48 20,31 25 31 31,3 13 20 13,18 76 56 76", "24 5 24 52,48 39 59 39,14 50 42 50,62 7 62 23", "34 55 61 55,6 39 7 39,6 28 40 28,43 68 72 68", "61 3 61 18,74 5 74 67,20 37 20 38,30 29 30 37", "31 18 31 25,2 66 6 66,70 46 77 46,16 71 63 71"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6784;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> hier1 = {"29 9 29 10,39 7 39 40,19 74 76 74,30 17 30 26", "2 2 2 31,24 69 36 69,61 16 65 16,32 71 32 80", "17 16 17 34,48 23 48 55,10 13 10 50,28 20 47 20", "63 49 63 68,9 0 12 0,8 27 8 53,59 4 59 28", "6 25 70 25,28 16 28 65,25 67 25 77,3 47 3 56", "73 65 73 68,14 66 14 69,61 25 61 78,39 48 68 48", "52 12 52 16,36 30 42 30,45 56 45 79,65 16 69 16", "52 72 63 72,17 42 19 42,52 7 52 12,69 40 75 40", "48 3 68 3,9 31 33 31,4 48 4 56,56 1 56 4", "76 0 76 23,69 41 69 65,27 66 27 80,70 3 70 27", "53 50 74 50,7 45 7 70,70 27 70 31,3 15 55 15", "7 0 7 39,6 10 78 10,23 14 64 14,75 7 75 44", "7 77 48 77,42 23 42 59,5 57 74 57,31 19 31 59", "22 51 22 77,66 38 77 38,42 1 45 1,51 55 51 61", "19 49 19 70,8 51 38 51,17 6 37 6,3 49 36 49", "37 57 37 64,26 2 26 44,3 37 41 37,45 20 45 56", "20 64 72 64,77 40 77 78,43 42 46 42,2 3 3 3", "7 70 72 70,5 11 5 17,11 37 11 65,79 58 79 77", "80 42 80 63,16 58 16 62,10 50 10 59,29 63 37 63", "13 22 13 63,25 23 25 63,53 7 53 21,43 32 43 35", "36 19 36 72,23 41 76 41,0 52 44 52,42 29 56 29", "17 44 17 69,63 37 63 49,18 19 18 73,40 2 76 2", "48 51 59 51,38 58 38 78,0 48 0 52,39 32 76 32", "26 16 61 16,26 72 52 72,22 18 54 18,54 18 75 18", "12 0 70 0,1 36 79 36,4 68 37 68,41 37 53 37", "16 9 16 58,3 36 3 40,7 21 13 21,37 69 56 69", "17 78 71 78,3 45 70 45,56 69 72 69,9 1 34 1", "18 2 18 18,66 23 66 27,79 24 79 29,7 67 12 67", "65 37 65 69,42 59 42 67,32 5 32 39,57 34 57 47", "62 39 62 58,51 62 79 62,64 20 66 20,21 28 21 44", "57 29 70 29,72 70 75 70,39 22 60 22,19 42 43 42", "0 54 63 54,63 51 69 51,22 77 22 79,43 14 43 32", "3 18 3 36,38 33 44 33,71 47 71 62,58 59 58 63", "11 3 11 18,6 28 23 28,38 14 38 41,15 54 15 56", "16 8 16 9,68 3 68 26,11 39 13 39,61 18 61 25", "71 34 71 47,8 59 76 59,17 16 20 16,76 23 76 55", "5 77 7 77,1 26 2 26,13 17 71 17,20 8 52 8", "51 21 53 21,56 15 56 26,25 0 25 23,14 45 14 58", "14 18 22 18,52 8 59 8,4 6 17 6,1 55 8 55,12 9 13 9", "5 31 9 31,31 59 31 68,23 54 23 75,16 34 35 34", "63 3 63 4,8 11 39 11,11 18 14 18,43 52 43 71", "34 7 34 32,48 55 48 60,37 2 37 49,58 53 73 53", "3 33 7 33,72 61 72 72,54 48 54 66,14 5 14 45", "5 14 23 14,73 28 73 54,34 5 47 5,71 0 71 34", "24 46 77 46,77 31 77 40,24 47 46 47,72 64 76 64", "68 47 68 59,6 75 10 75,68 3 73 3,23 26 23 35", "24 18 24 39,23 33 38 33,67 50 67 61,49 33 49 80", "6 24 6 29,33 68 33 76,13 21 51 21,55 39 55 75", "36 69 37 69,0 18 11 18,44 48 44 78,29 10 29 75", "24 61 26 61,74 36 74 47,56 4 63 4,21 22 21 25"};
    vector<string> hier2 = {"78 33 78 47,21 23 79 23,52 3 52 23,53 75 66 75", "18 36 58 36,11 41 11 47,15 41 15 54,7 67 25 67", "24 54 24 58,23 21 73 21,64 31 64 51,17 17 69 17", "1 60 1 67,55 79 66 79,37 39 64 39,58 50 58 56", "40 15 40 27,29 20 29 32,36 1 36 7,16 17 17 17", "42 48 69 48,20 9 20 40,2 21 2 43,34 73 53 73", "24 43 24 54,69 17 70 17,6 29 20 29,36 30 69 30", "59 52 59 72,49 8 63 8,11 73 34 73,8 14 19 14", "52 55 52 69,42 6 53 6,61 70 61 79,14 14 14 31", "58 32 74 32,65 31 65 71,35 33 75 33,3 12 3 28", "57 28 57 40,8 68 78 68,23 10 23 67,60 13 60 27", "10 46 10 48,28 72 28 77,14 70 34 70,10 10 68 10", "77 1 77 4,39 50 39 76,14 0 44 0,36 14 41 14", "61 54 61 60,48 18 48 61,63 65 63 73,54 29 54 42", "27 63 37 63,55 11 57 11,71 65 72 65,1 63 16 63", "16 6 36 6,18 24 66 24,34 37 34 72,59 26 59 37", "31 11 41 11,1 39 16 39,5 53 66 53,77 23 77 37", "15 75 34 75,31 36 31 40,41 11 47 11,70 26 70 43", "25 72 44 72,59 58 72 58,32 63 32 73,80 13 80 49", "34 72 34 79,4 53 4 74,16 18 16 49,6 59 6 69", "5 26 25 26,10 20 10 46,51 38 51 76,42 29 42 70", "47 5 77 5,14 31 14 73,44 59 44 69,33 5 47 5", "73 14 73 28,49 17 49 21,35 65 52 65,61 32 61 54", "0 33 35 33,6 20 6 41,78 49 78 70,30 8 30 66", "43 7 43 9,54 65 55 65,31 19 45 19,7 57 8 57", "74 6 74 7,9 78 32 78,36 6 42 6,34 13 45 13", "5 43 54 43,8 41 8 61,25 71 54 71,19 5 33 5", "33 24 33 76,68 49 69 49,52 23 52 30,40 49 40 55", "8 10 10 10,46 49 58 49,15 17 16 17,6 20 50 20", "69 13 69 17,10 44 53 44,50 27 77 27,34 30 34 37", "44 20 44 48,66 20 66 41,40 29 40 49,21 32 21 40", "75 77 78 77,38 63 38 78,49 19 60 19,42 70 42 71", "18 48 42 48,2 43 2 61,31 7 70 7,67 61 67 72", "5 17 5 36,57 40 57 56,26 37 26 78,4 28 4 53", "17 36 17 80,3 4 44 4,60 12 60 13,2 11 31 11", "44 1 70 1,67 41 67 61,7 59 38 59,2 15 68 15", "14 5 19 5,66 44 66 66,76 36 76 80,8 7 8 35", "20 29 65 29,34 32 51 32,10 77 59 77,15 76 56 76", "14 56 22 56,45 5 45 46,64 57 71 57,9 62 55 62", "78 12 78 33,42 14 42 29,23 2 39 2,12 66 30 66", "70 43 70 52,18 4 18 54,44 48 44 59,3 62 9 62", "53 73 76 73,38 59 59 59,30 66 30 79,11 17 15 17", "10 14 10 20,20 40 20 48,19 7 19 37,13 72 23 72", "74 17 74 33,69 1 69 13,78 3 78 12,28 33 28 49", "5 54 16 54,20 79 38 79,65 26 65 31,75 8 75 46", "32 65 35 65,38 56 54 56,50 2 50 16,5 29 6 29", "79 50 79 63,35 47 72 47,33 4 33 24,28 16 63 16", "41 49 41 51,76 7 76 36,64 29 64 31,23 6 23 10", "9 24 15 24,2 0 2 3,41 3 41 28,68 11 68 28", "16 0 16 14,48 61 48 69,75 49 75 73,44 9 44 20"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6531;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> hier1 = {"44 20 59 20,47 9 47 21,67 53 67 63,41 55 41 65", "15 52 62 52,24 10 29 10,66 57 75 57,39 28 51 28", "62 31 62 65,41 59 78 59,26 48 43 48,6 79 27 79", "64 45 64 77,40 42 76 42,36 44 36 66,60 14 60 76", "4 2 59 2,18 25 34 25,12 19 79 19,0 77 33 77", "71 38 71 71,18 10 18 52,57 3 57 64,33 77 41 77", "37 57 66 57,57 79 69 79,27 79 57 79,5 22 5 53", "46 41 63 41,50 13 69 13,38 40 63 40,61 11 70 11", "51 5 51 60,38 78 71 78,44 31 44 35,65 7 65 51", "32 14 41 14,2 12 2 73,54 76 64 76,37 34 37 39", "16 19 16 46,19 31 46 31,15 80 20 80,22 62 22 70", "11 27 42 27,72 28 80 28,7 59 30 59,42 13 50 13", "3 68 51 68,5 39 47 39,46 17 46 38,13 66 17 66", "9 28 39 28,42 39 42 73,60 69 69 69,30 3 69 3", "32 23 32 61,4 21 17 21,23 51 45 51,24 17 24 66", "7 14 7 21,52 18 60 18,0 16 29 16,3 40 38 40", "28 10 28 44,23 35 23 45,54 5 70 5,27 0 27 44", "9 14 16 14,58 0 58 16,56 21 78 21,77 1 79 1", "20 60 20 79,41 65 41 77,64 5 64 31,7 20 44 20", "74 46 76 46,0 62 58 62,74 7 74 53,54 68 76 68", "37 6 59 6,6 26 34 26,9 4 79 4,33 7 78 7", "38 24 53 24,1 68 3 68,42 22 69 22,0 3 30 3", "18 52 18 59,0 68 1 68,70 5 72 5,34 42 34 80", "34 5 34 8,52 72 57 72,50 23 50 27,55 11 55 36", "23 28 23 35,29 39 29 71,11 64 75 64,72 46 72 48", "5 55 12 55,62 18 62 31,3 37 4 37,59 2 68 2", "9 22 9 48,76 51 76 54,75 39 75 49,30 22 30 23", "1 50 1 56,8 29 8 47,78 27 78 59,55 7 55 11", "1 35 41 35,34 25 49 25,5 14 9 14,64 41 64 44", "66 37 67 37,15 30 27 30,31 14 32 14,5 33 60 33", "50 60 52 60,76 12 76 15,49 35 49 43,3 57 37 57", "72 38 72 46,71 71 71 72,50 12 50 23,12 43 19 43", "49 20 49 35,42 0 42 11,3 54 68 54,25 25 25 50", "33 59 33 65,57 9 72 9,51 75 69 75,56 10 56 53", "10 78 38 78,34 72 52 72,9 31 19 31,59 43 70 43", "36 75 51 75,41 35 71 35,13 80 15 80,41 5 54 5", "63 41 70 41,9 71 78 71,25 22 25 25,27 29 79 29", "69 3 74 3,30 56 46 56,43 14 43 28,32 17 44 17", "53 28 53 75,41 45 76 45,46 31 64 31,43 7 43 14", "59 22 59 75,51 56 70 56,12 7 12 51,11 51 15 51", "28 76 54 76,17 6 37 6,20 60 50 60,21 12 67 12", "79 7 79 69,45 38 45 53,59 4 59 22,32 47 51 47", "25 14 31 14,37 10 37 34,2 58 36 58,35 50 55 50", "7 17 32 17,20 48 26 48,57 64 57 76,9 30 15 30", "9 18 9 22,30 33 30 49,11 60 20 60,20 26 20 27", "61 9 61 30,68 64 68 65,72 17 72 22,69 22 72 22", "30 49 30 70,49 0 49 20,52 34 67 34,0 71 9 71", "19 61 46 61,43 48 49 48,75 12 75 39,1 69 11 69", "73 0 73 59,10 1 10 60,32 9 32 19,9 53 33 53", "38 1 71 1,50 10 50 12,27 55 40 55,41 39 41 40"};
    vector<string> hier2 = {"41 35 41 43,54 12 54 44,57 10 57 51,34 22 51 22", "35 29 39 29,6 79 73 79,12 10 12 37,40 27 40 65", "56 63 72 63,48 67 65 67,15 44 32 44,3 54 74 54", "20 4 72 4,28 26 32 26,7 21 7 80,36 11 46 11", "41 18 75 18,7 2 20 2,51 59 54 59,61 30 80 30", "6 7 6 31,19 46 42 46,67 67 71 67,23 0 23 13", "47 53 52 53,6 31 6 59,66 8 66 63,44 2 59 2", "56 58 56 73,24 62 53 62,40 5 40 27,14 72 25 72", "19 51 20 51,47 32 47 60,20 2 44 2,32 35 35 35", "46 26 46 51,59 22 59 56,55 16 55 19,55 48 55 71", "70 50 70 71,7 22 34 22,56 17 56 53,41 9 41 35", "58 53 58 67,19 14 19 76,51 22 74 22,77 45 79 45", "15 36 15 54,66 63 66 66,43 52 51 52,31 30 55 30", "1 7 62 7,13 34 32 34,60 20 73 20,34 69 56 69", "5 3 5 67,25 75 53 75,74 10 74 37,35 9 58 9", "39 31 39 64,20 57 72 57,55 30 60 30,22 34 22 38", "79 17 79 37,57 61 57 71,25 16 25 58,19 43 64 43", "3 69 3 70,19 63 38 63,48 17 48 19,20 1 20 8", "0 9 0 39,10 5 69 5,1 38 10 38,15 65 53 65", "12 0 12 10,2 69 34 69,1 9 8 9,6 5 6 7,15 59 51 59", "65 33 65 76,58 17 68 17,46 34 78 34,44 4 44 79", "46 27 59 27,66 2 75 2,34 74 77 74,2 11 36 11", "56 69 69 69,27 27 46 27,5 32 6 32,29 67 29 73", "0 51 0 79,8 10 8 71,60 28 60 41,58 32 58 48", "32 63 32 67,43 44 43 49,8 65 15 65,13 24 27 24", "46 51 46 59,40 34 46 34,15 51 19 51,2 9 2 74", "75 14 75 75,10 35 32 35,24 47 32 47,2 53 16 53", "0 2 7 2,59 10 59 22,4 40 64 40,51 74 51 77", "27 1 49 1,65 73 80 73,71 19 74 19,34 41 34 74", "47 46 73 46,63 21 72 21,6 59 6 75,73 56 73 69", "13 14 77 14,62 0 62 31,14 36 14 71,22 39 49 39", "73 79 78 79,41 0 41 9,73 14 73 17,46 0 46 26", "57 51 57 61,48 28 59 28,73 8 73 14,14 63 19 63", "64 30 64 71,30 24 46 24,15 56 75 56,42 31 54 31", "38 63 56 63,16 28 16 31,64 8 64 30,4 31 4 77", "50 9 50 31,1 19 31 19,2 61 9 61,20 50 20 78", "46 24 79 24,44 79 44 80,66 25 69 25,71 17 76 17", "1 29 28 29,54 51 74 51,26 24 26 28,26 34 26 36", "65 6 65 33,27 65 27 76,68 26 77 26,57 36 63 36", "15 47 19 47,36 26 56 26,4 12 30 12,9 63 9 71", "46 60 46 65,67 8 67 56,8 63 14 63,17 39 22 39", "22 3 22 34,68 28 68 73,3 33 16 33,7 76 36 76", "39 15 39 31,11 6 11 51,38 70 51 70,31 67 37 67", "7 39 17 39,10 57 20 57,52 27 52 28,20 42 20 48", "49 39 62 39,56 53 56 54,59 27 73 27,36 36 36 42", "65 6 71 6,2 27 27 27,45 12 45 46,10 8 24 8", "4 17 4 29,42 70 42 80,69 46 69 64,17 80 29 80", "31 3 31 78,56 31 73 31,23 47 24 47,3 34 13 34", "58 8 58 28,5 52 42 52,35 26 36 26,32 35 32 43", "62 7 75 7,46 75 46 76,76 24 76 60,35 0 35 32"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6781;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> hier1 = {"15 17 15 35,35 40 35 69,68 15 73 15,10 19 10 55", "18 18 18 43,12 8 12 77,0 39 8 39,21 10 21 76", "4 2 4 16,58 66 69 66,11 2 11 18,69 7 71 7", "22 26 67 26,26 52 26 62,3 58 12 58,9 70 48 70", "74 26 76 26,32 39 32 79,3 29 78 29,3 28 79 28", "45 35 79 35,6 78 63 78,6 65 79 65,17 4 28 4", "78 62 78 79,37 0 37 72,17 62 60 62,36 57 62 57", "19 11 19 23,43 66 43 71,10 66 53 66,53 55 64 55", "10 4 10 19,29 23 29 76,64 26 64 29,49 11 49 56", "0 45 54 45,43 13 47 13,46 34 46 43,2 30 72 30", "17 30 17 36,17 0 18 0,52 5 52 71,20 10 20 56", "3 22 3 23,18 46 24 46,67 15 67 69,69 27 69 57", "59 12 78 12,49 62 49 75,75 34 75 41,7 51 44 51", "74 67 74 74,21 57 36 57,16 17 16 24,0 55 0 77", "24 18 73 18,71 7 71 8,46 19 46 34,4 53 5 53", "60 51 79 51,39 51 39 64,1 38 1 65,12 42 40 42", "19 19 67 19,20 75 57 75,46 43 46 46,57 64 64 64", "67 69 67 70,15 23 72 23,26 26 26 52,20 56 20 69", "56 9 56 13,34 2 34 78,27 12 27 14,36 8 36 10", "41 47 41 61,72 42 72 75,18 34 52 34,9 38 44 38", "59 18 59 56,38 5 38 56,15 12 29 12,43 37 76 37", "10 3 10 4,0 59 4 59,77 1 77 43,69 14 69 18", "2 42 12 42,57 4 57 14,6 7 6 48,15 7 16 7", "33 24 42 24,55 56 55 65,55 76 63 76,0 27 19 27", "70 12 70 25,0 17 3 17,75 52 75 74,19 59 46 59", "71 20 71 39,46 17 46 19,54 4 66 4,9 71 21 71", "44 60 70 60,32 33 47 33,73 31 73 45,26 11 47 11", "28 74 29 74,29 79 63 79,3 11 3 22,0 20 38 20", "53 4 53 66,2 61 2 62,36 13 43 13,53 33 63 33", "80 59 80 68,78 52 78 56,5 13 29 13,54 31 54 72", "30 10 30 14,77 43 77 61,69 20 76 20,64 10 64 26", "18 56 20 56,68 49 68 59,29 54 36 54,19 32 70 32", "14 47 24 47,71 62 71 75,47 77 69 77,12 46 18 46", "60 62 70 62,48 71 74 71,7 0 8 0,1 24 33 24", "52 80 54 80,44 41 44 50,3 14 72 14,61 35 61 47", "41 17 50 17,35 5 35 40,45 67 52 67,7 17 7 33", "50 17 50 75,2 21 55 21,19 18 24 18,7 71 9 71", "16 26 16 70,21 69 26 69,65 8 65 42,26 43 76 43", "51 2 76 2,7 34 18 34,2 6 2 26,76 3 76 76", "41 6 41 14,10 11 26 11,72 30 79 30,33 5 33 40", "10 76 37 76,12 60 35 60,62 55 62 57,20 10 51 10", "60 19 60 64,54 72 54 73,6 51 7 51,8 30 8 53", "0 48 0 55,32 14 32 39,31 4 46 4,21 26 22 26", "31 47 36 47,67 19 80 19,26 68 35 68,17 57 21 57", "1 3 3 3,15 26 21 26,6 9 75 9,19 1 19 11", "17 31 44 31,43 80 52 80,41 20 69 20,18 1 34 1", "8 68 8 69,39 76 39 80,18 43 18 58,74 71 80 71", "22 24 22 64,55 4 55 56,57 27 63 27,43 35 43 40", "67 26 74 26,51 72 56 72,31 35 36 35,3 49 62 49", "79 15 79 46,61 21 61 35,8 22 8 30,24 75 24 80"};
    vector<string> hier2 = {"57 68 63 68,76 47 76 58,3 3 37 3,11 57 38 57", "9 44 9 65,21 14 21 19,72 2 72 63,25 7 66 7", "25 51 29 51,44 4 53 4,3 25 14 25,11 2 26 2", "30 19 48 19,34 26 40 26,42 7 42 18,44 19 44 25", "12 40 31 40,65 15 65 25,63 17 63 27,43 37 71 37", "64 38 64 64,34 73 56 73,62 24 66 24,76 6 76 43", "39 5 39 40,23 23 49 23,39 55 43 55,7 54 41 54", "21 39 21 52,17 28 71 28,54 8 54 42,38 4 44 4", "69 48 69 59,5 3 5 51,38 21 38 23,43 53 73 53", "4 44 14 44,62 40 62 75,46 17 46 28,61 33 61 63", "4 0 4 44,80 56 80 69,51 29 77 29,74 18 74 76", "59 5 59 74,41 54 78 54,52 42 52 54,15 51 25 51", "10 24 16 24,48 47 48 73,80 1 80 10,47 31 59 31", "73 22 73 34,20 1 20 23,77 1 77 3,10 52 10 64", "61 19 61 24,70 61 73 61,34 45 70 45,46 28 46 46", "35 47 45 47,42 59 77 59,77 73 80 73,43 39 50 39", "5 5 26 5,14 60 14 79,7 60 63 60,21 10 28 10", "29 13 42 13,7 26 34 26,25 3 25 28,12 50 43 50", "58 62 58 78,20 14 59 14,3 50 12 50,6 72 39 72", "55 43 80 43,59 6 77 6,18 48 46 48,71 33 71 50", "3 66 31 66,9 6 58 6,31 71 71 71,8 54 8 61", "15 58 45 58,35 69 35 74,28 30 28 35,60 51 60 71", "63 60 66 60,57 22 66 22,57 34 57 60,30 61 45 61", "9 2 9 12,22 5 22 8,0 19 30 19,56 73 77 73", "26 24 38 24,79 13 79 27,24 38 44 38,58 6 58 62", "34 9 34 21,0 49 14 49,8 28 8 54,8 24 8 28", "7 37 29 37,18 64 52 64,15 59 15 66,12 79 60 79", "80 20 80 51,4 44 4 72,33 5 79 5,0 18 0 26", "64 32 64 38,49 4 49 12,73 7 73 22,27 74 32 74", "67 0 67 31,36 4 36 23,58 6 59 6,23 62 51 62", "75 31 75 61,62 57 70 57,35 30 35 48,17 25 17 76", "43 19 43 55,27 70 74 70,14 44 65 44,41 59 42 59", "29 31 47 31,35 48 35 65,77 7 77 36,34 32 72 32", "64 65 64 70,80 51 80 56,44 73 44 77,43 21 60 21", "29 28 29 78,33 15 60 15,24 37 24 56,27 76 59 76", "17 8 17 25,22 11 22 56,46 48 66 48,0 14 0 18", "5 71 31 71,53 0 53 69,0 7 25 7,59 14 73 14", "79 12 79 13,12 5 12 74,73 53 75 53,53 42 70 42", "42 59 42 61,12 12 56 12,19 31 19 80,21 33 75 33", "65 5 65 15,34 38 34 48,54 46 54 49,8 11 11 11", "37 57 37 60,66 7 71 7,14 20 28 20,44 25 44 42", "74 14 74 18,31 30 33 30,27 1 27 65,19 23 19 30", "68 8 68 49,45 47 75 47,18 6 18 35,57 17 57 18", "68 49 68 78,38 2 38 21,7 59 31 59,3 3 3 52", "5 51 5 80,3 60 7 60,34 52 44 52,9 4 38 4", "63 2 76 2,72 9 80 9,55 3 55 13,22 62 22 63", "40 18 40 28,36 23 36 65,60 3 60 7,52 11 52 42", "9 15 18 15,48 75 53 75,76 38 78 38,78 4 78 16", "25 76 27 76,38 68 38 78,24 4 24 33,36 25 41 25", "40 56 40 71,21 31 29 31,33 12 33 58,6 36 79 36"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6850;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> hier1 = {"39 76 44 76,15 15 15 40,59 54 59 60,4 8 4 63", "58 16 58 70,26 68 47 68,28 1 28 77,20 46 20 47", "11 52 23 52,54 44 54 52,8 56 8 78,3 6 23 6", "3 27 5 27,66 17 77 17,65 16 65 34,79 16 79 72", "49 15 65 15,33 5 33 66,35 11 75 11,2 1 2 16", "27 1 27 76,49 68 54 68,0 26 63 26,30 75 41 75", "34 77 62 77,13 35 13 45,5 47 15 47,50 23 50 25", "22 56 60 56,65 7 65 16,11 3 11 4,32 55 32 64", "38 18 38 52,14 32 42 32,26 18 70 18,3 16 37 16", "30 23 30 24,1 58 53 58,42 51 43 51,45 33 45 49", "24 64 32 64,46 67 46 79,63 52 63 77,3 63 48 63", "32 78 49 78,71 0 71 47,6 36 48 36,0 1 0 19", "80 67 80 77,9 25 9 55,40 73 50 73,11 13 11 37", "51 35 79 35,6 72 54 72,26 17 26 36,42 65 67 65", "38 17 66 17,6 57 6 77,2 17 6 17,9 5 51 5", "69 5 69 43,8 79 34 79,4 43 16 43,39 1 39 79", "48 63 51 63,6 23 6 42,18 49 18 56,3 15 3 34", "9 15 9 25,35 8 43 8,48 21 48 51,6 11 6 12", "3 55 55 55,21 20 44 20,35 62 70 62,80 56 80 67", "46 20 46 44,48 0 48 15,37 1 37 37,8 45 46 45", "69 43 69 74,75 67 75 79,27 8 35 8,72 74 72 77", "19 19 37 19,53 80 79 80,31 28 33 28,24 23 24 68", "23 64 24 64,74 7 74 33,8 22 39 22,70 9 70 50", "43 11 43 18,21 13 60 13,10 66 12 66,65 5 65 7", "16 60 27 60,30 24 48 24,19 11 35 11,12 45 12 59", "2 33 2 44,42 53 68 53,22 27 22 76,27 41 34 41", "66 36 66 74,29 74 48 74,1 80 38 80,58 45 76 45", "34 2 36 2,67 30 67 41,55 58 80 58,45 49 45 75", "17 0 17 9,48 34 63 34,61 0 61 19,27 60 55 60", "36 9 36 59,69 74 69 78,0 74 29 74,48 36 63 36", "19 36 19 61,29 42 70 42,70 63 75 63,13 65 14 65", "55 34 55 35,21 18 26 18,48 14 80 14,45 40 51 40", "23 52 69 52,23 47 53 47,51 5 76 5,61 19 61 67", "0 16 3 16,19 56 22 56,26 16 26 17,59 24 59 54", "30 40 30 54,2 46 13 46,76 2 76 78,53 61 70 61", "5 24 30 24,29 50 50 50,64 29 64 60,54 45 58 45", "16 43 41 43,12 33 12 45,48 59 70 59,61 70 78 70", "19 14 19 36,14 28 14 29,13 67 17 67,18 67 72 67", "2 44 2 55,50 31 50 46,73 6 73 44,25 8 27 8", "74 33 74 69,68 38 69 38,29 8 29 17,51 52 51 63", "56 38 56 39,73 2 73 6,9 64 18 64,12 3 12 29", "54 49 76 49,51 76 51 80,63 36 75 36,65 55 65 72", "36 76 36 78,9 9 16 9,15 54 20 54,6 42 6 55", "50 50 50 73,69 0 69 5,20 15 20 46,35 21 35 25", "18 24 18 49,16 9 19 9,26 9 58 9,41 2 41 3", "12 44 80 44,67 11 67 29,41 3 41 17,14 72 14 75", "26 73 31 73,29 2 34 2,50 61 52 61,48 2 55 2", "47 41 79 41,4 7 4 8,16 4 41 4,47 68 49 68", "25 69 30 69,24 5 24 23,60 24 60 26,1 28 31 28", "9 51 10 51,56 63 70 63,53 27 79 27,42 60 42 70"};
    vector<string> hier2 = {"41 77 58 77,43 27 43 61,63 18 63 27,55 15 55 63", "32 28 32 79,38 9 44 9,50 24 50 65,10 35 10 49", "29 11 29 25,4 41 4 69,18 23 18 79,22 12 48 12", "79 22 79 57,46 71 61 71,57 56 62 56,74 7 74 20", "1 66 7 66,39 40 39 51,36 29 36 66,59 33 72 33", "3 10 51 10,76 23 76 64,33 22 63 22,37 3 37 52", "41 40 42 40,50 79 61 79,69 13 72 13,65 58 65 80", "41 32 74 32,26 58 70 58,58 8 58 68,33 23 59 23", "25 7 25 69,30 76 50 76,0 3 36 3,34 46 45 46", "15 10 15 17,52 27 70 27,11 9 11 34,70 43 70 71", "75 9 75 25,42 35 65 35,18 15 18 23,59 5 59 22", "9 27 41 27,31 25 31 26,14 34 68 34,45 11 48 11", "23 65 73 65,12 15 12 34,65 22 65 43,28 8 28 36", "39 74 39 76,1 32 15 32,6 26 16 26,9 17 9 68", "25 55 46 55,14 74 67 74,4 31 23 31,15 32 31 32", "38 3 40 3,40 39 40 73,31 11 31 25,60 50 60 64", "1 4 77 4,77 22 77 47,44 63 44 67,23 36 29 36", "47 2 79 2,13 3 13 54,32 8 32 18,71 13 71 30", "73 40 73 68,10 7 52 7,14 62 79 62,73 68 73 78", "1 58 26 58,3 19 3 65,41 27 51 27,45 49 45 76", "1 70 42 70,45 69 78 69,2 61 68 61,21 46 21 64", "16 55 25 55,12 75 12 77,56 6 75 6,31 71 46 71", "36 66 36 75,50 2 50 24,15 53 39 53,6 17 6 39", "68 61 73 61,54 31 54 68,52 22 52 40,13 34 14 34", "24 66 26 66,4 23 33 23,0 39 10 39,7 5 7 13", "52 21 52 22,13 25 27 25,80 1 80 75,56 37 56 47", "7 76 25 76,57 24 57 77,4 43 11 43,66 6 66 78", "54 5 66 5,41 57 41 65,56 68 56 80,55 0 59 0", "59 49 59 52,16 6 35 6,56 18 71 18,38 48 75 48", "42 50 68 50,73 32 73 40,20 39 55 39,12 22 33 22", "26 18 26 64,45 46 64 46,5 26 5 42,21 31 21 46", "41 36 59 36,46 55 79 55,4 34 4 41,45 10 45 17", "56 47 56 60,10 6 16 6,15 35 15 50,15 36 23 36", "54 17 54 31,33 44 46 44,9 65 23 65,66 1 66 6", "57 11 63 11,52 7 62 7,17 1 57 1,14 59 50 59", "1 57 38 57,21 15 58 15,2 38 2 62,38 72 38 78", "37 52 37 53,77 13 77 22,67 27 67 79,6 5 44 5", "7 55 16 55,43 73 57 73,54 31 55 31,35 23 35 80", "50 76 58 76,19 77 41 77,20 20 44 20,6 54 6 60", "4 21 4 34,9 1 17 1,71 12 71 13,7 15 21 15", "17 60 17 65,1 37 69 37,50 31 52 31,14 78 33 78", "65 43 65 58,74 27 74 73,39 4 39 8,29 36 41 36", "19 79 50 79,52 51 52 55,51 48 51 49,34 52 57 52", "40 5 40 39,55 42 59 42,2 62 2 73,24 44 24 61", "67 26 67 27,23 3 23 20,2 63 26 63,67 0 68 0", "50 59 76 59,60 12 60 32,3 65 3 69,41 13 61 13", "21 11 21 22,23 46 34 46,5 15 5 26,54 69 54 71", "43 66 52 66,26 75 26 76,47 14 47 44,57 0 57 24", "39 41 64 41,28 4 28 8,76 42 80 42,14 79 19 79", "31 55 31 64,10 39 14 39,8 62 14 62,9 50 36 50"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6614;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> hier1 = {"16 37 16 57,27 13 27 48,65 27 65 53,25 6 25 64", "51 46 51 48,76 6 76 26,6 2 6 47,42 22 42 73", "8 4 8 29,2 37 2 57,70 66 70 78,57 11 57 49", "64 28 64 42,40 12 40 36,53 73 53 80,70 19 70 66", "60 45 60 74,2 26 2 37,43 28 43 47,56 11 56 19", "10 4 10 71,3 6 3 58,33 26 33 29,46 39 46 46", "8 0 8 4,56 33 56 77,13 2 13 45,12 34 12 71", "2 24 2 26,24 18 24 22,69 9 69 56,35 14 35 23", "64 25 64 28,62 32 62 33,20 21 20 32,37 25 37 45", "41 0 41 30,28 3 28 13,79 4 79 56,51 56 51 77", "78 7 78 46,71 5 71 6,60 3 60 45,63 54 63 80", "0 53 0 67,9 50 9 68,50 41 50 80,72 5 72 17", "38 52 38 67,38 26 38 52,78 66 78 76,9 46 9 50", "46 46 46 56,59 14 59 61,9 20 9 46,53 1 53 52", "2 13 2 24,34 17 34 27,68 16 68 71,11 16 11 66", "12 6 12 34,15 39 15 46,13 48 13 72,41 30 41 77", "21 35 21 42,75 5 75 63,0 67 0 77,22 15 22 42", "36 14 36 78,59 0 59 14,54 4 54 11,24 10 24 18", "1 18 1 27,45 49 45 50,57 49 57 63,58 47 58 54", "72 17 72 44,55 35 55 37,65 55 65 74,29 64 29 65", "78 62 78 66,67 44 67 59,40 36 40 75,41 77 41 78", "77 3 77 24,45 24 45 42,33 24 33 25,32 19 32 77", "37 68 37 69,80 3 80 5,65 21 65 27,52 17 52 26", "11 1 11 16,14 49 14 73,71 21 71 72,62 1 62 32", "46 25 46 39,73 5 73 9,25 67 25 69,16 31 16 37", "42 8 42 22,27 48 27 50,78 46 78 62,14 15 14 49", "5 36 5 70,21 42 21 69,33 29 33 43,33 43 33 63", "80 5 80 55,54 11 54 49,27 6 27 13,32 77 32 79", "43 0 43 28,80 55 80 63,16 57 16 75,69 56 69 75", "44 1 44 16,27 5 27 6,63 6 63 50,72 44 72 80", "46 2 46 24,61 31 61 64,5 9 5 17,18 40 18 55", "23 16 23 40,52 12 52 13,59 65 59 78,55 1 55 6", "21 69 21 80,77 30 77 46,39 10 39 17,71 18 71 21", "28 56 28 74,77 24 77 30,54 53 54 72,33 3 33 10", "27 1 27 5,13 76 13 77,55 72 55 76,48 7 48 80", "49 13 49 28,18 0 18 40,44 37 44 71,33 63 33 68", "56 9 56 11,16 9 16 31,1 11 1 13,75 2 75 5", "4 32 4 78,56 7 56 9,35 9 35 14,50 8 50 35", "30 56 30 78,43 47 43 63,50 35 50 41,64 18 64 25", "5 17 5 36,39 33 39 55,64 51 64 52,42 1 42 8", "69 2 69 9,5 70 5 72,68 11 68 16,45 42 45 47", "51 23 51 27,43 63 43 78,14 2 14 15,2 57 2 61", "52 30 52 44,36 6 36 8,47 19 47 61,63 50 63 54", "33 13 33 24,8 37 8 50,70 2 70 19,19 14 19 19", "53 52 53 53,8 32 8 37,24 9 24 10,8 61 8 64,3 0 3 3", "53 67 53 69,6 47 6 62,58 2 58 16,78 4 78 7", "47 0 47 19,77 55 77 66,27 65 27 69,45 9 45 24", "17 14 17 32,4 5 4 26,34 8 34 17,7 23 7 77", "22 4 22 15,71 11 71 18,3 58 3 75,74 41 74 42", "54 0 54 4,20 48 20 79,11 66 11 74,16 0 16 9"};
    vector<string> hier2 = {"64 17 64 58,20 46 20 51,18 34 18 56,12 1 12 11", "0 37 0 79,31 14 31 63,44 56 44 60,4 46 4 77", "26 5 26 77,70 44 70 75,11 30 11 76,77 0 77 68", "15 24 15 64,6 34 6 51,75 11 75 54,26 0 26 5", "15 70 15 78,35 14 35 18,7 2 7 36,3 32 3 56", "36 2 36 74,58 15 58 70,80 4 80 78,40 16 40 18", "37 41 37 52,33 22 33 23,37 12 37 33,67 0 67 39", "59 29 59 40,21 8 21 11,68 31 68 51,22 49 22 76", "6 9 6 28,63 26 63 31,75 10 75 11,56 7 56 63", "9 18 9 21,14 0 14 35,22 42 22 49,38 30 38 57", "11 26 11 30,46 58 46 80,16 11 16 41,5 35 5 75", "52 5 52 66,47 9 47 33,50 4 50 17,51 1 51 62", "74 24 74 46,27 16 27 58,17 38 17 43,68 51 68 64", "54 41 54 70,78 3 78 17,65 49 65 71,22 11 22 42", "48 48 48 77,11 11 11 26,76 15 76 46,43 38 43 54", "76 46 76 55,22 9 22 11,14 35 14 77,59 16 59 29", "40 4 40 16,66 10 66 15,49 29 49 62,63 11 63 26", "62 12 62 27,53 14 53 58,13 16 13 57,66 49 66 59", "78 50 78 76,66 15 66 49,17 45 17 53,17 60 17 79", "31 5 31 14,39 41 39 52,50 31 50 77,76 1 76 15", "1 18 1 51,11 5 11 11,52 66 52 74,65 47 65 49", "32 62 32 68,59 10 59 16,64 64 64 78,54 24 54 41", "68 6 68 7,79 11 79 46,59 54 59 65,78 76 78 77", "32 1 32 9,69 38 69 40,34 22 34 29,37 33 37 41", "76 74 76 75,20 16 20 34,64 10 64 17,61 18 61 39", "16 41 16 43,62 3 62 12,29 7 29 12,73 45 73 61", "13 8 13 16,54 2 54 3,41 14 41 47,10 14 10 69", "49 62 49 77,55 20 55 73,40 61 40 63,12 25 12 65", "43 14 43 34,60 4 60 78,70 75 70 79,27 58 27 68", "4 14 4 46,43 54 43 78,45 35 45 67,59 1 59 10", "76 0 76 1,65 7 65 47,34 29 34 73,41 67 41 73", "16 43 16 58,0 7 0 16,20 34 20 46,3 8 3 32", "47 37 47 42,6 30 6 34,44 0 44 8,5 34 5 35", "8 44 8 61,43 36 43 38,74 46 74 56,8 17 8 44", "8 61 8 63,28 12 28 71,12 15 12 20,67 57 67 80", "69 11 69 26,71 22 71 66,61 12 61 18,61 11 61 12", "72 37 72 57,3 56 3 74,34 73 34 75,28 71 28 76", "12 11 12 15,42 6 42 56,71 16 71 22,21 0 21 4", "66 0 66 10,56 5 56 7,6 28 6 30,25 57 25 63", "70 32 70 44,31 63 31 68,47 8 47 9,46 27 46 31", "57 7 57 11,7 36 7 68,68 13 68 31,64 0 64 10", "35 34 35 78,12 21 12 25,22 2 22 9,2 7 2 12", "30 63 30 64,5 4 5 34,43 2 43 3,78 24 78 30", "39 69 39 80,44 63 44 66,9 53 9 71,60 78 60 80", "78 30 78 50,21 66 21 67,0 6 0 7,30 27 30 45", "73 8 73 16,17 12 17 24,36 0 36 2,48 7 48 10", "38 4 38 8,45 3 45 8,51 62 51 76,17 0 17 12", "13 57 13 65,15 11 15 24,48 4 48 7,16 1 16 11", "23 50 23 52,33 33 33 59,73 5 73 8,79 46 79 51", "39 3 39 4,43 10 43 14,45 19 45 35,35 6 35 14"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 4986;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> hier1 = {"28 15 28 62,50 34 50 47,78 19 78 24,27 47 27 68", "63 1 63 2,26 1 26 14,52 0 52 36,47 47 47 70", "14 17 14 55,47 8 47 11,8 2 8 77,15 14 15 19", "61 12 61 13,33 5 33 44,5 46 5 74,28 62 28 65", "27 2 27 3,47 19 47 33,51 57 51 74,59 35 59 58", "66 20 66 27,6 19 6 73,24 36 24 72,78 24 78 72", "34 10 34 79,48 2 48 20,43 26 43 74,47 6 47 8", "16 17 16 75,23 3 23 21,28 6 28 15,52 36 52 55", "79 28 79 68,46 37 46 40,24 21 24 36,63 28 63 57", "27 38 27 43,2 51 2 59,35 49 35 66,4 33 4 34", "0 13 0 50,3 16 3 18,24 3 24 21,64 1 64 18", "37 3 37 29,19 52 19 79,51 9 51 57,32 32 32 35", "63 9 63 11,56 41 56 64,40 37 40 74,46 5 46 20", "69 46 69 72,40 14 40 37,72 12 72 20,26 46 26 56", "5 17 5 46,45 3 45 13,27 7 27 38,52 55 52 76", "31 0 31 36,65 16 65 46,69 14 69 15,54 30 54 55", "54 8 54 20,23 76 23 78,35 66 35 67,79 15 79 28", "3 14 3 16,80 36 80 56,22 3 22 25,12 66 12 77", "17 57 17 75,45 1 45 3,61 42 61 56,78 12 78 19", "74 1 74 37,4 0 4 8,4 47 4 64,12 15 12 18,7 30 7 80", "9 24 9 47,69 72 69 74,75 3 75 11,23 34 23 40", "45 34 45 42,26 34 26 46,64 27 64 54,63 2 63 9", "44 14 44 68,66 14 66 20,2 10 2 51,71 1 71 2", "34 8 34 10,32 9 32 32,52 76 52 79,35 29 35 48", "60 49 60 61,57 17 57 32,3 18 3 20,62 28 62 80", "76 9 76 38,62 6 62 28,33 44 33 68,68 13 68 57", "44 13 44 14,59 6 59 35,5 2 5 17,50 4 50 34", "14 57 14 75,38 0 38 3,61 24 61 32,14 3 14 17", "77 24 77 51,40 3 40 14,24 77 24 80,73 37 73 66", "21 47 21 70,32 39 32 80,55 11 55 49,54 29 54 30", "7 10 7 30,7 2 7 10,68 57 68 62,67 45 67 54", "63 24 63 28,78 72 78 78,65 14 65 16,77 51 77 56", "71 3 71 73,10 45 10 61,76 3 76 9,51 74 51 80", "54 24 54 25,75 30 75 45,57 32 57 51,30 17 30 51", "39 55 39 60,15 8 15 13,2 61 2 76,36 7 36 73", "74 37 74 51,50 3 50 4,58 1 58 18,56 7 56 40", "70 11 70 58,49 26 49 74,63 15 63 24,72 20 72 32", "55 49 55 80,29 24 29 38,44 3 44 13,9 6 9 8", "36 73 36 78,69 30 69 40,42 0 42 71,3 7 3 14", "38 3 38 20,65 0 65 14,29 47 29 74,75 29 75 30", "49 74 49 79,43 0 43 3,43 75 43 76,20 8 20 72", "39 10 39 25,51 2 51 9,61 60 61 63,42 71 42 80", "0 7 0 13,64 18 64 21,27 68 27 78,3 58 3 66", "35 18 35 29,31 36 31 43,79 11 79 15,9 47 9 75", "73 25 73 37,21 14 21 47,70 58 70 68,23 40 23 75", "59 4 59 6,29 74 29 78,9 23 9 24,72 67 72 77", "47 33 47 47,24 72 24 77,35 7 35 18,37 55 37 58", "53 35 53 37,77 19 77 24,18 43 18 54,55 0 55 11", "23 23 23 34,48 38 48 75,9 22 9 23,80 56 80 66", "39 47 39 51,56 40 56 41,16 11 16 17,15 30 15 37"};
    vector<string> hier2 = {"55 7 55 61,28 24 28 48,11 2 11 17,37 32 37 54", "19 60 19 76,71 36 71 43,64 17 64 54,56 51 56 53", "44 11 44 52,54 28 54 36,12 30 12 51,59 48 59 58", "38 56 38 57,59 7 59 48,31 1 31 65,52 43 52 61", "12 54 12 73,38 49 38 55,42 27 42 44,57 8 57 13", "24 22 24 65,35 26 35 76,11 17 11 20,33 75 33 76", "64 4 64 13,24 65 24 71,56 2 56 3,15 57 15 80", "17 61 17 64,32 47 32 62,10 55 10 71,25 36 25 50", "6 25 6 26,1 44 1 46,3 24 3 40,43 10 43 64", "13 15 13 57,21 31 21 46,25 32 25 35,76 6 76 27", "50 28 50 48,78 32 78 53,56 5 56 24,27 12 27 22", "71 21 71 36,27 2 27 12,66 3 66 24,61 18 61 59", "68 32 68 73,65 10 65 31,11 1 11 2,45 23 45 56", "47 66 47 77,5 46 5 70,70 7 70 47,52 22 52 34", "50 20 50 28,47 12 47 49,40 34 40 49,60 32 60 78", "35 15 35 26,12 1 12 29,46 24 46 58,36 58 36 67", "17 25 17 33,4 35 4 79,57 15 57 70,60 16 60 27", "65 50 65 69,75 64 75 66,69 5 69 8,2 15 2 16", "12 51 12 54,70 4 70 7,33 14 33 48,5 70 5 77", "10 10 10 55,11 46 11 61,14 25 14 79,78 53 78 61", "21 20 21 31,79 34 79 39,36 5 36 17,48 30 48 61", "8 14 8 57,16 9 16 45,26 47 26 50,0 3 0 59", "41 10 41 70,52 12 52 14,17 56 17 57,20 11 20 33", "12 29 12 30,3 46 3 50,68 14 68 32,53 18 53 47", "36 27 36 44,25 35 25 36,66 57 66 68,38 58 38 71", "30 11 30 25,78 2 78 32,78 61 78 78,73 65 73 73", "28 77 28 80,30 38 30 57,17 33 17 40,37 20 37 32", "46 58 46 71,21 15 21 20,23 52 23 57,7 4 7 9", "48 24 48 30,65 45 65 50,54 1 54 28,79 67 79 73", "11 20 11 45,21 10 21 15,58 10 58 23,75 41 75 63", "34 21 34 54,70 47 70 66,17 46 17 56,15 8 15 57", "19 4 19 17,22 14 22 22,51 13 51 19,2 11 2 15", "19 17 19 39,80 15 80 16,39 15 39 22,30 25 30 38", "71 53 71 80,28 59 28 62,7 46 7 56,36 55 36 58", "5 43 5 46,45 56 45 59,9 41 9 47,53 7 53 12", "0 59 0 71,37 12 37 20,71 2 71 14,73 32 73 65", "56 24 56 36,13 14 13 15,79 6 79 34,53 5 53 7", "15 6 15 8,47 2 47 10,58 7 58 9,28 15 28 24", "7 27 7 46,8 11 8 14,36 18 36 27,55 2 55 7,4 3 4 35", "28 65 28 73,48 6 48 24,8 57 8 65,80 14 80 15", "18 36 18 75,20 33 20 70,65 31 65 45,27 25 27 35", "79 39 79 53,9 7 9 41,49 62 49 70,29 20 29 41", "22 4 22 14,58 9 58 10,47 49 47 50,1 16 1 44", "23 0 23 21,6 33 6 76,27 44 27 47,23 21 23 52", "17 40 17 46,18 22 18 24,61 11 61 18,80 60 80 66", "78 0 78 2,24 5 24 11,3 40 3 46,63 33 63 36", "37 5 37 12,50 53 50 71,17 14 17 25,57 77 57 79", "80 72 80 76,79 55 79 65,41 70 41 72,34 3 34 16", "66 0 66 3,20 70 20 77,40 5 40 34,69 48 69 50", "1 68 1 76,58 0 58 7,61 6 61 11,64 13 64 17"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 4724;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> hier1 = {"68 1 68 49,64 19 64 52,32 28 32 54,40 9 40 44", "69 45 69 75,58 20 58 50,62 18 62 37,2 25 2 42", "42 53 42 56,6 30 6 70,9 55 9 61,49 12 49 48", "37 34 37 53,32 54 32 62,61 52 61 58,56 15 56 32", "17 2 17 65,64 52 64 64,46 20 46 67,78 24 78 68", "60 58 60 78,28 2 28 11,62 40 62 46,8 41 8 43", "67 31 67 65,31 7 31 74,67 15 67 31,28 15 28 53", "0 30 0 73,25 27 25 79,57 42 57 77,8 1 8 41", "75 60 75 80,23 6 23 23,24 9 24 72,51 22 51 30", "7 6 7 20,12 46 12 49,48 29 48 57,64 2 64 19", "15 14 15 38,44 12 44 76,50 4 50 43,40 54 40 61", "35 0 35 10,3 13 3 39,68 49 68 51,25 17 25 27", "25 8 25 17,53 7 53 22,18 18 18 41,78 68 78 80", "73 33 73 35,45 8 45 67,34 8 34 42,79 19 79 60", "13 30 13 33,56 39 56 77,73 1 73 33,33 34 33 80", "70 19 70 69,57 18 57 42,35 71 35 78,5 12 5 33", "26 11 26 64,40 61 40 79,7 20 7 34,70 77 70 79", "21 52 21 56,14 14 14 71,24 77 24 78,49 5 49 12", "79 72 79 75,43 43 43 57,37 67 37 80,50 64 50 78", "3 5 3 13,72 33 72 56,43 20 43 43,32 7 32 23", "51 34 51 38,28 53 28 61,49 48 49 63,51 4 51 16", "53 0 53 7,18 41 18 76,47 14 47 60,10 31 10 62", "10 65 10 67,62 53 62 78,46 18 46 20,36 9 36 72", "42 14 42 17,79 0 79 4,29 9 29 74,39 56 39 57", "76 5 76 44,46 67 46 74,80 67 80 77,45 67 45 73", "51 16 51 20,63 19 63 52,37 24 37 34,37 2 37 24", "30 45 30 55,11 17 11 75,62 10 62 18,3 39 3 43", "41 17 41 31,61 26 61 51,72 56 72 77,62 6 62 10", "1 26 1 79,6 6 6 14,6 70 6 71,66 59 66 73,6 2 6 6", "3 54 3 70,10 25 10 31,41 16 41 17,38 5 38 38", "48 7 48 16,15 38 15 78,16 73 16 78,40 44 40 54", "3 53 3 54,66 9 66 11,75 15 75 60,33 5 33 34", "41 13 41 16,55 57 55 76,23 5 23 6,47 60 47 78", "59 50 59 63,41 31 41 73,21 40 21 52,51 0 51 4", "74 59 74 61,78 9 78 24,20 7 20 21,24 72 24 76", "50 57 50 61,63 52 63 69,71 6 71 25,13 12 13 30", "78 0 78 9,24 2 24 9,69 30 69 40,18 76 18 79", "22 2 22 16,66 1 66 9,8 49 8 75,8 75 8 77", "38 66 38 76,28 11 28 15,13 8 13 12,39 5 39 9", "10 6 10 25,34 45 34 62,71 74 71 80,14 8 14 14", "34 62 34 74,34 42 34 45,38 38 38 52,69 75 69 78", "58 2 58 20,65 28 65 52,59 19 59 50,5 33 5 35", "42 76 42 79,61 25 61 26,75 11 75 15,61 6 61 25", "30 60 30 79,34 0 34 8,63 69 63 75,47 1 47 14", "64 64 64 71,0 4 0 30,16 11 16 29,20 28 20 51", "44 11 44 12,11 1 11 17,73 38 73 70,79 60 79 72", "7 1 7 6,3 43 3 53,53 77 53 79,41 73 41 75", "26 64 26 72,59 63 59 72,55 6 55 48,52 3 52 5", "74 31 74 45,19 41 19 48,54 15 54 37,79 4 79 19", "29 8 29 9,19 37 19 41,26 10 26 11,6 14 6 30"};
    vector<string> hier2 = {"64 30 64 33,12 14 12 47,64 9 64 23,72 60 72 64", "48 30 48 47,1 10 1 28,8 54 8 79,30 17 30 25", "55 53 55 72,18 15 18 45,31 50 31 76,72 17 72 18", "55 35 55 53,7 21 7 64,79 19 79 46,24 16 24 57", "40 4 40 36,50 48 50 50,55 72 55 75,59 16 59 61", "29 54 29 75,4 8 4 9,45 30 45 64,54 18 54 21", "53 2 53 73,60 47 60 50,65 1 65 72,3 38 3 63", "52 20 52 39,19 36 19 72,78 2 78 63,45 13 45 30", "49 9 49 42,38 49 38 79,61 21 61 36,20 18 20 73", "70 20 70 62,17 13 17 15,56 14 56 50,50 12 50 36", "72 48 72 56,39 6 39 12,80 17 80 24,33 19 33 21", "22 0 22 74,27 14 27 55,76 34 76 41,11 49 11 50", "64 5 64 9,33 27 33 30,24 2 24 16,32 47 32 53", "36 25 36 53,46 2 46 25,7 19 7 21,9 28 9 70", "47 13 47 70,27 58 27 74,32 7 32 47,69 26 69 80", "14 17 14 40,44 30 44 73,19 6 19 20,57 33 57 67", "26 30 26 63,51 3 51 78,25 34 25 51,61 16 61 21", "58 18 58 35,5 38 5 45,69 6 69 26,63 56 63 67", "44 26 44 30,6 55 6 59,45 1 45 13,19 1 19 6", "72 68 72 76,61 50 61 78,60 24 60 47,16 4 16 44", "12 49 12 58,23 10 23 24,67 8 67 21,29 75 29 79", "71 62 71 77,12 47 12 49,2 21 2 39,62 10 62 23", "19 20 19 36,19 72 19 73,15 16 15 21,10 46 10 63", "24 1 24 2,49 42 49 55,4 37 4 39,66 8 66 75", "70 6 70 20,50 39 50 48,73 16 73 58,36 53 36 74", "38 15 38 24,18 45 18 65,77 4 77 61,39 64 39 74", "62 32 62 78,43 74 43 80,56 54 56 60,72 19 72 35", "6 60 6 80,6 45 6 55,47 4 47 7,49 6 49 9", "70 62 70 79,5 19 5 38,12 58 12 64,66 0 66 8", "77 61 77 72,64 36 64 80,28 0 28 66,74 55 74 79", "24 57 24 63,4 32 4 37,30 66 30 73,56 50 56 54", "13 73 13 79,38 4 38 15,21 64 21 70,48 7 48 30", "69 5 69 6,48 47 48 59,5 45 5 70,8 31 8 54", "32 63 32 66,54 16 54 18,16 44 16 45,23 7 23 10", "20 3 20 9,27 4 27 14,48 65 48 79,35 27 35 42", "25 51 25 58,7 18 7 19,57 15 57 33,11 28 11 29", "30 25 30 27,62 23 62 32,64 29 64 30,10 66 10 79", "76 41 76 79,13 1 13 10,76 15 76 28,68 39 68 60", "67 70 67 76,34 14 34 51,7 10 7 18,67 50 67 70", "27 55 27 58,42 26 42 42,79 7 79 9,36 2 36 25", "10 4 10 34,42 2 42 26,25 14 25 19,10 34 10 46", "78 63 78 77,14 41 14 49,23 27 23 55,6 16 6 39", "75 53 75 56,4 28 4 32,79 47 79 59,42 62 42 63", "46 65 46 73,31 6 31 11,58 35 58 47,44 9 44 26", "28 66 28 79,46 0 46 2,29 0 29 32,23 55 23 64", "23 71 23 79,70 1 70 6,59 15 59 16,25 13 25 14", "77 1 77 4,52 39 52 57,56 6 56 14,33 32 33 55", "4 55 4 56,60 4 60 24,12 5 12 11,1 31 1 66", "32 2 32 7,76 30 76 33,35 10 35 27,60 66 60 69", "6 0 6 2,14 40 14 41,74 35 74 55,26 63 26 70"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 4939;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> hier1 = {"0 70 29 70,4 32 33 32,22 15 73 15,45 11 60 11", "29 70 72 70,40 39 55 39,7 53 59 53,33 50 72 50", "2 63 44 63,8 43 24 43,1 46 12 46,60 58 75 58", "4 64 53 64,1 3 73 3,48 69 74 69,1 24 21 24", "24 46 30 46,55 51 75 51,14 45 50 45,8 39 29 39", "4 73 35 73,31 21 47 21,47 58 60 58,9 8 35 8", "11 55 66 55,66 18 75 18,53 56 62 56,44 63 56 63", "9 38 67 38,34 40 60 40,9 12 55 12,17 25 48 25", "36 31 44 31,2 4 69 4,28 26 49 26,0 23 1 23", "21 5 44 5,5 16 35 16,14 33 47 33,0 72 62 72", "5 38 9 38,25 20 42 20,0 44 17 44,47 6 55 6", "25 18 43 18,62 54 65 54,13 2 35 2,11 6 47 6", "48 75 75 75,55 12 78 12,24 17 45 17,16 66 75 66", "47 32 48 32,4 75 36 75,62 72 64 72,3 47 9 47", "59 74 66 74,8 58 47 58,14 10 68 10,2 14 14 14", "1 69 3 69,26 57 75 57,62 32 74 32,34 7 39 7", "39 69 48 69,2 80 37 80,39 52 43 52,66 55 74 55", "11 17 24 17,32 56 53 56,26 11 45 11,2 23 13 23", "18 48 64 48,13 23 19 23,18 37 73 37,3 20 25 20", "59 53 72 53,44 31 46 31,46 17 65 17,64 48 80 48", "35 2 56 2,45 61 55 61,16 14 29 14,4 39 8 39", "0 59 79 59,8 0 38 0,73 37 78 37,36 75 48 75", "50 67 65 67,18 65 48 65,28 71 76 71,37 49 60 49", "41 77 69 77,60 52 62 52,19 27 45 27,29 39 40 39", "65 1 76 1,73 3 80 3,5 36 38 36,49 36 71 36", "12 71 28 71,18 5 21 5,15 26 28 26,60 40 68 40", "1 16 5 16,47 21 70 21,8 22 10 22,9 55 11 55", "31 78 71 78,4 78 31 78,63 22 71 22,10 2 13 2", "25 77 34 77,0 62 24 62,58 76 77 76,12 49 37 49", "7 9 14 9,13 47 30 47,1 32 4 32,2 47 3 47,44 5 55 5", "72 70 80 70,9 47 13 47,2 45 14 45,2 27 19 27", "12 57 26 57,50 60 56 60,0 74 8 74,40 61 45 61", "1 51 4 51,38 0 73 0,55 6 71 6,69 4 78 4", "22 23 74 23,9 10 14 10,5 68 12 68,57 34 60 34", "29 60 50 60,5 48 11 48,45 19 54 19,5 69 9 69", "10 50 33 50,53 64 78 64,48 14 65 14,3 71 12 71", "4 33 14 33,54 62 70 62,67 38 76 38,56 34 57 34", "13 61 32 61,0 32 1 32,26 28 42 28,50 68 72 68", "3 36 5 36,3 76 27 76,18 13 35 13,50 45 59 45", "71 13 79 13,58 20 59 20,65 9 68 9,8 28 26 28", "21 22 49 22,10 34 33 34,55 61 61 61,8 19 33 19", "11 56 32 56,27 76 42 76,5 9 7 9,23 29 80 29", "62 9 65 9,34 69 39 69,56 63 74 63,0 46 1 46", "2 6 11 6,43 18 66 18,47 14 48 14,0 30 3 30", "65 54 71 54,24 62 54 62,9 34 10 34,41 42 70 42", "0 58 8 58,20 77 25 77,66 74 70 74,48 52 60 52", "42 76 49 76,24 43 34 43,68 40 80 40,31 42 41 42", "2 36 3 36,75 57 76 57,5 60 29 60,3 35 37 35", "6 11 7 11,4 10 9 10,3 11 6 11,0 5 12 5,12 29 23 29", "30 46 34 46,71 79 79 79,14 11 16 11,4 54 8 54"};
    vector<string> hier2 = {"23 31 58 31,7 6 63 6,57 65 61 65,22 43 67 43", "28 22 54 22,18 62 59 62,17 60 25 60,15 58 48 58", "14 62 15 62,16 32 26 32,12 13 26 13,17 57 50 57", "3 76 63 76,50 25 62 25,0 70 2 70,37 56 69 56", "1 16 19 16,25 45 54 45,13 61 67 61,35 5 63 5", "20 49 37 49,20 63 53 63,34 27 35 27,37 26 77 26", "16 68 73 68,18 5 35 5,38 21 50 21,5 13 12 13", "10 74 55 74,8 49 20 49,29 30 50 30,7 21 38 21", "40 38 69 38,3 3 9 3,26 13 51 13,58 4 68 4", "1 39 30 39,0 39 1 39,26 32 58 32,24 14 51 14", "1 36 34 36,0 49 8 49,20 27 34 27,21 1 39 1", "54 45 61 45,77 71 80 71,51 19 58 19,58 32 68 32", "55 14 69 14,35 0 63 0,69 74 78 74,21 47 39 47", "1 74 4 74,24 59 36 59,46 78 54 78,2 1 21 1", "45 70 53 70,19 33 80 33,2 79 62 79,51 13 55 13", "51 14 55 14,66 17 67 17,0 79 2 79,3 63 20 63", "3 22 17 22,38 78 46 78,64 2 79 2,16 71 34 71", "48 58 50 58,37 42 38 42,19 16 66 16,40 66 45 66", "47 20 70 20,13 60 17 60,0 27 13 27,6 40 70 40", "59 62 75 62,8 68 16 68,67 15 70 15,28 4 29 4", "24 44 70 44,50 57 74 57,21 50 43 50,47 47 80 47", "70 40 75 40,41 3 59 3,55 74 62 74,29 24 47 24", "23 11 49 11,54 17 61 17,1 61 13 61,53 63 76 63", "63 76 70 76,62 79 69 79,67 51 76 51,55 69 80 69", "4 55 59 55,39 47 47 47,14 9 39 9,39 9 66 9", "8 60 12 60,68 11 79 11,57 28 69 28,12 60 13 60", "18 3 41 3,17 44 24 44,32 29 53 29,31 26 36 26", "19 17 54 17,4 54 5 54,39 1 55 1,69 14 72 14", "8 54 33 54,15 0 35 0,5 57 12 57,54 22 70 22", "42 54 69 54,8 26 21 26,7 30 29 30,59 53 76 53", "1 30 7 30,3 5 18 5,8 44 14 44,58 77 62 77", "5 77 11 77,5 70 16 70,43 50 62 50,52 2 60 2", "79 72 80 72,25 35 55 35,62 73 79 73,35 75 61 75", "0 66 27 66,3 19 51 19,13 27 20 27,57 36 64 36", "33 53 47 53,20 64 24 64,69 16 74 16,78 74 79 74", "30 38 40 38,23 48 33 48,36 26 37 26,72 7 78 7", "9 3 18 3,72 27 78 27,69 52 75 52,9 47 21 47", "34 71 57 71,43 36 48 36,32 23 54 23,51 69 53 69", "15 23 32 23,26 8 72 8,2 51 33 51,14 44 17 44", "49 59 59 59,21 26 31 26,47 24 73 24,34 36 43 36", "10 11 16 11,56 37 77 37,70 22 77 22,41 59 49 59", "62 74 69 74,55 70 73 70,30 67 33 67,45 52 64 52", "17 24 29 24,12 8 15 8,3 29 4 29,38 66 39 66", "6 43 22 43,3 0 15 0,0 65 57 65,69 28 76 28", "16 70 40 70,65 46 67 46,8 62 14 62,51 4 53 4", "4 26 8 26,55 11 68 11,5 34 51 34,4 50 21 50", "7 80 19 80,55 35 76 35,68 7 72 7,3 20 47 20", "33 39 58 39,0 22 3 22,65 15 67 15,10 72 29 72", "7 41 23 41,40 70 44 70,68 32 71 32,35 2 52 2", "14 38 30 38,6 75 35 75,18 14 24 14,22 45 25 45"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 4806;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> hier1 = {"7 55 63 55,16 73 30 73,18 63 26 63,33 21 64 21", "48 36 52 36,48 51 72 51,52 19 79 19,66 21 73 21", "15 3 38 3,31 9 63 9,7 34 15 34,19 52 63 52", "19 21 33 21,9 13 22 13,46 40 67 40,45 28 63 28", "2 12 64 12,27 31 53 31,53 34 70 34,17 26 56 26", "15 33 46 33,63 54 65 54,17 47 74 47,9 27 57 27", "12 77 22 77,4 54 25 54,30 73 65 73,1 56 78 56", "45 70 78 70,70 34 73 34,34 43 37 43,0 18 57 18", "17 25 52 25,18 72 44 72,45 68 71 68,38 78 58 78", "20 74 40 74,33 71 44 71,5 41 59 41,55 60 76 60", "21 28 45 28,43 75 80 75,44 67 67 67,25 75 39 75", "6 26 17 26,1 19 52 19,16 31 27 31,2 37 69 37", "16 66 67 66,59 41 76 41,37 10 77 10,45 64 49 64", "21 51 44 51,6 28 21 28,7 77 12 77,14 43 34 43", "32 2 42 2,11 9 14 9,10 23 26 23,8 20 64 20", "68 48 80 48,28 14 65 14,5 78 38 78,40 36 48 36", "4 70 45 70,8 80 30 80,0 71 24 71,31 59 55 59", "14 69 21 69,2 3 15 3,59 45 63 45,67 71 73 71", "24 14 28 14,26 23 67 23,42 44 48 44,27 69 48 69", "9 57 67 57,38 3 48 3,23 67 44 67,13 1 15 1", "52 63 57 63,14 36 40 36,50 35 56 35,4 62 5 62", "3 26 6 26,6 31 16 31,17 24 29 24,3 67 23 67", "70 28 76 28,15 17 68 17,17 29 23 29,47 5 53 5", "9 0 52 0,7 39 37 39,22 69 27 69,1 52 17 52", "8 57 9 57,34 54 63 54,8 32 31 32,50 72 68 72", "14 50 72 50,33 29 37 29,42 29 69 29,27 63 52 63", "1 50 4 50,28 42 68 42,61 8 65 8,26 44 42 44", "31 32 67 32,1 6 65 6,2 17 15 17,53 5 70 5", "41 64 45 64,2 62 4 62,56 26 62 26,7 58 74 58", "33 7 49 7,0 22 7 22,22 13 78 13,9 73 16 73", "22 65 35 65,8 24 10 24,20 51 21 51,36 30 75 30", "74 58 80 58,36 4 59 4,6 11 29 11,0 34 7 34", "42 16 51 16,2 11 6 11,2 30 4 30,2 77 7 77", "40 34 44 34,33 5 47 5,0 41 1 41,28 54 32 54", "22 68 45 68,57 71 59 71,60 44 72 44,28 46 36 46", "69 40 78 40,16 53 61 53,17 7 33 7,19 10 37 10", "67 57 73 57,25 54 28 54,8 21 19 21,5 75 25 75", "65 12 71 12,38 64 41 64,66 59 76 59,68 17 77 17", "8 25 12 25,67 23 71 23,2 64 38 64,64 63 69 63", "22 76 47 76,0 77 2 77,40 1 68 1,33 38 59 38", "14 30 20 30,22 34 40 34,27 35 50 35,6 59 31 59", "37 61 51 61,22 77 66 77,67 53 68 53,0 57 8 57", "62 25 80 25,54 39 62 39,5 69 14 69,10 24 17 24", "6 7 17 7,2 33 15 33,5 58 7 58,19 1 22 1,8 1 11 1", "5 68 22 68,7 79 73 79,17 52 19 52,12 43 14 43", "4 31 6 31,0 13 2 13,3 40 46 40,3 59 6 59", "56 35 74 35,2 38 33 38,18 1 19 1,1 35 27 35", "0 66 1 66,3 68 5 68,57 18 67 18,65 73 67 73", "39 75 43 75,69 54 77 54,15 14 24 14,39 24 50 24", "54 49 59 49,76 41 79 41,70 74 76 74,29 11 33 11"};
    vector<string> hier2 = {"27 48 78 48,68 79 69 79,3 13 31 13,46 39 55 39", "30 47 68 47,48 20 62 20,28 5 74 5,34 26 59 26", "12 37 73 37,8 44 48 44,15 20 35 20,15 70 73 70", "26 9 69 9,31 25 72 25,29 63 55 63,10 20 11 20", "29 3 47 3,23 75 77 75,8 45 75 45,10 8 77 8", "25 34 75 34,23 5 28 5,44 57 72 57,50 16 57 16", "22 48 27 48,1 20 10 20,44 66 75 66,41 0 73 0", "67 79 68 79,15 26 18 26,1 6 56 6,26 31 74 31", "23 4 44 4,0 53 30 53,8 21 32 21,16 59 47 59", "29 65 48 65,15 23 70 23,0 18 31 18,3 29 4 29", "27 35 55 35,15 67 32 67,29 30 30 30,23 60 64 60", "42 40 77 40,35 20 43 20,59 26 72 26,14 4 23 4", "17 60 23 60,25 64 49 64,57 32 68 32,68 47 72 47", "39 36 75 36,78 80 80 80,1 64 25 64,14 26 15 26", "68 64 72 64,23 24 62 24,8 42 37 42,43 16 50 16", "78 23 79 23,64 60 66 60,34 11 43 11,28 26 34 26", "74 31 80 31,10 57 44 57,9 66 44 66,3 2 6 2", "3 40 42 40,24 12 49 12,4 75 23 75,71 12 73 12", "32 74 36 74,8 52 33 52,33 52 43 52,13 51 23 51", "22 77 33 77,23 19 28 19,55 56 56 56,14 69 24 69", "14 74 15 74,19 47 30 47,11 51 13 51,17 77 22 77", "23 56 55 56,15 49 53 49,7 80 10 80,56 6 71 6", "44 4 51 4,4 33 55 33,21 14 49 14,19 5 23 5", "37 61 67 61,13 47 19 47,8 72 60 72,10 30 29 30", "11 47 13 47,27 7 79 7,38 62 52 62,11 15 63 15", "45 51 78 51,52 65 56 65,75 38 79 38,35 41 76 41", "6 66 9 66,9 24 23 24,66 30 78 30,7 35 27 35", "49 64 68 64,76 47 80 47,5 63 29 63,5 54 17 54", "3 79 39 79,11 48 22 48,75 62 80 62,69 9 72 9", "3 63 5 63,3 67 15 67,40 58 57 58,6 16 11 16", "0 70 15 70,70 23 76 23,34 80 39 80,0 77 2 77", "7 55 30 55,37 42 54 42,7 50 51 50,1 40 3 40", "37 18 52 18,14 43 43 43,41 46 66 46,8 41 35 41", "1 52 8 52,5 28 51 28,16 14 21 14,0 54 5 54", "6 73 65 73,2 19 23 19,11 20 15 20,49 14 79 14", "51 50 73 50,12 5 18 5,2 2 3 2,47 59 60 59", "6 36 8 36,22 61 37 61,30 17 75 17,42 67 69 67", "32 21 41 21,31 18 37 18,7 61 22 61,33 19 49 19", "8 47 11 47,49 12 59 12,65 73 66 73,13 1 64 1", "7 59 16 59,15 9 26 9,14 9 15 9,53 71 66 71", "3 5 12 5,6 35 7 35,3 9 14 9,4 22 24 22,2 5 3 5", "6 55 7 55,10 69 14 69,10 14 16 14,4 35 6 35", "12 60 17 60,39 2 64 2,1 75 4 75,69 74 71 74", "13 78 35 78,7 3 29 3,54 42 68 42,63 15 76 15", "4 23 15 23,55 39 60 39,21 68 32 68,0 67 3 67", "58 19 66 19,12 32 22 32,0 8 10 8,39 79 52 79", "5 51 11 51,72 35 75 35,61 54 77 54,52 79 67 79", "3 4 14 4,34 77 42 77,0 43 14 43,65 18 75 18", "11 38 43 38,33 2 39 2,2 33 4 33,0 26 8 26", "55 52 67 52,75 45 79 45,7 69 10 69,60 62 70 62"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 4904;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> hier1 = {"30 50 67 50,31 75 48 75,4 49 23 49,10 26 38 26", "9 26 10 26,49 40 72 40,68 8 75 8,20 5 23 5", "38 31 78 31,32 38 79 38,13 33 75 33,24 23 79 23", "17 44 66 44,23 49 46 49,38 8 51 8,63 71 69 71", "42 43 46 43,43 73 52 73,6 5 20 5,19 24 59 24", "15 48 56 48,30 0 52 0,11 18 68 18,25 16 50 16", "28 34 64 34,62 72 74 72,29 47 80 47,62 15 77 15", "25 62 60 62,16 60 56 60,52 14 54 14,6 28 51 28", "39 64 59 64,7 30 47 30,3 79 55 79,40 12 63 12", "46 15 62 15,50 30 63 30,19 47 29 47,32 78 40 78", "15 17 53 17,31 40 49 40,25 56 27 56,5 55 54 55", "27 19 51 19,38 14 52 14,24 66 52 66,69 46 72 46", "7 44 17 44,47 30 50 30,64 34 65 34,31 52 47 52", "17 62 25 62,56 48 72 48,6 9 61 9,26 25 31 25", "1 17 15 17,0 20 80 20,53 17 72 17,25 70 56 70", "2 60 16 60,19 23 24 23,14 67 38 67,13 59 23 59", "54 16 62 16,54 46 66 46,17 0 30 0,11 74 19 74", "34 65 75 65,13 27 14 27,45 74 46 74,26 77 59 77", "57 32 71 32,53 13 66 13,40 13 53 13,56 10 79 10", "5 19 8 19,18 37 61 37,4 14 38 14,13 6 34 6", "45 36 53 36,6 76 35 76,19 27 49 27,38 67 49 67", "61 9 77 9,17 16 25 16,13 19 27 19,60 54 63 54", "22 80 33 80,64 74 70 74,43 15 46 15,6 24 19 24", "12 73 20 73,69 14 76 14,32 8 38 8,35 76 76 76", "19 66 24 66,1 25 26 25,1 67 7 67,2 18 11 18", "9 33 13 33,25 12 40 12,35 2 39 2,11 29 76 29", "23 12 25 12,56 60 78 60,16 47 19 47,8 19 13 19", "10 31 38 31,60 26 70 26,60 62 76 62,52 66 67 66", "44 45 48 45,5 53 44 53,54 49 58 49,40 73 43 73", "16 8 32 8,34 2 35 2,13 15 32 15,0 55 5 55", "28 73 40 73,52 0 79 0,63 30 67 30,54 61 69 61", "77 9 79 9,25 42 26 42,2 59 9 59,11 69 76 69", "67 53 74 53,10 63 46 63,41 46 53 46,4 21 44 21", "78 60 80 60,19 72 28 72,44 21 51 21,11 75 22 75", "35 64 39 64,8 7 75 7,25 13 40 13,32 15 43 15", "26 42 33 42,55 5 77 5,0 3 27 3,53 73 77 73", "7 0 17 0,24 36 27 36,0 70 25 70,26 45 29 45", "6 43 31 43,27 52 31 52,47 52 73 52,11 45 26 45", "6 38 16 38,12 23 19 23,48 6 71 6,16 52 27 52", "44 72 62 72,40 22 43 22,6 1 67 1,23 75 31 75", "56 70 58 70,2 41 7 41,38 26 50 26,67 50 77 50", "6 4 76 4,6 6 13 6,33 58 55 58,78 49 80 49", "48 45 59 45,12 59 13 59,21 80 22 80,0 35 11 35", "10 13 25 13,30 40 31 40,28 40 30 40,5 11 40 11", "16 12 23 12,4 10 11 10,25 77 26 77,2 69 11 69", "12 34 13 34,8 48 10 48,37 51 80 51,40 11 49 11", "32 59 35 59,61 37 78 37,25 5 47 5,44 32 54 32", "22 75 23 75,47 5 55 5,9 67 14 67,42 45 44 45", "28 51 37 51,5 48 8 48,23 59 32 59,17 56 19 56", "62 56 71 56,34 71 40 71,15 54 40 54,0 31 10 31"};
    vector<string> hier2 = {"24 45 41 45,1 32 2 32,8 78 71 78,29 9 61 9", "15 35 77 35,22 54 65 54,14 27 33 27,21 6 49 6", "9 27 14 27,32 38 73 38,19 61 68 61,67 20 68 20", "35 19 49 19,21 26 63 26,10 75 79 75,60 44 75 44", "27 3 63 3,12 32 65 32,11 24 53 24,31 5 74 5", "67 73 75 73,27 46 69 46,46 49 79 49,1 19 35 19", "49 6 56 6,62 24 65 24,33 48 78 48,52 79 54 79", "45 66 63 66,29 48 33 48,7 8 45 8,39 66 45 66", "19 77 68 77,34 30 63 30,13 12 71 12,20 31 50 31", "10 40 46 40,50 31 52 31,65 4 74 4,12 20 16 20", "75 44 80 44,11 7 35 7,1 58 69 58,19 49 46 49", "32 70 70 70,61 9 67 9,78 48 79 48,13 57 49 57", "37 72 68 72,18 52 25 52,31 39 55 39,2 36 11 36", "21 43 45 43,74 5 75 5,48 43 61 43,5 51 40 51", "10 2 35 2,1 0 8 0,22 70 32 70,22 53 78 53", "19 65 60 65,14 1 22 1,10 53 22 53,11 76 52 76", "63 26 78 26,6 16 51 16,17 52 18 52,58 40 67 40", "11 57 13 57,52 76 80 76,28 68 56 68,14 28 15 28", "5 76 11 76,14 60 61 60,78 72 79 72,54 40 58 40", "8 33 38 33,21 36 25 36,40 73 58 73,39 25 61 25", "63 3 71 3,16 37 67 37,28 62 48 62,35 50 42 50", "28 25 39 25,42 11 67 11,6 40 10 40,9 20 12 20", "50 34 63 34,22 22 70 22,45 43 48 43,41 45 71 45", "49 19 68 19,27 18 54 18,34 20 40 20,56 68 77 68", "58 67 67 67,6 60 14 60,4 50 35 50,0 31 20 31", "43 2 78 2,16 41 30 41,11 36 21 36,13 9 29 9", "12 10 20 10,4 78 8 78,25 80 46 80,41 79 52 79", "35 63 71 63,46 29 69 29,2 50 4 50,68 15 76 15", "25 64 46 64,29 14 71 14,60 65 72 65,54 18 78 18", "7 69 57 69,66 79 69 79,17 25 28 25,71 79 76 79", "65 16 72 16,3 68 28 68,61 43 70 43,38 67 42 67", "50 0 69 0,11 22 22 22,7 53 10 53,9 29 18 29", "34 34 50 34,3 8 7 8,21 11 42 11,8 10 12 10", "2 23 3 23,14 70 22 70,7 33 8 33,57 69 76 69", "4 32 8 32,35 71 63 71,71 41 76 41,3 76 5 76", "59 51 66 51,2 57 11 57,23 56 33 56,3 20 9 20", "3 64 25 64,74 29 78 29,0 41 16 41,7 42 44 42", "1 33 7 33,20 4 47 4,65 32 68 32,13 37 16 37", "61 60 64 60,7 34 32 34,0 64 3 64,13 63 21 63", "4 27 9 27,7 39 9 39,1 15 2 15,7 18 27 18", "2 17 7 17,5 38 30 38,43 41 64 41,5 12 13 12", "44 74 55 74,67 52 69 52,12 4 20 4,43 28 54 28", "54 64 75 64,11 6 17 6,21 28 43 28,67 1 78 1", "10 71 35 71,14 47 32 47,58 73 59 73,33 36 74 36", "3 55 43 55,13 48 29 48,69 46 73 46,9 54 22 54", "7 44 52 44,39 13 77 13,54 28 67 28,30 38 32 38", "8 77 19 77,10 30 34 30,53 62 59 62,2 29 9 29", "33 29 46 29,3 54 9 54,1 9 13 9,74 20 77 20", "43 47 45 47,10 52 17 52,8 13 26 13,61 25 63 25", "65 24 75 24,48 67 58 67,49 27 77 27,38 33 71 33"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 4895;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> hier1 = {"47 26 47 73,34 27 74 27,33 45 70 45,17 70 17 79", "33 12 77 12,15 47 65 47,77 1 77 42,4 59 4 75", "12 27 34 27,12 15 56 15,28 29 28 61,55 62 57 62", "2 42 16 42,39 79 51 79,28 2 51 2,39 3 52 3", "12 9 18 9,6 39 34 39,51 38 51 78,18 52 26 52", "25 56 75 56,42 59 74 59,53 30 53 42,23 66 66 66", "21 43 31 43,55 24 55 51,52 43 52 75,7 63 40 63", "14 41 43 41,62 62 70 62,9 66 23 66,20 35 22 35", "4 44 75 44,10 1 53 1,6 19 75 19,47 11 79 11", "41 4 63 4,46 71 61 71,41 8 51 8,45 29 63 29", "11 3 39 3,61 54 80 54,17 50 17 67,43 68 49 68", "63 46 65 46,15 20 33 20,17 40 70 40,5 37 52 37", "70 45 79 45,24 64 46 64,22 6 76 6,48 65 71 65", "12 18 12 59,32 23 40 23,9 26 9 77,19 58 21 58", "26 35 56 35,8 28 69 28,29 25 60 25,2 73 45 73", "73 0 73 66,10 26 73 26,14 79 39 79,5 11 7 11", "3 6 22 6,23 55 27 55,5 41 14 41,22 34 23 34", "18 72 53 72,53 51 78 51,50 56 50 64,43 67 75 67", "29 49 41 49,25 71 38 71,45 73 50 73,61 20 78 20", "54 78 67 78,67 78 70 78,2 11 5 11,37 36 37 65", "13 52 18 52,0 12 3 12,11 30 15 30,4 18 39 18", "14 25 29 25,6 26 10 26,74 25 74 44,18 55 18 77", "15 56 25 56,37 31 37 36,9 1 10 1,34 38 72 38", "33 20 61 20,51 50 75 50,35 32 48 32,9 15 12 15", "79 56 79 64,20 48 24 48,8 42 8 66,33 14 49 14", "2 9 2 31,13 22 28 22,31 11 47 11,3 33 10 33", "0 37 5 37,46 64 79 64,1 53 44 53,18 32 35 32", "4 62 15 62,16 42 80 42,3 13 70 13,2 68 43 68", "39 51 53 51,52 37 67 37,42 75 51 75,5 8 41 8", "68 49 78 49,3 48 20 48,15 31 69 31,53 72 74 72", "28 22 43 22,2 21 46 21,0 22 13 22,18 64 24 64", "51 79 65 79,30 41 30 51,33 16 33 39,27 36 28 36", "25 70 34 70,25 34 44 34,34 70 58 70,48 15 48 60", "19 14 33 14,29 23 32 23,68 16 74 16,6 1 9 1", "55 7 72 7,1 80 40 80,5 46 10 46,69 79 80 79", "45 49 62 49,70 56 70 70,0 40 14 40,70 13 80 13", "76 6 78 6,7 4 41 4,6 25 8 25,41 10 51 10", "26 0 26 27,51 10 66 10,21 70 25 70,17 29 34 29", "22 0 22 64,45 5 45 28,42 60 42 67,69 36 71 36", "15 32 18 32,43 76 76 76,69 28 79 28,53 1 65 1", "39 78 54 78,5 66 9 66,2 56 10 56,10 3 11 3", "21 18 21 28,40 80 44 80,18 43 21 43,15 30 70 30", "0 70 13 70,2 5 38 5,27 33 45 33,75 17 75 38", "54 3 79 3,5 24 14 24,44 7 55 7,42 17 77 17", "34 65 48 65,61 34 61 63,21 31 21 41,34 39 72 39", "33 48 56 48,22 64 22 70,8 32 15 32,31 10 35 10", "27 1 27 17,6 15 6 55,34 0 75 0,0 54 56 54", "8 16 38 16,23 47 23 56,35 55 58 55,14 24 45 24", "52 3 54 3,18 57 38 57,47 34 73 34,9 23 13 23", "11 7 44 7,3 57 18 57,4 2 25 2,52 75 52 78"};
    vector<string> hier2 = {"20 78 45 78,76 22 78 22,2 42 65 42,58 31 79 31", "1 29 19 29,8 47 37 47,2 51 66 51,0 55 25 55", "18 52 47 52,76 27 77 27,25 75 80 75,45 59 45 80", "21 20 43 20,11 12 11 40,14 0 40 0,25 9 42 9", "37 47 59 47,68 2 73 2,45 46 70 46,34 24 67 24", "20 67 62 67,26 14 71 14,38 8 59 8,68 17 68 27", "6 39 24 39,70 72 73 72,7 7 7 70,14 72 55 72", "19 73 36 73,16 15 75 15,9 32 37 32,65 35 74 35", "16 1 27 1,6 8 38 8,18 56 61 56,76 77 79 77", "2 72 14 72,44 36 66 36,78 55 78 65,15 38 52 38", "16 12 20 12,28 36 33 36,4 48 39 48,77 43 77 60", "48 77 59 77,30 49 59 49,64 27 64 63,43 57 74 57", "23 35 27 35,50 61 64 61,21 5 38 5,41 30 78 30", "67 24 75 24,49 26 80 26,17 19 19 19,1 23 16 23", "35 35 39 35,49 63 70 63,10 49 27 49,52 47 52 63", "2 20 21 20,26 11 51 11,37 30 41 30,5 68 55 68", "2 63 16 63,34 69 69 69,8 25 24 25,39 22 39 65", "57 25 70 25,51 21 62 21,13 76 18 76,24 2 68 2", "60 47 63 47,60 16 76 16,44 80 53 80,10 57 37 57", "43 29 53 29,36 3 36 29,45 78 51 78,48 18 48 39", "21 41 39 41,51 34 51 54,3 32 9 32,6 28 62 28", "33 46 45 46,65 58 77 58,39 48 50 48,53 38 53 52", "0 10 68 10,15 79 20 79,29 4 63 4,2 59 54 59", "65 42 67 42,65 10 65 45,37 7 60 7,11 62 16 62", "6 44 8 44,37 32 62 32,77 37 77 43,32 64 32 77", "49 76 60 76,25 2 25 12,4 5 4 79,16 37 50 37", "76 6 76 33,2 64 37 64,9 4 29 4,19 61 27 61", "64 7 64 20,64 64 67 64,42 23 64 23,3 28 5 28", "6 9 25 9,27 1 39 1,10 33 63 33,38 5 79 5", "20 14 26 14,2 3 14 3,15 70 37 70,24 22 71 22", "7 76 13 76,50 41 59 41,7 77 48 77,62 41 63 41", "28 4 28 79,49 31 58 31,53 25 57 25,10 70 15 70", "76 53 79 53,40 3 40 69,50 74 72 74,49 15 49 72", "51 11 56 11,16 17 64 17,47 59 47 75,42 25 42 34", "17 30 37 30,44 50 69 50,41 66 48 66,13 33 13 75", "30 34 77 34,7 11 26 11,1 62 8 62,23 34 30 34", "7 15 16 15,22 10 22 77,3 44 6 44,8 17 16 17", "59 77 74 77,8 66 41 66,11 13 38 13,4 1 16 1", "20 12 26 12,14 36 28 36,8 35 23 35,71 55 71 75", "48 39 48 56,54 78 65 78,19 69 34 69,11 1 11 12", "63 0 63 60,49 71 59 71,7 61 19 61,43 53 58 53", "10 19 10 69,8 6 38 6,23 29 42 29,43 0 43 34", "61 56 67 56,15 56 18 56,2 42 2 49,17 26 17 52", "67 64 77 64,63 8 80 8,2 54 16 54,33 36 44 36", "66 34 66 49,5 28 6 28,62 67 75 67,16 63 32 63", "59 41 59 43,52 45 55 45,42 74 50 74,3 15 7 15", "20 71 20 76,13 46 33 46,72 17 80 17,24 39 38 39", "48 60 48 80,79 14 79 77,21 29 23 29,0 37 16 37", "40 71 49 71,36 34 36 38,14 3 49 3,18 34 23 34", "45 38 45 55,1 68 5 68,49 3 62 3,29 37 29 49"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6288;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> hier1 = {"3 55 3 68,57 4 57 19,45 30 45 53,59 34 59 68", "7 18 38 18,38 3 38 78,49 14 49 52,47 47 54 47", "29 32 29 54,41 34 41 76,74 5 74 49,25 22 25 24", "15 44 15 59,42 53 78 53,35 43 35 48,8 71 54 71", "11 23 11 25,80 13 80 45,33 35 33 76,0 3 20 3", "28 21 28 65,69 15 69 70,10 4 14 4,63 7 63 72", "46 6 46 66,1 31 1 78,1 4 1 31,39 7 39 72", "11 11 11 23,59 14 59 34,48 6 48 23,36 39 36 59", "52 56 52 58,23 42 23 73,57 19 57 46,43 5 43 32", "56 5 56 22,72 18 72 47,78 24 78 28,61 14 61 43", "22 46 22 54,21 27 21 41,60 47 60 54,75 4 75 53", "76 26 76 32,29 13 29 32,47 55 71 55,21 41 21 73", "20 8 46 8,35 8 35 43,7 1 7 36,24 3 37 3", "11 47 11 68,11 2 35 2,69 70 69 75,3 68 3 77", "59 3 59 14,71 34 71 41,20 3 24 3,60 18 60 47", "6 17 6 80,2 57 2 59,64 50 64 68,72 15 72 18", "27 66 44 66,49 0 49 14,4 65 37 65,33 39 52 39", "78 18 78 24,40 48 40 79,24 66 27 66,47 18 47 43", "47 15 47 18,5 11 5 37,23 20 23 42,71 3 71 34", "62 11 62 52,41 50 48 50,22 15 52 15,31 7 31 77", "60 6 60 16,24 27 24 74,19 61 70 61,21 12 21 16", "0 17 0 20,41 10 41 34,56 30 56 62,68 7 68 48", "11 68 11 79,54 7 54 10,80 45 80 68,2 41 2 57", "77 22 77 49,2 20 2 41,25 77 41 77,14 31 21 31", "64 0 64 50,77 49 77 61,38 18 41 18,30 13 30 35", "9 47 9 53,5 37 5 40,3 5 3 14,52 3 52 43", "67 14 67 44,76 1 76 11,29 54 29 70,60 54 60 69", "9 48 40 48,34 11 34 20,15 6 15 44,5 40 5 57", "68 19 74 19,78 48 78 80,48 4 48 6,44 66 58 66", "37 28 66 28,37 17 37 61,48 27 48 61,31 2 31 7", "9 11 9 15,64 76 64 78,53 12 53 59,76 37 76 49", "50 12 50 33,24 5 24 27,17 8 17 49,24 3 24 5", "20 69 41 69,42 16 72 16,21 4 21 12,25 10 25 22", "10 27 10 55,4 2 4 16,10 37 32 37,13 54 48 54", "58 32 58 38,9 25 21 25,52 56 57 56,63 78 76 78", "14 1 14 31,5 55 47 55,57 46 57 73,36 32 36 39", "79 22 79 71,32 8 32 36,70 54 70 65,29 75 57 75", "23 10 23 20,31 70 40 70,65 0 65 62,17 5 17 8", "16 40 16 50,26 44 26 68,80 68 80 78,66 7 66 11", "34 60 34 77,75 53 75 68,18 1 18 26,31 39 33 39", "29 40 54 40,17 60 17 80,78 34 78 48,56 62 56 77", "55 44 55 57,55 13 55 25,75 1 75 4,70 68 70 71", "48 23 48 27,51 38 51 60,77 1 77 22,30 16 42 16", "9 43 9 47,61 46 61 72,47 43 47 49,20 22 20 25", "67 71 67 79,19 10 20 10,20 67 45 67,66 6 66 7", "20 16 20 22,49 1 66 1,22 5 22 7,32 41 32 77", "30 56 39 56,14 34 47 34,3 62 19 62,42 67 42 77", "62 1 62 11,12 36 79 36,4 16 4 17,79 14 79 22", "73 37 73 41,25 57 25 74,44 74 47 74,4 41 64 41", "51 9 51 10,2 7 63 7,22 25 72 25,35 4 35 8"};
    vector<string> hier2 = {"9 26 9 53,1 37 1 70,75 71 75 72,12 27 12 55", "33 2 74 2,50 45 50 78,1 12 1 37,47 31 47 44", "46 21 71 21,10 50 10 64,59 44 59 46,58 12 58 32", "23 12 68 12,24 12 24 22,32 21 32 50,73 16 73 79", "30 8 30 71,20 48 20 74,58 32 58 66,11 17 11 30", "54 40 54 71,80 36 80 52,26 57 26 78,10 44 10 50", "37 17 37 78,15 27 70 27,69 19 69 66,3 42 43 42", "11 55 11 61,29 71 29 75,16 39 16 44,52 22 52 47", "2 3 2 67,26 10 26 45,57 13 57 36,27 30 27 62", "28 16 28 20,28 53 28 54,11 4 11 17,61 33 61 41", "49 45 78 45,41 9 41 16,10 5 10 37,4 22 4 66", "45 24 45 27,63 54 63 76,35 58 35 72,74 26 74 50", "46 21 46 54,58 66 58 74,65 18 65 68,77 6 77 8", "1 10 1 12,3 2 3 20,24 39 60 39,77 0 77 6", "22 9 22 50,67 23 67 65,59 46 59 61,70 10 70 58", "7 1 22 1,76 47 76 52,36 41 36 55,55 20 55 60", "33 16 33 24,28 43 28 53,3 20 3 28,29 14 29 26", "58 72 78 72,40 57 40 58,63 44 63 51,31 24 31 38", "36 24 36 25,42 40 42 69,47 44 47 74,25 33 67 33", "17 24 17 52,25 49 25 55,28 68 28 79,54 11 54 40", "1 5 1 10,57 46 57 70,43 16 43 30,5 65 57 65", "77 69 77 77,25 61 62 61,2 16 35 16,32 49 40 49", "3 62 3 63,14 53 14 59,42 25 72 25,55 12 55 20", "59 17 59 44,19 18 19 74,3 69 3 79,4 4 4 22", "58 63 73 63,10 37 10 44,14 17 54 17,12 9 12 22", "18 26 72 26,72 1 72 52,34 0 34 39,13 5 13 6", "13 12 13 34,68 42 68 47,48 19 48 64,24 46 24 52", "69 7 69 19,10 11 29 11,32 71 58 71,62 25 62 68", "57 65 74 65,32 64 76 64,29 29 29 37,48 2 48 19", "63 40 63 44,58 67 62 67,65 17 65 18,21 3 21 17", "8 54 8 72,16 44 59 44,35 46 35 58,32 9 32 21", "33 2 33 16,72 52 72 53,23 56 43 56,41 36 41 76", "61 41 61 49,7 2 7 61,0 66 42 66,52 47 52 57", "78 34 78 42,14 21 14 53,8 15 8 22,60 57 60 59", "55 60 55 69,59 1 59 17,64 13 64 57,2 36 11 36", "22 50 22 51,13 34 13 35,23 32 60 32,0 67 0 77", "48 64 48 65,34 50 57 50,18 23 18 47,38 55 49 55", "46 8 49 8,49 21 49 23,67 13 67 17,47 7 47 13", "35 5 35 46,51 61 51 78,53 14 53 48,79 11 79 21", "36 38 36 41,75 40 75 58,46 54 46 75,28 41 28 43", "50 9 50 45,37 11 64 11,51 5 51 61,23 14 23 35", "68 59 68 62,27 30 67 30,24 78 55 78,79 61 79 62", "80 63 80 72,27 62 27 68,45 0 45 9,14 71 32 71", "25 20 53 20,1 47 53 47,53 10 53 14,71 14 71 68", "64 10 64 13,17 57 17 61,63 12 63 40,67 65 67 75", "49 58 49 66,0 21 46 21,71 2 71 14,28 4 28 16", "75 22 75 40,9 76 46 76,14 14 14 21,45 9 45 13", "53 77 66 77,70 58 70 79,15 39 15 64,4 54 38 54", "78 45 78 64,38 53 38 66,78 3 78 34,23 13 23 14", "77 51 77 69,44 53 48 53,44 58 64 58,36 25 36 38"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6387;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> hier1 = {"23 40 76 40,5 52 7 52,5 16 61 16,30 29 30 34", "10 1 24 1,41 1 41 27,6 40 23 40,46 8 66 8", "16 0 21 0,11 6 37 6,51 72 51 73,65 10 67 10", "49 3 65 3,44 7 44 70,23 21 23 68,29 57 68 57", "74 38 74 49,1 47 56 47,50 5 58 5,15 59 15 69", "4 7 4 70,18 33 39 33,17 51 48 51,29 75 45 75", "40 27 69 27,7 79 53 79,60 14 60 17,12 77 67 77", "65 64 68 64,46 38 80 38,16 71 59 71,53 79 66 79", "53 6 72 6,52 51 74 51,21 0 55 0,19 24 58 24", "30 72 30 77,71 50 74 50,14 11 31 11,44 44 66 44", "30 27 40 27,49 39 57 39,67 77 80 77,2 65 47 65", "35 73 60 73,56 47 58 47,15 64 22 64,22 3 49 3", "9 70 41 70,16 40 16 54,63 9 70 9,34 68 43 68", "58 24 77 24,38 41 57 41,22 21 70 21,23 8 23 21", "0 76 8 76,20 49 64 49,51 28 52 28,3 45 33 45", "25 35 26 35,18 78 30 78,12 36 77 36,71 26 71 40", "65 52 71 52,70 4 70 56,38 62 60 62,30 56 30 72", "7 25 26 25,5 54 19 54,12 23 47 23,40 38 40 48", "14 7 14 16,50 75 55 75,1 44 44 44,7 23 12 23", "76 8 76 56,2 63 55 63,5 64 7 64,60 10 60 14", "14 16 14 38,23 54 48 54,17 41 22 41,10 28 23 28", "7 66 52 66,25 62 37 62,16 8 46 8,15 19 79 19", "63 32 63 74,9 10 22 10,14 17 21 17,8 69 43 69", "50 19 50 40,0 6 11 6,77 17 77 18,7 7 11 7", "28 36 28 78,45 59 70 59,1 28 10 28,17 56 51 56", "78 5 78 68,34 55 36 55,19 54 23 54,1 32 1 43", "44 5 44 7,41 28 41 58,75 0 75 79,0 13 77 13", "1 1 10 1,21 35 25 35,21 6 21 77,58 29 67 29", "9 35 21 35,37 62 38 62,50 48 75 48,13 4 20 4", "52 69 52 76,73 17 73 67,10 27 30 27,55 20 68 20", "45 21 45 75,45 43 71 43,53 25 75 25,33 18 46 18", "27 20 49 20,8 10 9 10,31 61 51 61,6 74 41 74", "38 72 75 72,38 58 78 58,31 11 36 11,32 80 34 80", "43 10 47 10,41 37 66 37,9 29 38 29,48 75 50 75", "3 72 38 72,69 8 73 8,6 1 6 62,3 18 8 18,5 42 54 42", "7 27 10 27,5 31 5 68,13 41 17 41,31 16 31 76", "65 19 65 35,23 52 65 52,8 19 15 19,2 5 2 55", "38 14 46 14,34 78 69 78,63 7 63 32,64 12 64 72", "15 52 23 52,16 51 17 51,4 35 9 35,25 50 50 50", "55 3 55 45,69 62 73 62,71 40 71 64,6 41 13 41", "2 19 8 19,38 45 59 45,4 73 35 73,57 65 57 66", "55 63 64 63,47 23 68 23,36 17 40 17,63 39 73 39", "6 26 74 26,47 65 58 65,20 0 20 65,29 4 70 4", "2 56 17 56,15 50 25 50,6 36 12 36,37 13 37 63", "52 66 52 69,66 7 78 7,52 64 62 64,51 33 77 33", "17 38 22 38,0 1 1 1,18 0 18 37,4 16 5 16,5 69 5 71", "35 64 52 64,55 32 57 32,4 74 5 74,64 49 73 49", "9 53 23 53,79 20 80 20,40 48 40 54,18 5 50 5", "67 30 75 30,65 3 65 19,6 31 44 31,50 9 63 9", "1 72 3 72,3 16 3 57,0 14 2 14,49 20 55 20"};
    vector<string> hier2 = {"36 38 36 46,21 43 78 43,72 12 72 25,17 41 79 41", "21 46 23 46,57 41 57 74,23 80 63 80,32 19 32 66", "5 36 15 36,1 32 7 32,36 23 36 38,5 26 41 26", "26 36 26 46,41 26 48 26,20 14 47 14,21 3 66 3", "9 70 45 70,45 70 60 70,7 32 69 32,26 45 35 45", "67 12 67 55,32 66 41 66,35 71 53 71,51 18 63 18", "20 28 70 28,61 7 61 38,12 59 79 59,25 47 57 47", "3 44 59 44,62 14 62 32,62 34 80 34,56 15 56 47", "12 47 25 47,10 33 27 33,45 0 45 30,55 61 57 61", "59 44 80 44,55 50 55 68,18 8 20 8,3 61 3 64", "11 75 49 75,42 48 42 52,1 9 19 9,6 1 7 1", "68 25 80 25,7 28 20 28,29 52 67 52,48 8 48 43", "77 2 77 78,57 62 63 62,66 3 74 3,69 15 69 59", "30 0 56 0,21 5 77 5,42 20 75 20,11 54 29 54", "2 27 66 27,16 62 57 62,24 2 70 2,47 14 74 14", "54 74 61 74,56 42 72 42,5 70 9 70,26 4 26 36", "67 70 67 75,7 23 70 23,9 60 48 60,4 65 48 65", "26 50 44 50,15 36 66 36,14 30 26 30,5 55 79 55", "33 51 54 51,0 16 22 16,22 9 68 9,56 58 58 58", "6 6 6 33,76 52 76 70,5 11 39 11,13 1 58 1", "61 58 61 61,58 25 68 25,66 53 74 53,65 9 65 37", "36 20 42 20,58 1 71 1,22 4 22 33,24 68 51 68", "3 61 35 61,1 27 2 27,2 39 67 39,47 47 47 62", "64 51 76 51,25 34 62 34,69 8 69 15,41 33 48 33", "7 14 16 14,66 8 73 8,0 45 26 45,53 71 74 71", "31 78 31 79,32 17 32 19,29 49 71 49,27 62 27 79", "10 35 52 35,1 3 21 3,12 21 69 21,37 9 37 23", "45 58 48 58,32 7 32 17,9 48 12 48,37 67 72 67", "42 22 66 22,27 7 48 7,39 72 72 72,20 66 32 66", "22 22 40 22,27 33 41 33,8 78 47 78,11 1 13 1", "28 19 28 49,0 34 10 34,28 19 63 19,25 46 37 46", "58 57 60 57,62 32 62 69,36 72 39 72,5 0 6 0", "73 0 73 62,8 47 8 62,1 58 30 58,34 74 54 74", "23 52 29 52,6 33 6 78,2 56 14 56,44 0 44 46", "23 29 35 29,77 30 79 30,12 67 37 67,23 46 25 46", "10 18 51 18,4 22 14 22,38 64 39 64,37 43 37 50", "5 8 18 8,17 7 27 7,23 27 23 39,55 53 57 53", "69 32 73 32,72 38 77 38,63 19 73 19,0 6 0 36", "18 52 23 52,15 2 24 2,56 47 56 60,58 4 63 4", "16 14 20 14,16 71 23 71,7 21 12 21,56 7 56 15", "20 42 20 50,1 55 5 55,5 48 9 48,63 80 69 80", "18 28 18 57,4 30 14 30,2 11 5 11,24 50 26 50", "47 53 55 53,53 28 53 45,21 29 23 29,7 52 7 70", "11 24 25 24,1 0 1 29,64 6 64 80,26 63 40 63", "12 15 12 69,45 73 76 73,42 9 42 10,59 3 59 75", "53 50 54 50,24 56 31 56,4 66 8 66,2 38 6 38", "69 21 76 21,0 26 5 26,70 2 71 2,2 76 60 76", "31 10 76 10,0 33 7 33,11 40 32 40,74 11 77 11", "64 61 71 61,56 4 58 4,24 8 59 8,8 19 9 19", "18 22 18 25,5 35 10 35,59 40 71 40,60 50 67 50"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6680;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> hier1 = {"64 32 64 48,57 4 57 77,62 22 62 30,79 24 79 65", "38 65 38 72,29 0 29 64,40 23 40 42,12 52 12 77", "42 66 42 71,46 23 46 47,4 75 4 78,50 49 50 52", "27 32 27 74,2 22 2 23,47 68 47 80,66 30 66 67", "16 74 26 74,9 4 9 65,71 35 71 42,11 22 11 58", "58 5 62 5,37 62 37 72,74 0 74 25,58 38 58 67", "0 11 0 45,17 27 17 45,4 22 4 27,38 14 38 65", "63 7 63 43,13 19 26 19,69 35 69 76,46 21 54 21", "27 18 27 29,28 18 71 18,75 6 75 44,10 12 10 44", "14 68 14 71,4 29 4 75,78 6 78 46,50 18 50 49", "50 59 50 75,43 6 43 41,76 37 76 76,5 7 5 70", "45 37 45 74,52 46 52 49,68 21 68 72,53 45 53 64", "18 47 18 58,2 14 2 21,28 60 28 63,29 64 29 72", "31 39 67 39,49 14 49 35,64 23 64 32,28 45 28 54", "69 19 69 35,2 40 22 40,15 1 15 28,14 57 14 68", "25 64 41 64,1 9 1 51,42 20 42 24,25 19 25 38", "10 44 10 58,25 2 25 19,56 62 60 62,66 13 66 30", "2 40 2 42,23 15 23 71,77 20 77 21,62 16 62 22", "71 11 71 24,29 71 53 71,78 46 78 58,26 70 26 76", "5 70 5 79,37 13 37 62,72 38 72 67,21 67 65 67", "16 23 16 67,59 43 59 71,64 48 64 62,31 9 31 22", "1 5 1 9,8 40 8 62,75 44 75 63,62 37 62 46", "62 4 62 16,70 10 70 61,28 11 28 45,3 27 3 69", "26 16 26 67,18 64 25 64,14 10 14 15,71 48 71 77", "31 22 31 32,15 28 15 78,69 14 69 19,33 73 33 75", "34 36 34 44,77 2 77 8,22 0 22 43,31 44 31 62", "7 13 28 13,59 78 70 78,0 57 0 67,19 8 19 45", "43 15 72 15,41 0 41 4,42 31 42 66,54 6 54 34", "55 33 57 33,23 71 23 77,23 3 23 9,24 35 24 55", "21 10 21 47,49 50 62 50,56 30 56 68,26 62 56 62", "26 14 26 16,59 71 59 77,64 8 64 23,9 65 12 65", "7 0 7 57,46 5 46 23,8 17 8 40,46 3 46 5", "34 41 70 41,45 13 45 37,54 3 54 6,40 3 40 19", "61 15 61 57,78 70 78 75,26 5 26 14,56 5 56 30", "49 35 49 63,43 52 73 52,27 16 27 18,25 38 25 64", "68 2 75 2,80 18 80 46,8 41 22 41,3 4 25 4", "22 66 22 73,67 64 67 77,41 22 62 22,41 23 41 29", "33 21 46 21,50 55 50 59,20 5 20 16,53 5 53 45", "6 64 6 80,13 45 13 67,72 32 72 38,72 9 72 32", "37 59 79 59,22 43 22 53,16 67 16 78,32 33 51 33", "47 67 47 68,55 63 61 63,3 69 3 74,47 21 47 67", "33 8 33 26,76 8 76 37,34 50 34 74,0 34 16 34", "35 2 35 20,71 24 71 35,2 23 2 40,50 3 50 18", "15 50 49 50,44 3 44 71,63 43 63 68,2 9 2 14", "68 1 68 21,35 0 35 2,31 23 69 23,73 7 79 7", "22 41 34 41,39 24 39 54,11 58 11 74,56 68 56 77", "69 10 69 12,73 0 73 17,70 3 70 10,67 39 72 39", "53 12 56 12,49 63 49 69,50 25 69 25,24 69 24 73", "11 24 54 24,6 78 14 78,54 57 54 77,20 18 23 18", "71 47 71 48,78 58 78 70,10 55 72 55,57 77 57 80"};
    vector<string> hier2 = {"47 21 47 61,70 62 70 67,16 66 36 66,60 5 60 48", "35 62 35 75,16 29 34 29,57 15 57 38,53 9 64 9", "24 16 24 64,12 58 32 58,68 61 68 78,52 78 79 78", "2 45 2 63,67 33 67 74,78 50 78 64,6 3 64 3", "71 33 71 69,30 23 30 62,53 72 53 80,42 7 42 34", "28 37 28 48,41 45 41 53,35 25 35 33,2 3 2 8", "23 4 23 38,45 1 45 53,14 63 14 79,48 7 48 62", "67 10 67 33,2 34 19 34,7 21 18 21,63 39 63 80", "47 13 47 21,74 29 74 30,29 24 29 36,21 50 38 50", "58 31 58 49,80 7 80 39,77 20 77 38,50 11 50 74", "26 10 26 34,5 24 16 24,11 1 11 48,58 27 58 31", "63 11 63 39,5 19 5 60,75 33 76 33,5 16 5 19", "8 13 80 13,16 17 16 80,11 63 11 76,79 12 79 47", "24 64 24 67,4 18 4 34,75 34 78 34,32 59 69 59", "21 35 21 52,12 14 12 32,40 8 40 13,15 5 15 68", "41 11 41 45,24 3 24 16,20 30 20 33,33 46 76 46", "76 38 76 69,3 30 3 34,18 61 18 71,63 2 63 11", "61 77 61 80,4 58 4 68,30 5 30 23,21 71 40 71", "33 25 33 41,51 72 73 72,45 68 45 74,26 60 70 60", "20 34 31 34,75 1 75 10,60 0 60 1,60 48 60 60", "5 14 5 16,59 63 76 63,6 20 40 20,46 4 47 4", "10 38 45 38,37 13 37 60,57 71 57 75,64 13 64 67", "44 12 51 12,20 24 20 30,56 8 74 8,3 10 3 30", "70 7 70 13,56 39 56 78,35 55 35 62,40 58 44 58", "29 25 71 25,68 43 68 50,65 33 65 42,71 26 71 33", "40 71 65 71,0 65 0 79,64 66 70 66,55 32 55 80", "29 4 29 10,72 37 72 67,32 61 32 62,4 20 6 20", "68 1 68 43,66 34 66 72,9 30 9 61,1 67 1 74", "74 19 74 22,67 8 67 10,69 24 69 46,27 7 27 40", "20 2 47 2,10 80 19 80,59 18 59 58,0 16 0 24", "11 19 19 19,27 42 79 42,0 37 0 39,45 33 46 33", "64 67 64 73,35 23 75 23,62 0 62 5,56 45 64 45", "45 53 45 66,33 20 33 25,79 47 79 50,61 12 77 12", "49 19 49 52,39 6 39 53,44 0 44 16,53 63 53 72", "32 1 32 29,48 0 48 4,72 67 72 79,8 6 9 6", "16 7 16 17,61 11 61 35,31 20 31 55,61 5 61 11", "32 60 32 61,54 17 54 75,29 36 29 49,21 75 63 75", "70 5 70 7,70 14 70 28,57 56 70 56,77 38 77 42", "1 11 1 13,10 6 10 25,73 3 73 6,39 53 39 76", "0 5 66 5,5 60 5 71,11 71 21 71,34 28 34 43", "22 4 22 8,20 65 59 65,78 0 78 50,52 6 52 77", "18 23 18 61,40 1 40 4,69 50 69 74,25 59 25 77", "37 1 61 1,28 18 51 18,42 35 42 48,26 34 26 58", "15 72 15 76,36 55 36 80,6 26 6 66,54 14 54 17", "71 13 71 26,70 51 70 62,6 45 23 45,11 62 33 62", "53 35 53 63,0 25 0 37,3 46 3 50,47 30 66 30", "9 44 28 44,21 33 21 35,79 50 79 61,3 68 54 68", "71 0 71 13,25 4 25 11,75 22 75 69,68 18 78 18", "1 69 23 69,4 31 22 31,27 6 27 7,31 55 31 59", "51 18 65 18,60 68 60 74,10 73 10 79,62 48 62 50"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6211;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> hier1 = {"49 71 69 71,31 64 40 64,76 20 76 35,24 15 24 71", "47 35 80 35,8 27 57 27,17 2 30 2,6 28 55 28", "32 24 53 24,71 21 71 42,44 67 55 67,22 80 73 80", "2 25 27 25,58 7 58 56,34 12 48 12,45 54 47 54", "14 49 72 49,66 36 66 76,58 21 73 21,5 36 9 36", "38 40 73 40,22 74 65 74,17 54 45 54,35 67 44 67", "31 53 39 53,15 36 72 36,25 5 30 5,19 3 19 29", "6 43 67 43,19 53 31 53,1 71 10 71,4 3 57 3", "12 26 73 26,11 10 20 10,24 20 48 20,64 56 80 56", "26 7 26 50,20 35 47 35,23 48 54 48,61 18 73 18", "40 41 78 41,32 56 64 56,24 1 65 1,1 30 3 30", "24 76 46 76,30 62 49 62,73 80 76 80,15 58 43 58", "31 13 78 13,45 65 68 65,15 22 42 22,42 59 80 59", "38 23 71 23,22 17 32 17,50 44 53 44,40 73 59 73", "19 4 53 4,7 78 60 78,36 29 45 29,0 67 26 67", "19 71 25 71,67 55 76 55,9 3 9 44,28 21 28 60", "1 1 24 1,10 56 32 56,73 19 73 51,59 28 67 28", "8 28 8 52,7 17 22 17,45 38 67 38,11 47 73 47", "50 6 59 6,2 56 10 56,54 48 74 48,56 22 60 22", "72 49 75 49,68 38 68 50,1 39 7 39,39 53 68 53", "1 46 8 46,0 11 46 11,12 57 49 57,12 80 22 80", "11 54 17 54,38 45 45 45,71 48 71 68,10 66 41 66", "5 66 10 66,19 41 25 41,4 5 18 5,44 39 52 39", "2 73 40 73,53 24 74 24,0 28 6 28,49 18 61 18", "8 26 12 26,39 27 39 55,1 19 37 19,35 42 66 42", "55 57 73 57,7 58 15 58,7 32 47 32,7 16 38 16", "5 13 5 51,56 3 56 50,2 6 21 6,21 47 21 67", "21 67 21 78,4 36 5 36,15 30 15 70,20 36 20 40", "27 25 47 25,50 15 50 64,11 75 16 75,39 72 47 72", "4 48 23 48,44 65 45 65,23 77 61 77,29 6 42 6", "21 70 39 70,21 6 29 6,65 73 73 73,4 51 60 51", "36 34 38 34,9 20 24 20,57 56 57 60,45 75 48 75", "12 62 12 71,11 52 67 52,47 25 52 25,1 80 12 80", "18 64 31 64,3 18 47 18,11 74 22 74,77 75 79 75", "16 75 45 75,27 60 32 60,46 11 61 11,33 30 33 57", "41 16 77 16,13 69 46 69,2 69 2 74,26 63 26 76", "75 7 75 18,79 41 79 70,0 47 11 47,30 5 78 5", "6 24 18 24,52 39 56 39,45 3 45 8,6 64 7 64", "35 72 39 72,75 20 79 20,37 19 53 19,52 25 74 25", "40 57 40 78,33 42 34 42,39 68 69 68,51 31 66 31", "5 0 27 0,21 34 21 47,41 0 55 0,78 41 79 41", "49 57 55 57,8 68 39 68,70 7 70 80,16 23 16 60", "10 65 18 65,74 46 79 46,0 26 6 26,43 58 76 58", "10 18 10 34,41 37 79 37,34 39 44 39,9 35 20 35", "59 70 78 70,26 50 26 63,16 2 17 2,9 31 32 31", "0 10 7 10,0 1 1 1,22 60 27 60,64 7 70 7", "61 9 73 9,56 64 76 64,52 40 52 47,2 6 2 40", "10 71 19 71,19 63 25 63,32 60 44 60,7 10 11 10", "30 2 79 2,14 23 38 23,6 79 34 79,14 2 16 2", "6 50 18 50,6 12 28 12,4 31 9 31,2 75 11 75"};
    vector<string> hier2 = {"19 74 56 74,44 54 67 54,35 23 72 23,67 37 72 37", "54 68 68 68,7 40 40 40,30 43 47 43,27 76 55 76", "7 61 46 61,41 27 52 27,49 32 55 32,10 46 10 60", "41 53 68 53,60 15 60 58,32 67 47 67,8 37 54 37", "15 13 56 13,22 72 78 72,17 5 69 5,6 76 27 76", "3 49 15 49,26 77 35 77,12 39 16 39,38 75 74 75", "23 33 57 33,5 76 6 76,17 6 17 23,48 14 57 14", "16 26 29 26,20 9 24 9,80 43 80 75,15 27 38 27", "46 65 56 65,37 49 69 49,55 32 74 32,7 58 10 58", "16 57 37 57,71 10 71 46,15 0 15 32,0 57 3 57", "6 38 23 38,15 22 18 22,57 9 57 55,6 5 6 62", "3 50 29 50,23 75 38 75,48 63 61 63,56 13 70 13", "20 67 31 67,61 26 61 80,47 67 71 67,74 3 74 39", "0 1 0 35,23 20 31 20,34 23 35 23,13 13 15 13", "1 30 72 30,47 68 54 68,74 39 74 41,6 80 16 80", "48 14 48 30,18 69 37 69,32 48 33 48,14 52 51 52", "1 10 66 10,65 33 74 33,56 78 80 78,13 15 35 15", "27 6 27 56,51 43 69 43,54 4 74 4,14 45 19 45", "15 32 15 79,75 40 75 79,27 56 27 57,37 10 37 35", "51 15 80 15,21 23 21 79,72 51 75 51,10 62 30 62", "6 14 48 14,54 37 67 37,40 40 65 40,18 64 79 64", "13 16 41 16,13 57 16 57,33 49 37 49,67 54 76 54", "21 36 62 36,46 0 46 53,1 5 10 5,1 22 15 22", "43 57 43 66,12 17 46 17,53 61 63 61,3 34 59 34", "37 69 52 69,13 26 16 26,12 4 44 4,18 49 33 49", "24 59 45 59,18 11 28 11,13 75 23 75,14 11 18 11", "71 67 73 67,53 22 64 22,61 12 61 26,8 27 15 27", "51 60 71 60,3 54 3 74,29 8 44 8,12 63 48 63", "23 68 27 68,26 12 26 27,61 63 76 63,30 35 68 35", "3 24 9 24,33 79 57 79,46 61 53 61,52 16 52 24", "22 12 38 12,2 11 14 11,11 18 15 18,29 70 45 70", "8 21 51 21,3 45 14 45,0 31 35 31,76 21 76 29", "61 77 65 77,28 0 77 0,56 17 73 17,42 56 45 56", "18 54 44 54,35 18 51 18,38 4 38 65,31 19 31 49", "2 28 2 72,16 58 17 58,66 14 66 31,3 78 56 78", "4 12 22 12,33 54 33 66,9 26 13 26,11 7 68 7", "48 56 54 56,22 46 36 46,8 47 72 47,72 47 79 47", "48 30 48 57,6 23 16 23,48 39 54 39,68 53 78 53", "17 3 17 6,30 62 39 62,8 32 40 32,52 70 74 70", "25 11 25 40,37 45 55 45,19 29 24 29,5 64 18 64", "4 25 14 25,23 38 27 38,1 67 20 67,74 1 74 3", "46 32 49 32,5 42 7 42,35 31 42 31,1 70 1 78", "9 24 38 24,39 11 65 11,8 73 60 73,57 79 65 79", "3 55 74 55,68 57 74 57,13 68 23 68,69 5 77 5", "74 55 80 55,72 0 72 26,2 49 3 49,32 79 33 79", "1 55 3 55,78 57 78 67,52 42 52 60,23 0 28 0", "11 31 11 73,60 28 63 28,40 30 40 36,8 15 13 15", "0 78 3 78,65 16 73 16,0 9 20 9,55 2 57 2", "26 71 46 71,32 7 32 58,8 46 22 46,40 44 80 44", "11 77 26 77,3 61 7 61,57 33 60 33,32 6 44 6"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6285;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> hier1 = {"49 36 49 78,1 72 18 72,70 20 70 65,20 9 20 32", "68 2 68 49,52 7 52 31,10 7 74 7,62 26 62 48", "33 79 46 79,26 19 26 70,2 38 2 66,33 64 33 70", "32 32 32 74,46 20 46 76,31 59 31 73,69 33 69 59", "27 22 27 74,11 18 16 18,48 14 48 23,4 55 4 66", "37 49 37 51,1 27 1 38,29 13 41 13,39 28 39 53", "56 10 56 26,17 55 42 55,32 74 32 77,55 23 55 74", "22 53 22 77,62 64 66 64,59 7 59 48,3 49 3 68", "10 21 10 68,4 47 8 47,47 56 47 77,1 13 29 13", "16 33 21 33,75 13 75 16,67 21 67 33,39 53 39 60", "29 5 29 24,8 33 16 33,50 19 50 30,36 16 36 17", "53 35 53 42,19 2 49 2,54 30 57 30,67 33 67 75", "68 49 68 73,8 29 8 59,19 13 19 19,29 24 29 28", "59 4 59 7,71 25 71 64,18 62 18 68,14 10 14 72", "9 24 9 61,78 7 78 60,70 54 80 54,70 34 73 34", "60 6 60 67,37 8 77 8,48 43 51 43,53 22 53 29", "28 76 59 76,1 3 1 27,23 25 23 26,8 37 74 37", "39 49 69 49,33 1 49 1,29 31 29 71,31 44 31 59", "41 38 41 75,51 43 78 43,58 8 58 57,76 7 76 50", "66 9 66 12,77 34 77 67,56 26 56 45,5 37 5 71", "8 8 8 21,31 6 31 44,6 63 48 63,53 29 53 35", "37 44 37 45,50 40 50 54,6 35 6 51,17 13 17 67", "21 10 21 28,0 40 77 40,22 77 22 80,7 24 34 24", "44 30 44 49,73 5 73 37,32 21 32 32,74 28 74 37", "51 38 80 38,48 11 48 14,61 57 61 71,16 40 16 74", "12 64 60 64,53 6 53 22,69 59 69 62,24 32 24 76", "0 9 0 56,2 43 36 43,47 0 47 27,27 56 59 56", "8 36 71 36,29 71 29 75,80 75 80 79,33 14 33 45", "36 36 36 40,24 30 24 32,36 54 66 54,8 0 55 0", "21 57 52 57,9 61 9 75,44 14 44 30,5 9 5 37", "59 48 59 55,55 74 55 79,39 17 39 27,80 12 80 73", "45 7 45 8,24 70 76 70,26 17 58 17,19 10 19 13", "11 13 11 58,38 25 38 67,4 21 4 55,48 23 48 53", "0 3 38 3,73 63 73 77,6 53 6 70,51 31 51 76", "71 22 71 25,10 16 10 21,15 39 15 70,59 75 65 75", "37 15 37 41,42 25 42 64,63 34 63 76,75 71 75 79", "24 10 24 30,48 3 48 11,63 5 63 9,16 14 16 40", "56 45 56 69,33 3 33 14,62 13 62 26,47 29 47 56", "40 11 40 16,63 19 63 22,48 53 48 68,32 12 32 21", "22 6 22 20,75 42 75 68,52 62 52 78,23 48 23 57", "45 52 64 52,63 33 63 34,49 3 49 31,11 64 11 68", "38 67 38 69,37 67 37 80,16 12 16 14,38 3 75 3", "66 27 66 77,10 0 10 4,23 45 23 48,9 11 34 11", "63 29 63 33,64 55 64 76,63 25 63 29,61 11 61 46", "43 30 43 57,35 5 35 29,16 2 16 12,61 74 71 74", "2 66 2 78,70 70 70 73,54 21 54 35,51 6 51 31", "55 47 75 47,21 28 21 43,78 2 78 7,50 77 75 77", "12 75 12 80,5 0 5 9,6 67 22 67,61 46 61 57", "7 14 7 19,17 12 17 13,15 20 15 28,3 58 35 58", "73 57 78 57,75 17 75 42,15 70 15 79,35 29 35 39"};
    vector<string> hier2 = {"1 13 1 38,73 3 73 30,29 2 29 17,48 6 48 52", "49 73 62 73,42 48 42 51,23 42 23 74,64 2 64 7", "5 71 63 71,2 30 2 58,24 79 49 79,12 52 12 56", "6 70 80 70,78 10 78 65,37 47 37 69,45 27 45 71", "68 10 68 36,63 9 63 12,74 40 74 59,59 46 59 51", "63 48 63 63,1 15 50 15,43 39 43 65,33 39 55 39", "60 9 60 70,73 46 73 63,37 39 37 47,22 0 22 64", "33 53 33 68,55 9 55 15,64 36 64 42,10 15 10 27", "21 14 22 14,1 75 28 75,21 44 53 44,67 41 67 57", "17 26 17 78,34 56 34 57,27 64 27 69,58 79 59 79", "30 19 30 27,8 72 33 72,38 34 38 74,73 30 73 46", "54 8 54 31,31 23 31 59,68 40 68 76,43 35 43 39", "7 74 40 74,29 61 29 64,8 6 8 34,72 22 79 22", "50 15 50 73,41 3 41 27,35 27 35 62,72 29 72 67", "56 4 56 53,45 4 45 27,24 54 24 67,62 48 76 48", "0 39 0 53,26 55 26 77,51 17 51 52,50 11 50 15", "0 60 0 77,3 40 3 66,59 5 59 31,13 47 13 68", "34 12 34 56,8 34 8 37,1 58 1 68,45 16 60 16", "21 7 21 74,64 17 64 36,58 30 58 52,78 2 78 10", "37 69 37 79,15 9 60 9,65 61 65 73,10 2 59 2", "5 62 68 62,40 10 61 10,16 51 28 51,25 17 25 32", "28 7 28 32,5 39 5 46,66 54 66 56,4 3 4 24", "38 20 38 34,71 28 71 52,63 71 67 71,7 39 7 59", "47 1 47 9,32 27 32 39,14 34 79 34,69 23 80 23", "39 60 64 60,11 12 43 12,57 13 57 21,42 9 42 22", "60 4 60 9,49 10 49 30,3 46 56 46,3 20 3 25", "49 7 49 10,70 22 70 41,6 30 6 60,25 47 25 60", "66 19 66 40,13 45 13 47,66 41 66 46,63 20 63 21", "18 53 18 67,40 74 54 74,33 32 50 32,12 25 19 25", "8 50 31 50,14 55 14 77,9 41 9 44,33 70 33 78", "70 8 70 22,29 68 38 68,43 28 43 35,67 57 67 59", "65 39 65 61,18 43 18 53,3 74 3 78,52 0 52 11", "41 49 41 58,33 0 33 53,65 22 65 39,34 3 34 12", "11 27 11 50,3 66 3 71,65 12 65 22,15 4 15 73", "66 40 66 41,11 0 11 24,40 48 40 76,47 53 47 54", "6 30 39 30,5 23 30 23,76 16 76 59,25 32 25 46", "1 49 18 49,13 26 13 31,27 14 27 40,41 27 41 31", "77 11 77 27,45 75 45 76,31 43 77 43,26 2 26 46", "0 62 5 62,9 25 12 25,77 40 77 71,38 13 38 18", "57 43 57 78,36 20 36 32,38 49 45 49,77 3 77 11", "51 52 51 73,71 52 71 64,12 33 69 33,63 5 66 5", "61 23 61 48,45 5 63 5,52 49 65 49,80 8 80 68", "44 39 44 71,3 19 3 20,34 64 40 64,48 0 48 1", "41 35 41 39,11 24 11 27,27 73 42 73,0 7 48 7", "70 42 70 74,1 5 1 13,12 29 12 52,4 51 16 51", "44 7 44 39,5 16 5 39,64 43 64 49,51 11 51 17", "58 21 58 30,74 59 74 67,23 39 23 42,14 26 47 26", "55 17 55 46,50 1 50 11,43 65 43 80,41 16 45 16", "68 9 68 10,59 31 59 46,62 64 70 64,32 0 32 27", "3 31 3 40,25 72 25 79,46 12 46 14,61 10 61 23"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6441;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> hier1 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,80 0 80 80"};
    vector<string> hier2 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,80 0 80 80"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6480;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> hier1 = {"0 0 80 0,0 1 80 1,0 2 80 2,0 3 80 3,0 4 80 4", "0 5 80 5,0 6 80 6,0 7 80 7,0 8 80 8,0 9 80 9", "0 10 80 10,0 11 80 11,0 12 80 12,0 13 80 13", "0 14 80 14,0 15 80 15,0 16 80 16,0 17 80 17", "0 18 80 18,0 19 80 19,0 20 80 20,0 21 80 21", "0 22 80 22,0 23 80 23,0 24 80 24,0 25 80 25", "0 26 80 26,0 27 80 27,0 28 80 28,0 29 80 29", "0 30 80 30,0 31 80 31,0 32 80 32,0 33 80 33", "0 34 80 34,0 35 80 35,0 36 80 36,0 37 80 37", "0 38 80 38,0 39 80 39,0 40 80 40,0 41 80 41", "0 42 80 42,0 43 80 43,0 44 80 44,0 45 80 45", "0 46 80 46,0 47 80 47,0 48 80 48,0 49 80 49", "0 50 80 50,0 51 80 51,0 52 80 52,0 53 80 53", "0 54 80 54,0 55 80 55,0 56 80 56,0 57 80 57", "0 58 80 58,0 59 80 59,0 60 80 60,0 61 80 61", "0 62 80 62,0 63 80 63,0 64 80 64,0 65 80 65", "0 66 80 66,0 67 80 67,0 68 80 68,0 69 80 69", "0 70 80 70,0 71 80 71,0 72 80 72,0 73 80 73", "0 74 80 74,0 75 80 75,0 76 80 76,0 77 80 77", "0 78 80 78,0 79 80 79,0 80 80 80"};
    vector<string> hier2 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,80 0 80 80"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 12960;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> hier1 = {"0 0 80 0,0 1 80 1,0 2 80 2,0 3 80 3,0 4 80 4", "0 5 80 5,0 6 80 6,0 7 80 7,0 8 80 8,0 9 80 9", "0 10 80 10,0 11 80 11,0 12 80 12,0 13 80 13", "0 14 80 14,0 15 80 15,0 16 80 16,0 17 80 17", "0 18 80 18,0 19 80 19,0 20 80 20,0 21 80 21", "0 22 80 22,0 23 80 23,0 24 80 24,0 25 80 25", "0 26 80 26,0 27 80 27,0 28 80 28,0 29 80 29", "0 30 80 30,0 31 80 31,0 32 80 32,0 33 80 33", "0 34 80 34,0 35 80 35,0 36 80 36,0 37 80 37", "0 38 80 38,0 39 80 39,0 40 80 40,0 41 80 41", "0 42 80 42,0 43 80 43,0 44 80 44,0 45 80 45", "0 46 80 46,0 47 80 47,0 48 80 48,0 49 80 49", "0 50 80 50,0 51 80 51,0 52 80 52,0 53 80 53", "0 54 80 54,0 55 80 55,0 56 80 56,0 57 80 57", "0 58 80 58,0 59 80 59,0 60 80 60,0 61 80 61", "0 62 80 62,0 63 80 63,0 64 80 64,0 65 80 65", "0 66 80 66,0 67 80 67,0 68 80 68,0 69 80 69", "0 70 80 70,0 71 80 71,0 72 80 72,0 73 80 73", "0 74 80 74,0 75 80 75,0 76 80 76,0 77 80 77", "0 78 80 78,0 79 80 79,0 80 80 80"};
    vector<string> hier2 = {"0 0 80 0,0 1 80 1,0 2 80 2,0 3 80 3,0 4 80 4", "0 5 80 5,0 6 80 6,0 7 80 7,0 8 80 8,0 9 80 9", "0 10 80 10,0 11 80 11,0 12 80 12,0 13 80 13", "0 14 80 14,0 15 80 15,0 16 80 16,0 17 80 17", "0 18 80 18,0 19 80 19,0 20 80 20,0 21 80 21", "0 22 80 22,0 23 80 23,0 24 80 24,0 25 80 25", "0 26 80 26,0 27 80 27,0 28 80 28,0 29 80 29", "0 30 80 30,0 31 80 31,0 32 80 32,0 33 80 33", "0 34 80 34,0 35 80 35,0 36 80 36,0 37 80 37", "0 38 80 38,0 39 80 39,0 40 80 40,0 41 80 41", "0 42 80 42,0 43 80 43,0 44 80 44,0 45 80 45", "0 46 80 46,0 47 80 47,0 48 80 48,0 49 80 49", "0 50 80 50,0 51 80 51,0 52 80 52,0 53 80 53", "0 54 80 54,0 55 80 55,0 56 80 56,0 57 80 57", "0 58 80 58,0 59 80 59,0 60 80 60,0 61 80 61", "0 62 80 62,0 63 80 63,0 64 80 64,0 65 80 65", "0 66 80 66,0 67 80 67,0 68 80 68,0 69 80 69", "0 70 80 70,0 71 80 71,0 72 80 72,0 73 80 73", "0 74 80 74,0 75 80 75,0 76 80 76,0 77 80 77", "0 78 80 78,0 79 80 79,0 80 80 80"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6480;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> hier1 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,80 0 80 80,0 0 80 0,0 1 80 1", "0 2 80 2,0 3 80 3,0 4 80 4,0 5 80 5,0 6 80 6", "0 7 80 7,0 8 80 8,0 9 80 9,0 10 80 10,0 11 80 11", "0 12 80 12,0 13 80 13,0 14 80 14,0 15 80 15", "0 16 80 16,0 17 80 17,0 18 80 18,0 19 80 19", "0 20 80 20,0 21 80 21,0 22 80 22,0 23 80 23", "0 24 80 24,0 25 80 25,0 26 80 26,0 27 80 27", "0 28 80 28,0 29 80 29,0 30 80 30,0 31 80 31", "0 32 80 32,0 33 80 33,0 34 80 34,0 35 80 35", "0 36 80 36,0 37 80 37,0 38 80 38,0 39 80 39", "0 40 80 40,0 41 80 41,0 42 80 42,0 43 80 43", "0 44 80 44,0 45 80 45,0 46 80 46,0 47 80 47", "0 48 80 48,0 49 80 49,0 50 80 50,0 51 80 51", "0 52 80 52,0 53 80 53,0 54 80 54,0 55 80 55", "0 56 80 56,0 57 80 57,0 58 80 58,0 59 80 59", "0 60 80 60,0 61 80 61,0 62 80 62,0 63 80 63", "0 64 80 64,0 65 80 65,0 66 80 66,0 67 80 67", "0 68 80 68,0 69 80 69,0 70 80 70,0 71 80 71", "0 72 80 72,0 73 80 73,0 74 80 74,0 75 80 75", "0 76 80 76,0 77 80 77,0 78 80 78,0 79 80 79", "0 80 80 80"};
    vector<string> hier2 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,80 0 80 80,0 0 80 0,0 1 80 1", "0 2 80 2,0 3 80 3,0 4 80 4,0 5 80 5,0 6 80 6", "0 7 80 7,0 8 80 8,0 9 80 9,0 10 80 10,0 11 80 11", "0 12 80 12,0 13 80 13,0 14 80 14,0 15 80 15", "0 16 80 16,0 17 80 17,0 18 80 18,0 19 80 19", "0 20 80 20,0 21 80 21,0 22 80 22,0 23 80 23", "0 24 80 24,0 25 80 25,0 26 80 26,0 27 80 27", "0 28 80 28,0 29 80 29,0 30 80 30,0 31 80 31", "0 32 80 32,0 33 80 33,0 34 80 34,0 35 80 35", "0 36 80 36,0 37 80 37,0 38 80 38,0 39 80 39", "0 40 80 40,0 41 80 41,0 42 80 42,0 43 80 43", "0 44 80 44,0 45 80 45,0 46 80 46,0 47 80 47", "0 48 80 48,0 49 80 49,0 50 80 50,0 51 80 51", "0 52 80 52,0 53 80 53,0 54 80 54,0 55 80 55", "0 56 80 56,0 57 80 57,0 58 80 58,0 59 80 59", "0 60 80 60,0 61 80 61,0 62 80 62,0 63 80 63", "0 64 80 64,0 65 80 65,0 66 80 66,0 67 80 67", "0 68 80 68,0 69 80 69,0 70 80 70,0 71 80 71", "0 72 80 72,0 73 80 73,0 74 80 74,0 75 80 75", "0 76 80 76,0 77 80 77,0 78 80 78,0 79 80 79", "0 80 80 80"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 12960;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> hier1 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,0 0 80 0,0 1 80 1,0 2 80 2", "0 3 80 3,0 4 80 4,0 5 80 5,0 6 80 6,0 7 80 7", "0 8 80 8,0 9 80 9,0 10 80 10,0 11 80 11,0 12 80 12", "0 13 80 13,0 14 80 14,0 15 80 15,0 16 80 16", "0 17 80 17,0 18 80 18,0 19 80 19,0 20 80 20", "0 21 80 21,0 22 80 22,0 23 80 23,0 24 80 24", "0 25 80 25,0 26 80 26,0 27 80 27,0 28 80 28", "0 29 80 29,0 30 80 30,0 31 80 31,0 32 80 32", "0 33 80 33,0 34 80 34,0 35 80 35,0 36 80 36", "0 37 80 37,0 38 80 38,0 39 80 39,0 40 80 40", "0 41 80 41,0 42 80 42,0 43 80 43,0 44 80 44", "0 45 80 45,0 46 80 46,0 47 80 47,0 48 80 48", "0 49 80 49,0 50 80 50,0 51 80 51,0 52 80 52", "0 53 80 53,0 54 80 54,0 55 80 55,0 56 80 56", "0 57 80 57,0 58 80 58,0 59 80 59,0 60 80 60", "0 61 80 61,0 62 80 62,0 63 80 63,0 64 80 64", "0 65 80 65,0 66 80 66,0 67 80 67,0 68 80 68", "0 69 80 69,0 70 80 70,0 71 80 71,0 72 80 72", "0 73 80 73,0 74 80 74,0 75 80 75,0 76 80 76", "0 77 80 77,0 78 80 78,0 79 80 79"};
    vector<string> hier2 = {"1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80,5 0 5 80", "6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80,10 0 10 80", "11 0 11 80,12 0 12 80,13 0 13 80,14 0 14 80", "15 0 15 80,16 0 16 80,17 0 17 80,18 0 18 80", "19 0 19 80,20 0 20 80,21 0 21 80,22 0 22 80", "23 0 23 80,24 0 24 80,25 0 25 80,26 0 26 80", "27 0 27 80,28 0 28 80,29 0 29 80,30 0 30 80", "31 0 31 80,32 0 32 80,33 0 33 80,34 0 34 80", "35 0 35 80,36 0 36 80,37 0 37 80,38 0 38 80", "39 0 39 80,40 0 40 80,41 0 41 80,42 0 42 80", "43 0 43 80,44 0 44 80,45 0 45 80,46 0 46 80", "47 0 47 80,48 0 48 80,49 0 49 80,50 0 50 80", "51 0 51 80,52 0 52 80,53 0 53 80,54 0 54 80", "55 0 55 80,56 0 56 80,57 0 57 80,58 0 58 80", "59 0 59 80,60 0 60 80,61 0 61 80,62 0 62 80", "63 0 63 80,64 0 64 80,65 0 65 80,66 0 66 80", "67 0 67 80,68 0 68 80,69 0 69 80,70 0 70 80", "71 0 71 80,72 0 72 80,73 0 73 80,74 0 74 80", "75 0 75 80,76 0 76 80,77 0 77 80,78 0 78 80", "79 0 79 80,80 0 80 80,0 0 80 0,0 1 80 1,0 2 80 2", "0 3 80 3,0 4 80 4,0 5 80 5,0 6 80 6,0 7 80 7", "0 8 80 8,0 9 80 9,0 10 80 10,0 11 80 11,0 12 80 12", "0 13 80 13,0 14 80 14,0 15 80 15,0 16 80 16", "0 17 80 17,0 18 80 18,0 19 80 19,0 20 80 20", "0 21 80 21,0 22 80 22,0 23 80 23,0 24 80 24", "0 25 80 25,0 26 80 26,0 27 80 27,0 28 80 28", "0 29 80 29,0 30 80 30,0 31 80 31,0 32 80 32", "0 33 80 33,0 34 80 34,0 35 80 35,0 36 80 36", "0 37 80 37,0 38 80 38,0 39 80 39,0 40 80 40", "0 41 80 41,0 42 80 42,0 43 80 43,0 44 80 44", "0 45 80 45,0 46 80 46,0 47 80 47,0 48 80 48", "0 49 80 49,0 50 80 50,0 51 80 51,0 52 80 52", "0 53 80 53,0 54 80 54,0 55 80 55,0 56 80 56", "0 57 80 57,0 58 80 58,0 59 80 59,0 60 80 60", "0 61 80 61,0 62 80 62,0 63 80 63,0 64 80 64", "0 65 80 65,0 66 80 66,0 67 80 67,0 68 80 68", "0 69 80 69,0 70 80 70,0 71 80 71,0 72 80 72", "0 73 80 73,0 74 80 74,0 75 80 75,0 76 80 76", "0 77 80 77,0 78 80 78,0 79 80 79"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 12880;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> hier1 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,0 0 80 0,0 1 80 1,0 2 80 2,0 3 80 3", "0 4 80 4,0 5 80 5,0 6 80 6,0 7 80 7,0 8 80 8", "0 9 80 9,0 10 80 10,0 11 80 11,0 12 80 12", "0 13 80 13,0 14 80 14,0 15 80 15,0 16 80 16", "0 17 80 17,0 18 80 18,0 19 80 19,0 20 80 20", "0 21 80 21,0 22 80 22,0 23 80 23,0 24 80 24", "0 25 80 25,0 26 80 26,0 27 80 27,0 28 80 28", "0 29 80 29,0 30 80 30,0 31 80 31,0 32 80 32", "0 33 80 33,0 34 80 34,0 35 80 35,0 36 80 36", "0 37 80 37,0 38 80 38,0 39 80 39,0 40 80 40", "0 41 80 41,0 42 80 42,0 43 80 43,0 44 80 44", "0 45 80 45,0 46 80 46,0 47 80 47,0 48 80 48", "0 49 80 49,0 50 80 50,0 51 80 51,0 52 80 52", "0 53 80 53,0 54 80 54,0 55 80 55,0 56 80 56", "0 57 80 57,0 58 80 58,0 59 80 59,0 60 80 60", "0 61 80 61,0 62 80 62,0 63 80 63,0 64 80 64", "0 65 80 65,0 66 80 66,0 67 80 67,0 68 80 68", "0 69 80 69,0 70 80 70"};
    vector<string> hier2 = {"10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,41 0 41 80", "42 0 42 80,43 0 43 80,44 0 44 80,45 0 45 80", "46 0 46 80,47 0 47 80,48 0 48 80,49 0 49 80", "50 0 50 80,51 0 51 80,52 0 52 80,53 0 53 80", "54 0 54 80,55 0 55 80,56 0 56 80,57 0 57 80", "58 0 58 80,59 0 59 80,60 0 60 80,61 0 61 80", "62 0 62 80,63 0 63 80,64 0 64 80,65 0 65 80", "66 0 66 80,67 0 67 80,68 0 68 80,69 0 69 80", "70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,80 0 80 80,0 0 80 0,0 1 80 1", "0 2 80 2,0 3 80 3,0 4 80 4,0 5 80 5,0 6 80 6", "0 7 80 7,0 8 80 8,0 9 80 9,0 10 80 10,0 11 80 11", "0 12 80 12,0 13 80 13,0 14 80 14,0 15 80 15", "0 16 80 16,0 17 80 17,0 18 80 18,0 19 80 19", "0 20 80 20,0 21 80 21,0 22 80 22,0 23 80 23", "0 24 80 24,0 25 80 25,0 26 80 26,0 27 80 27", "0 28 80 28,0 29 80 29,0 30 80 30,0 31 80 31", "0 32 80 32,0 33 80 33,0 34 80 34,0 35 80 35", "0 36 80 36,0 37 80 37,0 38 80 38,0 39 80 39", "0 40 80 40,0 41 80 41,0 42 80 42,0 43 80 43", "0 44 80 44,0 45 80 45,0 46 80 46,0 47 80 47", "0 48 80 48,0 49 80 49,0 50 80 50,0 51 80 51", "0 52 80 52,0 53 80 53,0 54 80 54,0 55 80 55", "0 56 80 56,0 57 80 57,0 58 80 58,0 59 80 59", "0 60 80 60,0 61 80 61,0 62 80 62,0 63 80 63", "0 64 80 64,0 65 80 65,0 66 80 66,0 67 80 67", "0 68 80 68,0 69 80 69,0 70 80 70"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 12070;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> hier1 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,11 0 11 80,12 0 12 80,13 0 13 80", "14 0 14 80,15 0 15 80,16 0 16 80,17 0 17 80", "18 0 18 80,19 0 19 80,20 0 20 80,21 0 21 80", "22 0 22 80,23 0 23 80,24 0 24 80,25 0 25 80", "26 0 26 80,27 0 27 80,28 0 28 80,29 0 29 80", "30 0 30 80,31 0 31 80,32 0 32 80,33 0 33 80", "34 0 34 80,35 0 35 80,36 0 36 80,37 0 37 80", "38 0 38 80,39 0 39 80,40 0 40 80,0 0 80 0,0 1 80 1", "0 2 80 2,0 3 80 3,0 4 80 4,0 5 80 5,0 6 80 6", "0 7 80 7,0 8 80 8,0 9 80 9,0 10 80 10,0 11 80 11", "0 12 80 12,0 13 80 13,0 14 80 14,0 15 80 15", "0 16 80 16,0 17 80 17,0 18 80 18,0 19 80 19", "0 20 80 20,0 21 80 21,0 22 80 22,0 23 80 23", "0 24 80 24,0 25 80 25,0 26 80 26,0 27 80 27", "0 28 80 28,0 29 80 29,0 30 80 30,0 31 80 31", "0 32 80 32,0 33 80 33,0 34 80 34,0 35 80 35", "0 36 80 36,0 37 80 37,0 38 80 38,0 39 80 39", "0 40 80 40"};
    vector<string> hier2 = {"40 0 40 80,41 0 41 80,42 0 42 80,43 0 43 80", "44 0 44 80,45 0 45 80,46 0 46 80,47 0 47 80", "48 0 48 80,49 0 49 80,50 0 50 80,51 0 51 80", "52 0 52 80,53 0 53 80,54 0 54 80,55 0 55 80", "56 0 56 80,57 0 57 80,58 0 58 80,59 0 59 80", "60 0 60 80,61 0 61 80,62 0 62 80,63 0 63 80", "64 0 64 80,65 0 65 80,66 0 66 80,67 0 67 80", "68 0 68 80,69 0 69 80,70 0 70 80,71 0 71 80", "72 0 72 80,73 0 73 80,74 0 74 80,75 0 75 80", "76 0 76 80,77 0 77 80,78 0 78 80,79 0 79 80", "80 0 80 80,0 0 80 0,0 1 80 1,0 2 80 2,0 3 80 3", "0 4 80 4,0 5 80 5,0 6 80 6,0 7 80 7,0 8 80 8", "0 9 80 9,0 10 80 10,0 11 80 11,0 12 80 12", "0 13 80 13,0 14 80 14,0 15 80 15,0 16 80 16", "0 17 80 17,0 18 80 18,0 19 80 19,0 20 80 20", "0 21 80 21,0 22 80 22,0 23 80 23,0 24 80 24", "0 25 80 25,0 26 80 26,0 27 80 27,0 28 80 28", "0 29 80 29,0 30 80 30,0 31 80 31,0 32 80 32", "0 33 80 33,0 34 80 34,0 35 80 35,0 36 80 36", "0 37 80 37,0 38 80 38,0 39 80 39,0 40 80 40"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 8200;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> hier1 = {"0 0 0 80,1 0 1 80,2 0 2 80,3 0 3 80,4 0 4 80", "5 0 5 80,6 0 6 80,7 0 7 80,8 0 8 80,9 0 9 80", "10 0 10 80,0 0 80 0,0 1 80 1,0 2 80 2,0 3 80 3", "0 4 80 4,0 5 80 5,0 6 80 6,0 7 80 7,0 8 80 8", "0 9 80 9,0 10 80 10"};
    vector<string> hier2 = {"70 0 70 80,71 0 71 80,72 0 72 80,73 0 73 80", "74 0 74 80,75 0 75 80,76 0 76 80,77 0 77 80", "78 0 78 80,79 0 79 80,80 0 80 80,0 0 80 0,0 1 80 1", "0 2 80 2,0 3 80 3,0 4 80 4,0 5 80 5,0 6 80 6", "0 7 80 7,0 8 80 8,0 9 80 9,0 10 80 10"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 2530;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> hier1 = {"3 7 10 7,0 5 2 5,0 4 0 10,0 7 2 7,7 0 7 6,5 1 5 9", "2 0 10 0,1 0 1 10,4 2 6 2,2 7 3 7,7 6 7 10", "8 4 8 10,6 10 8 10,1 2 4 2,9 1 9 5"};
    vector<string> hier2 = {"3 7 10 7,0 5 2 5,0 4 0 10,0 7 2 7,7 0 7 6,5 1 5 9", "2 0 10 0,1 0 1 10,4 2 6 2,2 7 3 7,7 6 7 10", "8 4 8 10,6 10 8 10,1 2 4 2,9 1 9 5"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 71;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> hier1 = {"3 2 4 2,1 3 1 8,0 1 7 1,0 9 0 10,6 3 10 3,6 3 6 7", "0 4 10 4,2 3 6 3,8 0 8 7,1 9 7 9,6 0 6 3,1 8 5 8", "4 6 9 6,1 6 4 6,4 5 7 5"};
    vector<string> hier2 = {"3 72 4 72,1 73 1 78,0 71 7 71,0 79 0 80,6 73 10 73", "6 73 6 77,0 74 10 74,2 73 6 73,8 70 8 77,1 79 7 79", "6 70 6 73,1 78 5 78,4 76 9 76,1 76 4 76,4 75 7 75"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 67;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> hier1 = {"2 0 5 0,5 5 5 9,5 2 6 2,7 1 7 2,1 7 5 7,3 3 9 3", "5 7 6 7,4 4 8 4,6 3 6 7,7 3 7 4,2 0 2 10,6 5 10 5", "9 5 9 8,5 0 5 4,0 4 4 4"};
    vector<string> hier2 = {"72 0 75 0,75 5 75 9,75 2 76 2,77 1 77 2,71 7 75 7", "73 3 79 3,75 7 76 7,74 4 78 4,76 3 76 7,77 3 77 4", "72 0 72 10,76 5 80 5,79 5 79 8,75 0 75 4,70 4 74 4"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 54;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> hier1 = {"5 4 5 6,3 8 3 9,6 4 6 9,0 9 0 10,4 3 10 3", "10 7 10 10,1 3 3 3,2 6 4 6,7 0 8 0,2 5 2 10", "10 4 10 5,0 4 0 8,5 1 6 1,2 1 5 1,5 4 8 4"};
    vector<string> hier2 = {"75 74 75 76,73 78 73 79,76 74 76 79,70 79 70 80", "74 73 80 73,80 77 80 80,71 73 73 73,72 76 74 76", "77 70 78 70,72 75 72 80,80 74 80 75,70 74 70 78", "75 71 76 71,72 71 75 71,75 74 78 74"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 40;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> hier1 = {"7 76 8 76,10 71 10 80,6 73 9 73,3 73 3 80", "0 70 0 72,2 78 6 78,1 70 1 71,5 80 8 80,6 78 10 78", "8 73 8 79,7 78 7 80,2 73 2 79,5 72 5 74,6 74 8 74", "5 76 7 76"};
    vector<string> hier2 = {"7 6 8 6,10 1 10 10,6 3 9 3,3 3 3 10,0 0 0 2", "2 8 6 8,1 0 1 1,5 10 8 10,6 8 10 8,8 3 8 9", "7 8 7 10,2 3 2 9,5 2 5 4,6 4 8 4,5 6 7 6"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 54;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> hier1 = {"3 79 5 79,4 78 9 78,3 71 10 71,3 73 3 74,0 77 2 77", "2 71 2 79,10 78 10 80,4 74 9 74,3 72 7 72", "0 73 0 74,5 72 5 79,0 73 6 73,2 80 10 80", "9 74 10 74,0 72 0 73"};
    vector<string> hier2 = {"3 79 5 79,4 78 9 78,3 71 10 71,3 73 3 74,0 77 2 77", "2 71 2 79,10 78 10 80,4 74 9 74,3 72 7 72", "0 73 0 74,5 72 5 79,0 73 6 73,2 80 10 80", "9 74 10 74,0 72 0 73"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> hier1 = {"4 80 10 80,10 76 10 79,5 71 7 71,3 80 4 80", "3 77 10 77,2 75 7 75,0 72 0 79,9 74 9 80,2 71 5 71", "2 77 3 77,4 79 4 80,10 70 10 76,1 71 2 71", "5 79 6 79,3 70 4 70"};
    vector<string> hier2 = {"74 10 80 10,80 6 80 9,75 1 77 1,73 10 74 10", "73 7 80 7,72 5 77 5,70 2 70 9,79 4 79 10,72 1 75 1", "72 7 73 7,74 9 74 10,80 0 80 6,71 1 72 1,75 9 76 9", "73 0 74 0"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> hier1 = {"8 71 8 80,3 73 3 77,1 74 9 74,7 72 7 75,4 75 9 75", "1 70 1 73,1 78 5 78,4 70 4 71,1 77 6 77,4 71 9 71", "3 73 4 73,1 75 4 75,5 78 5 79,5 73 5 78,6 77 7 77"};
    vector<string> hier2 = {"78 71 78 80,73 73 73 77,71 74 79 74,77 72 77 75", "74 75 79 75,71 70 71 73,71 78 75 78,74 70 74 71", "71 77 76 77,74 71 79 71,73 73 74 73,71 75 74 75", "75 78 75 79,75 73 75 78,76 77 77 77"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 58;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> hier1 = {"73 2 73 10,79 2 79 5,80 7 80 9,72 1 73 1,75 6 75 8", "76 0 80 0,74 5 78 5,78 1 78 4,71 2 79 2,80 1 80 4", "76 0 76 9,75 0 75 6,74 8 78 8,72 8 74 8,75 3 79 3"};
    vector<string> hier2 = {"3 2 3 10,9 2 9 5,10 7 10 9,2 1 3 1,5 6 5 8", "6 0 10 0,4 5 8 5,8 1 8 4,1 2 9 2,10 1 10 4,6 0 6 9", "5 0 5 6,4 8 8 8,2 8 4 8,5 3 9 3"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> hier1 = {"73 2 76 2,77 5 77 6,74 0 74 5,71 6 71 7,71 2 71 6", "73 4 73 10,70 8 71 8,76 3 80 3,72 2 73 2,72 0 73 0", "75 10 79 10,73 0 75 0,75 4 75 5,70 9 72 9", "74 3 75 3"};
    vector<string> hier2 = {"3 72 6 72,7 75 7 76,4 70 4 75,1 76 1 77,1 72 1 76", "3 74 3 80,0 78 1 78,6 73 10 73,2 72 3 72,2 70 3 70", "5 80 9 80,3 70 5 70,5 74 5 75,0 79 2 79,4 73 5 73"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> hier1 = {"78 6 79 6,73 5 73 8,71 0 75 0,80 4 80 6,72 5 72 6", "73 2 73 4,72 0 72 5,80 2 80 4,70 7 70 10", "72 10 73 10,70 1 78 1,70 8 80 8,71 7 71 8", "71 2 72 2,80 1 80 2"};
    vector<string> hier2 = {"78 6 79 6,73 5 73 8,71 0 75 0,80 4 80 6,72 5 72 6", "73 2 73 4,72 0 72 5,80 2 80 4,70 7 70 10", "72 10 73 10,70 1 78 1,70 8 80 8,71 7 71 8", "71 2 72 2,80 1 80 2"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> hier1 = {"74 8 79 8,77 8 77 10,78 1 78 10,74 1 74 3", "72 8 74 8,74 3 74 9,71 3 71 9,71 9 71 10,75 4 79 4", "79 4 80 4,79 1 79 3,70 9 79 9,80 4 80 9,71 1 79 1", "72 10 73 10"};
    vector<string> hier2 = {"74 78 79 78,77 78 77 80,78 71 78 80,74 71 74 73", "72 78 74 78,74 73 74 79,71 73 71 79,71 79 71 80", "75 74 79 74,79 74 80 74,79 71 79 73,70 79 79 79", "80 74 80 79,71 71 79 71,72 80 73 80"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> hier1 = {"75 71 80 71,75 73 79 73,73 71 73 73,77 75 77 78", "73 78 79 78,73 80 75 80,78 73 78 77,71 76 78 76", "78 74 79 74,76 76 76 78,70 79 80 79,71 77 71 80", "70 72 74 72,70 80 73 80,72 75 72 79"};
    vector<string> hier2 = {"5 1 10 1,5 3 9 3,3 1 3 3,7 5 7 8,3 8 9 8,3 10 5 10", "8 3 8 7,1 6 8 6,8 4 9 4,6 6 6 8,0 9 10 9,1 7 1 10", "0 2 4 2,0 10 3 10,2 5 2 9"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> hier1 = {"76 74 76 79,76 73 76 74,77 74 78 74,78 77 78 80", "72 78 78 78,73 75 78 75,73 76 80 76,77 71 77 75", "74 71 80 71,71 70 71 71,71 78 72 78,70 80 79 80", "79 71 79 76,80 74 80 79,72 74 75 74"};
    vector<string> hier2 = {"6 74 6 79,6 73 6 74,7 74 8 74,8 77 8 80,2 78 8 78", "3 75 8 75,3 76 10 76,7 71 7 75,4 71 10 71", "1 70 1 71,1 78 2 78,0 80 9 80,9 71 9 76", "10 74 10 79,2 74 5 74"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 62;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> hier1 = {"71 72 77 72,74 70 76 70,76 75 79 75,77 72 77 79", "73 76 74 76,71 76 73 76,79 77 80 77,70 79 74 79", "80 78 80 80,73 77 73 79,79 75 79 76,77 70 77 72", "78 71 78 73,72 78 72 80,75 77 75 79"};
    vector<string> hier2 = {"71 2 77 2,74 0 76 0,76 5 79 5,77 2 77 9,73 6 74 6", "71 6 73 6,79 7 80 7,70 9 74 9,80 8 80 10,73 7 73 9", "79 5 79 6,77 0 77 2,78 1 78 3,72 8 72 10,75 7 75 9"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> hier1 = {"79 71 79 78,70 76 76 76,73 70 80 70,70 70 73 70", "70 76 70 79,73 74 77 74,70 79 76 79,71 72 79 72", "70 70 70 76,71 77 71 79,73 73 74 73,74 78 76 78", "72 78 74 78,75 72 75 73,70 73 73 73"};
    vector<string> hier2 = {"79 71 79 78,70 76 76 76,73 70 80 70,70 70 73 70", "70 76 70 79,73 74 77 74,70 79 76 79,71 72 79 72", "70 70 70 76,71 77 71 79,73 73 74 73,74 78 76 78", "72 78 74 78,75 72 75 73,70 73 73 73"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 61;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> hier1 = {"0 2 6 2"};
    vector<string> hier2 = {"5 1 6 1,8 1 9 1"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> hier1 = {"10 20 10 30,15 20 15 30", "10 20 15 20,0 30 30 30"};
    vector<string> hier2 = {"0 5 0 15,5 5 5 25", "0 5 5 5,0 15 5 15"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 65;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> hier1 = {"10 10 10 20,10 30 10 40", "10 10 20 10"};
    vector<string> hier2 = {"10 0 10 20,10 27 10 35", "10 0 20 0"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> hier1 = {"0 0 10 0,10 0 10 3"};
    vector<string> hier2 = {"0 1 10 1", "5 1 5 4"};
    Hieroglyphs* pObj = new Hieroglyphs();
    clock_t start = clock();
    int result = pObj->minimumVisible(hier1, hier2);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22880990&rd=14243&pm=11230
********************************************************************************
#include<vector>
#include<string>
#include<sstream>
#include<algorithm>
#include<cstdio>
 
using namespace std;
 
bool fcomp(int a,int b)
{
  if(a<0)
    a=-a;
  if(b<0)
    b=-b;
  return a<b;
}
 
class Hieroglyphs
{
  public:
  int minimumVisible(vector<string> a, vector<string> b)
  {
    stringstream x,y;
    vector<int> O[200], V[200];
    int n=a.size(),last,aux,rez;
    rez=2000000000;
    for(int i=0;i<n;++i)
      x<<" "<<a[i];
    int h1[500][4],h2[500][4], u=0,v=0;
    do
    {
      int p,q,r,t;
      x>>p>>q>>r>>t;
      x.get();
      ++u;h1[u][0]=p;h1[u][1]=q;h1[u][2]=r;h1[u][3]=t;
    }while(x.eof()==false);
    
    n=b.size();
    for(int i=0;i<n;++i)
      y<<" "<<b[i];
    do
    {
      int p,q,r,t;
      y>>p>>q>>r>>t;
      y.get();
      ++v;
      h2[v][0]=p;h2[v][1]=q;h2[v][2]=r;h2[v][3]=t;
    }while(y.eof()==false);
    
    int i,j;
    for(i=-80;i<=80;++i)
      for(j=-80;j<=80;++j)
      {
        int k;
        for(k=0;k<=160;++k)
          V[k].clear(),O[k].clear();
        for(int k=1;k<=u;++k)
          if(h1[k][0]==h1[k][2])
            V[h1[k][0]+i+(i<=0?80:0)].push_back(h1[k][1]+j+100), V[h1[k][0]+i+(i<=0?80:0)].push_back(-(h1[k][3]+j+100));
          else
            if(h1[k][1]==h1[k][3])
              O[h1[k][1]+j+(j<=0?80:0)].push_back(h1[k][0]+i+100), O[h1[k][1]+j+(j<=0?80:0)].push_back(-(h1[k][2]+i+100));
        for(int k=1;k<=v;++k)
          if(h2[k][0]==h2[k][2])
            V[h2[k][0]+(i<=0?80:0)].push_back(h2[k][1]+100),V[h2[k][0]+(i<=0?80:0)].push_back(-h2[k][3]-100);
          else
            O[h2[k][1]+(j<=0?80:0)].push_back(h2[k][0]+100),O[h2[k][1]+(j<=0?80:0)].push_back(-h2[k][2]-100);
        aux=0;
        for(k=0;k<=160;++k)
        {
          sort(V[k].begin(),V[k].end(),fcomp),sort(O[k].begin(),O[k].end(),fcomp);
          int p=0;
          for(vector<int>::iterator it=V[k].begin(); it != V[k].end(); ++it)
          {
            if(*it>0)
            {
              ++p;
              if(p==1)
                last=*it;
            }
            if(*it<0)
            {
              --p;
              if(p==0)
                aux+=-(*it)-last;
            }
          }
          p=0;
          for(vector<int>::iterator it=O[k].begin();it!=O[k].end();++it)
          {
            if(*it>0)
            {
              ++p;
              if(p==1)
                last=*it;
            }
            if(*it<0)
            {
              --p;
              if(p==0)
                aux+=-(*it)-last;
            }
          }
        }
        if(aux<rez)
          rez=aux;
        
      }
    return rez;
  }
};

********************************************************************************
*******************************************************************************/