/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2346
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class MagicianTour {
public:
    int bestDifference(vector<string> roads, vector<int> populations);
};

int MagicianTour::bestDifference(vector<string> roads, vector<int> populations) {
    int ret;
    return ret;
}


int test0() {
    vector<string> roads = {"01", "10"};
    vector<int> populations = {15, 20};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> roads = {"0100", "1000", "0001", "0010"};
    vector<int> populations = {2, 4, 1, 5};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> roads = {"0100", "1000", "0001", "0010"};
    vector<int> populations = {2, 4, 2, 4};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> roads = {"0010", "0001", "1000", "0100"};
    vector<int> populations = {2, 2, 2, 2};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> roads = {"000", "000", "000"};
    vector<int> populations = {6, 7, 15};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> roads = {"0000", "0010", "0101", "0010"};
    vector<int> populations = {8, 10, 15, 10};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> roads = {};
    vector<int> populations = {4, 0, 13, 12, 10, 12, 5, 6, 5, 16, 11, 19, 10, 18, 1, 3, 13, 16, 15, 7, 15, 0, 10, 13, 6, 1, 20, 3, 5, 19, 11, 4, 11, 16, 19, 10, 19, 14, 11, 3, 3, 13, 1, 15, 4, 0, 10, 11, 7, 17};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> roads = {};
    vector<int> populations = {15, 4, 20, 14, 13, 0, 4, 12, 7, 4, 5, 0, 0, 10, 10, 10, 1, 15, 18, 8, 15, 5, 20, 4, 14, 17, 4, 18, 19, 2, 18, 4, 9, 17, 18, 18, 16, 19, 9, 18, 3, 7, 17, 8, 16, 18, 14, 7, 12, 16};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> roads = {};
    vector<int> populations = {13, 12, 3, 13, 18, 17, 6, 1, 16, 5, 16, 10, 10, 8, 7, 4, 18, 5, 18, 0, 9, 11, 11, 3, 15, 10, 11, 14, 3, 20, 7, 10, 1, 14, 10, 12, 7, 6, 9, 1, 9, 20, 3, 11, 10, 4, 17, 12, 1, 14};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> roads = {"010000", "101000", "010100", "001000", "000001", "000010"};
    vector<int> populations = {1, 2, 1, 2, 0, 3};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> roads = {"010000", "100000", "000100", "001000", "000001", "000010"};
    vector<int> populations = {10, 2, 2, 10, 3, 6};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> roads = {"010000", "100000", "000100", "001000", "000001", "000010"};
    vector<int> populations = {10, 8, 10, 8, 10, 3};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> roads = {"010000", "100000", "000100", "001000", "000001", "000010"};
    vector<int> populations = {3, 4, 3, 4, 0, 6};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> roads = {};
    vector<int> populations = {2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 20, 1};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> roads = {"010000", "101000", "010000", "000010", "000101", "000010"};
    vector<int> populations = {5, 5, 5, 2, 6, 2};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> roads = {"010000", "101000", "010000", "000010", "000101", "000010"};
    vector<int> populations = {2, 6, 2, 5, 5, 5};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> roads = {};
    vector<int> populations = {2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 20, 1};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> roads = {};
    vector<int> populations = {20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 500;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> roads = {"010", "101", "010"};
    vector<int> populations = {5, 1, 5};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> roads = {};
    vector<int> populations = {8, 15, 12, 9, 12, 6, 4, 6, 16, 1, 15, 3, 18, 15, 14, 8, 6, 6, 12, 13, 14, 15, 17, 15, 3, 8, 7, 8, 3, 19, 12, 9, 14, 19, 9};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> roads = {"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000"};
    vector<int> populations = {1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 1};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> roads = {};
    vector<int> populations = {8, 15, 12, 9, 12, 6, 4, 6, 16, 1, 15, 3, 18, 15, 14, 8, 6, 6, 12, 13, 14, 15, 17, 15, 3, 8, 7, 8, 3, 19, 12, 9, 14, 19, 9};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> roads = {};
    vector<int> populations = {13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15, 13, 14, 13, 14, 15};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> roads = {};
    vector<int> populations = {1, 17, 19, 13, 20, 11, 17, 6, 2, 5, 6, 3, 5, 7, 8, 9, 20, 0, 19, 8, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 15, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> roads = {};
    vector<int> populations = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> roads = {};
    vector<int> populations = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> roads = {};
    vector<int> populations = {13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17, 13, 12, 3, 20, 17};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> roads = {};
    vector<int> populations = {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15, 15, 15, 15, 15, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> roads = {"0000", "0000", "0000", "0000"};
    vector<int> populations = {20, 20, 20, 13};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> roads = {"00000", "00000", "00000", "00000", "00000"};
    vector<int> populations = {7, 6, 5, 5, 3};
    MagicianTour* pObj = new MagicianTour();
    clock_t start = clock();
    int result = pObj->bestDifference(roads, populations);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=272072&rd=4775&pm=2346
********************************************************************************
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <queue> 
using namespace std; 
typedef vector<int> VI;  typedef vector<vector<int> > VVI; 
typedef vector<string> VS;  typedef vector<vector<string> > VVS; 
typedef signed long long i64;  typedef unsigned long long u64; 
 
VS c; 
VI p; 
int seen[100]; 
int poss[10001], poss2[10001]; 
 
int np[2]; 
void doit(int x, int n) { 
  if( seen[x] ) return; 
  seen[x] = 1; 
  np[n] += p[x]; 
  for( int i = 0; i < c.size(); i++ ) if( c[x][i] == '1' ) 
    doit(i, !n); 
} 
 
class MagicianTour { 
public: 
int bestDifference(vector <string> a, vector <int> b) { 
  c = a; 
  p = b; 
  int i, j, k, x, y, z, n; 
   
  poss[5000] = 1; 
  for( i = 0; i < a.size(); i++ ) if( !seen[i] ) { 
    np[0] = np[1] = 1; 
    doit(i, 0); 
    memset(poss2, 0, sizeof(poss2)); 
    x = abs(np[1]-np[0]); 
    for( j = x; j <= 10000-x; j++ ) 
      poss2[j] = (poss[j-x] || poss[j+x]); 
    memcpy(poss, poss2, sizeof(poss)); 
  } 
  for( i = 0; i <= 5000; i++ ) if( poss[5000+i] || poss[5000-i] ) return i; 
  return -1; 
} 
}; 
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/