/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2944
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Arcs {
public:
    int numArcs(vector<string> grid);
};

int Arcs::numArcs(vector<string> grid) {
    int ret;
    return ret;
}


int test0() {
    vector<string> grid = {"..", ".."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> grid = {"...", "..."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> grid = {"....", ".##.", ".##.", ".##.", ".##.", "...."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> grid = {"."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> grid = {"....########", "###..###...#", "..##..#.##.#", "...##..#...#", "....#..#...#", "....#..###..", "....####.##.", "..........#."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> grid = {".....#................", "....#.................", "....#.................", "....#.....#...........", "....#.................", "....#....#.#..........", "....#.......#####.....", "....#.....#.....#.....", "....#.....#.....#.....", "....#....#.#....#.....", "....#....#.#.....#....", "....#....#.#......#...", "....#....#.#.##.#..###", "....#....#....#......."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> grid = {};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1177;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> grid = {};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1177;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> grid = {"..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> grid = {};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> grid = {"........................", "........................", "........................", "........................"};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> grid = {"............................", "............................", "............................", "............................"};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> grid = {"............................", "............................", "............................", "...#........................"};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> grid = {".................................................."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> grid = {"..................................................", ".................................................."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> grid = {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> grid = {"..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", ".."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> grid = {"................................................."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> grid = {".................................................", "................................................."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> grid = {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> grid = {"..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", ".."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> grid = {"..#......#...###.#.....#..#.......##.#..", ".......#..#.#...#.......###.......#.##..", "#..#.....#..............#.....#...#.#...", ".#...#...#............#.....#.##......##", ".........#....#......................#..", "...#...#..........#..#..#..........#....", "....#.#.........#.##........#....#......", "#.......##..#...........#.......#.......", "...#.......#.......#.....#....##.#.....#", ".....#......#.#.......#.....#....#......", ".....#....#...#.#.......................", "......#.............##........#.#......#", "..#.#.#..........#......#.........#.....", ".#......#..#..#...#.#.#.....#...##......", "#......#.#............##....#..#..#..##.", "..#...............#............##.......", "##.......#.##...##.....#.........##.#..#", "..###............#.....#...........#....", "...##.............#.#...............#...", "..###..#...##.....#.##.#............##..", ".........#.............#.....#........#.", ".#........#.....#.....#.#.........#.....", "#.##.##....#..#..#....#........#.#......", "..#.............##..#..#.....#......#...", "##..##...##....#.....#..#.#.....#.......", ".....#.##......#...#........#..#........", "....#.##......##.#..#.#.#.....##....#...", "#..........##.#..#.........#.#..##.#..#.", "#...#..#..#....................#.......#", "##..#..#............#.#...#......#..#...", "........#.#.......#........#...#....#...", ".....#.........#.....#...#.#.....###....", ".......#.###..#.........#.........#....#", "..##...##...#.......####....#........#..", "...........#.........#.....#.........#..", "..##..#...#.#..#..................##....", "....##........##.......................#", "#.#........#........#........##.........", "..#..###.....##........#.....###..#.....", ".##..........#......#.#.#.#....##.#.....", "....###.....#................##..#..#..#", ".#........#.......#.....#..#.......#.#..", "#.............#......#............#.....", "#....##..####..#......#.#...#...........", "..#..#...#..#...#.....#.......#.#..##...", ".....###.#..#............#.........#.#..", "....#...........#.....#.....##......#...", "....#...#.##..#..#....#..#.##.........#.", ".#..#...........#....####.#......#......", "......................#..............##."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> grid = {};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> grid = {};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> grid = {};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> grid = {"....", ".##.", ".##.", ".##.", ".##.", "...."};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> grid = {};
    Arcs* pObj = new Arcs();
    clock_t start = clock();
    int result = pObj->numArcs(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=152340&rd=5858&pm=2944
********************************************************************************
using namespace std;
#include <string>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stack>
#include <algorithm>
#include <map>
#include <set>
#include <queue>
#include <iostream>
#include <sstream>
typedef long long I64;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<I64> VI64;
typedef unsigned uint;
typedef const char cchar;
typedef pair<int,int> PII;
typedef vector<double> VD;
typedef vector<PII> VPII;
#define FOR(i,n) for(int i=0;i<(n);i++)
#define FORR(i,a,b) for(int i=(a);i<=(b);i++)
#define VAR(a,b) __typeof(b) a=b
#define FORIT(it,c) for(VAR(it,(c).begin());it!=(c).end();it++)
#define ALL(x) (x).begin(),(x).end()
#define UNIQ(x) (x).erase(unique(ALL(x)),(x).end())
 
int cd(int x,int cx,int y,int cy) {
    int d = (((x)-cx)*((x)-cx)+((y)-cy)*((y-cy)));
    printf("dist %d\n",d);
    return d;
}
 
#define dist(x,y) (((x)-cx)*((x)-cx)+((y)-cy)*((y-cy)))
// #define dist(x,y) cd(x,cx,y,cy)
#define disteq(x,y) (dist(x,y)==sqd)
#define corner(x,y) (disteq(x,y)+disteq(x+1,y)+disteq(x,y+1)+disteq(y+1,y+1))
#define hits(x,y) (min(min(dist(x,y),dist(x+1,y)),min(dist(x,y+1),dist(x+1,y+1))) < sqd && max(max(dist(x,y),dist(x+1,y)),max(dist(x,y+1),dist(x+1,y+1))) > sqd)
 
struct ArcsImpl {
    vector <string> grid;
    ArcsImpl(vector <string> _grid) {
        grid = _grid;
    }
    
    bool edge(int x1,int y1,int x2,int y2) {
        int r = abs(x1-x2);
        if(r != abs(y2-y1)) return false;
        if(r==0) return false;
 
        // printf("edge %d,%d,%d,%d ?\n",x1,y1,x2,y2);
 
        if(x1 > x2) {
            swap(x1,x2);
            swap(y1,y2);
        }
 
        int sqd = (x1-x2)*(x1-x2);
        // printf("sqd %d\n",sqd);
 
        int cx = x1;
        int cy = y2;
 
        for(int xx=min(x1,x2); xx<max(x1,x2); xx++) {
            for(int yy=min(y1,y2); yy<max(y1,y2); yy++) {
                // printf("test %d,%d: %d\n",xx,yy,hits(xx,yy));
                if(grid[yy][xx]=='#' && hits(xx,yy))
                    goto fail1;
 
            }
        }
        return true;
fail1:
        cx = x2;
        cy = y1;
        for(int xx=min(x1,x2); xx<max(x1,x2); xx++) {
            for(int yy=min(y1,y2); yy<max(y1,y2); yy++) {
                if(grid[yy][xx]=='#' && hits(xx,yy))
                    goto fail2;
 
            }
        }
        return true;
fail2:
        return false;
    }
 
    int numArcs() {
        unsigned dist[60][60];
        memset(dist,-1,sizeof(dist));
 
        queue<PII> q;
        q.push(PII(0,0));
        dist[0][0] = 0;
 
        int xs = grid[0].size();
        int ys = grid.size();
 
        // printf("xs %d, ys %d\n",xs,ys);
 
        while(!q.empty()) {
            int atx = q.front().first;
            int aty = q.front().second;
            q.pop();
 
            unsigned newdist = dist[atx][aty]+1;
 
 
            for(int x=0; x<=xs; x++)
            for(int y=0; y<=ys; y++) {
                if(dist[x][y] <= newdist) continue;
                if(edge(atx,aty,x,y)) {
                    dist[x][y] = newdist;
                    q.push(PII(x,y));
                    // printf("dist %d,%d -> %d,%d = %d\n",atx,aty,x,y,newdist);
                }
            }
        }
 
        return dist[xs][ys];
    };
};
 
 
struct Arcs {
    int numArcs(vector <string> grid) {
        ArcsImpl impl(grid);
        return impl.numArcs();
    }
 
};
 
 
 
 
// Powered by FileEdit
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/