/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2428
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class WaterBot {
public:
    int minTime(vector<string> garden, int carryLimit);
};

int WaterBot::minTime(vector<string> garden, int carryLimit) {
    int ret;
    return ret;
}


int test0() {
    vector<string> garden = {};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 378;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> garden = {};
    int carryLimit = 1;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 1818;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> garden = {"5....", ".....", ".....", ".....", "...RW"};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> garden = {"3.2..", ".....", ".....", "....R", "....W"};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> garden = {"3.3..", ".....", ".....", "....R", "....W"};
    int carryLimit = 3;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> garden = {"5.5..", ".....", ".....", "....R", "....W"};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 34;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> garden = {"5.5.5", ".....", ".....", "....R", "....W"};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> garden = {".5555", ".....", ".....", "....R", "....W"};
    int carryLimit = 3;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> garden = {".5555", ".....", ".....", "....R", "....W"};
    int carryLimit = 2;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 107;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> garden = {"R.......", "..5.5...", ".5......", "..5.....", "........", ".......W"};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> garden = {"R.....55", "......55", "........", "........", "........", ".......W"};
    int carryLimit = 2;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> garden = {"R.......", "........", "....5...", "...5W5..", "....5...", "........"};
    int carryLimit = 4;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> garden = {"R.......", "....5...", "........", "....W...", "........", "........"};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> garden = {".1", ".2", ".3", ".4", "R.", "W."};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> garden = {"R....", ".....", ".....", ".....", "....W"};
    int carryLimit = 5;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> garden = {};
    int carryLimit = 2;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 1008;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> garden = {"..................................................", ".5..............................................5.", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "........................W.........................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".5..............................................5.", "........................R........................."};
    int carryLimit = 3;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 738;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> garden = {};
    int carryLimit = 4;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 596;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> garden = {"1......1", "........", "...W....", "...R....", "........", "1......5"};
    int carryLimit = 4;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> garden = {".......1", "........", "........", "....R...", "W.......", ".....4..", "....3...", "..3....."};
    int carryLimit = 2;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 71;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> garden = {};
    int carryLimit = 4;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 365;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> garden = {};
    int carryLimit = 1;
    WaterBot* pObj = new WaterBot();
    clock_t start = clock();
    int result = pObj->minTime(garden, carryLimit);
    clock_t end = clock();
    delete pObj;
    int expected = 3802;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=272072&rd=5072&pm=2428
********************************************************************************
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <queue> 
using namespace std; 
typedef vector<int> VI;  typedef vector<vector<int> > VVI; 
typedef vector<string> VS;  typedef vector<vector<string> > VVS; 
typedef signed long long i64;  typedef unsigned long long u64; 
 
VI px(1), py(1); 
int d[21][21]; 
int seen[50][50]; 
 
VS g; 
int carry; 
int best[21][6][6][6][6][6]; 
 
class WaterBot { 
public: 
int minTime(vector <string> a, int b) { 
  carry = b; 
  g = a; 
  int i, j, k, x, y, z, n; 
  int ret; 
  VI p; 
 
  for( y = 0; y < g.size(); y++ ) 
  for( x = 0; x < g[0].size(); x++ ) { 
    if( g[y][x] == 'R' ) { 
      px[0] = x; py[0] = y; 
      g[y][x] = '.'; 
    } else if( isdigit(g[y][x]) ) { 
      z = g[y][x]-'0'; 
      g[y][x] = p.size()+'0'; 
      p.push_back(z); 
    } 
  } 
  while( p.size() < 4 ) p.push_back(0); 
  for( y = 0; y < g.size(); y++ ) 
  for( x = 0; x < g[0].size(); x++ ) { 
    if( g[y][x] != '.' ) continue; 
    if( x > 0 && g[y][x-1] != '.' || 
      y > 0 && g[y-1][x] != '.' || 
      x < g[0].size()-1 && g[y][x+1] != '.' || 
      y < g.size()-1 && g[y+1][x] != '.' ) { 
      px.push_back(x); 
      py.push_back(y); 
    } 
  } 
  for( i = 0; i < px.size(); i++ ) 
  for( j = 0; j < px.size(); j++ ) { 
    d[i][j] = 1000000; 
    memset(seen, 0, sizeof(seen)); 
    vector<pair<int, int> > q; 
    q.push_back(make_pair(px[i], py[i])); 
    seen[py[i]][px[i]] = 1; 
    n = 0; 
    while( !q.empty() ) { 
      vector<pair<int, int> > q2; 
      while( !q.empty() ) { 
        x = q.back().first; y = q.back().second; q.pop_back(); 
        if( x == px[j] && y == py[j] ) {d[i][j] = n; goto done;} 
        for( int dx = -1; dx <= 1; dx++ ) 
        for( int dy = -1; dy <= 1; dy++ ) 
          if( abs(dx)+abs(dy) == 1 ) 
            if( x+dx >= 0 && y+dy >= 0 && 
              x+dx < g[0].size() && y+dy < g.size() && 
              !seen[y+dy][x+dx] && 
              g[y+dy][x+dx] == '.' ) { 
              q2.push_back(make_pair(x+dx, y+dy)); 
              seen[y+dy][x+dx] = 1; 
            } 
      } 
      q = q2; 
      q2.clear(); 
      n++; 
    } 
done:  ; 
  } 
  memset(best, 100, sizeof(best)); 
  p.insert(p.begin(), 0); 
  p.push_back(0); 
  p.push_back(0); 
  priority_queue<VI> q; 
  q.push(p); 
  best[p[5]][p[6]][p[1]][p[2]][p[3]][p[4]] = 0; 
  while( !q.empty() ) { 
    p = q.top(); q.pop(); 
    if( -p[0] > best[p[5]][p[6]][p[1]][p[2]][p[3]][p[4]] ) continue; 
    if( p[1]+p[2]+p[3]+p[4] == 0 ) return -p[0]; 
    for( i = 1; i < px.size(); i++ ) 
    if( d[p[5]][i] > 0 && d[p[5]][i] < 1000000 ) { 
      VI p2 = p; 
      p2[5] = i; 
      p2[0] -= d[p[5]][i]; 
      if( -p2[0] < best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] ) { 
        q.push(p2); 
        best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] = -p2[0]; 
      } 
    } 
    x = px[p[5]]; y = py[p[5]]; 
//cout << -p[0] << ' ' << p[1] << ' ' << p[2] << ' ' << p[3] << ' ' << p[4] << ' ' << '(' << x << ',' << y << ')' << ' ' << p[6] << '\n'; 
    for( int dx = -1; dx <= 1; dx++ ) 
    for( int dy = -1; dy <= 1; dy++ ) if( abs(dx)+abs(dy) == 1 ) { 
      if( x+dx < 0 || x+dx >= g[0].size() || 
        y+dy < 0 || y+dy >= g.size() ) continue; 
      if( g[y+dy][x+dx] == 'W' ) { 
        if( p[6] == carry ) continue; 
        VI p2 = p; 
        p2[6]++; 
        p2[0]--; 
        if( -p2[0] < best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] ) { 
          q.push(p2); 
          best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] = -p2[0]; 
        } 
      } else if( isdigit(g[y+dy][x+dx]) ) { 
        z = g[y+dy][x+dx]-'0'; 
        if( !p[z+1] ) continue; 
        if( !p[6] ) continue; 
        VI p2 = p; 
        p2[6]--; 
        p2[z+1]--; 
        p2[0]--; 
        if( -p2[0] < best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] ) { 
          q.push(p2); 
          best[p2[5]][p2[6]][p2[1]][p2[2]][p2[3]][p2[4]] = -p2[0]; 
        } 
      } 
    } 
  } 
  return -1; 
} 
};

********************************************************************************
*******************************************************************************/