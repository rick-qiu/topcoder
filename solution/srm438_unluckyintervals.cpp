/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10356
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class UnluckyIntervals {
public:
    vector<int> getLuckiest(vector<int> luckySet, int n);
};

vector<int> UnluckyIntervals::getLuckiest(vector<int> luckySet, int n) {
    vector<int> ret;
    return ret;
}


int test0() {
    vector<int> luckySet = {3};
    int n = 6;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 1, 2, 4, 5, 6};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<int> luckySet = {5, 11, 18};
    int n = 9;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 11, 18, 1, 4, 6, 10, 2, 3};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<int> luckySet = {7, 13, 18};
    int n = 9;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 13, 18, 14, 17, 8, 12, 1, 6};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<int> luckySet = {1000, 1004, 4000, 4003, 5000};
    int n = 19;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1000, 1004, 4000, 4003, 5000, 4001, 4002, 1001, 1003, 1002, 4004, 4999, 1, 999, 4005, 4998, 2, 998, 4006};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<int> luckySet = {2};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<int> luckySet = {900534849, 431900333, 236426757, 336035476, 760889640, 134024802, 739683548, 694137081, 739667250};
    int n = 88;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {134024802, 236426757, 336035476, 431900333, 694137081, 739667250, 739683548, 760889640, 900534849, 739667251, 739683547, 739667252, 739683546, 739667253, 739683545, 739667254, 739683544, 739667255, 739683543, 739667256, 739683542, 739667257, 739683541, 739667258, 739683540, 739667259, 739683539, 739667260, 739683538, 739667261, 739683537, 739667262, 739683536, 739667263, 739683535, 739667264, 739683534, 739667265, 739683533, 739667266, 739683532, 739667267, 739683531, 739667268, 739683530, 739667269, 739683529, 739667270, 739683528, 739667271, 739683527, 739667272, 739683526, 739667273, 739683525, 739667274, 739683524, 739667275, 739683523, 739667276, 739683522, 739667277, 739683521, 739667278, 739683520, 739667279, 739683519, 739667280, 739683518, 739667281, 739683517, 739667282, 739683516, 739667283, 739683515, 739667284, 739683514, 739667285, 739683513, 739667286, 739683512, 739667287, 739683511, 739667288, 739683510, 739667289, 739683509, 739667290};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<int> luckySet = {743318490, 896104965, 874440370, 386067706, 529762835, 410241610, 248886924, 491262256, 748707285, 571411233, 941513395, 493264992, 707387129, 343139643, 32884781, 126143318, 729838497, 579686181, 553499786, 223154194, 746688472};
    int n = 91;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {32884781, 126143318, 223154194, 248886924, 343139643, 386067706, 410241610, 491262256, 493264992, 529762835, 553499786, 571411233, 579686181, 707387129, 729838497, 743318490, 746688472, 748707285, 874440370, 896104965, 941513395, 491262257, 493264991, 746688473, 748707284, 743318491, 746688471, 491262258, 493264990, 746688474, 748707283, 491262259, 493264989, 746688475, 748707282, 743318492, 746688470, 491262260, 493264988, 746688476, 748707281, 571411234, 579686180, 491262261, 493264987, 746688477, 748707280, 743318493, 746688469, 491262262, 493264986, 746688478, 748707279, 743318494, 746688468, 729838498, 743318489, 491262263, 493264985, 746688479, 748707278, 491262264, 493264984, 746688480, 748707277, 571411235, 579686179, 743318495, 746688467, 553499787, 571411232, 491262265, 493264983, 746688481, 748707276, 491262266, 493264982, 746688482, 748707275, 743318496, 746688466, 874440371, 896104964, 491262267, 493264981, 746688483, 748707274, 707387130, 729838496, 743318497, 746688465};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<int> luckySet = {312397094, 393339392, 499651569, 693497399, 724051552, 698739315, 336790381, 283789369, 955001329, 911366853, 460401367, 569518113, 649346267, 432190216, 603482083, 295037989, 886135193, 656888292, 739471001, 705823993, 725196591, 815662656, 760847059, 504273399, 512808085, 593172121, 722939665, 411720910, 365036949, 211475277, 361500845};
    int n = 83;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {211475277, 283789369, 295037989, 312397094, 336790381, 361500845, 365036949, 393339392, 411720910, 432190216, 460401367, 499651569, 504273399, 512808085, 569518113, 593172121, 603482083, 649346267, 656888292, 693497399, 698739315, 705823993, 722939665, 724051552, 725196591, 739471001, 760847059, 815662656, 886135193, 911366853, 955001329, 722939666, 724051551, 724051553, 725196590, 722939667, 724051550, 724051554, 725196589, 722939668, 724051549, 724051555, 725196588, 361500846, 365036948, 722939669, 724051548, 724051556, 725196587, 499651570, 504273398, 693497400, 698739314, 722939670, 724051547, 724051557, 725196586, 722939671, 724051546, 724051558, 725196585, 361500847, 365036947, 698739316, 705823992, 649346268, 656888291, 722939672, 724051545, 724051559, 725196584, 504273400, 512808084, 722939673, 724051544, 724051560, 725196583, 499651571, 504273397, 722939674, 724051543, 724051561, 725196582};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<int> luckySet = {97030056, 555722805, 483391034, 186226426, 186648217, 348904349, 735740321, 807345365, 843967183, 965670252, 628601536, 77138926, 984964974, 793863806, 65910735, 84299398, 698172534, 546593368, 770972151, 72029126, 186822885, 964493220, 977140547, 56589484};
    int n = 99;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {56589484, 65910735, 72029126, 77138926, 84299398, 97030056, 186226426, 186648217, 186822885, 348904349, 483391034, 546593368, 555722805, 628601536, 698172534, 735740321, 770972151, 793863806, 807345365, 843967183, 964493220, 965670252, 977140547, 984964974, 186648218, 186822884, 186648219, 186822883, 186226427, 186648216, 186648220, 186822882, 186648221, 186822881, 186226428, 186648215, 186648222, 186822880, 186648223, 186822879, 964493221, 965670251, 186648224, 186822878, 186226429, 186648214, 186648225, 186822877, 186648226, 186822876, 186226430, 186648213, 186648227, 186822875, 186648228, 186822874, 186648229, 186822873, 186226431, 186648212, 186648230, 186822872, 964493222, 965670250, 186648231, 186822871, 186226432, 186648211, 186648232, 186822870, 186648233, 186822869, 186226433, 186648210, 186648234, 186822868, 186648235, 186822867, 186648236, 186822866, 186226434, 186648209, 186648237, 186822865, 964493223, 965670249, 186648238, 186822864, 186226435, 186648208, 186648239, 186822863, 186648240, 186822862, 186648241, 186822861, 186226436, 186648207, 186648242};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<int> luckySet = {469825111, 162938444, 834816556, 61345101, 739600198, 986280760, 581242249, 14068091, 284202170, 936571762, 936558193, 66849434, 703492306, 59921355, 29754774, 258048991, 782356075, 218269017, 438747305, 858296565, 79002029, 378112910, 949230491, 509315948, 466691612, 947471482, 599532213, 633376623, 188254943, 259828453};
    int n = 91;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14068091, 29754774, 59921355, 61345101, 66849434, 79002029, 162938444, 188254943, 218269017, 258048991, 259828453, 284202170, 378112910, 438747305, 466691612, 469825111, 509315948, 581242249, 599532213, 633376623, 703492306, 739600198, 782356075, 834816556, 858296565, 936558193, 936571762, 947471482, 949230491, 986280760, 936558194, 936571761, 936558195, 936571760, 936558196, 936571759, 936558197, 936571758, 936558198, 936571757, 936558199, 936571756, 936558200, 936571755, 936558201, 936571754, 936558202, 936571753, 936558203, 936571752, 936558204, 936571751, 936558205, 936571750, 936558206, 936571749, 936558207, 936571748, 936558208, 936571747, 936558209, 936571746, 936558210, 936571745, 936558211, 936571744, 936558212, 936571743, 936558213, 936571742, 936558214, 936571741, 936558215, 936571740, 936558216, 936571739, 936558217, 936571738, 936558218, 936571737, 936558219, 936571736, 936558220, 936571735, 936558221, 936571734, 936558222, 936571733, 936558223, 936571732, 936558224};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<int> luckySet = {392764119, 11387091, 562872208, 693612798, 961084480, 589662250, 427829822, 291472476, 90537259, 56867137, 831571412, 991496955, 250439638, 59936022, 703836516, 97704216, 265076039, 723173678, 411937336, 924309124, 263387738};
    int n = 95;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {11387091, 56867137, 59936022, 90537259, 97704216, 250439638, 263387738, 265076039, 291472476, 392764119, 411937336, 427829822, 562872208, 589662250, 693612798, 703836516, 723173678, 831571412, 924309124, 961084480, 991496955, 263387739, 265076038, 56867138, 59936021, 263387740, 265076037, 263387741, 265076036, 56867139, 59936020, 263387742, 265076035, 90537260, 97704215, 263387743, 265076034, 56867140, 59936019, 263387744, 265076033, 693612799, 703836515, 1, 11387090, 263387745, 265076032, 56867141, 59936018, 250439639, 263387737, 263387746, 265076031, 90537261, 97704214, 263387747, 265076030, 56867142, 59936017, 411937337, 427829821, 263387748, 265076029, 56867143, 59936016, 263387749, 265076028, 392764120, 411937335, 703836517, 723173677, 263387750, 265076027, 693612800, 703836514, 56867144, 59936015, 90537262, 97704213, 263387751, 265076026, 2, 11387089, 263387752, 265076025, 56867145, 59936014, 263387753, 265076024, 250439640, 263387736, 265076040, 291472475, 562872209, 589662249};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<int> luckySet = {388628986, 171720553, 805096995, 697900268, 290583764};
    int n = 78;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {171720553, 290583764, 388628986, 697900268, 805096995, 290583765, 388628985, 697900269, 805096994, 171720554, 290583763, 1, 171720552, 290583766, 388628984, 697900270, 805096993, 171720555, 290583762, 290583767, 388628983, 388628987, 697900267, 697900271, 805096992, 2, 171720551, 171720556, 290583761, 290583768, 388628982, 697900272, 805096991, 171720557, 290583760, 290583769, 388628981, 3, 171720550, 697900273, 805096990, 290583770, 388628980, 171720558, 290583759, 388628988, 697900266, 697900274, 805096989, 290583771, 388628979, 4, 171720549, 171720559, 290583758, 697900275, 805096988, 290583772, 388628978, 171720560, 290583757, 697900276, 805096987, 5, 171720548, 290583773, 388628977, 388628989, 697900265, 171720561, 290583756, 697900277, 805096986, 290583774, 388628976, 6, 171720547, 171720562};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<int> luckySet = {810766638, 68724882, 437395046, 337154472, 28553914, 30686339, 811937886, 243018755, 791283637, 71533593, 373003598, 175960198, 153724585, 371425598, 716905698, 229442468, 705893488, 283775301, 959910506, 620940951, 770463304};
    int n = 81;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {28553914, 30686339, 68724882, 71533593, 153724585, 175960198, 229442468, 243018755, 283775301, 337154472, 371425598, 373003598, 437395046, 620940951, 705893488, 716905698, 770463304, 791283637, 810766638, 811937886, 959910506, 810766639, 811937885, 371425599, 373003597, 28553915, 30686338, 810766640, 811937884, 68724883, 71533592, 371425600, 373003596, 810766641, 811937883, 28553916, 30686337, 810766642, 811937882, 371425601, 373003595, 68724884, 71533591, 810766643, 811937881, 371425602, 373003594, 28553917, 30686336, 810766644, 811937880, 371425603, 373003593, 810766645, 811937879, 68724885, 71533590, 28553918, 30686335, 810766646, 811937878, 371425604, 373003592, 810766647, 811937877, 28553919, 30686334, 705893489, 716905697, 371425605, 373003591, 68724886, 71533589, 810766648, 811937876, 371425606, 373003590, 28553920, 30686333, 810766649, 811937875};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<int> luckySet = {211213861, 790348786, 243897378, 776397863, 624396601, 430659686, 198037795, 648215910, 229847431, 602435692, 290047293, 503543872, 732942548, 820819080, 176036811, 220936729, 20943564, 34191649, 276587648, 836752774, 975792089, 103507005, 527660270, 212345577, 940229135};
    int n = 75;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {20943564, 34191649, 103507005, 176036811, 198037795, 211213861, 212345577, 220936729, 229847431, 243897378, 276587648, 290047293, 430659686, 503543872, 527660270, 602435692, 624396601, 648215910, 732942548, 776397863, 790348786, 820819080, 836752774, 940229135, 975792089, 211213862, 212345576, 211213863, 212345575, 211213864, 212345574, 211213865, 212345573, 211213866, 212345572, 211213867, 212345571, 211213868, 212345570, 212345578, 220936728, 220936730, 229847430, 211213869, 212345569, 211213870, 212345568, 211213871, 212345567, 211213872, 212345566, 198037796, 211213860, 20943565, 34191648, 276587649, 290047292, 211213873, 212345565, 776397864, 790348785, 229847432, 243897377, 211213874, 212345564, 211213875, 212345563, 820819081, 836752773, 211213876, 212345562, 212345579, 220936727, 220936731, 229847429};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<int> luckySet = {100025298, 702535722, 640257062, 212310629, 633421630, 453532418, 974985818, 153583823, 348191122, 328400946, 302581756, 758478947, 374438347, 443770995, 958032667, 464912981, 35049430, 346087646, 697194305, 493935513, 541976883, 343712167, 14857213, 884709427, 316038748, 466518149, 23201328, 93207618, 884035850, 991956080, 751372345, 529091670};
    int n = 90;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14857213, 23201328, 35049430, 93207618, 100025298, 153583823, 212310629, 302581756, 316038748, 328400946, 343712167, 346087646, 348191122, 374438347, 443770995, 453532418, 464912981, 466518149, 493935513, 529091670, 541976883, 633421630, 640257062, 697194305, 702535722, 751372345, 758478947, 884035850, 884709427, 958032667, 974985818, 991956080, 884035851, 884709426, 884035852, 884709425, 464912982, 466518148, 884035853, 884709424, 346087647, 348191121, 343712168, 346087645, 884035854, 884709423, 464912983, 466518147, 884035855, 884709422, 884035856, 884709421, 346087648, 348191120, 884035857, 884709420, 343712169, 346087644, 464912984, 466518146, 697194306, 702535721, 884035858, 884709419, 884035859, 884709418, 346087649, 348191119, 464912985, 466518145, 884035860, 884709417, 93207619, 100025297, 633421631, 640257061, 751372346, 758478946, 343712170, 346087643, 884035861, 884709416, 464912986, 466518144, 884035862, 884709415, 14857214, 23201327, 346087650, 348191118};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<int> luckySet = {715817556, 32282307};
    int n = 96;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {32282307, 715817556, 1, 32282306, 2, 32282305, 3, 32282304, 4, 32282303, 5, 32282302, 6, 32282301, 7, 32282300, 8, 32282299, 9, 32282298, 10, 32282297, 11, 32282296, 12, 32282295, 13, 32282294, 14, 32282293, 15, 32282292, 16, 32282291, 17, 32282290, 18, 32282289, 19, 32282288, 20, 32282287, 21, 32282286, 32282308, 715817555, 22, 32282285, 23, 32282284, 24, 32282283, 25, 32282282, 26, 32282281, 27, 32282280, 28, 32282279, 29, 32282278, 30, 32282277, 31, 32282276, 32, 32282275, 33, 32282274, 34, 32282273, 35, 32282272, 36, 32282271, 37, 32282270, 38, 32282269, 39, 32282268, 40, 32282267, 41, 32282266, 42, 32282265, 32282309, 715817554, 43, 32282264, 44, 32282263, 45, 32282262};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<int> luckySet = {136312139, 366501082, 539177929, 664761919, 427815688, 54288185, 905304126, 666808531, 624023104, 242158927, 894554710, 250941703, 443063244, 751327349, 337057925, 248735281, 993732694, 539264247, 274985069, 421473606, 807172274, 274157982, 227666351, 669782876, 100000481, 161399489, 842384930, 692710674, 539590537, 379530230, 201980521, 371224255, 679062129, 882999848, 442825401, 349046482, 167641629};
    int n = 84;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {54288185, 100000481, 136312139, 161399489, 167641629, 201980521, 227666351, 242158927, 248735281, 250941703, 274157982, 274985069, 337057925, 349046482, 366501082, 371224255, 379530230, 421473606, 427815688, 442825401, 443063244, 539177929, 539264247, 539590537, 624023104, 664761919, 666808531, 669782876, 679062129, 692710674, 751327349, 807172274, 842384930, 882999848, 894554710, 905304126, 993732694, 539177930, 539264246, 539177931, 539264245, 442825402, 443063243, 539177932, 539264244, 539264248, 539590536, 539177933, 539264243, 539177934, 539264242, 442825403, 443063242, 539177935, 539264241, 539177936, 539264240, 539264249, 539590535, 539177937, 539264239, 442825404, 443063241, 539177938, 539264238, 274157983, 274985068, 539177939, 539264237, 539177940, 539264236, 442825405, 443063240, 539264250, 539590534, 539177941, 539264235, 539177942, 539264234, 442825406, 443063239, 539177943, 539264233, 539177944};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<int> luckySet = {194103246, 296909880, 112802604, 135562589, 131815976, 948644631, 374537498, 211845392, 466024795, 888138307, 921994654, 149371648, 729526373, 695197965, 18114295, 568978024, 884374838, 822490866};
    int n = 77;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {18114295, 112802604, 131815976, 135562589, 149371648, 194103246, 211845392, 296909880, 374537498, 466024795, 568978024, 695197965, 729526373, 822490866, 884374838, 888138307, 921994654, 948644631, 131815977, 135562588, 884374839, 888138306, 131815978, 135562587, 884374840, 888138305, 131815979, 135562586, 884374841, 888138304, 135562590, 149371647, 131815980, 135562585, 884374842, 888138303, 194103247, 211845391, 1, 18114294, 131815981, 135562584, 884374843, 888138302, 112802605, 131815975, 131815982, 135562583, 884374844, 888138301, 131815983, 135562582, 884374845, 888138300, 921994655, 948644630, 135562591, 149371646, 131815984, 135562581, 884374846, 888138299, 131815985, 135562580, 888138308, 921994653, 884374847, 888138298, 695197966, 729526372, 194103248, 211845390, 2, 18114293, 131815986, 135562579, 884374848};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<int> luckySet = {958518162, 434848481, 588305299, 20287959, 704610782, 776270812, 606454463, 539076850, 521592880, 332343049, 296276780, 219467644, 201064015, 996259423, 813706770, 587989107, 593144615, 466139934, 588701387, 282293567, 18007212, 788852578, 843517283, 450984526, 751078813, 357510205, 550644356, 777297528, 593538120, 518276418, 472475881, 281140634, 698649526, 199437447, 433490340, 827837458, 131102723, 654116985, 996042362, 270214353, 166751511, 422174125};
    int n = 82;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {18007212, 20287959, 131102723, 166751511, 199437447, 201064015, 219467644, 270214353, 281140634, 282293567, 296276780, 332343049, 357510205, 422174125, 433490340, 434848481, 450984526, 466139934, 472475881, 518276418, 521592880, 539076850, 550644356, 587989107, 588305299, 588701387, 593144615, 593538120, 606454463, 654116985, 698649526, 704610782, 751078813, 776270812, 777297528, 788852578, 813706770, 827837458, 843517283, 958518162, 996042362, 996259423, 996042363, 996259422, 587989108, 588305298, 593144616, 593538119, 588305300, 588701386, 996042364, 996259421, 587989109, 588305297, 996042365, 996259420, 593144617, 593538118, 588305301, 588701385, 996042366, 996259419, 587989110, 588305296, 776270813, 777297527, 996042367, 996259418, 281140635, 282293566, 593144618, 593538117, 588305302, 588701384, 587989111, 588305295, 996042368, 996259417, 433490341, 434848480, 996042369, 996259416};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<int> luckySet = {420610937, 316681716, 277999580, 308294179, 784399821, 256273562, 128185763, 520342579, 598802825, 258022836, 578680873, 680949695, 254491291, 703457791, 93545274, 659134303, 842319346, 746996025, 148512660, 546312983, 640080110, 962144206, 128537238, 641344601, 972511615, 467038282, 145600727, 763303799, 795349938, 936394761, 660337060, 478066637, 805338979, 463928446, 380732090};
    int n = 92;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {93545274, 128185763, 128537238, 145600727, 148512660, 254491291, 256273562, 258022836, 277999580, 308294179, 316681716, 380732090, 420610937, 463928446, 467038282, 478066637, 520342579, 546312983, 578680873, 598802825, 640080110, 641344601, 659134303, 660337060, 680949695, 703457791, 746996025, 763303799, 784399821, 795349938, 805338979, 842319346, 936394761, 962144206, 972511615, 128185764, 128537237, 128185765, 128537236, 128185766, 128537235, 659134304, 660337059, 640080111, 641344600, 128185767, 128537234, 256273563, 258022835, 128185768, 128537233, 254491292, 256273561, 128185769, 128537232, 659134305, 660337058, 128185770, 128537231, 640080112, 641344599, 128185771, 128537230, 145600728, 148512659, 463928447, 467038281, 128185772, 128537229, 256273564, 258022834, 128185773, 128537228, 254491293, 256273560, 659134306, 660337057, 640080113, 641344598, 128185774, 128537227, 128185775, 128537226, 128185776, 128537225, 659134307, 660337056, 128185777, 128537224, 640080114, 641344597, 256273565};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<int> luckySet = {486852470, 154882619, 762977466, 336278027, 485656997, 571302668, 111798346, 780756640, 804491364, 865274474, 88470494, 399139857, 125353773, 872889513, 150886912, 134634126, 731796128, 221559604, 514350057, 905278285, 113195028, 205617557, 231320156};
    int n = 82;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {88470494, 111798346, 113195028, 125353773, 134634126, 150886912, 154882619, 205617557, 221559604, 231320156, 336278027, 399139857, 485656997, 486852470, 514350057, 571302668, 731796128, 762977466, 780756640, 804491364, 865274474, 872889513, 905278285, 485656998, 486852469, 111798347, 113195027, 485656999, 486852468, 111798348, 113195026, 485657000, 486852467, 150886913, 154882618, 111798349, 113195025, 485657001, 486852466, 111798350, 113195024, 485657002, 486852465, 111798351, 113195023, 485657003, 486852464, 865274475, 872889512, 150886914, 154882617, 485657004, 486852463, 111798352, 113195022, 125353774, 134634125, 485657005, 486852462, 221559605, 231320155, 111798353, 113195021, 485657006, 486852461, 111798354, 113195020, 485657007, 486852460, 150886915, 154882616, 113195029, 125353772, 111798355, 113195019, 485657008, 486852459, 111798356, 113195018, 485657009, 486852458, 865274476};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<int> luckySet = {788449016, 816606571, 674757453, 729302257, 176788698, 730928866, 581541092, 800283745, 686686394, 993528791, 360818233, 488543309, 161632954, 487754088, 162759331, 257271397, 741459885, 874583553, 813546942, 971278219, 939343223, 185174703, 40025868, 31936988, 99722674, 355202170, 928733020, 279674282, 135460700, 811457503, 672871546, 75652947, 235081507, 513896809, 201813109, 271606359, 99117754, 341168491, 857614198, 627166789, 366749753, 396849725, 125355096, 865043097, 552365436, 158510064, 116163056, 762852690, 209543759};
    int n = 77;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {31936988, 40025868, 75652947, 99117754, 99722674, 116163056, 125355096, 135460700, 158510064, 161632954, 162759331, 176788698, 185174703, 201813109, 209543759, 235081507, 257271397, 271606359, 279674282, 341168491, 355202170, 360818233, 366749753, 396849725, 487754088, 488543309, 513896809, 552365436, 581541092, 627166789, 672871546, 674757453, 686686394, 729302257, 730928866, 741459885, 762852690, 788449016, 800283745, 811457503, 813546942, 816606571, 857614198, 865043097, 874583553, 928733020, 939343223, 971278219, 993528791, 99117755, 99722673, 487754089, 488543308, 161632955, 162759330, 99117756, 99722672, 487754090, 488543307, 729302258, 730928865, 99117757, 99722671, 672871547, 674757452, 811457504, 813546941, 161632956, 162759329, 487754091, 488543306, 99117758, 99722670, 99117759, 99722669, 813546943, 816606570};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<int> luckySet = {219803817, 59637206, 847965803, 554727715, 747528374, 171435407, 559645277};
    int n = 97;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {59637206, 171435407, 219803817, 554727715, 559645277, 747528374, 847965803, 554727716, 559645276, 554727717, 559645275, 554727718, 559645274, 554727719, 559645273, 554727720, 559645272, 554727721, 559645271, 554727722, 559645270, 554727723, 559645269, 554727724, 559645268, 171435408, 219803816, 554727725, 559645267, 554727726, 559645266, 554727727, 559645265, 1, 59637205, 554727728, 559645264, 554727729, 559645263, 554727730, 559645262, 554727731, 559645261, 554727732, 559645260, 554727733, 559645259, 554727734, 559645258, 171435409, 219803815, 554727735, 559645257, 747528375, 847965802, 554727736, 559645256, 554727737, 559645255, 59637207, 171435406, 554727738, 559645254, 554727739, 559645253, 2, 59637204, 554727740, 559645252, 554727741, 559645251, 554727742, 559645250, 554727743, 559645249, 554727744, 559645248, 171435410, 219803814, 554727745, 559645247, 554727746, 559645246, 554727747, 559645245, 554727748, 559645244, 554727749, 559645243, 554727750, 559645242, 554727751, 559645241, 3, 59637203, 554727752, 559645240};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<int> luckySet = {40226687, 209662599, 386070313, 788276660, 264172328, 337654238, 713120298, 446530033, 203121123, 574757057, 838817690, 67919560, 642264405, 703591199, 190765616, 975508655, 270690401, 393878519, 211105820, 124077855, 895949336, 151666051, 876233448, 521169880, 919079228, 981789284, 457239682, 170993926, 692714305, 301300120, 98386265, 538535139, 75695830, 147504526, 898395746, 942663050, 237986384, 156681304};
    int n = 79;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {40226687, 67919560, 75695830, 98386265, 124077855, 147504526, 151666051, 156681304, 170993926, 190765616, 203121123, 209662599, 211105820, 237986384, 264172328, 270690401, 301300120, 337654238, 386070313, 393878519, 446530033, 457239682, 521169880, 538535139, 574757057, 642264405, 692714305, 703591199, 713120298, 788276660, 838817690, 876233448, 895949336, 898395746, 919079228, 942663050, 975508655, 981789284, 209662600, 211105819, 895949337, 898395745, 209662601, 211105818, 147504527, 151666050, 209662602, 211105817, 895949338, 898395744, 151666052, 156681303, 209662603, 211105816, 975508656, 981789283, 264172329, 270690400, 203121124, 209662598, 209662604, 211105815, 895949339, 898395743, 67919561, 75695829, 386070314, 393878518, 147504528, 151666049, 209662605, 211105814, 703591200, 713120297, 895949340, 898395742, 151666053, 156681302, 209662606};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<int> luckySet = {499999999, 1000000000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {499999999, 1000000000, 1, 499999998, 500000000, 999999999, 2, 499999997, 500000001, 999999998, 3, 499999996, 500000002, 999999997, 4, 499999995, 500000003, 999999996, 5, 499999994, 500000004, 999999995, 6, 499999993, 500000005, 999999994, 7, 499999992, 500000006, 999999993, 8, 499999991, 500000007, 999999992, 9, 499999990, 500000008, 999999991, 10, 499999989, 500000009, 999999990, 11, 499999988, 500000010, 999999989, 12, 499999987, 500000011, 999999988, 13, 499999986, 500000012, 999999987, 14, 499999985, 500000013, 999999986, 15, 499999984, 500000014, 999999985, 16, 499999983, 500000015, 999999984, 17, 499999982, 500000016, 999999983, 18, 499999981, 500000017, 999999982, 19, 499999980, 500000018, 999999981, 20, 499999979, 500000019, 999999980, 21, 499999978, 500000020, 999999979, 22, 499999977, 500000021, 999999978, 23, 499999976, 500000022, 999999977, 24, 499999975, 500000023, 999999976, 25, 499999974};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<int> luckySet = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<int> luckySet = {1000000000};
    int n = 8;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1000000000, 1, 999999999, 2, 999999998, 3, 999999997, 4};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<int> luckySet = {700781772, 816465911, 970040514};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {700781772, 816465911, 970040514, 700781773, 816465910, 816465912, 970040513, 700781774, 816465909, 816465913, 970040512, 700781775, 816465908, 816465914, 970040511, 700781776, 816465907, 700781777, 816465906, 816465915, 970040510, 700781778, 816465905, 1, 700781771, 816465916, 970040509, 700781779, 816465904, 816465917, 970040508, 700781780, 816465903, 700781781, 816465902, 816465918, 970040507, 700781782, 816465901, 816465919, 970040506, 700781783, 816465900, 816465920, 970040505, 700781784, 816465899, 2, 700781770, 700781785, 816465898, 816465921, 970040504, 700781786, 816465897, 816465922, 970040503, 700781787, 816465896, 816465923, 970040502, 700781788, 816465895, 700781789, 816465894, 816465924, 970040501, 700781790, 816465893, 3, 700781769, 816465925, 970040500, 700781791, 816465892, 816465926, 970040499, 700781792, 816465891, 700781793, 816465890, 816465927, 970040498, 700781794, 816465889, 816465928, 970040497, 700781795, 816465888, 816465929, 970040496, 700781796, 816465887, 4, 700781768, 700781797, 816465886, 816465930, 970040495, 700781798};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<int> luckySet = {233966076, 378422696, 593220118, 815204730};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {233966076, 378422696, 593220118, 815204730, 233966077, 378422695, 378422697, 593220117, 593220119, 815204729, 1, 233966075, 233966078, 378422694, 378422698, 593220116, 233966079, 378422693, 593220120, 815204728, 2, 233966074, 233966080, 378422692, 378422699, 593220115, 593220121, 815204727, 3, 233966073, 233966081, 378422691, 378422700, 593220114, 233966082, 378422690, 593220122, 815204726, 4, 233966072, 233966083, 378422689, 378422701, 593220113, 593220123, 815204725, 233966084, 378422688, 5, 233966071, 378422702, 593220112, 233966085, 378422687, 593220124, 815204724, 6, 233966070, 233966086, 378422686, 378422703, 593220111, 593220125, 815204723, 233966087, 378422685, 7, 233966069, 378422704, 593220110, 233966088, 378422684, 593220126, 815204722, 8, 233966068, 233966089, 378422683, 378422705, 593220109, 593220127, 815204721, 233966090, 378422682, 9, 233966067, 378422706, 593220108, 233966091, 378422681, 593220128, 815204720, 233966092, 378422680, 10, 233966066, 378422707, 593220107, 593220129, 815204719};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<int> luckySet = {266567697, 341556186, 712498373, 340156982, 575424197, 461143295, 921890162, 693588565, 633078649, 559403040, 951009425, 917945280};
    int n = 81;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {266567697, 340156982, 341556186, 461143295, 559403040, 575424197, 633078649, 693588565, 712498373, 917945280, 921890162, 951009425, 340156983, 341556185, 340156984, 341556184, 917945281, 921890161, 340156985, 341556183, 340156986, 341556182, 340156987, 341556181, 917945282, 921890160, 340156988, 341556180, 340156989, 341556179, 340156990, 341556178, 917945283, 921890159, 340156991, 341556177, 340156992, 341556176, 340156993, 341556175, 917945284, 921890158, 559403041, 575424196, 340156994, 341556174, 340156995, 341556173, 693588566, 712498372, 340156996, 341556172, 917945285, 921890157, 340156997, 341556171, 340156998, 341556170, 917945286, 921890156, 340156999, 341556169, 340157000, 341556168, 340157001, 341556167, 917945287, 921890155, 340157002, 341556166, 921890163, 951009424, 340157003, 341556165, 340157004, 341556164, 917945288, 921890154, 559403042, 575424195, 340157005};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<int> luckySet = {664298680, 66452792, 848770025, 483353402, 660029534, 830455446, 376967129, 50901415};
    int n = 92;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {50901415, 66452792, 376967129, 483353402, 660029534, 664298680, 830455446, 848770025, 660029535, 664298679, 660029536, 664298678, 660029537, 664298677, 50901416, 66452791, 660029538, 664298676, 830455447, 848770024, 660029539, 664298675, 660029540, 664298674, 660029541, 664298673, 50901417, 66452790, 660029542, 664298672, 830455448, 848770023, 660029543, 664298671, 660029544, 664298670, 50901418, 66452789, 660029545, 664298669, 1, 50901414, 660029546, 664298668, 830455449, 848770022, 660029547, 664298667, 660029548, 664298666, 50901419, 66452788, 660029549, 664298665, 660029550, 664298664, 660029551, 664298663, 830455450, 848770021, 660029552, 664298662, 50901420, 66452787, 660029553, 664298661, 660029554, 664298660, 660029555, 664298659, 830455451, 848770020, 50901421, 66452786, 660029556, 664298658, 660029557, 664298657, 2, 50901413, 660029558, 664298656, 376967130, 483353401, 660029559, 664298655, 50901422, 66452785, 830455452, 848770019, 660029560, 664298654};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<int> luckySet = {574685312, 356158468, 474902022, 839970586, 712794056, 177075295, 664674317, 506453462, 34988998, 143064498, 433382750, 629860801};
    int n = 98;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {34988998, 143064498, 177075295, 356158468, 433382750, 474902022, 506453462, 574685312, 629860801, 664674317, 712794056, 839970586, 474902023, 506453461, 143064499, 177075294, 629860802, 664674316, 1, 34988997, 433382751, 474902021, 664674318, 712794055, 574685313, 629860800, 474902024, 506453460, 143064500, 177075293, 506453463, 574685311, 629860803, 664674315, 2, 34988996, 356158469, 433382749, 433382752, 474902020, 474902025, 506453459, 664674319, 712794054, 143064501, 177075292, 629860804, 664674314, 3, 34988995, 34988999, 143064497, 574685314, 629860799, 433382753, 474902019, 474902026, 506453458, 712794057, 839970585, 143064502, 177075291, 506453464, 574685310, 629860805, 664674313, 4, 34988994, 664674320, 712794053, 356158470, 433382748, 474902027, 506453457, 574685315, 629860798, 433382754, 474902018, 143064503, 177075290, 629860806, 664674312, 5, 34988993, 177075296, 356158467, 474902028, 506453456, 664674321, 712794052, 143064504, 177075289, 506453465, 574685309, 433382755, 474902017, 629860807, 664674311};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<int> luckySet = {547417384, 599895266, 955180827, 799655933, 365327906, 244082857, 69159399, 8718674};
    int n = 90;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {8718674, 69159399, 244082857, 365327906, 547417384, 599895266, 799655933, 955180827, 1, 8718673, 2, 8718672, 3, 8718671, 4, 8718670, 5, 8718669, 6, 8718668, 547417385, 599895265, 8718675, 69159398, 7, 8718667, 8, 8718666, 9, 8718665, 10, 8718664, 11, 8718663, 12, 8718662, 547417386, 599895264, 13, 8718661, 8718676, 69159397, 244082858, 365327905, 14, 8718660, 15, 8718659, 16, 8718658, 17, 8718657, 799655934, 955180826, 18, 8718656, 547417387, 599895263, 19, 8718655, 20, 8718654, 69159400, 244082856, 8718677, 69159396, 365327907, 547417383, 21, 8718653, 22, 8718652, 599895267, 799655932, 23, 8718651, 24, 8718650, 547417388, 599895262, 25, 8718649, 26, 8718648, 27, 8718647, 8718678, 69159395, 244082859, 365327904};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<int> luckySet = {264988091, 718261770, 559507201, 760463735, 184425661, 139589983, 612131599, 925931819, 678798208, 511336584, 5519571, 462362668, 42119677, 507461505, 935890924, 420359493, 30322735};
    int n = 88;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5519571, 30322735, 42119677, 139589983, 184425661, 264988091, 420359493, 462362668, 507461505, 511336584, 559507201, 612131599, 678798208, 718261770, 760463735, 925931819, 935890924, 507461506, 511336583, 1, 5519570, 507461507, 511336582, 925931820, 935890923, 2, 5519569, 507461508, 511336581, 30322736, 42119676, 507461509, 511336580, 3, 5519568, 507461510, 511336579, 925931821, 935890922, 4, 5519567, 507461511, 511336578, 30322737, 42119675, 5519572, 30322734, 507461512, 511336577, 5, 5519566, 925931822, 935890921, 507461513, 511336576, 6, 5519565, 507461514, 511336575, 30322738, 42119674, 7, 5519564, 507461515, 511336574, 678798209, 718261769, 925931823, 935890920, 420359494, 462362667, 718261771, 760463734, 507461516, 511336573, 8, 5519563, 139589984, 184425660, 462362669, 507461504, 507461517, 511336572, 30322739, 42119673, 511336585, 559507200, 5519573};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<int> luckySet = {284500341, 666687132, 179579941, 735781393, 480574065, 121910185, 370638754, 834505115, 839378414, 26936003, 768640375, 475177771, 909851404, 619067777, 349668828, 351196364, 268368444, 440908962, 605504307, 318040161, 237681999, 115614330, 640854661, 909787633, 917057263, 195168378, 328291489, 428161038, 50370938, 669172492, 762774525, 224072110, 192173430, 507137845, 122660206, 341392016, 668229845, 534923442, 660247225, 300614891, 707074589, 772395511, 466980029, 451924009, 272797624, 350974985, 296836064, 197113242, 333786048, 536886086};
    int n = 78;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {26936003, 50370938, 115614330, 121910185, 122660206, 179579941, 192173430, 195168378, 197113242, 224072110, 237681999, 268368444, 272797624, 284500341, 296836064, 300614891, 318040161, 328291489, 333786048, 341392016, 349668828, 350974985, 351196364, 370638754, 428161038, 440908962, 451924009, 466980029, 475177771, 480574065, 507137845, 534923442, 536886086, 605504307, 619067777, 640854661, 660247225, 666687132, 668229845, 669172492, 707074589, 735781393, 762774525, 768640375, 772395511, 834505115, 839378414, 909787633, 909851404, 917057263, 909787634, 909851403, 909787635, 909851402, 909787636, 909851401, 350974986, 351196363, 909787637, 909851400, 909787638, 909851399, 909787639, 909851398, 350974987, 351196362, 909787640, 909851397, 909787641, 909851396, 909787642, 909851395, 909787643, 909851394, 350974988, 351196361, 909787644, 909851393};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<int> luckySet = {401475811, 431307979, 585999411, 302240307, 608306078, 93932697, 425176642, 403653431, 474767000, 893714289, 623424666, 395783455, 816891603, 976519153, 933798534, 830518254, 755465056, 635482565, 771213219, 299868603, 215189904, 538262947, 376752245, 647566263};
    int n = 77;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {93932697, 215189904, 299868603, 302240307, 376752245, 395783455, 401475811, 403653431, 425176642, 431307979, 474767000, 538262947, 585999411, 608306078, 623424666, 635482565, 647566263, 755465056, 771213219, 816891603, 830518254, 893714289, 933798534, 976519153, 401475812, 403653430, 299868604, 302240306, 401475813, 403653429, 299868605, 302240305, 395783456, 401475810, 425176643, 431307978, 401475814, 403653428, 299868606, 302240304, 401475815, 403653427, 299868607, 302240303, 401475816, 403653426, 395783457, 401475809, 299868608, 302240302, 623424667, 635482564, 635482566, 647566262, 425176644, 431307977, 401475817, 403653425, 816891604, 830518253, 299868609, 302240301, 608306079, 623424665, 401475818, 403653424, 755465057, 771213218, 299868610, 302240300, 395783458, 401475808, 401475819, 403653423, 425176645, 431307976, 299868611};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<int> luckySet = {614319866, 756201234, 404904137, 766680397, 878860979, 873417167, 415016496, 38837852, 956200547, 616116888, 511981122, 720742190, 423758421, 652742785, 331262482, 577615635, 178842914, 778545128, 154964946, 156734923, 925436823, 79917464, 343261864};
    int n = 85;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {38837852, 79917464, 154964946, 156734923, 178842914, 331262482, 343261864, 404904137, 415016496, 423758421, 511981122, 577615635, 614319866, 616116888, 652742785, 720742190, 756201234, 766680397, 778545128, 873417167, 878860979, 925436823, 956200547, 154964947, 156734922, 614319867, 616116887, 154964948, 156734921, 614319868, 616116886, 154964949, 156734920, 614319869, 616116885, 873417168, 878860978, 154964950, 156734919, 614319870, 616116884, 415016497, 423758420, 154964951, 156734918, 614319871, 616116883, 404904138, 415016495, 756201235, 766680396, 154964952, 156734917, 614319872, 616116882, 873417169, 878860977, 766680398, 778545127, 331262483, 343261863, 154964953, 156734916, 614319873, 616116881, 154964954, 156734915, 614319874, 616116880, 154964955, 156734914, 614319875, 616116879, 873417170, 878860976, 415016498, 423758419, 154964956, 156734913, 614319876, 616116878, 154964957, 156734912, 614319877, 616116877};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<int> luckySet = {509049375, 872174176, 117680690, 892473464, 660273704, 500976960, 722600503, 265342232, 334503855, 385167900, 200527735, 308199219, 380268128, 363064464, 237217261, 557124604};
    int n = 98;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {117680690, 200527735, 237217261, 265342232, 308199219, 334503855, 363064464, 380268128, 385167900, 500976960, 509049375, 557124604, 660273704, 722600503, 872174176, 892473464, 380268129, 385167899, 500976961, 509049374, 380268130, 385167898, 380268131, 385167897, 500976962, 509049373, 363064465, 380268127, 380268132, 385167896, 872174177, 892473463, 500976963, 509049372, 380268133, 385167895, 308199220, 334503854, 237217262, 265342231, 334503856, 363064463, 380268134, 385167894, 500976964, 509049371, 380268135, 385167893, 363064466, 380268126, 200527736, 237217260, 380268136, 385167892, 500976965, 509049370, 872174178, 892473462, 265342233, 308199218, 380268137, 385167891, 509049376, 557124603, 500976966, 509049369, 380268138, 385167890, 363064467, 380268125, 308199221, 334503853, 380268139, 385167889, 237217263, 265342230, 500976967, 509049368, 334503857, 363064462, 380268140, 385167888, 872174179, 892473461, 660273705, 722600502, 380268141, 385167887, 500976968, 509049367, 380268142, 385167886, 363064468, 380268124, 500976969, 509049366, 200527737, 237217259};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<int> luckySet = {5663814, 435223747, 967240165, 468593910, 43900515, 461125267, 246761409, 715848057, 66747585, 411481001, 541792596, 538902803, 966500725};
    int n = 92;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5663814, 43900515, 66747585, 246761409, 411481001, 435223747, 461125267, 468593910, 538902803, 541792596, 715848057, 966500725, 967240165, 966500726, 967240164, 966500727, 967240163, 966500728, 967240162, 538902804, 541792595, 966500729, 967240161, 966500730, 967240160, 966500731, 967240159, 966500732, 967240158, 1, 5663813, 538902805, 541792594, 966500733, 967240157, 966500734, 967240156, 966500735, 967240155, 461125268, 468593909, 966500736, 967240154, 538902806, 541792593, 966500737, 967240153, 966500738, 967240152, 966500739, 967240151, 966500740, 967240150, 2, 5663812, 538902807, 541792592, 966500741, 967240149, 966500742, 967240148, 966500743, 967240147, 966500744, 967240146, 538902808, 541792591, 966500745, 967240145, 461125269, 468593908, 966500746, 967240144, 966500747, 967240143, 3, 5663811, 966500748, 967240142, 538902809, 541792590, 966500749, 967240141, 966500750, 967240140, 966500751, 967240139, 966500752, 967240138, 538902810, 541792589, 966500753};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<int> luckySet = {480752040, 891838867, 808893381, 448097763, 24407837, 101379862, 44603505, 589177067, 648303256, 105193504, 621645599, 6335629, 892765173, 105189830, 301999172, 991100346, 948529556, 10744660, 463800490, 805605699, 926658701, 211602276, 973197977, 742506773, 217974749, 431389434, 401721275, 453272366, 869595945, 688040834, 563893667, 415318175, 567672768, 479256405, 544104502, 27283093};
    int n = 88;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6335629, 10744660, 24407837, 27283093, 44603505, 101379862, 105189830, 105193504, 211602276, 217974749, 301999172, 401721275, 415318175, 431389434, 448097763, 453272366, 463800490, 479256405, 480752040, 544104502, 563893667, 567672768, 589177067, 621645599, 648303256, 688040834, 742506773, 805605699, 808893381, 869595945, 891838867, 892765173, 926658701, 948529556, 973197977, 991100346, 105189831, 105193503, 105189832, 105193502, 105189833, 105193501, 105189834, 105193500, 105189835, 105193499, 105189836, 105193498, 105189837, 105193497, 105189838, 105193496, 105189839, 105193495, 105189840, 105193494, 105189841, 105193493, 105189842, 105193492, 105189843, 105193491, 105189844, 105193490, 105189845, 105193489, 105189846, 105193488, 105189847, 105193487, 105189848, 105193486, 105189849, 105193485, 105189850, 105193484, 105189851, 105193483, 105189852, 105193482, 105189853, 105193481, 105189854, 105193480, 105189855, 105193479, 105189856, 105193478};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<int> luckySet = {679489164, 612447199, 440764430, 88375491, 598599992, 870348344, 148458818, 84331657, 941622034, 591876831, 309262254, 927744557, 293306496, 852242884, 560046136, 972382342, 133288746, 950181269, 318327894};
    int n = 78;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {84331657, 88375491, 133288746, 148458818, 293306496, 309262254, 318327894, 440764430, 560046136, 591876831, 598599992, 612447199, 679489164, 852242884, 870348344, 927744557, 941622034, 950181269, 972382342, 84331658, 88375490, 591876832, 598599991, 84331659, 88375489, 941622035, 950181268, 309262255, 318327893, 84331660, 88375488, 591876833, 598599990, 598599993, 612447198, 927744558, 941622033, 133288747, 148458817, 293306497, 309262253, 84331661, 88375487, 941622036, 950181267, 852242885, 870348343, 309262256, 318327892, 591876834, 598599989, 84331662, 88375486, 950181270, 972382341, 84331663, 88375485, 941622037, 950181266, 591876835, 598599988, 309262257, 318327891, 598599994, 612447197, 927744559, 941622032, 84331664, 88375484, 133288748, 148458816, 560046137, 591876830, 293306498, 309262252, 84331665, 88375483, 591876836};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<int> luckySet = {873723266, 921446216, 840412621, 289077144, 86465661, 356810368, 232025403, 395125616, 183147411, 844053747, 655055129, 531130532, 907693433, 265858298, 485639607, 531409686, 920589909, 801639375, 99783568, 859367465, 483337439, 501090616, 864362771, 260985910, 664338108, 138853642, 76931522, 262268542, 458069658, 9253456, 23725286, 593780403, 769842222};
    int n = 92;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {9253456, 23725286, 76931522, 86465661, 99783568, 138853642, 183147411, 232025403, 260985910, 262268542, 265858298, 289077144, 356810368, 395125616, 458069658, 483337439, 485639607, 501090616, 531130532, 531409686, 593780403, 655055129, 664338108, 769842222, 801639375, 840412621, 844053747, 859367465, 864362771, 873723266, 907693433, 920589909, 921446216, 531130533, 531409685, 531130534, 531409684, 531130535, 531409683, 920589910, 921446215, 531130536, 531409682, 260985911, 262268541, 531130537, 531409681, 531130538, 531409680, 920589911, 921446214, 531130539, 531409679, 531130540, 531409678, 483337440, 485639606, 531130541, 531409677, 260985912, 262268540, 920589912, 921446213, 531130542, 531409676, 531130543, 531409675, 531130544, 531409674, 920589913, 921446212, 262268543, 265858297, 531130545, 531409673, 840412622, 844053746, 260985913, 262268539, 531130546, 531409672, 531130547, 531409671, 920589914, 921446211, 531130548, 531409670, 483337441, 485639605, 531130549, 531409669, 859367466};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<int> luckySet = {539531795, 237036934, 584917500, 239557272, 747709584, 709402460, 522993967, 655607042, 927048653, 718445100, 787081814, 51550486, 680197813, 410649680, 185640363, 95939056, 387044378, 412359715, 916100782, 380815916, 55805984, 825967076, 94340645, 281720663, 533533401, 384967208, 113607480, 113626165, 476722897, 10414187, 192475274, 695225462};
    int n = 96;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {10414187, 51550486, 55805984, 94340645, 95939056, 113607480, 113626165, 185640363, 192475274, 237036934, 239557272, 281720663, 380815916, 384967208, 387044378, 410649680, 412359715, 476722897, 522993967, 533533401, 539531795, 584917500, 655607042, 680197813, 695225462, 709402460, 718445100, 747709584, 787081814, 825967076, 916100782, 927048653, 113607481, 113626164, 113607482, 113626163, 113607483, 113626162, 113607484, 113626161, 113607485, 113626160, 113607486, 113626159, 113607487, 113626158, 113607488, 113626157, 113607489, 113626156, 113607490, 113626155, 113607491, 113626154, 113607492, 113626153, 113607493, 113626152, 113607494, 113626151, 113607495, 113626150, 113607496, 113626149, 113607497, 113626148, 113607498, 113626147, 113607499, 113626146, 113607500, 113626145, 113607501, 113626144, 113607502, 113626143, 113607503, 113626142, 113607504, 113626141, 113607505, 113626140, 113607506, 113626139, 113607507, 113626138, 113607508, 113626137, 113607509, 113626136, 113607510, 113626135, 113607511, 113626134, 113607512, 113626133};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<int> luckySet = {256627304, 20900539};
    int n = 96;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {20900539, 256627304, 1, 20900538, 2, 20900537, 3, 20900536, 4, 20900535, 5, 20900534, 6, 20900533, 7, 20900532, 8, 20900531, 9, 20900530, 10, 20900529, 11, 20900528, 20900540, 256627303, 12, 20900527, 13, 20900526, 14, 20900525, 15, 20900524, 16, 20900523, 17, 20900522, 18, 20900521, 19, 20900520, 20, 20900519, 21, 20900518, 22, 20900517, 20900541, 256627302, 23, 20900516, 24, 20900515, 25, 20900514, 26, 20900513, 27, 20900512, 28, 20900511, 29, 20900510, 30, 20900509, 31, 20900508, 32, 20900507, 33, 20900506, 20900542, 256627301, 34, 20900505, 35, 20900504, 36, 20900503, 37, 20900502, 38, 20900501, 39, 20900500, 40, 20900499, 41, 20900498, 42, 20900497, 43, 20900496, 44, 20900495};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<int> luckySet = {936801569, 519640039, 946495255, 60750713, 460810029, 933208297, 893697566, 989077160, 690511401, 982127644, 628381848, 971593792, 412369426, 497788472, 717540005, 21521576, 91591802, 467486230, 279285462, 57990957, 514047876, 727918226, 818045197, 14438529, 635175821, 780787660, 599553725, 192123897, 801796140, 659170521, 234603264, 369971826};
    int n = 92;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14438529, 21521576, 57990957, 60750713, 91591802, 192123897, 234603264, 279285462, 369971826, 412369426, 460810029, 467486230, 497788472, 514047876, 519640039, 599553725, 628381848, 635175821, 659170521, 690511401, 717540005, 727918226, 780787660, 801796140, 818045197, 893697566, 933208297, 936801569, 946495255, 971593792, 982127644, 989077160, 57990958, 60750712, 933208298, 936801568, 57990959, 60750711, 514047877, 519640038, 460810030, 467486229, 628381849, 635175820, 982127645, 989077159, 14438530, 21521575, 933208299, 936801567, 57990960, 60750710, 936801570, 946495254, 717540006, 727918225, 971593793, 982127643, 933208300, 936801566, 57990961, 60750709, 514047878, 519640037, 460810031, 467486228, 628381850, 635175819, 57990962, 60750708, 982127646, 989077158, 14438531, 21521574, 933208301, 936801565, 1, 14438528, 801796141, 818045196, 497788473, 514047875, 57990963, 60750707, 514047879, 519640036, 933208302, 936801564, 57990964, 60750706, 936801571, 946495253};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<int> luckySet = {110843479, 200706182, 584756568, 617237503, 648542508, 453660859, 202265152, 706706456, 823005274, 513695422, 349377546, 460313032, 131078830, 432329532, 225847138, 707561351, 753785856, 944877835, 454840072, 840404081, 892332164, 566275250, 980353298, 823368079, 783385462, 646517438, 621692798, 969443280, 916492160, 322892220, 871768328, 544606790, 217741770, 401429411, 582853712, 646209449, 191757124, 444869468, 971812036, 174018306, 704981211, 724227916, 499531399, 259227564, 369090671};
    int n = 87;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {110843479, 131078830, 174018306, 191757124, 200706182, 202265152, 217741770, 225847138, 259227564, 322892220, 349377546, 369090671, 401429411, 432329532, 444869468, 453660859, 454840072, 460313032, 499531399, 513695422, 544606790, 566275250, 582853712, 584756568, 617237503, 621692798, 646209449, 646517438, 648542508, 704981211, 706706456, 707561351, 724227916, 753785856, 783385462, 823005274, 823368079, 840404081, 871768328, 892332164, 916492160, 944877835, 969443280, 971812036, 980353298, 646209450, 646517437, 823005275, 823368078, 646209451, 646517436, 823005276, 823368077, 706706457, 707561350, 646209452, 646517435, 823005277, 823368076, 453660860, 454840071, 646209453, 646517434, 823005278, 823368075, 646209454, 646517433, 200706183, 202265151, 706706458, 707561349, 704981212, 706706455, 823005279, 823368074, 646209455, 646517432, 582853713, 584756567, 646517439, 648542507, 646209456, 646517431, 823005280, 823368073, 453660861, 454840070};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<int> luckySet = {889918481, 235404237, 333377532, 489123225, 734751485, 411138672, 744469354, 490146923, 381476431, 395306798, 142068322, 971348174, 281866587, 65373812, 601364173, 848771071, 261888890, 317856214, 654672781, 24719858, 258423612, 464467865, 313664937, 517568027, 180363455, 291056113, 573670799, 602043818, 394184197, 586808557};
    int n = 83;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {24719858, 65373812, 142068322, 180363455, 235404237, 258423612, 261888890, 281866587, 291056113, 313664937, 317856214, 333377532, 381476431, 394184197, 395306798, 411138672, 464467865, 489123225, 490146923, 517568027, 573670799, 586808557, 601364173, 602043818, 654672781, 734751485, 744469354, 848771071, 889918481, 971348174, 601364174, 602043817, 489123226, 490146922, 394184198, 395306797, 601364175, 602043816, 601364176, 602043815, 489123227, 490146921, 394184199, 395306796, 601364177, 602043814, 489123228, 490146920, 394184200, 395306795, 601364178, 602043813, 258423613, 261888889, 601364179, 602043812, 489123229, 490146919, 313664938, 317856213, 394184201, 395306794, 601364180, 602043811, 489123230, 490146918, 601364181, 602043810, 394184202, 395306793, 601364182, 602043809, 489123231, 490146917, 394184203, 395306792, 601364183, 602043808, 258423614, 261888888, 489123232, 490146916, 601364184};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<int> luckySet = {751236397, 543672745, 412077877, 390380721, 897376946, 635135983, 203569333, 364922347, 536633354, 627644159, 369200124, 922583623, 856341997, 8022322, 401544668, 511604279, 568206944, 109812538, 684415459, 824849891, 128299087, 765291706, 920522213, 604111787, 286256269, 935805705, 265252050, 830783874, 110594172, 186414625, 425030053, 711398870, 681986381, 44911640, 696769315, 24718122, 967641771, 630166221, 90234061, 120395338};
    int n = 76;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {8022322, 24718122, 44911640, 90234061, 109812538, 110594172, 120395338, 128299087, 186414625, 203569333, 265252050, 286256269, 364922347, 369200124, 390380721, 401544668, 412077877, 425030053, 511604279, 536633354, 543672745, 568206944, 604111787, 627644159, 630166221, 635135983, 681986381, 684415459, 696769315, 711398870, 751236397, 765291706, 824849891, 830783874, 856341997, 897376946, 920522213, 922583623, 935805705, 967641771, 109812539, 110594171, 109812540, 110594170, 920522214, 922583622, 109812541, 110594169, 681986382, 684415458, 627644160, 630166220, 109812542, 110594168, 109812543, 110594167, 920522215, 922583621, 364922348, 369200123, 109812544, 110594166, 681986383, 684415457, 630166222, 635135982, 627644161, 630166219, 109812545, 110594165, 824849892, 830783873, 920522216, 922583620, 109812546, 110594164};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<int> luckySet = {454391678, 44446893, 509891534, 185938397, 914027673, 600436735, 187251626, 743171757, 415431336, 582243787, 606989918, 951408202, 53386245, 448600226, 654794519, 455834570, 378428955, 232044503, 460606841, 799961248, 915654678, 858454600, 867575134, 945607328, 677849726, 904470265, 852466734, 879965994, 281632846, 838200736, 146404379, 322946562, 621159067, 924206514, 350285652, 538196773, 284900691, 755722974, 368384332};
    int n = 81;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {44446893, 53386245, 146404379, 185938397, 187251626, 232044503, 281632846, 284900691, 322946562, 350285652, 368384332, 378428955, 415431336, 448600226, 454391678, 455834570, 460606841, 509891534, 538196773, 582243787, 600436735, 606989918, 621159067, 654794519, 677849726, 743171757, 755722974, 799961248, 838200736, 852466734, 858454600, 867575134, 879965994, 904470265, 914027673, 915654678, 924206514, 945607328, 951408202, 185938398, 187251625, 454391679, 455834569, 914027674, 915654677, 185938399, 187251624, 454391680, 455834568, 914027675, 915654676, 281632847, 284900690, 185938400, 187251623, 454391681, 455834567, 455834571, 460606840, 914027676, 915654675, 185938401, 187251622, 454391682, 455834566, 448600227, 454391677, 945607329, 951408201, 852466735, 858454599, 914027677, 915654674, 281632848, 284900689, 600436736, 606989917, 185938402, 187251621, 454391683, 455834565};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<int> luckySet = {175229983, 493048727, 303064374, 60021529, 46305022, 680024866, 205885960, 283005380, 142499407, 170417209, 35920244, 207022354, 21895903, 6066113, 364262566, 71754191, 800863698, 289429031, 25899692, 356784652, 556420530, 2061898, 252517291, 141854121, 16718282, 184842155, 8552351, 187009180, 212567709, 59097906, 10322943, 513455682, 189865124, 641737313, 292887132, 357852779, 149778398, 160908890, 403249136, 70135806, 80260440, 305937424, 84719202, 189032459, 313734129, 20712870, 42378106, 231346921};
    int n = 97;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2061898, 6066113, 8552351, 10322943, 16718282, 20712870, 21895903, 25899692, 35920244, 42378106, 46305022, 59097906, 60021529, 70135806, 71754191, 80260440, 84719202, 141854121, 142499407, 149778398, 160908890, 170417209, 175229983, 184842155, 187009180, 189032459, 189865124, 205885960, 207022354, 212567709, 231346921, 252517291, 283005380, 289429031, 292887132, 303064374, 305937424, 313734129, 356784652, 357852779, 364262566, 403249136, 493048727, 513455682, 556420530, 641737313, 680024866, 800863698, 141854122, 142499406, 189032460, 189865123, 59097907, 60021528, 356784653, 357852778, 205885961, 207022353, 20712871, 21895902, 141854123, 142499405, 70135807, 71754190, 189032461, 189865122, 8552352, 10322942, 59097908, 60021527, 141854124, 142499404, 187009181, 189032458, 1, 2061897, 356784654, 357852777, 184842156, 187009179, 205885962, 207022352, 20712872, 21895901, 6066114, 8552350, 189032462, 189865121, 141854125, 142499403, 59097909, 60021526, 303064375, 305937423, 356784655, 357852776, 141854126};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<int> luckySet = {946615912, 26732933, 799049393, 256073327, 290249068, 142460676, 20720313, 27230963, 124970879, 218621942, 138929006, 188053948, 574597874, 308164885, 696098914, 318873501, 251191821, 189638725, 170865700, 35972834, 627377918, 683735666, 811074676, 227477059, 201739657, 167538687, 213326987, 111445718, 129475089, 104505176, 141900616, 54648304, 210912477, 308074344, 18005126, 157235890, 604378827, 530337812, 73346901, 139344716, 696065638, 79345698, 153451876, 412657, 80290732, 521101562, 65812316, 861273482};
    int n = 95;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {412657, 18005126, 20720313, 26732933, 27230963, 35972834, 54648304, 65812316, 73346901, 79345698, 80290732, 104505176, 111445718, 124970879, 129475089, 138929006, 139344716, 141900616, 142460676, 153451876, 157235890, 167538687, 170865700, 188053948, 189638725, 201739657, 210912477, 213326987, 218621942, 227477059, 251191821, 256073327, 290249068, 308074344, 308164885, 318873501, 521101562, 530337812, 574597874, 604378827, 627377918, 683735666, 696065638, 696098914, 799049393, 811074676, 861273482, 946615912, 696065639, 696098913, 696065640, 696098912, 308074345, 308164884, 696065641, 696098911, 696065642, 696098910, 696065643, 696098909, 308074346, 308164883, 696065644, 696098908, 696065645, 696098907, 696065646, 696098906, 308074347, 308164882, 696065647, 696098905, 696065648, 696098904, 308074348, 308164881, 696065649, 696098903, 696065650, 696098902, 1, 412656, 138929007, 139344715, 696065651, 696098901, 308074349, 308164880, 696065652, 696098900, 26732934, 27230962, 696065653, 696098899, 696065654};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<int> luckySet = {116728938, 327850624, 503220661, 405998155, 45349922, 450522022, 409883408, 662081366, 586053651, 47312749, 499319798, 416797771, 56850271, 40451768, 404777075, 70532827, 544823200, 197204288, 1267366, 115974895, 115336617, 92173127, 89353544, 77882686, 223873370, 581562589, 706718471, 592084243, 75740273, 260515859, 18367277, 734232746, 144144139, 454900949, 7453943, 766119744, 867365628, 19101542, 28760717, 503781133, 352162195, 859363950, 84554205, 93062721, 145959899, 420014915, 485594636};
    int n = 86;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1267366, 7453943, 18367277, 19101542, 28760717, 40451768, 45349922, 47312749, 56850271, 70532827, 75740273, 77882686, 84554205, 89353544, 92173127, 93062721, 115336617, 115974895, 116728938, 144144139, 145959899, 197204288, 223873370, 260515859, 327850624, 352162195, 404777075, 405998155, 409883408, 416797771, 420014915, 450522022, 454900949, 485594636, 499319798, 503220661, 503781133, 544823200, 581562589, 586053651, 592084243, 662081366, 706718471, 734232746, 766119744, 859363950, 867365628, 503220662, 503781132, 115336618, 115974894, 18367278, 19101541, 115974896, 116728937, 92173128, 93062720, 503220663, 503781131, 404777076, 405998154, 1, 1267365, 115336619, 115974893, 18367279, 19101540, 115974897, 116728936, 503220664, 503781130, 92173129, 93062719, 144144140, 145959898, 115336620, 115974892, 45349923, 47312748, 75740274, 77882685, 18367280, 19101539, 503220665, 503781129, 115974898};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<int> luckySet = {195953481, 82969156, 7193535, 403118167, 406274842, 21812299, 160788732, 118965798, 413005320, 419751478, 110874243, 35167233, 365796565, 616459152, 161351355, 304099620, 59498761, 261209999, 665759372, 54457838, 509281416, 148238448, 317981080, 281178574, 133521517, 320654867, 777373341, 273469254, 223415, 86204381, 475576245, 126134014, 146265871, 258965584};
    int n = 92;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {223415, 7193535, 21812299, 35167233, 54457838, 59498761, 82969156, 86204381, 110874243, 118965798, 126134014, 133521517, 146265871, 148238448, 160788732, 161351355, 195953481, 258965584, 261209999, 273469254, 281178574, 304099620, 317981080, 320654867, 365796565, 403118167, 406274842, 413005320, 419751478, 475576245, 509281416, 616459152, 665759372, 777373341, 1, 223414, 2, 223413, 160788733, 161351354, 3, 223412, 4, 223411, 5, 223410, 160788734, 161351353, 6, 223409, 7, 223408, 160788735, 161351352, 8, 223407, 146265872, 148238447, 9, 223406, 10, 223405, 258965585, 261209998, 160788736, 161351351, 11, 223404, 317981081, 320654866, 12, 223403, 160788737, 161351350, 13, 223402, 14, 223401, 403118168, 406274841, 82969157, 86204380, 15, 223400, 160788738, 161351349, 16, 223399, 17, 223398, 160788739, 161351348};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<int> luckySet = {693034097, 208220409, 392556241, 468403870, 127301627, 6096145, 240124736, 173586, 108395929, 223521350, 90731483, 319494999, 146847892, 292602513, 255351360, 275851224, 556738931, 339264597, 485523724, 2245017, 644516490, 31941600, 437936735, 556330861, 21298956, 95392767, 356767626, 311456310, 534776170, 204221640, 158968295, 185655008, 20635620, 156430164, 333317249, 129110357, 321319545, 748854, 35083929};
    int n = 89;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {173586, 748854, 2245017, 6096145, 20635620, 21298956, 31941600, 35083929, 90731483, 95392767, 108395929, 127301627, 129110357, 146847892, 156430164, 158968295, 185655008, 204221640, 208220409, 223521350, 240124736, 255351360, 275851224, 292602513, 311456310, 319494999, 321319545, 333317249, 339264597, 356767626, 392556241, 437936735, 468403870, 485523724, 534776170, 556330861, 556738931, 644516490, 693034097, 1, 173585, 2, 173584, 556330862, 556738930, 3, 173583, 173587, 748853, 20635621, 21298955, 4, 173582, 556330863, 556738929, 5, 173581, 6, 173580, 173588, 748852, 7, 173579, 556330864, 556738928, 20635622, 21298954, 8, 173578, 748855, 2245016, 9, 173577, 556330865, 556738927, 173589, 748851, 10, 173576, 127301628, 129110356, 319495000, 321319544, 11, 173575, 20635623, 21298953, 556330866, 556738926};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<int> luckySet = {78117878, 8178429, 6034292, 275971060, 21497886, 39081732, 271034483, 519768397, 665628686, 76255669, 356862773, 444462081, 517315210, 126134331, 207584130, 551698630, 323419591, 103367111, 117890195, 50441553, 41962001, 95010773, 295379420, 15878167, 155576628, 241583946, 203848435, 673448911, 43453960, 409732424, 715130184};
    int n = 83;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6034292, 8178429, 15878167, 21497886, 39081732, 41962001, 43453960, 50441553, 76255669, 78117878, 95010773, 103367111, 117890195, 126134331, 155576628, 203848435, 207584130, 241583946, 271034483, 275971060, 295379420, 323419591, 356862773, 409732424, 444462081, 517315210, 519768397, 551698630, 665628686, 673448911, 715130184, 41962002, 43453959, 76255670, 78117877, 6034293, 8178428, 517315211, 519768396, 39081733, 41962000, 41962003, 43453958, 76255671, 78117876, 203848436, 207584129, 6034294, 8178427, 41962004, 43453957, 517315212, 519768395, 271034484, 275971059, 76255672, 78117875, 15878168, 21497885, 39081734, 41961999, 41962005, 43453956, 1, 6034291, 6034295, 8178426, 43453961, 50441552, 517315213, 519768394, 76255673, 78117874, 41962006, 43453955, 203848437, 207584128, 8178430, 15878166, 665628687, 673448910, 117890196, 126134330};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<int> luckySet = {389132970, 89949545, 39562416, 218604083, 75239659, 54263042, 61737781, 122315571, 124181400, 97847351, 386960381, 422816973, 308403251, 423454672, 194236196, 140871141, 54374821, 43156128, 11287019, 419311868, 50141766, 187699418, 214958670, 22774493, 694591753, 26944515, 105621236, 349910435, 44126870, 66362188, 6765912, 400992121, 75686865, 266867065, 237912766, 449363682, 244665716, 34115950, 450293028, 466878590, 8830813, 44188309, 104098856, 345525856, 212895459};
    int n = 91;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6765912, 8830813, 11287019, 22774493, 26944515, 34115950, 39562416, 43156128, 44126870, 44188309, 50141766, 54263042, 54374821, 61737781, 66362188, 75239659, 75686865, 89949545, 97847351, 104098856, 105621236, 122315571, 124181400, 140871141, 187699418, 194236196, 212895459, 214958670, 218604083, 237912766, 244665716, 266867065, 308403251, 345525856, 349910435, 386960381, 389132970, 400992121, 419311868, 422816973, 423454672, 449363682, 450293028, 466878590, 694591753, 44126871, 44188308, 54263043, 54374820, 44126872, 44188307, 44126873, 44188306, 54263044, 54374819, 44126874, 44188305, 44126875, 44188304, 54263045, 54374818, 44126876, 44188303, 44126877, 44188302, 54263046, 54374817, 75239660, 75686864, 44126878, 44188301, 44126879, 44188300, 54263047, 54374816, 44126880, 44188299, 422816974, 423454671, 54263048, 54374815, 44126881, 44188298, 44126882, 44188297, 54263049, 54374814, 44126883, 44188296, 44126884, 44188295};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<int> luckySet = {464258706, 242555567, 217214192, 44423331, 48944033, 166556853, 534978826, 11771951, 408969840, 15518975, 136708320, 9243006, 194170548, 2837285, 527284283, 20988328, 147685297, 396812122, 83455878, 666504261, 113378547, 348413261, 544052469, 708909885, 172241157, 138037295, 17345983, 75062185, 540318452, 508110833, 138602237, 247004515, 1907482, 342333810, 312137397};
    int n = 84;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1907482, 2837285, 9243006, 11771951, 15518975, 17345983, 20988328, 44423331, 48944033, 75062185, 83455878, 113378547, 136708320, 138037295, 138602237, 147685297, 166556853, 172241157, 194170548, 217214192, 242555567, 247004515, 312137397, 342333810, 348413261, 396812122, 408969840, 464258706, 508110833, 527284283, 534978826, 540318452, 544052469, 666504261, 708909885, 138037296, 138602236, 1907483, 2837284, 138037297, 138602235, 136708321, 138037294, 138037298, 138602234, 15518976, 17345982, 1907484, 2837283, 1, 1907481, 138037299, 138602233, 9243007, 11771950, 136708322, 138037293, 1907485, 2837282, 138037300, 138602232, 138037301, 138602231, 17345984, 20988327, 15518977, 17345981, 1907486, 2837281, 540318453, 544052468, 11771952, 15518974, 2, 1907480, 138037302, 138602230, 136708323, 138037292, 242555568, 247004514, 138037303, 138602229, 44423332};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<int> luckySet = {91268408, 68214398, 525413813, 507510323, 462326736, 322455418, 441915276, 153196073, 19048798, 440676901, 721864272, 85435284, 1291839, 11005522, 383310893, 30469697, 7781568, 280238314, 74645825, 275773923, 506099090, 81510048, 526591054, 114620369, 38017646, 306577243, 2642378, 63545851, 255943605, 78789677, 175225677, 441508055, 17238176, 355459244, 173545729, 640099637, 21261276, 452085596};
    int n = 80;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1291839, 2642378, 7781568, 11005522, 17238176, 19048798, 21261276, 30469697, 38017646, 63545851, 68214398, 74645825, 78789677, 81510048, 85435284, 91268408, 114620369, 153196073, 173545729, 175225677, 255943605, 275773923, 280238314, 306577243, 322455418, 355459244, 383310893, 440676901, 441508055, 441915276, 452085596, 462326736, 506099090, 507510323, 525413813, 526591054, 640099637, 721864272, 441508056, 441915275, 441508057, 441915274, 440676902, 441508054, 525413814, 526591053, 441508058, 441915273, 1, 1291838, 1291840, 2642377, 506099091, 507510322, 441508059, 441915272, 440676903, 441508053, 173545730, 175225676, 17238177, 19048797, 441508060, 441915271, 19048799, 21261275, 525413815, 526591052, 441508061, 441915270, 440676904, 441508052, 2, 1291837, 1291841, 2642376, 78789678, 81510047, 506099092, 507510321};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<int> luckySet = {498701797, 158835316, 623863646, 106834922, 874365974, 103133811, 121623627, 18162034, 180151864, 52555682, 103542230, 15580676, 165064229, 113214508, 387776443, 408600, 902119907, 142242559, 399472130, 287006015, 568139939, 253559374, 183929747, 551113489, 254053592, 718642924, 408529951, 486595735, 94915872, 831181060, 255373262, 24530287, 132611612, 84811804, 637715207, 152902146, 17451230, 375469389, 212478365, 663590831, 9525703};
    int n = 93;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {408600, 9525703, 15580676, 17451230, 18162034, 24530287, 52555682, 84811804, 94915872, 103133811, 103542230, 106834922, 113214508, 121623627, 132611612, 142242559, 152902146, 158835316, 165064229, 180151864, 183929747, 212478365, 253559374, 254053592, 255373262, 287006015, 375469389, 387776443, 399472130, 408529951, 486595735, 498701797, 551113489, 568139939, 623863646, 637715207, 663590831, 718642924, 831181060, 874365974, 902119907, 103133812, 103542229, 1, 408599, 253559375, 254053591, 17451231, 18162033, 103133813, 103542228, 2, 408598, 253559376, 254053590, 103133814, 103542227, 3, 408597, 254053593, 255373261, 17451232, 18162032, 253559377, 254053589, 103133815, 103542226, 4, 408596, 15580677, 17451229, 253559378, 254053588, 103133816, 103542225, 5, 408595, 17451233, 18162031, 103133817, 103542224, 6, 408594, 253559379, 254053587, 254053594, 255373260, 17451234, 18162030, 103133818, 103542223, 7, 408593};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<int> luckySet = {35497530, 9880208, 390531684, 372324005, 85099192, 142657156, 124562879, 193370319, 235690551, 79996481, 1349768, 29438793, 98742046, 127879127, 766446, 4843077, 170374848, 259079865, 65109444, 17666073, 17719108, 33761599, 56020222, 49883177, 1634400, 227418981};
    int n = 90;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {766446, 1349768, 1634400, 4843077, 9880208, 17666073, 17719108, 29438793, 33761599, 35497530, 49883177, 56020222, 65109444, 79996481, 85099192, 98742046, 124562879, 127879127, 142657156, 170374848, 193370319, 227418981, 235690551, 259079865, 372324005, 390531684, 17666074, 17719107, 17666075, 17719106, 17666076, 17719105, 17666077, 17719104, 17666078, 17719103, 1349769, 1634399, 17666079, 17719102, 17666080, 17719101, 17666081, 17719100, 17666082, 17719099, 17666083, 17719098, 1349770, 1634398, 17666084, 17719097, 766447, 1349767, 17666085, 17719096, 17666086, 17719095, 17666087, 17719094, 1, 766445, 17666088, 17719093, 17666089, 17719092, 1349771, 1634397, 17666090, 17719091, 17666091, 17719090, 17666092, 17719089, 17666093, 17719088, 17666094, 17719087, 1349772, 1634396, 17666095, 17719086, 766448, 1349766, 17666096, 17719085, 17666097, 17719084, 17666098, 17719083};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<int> luckySet = {73329540, 4185238, 27902307, 6660990, 25967766, 85869928, 2795440, 111196164, 64410876, 8361845, 47886534, 23092442, 7641907, 47738845, 545479900, 66601558, 246021774, 548567338, 9822749, 77823836, 218745864, 205940158, 160480719, 272938101, 45333362, 20377, 20261467, 71516119, 193305463, 67203030, 10157619, 9658263, 8098859, 394454827, 443336, 19884552, 33625340, 125550725, 119535702, 829085333};
    int n = 75;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {20377, 443336, 2795440, 4185238, 6660990, 7641907, 8098859, 8361845, 9658263, 9822749, 10157619, 19884552, 20261467, 23092442, 25967766, 27902307, 33625340, 45333362, 47738845, 47886534, 64410876, 66601558, 67203030, 71516119, 73329540, 77823836, 85869928, 111196164, 119535702, 125550725, 160480719, 193305463, 205940158, 218745864, 246021774, 272938101, 394454827, 545479900, 548567338, 829085333, 1, 20376, 2, 20375, 3, 20374, 4, 20373, 5, 20372, 6, 20371, 7, 20370, 47738846, 47886533, 8, 20369, 9658264, 9822748, 9, 20368, 10, 20367, 11, 20366, 12, 20365, 8098860, 8361844, 13, 20364, 14, 20363, 47738847};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<int> luckySet = {177032474, 28038285, 53078210, 94344838, 19677225, 34322675, 418516661, 180511402, 156992303, 370964027, 35144298, 137622490, 218801921, 15427926, 717245, 29790545, 159969039, 174914238, 21045324, 1031407, 110342081, 10704343, 205364398, 99518317, 299797881, 173738743};
    int n = 90;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {717245, 1031407, 10704343, 15427926, 19677225, 21045324, 28038285, 29790545, 34322675, 35144298, 53078210, 94344838, 99518317, 110342081, 137622490, 156992303, 159969039, 173738743, 174914238, 177032474, 180511402, 205364398, 218801921, 299797881, 370964027, 418516661, 717246, 1031406, 717247, 1031405, 1, 717244, 34322676, 35144297, 717248, 1031404, 173738744, 174914237, 717249, 1031403, 19677226, 21045323, 2, 717243, 717250, 1031402, 34322677, 35144296, 28038286, 29790544, 717251, 1031401, 174914239, 177032473, 3, 717242, 717252, 1031400, 173738745, 174914236, 34322678, 35144295, 717253, 1031399, 19677227, 21045322, 717254, 1031398, 4, 717241, 156992304, 159969038, 717255, 1031397, 34322679, 35144294, 717256, 1031396, 177032475, 180511401, 28038287, 29790543, 173738746, 174914235, 5, 717240, 717257, 1031395, 717258, 1031394};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<int> luckySet = {13263919, 634503513, 96066927, 80039294, 89577040, 545341665, 26001898, 143672388, 21696483, 23114597, 20777946, 11102793, 15928317, 247182776, 73567365, 162856205, 1366600, 35813425, 60855399, 50535356, 44116984, 43635990, 520849410, 373411059, 513033838, 216675145, 24542749, 136894481, 5412593, 66087000, 70428571, 20073510, 59025215};
    int n = 77;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1366600, 5412593, 11102793, 13263919, 15928317, 20073510, 20777946, 21696483, 23114597, 24542749, 26001898, 35813425, 43635990, 44116984, 50535356, 59025215, 60855399, 66087000, 70428571, 73567365, 80039294, 89577040, 96066927, 136894481, 143672388, 162856205, 216675145, 247182776, 373411059, 513033838, 520849410, 545341665, 634503513, 43635991, 44116983, 20073511, 20777945, 20777947, 21696482, 43635992, 44116982, 1, 1366599, 20073512, 20777944, 21696484, 23114596, 23114598, 24542748, 43635993, 44116981, 24542750, 26001897, 59025216, 60855398, 20777948, 21696481, 43635994, 44116980, 20073513, 20777943, 11102794, 13263918, 43635995, 44116979, 13263920, 15928316, 2, 1366598, 20777949, 21696480, 20073514, 20777942, 21696485, 23114595, 23114599, 24542747};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<int> luckySet = {351864265, 71706470, 127229156, 1192558, 2272077, 329449481, 46926179, 698496380, 84068892, 254247955, 3195562, 43811405, 298285675, 464057419, 134265849, 20197775, 61279068, 82479248, 72663762, 216658447, 27080939, 43703389, 62624421, 151924438, 386640842, 11251778};
    int n = 78;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1192558, 2272077, 3195562, 11251778, 20197775, 27080939, 43703389, 43811405, 46926179, 61279068, 62624421, 71706470, 72663762, 82479248, 84068892, 127229156, 134265849, 151924438, 216658447, 254247955, 298285675, 329449481, 351864265, 386640842, 464057419, 698496380, 43703390, 43811404, 43703391, 43811403, 43703392, 43811402, 43703393, 43811401, 43703394, 43811400, 43703395, 43811399, 43703396, 43811398, 43703397, 43811397, 2272078, 3195561, 71706471, 72663761, 43703398, 43811396, 1192559, 2272076, 43703399, 43811395, 43703400, 43811394, 1, 1192557, 43703401, 43811393, 61279069, 62624420, 43703402, 43811392, 43703403, 43811391, 82479249, 84068891, 43703404, 43811390, 43703405, 43811389, 43703406, 43811388, 2272079, 3195560, 71706472, 72663760, 43703407, 43811387};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<int> luckySet = {150251902, 259643585, 208106714, 333807703, 15536115, 241660168, 27523075, 118521303, 30702233, 171921843, 136504434, 511345524, 45627065, 270989316, 398197431, 224197226, 86086008, 34781237, 7736959, 156076579, 157461226, 3610646, 13881584, 29671893, 123706850, 178200694, 176529848, 102024241, 90620479, 6504080, 52760007, 175020237, 23263382, 186636002, 276569736, 5429652, 142274933, 25124525, 428138443, 353371085, 17845440, 297919885, 29948644, 181958868, 80560763, 165861328, 3571559};
    int n = 78;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3571559, 3610646, 5429652, 6504080, 7736959, 13881584, 15536115, 17845440, 23263382, 25124525, 27523075, 29671893, 29948644, 30702233, 34781237, 45627065, 52760007, 80560763, 86086008, 90620479, 102024241, 118521303, 123706850, 136504434, 142274933, 150251902, 156076579, 157461226, 165861328, 171921843, 175020237, 176529848, 178200694, 181958868, 186636002, 208106714, 224197226, 241660168, 259643585, 270989316, 276569736, 297919885, 333807703, 353371085, 398197431, 428138443, 511345524, 3571560, 3610645, 3571561, 3610644, 3571562, 3610643, 3571563, 3610642, 3571564, 3610641, 3571565, 3610640, 3571566, 3610639, 29671894, 29948643, 3571567, 3610638, 3571568, 3610637, 3571569, 3610636, 3571570, 3610635, 3571571, 3610634, 3571572, 3610633, 3571573, 3610632, 29671895};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<int> luckySet = {227155939, 13189219, 3827684, 120360223, 14717390, 354715992, 527732410, 429693913, 345802198, 59205684, 27011634, 273550135, 346289183, 478129071, 312657285, 261278, 169678417, 148657707, 150309157, 225495, 292961656, 470255243, 169163222, 98794070, 467760916, 38274863, 14369073, 372774666};
    int n = 85;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {225495, 261278, 3827684, 13189219, 14369073, 14717390, 27011634, 38274863, 59205684, 98794070, 120360223, 148657707, 150309157, 169163222, 169678417, 227155939, 273550135, 292961656, 312657285, 345802198, 346289183, 354715992, 372774666, 429693913, 467760916, 470255243, 478129071, 527732410, 225496, 261277, 225497, 261276, 225498, 261275, 225499, 261274, 225500, 261273, 225501, 261272, 1, 225494, 225502, 261271, 225503, 261270, 225504, 261269, 14369074, 14717389, 225505, 261268, 225506, 261267, 225507, 261266, 2, 225493, 225508, 261265, 345802199, 346289182, 225509, 261264, 169163223, 169678416, 225510, 261263, 225511, 261262, 225512, 261261, 225513, 261260, 3, 225492, 225514, 261259, 14369075, 14717388, 225515, 261258, 225516, 261257, 225517};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<int> luckySet = {25025780, 10206228, 11369306, 368881256, 424299735, 47518523, 12015895, 337124195, 115775377, 43279323, 138900950, 5135397, 174378636, 123505121, 24289222, 113047043, 154473871, 53156689, 63821550, 12828009, 22607154, 17997642, 112303374, 164400, 34587163, 11250935, 497774230, 5556214, 181308366, 10206474, 54350851, 58586835, 36828113, 97096945, 14474575};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {164400, 5135397, 5556214, 10206228, 10206474, 11250935, 11369306, 12015895, 12828009, 14474575, 17997642, 22607154, 24289222, 25025780, 34587163, 36828113, 43279323, 47518523, 53156689, 54350851, 58586835, 63821550, 97096945, 112303374, 113047043, 115775377, 123505121, 138900950, 154473871, 174378636, 181308366, 337124195, 368881256, 424299735, 497774230, 10206229, 10206473, 10206230, 10206472, 10206231, 10206471, 10206232, 10206470, 10206233, 10206469, 10206234, 10206468, 10206235, 10206467, 10206236, 10206466, 10206237, 10206465, 10206238, 10206464, 10206239, 10206463, 10206240, 10206462, 10206241, 10206461, 10206242, 10206460, 10206243, 10206459, 10206244, 10206458, 10206245, 10206457, 10206246, 10206456, 10206247, 10206455, 10206248, 10206454, 10206249, 10206453, 10206250, 10206452, 10206251, 10206451, 10206252, 10206450, 10206253, 10206449, 10206254, 10206448, 10206255, 10206447, 10206256, 10206446, 10206257, 10206445, 10206258, 10206444, 10206259, 10206443, 10206260, 10206442, 10206261};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<int> luckySet = {63075550, 74062991, 2328598, 214336572, 32995414, 248862961, 68024182, 69072883, 132799230, 11716098, 3776041, 403931596, 4234583, 274379600, 26958704, 20910099, 109031472, 146677202, 363079211, 34208563, 89984162, 147648141, 7944213, 81163946, 29157524, 97099988, 183735665, 28708154, 214490301, 98558553, 313662402, 6745859, 184004863, 580500573, 20717159, 159057614, 45772008, 3433167, 10094794, 364545, 15793817, 13618010, 35955528, 225596977, 110793226, 345362083};
    int n = 82;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {364545, 2328598, 3433167, 3776041, 4234583, 6745859, 7944213, 10094794, 11716098, 13618010, 15793817, 20717159, 20910099, 26958704, 28708154, 29157524, 32995414, 34208563, 35955528, 45772008, 63075550, 68024182, 69072883, 74062991, 81163946, 89984162, 97099988, 98558553, 109031472, 110793226, 132799230, 146677202, 147648141, 159057614, 183735665, 184004863, 214336572, 214490301, 225596977, 248862961, 274379600, 313662402, 345362083, 363079211, 403931596, 580500573, 214336573, 214490300, 20717160, 20910098, 183735666, 184004862, 214336574, 214490299, 3433168, 3776040, 1, 364544, 20717161, 20910097, 28708155, 29157523, 3776042, 4234582, 214336575, 214490298, 183735667, 184004861, 20717162, 20910096, 214336576, 214490297, 3433169, 3776039, 2, 364543, 214336577, 214490296, 20717163, 20910095, 183735668, 184004860};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<int> luckySet = {50450179, 7271134, 11648159, 29194094, 5006262, 356276015, 39316200, 60160343, 181138344, 34833248, 229962611, 45832945, 6946950, 42137965, 33016857, 1414478, 119908018, 3494060, 27367086, 431768387, 291695167, 476967959, 87949539, 362212917, 15983118, 149761085, 14112012, 87400110, 22166116, 4910024, 91256373, 58917789, 330170752, 107500940, 387655978, 24252338, 162136552, 42236908, 57549649, 195693673};
    int n = 85;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1414478, 3494060, 4910024, 5006262, 6946950, 7271134, 11648159, 14112012, 15983118, 22166116, 24252338, 27367086, 29194094, 33016857, 34833248, 39316200, 42137965, 42236908, 45832945, 50450179, 57549649, 58917789, 60160343, 87400110, 87949539, 91256373, 107500940, 119908018, 149761085, 162136552, 181138344, 195693673, 229962611, 291695167, 330170752, 356276015, 362212917, 387655978, 431768387, 476967959, 4910025, 5006261, 42137966, 42236907, 4910026, 5006260, 42137967, 42236906, 4910027, 5006259, 42137968, 42236905, 6946951, 7271133, 4910028, 5006258, 42137969, 42236904, 4910029, 5006257, 42137970, 42236903, 87400111, 87949538, 4910030, 5006256, 42137971, 42236902, 6946952, 7271132, 4910031, 5006255, 42137972, 42236901, 4910032, 5006254, 42137973, 42236900, 4910033, 5006253, 42137974, 42236899, 4910034, 5006252, 6946953};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<int> luckySet = {89897339, 2, 268225761, 127571108, 57534490, 11002482, 279954005, 224191497, 317230485, 15287931, 37574172, 105164564, 128411693, 163007447, 196873044, 848877, 189078469, 310782288, 59349050, 352271196, 518401659, 2141482, 142041336, 293962274, 134937690, 68280472, 33974896, 27243130, 220202887, 538622458, 177006407, 103849468, 11482652, 177805743, 84010033, 116111361, 154156750, 253030727, 110988241, 752642857, 4004751, 21120351, 262658998};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 848877, 2141482, 4004751, 11002482, 11482652, 15287931, 21120351, 27243130, 33974896, 37574172, 57534490, 59349050, 68280472, 84010033, 89897339, 103849468, 105164564, 110988241, 116111361, 127571108, 128411693, 134937690, 142041336, 154156750, 163007447, 177006407, 177805743, 189078469, 196873044, 220202887, 224191497, 253030727, 262658998, 268225761, 279954005, 293962274, 310782288, 317230485, 352271196, 518401659, 538622458, 752642857, 11002483, 11482651, 177006408, 177805742, 127571109, 128411692, 3, 848876, 11002484, 11482650, 848878, 2141481, 103849469, 105164563, 11002485, 11482649, 177006409, 177805741, 127571110, 128411691, 4, 848875, 57534491, 59349049, 2141483, 4004750, 11002486, 11482648, 177006410, 177805740, 11002487, 11482647, 127571111, 128411690, 5, 848874, 848879, 2141480, 103849470, 105164562, 11002488, 11482646, 177006411, 177805739, 11002489, 11482645, 127571112, 128411689, 6, 848873, 33974897, 37574171, 57534492, 59349048, 2141484, 4004749};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<int> luckySet = {427087919, 579532823, 747441539, 182721284, 193360800, 976885963, 632074652, 511481574, 382608681, 390388511, 548196586, 21921361, 911385022, 917517300, 385514425, 84067113, 697510805, 986256261, 482268145, 190926975, 19391367, 576450722, 678898114, 427384687, 179910529, 625273270, 978913754, 949154475, 842775388, 570530925, 769996719, 180567026, 817590647, 61934146, 355513646, 838559487, 283495419, 645865280, 743464975, 522897951, 931165547, 14396392, 279700447, 369607271, 279536165, 672035227, 288951646, 912350773, 689196484};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14396392, 19391367, 21921361, 61934146, 84067113, 179910529, 180567026, 182721284, 190926975, 193360800, 279536165, 279700447, 283495419, 288951646, 355513646, 369607271, 382608681, 385514425, 390388511, 427087919, 427384687, 482268145, 511481574, 522897951, 548196586, 570530925, 576450722, 579532823, 625273270, 632074652, 645865280, 672035227, 678898114, 689196484, 697510805, 743464975, 747441539, 769996719, 817590647, 838559487, 842775388, 911385022, 912350773, 917517300, 931165547, 949154475, 976885963, 978913754, 986256261, 279536166, 279700446, 427087920, 427384686, 279536167, 279700445, 279536168, 279700444, 427087921, 427384685, 179910530, 180567025, 279536169, 279700443, 279536170, 279700442, 427087922, 427384684, 911385023, 912350772, 279536171, 279700441, 279536172, 279700440, 427087923, 427384683, 179910531, 180567024, 279536173, 279700439, 279536174, 279700438, 427087924, 427384682, 279536175, 279700437, 427087925, 427384681, 279536176, 279700436, 911385024, 912350771, 179910532, 180567023, 279536177, 279700435, 976885964, 978913753, 427087926, 427384680, 279536178};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<int> luckySet = {2, 999999999, 999999997, 999999994, 999999991, 999999987, 5918725, 182812, 5919295, 11826519, 999611, 100000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 100000, 182812, 999611, 5918725, 5919295, 11826519, 999999987, 999999991, 999999994, 999999997, 999999998, 999999999, 999999992, 999999993, 999999995, 999999996, 999999988, 999999990, 999999989, 5918726, 5919294, 5918727, 5919293, 5918728, 5919292, 5918729, 5919291, 5918730, 5919290, 5918731, 5919289, 5918732, 5919288, 5918733, 5919287, 5918734, 5919286, 5918735, 5919285, 5918736, 5919284, 5918737, 5919283, 5918738, 5919282, 5918739, 5919281, 5918740, 5919280, 5918741, 5919279, 5918742, 5919278, 5918743, 5919277, 5918744, 5919276, 5918745, 5919275, 5918746, 5919274, 5918747, 5919273, 5918748, 5919272, 5918749, 5919271, 5918750, 5919270, 5918751, 5919269, 5918752, 5919268, 5918753, 5919267, 5918754, 5919266, 5918755, 5919265, 5918756, 5919264, 5918757, 5919263, 5918758, 5919262, 5918759, 5919261, 5918760, 5919260, 5918761, 5919259, 5918762, 5919258, 5918763, 5919257, 5918764, 5919256, 5918765};
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<int> luckySet = {1000000000, 999999998, 999999996, 999999995, 999999994, 999999992, 999999989, 499999996, 499999994, 499999993, 499999991, 499999990, 499999989, 499999987, 2, 4, 6, 8, 9, 10};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 499999987, 499999988, 499999989, 499999990, 499999991, 499999992, 499999993, 499999994, 499999995, 499999996, 999999989, 999999992, 999999993, 999999994, 999999995, 999999996, 999999997, 999999998, 999999999, 1000000000, 999999990, 999999991, 11, 499999986, 499999997, 999999988, 12, 499999985, 499999998, 999999987, 13, 499999984, 499999999, 999999986, 14, 499999983, 500000000, 999999985, 15, 499999982, 500000001, 999999984, 16, 499999981, 500000002, 999999983, 17, 499999980, 500000003, 999999982, 18, 499999979, 500000004, 999999981, 19, 499999978, 500000005, 999999980, 20, 499999977, 500000006, 999999979, 21, 499999976, 500000007, 999999978, 22, 499999975, 500000008, 999999977, 23, 499999974, 500000009, 999999976, 24, 499999973, 500000010, 999999975, 25, 499999972, 500000011, 999999974, 26, 499999971, 500000012, 999999973, 27, 499999970, 500000013, 999999972};
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<int> luckySet = {9, 5, 7, 1000000000};
    int n = 42;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 6, 7, 8, 9, 1000000000, 1, 4, 2, 3, 10, 999999999, 11, 999999998, 12, 999999997, 13, 999999996, 14, 999999995, 15, 999999994, 16, 999999993, 17, 999999992, 18, 999999991, 19, 999999990, 20, 999999989, 21, 999999988, 22, 999999987, 23, 999999986, 24, 999999985, 25, 999999984};
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<int> luckySet = {1000, 1004, 4000, 4003, 5000};
    int n = 49;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1000, 1004, 4000, 4003, 5000, 4001, 4002, 1001, 1003, 1002, 4004, 4999, 1, 999, 4005, 4998, 2, 998, 4006, 4997, 3, 997, 1005, 3999, 4007, 4996, 4, 996, 4008, 4995, 5, 995, 4009, 4994, 6, 994, 1006, 3998, 4010, 4993, 7, 993, 4011, 4992, 8, 992, 4012, 4991, 9};
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<int> luckySet = {2, 4, 7, 8, 40, 60, 50, 400000000, 999999996, 999999998, 1000000000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 7, 8, 40, 50, 60, 400000000, 999999996, 999999997, 999999998, 999999999, 1000000000, 5, 6, 41, 49, 51, 59, 42, 48, 52, 58, 43, 47, 53, 57, 44, 46, 54, 56, 45, 55, 9, 39, 10, 38, 11, 37, 12, 36, 13, 35, 14, 34, 15, 33, 16, 32, 17, 31, 18, 30, 19, 29, 20, 28, 21, 27, 22, 26, 23, 25, 24, 61, 399999999, 400000001, 999999995, 62, 399999998, 63, 399999997, 400000002, 999999994, 64, 399999996, 400000003, 999999993, 65, 399999995, 66, 399999994, 400000004, 999999992, 67, 399999993, 400000005, 999999991, 68, 399999992, 69, 399999991, 400000006, 999999990, 70, 399999990, 400000007, 999999989};
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<int> luckySet = {2, 5, 9, 1000000000, 488883, 488884, 488886, 7000, 999999993, 999999991, 999999000};
    int n = 50;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 5, 9, 7000, 488883, 488884, 488885, 488886, 999999000, 999999991, 999999992, 999999993, 1000000000, 3, 4, 6, 8, 7, 999999994, 999999999, 999999995, 999999998, 999999996, 999999997, 999999001, 999999990, 999999002, 999999989, 999999003, 999999988, 999999004, 999999987, 999999005, 999999986, 999999006, 999999985, 999999007, 999999984, 10, 6999, 999999008, 999999983, 999999009, 999999982, 999999010, 999999981, 999999011, 999999980, 999999012};
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<int> luckySet = {1000000000, 9000000, 3000000, 1, 5, 28, 36, 55, 50000, 388893, 282833, 38484848, 383834782, 3848343, 2987483, 384783778, 38478374, 37842, 298475, 573829, 3764674, 28438484, 834838};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 5, 28, 36, 55, 37842, 50000, 282833, 298475, 388893, 573829, 834838, 2987483, 3000000, 3764674, 3848343, 9000000, 28438484, 38478374, 38484848, 383834782, 384783778, 1000000000, 2, 4, 3, 29, 35, 30, 34, 31, 33, 32, 37, 54, 6, 27, 38, 53, 7, 26, 39, 52, 8, 25, 40, 51, 41, 50, 9, 24, 42, 49, 43, 48, 44, 47, 10, 23, 45, 46, 11, 22, 12, 21, 13, 20, 14, 19, 15, 18, 16, 17, 38478375, 38484847, 37843, 49999, 2987484, 2999999, 38478376, 38484846, 282834, 298474, 38478377, 38484845, 37844, 49998, 2987485, 2999998, 38478378, 38484844, 282835, 298473, 38478379, 38484843, 37845, 49997, 2987486, 2999997, 56};
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<int> luckySet = {999999999, 999999895, 999999220, 999999139, 999999909, 999999972, 999999010, 1000000000, 999999180, 999999565, 999999259, 999999847, 999999955, 999999700, 999999864, 999998965, 999999472, 999999054, 999998824, 999999979, 999999997, 999999964, 999999097, 999999945, 999998872, 999999922, 999999829, 999999994, 999999594, 999999724, 999999990, 999999790, 999999649, 999999504, 999998919, 999999334, 999999747, 999999405, 999999370, 999999934, 999999769, 999999622, 999999535, 999999985, 999999675, 1, 999999439, 999999810, 999999297, 999999880};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 999998824, 999998872, 999998919, 999998965, 999999010, 999999054, 999999097, 999999139, 999999180, 999999220, 999999259, 999999297, 999999334, 999999370, 999999405, 999999439, 999999472, 999999504, 999999535, 999999565, 999999594, 999999622, 999999649, 999999675, 999999700, 999999724, 999999747, 999999769, 999999790, 999999810, 999999829, 999999847, 999999864, 999999880, 999999895, 999999909, 999999922, 999999934, 999999945, 999999955, 999999964, 999999972, 999999979, 999999985, 999999990, 999999994, 999999997, 999999998, 999999999, 1000000000, 999999995, 999999996, 999999991, 999999993, 999999986, 999999989, 999999992, 999999980, 999999984, 999999973, 999999978, 999999987, 999999988, 999999965, 999999971, 999999956, 999999963, 999999981, 999999983, 999999946, 999999954, 999999982, 999999935, 999999944, 999999974, 999999977, 999999923, 999999933, 999999910, 999999921, 999999966, 999999970, 999999975, 999999976, 999999896, 999999908, 999999881, 999999894, 999999957, 999999962, 999999865, 999999879, 999999967, 999999969, 999999848, 999999863, 999999947, 999999953, 999999968};
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<int> luckySet = {1, 3, 5, 7};
    int n = 10;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<int> luckySet = {1, 3, 200000000, 7, 8, 1000000000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 7, 8, 200000000, 1000000000, 4, 6, 5, 9, 199999999, 10, 199999998, 11, 199999997, 12, 199999996, 200000001, 999999999, 13, 199999995, 14, 199999994, 15, 199999993, 16, 199999992, 200000002, 999999998, 17, 199999991, 18, 199999990, 19, 199999989, 20, 199999988, 200000003, 999999997, 21, 199999987, 22, 199999986, 23, 199999985, 24, 199999984, 200000004, 999999996, 25, 199999983, 26, 199999982, 27, 199999981, 28, 199999980, 200000005, 999999995, 29, 199999979, 30, 199999978, 31, 199999977, 32, 199999976, 200000006, 999999994, 33, 199999975, 34, 199999974, 35, 199999973, 36, 199999972, 200000007, 999999993, 37, 199999971, 38, 199999970, 39, 199999969, 40, 199999968, 200000008, 999999992, 41, 199999967, 42, 199999966, 43, 199999965, 44, 199999964, 200000009, 999999991};
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<int> luckySet = {3, 5};
    int n = 4;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5, 1};
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<int> luckySet = {2};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1};
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<int> luckySet = {2};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<int> luckySet = {2, 799, 800, 802, 805, 450, 452};
    int n = 47;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 450, 451, 452, 799, 800, 801, 802, 805, 803, 804, 453, 798, 3, 449, 454, 797, 4, 448, 455, 796, 5, 447, 456, 795, 457, 794, 6, 446, 458, 793, 7, 445, 459, 792, 8, 444, 460, 791, 461, 790, 9, 443, 462, 789, 10};
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<int> luckySet = {2, 3, 5, 7, 10, 11, 13, 14, 15, 20};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1};
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<int> luckySet = {1, 3};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<int> luckySet = {2};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<int> luckySet = {2, 4, 6, 8};
    int n = 3;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3};
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<int> luckySet = {1, 3};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<int> luckySet = {2, 4};
    int n = 50;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50};
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<int> luckySet = {269408303, 434156858, 623097569, 844905922, 997517289};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {269408303, 434156858, 623097569, 844905922, 997517289, 844905923, 997517288, 269408304, 434156857, 434156859, 623097568, 623097570, 844905921, 1, 269408302, 844905924, 997517287, 269408305, 434156856, 434156860, 623097567, 623097571, 844905920, 844905925, 997517286, 269408306, 434156855, 2, 269408301, 434156861, 623097566, 844905926, 997517285, 269408307, 434156854, 623097572, 844905919, 434156862, 623097565, 844905927, 997517284, 3, 269408300, 269408308, 434156853, 623097573, 844905918, 844905928, 997517283, 434156863, 623097564, 269408309, 434156852, 844905929, 997517282, 4, 269408299, 623097574, 844905917, 434156864, 623097563, 269408310, 434156851, 844905930, 997517281, 269408311, 434156850, 434156865, 623097562, 623097575, 844905916, 5, 269408298, 844905931, 997517280, 269408312, 434156849, 434156866, 623097561, 844905932, 997517279, 623097576, 844905915, 6, 269408297, 269408313, 434156848, 844905933, 997517278, 434156867, 623097560, 623097577, 844905914, 269408314, 434156847, 844905934, 997517277, 7, 269408296, 434156868};
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<int> luckySet = {10, 5};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 10};
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<int> luckySet = {5, 3, 1};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<int> luckySet = {54, 1, 34, 8766, 43, 23, 11, 76, 32, 65, 888, 345, 87};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 11, 23, 32, 33, 34, 43, 54, 65, 76, 87, 345, 888, 8766, 24, 31, 35, 42, 2, 10, 44, 53, 55, 64, 66, 75, 77, 86, 12, 22, 25, 30, 36, 41, 3, 9, 26, 29, 37, 40, 45, 52, 56, 63, 67, 74, 78, 85, 13, 21, 27, 28, 38, 39, 4, 8, 5, 7, 46, 51, 57, 62, 68, 73, 79, 84, 6, 14, 20, 47, 50, 58, 61, 69, 72, 80, 83, 48, 49, 59, 60, 70, 71, 81, 82, 15, 19, 16, 18, 17, 88, 344, 89, 343, 346, 887, 90, 342, 91, 341};
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<int> luckySet = {1, 2, 3};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1};
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<int> luckySet = {2, 4, 6, 9999999, 1000000000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 9999999, 1000000000, 7, 9999998, 8, 9999997, 9, 9999996, 10, 9999995, 11, 9999994, 12, 9999993, 13, 9999992, 14, 9999991, 15, 9999990, 16, 9999989, 17, 9999988, 18, 9999987, 19, 9999986, 20, 9999985, 21, 9999984, 22, 9999983, 23, 9999982, 24, 9999981, 25, 9999980, 26, 9999979, 27, 9999978, 28, 9999977, 29, 9999976, 30, 9999975, 31, 9999974, 32, 9999973, 33, 9999972, 34, 9999971, 35, 9999970, 36, 9999969, 37, 9999968, 38, 9999967, 39, 9999966, 40, 9999965, 41, 9999964, 42, 9999963, 43, 9999962, 44, 9999961, 45, 9999960, 46, 9999959, 47, 9999958, 48, 9999957, 49, 9999956, 50, 9999955, 51, 9999954, 52, 9999953};
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<int> luckySet = {1, 10000000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 10000000, 2, 9999999, 3, 9999998, 4, 9999997, 5, 9999996, 6, 9999995, 7, 9999994, 8, 9999993, 9, 9999992, 10, 9999991, 11, 9999990, 12, 9999989, 13, 9999988, 14, 9999987, 15, 9999986, 16, 9999985, 17, 9999984, 18, 9999983, 19, 9999982, 20, 9999981, 21, 9999980, 22, 9999979, 23, 9999978, 24, 9999977, 25, 9999976, 26, 9999975, 27, 9999974, 28, 9999973, 29, 9999972, 30, 9999971, 31, 9999970, 32, 9999969, 33, 9999968, 34, 9999967, 35, 9999966, 36, 9999965, 37, 9999964, 38, 9999963, 39, 9999962, 40, 9999961, 41, 9999960, 42, 9999959, 43, 9999958, 44, 9999957, 45, 9999956, 46, 9999955, 47, 9999954, 48, 9999953, 49, 9999952, 50, 9999951};
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<int> luckySet = {9, 7, 5, 2, 19, 21, 1000000};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<int> luckySet = {2, 1, 4, 7, 13, 99, 10, 16, 20, 25, 31, 35, 40, 41, 50, 60, 70, 81, 90};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 7, 10, 13, 16, 20, 25, 31, 35, 40, 41, 50, 60, 70, 81, 90, 99, 5, 6, 8, 9, 11, 12, 14, 15, 17, 19, 32, 34, 18, 21, 24, 33, 36, 39, 26, 30, 22, 23, 37, 38, 27, 29, 42, 49, 82, 89, 91, 98, 28, 51, 59, 61, 69, 71, 80, 43, 48, 83, 88, 92, 97, 52, 58, 62, 68, 44, 47, 72, 79, 84, 87, 93, 96, 45, 46, 85, 86, 94, 95, 53, 57, 63, 67, 54, 56, 64, 66, 73, 78, 55, 65, 74, 77, 75, 76, 100};
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<int> luckySet = {2, 4};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<int> luckySet = {5, 11, 18};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5};
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<int> luckySet = {1, 3};
    int n = 3;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3};
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<int> luckySet = {1000001, 999999};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {999999, 1000000};
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<int> luckySet = {1, 3, 5, 7, 9, 11, 14, 16, 18, 30, 36, 41, 45, 49, 52, 54, 56};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 30, 36, 41, 45, 49, 52, 53, 54, 55, 56, 12, 13, 50, 51, 42, 44, 46, 48, 37, 40, 43, 47, 31, 35, 38, 39, 32, 34, 33, 19, 29, 20, 28, 21, 27, 22, 26, 23, 25, 24, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<int> luckySet = {3, 5, 7, 100};
    int n = 3;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5};
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<int> luckySet = {1000, 800};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {800, 1000, 801, 999, 802, 998, 803, 997, 804, 996, 1, 799, 805, 995, 806, 994, 807, 993, 808, 992, 2, 798, 809, 991, 810, 990, 811, 989, 812, 988, 3, 797, 813, 987, 814, 986, 815, 985, 816, 984, 817, 983, 4, 796, 818, 982, 819, 981, 820, 980, 821, 979, 822, 978, 5, 795, 823, 977, 824, 976, 825, 975, 826, 974, 827, 973, 6, 794, 828, 972, 829, 971, 830, 970, 831, 969, 832, 968, 833, 967, 7, 793, 834, 966, 835, 965, 836, 964, 837, 963, 838, 962, 839, 961, 8, 792, 840, 960, 841, 959};
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<int> luckySet = {18, 11, 5};
    int n = 9;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 11, 18, 1, 4, 6, 10, 2, 3};
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<int> luckySet = {3, 5};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4};
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<int> luckySet = {3, 5};
    int n = 3;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5};
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<int> luckySet = {2, 4, 7, 9};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<int> luckySet = {2, 4};
    int n = 3;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3};
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<int> luckySet = {2};
    int n = 6;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6};
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<int> luckySet = {100, 9, 7, 200, 300};
    int n = 4;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {7, 8, 9, 100};
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<int> luckySet = {1, 3, 5, 7};
    int n = 4;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4};
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<int> luckySet = {2, 5};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1};
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<int> luckySet = {1, 5, 11, 13, 20};
    int n = 20;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 5, 11, 12, 13, 20, 2, 4, 3, 6, 10, 14, 19, 7, 9, 8, 15, 18, 16, 17};
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<int> luckySet = {13, 8, 10, 1000000000};
    int n = 20;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {8, 9, 10, 13, 1000000000, 11, 12, 1, 7, 2, 6, 3, 5, 4, 14, 999999999, 15, 999999998, 16, 999999997};
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<int> luckySet = {2, 6};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1};
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<int> luckySet = {10, 3, 500, 5};
    int n = 10;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5, 10, 500, 1, 2, 6, 9, 7};
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<int> luckySet = {3, 5, 7};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5, 6, 7, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<int> luckySet = {2, 3, 4, 5};
    int n = 1;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1};
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<int> luckySet = {1251258, 193304239, 808740501, 585009308, 479873043, 350291451, 895962401, 822840052, 746604815, 746604816, 746604817, 746604818, 746604819, 746604811};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1251258, 193304239, 350291451, 479873043, 585009308, 746604811, 746604815, 746604816, 746604817, 746604818, 746604819, 808740501, 822840052, 895962401, 746604812, 746604814, 746604813, 1, 1251257, 2, 1251256, 3, 1251255, 4, 1251254, 5, 1251253, 6, 1251252, 7, 1251251, 8, 1251250, 9, 1251249, 10, 1251248, 11, 1251247, 808740502, 822840051, 12, 1251246, 13, 1251245, 14, 1251244, 15, 1251243, 16, 1251242, 17, 1251241, 18, 1251240, 19, 1251239, 20, 1251238, 21, 1251237, 22, 1251236, 808740503, 822840050, 23, 1251235, 24, 1251234, 25, 1251233, 26, 1251232, 27, 1251231, 28, 1251230, 29, 1251229, 30, 1251228, 31, 1251227, 32, 1251226, 33, 1251225, 808740504, 822840049, 34, 1251224, 35, 1251223, 36, 1251222, 37, 1251221, 38, 1251220, 39};
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<int> luckySet = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<int> luckySet = {1, 7, 3, 5, 77, 88, 99, 22, 15};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 15, 22, 77, 88, 99, 16, 21, 8, 14, 17, 20, 78, 87, 89, 98, 9, 13, 18, 19, 10, 12, 11, 79, 86, 90, 97, 80, 85, 91, 96, 81, 84, 92, 95, 82, 83, 93, 94, 23, 76, 24, 75, 25, 74, 26, 73, 27, 72, 28, 71, 29, 70, 30, 69, 31, 68, 32, 67, 33, 66, 34, 65, 35, 64, 36, 63, 37, 62, 38, 61, 39, 60, 40, 59, 41, 58, 42, 57, 43, 56, 44, 55, 45, 54, 46, 53, 47, 52, 48, 51, 49, 50, 100};
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<int> luckySet = {100000, 10000, 5489998, 1565, 5, 88888, 88886, 88890, 45778};
    int n = 50;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 1565, 10000, 45778, 88886, 88887, 88888, 88889, 88890, 100000, 5489998, 1, 4, 2, 3, 6, 1564, 7, 1563, 8, 1562, 9, 1561, 10, 1560, 1566, 9999, 11, 1559, 12, 1558, 88891, 99999, 13, 1557, 14, 1556, 15, 1555, 1567, 9998, 16, 1554, 17, 1553, 18, 1552, 19, 1551, 88892};
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<int> luckySet = {2, 4, 7, 9};
    int n = 4;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4};
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<int> luckySet = {1, 490000000, 800000000, 1000000000};
    int n = 99;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 490000000, 800000000, 1000000000, 800000001, 999999999, 490000001, 799999999, 800000002, 999999998, 2, 489999999, 800000003, 999999997, 490000002, 799999998, 800000004, 999999996, 490000003, 799999997, 3, 489999998, 800000005, 999999995, 800000006, 999999994, 490000004, 799999996, 800000007, 999999993, 4, 489999997, 490000005, 799999995, 800000008, 999999992, 800000009, 999999991, 490000006, 799999994, 5, 489999996, 800000010, 999999990, 490000007, 799999993, 800000011, 999999989, 800000012, 999999988, 6, 489999995, 490000008, 799999992, 800000013, 999999987, 490000009, 799999991, 800000014, 999999986, 7, 489999994, 800000015, 999999985, 490000010, 799999990, 800000016, 999999984, 800000017, 999999983, 490000011, 799999989, 8, 489999993, 800000018, 999999982, 490000012, 799999988, 800000019, 999999981, 9, 489999992, 800000020, 999999980, 490000013, 799999987, 800000021, 999999979, 490000014, 799999986, 800000022, 999999978, 10, 489999991, 800000023, 999999977, 490000015, 799999985, 800000024};
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<int> luckySet = {3, 5, 1000000000};
    int n = 10;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5, 1000000000, 1, 2, 6, 999999999, 7, 999999998};
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<int> luckySet = {2, 3};
    int n = 5;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5};
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<int> luckySet = {100, 10, 3};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 10, 100, 1, 2, 4, 9, 5, 8, 6, 7, 11, 99, 12, 98, 13, 97, 14, 96, 15, 95, 16, 94, 17, 93, 18, 92, 19, 91, 20, 90, 21, 89, 22, 88, 23, 87, 24, 86, 25, 85, 26, 84, 27, 83, 28, 82, 29, 81, 30, 80, 31, 79, 32, 78, 33, 77, 34, 76, 35, 75, 36, 74, 37, 73, 38, 72, 39, 71, 40, 70, 41, 69, 42, 68, 43, 67, 44, 66, 45, 65, 46, 64, 47, 63, 48, 62, 49, 61, 50, 60, 51, 59, 52, 58, 53, 57, 54, 56, 55};
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<int> luckySet = {999999999, 99999999, 9999999};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {9999999, 99999999, 999999999, 1, 9999998, 2, 9999997, 3, 9999996, 4, 9999995, 5, 9999994, 6, 9999993, 7, 9999992, 8, 9999991, 9, 9999990, 10000000, 99999998, 10, 9999989, 11, 9999988, 12, 9999987, 13, 9999986, 14, 9999985, 15, 9999984, 16, 9999983, 17, 9999982, 18, 9999981, 10000001, 99999997, 19, 9999980, 20, 9999979, 21, 9999978, 22, 9999977, 23, 9999976, 24, 9999975, 25, 9999974, 26, 9999973, 27, 9999972, 10000002, 99999996, 28, 9999971, 29, 9999970, 30, 9999969, 31, 9999968, 32, 9999967, 33, 9999966, 34, 9999965, 35, 9999964, 36, 9999963, 10000003, 99999995, 37, 9999962, 38, 9999961, 39, 9999960, 40, 9999959, 41, 9999958, 42, 9999957, 43, 9999956, 44, 9999955, 45};
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<int> luckySet = {500000000, 499999998, 10, 5, 17, 500000003, 9};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 9, 10, 17, 499999998, 499999999, 500000000, 500000003, 500000001, 500000002, 6, 8, 1, 4, 7, 2, 3, 11, 16, 12, 15, 13, 14, 18, 499999997, 19, 499999996, 20, 499999995, 21, 499999994, 22, 499999993, 23, 499999992, 24, 499999991, 25, 499999990, 26, 499999989, 27, 499999988, 28, 499999987, 29, 499999986, 30, 499999985, 31, 499999984, 32, 499999983, 33, 499999982, 34, 499999981, 35, 499999980, 36, 499999979, 37, 499999978, 38, 499999977, 39, 499999976, 40, 499999975, 41, 499999974, 42, 499999973, 43, 499999972, 44, 499999971, 45, 499999970, 46, 499999969, 47, 499999968, 48, 499999967, 49, 499999966, 50, 499999965, 51, 499999964, 52, 499999963, 53, 499999962, 54, 499999961, 55, 499999960, 56};
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<int> luckySet = {1, 2, 3, 4, 5, 8, 11, 1000000000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 8, 11, 1000000000, 6, 7, 9, 10, 12, 999999999, 13, 999999998, 14, 999999997, 15, 999999996, 16, 999999995, 17, 999999994, 18, 999999993, 19, 999999992, 20, 999999991, 21, 999999990, 22, 999999989, 23, 999999988, 24, 999999987, 25, 999999986, 26, 999999985, 27, 999999984, 28, 999999983, 29, 999999982, 30, 999999981, 31, 999999980, 32, 999999979, 33, 999999978, 34, 999999977, 35, 999999976, 36, 999999975, 37, 999999974, 38, 999999973, 39, 999999972, 40, 999999971, 41, 999999970, 42, 999999969, 43, 999999968, 44, 999999967, 45, 999999966, 46, 999999965, 47, 999999964, 48, 999999963, 49, 999999962, 50, 999999961, 51, 999999960, 52, 999999959, 53, 999999958, 54, 999999957, 55, 999999956};
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<int> luckySet = {1, 3, 5, 7};
    int n = 3;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3};
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<int> luckySet = {3, 5, 7};
    int n = 2;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4};
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<int> luckySet = {2, 4};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<int> luckySet = {1};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<int> luckySet = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<int> luckySet = {7, 5};
    int n = 50;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 6, 7, 1, 4, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50};
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<int> luckySet = {3, 5, 7, 89, 51};
    int n = 3;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5};
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<int> luckySet = {2, 10000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 10000, 3, 9999, 4, 9998, 5, 9997, 6, 9996, 7, 9995, 8, 9994, 9, 9993, 10, 9992, 11, 9991, 12, 9990, 13, 9989, 14, 9988, 15, 9987, 16, 9986, 17, 9985, 18, 9984, 19, 9983, 20, 9982, 21, 9981, 22, 9980, 23, 9979, 24, 9978, 25, 9977, 26, 9976, 27, 9975, 28, 9974, 29, 9973, 30, 9972, 31, 9971, 32, 9970, 33, 9969, 34, 9968, 35, 9967, 36, 9966, 37, 9965, 38, 9964, 39, 9963, 40, 9962, 41, 9961, 42, 9960, 43, 9959, 44, 9958, 45, 9957, 46, 9956, 47, 9955, 48, 9954, 49, 9953, 50, 9952, 51};
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<int> luckySet = {2, 4, 999, 1001};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 999, 1000, 1001, 5, 998, 6, 997, 7, 996, 8, 995, 9, 994, 10, 993, 11, 992, 12, 991, 13, 990, 14, 989, 15, 988, 16, 987, 17, 986, 18, 985, 19, 984, 20, 983, 21, 982, 22, 981, 23, 980, 24, 979, 25, 978, 26, 977, 27, 976, 28, 975, 29, 974, 30, 973, 31, 972, 32, 971, 33, 970, 34, 969, 35, 968, 36, 967, 37, 966, 38, 965, 39, 964, 40, 963, 41, 962, 42, 961, 43, 960, 44, 959, 45, 958, 46, 957, 47, 956, 48, 955, 49, 954, 50, 953, 51};
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<int> luckySet = {3, 5};
    int n = 6;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5, 1, 2, 6};
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<int> luckySet = {1999999, 1000000};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1000000, 1999999, 1000001, 1999998, 1, 999999, 1000002, 1999997, 2, 999998, 1000003, 1999996, 3, 999997, 1000004, 1999995, 4, 999996, 1000005, 1999994, 5, 999995, 1000006, 1999993, 6, 999994, 1000007, 1999992, 7, 999993, 1000008, 1999991, 8, 999992, 1000009, 1999990, 9, 999991, 1000010, 1999989, 10, 999990, 1000011, 1999988, 11, 999989, 1000012, 1999987, 12, 999988, 1000013, 1999986, 13, 999987, 1000014, 1999985, 14, 999986, 1000015, 1999984, 15, 999985, 1000016, 1999983, 16, 999984, 1000017, 1999982, 17, 999983, 1000018, 1999981, 18, 999982, 1000019, 1999980, 19, 999981, 1000020, 1999979, 20, 999980, 1000021, 1999978, 21, 999979, 1000022, 1999977, 22, 999978, 1000023, 1999976, 23, 999977, 1000024, 1999975, 24, 999976, 1000025, 1999974};
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<int> luckySet = {1, 2, 4, 3242, 53453, 42, 5445, 45, 4234, 3423, 234, 23, 786, 645, 756, 7234, 45671, 631, 562, 732, 4125, 5236, 23456, 5282355, 947342, 904793, 78945237, 4578992, 704324, 27593, 57458025, 58045403, 4574545, 3458903, 8437342, 89234543, 43299, 4545475, 54474545, 2342752, 5479534};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 23, 42, 45, 234, 562, 631, 645, 732, 756, 786, 3242, 3423, 4125, 4234, 5236, 5445, 7234, 23456, 27593, 43299, 45671, 53453, 704324, 904793, 947342, 2342752, 3458903, 4545475, 4574545, 4578992, 5282355, 5479534, 8437342, 54474545, 57458025, 58045403, 78945237, 89234543, 43, 44, 632, 644, 5, 22, 24, 41, 733, 755, 633, 643, 757, 785, 634, 642, 6, 21, 25, 40, 635, 641, 734, 754, 636, 640, 7, 20, 26, 39, 637, 639, 638, 758, 784, 8, 19, 27, 38, 735, 753, 563, 630, 9, 18, 28, 37, 10, 17, 29, 36, 736, 752, 759, 783, 11, 16, 30};
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<int> luckySet = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<int> luckySet = {2, 3, 4, 6};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<int> luckySet = {1000000000, 999999985, 943828488, 499923133, 437546661, 32183844, 111111111, 999999999, 999978877};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {32183844, 111111111, 437546661, 499923133, 943828488, 999978877, 999999985, 999999999, 1000000000, 999999986, 999999998, 999999987, 999999997, 999999988, 999999996, 999999989, 999999995, 999999990, 999999994, 999999991, 999999993, 999999992, 999978878, 999999984, 999978879, 999999983, 999978880, 999999982, 999978881, 999999981, 999978882, 999999980, 999978883, 999999979, 999978884, 999999978, 999978885, 999999977, 999978886, 999999976, 999978887, 999999975, 999978888, 999999974, 999978889, 999999973, 999978890, 999999972, 999978891, 999999971, 999978892, 999999970, 999978893, 999999969, 999978894, 999999968, 999978895, 999999967, 999978896, 999999966, 999978897, 999999965, 999978898, 999999964, 999978899, 999999963, 999978900, 999999962, 999978901, 999999961, 999978902, 999999960, 999978903, 999999959, 999978904, 999999958, 999978905, 999999957, 999978906, 999999956, 999978907, 999999955, 999978908, 999999954, 999978909, 999999953, 999978910, 999999952, 999978911, 999999951, 999978912, 999999950, 999978913, 999999949, 999978914, 999999948, 999978915, 999999947, 999978916, 999999946};
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<int> luckySet = {7, 20, 13, 2};
    int n = 15;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 7, 13, 20, 3, 6, 8, 12, 4, 5, 14, 19, 9, 11};
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<int> luckySet = {2, 4, 6};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<int> luckySet = {8, 6};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 7, 8, 1, 5, 2, 4, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<int> luckySet = {3, 1};
    int n = 100;
    UnluckyIntervals* pObj = new UnluckyIntervals();
    clock_t start = clock();
    vector<int> result = pObj->getLuckiest(luckySet, n);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8394868&rd=13803&pm=10356
********************************************************************************
#include <map> 
#include <set> 
#include <cmath> 
#include <queue> 
#include <vector> 
#include <string> 
#include <cstdio> 
#include <climits> 
#include <cstdlib> 
#include <cstring> 
#include <cassert> 
#include <numeric> 
#include <algorithm> 
#include <iostream> 
#include <sstream> 
#include <cctype> 
#include <ctime> 
#include <float.h> 
using namespace std; 
 
typedef long long int64; 
typedef vector<int> vi; 
 
#define For(i,a,b) for (int i(a),_b(b); i <= _b; ++i) 
#define Ford(i,a,b) for (int i(a),_b(b); i >= _b; --i) 
#define Rep(i,n) for (int i(0),_n(n); i < _n; ++i) 
#define Repd(i,n) for (int i((n)-1); i >= 0; --i) 
template<typename T> inline int size(const T& c) { return (int)c.size(); } 
 
class UnluckyIntervals { 
  public: 
  vector <int> getLuckiest(vector <int> luckySet, int n) { 
    set<int> x; 
    For(i, 1, n) 
      x.insert(i); 
    Rep(i, size(luckySet)) { 
      For(j, -n, n) { 
        int t = luckySet[i]+j; 
        if (t > 0) 
          x.insert(t); 
      } 
    } 
    set<pair<int64,int> > y; 
    for (set<int>::iterator it = x.begin(); it != x.end(); ++it) { 
      int t = *it; 
      int i = 0, j = -1; 
      Rep(k, size(luckySet)) { 
        int z = luckySet[k]; 
        if (z <= t) { 
          if (i == -1 || z > i) 
            i = z; 
        } else { 
          if (j == -1 || z < j) 
            j = z; 
        } 
      } 
      if (i == t) 
        y.insert(make_pair((int64)0, t)); 
      else if (j == -1) 
        y.insert(make_pair(LLONG_MAX, t)); 
      else 
        y.insert(make_pair(int64(t-i)*(j-t)-1, t)); 
    } 
    vi res; 
    for (set<pair<int64,int> >::iterator it = y.begin(); n --> 0; ++it) { 
      res.push_back(it->second); 
    } 
    return res; 
  } 
}; 
 
 
 
// Powered by FileEdit
// Powered by moj 4.12 [modified TZTester]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/