/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10564
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class IOIString {
public:
    int countIOIs(vector<string> mask);
};

int IOIString::countIOIs(vector<string> mask) {
    int ret;
    return ret;
}


int test0() {
    vector<string> mask = {"IO?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> mask = {"????"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> mask = {"?II"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> mask = {"I??O??I"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> mask = {"???I???????O???", "???????????O??IO????????I???"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 438952513;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 967087276;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> mask = {"?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> mask = {"????I??????????????I?????????????I????????????????", "??????????????????????O??O??I????????????????????O", "?????????????????????????I????????????????????????", "????????????I??????I??????????????????????????????", "?????O?O??O?????????????????????????????????"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 686331837;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 74370708;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 386246655;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 999360799;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 118643699;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 531963268;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 252665892;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 575541091;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 146805543;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> mask = {"?O?OO????OOOO?OOO?OOOOO??O?O?O?OO??O?O?O??O??O??O?", "??OO?O?OOO?OO????OOOOOO?O?O?O???OOO?OOOOO??OOOOOOO", "OOO?OOO?OO??O??OO????O?OOOOOOOOOOO??OO?OOOOOOOOOOO", "O?OOOOOOO?OOO???OOOOOOOO?OOO?OOOOOOOOOOOOOO?OOOOOO", "O???OO??OO?OOOO?OOOOOOOIOOOOO?O??O?OOOO?O?OOOO?O?O", "??OOOO?OOOO?OOO?OOO?OOO?OOO?O?OO?OO?O?OOO?O?OOO??O", "O?OO?O?OOOOOO?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 988185589;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> mask = {"OO??OO?OOO?OO??OO?O?O?O??OO??OOO??O?O??O?O?OOO??OO", "O?OO?OOOOOOO?O?OOOOO??O???OO?O??OOO????O???????O??", "O??O??O??II?I?II???III??I???IIIIIIIII???III?I???II", "??I??II?II?OOOO??O?O?OOO??O?O????OO?OOOOOO????OOO?", "??OO?OOOO??O?O?OO?OOO?OOOO??O??OO??O????O??OOOOOO?", "O?OO?O?OO?OOOO?OOOOOO????OOO?OOOO?OO??OOO??????OOO", "OOO?OO???O????O?OOOOOOO??OOO?OO?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 846217521;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> mask = {"?OO?O?OOO?OOOOOOOOOOOOOO?OOOOOOO?OOOOO?OOOOOO??OOO", "OO?OO?OOOOIOOO?O?OOOOOOOOOOOOOO?OOOOOOOOO???OO?O??", "OOOOOOOOOOOOOOOO?O?OOOOOOO?O?OOOOOOOOOOO?OOO?OOOOO", "O?OOOO?OOOOOOOOOOOOOOOO?OOOOOO?OOOOOOOOOO?OOOO??OO", "O??OOO?OOOO?OO??OOOOO?OIOOOOOOOO?OOOOOO??OOOOOOOO?", "O?OOOOOO??OO?OOO?OOO?OOOOO?OOOOOOO?OO?O?O?OO?OOOO?", "O?O?OOO?OOO?OO?OOOOO?OOOOOO??O??OOO?OO?O?OO?O??OOO", "OOOOOOO?O?O?O?O?OOO?OOOOOOOOOO?OOOOOOO?OOO?OOOOOOO", "OOOOOOOOOOOOOOOOOOO?OOOOOOOOOOOOOOOOOOO??O?OO??OOO", "?OOOO?OOOOOOOOOO??O???OOOOOO???OOO??O?O?OOOOOOO?OO", "OOOOOOOO?OOO??OOOO??OOOO?OOOOOOOO?OOOO?OOOO?OO?OOO", "OOOO?OOOOOOOOOOO?OOO?O?OOOOOOOO??OOO?OOO??O?OOO??O", "OOO?OOOOOO?OOOOOO???OOOOOOOOOOOOO?OOOO?OOOOOOOOOOO", "OOO?OOOO?OOO?OOOOOOO???O?OO??O?OOO?OOOOO?O?O??OOOO", "O?OOOOOOOOOOOO?O?OOOO?O?OOOOO??OOOOO?OO?OOOOOOOOOO", "OOOOO?O?OOOO?OOOOOOO??OOOO?OOOOOOOOOO?OOOOO?OO?OOO", "OOOO??OOOOOOO?O??O??OOOOOOO??OOOOOO?OOOOOOOOOOO??O", "OOO?OOOOOOOOO?OOO???OOO?OOO??OOOOOOOO?OO??OOOOOO?O", "OOO?OO?OOOOOOOO??OOOOOOOOOOOOOOO?OOOOOO?OO??OOOOOO", "OOOOOOOOOO?O???OOOOOOOOOOO??OOO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 995560554;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> mask = {"??????????????O?O??OO?O?O?????O?O???O?????????OO?O", "OO?O?O????O?O????OO??O??????????O????O????O???????", "OO????????????????O???O???O???????OO????????O???OO", "??OO??????????O???????????OO????O??O????O??O?O????", "O??????????????????????O??????OO???O????O????OO???", "?OO?O????????O???O????????O????O?O?O?????O??O?O???", "?????O????O???????????????????????OOO????????O????", "?O???OO???OO??????O?O???O???????OO??????O?????????", "????????OO???OO????????????O???????????????????O??", "O???O?OO??O?????????OO????????????????????????O???", "????O??O???O????OO?OO????????????O????????O???????", "?O?????????????O?????O?????????????????OO????O????", "???O???????????????O?????O?OO??O???O??O??????O????", "???OO????????????????O????O??????????????????O??O?", "???O????????????????O?O??????O?????O?????????????O", "??O?O??O?????O???O????O???OO?OO??O?????O???????O??", "???OO?????????O???????????????O??O?O?????O????????", "????????O?O?OO??????OO???????O????????????????O???", "??????O?????O??????O??????OO?O?OO????????????OO??O", "??I????O????????O????????O??O???O??????O???OO????O", "O??O?O????????O?O?O?O???????????OO??O?O?O???O?O?OO", "OO??O????O????O????????O???????O???O????????O?????", "??O???O?????????????O?????????????????????????????", "??????????????????????????????????????????????????", "?O?O??OO???????O?O?O??O???????????O????OO?OO??O???", "????????????O????????O?OO????O????O?O?????O?O?????", "OO?OOOO???O????O??OOO?O???????O?????????O?????????", "?????????O????????????OO???????O????O????????OOO??", "????OOO??O??O???????OO??????????OO????O??O?O?O????", "??????????????????O???????OO???????O????????O?????", "OO?????????????OO???O???O???O??????O???OOO?????O??", "??O??????O???????????????O??OO???O???????????????O", "???????????????????????O?????O?????O?O??????O?OO??", "?O??????O??O??????O?O??????O????????????O?????????", "O????O?????????O????O?O??O????????OO??????????OOO?", "O?????O??OOO??O?????O????????O??O????O?????????O??", "??O????OO???????O??????O??O??????O????????O???????", "???O?O????????????O????????O????O??????????O???O??", "?????O???????OO????????????O?O?????O??????????????", "??OO????????????OO??O??O?O???O?O??O?O?O?????????O?", "O???????O??????O???O????O????????????????????O????", "????????O?????O????O???O????????????????????O??OO?", "????????O????O??O????????????O?????????O??????????", "??O?O??OO??????O??O??????O???O??????O????O?O???OO?", "?O?O????O?????O???????O????????"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 231552048;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 217565107;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> mask = {"??OO??O?O?OO?O?????O????O??O?????O?O?O???OOOO??OO?", "????O?OOOO??OO?OO?OO?O??OO??O????OOOO??O???OOO?O?O", "???O?OOO??????OO?O?????OOO??O????O??O???????O??O?O", "O????OOOO???OOOO??O?OOOO?OOO?O??O???O??OOOO??OOO??", "??OOO??O?O?OOOOO??OOO????O?O?????O???O?O??OOO?O???", "OOO???OO??OO??????O?O???OOO??OO??OO????O?O????O???", "O???OO?????OO?O??OOO???????OOOO??OO?O????OOO??O???", "????O?OO?OOOOOO??O??O?OOO????O?O??O?????O?OOO???O?", "???O??OO???O??O?OOO?OOO???O?O??????O??OOOO???OO?OO", "O?O?O?O????OO??O??O?O?O???OOOOO?OO?OO?OO???O???O??", "OO??OO??OOO?OOO??OO?????OO??????O?????OO?O????OOO?", "OO??????O?OOO???O??OOOO?O??O?O??OO???OOOO???OO????", "????O??OO???O?????OO??O?O?????OO?OO????OO??O?????O", "O?O?OO?O????OO?OO??O??O?O????O?O??OOO??OOO???O????", "OO????OOOO?????O?O??OO???O?O?????OOOO??O????OO??OO", "?O?O???O???O??O???O???O???OO???OO??OO??O???OO??O??", "??O?OOO?OOOO??OOO????????OOOO????????OO?OO??O???O?", "O????O????O?O?O?????OO????OOO??O??OO??O?OO?O?OOO?O", "??O?OOO?O??OOOOOOO??OOOO??IIII?IIII?I?I??????I????", "??II???????IIII??II???I???????????I??I?II??III??I?", "?I????IIII???II????IIII??I?I?I???IIII????I??I?I???", "II??I?I????????IIII?I????I????II??I???II?II?I???I?", "??I?II??I????II??II???I???????I?????I??I????????I?", "?I???I?I?III?I?I????I?I??I??I???I?III??II?III????I", "?IIIII?I?I?I??I???II???I????I?IIII?????II??I?I?I??", "???I??I????I????I?I??III?III?I??IIIII??III?IIII?II", "?????III?I?I?I???III?????II????I???I?III????I???II", "II????I?I?I?I??I??II?II???I????I???????I?I?I?I??II", "???II?II?????II?I???I??I??II?I???I??????????I?I?II", "?I?IIO?OO??O?OO??OO????O?OOOO???OOO???O???O?O?????", "??O?O???OO?OOO??O?O????O??O?OOO?OO?O??O?O?O?O????O", "???O?OO?OOO??O???OOOO????O????OO??O??O??OO?O??OO?O", "O????O????O??O??????O??????O????OO?????O?O?OO?OO??", "O?O????O?O???O?O??OO???O??OOOO?OO?O????O?O??O???OO", "OO?O?O???O?OO?O???OOO?O??OO??O??O?OOO???O??OO??O??", "O??O?O??O???O??O?????O??OO??????O?O?O??O???O??OO??", "?O??OO?O?O??O??O?OOO????O????????O?O???OO??O?OOO??", "??????O?OO???????????OOO????O??O?O??OOO???OO???OO?", "O?OOOO??????O?O??????O??O??????O???O?O???????O?O?O", "O?OO????O??O?O?O???O????OOO???OOOO?????OO?O?O?OO??", "??????OO?O?O??O?OOOO?O???OO???OO?O????OOOOO??OO?O?", "??OO?O?OO?O??O??OOO??OOO????O?OOO?O?OOOO?OO??O??OO", "??O??O?????O?OOOOO???OOO?O?OO?O???O??O???OO?O?????", "OOOO??O"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 519859877;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> mask = {"OOO??O??OO?OOOOOO?OOOOO?OOO?OOOOOOO?OOOOOOOOOOOOO?", "OO?OOO?OO??OOO??OOO?OOOOOOOOOOO?OOOO?OOOOOOOOOOO?O", "?O?O?O?O?OOOOOOOOOOOOOOOOOOOOOOOO?OO?OOO?O?OOOOOOO", "O???OO?OOOOOOOOOOOO?OOOOOOO?OO?OOOOOOOO?OO???O?O?O", "OO??OOO?OOOOOOOO?OOOOOOOOOOOOOOOOOOOOOOOOO?OOOOOOO", "??OOO?OOOOOOOOOOOOOOOOOOOOOO??OOOOOOOOOO?OOOOO?OOO", "OOOOOOOOOOOO?O?OOOOOOOO?OOOOOOOOOOOOOOOOOOOOO?O?OO", "OO?OOOOOOOOO?OOOOOOO??OOO?OOOOOOOOOOOOO?O?OOOO?OOO", "OO?OOOO??OOOOOOOO?OOOOO?OOOO?OOOOO?OOOOOO?O?O?OOOO", "O?O??OOOOOOOOOO?OO?OO?OOOOOOOOOOOOOOO?OOOOO?OOOOOO", "?OOOOO?O?OOOOOOO?OO?OOOO?OOOOOOOOOO?OOOOOOOO?OOOOO", "OOOOOOO??OOOOOOOOOO?OOOO?OO?OO?OOOOOOO??OOOOOOOOOO", "OOOOOOOO??OOOOOOOO?O??O???O?OOOOO?OOOOOO?OOO?OOOOO", "OOOOOOO?OO?OOOOOO????OOOOOOOOOO?OOOOO?OO??OOOOOO??", "OO?O?OOOOOOOOOOO?OOOOOOOOO?OOO?O?OOOOOOOOOO?OOOOOO", "OOOOOOOOOOOOOOOOOOOOOOOOOOO?O??OOOOO?OOOOO?OOOO?OO", "O?O?OOOO?OOOOOOOOOOOOOO?OOOO?OOOOOOO?OOOO?OO?OOOOO", "OOOO?OOOOOOOOOOOOOOO?OOOOOO?OOOO?OOOO?OOO??OOOOOOO", "OOOOO?OOO?O?OOOOOOOOOO?OOOOOOOOO???OOOOOOOOOOOOOOO", "OOOO??OOO?OOOOO?OOO?OOOOOO?OOOOOOOOOO?OOOO?OOOOOOO", "OOO?O?OOOOOOOO??OOO?O?OOOOOO?OOOOOO?OOOOOOOOOO??OO", "OOOOOOOOOOOOOOOOOOOOOOOOO?OOOO?OOOOOOOOOOOOOOOOOOO", "OOOOOO??OOOO?O?O?OOOOOOOOOOOOOOO?O?OOOOOOOOOOO?OOO", "OOO?OOOO???OOOOO?OOOOOOOOOOOOOOOOOIIIII?II?IIIII?I", "?III?IIIIIIIII?IIIIIIII?II?IIII?IIIIII??I?III?IIII", "IIIIIII?III??IIIIIII?IIII?IIIIIIIIIIIIIII?II?II?II", "IIIII?IIIII?II?IIIII?III?IIIIIIIIIIIII?III?IIIIII?", "II?IIII?IIIII?IIIIIII???IIIIIIII?IIIII?IIIIIIIIIII", "I?IIIIIIII?IIII?IIII?II?IIIIIIIIIIIIIII?IIIIIII?II", "?II?IIIII?III?IIIIIIIIIIIIII?IIIIIIIIIIIII?IIIIIII", "I?III?II?I?II?IIIIII?IIIII?IIIIIIIIIIIIIIII??IIIII", "?IIIIIIIIIIIIIIIIIIII?I?IIIIII?IIIIIIIIIIIIIII??II", "I?IIIII?I?IIIIIIIIIIIII?IIIIIIIII?IIIIIIIIIIIIIIII", "IIIIIIIIIIIIII?IIOOOOOO??OOOOO?OOOOOOOOO?OO?O??OOO", "OOO?OOOO???OOO?OOOO?OOOO?OOOOOOOOOO??O?OO?O?OOOOOO", "O?OOOO?OOO?OOOO?OOOO??O?OOOOOOOOOOOOOOOOOOOOOOOOOO", "OOOOOOOOOO??OOOO?OOOOOOOOOOO?OOO?OOOOOOOOOOOOO?O?O", "OOOOOOOOOOOO??OOOOOOOOOOOO?O?OOOOOOO?OOO?OOOO?OO?O", "OOOOOOO?OOOOO?OOOOOOOOOOOOO???OOOO?OO?OOOOOO??OOOO", "OOOO?OOOOOOOOO?OO?OOOOOOO?OOOOOOOO??OOOOOOOOOO??OO", "O?OOOOOOO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 554442572;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> mask = {"OOOOOO???O???OO?OO?OOO?O?OOOOO?O??OOOOOOOOOO?O?O?O", "?OOOOO?O?OO?OOOOOOOO?O?O?O??OO?OOOOOO?O?OOOOO?OOOO", "OO?OOO?OO?????OOOOO?OOIOO?OOI?O?O????I??I????OI??I", "?OIOO?OO?O?I?O??OIOOIOO??OIO?IO???OIOO??OIOOI?OIOO", "??O?O?I??I?OI?O??OIO?IOOIOO??OIOO??OI??IO?IOO??OIO", "?I??IO?IOOIO?I??I?OI?????IO??OOIO???OI????OIO???O?", "?OI?OIOO??O?OOIO??OOI?OIOOI??IOOIOO???I?OIOOI?OIOO", "IO?I????OI?O?OOIOO?O?IO?IOOI?OIOOIO?IOO??O??OI?O?O", "?IOO?OO??OI???OOIOO?O???O?OO?O?IO?IO?IOO??OIO?IO?I", "?O?O???O?OOIOOIOOIOO???IO?IOOI??I???OO??O?O???OI?O", "IO??O?IOOIO????I?O?OOI??I?O?OOI???O?I??I?O?OO???IO", "OIOOIOOI?OIOOIO???OI?OIOO???I?OIOOI?OIOO???IOOIOO?", "OOIOOI?OI?O?OOI???O?I?OIOOIOOIOOIOO?OOI?O????OO?OO", "I?OIO?IOOI??IOO?OOI??IOO?????OI???O?IO??O???O?OO?O", "???OIO?IOO?O?I?OIOOIOOIO??O??O???OI?OIOOIOOI?O???I", "??IOO?OO?OOI?OIOOI?OIOOIOOI?OI??IOO?O??OO??OIOOI?O", "IOOI?O?O???OIOO????OOI?OIO?I?O?OOO???OOO??O?O?OO?O", "??OO??OOOO?OOOO?O?O?O?OOOO??OO?OOOOOO?OOO??O?O??O?", "O??O?OO?O??OOO??OOOOOO?OO??O??O?OOOO??O?OOO?O???OO", "O?O?O??O??O?OOOO?OO??O?O??OO?O?O?OOOO?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 371002458;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> mask = {"????OO????????O??O???O?O?O??O????O?????O?O???O????", "?????????????O??????O???O????????O????????????????", "O?????????O?????????OO?O????????????????????????O?", "???O????O???O?????O???????O???????????OO?O????????", "????O??????O????O???????????O?O??OO?????????O?????", "???O????O?O????O????????OO?O??????OO???O??????????", "?O??OO??????O??????????????O?????O?O?O?????OOO????", "??O??????????O?????O???O????????????O??OO???????OO", "O?????????????O??O?OOO??O?????OO?O?O??OO?O?O??????", "???OO??O?O??????????????????????O???????O????O????", "??????????O????O?????O?????????????O?????OO?OO????", "OO????????O???????O?O???OO???????O??O????????O??OO", "???O?O????O?????????O?????OO??O?O??????????O?O????", "O?OOO?????????O??O??????OO?????O???O?O??O????O???O", "??O???????OOOO?O??OO?????????????O?O???O?O??????O?", "????????OO???O????????O????????????O???????O??????", "?O????????O??O????????O??OO??O??????????O?????????", "???????O??O????????????O????O?OO??????OOOO????O?O?", "???O??O???O??O??O???O???????????O????O?OO?????????", "???????????????????O?????O?????O????O?????O??O????", "?????????????O???O???????????OO?????????????O??O?O", "????????????????O????O??O????OO???O?????????O????O", "???O??????O????O??????????O??O????????????????O???", "O??????O?????O?OO?OO??????O??O?O???O??????????????", "?O????O?O???????????????O???O?????OOO????????????O", "?????O??????O?????OO?????????O????????????????????", "??OO??O????????O?O??O????O?O?????????O?O??????????", "?????OOO?O???????O?????O??O???O??????O?????????O??", "??????O?????????????O????????OO???O?O????????OO???", "????O????O????????????????????O?O??????O???OO?O???", "???O????O?????O?????O????????O?O???????????O??????", "O????????????????OO?O???O?O?????????????O???OOO???", "????????OO?O?????O?????O???????OO?????????????O??O", "?????O????????O??O?O??????O???????O?????O????O??O?", "?OO??O????O?????????????O?????????O?????O???????O?", "?????????????????OOO????O????O??????O??O?O?O???"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 377889671;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> mask = {"?????O??OO?O??O???O??O??O?O?O???????OO???O?????OO?", "?O?O??????????O???????OO??????O????????O?O????????", "????????????OOO???OO???OO?O??????O??O????????O?O??", "O???????O????O????O?OO????O?O??????O??????O???????", "?OOO???O????O?O?????O??OOOO?????????O?OO??O????O??", "??O?O?????????????????????OO?OO??????????????O?O??", "O??O???????????OO??????OOO?O??????O?O??O?????O?O??", "????????????OO?OO??O?O???O?O??O????????O??????????", "??O???O???O???O???O?O???????O???????O?????O??????O", "????OOO????O?????????O?O?????O??OO??????OO??O??O??", "??OO?????????????O????????O"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 935610039;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> mask = {"O?O?OOOOO?O?OO?OO?OOOOOOOOOOOO?OOOOOO?OOO?OOO?O?OO", "?OOOO?OOO???O??O?OO?OOO?OO?O??O?O?O?O?OOOOOOOO?O?O", "?OOOOOOOOOOOOO?OOOOOOOOOOOOO?OOOO?OOOO?OOOOOO?O?O?", "OO?OOOOOO?OOO?OOOO??OO?O??OOOOO?O??OO??OOOOO?OOOOO", "O?OO?OOOOOOOOO??OOOO?OOOOOO??O?OOOOOO?OOOOOOOOOOOO", "OOOOOOOOO?OOOOOOO?OOOOOOOOOOO?OO?O?OOOOO??OOOOOOOO", "OOOOOOOO?OOOOO?OO?OOOO?OOOOOOOOOOO???OO?O?O?O?O??O", "OOOOOOOOOO?OOOOOOOO?OO?OO??OO?O?OOOOOOOOOO?OO?OOO?", "OOOOO?OO???OOOO?OOOOOOO?O??OOOOOOOOOOOOOOOIOOO?OO?", "OOOOOO?OOOOOOOOOOOOIOOOOO?OO?OO?OOO?O??OOO?OOOIOO?", "?OOOO?OO?OO?O?OOOOOOOOOI?OOO?OO??OOOOOOOOOOOO???O?", "IOOOOOO??OOOOOOOOOO?OOOOOOOIOO?OOOOOO?O?OOOOOOOO?O", "OOOOIO?OO?OOOOOOO?OOOOOOOOOOOOOIOO?OOOOOOOOOO?OOOO", "?OOOOOO?IOOO?OOOO?OOO??OO???O?OO?OOIOOOOOOOOOOOOOO", "OOO??OO?OOOOIOOO?OO??O??OOOOOO??OOOOO??IOOOOO???O?", "O??OOOOOOOO?OO?O??O?OO?OOOOOOOOOO?OOO?OOOOO?OOOOOO", "OOOOO?OOOO?O??O???OOIO?OOOOO?OO?OOOO?OO?OO?OO?OIO?", "OO?O?O?O??O?OO?OO?O??O??IO?OOO?OO?OOO?O?OO?OO?OOOO", "OO?OO?OOOOOOOOOOOO?OO?OO?OOOO?OOOOOOOOOOOO?OOOOOOO", "??OOOOO?OOOOO?OOOO?O?OOOOO?OOOOOO???OOOOO?O?OOOOO?", "OOOOO??OO?OOO?OOOO?O???OO?OO?OOOOOOOOOOOOOO???OO??", "OO???OO?O?OO?OOOO?OOO?OOOOO?OOOOOOO?OOOOO?O?OO?OOO", "O?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 792845264;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 891484906;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> mask = {"OOO?OOO?OO?OO??O??OOOO??OOOOOO????O?OO?O?O?OOOOOOO", "?OOOOOO?OOOOOOOO?O??OO?OOOOOOOOOOO?OOO??O?OOO??OOO", "O?OO?OOO??OOO?OOOOO?O???OO??O?OO?OOO?OO???OOOOOOO?", "?OO?O???OOO?OOOOOOOOO?O???OOO?O?OOOO??OOO??OOOOOOO", "OOOO??OO??O???OO?O?OOO?O???OOOO?OO??OO??O??OOOOO?O", "OO?OOOOOOOO???O??O??OO?????OOOOO?OOO?O?O?OO?O?OO?O", "O?OOO??OOO???O?O??OOOOO????O??O?O??OOO?OO?O?OOO?O?", "O?O???O??OOOO??OOOOOOO?OO?OOOO?OOOO?O??OOO??O??OOO", "??OOO???OOOOO?OO??OOOOOOOOO?OOO?O?OOO????OOOOOOOOO", "O?O?OO?OOO??OOOO??OOOO?OOOO????O?O??O?OO?OOOOOO??O", "OOO???????OOOO?O?OOOOOOOOOO?O????OOOOOOOOOOOOOO??O", "O??OOOO????O?O?OO??OO?O?OO?OO?OO?OOOOOOO?OOO?O??OO", "?OOOOOOOOOO???O?O?OO??O?O???OO????OOOO?OO?O????O?O", "O?O?OOOOO??OOO???OOO??O??OOOO?O?OOOO????OOOOOOOO?O", "OO?OO?OO?OOOOOOOOOOO?OO?OOOOOOOOO?O?O?????OOO?????", "OOOOOO???OOO?OO?O??OOOOO?O??OO???????OO??OOOO?OOOO", "O?OOO???OO??OO?OO??OO?O??O?OOO?O?OO?OOO?OO??OOOO?O", "OOOOO?OOOOOOO?OOOO?OOOO??OO??O?O?OO?OOOOOO???OOOOO", "???OO?OO??O???OOOOO?O?OOO??O?O?O????O?OOOOOO???OO?", "OOOOOOO?O?OOOOOOOOOOOO?O???O?OOOOO???O?O?O?O?OOO??", "??OO?O?OO?OOOOO???OOOO?O???OO?O?O??O??OOOO?O??OOOO", "OOO?OOO?OOOOOOOOO?OOOOOOO????OO??OO?OOOOOOO?OOO?OO", "O?OOOO?OO??????OO?O?OO?OO??OOOO?OO?OOO??OOOOOO?O?O", "OO?OO?OOOO?O??OO????O??O??OO????OOOOOOOO?OOOOOO?O?", "O??OO?O?O?OOO?O?O?OO???OOO?OO???OOOOOO??O?OOOOO??O", "?OOO????OO?O??????OOO?OOOOOOOOOO???O????O?OOOOO?O?", "??O?OO?OOO???O??O?OOOOOOO?OOO?OO?OOO??O??OO?O??O??", "OOOOOOOO?O???OOO?O???OOO?O??OO???O??O?O??OOO?OOOO?", "???OO??OO?OOOOOOO?O?OOOO?OO?OO????OOOO?OOO??OO?OO?", "O???O?OO??OOOOOOO?OO?OOOOOOOOOO?OO?O???????????O?O", "??OOOO?OOOOOO?O???OOO?O?OOOOOOO??OO?OOOO??OO?OO???", "O?O?OOO?OOOO?O?O?OOOOOOO?OO?O?O?O????OO?OOOO??O???", "?OOOOO??OOOOOOO??OOOO?OOOO?OO?O?OOO?OO???OOO???O??", "??O?OOO?OO??OOO??O?OOO?OO??O??OO?OO??OO?O?OOO???OO", "OOO?O?O?IIII??II??II???IIIII??III???I?IIIIIII?IIII", "??III??I??IIII??I??III?II?I?II??III??I??IIIII?I???", "?IIIII?IIIII???III??I?????I??III???I?IIIIII??IIIII", "?IIII?IIIIIII?III??I?I?I?I??I???II?II????I??III??I", "?III?IIII???I?O?OOOO??OOOOOO??OOO?????OOO?O?OOO?O?", "OOOOOOO?OO??OOO??O?O??O??O?OO?????????OOOO?O?OO?O?", "OOOOO?O?O?O?OOOOOOOOOOO???OO???OOO?OOOO???OOOOOOOO", "OOO?OO??OOOOO?O??OOO???OO?O?O??O?OOO?O???OOOO?O???", "O??OOO?OO?OOOO?OO?OOOO??????OOO?O?OO??OOO?O?O??O?O", "???OOOOOOOO?OOOOOOOO?O????OO?O?OOO?OOOOO?OOOO?OOO?", "OOOOOOOO??O?O?OOOO?OO?OOOOOOO??OOO??OO?OOOOOOO???O", "OOOO???OOO?O??OO?O?O??OOOOO?O?OOO?OO?O??OO??OO?OOO", "OOOO?O?OO??OO?OOOO?O?O?OOO?O??????OOOO?OOOO?OOOOO?", "OOOOOOO?OO??OOOO?OOOOOO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 999680399;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 402903360;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> mask = {"??O?O????OO???????????O???O????????????O?O??????O?", "???????O?O?????O???????????????????????O??O????O?O", "?????????????????O?O??????????O????????????O??????", "??????????????????????O???????????O??O????????????", "?O?O?????O??O???O????O????????????????O????O??????", "??????????????????????????O???????????????????????", "???????O????OO????????????O???O??O????????????????", "?????O???O??????????O?O???????O???O????????O??????", "O?????????O??????????O??????????O??O??????????????", "????O?????O??????????????O??????????O???????O?????", "????????????????O????????????????O????O?O??O????O?", "?????????????????O????????????????????????????????", "???O???????????????????????????O???????????????O??", "????????????????????????????????O????O????????????", "????????????O?????????O????????????O???O?????O????", "???O????O??O???????????I??????????????I?????I????I", "???I?I??????????????????????????????II????????????", "???????????????I????I???????I????????????IIII?????", "??I????I??II????????I?????I??I?????????????????I??", "??????I????I??????????????????O???O???????????O???", "??????O??????????????????O??????????O????O??????O?", "?OO??O??????????O???????O??"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 863039916;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 310535570;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> mask = {"??????????O??????OO??????????????????????????O????", "??????????OO?????O?????O???O???????O???????O??????", "O???OO????O??????OO?????O?OO????????????OO????????", "?????OO?O??OO?????O???????O?????O??????OO?????????", "????????O??O?????OO?OO????????????O?????O??????OO?", "O??O?O???????OO?O???O?O???O????????O????????O?O???", "???O??OO???????O??OO????OOO???????O????????????OO?", "??OO?O?????????O????????O????????OO????O??????????", "?O?????O????????O????????????OOO?O?????O?????????O", "?????O?????O?O?O??????O??O????????O?????O?????????", "O????O???????O??O??????O?????O?????????O????O???O?", "????O?O?????O??OO?O?O??OOO????O????O????O?????O?O?", "??O????O?O???????????????????????????O?O???O?O??OO", "?????????O???????O?O???O??????OO???O????OO????????", "?????????O??????????????????????OOO???O?????O?????", "I???I?I????????????I?????I????I?I???????????????I?", "????????II????II??I?????I????????II???I?????I?????", "I?I?????I?????I?I???I???????I?I???????????I?I??II?", "??I?????????II????I?I??I????????I??I????????O?????", "??OOOOOO?OOO?O??O?????O??????????O?O???O????OO???O", "????O??O??O????????????????????OO??O??????O??????O", "O?????O????????OOO?O??O?O???O????????O?????O??OO??", "O???O????O??OO?????OOO??????O????O??O?OOO???"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 217729558;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> mask = {"OO???O?OO???OO??O????O?O?OOO?O????OO?OO?????OOOOO?", "?O?OO???O??O??OO?????O???????O?O????OOOO?????OOOOO", "OO?O?O??O????OOO?O?OO??O??OO?OOOO???O???O?O????OO?", "O?O?OO?O?O????OO???O?O??OOOOOOO?????O?????OO?O??O?", "??O??OO??OO??O????O???OO?OO?????OO????O????O?O????", "OO???OO???O??OOOO?OOO?OO????OO?O???OOO???O?OO?O???", "???O???OO?????OOOOO?O???OOO?O???O?O?O?OO?O?OOOO?OO", "?O??OO?O????O?OOOO?????O?O?O?O?O????O?OOO?O?O??O?O", "?OO?OO?OO??OOOO?OO?O????OOO?OOO???O???O??OOOO???O?", "O?O??O????OOOO?????O???OO?O????OOO?O?O??????O?OOOO", "OOI????OOO??O?OOO??O??O??O?O?OOO??O??????O??O?OO??", "OOO????????O??O?O???O?O?????O?OO?OO?O??????OO??O??", "OOO?OO??O?O?O???O?O???O?O?OO??OO???O?O??O?OO?O???O", "?????OOO?O???????IO?O???O???O???OO????????O??O?O?O", "????O????OOOOOO?O????????OO??O??O?OO??????OO????OO", "?O??O?OO?OOOOOO?OO?O?O?O??OO?O???OO????????O??O?O?", "?OO?OO?????O?O????O?O??O??O?OOOO?OO???OOO?OO?O??OO", "????OOOO????O???O??O?O???OO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 247728064;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> mask = {"?O?OO?O???????????OOO????O???O????O??O?????????O??", "???O???????O????????????????????OOO??O?O????O????O", "?????O???OO??O???O?????????O????O???O?????????????", "O????????????O??OO?????O???O????O?O?O????O???????O", "?????????????O?O??????O??O????????????????????????", "???O??OO?????O??????O???????????????O?O????O????O?", "????????O???O??O???????O???????O???????O??????????", "?O??????????O??????????????????O????O???O?O???????", "???????????????????O??????O??O????OO??????O???????", "???O?????O??????????????O??O????????????OO?????O??", "??????????????????O????O??O??O?????????O???????O??", "O??O???O????????O????OO???O?OO???O??OO???????O????", "?O???O???????????O?????O???O?????????O?O?O????????", "???????????O????????O???O??????O??????"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 194612445;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> mask = {"??OOOOOO?OOOOO???O?OOOOOOOOOO?OO?OOOOOOOOOOOOOO?OO", "OOOOO?O?OO??OOOOOOOO?OOOOO???OOOOOOOOOOO?OOO?OOOOO", "OOOOOO??O?OOOOOOOO?OOOO?OOOOOOOOOOOOOOOOOOOOOOO?OO", "OOOOOO?OOOOO?OOOOOOOOOOOO?OO?OOOOOO?OOO?OOOOOOOOOO", "OOOOO?OO?OOOOOO??OOOOOOOOOOOOOOOOOOOOO?OOOOOOO?OOO", "OOOOOOOOOOOOOO?OOOOOO?OOO?O?OOOOOO?OOOOOOOOOOOOOOO", "OOOOOO?OOO?OOO?O?OOOOO?O?OO?OOOOO?O?O?OOO???OOOOOO", "OOO?OO?OOOOOOOO?OOOOOOO?OOO??OOOOO?OOOOOOO?OOOOOOO", "OOOOOO??OO??OO?OOOOOOOOOOOOOOOOOOOOOO??OOOO??OOOOO", "OO??OOO?OOOOOOOOOOOOOOOO?OOOOOOOOOOOOO?OOO?O?O?O?O", "OOOOOOOOO??OO?OOOOOOOO?OOOOOOOOOOOOOOOOO?OOOOO?OOO", "OOOOOOOOOO?OOOO?OOOOO?OOOO?OOOOOOOOOOO?OOOOO?OOOOO", "OOO?OOOOOO???OOO?OOOOOOOOOO?OO?OOOOOOO?OOOOOOO?OOO", "O??OOOOOOOOOO?OOOOOOOOOOOO???OOOOOO??OOOOOOOOOOOOO", "O?OOO?OOO?OOOOOOOOOOOOOOOO?O?OOOO?OO?OOOO?OOOOO?OO", "O?OOOOO??OOOOOOOOOOOOOOOO?OO?O?OOO?OOOOOO?O?OOOOOO", "OO?O?OOOOOOOOOOO?OOO?OOOOOO?OOOOO?OOOOOOOOOO?OOOOO", "OOOOOOO???OOOOOOOO?O?OOOOOOOOOOOOOOOOOOOOO???OOOOO", "OOOOOOOOOO?OOOOOO?OO?OOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "OOO?OOOOOOO?OO?OOOO?OO?OOO??O?OOOOOOOOOOOOOO?OO?O?", "?OOO?O?OOOOOOOOOOOOO?OOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "O?OOO?OO?OOO??OOOOOOOOOOOO?OOOOOOOOOOOOOOOOOO?OO?O", "OOOOOOOOOOOO?OOOOOOOOOO?OOOOOOOOOOOOOOOOOOOOOOO?OO", "OOO?OO?OOOOOOOO?OOOO?OOOOOO?O?OOOOOOOOOOOOO?OO?OOO", "OOOOOOOOOOOOO?OOOO?OOOOOO?OOOOOOOOOOO?OOOOOOOOOOOO", "O?OOO?OOOOOOO?OOOO?OOO?OOO??OOOOOOOOOO?OOOOO?OOOOO", "OOOOOOOOOOOOOOOOOO??OOOOOOOOOOO?OOO?O?OOOOOO?O?OOO", "OO??OOOOOOOO?OOOOOO?OOOOOOOOOOOOOOOOO?OOOO?OOOI??O", "OOOOOOOOOOO?OOOOOOOOOOOOOOOOOOO??OOOOOOOO?OOOO?O?O", "OOOO?OOIOOOOOOOO?OO?OOOOOOOOOOOOOO?OOOOO?O?OOOOO?O", "OOO?OOOOOO?OOOOOO?IO?O?OOOOOOOOOOOOOOOO?OO?OOOOOOO", "OOOO?OOOOOOOOOOOOOOOOOO?OOOOO??O?OOO?OOOOOOOO??OOO", "OOOOOOO?OOOOOOOOOOOOOOOOOOO?OOOOOOOOOO??IOOOOOOOOO", "OOOOO?O?OOOOOOOO?O??OOOOOO??OOO?OOOOO?OOOOO??OO?OO", "O?O?OOOO?OOO?OOOOOO?OOO??O?OOOOOOOOOOO?OOOOOOO?OOO", "OOOO?OOOOO?O?O??OOO?OOOOOOOOOOO?OO?OOOOOOOOOOOOOOO", "OOO?O?OOOO?OOOOOOOO?OOO??OOOOOOO??OOOOOOOOOOOOOOOO", "OOOO?OOOOOOOO?OOOOOO??OO?OOOOOOOOOIOO??OOOOOOOOOO?", "OOOOO?OOOO?OOOOO?OOO?OOOOOOOOOOOOOOOOOOO??OOOIOOOO", "OO?OOO?OO??OO?OOO?O?OO?O?OOOOOOOOOOOOOO?OO?OO??OOO", "OOOOOOIOOOOOO???OOOOOOOO?O?OOOOOOOOOOOOOOO??OOOOOO", "OOOOOO?OOOOOOOOOOIOOOOOOOOOO?OOOOOOO?OOO?OOOOOOOOO", "OOOOOOOOO?O???OOOOOOOOOOO?OOI??OOOOOOO?OOOO?OOOO?O", "OOOOOOO?OOOOOOOOOOOOOOO??OOO?OOO?OOOO?OOOOOOO??OOO", "OO?OO?OOOOOOOOOOO?OOO?OO??O?OOOOO?OOOOOOOOOOOOOO?O", "OOO?OOOOOOO?OOOOOOOOOOO?O?O?OOOOOO?O???OOOO?OOOOOO", "OOOO?OO?OOO??OOOOOOOOOOOOOOOOOOO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 7229557;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> mask = {"???OOOO?O?O??O?OOOOO???????O?O??OOO?O????O?OOO??O?", "???O?OOO???OO?OO?O?OO????OO?OOOO?OO??O??O??O?OO??O", "?????????????O?????????OOOO?O??OO?OOOO???OO?O???OO", "?OO?O?OO?????????OO???O??OO???OO??????OO?OO?O??OO?", "O?OO??OOOO????????OO?O?OO?O?O?OOOOO??OO?OO???OO???", "??O?OO??O??O???OO?????OOO?????OO?O???OO??OOOO?O???", "???OO?O?O?O???OO?OOO?O?O??OOOOO?O??O?????OOO?????O", "??????OO????O????OOO??OO?O?OO?O?O?O??OO??O??OO????", "??????????O?O???O?O?O????O?????O?O??O????O?????O??", "?OO?OOO?OO?????????O??O??OO?OO?O?O??OOO??OOOO??OOO", "??OOO??O?OOO???OO????O?OO?????O????O?OO?O??O?OO?OO", "OOO?????O?????OO?OOOO?O??OO????O???O?OOOO?O???O???", "????O?O????O??OO???O?OO???O?O??O??OO?OOO??OOO?OO?O", "?OO??O?????O???OOOO?OOOOO??O?????????OO?O?O????O?O", "?O????O?OO?O???OOO?OO?O?OOOO?OO????OO???O??????OO?", "??O??O?OO???O?????????O???O??O????O???OOOOO?O???O?", "O?OO?O?OO?OO?O??OOO????OO??O?????O??O??O???O????O?", "??OO?O??OOO?O??O?O?O?OO?OO????O?O??O?O?OO??OO????O", "O?OO??O???O?????????O?O?O?????????O??OO??O??OOO?OO", "OOO?OO????O??O?O?OO?OOO??O??OOOOO??O????OO?OO?O?O?", "?OO??O?O?OO???O?OO?OO???OOO??O?O?O??O??O???O?O?O??", "O??O?O?O?O??????O??O?????O???????????O???OO?OO????", "??O?OO?O??O???????O???O???O???O???O?O??O?O??O?O???", "?OO??O??O??????O??OOO?OOOO??O?OOO???????O?O??O?O??", "?????OO?????O??????O?O?O?O??O???OOO???OOO?OOO?????", "OOOOOOOOO?O?OO??O???OOOO???O?O??O??OOOOOOOO??O????", "O?O???OOO????O?O?O???O??????O??????????????O?O?OO?", "??OOO??O?OO?O?OOO?O??O???OO??O?OOO?O??O?OO??O?O??O", "??O?O?O?O?O?????O?O??OO?O?OOOO??OO???OO?O?O?OO??O?", "OOO??OO??O??O?OO?OO???O????O???OOO???O?OO????OO??O", "O???O?OOOOO?O??????OOOO???OO???OO??OO????????O??O?", "??O?O???O??O??OO??O?????O?O????O???OOO?O?O????OOOO", "??OO?OO?OO?O?OOO???OO?????????O??O??????O???O?O???", "O?O?O??O?OO??O??O?O?OOO?O??OO??O?OO??O???O?O??O?OO", "??OOO?OO????O??????OOO?O?O?O???O????OOOOOO?O?O??O?", "OOO?OO??????O?O?OOO?O???O?????????OO???O???O?????O", "????O"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 170182956;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> mask = {"OOOO?OO?OOO????OOOOOOOO?OOOO?OOO??OO?O?OOO?OOOOO?O", "OO?OOOOOO?OOOOO?OOOOOOOOOOOO??O?OOOO?OOO??O?OOOOOO", "??OO???OOO?O?OO?OOOOOOOOO?OOO??OOO??OO?OOO??OO?O?O", "??OOOOOOOOOOOOOO?OO?OOO?O??OOO?OO??OO?OO?OOOO?O?O?", "OOOOOOOOOOOOOOOOOOO?O?OOO?OOOOO?OOOO???O??OOOOOO?O", "OOOO?OO?OOOOOOOOOOOO?O?OO??OOOOOO?OOOOO??OO?OOO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 562078353;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> mask = {"?O??O?O?O??O?OOO?O??OO???O?O??????OO??????OO?OO?O?", "??O??OOOO???OOOO?OOO?O??OO?OO?O??OOOO????O??OO???O", "??O?????OOOOO?OO?O????O?OOO?O?OO?O?O?OO???O??OO??O", "OOOOO???OOO?OOOOO??OO?O?O?OOO???????O?O?O??OO?????", "O???O?????OO??O?OO?OO?O????OO??O?OOO??OO??O??O?OO?", "???O??OOO??OOOO?O???O??O?OO?OOO???O????OO??OO??OOO", "OO??O?O??OOO?????OOO??OO??O?OO?????OO??????OOO??OO", "OO??OO????OO?OO?????O???O?OOO?O?O?OO???OOO?OOOO???", "?O??OO???O??OOOOO??O???O?O??OO??OOO?OO?O?O?O?O?O?O", "?OOOO????OO?O?OO???OOOOOO?????O??O??OO???OOOOOOO??", "?OO?OOOO???OO??OOOOO??OO?OO??O???OO???O?OOO?O???OO", "??O??O?OOO??OOOOO??O??OOO??O????O?OOO?O??OOOO?OO??", "OO??O???OOOO????OOOOOOO??OOO?O?O???O??O??OO??O??O?", "OOOO?OO?O?O???O????OO?OO???OOOOOO?O?O??OO?OOO?????", "?OO?O?????O?OOOO????O???O?OOO?OO?????OOO???OO???OO", "OO?O?O?OO????OO?O??OOO?OO???O?O???O?OO???????OOO??", "O?O??OOOO?OOOO??OO?O?????OO?O????OO????O?????O??O?", "?OO??OOO?OO?O??O?O???O?O????OO??O?O????O?OOO??????", "O?OOO??OOOOOO?OO??OO??O???????OO??O?OO??O???O??O??", "O??OO????O?O????OO?OO?OO?OO?OOOOOOO?O?OOO??OO?OOOO", "OOO?O???O?O??OO?O?O??????O?OO?OO?OO??????O?O?OOOOO", "O???OO????OO??OOO???????OOO??OOO???O?OOO???O?????O", "?O????O?O?O?OO???O??O?OOO?OOOO?????O??OO?OOO?OO??O", "???OO??????OO?O??O???O?OOO?O?????O????OOOOOO?O?O??", "O?O??OO?O?OO???OO??O???????OO??O?O?????O?O?O??O??O", "?O???O????O?O??O???????O?O"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 530948389;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> mask = {"OOO?OOOO???OO??OO??O??OOO?OO?OO??O?????O??OOOO?OOO", "??OO?OOO??O??OOO???OOO?O???O?O?O?OO?OOO??OOO??OO?O", "??OOOO?O??OO?OOOOOO?O?OOOO?OO?OOOO??O????O???O??OO", "O?OO?OOO?OO??OOOO????OOOOOOO?????O?O?OO?OO?OO?????", "OO?OO?O?OOOOOOOOO??O??O??OO??O??O??OO?O??OOO??OO??", "OO?????O?OO?OOOOOO?O??OO???O????O?O?OOOO?OOOOO??O?", "OO?OOO???O?OOO?OOOO?O?O???O???O?OO?O??O?OOO?OOOOOO", "OOO???OOO?O?O????OOOOOO?OO???O?OOOO?OOO??O??OOOOOO", "OO?O?OO?OO????OOOO?????O???OO?O?OO?OO?OO?OOOO??OOO", "O??O??OO?OOO?O????O???OOOO??????O??OO??OOOOOOOOO?O", "???OOO?????OOO??OOOOOO?OO?OOOO?O?OO????O?O?OOO?OOO", "OO?OO??OOOOO?OO?O??OOO?OO?O?O??OO??OO??O?OOOOO?OOO", "OOOOO?OO?????O?O?OOOOO?????O???OO?OO?O??OOOO?OOO??", "?OOOO?OOO?O???OO????OOO????OO?O??OO??OOOO??OOO???O", "??OOO?O?OOO?OOOOOOOO?OOO??OOOOOOO??O?OO??OO?OOO???", "OOO??O??O??O?O?O??O???O?OOOO?OO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 987015289;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> mask = {"?O?O??O?O?O??O?O?O????O?O???OO??O?OO?????OOO??OO?O", "O?OO?O???O??OO???O???OOOOOOOOO?OOO?O?O?OO??O?O??OO", "OOOOOO?O?O?O??O????O?OOOO????????OOOOO??OOO??OO?OO", "?OO?OO?OOO???O?O?OOOO??OOO????OO?????OOOO?O???O??O", "?O???O???O??OOOOO??O???????O?O??O??O?OO?OOOO?O?O?O", "?O?O???OO??OOOO?O?O?O??OOOO???O??O?O???OO?O?OO?OO?", "????O?O??O?O???OOOO?O???OOOOO?OOO??OO?OOO????OOOO?", "O?OOOOOOO?OO?OOOOOO?OO?OOO?OOOOOO??O?????OOOO?O???", "?OOO??O?O?O???OO?O???OOO?O???O??O?OOOOO?OOOOOOOO?O", "??????OO?OOO??OOO?OOO??O??OO?O??O??OOOO?O??O?OO?O?", "OOOOO?OO?OO???OO?OO?OO??O??OOOOOOOO?O?OOO?O??O???O", "???OOOOO?OO?O?O?O???OOO?O??O??O???O?OO??OO?O?????O", "??OO?OOOOO?O?O????OOO?O?OOOO?O??O??OOOOO?O?OOOO?O?", "?OOOO?OO??O??OO???O?O??OOOOO?O?OOOOOOOO?O???O??OO?", "OOOOOO?OOOO?OOOOOOOOOOO?O???OO??????O?????O?O?O???", "OOO?O??OOO?O??O?OO?O???OO???O???OO?OOO??OO?OOO???O", "??OOO?O?OO??OO??OOO??OO???OOO??OOOOO?O???OOOO???O?", "???????O?O???O??O?OOO?OOOOO?OOOO??O?OOOOO?O???OO??", "??OOOO?OOOO?OO??OO????O??OO?O?O???O??OO?O??O?OOO?O", "?O?O?OO?O?OO??O?OOO?O??O??O??OOOO?OOOOO?OO?OO?OO??", "?OO?O?OOO??OOO?OOOOOOOO???O?OO??OOO?OOOO??OO?O?O??", "????OO?O?O??OOO???O???OO?OOOO?OO???O???O?O???O?OOO", "O??O??O????OO??OO?OO??OOOOO?OO??OOO?O?O??OOOOO?OOO", "?OO?????????O???OOO?OOOO?O??OO?OO?O?OOO?OO??O?OOOO", "OOO???O?OO????O???O?OO?O???O????OO??O?O?O?OO??O?OO", "?OOO?OO???O????OO???O??OOO?OO?O???O??O?OOOO?OOO??O", "??O???OO??O??O?????O??OOO?O?O?OO?O?OOO??OO??O?OOO?", "O?O???OO?O?O?O?OOOO?O?OO?O?OO??OOO???O?O?OO?O?OOOO", "?OOOOO??O??OO?O?OO?????OOO??O?O?OOO????O??O???O??O", "?OOO?O?OOO???"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 964860830;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> mask = {"OOO?OO?OOOOO?O?IOOOOOOOO?OOOO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> mask = {"O??OO???OO??O???O????OO??????O???OO?????O????O????", "???O??OO??O????O???OO?O??O??OOO?????O?OO???????O??", "???????O??????O????????O?OO?O????OO?O???????OO?OO?", "OO?O?O??O?O?OO?O?OO?O??O???OO???O????O???O???OO??O", "??O?????O??OO?O?OOO?O?O???OO????O???OOO?O?OO??O???", "???OO??????O?OO??O?????O????O?????O??O???OOO??????", "O??O??????????O?????O?OO?O??????O??O?????OO????O??", "?????O????OO?????O??OO??OO?OO????????O?O??O?OO??OO", "O???O??OO???????????O??????O???O?O?O??????????????", "OOO??O?OO??O?O??????OO???O??O?O?OO?OO?OOOOO??????O", "?????O?OO???????O???O??O?????????OOOO?I??O?????O??", "??????O???OO??O???????OO????OO??O????????????O???O", "??O???OO?OO???OO????O?????O???OOO?O?O??O??O??O?O??", "OOO???OO?O?OO?????O??OOOOO?OO??OO????O???O????????", "O??OO?O????"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 61448439;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> mask = {"OO?O??OOOOOOOOOOOOOO?OOOOOOOOOO?OOO?OOOOO?OO?OOOOO", "OOOOOOOOOOOOO?O?OOOOOOOOOOOOOOOOOOOOOOOOOOO?OOOO?O", "OOIOOOOO?OOOOOOO?OOOOOOOOOOOOOOOOOOO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 16376;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> mask = {"??OOO?OI"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> mask = {"O?OOOOOOOO?OO?O?O??OOO?OO?O?OO??OO?OOOO?O?O?OO??OO", "O?O?O?OO?O??O?OOOO?OOOOO?O?OO?OO??OO?OO?O?O??O?O??", "?O?OO???O?O?O??O?OO?O?O????O?O?OOO?OO?O???O?????O?", "O?OOOO?O???O?OOO??O?????O??OO?OOO?OO??O??O?OOOOO?O", "O?OOOOO?O?O?OOOO??O?O?????OOO?O??O?OO???????OO?OO?", "OOO?O?OOO???O?IOOOOO?????O???OOOOO?????OOOO????OOO", "OO?O?O?OOOOO???O???O?O?OO???O?OOOO???O??O?O????O?O", "O?OOO??OOOOOOOOO?OO?OOO?O?OOO?O??O?O??O?OO?O?O??OO", "O?O?O?O?OOO???????OOOOO?O???O???O??OOOO??O????OOO?", "O??OO?OO???OOO??OOO?O?O?O?OOO????????OOO?OOOOO?O?O", "?O??O?OO?O?O??OOOO??OOOOO??O?OO??OOO?O?O??????OOOO", "O??OO?O?O???????OO?O???O???OO?O?O??O?OOO?OOOOO?O??", "???O?O??O?OOOO?O????OO????O?O???O??OO??O????O?O???", "??OO?OOOO?OO?OO??OO?OOO?O?O?OO?OO???OO??????OOOOO?", "OO??OO??OOOO??O?OO??OOOO??O?O?O?O?OOOO???O?OOOOO?O", "O?OO??O?O?O?OO?O?O?O??OOOOO?O??OOO?O????O??O?OO???", "OO?OOOOO?O????O????OOOO???O?O?????O?O??OOOOOO??OO?", "?OOOO?????OOO???O?OOO?O?OOO?OO?OOO?OOO?O??O???OOO?", "?OOOOOOOOOO??OOOO?O?OO??O?OO??O?O?O?OO?O?OO???OO?O", "OOOOOO??O?????O?O????OOOOO?OOOOO?O?O???OOO??O?OOO?", "OOO??OOO??OO??OOOOOOO??????O?O?OOOO?OO?OO?OO??O?O?", "OOOO???OOO?O???O??OOOOOO?OOOOO??OOOO??OOO???O???O?", "????????O?OO?OO?OOO?OOOOO?OO?OOO??OO??OO????OOOO??", "O?O?O??O?O?OO???OOOO?O?OOOO???O???OO???O?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 897501496;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> mask = {"???"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> mask = {"I", "??"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> mask = {"?", "O?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> mask = {"??I"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> mask = {"??O"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> mask = {"????????????????????????????????????????", "????????????????????????????????????????", "????????????????????I???????????????????", "????????????????????????????????????????", "????????????????????????????????????????", "????????????????????????????????????????"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 700931474;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 488407757;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 217604861;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 683682816;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 478552216;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 200885599;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 526176209;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 655562777;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 311237346;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 161546783;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 379642619;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 967087276;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 479089486;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 234130153;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 311241056;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 244596909;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 244873410;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 481684539;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> mask = {"?????"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> mask = {};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 489694277;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> mask = {"I"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> mask = {"?OO???I"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> mask = {"????????????OOO?????????OO"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 2096901;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> mask = {"????????????????O????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "?????????????????????????????????????????????????", "???????????????????????????????????????????IIO?"};
    IOIString* pObj = new IOIString();
    clock_t start = clock();
    int result = pObj->countIOIs(mask);
    clock_t end = clock();
    delete pObj;
    int expected = 605611739;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=13351270&rd=13906&pm=10564
********************************************************************************
#include <iostream> 
#include <sstream> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <memory> 
#include <cctype> 
#include <string> 
#include <vector> 
#include <list> 
#include <queue> 
#include <deque> 
#include <stack> 
#include <map> 
#include <set> 
#include <algorithm> 
using namespace std; 
 
typedef long long Int; 
typedef pair<int,int> PII; 
typedef vector<int> VInt; 
 
#define FOR(i, a, b) for(i = (a); i < (b); ++i) 
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i) 
#define CLEAR(a, b) memset(a, b, sizeof(a)) 
#define SIZE(a) int((a).size()) 
#define ALL(a) (a).begin(),(a).end() 
#define PB push_back 
#define MP make_pair 
 
#define MOD 1000000007 
 
int S[1 << 12]; 
int Res[2525][2525]; 
string s; 
int N; 
 
int F(int pos, int last) 
{ 
  int& res = Res[pos][last]; 
  if(res != -1) 
    return res; 
 
  res = 0; 
  if(S[N] == S[pos + 1]) 
    ++res; 
 
  int k = pos + pos - last; 
  if(k < N && S[k] == S[pos + 1] && s[k] != 'O') 
  { 
    res += F(k, pos); 
    if(res >= MOD) 
      res -= MOD; 
  } 
 
  return res; 
} 
 
class IOIString { 
  public: 
  int countIOIs(vector <string> mask) 
  { 
    s = ""; 
    int i, j; 
    FOR(i, 0, SIZE(mask)) 
      s = s + mask[i]; 
 
    N = SIZE(s); 
    S[0] = 0; 
    FOR(i, 0, N) 
    { 
      S[i + 1] = S[i]; 
      if(s[i] == 'I') 
        ++S[i + 1]; 
    } 
 
    int cnt = 0; 
    FOR(i, 0, N) 
      if(s[i] == '?') 
        ++cnt; 
 
    int res = 0; 
    if(S[N] == 0) 
    { 
      ++res; 
      res += cnt; 
    } 
 
    if(S[N] == 1) 
      ++res; 
 
    int r = 1; 
    FOR(i, 0, cnt) 
    { 
      r <<= 1; 
      r %= MOD; 
    } 
 
    CLEAR(Res, -1); 
    FOR(i, 0, N) 
      FOR(j, 0, i) 
        if((i & 1) != (j & 1)) 
          if(S[j] == 0 && S[i] == S[j + 1] && s[i] != 'O' && s[j] != 'O') 
          { 
            res += F(i, j); 
            if(res >= MOD) 
              res -= MOD; 
          } 
 
    return (r + MOD - res) % MOD; 
  } 
   
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/