/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10395
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class SquareOfDigits {
public:
    int getMax(vector<string> data);
};

int SquareOfDigits::getMax(vector<string> data) {
    int ret;
    return ret;
}


int test0() {
    vector<string> data = {"12", "34"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> data = {"1255", "3455"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> data = {"42101", "22100", "22101"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> data = {"1234567890"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> data = {"9785409507", "2055103694", "0861396761", "3073207669", "1233049493", "2300248968", "9769239548", "7984130001", "1670020095", "8894239889", "4053971072"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> data = {"00", "11", "22", "33", "45", "67", "66", "77", "88", "99"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> data = {"0110645327", "0349688919", "3339279450", "5426607099", "8217038082", "7986163000", "2037506149", "4020201000", "7169012062", "7910822308"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> data = {"37743084610", "88937028622", "37497409846", "56101760403", "00397005158", "06705683010", "31912430490", "05499510972", "04429846302", "34702358992"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> data = {"91928015882967780403600649522250338308189031845003", "73862842852620682209955047510069633978905085455807", "16049714109549750811310422054735579692793373443189", "78707894183584704812553859001694058900029062962552", "02512303923932930087052400659566666987204697913046", "94917300044670067760332751140500050530025804282500", "01555427387009002620907054794524672459555010800490", "19745598494314030239977229669685699500858758062301", "95403133988410004587859030829066174539730240563773", "24591017787480701787396906547522968905811766624745", "63416698301657431661645791104503530300625431442915", "06320341264074434149273064835874748021068200440739", "49785305203284905241459390780217699772970340107068", "16945117053130217728743694990002876131140795300068", "62052597264694062003641830696410760473200578276424", "08699933409028606061026103207155223058340257051121", "01748637540096416068409833450016410704697815019000", "66379438095812307677032690142230857456217010201084", "63328697574020556873770424165108601818263054253120", "63436159542037487094988065607702051603439751389980", "80496950371380418132327200832505105669742007790101", "79220874260898567429197607252869723092053067435423", "69409797123349896218106053082697860005350973955866", "06306801283329078640030617588451109199506205406718", "98918735760359021890445007361005090158578013306000", "40674834050979266875441809127047714685139674703052", "51475266768425767346191189021446837944134889956234", "08741429799075404884003252185481601150750588067032", "98036190507606186184718925926279088998904559855340", "28880504407025500346305919620689979309548035401169", "79508421024054840878002057532207391637020657320046", "40400083808705374891483091639888200099727225860797", "00800627293844918290209572898274264587350018031053", "08879010623400028610792086245741187825091902105153", "45360092920348231810061780503113120638542300920406", "87249960279995990293133440134134734809055814439230", "91050602416386593291809523264193510123605200235896", "90640427331312193635086092273292291418479665710070", "96546191800666827314409640631697702502462886215839", "05090812308937930771277590635716667380897660764525", "19545804411505214428571922870063762301123586072040", "23545054125579400098006287301995680045410094030600", "60421146582404288271865102554854095912270135028409", "46766270966619092065015186655481616806920622857120", "06001747437956962096282744899728008070500010295669", "72277285226008160053030267300983934043491857859604", "07073652361191437268998010926359002705310920302715", "49304473864475956888051489988001360630570479020494", "73797300060400371445501080992925879208380118623592", "62715490632850106697260537575038880626940624320993"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 900;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> data = {"1"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> data = {"02465304341843320283050163619607006370309144102268"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> data = {"0", "0", "1", "2", "3", "5", "3", "0", "0", "4", "0", "8", "8", "0", "4", "3", "2", "3", "0", "2", "3", "8", "0", "0", "4", "5", "8", "0", "6", "1", "3", "8", "1", "8", "0", "2", "0", "4", "2", "5", "6", "5", "5", "0", "8", "0", "4", "3", "4", "1"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> data = {"82", "60", "33", "07", "94", "38", "93", "99", "61", "00", "00", "93", "22", "02", "54", "42", "53", "44", "40", "25", "95", "31", "71", "21", "09", "68", "78", "43", "30", "93", "86", "16", "02", "93", "26", "44", "34", "16", "77", "67", "51", "16", "79", "47", "70", "56", "06", "98", "73", "08"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> data = {"3014021193668366253028600519327210559280520722000", "2620330697006998848208602768806208533749142202001", "0661705219550240020830038037171827412591887061952"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> data = {"42285046020041363001038495403460225420425676687404", "44686022929091445980770093158476291438226889306263", "56061601800215399517040565960040848413017100359950", "61790926909034200081001285326023844937347739059062"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> data = {"57480", "42405", "08890", "31867", "79910", "39715", "67469", "96777", "40873", "07981", "10592", "30300", "30945", "31473", "73596", "25040", "66911", "38238", "75625", "83956", "90660", "68057", "01354", "31026", "96758", "30310", "60653", "77386", "38040", "48964", "70040", "53251", "19515", "20367", "04855", "89109", "41369", "77479", "00273", "38030", "52737", "70958", "87270", "26968", "04252", "60864", "05278", "83895", "00503"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> data = {"483539", "808700", "722041", "569015", "005814", "400010", "902012", "935424", "912007", "098957", "410079", "948704", "910287", "031807", "009290", "476130", "691130", "085372", "647056", "692029", "020133", "600963", "535017", "768109", "714505", "265259", "067171", "963502", "004003", "812260", "181101", "337041", "636084", "483070", "424890", "703756", "000813", "791153", "233390", "280720", "003594", "767413", "824307", "144974", "996044", "257004", "367127", "816991", "788061"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> data = {"2675015", "5001444", "1974603", "5448589", "6529576", "0087721", "2010700", "8597736", "2600124", "8098061", "0221502", "4088052", "1009655", "7972138", "4030002", "4829887", "2506112", "1105479", "8255613", "8097963", "3825950", "0150189", "1093605", "6249048", "6709053", "2177484", "2507797", "3073086", "5349755", "5771600", "5480859", "7010099", "8882205", "5601035", "0431946", "0413605", "5804978", "1115204", "0894964", "8078865", "4033058", "0105597", "1844309", "0072340", "0702922", "5240779", "3303104", "6754448", "3374103"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> data = {"79400542030899800719649240030209704814486486325942", "25425108421287176403342356055023002354485941369409", "99682210586321623300432008096461117074989106581335", "84386883426316456315293543554163738492556583520093", "79505907237036350009176991868858991177002248433510", "85569082330723763794354964004901943700595025127358", "55869579567222674506550400028292138173328022732870", "84514869098181505153844130882543409653316738708302"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 64;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> data = {"09620528836095530619286761832209644273236119153052", "40892220087728637870173578020744799458089577400070", "09023010869215958632400017385407599036013200740898", "29003631551900586375659050265037944229033917707158", "47098928529557735799221567592598831705417497065310", "57206005600407455735193311687087808026700119679802", "51996888180234985062274057802800606927602293078170", "00175299147468536854681596049133595858718333242094", "28728140689470844894271791507694229016139895038129", "19499458112939234024689991132340516900079382037092", "47603997757416300647738386679986023045815230762087", "02564035057109903040004481980038855538042780290544"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 121;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> data = {"68562568052063000036068689028587057679995404718400", "70907738048418321055080803683777346537554604398064", "00437098994325800589615672110681956388935809603202", "53594101249550197262037593389097356061218000472898", "98105712800282706046770440115597607809009273167316", "93713509283879007043207022598867072904374866196607", "35783661136308295900099958055330613089098204883805", "56874988172916290498048554900881715112465789800610", "12719285830557630780909290090003260624239401774610", "15136536800002781164464800540372145767483652007626", "80639028417536351382200308630839414008608188198308", "16733809199073185023942539587736312411448787031076", "19358148452425764990453020054533099013860057116045", "05998025684892002705885870059183014808900908379436", "81995860628144385170980031411701476409489783248305", "64550002355565149729010423091020147377046188982852", "27630126717701153385303413972476997074207059620809", "34843630813428717200354890164088011547938447760896", "16276973355900754257195666995278500834156242533064", "41620790107146907495146000194670818400062977449476", "42283450367674391863666876908037956378913057999200", "03345037198749642562508809775102613040292970095908", "56041008512444684016517224170160776417478009056644", "79034409774050307407025932080133552697293370963047", "65116400585537233784157320070391629621793440125249", "04611890171831628871531331166163740755400257778562", "51925952022332005789748035000216808633760900040845", "01353107236580543559173604160709070372136101300609", "84780093207520251454358634830490148464592049237606", "09312790667965076291093010209428858070622628000050", "61080609932916488039669230800738833613077075859070", "31150400039059337422293517202414103110025757355086", "36414116010439564339967700911473851760070420025070", "09923277633316619283902800500087197945790467480312", "61099569850497538351746900008047493896289986485342", "86310060701749066234391507860764193951043558449409", "40666257652415654450730726161129780658780050100710", "07678006929466507909623251140514044806076339530374", "47029047209040574349962016781295742006012449042104", "85430190997940696265086614312703006790880118137573", "55341565672528031997800859787044907923200802338835", "08865509135973352511006329109359631584849767965900", "94572047831762466221064067546943760870794382579703", "49580940640074752794949248218177585735428003138497", "09674989346624001630270406507564886830302700088626", "81445380587510618408139483060080427766608555818079", "60080043669607030954042813071102554883836030000644", "03467232106002066209351884987266994684352239071928", "87110910516740094027230200570683635027061188683168", "46180018409003798866820183009628020490010463510604"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2025;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> data = {"40386991854183506606086505909700020864000682015328", "28804029031944079886986510919670000836111342260035", "66963754304941953030151230456204374001001759753786", "03070089773119579263436302657308825312341341010030", "10840332746756530525878043764955729874782001466891", "60664691386552194857083468082738155430646749500459", "11611206208660808144550593993194093204879136048314", "05760730775336330257577057435068808346067880872917", "82472850412660460073010883502859227000220397946346", "00242930987346676606071880862395023162677770306877", "05307207550008230906504018009611204845873564238796", "01008420063140405842358800098688700688000919020618", "03700420897855608544380599070601071509940049724003", "20485578038621093445410805044734191043210952949135", "70360023063112019009608695813354202066830770015494", "00018928955768728020473230651682149501293641350265", "31829802422670057379040337343525096253118803046870", "56769810419897704237355568440019980150227900835247", "13439372407273116060393040347822000343701375181004", "21627750046926748540752163037740492924652329290276", "66980701218393342032125320347765843592287315205003", "52795656651290082295788585207334387774088480677033", "20646081214257080506793244168181902182800830704017", "70977023108733162603901852432504286728009060944001", "43914500851027954300940926395404059618500467890672", "23510675888358363456104017082254091051996790501875", "83909866051835299686504055016098206910002502833401", "90496081400739115981956800821526512163282285090500", "26731043494312592005862427090500179307349500468448", "82101081232054416870420400000969135293118759878339", "40997665581643533752238910054473404421687510633841", "89984050949609595599442368990140850272723933005175", "03509191104711291841200114061000338259253050029409", "15906642678795094620720890570503750479990695576500", "34778015794017016420369710521099110314272754776543", "30010887476519703339058089543065230657856321048980", "16903502040404228200140901085465162044975806764483", "24112880183827865700332031142055172023668025889909", "03625623885930241772688486379057632906468651675962", "99423010933854616048906933940082704362007108738821", "60746884887080514335050573104010132610388020801509", "24093246515360524652040352566300303037542080640864", "46273221016608054097992107681221920920305739379246", "82664708105045805600641360122831398671692120833973", "05732002341059384869306886434300063700408102793020", "30525852001009010281668997493860737520075001219419", "09656092669006420859880897884974135182071683420441", "98239736261709132632971207740687171822654766240241", "06450020730392404285468485422004684171036202123496", "33090950148880200900168573950355256305337737004094"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1764;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> data = {"65200400932868582016270130658406432944200082631072", "47176521996165750182500890020025549940742720508834", "28270576502766443545690265419040910273542300489043", "50430486717683108499196026058382577450670853470394", "02650148897397137468854160921517037691515576203140", "85335299378344256574131920506992506206205567442492", "97007560047657346708009892860030062807424858160260", "05278084038877040504114978641176030009015668923464", "86570356160011085515558920190041216291420505205087", "46908815340242200099982218023718517634818473760058", "66821880024100901513574349603612610713065038362598", "84102260977891495402753047635267002801056986230551", "50018664541956854481096748107036571001232648283898", "38536110357294435470793168959451749424085054790723", "35116686129752191530820768690443629996482013500732", "95673709184424830587506067466985683645918804079577", "47968242839911276988301570197916620509035400382805", "06491170295043761170208428049259600817000589150830", "28640183837111209973642032407393090002407400052354", "81548339373534092245203748310800139108151607282080", "52240301655061513280576003261229076478579301439633", "96502326254887290540783032082323018055352885136050", "42244532607024889235297006807096989530030872550148", "00440230073245901077231126203081285806616264501052", "62949099260042082347910013182057516776614197540388", "27800215062314989530032058721032655530343553089804", "96935027809295616182705610731680576501605847269243", "02305683430402587949238025550308722686176819327437", "09064000322766237166915061804551131013089028583210", "20779574006918403239509980161011519055359286738924", "67209690847713115215704872574892547003380891880631", "04292767246744902621527866775754442592330370806700", "06809500805036649816662087698098150280207847028413", "80005340267490869870930933900407803561004465438252", "68764865403184620698359444569953193605900216912803", "08177360310703504322809162507578703880602714738005", "66218624238360400873420062069012786253130567046615", "50141027257540136379530974065612280188075901692870", "29068706225791099661263090660000298813402016005659", "95651230058480091935893584310468920622914173841806", "58608525764058170002049731549620896421488539604521", "22388443082041059630794327076421618800476765000078", "23263877005683073938700511600849515023972840862201", "73379421808235603155501607025026520221149420310018", "03012804866252463549052803301488914971403273069197", "25385858042086858703917973024751228446193279104025", "55095703948095708466156912205911597680078005799705", "91948083922007678092306670076550490590492207700630", "77059550806130848907980370895041625029001714462801", "50110757834822909607205059256848251464734608679525"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1681;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> data = {"89277272272055581209006123963803944097556574457818", "41304800579247309692120881040500000210773798319984", "43188876572770971618106547340962714447328590943979", "10326080182783170004186307396303815066800715320313", "66638155983693398970604606369144430051150704545326", "06926508943407333500769526242728540347531583039223", "69771040514253529513366232511368587024200530709411", "23607380550318077506204448402495259190361405540370", "60695026906145323611465390103076008010562008398581", "35902469836007106555303160789860631501822256808045", "38773302688024040459671200173546091858982782637071", "78712769891963270893244352064443330789319600795924", "73386562230105441009192000035743830768050104005403", "17708080608320002408500436700085090457632693405776", "26407901606331362734300822069095215414900767427831", "41402626162280722070034170616439662381544110814955", "22052130108490801109992103067895278328633885687947", "07917910763198982361917563574609072333264919660896", "76060726762440701409905831330578085157560354406801", "40970861690030009604818805729592008264460005905955", "90035578298549790877789013640550708002408201755101", "48380341161080509069007772858190968332489320782820", "36016580409039904099872990021241419079042345642031", "91859556002272284228473948003590426569740038779730", "38397386360570456295982989505690831029071643370012", "18819322634060303322510854499002044952844350060729", "96157131806372953339052236071765936650000614710606", "33692784198984864201683065481273746300229840554157", "06679734263796001931790938000001793560214329331614", "45096702872316647594458122430820716350120275747610", "63000918020740667171508811043141919039937536424200", "22550150661333675111977180207770992642770363168412", "92062665882749567223525391515465499674827820941446", "22029762499579805117342087414472492097831052210290", "36506227146046269577139875667006010078767961920922", "56644266726028687408140860283099240111080606008524", "89321085477416321390906676746501938359047204270016", "28813717067311951290086560594604195780311300848046", "01663157071498505039487198865973070089910400084088", "55665561969294129181821979073190220156864100343027", "60084680006800238280000000464779357614302442095831", "07078770615011580531390962001479842398881676015487", "64391106702987803088911071206095800909011850209660", "56704066603563032720450877819906667364327287258126", "44308145820506449865036735516310846905010204480091", "87200660057390541392171784125223268449667996022797", "51342431459874959650413090010079107421580090880636", "30654104840086508133021881920770763049316877393555", "00497825152877016690395436886908470826681475020068", "31845203488284110144861382910937302408744544000070"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2116;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> data = {"57604874420995018776283902206821501712533391280729", "37700460635835740802212359179697085349062211227050", "09075759401383288236193411575299145200720000456992", "33158591338868386271087934779490091346049960626439", "20485989533500785994756817957893018157038423900509", "73196800815708973507824861272940979011132299913439", "30002695981910963557257010076104668940630100091987", "00813171007736063534073291905010567128263669638350", "40082223619098053561141993258993802705561695522737", "21987206197537805092306510081345025180853030493674", "76859700018760107019708633597424000664633048124500", "09366126404835957801206580951572102226020769253546", "17200098345427013133240155720783993191562626511485", "36098094323691247282750464114086510554684150406440", "96736539048898950844393510280563700574019862910782", "91197051086525550159040166365180566260686589750269", "91029331940249251306218781060830520770954000627697", "90146129737580354100300328492594420507744975809780", "95280836924252200626424092504543409009226907181782", "96397412930995035402216032054735316068409061030232", "97906410671116616808100107913705109470853638047756", "59593949125228637366051878285578838414000884948249", "05558984752038000851868780745321530239878081934540", "63341905136419410607060712737808518526949669079396", "73920809697390070275207203706649006145275608007887", "42467976201750071713896743063041680643909346333712", "54196789050660925102530720540520988602007208896030", "01989752100576731086268088190224718072282600657404", "02725390510900034990060338094618906303660050886011", "20868457390062646200514580081150956687654816842185", "50841230673521964519002669193280116817732015068064", "10133238617902712582602706540562908602794008002976", "90472689512410202473989284619015837047119970024128", "07963535042786652807933216898573263486966001754445", "40190031672500559651783687680534072473800053057180", "37096604287500520062800732645931748007911005845421", "82289484325625418756900606844903925148055005892013", "79639788501090659053415221219699852727257622520357", "51321393757051012404744627861664544420042268795772", "36382741671418563100009841430029110830707928006061", "97513047303206885006870816691200582673040649484778", "00246404362816787960000666838201538003827817794538", "00880450519409463786104492949410796475059531306000", "23358151462013646081581123203001880560700029214805", "46598530206417881207295902885996619874251891198939", "37148082454120023979410060707628179437871787612156", "42431199501580574872334032947549393396353302769789", "64725009784702493855067063438400036995572407922773", "87080073426421041328495250179025661800600691208832", "86770052244305767761504068228810052321001797840540"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1936;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> data = {"01824907709162502415051080885827155030805803613240", "06872530205249956960629386082718070401078695080960", "22120721976560202168434096338983806073900897979094", "14435079229691026752547307679702102958606908939034", "04461035429530783484701246476307471632239111450200", "51090286927574104314048910100086556070855024045064", "24438030201411028379536481845383386730446940908841", "60365410784803660085904845163320327332766297625720", "40790401208510870318706980007071499109035334905270", "28994620704567966040200503968000156083555480940453", "20103494561036108632089164665024625491130432797977", "25439031300005179365406567437697740907409094101334", "61250602391313167140683906773467921070972720790942", "28905762550343175849654020358230602982678819088223", "40460511790394401300740160735886619809091076906097", "07858057664762492735575748507214636325683779005278", "86066468004639225614306006211614152788467664852347", "00486881690601700434606855879009891523889061310646", "70500445803332180520225305128022198781164540796210", "08642834001507162460003613360872206610832630675003", "43249993208073965206506901735973272007459903568267", "36260248372010065309038377800140253287906035306247", "05060886337138425818022884543158161470143316313023", "79997053073604371820403000025930014489189689577007", "70372627315879423603138671012214923573336700069301", "02734363956635804836975665807934639245896590008916", "01667438165891327608604944427159560925898847370743", "20184507867019053004193510032090729034961530705926", "87371504776814984763473079839966100020481163662916", "56341236704060900696240212825604791932073383055941", "63299724230692947822547009841729454086766519028039", "77481476737319771094664097954131317448620093334422", "11432020654086028050696207014910679208498103230192", "07400518581102948493956972370955991516378743856024", "18988082141908519089874045536583300208436087087929", "58049033224156580008800067291163266420691072671399", "93960904636440698964151476699784925917320600655419", "25209325900400800017946436661754230883002160381020", "85670402014591320657477400370570486227072441220301", "29110332950379745771312760238706300669148214101857", "83605776280185149178145447827870413010377455744280", "75890053650011557012209058000351879316406206975505", "03905976625952324846310840619392368195806892131040", "32097412028296176828268014047102860196008016331933", "21090693414988017785993008819247117413757069781698", "09722005352171264102630953086841918345109155460008", "31406315031003893478357608607687158305490970787838", "46717017692282753029429909295303310147689445705407", "75324308650198692836180490605248890343010740038206", "26064110997443065449105625967948106003985600570626"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1936;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> data = {"62700598119808150308695900700572908176207602001214", "39542728601129546500001533707720564003340047624374", "87479312585202580157003563960122470924960402042210", "75386792435800106300408662120852605063957106541442", "01084460153869845304276839729038756585792226718257", "46723076323857400870047139505797852699921475758304", "33203923151510793109288861818936967919948946541776", "57048312373847917064095177296607268941100396328058", "80875971080150087760378343767293876003371637709489", "07979209863058094279890620655360505008710169877508", "21899223333497228673804130753228936511782043110650", "00602220405997291109184358088898658857856443005986", "76705990269700104613204284605914068206981118702060", "02409875146120118219404228709342108630559423769242", "63457150326197076371301724549570761958781045285007", "38158403834430934929307797721832131029079700603980", "13268095082039804206017905566750068932637175002160", "91521332051081303132024043435682530456490555132827", "57004515109107143489046000060305170010754981189166", "70502648019764503802806192606284969095584850978534", "06951239861003936434311704710865458740022855123347", "20552910960201887083109520030759874676405901113741", "88235252839079094088780460672080270106281025393504", "20340204062080431131050288880460000628301223937537", "46161803935458476031827463084087060037450624909022", "00445472662065187390070439085041886910745902071340", "01889250359602661168098550428016665075382882781303", "29695605182151769442348061169509812445079590531200", "07728639030840273759712982570658615775580571712900", "57315755804639803123304983442923277985214486663802", "09194220595026296005604604005485975000596209134420", "50350000903693187029357939840717392701941526040130", "23106991411914387794221006306578496026889562514905", "72599170397639567801380060665710697826153826530351", "07005490791130078123503523040381233544407131716336", "02194587638260049449039901008442938042742042110602", "92429498672038458207957006350623304995444425379975", "12386698469390159039311698117840415140510882558814", "63690443501096752011722733898737002525806106929005", "75901417423854998042502018242000088839504104885289", "65301688974914704712061072055125006660030872884243", "38372990662343820045944804907207471966151438107095", "32700028520022186202078136231230890855050014326882", "94601437660488190926827064586919132868948091908574", "66032806726511776144469602612730303552360897365181", "00602341590516001011655123456806676319732598004817", "21890225078014643524702095507377602572615435999722", "00643085410717327932022698522374220828110155961202", "20079064222588090008024441827830880006830673141024", "00992418900314871094614112696688872103244465373248"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1600;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> data = {"59949039348487409831163673453894723417719402181807", "58107848050826604428199042703145958895651022492246", "06906625711920569048487433189513160625304328090365", "43841252354639693127880514391130677998723415021516", "25304508153365219053545693380333583443899552896542", "04100446333103593034770008238244201549324930036201", "61428360730783508518907342700396971094045082479123", "91366773660202895084768376901439010500990094382529", "32500641123660005976927606304117801900289170523739", "91650721227274597504192562378847230029551971108361", "84151629705999977607798004709040050746057152840956", "74841440422474726518807732903648909038738233096329", "20710900127480801542849130431329459988300305392008", "19494728806888307226027400451380707699090055179714", "54530145656701617550509890050275014318406035070284", "38122809003483438460101260030467667802887578307127", "88955500045612061078988514060530498490900075700278", "93804883977187982735969131802440925052705619428930", "82343653076122197610067219502857568709624611123436", "36084442895265308704069635571441626001243950949574", "62066862721469381449932395935533433168544950791656", "00880914831585710732300490122086357710024886114542", "66656449108134799012357077489070008600435546768906", "87050224757193108057532726302434311064801000004446", "00558108407990393227338005241810150349123083088180", "70587100715941961998957970889065703720135002604057", "10760865118000357132592206008193449001061033465815", "55201717182252941108047260875429595405832701210235", "05243561970205052071365093031132396277379038000017", "53434585934094630068890401260698562176095058280992", "65374056420036890057796417703217057630807880399251", "65093062521172907815285616100308963172070810873951", "71250925800237252486240049052391209474647828566672", "19730835230513211066550750006198345016523359178574", "91880592622080810309890062054364786991183393388054", "91201203140024908626924425072906003214404635774798", "89865554084076831041175537728922817332310390064856", "69439400518501286828022674748095498529620150490076", "05441910045232269531703552785530772159465066278109", "50514150005447076352116783008000534056749008604003", "83915945035279604821095318507830021700836892440327", "62895496427090620926360928492761261003139539260204", "00226318532457569897349627282470967748960853069068", "38608170400706903689344016361769259758361976936619", "27050577784493003450023843269900059112002305005080", "80020889707163026816503013452724995966987695074167", "07807451093154900046000626195524252973904216879236", "66736741140016063279839034640853660919362040171049", "56430094518095037654863608659633951879700801873274", "18217302187027474237938968918644752714519720818030"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1681;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> data = {"15755679537741832078919806130646440019379070199071", "60082998538953775140013037184179809036344511022205", "89898000460513955700166988326406068580649414021427", "61176869669004290524660805219206147274959682553767", "06226984062875290021358032868477327021568677822694", "34848111940233498231086802578000094115959019090436", "04094020158340452745211994949047003783281665529109", "36788595885645214200900833748796587744401960989501", "08818979809373084823804425378925955222776077494306", "01952647760914996019010109090839929095130302270062", "02447954374944020144662799004890608132320068507233", "94008054663744231139094606501489020559934206708977", "74230798007047920200750685827911320749084401909380", "45805533885671132752270226190900570435423599103411", "08297544657230834633666070565351596105772705006977", "64683469506780300880503970991009993124431980222399", "43001690255623708893269052205502267180330209332072", "95275400676440140967096071026006855888070065087082", "60573201706029045288334370050929666821077574979880", "19700630462375754908237343297340057180386036477918", "14098098187611705186476379930163284750102509008483", "79708750600085447227053575898000440705512302113500", "50406483105381176060744591780330034060320739633125", "08050819653925701130167600663636475096300336182431", "21906120990113832007220024073050005200300843021903", "37938557795564589103034071668112335870910850020539", "01915378033624908336086255024958301679332840469430", "04942849474001251722808503120367976941100213275088", "33609202798388580163337502873537454728960904078300", "30072794713490018711453614097995527254494395849544", "20294924806946306294693530566002762417348032085494", "72056676215809120794419702180430150712705110042650", "26763217485664581010660119714605273195087806683416", "94849360506420280041606362909407106172333000697290", "00624855615091808036559267085590108062406404809793", "78990303877042111137987203832078885667214080706670", "29702600348788724140148208247350510304049406531356", "91615947630897918034078778010002394910752500579022", "24794998475889032950553455028050031723902075093057", "67474912773013689098263494849748297197826567905001", "80717425881213721140508393057082009059646092268132", "82309308887401420403931832118210839890234535532579", "05135600686960602429504741056524846064773348520067", "88608949857023421936630888238748901955567760034809", "38915888687642510898009955590460419224840580450104", "63887118376168349298414911977966265040039277664046", "48662617050114590827952230514643397234949869779754", "03004015678654018948283212331038369579188300044300", "90421507976515870353746017311672516482025174259130", "71462136966314552089257600523554367055284818908792"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2209;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> data = {"30002130078894524080896566760214902944044254105006", "29053719080987229854989262362770984601427250840588", "03967150076045580021410876334571020410000461994917", "25520699304636303017143343790000212082375911378016", "10965790667914705633900643900990566081905562013513", "05326935407059904805398051114140020004023843054085", "11373785000140036628384003372169777156503336739767", "00744200186393121790735115080540202046927668008070", "29395529103006385375316295801028388307266885157673", "72035864577175338903060399070071584050100241796451", "07835054261404000292240267249080805532511090000768", "12259295180070674099885231102184609672972205504048", "03460089695532815709402234850973553183610410780123", "80930828213860377176340504887218058172522811192300", "18790667468071894070655720005347133290906825900667", "94470829645637307040208541946010004413166761506436", "50002090162320301804068982099925409126090515023468", "02206628370117598255214258517730500870418407529133", "30160090275351900128058362357024251080437262393789", "54717515336470444809503072831159187731009680076073", "02695964337107799559320554711486231507270000739046", "30563105298805133050672966757814408451110368180323", "48410522406045480511360579579305365997447542848758", "48245261067495809649654259411676194096061587147942", "04103024300064025020582117372514205954213901570004", "13220066849580179981580400213163920378246393347510", "30754979342216288960893177040175001546816415307574", "01281836600197673064360780157202841413800072937266", "36678403610587775808995888872390754475810959919739", "73600910533743972352323476283090872473836704576649", "11825629877602510043530027928174121485944368628945", "52117996071489656761400840364841087800737094556572", "36310882178655364496954619834670004442821418282013", "00800852567882609902674060772812964660557785517676", "50258580255698136475970380483415493200452655991309", "80278320402657635476830914634009052613374990070418", "57396402938924075026947258300832656801737222470030", "01377840125046622054354380177835334499645053683320", "91203033663320649011054370500087861898060005384929", "26507697324189905125878613665050746480072850506805", "50766207950724404339910924095092160018663301254003", "22013000885306878677381883030679290771059441065209", "19462365605625002005200817810140703700390564073086", "79076511727477261009023114906430857150868972064015", "98714913068398760321710970010704803300077058043467", "38830969000881641086001290454138036580780653583961", "45935069996453832932635245133900032657331431900525", "93787105368055215330071134340047236305750348065755", "04038193894894656109617550603737023161082774331117", "00710706597391861582400133091654144530921077808020"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1849;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> data = {"60426508130252198870217772402929991509355878343042", "12725852958899709445400803639407861036918029755430", "03725310008900007686068574066009789634867718838809", "96179841423640304256320133156532100136023228361812", "34472608643983818927407801617614410940542005044503", "40837221619154575210763018083590569162124412194376", "75680031649130901093013145165371918487000720722855", "20603166763342466275594158266609470752829737860307", "49001076401101754407606218745439149711317736834834", "16717090479454600024346960694080247480783305569496", "83736014155035311489625635913161268051780160061106", "94022933707718009089946003126904051606868970281397", "00867781920398380248022049700936018359059060815160", "99047550545258092595750053357571912360157818980304", "20030125557900224028648896999699551492293033520638", "00936678184727103943709586427840636426502069323229", "05607166742512042523655207047619088757188670785055", "93505435838925090062087232808598960320913233300837", "65017922872088680629924738005047901144470475720615", "09673571601881208523360864421299007000045201257848", "87741033078170074064404146012806007723021240092271", "40110903360054278880223061207740055644091051371006", "49571101670414005923968007281693221678449274208000", "78032851364143207935841570604449430767376061224600", "76998947345518665942992295691914173205204785671818", "16469781849806930651526642543711710005858943030388", "02832458195662200934538877507043083423940219566057", "43403464008595404635921614476729999107741600366740", "91008439181975784838739736055740552887241222254368", "80510205930813064133124925194668332011070680853290", "22511712932555035702794531533328570776135054956023", "10547605008326052042909615670076315442220106077065", "17314700708812108059905380817459738081138600057264", "02807446526049325481057534303011719200723507055093", "00890370136988887440031053555049593903113277500230", "05997706072406051661497715476619928418049012868079", "95106837006202011983055000062253662241629592013140", "50689477841508297904365906430552956866033408018302", "55108903668502720517048019123608808619558180517795", "97924751007727581827101020343967676000900808159707", "92023827659304868389439534589179485255487449586192", "31558048940606935433632179776749753219900103650125", "04902932538090049061649972494972066588531578534966", "27057959160750051076760121272189686269398095885020", "41410911263537134482965466406463437226456799976679", "78399087341523506936021302308455099327022164837098", "08373429020643505766038738552792706641510157825750", "09373676004018014485536211103114303881376206552682", "08884569610772164302686160017171852534158362006313", "02075917289080584670141039995052956424857064717682"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1296;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> data = {"06612071462504479809393273080330630091574323857835", "48526190702500215580260457071901441182084028507000", "06523894475600901206873952960612906919000059894250", "00359210515773907655399741373329653214376711245788", "58689501617033171195917047701500810866925205000779", "14086007058239870061720557140450289913806730326971", "32981804032681321887860742600398917760903800541416", "04809313015080124085805821972636241554428405904760", "46430050680757958709531208070700201709640210716300", "18264109040036568101586118988605767097518060423336", "15719846827941279532665356191744287475020214026002", "62450864291352597143061609914086795390780912394474", "48534170034710360740111303790374447081241044960060", "80891777801810826917976200061506018938659077667348", "84906026031342697340677719102941776674881064980248", "73638498203595798066800456576490070913872288690526", "04830295379430772956063236900739445500722450870201", "01904589128573706902202012501806600260500039785081", "47008804238900420006306724742309288276661567741409", "79581779430974501031602054121593350538244900321105", "05541044738942528502200036110543204006082541486900", "97359131939889525790487094188987492928078095585063", "48959043600331659069184085051239442800223038626568", "00304238087011262820365013455482962320176118403829", "12459530657564700140928091830314339070714530050576", "06357277420255456690859498207023457977635352300550", "65245723009403640671835035187072141764019618518676", "13590605551837378930494211008688076040038826476405", "09726486480909263624380290409355548030502861784294", "30650535274718611401584750459490907111923999004688", "01566385610061092363343589764395600020000570620006", "47328929085810834671420012537800968199750537534100", "04935829774143807309223165065998613050298547992283", "83950981301319301600891353215519414871166936030511", "14731993432823049050818135030974427996460190070820", "83081842314109096190285530691447333491461720790099", "41800006603918012183962092728400985665075018863200", "14554794300061583722204919448307451323008958138750", "37870785269923485672194505904803720498887152233035", "06558097020077365069714103103930836187447294006092", "95343190326025336580505037322905089378159490958174", "52212411146850042930056234370240810603676068306321", "00264978840112396561742852915066196449086644957355", "45315532840380820161039214501290130064790560171040", "50062085922434409000168266748259218487847329080580", "11883299442820650184810000501037083127165914800971", "30056242901141928861264209800690744408930251011492", "10947390450206230562071807055039849500007698743606", "51322329563858008103936886767096906174533129322322", "99689302780300120211430930716933075343299055453374"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1369;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> data = {"90168098466452468047456154583973504818176107096185", "76500813157700562566627829878757075044220906180092", "07564308459324087172970050091379593087761300781992", "36905593177207307593705593199409245355290748635969", "94958120032401205039949204921385005030264266030581", "43054505750767036151353150111513449049963442371183", "33908832524002243400078952166205820622389872921130", "37007848892109342760423038859007600434189427566909", "73745692726850261066361566402724130073189506383158", "19492064884050268560421041300612088252170170453606", "21006005349862901420835867000883783531014903457644", "28131951832989004084404470001790021351907994944048", "04164860849537006420000630600658260753185074471829", "94084001337207946271808930703201038614626648959504", "33632944236027882266725732001596329926580632533449", "22463100265550090161215893410880385495800791017476", "00483019065158805042514012366775664580537219404906", "27273706076043998594258981631520660843760464572908", "44094050074078496819247322700201294732175030589942", "77222422622103251628410450465097310683507371428820", "40810410845290830416901259800720570507071509464100", "85642342828861073418100004106139001816988716081640", "46558148949343186063000855104860009407138750882506", "03160590435460601593915201813968973069640420453560", "97280001108375191682901869469417096983044281004582", "02150962465769997844016400000388843224090583539156", "78177496238501770073905660045061973633050138029958", "07304752310079864408130275118258410435870159295979", "14022015339627904578785899830084001508005164790424", "05947808645460044695738036767217090620188305570060", "58170137352469227010068680052291285901145930949100", "37504919533635055702269367374888628406104872907020", "78050421286298079081852351288700347061764604944690", "33101672207726028050022200796700766391006024913095", "39514822460505175570941969041939559001967444424569", "86058065770957014740230182009965617099204298816425", "25608084080976893056885070041330399234726597000870", "07429816403703005764877709406900889400754030496075", "04652626217330310445416059510369720513730222350170", "90797502765733919660558116693842243406008626864413", "75487123088030963102470408937980743420950940182945", "45062025951025608847042020639068089986820957280582", "38900098950219110291046404400452095342967887624390", "08603981300407951630009877056342414441397081160711", "80655250986061157154737134990883747059827884300252", "37089409934662509145311393595840242404750360357555", "87706887087241613577550065089779834062310483021015", "05414448653152866966330890692763901155260530501555", "59300690500205085436063697003900594246135670030893", "78004003502110076799881040187793592016034061905679"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1024;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> data = {"51451105069962454405854220573961960401620076104541", "85863153056826357622250829359744000147250531011304", "12367058918146006223040944611477444802801920858993", "62040405210202981534004014927039261051630895902195", "62544750669014753005603022113120139123345691501725", "48351508758039354464140329212670001787924717600537", "34000375946047748555345941414188455050418037760681", "93150782904934005595529892418778027478155961026020", "74827200675002590131017722527990849241317869267029", "55189707546027553406378102033550868949012246452753", "30863067998083103456035368341394607066029771200258", "33098050001769513939765863250281465116600635121791", "58301264001741430808565515501060355579126450783475", "88828684504340974516128007760756790715360771510107", "35303902211538366260082706832437060034171294977063", "54682052736918978804326666502318895467424816840385", "40536126025617745877659855115104611532630709820480", "61648464206609200093188876000222340090913087766140", "01980071652448519055436150246592546593754710025701", "50903703006942463141050815781840039999588900581493", "55000360443471685494496791577705892993702180953835", "57000080974631100992031214032702104987096110000099", "00406931411951025055616403350163407785006873616150", "91096629719705484570101553545249654050567044241256", "63505021599394514511026604801442115382646721348032", "03900325653004050718660334512268989434565662612189", "74036800879893569586919952080120896561421093150932", "03443223850160165860094968043481094509706002896833", "09185224503362804702777421952700017300078963706204", "24590308190721030715554890303118360767585464071525", "60300495255020300848431973256512479197414370205050", "38050722232446049946190023440188605689034345888306", "90005009857185940771647550160555880737401566123479", "68934180207791805071352586086350823211514591110773", "20324947070341111735930245432015856784602001594694", "48514659139690627404469911528114438368583108109062", "80976142834081001534072725283070528691608371160047", "99454749060351232429801974681508691162966106023443", "06794027152071559400090403037910012841000724119359", "60150652094730173780400267309158078547916630200780", "68293938671257400302214004107067506825572205345800", "90820084012648221180367449894203020370812980406985", "65481814403777297179601104196260175109237479970122", "09651590964445442407851277087404077818590061445205", "81217576450306230148860674812572405027490073520902", "05230873001265938004748406709900966996563830067084", "51007848010175328269090892801939633841856409101000", "01358803669618176933082068414190012630209963827000", "18876990156218575292052449779780322505919654767630", "04708085542900219910267518783123716357669860000745"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1936;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> data = {"46983300495843315768496093952964667695687920026539", "26359084721649624633948739930275082748082628759593", "56579425040625845607274449386034520871546166346004", "93543251738222011873730907025453933104092968205880", "49585755341727642045426600184683044653778366017198", "06085880740503971531287208018788201016899064393230", "25809957922125734335303510849364997317693215408900", "65669726980493411209434416464798380777957641607018", "80822621456561007347572127980030997861610720871900", "48516310016768449206288433270010099431774081219866", "47631436879660318513004211012672131168759321120105", "07994821363686867494710067570651180477107230955866", "63092065840825002908774042658964585817834660702102", "36415001591812031556323308053906714410230823346192", "00386610284530209878905323182368082193804009320836", "54998349290294434528006358981552607123777051104900", "82569823039761453412341999842257615923752822985828", "30410960696148567030263370900361604125652036614475", "05100123012206430901769004808699435009564460827804", "10025092007040015237601036147721900031218817131171", "16309189065202901362988723337914087983050268403463", "10450498931587537939207345101074499424900584396137", "51643784544023019074046186003394661698007508971927", "30475656078519845929619127660999603162109966951385", "42720010924301409373570706848387546048905108554149", "20642480799103969000030505847005330813455778828989", "72504865189180527529190630843452732082235500000219", "79203354080982776886901907790863743061108084377878", "40642456145054208957327996594371469894814883195620", "80107004249355540758408376342700090432468321418558", "80591310092707082512820475607404476738430610316681", "06396436074393630603510409918011002002030394660867", "90533020743772149396664037593686095520367345227497", "70199290004577362982017202930708009156458799106966", "34294055721190080596172064132862430352785009530052", "09453779619395485363480116589012000494669516462307", "90403172780604121042300504100449088586708846675069", "05560724076954553466915928496356108857800007079037", "53890222292870414012006707613571461403120862619331", "89686402850101940415983012064388262028604550097097", "77939740520858073849393275640467825500122517829749", "64322065850004283497304550598390195967736407581821", "07170050260927330284200055229931167596068128777093", "63435009808426130469007218101247047608733501697670", "40061811279245038012108626295508690225400039190429", "05607397875008268326884432082046588917622569956997", "20702630984005861059515901831048040936668487411930", "16800816050348290806641431946935070710201603020735", "70512508078885113431308555700583085582080790902095", "57916541241100425504227571790087040381754709336040"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1600;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> data = {"00482353923009014241840954011857074398626349031882", "92594967409289189263090920066082775611251543100008", "92527500596552010959269292406110302742000397093195", "22786908422008611301300062186233460905949369773150", "05650700538618255091414615000951493437394626969630", "57551918409580974346049662608748906234201079528074", "48402800517540029333800250593465482134066480507242", "72690155498350025455171501520829720142789106692625", "09423440181368197726030090879951506028711204379400", "70106736003809058846803807586196768606939496885951", "29296927398053490409436542541520371281032759424946", "60213607800362499082318066418444533738814156848005", "40035041037944928006004286191834264482813603166770", "60003001757149057005391000694019614409918850601017", "00488873091527908475590012270683917579587389100739", "26409179846188558027762647171257000998559936324011", "63157238644728242036095920172081045061870277174387", "79670452383219017353259035936200685358886629506853", "11100711805292000674519380506201605001063039500356", "27584379913305537154674157825740350132223395662102", "95678010034669126036132576427710416736010504100002", "36707505304171071097202435105428010044289917472714", "55081051699682605004336295415596604244210090606342", "07738926471570588956550480603552197420289280092204", "18169326442122067020579164576350267039240280360021", "99001270846022901010419904003235903887090865469804", "20038667860270575105124776771009084297453847720162", "00007030554480545202006627008398560750540479315101", "57314566223010745533901222809000055000550407318099", "52012726822691802188806660000269616003913338236100", "88425837000250420960060199920460228989996052386636", "04630675609375614748491001741378828029039860001126", "12464650456700100599402034527799087298111096195837", "36002109814448356656986918025702725500989119962641", "45486034703101535540096043913139019022060961536892", "43028089546487241609227289016742445807018075516972", "73405025583507175572156157506085700090136334580472", "89834333953508067503007544234193778820845749244293", "05833338050036687886880646064303816972847935177300", "30264844800610311013855094096060119836961309635762", "30105803810129715682650787072674789664171003999415", "58111582214468440944392309535088223800886349706700", "00482102600563870548990832523940152619300390303523", "26150001925673550732627020168797855506871038415960", "38080396327320025655360500095730885871098078974779", "29884231700554702255015800656157275062802316818602", "10889151602605902461048352906458007408928032515378", "08580313036802158695644887062462161115658360097483", "66322094000983361725117343200105390119910666107700", "18995957811830272109683296112160318044782645834735"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1156;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> data = {"66402375920010934216690501598091425390374739051025", "27649165093012065472176228757805574449069032708625", "85273089860082261653234062668343790000130372910402", "11385890292820529863043891527978012352206572820968", "65543900210963251964735210724270120375946320547158", "05799361278540805003116838336821900686915717781280", "81000984646504045095270620420005243784844556124973", "62014427068320249999615044641211041934229358085690", "81089118518520004002721064207547330309155253247194", "27003579175159986509977915871097702613227347745423", "14779385080380582303857487009592214485137906479835", "54006202068135298229012200381914393845252077089958", "15865270789337979590687369253051157932080087362066", "42036306475613009938050094290103735877562969006351", "28074820184142703544342208793092484181259232120608", "73310177005411601108203584347803524609227150726659", "00219698056232321409833759207080536046064886800590", "63621099051682771008106079060310837643132466200030", "40596289045038916749534855306740563728367807011655", "63890092050722250966404078361708072095188373650943", "90257069790925247037359943701405890985028029004442", "35585870520682160700005716075700950146237969062780", "96007076240217611170380775850015680597013278800409", "01480958951180372595026980313680076917603401708805", "18955807200160729130733347008027770659642572013429", "33303473969323806123756700523217567503882510346673", "99606439878043264210906294877799601896966494990216", "38051793503564043028382099057077621698899640356682", "49046764243435400941052783107040410470706120016607", "69041521278907620026218960615701894077488463788044", "75195437657163715504559600099004469276063471289525", "72687378032610293244097586962659626859451990019114", "14488797114892785801687140202401330705395308736340", "22550676205009530201198414730056786792181457426813", "20011332384556044377238840101473995601105883460805", "61044080285090794322380063111938110308725636503208", "05494370581008537785406024350841354509133376402460", "30770195351272031360588306611200000166039101675014", "20076088924719600268194297018682008537058500020016", "48408400144744001093889842966921531086760389003691", "18647450394917546990930500295129162786477472712609", "04317620022816680511735362633943429454180733019353", "01037210680791404658346461010724130469470086657084", "06851693110069013260066992430337630069756692040740", "46210489234999639306451880395397501684785837190400", "96474997509030605062701722189882708714011553940220", "53992398086206961770951196033830500649559463630983", "53755103012339740635054213771379040161950108030187", "43303006134483478732706213778616637367766309817301", "07304235635031268215729530206435800267062534576606"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1369;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> data = {"93125122287004610428414752306073016624154957395217", "58833084260970194278081880743979160323980726819907", "08495121145249792508082031468002019072181736221585", "64098234060307405969600335792587684650380067052335", "36004844765646672508928171700040861841710085593801", "09401121842738879250764597879770148209992037412930", "06252805399780065050665481479590509073034772644096", "16800605042531939933209774852445724377439700084115", "31211805907160258501717070011614188088972117107499", "82327256102350270290857734620394926028246321187580", "31209609824114422858760209208015742095493335531730", "03226400709010903049509085713001936118936861286774", "60602066646827033198631299065758132090131360000627", "38392472001812944678034427112927287086051650004908", "80936743650484056965488970410003250309275757204104", "39787397050234867618349289100646028057223026533160", "63253236590035436063973236483056510107253694626402", "50975710577688510442438405235565926088023645495804", "02193643339288990850437508884967001485492979868257", "25960920186910982662388063671721009861484966806510", "11154719715473478830505450824838059093385960962470", "75839921418875294812749778031684005681560097025800", "43407316500840056059020248332579793088999023566189", "77358201074046060651480576722243266210098982718170", "62083767150966372509222169442475669591227140156729", "49955290168570532559217164595501965883101460676379", "08348804024019782838963000007304942152450721142748", "75506650915885040700134306303549321373224025010605", "80030538493654232463340343049934685557647950426309", "07079736330805404592008731689650736254079614725570", "59650291353508700043006516831551190935677330505094", "75722238628337202003603439971928087177406300866504", "11750372195284489032081240490936440957382764070756", "82876262349921114028105708055292792042700930409647", "14782652219834071645660761568075423441526504769700", "84906088804576409300958434463858060442005448737639", "98513011672544492386075563989574004568160005606160", "12015124140345803286745639553248508426611822792919", "60849406500505219987328815392176313061899345030108", "60234206546090577074911456040025367401015115120157", "83310892142030080858675058992274920184761640940217", "10606491506063229633259706289400000421073992126083", "62800926754150407982789491722949008678910534156891", "14238050741335275330561555703217022031441627267630", "50986042240619030985265227230114950739705888075119", "40879749981319224360485378232920505127071023686056", "77729443533661993410951098227560484536385797030602", "96103480434307430694008525625255062905011250068649", "90742083199540126395208786563355485741350990747788", "09983330566675044379289300962328853778840160770597"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1681;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> data = {"00816156152607908260801522677961103520789505000128", "67497453568319562070706048458649933224794480178206", "64450493691055002607700479720833018550393141486080", "08189513430205547922905418180880648619409625296888", "56022387610174015955500300894784140070464676381800", "58217680261727462895550558080115448230146256007352", "72914399098456516184093672075428656926093630009002", "70306760710405022337380097071621754828839874141691", "64300918502304200709434006106920486506185645279111", "07897065010830305125330631157035896578942337880245", "47506093454940202925097761084248658016367418290436", "15647399092820785206305864609168030997603974706527", "50801205467605645538700903870000039202349559900907", "05924915394552406137004194701079501333925036203145", "06605301879083500929442139078501107345696600889046", "59882573005084995207418528400619463035177332019098", "66178362258166388174265839645399847508308504463148", "81821583943693949051800762981740914685270584806899", "44237387241771908102404725704420757185001846359458", "09207061452958898800001402700703008803129807017181", "15398493700352371471049989045687440010656383904106", "78675436958070593076998870173832024370450533930189", "46062013231212190142551758080887190458967038838421", "28098743600612779190406944555809173628570669754139", "04586237444030210569235502007682969681811896600586", "09560101101740060981100765508805168629927396630548", "54073086727006326599465370365111472158973509424053", "14637000908839942137835725109324533330018148021596", "73602259338567062486404479009469430307057046807368", "60198098329012278640120628552155097818036695890368", "55690434450392536520709012174057040244014997746924", "94546440900021401010342816086573591327946508492880", "96891570266897003900263007776700038813980802587658", "36793508360869400517090991034110104602227254040256", "00587289386030894710088051842549579042257801031533", "27907770597490401410960065136787614128794068681408", "07718729298775936335035931964053896145030260005070", "29749300505000706042379920713136089609111872360181", "20070400007505417029868808342215025758426438274376", "57029706995776571084800097644300090196992042091442", "04007369040334022309204834109847958771097970296729", "82025604177111450103178586300050434717857634398431", "79137919808300353341135809087093967308354100053077", "00435967337069027140687605590577634150330609145391", "70659005820049121527070190660199502800567244701714", "20904281600787270644600753004233534567630014524535", "00395741076849788300567397367572501764712771974345", "71038467555030421057303006842009003070592064470426", "25350014700345851417790358083349500944107531655101", "08700613083060240463768795443035602162703402669437"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2025;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> data = {"93282209418140520005299364354047796201772208027757", "30740313013800650641406502005909301343870770073002", "56894261407724223644024819166201972719042915502822", "75097728596551366547002809682626935307032101481334", "20014963428722900865583345675116555205036842220538", "98384995087133031380065098960617514223063652709239", "04354236957841930849055099802946796312725709650108", "03006278276705064631260254929062529020024929482101", "91014096806500505708920486899619709045457011148486", "40118401698452823974711002007545049515306503291839", "16020155857494076166691762093456355190148405020797", "92400660054867342009398982989276714038266268930068", "42790160000049530822075054131902690983997886619509", "01002292009102779023492534195130403262961200770089", "60000448941678400756356741510782153384023058615130", "07825696285074248951400197683582193846784136055087", "55755226468715985285675413584079794268306068763225", "50269100212920108860831000679419376989506781951415", "60170432945270382671204518820118025679567903344227", "50423084814728134440401464285556503081659737046099", "93304332259396551350904730563735090944969510358583", "10884101549490398988915860578016554006548302308710", "00106770828820363570230473622029090907433408879088", "51901296447141647496835574440001504000579094335417", "30864586285449213890490608244230388117576479013951", "23646415666007633456647400970437300271883171399434", "74229000760491446835024009276885020059295540041390", "79668878808060389900770508200106063765014959557431", "02791049253149980077751205407430851701801828960280", "05267046249300523253919104564699780363100969637710", "30904701074017266593747086806790751611047908377202", "17141042831432959759393372137770450060931908468741", "60978401530694328251880337814000589903108180945401", "90876254803147381030402310505173080931835870322324", "30558769682694842022116304856958619040304787997437", "49476657419704352112660824004630951005940814210574", "59077418000631797460830669991043007929361356548932", "95252638932095383425210628241183234852254040009021", "61722279073421039765858119100480619500306076004679", "17300635590129339181073937369806159970680622513252", "20320273085286161663505526256803761134700492008430", "93098220255352160213982519147500889208564281303173", "09815312004374379063722031544461091532205782055314", "44303017006281272994886486986310590056768998092996", "49309571809668451880602267099117298570956602835878", "84458287215488542036564104000808465113583199017019", "06623866743370222010410716231220814863588809136822", "19693797714387670000075185910503380459088390168078", "00021717795469791300986069634200597995691418520531", "28327099380797756080255280371470010875338778004801"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2025;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> data = {"84606071356408874760453714106348565984032859008758", "30094377088000678801013642124342491218400638000565", "79509511710078949107945870190270450000880552980963", "89704243551980069281763453555149245002564530514740", "04150990926393650061000798480861204517609810078075", "43209784544501006045846030700701057090824276031619", "03850696200974510860814097774583062281805785070304", "03129184772279080007411974097905607268545490545829", "37226552979224061567328116926851860551496195070011", "90102820647457095200614528600004142276944020978497", "02437863346811004200940473053360489564889614291100", "84296041820005380277380730387951079034782763163004", "31780901620839100017994362442079275688116395461985", "21838333301008025415071554080211105347007774286576", "50553180067950603005343763006109990817980064619008", "32575034907083140630054163639905198716694254440763", "00790475002747080755384906271052909209171754002034", "27454011142001025098266343030998797268569937043855", "71104523044840080862008108525458922004514062421021", "92777115938475700644107610566235312450940001085012", "89581858270800970332943387794231686870118267774270", "60109206140140915145740344176761647805707476487280", "70890170166982499997960319960568153352114034037302", "00704394050675551295963757949008014867904660719063", "29389289810057963111140721068600970380017007942662", "95092025708042749457739958028700805103200530571168", "39158000600656335937406004132343053222102023023605", "06776409774900714640380228387304402790829947694828", "95605011695271016270230260600412258964315960289993", "54567402174800204304493439480798459625821710138007", "20464301015475070670373069885760104010311702307670", "20007235172822999385195203378695203051558414334085", "42106033044419131886812104885870290658426910020356", "90072203384733456932800943816730638340337328846835", "36703476184376320314430887069073086700993685934947", "25309768707259030863006423309002303480496096010027", "34269868433560711895662762279649063713395320238051", "55260750605729923286132041127299588722202009434949", "30694863458991790457244081285702441442529962168174", "15756389029582079609617808200770848555030101498018", "70491830768785891109240701009356702974927827791383", "52858268128558190131354256637076610531232907240243", "91331827807940918936808050787450900050469513487306", "88734872543468654368221520039174873623493509503073", "20920170881753875360485230600209208100096704579304", "68033879449189090384856647786740208821902010459003", "40200787524027030635760908116165062624900874808978", "10466060105570548809197914530135531745089077129035", "90450698971108550845194832724856156240573524080070", "88099519072106527630167660892985078105045328686738"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2500;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> data = {"63848386600396740500077104066153301238109430082803", "15554042067581127255570625888700360106988979880335", "00011995901306974642318276460971172305409830793574", "09322357028019685401109517967932473706289443243346", "62515672667363593224329453370474818493205816680024", "08380850189281519068998181648858763131403712399703", "36273799456465824573203668864310438273482697506461", "41445380408108734886985910305395453231014843480099", "14190204791127701315430003922504859728494045644142", "02372992080840820955947565374971432829227008642511", "76372237577316401169408498235806198281460402824671", "34004825145899000817640700805779381803303999481947", "66454208102338091293910504743784095180000824010059", "67133805752085484385708486700395028339243861237007", "06262258772456858660770083109575903202412122048024", "69180483249295960787510607305067733109548750949370", "21152095493407969099169702665968290917281716360706", "41047933809835402211905479541745087653608209293465", "00700585106576055992067881759714499347249551853238", "06096045215530001612297300942199987927962004587147", "33235501185202683842099499960804087071629841635691", "53725100005000064090985465679905418838499010089357", "66500509222519252300214167276569080706040081329002", "14445790274047124018206270303362728934024940006403", "95973004759013703687242834078796417992227657621007", "02830857962010796057745985667210316750809839664080", "85827592034909392136340821940152741734961998700202", "53701713490003036944296069174029058260661967163884", "93627536630600890200207300100783149022130800598931", "90609540008022085237276508310408474566190471878008", "34699390412907809634080777080243502704248201484872", "89084716095515930775674245517356037607272901320205", "36956707550638465887022513075159489080481038000760", "50406864328187801565042481925460589913925443761615", "65530700403704609277900643058249425000089107484541", "25958847562931063456702061633829969402786373042920", "76663386005612703760093258001874365045005764020048", "37700008113224665669450612044671693299040900095179", "98832217531040795387136120948207429393150133403737", "62903395500899721200560713447805480291870743666757", "55664600191063052012953880199231170279441863135906", "85205580547041031045191943646907695083398699510250", "95870221064023411729367560080702903529418025004105", "63143918132106805417848027090859066204536020416600", "28560930361210109730505101347430809382208122802140", "71338208730465820050996903750487019632637409790283", "11700089952569395001715864801041008297459072454285", "03377007057135785405980635409797175400511886136837", "03058095097574008809732894981710001139904540053503", "01923389920593440220102949840690766690867256958841"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2401;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> data = {"29001480470622091840376754283380552408073103000690", "49730749797904812574141231048733404184041359187598", "08204907920094396389221487734400888617553162128437", "51818886008600386031863900065602754054005474734834", "04866261340604564020320531807540812937030684790640", "63015666168302132023066042777527506212250105621904", "13251195403808085764467910869383386519078356216221", "47677624082801577484304076848524404434487955750099", "04884207315377472440582100150511878321025767538649", "28001857229294771064145780992040612215079093997410", "01035400053451709478601146967250008193009590302385", "77497463846640714062713955509030140999180651888101", "36005492074080532633062767650741442174740380338580", "37039095738488875593390442254139766651030387133019", "35435509309029440737005057252498550338907323801622", "01620401598461085079078490342736944056003828282051", "44853473930678326489110745200014705017854291727744", "05013584096342508745294764190077901021278526215034", "10237781960526829407440015711349800560061136071046", "23737202293545587030927596007544786733094746950900", "68900611017059718177529373510430300161600922001795", "26901260723808104188164157952169520752229952702135", "70048070034060531730136016435573279196208719027133", "03457015357051712556396332050428900976964461046608", "49303129970643532009713110062904760003960996700443", "68211821720827677270176745837367201931526434409231", "12628827116178714995306730044221813802102206327789", "55657674784978993296109625672023317503672877202041", "00046454736739081400019372459969020727800460214390", "90053617777827109631700630002334060009401062918007", "91601701868454072589762084070805098610490535326341", "77904838400744918638695083291521043057404293895040", "73081102000071024000557701536642443808931627088830", "99850377070708006056778730559061268945969744769531", "87266452900599200407398091013263149180443013572906", "90714819709138125296528096526822896348803902178448", "19184077562793711181933787047888607245987472199960", "09562094634090299401609024415156117352823847477897", "03890271000580884750973093002996204057968777438412", "38412586709424825509877255903754036310716649312928", "68700883507101226140136135782703970589445685540960", "51602290687484053328375955120200941529585614529534", "95470554232405283693063667686455005316723061516408", "84694867911058951183112035263391139795333481424997", "22782992634177991466403180348654090581797246709453", "92408840900980634084401804634889030100224033428028", "28985053006813041808750214200540976553705404122189", "63808340518360845094969521517544509838054067641212", "49700421133410254096187500269453080105097751107096", "99537197703400000000408400942686833591043549555095"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2304;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> data = {};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2116;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> data = {};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1681;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> data = {"00000000000000000000000000000000000000000000000000", "01111111111111111111111111111111111111111111111111", "01222222222222222222222222222222222222222222222222", "01233333333333333333333333333333333333333333333333", "01234444444444444444444444444444444444444444444444", "01234555555555555555555555555555555555555555555555", "01234566666666666666666666666666666666666666666666", "01234567777777777777777777777777777777777777777777", "01234567888888888888888888888888888888888888888888", "01234567899999999999999999999999999999999999999999", "01234567890000000000000000000000000000000000000000", "01234567890111111111111111111111111111111111111111", "01234567890122222222222222222222222222222222222222", "01234567890123333333333333333333333333333333333333", "01234567890123444444444444444444444444444444444444", "01234567890123455555555555555555555555555555555555", "01234567890123456666666666666666666666666666666666", "01234567890123456777777777777777777777777777777777", "01234567890123456788888888888888888888888888888888", "01234567890123456789999999999999999999999999999999", "01234567890123456789000000000000000000000000000000", "01234567890123456789011111111111111111111111111111", "01234567890123456789012222222222222222222222222222", "01234567890123456789012333333333333333333333333333", "01234567890123456789012344444444444444444444444444", "01234567890123456789012345555555555555555555555555", "01234567890123456789012345666666666666666666666666", "01234567890123456789012345677777777777777777777777", "01234567890123456789012345678888888888888888888888", "01234567890123456789012345678999999999999999999999", "01234567890123456789012345678900000000000000000000", "01234567890123456789012345678901111111111111111111", "01234567890123456789012345678901222222222222222222", "01234567890123456789012345678901233333333333333333", "01234567890123456789012345678901234444444444444444", "01234567890123456789012345678901234555555555555555", "01234567890123456789012345678901234566666666666666", "01234567890123456789012345678901234567777777777777", "01234567890123456789012345678901234567888888888888", "01234567890123456789012345678901234567899999999999", "01234567890123456789012345678901234567890000000000", "01234567890123456789012345678901234567890111111111", "01234567890123456789012345678901234567890122222222", "01234567890123456789012345678901234567890123333333", "01234567890123456789012345678901234567890123444444", "01234567890123456789012345678901234567890123455555", "01234567890123456789012345678901234567890123456666", "01234567890123456789012345678901234567890123456777", "01234567890123456789012345678901234567890123456788", "01234567890123456789012345678901234567890123456789"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1681;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> data = {};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 676;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> data = {};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2401;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> data = {"42115", "22100", "22111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> data = {"9785409507", "2055103694", "0861396761", "3073207669", "1233049493", "2300248968", "9769239548", "7984130001", "1670020095", "8894239889", "4053971072"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> data = {"01234516", "01234516"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> data = {"111", "111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> data = {"1234561", "1234561"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> data = {"10001", "10001"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> data = {"1111111111111111111111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> data = {"12"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> data = {"11111111111", "11111111111", "11111111111", "11111111111", "11111111111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> data = {"55555555", "55555555"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> data = {"1001", "0000", "0000"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> data = {"010010", "212210", "010010"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> data = {"123456789", "123412341", "198198779"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> data = {"1234567891", "1234567891"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> data = {"1213", "0000", "0000", "0000", "0000", "1010"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> data = {"11", "00", "11"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> data = {"42114", "22106", "22111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> data = {"101", "101"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> data = {"1111111", "1111111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> data = {"12", "13", "11", "11", "13", "11", "11"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> data = {"2112", "1111", "1111", "1111", "2112"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> data = {};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 2025;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> data = {"0000000", "0000000", "0000000", "0000000"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> data = {"11", "11", "11"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> data = {"99999"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> data = {"312043", "123333"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> data = {"1212121212123333", "1212121212123333", "1212121212123333", "1212121212123333"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> data = {"11111111111111", "11111111111111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> data = {"45697", "31101", "21101"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> data = {"1212", "1212"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> data = {"222", "222"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> data = {"1555", "2555"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> data = {"121", "121"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> data = {"0101", "0101"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> data = {"110"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> data = {"01230", "12340", "23410", "41230", "10234"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> data = {"1001", "0000", "0000", "2002"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> data = {"1271", "1571", "2345"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> data = {"2285409507", "2255103694", "0860392761", "3073207669", "1233049493", "0300248968", "9769239548", "7984130001", "1670020095", "8894239889", "4053971072"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> data = {"001111", "001111"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> data = {"1234", "1234", "1244"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> data = {"1000001", "1222221"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> data = {"121", "131"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> data = {"123", "144", "144"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> data = {"1123", "1145", "1167"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> data = {"1231", "1491"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> data = {"0000", "0000"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> data = {"1221", "1221"};
    SquareOfDigits* pObj = new SquareOfDigits();
    clock_t start = clock();
    int result = pObj->getMax(data);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22780732&rd=13747&pm=10395
********************************************************************************
#include <map> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 
#include <algorithm> 
#include <vector> 
#include <set> 
#include <complex> 
using namespace std; 
 
#define pb push_back 
#define all(v) v.begin(),v.end() 
#define sz size() 
#define rep(i,m) for(int i=0;i<m;i++) 
#define mem(a,b) memset(a,b,sizeof(a)) 
#define mp make_pair 
 
typedef stringstream ss; 
typedef pair<int,int> pii; 
typedef vector<pii> vpii; 
typedef vector<string> vs; 
typedef vector<int> vi; 
typedef vector<vector<int> > vii; 
typedef long long ll; 
 
 
class SquareOfDigits { 
public: 
int getMax(vector <string> s)  
{ 
int i , a , j , res = 0; 
for(i=0;i<s.size();i++) 
{ 
for(a=0;a<s[0].size();a++) 
{ 
for(j=0;;j++) 
{ 
  if(i + j >= s.size() || a + j >= s[0].size()) break; 
  if(s[i][a] == s[i+j][a] && s[i][a] == s[i+j][a+j] && s[i][a] == s[i][a+j]) 
    if((j+1) * (j+1) > res) 
      res = (j+1) * (j+1); 
} 
} 
} 
return res; 
 
 
 
} 
 
 
 
 
 
 
 
}; 
 
 
 
// Powered by FileEdit 
// Powered by TZTester 1.01 [25-Feb-2003] 
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/