/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10107
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TeamManagement {
public:
    vector<double> getDistribution(int N, int K, vector<string> friends, string loyalty);
};

vector<double> TeamManagement::getDistribution(int N, int K, vector<string> friends, string loyalty) {
    vector<double> ret;
    return ret;
}


int test0() {
    int N = 5;
    int K = 3;
    vector<string> friends = {"0 1", "1 2", "2 3", "3 4"};
    string loyalty = "NNYNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.33333333333333337, 0.6666666666666667, 1.0, 0.6666666666666667, 0.33333333333333337};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    int N = 4;
    int K = 3;
    vector<string> friends = {"2 0", "2 1", "2 3"};
    string loyalty = "NNYN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.6666666666666667, 0.6666666666666667, 1.0, 0.6666666666666667};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    int N = 6;
    int K = 4;
    vector<string> friends = {"4 3", "3 1", "3 0", "0 2", "0 5"};
    string loyalty = "NNNNYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8571428571428572, 0.4285714285714286, 0.4285714285714286, 0.8571428571428572, 0.7142857142857143, 0.7142857142857143};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    int N = 6;
    int K = 1;
    vector<string> friends = {"3 0", "0 2", "0 4", "4 1", "2 5"};
    string loyalty = "YYYNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.33333333333333337, 0.33333333333333337, 0.33333333333333337, 0.0, 0.0, 0.0};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    int N = 7;
    int K = 7;
    vector<string> friends = {"3 1", "1 5", "5 4", "4 0", "4 6", "5 2"};
    string loyalty = "NNNNNNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    int N = 50;
    int K = 3;
    vector<string> friends = {"43 34", "16 17", "0 42", "20 44", "27 12", "18 47", "49 37", "7 27", "22 44", "17 29", "30 29", "35 41", "14 49", "23 31", "45 3", "22 39", "21 0", "7 22", "41 36", "31 49", "5 17", "28 12", "30 11", "40 28", "38 3", "25 36", "47 41", "32 19", "44 1", "21 32", "4 30", "25 29", "16 40", "31 28", "11 6", "26 23", "20 48", "23 15", "6 43", "24 42", "16 21", "27 13", "2 8", "33 18", "45 25", "2 14", "9 33", "10 34", "33 46"};
    string loyalty = "NNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    int N = 50;
    int K = 38;
    vector<string> friends = {"34 2", "39 35", "11 8", "1 10", "18 44", "6 34", "21 27", "15 45", "5 44", "41 12", "7 45", "27 8", "22 0", "40 9", "20 42", "6 8", "22 10", "4 33", "4 30", "4 11", "38 33", "36 26", "29 42", "45 1", "28 5", "28 15", "43 1", "12 43", "47 46", "25 32", "2 42", "26 40", "19 47", "20 17", "25 41", "14 28", "23 13", "48 35", "19 9", "10 49", "15 13", "31 39", "31 14", "23 11", "37 20", "47 21", "12 16", "24 26", "3 13"};
    string loyalty = "NNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.3852419663273361, 0.9999674503006778, 1.0, 0.5628683880032659, 0.9341139836220763, 0.8453373911958488, 1.0, 0.5628683880032659, 1.0, 0.9288544947066052, 0.9340814339227541, 1.0, 0.9422324211280099, 1.0, 0.942264970827332, 1.0, 0.5254172464581859, 0.5628683880032659, 0.3450593625141388, 0.9728020137413981, 1.0, 0.9988282108244025, 0.6977434920944918, 1.0, 0.40495352174184296, 0.5835347345978892, 0.744305836974831, 0.9997748645796884, 0.9989014476478774, 0.5628683880032659, 0.5223521497720165, 0.8473744598784269, 0.3168496231016066, 0.6977760417938139, 1.0, 0.513699354702211, 0.40495352174184296, 0.5628683880032659, 0.38527180355171464, 0.705606956955735, 0.8551131508922687, 0.7921023579544684, 1.0, 0.9796537254487112, 0.62840720758842, 1.0, 0.5597083546940735, 0.9958607632361997, 0.2751914329191384, 0.5223223125476378};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    int N = 50;
    int K = 40;
    vector<string> friends = {"38 28", "22 12", "42 31", "39 47", "15 14", "28 42", "1 49", "29 24", "11 12", "42 2", "46 45", "13 22", "32 18", "38 40", "4 7", "6 20", "26 18", "23 18", "45 14", "48 46", "33 43", "45 22", "41 32", "16 47", "11 7", "39 10", "38 1", "0 15", "3 46", "4 28", "27 16", "0 5", "27 20", "44 2", "23 37", "20 35", "32 39", "29 4", "12 19", "15 25", "21 35", "48 33", "35 0", "8 14", "10 34", "23 36", "44 9", "33 17", "5 30"};
    string loyalty = "NNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 0.7918701829409691, 0.9015516841561325, 0.6153099625134435, 1.0, 0.8175666422599299, 0.6174873964463548, 1.0, 0.6174873964463548, 0.43769891338286504, 0.8175657292897275, 1.0, 1.0, 0.6174873964463548, 1.0, 1.0, 1.0, 0.5471959946171276, 0.990832866196913, 0.6174873964463548, 1.0, 0.6174873964463548, 1.0, 0.9222258943912589, 0.4978234790372912, 0.6174873964463548, 0.6105990362686542, 1.0, 0.9999990870297976, 0.8175666422599299, 0.4978234790372912, 0.609482473711023, 0.9994175250108187, 0.8988082086976845, 0.49782256606708875, 1.0, 0.5638275727956791, 0.5638275727956791, 0.9717563538161241, 0.9999990870297976, 0.5973472737796783, 0.6170053481794462, 0.9893492896178855, 0.5471959946171276, 0.7297681238279745, 1.0, 0.9972410040481099, 1.0, 0.9669221765940004, 0.4796754573524229};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    int N = 50;
    int K = 31;
    vector<string> friends = {"25 18", "37 25", "24 36", "46 36", "43 34", "31 22", "31 47", "37 33", "41 27", "16 40", "19 39", "12 14", "6 22", "40 49", "14 27", "38 40", "3 39", "45 8", "33 4", "12 7", "49 37", "16 0", "17 25", "2 47", "16 44", "9 2", "27 48", "31 20", "9 30", "8 33", "18 9", "23 20", "21 24", "17 21", "41 18", "42 3", "14 42", "26 6", "45 10", "11 47", "5 22", "29 1", "12 13", "45 43", "35 49", "6 15", "48 29", "28 30", "32 4"};
    string loyalty = "NNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.3197545309774955, 0.21728227651258858, 1.0, 0.5360687863344133, 0.6246512586262987, 0.4358971900256634, 0.7095845320556733, 0.3587277315959626, 0.8403359143332851, 1.0, 0.33051292024081014, 0.484356249560017, 0.7551722710468591, 0.3587277315959626, 0.9639584604557861, 0.33652919861927766, 0.6786279685845679, 0.8195043984271235, 1.0, 0.15213134215817503, 1.0, 0.6306361973490862, 0.9076759470247557, 0.484356249560017, 0.4452492707098409, 1.0, 0.33652919861927766, 0.995206435949111, 0.30949196313240324, 0.4633402038901868, 0.648121386438302, 1.0, 0.2964822639767263, 0.9687997356242778, 0.20389860639099777, 0.4640233616084073, 0.27386625872101933, 0.9999508856142327, 0.41635083388041305, 0.33305657766750174, 0.8719849906437095, 0.9982896499851605, 0.7506680141159422, 0.44191112962385626, 0.3197545309774955, 0.7040460664873134, 0.12410503649315796, 1.0, 0.7273309629015656, 0.9630514814652833};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    int N = 50;
    int K = 23;
    vector<string> friends = {"16 28", "3 49", "23 2", "9 42", "10 29", "40 35", "26 40", "1 48", "26 7", "48 18", "18 38", "2 29", "21 14", "46 7", "27 6", "38 6", "18 35", "20 3", "16 42", "7 29", "42 46", "33 24", "43 3", "37 12", "6 39", "26 43", "8 0", "48 45", "12 28", "36 44", "40 33", "0 23", "49 22", "30 38", "32 8", "34 17", "41 45", "47 11", "13 37", "44 41", "21 11", "16 47", "23 25", "1 15", "31 19", "2 17", "47 31", "4 10", "5 15"};
    string loyalty = "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.29014225157449614, 0.576194802554197, 0.75935367802809, 0.46658876760771817, 0.17941920589287508, 0.11251695462722988, 0.4806826634271639, 0.999979409940366, 0.1407047462661214, 0.32455596249520635, 0.467353173571629, 0.28225368497723513, 0.21736411204080952, 0.0336750425313419, 0.04394948228868811, 0.2939256750322363, 0.7477228680923567, 0.38221327698520347, 1.0, 0.0907764254112221, 0.17831763770245823, 0.1287753804656957, 0.08786035821556248, 0.5316507822935782, 0.20204768143059737, 0.20085345797182763, 1.0, 0.18445604923083259, 0.42018134695022613, 0.9127573435734563, 0.29515335733791115, 0.25698710804891167, 0.05141595266345289, 0.5192478451215714, 0.14449846475367856, 1.0, 0.20204768143059737, 0.09887089260482274, 0.7581285694798694, 0.18445604923083259, 1.0, 1.0, 0.8516769316693134, 0.6830572120544505, 0.5192478451215714, 1.0, 0.9218890350211177, 0.5434077063445695, 1.0, 0.2336431279389093};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    int N = 50;
    int K = 22;
    vector<string> friends = {"10 44", "15 41", "18 42", "0 26", "1 47", "6 19", "6 9", "44 29", "16 34", "11 13", "30 13", "27 32", "2 30", "4 35", "37 1", "29 40", "8 14", "15 34", "27 15", "48 46", "47 10", "38 34", "49 8", "0 4", "40 24", "42 16", "17 37", "9 29", "42 11", "31 36", "39 17", "21 36", "41 49", "5 44", "9 31", "20 47", "8 48", "25 2", "19 13", "19 3", "45 1", "14 22", "35 2", "5 23", "7 18", "28 25", "28 12", "43 46", "21 33"};
    string loyalty = "NNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.207482059058832, 0.763333313432123, 0.9807888640787132, 0.35281413065542644, 0.3838973336358318, 0.37017893178263106, 0.7486193535290817, 0.19364723512484028, 0.1603997755143468, 0.7783637025803909, 0.5979005218097364, 0.9543983665086511, 0.13348985635306343, 0.9878682221452709, 0.07268021541070124, 0.5706726808124469, 0.8049840591304763, 0.4846412408802704, 0.48697416026842755, 0.855329146118667, 0.2737963747955151, 0.15766534920653874, 0.025187469401888984, 0.1501635879494191, 0.16308643891721497, 0.5989871278971187, 0.08442391966279394, 0.2789771573907125, 0.32588779299557, 0.7459237345815373, 0.9331423812196258, 0.49462518060348426, 0.10224694615926544, 0.06342167480626171, 0.7075656441424767, 0.633315223231877, 0.29550610768146923, 0.8872302888461676, 0.27187988823480247, 0.1992205690950124, 0.40169498608905396, 0.36669671749435806, 0.9160596797497224, 0.012212377756815163, 0.6881679343737686, 0.3145321623461139, 0.03562814190359054, 0.6672731560533511, 0.07955956631282313, 0.23745925227172315};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    int N = 50;
    int K = 28;
    vector<string> friends = {"44 34", "35 37", "27 20", "10 35", "34 12", "11 16", "33 12", "36 1", "29 44", "20 26", "1 41", "8 25", "31 18", "29 19", "18 2", "26 36", "16 4", "41 46", "24 6", "41 44", "7 32", "8 22", "27 14", "48 15", "14 22", "15 9", "33 42", "24 17", "45 14", "26 16", "0 10", "28 20", "46 32", "3 45", "30 8", "47 9", "17 48", "3 5", "3 38", "46 43", "48 39", "17 29", "39 40", "21 13", "18 45", "13 7", "11 10", "49 1", "23 30"};
    string loyalty = "NNNNNNNNNNNNNYNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.23761211544586924, 0.8845439963534212, 0.29628070129079853, 0.6765406656672907, 0.3994903828014442, 0.29628070129079853, 0.24324188184667206, 0.5387144593501724, 0.6241103600568697, 0.3058149104506508, 0.5538378973497369, 0.7157161647053119, 0.4717852944592136, 0.7685247458163548, 0.9915725413274805, 0.536074563288479, 0.8999997672843715, 0.9411799237878837, 0.6765406656672907, 0.4395371391246845, 0.9993579300740584, 0.34237813902416636, 0.7977189214096051, 0.15339142866301347, 0.5569535842673425, 0.27081335388337446, 1.0, 0.9962437445476042, 0.44909311845623356, 0.9821554406774458, 0.3599203181688072, 0.29628070129079853, 0.5387092795506997, 0.27197978466897965, 0.71583139647619, 0.31534581654996974, 0.8440350367641898, 0.13297573699350473, 0.29628070129079853, 0.47775617692963857, 0.20557250334228439, 0.9998104493671224, 0.11614912087167162, 0.3423580954522937, 0.998870653575837, 0.9284801815241958, 0.768499447375452, 0.12884668611818995, 0.8192210947859012, 0.3975722805358375};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    int N = 50;
    int K = 23;
    vector<string> friends = {"26 49", "10 47", "30 21", "10 22", "15 18", "42 20", "26 12", "30 12", "1 36", "15 16", "8 5", "7 9", "7 24", "45 6", "31 35", "30 23", "22 39", "36 43", "31 41", "16 7", "19 33", "20 37", "28 34", "3 0", "38 46", "6 39", "12 6", "24 21", "40 11", "1 17", "33 41", "37 2", "14 33", "28 16", "44 23", "38 0", "36 25", "3 10", "37 23", "14 18", "11 15", "17 44", "1 13", "3 4", "9 32", "22 5", "46 48", "25 27", "41 29"};
    string loyalty = "NNNNYNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.5180100060046726, 0.3396458179260208, 0.24095788571329224, 0.8444482187252174, 0.8746120031935765, 0.3920823910633352, 0.7873837681260205, 0.7971229727542992, 0.15307301494748915, 0.419475199631963, 0.7841554207216038, 0.4816697002076895, 0.8884882801895283, 0.1221228724535307, 0.7540859189757018, 0.9125297057442919, 0.8553014305564286, 0.4633327136974742, 0.9725443362830675, 0.23050922031531884, 0.31621689573133305, 0.7911363542141703, 0.7517448990372464, 0.8972920129829315, 0.7363473937179623, 0.09625731025434936, 0.46715082962109045, 0.03276959843584293, 0.4502521561321884, 0.15490985635592602, 0.9679371876466899, 0.20288973200971983, 0.16518667310374713, 0.5940326392074367, 0.17738057187486211, 0.07606877155630687, 0.21271051459643653, 0.6237751604477961, 0.29522193885397674, 0.7097556539543244, 0.19020302212902418, 0.4060596374996489, 0.11973036478720855, 0.07438438731609853, 0.6452522296860854, 0.313727430655392, 0.14891187039535891, 0.3112560197177937, 0.056398453495883016, 0.18348955735264816};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    int N = 50;
    int K = 35;
    vector<string> friends = {"30 27", "2 31", "28 31", "45 27", "10 8", "21 33", "45 49", "41 39", "37 31", "29 25", "0 28", "3 32", "22 26", "18 43", "0 42", "12 11", "25 19", "11 33", "5 40", "5 14", "34 32", "42 10", "13 40", "35 15", "3 37", "37 7", "49 23", "16 3", "38 9", "6 47", "46 18", "13 25", "21 49", "29 46", "36 2", "47 12", "27 40", "44 12", "26 14", "42 18", "43 48", "1 44", "24 13", "35 48", "9 28", "33 4", "41 34", "20 9", "17 29"};
    string loyalty = "NNNNNNNNNNNNYNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.9117934760853318, 0.39479319867116713, 0.7359571682113115, 0.9687775299118654, 0.47369002665631676, 0.8730749837809045, 0.39479319867116713, 0.5468971190753633, 0.3828392336501085, 0.8689989221875729, 0.7063518659771143, 0.8667321419997159, 0.9897153115748389, 0.9453961277614513, 0.717364779062428, 0.2699058638606209, 0.5299985136031269, 0.5003456945850732, 0.9798213888017914, 0.5094119169099156, 0.4736807429149331, 0.8030857060030768, 0.2709912630011062, 0.4658525025123501, 0.5193874966770695, 0.9280305900276845, 0.5145459756328741, 0.9188524137677685, 0.9999999500874119, 0.9118195304563119, 0.5040034387776686, 0.9998326430921527, 0.8591880040485098, 0.8662219355243163, 0.7038393162055292, 0.5126671659921979, 0.3995173752207759, 0.9951485962633639, 0.4736807429149331, 0.2629646200608874, 0.9826292713570723, 0.5025489859608867, 0.9609746451040293, 0.8704034624162704, 0.7279261329633413, 0.827563138675238, 0.8818374380946649, 0.7279261329633413, 0.7149775098869351, 0.8532448123601137};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    int N = 50;
    int K = 39;
    vector<string> friends = {"40 48", "33 38", "30 31", "1 35", "29 36", "29 7", "0 20", "3 38", "36 15", "3 22", "29 25", "27 18", "11 9", "41 23", "24 26", "32 9", "39 33", "23 2", "11 37", "22 30", "25 0", "12 46", "44 1", "14 18", "35 4", "37 6", "12 35", "43 39", "43 15", "7 2", "26 38", "42 15", "21 13", "46 27", "13 11", "21 8", "13 39", "5 46", "10 22", "27 36", "40 18", "41 47", "20 17", "24 19", "16 6", "45 16", "8 34", "28 1", "49 9"};
    string loyalty = "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8497998427989105, 0.9025966904209177, 0.9255762516679766, 0.9827823026042632, 0.5962386636340609, 0.6093330965742174, 0.8392958331266043, 0.9765869606657805, 0.7045037328730457, 0.8814150187100632, 0.5732186270234418, 0.9890024520236376, 0.9940409819584332, 0.9810353336867311, 0.5852019459510274, 1.0, 0.667754714074198, 0.40235775521022377, 0.9635343087460733, 0.43065003433877613, 0.6770862438601485, 0.8808209448255512, 0.9464223695583485, 0.8272054503341176, 0.7196336849032117, 0.9488286952048445, 0.8985622106337919, 1.0, 0.545225343322479, 0.9999804151466645, 0.7590410211281398, 0.45482557729619344, 0.5347200279932838, 0.9999804151466645, 0.42090330566211165, 0.9809465490182766, 1.0, 0.9379447393778284, 0.9998576833990949, 0.999998694343111, 0.7743877122018858, 0.6567571660978355, 0.8103663934362016, 0.8103663934362016, 0.545225343322479, 0.39598614959172107, 0.9995377974612808, 0.38822532504328255, 0.46547582054007186, 0.7667639816267963};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    int N = 50;
    int K = 31;
    vector<string> friends = {"4 39", "49 9", "8 23", "8 39", "14 23", "9 18", "42 36", "49 19", "21 41", "16 27", "21 5", "1 29", "24 38", "44 6", "42 20", "13 15", "43 28", "1 12", "39 20", "12 44", "3 26", "25 38", "31 37", "8 3", "10 49", "15 20", "5 3", "31 40", "12 7", "19 34", "25 45", "2 38", "33 47", "25 43", "15 0", "2 11", "24 41", "9 23", "24 31", "2 33", "32 19", "1 41", "14 17", "46 30", "46 32", "35 36", "22 43", "34 48", "28 16"};
    string loyalty = "NNNNNNNNYNNNYNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNYN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.4028183246368734, 0.6985182734342511, 0.8854335050484736, 0.7947063480652444, 0.5089704591792081, 0.5212881943146415, 0.31439345518976447, 0.4674013358578084, 0.9995944874793151, 0.8516272941707242, 0.4265813448896859, 0.4495520552871225, 0.9173972021638147, 0.4028183246368734, 0.6305606840242334, 0.7991681769426957, 0.458895186243524, 0.31763042864471935, 0.4340812722934727, 0.8629920286161318, 0.971204620342667, 0.4814204065717692, 0.4534265193916347, 0.9205807084656875, 0.9998259238705132, 0.9750186924733895, 0.4035114325660589, 0.2243938350791026, 0.6879278705560561, 0.3534573244128093, 0.21585753658554718, 0.9083081091635735, 0.661883337229246, 0.6025364528046718, 0.6200866739901076, 0.24997579509341117, 0.5059498106626827, 0.4643775782381082, 0.9993806558801199, 0.9939221878287965, 0.4643775782381082, 0.6778155663172548, 0.7514244588368704, 0.8962967889323733, 0.6263970665948029, 0.49781053522302654, 0.4413696730068033, 0.3012523393561889, 0.6660514298829433, 0.8397307112870978};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    int N = 50;
    int K = 45;
    vector<string> friends = {"45 49", "49 19", "23 40", "2 4", "45 23", "28 30", "35 42", "9 13", "19 30", "31 6", "31 34", "33 3", "2 17", "6 42", "11 29", "13 16", "42 26", "39 40", "7 21", "46 1", "8 28", "36 21", "35 15", "15 37", "27 14", "6 11", "4 15", "41 44", "48 45", "24 41", "41 4", "39 20", "1 29", "28 37", "38 33", "9 24", "48 14", "18 2", "32 9", "21 29", "1 5", "34 38", "5 0", "26 47", "10 17", "25 33", "25 12", "22 7", "0 43"};
    string loyalty = "NNNNNNNNNNNNNNNNNNNNNNNYNNNYNNNNNNNNNNNNNNNYNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8917493620640771, 0.9814573291749362, 0.999319535015594, 0.777658066345336, 1.0, 0.9067195917210094, 1.0, 0.9514601644457046, 0.7597958605046782, 0.9992911823079104, 0.7366600510348738, 0.9319251488517153, 0.7366316983271902, 0.9514601644457046, 0.783243549759002, 1.0, 0.7366316983271902, 0.9514885171533881, 0.7776864190530195, 0.8885455060958322, 0.7298554011908137, 0.9992911823079104, 0.7366316983271902, 0.9992911823079104, 0.9999716472923165, 0.9514601644457046, 0.9486815990927133, 0.819960306209243, 0.9778848880068046, 0.9999716472923165, 0.9058690104905018, 1.0, 0.777658066345336, 0.9992911823079104, 1.0, 0.9314998582364615, 0.777658066345336, 0.9283527076835838, 0.9999716472923165, 0.9440034023249221, 0.9918060674794443, 1.0, 0.9964842642472356, 0.9102636801814573, 0.778338531329742, 0.9385313297419904, 0.762943011057556, 0.7342500708817692, 0.804224553444854, 0.8941309895094982};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    int N = 50;
    int K = 11;
    vector<string> friends = {"19 24", "16 22", "1 36", "13 29", "45 1", "42 43", "22 43", "31 11", "5 18", "43 29", "3 48", "44 33", "25 5", "39 8", "20 36", "8 45", "46 35", "27 33", "3 42", "41 2", "44 3", "32 28", "12 32", "11 8", "45 7", "48 40", "37 34", "32 7", "14 18", "25 1", "46 44", "16 37", "19 17", "20 10", "39 23", "31 15", "47 46", "13 18", "49 33", "9 42", "2 15", "38 48", "47 24", "26 36", "19 21", "6 22", "29 4", "9 30", "41 0"};
    string loyalty = "NNNNNNNNNNNNNYNNNNNNNYNNNNYNNNNNNNNNNNNNNNNNNYNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.0020444091089784067, 0.4661536714180249, 0.021210744505650525, 0.24388096995854391, 0.23249474700437278, 0.2316713044465898, 0.08455903231302175, 0.4197001533306832, 0.5183996819808052, 0.13620875688568346, 0.04690783122267017, 0.25009938099835316, 0.07075927082741784, 0.9006757907888012, 0.15466522800840476, 0.05182009199840987, 0.11264126299051624, 0.11011414617525128, 0.48131637230961444, 0.3459594525526719, 0.14469873360213525, 0.5660173774774263, 0.2983985461979669, 0.0707308762564598, 0.18141291385087166, 0.22939973876994724, 0.4243568629678005, 0.010449202112556066, 0.07075927082741784, 0.7489068090181157, 0.03577715940712134, 0.11684365949230502, 0.21824067238344025, 0.04829916519961386, 0.009682548696689164, 0.023709466749957442, 0.3443409620080641, 0.037764779374183655, 0.021608268499062944, 0.21807030495769208, 0.021608268499062944, 0.0076097450167528224, 0.3978647282639559, 0.6006587540462264, 0.1406383099551366, 0.8256857288886366, 0.09608722812198311, 0.10707592708274183, 0.09157249133965584, 0.010449202112556066};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    int N = 50;
    int K = 34;
    vector<string> friends = {"3 49", "21 24", "18 0", "36 20", "44 33", "8 38", "21 7", "41 34", "46 39", "40 48", "29 15", "11 3", "18 8", "15 22", "33 22", "24 16", "30 19", "18 9", "4 13", "26 2", "0 29", "12 48", "14 37", "9 37", "25 31", "2 38", "31 46", "35 36", "13 11", "29 36", "5 4", "16 0", "24 47", "12 49", "9 48", "6 26", "25 47", "19 33", "42 16", "27 26", "22 43", "19 45", "44 41", "17 25", "5 10", "1 14", "6 32", "28 30", "23 44"};
    string loyalty = "NNNNNNNNNNNNNNYNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNYN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.9998355354323952, 0.4075463875881643, 0.8544693587931975, 0.8701325207801665, 0.5197680183993786, 0.3565184840406348, 0.5452490924456397, 0.3854754855918864, 0.9604501439254792, 0.7391327721087532, 0.18044815455720986, 0.7803439784783762, 0.9735219639165043, 0.662800256036252, 0.7580235702174866, 0.6641290325519874, 0.9991079733424651, 0.48034526928984866, 0.9883462503065678, 0.9075094096359836, 0.42253103832115546, 0.7186507831049482, 0.9995863328881299, 0.48874875569570564, 0.9943668987343214, 0.896064923261258, 0.7713904545250915, 0.40769019917221017, 0.3485818158072773, 0.923966041028063, 0.6529203850262832, 0.7237847199812301, 0.28525673101235305, 0.9963641637326016, 0.3485818158072773, 0.42253103832115546, 0.7882653088342377, 0.5209627023821546, 0.9168933053201934, 0.27069318853972013, 0.5394216101582308, 0.6529203850262832, 0.5411642056460093, 0.5415191028708406, 0.9075094096359836, 0.48874875569570564, 0.5141326392311016, 0.953769966765401, 0.9966063807088985, 0.9332232853278015};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    int N = 50;
    int K = 23;
    vector<string> friends = {"47 38", "41 23", "36 42", "41 44", "5 8", "9 19", "31 12", "29 11", "29 3", "13 40", "31 48", "7 46", "49 0", "4 35", "36 46", "6 0", "43 5", "4 33", "0 26", "23 24", "48 24", "35 7", "18 17", "47 49", "46 5", "9 44", "22 14", "45 43", "25 34", "27 33", "48 17", "36 31", "25 30", "33 26", "28 24", "20 39", "15 30", "25 14", "12 21", "49 29", "41 30", "21 2", "26 32", "20 37", "16 28", "13 11", "39 40", "42 10", "1 12"};
    string loyalty = "NNNNNNNNNNNNNNNNNYNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8502931093002055, 0.258314897508198, 0.2687243184060336, 0.324684588178321, 0.40854381793446803, 0.5726400660592919, 0.35123546863793764, 0.5207032524386165, 0.23057622966344926, 0.2497747627948982, 0.19407725690148714, 0.5305172878364296, 0.6247752386300351, 0.3425391571164411, 0.23377579656602387, 0.26086033256194885, 0.2124587939631799, 0.8023434340358238, 0.3344780469215627, 0.09641407554286618, 0.0616568137070973, 0.6485257392857617, 0.08849412119834732, 0.8858412348544248, 0.9588944286958733, 0.46111994821267577, 0.7083190282716032, 0.2270169828389672, 0.5226525818094349, 0.7904779061772454, 0.6614853278678996, 0.9269164555930588, 0.28982969011661097, 0.5603673262067461, 0.17818220277819818, 0.3957301178332412, 0.8756219422448286, 0.023563870398764286, 0.22328561229899568, 0.12106099815499427, 0.2108026819200035, 0.8197184640391582, 0.47696489818208343, 0.30385926473645986, 0.4826778005572775, 0.12081881093068925, 0.7943094850249796, 0.54309559100936, 0.9840733607119441, 0.9869073833460583};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    int N = 50;
    int K = 16;
    vector<string> friends = {"17 26", "23 42", "16 17", "21 4", "34 17", "25 32", "2 15", "28 7", "14 15", "29 27", "20 30", "33 27", "18 9", "40 41", "45 11", "16 43", "46 9", "12 15", "40 9", "12 36", "6 46", "8 47", "8 31", "45 23", "33 46", "37 30", "11 40", "25 28", "42 2", "31 32", "7 41", "39 13", "19 5", "7 13", "36 48", "14 4", "2 10", "26 14", "34 0", "4 38", "49 43", "36 1", "24 31", "18 20", "6 5", "38 22", "35 45", "3 0", "39 44"};
    string loyalty = "YNNNYNNNNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNYNYNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.6422598058817115, 0.09020138863644622, 0.4966856301574031, 0.24152277436475333, 0.4984459631393362, 0.16064742447926128, 0.34575229924751905, 0.5692455196481152, 0.022188192955032937, 0.8780417317968665, 0.18097622596241225, 0.6243847468101349, 0.4359091570031626, 0.2932821985532008, 0.8748182413028464, 0.7313760950961503, 0.2312097858882548, 0.44176633101893925, 0.4956377912683122, 0.05612072412664948, 0.2596359373296012, 0.18661801592206184, 0.18661801592206184, 0.2873477770911338, 0.017398851285033934, 0.1794585408411793, 0.507573884910393, 0.16064742447926128, 0.32410392962303247, 0.05612072412664948, 0.12039877858155512, 0.054778436148169685, 0.09819513613726416, 0.34575229924751905, 0.3903640626703988, 0.15987495001635832, 0.2549538332909229, 0.04201715802101136, 0.4984459631393362, 0.13399251154167724, 0.996556581482424, 0.7425996946453888, 0.30578083536297207, 0.10730033807117667, 0.04617125304445813, 0.43419335490203204, 0.6580700861536224, 0.006826856665091419, 0.09020138863644622, 0.037531353375259036};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    int N = 50;
    int K = 20;
    vector<string> friends = {"14 1", "6 36", "1 27", "37 32", "29 13", "44 24", "26 36", "32 28", "45 17", "33 17", "39 33", "29 10", "38 23", "13 34", "38 11", "39 25", "28 2", "19 11", "28 20", "42 33", "1 41", "36 12", "42 26", "6 22", "37 46", "17 23", "43 18", "23 4", "13 11", "40 6", "31 44", "19 14", "43 2", "24 3", "10 18", "15 19", "43 21", "21 0", "12 48", "16 37", "9 18", "31 45", "8 2", "46 30", "5 25", "35 30", "49 21", "7 9", "47 38"};
    string loyalty = "YNNNNYNNYNNNNNNNNNNNNNNYYNNNNNNNYYNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.5959861149818234, 0.22980041978371657, 0.5815246134294478, 0.2690471613506087, 0.36554827831803505, 0.49051079916374996, 0.18931549909642875, 0.10471478575760551, 0.5003682759980068, 0.2779416266912297, 0.4133778778162489, 0.8246674080243023, 0.15252915187974592, 0.6207613426504299, 0.3813774104588493, 0.23491369905711423, 0.22612752174951178, 0.5503020365949525, 0.552119470749114, 0.6172109991678796, 0.22096504017539742, 0.5543901461843326, 0.06794936563301801, 0.9225190099749393, 0.6858642585012391, 0.29856624280854127, 0.42767462686124624, 0.08333670838198148, 0.5654795712799424, 0.4351280663910493, 0.16299658684284501, 0.2599303832564871, 0.8134692222098154, 0.821419583491137, 0.23838033417128357, 0.06075648343980544, 0.32092033053890767, 0.5853224079588782, 0.8610449249448983, 0.40230809066948414, 0.06794936563301801, 0.08333670838198148, 0.5891341682068527, 0.6619945250515877, 0.37800724623123805, 0.3152033454814315, 0.32836762515255136, 0.3384667948605038, 0.054756789267555894, 0.21621755529925002};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    int N = 50;
    int K = 2;
    vector<string> friends = {"38 0", "7 25", "29 7", "20 48", "20 32", "17 5", "27 38", "43 20", "21 22", "33 6", "10 3", "15 1", "19 34", "41 33", "25 49", "5 9", "37 27", "13 45", "0 16", "10 13", "49 5", "41 24", "22 24", "27 24", "8 44", "31 42", "30 23", "10 15", "28 6", "28 46", "11 30", "42 19", "3 4", "30 41", "25 43", "16 12", "44 18", "23 36", "49 6", "14 1", "15 8", "40 47", "2 12", "46 42", "39 34", "8 28", "7 40", "26 32", "40 35"};
    string loyalty = "YNNNNNNNNNYNYNNNNNNNNNNYNYNNNNNNNNNNYNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.2692307692307693, 0.0, 0.038461538461538436, 0.038461538461538436, 0.0, 0.0, 0.0, 0.038461538461538436, 0.0, 0.0, 0.3076923076923077, 0.0, 0.2692307692307693, 0.038461538461538436, 0.0, 0.038461538461538436, 0.07692307692307687, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23076923076923073, 0.0, 0.3076923076923077, 0.0, 0.0, 0.0, 0.0, 0.038461538461538436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1923076923076923, 0.0, 0.038461538461538436, 0.0, 0.0, 0.0, 0.0, 0.038461538461538436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.038461538461538436};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    int N = 50;
    int K = 27;
    vector<string> friends = {"15 38", "6 39", "44 18", "10 4", "28 41", "34 21", "8 37", "42 6", "33 28", "49 47", "12 33", "20 5", "11 15", "42 47", "45 31", "12 46", "8 22", "22 18", "23 30", "41 34", "25 21", "35 39", "44 15", "45 12", "6 48", "22 32", "20 27", "18 42", "0 9", "40 39", "49 5", "8 45", "23 35", "10 29", "17 31", "44 4", "24 29", "43 13", "13 25", "17 1", "10 0", "16 5", "2 30", "40 3", "40 7", "36 49", "16 19", "14 35", "26 14"};
    string loyalty = "NNNNNNNNNNNNNYNNYNNNNYNNNNNNNYNNNNNNNNNNNNNNNNNYNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.4141065592325297, 0.14453961865230047, 0.13384633865714002, 0.31025553174182097, 0.5886175712638656, 0.6366676634205428, 0.9890835859932184, 0.31025553174182097, 0.9169666293045424, 0.17959368716804247, 0.7058032442293494, 0.2716253180651307, 0.7452016526738999, 0.6329575754209535, 0.49451553940369364, 0.6194867535607849, 0.6754494461180796, 0.3395695465641754, 0.9772859436067658, 0.2999733858103797, 0.3719300222805707, 0.7543435918251974, 0.9418382272764605, 0.5550059972075823, 0.352919756899695, 0.4205626072842472, 0.21319632165527447, 0.1607074778176515, 0.4346358355407772, 0.7918582646127509, 0.31725538115233143, 0.588708081036736, 0.42251679384966256, 0.5374513638467036, 0.5456318445425626, 0.8454395011838874, 0.2999733858103797, 0.4093542606438191, 0.2716253180651307, 0.9675164101101844, 0.7072248348440182, 0.4378599199130865, 0.9965299617649088, 0.28061759881991233, 0.8498489315089077, 0.8890613151101752, 0.32612162528577293, 0.8058798575739894, 0.44313494379050855, 0.6754494461180796};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    int N = 50;
    int K = 32;
    vector<string> friends = {"4 11", "9 20", "27 2", "33 29", "24 11", "33 16", "39 12", "7 35", "16 17", "33 34", "48 28", "15 32", "0 16", "2 14", "44 12", "6 44", "24 22", "49 18", "15 9", "39 20", "9 5", "29 3", "22 31", "30 25", "4 47", "3 14", "2 26", "35 20", "7 27", "21 30", "24 23", "29 45", "4 5", "8 32", "49 45", "14 36", "25 28", "34 37", "6 1", "5 40", "19 49", "18 41", "32 21", "13 31", "1 43", "46 38", "25 38", "10 8", "27 42"};
    string loyalty = "NYNNNNNNYNYNNNNNNNNNNNNYNNNNNNYNNNNNNNNNNYNNNNYNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.34599914815065813, 0.8481057684392337, 0.8819836046702744, 0.8989947903553552, 0.7831751612551028, 0.8387672846874121, 0.6222738708505292, 0.7741422732782159, 0.6078139045517978, 0.9127838343595687, 0.4859254840563093, 0.7203764942409512, 0.5251982402052855, 0.17764867812535168, 0.8954272417300746, 0.669995056341423, 0.7338470265046471, 0.34599914815065813, 0.8032477441689704, 0.4085983619891863, 0.9076636753073991, 0.5282067116348954, 0.6196765893702834, 0.8314935422690364, 0.8554663186817523, 0.7282107940425613, 0.42413806775476026, 0.8454601640114975, 0.4614646067007335, 0.986365757312924, 0.7940765663812077, 0.38800257334385335, 0.6635314130217445, 0.9346587960607649, 0.601317414499022, 0.7954289681492177, 0.43210333197775386, 0.28253824689942675, 0.49586832363358124, 0.6606694689685813, 0.40419985453309815, 0.8558618393487801, 0.40571056362016833, 0.40813564808179725, 0.5119122277315294, 0.8731623163609077, 0.5890048645846631, 0.37521833046370945, 0.2138238242148277, 0.8463260849285176};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    int N = 50;
    int K = 19;
    vector<string> friends = {"5 37", "20 38", "28 16", "12 7", "38 12", "27 45", "18 12", "22 18", "41 37", "0 26", "48 42", "10 17", "25 15", "35 41", "27 15", "40 21", "16 3", "19 0", "4 20", "8 26", "30 37", "38 11", "3 48", "30 6", "7 13", "2 46", "45 31", "30 24", "31 5", "11 32", "28 46", "5 16", "43 18", "34 43", "15 20", "49 46", "39 17", "7 26", "45 9", "33 11", "28 17", "21 9", "25 44", "14 0", "6 1", "41 47", "21 36", "23 14", "39 29"};
    string loyalty = "NNYNYNNNNYNNNYYNYNNYNYNYNNNYNYNNNNYNNYNNNNNNYNYNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.41814360111245985, 0.08964034213760663, 0.374379327376711, 0.3457720138290594, 0.5292640559726123, 0.45470469353649356, 0.25693061147213603, 0.5783166885816594, 0.15264269022665677, 0.42980072905100364, 0.12239658271284992, 0.3346404169191912, 0.6006414463821488, 0.5706120713429925, 0.45368744262508554, 0.44422028764141697, 0.6557939675036524, 0.34514931570070606, 0.4272836799724806, 0.45368744262508554, 0.5531496929759292, 0.6082254555172919, 0.1509946423566828, 0.374379327376711, 0.19783946938313013, 0.29102020505099113, 0.4256355843905325, 0.5495544301206401, 0.4866824233778352, 0.5097405156076094, 0.5524295900202131, 0.26385606859474176, 0.1152507093073587, 0.1152507093073587, 0.5404319078801214, 0.18347848084709328, 0.22255256433529258, 0.8584801520907498, 0.5831031210932952, 0.30341227298222806, 0.22255256433529258, 0.5116771116273344, 0.056211781871338684, 0.35889238424068204, 0.46535765806909, 0.36407234206355765, 0.5511341444574391, 0.18347848084709328, 0.16085035256182134, 0.20259845058853654};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    int N = 50;
    int K = 34;
    vector<string> friends = {"22 34", "1 13", "17 39", "11 4", "17 27", "47 43", "30 47", "16 20", "45 8", "36 22", "20 45", "34 25", "3 9", "11 38", "10 32", "11 29", "4 20", "37 30", "12 2", "26 27", "15 24", "29 21", "3 24", "45 42", "29 7", "6 26", "16 43", "34 37", "10 46", "26 23", "15 43", "49 19", "12 15", "47 49", "48 1", "17 19", "25 48", "42 32", "3 44", "14 23", "41 32", "5 36", "25 31", "40 42", "0 31", "33 27", "23 35", "18 21", "37 28"};
    string loyalty = "YNNNNYNNNNYNYNYNNNNNNNNNNYNNNNNYNYNYNYYYYYNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.5881308433893467, 0.6301329271380851, 0.5134089512494586, 0.8328386977598435, 0.7241002594664936, 0.7194838549302919, 0.4536763370883976, 0.5431840759350106, 0.46789298274063895, 0.4810608166500808, 0.8021554104040161, 0.9786579010831209, 0.8762374424942664, 0.3590175297495882, 0.6317763897515649, 0.9767110068473969, 0.6424309236556918, 0.7379673704093026, 0.41650952470329217, 0.6158895427109266, 0.7842701936228522, 0.7236514573354385, 0.5851451161350831, 0.6834961212901484, 0.9242580422060971, 0.9364004546351345, 0.7815580887184942, 0.7400228165378779, 0.4918918220966493, 0.9314968045606865, 0.6258451305093382, 0.5881308433893467, 0.6280479034537894, 0.6493008567165588, 0.7179041908409476, 0.6317763897515649, 0.5855742210083639, 0.842116865444321, 0.8111359073202834, 0.6639383240736261, 0.6424270269601688, 0.6032550247205501, 0.7116535431428339, 0.7873479424180765, 0.4810608166500808, 0.804404737873885, 0.46715442576084887, 0.7484213233687257, 0.8179142339570921, 0.6191365873443226};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    int N = 50;
    int K = 17;
    vector<string> friends = {"13 24", "13 2", "2 3", "25 31", "8 39", "20 15", "42 31", "29 5", "12 35", "29 8", "28 24", "37 24", "41 30", "20 41", "11 7", "23 20", "5 31", "47 27", "14 36", "46 34", "41 47", "7 38", "23 2", "44 21", "46 12", "36 19", "36 39", "45 46", "40 8", "14 27", "29 17", "43 37", "4 49", "27 45", "44 33", "13 49", "38 44", "6 23", "3 21", "48 43", "25 16", "22 12", "32 38", "18 32", "9 45", "26 11", "10 5", "7 0", "14 1"};
    string loyalty = "NYYNNYYNNNNYNNNNYNYNNYNNNNYNNYNNNYNYNYYNNNNNYNNYNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.11472711030336857, 0.4841346899945358, 0.6449291899625571, 0.28288384132068234, 0.06292846992032175, 0.6144260198098734, 0.401503750157427, 0.33986251076280527, 0.41539798710583575, 0.12975109171261157, 0.2112259919363868, 0.4282695003112087, 0.4025414808149024, 0.4437282525602019, 0.47441291731686586, 0.11269761622742103, 0.45336108769572603, 0.2301885720540089, 0.40576985740600213, 0.10350870379373256, 0.338162829267978, 0.39100701325478504, 0.13403325393180032, 0.4083012844535975, 0.41483650843804243, 0.2585121952119911, 0.3522992903873058, 0.5633674056415601, 0.13941343527836636, 0.6692035266996514, 0.14842900979755425, 0.36062654920648407, 0.2552897019178785, 0.3522992903873058, 0.11039459331184642, 0.5746796089721404, 0.31649015196209374, 0.6339011258384685, 0.5042397102351116, 0.2606197123827013, 0.13886225869027158, 0.4390944482641772, 0.12083471114309541, 0.2818219801313152, 0.3522992903873058, 0.3955836942826678, 0.34009578258691964, 0.702280280517259, 0.09444006782502745, 0.1923326484288238};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    int N = 50;
    int K = 39;
    vector<string> friends = {"29 26", "31 9", "3 6", "43 27", "45 23", "1 38", "33 6", "47 10", "1 36", "37 26", "13 40", "32 48", "45 41", "2 37", "45 25", "9 18", "44 37", "20 27", "10 23", "39 40", "34 41", "21 47", "22 6", "41 20", "35 34", "40 19", "28 7", "7 32", "27 24", "19 18", "44 7", "28 14", "18 22", "36 42", "42 33", "47 0", "30 9", "1 43", "4 11", "39 11", "17 0", "44 11", "12 4", "49 29", "34 8", "39 5", "15 42", "25 46", "16 15"};
    string loyalty = "NYNNYYYYYNNNNNNYNNNNNNNNNYNNNNNNNYNNNNYNNNNYNYNNYN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8627393796779246, 0.7376312236019522, 0.6776650113582271, 0.631869415346656, 0.8785686884922982, 0.7129186037413362, 0.9304210723478279, 0.9726915470686193, 0.7323157454283438, 0.9538031134086091, 0.9955365643461878, 0.7200710923770614, 0.5939466703268285, 0.6100681707779572, 0.5752342067977405, 0.8898561182834005, 0.6023453377730641, 0.5816802450764393, 0.9902258847811257, 0.8152275791658377, 0.7299881823358619, 0.6685022467997346, 0.8230098831903672, 0.998986502148686, 0.597510021854291, 0.8780970447590807, 0.9504307385697045, 0.8841037129213798, 0.8529553737733359, 0.8319802988962051, 0.6466739793230734, 0.6466739793230734, 0.6793962065532099, 0.6905544625611966, 0.8709977215334148, 0.5882193842925203, 0.6636854590620592, 0.9957270175501771, 0.6810920506766376, 0.8007900571879131, 0.9008521495961852, 0.8097526364883894, 0.7304443515479657, 0.7929920803526604, 0.9991560714910185, 0.999835213403045, 0.5935648835129843, 0.9837908476099538, 0.6862072008237109, 0.5592145716847277};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    int N = 50;
    int K = 3;
    vector<string> friends = {"13 27", "15 42", "18 3", "26 0", "31 42", "37 35", "19 30", "1 10", "14 47", "35 49", "49 39", "30 37", "42 16", "38 40", "29 47", "39 4", "32 12", "2 46", "5 3", "17 25", "6 29", "4 20", "23 3", "27 24", "0 32", "27 33", "49 1", "43 44", "5 46", "25 36", "41 2", "2 45", "14 11", "17 0", "13 10", "13 22", "40 30", "35 18", "29 41", "20 17", "43 32", "31 19", "28 20", "48 34", "9 21", "33 48", "16 21", "31 7", "14 8"};
    string loyalty = "NYYNNNYNNNNNYYYNNNYNNYYYNNNNYNNNYNYNNYYNNNNNNNYNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.019251336898395754, 0.1689839572192513, 0.1689839572192513, 0.03529411764705881, 0.0010695187165775666, 0.019251336898395754, 0.1540106951871658, 0.0, 0.018181818181818188, 0.01711229946524062, 0.03315508021390379, 0.018181818181818188, 0.13689839572192508, 0.1689839572192513, 0.18609625668449203, 0.0, 0.018181818181818188, 0.002139037433155133, 0.16791443850267385, 0.0010695187165775666, 0.018181818181818188, 0.1689839572192513, 0.13689839572192508, 0.15187165775401068, 0.0010695187165775666, 0.0, 0.0010695187165775666, 0.019251336898395754, 0.1540106951871658, 0.02032085561497321, 0.02032085561497321, 0.0, 0.17112299465240643, 0.002139037433155133, 0.15294117647058825, 0.036363636363636376, 0.0, 0.17005347593582887, 0.15294117647058825, 0.0010695187165775666, 0.018181818181818188, 0.019251336898395754, 0.0010695187165775666, 0.018181818181818188, 0.0010695187165775666, 0.01711229946524062, 0.15294117647058825, 0.02032085561497321, 0.01711229946524062, 0.021390374331550777};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    int N = 50;
    int K = 2;
    vector<string> friends = {"40 27", "24 36", "22 1", "26 3", "46 31", "12 7", "34 39", "44 46", "20 0", "12 16", "0 11", "42 34", "7 17", "26 24", "5 41", "38 28", "24 25", "44 22", "43 15", "2 36", "28 26", "32 33", "21 12", "46 37", "25 41", "10 18", "2 35", "13 16", "49 27", "42 15", "32 28", "20 7", "30 17", "25 16", "0 10", "45 6", "40 20", "19 49", "43 27", "23 3", "14 48", "44 13", "29 33", "31 14", "13 45", "47 42", "6 4", "9 40", "32 8"};
    string loyalty = "NYNNNYYYNYYNYYYYYYNYYNYYNYYNYYYNYNNNNNYYYYNYNYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.0038461538461538325, 0.059615384615384626, 0.0, 0.0038461538461538325, 0.0019230769230769162, 0.059615384615384626, 0.06153846153846154, 0.059615384615384626, 0.0019230769230769162, 0.059615384615384626, 0.06346153846153846, 0.0, 0.06153846153846154, 0.06153846153846154, 0.06153846153846154, 0.06153846153846154, 0.059615384615384626, 0.059615384615384626, 0.0019230769230769162, 0.059615384615384626, 0.06153846153846154, 0.0019230769230769162, 0.06153846153846154, 0.06153846153846154, 0.0038461538461538325, 0.06153846153846154, 0.06346153846153846, 0.005769230769230749, 0.059615384615384626, 0.06153846153846154, 0.059615384615384626, 0.0038461538461538325, 0.06346153846153846, 0.0038461538461538325, 0.0019230769230769162, 0.0, 0.0, 0.0019230769230769162, 0.059615384615384626, 0.06153846153846154, 0.06153846153846154, 0.059615384615384626, 0.0038461538461538325, 0.06153846153846154, 0.005769230769230749, 0.059615384615384626, 0.06538461538461537, 0.06153846153846154, 0.059615384615384626, 0.06153846153846154};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    int N = 50;
    int K = 30;
    vector<string> friends = {"48 23", "28 1", "35 38", "10 1", "40 37", "47 40", "12 35", "46 12", "32 16", "7 27", "28 42", "28 25", "33 46", "44 35", "44 32", "8 40", "23 24", "0 26", "38 49", "27 29", "32 45", "29 43", "34 38", "4 1", "16 41", "36 26", "46 36", "14 24", "37 15", "2 0", "47 20", "15 29", "5 19", "39 22", "39 7", "25 17", "33 48", "45 17", "7 0", "19 21", "30 12", "9 33", "16 11", "18 48", "13 5", "21 37", "24 3", "43 6", "39 31"};
    string loyalty = "NYYNNYYYNNNNNNYNNYYNNNYYYNNNYYNNYNYYNNNNNNYYNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.6482994165724826, 0.8451338808723838, 0.5810731856726016, 0.36825324499507206, 0.44134991363932363, 0.8484189075474149, 0.5281599566769964, 0.7268572993837695, 0.43860436245824796, 0.3847748065483596, 0.44134991363932363, 0.40084849955368984, 0.7790700081702717, 0.44525685384862934, 0.5281599566769964, 0.7571964982833528, 0.7743626187579394, 0.6146484888605139, 0.5899083890630699, 0.6650807524339528, 0.2994257699370101, 0.6970250351360499, 0.6037392989100663, 0.5899083890630699, 0.7079113174281217, 0.46790338538612164, 0.5302773737758958, 0.5098844391403479, 0.5984946371626767, 0.7966518126060799, 0.4076067487140146, 0.34655007220451683, 0.9211444632313814, 0.7395073262406093, 0.5821867578046684, 0.8026851581732787, 0.5778187332317282, 0.9403877578262746, 0.678952738476357, 0.6693152399957616, 0.8468229479271572, 0.40084849955368984, 0.5281599566769964, 0.5281599566769964, 0.5238239669203568, 0.519486672848396, 0.7876773044591392, 0.5886025286476502, 0.6500266771358414, 0.3522080810553544};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    int N = 50;
    int K = 40;
    vector<string> friends = {"30 25", "27 5", "5 0", "10 2", "42 18", "23 5", "10 46", "22 38", "1 3", "21 13", "20 6", "28 46", "10 48", "2 39", "24 8", "24 22", "41 2", "43 0", "4 24", "17 6", "47 18", "35 48", "27 30", "4 25", "34 37", "13 35", "38 13", "15 31", "31 37", "44 11", "19 4", "37 18", "35 34", "38 3", "7 43", "48 45", "36 42", "19 44", "11 12", "40 22", "11 17", "16 23", "36 14", "12 32", "9 6", "14 33", "41 26", "34 29", "49 36"};
    string loyalty = "YYYYYYYNYYYYNYYYNNYYYYYNYYYYYNYNYYYYYYYNNNYYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.7804390681759132, 0.7804390681759132, 0.9552487901859044, 0.7804390681759132, 0.7804390681759132, 0.9885954886226093, 0.8065523537307098, 0.7374647284152532, 0.7804390681759132, 0.7804390681759132, 0.7804390681759132, 0.8375966031943896, 0.7742939730029463, 0.7804390681759132, 0.7804390681759132, 0.8107124816113205, 0.7281485496617228, 0.7742939730029463, 0.7804390681759132, 0.7804390681759132, 0.7804390681759132, 0.7804390681759132, 0.947419331323384, 0.9363049701084188, 0.7804390681759132, 0.7804390681759132, 0.787142040901594, 0.7804390681759132, 0.7804390681759132, 0.7374647284152532, 0.7804390681759132, 0.7734026845236441, 0.8065523537307098, 0.7804390681759132, 0.947419331323384, 0.7804390681759132, 0.7804390681759132, 0.8107124816113205, 0.7804390681759132, 0.7439706142212265, 0.7374647284152532, 0.7790874855731434, 0.7804390681759132, 0.947419331323384, 0.7804390681759132, 0.7804390681759132, 0.7804390681759132, 0.7804390681759132, 0.7804390681759132, 0.7804390681759132};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    int N = 50;
    int K = 34;
    vector<string> friends = {"17 20", "8 49", "20 12", "6 30", "28 42", "2 43", "22 19", "16 7", "12 21", "27 10", "1 13", "22 41", "38 1", "38 5", "28 34", "18 30", "33 17", "41 1", "32 17", "22 47", "8 43", "47 37", "13 6", "49 47", "49 40", "29 3", "29 18", "5 44", "7 26", "23 19", "15 45", "10 43", "7 13", "38 36", "37 45", "4 9", "24 14", "15 33", "30 35", "41 25", "29 48", "31 42", "42 25", "39 48", "9 28", "23 0", "46 9", "11 23", "5 24"};
    string loyalty = "YYYYYYNYYNYYYYYYYYYYYYYYYYYYYYYYYYYYNNYYYNNYNYNYNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.664851358956221, 0.6809506120466848, 0.664851358956221, 0.664851358956221, 0.7332401637864067, 0.8624411929228659, 0.6398801247100567, 0.664851358956221, 0.664851358956221, 0.8510422335443079, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.7198633318586891, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.6809506120466848, 0.664851358956221, 0.664851358956221, 0.6943430449837482, 0.664851358956221, 0.664851358956221, 0.7505010191466486, 0.7198633318586891, 0.7198633318586891, 0.6773785884017238, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.664851358956221, 0.5692380635843102, 0.6398801247100567, 0.8624411929228659, 0.7198633318586891, 0.664851358956221, 0.6579910193660841, 0.6594490204140798, 0.664851358956221, 0.5692380635843102, 0.7198633318586891, 0.5609881161490055, 0.7198633318586891, 0.6398801247100567, 0.664851358956221};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    int N = 50;
    int K = 40;
    vector<string> friends = {"7 44", "23 5", "3 7", "22 14", "31 39", "28 26", "20 34", "7 29", "21 24", "30 28", "46 16", "30 46", "39 16", "37 45", "36 9", "17 46", "20 12", "39 1", "2 44", "47 12", "20 9", "43 37", "3 1", "2 41", "3 8", "14 11", "43 41", "19 43", "6 19", "6 4", "4 35", "11 17", "23 27", "44 38", "48 16", "37 13", "0 23", "14 12", "15 27", "32 48", "5 48", "42 18", "47 18", "21 36", "0 33", "49 2", "41 25", "15 10", "35 40"};
    string loyalty = "YNYYYYYYYYYYYNYYYYYYYYYYNYNYYYYYNYYYYYYYNYYYYYNYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.7863340346049288, 0.7798394202587287, 0.7863340346049288, 0.8153136290464302, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7455884925906274, 0.7863340346049288, 0.7863340346049288, 0.7916554894132062, 0.7916554894132062, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.9504643090885836, 0.7863340346049288, 0.7863340346049288, 0.7455884925906274, 0.7863340346049288, 0.7455884925906274, 0.7863340346049288, 0.9504643090885836, 0.7863340346049288, 0.7916554894132062, 0.7863340346049288, 0.7455884925906274, 0.7863340346049288, 0.7863340346049288, 0.9504643090885836, 0.7863340346049288, 0.9504643090885836, 0.7863340346049288, 0.8153136290464302, 0.7455884925906274, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7863340346049288, 0.7852797030500871, 0.7863340346049288, 0.9504643090885836, 0.7863340346049288};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    int N = 50;
    int K = 1;
    vector<string> friends = {"15 35", "2 11", "21 32", "48 37", "24 27", "29 46", "28 7", "13 12", "21 30", "0 38", "22 5", "42 31", "41 15", "27 37", "37 40", "40 16", "22 40", "9 28", "9 30", "17 45", "25 44", "19 20", "43 14", "38 47", "44 43", "42 16", "23 42", "11 3", "15 3", "6 14", "3 27", "10 35", "6 10", "32 33", "10 13", "5 8", "29 13", "4 7", "5 26", "45 31", "43 19", "49 41", "35 36", "31 9", "22 38", "30 39", "2 34", "1 17", "19 18"};
    string loyalty = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    int N = 50;
    int K = 50;
    vector<string> friends = {"44 3", "4 31", "20 22", "47 20", "37 26", "19 49", "15 42", "10 12", "37 11", "2 9", "24 38", "32 35", "45 3", "33 3", "22 36", "17 7", "27 19", "37 2", "35 19", "49 2", "12 24", "5 7", "6 10", "28 1", "24 14", "15 13", "25 34", "32 41", "21 40", "29 48", "43 33", "33 26", "23 15", "31 18", "4 45", "1 34", "42 26", "1 40", "39 30", "22 34", "14 40", "10 48", "6 39", "46 6", "4 28", "48 0", "35 5", "16 46", "45 8"};
    string loyalty = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    int N = 50;
    int K = 14;
    vector<string> friends = {"7 23", "22 46", "14 49", "45 26", "27 33", "42 8", "6 41", "3 40", "17 12", "49 19", "34 4", "27 4", "1 24", "20 49", "4 37", "20 48", "45 1", "36 26", "34 17", "30 6", "43 23", "35 2", "26 42", "8 32", "35 9", "25 5", "14 44", "12 45", "29 32", "15 7", "13 48", "25 13", "47 7", "14 32", "24 18", "6 20", "18 16", "48 3", "35 30", "23 9", "0 41", "42 28", "10 11", "39 19", "40 31", "13 11", "21 11", "38 24", "34 46"};
    string loyalty = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28, 0.28};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    int N = 50;
    int K = 50;
    vector<string> friends = {"39 9", "24 6", "37 25", "23 35", "9 19", "18 28", "42 10", "23 24", "8 44", "15 44", "13 38", "5 22", "12 16", "36 18", "3 5", "47 38", "21 37", "36 45", "46 18", "25 41", "20 25", "36 14", "45 2", "37 0", "20 49", "8 19", "4 8", "10 9", "49 28", "16 6", "24 4", "38 35", "47 17", "20 39", "33 2", "5 33", "11 46", "34 13", "31 14", "10 32", "4 26", "40 22", "16 7", "27 19", "43 23", "35 1", "29 26", "48 14", "30 47"};
    string loyalty = "NNYYNYNNYNNNYYNNYNYYNYNYYNYYNYNNNNNYNYYNNNYNYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    int N = 50;
    int K = 1;
    vector<string> friends = {"14 28", "23 10", "25 14", "13 37", "34 20", "42 15", "13 21", "22 27", "32 47", "43 45", "49 36", "0 21", "4 47", "2 39", "17 13", "18 34", "0 27", "4 39", "17 34", "6 32", "14 39", "22 44", "38 26", "20 23", "33 21", "25 18", "9 20", "22 5", "38 33", "36 44", "47 15", "1 25", "8 45", "40 6", "12 1", "36 7", "31 48", "49 31", "28 16", "41 32", "11 24", "46 16", "49 11", "41 30", "42 35", "16 43", "31 19", "10 3", "29 38"};
    string loyalty = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYNYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.0, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145, 0.020408163265306145};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    int N = 50;
    int K = 1;
    vector<string> friends = {"4 47", "24 4", "27 31", "7 14", "23 40", "31 40", "30 21", "2 48", "6 5", "21 35", "47 44", "32 0", "36 17", "43 19", "0 13", "30 3", "44 33", "23 4", "13 14", "7 33", "28 1", "8 25", "39 3", "24 10", "32 49", "23 30", "26 38", "45 16", "5 11", "27 37", "45 46", "7 42", "39 16", "47 15", "26 49", "33 34", "34 19", "0 11", "28 19", "2 10", "36 46", "41 1", "29 49", "21 12", "40 22", "9 20", "11 25", "34 18", "31 20"};
    string loyalty = "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    int N = 50;
    int K = 1;
    vector<string> friends = {"39 5", "40 3", "37 26", "34 3", "36 6", "33 6", "47 40", "45 33", "49 32", "2 3", "35 42", "26 38", "44 26", "7 27", "33 41", "12 4", "43 28", "48 38", "7 37", "46 48", "10 48", "11 22", "17 37", "39 46", "14 44", "22 21", "47 39", "20 28", "43 23", "9 43", "6 9", "4 40", "42 25", "25 24", "21 47", "31 19", "20 24", "14 15", "35 15", "12 49", "11 16", "21 18", "19 4", "19 0", "29 35", "1 14", "30 13", "7 8", "41 30"};
    string loyalty = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018, 0.020000000000000018};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    int N = 15;
    int K = 11;
    vector<string> friends = {"10 5", "8 5", "14 7", "2 4", "8 12", "11 7", "4 7", "11 0", "1 14", "12 9", "13 8", "0 3", "6 11", "1 12"};
    string loyalty = "NNNYNNYYNYYYYNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.6531049250535332, 0.657387580299786, 0.5588865096359743, 0.728051391862955, 0.8650963597430407, 0.7152034261241971, 0.6702355460385439, 0.9764453961456103, 0.9036402569593147, 0.6702355460385439, 0.734475374732334, 0.728051391862955, 0.841541755888651, 0.5931477516059958, 0.7044967880085653};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    int N = 22;
    int K = 19;
    vector<string> friends = {"14 6", "11 6", "3 14", "17 5", "10 8", "19 17", "20 18", "21 8", "14 20", "4 9", "10 4", "7 1", "17 6", "13 15", "8 1", "13 10", "21 18", "16 3", "15 2", "7 0", "12 5"};
    string loyalty = "NNYYNYNNNYYYYNNYYNYNNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8062015503875969, 0.9987080103359173, 0.8281653746770026, 0.8307493540051679, 0.82687338501292, 0.8488372093023255, 0.8501291989664083, 0.9767441860465116, 1.0, 0.8436692506459949, 0.8798449612403101, 0.8294573643410853, 0.8281653746770026, 0.82687338501292, 0.8475452196382429, 0.8436692506459949, 0.8281653746770026, 0.9780361757105943, 0.8475452196382429, 0.8074935400516796, 0.8281653746770026, 0.8449612403100775};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    int N = 47;
    int K = 2;
    vector<string> friends = {"14 26", "28 43", "46 20", "35 10", "22 3", "27 1", "35 11", "36 2", "15 6", "24 13", "16 25", "27 15", "8 2", "45 46", "18 3", "30 44", "35 9", "26 43", "17 37", "42 40", "33 9", "11 29", "3 4", "45 42", "11 15", "34 9", "46 44", "38 42", "17 23", "36 7", "21 23", "30 17", "0 1", "1 16", "13 21", "20 19", "43 41", "23 18", "12 33", "24 27", "31 37", "39 24", "12 2", "26 34", "31 32", "41 5"};
    string loyalty = "NNNNNNNNNNNNNNNNNNNNNNNYNNNYNNNNNNNNNNNNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.0, 0.1428571428571429, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1428571428571429, 0.0, 0.1428571428571429, 0.1428571428571429, 0.0, 0.0, 0.1428571428571429, 0.0, 0.5714285714285714, 0.1428571428571429, 0.0, 0.0, 0.5714285714285714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    int N = 26;
    int K = 10;
    vector<string> friends = {"23 11", "1 5", "10 3", "5 2", "12 3", "19 11", "16 6", "8 21", "11 18", "16 22", "8 5", "15 21", "22 25", "24 20", "15 7", "13 8", "19 17", "6 20", "21 12", "15 16", "12 14", "23 1", "9 3", "6 0", "4 7"};
    string loyalty = "NYNNNNYNNNNNNNNNNYNNNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.3218416874574733, 0.7820367430256294, 0.22454071217963256, 0.2236334769789068, 0.10705375368564296, 0.6346110229076889, 0.8895441143116353, 0.33114084826491264, 0.6241778180993423, 0.06055794964844641, 0.06055794964844641, 0.29417101383533684, 0.4699478339759583, 0.2129734633703788, 0.1431163529144931, 0.7434792469947834, 0.7820367430256294, 0.5023814924019052, 0.0975277840780222, 0.27942844182354276, 0.41846223633476975, 0.7457473349965978, 0.36244046268995234, 0.41936947153549553, 0.14561124971648898, 0.12361079609888859};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    int N = 31;
    int K = 3;
    vector<string> friends = {"7 4", "19 27", "13 22", "13 23", "29 10", "28 24", "14 13", "6 12", "12 30", "1 3", "6 5", "14 15", "24 7", "21 7", "26 30", "29 17", "25 17", "2 17", "20 11", "30 15", "8 1", "16 14", "26 10", "3 2", "9 19", "12 11", "15 4", "9 25", "0 28", "3 18"};
    string loyalty = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712, 0.09677419354838712};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    int N = 21;
    int K = 6;
    vector<string> friends = {"16 1", "18 16", "5 4", "19 11", "3 0", "11 6", "19 3", "19 20", "16 6", "5 3", "14 6", "12 20", "9 14", "20 2", "12 13", "1 15", "8 5", "10 18", "4 17", "0 7"};
    string loyalty = "YYYYYYYYYYYYNYNYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.2885719481464162, 0.2885719481464162, 0.2885719481464162, 0.2885719481464162, 0.2885719481464162, 0.2885719481464162, 0.34094510690255375, 0.2885719481464162, 0.2885719481464162, 0.34094510690255375, 0.2885719481464162, 0.2885719481464162, 0.15382017509677082, 0.34094510690255375, 0.15382017509677082, 0.2885719481464162, 0.2885719481464162, 0.2885719481464162, 0.2885719481464162, 0.2885719481464162, 0.34094510690255375};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    int N = 20;
    int K = 12;
    vector<string> friends = {"5 0", "11 5", "9 7", "2 18", "1 4", "19 7", "10 5", "3 0", "9 4", "13 4", "0 6", "2 6", "10 13", "16 18", "15 12", "12 17", "17 3", "14 6", "12 8"};
    string loyalty = "NNNNNNNNNNNNNYNNNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 0.4183006535947712, 0.6405228758169934, 0.869281045751634, 0.8954248366013072, 1.0, 0.8954248366013072, 0.3856209150326797, 0.21568627450980393, 0.6405228758169934, 1.0, 0.4771241830065359, 0.5163398692810457, 1.0, 0.4183006535947712, 0.21568627450980393, 0.1633986928104575, 0.6993464052287581, 0.3856209150326797, 0.1633986928104575};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    int N = 7;
    int K = 5;
    vector<string> friends = {"6 4", "0 2", "3 2", "1 3", "3 6", "2 5"};
    string loyalty = "NYNYNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.5714285714285714, 0.5714285714285714, 1.0, 1.0, 0.4285714285714286, 0.5714285714285714, 0.8571428571428572};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    int N = 39;
    int K = 39;
    vector<string> friends = {"6 1", "36 32", "12 23", "11 35", "23 9", "11 24", "30 5", "27 31", "0 24", "14 7", "9 10", "28 4", "18 33", "25 24", "37 26", "0 26", "27 14", "1 10", "17 28", "5 15", "30 11", "33 34", "26 19", "13 9", "33 2", "8 25", "6 37", "21 32", "17 38", "19 16", "20 19", "4 8", "31 8", "32 4", "7 2", "22 29", "36 29", "10 3"};
    string loyalty = "NYYNNNYYNYNYYNYNNNNYYNNYYYNYNYNNYNNNYYN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    int N = 50;
    int K = 42;
    vector<string> friends = {"14 28", "24 37", "41 12", "11 24", "27 33", "45 26", "12 9", "36 0", "29 41", "33 20", "24 43", "25 37", "23 42", "25 46", "45 9", "6 26", "25 42", "42 3", "12 44", "0 41", "9 28", "7 33", "8 27", "32 35", "28 49", "13 34", "29 23", "40 6", "46 30", "40 13", "4 45", "32 18", "11 17", "15 17", "10 3", "2 37", "20 0", "15 48", "35 39", "38 21", "17 19", "19 22", "14 39", "23 16", "47 15", "13 38", "35 1", "2 31", "5 14"};
    string loyalty = "YNNYNYYNNYYYYYNYYYYNNYYYNNYNYYYNYYYNNYYYNYYNYYNYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.9646860877394745, 0.784104784929249, 0.9597601509750864, 0.8148834235293549, 0.7846677942650331, 0.8179297284270561, 0.837643242252075, 0.8142565276866289, 0.7840462298925726, 0.8148834235293549, 0.8148834235293549, 0.8155004462789968, 0.8148834235293549, 0.837643242252075, 0.814420443815888, 0.8148834235293549, 0.8148834235293549, 0.837643242252075, 0.8148834235293549, 0.8108694719678433, 0.8148831425259364, 0.8148834235293549, 0.837643242252075, 0.8148834235293549, 0.964675151390212, 0.8376344020364211, 0.8148834235293549, 0.9639900118929761, 0.8179297284270561, 0.8148834235293549, 0.8376939975452149, 0.7803645003186579, 0.8407234270484291, 0.9993036355553959, 0.8148834235293549, 0.9640536098018124, 0.78467284473188, 0.9950104729214625, 0.8148834235293549, 0.8442279118174211, 0.8108694719678433, 0.8148834235293549, 0.8149884808344581, 0.7846624779841416, 0.8148834235293549, 0.964680756269209, 0.810919718416955, 0.8148834235293549, 0.8148834235293549, 0.8148834235293549};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    int N = 42;
    int K = 24;
    vector<string> friends = {"25 12", "3 8", "2 32", "27 4", "26 12", "19 13", "3 38", "28 14", "34 40", "32 37", "30 18", "21 12", "21 39", "32 13", "30 41", "15 1", "19 1", "8 5", "19 27", "38 1", "29 34", "4 30", "25 22", "28 17", "38 16", "24 25", "28 39", "13 17", "2 20", "10 5", "3 35", "40 39", "33 14", "31 11", "23 8", "0 4", "5 7", "36 23", "31 14", "29 9", "2 6"};
    string loyalty = "YNYYYYYNYYYYNYYNYYYYYYYYYYYYYYYYNYYNYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.5618437807865608, 0.7149843678855163, 0.5904091683311168, 0.7523654269650448, 0.5618437807865608, 0.7523654269650448, 0.5618437807865608, 0.4156761504614017, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608, 0.542376844160542, 0.5904091683311168, 0.5618437807865608, 0.39263250378012216, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608, 0.6605764873615517, 0.5618437807865608, 0.5904091683311168, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608, 0.5904091683311168, 0.5904091683311168, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608, 0.542376844160542, 0.5618437807865608, 0.5618437807865608, 0.4156761504614017, 0.5618437807865608, 0.5904091683311168, 0.6605764873615517, 0.5618437807865608, 0.5618437807865608, 0.5618437807865608};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    int N = 13;
    int K = 13;
    vector<string> friends = {"3 2", "9 10", "4 5", "8 7", "1 7", "8 5", "6 12", "12 10", "9 5", "0 10", "4 11", "3 1"};
    string loyalty = "YNYNYNYNYNNNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    int N = 7;
    int K = 5;
    vector<string> friends = {"4 6", "1 6", "5 4", "6 2", "3 2", "1 0"};
    string loyalty = "NNNNYNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.4, 0.8, 0.8, 0.4, 1.0, 0.6, 1.0};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    int N = 19;
    int K = 19;
    vector<string> friends = {"0 14", "15 4", "6 0", "7 11", "8 7", "4 3", "1 17", "0 9", "8 2", "2 18", "15 18", "14 8", "7 10", "13 9", "12 6", "16 15", "1 3", "13 5"};
    string loyalty = "YYNNNNYNYYNNYYNYYNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    int N = 34;
    int K = 29;
    vector<string> friends = {"1 28", "14 11", "20 4", "13 27", "13 15", "30 1", "19 12", "22 19", "0 19", "31 22", "9 22", "11 25", "13 18", "30 32", "30 11", "27 2", "8 26", "16 31", "3 18", "18 29", "16 14", "14 20", "33 21", "0 5", "6 9", "9 24", "29 8", "8 21", "21 20", "17 16", "12 23", "10 0", "7 32"};
    string loyalty = "YYYYYYYYYYYYYNYYNYYYNYNYYYYYYYYNYN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.8482057796125755, 0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.8512840055043929, 0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.847968667301789, 0.8514025616597862, 0.849687731554991, 0.86492643167143, 0.8512840055043929, 0.849687731554991, 0.8512840055043929, 0.8480829893087752, 0.9792653752514026, 0.86492643167143, 0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.849687731554991, 0.8480872234571821, 0.8480872234571821, 0.8480872234571821, 0.8493362972372182, 0.8480872234571821, 0.8293130094209802};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    int N = 1;
    int K = 1;
    vector<string> friends = {};
    string loyalty = "Y";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    int N = 2;
    int K = 1;
    vector<string> friends = {"0 1"};
    string loyalty = "YN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 0.0};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    int N = 2;
    int K = 1;
    vector<string> friends = {"1 0"};
    string loyalty = "NY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.0, 1.0};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    int N = 2;
    int K = 1;
    vector<string> friends = {"0 1"};
    string loyalty = "YY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.5, 0.5};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    int N = 2;
    int K = 2;
    vector<string> friends = {"1 0"};
    string loyalty = "YN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    int N = 2;
    int K = 2;
    vector<string> friends = {"0 1"};
    string loyalty = "NY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    int N = 2;
    int K = 2;
    vector<string> friends = {"1 0"};
    string loyalty = "YY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    int N = 50;
    int K = 20;
    vector<string> friends = {"0 1", "1 2", "2 3", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10", "10 11", "11 12", "12 13", "13 14", "14 15", "15 16", "16 17", "17 18", "18 19", "19 20", "20 21", "21 22", "22 23", "23 24", "24 25", "25 26", "26 27", "27 28", "28 29", "29 30", "30 31", "31 32", "32 33", "33 34", "34 35", "35 36", "36 37", "37 38", "38 39", "39 40", "40 41", "41 42", "42 43", "43 44", "44 45", "45 46", "46 47", "47 48", "48 49"};
    string loyalty = "NYNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNYYNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.37145911277391774, 0.7899518973810796, 0.5189738107963655, 0.39978621058257613, 0.4323890967397114, 0.6167824692677712, 0.9529663281667557, 0.8375200427578835, 0.7222646407574254, 0.6083263342750248, 0.49824387264258996, 0.39543406887073373, 0.3035046193784836, 0.22505153852027182, 0.1609528899748034, 0.11069328853936011, 0.07286019699167745, 0.04562113461097961, 0.0269909139497595, 0.015175230968924147, 0.0087233717645262, 0.00668091929449488, 0.008818813468733255, 0.015652439489959535, 0.028346186149499908, 0.04856073910055736, 0.07820493242727344, 0.11909215850958232, 0.1728449263190044, 0.24047491792013442, 0.3220775750171795, 0.41654577384133773, 0.5210735282889212, 0.6321294953042682, 0.7465068336260212, 0.8618767656715278, 0.9773230510804001, 0.7724669771703443, 0.6089944262044743, 0.48690539818279, 0.40619989310529125, 0.3668779109719783, 0.36893945178285104, 0.41238451553790945, 0.49721310223715354, 0.6234252118805834, 0.7910208444681988, 0.7067076429716729, 0.4422768572955639, 0.20670764297167288};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    int N = 50;
    int K = 40;
    vector<string> friends = {"0 1", "1 2", "2 3", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10", "10 11", "11 12", "12 13", "13 14", "14 15", "15 16", "16 17", "17 18", "18 19", "19 20", "20 21", "21 22", "22 23", "23 24", "24 25", "25 26", "26 27", "27 28", "28 29", "29 30", "30 31", "31 32", "32 33", "33 34", "34 35", "35 36", "36 37", "37 38", "38 39", "39 40", "40 41", "41 42", "42 43", "43 44", "44 45", "45 46", "46 47", "47 48", "48 49"};
    string loyalty = "NNNYYNNNNNYNNYNNYYNYNNYNNNNNNNYNNNNNNNNNNNNNNYNNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.46861992527138674, 0.7509884078341623, 0.9022943919090246, 0.9726088652128486, 0.8471602631317952, 0.7693926070995373, 0.7360651119135551, 0.7297539748434901, 0.7465719123410273, 0.7961345935552644, 0.9013708228436024, 0.6635725467181425, 0.6385233612672898, 0.8173038565289928, 0.6644376688783087, 0.641889530049095, 0.7421785796852396, 0.686709473095015, 0.6173672010002813, 0.7692039183080097, 0.6299703854291228, 0.6748013700818292, 0.9193158384880871, 0.8265477915829488, 0.7816411841922075, 0.7633425917615185, 0.7599024687511486, 0.7687711363957909, 0.7965512301846711, 0.8593605515974531, 0.9831100221524076, 0.9194983930536221, 0.8867349031422892, 0.8718496394228351, 0.8660541699265989, 0.864199229060292, 0.8637399472917858, 0.863661134756235, 0.8636704587797435, 0.8638006515922071, 0.8644494564069758, 0.8668508341246894, 0.8739273263033795, 0.8913388605817533, 0.9283727041861773, 0.9982461021042407, 0.9708562923099037, 0.9005568355913092, 0.7493472324752402, 0.46738424678746904};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    int N = 50;
    int K = 45;
    vector<string> friends = {"0 1", "1 2", "2 3", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10", "10 11", "11 12", "12 13", "13 14", "14 15", "15 16", "16 17", "17 18", "18 19", "19 20", "20 21", "21 22", "22 23", "23 24", "24 25", "25 26", "26 27", "27 28", "28 29", "29 30", "30 31", "31 32", "32 33", "33 34", "34 35", "35 36", "36 37", "37 38", "38 39", "39 40", "40 41", "41 42", "42 43", "43 44", "44 45", "45 46", "46 47", "47 48", "48 49"};
    string loyalty = "NNNNYNYNNYNNNYNNYNNNNNNNNYYNYNYYYYYYNYNNYYNYNNNYNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.8547657550269042, 0.9841520606671548, 0.998789341732534, 0.9999428231208384, 0.999998757024366, 0.8694589699958112, 0.8897120149753704, 0.8770249626796566, 0.8794748676541694, 0.9183004545561894, 0.8884031616328225, 0.8858625194370315, 0.8881060904563087, 0.9141128696454164, 0.8747428594157269, 0.8776290488377556, 0.9441381890590799, 0.9241014218398277, 0.92210644594734, 0.9219809054083112, 0.9219771764814094, 0.9219771764814094, 0.9219784194570434, 0.9220244095554995, 0.9228248858637624, 0.9315978078881719, 0.880210709229467, 0.8685118225627423, 0.8918586338951997, 0.8685118225627423, 0.880210709229467, 0.8694589699958112, 0.8694589699958112, 0.8694589699958112, 0.8694589699958112, 0.8794040180430343, 0.8685590556368323, 0.9019404092621572, 0.8793033370166845, 0.8784046656333396, 0.8910966898315892, 0.8787216244199965, 0.8686025597840206, 0.9099302566371792, 0.8887400080296226, 0.8869799545319513, 0.8887400080296226, 0.9099302566371792, 0.8686025597840206, 0.8787216244199965};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    int N = 50;
    int K = 50;
    vector<string> friends = {"0 1", "1 2", "2 3", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10", "10 11", "11 12", "12 13", "13 14", "14 15", "15 16", "16 17", "17 18", "18 19", "19 20", "20 21", "21 22", "22 23", "23 24", "24 25", "25 26", "26 27", "27 28", "28 29", "29 30", "30 31", "31 32", "32 33", "33 34", "34 35", "35 36", "36 37", "37 38", "38 39", "39 40", "40 41", "41 42", "42 43", "43 44", "44 45", "45 46", "46 47", "47 48", "48 49"};
    string loyalty = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    int N = 6;
    int K = 1;
    vector<string> friends = {"3 0", "0 2", "0 4", "4 1", "2 5"};
    string loyalty = "YYYNNN";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.33333333333333337, 0.33333333333333337, 0.33333333333333337, 0.0, 0.0, 0.0};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    int N = 1;
    int K = 1;
    vector<string> friends = {};
    string loyalty = "Y";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {1.0};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    int N = 50;
    int K = 39;
    vector<string> friends = {"2 31", "17 36", "39 42", "23 32", "29 45", "20 46", "28 38", "29 37", "32 37", "28 44", "5 22", "1 31", "39 49", "5 17", "2 35", "24 44", "3 14", "22 40", "5 6", "20 42", "11 36", "9 21", "26 42", "38 41", "40 44", "19 48", "4 18", "0 31", "19 23", "22 35", "13 21", "35 39", "17 18", "10 14", "33 37", "10 19", "3 47", "9 14", "12 21", "23 24", "2 7", "16 46", "6 15", "43 47", "13 27", "8 40", "15 25", "15 34", "12 30"};
    string loyalty = "YNNYYYYNYYNNYYYYYYNNNYNYYNYYNNYYNNNNNYYNNYYYNYNYNY";
    TeamManagement* pObj = new TeamManagement();
    clock_t start = clock();
    vector<double> result = pObj->getDistribution(N, K, friends, loyalty);
    clock_t end = clock();
    delete pObj;
    vector<double> expected = {0.7462137117320802, 0.7028145289069521, 0.9298119347767253, 0.7462137117320802, 0.7487416218408114, 0.7562141537645071, 0.7462137117320802, 0.6912421420433965, 0.7578732407025572, 0.7462137117320802, 0.7800799659790643, 0.6767052884564533, 0.7462137117320802, 0.7462137117320802, 0.7935979429692165, 0.9837778235792866, 0.817384454706068, 0.9837778235792866, 0.7456709443973356, 0.9346534767298722, 0.7667600744845977, 0.7462137117320802, 0.7582888118766762, 0.8389452601958968, 0.764655300440159, 0.7331590550393495, 0.7462137117320802, 0.7462137117320802, 0.7437363076192637, 0.7439430315112134, 0.7462137117320802, 0.9442689888935717, 0.7446708289833612, 0.7044283253023851, 0.7331590550393495, 0.7724914967769639, 0.9117414901949285, 0.9464943658125133, 0.7914455001506301, 0.7493349872453949, 0.7674544127409717, 0.7462137117320802, 0.8252352699336367, 0.7462137117320802, 0.7888614849513357, 0.7551735391004382, 0.7651863436952152, 0.7462137117320802, 0.6949516788933064, 0.7524907961702665};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8433628&rd=13512&pm=10107
********************************************************************************
#include <algorithm> 
#include <string> 
#include <set> 
#include <map> 
#include <vector> 
#include <queue> 
#include <iostream> 
#include <iterator> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <sstream> 
 
using namespace std; 
 
#define FOR(i,a,b) for (int _n(b), i(a); i < _n; i++) 
#define REP(i,n) FOR(i,0,n) 
#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i) 
#define ALL(c) (c).begin(), (c).end() 
#define SORT(c) sort(ALL(c)) 
#define INF 1000000000 
#define X first 
#define Y second 
#define pb push_back 
 
 
class TeamManagement { 
public: 
    vector <vector <int> > e; 
    vector <int> u; 
    string lo; 
    int n; 
    int k; 
    long long res[64][64][3]; 
 
    void go (int x) 
    { 
        u[x] = 1; 
 
        vector <int> j; 
 
        REP (i, e[x].size ()) 
        { 
            int y = e[x][i]; 
            if (!u[y]) 
            { 
                go(y); 
                j.pb (y); 
            } 
        } 
        while (j.size ()<3) 
            j.pb (n); 
 
        vector <int> nn(3, 51); 
        REP (i, 3) 
            if (j[i]==n) 
                nn[i] = 1; 
        int y1 = j[0]; 
        int y2 = j[1]; 
        int y3 = j[2]; 
 
        int n1 = nn[0]; 
        int n2 = nn[1]; 
        int n3 = nn[2]; 
 
        REP (c1, n1) 
        REP (c2, n2) 
        REP (c3, n3) 
        { 
            if (c1+c2+c3>k) 
                break; 
            int cc = c1+c2+c3; 
            res[x][cc][0] += (res[y1][c1][0]+res[y1][c1][2])* 
                             (res[y2][c2][0]+res[y2][c2][2])* 
                             (res[y3][c3][0]+res[y3][c3][2]); 
            if (lo[x]=='Y') 
            { 
                res[x][cc+1][2]+=(res[y1][c1][0]+res[y1][c1][1]+res[y1][c1][2])* 
                                 (res[y2][c2][0]+res[y2][c2][1]+res[y2][c2][2])* 
                                 (res[y3][c3][0]+res[y3][c3][1]+res[y3][c3][2]); 
            } 
            else 
            { 
                res[x][cc+1][1]+=(res[y1][c1][0]+res[y1][c1][1])* 
                                 (res[y2][c2][0]+res[y2][c2][1])* 
                                 (res[y3][c3][0]+res[y3][c3][1]); 
 
                res[x][cc+1][2]+=(res[y1][c1][0]+res[y1][c1][1]+res[y1][c1][2])* 
                                 (res[y2][c2][0]+res[y2][c2][1]+res[y2][c2][2])* 
                                 (res[y3][c3][0]+res[y3][c3][1]+res[y3][c3][2]) 
                                 - 
                                 (res[y1][c1][0]+res[y1][c1][1])* 
                                 (res[y2][c2][0]+res[y2][c2][1])* 
                                 (res[y3][c3][0]+res[y3][c3][1]); 
            } 
        } 
        /*cout << "done " <<x << endl; 
        REP (j, k+1) 
        { 
            cout << j<<  ": " << res[x][j][0] << " "<< res[x][j][1] << " "<< res[x][j][2] << endl; 
        }*/ 
    } 
 
    vector <double> getDistribution(int N, int K, vector <string> f, string l) { 
        n = N; 
        k = K; 
        e = vector <vector <int> > (N); 
        lo = l; 
        REP (i, f.size ()) 
        { 
            istringstream iss (f[i]); 
            int x, y; 
            iss >> x >>y; 
 
 
            e[x].pb(y); 
            e[y].pb(x); 
        } 
 
        vector <double> r; 
 
        REP (i, n) 
        { 
            u = vector <int> (N); 
            memset (res, 0, sizeof (res)); 
            res[N][0][0] = 1; 
 
            go (i); 
           // cout <<(res[i][K][1]+res[i][K][2]+res[i][K][0]) << endl; 
 
            r.pb (((long double)res[i][K][2])/(res[i][K][2]+res[i][K][0])); 
        } 
        return r; 
 
    } 
 
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/