/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8584
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class DNAString {
public:
    int minChanges(int maxPeriod, vector<string> dna);
};

int DNAString::minChanges(int maxPeriod, vector<string> dna) {
    int ret;
    return ret;
}


int test0() {
    int maxPeriod = 3;
    vector<string> dna = {"ATAGATA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    int maxPeriod = 2;
    vector<string> dna = {"ACGTGCA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    int maxPeriod = 13;
    vector<string> dna = {"ACGCTGACAGATA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    int maxPeriod = 1;
    vector<string> dna = {"AAAATTTCCG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    int maxPeriod = 12;
    vector<string> dna = {"ACGTATAGCATGACA", "ACAGATATTATG", "ACAGATGTAGCAGTA", "ACCA", "GAC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    int maxPeriod = 3;
    vector<string> dna = {"TCGTCGATGATGACTACT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    int maxPeriod = 2500;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    int maxPeriod = 2500;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    int maxPeriod = 1;
    vector<string> dna = {"CG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    int maxPeriod = 12;
    vector<string> dna = {"GATCTCTACACACGTCTCCCCCTACCAATTCCCCACAACTTGGTTGGGAA", "TTCGAGTCGCTTGTGAGACCTCAAGAACTTGCTCTAGTCATATTGGCGGT", "AGGGCTGTTATCTCATCTAGTATAC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 70;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    int maxPeriod = 142;
    vector<string> dna = {"TCCCTGACGGCGCTGGCAGGTCATGAAATGGCAGATCAACCAGCTCTTGA", "GGTGACCAGAGGGGTTATCGGGCCTACCATCACACTCACAAACACTAATC", "GAAAGAATTGTGTCCAATTTCGGCTTGTATTCCCTATTATACGCGTATAA", "CCCGTCAATGGGGACGACCACTAGTGCGATGTCTGGCGCGTCGCGATTCG", "TTGTTATTGCGGCTGGTAGTGTGGCGATGTTCCGGTTCGTCAGTGGTT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    int maxPeriod = 180;
    vector<string> dna = {"AAACCTTTTAAGTGGATGTCGATTCCGACGCGACGCAATTCGTATGTTGT", "ATGCCTGCTAACACGGTTGTGCTGCTTTGTCTACTCTCATTCGGAAGACG", "CGAGGAAAGCCTGTCGGAAGGTATATCTGCTTCTCCGAGGCAGAGTGGGG", "AGGAATGGATAGCAATGTTGGGTACCATTGCTTACAGCACATCTACATGT", "AGATGAAGCTCCCGCAGGTACCCAAAGCGCCCGAACAGAACTGTGCTTTG", "CACGTCTCCACGTGCTTCCCGGATACGTAACTGCGAGTTGATGGAGACAT", "TACCCTGTTTATATACGTTATTTCCCCAAATGACCACTAACTTCTACCGT", "ATCTGTGTCACGAGAGTATTT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 134;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    int maxPeriod = 461;
    vector<string> dna = {"GCCGTACTCATGGAGAAATTGCTACACACGCAAGTCACGTCGTCGCCAAA", "GAATATCACACGATTTTGCCCTACACACCACGTTTGATAAGCTCTGCGTG", "TGTGGATCCGCACATCGTGCACATCCGAAAGAGCTCCCTGCGCGGCTGGG", "GCTTTCCAGGCCCCGGCTTGTTTGGCAAGCTTAGGGTTTACTTCGAGCCC", "ACCAATGGCTAGCGAAAGCCCTCTTATGTGACGACGATTATACGTTTATT", "ACCGCTCGTGACCTTCCAGTAAGAGAGGACACAAACCGCTGAGGAGTGGT", "ATCAAACCCTTAGACACACCGGACCCCGAACGTTTATGAACGAATTTCCT", "CTCCCACGAAAACGGTATATGCGTTCAATGAGGCGTGGCACTAAGGTTGC", "GTTCACCACGTTGCTGATGGGCCATCCTTTATGGAAGGACCACCGAAGAT", "ACATTGGTAAGTGAAATCCAGGCAATCTCGGCTGGATCCGCCTT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    int maxPeriod = 393;
    vector<string> dna = {"CACGACCGGCACCGCGGCTACCGCGACTTTGTCCCACCTCGACGATAACG", "TATCTCCGGGCCGCAAACGGACCTACAGTGTCGAACCACAAGATCATACC", "AAGAAGTCATCACCATGGCAGCTATTCTGTGCCTGCCCTGAAAGGTGCAA", "ATCTGGTCAGATGTCGAAATAACTGAGTGGTGAACATGTTAGCAACTCAC", "TCGTGAATGCCTCGGAGAATTTTCGAGGTGTACGCAACTCGATTGCGCGC", "TCAGGCGCGTGTGGATCGGACACCTCCGACGCGCCTCCCTGGTCAGAAGC", "CGTTTTTTGTATAATCTTCCAAACTAATCCACAGCGCAGCGCCTTAATCG", "AGTGCGCTGAACGGTCTGGCACCACCATGGATTGCGCTCTGGCCGCTTCC", "GCACCTTCGGCGTAGTGTAAATTGTCTATATCGGATCTGAGACTTTAATG", "GTGCTCGAACATCCGCGCGAACTGGGTATCTTTGCTCGTTGTCCTCCGAG", "GCAAGAACTAGGTGTTACACCGGTTCAGTAATCTCCGGTGATCAGGGAAC", "CGCAGTCCGGCAAGGGAATTTACCTCAAAAACCGGGACATATGGGCCCGG", "GAAATCGTGTCACCGAC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 160;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    int maxPeriod = 713;
    vector<string> dna = {"GATTCATGTTTCCGGCCACAACACAGCTCTCCCAGTGCTTTATGGAACAG", "AGTTCTTAACGCGGCCGCATTGGAGTCATCTCTGCGCAACCAGGCTGTGC", "CAGGAATCGGACACGCTACGCCATTAGAATTCGGAACGGACGGACGGTGT", "ATAAGTGCTATAATAAGACAAAGCCTAATAAGGATGGAGTTATGCACGTG", "ACCACGGGTATTGCAAAAAGCATTTCTTGAACGCACGCCATACCACGCAC", "GAGTCTCCGCTGAGGCCGCGAGAGGCGATTTCCTCCCGATCGACACGTCC", "CGGATGAAAATAGATTGAGATGAGCATCCCTAATACGGTGGATGTGTTAG", "ATACAAGTGTGGATCTATGTGTAAGGTAGACGACCTACGGTGTGTATCGT", "TGCGCACTCCAGTACGACCCTCCAGGACACCAAGCATCTTTCTAAAAATA", "GTACGTAAAGGACATTCACCAAAACTGTACTCTAACGAGGGCGATATCGA", "GGCGAGGTGTGGCTCTCCGGGTTACTGAACTGATGGTTCTAGCGTGAGCC", "CGCTGACATTCCCGCAGAAATACTCGGGGTGCTATGAATTCGATTGGGCA", "CAGGTGTGGAGTGGCAACACTACCTGGAATACATCCTAGCTGCCGGTCAG", "TTCAGTAGACCCGATCGACTTCCGGGTTAATTAGCCCCCAAAGTTCATCA", "CCCAATGGTAAACTTCTCATTGAGTCAAATGAGCCGTCTA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    int maxPeriod = 47;
    vector<string> dna = {"CAGCGCCTTGATGATAACATTGCGTGAAACCTTTGCCCCAACCTTATCGC", "CGGCTATCGGCGCTACAAGATAGCGACGCGCACTAGGAGCAATCATGATC", "TCAGTTTGATGTATGTGCCCTGCAGACGACAGTCTCCGTCCCCATCCGGT", "CCGCGAGTCGGGTCGTGTGGTCTTTCGTCAGTGGTCTGTGAGCGTACAGG", "CAGGGGACGAACCGTGGTTACGCGTGCCGGTATACAGGAGCAAATTCTTG", "TTCTCCGCCCTACTGAAGTCGGCACTATAGTGTAGATCCATCTATAATTG", "CGTTCAACCCTTCATCACCAAGGTGGCTAGCTCGTTCTCCCCATCAGTTT", "CATAGAATCAGATAGTCAGCACTAAATCCGACATTCCAGGCAGGCTACGA", "GTATCGGTTTTGCACGTCCTGTGCCGGGTTGATAGCTCAAGTCTATCCTC", "TCGTTTGATTTCCAAAGCTATTTATCATACTATCCGGAATAACAGCCATA", "TAGAGTCTCTCATTACTTATGTAGATGCTATTGTTGTTGTATGTTCTACG", "AACCCCATACATTAACATGATATAAGATTGCAATGAACCTCCGCGACCCG", "ATACACGACAGGCACTGCATTTCAATGTCTAGTAAAGTGTGCGGAGTGAT", "TCTAAAGAACCAGCCGATCCCGTCTAGTCGAGGTTGCAACTGTTGCCCAA", "CATCAATCTTACGTATCTCATCCGCCTAACTCTTTTGTAGACACGGTAAG", "ATCATCGCAAAAGTCTGGACTCACATCGCGCCCTATAGTACGTTCTCTAC", "GTTTTACACTGCGACGTGGTGCATAATTGTATAACACCTGAGTACTAGGA", "GTCATCTTCAAAT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 532;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    int maxPeriod = 438;
    vector<string> dna = {"GACAGCGGCGACATCCGCACTGTCATTGACCAAAGTGTCACACGCACACG", "TTATTTTACCATCGTAGCGACAGTCCACAACGATACATCTGCGCAAGTGG", "CTCGGTCATGCTCCTGTTGCCTTGCTGGCCCGTAGGACCAAACGCATCGG", "CCGCTTCGGAATCCAAAAAACGCGACGTCGAAAGTAAGTGGGAATTAGTA", "GCAAACGAGCCGCCAGCAAGCGTATCTTATGCGTTTAAGTTGTCCACACG", "TGCGAGTCATTGGCCTCTGTCGATGTACGTACTAGTTATATCCATGGATA", "ATGCCTTATCACCGGGAACGTTATGAAGCTCGAATTGTCACTGAACAGTG", "GAACGTGGGTGTTCCCCGAGCTGAGGCATGAACCATGTGTCTCAACTGTC", "CATCGTGCCCCTCGTTCAACCTAATTCCGATTTGTCCCTGGATGACAAGC", "TGGAATTTCTTGGGCAACACAGGAACACTGTCCGACCACCGGAAAATCTA", "CTGTACCCCACTACTCATGACAGCTTCGGCACGACGCAGGACGCGAATTA", "CCTCCGTTACACGGGTATTCGATCCGAGGAGATATTCTATCTTAGCCCCG", "TGTTAGTTGAGAAGTCGGAGTTGCGGAAACCTGGTTGAAAACTTCGTATT", "GCGACTCATCCATGTGGTCGTCGGTCCCAAGGCCTCTCCGACGCCGGACC", "GCGGAGACATGTTCTGCTTTATTAGCACAAAATTGTTGGCTGAATTCAAC", "GCATAGCTAGTCTTGTGAGCTACCTGACGTAAATATGTATAACTCAGGAC", "CACCGCTTACTTGTCCAGGTCGCCCTTCTTCGAGAGGATCGTAACGATAC", "TGGTTTTACACTCGTTGCCGAGGGCGAGGACTGAGTCATTGTCATTTACT", "AGGACGCCGGTGCATCCCAGGTTTCGAATACACAACCACCATGTGCGCTG", "ATGCACTAAATAACGCTTAACGTAACTGGTCCACCA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 371;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    int maxPeriod = 1103;
    vector<string> dna = {"TGGGCTTAAGATTCAATAGCGAGACGGCCGACGTCTCTCGGGGTCAGTGG", "AAAGCAGCGTTCGCGAATCTTCTAGACCGCCCGGCTACCCAGTTCATTAC", "GACGTGAGTCTAGCCTGCGATTCCCGGTCGAGGCGCGTCCTGGGTGAGTT", "TCCAACCAAGATCGGGGGATCACGGACCAACCATCCGCTAACTGGCGTGA", "AGTACATCCCACGACTACGTTGCTACTGGCCAAATATAGGCGCCTGCCGA", "CCAGACGCCGGGAGTGGGGTGTGAGTACACAGGTACATATTAGAGCATTA", "AAATATAAAATGATCGGGCAAGGCGGTGCTTGAGTATTGTCTCCTATGCC", "ACAGCCGAACAGCGCTTTTCAGGGTCCTTTTGAGGTCACTACTACGCGCT", "AATTTGATCGGAGCGGAGCCCCATAGAGGACGGAGGTCATCCTTTGCGTG", "GCCAATAGCACTGCACGCACACAGTCTGGGAGGAATGATGCGGCAAAAGG", "ACAAGGCCAAACCAACTGATGCTCGCAGCTTCCCTCGGCCTATCTAGCTC", "GATAAATTCAGAAACGCAGCAGAGATGAAAGCTTTCTAGTTGCGCCCGTA", "ATCTTGGGGGTCCCTTGGCCTGTTACTAGTAGGACCACGATCGCCCTCTC", "CTGTCAAGGTGAAGGCTATGTGAACAACTAAATCTCACGTAAGCATCAAA", "ACGTTGCGTCCGATAAGGACAGAAGTAGATTATGGCTAGGGCTATATTGG", "GCTGTGGATTCCACTCTGAATCCGCCACCACTCCTTTAGGCGCGAGGTGG", "CAAGATGTCACAGTGCAGATGATGATTCTGTTAGGGTATTATAGACAAGC", "CGGGAAGGAACACTTCACCCTCTGCACCATCGGTCACTTCTTGAAGAGTT", "AGGAATCTTTCCCAATCTCATTCAATCGCTGTTACCCTGTTTTTGTGGCC", "ATCACCATTCTGCGCGTAATTAGGTCATCTAATATATTTGGAGGCAAACC", "GGGCGGATGAATATGGAAACTTTGTTGAGGGTTATGACTAGTAGTGAGTG", "AACGGAACGTCAGTTCTCAGTCTTATGGCAGAGACTGGGAACTGGAGGCA", "GGCGAAATG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    int maxPeriod = 632;
    vector<string> dna = {"GTTCGATGTACCCCCCGTACCAGTAGTGCGCCGAAGCGTAGCCTTAAACA", "CAAAATAGGCTTACCTTCGTCTGGCGGGGTTTCGGGACGGGGAATCATGA", "GGCCAGTGCTAGCTAAGTGCCCTATGGGTCTCACTGTGGTAGGGGCCAAG", "GTGAGTCACGCCTGACGATGGGAAACTCGACCATATCTAAATGGGTTGAA", "CGGCCAGCTGGGACTGAGCAATTATGAGCTATCCAGCTTCGCAACGCTCA", "GTACGCTGCACCCACAGATCCCCCGCCTAGAGAGACCGTCCGTACTATGA", "AGTGTAGGACGTATTTCATAGCATATGATCGAGCCGCACCCACGCCGCTC", "GCCTGTTTCAAATGCTGTTGAAATGAACTCAGATGTGTAATCTCCCAAAA", "TCCGGTGAAGCCGCTCAAGCACGCTTCCTTCCTGCTGATGGGATCGCTCT", "CTTTTTCACGTCTGTCATCGGGCGTGATAGCAGAAGGTTCGATGAAGGGT", "GATAGGAGAGGACGTATGTGACAAACCGAATCGTGAACCTTAATAGGTCG", "GGGCTCCTGAGATTAGTTTATCAAGGGAACCTTCCCGTTAAGACGAAGGA", "ATTCCTCCCTGTAAGGCCTGCACAAATATTTTTGTCGCTCGAGACGTCTA", "CGTGGGCCAAACCATAATTCCATTCAACGTTTAAGTTCAAAGATGAACGT", "GCTATTTTGCGGAGTTCGTATAGAGGCCGTCTATAATGACTCCAGAAGCA", "ATGGACTGCCTACATTGAGCATCGCAGGCACCCGAGACGGATACGTTGAA", "CTTATAAGTAAGGCGCCTACTTATTCATGAGCTGCTGGAGGCTCTTGCGG", "GTTCTGAGTATCTCCTGTCCTCGGTGAATCGTTCGTTGCGTGTACGGGGC", "CCTCATAAGAACGGAGGGCCCCTGCGGTGGAGAGCATTTTCGACCGTGGG", "CGCCCGGTAAGAGTGTCCTAGTATACTTCCTTACATAAAGCGCAGTGATA", "CTGATTCCCTGATAAGTGTTTAGTACGGATTGCTTTTCCGTAGCGCGGAC", "TTGCACGAAACGCCCGCTTGCTATCGTAGTTTCCCCCTACGGAGCTACTA", "TGCAAAGGGTTTTATTCTGCCTGGGTTTTATGACCCAGTCATTCAGGTCT", "TACTCGGATCAGACGGCTTGTACACCTTTAGTAGCCTCAGCCTAGGAGCA", "GTGCTCCATAAGTCCCAAATCAAATCAAGACG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 440;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    int maxPeriod = 866;
    vector<string> dna = {"TTGCTGACAGCAGGATCACCAGCATATCGCACAAGAGGTAACGGGTTCAT", "CGACTTAATACCGGGTCGCTAAACACATGTCCCTATCTAGAAACCTTCAT", "CTTGAGTACAGATGACGGACCAGACATGCTCGGACGTTTTACCCTGGTAA", "CACTGACAGGCTGTTAATGGATTCCCCCTGGTCCCTTCATCAGGGTCCGC", "AGGTAGCAAGAAGATTAACGCTAGCACCAAGCTGGTTGCTCTTCGTTGTT", "AACGTAGCTGTCAGCATAGGGCTTGATACTGGCTAGTCACACTAAAGGCG", "TTGTACACATCCCGGCCCTCCACGACTCAGAATTTAGGGCGAACTGCAGA", "GCGGCGGAAGCGAGCTACGTGTCTCGCACAATTCGTACACGCCAGCGTCC", "TGGTCAACGTGAGGTTTTGGTATCGGCAGTGAGAATCTCCTTAAGCTGGG", "ACGCTTGCCACTATTGGAGAATATACCAATTTATTTAGGCGAGTGCCGAA", "AGGCCCCTGTCACAATAAATCGAAGTATCCAGGTCGCATATGGCCTTGCT", "GCAAACATGATTATCGTACTGTCCTCTGCTATGCTTATCTACTAGTCGTT", "CTGCTTAAGTGGTCAGGTGCCGGCATAACAGAACAATGGTTTTAGGAAAA", "CTAGCCTGCAGCGGATGAGCACGTTATATAGGCGCCAATAGTATCCGGGA", "ATCTGCGTAATCAATCCCTGGCCAGTGGCGTAAGAACGAAGTGACAGAAA", "GAGAAACCCCTACCTAGCAGCAATTAGACCCAGCTTGCCGGCCGCGCGAC", "GCCGTCTGTGGCCTCGTATGGACGGCCAGCTACTCTTCACTACGAGCGAC", "TCTATCTATGCTGTGAAGATACTAATGCCGGAGGCCGCACGCGCCCAAGT", "CTGTTACCGCCCTGCCTCATCTGATTATCTTTTAGTGCGTCACTCATTGT", "CGCGATGCAATATCCAATCTCGGTGCCAAAGTTGCCGTATTCGCTGCGAG", "ATCCGGTGGTATTATACGGTACTCACGCCGTCGTTCCAATCCTAAAGAAA", "TAATTATTATCTAGCACCTTCTGGGAGGTATGCCGCTTTACTGTTCGGCC", "TGGTCGAGCCGTGCATGGAGGCCGCAACAAGGGCTGCCCTAGTGAGCCCA", "ATGACGTTTGCAATATCCTGCGAGTAGTGTTGCCTGTGTCCCGCTCAGTT", "GTAACTAGACCGATGCTACATACCTTATTACAATTAGGAGCACGTCTCAA", "GATCGTTCCGCTTCTCAGCAGATCGGCGACTTTTCATGTCACCCGCTTCT", "TTGTTGCGGTGATCGATCCTTCAAATACGTCTTACTAAATGCAGCGCTGA", "CCGTC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 358;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    int maxPeriod = 1075;
    vector<string> dna = {"GGTAGTAATTCCAGCAAGCACGTCCCACCCAAGAGTTCTCAAAAAGTCAT", "AGTCAGGACCACTCCGCCTTATCGCAATGTAAGGGGACTCAAGCAGTAAG", "ATCAATATTCTGGCATTTTGAACAAGGAAGATTGCATGGGGTACTGTGGT", "GGGACCGACGTAATTAAGGTCTATTAGTGCGCAACTGAATCCCGATCCTG", "TCTCTATACACAATCACAGACTTACAAGCCACAGTCCCAAGAAGATCTCG", "ACGACTCCACTACGCACTGTGACCTTCTACGTAAGGCTGTATGGCGACCC", "ATGGTGTAACTCACTCGCGTTCCCTTAATTACCTGTAGTACGATGCTGGC", "CAGGGGCGGCGTATGAACATGATGCACAGGGCACAATGGCAATCTGGGTT", "GTTTTGCTCATTCTCTCCAGATCCAGAGGCAGTATGCACCGGGCACTCCG", "GCTTACGATAGGCCTATACCTCTGTATCGTTATACTTAAACAGGACGAAC", "GCCACATCCCGGTCCGACGATGAACATCTCCGCTGCTAAATTTGTGTAAG", "TATGGTATAGGCGGCCGAGGAACCGCCTCCTTACATGGGTGTCCTGAGCG", "GGGCGAGGGATCTGACCTATCAGAGCCCTGTGTTGAAAGGCCGCCATATC", "AGGCGGGCGACACCATCAAGCTTGCAACCCGCTGAAACCCAGAGGGGCCG", "CAACATATCCGACGATCTTTGAGTCGCGCAACCTATAATCAATGCGGGGA", "TTGAAAAGCAAGCCCTGCGCGTCGGGGTAGTCAGAATCAATAACATATCA", "TCCATTCCTTTAAATGGACATGATCTGTACCTTGCCTTTGCAATATTTCT", "AAGGCCGGCATAGTCGCCAGCGATAATTTAATTGACCAATTGCACTGTCA", "ATCATCGGTACCGGGCTTATTGTGTAAAGTCTAACATAGCGGCTGGCGAA", "GTTTCTCGCCAAGCTTATACAGCCCCACCTGAAGTTCGTATGCAGTTGGA", "GAAATCTAGACAGTCAAAAGAAGACATAGTTAACTACGCTGTATACAACG", "CTCATTTAACCAAGTAACTACTCTCTAGTGTTTGGCACACCCTTTTGCTA", "CTTTGGCCCGGTGGAGTATCACGAGCGGGTAAGTCTGCCAAATTGTAATT", "TATCATGGAATATGTTAACAGCCGAAGGCTTTAAACGCCGCACTCCACCC", "TGTGTTTCTGCAGATCAAATCGCGTTACATTTTCATTGGTCCGGCGGGGA", "GATACTGGGTATGCGACTCCCATCGGACTTAAACGAAGGGGGATTATTGG", "AGGAGACTTCCCAAGCAAGAGCCTTCATACACCGGGGACCCGAAGTCCTT", "TATCCCGTTGTAGTAGGGGGACTTAGATAATCTTCTAACGTGATTCAACC", "TTAGAGCCAGTGCCTATAAGTGATCCGGGCTGCCTCGGACGGGACCCTTG", "TAGTGAATATGCAGTCACTGACACGCTA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 291;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    int maxPeriod = 1504;
    vector<string> dna = {"CGGCATCCCCGGTAACAGTATTACGAACGGCACTAACCAGGGACGTGAAG", "TCGAGTGGACGTGAAAAGAGAACCGACATTTTCCGAGGAATCGGCACGGC", "ATCTTTATTGTCCACTATGTGAGCCTTTCAGTGATTGTGGCGCTCGTTAT", "TCATCCTCAATATACAGAGGAGGATTTCTCAGCATAAGCACCAATGCACT", "GAGCTAAGAAACTCAAGCTTGGACTACGTTGGGCACTCTCTAAAGTCCCT", "GATCGCACACTTTTTAGCGAGTCACCTCGACCCCTGTTATGGAGGCAGAC", "CCTACGCAGTTTGCTGTATCGGCCGACCCGGGATACTAGCGCGAGAGTGC", "GGTCTGGTGCAGTGCTTAAGGATGGGAGCCCTTGGGGGTCTTGACTTCCT", "TGTGGTTGCGTTTGACAGTTCTCGCAGATCGCCGGGTTCGACGCATAAAA", "TTCAAGAAACAGTGCTATAATAGTATCGGGGGACTCATAGCGTAGGAATA", "TATGCTGGCTATTCTCGGCCAGTAGCAGCGAGATTGCGCACCATGAAAGT", "TCCGAGCTCACCTGGTCACATTACAGAATAATGGGACTGTCGTCACGGTG", "CACGTTGAACATTTGAACGGACTTTCTGTCGGGATCCGTGTTTAAGTTGA", "TACACTGGTCCTTGTCCAGAATACATGGCTAGAGCCGTTTGGCCAACGTA", "TGTTTAGCCCTCTTCCATCCTGTGGTGTTCCATTCGCTTAGTTTTTGATA", "ATCCCTCACACTTATCGAGACGCCTTGCTTGGGAGAGTCGCCAACAGCGG", "CCGGATCAGGAGACGACCCCGGGAATTACGCTGGCAGCTTTCACCTCATG", "CCCTAAACAATGTGGCCAATTGAACCGGAGGTTTGTTCACGCCGAGAATG", "AATTGCGCGTCACGAAATGTCCTGGCTAAAATGAACAAGAGCCCGCGTTT", "TTGTCTGCGCTAGGCCGAGTTCCCACCAGAAGCTTTGAGTAGCCGTGCCA", "CATCATGATCATGCTCCTAGCTAGCTAGTCCCATTCGGTTTGAACATAAC", "CTAAACTCAATAGAAGAGTATACAGAGGTATGGCGTGTACGTTAAAATAT", "AGGCGGGCCACGGCTTAATCTAGCGGTCATAAATACGGACCGTAGTCCCG", "ACCCACCCTTCCACACCAAGATGTGAGAGTCTTCCGATGTAGTGATTCCT", "AGGTCAGCTTTGCACATACTCCCTCGAAGTTATTCGCCTTAGACAAGGAT", "CGCTACTCAGAGCCACTGTGCGCTAATCGAAGTTGATTGGAACTCCTATC", "GGATTGCTCACAGGGCCCAACGAGGGCACTAGTGACGAGGTATAGTATCG", "CCCATCTGTGGTACCCCTCCTCAGATCATGTGATCGTTTAAACACTAATA", "ACTCCGACGGATGGTTCGTGGACCGCAGCTGCATACCAGGCCATTGTAGA", "GCACACGAGATGCTAAACATATTACCCGAGAGGATCGAAGCATAGTCACC", "TACGAAACACGCCGCTACTGCGGGAGAAGGCGCTACTCCTCTCGAAATCA", "TTAGCGTAGGTTCGTTTTATATTGCTGGATGAGAGTGCTCGCCTGTACAC", "A"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 70;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    int maxPeriod = 940;
    vector<string> dna = {"CGTAGGGGTGCGAAGACCAGGCTGGACCCCGAATAGAGCCGGCCCTAGGA", "TTTTGTGCCGACTTCGTATTCGCTATCCCCCCTTGGCGGGACGTGAATTC", "TCGGATGGTTACCCCTCGCCGATGTCTAAGCGTCGCTATGCTGCAGCTCT", "CGGGCCTTTGTAAGCGATGCACCTGGCGCTGCGGGATCGTGAATATTAGT", "CGCCCGCATTTGAATCGGATAGGTGCGTTTAGTTCGTAGGATTCTCAGCA", "CGCCGTTCCTTTGAGAAGCCCCGGATTTGGCGCTCTTTCAGGAACACGTT", "CGTCTGGCAGAACCCGAAAACAACTTCTTTCCAGACCCGTCGTGAAATGC", "GGATAAGTCAGCTGTAGGCCTCAAGGATGCGATCATCGGACCAAAAATAA", "TAGGAGGATGACGTTAGGTATGGATGCAAATTTCGTAGGGGGCTACCAGA", "TGCGTGCACCTACGCCAAGTGGGCGGGGCAATAAAGCGTTAACAGGCGTA", "AGTCCCGTGGACACTCAATCGGTCGTCGTGTATCAGACGGGCCTGATGCT", "GTACCAGCGTTACAACGGTCCGAACGGGCGTTCTGATAAGGCCACACTAC", "GCTACGTCAGATCCAGAAAGGGCACGGTTGTTCGCACTTCTCATCTAAGT", "CGTGCTTGACGGGTATTGCTGCCCGGGTACATCTGCCTGCTAGAGGTATC", "TGATCAGGTACAGTAGCTGAAGCGTGGTGCAGACTCGCTCGGGGTTTTGA", "GCTCTACGGTCGTATTGTGACTCCATCAGCTACTCGTCATTGTTGAGAGT", "TCCGCGGGTAACGAGGACCTACAAGCCGAAGTTCGATTCAACCTAGCCCT", "TACAGAATTGCTTAAGACCGAAGGGGCATCCGAAGAATTCATCCTCTGAT", "AGTATTGTCCTGGACACGTCCTCGTTGTAAGAATTGCACGCGGTCCCACC", "GCAGCTCAGGTACCCGTTGGATTCTGGTCACCCAGACCCAGCATCCTCAG", "TATCAAGACTTTTGCGATACCTAGTTTGGGCAACCCTGAAGGTTCCGTGG", "TTTGAGAGGCGAGCGTGGGTCACTACAAGGCCCGATGATTTCTTAATGTG", "ATACGGGAACAATAGTAAAGAGCAAATTAATGCGCTATGGGTCACATGAA", "TCTAATTCGTCTGCACCCCTTAAGTTTAATGTCCTTCGTACTGGCCTTTA", "AAGCTGGCAATCTGCCGCAATACCGCATAAATAAGGTACGGATCTTAGGC", "TGCCCGTAGTCATATGTTAGACAACGGAGACTCATTGGATTAATACTGGA", "GGATGATCAACGCTTCGTTAATAATGAGGATAATAATCCGATTCACAGTT", "ACCGAAATGCGCCAAGCTCGGCACACAGCTACGCGGATAATAAAATCCGC", "GTGCTTTCGCAAGACTGTTTTAGAACCTGGAGAAGTATAGGGCACATAGT", "GCCAAATATGCAGCCGCTCTAAACGACGTATTAAGGACTCGACTATGTAA", "AGTTATGTGAGGTACCGATTCCATCTTAACGTTCTGGGTGAATTTCGACA", "AGCGGCGATTCTAAAGTGGACCTCTTTGGCTATCGGGGCTTCGCCGATAG", "AAAATTACTTGTAACCGATAAGTGTTCGATATAGGGTTGTTCCTTGCCAA", "GCATTGAGCAGGTCGGAACTTGTGACGAATATGGCGCACCCTTAAACCAG", "ACGCTAGAAACCCTAGTCGCGATC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 578;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    int maxPeriod = 603;
    vector<string> dna = {"CTTTGCTTACGTGACAACTCGTGGCAATTGTGGCTGAAAAAAGTAAAAAT", "TGTAGGTGTTGTAACCAACACCCTCTTCAGGTTGGGGTGCTACAGCAACT", "CGCTATGGCCGTTGTTACCCGCTCCCGCGCTCGCCTTAGGAAGAAACTTG", "AATACCCCATACGAGGCTACCCTTTTAATACATTGAGGCATCATGCAAAA", "GGGCGCGCTGGTCACACCGGCTAGATGAATTGGAGACGTGCTCATCTGGG", "AGGCTCTGGCGAGCGGCACTGGTGCTTAAAAAGTGTTACAAAGTCCACGT", "CAGCATGAGAGTTGCTTACCGTGCCGTGGAGGAAATTTTTGCTAAAATAC", "CCGGCAGACAGACCATTAGGGACAACCTCTCCGCGGCCCGGTAAGACGAT", "CGCTGCATAGCTGACTCCCAGGAGGATTCATGGGAAGGATAGTTATGATT", "GCCACTCCCGGCAATAAGTGATCGATGGAAATTTTTCCGGTCTTGAGACT", "TGTATGATATCTACGAGTGTAATAATGACGTGAATGTTTTGCGCAGCTAC", "GTTGGTCTAGTTCGAACCACATACGGTCATAACTTCAGGGTACTAATCAC", "GGAGGCTGCTCCGCCACAAAACAACCACTTGCCCTGCCGCGTGGTTATAA", "TTCTTTCCATCTATCTACAATTGGTAGTGGTACCTCACAAGTGCGGGTAC", "TGCTGTGAGACGAACAGGGTGCTGCTTCCGTAGACTAGCGCGTTTCAGAT", "CTTCGGGTAGCGAAGCTCGACTTGCCGGGAGTTGATCAGCCTGTATCGGT", "TCCCGTGATAGTCGGATACATACGAATGCGTTTTGCAGAACGCCACTCGT", "CGTCCCTCACCGGTTCAGTGACTATTTTGAAAGGCGCGATACCCGCCATG", "CACTATACGCGTCAATCGATGCTACTAGTGGACTCCCTTTGGACGGTTTT", "TCCACTGCAGATGAAACCATCCCTTCCTGCTCGACTCGTTCCAGTCAGCG", "TTCTCTCCAGGCGCCAGGAAATATATACTCATAAACCTAAGATGTGTCCG", "CTCACAGTGTAGTGGCGTCCACTAAGGACTATGGGTAAACCGTAGCGTTA", "GATCAGGTTAGGCACCTGATCGAAAAACGCGGGGTCTTCGGGTGTCGTCC", "GCCCATACGTATAATTCTGTAAAAATGTTGTTGGATCACTACTGCCAAAA", "AAATTCCATCGACATCTTGTCTGATGATCACACCCACTCTCTTTTCGACC", "ACTCTAACGAGTATCTTTCGCGTGACGCGGCGTATAACGGTCAGACCACA", "AGCTTGTTACCGGCTCGAATGGGTGCTGTAATAAAACGAGTACCCTTAGG", "AGTTAATTGGCGTATATTTGCAGTTATTACCCAGCCCCCAACGGTTACGG", "TTAGCCGCCGCTGGATATCGACTTGCAATTAGTAGAAGTCGTTACATAAC", "TTGCAAGTGTATTTCGGGATGAGTGTTTGTGAAACCTTAGAAAAAGAAGA", "AAGTCCGAGACTAATCAATGGCTGCTGCCTTGATAATCGGATTTATCGTG", "CTTCTTCTTCGCAAATAACATTATCCCAGGGACATATCTAAGCCTCACGT", "CCCCGATTAAGTCCGTTGAGTTATCCCTATCACCTGGGAGTCAACGCCCG", "GACACGGCGCCCGCATGAATCTATCAAGGTTAAAGGAGAGCGGGACTAGA", "CAGAGCCCAGATACTTCCATATTATGCAATGGATGGCTTCCCCGAATTGG", "TAACACAGTCCAATCAGCCGAGCAGATGTCCAGTGTTGGCGGCACCAGGC", "GCAGCGGCCGCCGACGCCCATAACAGACCCGGCCGGGTTCTAGTGCT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 783;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    int maxPeriod = 508;
    vector<string> dna = {"CAGCCGTAGTTTCGCACCTTTAGAACCTTTCATTCGTATCAGTTTAATGG", "TTAAGGACACTTTTCTATCCGCAATATAGTATGTCACTTTACCACGCTAA", "TCGCAACACCCTTATTTTCGGTCGCTGGGAACGCATTTTGCTTCAGTTAG", "GCTGGGATGTACGGCCTACACGATATGACTGAGGATAAACTCTTTTATAA", "TTCTAAGTATGTAGTTATGTTATAACTATGTTTCCTTTTTCGGGGTCGTC", "GCACTAGTCCGTACTCCAAATCGGCGCTGCCCGATTTCAGGCCAGGGATA", "ACATAGGGTTAGTAGGCGGTACCGCCGCACCCCAATATGCGGTGACACAT", "CCGCATCCTACATACCATCTCCCCCGACGGGCTCACCTCATGGTTGTTTA", "TCGAATAATTCCGCGGAGATCTAGCTTCTGGGGTGATACCCAATAGATCT", "TAGCGGAGAGCTCCGCCTTCTCGTAGACCGTAAAGTTAGTCCCGTCAAGG", "GGTATCCTTCTCGGAATACGTTTGACGGTTGCGGCGTCTGTGAGGAGCAC", "AGACGCCTAATGCCGCCGGTCGGCATATTCCCGGAGGGACCGAGTATAGG", "AAACTGCCTTTCGACAGCGACCGGGTTTTGCCCTTGTTCAGGCCATGCAG", "TCATTTGAGGAAGTGCACATCCAGTCGGACGGCAGGAATCTCCCATGCCC", "ATAGGTGAATAAGCTACGATCTTTGCATCAGACCTACACAGCGGCGGTTA", "AGACGGTCGCTCCACCGTGCGAACGTACCTTTATAAACAACTAAATAGCG", "ATGAGCTTGTGGCATACTATGTGTCGTTAATTTCCTCCGGTTTGGGGGAG", "TGTGCGATAGGACCTAGTAAGTACCACGCGAGCCCTCATGCGTGGACTGG", "TGCATGTCCTAGCGCTTATCCTTAGAATTTCGGACAGGGTACGTTTACGC", "TGTTCATCCATTGCGCGGAAGTGCACTCGAACCCTCAGTGCCATGACGGA", "CAGCCGCATGGGTAAGTCAGACGAGACACGTACTACTCGACACAGTCTGA", "AAAGGTGGTTCGCTAAGTGCTCATTGCGTTAGGAGAGTGTTGCCGGTAAT", "ATAGAGAAATAGCCAGGTCCAGCCCTATCGTAAGACCCTTAACACAGGAA", "ATTATAGCATGGTATTACACCATCCACCCTAGTGTTTTTTCGGCAGTCAC", "AGCGTCGAAACTTGCGCTGGATAACTCCGATTCGAATCCGGCGAATTTTT", "ACCACCATTTTCGCTAGGTAGATCTATCCCTTATGTACGCGGGTCCGCTA", "AGAATACCACTAAATGTGAAGGCATTTCTTGCAACATCACTTAAGCACCC", "GGTCCTTACGAGATCCGGCATGCGCACTCTTTCTGGGAATTCTCCAGGGT", "TGACAGGGCCAGCATGAGTAATAATAAGTGTTAGATGAGCTACATCGCGC", "CCGACAAAGTACGGCCGGGTGAGTGGGCGGTGAAGTGCTATCGAGAAGAT", "CTGCGTCCACCTTCACCTTTGCGGTTACTGTGCCCGTGTTTACGGTAACC", "TGTGCTCCACCAGTACACCTTCGTGCCTCCAATGCACATGGAGAGGCGTA", "CAGTCCGGGGGACCGGAGCCGTCGGTTGAACAGCACAGTGTTCCATGACA", "TGATGGCACCCATCAGCTATGCTGATCGCTGTATTTCGAATGACCTTCAC", "AAGTGATACTTGCGTAGGCCGGGAGAGTTTGTATAACCTTTGGTCGGCCA", "TGGTGCGAATCGGCATAAGTATTGAAGGGGAGTTTGGAAGCTTGCTACCT", "TCGGCTCTATGTTTAGGTTAACCCTCTAATCCTAAGCGTGAAATTATACT", "CGGCCAAGAGCCGGGTAATGAGACCAGCAGGGTTTTCATGTAGGAGATTC", "ATCAGTCAGAGGTGGCGGCCGACCTGAAGGATTGCGCGTCGTGCTGGCTT", "AGTCGGAGGGGACTATCCCC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 888;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    int maxPeriod = 843;
    vector<string> dna = {"CTGATGTTTGCTCATCAGGGTGATCTCCCTAACTAAACTATTCGATGTCT", "ATGCGCCAAAGCAGGACCATGGCGGACACAGCGGAATATACAACAAGCGA", "TTTACAAGGCAAATATGCGATGTTTGATGGTACTGTTAAAAAAGCCCGGG", "ACCGTCGACGGTGGCTATTGCCATATGTCGCCAGCAATTATTGCGGCCCA", "CGAGAACGTGCTAAGAGAGCCACTGGAAATTCACCTCGGAACCTCTTGGT", "GTTGTCGAGTCTCTGCGATGTCAAAACATGATAATCGTGGAAGTAGGACA", "GGCCCTGTACAGTGGCTCCTGACTCTGCTCGAGAATGGTTGACGCTTGCG", "CCCTCTACTCTAATTTTATCAGGTTAATAGTCCGCCCCCGGGAGTGCTGA", "TCCGGCAGCAAGGACGCAACCTTTTCACTAGGACCTCTACCAAGTCGCAT", "TTATTCCTGATTGTACAGTTGAGGGGATTGAGCGTGCAATGGAGGTCCTT", "TTTACGGCGTCGTCGGAAGTCCTACTTCCGGGTGCCGAGACTACGCTCAG", "CAACGGACCGCGTGCATGCACGCCGTGAACTGGACAGTTATGGTAATCTC", "GTCAGTCTCAATCGGGAATAACCAGACATCCTCAGGATCCAATTCCCACT", "GCCGACGCCGGCCTGTAAGACTTCGACAGTAATCTCTCGGCCCACTCAAC", "GTCTGCATACCTAACGGCTAGATCGGGACTGGTGGGCGGTCCTTTCACGG", "TCGGGAGTGGAACTATATATTGGCTAACACTATCGTAACTAACACTTCCA", "TATGGAGCGGTACAATGGCGTTCTTGTTGAATCCTTAGTATGGTACGCCA", "CCAGCTAGGTTAGAAGTTCAGTCCTCAGAACGGTAAGTGATGAGCATACA", "GAATGCGACGGTCCCCGCGAGCCCGCCTCCATCAATATCGTGCAAAAGAC", "CGCACAGACCATCTTTTAAATTCTAAATGACAGACAGGGCCCGCGCACAG", "GTCACGTTTGAAATCTTTAATAGACATCAGAAGAGCGGTAGCGGTCTTTC", "AGCTTGTGTGTTGTCTTGTTACGCGCAGAACAGAAACTCCGGCGTTCCGG", "GCCTCCGGCGGCCGACACTGAACGGCGAGCTTCAGCACGCAGATTCCGCA", "GTGTACGTTCGGCGCCACTCCCTATCTTGGGCCAAGCCCATTATAGTTGA", "GCAAAGCCCTCTCGATGGTTTCCCACCCCGCCCGCTATGACGGTCAACAC", "TTTAGCGCTAAGACATTCTTCCGGAGCAACGCTATTCCCATGATAATTAA", "CTGGGCTGTCCCACTTCCTCTCAACGAGGCACGCGATGACCTGTCCGATG", "TTGAGGTCAGCGTTGTATTCGTCTATTGAGTTCCACGAGGCCTTTTCACG", "AGGGCTGTCGGGGGGTTAACGAGTGCCCTAAGAGTAGCAAGTTACCGTAG", "TGGTATCTTCTTGTCTGGAATCAAATGTATACTGAAGGTCAGTGGCATGT", "AATACCACGAAACTCTTGCACTCCGAATCCTAACTTTGATCATCATATGA", "AAACGGTACCACGCCTTTAATATAATCGAGTATTGACAAACCCAGGTTAT", "CCCGAGTGAGTGAGTCATAATAGCAAAGGACCGTTGAACGCCGCGATCTG", "TGCGTGCTTGCGGGACATTCGGAGTTGTAACCCCTACAAAACGCACCACT", "CCATCCCGGACGTATGTCGGCTGAACTTGGCACCGATGCATGTTCATCGC", "GCAAGTTTGATCCGCTGGACGGCCCGTAAGAAAAAAGGGCCAAAATTCAC", "TTCTAGAAATAACGACTGCATCCGATGCCGACTTCAATTAGATACATGTG", "CGAGCTCGAACGTCGCTCCGGAAACCAAATGAGATCCGGCGGCCCGGCGG", "TGGGGAAAGAAGGACCGATCTCGCTACACTGGGTGGTCCCTTGCCGCTGC", "AGTATCAGTTCAAGGCTGCGGATGTACTGTTTGCAAGACTAGTTTGGAAA", "GTGACTGCTGCAGGAAAACAATTCTAACACGAAAGGTATGTTGACGTCAC", "AGGGCGGTGATTAACCGGTATACGAACTGACCGCTACTGAGGG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 842;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    int maxPeriod = 1451;
    vector<string> dna = {"GGGTATTTGGCTTTGGGTCGTGTGACATTCTGCGACGGCCGCTTAGAGGA", "CTACGTCTACCTAACGCTATTGCCTCGCGTTACACGTTATGCCCGGAAGC", "CCTTTGCCGAGCAGGCAAAGGGCTTGCGCCTTGCGTTTCTTGTACTGTAA", "ACGTTTCTGTCAAGCTAGGCTTCACCTTCAGGTGCATGGATCGTCCCTCA", "TAGGCGTGGGCGACATGGAGTACAATGTAAGCGTAGTTTCATCAGGCTGC", "ACGCACGTTTGTCGATTCCATCTTCGTCAGAACGTAAGACTGTTGGAACG", "GCCTTCCCTCTAAACCCACCTGACCCTCTCAGTCTCTTATTTAGTCGTAT", "GCGGCCCCTTATGTTCGCATAGGTATCGGGCGCTGACCCTGAAGCTTCGG", "CCTCCATGAATAACCCGCGCAGTCGCGCCAAAGTTATTCGTTGATTCCTC", "GCTTAAGCCCCAGTATGTCATATTTGACTGATGCGGATCGGTGGCTGCGT", "GTTCGTGGTTGACATGTGGCGAGTACCCCTCGGTCGAATCTACTTATTCA", "AGGGTGATGAATAGGCTGACGCCCCTGGTACAATACCTCCTAAGTGCAAC", "GTTATGTCAATCCCTGCAGCTTGCATGTAGATTGGCAGCTATTGCACCAA", "CTAAGTATCTGATATGTCGGATTGTAACTTGCGGCCTTCGAAACACAGCG", "CGACTTTGGATAGTATACAAGATACTCCCTGGGGCTATTTAAGCACCTAG", "TCAAGCCTAATCCTACTGCCTGCGAACAACGGGCGTCTCCTGATCTTAGT", "GTTAGCCTAAACGCTCCAAACAATAGACAGGCATGGGGCCGAGTGCAGAC", "GGTGCAGGAGTATATCGCCCTGGCTAAAGCTACTGAATGGGAGGCACTGA", "AGCGCTCGATCCTCTCTCGGCTGCAATGATCTTAGGGCCTCCGGAGGTCT", "TAGCCATCTAACAGAACCCCTGTTTAACAGCTTGGTCCTGAAATACGGAT", "TAAATCCAGGGACAGGATTAATCCCTTCGCCATCGTCTAATTCTCTAGAG", "TGTTTTCGGCTGGAGGGATAAGGGTGTACCTTCGATTTTTGCGCCTTAAA", "ACACAACCGTCTCACTGTTTCTCCCCTGTGTGCCGCTATATTAACGTACG", "ACTGACATCACGCGACCGTTCACCCATCGGGCTAGTTGGTCCGGCCCCCC", "GCTTCCGAAAAGAAGACAGTTAACCGTCTCCCTGCTCGGTTAACATGCAG", "ATAAGAGAGAGATGACTTCCACCACGCCTAAATCAATTGGACTTCACTCT", "AGGGCGCCTTCACAGGATTAAATACGATGTGAGAGGTAGGTAACCTCTTT", "GCCACCCACTATAAAACGATCCCGTTTCTCCCAGAAACGTGCTCGCCGAA", "TGTTAGAGACGTTCACCACGCAAAGCTGGCCGCGGGATGGTAACCGATCG", "AGCGTACCCTGGCTCTTAGTAACGTTCCTCAAGAGTACCTGAGCAAAAGA", "CTATAGCCGGAGCTCACACACTTGCGGTCGTTGTATACTACACGAGGTCA", "TTGTCTTATGCCGTAGGAATGTCAACGGCTTACATCGCCATTTCTGTCAG", "AAAGTGGAGTGGGACGCGTTGCGCTCGTAAAGCTGCCCACCCATTAGCTC", "AGTATCGGTGGTATGAAATGAGGTCGCTAGCTCATCAATTGTGCCCACGA", "ACTGCGATCGGTAAGTTAATTGTGTGTAGAAAACCCTGCTGCGGTATCGA", "GACCCAGAGAAGGTAAGAAGTCATTGTGAAAGACGAGAGCGGTTAATTGC", "TTACACATTTAAGGAGCCAGAGTATGCAGCCGACGTCTGCAGCTATACGG", "CGTGCATATAAATGATTTAAGCCCGTAGGTGTTATTACTACCCCACGGCC", "ACGCTGGGCTTCCGTCCTAAAAGGGATTGGCGGGTTCCTGAGTGGCGAAG", "ATCGATTAGCCGTCCGCGTATGAGTGCCGCCGGAGGCAGGACTTAGCTCG", "GCATGTCCTCAATCACAGGCGGACTCGCTGCACCATATGATGACTTAATA", "ATATAACAGGGGGGCTAAGAGGCAGAAGACGCCCTGGTGTAGTCTGCACC", "GTAGGTGGGAGGCAGTATAACTAACAGTCACGTAGGGGAGGCACCGTCCC", "ACTTGACTGCGGCTTGTGTGAAATTACTATGCTATACGGCTCATCCGGTA", "AGCAGATCGTCGGTCT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 546;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    int maxPeriod = 2211;
    vector<string> dna = {"GTGATACGTCGATCGTTCTTCCTTCGCCGGGGCTCAATTAGCAGTTGACT", "TACTTAGTTATGTGAACGGTGTTCGAAAGTAGGTCGTGCATGGCTAAAAC", "TTGGTAACGTCCTATACGCCTCGATTTACCCCTATGGATCTCAGTTGGCG", "AAACCCCAGTGCCTATGGTACCCTCCACACAAATAGCCCAAAAGGGAGCG", "TTAACTGGGATGTTCTGTCCTTGTTCGGAGGTCTTTGGGGACCCCTATTT", "CCGAGCGTAATTACTGGCCACAGACAATTTTTCTTCGGTGAAGCTGTGCT", "GCTCGGTGGCACCACGCACCTTGCCCACGCCAACCAGCTATTGGGAGTGT", "TGCGGTAACTTAAACACGTGGACTCAGATCAAAGTTCTGCATTTAAGGCG", "ACGGGTGGCCACACAAGGCAATAGGTATGTAATCCCGCTCGCCCCAACCT", "ATCGCGTGCGTTGCCAGCTTGAGCGCAGTAGCGTTGATTCCAGCAACCCT", "TGGAACAACTCCTGCATGTTGAGGTTAGCATGTGTACCGGTAGCACGTAA", "ACATGTCAAGGATTGTCCCATATTGAGCGAATGTACTTCTTCATACCCCG", "AAGCCCGACAACAGCCTACTTGCGGTAAAAGTCAAGCCCACAACAGCTCT", "GTGTTCCGGCTATCCAGGGCTCGTGCAATGCGAGTTTTCGTACCGTATCC", "CAAGTTTTTGCGAACAGTTACCCATGTGCTAACGAAACCTCCCGGTTCGC", "GGGCGCCCACCGTTATTCTGGAACGGGCCTCGAAATCAGCTCAGGAAGGC", "GACTGGCTCTATAGCTTTGATCTCCCCGCCATGATGAAAATGGTGCGCGC", "CCATACCACGCGCTGGGACTCGTACTCTCGGCTAACGGAACTGTCGTGTT", "GTGAGGACGAACGTTCACCTCTCGAGCTCATTTACTAATAAAGGTTATAC", "GCCGCCCATTAACAAGGGATGGCTTGCCAGTGATACCATCCCTCCTACTC", "ACGTTAACACTTGATGGAGGTGGCTCAAAACCCTCTGCTCTGTCCATCGT", "TTACGATTAGACCCGACTAAGCTGGCTAACCGTATTGGCGTCTGGGCGCT", "TTAGATTGGCGCGCCAAAACTAAGGCATTACGTACGCTGCTTGCTTGATA", "GACTTACATCAGGAGCGCTATCCCTGCGTTTTTACCAATCATTTGGGACG", "GAGGGCCTTCCCCATTCAACCGGGCCTTTGACCCACTGACTTTTACGCGG", "CATAACGGAATAGTCATCAACTGGCCGCCCTCCAATAACACAAATTGGCT", "AGGGAATCCTGACGTCGTGATCGATTTGTCCGAGCCAGCGCCTAACTAGA", "AAATATTCGTGGATAGCAACACACTATGGCTGACTACCCGCGACACTAGA", "CTTCACTGACGGTCCGCCTTCGTAAGTAGGCCGCGTCTCGAGCCTCGTGG", "CATAACACACCCACCTCCCATAGCGGTGGCCTACGGAACCTTTGCTTCAT", "GCTGAGCAGAGAAAGCTTACTAATCTTATTAACATCTAGACGATACCCGT", "GCCCTCTCGGGCAACGTTTCGCTGGGAGTAGCATAACTCATCATTATTCT", "TAATGGGGGTGGATCATACTGAAACCATTTTGAAATAATGTAGAATCTAT", "TCTCTTATAGCGTAGTGACGGTTCCGCGAACTTATTTTGAAAAATTATGT", "TGCACCCTACTATCCATGATTGCCCCGCTCATAGGCGGATCGCGCGGGTC", "GAGAGGTACGTGCCCTATGGATTGGTAACCTGCCACTTATGCTAAACCTG", "ATAGTCGGAAGGGAGTCGATGCTGAACACATACTCACTCAAGCACGACAA", "CGCCTGGGAGCAAACTCGCATACGGAAGTTGCTCTCGCCGCCCCTTTAGA", "GACTTACCGGTGTGCTGTACAACGATTTAATCCTGAGATTAAAGGATAGA", "CCAATATGAAAAACCCGTCGTTGGTCACCCCCGGAGTACGGCGACCAGCC", "CGCCTCTGCGTGCAGGGGCCATCTAAGAAGTCCACACCAGCTGGTGCCTT", "CTCAGAAAAGCACATTAACGGTTACCGTTGGTATTTTTGAGAAGGCCCAC", "GCCCAATATTACCCACAGGCTAAGCGGCTCTCGAGTTCTGGGCTCATACT", "GCTAGTAGCTTGACGTTCGGGATACTGGAAGAAAGTATAATTTGTTCAGA", "TTCCCCAGTCAGTTGATTTTTGCGTTCTCGGAGTCCCCGTCGCCTGGCTT", "GGGGCACGATACATCACCGATTAGCCGGTGGGCCACCATAGGGCGTGACC", "GCACATTTGTCTTGATTTAGGTGCACGACCCATGTCAGT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 84;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    int maxPeriod = 1994;
    vector<string> dna = {"CCACTCTCAATGCAATGTGCACCGCCGACTCAAAATGATGGAAGCTACAC", "CTCCGAGAAGGGCGGAGGTAGGGTCTGATCCCACAGTCACCCATAGCCCC", "TTGGACCTATTTGCATTGACTGGATGATGTCCGGGCAGAGGAGGTGGGAG", "CCCCCATTTGAGGCACTACGGGCTTGACACAGGCATATTGCGCGACAATG", "AATGATGAAAACGGAACAGCAGATGGAGTTAACGAACGATAACCTGCGTA", "TCCCCGTAATAGACTTAACTTATCACTGTATTATAGCTTGGCACCGTGTG", "TCCGGTTGGGCCCCTATATATGGTTATCCCCTCGCCCGAATCAGCGGTGC", "TATGGGCGACAGGTAATGAGGCTCGGGGACTTCAGATCCCGACGTCACAC", "GTCAGCCCCCCCATGTCGGCATTGACGCCTGCAACGTAAACTCAGGAGAC", "GAGGCAAACAGTTGCTTGTATTTTCCAGCTTCTCGATCGCTCTCGCTTCC", "GTGCTTAATAAGCGCGCTGCGCCCGCTCATCCTGCGCGCGTACGGAATTC", "ACAACTCAGGACGGTGCTATGGTGCTATCCTTTCTGCACAAGCTATGCCT", "CTTCCGGGCTTTGGGAATATCCAGCTAATACGATGGGAGGGAGCAACGGT", "GATCCAATAGATCCCCCGCAATTGGACGAAGCTAATCTAAGAGGCATGTA", "AGATTCTAAATCATTGTTAATGCTACGGGTACAGTTTAGAGGTCAATTGC", "AGGCCGAAGTAGAACTTCGCGAGATGCTGGGATGACGCTTTATATCGTGA", "GGTCCGTCAGAATGATGGCCAGAAACGCAATCCCCGTTTACTCAACGGAA", "CGCCGAGCTTTAGTAAAAACTGTACGGTAGGTGTATTTTTAAGCTTGCAG", "TTAATTCTCGTTTTAACGCCCCATGCTAAGGACACCCCTTATCGAATGGC", "TTAGACTGATGACTGGGGCGCAATAGCCTACTCCCGGCACATTTCTCTTG", "GTGCCAGACACGGCTGAAATGGGAATGGTCAGCGGTTTGTCAACTACGCG", "CACCGTCACTAGGCCAGACACAAAACGGAGTGCTCGCAGGATTTTTTCCA", "ATCGAGCCAATCTGACCCCCGCCACACCTAGGTAACTATCATGTCATCGG", "ACGCTGGGTGCTTGTTCGGTTGTCCCCCAATCCCCGGAGTGTACACAAAC", "AAATCTATGGCCCGATCTGGAAATCGTTGTCAGCGCCCAAACCCACCTAG", "ACCCTTTCGGATAGATCTCTTACTATACCAGGTCAGCGAATATGGACGCC", "GCTATAGTAATGAGTAGGACGCACTGGATGTATGTTTAAGCAGGTAACTT", "AGCGCATCAGTTCAGAAGATCTTTCTAGGCTATATCAGACACACCAAGAA", "ACCTCTCGGCGGCCTCGAGGGAGCAAGACTCCACACAGTGTGGAGCGCTC", "AAAATTATACACGGTCGGAGAATTAGGGGCCCCCTGGTAAAGGGTTTAAC", "CATTACTAAGGACACATTGTTGCATAATCCAGGAATAATTCGTGTGAGTC", "GCGAGGGCCGCGAGTGTCAACGCTTAGTTGCCTCCACAAGTCGCTAGGAA", "TCTGTTAGATAAGTGGTAGTCACTCACCCAACTTTGATCTGGCCCTACCC", "TGCCTAGCTACAGTCGATATGTTACCACAATAGGTGCCAGAGGGGTAGGA", "TATTCCCTAAGGATCGTTTGCCTGTGAAGGGCAAAGCATTCGGCCTGTTA", "GGGTGCCAATAAGTAAGCTTCGGGCCGAAACCACGAACTTTTGTACGTAT", "GCCTATCTTGAGGGTATAGCTCTATGTATTGATCCTTTAGTCAAGTGGGT", "GTTCGTATTTTTACGCACGCCGTCGGATGAGCGTTGTTCAATGTGCGTTC", "GAAAGGCCCACCCGCGCCTCCGTTTGCCAAAATCGACACAACCCAGTTTT", "AACGGTTGAAACCCACCAATGATCCCGACGCGAACGTAGCTTCACCGGTT", "TGCAAGCCCGCACTCGCTCGTCGCCGATCCTTCTACTGCAGTCCCGCGAC", "AATACTCTGAAGCATCCGGTCGCGAAGAATTACGGACAATATACCGCTTT", "TTGACCGCTTACCAGCTTAAAGACCGAGGTGCTTTCTGTCCATCTCCAAG", "AAGAACTCAATTTTCTACTGTTAGTGCTCTGCATCCTTCGTTAAAGGTCC", "AGTAATGCTGGTAACGTACAACATAGTCGTGCTAGTAGACACCAATCAGT", "TTTGTCAGTCCTAAACAACTTGCGACTGGGGCTCAACAAGACGTCGTCCA", "TCACGACGACGTCCTCCCACATGGGTTATACTCGAGGGTACATACCGAGA", "GTTCGTATCCCGCAACGAGGGGTTCAGTACCAGGGAGACTAGATATACGT", "GGGCCGGTGCGAATATAAAGCGGGCTCCATAACTAACAAGTCGGTTCGTA", "TAAGCCAGTCCA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 337;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    int maxPeriod = 7;
    vector<string> dna = {"GTGTATGCATGCTTGGATGCGGGAATGCATGCATGAAGGCATGCATGCGT", "GC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    int maxPeriod = 153;
    vector<string> dna = {"ATGCAGGAATGAATGCTCCCATGCATGCATGCATGCACTCATACATCCAT", "GCATGCATGCATGCATGCATGCATGCGTGCATGGATGCATGCATGCATAC", "ATGCACGCATGCATGCATCGATGCTTACATGCATGCATGCATGCATGCAT", "GCGTGCATACATGCATGCATGCATG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    int maxPeriod = 158;
    vector<string> dna = {"ATGCCGGCATTCATGCATCCATGCATGCATGGATGCCTGAATGCATTCTT", "GCATGCATGCACGAGTGCTTGTATGCATGCGAGCGTGCATGCATGCATGA", "ATGCATTCATGCATGCATGCCTGCATGCATGTACGCATGCATGCATGCAT", "GCAGGCAGGCATGGATGCATGCATGCCTGCATTCATGCATAGATGCATGC", "ATGCATGCATGCTTGCCGGCATGCATCGATGCATTCATGCAGACATGCAT", "GCATGAATGCATCCATGCTTGCGAGCCACCCTGCATGCATGCATGCGT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    int maxPeriod = 163;
    vector<string> dna = {"ATGCATGCATCCATGCATGCATGCATGAATGCAGGCATGCATGCATTCCT", "GCGTGCATACATGCACGCATGAATGCATCCATGCATGTGTGCATGCATGC", "ATGCGTGCAAGCTTTCATGCATGCATGAATGCATGCATACATGCATGGAT", "GCAATCATGCATGCGATTATGCATGCAAATATACATGCATCCATGCATGC", "ATGCATTCATGTATGTATGCATGCATGCATGTATGCATGCATGCATGCAT", "TCATGCATGCATGCATGGATGCATGCCTGCATGCATGCCCACATCCCCAC", "ATGCATGGATCCATGCATGCAAGCATGCATGCATGCATGGATGAACGCAT", "GCATCCATGCATGCTAGCATTCATGAACGCTGGCCTGCATGGAAGCACGC", "TTGCATGCATGGATCCATGCA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 58;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    int maxPeriod = 490;
    vector<string> dna = {"ATGCATGCAAGCACTAATCCAGGCATGCATGCTTGCATGCATGCATGCAT", "GCATGCCTTCATGCGTGCATGCATGAATGCATGCATGCCTGCATGCATGC", "ATGCTTGCGTGCCTGCATGCATCCAAGCACGCATGCATGTATACCTACAT", "GCATGCCTGCCTGGATGTATGCATGAATACATCCATGCATTCATCCATGT", "ATGCATGCTTGCTTGCCTGCATGCATGAATGCATGCATTTATGCATCCAT", "GCAACCATGCATGCAGGGATGCATGCATGCATGCATGCATGCCTCCATAC", "ATGCATGCATGCTTGCATGCAGCCATGCATCTATGCATTAACGCATGCAT", "GCATGCATGCAAGCATGCGTACATGCAAGCACGCATTATTGCATGCATGC", "AGGCATGCATGCATGGAGGCATTCATGCTTGCATGCATGCATGAATGCAT", "GCATGCCTGCATGCATGCATCCATGCATCCATTCATGCTTGCATGCCTGC", "ATGCATGCATGCATGCAGGCAAGCATGCATGCATGCATGCATGC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    int maxPeriod = 283;
    vector<string> dna = {"ATGCAGGCATCCATGCCTGCATGCAAGCATTCCTGCGTGCAAGCATGCTT", "GCATGCCTGGATTCATACACGTATAGATACAAGCATGCATCCTAGCATAG", "ATGCATGCATGTATATACGCATGCATGAGTGCAGGAGTGCATCCATGCAT", "GCATGCATGCATACATGCATGCATGCATGCATGCATGTAGGAATGCATGC", "ATGCATGCAAGCATGCATGCATGCATGCATGCATGTATACATGCATGCAT", "GCATTCATGCATGCTTGCATGCATGCATGCACGCATGCATGTACGCTTGC", "ATGCAGGCATGCAAGCATCCATGCATGCATGCATGCATGTACGCATGCAT", "GCATGCATCCATTCATCCACTCATGCATGCATTTATGCATGCTTGCATGT", "ATGCATGCATGCATGCGTGCCTGTATGCTTGCATGCAAGCATGCATGCAT", "GCTTGCATGCATGCAAGTATGGATGCATGCATGCATGCATGCCTGCATAC", "ATGCATGCATGGATGCATGCAGGCAGGCGAGCATGCAGGTATGCATGAAT", "TCATGAATGCATTCATGCATGAATGCAAGCCTGAATGCATGCATTCATGC", "ATGCATGCACGCATGCATGCATGCATGCCTACATGCATTCATGCTTGCAT", "GCTTGCATGCATCCATG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    int maxPeriod = 384;
    vector<string> dna = {"ATGCATGCATGCATGTATGCATGCATACATGCATGCATGCATGCAATCAT", "GCAAGCATGCATGCATCAATGCATGCCTTTATTCATGCATGCATGCATGC", "CGGCATGCCTGCATGCATGCATGCATGCATTCTTGCATGCATAGTTGCTT", "CCATGCATGCATGCATGCCCGCACGCCAGCGTGCATGCACGCATGCAGGC", "ATGCCTGAATTCAGGCATGCATGCATGCATGCAAGCATGCATGCGCGCAT", "GCGTGCGTCGATGCTTGCATGCATCCATGCATACTTGCATGCATGCATCA", "ATGCATGGCTGCAAACTTGCATGCAGGCAAGAAAGTAGCCATTCATGCAT", "GCATGCATGCATGCACACATCCCTGCATCCACGGATGCATGCATGCATGC", "ATGCATGCATGCATGTATGCTTGCATGCATGCATGCTCGCTTGCATGCAC", "GCATGCATGCATGCATGCACGCATGCATACATGCATGCATCGATGCATGC", "ATACATGTATGCATGAATGCATGCATGCATGCATGCATGCATGCATGTAT", "GCATGCACGCATTCATGTATTAATGCATGCTTGCATGTATCCATGCACTC", "GTGCATGCATGCAGTTTTGCATACATGCATGCTTGCATGCTTCCAAGGCT", "CCACGCAGGCATGCCTGCAGGCATACATGCATGCATGCAAGCGTCAATGC", "TTCCCTGCATGCAGTCATGCACCCTGGCAAGCAGGCATGCATGCATGCTT", "GCATGCATGCATGCACGCTTGGCTGCATGCATGCCTGCGA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 114;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    int maxPeriod = 231;
    vector<string> dna = {"ATGGGAGTATGCATGCATCCATGCATGCCTGCATGCACGCATGCATGCAT", "CCATGCAGGCATGCATGCATCCATGCTTGCATGGATGCCTACATGCATGC", "AAGCCTGCATGCATGCACGCATGCTTGCATTCAAGCGTAAATGTATGAAT", "TCATGCATGCATGCAGGCATGCACGCATGAATGAATGTATGCAGGCAAGC", "ATGCATGAATGCATGCCTACATGCATGCGTGCATGCATGCATGCATGAAT", "GCATGCTTTCATGCATGCAAGCATGCATGCCTACATGGATGGATGCACGG", "ATGCCCGCATGCATGCATGCATGGATACATGCAGTAATGCATGCATGAAT", "GCATGCATGCAGGCATGCATGCATGCACGCGGGTACGCACCCATGCTTGC", "ATGCCTGCAGGTATGCATGCATGCATGCATGCATGCATGCATGCATGCAT", "GTATGCATGCATACATGCATGAACGCATGCATGCATGCTTGCATGCATGC", "ATGCATGTATACATGCAAGTATGCATGGACACACGCATGAATGCATGCAT", "GAATGCATGCATGCATGCATGCATGCATGCACGCCGGCATGCATTCAGGC", "ATGAATGCTTGCATGCATACATGCATGCATGCATTCATGCATGTATGCAT", "GCATGCATACATGCGTGCATGCATGCAAGCACGCGTGCACGCATGCATGC", "ATGCATGCTTGCATCCAAGGATGCATGCATGCTTGCATGCATGCATTCAT", "GCATGCTTGCATCCATGCATGCACGAGCGTATCCGAGCATGCATGCATCC", "ATACATGCATGCATGCACGCATGCCTGCAAGCATGCATGGATGCATGAAT", "GCATGCATGCGTGCATGCATGCATGCCTGCATGCATGCATGCACGCAGCC", "ATGCCTGCATGCA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 122;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    int maxPeriod = 884;
    vector<string> dna = {"ATGCATGCATGCATGCTTGCATGCATGCGTGCATGCATGAATGAATGCAT", "GCCTGCATGCATGCATGGACGCATGCATGCATCGATGCATGCATGCATGC", "ATGTTTGCATGCATGCATGCAAGCATGCATGCATGCATGCGTGCATGCAG", "GAATGCGGATATGAATGCAGGCATGCAAGCATGCATGCATGCCTGCTTGC", "ACGCATGCATGTATGCGTGTATGCGGGCCTGCCTGCATGGATGCTTGCAT", "GCATACATGCATGCGTGCATGCGTGCATGGAAGCCTGCGTGCATGCTTAC", "ATGTATGCATGTGTGCAAGAGGGCATGCATGCTTGCATGCATGCATGCAT", "GCTTGCCCGCAGGCATGCATGCATGCATTCATACATGCATGTATGCAGGT", "ATGCATGCACGCATTCATGCATGCTTTCATGCATGCATGCATACATGCAT", "GCATGCATACATCCATGCATTCATGCATGCATGCATGCATGCATATATGG", "ATGCATGCACGCATGCATGCATGCAGGCATGCCCGTATGCATGCATGCAT", "GCATGCACGCATGTGTGTTTCTATGAATGCATCCATACATGCTTCCATGC", "ATGGATGCTTGCATGCAGGCATGCCCGCTTGCATGCATGCATGCATTCAT", "TCATACATGCGCGCATGCACCCAAGCATGCATACTCGAATGCATGCATGC", "GTGCAAGAATGCATTGAAGCATGCATGCACGCATGCATGCATGCATACAA", "GCATGCATGCATGCGTGCATGCAAGCATGCATGCATGTATGCATGCATCC", "ATGCATGCATTCATGCATGCATGCATGCACGCATTCATGCATGCATGCAT", "GCATGCGTGCATGGATGCATTCACGGCTGCAGGCTAGGATGCATGCAATC", "ATGCATGCATGCATGCATGCAGGCATGCATGCATCCACGCATGCCGGCAT", "GCATGCATGCATGCATGCATGCAAGCATGCAGGCATGCATACATGCAGGG", "AAGCATGCATGCCTGAATGCATTCATGCATGCATGC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    int maxPeriod = 688;
    vector<string> dna = {"TTGCATATATGAATGCATGCATGAATGCAAGTATGCAAGCAGGCATACAT", "GCATGCATGCAAGCATGTATGCATGCATGCATGCCTGCATGCTTCCTTCC", "AAGCATGCATGCATGCAAGCATGCATACATGCATGGATGCATACATGCGA", "GCTTGCATGGATGCATCCATGCATGCATACATGAATGCATGCATGCTGGC", "ATCCATGCATGTATGCATGCATGTATGCATGCATGCAGTCATGCATGCAC", "GCGTGAGTGCCTGGACGTATGCATGCATGTCTGCATGCATGCATGCATGG", "ATGCATGCATTCATGCATGAATGCATGGATGCATTCATACATGCATGCAT", "GCTTGCAAGCATGCATGCATCCATGCAAGCATGAATGCATGCATGCATGC", "ATACATGCTTGCATGCACGCATGCATGCATGCATGCATGCATGCATGCAT", "ACATGCATGCATGAATGCGTGCTTGTATAAGTGCATGAATGTATGAATGC", "CTGCATGCATGAACGCATGCAGGCATGCATGCATCCATGCATGCATGCAT", "GCATGCACGCATGCATGCATGCATGCATGCATGCATGCATCCATGCATCG", "CTGCATGCTTACAGGCAGGCTTGCATGCATGCATACATGCGTGCATGTAT", "GCATGCATGCACGCATGCTTGCATGGCTGCATTAATACATGCATGCATGA", "ATGCATGCATTCATGCATGCATGCAGGCATGCAGCCATGCATGCATGCAC", "GTCTGCATTCATGCATCCTTGCATGCCTGCCTGCATGCATGCATGCAAGC", "ATGCATGTAAGCACGCGTGCATGCATGACTGCATGCAGGCATACATGCAT", "GCAGGCATTCATGCATGCCCTCATGTATGCATGGATGCTGGCAACTACGC", "ATGCAGGTGTGCTTTCATGCAAGCATGCATGCGTGCATGCATGTATGCAT", "GCATGCATGCCCGCATGTATGCATGCATGCATGCATGCATGCATGCATGC", "CTGCATACATGCATGCTTGCATTCAGGCATGCATGCATGAATCCAAGCAC", "GCATGCATGCATCCATGCGTGCCTGCCTGCATTCGTGTATGCATGCATGC", "ATGCATGCATGCCTGCATGCATTCATGGATGCATGGATGCTTGCATCGAT", "GCATGCATG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 118;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    int maxPeriod = 583;
    vector<string> dna = {"TTGCATGCAGGGATGCAAGCATGCCTGCATGCATGCTTGCACGCATGCCG", "GCATGGATGCTTGCATGCAAGCATGGATGAATGCATGCATGCCTGCATGC", "ATGCTTGCTAGCCTGCATGCATGCATGCATGCACGCATCGTTGCATGCAT", "GTATGCATGCATGCATGCTTACATGCATGCGCGCATCCATGCATCCATCC", "AAGCATGGATGCATGCACGGATACATGCATGCATGCATGCATGCATTCGT", "GCATGCATGTATGCATGCATGCATGCATTTATGCATGCACGCATGGGTGC", "ATGTTTACATGGATGCATGCATGCATGCATGCATGCATGCGAGCACGAAT", "GCGGCGGTGCATGTATGCATGCACGCATGCATACGTGCAAGCATGCATGC", "ATGCATGCATGCACGCATGCATGCCTGCATGTATGCAGGCATGCTTGCAT", "GTCGGCATGCATGCATACATGCATGCATGCCAGCATGCATGCATACCTGG", "GCGCATCCTTTCCTGCAAGGATGCAGGCATGCATGCATGCATACTTGCAT", "GCATGCATGCATGCAGGCATGCCTCCGTGCATGCATTCATGCATGAATGC", "GTGCATGCATGCATGCATGCATGCATGCATGCATGCATACATGCATGCAT", "TCATGCATGTTAACATGCATGCATGAATGCAGGTATGCAGGGATGCAGAC", "AAGTATGCATGCATTCATGCATTAGTACATGCATGCATGCTCGCTCGCAT", "TCATGCACGCATACACGCATGTACGCATGCATGCATGCATGCATGCATGC", "GTGCCTGCCTGCATTCATGCATGCATGCATGCATGCATGTATGAATTCCT", "GCATGGATGCATGCATGCATGAATGCATGCATGCATGCATGCATGCATGC", "ATGCATGCAATTATGCTTACATAAATGCATGCTTGGATAGATGGAGGCCT", "GCATGCATGAATCCATGCATGCAGGCATGAATGCCTCCATGCATGCATGT", "ATGCATTCATGCAAGCATTCATGCATGCATACATGCATGCATGTATGCTT", "GCATGCATGCATGCATACAAGGATTCATGCATGCATCCATGCATGCATGC", "GGGCTAGCATGCATGCATGAATAAATGATTGCCCGCAAGCATCCATGAAT", "GCATACATGCATGCATGCATGCATGCATTCATGCATGCAGGCATGGATGC", "ATGCATGCGGGCATCAATGCATGCATGCATGCATGCTTGCATGGATGAAT", "GCATGCATGCATGCATGCAAGCATGCTTGCAT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 172;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    int maxPeriod = 12;
    vector<string> dna = {"ACGTATAGCATGACA", "ACAGATATTATG", "ACAGATGTAGCAGTA", "ACCA", "GAC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    int maxPeriod = 13;
    vector<string> dna = {"ACGCTGACAGATA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    int maxPeriod = 44;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 320;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    int maxPeriod = 12;
    vector<string> dna = {"ACGTATAGCATGACAAA", "ACAGATATTATG", "ACAGATGTAGCAGTA", "ACCA", "GAC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    int maxPeriod = 13;
    vector<string> dna = {"ACGTATAGCATGACA", "ACAGATATTATG", "ACAGATGTAGCAGTA", "ACCA", "GAC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    int maxPeriod = 1999;
    vector<string> dna = {"ACGTCCCTTCCCTTCAGAGAGGAGAGAGAGTTCATATATATAATATGGCC", "ACCCCGCGCGCGCCTCTCTCTCTCTCTCTCTCCCCCACCCACCACACCAC", "ACCCCTCTCTCTCTCTCCGAGAGAGAGGAGAGAGAGGAGGAGCGCGCGCG", "CGCGCGCGCGCGCGCGCGCGCGGGGGGGAGGGAGGAGGAGGAGGAGGGTG", "TGCGCGCGCGCGCGCGCGCCGGAGAGAGAGAGAGAGAGAGAGGAGAGAGG", "TCTCTCTCTCTCGGGAGAGAGGAGGAGGAGGAGGAGGAGAGTCTTGTGTG", "TGCGCGGGAGGAGGAGGAGGAGGAGGGGGCGGGGCGGCGCGCGCGCGCGG", "AAAATATATATATTATATATATTATATGTGTGTTGGCGCGCGCGCGCGGC", "TGTTCGCTCTGCTCGCTCGCTCGCTCGCTCGCTCGCTGCTCTCTCTCTCT", "AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGATGGAGAGAGAGAGAGGAGA", "TGCGCGCGCGCGCGCGGGGGGAGGAGAGGGTTTTTTTTTTTTTTTTTTTT", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCCCCCCC", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCCCCCCAAAAAAAAAAAA", "TTTTTTTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGAAAAAAAA", "GGGTTTTTTTTTTATTATATATATATATATTATATTATATATATATTATT", "TGGGGGGGGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCG", "TGCGCTGCTGCTGCTGCTGCTGCTGCTGCTGGGGGGGGGGGGGGGGGGGG", "ACGTCCCTTCCCTTCAGAGAGGAGAGAGAGTTCATATATATAATATGGCC", "ACCCCGCGCGCGCCTCTCTCTCTCTCTCTCTCCCCCACCCACCACACCAC", "ACCCCTCTCTCTCTCTCCGAGAGAGAGGAGAGAGAGGAGGAGCGCGCGCG", "CGCGCGCGCGCGCGCGCGCGCGGGGGGGAGGGAGGAGGAGGAGGAGGGTG", "TGCGCGCGCGCGCGCGCGCCGGAGAGAGAGAGAGAGAGAGAGGAGAGAGG", "TCTCTCTCTCTCGGGAGAGAGGAGGAGGAGGAGGAGGAGAGTCTTGTGTG", "TGCGCGGGAGGAGGAGGAGGAGGAGGGGGCGGGGCGGCGCGCGCGCGCGG", "AAAATATATATATTATATATATTATATGTGTGTTGGCGCGCGCGCGCGGC", "TGTTCGCTCTGCTCGCTCGCTCGCTCGCTCGCTCGCTGCTCTCTCTCTCT", "AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGATGGAGAGAGAGAGAGGAGA", "TGCGCGCGCGCGCGCGGGGGGAGGAGAGGGTTTTTTTTTTTTTTTTTTTT", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCCCCCCC", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCCCCCCAAAAAAAAAAAA", "TTTTTTTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGAAAAAAAA", "GGGTTTTTTTTTTATTATATATATATATATTATATTATATATATATTATT", "TGGGGGGGGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCG", "TGCGCTGCTGCTGCTGCTGCTGCTGCTGCTGGGGGGGGGGGGGGGGGGGG", "ACGTCCCTTCCCTTCAGAGAGGAGAGAGAGTTCATATATATAATATGGCC", "ACCCCGCGCGCGCCTCTCTCTCTCTCTCTCTCCCCCACCCACCACACCAC", "ACCCCTCTCTCTCTCTCCGAGAGAGAGGAGAGAGAGGAGGAGCGCGCGCG", "CGCGCGCGCGCGCGCGCGCGCGGGGGGGAGGGAGGAGGAGGAGGAGGGTG", "TGCGCGCGCGCGCGCGCGCCGGAGAGAGAGAGAGAGAGAGAGGAGAGAGG", "TCTCTCTCTCTCGGGAGAGAGGAGGAGGAGGAGGAGGAGAGTCTTGTGTG", "TGCGCGGGAGGAGGAGGAGGAGGAGGGGGCGGGGCGGCGCGCGCGCGCGG", "AAAATATATATATTATATATATTATATGTGTGTTGGCGCGCGCGCGCGGC", "TGTTCGCTCTGCTCGCTCGCTCGCTCGCTCGCTCGCTGCTCTCTCTCTCT", "AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGATGGAGAGAGAGAGAGGAGA", "TGCGCGCGCGCGCGCGGGGGGAGGAGAGGGTTTTTTTTTTTTTTTTTTTT", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCCCCCCC", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGCCCCCCCCCCAAAAAAAAAAAA", "TTTTTTTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGAAAAAAAA", "GGGTTTTTTTTTTATTATATATATATATATTATATTATATATATATTATT", "TGGGGGGGGGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    int maxPeriod = 10;
    vector<string> dna = {"GGGGGCACACACACACACACACACACACACACACACACACACACACACAC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    int maxPeriod = 13;
    vector<string> dna = {"ACGTATAGCATGACA", "ACGTATAGCATGACA", "ACGTTTGATA", "AATGC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    int maxPeriod = 300;
    vector<string> dna = {"TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "ATTTTTAATATATTA", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 133;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    int maxPeriod = 1;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1800;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    int maxPeriod = 2500;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    int maxPeriod = 2300;
    vector<string> dna = {"CTGACAGGGACCCTCTTGTATAGCAGCAGTTGTGCATTTGTTGCCACTCA", "TAGCCTTCCGATGGAGAGAAGCGCGGGCCACTAGAAGATAATGTCGGGCC", "CTTGAGCGCGCCAAGCCCCAGGCATTTGTAGGCAGGTTTCCTCTCCCGCA", "GGGGCAATGTGTACATTCGGTAGAACATAACGCTGGAATTACATTCGCCG", "CATTACTAGTAAACCGTCCTTTGTAAGGAAGCCGCCAGGAGTGCGTTAAT", "GGATAGGGTCCGAACGGTCTCAACTAAGTCCACCTTGCGCAGCCAACGCC", "ACAACTGCCACAGCTTTATCCCGCCTCAGCAGTGGCATGTCTCCAAACCA", "CGGGCAAGCCTGCGATATCAGGCCGCGGAGTCGTGCCGGAGGATCGTCGC", "CGTAACGACTGTTCTATACCTACCCTAGGGAATACGGGTCTAATCGAGTA", "TCAGGGTGGCTAGATAATAGGCGTATTGACGGCTCGCTCATAGGTACCTC", "AAGAGGTTTTCAGAATATGCACGGCTCAGTTACACACTCGAACACATATA", "AGTCAAGCGCCTCCAGCACACCTCCCTAATCGAGGACCATTTTTTATGTG", "GTCTTCCGGGCTGGTCCGCGACACGACACCTTGGTCAGATACACTAGGCA", "ATCTAACGCCGCCGTAAGTTACACTCTAACCACTTCCACGCCTTCAACAT", "GATATGGGTTATCTGTGTCAAGTCTAGAGCTTTGGTAATACTCAGGCGTC", "CACACAGGCTAAATGTCTTTACTCATTATCCTCCAGAACGGAGGCTGAAT", "ATTGCGCCAATTCGATGGTCTCCAATAGTCGAAAGGCCACGATCCAACGG", "AAAGGTTTGCCTCGGGGGCCAAAGCGTGTAAACCCAAAGGGTCATATCGC", "CAGCGAGTTCGTATTTCCAACCGCGGCGCGACTCTCCCGATACTTTGTAA", "GGCGAGATTCTTGGCACAACCACGTTAAGATCGTCTCTACACGGCCGAAC", "TATACCGAAGGTCAAGCGCACTGCACCGTTGAGGTTCAAGGCAAGCAAGC", "AATATGTGGATACTGTGGTGGAGCGGGACCTGGTGGAAGTAAGATTGTAC", "GCATAGCCGCAAATGTTACGGGGGACGTTTCTTAGGCACGCACCGTGCCG", "CACGCAGATCTCCACTAGAACCACAGAGAACAGTTTCCTCCCAGTCAGCG", "CATCCCAAGTAGGGGTGAGTTAGAGTAGACGTCCCTGGTGCAATAAGTAT", "ATTGAGTGCGGATATAAGTCTGTATATGGAATGAGCAGCCTGCAATATAT", "GTCATTACACGCTCCGATGCAGCCCTCCGAAGCGCCGGACGTCTTTCTGG", "GGGTGATGCATGGGAAGCGTTCGCCGGGGCTATGCTCTGGCAGAAACAGT", "GTCAGAACAGAATATAACTCTCCAAATTGCTAGGCTAGTAATTCTGACAT", "AGACCCACTAGCGTTCCCACGAGGGTGCTCAAAATACTGTAGGTTCAGTT", "AAACGCGAATATAAGATAACGGCGCTGCCTAAGGTGCGTCCTGACTACCA", "ATCGATTCGATGAGCCCAGTCAGCTTCCAAATTGGTTGACCCCCGGGATT", "CGTCGCCCGGTAATGGGCTTCTCGTTAGATCGGGTAGACCATCTGTCGAC", "ACCTTAGTAGTGGCGTTACATAGGGCCTTTACCCCGGCCTTGTCACCAAC", "TGTCAACACTGCGGAGTGACAGCACACGCTGAAGACGGTCGTAGTCTCGA", "TTTAGTATGTATACCCTACGAGCAGCGATCTCCATCCCCGTCCAATCCAC", "AGATCAAATCATATAATCTTTCATCGATAATCTATAGACATGCGAACGAA", "AAGCAGGCCATAATTGCACATACCAATGTGCGAAGACGGGTTCTTATTCT", "CCACCCTGCTAGGATCAACGCTGTGATATGAGTCCGTCTGTGGTTACATT", "CGGCCCTTCGTCGCCGGAATAACTGACTCATTCTCCCCGTCGATTTCGTG", "AGGTCGAGTGATCGACGCTGGGTCCAGCGTTCCGAACGAACTGCAGATGT", "CAATTTTACGCATCCTATACCAAATTAGTGACTCGGATCTGTCCTCTCAT", "TTAGTTTCCGGGACTGTTTGTCGTGCTGTCCAAGGTGGCGACCGTGTGAG", "ATCTCTCGTTGCTTGTATGAGTACTGTTATTATTATGTATTCTGCAGGCC", "CCGTGCGTTGGCGTAGTGTGGAGTTACGGTAGGCCTCCACAGCCCAGTGC", "GCAGCGAACGCTACGTTTCGGTATCTGATGGGATATACAAGATAGTTCTG", "GGAGGCCGACCAGTCCCATCTGATCAGAATTACGGCTATTACCCGGCGTC", "GGTCTTGCATGTCTCGTCCACCTGGCTCTTTTATGAGCGCAATGGAGTCG", "TCACGGGGATCTAAGCTCGCGTCACACCCTGTGATGCATTCTCTGCATTT", "TGCGCTACAGCATAATACGTGGTTATGTGGCGCCTAGATGCTGAAGATCG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 133;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    int maxPeriod = 3;
    vector<string> dna = {"ACGTGTGTGTGT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    int maxPeriod = 300;
    vector<string> dna = {"TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "ATTTTTAATATATTA", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "CAAAGTCCCAACAAAGTCCCAATAATGCAAAGTCCCAACAAAGTCCCAA", "CAAAGTCCCAACAAAGTCCCAATAATGCAAAGTCCCAACAAAGTCCCAA", "AAGTCCCAACAAAGTCCCAATAATGCA", "AAGTCCCAACAAAGTCCCAATAATGCA", "AAGTCCCAACAAAGTCCCAATAATGCA", "ATTTATTATATTATAT", "AAGTCCCAACAAAGTCCCAATAATGCA", "ATACATGGTTAAGCCAAAAGAAGCCAATAAT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 290;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    int maxPeriod = 1;
    vector<string> dna = {"AA", "TT", "GG", "CC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    int maxPeriod = 2500;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    int maxPeriod = 1;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1250;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    int maxPeriod = 4;
    vector<string> dna = {"ATTCATCGACTGCTTG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    int maxPeriod = 2;
    vector<string> dna = {"A", "C", "G", "T", "G", "C", "A"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    int maxPeriod = 2497;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    int maxPeriod = 1;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1800;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    int maxPeriod = 2500;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    int maxPeriod = 1;
    vector<string> dna = {"AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG", "AAAAAAAAAAAAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1500;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    int maxPeriod = 100;
    vector<string> dna = {"ACGTACGTACGTACGTACGTACGTACACGTACGTACGTACGTACGTACGT", "AGTCAGTCAGTCAGTCAGTCAGTCAGAGTCAGTCAGTCAGTCAGTCAGTC", "ATCGATCGATCGATCGATCGATCGATATCGATCGATCGATCGATCGATCG", "AGCTAGCTAGCTAGCTAGCTAGCTAGAGCTAGCTAGCTAGCTAGCTAGCT", "GTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGT", "ACGTACGTACGTACGTACGTACGTACACGTACGTACGTACGTACGTACGT", "AGCTAGCTAGCTAGCTAGCTAGCTAGAGCTAGCTAGCTAGCTAGCTAGCT", "GTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGTCAGT", "ACGTACGTACGTACGTACGTACGTACACGTACGTACGTACGTACGTACGT", "AGTCAGTCAGTCAGTCAGTCAGTCAGAGTCAGTCAGTCAGTCAGTCAGTC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 199;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    int maxPeriod = 1;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1250;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    int maxPeriod = 2001;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    int maxPeriod = 1000;
    vector<string> dna = {"ACCGACGAAACGTTGCATATCAATTGCTCCAATCCGCCCAAAGGTATGGT", "CTATTCTTACATGTGGCCTGCCCACATCACAACATCTTATCACCACCCAC", "CGTTAGGTATAACTGAGCATGGAGCAAGTGAAAAGGAACCACACGTTAGT", "GTGCCCATACATATTACGGCGATTGCTAAATTCAAGAGCGGAGGAGTGGG", "CCCCCCTATTCAAGCGTTCCACACGGAAATATGCGACATCGGGAGTGAAA", "AGGCCCTAATCTTCAACCTTTGCATTATCAGAGCTGCATTACGAGACTTT", "AGCCAGAGTAAAGTCCTGAGGTATAATAGAGTAGGTGGCCTACCTCTTAT", "GGCAACTGCACCAGGGTAATGATTGTGTGTCATGATATTTAGGGTCTGTA", "CCATTTCCGAACACTAGTCATCCAACCTGTCGGCCCCGCCCATCGTGCAA", "CGTGGGAAATAATATGGTGTCCAACGGCAACTGTAGAGGTGAACAATAAC", "CTTGCGCCAAGTGTGAGATTCAGTTTATGACTACGAACGTGGGAGATCAA", "AACCAACATCGCTCTCGTAGGCCCGAGTTCGGCGTCATCTACATCGTTTG", "GTAGACATGTAGGTACTCGATCGATTGAAACTGTACCAGCCACGGGTCAA", "GGCAGTCAACCTAATTGCAAGGTTGGGTACTGAGCTCAGGGGGCAGCCGT", "GCGCGTGGTGGTTTAATGTATCATCCCCCACTTCCATATCCAACCAGAAG", "AGAGGTTTAATCCCGGTCCGACTCAACAGGTGCAAAATTTTCGGTAATTA", "GGGACTCAGTCCCTAATAGATGAGTGAGACTTGTTTAATAAGCTGTTTTC", "AATTCAGCGCTTGCGGAGATGGAATGCAACCTGTAGATGAGGCCACGCCC", "CCGAGCATTGCGAGCTGATTTGCCCTGACGGTCATTCGTCTTACGTTTAA", "ATGTGGTGGGTCAGTTGTGGTGGCTATCGGTGGATAAAACCTGACACTCA", "CCGATTCCAAACGGAGCACAACTGACTGAGCCCATCTGGCCCTAGCACCT", "AGGACCCAAATTTAGGGTGCGTCTCGTTCCGCCGTACGGTGCGGCTCTGG", "TACCCGACAGTGCTAATCCGGAATTACTGTCATTTCATTTCAGTCACTCC", "TCTTCAAACTATGTCTACTCCCTAGCTCACCGCGGGTCCGTCAGGCGTAT", "CAATGGAATCCAATGTCTCGTTGTCCTACATTTATCCTGAAAACGCCGAC", "TGCCCTATGCTACTCGGTCGCCTGCAGTAAGCCTCTGTCATTTGTGGCCA", "CACGTACACCGCACTTAGATTATATTTTTGACGTTACCGTGATCGACTAA", "TCGAAGACTTTATGACCTACCTGTTTTTATCATATTTGATCGTTTTGGCT", "CCTCAGGATAGTTTATGCCATCTAGTGAAACAAAGCCCAAAGAGATGTGT", "AAATTACCCAACTCAGAGCCCTTCGGTTCAAAGCAGTTTACATAGTCAAG", "TCGCTGCCGAGCAAGCTGGGGAAAAGGTCCCTACCGCATAGATACAAGAC", "AGTGAACGTGCCCGTGTCATGTGGCTTGTCTCCGACTAGAATACTTCTCT", "GACCGGCTTCCGCCCCCCTTACTCATTGCACATGTAACCACGCAGGAGCT", "TTTTATCGCGAGCAACGGGGTGATTCCTGGCGTGGCCGATCCGATTCGCA", "ACGCCTTTTATCCGGCCATGCATCGGCACTAGTTCATTGTTCTTATGAGG", "GTTATTACGACTTTGTGATCGCGTGAGGGGGGGCGTGGGAGTATGCTCAC", "CTAAACCTAGGAAAATAGGACTCCTCCGTCTTACAGATGGGAGTGCGGGA", "ATATGGGAATAATGACTCGGTTTTTCAAGGTGCCCGTCAATAGCACTCTG", "ACGTATTGTCGTCGTAAGAACGGCCCGCGCGCTACCAATATCACAGAAGT", "TCGCGCTTCGATGGGAGTATTGTTGTCCGTTACCTGCGTTCAGCCCGATT", "ATATATGTAATAGCGTTTCGTCGTTTGCGATGTAAACGTTAGGGAGGCTG", "AGAGCTCTCTACGAGTCCTTCAGTTGAAGCTTAGCCATATCTACACATCC", "CGACCAGATGACGATCGGCACGACTTCCCAGGATAAGATTAAGTATTCCG", "GGACCACACTTTTGATCTCTGCATGTGTTAAACCATAGCGAAATAGACTT", "CCTAGGGTACTTTAAAGACCAAGAAACGCGGAGTGCACCCCAGGTTCCCA", "CGGGTTAGCGGAGGCATATCGTGAGATATGGAGCCCTCAGGGACACGCGC", "CCTTGGGTCTGACTCGAATCTTTCGCGAAATAGCTGGATCGAGTCCGACA", "CCCGCACGCAATTACCGTGATTAATGTTGACTTTAGGTCGGCCGAGTGAA", "CGTCTGCTGATTTTTACTTGCCTTATAGATCTTCTTTTAAGATTATTTTC", "ACCCGGCACATCCCCCTAGGAGCAAATACGACGTTAGCTCCAATAGTGAG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1006;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    int maxPeriod = 300;
    vector<string> dna = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    int maxPeriod = 1;
    vector<string> dna = {"ATTTTT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    int maxPeriod = 2;
    vector<string> dna = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1500;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    int maxPeriod = 3;
    vector<string> dna = {"CACACA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    int maxPeriod = 2500;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    int maxPeriod = 250;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 845;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    int maxPeriod = 1700;
    vector<string> dna = {"TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "ATTTTTAATATATTA", "TTAAGCCAATAATGCAAAGTCACATGGTTAAGCCAATAATGCAAAAG", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "ATGCAAAGCAAAGTCCCAATAATGCAAAGTCCCAA", "CAAAGTCCCAACAAAGTCCCAATAATGCAAAGTCCCAACAAAGTCCCAA", "CAAAGTCCCAACAAAGTCCCAATAATGCAAAGTCCCAACAAAGTCCCAA", "AAGTCCCAACAAAGTCCCAATAATGCA", "AAGTCCCAACAAAGTCCCAATAATGCA", "AAGTCCCAACAAAGTCCCAATAATGCA", "ATTTATTATATTATAT", "AAGTCCCAACAAAGTCCCAATAATGCA", "ATACATGGTTAAGCCAAAAGAAGCCAATAAT", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CAATAATGCAAAGTCACATGGTTAAGCCAATAATGAGTCGAAACCTGA", "CCAATAATGCAAAGTCAAGCCAATAATGAGTCAAGTCA", "CCAATAATGCAAAGTCAAGCCAATAATGAGTCAAGTCA", "AAGTCCCAAGTCCCAACAAAGTCCCCAAAGTCCCAAACATGGTT", "AAGTCTGCAAAGTCCCAAACATGGTT", "AAGTCCCAAGTCCCAACAAAGTCCCAAACATGGTT", "CCAATAATGCAAAGTCCCAAACATGGTT", "AAGTCCCAAGTCCCAACAAAGTCCCAATAATGCAAAGTCCCAAAC", "AAGTCCCAAGTCCCAACAAAGTCCCAATAATGCAAACCAAACATGGTT", "AAGTCCCAAGTCCCAGTCCCAATAATGCAAAGTCCCAAACATGGTT", "AAGTCCCAAGTCCCAACAAAAATAATGCAAAGTCCCAAACATGGTT", "AAGTCACAAAGTCCCAATAATGCAAAGTCCCAAACATGGTT", "AAGTCCCAAGTCCCAACATCCCAATAATGCAAAGTCCCAAACATGGTT", "AACAAAGTCCCAATAATGCAAAGTCCCAAACATGGTT", "AAGTCCCAAGTCCCAACAAAGTCCCAATAATAGTCCCAAACATGGTT", "AAGTCCCAAGTCCCAACAAAGTCCCAAGCAAAGTCCCAAACATGGTT", "AAGTCCCAAGTCCCAACAAAGTCCCAATAATGCACAAACATGGTT", "ATGGTTATATTATATA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 147;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    int maxPeriod = 2500;
    vector<string> dna = {"CACGCTATTAGTTATCCTGGGAGATAACCTAGGCGCACTAAAACAAGTCC", "TGGATGCGTACTGGTTCTCCCGAGCTCACTGACCCCTCCTCACGCTGGCC", "AGCATAGTGCGCACCATAGACGGGCCAACCTGCCAGCAGAGAGCTGTGGG", "TTACACAAAGGGGTAGCAGGGTTAAATTGTTCTGCGACATCTATTTGCCT", "GAGTAACCCGGTGCCGGGCGACGTTCCGCGTGGCCACTAATCCTTAGGGC", "CCATAATACAGAACAAAGTGTGGGAGTACTCGACCCGATATGGCACGGGG", "ACGGTTGAATTATTTTCTCGCAGTTTGCGTATCAGAAACGATTCAGGCCC", "ATCCTTTTTCGGCGGTTCTTCTCAGGAAACCTACCTCTAAGGACGCACAA", "TTTTCAAATCCTGAAGGGCGAAATGGTGCTGCTTTTTCAGGCTCGCCGAG", "GAGCCATGTCGGACCAAGGCTCTAACTGTAAGCGCCTGTCGAATTTAGTA", "AGATTCATTTCAAAGGTGCTGTCCGCGTACTGACAGTCACATAGCGATTA", "CGAAAATTGCCACTGCGGCATCCATTACAGCCAACTTTCATGTCCTGATC", "TGTTCATGTCCCCTCTCCAATCACGGGGAATCTTCCGATTACATTACGAG", "GGCGGTGAACAGCGTGTCTAAGGGACTGTCGGTGTTATAGATGGCGGACG", "AAGACCGCGCACTCTTCTTCGGGAGACTACGCCTACAACCGTACAGTCTA", "GCCTCCCAGACCTAGGTTCAGCATGGTTTACAGAGAGCCCTGAAAGTCGA", "TACACAGGGGGCTATCTGACAAGATCAAAAGTGGCGTTCTTACTCAAAGC", "ATACTGGGTAGTGCGATTAATCAAATTTCGCAGCTATATCTCTGTATTGA", "GTTGTACTGTAGGCCTTCGTTTCTAAAGGTTTTTGAGGTCAGGAAGGTGT", "TGGTATGGGTCACTGGAGATACTCGATAATTTGGATCATACGCCCCGGAC", "CTCCCACTGTAGCGCCGCTGCGATTTTTCAGACGCTATGCTTCCGCGCGT", "AGTTAGCGGAGATTAACTGCTACTATCTCGGTATACAACGTCCCTGGAAT", "CTAGACAAGTTGACACGGCACTCCGCCGTTTCAGTGATGACATTGTACAT", "GGTCCACGGGTCCATTCAGGGAGTGATTTCGAATGTGGGCCTGGTCGCAC", "AGTTGAAGGTGAACTCCGCACGTTAGCTCTAATGGGTTAACCATGCGTGG", "GCTAAAGAGGAACGAAGTGTTGTGGAACGGATAGGCTGGGGGTCGCCGAA", "AGACACAGGCGATCTCATAAGGTAGGTTTCTCTGATAACCACTATTAATT", "CGACTTCTCATCAAAATTTCCGGCATAGTTACTAGGGACAAGACGTAAAG", "CCCACCGTGTTAACCGGTCCAATTCTTGGGTGGACATAATCTCCGTCCGG", "TATATGACATCCCGTGAAGTTAGCCCCGTCCACCTCTAAATATGGGGGTG", "AGTATAGCTTAATCTGGAAACAACTCCTAGGGTCTGCTAATGTAACACGA", "CGTCGACGTAGAAGCTAGCTAGCTGAAACGGATTGGGTCCACGCCAAGCC", "CAGACCGCTCCTCTGCGCACTCTTGCGTTATGTGCATGGCCCCGCGCTTA", "TTTAACATTAGGCCGAGCTATTGACGCCCGCATTCAATGCTGAAATCAAA", "CAAAGGAACACAACCTCGTGTCTCTGAGGAATCGTGCTGTCGGAAGCTTG", "ACTAGGGTACACGCAGAAAGATCCTGGCGGATAAGGCTCACCTTCGATAG", "CAGACTCTAACAGTGTATAGCCGATCCTGGTCGGTTCCAGAAGCGATTCG", "GTAGACACTTTAAACCATCTTTACAGCTGTCATCTTGCGCTGCGATAAAC", "GAGTGTTGCAAAAGAAGACTCGACGTGTCGATGGGCCCACAGCCGCCAGA", "ATCATTCGTTGGATGTTCAATACTAGTACGCAACTTAACGGTGCTCTACA", "CATCTCGTAGCCCACGCGGCAAATCTCTTCGATCCTACGCTGACAAGCAT", "CCCACATAATAGCAGTATTTCTCCTTATAGCAGAAGAGATCCCGACGGCT", "ATGCTTGGATGGGGCGCGGTAGTTCGTCTCTGTAGATAAGTGCACACAAT", "GCTTTTGTATCCTCAACTTAGTTCAAAATCCGCTCTAATTAAAGCTTCGG", "GGTGTAATCAGGATGCGGATAGCGAAAAAAGGTTATTTCATGTCCGGAGA", "TTCGTTGGCAAAAGATAATCGTGAGCCTATGATAGCGTAGTACTAGAGAT", "TTAAGGGTGCCTATCGTACAAGTTATAGTATTTCGATGTCCGCGGCTGAT", "AAATACGGGTCCGATTCGCTTGTATGGGCTGGATGCTTCGGAGACTACAT", "AATGGAAGGGTCTCCTAAAATTCGGGTTATAGAGGGACTTCCACATGGAT", "GAGTTACTCCAAATCCCCACCAGGAGGGAACTCAAATGATGTCCCGTATT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    int maxPeriod = 4;
    vector<string> dna = {"ACGTACGT", "GCTAGCTA", "CTGACTGA", "CCTGCGTC", "AAGGACTC", "AAAAAAAA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    int maxPeriod = 1000;
    vector<string> dna = {"TGCATACCCATTTGTGGCGAGACTACTACGGCGCTAGGGCGGCTTATGTA", "GACTTGGTTCAGCCACACAACTCTCCCTTATGACAACAGAAGCGTCCCTT", "TGGCACTCTCTTAACTTTTACCTAGGGCGACCTACCGGGTTGTGTTTCTA", "CCCCTAAGCGCGATAGGTCCGACAATAGAATCTGCCAAGGATAGGTCTTC", "TAGGATGACGAAATTCGTTGGGCGAACCAACTTCTTACCACGCTCGGAAG", "CCAGACCCGTTCAATCCGTGTAATGAACGTTATTGGCTCTACTTAATCTT", "ATAATGCTTATACTGGGAGTTTCTTGTACTACGCCTAGCGTGTTAAATTA", "TCCCTAACTTGCTCAGAGTACCTTCTCCACGTCGCTTCCACCAGTCGTCT", "TCGAATCATGCGGTGAGATTGATTTGACCCAAGATCCCGTGAAGTCACGA", "GTACCCGCCTGACAGAAGACCTCGAGGCATCCTGTCTGTAGACCGATTGT", "AACACCGGGGTACAAGAGCTATCCTGTACGGATATATGTCAATATAGAGA", "ACGTAACTCTTGTTACTATATTGTTTGAAGTCACCATTAGGGGGGAGCGC", "CGTGGTTCCCTGCCGTTCTCATATCATATTGGCCGTACAGATATGACCTA", "AGTGAATCTTCTTCGAACGGATATGTGAATTATGGTTATCTTGGTAATAG", "CAGAGCCCGGAGTGCGCGTAACGTGACACTGGGCCGAAGATGTACCTCGT", "TATATACCTGAAAGCGTGGGATGTAGGAGTTGTTACAATCCACCTGCAAG", "AGGCTCTTAAGGTCAGCCGTGTTAAGACGTCAAACCTTATCAGTTAATCC", "AAACCGGGCTTGTCCCCCTTAAACTCGCGAAATTTAAACCCGTAGAGTCT", "TACTCACGGTCGAGGGTTAATTCTCCTCTCATGTGTTTCAGATGGGCGAA", "CCTCACAGGTGGCCTATAATTATCGGAACAGTCGTGTGATATCCTTCAAT", "GAGATTCAACCGTAACTCTATGCTATTCGGCACCGGTAACCTAACTAACT", "AAGAGCGCCAGATGCGCCGCCACTCCCATTGCCGCCAACGAACAGGCGAT", "CTAGACTTCTAAAGCGGATCCCCCATCGGGTGGACCTATCTATTCGCTTC", "TATCTACAGTGTTATGACAATTATACACAATACGGGTTGTTTACGTACTC", "TAGTTTAACGACCCCGCACGGACACGACATCGTTTGCCGCTAAGAACGAG", "AGGCACGCTCCAGAGAACGTGCGAGAGCCAAGCACTACTTGCTAAGAGAG", "CGTAGGATATCTGTTCAGCTACTTTGTTCAACTCTTCCATCGTGGGTGCC", "CCCGCAGCTAGCCCAACTCGGTCTTCCCCTGAGCTGTGCCTACAAATACG", "CGTACAATACAAGAGAATGTGTTAAAGGCTGACCTGACGAAGGTGCATAG", "ACATTTATGACTCGGTTTATCACCCGCTGTAAAAGATGCGACCGGTACGG", "AAATCTCAAGAGAACAGAATCCTCTGCTTGAACCGCTCGTTGCATGATTA", "AGTCAGGTCAGCACTTTACGTACTGGTTAAAGGCCGGCATTTTTCCCAGG", "TCGTCTTTCCGAAGCCCTGGTGTCGGACAGTCCCGACATTAGTGCGTCAT", "ATTGGACGACGCCTCGGATAGACCCTTGGGATTTTCCTTGGCGTATTAAT", "GCGTAATATGCTCCACGCATACTATATCTGCAACATCCGTCGACGTGTCA", "GGGACGAGCGAGATTTGATCACTACTCAGTGTTAGTTTTCGTTAAGTTAT", "ACAGTAAAGTAGAGAAGTGGGTAGTCAGAAGTGAGACATAGCTCAATCAA", "AACTACCTTAGAAGGCTATAGATTAAGCGCTCAACATCCCGGTGGAGGTG", "TTATTTGCTGACCAGTAATCTGCGCAGAGCACGTTCGTGCGCCGGATAGG", "TCCTTTGGTCGTCTTCCAAGAATGCATGTAGGTGTTTTCGTCAGGGTCGC", "ACCGTCACGCAGTCATCTGCCCGTTACTCGGTTCAATCAATGCTACAGCG", "TAAGGGGATCTAGTTGAGATTAAAGGACGCATGTCCAGTGCGTTGTGTAG", "GGACGGGTTCCCATGCGGGCGTCGCTGCGTTAACCGCCTCATTCGCGCAC", "AGTGTGTCGGCTGGCGAGCACGATGCGGAGGAGGAGCGAGGTGCTACCTT", "TTCGCTCGGCCTCGACGCGCCACGGATCCGACCTTGTTATACTTTACGCT", "CTACTCAATCTGATCGGGTCCGAGTGCAGCCCAGAGATAACAGACGGTGC", "CCACCTTCATTACGTTTAGTGCAGTACAAGGATCCTGAGGATTTCCTCGT", "CCGTGGCTAGCGTGTCGTTATTGCCTGTGGGGAGCACTCTAAGCCACGTC", "GTATCCCCAGTGAACTGTCTCGTATATTTGCGCAGCTAGGTGTGCTAGGG", "GCTCTGATACTAGAAGATCGCCGGAGCGCCTCTTGACAGCTGCAACAGTC"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 983;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    int maxPeriod = 2;
    vector<string> dna = {"ACAGAG"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    int maxPeriod = 1;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1250;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    int maxPeriod = 876;
    vector<string> dna = {"TCCAGTCCCGTGGGTGACATGCATCAGATGGCGTAGCTATAGCTGTAGGG", "TATCCACACGTCTCTTCAGCGCACTTACTATGCGTTTTGCAGAACAGACT", "TCAGAAGCGATGGTCAGATTTCCATACTTAAGTCGTATCCGTCTATAGCA", "AAACCAGCTAGCCCCTTGAGCTTAAATACAGTATCCTTGTGCTACATCAG", "ACGACCCTATCTGCTGGAAATGTGGCTAACAAATTATTAGTTTGCCTATA", "TAGCCGATACAAATAGCCTGACAGACACCGATGCCCCCTATCTCTTAATC", "ACCGAGACCTAGCGCCGGGTAGCGCGGAAGGTGGCTCAGCGACTGCCATA", "CCAGCTGCCTATCACTCACATCCTTCTTGAGTGGCAACGTTTCCCGCCAT", "GGGGAGACCGTTCGAGCTGGCACACGCTTATGGCATGTAGGACAGTTGTC", "GATAGTCTGTCACCATAATTAAAGTAAACAGACTCGTTGAACAAAGAGTG", "GGAACAGGTGTTACGGCATAGCGCCGATCTCTCATCTCCGTCAAAAGCAA", "TTTGCTGAGTCGCGTCGTATCCAAGCGCAATTTTAGAACTGTTGAAAAAT", "GAGCGACCGTCAACGACGATAGTGTCCTAGGAACTCCGGCAACTCCCTCG", "AACTGACCCGATTGGGCGCACAAGTACCTTGGCATAGCGTTCGTAGATTG", "GGCGGGTAATCATGTCCTAGATACTGCGGAGACGGTTTTCCAGGACCGCG", "AGACACTTCCAACAAGGACTAGGATGCCAAGCCCGAGGTACAGACTAATA", "CACAGTTTGATCAGAATCGGCTACAAGAGGCTAATGCATGATTATTAGCA", "CTTATTGATTAACGACCATCTCCCTGTGCTGCTCTCCGCAACAAGATTCG", "AAGGGAACACCAAATGTCTTTTGCCCCCTAACCGCCAGCAGCGACCGAGT", "ACCGCTGGGGGTCAAGTACATAGCATATAGAACAACCACAAGTTAAGGCC", "TGGTGTAGCTACAAGCGAAGCTACGCTTAAGAAACATCCATCGAATGTCT", "CAGTCTTCTTACTTGGCTGACCACTTTCGGACGTATACCGTATCAATTCC", "CACCTTTGCCCTGATCTCCGGGCAGAATCAGCGCTCAGCGGAACCGGCTT", "TTGTCCAGTGTCTTATTATTGGTGTAAAAAAGGTTGATAGTTCGCAGCCT", "CGCTGTCATGTATCTGGTGAACCCTTATGAACATTAATGGGTTTGGGATG", "GGTAACCTTATAAGCGACCCTCCCACGTGGGTCACAGGTATTCCGGAGTG", "GGAGAGCAAGATACGTGATACATCATGGGCAACGAATTGGGCATTCGGGT", "ATTAACACTCCCCGACATGAATGCATCTCCCACAGTCACAGTTTTACTTT", "GATCGCTGATGATACGATTCTAGCGGCTGAGCCCGGATTAGCCAATCCGG", "CAGCAGAACCGTCACCGGTCCGGATAACAGCCACGTTGATTCCCTAACGT", "TAATTGAAACTATAACACAGCAAAGGAGACTTTACTTCTCGCCTGTATGC", "TACTTATGGCTAACCCTTCGCGATTAAGCTGCTTTAGATAGCTAGGAGTG", "CAGTAACGTAGGGGAATTGCGGTTTTCCACAATCCCAAGCGGATAAACCT", "CGCGTGGGAGCATCTTGTGGGGCAGGGGACCCTTGCGGGCACAAAGCTGC", "AATTAGCAGGTCTCAAGTCTGAATTCGGCCCACAGTTACATGTTATTGCA", "AGGTCTTGGCACGTATGTGCCGCTACGTAAATGGGCGCCCTAATGGTCCC", "CTGGACTTGCAGCCTAGTAGTAGGGGAGCCTAAATCATAACATCCGCTGC", "TCGAGATTCCGCCCTCCGCTGACCAACGCTTTGGTCAACGAGGTTGGCTG", "TTGTAAATACGATCCGCGAAGTGGCAACGGGAGATCACGTCGGTTGCATC", "CAAGTTAAAGCGCAGGGTTTTTGTCTATGATATGCGGACTCTAGCGTCGC", "ATGTGGAAAATTAATAAAACCCCGAGGTGAACGGAACATTCCCAGCCCCA", "ATCCATTGTGCAACTGCAGCCTCGATCTCGTGTCTATATGCTCGCAGTAG", "TATAGGTACCCGAGATCGCTTCTTTATTTTCTTTATTTGAGCACTAAGCT", "ATTAGCGGACGAGCTACTTTGGACATATTCCTCCGTCCCGCGTAATCACA", "ATTTTGCCTAAATCGAGGCAGGCGGCGCGTCGCTACTACGCTTACGTAGC", "GCATGGAAGAGACGGGGGAGCTAAGAGGTGGTTAGCACTAATGCATTGCG", "TGAGCGGAGCTAGGACGAAAATCTAATGACAAGGTCCTGACTTCGATCTA", "GCATCGCGCGGATATTCAGCACTTGGTGCTCACGCCTGGTTTTTTGACAC", "GCAGATACTTCAAGGTCCATGTACACAGTAAGTTTAACTCTCCTCAAGGT", "TTACCCCACCTTGTTGCGTGAGAGCAGTACGGCAGTCGTGTTTTGGAACA"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1051;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    int maxPeriod = 12;
    vector<string> dna = {"ACGTATAGCATGACA", "ACAGATATTATG", "ACAGATGTAGCAGTA", "ACCA", "GAC", "AGCTCGTAGATGCGAGT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    int maxPeriod = 2;
    vector<string> dna = {"ATGTGTGTGT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    int maxPeriod = 3;
    vector<string> dna = {"ACGAGTAGT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    int maxPeriod = 3;
    vector<string> dna = {"AGCGACGTACGAGCTGAGAGATATAGATACCAGCCAACT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    int maxPeriod = 2;
    vector<string> dna = {"ACTCTCTCT"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    int maxPeriod = 1;
    vector<string> dna = {};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1250;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    int maxPeriod = 3;
    vector<string> dna = {"A", "T", "A", "G", "A", "T", "A"};
    DNAString* pObj = new DNAString();
    clock_t start = clock();
    int result = pObj->minChanges(maxPeriod, dna);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=19849563&rd=12168&pm=8584
********************************************************************************
#include <vector> 
#include <list> 
#include <map> 
#include <set> 
#include <deque> 
#include <queue> 
#include <stack> 
#include <bitset> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <utility> 
#include <sstream> 
#include <iostream> 
#include <iomanip> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <cctype> 
#include <string> 
#include <cstring> 
#include <cstdio> 
#include <cmath> 
#include <cstdlib> 
#include <ctime> 
 
using namespace std; 
 
#define SZ(X) ((int)(X.size())) 
#define LN(X) ((int)(X.length())) 
template<class T> inline void checkmin(T &a,T b){if(b<a) a=b;} 
 
class DNAString 
{ 
public: 
  int ID(char c) 
  { 
    if (c=='A') return 0; 
    if (c=='C') return 1; 
    if (c=='G') return 2; 
    return 3; 
  } 
  int minChanges(int m, vector <string> vs) 
  { 
    string str=""; 
    for (int i=0;i<SZ(vs);i++) str+=vs[i]; 
    int n=LN(str); 
    int result=100000000; 
    for (int p=1;p<=m;p++) 
    { 
      int total=0; 
      for (int s=0;s<p;s++) 
      { 
        int C[4]; 
        C[0]=C[1]=C[2]=C[3]=0; 
        for (int i=s;i<n;i+=p) 
          C[ID(str[i])]++; 
        total+=(C[0]+C[1]+C[2]+C[3])-max(max(C[0],C[1]),max(C[2],C[3])); 
      } 
      checkmin(result,total); 
    } 
    return result; 
  } 
};

********************************************************************************
*******************************************************************************/