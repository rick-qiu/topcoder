/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4668
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class AlphabetCount {
public:
    int count(vector<string> grid, int length);
};

int AlphabetCount::count(vector<string> grid, int length) {
    int ret;
    return ret;
}


int test0() {
    vector<string> grid = {"ABC", "CBZ", "CZC", "BZZ", "ZAA"};
    int length = 3;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA"};
    int length = 1;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> grid = {"ABAB", "BABA", "ABAB", "BABA"};
    int length = 2;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> grid = {"HIJKLMNOPQZZZONMLKHIDZYQR", "GYXWVUTSRASTZZPSTUJGECPXS", "FZABCDEFARQPUQRAAAVWFBOWT", "EONMJIHGAJMNOVAAAAAYXANUV", "DCBLKDEFIEKLEDWAAAZFGHMLK", "UVAZYBCGHFDFCAYXNPQZEDIJA", "TSWXAKLZGCZBGZIJOMZRUTCBZ", "RQPONMJIHBAZZHZZKLZZSVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXY", "ZZZZZZZZZZZZAAAAAAAAAAAAZ", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ZZZZZZZZZZZZAAAAAAAAAAAAA", "ABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> grid = {"CZC", "ZBZ", "AZA"};
    int length = 3;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVW", "ABZZZZZZZZZZZZZZZZZZZZZ", "AZZZZZZZZZZZZZZZZZZZZZZ"};
    int length = 23;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 977462654;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> grid = {"BDBCBACABDDCCADCBDDCBDDDBCCCCABACADDDCCCBADDDBADCA", "DCBBBACBDBACCADABCCAABACDBADBCBBABACBCADADCBDABBBD"};
    int length = 4;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> grid = {"EEA", "EAC", "CCE", "BEA", "CBE", "AAD", "DDD", "AAD", "DBA", "BAD", "EEE", "ECD", "DDE", "CBC", "CBE", "ACE", "ACB", "BAD", "DDB", "DAE", "DEB", "AAA", "CDD", "CBD", "DAD", "AEE", "DEB", "ECA", "BAD", "EDD", "BBC", "AEC", "AEA", "ABA", "BCC", "ADC", "BBB", "DCA", "BAD", "BEA", "ECA", "ADD", "CEB", "EAC", "EDC", "CBA", "AEC", "ACB", "CDB", "BED"};
    int length = 5;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> grid = {"CBABCBCCBCAAAAACAABAABCAACCBBBBBAAAABACCACCBCACCCB", "CABBBBBABAAABCBBBAAAABBAACCBCCBACBCBCABABACABBBCAC", "BBAAACABBAABCCACCBCCCACCACCACABCBAACAAACBBABACBACB", "BBCABCCACBBBCCBCACBACBAAAACCACBBAAACACCBCCBABABBAB", "ABCBCBABCBAAABACBACAABAACABBCACAABACBABAABCBBABBCC", "BBBAAAABBCBABACABBABBABCAABCCABACBCAACACBCBBCABCAC", "CACBABACABBCBCACABCAAAABCBAAABBBCCBCBABBACBBAABAAB", "BBBABBCCCACABABCCABCAACCACBBCABAACCACABBCBCCAABCCB", "CBBCABABBAABACCCCCBBBBABCACBAAAACBBCABBAACACCCCCBB", "BACCCCCCCABCCACBCAACCBBACCCBACBBCACCABBAABCBCCAAAC", "ABAACBBCABACCABBBACBABCACCACAACBCCCABACBACCCAACBAA", "ABBBCAABBCBBBCCACBABCACCBCCABAACBBAAABCACBBBBBBAAB", "ACBCBCBBABAABAACCCCBCCCBAAACBBBABCABBBCBAAACCACBCA", "BCBBAAACAABCCCABCCABAABACACCABCAAABCCBCABAAACCBAAC", "CBACCCBCCBBBCAABBABBCAAACBABBCBABAABCCAAABBCBBBBAC", "CBCBBACBCBBBBCBCBBBCCBCBCACCCAAACBBAACBCABCBABAABA", "ABCCBABCABCCACBABCCBBCCCCCBCBBACCBBBBCCCCABCBBBCBB", "BBACACBACAACAACBABBACBAAACBABCACCCBBCACCCAABABACAA", "BBCBBCCCABABCAAAABCAAACABABAACBCCAAAACBCCABBACAAAB", "ACBACBBBCBCABCCAAABCABABBAACCAACAABCCCCABBCACBAACC", "ABABBCCAACBBCCCACCCCACACBAACCCAACAABABCBCCAABBAABA", "ACCAAAACBBBCBABAABBAAABCCBBAAACBCAACBBAABBCCCAABAC", "ACAAABCAABCCBACABABACBCBBCAABABBAABAABABCBCABCBBAA", "BCACACCACBABBBAABAABAABCBBAAABAABBCACCCCCBBCBBCABC", "BBBABACCBBBBABACBCABACABAACACBCACACAACACAACCBBBAAA", "BAAACBBBAABAAACCCACAAACCCACACBBABBCAAABBCBBBCBBBAA", "ABCABCAACAACACBAAACCCCABCBAAABCCCBBBACCABACCBBCACB", "BCBCBBABAAAACBCCBCACCBACCAAABACCAABBBCBBBBCAABABAB", "BCCBABCBBAABABCCBCBCBBACAAABBCAABAACBAABCBCABACBBC", "ABCBBABABAABBBCCBCCABCCBBABCBACACBCACBCACBCCCCCCAC", "CCBBBABCABBCAACCBAAAACACCBACCAACBAAABCBABCCAACBCCB", "ACCBBCAACBCCBBABCACACCCCAABBABCBABBACCCCCBABBBBBBC", "CAAABCACCCCCBACCACABACABCBABACCCBACACCBABCCACCBABB", "CABBBAAABCACBCCCBCABACBABCAACBAAABAACCBCBCBBCBBBBA", "CCBAAACCACACBACBCCAACACCCABCAABCCCABABACBABCBBBCCC", "ACBCAAACCCCBCCCBCBBCBCCACCBCAAABACBACBCACCCACCAABA", "ACCABACBBAABBBBBBBBCACBCCAACBABCBAABAAAAAABCCBBCBB", "BABABBABCCBBCABCBCCBACACCACBCBABBAACBCABACAABCACAC", "CCABBBAAAACBBCCBBACCBACBAAACBCCAACCCBACCABBCBBBBAA", "BABBACBCACCCBABACBBAAACAAABACCBCBCACABCBABBACCABCC", "BBACBACAABBBBBBBCCABBCBCCCBCCBBBCABACCCCCAABCBCCBB", "CAAACABCBCCABACABBBACCAACACAABACBBBCCCBACCCABCBACB", "AABBCBCBCACCCCBCABACCBBAAAAAACCBCBBBAABBBBBACABBAB", "CCABABCCACCBBACBBCCAABCABAAACCABBABABBAACAACBBCACC", "ABACBACBAABACCBABCACCACACABBBCBCACAAAACCBCCCBCCAAC", "AABBCCAACBCBBCABBAAABCAACCAAAACCCBBACCAABAABBCBACB", "BBAABBAACBCCACCBCCBBBABAAACBAACACACCBABBAABACAAABA", "AACACBBBBACBBABACAABBAAABCBCCBCCBACBBABABBABBCACAC", "CAAACCBACACCCCBAAACCCABCABACBACCCAAAACBCABABBCBCAB", "BBCCCCBCCAACBACBCCAACBABAABCCCCBCBABBCBABBBBAACCAC"};
    int length = 3;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 4882;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> grid = {"HAGBBEGDDJEGJHAGCGEBFAGEIHAHAJCGGFGFFIFAFEBJECIIII", "CCIDFEJFGIEEAICEJBIFIIEJDIHBCIGBCCJCEJFCCDHGIEJDII", "ADFJCEGICGJIGCEGCDJJFBGJBJEDHBCCJJCJBCEAHGGEFICGDC", "BEJGJEBBEGDIBCGEDIDDHDHJBBEBJADEFJGIIHGFAAHCBFEDEB", "DEBCGEGIIHGIGECCDFGEGHDBDAIBCGECEGCGCIDHDCFGFFJBFA", "IJDADIEHEJCCFJDECAEJJJCGAFIHCJGFEJEDBDCIHDICBAIFAB", "JADBDDIHGDAFBEDFAICGBGDIIFEJDEJFAIIGDDGEFCJGDFCCFH", "GEBIHIEGFJHHEGEGJDCIJIIIHECCCDDDHEJHCEIDIBFDDIIJAC", "CGAFGBEDCCDCHHDFBCFIFHHAIDHBHICAFBHBIDHCJDJBBIDJHH", "EEFIFGFCEGGFFJJEAFCACHBJCGGJFIIJGHFGGJIAHBAFIDAEII", "BHDBFGDIIAJAIHHHHJCGCEDHHGIJFCHGFFCGCHCEJIAHCDACEB", "DIBGAADFHCJFGGEAGIFFAEGECBBEDAIBDBACFBDJGACDDJFIHC", "JJGFHCGCFEAJCIEGGABCBCBICCJHJGHEHIGEGGICHBFIBDAIIH", "BBCGBDJCJCEGHBBADJBEIBHCEJHDBCAFDDHGEFCBJBAACHDFEA", "DEADAIJDCEBCHJCAFJEGHDBAHJCCEACDAGABEGJICIJHJGDEEG", "CEDGGDHFEHDDGEAIAEEGHEDBIIHHHFFBFBBHJEBAEHHJIDHCAI", "DCDIFDCJEDBIBJCFJFGIDEABEIIGADDEDHBGHDHAGCCHIFHGHD", "AGBCHAAAJGDHCHJECHAJCJJFFCGFACCCFEHGDEFGCGGCJIABDH", "FGHGGICIAEEADAGFFDEEGIJIEHBBFJCIBDHCDGGDGADICIEBBA", "GEHDGCGDGGBIFGAGHFHHIEEDCEAIABDFAIDGFDDEJHAFHFBGJA", "CBBGFBDAHDCCBDBBJGIJAJJCDGDEIDCDDDJJIGACEAAHAJHDCG", "BJDHBFIIGCJFAEGDADJIEIGDIGBHEGEJDFGIIIAGJIFBHEEDAA", "AHCCJBDCHEBGDCGACGAFCFACEECGFCFHAFCAJEDAFCJGJADJII", "DDAJGIBAHIIDFEAICHIEHDAHBEIIEEBGGBEJBHJDAFBAECEBGE", "DEECHGCHGFGDEEJDIFBAAJDCHAIEBFDBCCHHIDBCCAIECFJCDG", "BDGEBACICAJFBDDGFIJCCGBEEEHHAEGBEHBAFBGCAIEGICBDJH", "DGHJCGCGHFHEGBFDBCCFHJJBEHAJJDJFAGHHDDFAAFBDJBCAHD", "DJIDFJFGBDBCIEHJACDAGAGGBHAFFGJHCABCECFDFDACFFAJCG", "GIHICIBBFJFGJHADFIEBFJEEEHEGFAIBBCHDBIGFADCCCDHEFH", "EJCBFDCJEAJDFGFEGEAEIAEEJHBDBHGHDDDJGCADBDFBIDBJAD", "DCEEGIJDHCHCIDFHEHJEBGIBHBJHHEAJEIEFFJJGCFGDIHEICF", "BEAAEFCHBEDIJJGBBJBFBEFBEJHDIGBADFAEEAHGCEFFJACFHA", "HDEBACECGJBHBJDJFGJHHIIIIGFJDIIJBEIBJGFJBFJIBCFHII", "ABAICJAFCCFDEHIJGHBDFGGFHIBFJGCBGFHFJEBEICEHGFFFIA", "GHHACGGJBFFFFCBBBHJBHHGHEIDAJFIHCCIEJIDGEAEBBJJIFH", "IAFDAGDJICEGFAHICBCIIICDAIEIJEDFIAJEGHHIEICACEBIAD", "CBBBACJAFDFFFCEHDGHGHAECGIJJJIGGGCEGBGJDIJGDEGHIGE", "FJJAGHFEBAFAFHDEAJJFIDGCBEDAAECCDJGIHDGEFGABIIGDEJ", "EAFEDCJHIHBFAJAIBGBJHBHJHHEBJAAGAIBIAFICBDDGHBCCEF", "IBHEBBIEAEEDIEFBFIHFIEICIJDCIJIJHFAFEJIIBIJCEDEAFF", "EIADDCFDDAAIJGDCABBACHJEJJAEJBGJFHFHJBGAHCBIAEAAGA", "AFIAHGJHJFFCAJAEHABIJDCJCGECBCGDBGBJJGGDHABCGEBHIE", "JJFHEBHDIGGFEHBEGAAAAEEGDIFEHCHHFJCJAAIAGGHGAACADF", "BGHEDEBACEABEEGGEABHDFBACDDJEACCJIBHBHJJEDEJCBCGBD", "JJFBJIAAJFCFFABDGAEDGIHAEHICCFHJDABGCJFHFGABDIDBDE", "DFBCDHFCBDDIBJIIIBBFIDDDAIEBAGGJFFFGCCCFGFJJCIDJAE", "CDCJBEGBGHDJBCIDGIIIGCDHHCIFFGHHJFGJHICACIDHEHABFF", "HDIEIAEGGBBBEJEDAJCGDHJGDFGIIAIEEGEGBJBICGGACCDHJB", "DICDCBCJAAGIHCBCEJGBCHJIGIJJCAFDFBBGGCDEAHIEJEGHHC", "JHADAEIABDHDFIDFFEJDDDCIHDAJHFJJAIHABFFHHCEHCHDFCF"};
    int length = 10;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> grid = {"CDFAHEABAFFGEAEGCGBCFHDGGHDHCAHFHDBDCBHDECHBAAEEEC", "FCAHBBFBEFHFBCDFADDGDGDDDGBAFECDCEAADHEFCADFDBDCEE", "DDAGHADBEAEHABCEGCAABAGFCFDBCCCCBAEEGACDHBDGAADCDB", "EDGDEEBGGEGEHFFDHDCDDBFBFCCCAHCGEGAFCDBAGGAAGGCFEF", "BGDBEFGBBBEGAHDEEECDAEDDCGHHFHGFGABEGFEEAHHAGAAEGD", "DGCGEFHCCGBAFDAFEDEHFGFGGFGGHCAADCCEGDBCHGDDHAFDHF", "CEFHGGFGFHHCBBACHEFGHDHCDCEDACGEEEFGDFCECCFEEDBGDD", "GFBCCAECDEGEBEBEGBBHFFGBGCDADFBBAACGCEAEHDDGACFEGH", "DBBCGGBFHAEBFEGCEHHDEEBFFHEBBCDFADAFAHBCABFDBAFCDD", "DBFECDBHHFDABBHAAFAEACHGEDAEDCECCADGACFFDACCDCAHEC", "GHGBFEADGBGAHHBCDEEECGEEDBGDAAGEFCCFGBCGFECACEDCBE", "AAHGDEHHAGGCHEBBECFEACGCFBADFAHAEEEEDHBFDCBHBBEFBD", "HBDFCBDHFECCCFFBBEFBFGFHBAABAHHDAADDGDGCCHCGHDBABB", "BAFFGDDBBBHHCACGEHADACDEBAFHAHGEEEBGDGHBDFBFFFFBFF", "ECDFDDEABCBCBBHFADHGGDHADCCHCGAHGCGADBAEDFDGBECHFA", "DCHHAHDCCAHEHBGEGHDGDHCGDFAGDGGBDGAHCEFEAFAFBDEHCF", "HACHBBBGAACEFHECEHAFDCBEHAAFCEECFEDAGFFEHEABGBGCHH", "FADCEFCACDFECFCEAEGCFEGBDBDGGFDAAAFCFEDCBHGCDHACDC", "BAFFBHAFHHEGBCGDDGFFECCHDEBBGBDCHCBGHECEEAHEACEHHB", "CAEHBEEEFBEBFHACDDGGEDDHFBCDHDGDHAECEDBHABCGHCDAAB", "FAABAEFDBCDFCEHBBFBHGACABGGHBHGEFDBCCDDDGHEBHAFECE", "ABBCEDHHCGAECBHDFDCADHHCHFHBBAEAEDBFABHDHDFHGBADCE", "GADDBBGGBFFFHDBGBDAAHCAEEDBBCHBDACCFCDCAEDGECAEHBF", "BGEGCDFACCAHBCHGBFAHEGADAEEEADAFECBAFDAGAEHADGFHCB", "DFEBBGBDABCDCEGCBCEHAGGCHFAFADEHEDGFFCBCGBDEADHBGG", "AGEGCECCBGFAEDDFBGGCFDGEGCHAHDDAGHHAFFDDGGFEHBFHHF", "BHHDBGDBCGBBAHGDCCFHHAACEEBDGDGBFEHHAHBCAGDDAHEBGC", "DECBFFDHAGCABGHADCCCEEFDDBFDHCFCAACHHBGBHHDDEACEAH", "EGCGHDHBCFFDBBEEGCFAFGDBGGCHCHHEECAFDBAGAAHEHCGAAH", "BBFDGDAHFFCEDEDHFCFFEACHAGHDCABFBDEFBBAFBHCBHCGHCF", "EGDDHFEECHAHGCEEACCCCHEHCCBBGEDDHFAHFBHBABGHCGCGCE", "HGDBBDDEHHFGHFCEBEEAFAGEFFBHEEFDGAAABCADEADFDAFGAB", "EGCBEHCBAFCECDEBBBGCHEHCFGGHABDCCHGEECBFFFBDHBHEEF", "EFCEAGHHGADDCABEBEGADHAABBFGHDBGEGEEDAHHDCDCADBCBC", "AADCDFDFCFDAFGCAAGDCEFCGGCEEGGHHCECHHDAGGDFCCGEGDH", "FFGEGBBCHEHHGGAFEHBEFCCEGCCCACBHGEFDDABDBABGGDDDBE", "DFGHHACFAFBACGHFGFGCFGEACAAFCGGHBDAEEDFDBBHBAEEBAA", "HECGDFDAGHAFFCEFBEBAEGACACGEEECHFEHCDCEEGBBCADEDHA", "CCCGGAAGFAHHDGABGHCAHCBEHAEDEEAHFDFFFHFCHHDEAFCACH", "FBAEDCEGEBAGFDEDHGCAEFGGBHCHHFDBAGAEECCACHAEFFFBDD", "GDDBDBGADBGCDFABGDGCHEGEDHAAFCADABADEEHCDEHBHFEHDD", "CBGBFGEADHGCDAHCHBDHBGGCEEEDCHEFHGBDAGHABBFAECHGBB", "CHAGFHFCEHCADFCGBEGBGFADCAFAHCGGADEEDDGEDEAGGDDHFB", "DGEDEHBCEBAAACDEEGAHAHGFCGCHAFACAGCAGHCHHHFGGEHHEH", "GAADCDBDAAEDBEDHCCCAFBBHDFEGEGHBFEDBCEHHEGFHDDDDCC", "EGHBGHBDDCDAHBGFBAGFEFCFDGABGDCFBDGAEBCDBFEGEGAHGE", "FHCCFBGBBAFADCBGGCEFEEFEBEEFAAAAHHGHGGEGDDCFAEHBHE", "BHHGDAFCFFAFEGFHFCAHFADGFHCDEBGGFCAACGCACCDBACBHCE", "EBECBCGDBHEBFAHAHGEHHCHCHACEAABHABHEHBFDBAHECBAFDH", "DGBDCABHFFBCGDHBDEGBHBCGAAGAFFHDFDDCACGHEDAHGEACHE"};
    int length = 7;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 158;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> grid = {"B"};
    int length = 1;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> grid = {"BC", "DA"};
    int length = 4;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> grid = {"A"};
    int length = 1;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> grid = {"A"};
    int length = 2;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> grid = {"A", "A"};
    int length = 2;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> grid = {"C", "A"};
    int length = 2;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> grid = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    int length = 24;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> grid = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
    int length = 4;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 15720;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> grid = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ"};
    int length = 10;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 4621330;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> grid = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ"};
    int length = 15;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 440196976;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> grid = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ", "KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ"};
    int length = 16;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX", "BCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY", "CDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ", "DEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZA", "EFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZAB", "FGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC", "GHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCD", "HIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDE", "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF", "JKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG", "KLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH", "LMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI", "MNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ", "NOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJK", "OPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKL", "PQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLM", "QRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMN", "RSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO", "STUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP", "TUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ", "UVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQR", "VWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRS", "WXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST", "XYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTU", "YZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUV", "ZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX", "BCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY", "CDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ", "DEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZA", "EFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZAB", "FGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC", "GHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCD", "HIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDE", "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF", "JKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG", "KLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH", "LMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI", "MNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ", "NOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJK", "OPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKL", "PQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLM", "QRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMN", "RSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO", "STUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP", "TUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ", "UVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQR", "VWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRS", "WXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST", "XYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTU"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZA", "CDEFGHIJKLMNOPQRSTUVWXYZAB", "DEFGHIJKLMNOPQRSTUVWXYZABC", "EFGHIJKLMNOPQRSTUVWXYZABCD", "FGHIJKLMNOPQRSTUVWXYZABCDE", "GHIJKLMNOPQRSTUVWXYZABCDEF", "HIJKLMNOPQRSTUVWXYZABCDEFG", "IJKLMNOPQRSTUVWXYZABCDEFGH", "JKLMNOPQRSTUVWXYZABCDEFGHI", "KLMNOPQRSTUVWXYZABCDEFGHIJ", "LMNOPQRSTUVWXYZABCDEFGHIJK", "MNOPQRSTUVWXYZABCDEFGHIJKL", "NOPQRSTUVWXYZABCDEFGHIJKLM", "OPQRSTUVWXYZABCDEFGHIJKLMN", "PQRSTUVWXYZABCDEFGHIJKLMNO", "QRSTUVWXYZABCDEFGHIJKLMNOP", "RSTUVWXYZABCDEFGHIJKLMNOPQ", "STUVWXYZABCDEFGHIJKLMNOPQR", "TUVWXYZABCDEFGHIJKLMNOPQRS", "UVWXYZABCDEFGHIJKLMNOPQRST", "VWXYZABCDEFGHIJKLMNOPQRSTU", "WXYZABCDEFGHIJKLMNOPQRSTUV", "XYZABCDEFGHIJKLMNOPQRSTUVW", "YZABCDEFGHIJKLMNOPQRSTUVWX", "ZABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 33554432;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> grid = {"AABBCCDD", "AABBCCDD"};
    int length = 3;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> grid = {"NZHGPYZWNHNJKNGTFGLMNOSTQWXUYIZDCTGAGPOKCAACBDHPSQ", "EYRQFYXVGOIPOMWSETPIPOQXUPYRGJYXUSGHDIQTTGYHINOTUR", "VWXKXZSKFSCQAMZDXYBMQXSYYXLLMNTUVQRDAMSUWZLNLYCZWX", "MTIWVZFGBVYIDEYFWFJLVRZXPZRNYEBVWIQONKVWVMWVXMRDYA", "JPEFJKREUZWXFZXAGHKPCZNXWVMQFWWJZNPHRJZUZHSTZNHWDU", "YRQMVLXZXLUZKOWDAADOQOYWUNRPZXNOIHXIUSTYNOPRQYXFVT", "SQLRBMYUQNMEQPMKMCBMPZITTSOIYGLMGWUVVRPOJGSQWSPRGI", "NKLOSVSTOZPFSRLNBRQDAVIFUGWCAKKMBFTTWCDDFQTWTSOKJD", "JHPKBPQSWNOVRIGOKPSRBCYNDFCBABNZYTZXBAUYXYUXYULMJY", "ITGBAATYZPONZHFHZMGTDONCDUXABEVXXYSWYZTZRGPUWZTOZV", "SFURXDCZURSYXOQGWYUEXGKCEFBEFBTVWBUVSNRSQQOMLMSDPQ", "RPVYAZEXZTWHGEPHOXDIFJLOBZNGLCRUUTPFTSKCRPNLKQJIHW", "QRWAYWFHWRKVGFDEBCJKGHPCBYOYTIRQTSMZXLVISOEMDJNGUX", "STOXBENPQSIRFDCADAMFRQPRCVRZXSPPRQXPYWBTDYAHIEGEZY", "MJNCZITOLKTPONBABVZGWVOBIJSPLWDYZYBOVTCCZTXBYFPXEL", "LKIGYKRSIJUOMPMSCYYXUTDWWZZTTKXWNMOGBASUVWUCQSVZNM", "DCFHXZLAHVCNFLYUXTFPMVFZYTYRSUVVJLHCSRQMTOHYVUFSLO", "JBQUWBCBEWMDMBWSRGJJSXWLWSRXQZOKJKFGKOJMLKZEBURGPM", "APFQTGKJETXNZAPZVKPNQWZXXVUTWPPYXTEQLKLYPHJCVXCQLN", "ACGVTZLISUJYLOYJWLQSZUXZTWBBAOGSOAQVPNXZWIGWGUYDFO", "DEWUYZYXWVZZOXNFDBBZYUBQHECGMNHRDPOOOWSRVFZXQLKSGP", "BCDXRNPNVYTPQUOGHACWXSXYPFCDJLREQMNEZZVAPQKPBEATUQ", "OYKMQQYNVGSRQYJKLDZVTYREOGABXSNKLKLYHRYHSRHQODJZVX", "MZXJPORZDMFUSRXNPSVUXVZQKEHBRTDHIJYYTDXTIYIMOLRYXY", "OQWMUZZUEEAYOQFROMTWNPPUJLIIOVUUIAFEXNWPJKLPONQNOB", "PKMVLKJVDCZACDEGINLMDAZOIYMYJWEBARBDYOVCEAOWQSUXCZ", "UVUIXGIESQBWJWPVUCFKLBNAXZXKQSDKCHCEUVFDDHJMLVWTRQ", "ATVGHPXYLPAXVHGTBEJIPMDWPULYRTOLDEMJYWABWYIKQXJZUP", "VBCFYVGIFBYZQONSUQWHKODFTQGMUXMMKGFKXZQVXEZHMYZVZV", "KWDEWUHDANCSREMUUYYXBCDMLINPMYWJIYXNLHTUDUHGQTUXWF", "ZYYZASKEBQCIDONYXTZKTCXKJOSRNZVUKWMGDEZYXGIIRSTYZG", "XZNONLVWRCPAKCMZWZQMOBGFRQPVUZYTNLHJFTXBIDFQDLMKOA", "HIJOTUXLDSYXWLHHKRXRPDCGZNMROXZMWIZUKWCRPJPNQCZLJA", "FGDSRZYJEWTVKJIGDUTPLKJFTOQMSWYTUIMNVEDNQKOXWRYMIB", "QUACKHDCDFUTKCFEDGVMQVKIXUYLKTIOPSTGOUTAFOWVYXQNCA", "VIBJPQBJCLGLDEDDBANLZSBLWVZIJRJNMRLHJSZCVNOXUTPNMD", "HGZYNOKHFHPMFACACRMQQYOXCZQFQPKLOQJIIKRIQSZQZSCWVC", "FWXZGTRLGUWRVZBBUWXVZXWVYPOGNJNOPKGFYGLPOTRYEFZABD", "EROSTLUMQXVWXYCHVTDYDVUTYKGZUXNYLLJIBXMOUWWXYYYUPK", "ODCJRVWANRWTXDADEMJECATZGIJVYWVVRMKCEAUXYZVNKIZXWC", "KNUTAXEBOUSMZYZRGFNPFIPSCDFRHZFURVICEZYJXZSOGSHJGH", "UWVQOZYCAIEUYSZHIZOGKMVUXBAGJEPITQPJLDEWVULRNQRMXA", "YZKDDDBCBCJKXURTJYRJHLTVZWEPQOWJVUQPJCXCXRPPQMPZLK", "UZEIYMETRVGNWVTQPGQQIRIGPQLDACVKWTRIBPYYKQCEFNZKYZ", "TYJHLRNSUWKIQBLOOYTMSKQFCRMKVUUXHSOCAZVZXCPGLVYIEW", "XGXKSWMYIXYDCNKNXUVUYTLPUGEHJTYDVZDYZRJNHWOKJXWAFG", "APFUVLFWVZIZGHJRVTKZXVZOZHFRYRKNIEYEPOGFBNLUZLECDH", "AESIMLGOVTUXMZIDUNOLVEWYNWUTSZLJHGMORMABCFMTKYMXYI", "DBBZUMUVWSSVWYFDCVMCFGFYXYVNGPONVSPNENILDEUSOPMWUZ", "CDXYTQNRTRQPQGZCBTSAZRSWZPKMINAOUFKFDCJKSOAVRQPVKT"};
    int length = 15;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> grid = {"AGQUVVPQXWVMLUTVWAGNMKCFDENOYWVDLKGNAJIJIJZIHGAUCA", "FEHKLNOYRUSTWVTUXFBOLJEECLMZXXYNORJZBZIDFHKYPQRVAB", "DMAIFMZCSTUZZFZAOYFCFLHFKWSQYRWQSQYIHHWPGMNOSMESWC", "FLNPQYFEHVYQURPNRZJDRMKPQRVSEZYVUTLSYZVNMMMFEVTGXD", "IDSMWKIWIIJYXVWMLKGHUTJWMNTFGMOPGOTXFTUJOLKHSEHUYI", "JHLNOPGVILKTEWIMKMNFCFHWXUUDIJVWTRNUSRYPEUTZTIGMNH", "RKGIVWZYGMQVXKVNLKIOQDGPRJVCBVKXLMLITYGDLVWSYJPMKS", "XTZTUXUXLPQWLJGUZHERSZYQSLAACGFDYFJKTWXCBZXRZOQYTU", "UWMLYUJMOVMLOZTFPGFYYZVUTGDZGANOPZWRUWZAVHYUIRKZYZ", "VWXZWZNIHVKJPXYUBCWXHWXYTFEHLMFBMNQDLIJATROTJSMQOW", "ZETJYXOCYFTILWTBAVVUQBZFXYQVYZXOQLEMKKAGERASTYLKJH", "YWGIICKADXSQVREIIQHUGROTXWUWXVWYZIUONLIFCDWUOHCTEI", "VXNMHNOWXFRLTULKRPTXHCUXTVZTJGKLXTDPHAMNHTXZYBWUQP", "SRPKMLJYUBEAMODHOSLGAKMOSUWYSCFJQEFQQRSIMKGWXARXVO", "RQNORFZRQTDLMFGMIKIMNOBEQUEQNDENRYHIRDTQJLXCEZQSNO", "JKUMEABIRSFPMJFEKHGUMCDHKNJOMRCDZGXGZUPFGSRFYATPNP", "IGLFZMJWQDSLQGDXLMIPWXIGLOWPSHXWUTFWHAVXHIHGZXIOMQ", "HYEHLNMLHGRURZZYMJRQVZCJCSXVTKLYVYVHMXBWYKLYVWFJNC", "HKJILNOAKIFWVYXTSRDSECFGTZYCULRZTRULYQYEUZUVQEDHDE", "GLMZJCTPJGSTVNQUQBCQDFIHMUXZXOHILTSZKXVZITMROXIZWV", "LPYNLZZQQRQHVCJVMBEPNELJQZVUHSLKDJRPYUSJJTSWBJBTYK", "QXOLHYQRVROKIAGNYBFBFLSRYHJWTGMBFAHLFXTKBHXZLCNITX", "WRJNZPNWSXCJBLPXCIAGYNTUXKYXYQYZVUKMRPYSAIKYMDLMWL", "VUWXOWMOVZYBCFRDEHKPOOVWRZMOPNKLMPNJSTRZIJLMNEONQV", "TMLHBVPZSSYCUSPUGFQUIJTYZNSRMOBWQTODKBUKLHYFGSTSTA", "RMGKIQXYKVOXWRTHGRWTQSKGUTRZSNASUATYAOZMGCTDHJLUBM", "ZHNJTRGTULGYTVBIUXXZRPRPOQNVTWLMRVURPZNYFFRTKWVOLD", "YFIOZPNNKLKMPOMLKPYSJYOITUOWXUVZYYZCQYHSEVUZGCXMKC", "ZXRPYDEZMXWRPNQRSYJWTKJXHQECBUPWXZYFQZEZTMNYDNONFT", "WSGQCBOFYVNMSQESTRXUCLTCGFZDTXYJTUWXDRWYUQPOHJOIVG", "VHIDCAAUGZULPQTUVUYNBUSYXTYXWVZZYSVQEFBVEHGNGPWLHW", "DXJKAXFTWHKACODYXZZTUMZPOIWTOMVBJRRDJHPDZFTUQZYTHZ", "BFNYZWPOXIJFNMLMZJRPASLZFEJKIUXWZMBOKXLNGIKSVPDXDC", "JMVQXUQNKYGEJHKONFSTRQXQSMLRSFSYEJAALNYOWMLRWEFWSR", "HUYFRGCRSJIBIGPQVCZIKOMVPRNDWRRQPKHIOQOZLKSOQXVTRQ", "LRXAWVUTRSZANYTURWDJHLNUWPYOECMLONJHPJRGUTRIPMQROP", "QFIDXVZSZPXGZJRTSXYGGFEHVXPZFEDHMEGDCTSAFFCFEDHSNE", "EHJCUYINTVOWSYIHCXYTLDCGFMNOHIGOPDYZYUFTTGDXWBTLTD", "UKBZQXQMXZXSOWXOPBSRMYQDCZXVJKXWZXCXZVHIHKLVYQPWCY", "QVLNYEGKEYGTNVSQMWFHNSRBIGEPSRSYVYUTWTNDJHLXUZSZXM", "WNSOVJFDVJLFOTUJHLGOGESLQSFRRPXVOQSVXVCOLJVYWBMZYL", "YZQUIDNYHKEPLDCDKELQPFOPFTVOKEWURNAWZWNIKZTZVFZSVX", "JCHJWUMABGTQDJCEAAJPQPVEDUPYNJKLTSHBJOXMMWSDQIXYRW", "DDBEXNRQFLYSRKIHKJMNZONBCZBAGIDJIGFMOWLPPMVRJPSTVT", "JIWTFHIKEEHSQLMVDLDWUMCZLTWXHFHIKBWNDPZQOJHITONUFO", "OKHSQGWMCDGATONWXZFCVTBYXKQIBZJEJIXVDQFVFJIHBLXWQP", "NTGIPVKBNXSUPMRSYZHVBTFGTWJOCZLKXGYVTSRXUKKCRQYZUL", "VUHKJMUYHZVYJQPTJIFBWUHMSVMCWYXSJIDUQTTSYZQLDFSTWM", "ZXULGPSPSYXCIBUKNYPZYINOQOJNORWVWHZNRJYQCMMOKGEDFE", "LYOFLOQRXWXAAAVWXZLXVUJKOPVPQUQPXYMFMTSABEGVQHCDAD"};
    int length = 14;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> grid = {"SRGSRPGBAHISBCMKRPIJSCROSTQQMMQRKJTAKDOEACEETSRQLM", "PTMTNQECPQROTDLTRPQTSTNMPRBQHLPSNIQSOMDHTBDHHJPONJ", "CDLLMTKMNOTMPSRTOPMRDOTSLCFGPITONOPFNPLIGSNGIKJPQL", "DHIFDEJLAPNSLCHNJFFECSHTDGEQJBDGDKMSTSQSOTRFLRAQHR", "CKGNFATBLCRKJAMLDENBKRNQNOTEKBIHFEHGEFRSRJMNEJBGFS", "QMLMQGSCGQEDBTFNCTSKOQPOPSAMMLBDTSGLSGITRQHCRDCPBT", "RSHKIHNDGHCTAEKMEDTNSNCKNCRPONTPOORIJTTSRPBAELGSAP", "TRQFINMBIFECTTJFASPTQRKOPFQORTLKNASTKJKEGOEBABOSTT", "SPELKJCJLBPSQIHGBDGJPOKJIQPTSDQROMRQSLTFLFABGNMPRS", "LAODRKKJEFGRPRTPJEHIHNTJRBFRDIESCPBTRATKHGFKAHENQS", "MNKSQMPRIHQIHMSCFKLMNSQFSTATCFTTOCDAESRTBCDEIBFGPR", "MJTTNOBTSNPFJOQKJJPTQRPRGDSSQCFHJGEBFMKTOMDFCELNPL", "INOSCDFFKOKFDOMIHOHSLONHDRPTNPQQRATANJSRHNRLKKHSRQ", "HTTPBBGKPOMLGDKLBQRPLMDSBTOCDFGKPSBDHOQQRONLTMGTJA", "GQEQAAHTRSIBPJSDTSABOKKCRNMNIHEJLOCGJPCFQOIMNDEFEF", "KFEDDCBNTFEDSICENTIANILHMLIJQDGMTTDTFBMGMRHBBCEDMD", "DQGTCPOLTBGHDFPJKOJOLMSKEHKLCRHINRSESAJTSNBGDECFHN", "ISNIJQKILRSRIJMQLIHPKRTDMKITBOLGDHQPBAOTCECDCDDGTQ", "HTRMRGHHQOSFBLRLPGKLMNRPKJLAJPFSRKKOODPSBDGEOFEHMS", "PSMHEJSFNNAABHNSEBAJTRQPJLTHIKRPOLMNTKJGAMSFJKCPOL", "OJKLNDAIJMSGFEABTCBIHPSTMLKJDFIMNPSEGCHGFQTKIIQTSJ", "FECRSDBKLJIEHRQASRDHLHOQGMONECGJPTTFDRTBTSPLHJRKCB", "ABDSPGNCJHNISPLIATEKMFGAFHNPDHHKJIHCSSIOSONGRTNQJD", "OMCDREDPNPSASFJLJBCJEJACTSQHIEGHCKRBLRTTDEFSTOSBIE", "BPBJEHFTQRTGMPEMLSPNTSIBCRCEHJKLBFLMNQSPOCJEGHDHGF", "ACQEFGSGPOAPMLOJHOQRDTMJJESTPRQPOARTCPQNNLTSQEGCGA", "IOTSRGMEKDFBONKGIGDBCEHIHLTRQHLNGIRSRBEFMLKTONMDRA", "STSSRLENABPGHBEQITAEFLEJOAQNKAMOKKMQHLDCCASQOGETOQ", "GIDSPQOSTQRJIADDJHSNPKHDPRSTBLOPRJNLFIHDDBDAKLHGFN", "HCJATPMIRPKSBABCBKEMQRTJKEGPODNQIBDOQFIJKCBEKIHKBE", "GFBTFIHHQRLODRTNLLNPRISTGRTNGLTRRALTREDATRCLTOIJDT", "HLAGHRHOFPQGQSKOKIOQTAHBFSRMBOPSDNMSOTKCSAQECSPQMS", "HIKIJGOSTKBFNPSPIJOFEBGECRQILJTTOTMNTSOQHCPNMORPRH", "GKJADEFRTNOJEOKHQNGBABDDGOPKASLFASLKJRRPINOOALKQOI", "LJBCRLMKLMQPDCFNMRSAJBCFEHPOPBMGARKJNKPFJLMDPCPJRF", "IMRTRPQLKRFDABIGEJTJAKTTTSINMRNOBQILFQRSKLCFQBAIGM", "ERSOPGRADTSLRASHQRSILGRNRKLJKIGSCHATOJKJCHKJERGHIE", "KPMMLOABJCHSOCQRGOOTCSESLIEKJKHFRGFQSBIABAKJMSCICG", "ETPTLKBCABMNTSRHTMNPKLTKJIJTSFJMEQOEDCCEDQANDTPOBA", "GJOSIFDDSFGFIQOJSQJJRPEGMNLRQIATNOQCEBAGFADOGQRPED", "OLJRTHASEFHJKAOBDPHSQDRPFJOMPEHBHMKFANEGBRPJOHSHQC", "PQSKGPRQTPILMNACFOTRQESRINCPFTDCLLJAFEHDCMLSEPGILR", "GERTNFLCCBEDCBTDFGISSTADHIGBQSCKJHIGMNJISPQPTDGQTS", "CDDBJKEDFFARABTSRHBTKLBEGEKSRDTFEHSQJOKTTRKNQATRPS", "FGAENMNJIGSRSQRSNMKGHJICFHCPTERSCQPNKSTBISTMBESJRL", "AHIGLMQTHMSIQPIQLNLIFRHEFPIOBFQARMOLMTSKIHSRDCKKNQ", "ACDJSRSPAGKJFJQPOLMDEFGIIJNMATKOANDJNORDEHDGHNGDKP", "BQIFDTAJBSAEKSRMNPJCGAFTKHTKLHMNBCIFOQKCQRJTIIHELH", "PORJKTIPJNHLFFLONKOIHALTROPOTGRPQTHGCPPPIHSSMJSRTO", "ESTMSTQOOMMCEQTSHMECQRSTSQNFDCQSTSONDOAOMBANOPQCNS"};
    int length = 16;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> grid = {"AADCCADFBABAABDFABCBFAEBACFDCAABEFFEFABCDDABCECEBA", "DBEFEDECEDCDEFECEFCCCFCAEBEBBACCDEDEBAFECECFFADFBA", "EFFECBBDEFDBCFCFDDEDDEBFBDFEFBFFAFBADEFECFCDFEDEDC", "DEBECECACAEEADECCBCFEAFDCCFEADFEBBEAEFDEFEAADFEDDC", "CDCBFEDCDAFEFFDBEFBEECCDEADBBADCACBBCBBDDFAEBEFCEE", "EFFEDBEBFCBCDBBDCFABFDBEECAECCDBDAEDCAACDCFFDAFBED", "EADFEBCECDAAEBEADBAABAEAFBBEDDEFEFAAFDFEEFAFABFBDC", "EFBCBDAFFCBCEDEEBEAEBFBFCABAFBFEECBEEBCECBEDEDECFE", "FEADEEFCFADFDAFBDFBFDEECBDCCDEFFADCCCFEDFFFDEFCFEF", "ACDCBFFEDAEEBACFFACCDFDFEECDDADFEDCDCDCFFECEEDBCDE", "FBDFAADFFFAEFECEEDFAECFEDFAECABEFFEBBFABFBBEDADABC", "AECEDABEECCFFDBFFEEDABBCABFEFEFBEEABACCEEFCDFEABAF", "FBEEFCBBAEBBECAAAEEDBCDBCECCAEACCFACDFDBEFEFBFDCEC", "DFBBBDCACCDABCEFEFEFCDCEEAFDAADABDDBECCAFEDCCBFDFB", "FDECEFBFEEAABBDECFBCEFFFFEEBBCECBCECFEBAFFCCFECECC", "CFFDAEADCBEFDCBAFACEFCABEBFADFFFBAFEDACABEAABCBCDB", "EDEEBFDBDADFEBCCFBDEDBCFFACCFEEEDCEEFEDFECADABBBEA", "ADABACFECEBAEBCEDBCEADDEEABEAADADEDCDEFFBDDCEFCAFD", "AFEACECFFCFFEADBECAAEEBFDFBECAFCFFBCFFBCAFEAECFCBE", "DDEFFEBDDBAAFBBFFEBBCDBCEBAFBFBBCECEEDEBBFDACDBBEF", "DEFEFADEBFEBCDAFDDEECFEFAAEEEAECEDFBFEBFFEBFBCEABD", "FEBEFEFCEDFDCECFEFDAFEBFBBFDCFBAFECACCBDDDCBFBCDFD", "EACCDCDDFBEEFDABDABCDAAEDCCBEDBCBEFBFEAEEFCAAEEBFE", "ADDECFEFCBAECEFCABCFCFEDCBCAADCFDBDAEEEDAFCDBDFBEF", "DCBEABECAFEBFCBCCAFCDBEDCBDABDFEFCDDBFDCACBECECACD", "CBDCADCDAECEDABBFDBBDCFDEDEDCDAEBAEFBCDFBBFAFDBDFE", "BCEDBAEAEDFDBCFEFBAAEFECCFCDEECCDBBABDFECEECAEDCEC", "BFDFBFCDBBCEDCABACFBCBDBFBEFBDFEBAADABCDEFBDBFFEBE", "CBEEEFBFACDBFECFDCEEFFEFACBFEFACEBEFCEAFFEDCEAAEFC", "ADDEFDEFCFEEFFDFEABCBADFEDEFBABDBAACADBACEFBBBFCAF", "EFEDEECCDEFEDDAEEEABACFDBFDADCDEFDDDEACCDEEDEBBDEB", "DFCBDEADEFBCCFEEDCFAAECFEAFEEDFDFAFFDEDAECFCDFDFCC", "BABACDACAEADEDFDBAEBFABDDABCADFEBCEBFBCFAFBCEDBEDB", "BCFDCFEFDCAFFEAACBDCEBECEFDFEBEDDBDEDAEBABBFEDCEEF", "AEEABBDBECBEAEBEFEDAEDDFFEAFAFFCEFFCEDEBDFACABCDDD", "ACCEFBFEBAAFDCDCFFFCBCBFCBBADEAACFBFEFDCEDBDDFADAE", "BEFDCCECACEDEBAEDFDECAAEECCEFEBCDCCAFBBACFEFAEEEFD", "DCAEEDEFDBCFFFCFECEDFACDFDBAFDFEDBBBDFEFDFDAEFEECA", "ECBFEFDFEBFDEDDAFDBFCBCDFAEDCEFEFFFCFCDEFFBCDFDDBA", "DFACDDACCEEAAAFECFFEBBBEEBCBEFBAEDBDEBADFEABEDCCDA", "EACAECDBADCEBEFBEDDEDCEFDBAAFCCFACAAFEDDADBCDCBDED", "DBEEFDFEFBEFBDAAEFFFFDCCAFCEAFEDBFCFFDBAECEAEEFFEF", "AFDDABDDBECFBEFEDFFDEABBDEDBDEEDBFDEFDBFDFDCFBDECB", "FEFBAFECEDFBAFDEFBEDADBBBEAACDBEFACDEDEFAFDBCCECBF", "DEDCFEEAFECABAFEACCCBECFCFABECDAFBBAEDBBBCADCBAEBD", "CAFEDFFDBCDCDBCCDEFAAEBDEEDCCFCECDFFAACBABEFFAFDEC", "FCACFBCDCABABFBDECBCCBDBFDFEEFDFAFEEDBACAFCEBBEDDB", "EBEDDEDFEABAEECAEFDDCECDECDEFFEDCDDFDFEFDDDFCFFCBE", "DBDFECEEFEBCFDBACFEBDEEFEEEDBDECECAECECDACEAFDEEFC", "CABCDFFBADDFACCDEDEAFEFFAABCADBABDABBDABDCAFABCDBA"};
    int length = 6;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 2677;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> grid = {};
    int length = 1;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 2500;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> grid = {"ABBAAABAABABBAABAAABABBBAABAABAAABAABBBAABABBBBAAA", "ABBBBABBBAABABBBBBBABBABAABBAABBBABAAAAAAAABBBABBA", "AAAABBBAAAAAAAABABAABABBBAABBAAABABBBABABBAABABAAB", "BAABAABAABBABABAABBABAABABBAAABAABBBABBBBABBAABAAB", "BABAABABBBBBBBABBBAABABBABAABAAABAAAAAAAAABBABABBB", "AABBABBAABAAAABBBBAABBAABABABBBAABBABBBBBBABABABAB", "BBBAAABABBBABAAAAABBAABBBABBBAABBABAABABBAAAAABABB", "BBBBBBABAAABAABBAABABBBAABABAABABABABAABBAABBAABAA", "AABABBBABABBABABBAABABBBABABBABABABAAABABBABAAAABA", "AAAAAAABBABBBABABBBBAAAABABBBAAAABBAABABAAABAABBAB", "ABBAABABBAABAABAAAAAABABAABAABABABABABBABBAAAAABBA", "BBBBBBAABBBBBABAABBABABAAAAABAAABAABABAABBBABBABBB", "AABAABBAABBAAABABABBAABBBBABAABAABBBBBBBBAAABBBBAB", "ABBAABBABBABBAABBBBABBAAAABBABAABBABBBBABABBBAAABB", "AAAABAABBAAAAABAAABAAAABBAAAABBABBAAAAAABBAABAABBA", "BBBABBABAABBBABAAABBBABABBABAABAAAAABABBABAABBBBBA", "AABAAAABABABABABBABAABBBBABAABABBBBAABAAAABBAABABB", "AABBABBBABABABABAABBBAABBAAAABBBBABABBABBBABBABBBA", "ABBBBABBAAABBBAABBAAABABBBABAAAAAABBABAAAABABAAABA", "BAABAAABAABABBAABABBABBABBBBBBABABAAABAABAABBAABBA", "ABBBABAABABBAABAABBABBABBAAABBAABABBBBAABAABBABBBA", "BAABABABBAAAABAAABAAAABBABABBABBAAAABAABBBBABBAAAB", "ABAAABAABBBABABBABBABBAAABBABBBABBABBBABAABBAAABAB", "BBABBBAABBAAABABABAABAABBAAAABBBABABABBBAAAABBBABA", "ABBBABABABABBABABABBABABBABABAABAABBABAABBBAAAABBB", "AAABABABBBABBAABAAAAABABBBABABABBABAAABAAABBBBBBBA", "ABBABABAABAAABBABBBBBABAAABBBAABABBABAAABBBBAAAAAB", "ABBBABABBABAAABBABABABABBAAABABABABBAAABABAAABABBA", "BAABBBABABABBAAAAAABBAAABABBABBBBAAABABBABBBABBABA", "BAAAABBAABABABBBBBAABBBABAAAABBAAABBBABBAAABAAABBA", "ABBBBBAAABBBAABAAABBABABBABBAAAABABBBAAABBBABABABA", "AABBAABBBAAAAABAABAAABABAAABBABBABAABBBBBBABBBABAB", "BAABABABBBBBBBBBBBBAABABABBBABABBABBBAAAAAAAAABBAA", "ABBAAAAAAAAAAAABBBABBABBABBBBABABBAABAABABABBABAAB", "BBBABBABBBBABBAAAAAABABAAABABAABBABAABBAABAABABBAB", "BAABAABAABABABBABBBBBBABBAABBABABBAABBAABBAAABBBBA", "AABAAABAABBAAABAAAAABBBAABBAAAAABBBABAABBBABABBBBA", "ABBBBABAABBBABABBABBBABBBBBBBBBABABABABABBBBAABBAB", "ABABBABABAABAAABBBABAABBAABBBABABABABBAAAABBAAABAA", "BBAAAAAABBABABABBAAAAAABABAAABBBAAABABBABBBBBBBABB", "ABBABBBAAAABAAAABBABABBBBABBBAAAABBBBABAAAAAAAAABA", "AAABBABABBBABAABABABAAABBAABBBBBBAAAAABBBAABBBBAAB", "BAABABBBAABAAABBABBBBBABBBAAAAABABBABABABABAABABAB", "BABAABBABABABAABBABAABAABABBABBABBABAAABABBBBBABBA", "AABABAABAAAABABBAAABABABBAAAAAABABABABABABABAAAABA", "BBABBAABABBBAAABBBABBABBAAABABABAABABBAABAAAAABBBA", "ABBAABAABAABABAABAAAABAABAABBBBABBBBABABBABBBABAAB", "BAAABBABABABABBABABBABBBABAAAAAABBAABBAAAAAABBAABB", "BBBBBBBABBABBBBABABABBBBAABBAABBAABAABBABBBBAABBBA", "ABAABAABBAABAAABBBAAAABAABAABABABAABAAABAABAAABAAB"};
    int length = 2;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 5309;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> grid = {"AAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ABBAAAACBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ABCCBADDBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ABCDDEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ABDDEFGHIJKLMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ACCAEFGHIJKLMNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ABBAAAGHIJKLMNOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAHIJKLMNOPQRSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAIJKLMNOPQRSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAJKLMNOPQRSTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAKLMNOPQTUUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAALMNOPAVVVVAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAWWWWWAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAXXXXXAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAVWXYYYXAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAUVWXYZYXAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAATUVWXYYYXAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAASTAVWXXXXXAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAARSTAAAWWWWWAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAARQAAAAVVVVVAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AABCDEFGHIAQPAAAUUUUUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AABCDEFGHIJAPONAATTTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AABCDEFGAIJKLMNAPQRSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AABCDEFGHIJKLMNOAQRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AABCDEFGHIJKLMNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AABCDEFGHIJKLMNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AABCDEFGHIJKLMNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYA"};
    int length = 24;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> grid = {"ZBCDEFGHIJZZMNOPQRSTUVWXYZ", "ZBCDEFGHIJKLMNOPQRSTUVWXYZ", "ZBCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> grid = {};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> grid = {};
    int length = 25;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> grid = {};
    int length = 21;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 21;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 131836323;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 23;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 768398401;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> grid = {"B"};
    int length = 1;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTU", "BBCDEFGHIJKLMNOPQRSTU", "CCCDEFGHIJKLMNOPQRSTU", "DDDDEFGHIJKLMNOPQRSTU", "EEEEEFGHIJKLMNOPQRSTU", "FFFFFFGHIJKLMNOPQRSTU", "GGGGGGGHIJKLMNOPQRSTU", "HHHHHHHHIJKLMNOPQRSTU", "IIIIIIIIIJKLMNOPQRSTU", "JJJJJJJJJJKLMNOPQRSTU", "KKKKKKKKKKKLMNOPQRSTU", "LLLLLLLLLLLLMNOPQRSTU", "MMMMMMMMMMMMMNOPQRSTU", "NNNNNNNNNNNNNNOPQRSTU", "OOOOOOOOOOOOOOOPQRSTU", "PPPPPPPPPPPPPPPPQRSTU", "QQQQQQQQQQQQQQQQQRSTU", "RRRRRRRRRRRRRRRRRRSTU", "SSSSSSSSSSSSSSSSSSSTU", "TTTTTTTTTTTTTTTTTTTTU", "UUUUUUUUUUUUUUUUUUUUU"};
    int length = 21;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE"};
    int length = 25;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> grid = {};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYAZ", "ABCDEFGHIJKLMNOPQRSTUVWXYAZ", "ABCDEFGHIJKLMNOPQRSTUVWXYAZ"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 25;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> grid = {"BCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE"};
    int length = 23;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> grid = {"ABC"};
    int length = 2;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 24;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "CDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYA", "BCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWY", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVW", "DEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYAB", "EFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABC", "FGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCD", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFG", "IJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEFH", "HIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDEF", "GHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWYABCDE"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYA"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> grid = {"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", "ZYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY", "ZYXWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWXY", "ZYXWVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWXY", "ZYXWVUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUVWXY", "ZYXWVUTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTUVWXY", "ZYXWVUTSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSTUVWXY", "ZYXWVUTSRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRSTUVWXY", "ZYXWVUTSRQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRSTUVWXY", "ZYXWVUTSRQPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQRSTUVWXY", "ZYXWVUTSRQPOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPQRSTUVWXY", "ZYXWVUTSRQPONNNNNNNNNNNNNNNNNNNNNNNNNNNOPQRSTUVWXY", "ZYXWVUTSRQPONMMMMMMMMMMMMMMMMMMMMMMMMMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLLLLLLLLLLLLLLLLLLLLLLLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKKKKKKKKKKKKKKKKKKKKKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJJJJJJJJJJJJJJJJJJJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIIIIIIIIIIIIIIIIIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHHHHHHHHHHHHHHHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGGGGGGGGGGGGGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFFFFFFFFFFFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEEEEEEEEEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEDDDDDDDEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEDCCCCCDEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEDCBBBCDEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEDCBABCDEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEDCBBBCDEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEDCCCCCDEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEDDDDDDDEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFEEEEEEEEEFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGFFFFFFFFFFFGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHGGGGGGGGGGGGGHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIHHHHHHHHHHHHHHHIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJIIIIIIIIIIIIIIIIIJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKJJJJJJJJJJJJJJJJJJJKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLKKKKKKKKKKKKKKKKKKKKKLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMLLLLLLLLLLLLLLLLLLLLLLLMNOPQRSTUVWXY", "ZYXWVUTSRQPONMMMMMMMMMMMMMMMMMMMMMMMMMNOPQRSTUVWXY", "ZYXWVUTSRQPONNNNNNNNNNNNNNNNNNNNNNNNNNNOPQRSTUVWXY", "ZYXWVUTSRQPOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPQRSTUVWXY", "ZYXWVUTSRQPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPQRSTUVWXY", "ZYXWVUTSRQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQRSTUVWXY", "ZYXWVUTSRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRSTUVWXY", "ZYXWVUTSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSTUVWXY", "ZYXWVUTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTUVWXY", "ZYXWVUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUVWXY", "ZYXWVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWXY", "ZYXWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWXY", "ZYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXY", "ZYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"};
    int length = 25;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 1000000000;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> grid = {"ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA", "ABCDEFGHIJKLMNOPQRSTUVWXYA"};
    int length = 26;
    AlphabetCount* pObj = new AlphabetCount();
    clock_t start = clock();
    int result = pObj->count(grid, length);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8394868&rd=7227&pm=4668
********************************************************************************
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <cmath>
#include <vector>
#include <string>
#include <algorithm>
#include <numeric>
#include <map>
#include <set>
#include <queue>
 
using namespace std;
 
typedef vector<string> vs;
 
#define For(i,a,b) for(int i=(a); i<=(b); i++)
#define Rep(i,n) for(int i=0; i<(n); i++)
#define Size(x) (int(x.size()))
#define Fil(a) memset(&a,0,sizeof(a))
 
struct AlphabetCount
{
  int count(vs grid,int len)
  {
    int n=Size(grid);
    int m=Size(grid[0]);
    int a[n][m];
    Fil(a);
    Rep(i,n) Rep(j,m) if(grid[i][j]=='A') a[i][j]=1;
    For(k,1,len-1)
    {
      char ch='A'+k;
      Rep(i,n) Rep(j,m) if(grid[i][j]==ch)
      {
        a[i][j]=0;
        For(ni,i-1,i+1) if(0<=ni && ni<n)
          For(nj,j-1,j+1) if(0<=nj && nj<m)
            if(grid[ni][nj]==ch-1)
            {
              a[i][j]+=a[ni][nj];
              a[i][j]<?=1000000000;
            }
      }
    }
    int res=0;
    Rep(i,n) Rep(j,m) if(grid[i][j]=='A'+len-1)
    {
      res+=a[i][j];
      res<?=1000000000;
    }
    return res;
  }  
};

********************************************************************************
*******************************************************************************/