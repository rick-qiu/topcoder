/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11035
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class MovieSeating {
public:
    long getSeatings(int numFriends, vector<string> hall);
};

long MovieSeating::getSeatings(int numFriends, vector<string> hall) {
    long ret;
    return ret;
}


int test0() {
    int numFriends = 2;
    vector<string> hall = {".#..", ".##.", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 34;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    int numFriends = 2;
    vector<string> hall = {"..#", ".##", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 16;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    int numFriends = 5;
    vector<string> hall = {"..####..", ".###.##.", ".######.", "#.#.#.#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    int numFriends = 8;
    vector<string> hall = {"........"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 40320;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    int numFriends = 1;
    vector<string> hall = {"."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    int numFriends = 1;
    vector<string> hall = {"..####..", ".###.##.", ".######.", "#.#.#.#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 13;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2164694716800000;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    int numFriends = 8;
    vector<string> hall = {"..................................................", "..................................................", "...#..............................................", "...........#......#...............................", "..................................................", ".............................................#....", ".#......................................#.........", "..................................................", "..................................................", "..................................................", "..................................................", ".........................................#........", ".......#......#...................................", "..................................................", "................................................#.", "..................................................", "..........................#........#..............", ".................................................#", "................................#............#....", "............#...........#.........................", "#.................................................", "................#.....................#...........", ".................................#................", "..............#..........................#........", "..................................................", "..................................................", ".......................#..........................", "....................................#.............", "........#.........................................", ".......................#....#............#........", "..................................................", "........#..................#......................", "..................................................", "..................................................", "#...#.............................................", "............................................#.....", "..................................................", ".........#............................#...........", "......#...........................................", "..................................................", ".............................#............#.......", "....#......#.....#................................", "................................#.................", "................................................#.", ".......................................#..........", "..........................................#.......", ".....#............................................", "..........................#.................#.....", "..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1842402597678720;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    int numFriends = 8;
    vector<string> hall = {".#####################################.##.########", "##################################################", ".#################################################", "#################################.###############.", "##############################.###################", "#################.######.#########################", "##############################.###################", "#####################.###############.###.########", "##################################################", "########.#########################################", "#########.#######.################################", "####################################.#############", "#####.############################################", "##############.###.###############################", "##################################################", "##################################################", "##############################.###################", "##################################################", "##################################.###.###########", "##################################################", "#############################.####################", "######################################.######.####", "##############################################.###", "####################################.#############", "####################.#.##############.############", "##################################################", "##################################################", "######.##########.#####.##########################", "###########################################.######", "##################################################", "##################################################", "##.###############################.###############", "##################################################", "###############.##################################", "##################################################", "##################################################", "########################################.#########", "##################################################", "##################################################", "########.#########################################", "##################################################", "########################.###########.#############", "##################################################", "##################################################", "##################################################", "#########.###############################.########", "#####################.############################", "############.#####################################", "#################################.###############.", "##################################################"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    int numFriends = 5;
    vector<string> hall = {".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#.", ".#", "#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 720720;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    int numFriends = 6;
    vector<string> hall = {"#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 797448960;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    int numFriends = 6;
    vector<string> hall = {"..#.#..##...#.#..##...#.#..##...#.#..##...#.#..##."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 427518000;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    int numFriends = 6;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 358269120;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    int numFriends = 4;
    vector<string> hall = {".....##.##..######..#.##...", "##.#######...#....#####..##", "##.#.#.###...######..#.#..#", "..##.###...#.#.....##..#.##", ".#.##.......##.#....#.####.", "####.....##.#.##..#.#..####", "..#.....#.#.##..###..#.#..#", "####..###.#.#..#.#..#..####", "...####.###.###.##.#.#.###.", "#..#.##.####.####...##.####", "#.####..#.#.#.#.##..#.###.#", "..#.######.#......###.#.#.#", "..#.#..#.#.#.###.....#..###", "#..#.######.##.........##..", "##.#.#....###.#####.###..##", "##.###.#.....##.#.##.###.#.", "#..###.#.###.#.###...#.#.#.", "####.###.##...#.##.#.#.#..#", "..#.#.#....##.#.##......###"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 468384;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    int numFriends = 7;
    vector<string> hall = {"..###.#.......#####.##.#.#.######.#...#..##", "##..#.#....##.#####.##.#..####.####.#.##..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 551093760;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    int numFriends = 8;
    vector<string> hall = {"###..#..###..##.##....##.#.###...#..##.#", ".....#.#####.#...####.#..#.###...##..###", ".#.###.#.####.##.##.#..#...####.#.#....#", "#..#..##..##...##.###...##..##.....###..", "##..##.....####...#..#...##.##.###......", "#..###..###.###..#...#..##.#....##.##.##", ".#..#.#.####.....#....##....#..#..##..#.", ".##.#..#.####.##.##.#.#.#..#####.##..#.#", "#....##...##.#.#.#.#....#.###.##.##.....", "#.....#...##...#.###..###..#.#.##......#", "..##.##...#.###.#.#.###.######.###..#.##", "..#.#.#.#..##.#.#.#####.###.....#......#", "....#..####..##.#..#.##.#.###...#...#.##", "..#.#...##......#..#..####.##..##...#...", ".....#..##....#.####..###.##..##.#..###.", "..##.#....###.###..#.###.#..##....#.#.#.", "...#.#..###..##.##...###...#.......#...#", "#.....####..#...#..#.#..#...####.##.##..", "#.#.####......#..#...#.#.###.#..#..#..#.", ".#.#.#....#.###....#.#.#..##.#.##.#.####", "..#.##.###.....#.##...##.#.#.##.###.#..#", ".#....##.#...##.####.#.#.####.##....####", "##..##..##....#...##..####..#.##..#..#..", ".##.#..##....#.#.#....#...#...##.......#", ".###.#.##.####..#..#.#####...###...#.#..", "#.#....#.##.#.#......#.#....#.#..#.##.#.", "##.#.#.##..#.#.##.#...###.#..#####..#...", "..###..##.##.##.##.#...#.#..#..#..##..##", "##.#..#.#.#.#.#.#..#....#..#..#.##.##.##", "...#.##.##.#.#...#.#.###.##...##..#.#...", "..#..#....#..##...#.####..###.#.#..##..#", "....####...######.#.##.#..#####.###.####", "#..##.##.###.###..#..##.###.#.#....#.#.#", "...###..#...#.#.#.#.###..#..##.....#..##", ".#.#.#.#..##..#.#...#.###.##.#....#..#..", "#####.#..#.####...###..#..#..###.##.####", ".#.###.#......###..####.#.###..#.#.#....", "##..#...#..#.#......#...##...##....##...", "#.....###.##.###..####......###.##.#.###", "##.#..#...##..#..######...#..#.#....#..#", "...#.##.##....##.#.##.#.####.#.###..#...", "..#..#.#.###.#...##...#######.#....#...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1731489742080;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    int numFriends = 3;
    vector<string> hall = {"...#", ".#..", "##..", "####", "##..", "####", "..#.", "####", "#...", "##..", "####", "#...", ".#.#", "..#.", "##..", ".#..", ".#.#", ".##.", ".#..", "##..", "..##", "##..", "....", ".##.", "#..#", "##..", "#.##", "###.", "#.#.", "...#", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 16260;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    int numFriends = 7;
    vector<string> hall = {"##.#.####..#..##..###...##.#.#", ".##..##....#.###..#...##.#.###", ".#.#.#.##...####..#..#...#...#", "...###..#.........#######..#.#", "#.##.#..##....#.#...#..#..####", "#.#####..###..#..#..#...#..###", "#.#..##.#.#....###....###.#.#.", "##..#..#.#.#.#..##.#.#..###.##", ".#...##.#.##..##...#..#..###..", ".####...##.##.####.##..##.#...", "...####..##.######.##.#...#.##", "#......###..#...##..#...##...#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 752043600;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    int numFriends = 8;
    vector<string> hall = {".##.#.###...##...#.##.....##..###", "#.#.#....###.###.....##..####..##", "####..#.###..##..#...#..##..##.#.", "####.#.#....#.##..#.#..#..#..##..", "###.#.###.#...#..##..###.#..#####", ".####.#.###.#.#.###.#.#.#..####.#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3854188800;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    int numFriends = 8;
    vector<string> hall = {"###.#.####.##..###.####.##.#...###.", "#..#......#.#..#.##..###.##.#......", "####.......####..#..#..#.#.#..##...", "##..####.####....#.######.#####..#.", ".....#.#.##..##.##.#..#.#.#.#.#.##.", "..########.##.#.##.#######.####..##", "#..##..##.#...#.##........##...#...", "##...##.###...#####.#.##.#####.####"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 40836096000;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    int numFriends = 1;
    vector<string> hall = {"....##..#.#.", "..#.##....##", "###......##.", "..#..#..##.#", "###..#.##..#", ".........#..", "####.#####..", "#.#.###.##..", "###....#.#.#", "##.#..####.#", "..#.#...##.#", "####.#####.#", "##..#.##..##", "##..#.#..###", "..#.###....#", "....###...#.", ".#..#.......", "###.#.####.#", "#.####.#..#.", "##.#.###.##.", "##....#..###", "#.#..#.###.#", "##..########", "#.#....#....", "..#.#..#..##", "..#......###", "###..#####..", "......##....", "#...##..#..#", "..#....#....", ".#.##..#..#.", ".#....#.#.#.", "##..###..#..", ".##.#.#...##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 214;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    int numFriends = 7;
    vector<string> hall = {".###..###", ".###.###.", "#.#####..", "..#..####", "#..#.##..", "##.##.###", ".###.####", ".#..##...", "..##....#", ".##.#####", "..#####..", "#####.###", ".####.#.#", "...##.#.#", "......#.#", "..##.##.#", ".#..####.", "#.##....#", "##.#.####", ".###...#.", "....#...#", "#.####...", ".####.###", "###..#.##", "##..##.#.", ".##..###.", "#....#.##", "#....#..#", ".##.#####", "..####.##", "#..#.#..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 376654320;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    int numFriends = 5;
    vector<string> hall = {"##.######...##..", "#.#...###.###..#", "##.##..##..####.", ".###.##..#.###..", "#...##....#.##.#", "...##.#.#..#.#..", ".#.###......#...", "#######..#...#.#", "..#.####.#.####.", "#.#....#.##.#.#.", "##..###..#.#...#", ".#..#...#...#...", ".###.#..#..####.", "###...###.#.#.##", "......####...##.", "####..#...###.#.", "#..........#..##", ".####..#........", "...#.#...#..#..#", "##.#.##.##.#####", "#...##.######.##", ".#########.#.#.#", ".##.###..###..#.", "###....##.###..#", "###.....####..##", "...#..#######...", "....#..####.####", "###.........#.##", "##...#.#.###.#..", "...#..#...####.#", "...#.#.###..###.", ".#.##....#...##.", "#...###...#####.", "###.#.#..#....#.", "####...#.#.#####", "..#...#.##.##...", ".#####.##.###..#", "...#.#..###.#..#", ".###.#...####.##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 28262280;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    int numFriends = 3;
    vector<string> hall = {".#..###...#", ".###.####.#", "...#...#...", "#.###..#..#", "####.....#.", "###....###.", "#......#...", "..##.###..#", "...#..#.#.#", ".#.####....", ".#.#####.##", "####.....#.", "##.######.#", ".....##..#.", "###.#...##.", "#####.#....", "##.#.#.....", "..#.#.####.", "#.##.##.#..", "##......##.", "###.#...##.", "#.###..#...", "....#.##.#.", "###...#.#.#", "###.#...#..", ".#..#..#.##", ".........#.", "####..#..#.", "#.######...", ".#....#...#", "##....#.##.", "..##..#...#", "##....#...#", "##..###.##.", "..#.#.#....", ".##.##....#", "#...#####.#", "#.#....#.##", "#....###..#", "##..####.##", "..#..##.##.", "####..#..##", ".#.#..#.#.#", "#####.##.##", "#...#..##..", ".##.#..###.", ".#..###.#.#", ".#.....#...", "#####.....#", "....###.#.#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 195246;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    int numFriends = 5;
    vector<string> hall = {"##.###..###.#.#...###.#...", ".#....##.##.#..##.###..#..", "##.###........##.......#..", "####...#.###.##.#######..#", "#.#..##.#..###..##..#.....", ".#..#..##.#.##..#..##.#.##", "##...##.#..##..##..#.#..##", "###.#..#.#.#.#....##......", "#.##...####...####.###..#.", "####.##.#####.###..#.#.#..", "..#.#.##...#.#.#.#..##.#..", "..##..##.#.####....##.#..#", "#.##.#####.......###..####", ".#...#..#..#..######.#.#..", "##...#...###.###.#..######", ".....#..#.##.###..####.#..", ".###..#.#.#.##....#..#.###", ".#.##..#..#.#..#......#..#", ".#...#...#..##..#....#...#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 6631320;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    int numFriends = 3;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 403698;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    int numFriends = 8;
    vector<string> hall = {"##.##.###.#.....#..#..###.", "..#.#.###.#.##.#.###.##..#", "#####..#.......#.#.###.#..", "..###.####.######...##...#", "..####....#.#..######..#..", "#.#..###.###.##.#..#..###.", "..#.##...#..####...#######", "..#.##.#.#...##.##.....###", "..#.#.##...#.##..##.#.####", "#..######.###....#.#.#..##", "##.##..####..##.##.#.#..#.", "..#.......###.###.#.##...#", ".#....#.....#.##.#.....###", "#..##.#.##..#..##.##.##...", "##..##..##..#.#..#..##..#.", ".##.#..###...#..#.#.####..", ".##.#.##.##..##.####......", "#..###...#.#.##....#...###", "#...#.#.#.##..#######...##", "#.##..#########.#.##..##..", "#.#..#.#.#.##.#...#...##..", "###.##..#......##.#...##.#", ".#.......#..#....##...##.#", "###.#..#.###.###.###...#..", "###..#.##...#..#.####.#.#.", ".##.##..#####....###.#..#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 7738012800;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    int numFriends = 7;
    vector<string> hall = {"..#....#.#.....#.###..###..#.#..#.", "#.....#..##...##.#######.#..###.#.", "#.##.....#..###...###.#########..#", "..########......###.#####.....#.#.", "#..#####...####......#....#..#.##.", "#######...###.##......##.#.##...##", "....####..##.#...#.###.##...###..#", "....###.####.....#.##.###.#.#.##..", "#..##.#.#..#..##.#.....##.##.##.#.", ".#.###.##.#..##..#####.#.####..###", ".###.#.##########..##.#......#####", "#..##.#.##.#.....#..#...#..#.#.###", "......##.##..#.##.#...#..#...#....", ".##.#.#.#########......##.#.###.#.", ".##.#.#..###..######...###...###..", "#.#..###.#......####.....##..#.#.#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3170699280;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    int numFriends = 6;
    vector<string> hall = {"...##.###..#....##.....#..#.#####.##", "#....#.#.##...#..#.#..##..##...####.", "#..##.#.#####.#.##...##.#.##.#...###", "##.#####.....#####....##.......#.##.", ".#.#...##.##.....#.###..#..###...##.", "#.#.####...######.##.#..#.##.##.#..#", "#####...#.##.#.#####.#.#.#..##..#...", "..##..##.##.##.####..#.#.#..#.#####."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 110025360;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    int numFriends = 4;
    vector<string> hall = {"###...#...##..#.#..#.####.##.####.", ".#..#..#.##.#.#.#..###.#...###.###", "......#..####...#.#...###..##.#.#.", ".##.....#...####.#.#.##..####..#..", ".##..##.#.#.#...##.........#....#.", "##.#....#...#...##.....##.##......", "#.#...#..####.#....#...#######..#.", ".##.##.##..###..######.##....#####", "..#.#..##.##.....#....#.#....###.#", "#.#.##..##..###..#####...#...#.#..", "#####.###..#.#.#..#.####.#....##..", "####.###.#####...#.#.....#...#.#..", "###..###.....#..#####....###.##..#", ".#..#.#..#.##..#.#.....##..##..##.", "...#...##...###.#.##...###...##.##", "#####.#.#.#####.#.##.#.#.#.#..####", ".#.###.###..#.##...##...##.##..#.#", "##.#.###..#.##....##...#.......#.#", "..####.#.#####......##.#.##.##....", ".###..##....#.#.#.#.......####..#.", "..#....###.#####..#..#...####..#..", "#.#.#..##..####..##..####.....#..#", "##..#...#.####...##.#####.#..##.##", ".####.#.##.#..#...#...#.##.#......", "...###..#.#.##..#...###.#..##.##..", "..##.###.##...#.###..#.##..#.#.#..", "###..#..#.####.#.#.####.#..###.#.#", "..#...#######..####.#.##..#...#.##", "##.#.#..#..#..#.#########.#..#....", "....####..#..##.#.###...#....#.#..", "#..###.#####.#...#...#.#.#.#..#.##", "###.#.#####..###..###....###.####.", ".##....####....#.#..##....#.#...#.", ".#.........##.####.#.###.....###.#", "#..#......#..##.#...###.#..#..#.#.", ".#.##.....###.....#.###.##.#.#...#", "#.#..#.####..#.###.#..##..#...#.#.", "..###..###.###.#.#...##...#.####.."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 6933240;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    int numFriends = 6;
    vector<string> hall = {"##.#.#..#.......", "######....###...", "##.#.......#####", ".#.#...#...##.##", "##...#####.##...", "......###...#..#", ".####.#.###.###.", ".##..#.###....##", "###.#.##..#..###", "..#####.##.#####", "##.##.#..###.#.#", "##.#.###....#.##", "####..#..###.#.#", ".#.#...#.#..###.", "###.####.##.####", ".#..##.###.#.###"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1244880;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    int numFriends = 8;
    vector<string> hall = {".#.###.#...#", "#..##..#..#.", "#.#..###.###", "...##.#..#.#", "..##.#..#.##", ".##...###.##", "#.#....##.##", "##..#.#..#.#", "..#.#..###..", ".########.#.", "##..#...#.#.", ".....#...###", "..#.#...##.#", "##.#..#..#..", ".###.#.#...#", "...#..#####.", "#...##..###.", "#.##.##..###", "#.#.##.#.###", "...#...####.", "...###....#.", "##..#.#..#.#", "#....#..##..", "#...#..#..#.", ".#####....#.", "###.##.#####", "...#.###..##", "##...##...##", "...##.....#.", "####..#...##", "##..#######.", "#...######..", ".#......##.#", "#.#..#....##", "#.#.#.....#.", ".#.#####..#.", "#.#.##....#.", ".#.##...###.", "#...#..###..", "..##..#...##", "#...##.#....", ".##.#..####."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 243870117120;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    int numFriends = 4;
    vector<string> hall = {".#.##.#...##...###.##.", "...#####....#.##...###", "###.###.#.###..#..#.##", "##...##.##......##.#.#", "#.#.#####.##.##.######", ".###..##.#.#..#.###..#", ".#.###...##...#...#.#.", ".....###...##.#......#", ".#..##.....####..##.##", "...#..#.##.#..#.#.###.", "####.#.###....###..#..", ".#.##..#.#.#..###.##.#", "####...#..###..##.#..#", "#####.##..##.#....#..#", "#.##.#####.##.##...##.", "..#.##..#..####.#.#..#", "##...##.#.#.##..#.#.##", "#.##.####...#.#.#.....", "#.####..#....####...##", "#####.#.####.#.#.##.#.", ".###.#.#.##..#....###.", "##.#.#..#####...##..#.", "#.####..#.#.####.#..##", "....#....##.#....###.#", "##....##.###.##.##....", "####.###.......##..#..", "####....#..##.######..", "#...#.##..##.###.#...#", "#.#.####..#......#..##", "#.#..###.###..####...#", ".##.###.#.##.#.#.....#", "##..###.#..#####....##", "..#.##.......#...#.#.#", "#.##...#.##.##..#.##..", "########.#####..#.###.", "#..#.##..##.#........#", "##..####.#..#.##.##...", "#..#.##..#..#..#...#..", "...#.#...#....########", "#...###.#....#.#.####.", ".#.......##.#.#..####.", "#..#.#.#######.#.#..##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3354432;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    int numFriends = 8;
    vector<string> hall = {".#..##..###.###..#####.#.#...#...######....##", ".###.##.#..##.#...######.#..#.####...#.#..##.", "#.#####..#...#..#.#..#.########.....#..####.#", "...##.###.###..#..#####.##.......#.##...##.##", "##.##..#..#.#.##..##.....#######...#.########", ".##..#.##..#..#.....##.##.###.##..##.#####..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 42787906560;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    int numFriends = 4;
    vector<string> hall = {".##....####...#.#.##.#...#.###.#", ".##.##.##.#.###.#....#.#.##..#.#", "..##...##...###..#.#.#.##..#.##.", "...####.#..##..#.#####..#....#..", "#.####.##..#...#....#..#.#.##..#", ".##........#...#...#.##..##.##.#", "#.#....#.###.#.###.#..#..#.####.", "###.####.#..#.....#.###..##.#.#.", "...###.....###.##.####...##...#.", ".#####..##..##...#.#..##.....#.#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 554280;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    int numFriends = 3;
    vector<string> hall = {"#..###.#.#.", "#.###.#.#.."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 120;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    int numFriends = 8;
    vector<string> hall = {".####.#..#...#..#....", "..#..##...##.##..#...", ".######.#.##.#...#..#", ".#.#..#.#.#.#..##..##", ".#..#..##.###........", "###.##.......#..#.###", ".####..#.........#...", "##...#....##..##.#...", ".....###.#..######.#.", "#.#...#.###...####.#.", "#...#...#.##.#.##.##.", "#...#..#####..#.###.#", "##..#.##.#..###..###.", ".###.#...##..######.#", ".####.....###.#..#...", "#...#.#.#.#.##....#.#", "####.#..#..###..#..#.", ".#..#######....#..##.", "#....#...##.##..#.#..", ".#..........##..#....", "##.###.#......#.#.##.", "#.##.#.#.##.##..###..", "#.###...#..#..##...##", "#.###.#..#.##.####.##", "#.#.....#####..##..##", ".#.#.#...#.##..#..#..", ".##.....##.##..#.##..", "##..#..#..###.#..##..", ".#.##..##.#####..#..#", ".#.##...#.###.#.#....", "####.###.#...#.####..", "..###############...#", "###..##..##.##..#..#.", "...##.##..###...#..#.", "#..........#.###.##.#", "..#....#####.#.#...##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 103807105920;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    int numFriends = 1;
    vector<string> hall = {"..#.#.....##..###...#..###..#.....#..#..", ".#####..##.#...###.#.##.#...#.#.###...#.", ".####..#########.####..###.####...###.#.", "....#.#..#.#.##.###.##.......###..##.##.", "#.##...##..##..###.###.#...##.#..##.##.#", "..###.#.##.##..#..##.#...#.##.###...##..", "###....##.#....##..#.##....#.#.....####.", ".....#...#.#..##...##.##..#####.#.......", "#...#.##.#.##.#.#..#....#..#.#..##..#.##", ".#.....#.....##..#..#####.#.#....#....##", "..###..####.#.#.##...#.#.##.#.##..#####.", "###.......#.##....###.#.#.##..#.#..#.##.", ".#.#...........####..#..#.#..##...#.#...", ".###..##.#..#...##....###..#####.##.#.##", "##..##.###.##.#..#..#.#....##.#.#.##.##.", "#.#...#.#....#.#.#..#........##.###...#.", "...#.##..#...#..###.##....#.#####...##..", "...####.##.#...##.###....##.######....#.", "......#.###..#.####..##....#..######.#..", "......####.#.#...##.##..#.##.#...#.#####", "#.#.###.#...##.#..#..##..##.#.#.....####", "###..###.#.######..#......##.##.##..###."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 460;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    int numFriends = 8;
    vector<string> hall = {"#.....#...###..#.#.##..#...#######.#", ".#.#...##..###.##.#####......#.#...#", ".###.###.###..#.##.....#.#..###...#.", "#.##.##.##..####.##..#....#..#.#.###", ".#.#.....#.###.##..###.##.##.###...#", ".##.#.#..#.#.#..#..##........##...##", "#####.#.#.##.####...##.###.#..#.#.##", "#.....#.#.#.###..##.#.#.#....##.#...", "#.....####....###.####.#.#...#.#..#.", "..#...#..#.#.#####.#.#...###.....##.", "#..#.##.###.##..#.#.###.###..###.###", "#.#.#.#..#...##.#.##...#######.##...", "#..###.#...#..#.#..#######.#..#..##.", "##.#.#######.##..###...##....#..#.##", "##.....##.#.######..#.##.#.##.#..#.#", "..#...#....##.#.......##.##..#.##.#.", ".####...#.#..###.##....##...###...##", ".###.....#..#..#.....#..###.###...#.", ".....#.#.#.#.###...#..#####.#..#..##", "#.#.#####.#......#.##.#..#...###.#..", ".##.....#.####...##.#.#.#.#........#", "####......####..##.####..##.#.###.##", ".##.###.#..###.###..#.#..#.#...##.##", "##.#.##..###.###.###.##.####.#..#..#", "######...#.#...#.....#.....#.##..#..", "#.#...#.#...#.##.##...#.#....#..##.#", ".#.....#.#.....##.#.#.#.#######.#.#.", "##...######..####..#..##..###.##.#.#", "#.#....#.##.#.##.##.#...#..##..#.#..", "##..#..#.#....###.##.....#.###.##.#.", "..#.#.###..#######...#.#.##.....##..", "##..#.##.#.###..##.#.###.#..########", "#...#####...#..#.....##....#.#...###", "..##......##....###.#.####..#.#...##", "..#####..###.##.####..##.####.....#.", "#.######...#..##..#####.##.##..##...", "######..#.#.#..#.#..##...##..#######", "#..#.....#..##.#...#...#..####.##...", "....##..###..#...##.#...#.#.#..####.", "####..#.##.###.#.##.####.#.#.##.###.", "##...#.####.###.#.#.##.#...##.##.#..", "#..#######...####..#..##.##.##..#..#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 556192022400;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    int numFriends = 2;
    vector<string> hall = {".#.#..#", "..##.##", "..#..#.", "##...#.", "#####.#", ".#..###", "####..#", "..#####", "...#...", ".####..", "....##.", "#..#..#", "##.....", "#.##.#.", ".####.#", ".##.##.", ".#.####", "#.####.", "###....", "#.#.##.", "##.....", "##....#", "...####", "#.##..#", "#.#...#", ".#.....", ".#....#", "#....#.", ".###..#", "#.##...", "#.....#", "####.#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2156;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    int numFriends = 8;
    vector<string> hall = {".", ".", ".", "#", "#", ".", "#", "#", ".", "#", "#", "#", "#", "#", ".", "#", ".", "#", "#", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "#", "#", "#", "#", ".", ".", ".", ".", ".", "#", ".", ".", "#", "#", "#", ".", ".", "#", ".", "#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 62990928000;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    int numFriends = 8;
    vector<string> hall = {"#.....##..#.#.##..#######..###.#.#.#", "#.#####........#.##.#..#..#####....#", ".....###.#..####..#.#...##.##.###..#", ".#.#.#.#.#.#..#.###..###.##..#.##.##", "....#..##....##..#####.##..###.#....", ".####...##.....#..#..##.#..##...#.##", "##....##.##.##......##...#...##.#...", "#.#.#...##.##..###..####..##.###.##.", "......#.##..#####.####..#.#.#..##..#", "#.#..#..#.##..##.#.....#.#.####.##.#", ".##.##.#.....#..###.....##.#.##.#.#.", ".#..##..###..#####...##.....####.##.", "###.##.###.#.#.####.#.##.##.....#.##", "#...#.....#..##.#..#.#.######..#.#.#", "##..#......###....###.##.###.####...", "#.#.#.###..#.#...####.....##.###.#..", "#######.##.##.##......##...#.#.#..#.", "...#..#.#.#.####.#####....##.#....##", "#.....##.##..##.#..###.##.###....##.", "#.#.###....#.##.#.#.#...##.#..#.....", ".#....###..###...#..#.##..###.####..", ".....##.##......#....#...#..#.##.##.", ".##.#....##.#..####.#.......####.##.", "#..#.....#.##.##..##..###..#....#...", "......##.####.#.#.##.##...#...##.#..", "####..##.#..#.#...#...#..###....#.##", "##.......#.#####..#..######..##.###.", "#....#####.##.###..#..#.##.##.#.....", "..#...####..###.#.#.#..#####..##.##.", "#.#.##.#..#.####.....#.#....###....#", "#....##..#..#.#.#####.##.#..#.#.....", "##.#.##..###.#..##.###...###..#....#", "##.###.###..#.##.##.######..#..###.#", "..#.##...#.#.#.#...#.####.#...####..", "#.##.....#.####.#.#..#....#....###.#", ".#.#..##..###...##.#..##.#.#.#...#..", "#.#.###...##...#..###.##...#.#######", "#####..####...#.....#####.##.##..#.#", "...##.#..##....##..###.#.#.#.#.###..", ".###.#..#....#####..###.####...##.##", "...##.##.#############..##....#..#.#", "..###.##......#..#..#.##.#..##...###", "#..#.###.#.#..#...#.####..##...#####", "#.##..#..#.#######.##....##.#.######", ".#.#..##.#..#.####.##.##..##..##.#.#", ".###..##..#..#..#########.#...##...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1480490726400;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    int numFriends = 5;
    vector<string> hall = {"..#.#.##.#....#.##.##..#...##", "####..#.#...#...##.#..#..#...", ".#.#..#.#.#..#.#...#####.....", ".#..###.###.######...#.#....#", ".#......#.#..#.###.#.....#..#", "##..###....#.....###.#.#.###.", ".#......#.###.#.###.##.#.####", ".#.##.#.###.#.##....#..###..#", ".#.#.#.#...#..##....#.....#..", "####.#.####..#..####.##......", "....###...#...##.......##....", "..#...##..#.#.#.##......#.#..", ".#.#.###.#..###.#..##....####", "....##.....#.###.##...#.#.##.", ".#.#..####..#...#..##......#.", "..###....##.#.#..#.#...##..##", ".#.###..##.##..#.#.#...#.##..", "##.#.#.##.###.#......##..###.", "..#...#...#####.##.###.###..#", "#.#.....##.#.##.#......###.#.", "##.#..#.#..##.....#.##...#.#.", "#.###..##.##..#..#.#..##..###", ".#...##.#.#..###..#.##...#.##", ".....####.#.##.#.##....###.##", ".#.#.####.#......####..#...##", "#.#...##..###...##....#..#...", "#.###.##.###.#......##....##.", "#..##...###.#....###.##.###.#", "##.#.####..###.#.###.##.#.###", "##.#.#..#....##..####..#..###", ".######.#..####.#...##.......", "..##..#.##.##....####.....###", "##....##..#...##.####.....#.."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 57358680;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    int numFriends = 8;
    vector<string> hall = {".##...##....####.#.###..###", "...#####.####..##.......#..", "#..#...##......####.#.....#", "#..#######.#####.#.#.....##", ".....#.#....####.#.##..#...", ".#..#..........#.#.#..#..#.", "#..##.#.#.##..##.#..#.#.##.", ".#...#...#..###..##..##...#", "#......#.....##########.##.", ".##..#.......#...##..##.#.#", ".###.##########.##.....#..#", ".#...###..##..###....#....#", "###.#.....#.####..###.#.##.", "#.######.###.##.......#..#.", "..#..#.####.##....#........", "#####.#.#...#..###.#..#####", ".#...#..#.#.####..##..#.###", "#.##.##..##..###.#.#....##.", "....##.##.#......#####.#...", "###.######..#.##..####...#.", "#.#...#.##..#..#.#.#..#.#.#", "###..#..#....#.#..#.#####.#", "..##.##...#.#..#..#.....#..", "######.####.####.#.#..#.#..", ".#.####..#...#...#..##...##", ".#..##.##.#.####.####..#..#", "#...#..##..#.#...#.###..#.#", "#..##.###..##..#.#.#.######", "....#..#.##.#..####...#####", "###.######..#..#.######.###", "##.##..##..#...#.#.#...####", "##..####.#.#.##..##.#...#.#", "#..#.#.##.#.#.#.#.###.##..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 125233920000;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    int numFriends = 7;
    vector<string> hall = {"...#.###.#..#..#..#....#.##..", "#.#..###.....#....########..#", "#.###.....###.##.#####..##..#", "#..#...#.#.#.###.#..#..#####.", "####...##...##.#.#.....##..#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 256636800;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    int numFriends = 7;
    vector<string> hall = {".##", "#..", ".#.", ".#.", "#..", "#.#", ".##", ".##", "...", "##.", "##.", "#.#", "#.#", "###", "###", "..#", "###"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 15120;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    int numFriends = 1;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 429;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    int numFriends = 2;
    vector<string> hall = {".#....###.....#.###.##..#...#.#.#..##.####.....", ".##...#.###.#...#..#..#....####.###....####..##", "...#######.##..##....#.##....##.......#..#.##.#", "####.##.#.#.#...#.#..#.#.#..####...#.#.....##..", "##.####..#..#.#..#.#####.###.#...#......###...#", "...#..##.#####..#.#.#..#...#..##.######.##...#.", ".##.##.#..#........#...#.#..##.#...##.#####.##.", "..####......#....#...#..#...#.##..###...##..###", "..##..##..#.#..##.#...###.#....###..##.#.#..###", "#..####.#..#.#.#.#..#...#...##.###...#.#..#####", ".#..#.....#.#.....#..##..#...####.######.......", ".#...##..###.....##...#..##.....#.#.##.#.##.###", "#.##..#..##..##..#......##.##.#.###..##..######", "....##.#..#.##..##...#...###..##.#...##..######", ".#...#.###.##.##.#.#..#.##..##..#...#.##.#..###", "....#..##.##...#.....#.###.###..#.#....###....#", ".##.#.##.#.#...#......#.##.##.##...#.####.....#", "....#.#..###.########...#..##....#..##.#...###.", "##.#...#.#.......###.##.#....#..#####.##.#.##..", ".#..#..#.....##.#####.###..#.#..####..#....####", ".##.#.####...#.......#.##.#.##.##.##....#.###..", ".#....######..#.#..#.#....#..#...#.##..#....#..", ".#.###.###..#.#.###..######.#.#.#....#.###..##.", "##...#..#...#.#..###...##.##..#########..##.#..", "###.#.#.#...#...###.#.##.##.#...#####.###...#.#", ".#.#####..#.....#..#.......#####...#..##.#.#..#", ".#.##.##...##....####..######.###..##.#.######.", "..#..#..##..#.....####.#.##.##..##...#.....#.#.", "#.#####..#...######...#.#..##..##.#.......#####", "##.#.#..##.##..#..#..##.#.....#######...#.#...#", "#.#..#...#.###..###.##.....###....###...#.#..#.", ".##.##...##.#...####.#..#########.#.##...#...##", "#......##..##..##.....#.#.....####.....#..#...#", "#...####.#.##.#.#..#..##..##..##.###..#..#.####", ".#.##..#.#.#...#....##...###.#.#.##...#.#..##..", "..#.....##.#.##.#.#.#..#..##...####.##.#####..#", ".#.....########.#####.####...##....#.##..#...#.", "##......###...#...#.#..##..###.##.#...###.#####", "###.#####.....#...####.#..#.###...##.#.###.#.#.", ".#.#.##.##.###.##.#####.####.##.###.####..##.##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 41846;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    int numFriends = 7;
    vector<string> hall = {"#.##...#.#.#.....#.##.###...##...#..#", "..#.#..#.##...##.#..#.#.#...##..###..", "...#.#.#.##..#.......#...###..##.##.#", "..#.###.##.###.##.####...#####....###", "....##.#..#.#.#..##.......#.#..##.#..", "##.#...#.##.#.###...######.####.###.#", "#..#...#.#......##......##..#.....#..", "...#.#...##.###.#.#..#.#...#...#....#", ".#.#.#.#.####...#.##...####.##.#..#.#", "#.#..#........#.#.###..#.#........###", "....#####.#...##..##.#.##.#########.#", "#.##.##...##.###......#.##..###.####.", ".##...######.#.#.####....###..#..#..#", "#.#..#.###.#.##...#####..##..#.###..#", "###.####....#.####.#..####.##.#....#.", "#..#.####...#..####.##.##..#####.#.##", ".....#...#...##.####.#..###....##.###", "##..#.#.##.###.#.#.....###...#.##..##", ".....#....##.#....#.#..#####.#......#", "..###.##...###..##.##..####.#.##.##..", ".#.....##.#.#........##.#..###.#.##..", "####.#####.##..##.##...#..##..#.#.#.#", "..#..#..###..###.#.####.####.#...#.##", "##........##..###..##...##.....#..#.#", "...###.##..#..#.#..#..###.#..###.#...", "#...##..#......##.....####.#.#.#.###.", "###...#.##...##...#####..#..#..##.#..", ".###...#...###.......###.###......#..", "#.#..###..##.###.#.###.#..#..#.##.##.", "###.####.#.#..###.#.#.#...###.###.##.", "..##.#.#..##...######.......###..#.#.", ".###.#.#..######......##.##....######", "#.####....#.#.##.#.####.#...####..#.#", ".#.##..######..#####......##.######..", ".##..#..#..#####.#.#..#..#.#.##...###", "##.##...#.#.###..#.#####..#.###.#..##", ".#...##..#.....#.###..#..#####...#..#", "##.###.##.##..#...#...##....##...##..", "..#....#...##..#.##..##.#.#..#..#.##.", "###.#..#######.####.#......#####..#..", ".#...#.######.####.#...##...#..####.#", "..##.###.###....###..####..#.###....."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 60943750560;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    int numFriends = 5;
    vector<string> hall = {".#.", "#.#", "...", "#..", "..#", "###", "#.#", ".##", "...", ".#.", "#.#", "..#", "#..", "...", ".##", "..#", "##.", "###", ".#.", "..#", ".#.", "...", ".#.", "#.#", ".#.", ".#.", ".##", "#.#", "##.", "#.."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2076480;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    int numFriends = 1;
    vector<string> hall = {".##.#.#.#...######...#...#.#....", ".#...#..####..##.#.##...##....##", ".##..####...#..##.##....##.#.###", ".#.##....#..##...#.###...#.#...#", "...#..#..##.......#..#.##....#.#", "#.##.#....####.#...##..#.######.", ".#.###.##.#.#..#......##..#...#.", ".##...#####..####.#......#...#..", "...########...##......#..#..##.#", "....#.#......#..#####...##.##.#.", ".##.##.#.#.##.#.##..#.#..##.###.", "#..##..##....#..##....###.##...#", ".##..####...##.####.#..#...#..#.", "##.##.#.......#.#.###..#.#...###", "##.#.#.#..#####...#.#....#.##.##", "####...##.#..#######..###.#.#.#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 270;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    int numFriends = 1;
    vector<string> hall = {"..##.#.##", "#.#.####.", "###....#.", "##..##.##", "#..##...#", ".#.###..#", "#...#.###", "#.#..#.##", ".#..####.", ".###.#...", "#....#.#.", ".##..#..#", ".#..#....", ".###.###.", "...##..##", "...#.#.##", "####..#.#", "#....###.", "##.####.#", "###.##.#.", "#.#.##.#.", ".#.#..#..", "...##.#..", ".#....###", "#..##..#.", "....#.#.#", "#......##", "...##.#..", ".#.....##", ".#.#.#...", "##.##.###", "###....##", "##..##..#", "###....##", "...######", "...##...#", "####.####", ".##..#.##", ".##.#.###", "###...##.", "##...##..", "#.###..#.", "########."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 186;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    int numFriends = 2;
    vector<string> hall = {".#.#...#.#####.##", "..####..#.#..#.#.", "#..#....#...#.#..", ".....#..#...#...#", "###.#.#..###.....", "###...#..#.##..#.", "..#.#.####...##..", "######.#.###....#", ".#.#...####.###.#", ".#.###.##.#.###.#", "##...###......#..", ".#.#.#.####..#.##", "#..#..###.###.##.", "###..##.....##.#.", "..###...##......#", "..####..##.....##", "...#........#####", "#.#..#####...#..#", "###.###..#.#..#.#", "###..##.#.##..#.#", ".#.##.##.....##..", "#.....##....#.###", "#....##....####.#", "#######...#....##", "...#...##.#..#.#.", "...#..#####.####.", ".###.##...#.#..##", ".##..##..#.#....#", ".#....#..#...#.##", "#######.######.#.", "..#.#.#.....#.#.#", ".###.##..#..#..#.", "..###..####.#.#..", "#.###..#...##..##", ".#....#...#....#.", ".....##.#.#...###", "...#.##..#####.#.", "##.#.#...###...#.", "#..###.##..##.##.", "#.#..#..###..#.#.", ".......##..###..#", ".####.####.###...", ".####.##..#..#.##", "#.#..####..####.#", "#.....##.##..#.#.", "##...##..##..#..#", "..###...#.###.#.#", "..#......#.##..#.", ".##..##.#...#.###"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 14074;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    int numFriends = 1;
    vector<string> hall = {".##..#..#..##.#....#.#.####", ".####...####........#..#..#", ".....#...#..##....#.######.", ".###..#.#....#...#.##.....#", "#.#...#.#.#.....###......#.", "##.###.###...####.##..#.##.", "##..#..########.#.#.##.#..#", "#..###.#...##.#.#..###..###", ".#.##.#.###.####..#...##.#.", "##..#.##.#.##......#####.##", "##..#...####.#.##..#...#.#.", "#####.######..###.###..#...", "#......#...######.#.#..#.##", "###.##...#..##.##...##.#..#", ".#.#...##...#....#.##.#.###", "#.#.....#..#####..#.....###", "###..##.##.#...#.###...#..#", "#.#.#.#.#..###...###..#.##.", "###.#.....#.#.#.##..###..##", "#.#..#.###.#..#..###..#####", ".###....#.#.#....#..####.##", "#.###.####..#..#..#.....#.#", ".#.##..##.#..####.#..#..##.", "#..#.#.#.######..#...#.#.##", ".#......###...##..#.##..###", "...#..####.##.#.##...#####.", "...#..####..#######.###....", "#.##..#..##..##..#...###...", "#.#...#######.##.#.##..#.#.", ".....##.##.####.##.###..###", "###.....###....#..#.#......", "..####.#.#.#..#.####.#####.", ".#..##.#..##.#####..#.#.#.#", "...#.##..####.##.##.#####..", "##..##.#.##.#..#.##....###.", "..#.##....#.#####.#######..", ".....#####.###.#.####....##", "#..#..#....###.#.##..###.##", ".##..##..#..##.....####..##", "#..####..###....##..##..##.", "###.#####.###..#..###.#..##", "##...#.###...#.##...##.##.#", "...####.#..###.#..#...#....", ".####...#.###.#...#.#..####", "#########.#.#..##..#..#..##", "..#...#.#.#......#..##...#.", "#..#....##....#.#..###.#..#", ".###..#.#.....####..##.#.##", "...###.##.##.#..######...##", "####..##.#..##....#...##..#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 656;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    int numFriends = 3;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 557616;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    int numFriends = 8;
    vector<string> hall = {"#.#.##.##..#..##.#####..#", "#.##....##....##.##.#.#..", "###.#.##....##.##..#..#..", "...#.###.#####..#.#.##..#", ".##.###...#.##..#######..", ".#..##..###.######..#####", "...#...#...#.#.###.###.##", "##.#.#.....#..###.#.##..#", "#...#.##...#.##.##..#..#.", "...##.#.#.#..#.#..##.....", ".##.#.##...##.###...#..##", "##...#..##.#.##.#.#...###", "####..##....###.###...##.", "##.....##.....#.##.....#.", ".###..#...#..#.###......#", "...##...#.#..#.###..####."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2299368960;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    int numFriends = 6;
    vector<string> hall = {"#.........#.#####..###.", "##.#.#.##...#..#.#.###.", ".###..#...###..###.###.", "##.#..##.#.#.###.##..#.", "##..#######.#.#.#.####.", "#.#.#.#.#..#######.####", ".##...###..##.##..###..", "###.#..####..###..##..#", "###..###.###...##......", "##..##..#..##...##..###", "####.#.##...#..##...###", ".###.###.##..###.####.#", "...#.#.#..#.##.#..####.", "#####.#.##.#...#.....#.", ".##.#..###............#", "##.#.##.###..##.###.###", "#.###.#.....#.###...#..", ".###.##.###.#.#..#..###", "#...##.#.###.#..##....#", "#.#.#.##...#.####.#.###", "...#.............###..#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 31370400;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    int numFriends = 2;
    vector<string> hall = {"##.##.#..###..####.###..###...", "##...###....####..##...#.#..#.", "#......########..######..#.###", "...######.......##.##..###....", "##...###.#.##.#.#..#....##.#..", "..###.##....###.##..#.##..#..#", "###..###........##.#..#...#..#", "#.#.####..#.#..##..##.#######.", "###.#.###...#.##.#..##.#..#.#.", "...#.###..######.#...##..#.#.#", ".#.###.#...#.##.##...#..#.##.#", "#.#..###..#.#...##.#.###.##.##", "##....#....#.###.##.....###..#", "...#..#.##.###....##.....#####", "##...##..####...#.....##.##.##", "..##.##.#..##...#..##..####..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 5098;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    int numFriends = 5;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 87912360;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    int numFriends = 7;
    vector<string> hall = {"..#...#..##.#.####...#.##.#.", "....#..######....##.#....#.#", "####..#.....##....#.##...###", "....#.#...##..#.#.#..###..##", "....##..##.#......##..#.#.#.", ".##.##..#.###.##..##..#..##.", "#######.#.##.######.#..#....", "###........#.##...#.######.#", "#####..##.##..#..#..##...#.#", "#.##.....##...#.#.#..#.#.#..", "..#..##.#...##....###..#.#..", "##.#...#....##.#.###......#.", "###.##...#.####..#######.###", "..##..##.#####...#.#.#.##.#.", "##..#####.#####.####..#####.", "..#....##..#.###..#....##..#", "####.###..#.####.##.##..#.#.", ".......##..#..###.#..####.##", ".##.#.#.###..#...#####.#...#", ".##..#...###....#...#..####.", "#...#..#######.#.#...##.#...", "#.####....#.......#....#.#.#", "..#.#.##.#...#..#...##...#.#", "##...#.##..#.######..#.#...#", ".#.######.#..##.#..####.####", "..##.##..#..#.#..####..#..##", "...###...##..##..###..#..#..", "..##.##.##..###...#..#..##.#", ".##..######..#.##..##....##.", "#..#.#..#........####.######", ".###.#.#.##.###.#..##..#####", "#.#..##...##.####...#..##...", "..#.#..#..#.#.......##.#..##", "####.#..####...#...#...####.", "#.#.....#.####.#....#......#", "####.#...#.#....##.#..##..#.", "..####...###...###..###.#..#", "#.#.#.##.##.#....####..#.#.#", ".#.#.##.##.#.#...#...#.####.", ".#..######...###.#..###..#..", "#.......###...##.#..#.###.##", ".###....####.######.##..##..", "#.####..##..#....##..##.##.#", "...#.#..###.#....#..#..#....", "..##.#.##..##.#.###...##....", "#.#....#####.###.#..#.#.#...", "####..#.##.#.#.#......##..#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 80329284000;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    int numFriends = 8;
    vector<string> hall = {"####....#...#....#.#####..####..", "###.##.#.#..##.#..####..####.#.#", "##.#.#.###.#..#..#.#...#.###....", "##.#######.########.###...#.##..", ".##.##..#...#...##.####...#.#.##", "#####.####.#.#..##.#..####.###..", ".##....#...#..#.#.##.##.##.#.###", ".#.#..#.#.#........#.......##...", "...#..##..#.##..#.#.##.#.#...#..", "..##....#.....###..#..#....####.", ".####..###..#.##.#.#...#.###..#.", "###..#.###.#.###..######..#.#.#.", "..#.####....###.#.#.#.#..#...###", "..########....###.####.####.##.#", ".#.....#..#.#..#..##.#.####....#", ".##.#.#.#..###.####....#.#.##.#.", ".#..##..###.###.##.#........#..#", "####.##.#..#.#..##..####..#.#.##", ".#.##..###.#.##.##.########....#", "###.#.....##.####..###...###....", "##.#.#..###..#...#.#.####.....#.", "###.......####..#.##...#...#..#.", "##...#.#..##.#..#.#.#.##.###..#.", "..#....#..####.####........#...#", "...#.###....#...#.#....#.##.##.#", "......##.#.#..#####..#.##..####.", "#..###.####.#..#.#.###...#.#.##.", "##.##.#.....###.##..##.##.###...", "##..#.##.....#....#..#..#####...", ".###.#...####.#.##..#.#.#.#..##.", ".##.#..#..#.##.##.#.#..##...#...", ".......#.#...#.#...#..#...##.#.#", "#.#.##..###.#..#.#..##..#.#..#..", "#....#.#.#..##.###..#.##.##.....", "#.###..#####.....#.#..#.##.#.#..", "#.##..#####..#.....###.##.###.#.", "...#....##....#..#.....##.##.#..", "#.##..#####.##.#.#...#...#.#...#", ".#..#..#.#.#..#...#....##...#..#", "#.###.#.###.##..#....###.##.####", "####..##..#.####..###.#.##.##...", ".#.##.......#.#.#..#.#..##.#.#.#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 709249766400;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    int numFriends = 6;
    vector<string> hall = {"##..####.##.##...#.#.###..#.##...#..#.#.#.#.", ".#.####..####.....##...##..#.....#.###..#.#.", "##..###...####.#...#...#.#.#.#####...#...##.", "#.#..#.###....##....####.##.#.##.#..###...##", "..##.#.#..###..#.....##...###.#....######.#.", "....##.#.######..#.###...#.#####.#....#.####", "####.....##...###.##.#.#......#.###.#.##.###", "#####.#.#..####..##...#..##..##...#...#.#...", ".##....##.#....##.##.##..##.##.#.#..#.#.####", "##...##..#.#.##..###..#.#...#.#.#####.####.#", "..#.#.#.##.##..#....##.##.##...####.###..###", "####....#.###.##.....#.#####....###....#....", "..##.#..#....#.....#.#.#..#.###.####.#.#.###", "##.#..###.....##.#.##..##..#.##.##..##....##", "#...#.#.##..#..##..#.....#..#.#...#.....##.#", "...#.#######.##.#..######.....#.####.######.", "..#..####..#####.####.#....##.###...#..#..##", "..#..#...#.#####..#.....#.#.##..##....####..", "...####.######....#.....#.##..##..#####.###.", ".###.#.##.##...#..#.......#.######...####.##", "#.####....####.#..#.#.####..##..#..#....##..", ".##.#.##.##..#####....#..#.#.#.###..#####...", "#..###..##.......#####.##.#....##.........##", "#.##....#.#...#.#.....#......#..#...##..####", "#.#.#.#####....#..###.##..#.#......##....#..", "#...####.#..###..#...#.###...#.....#.#..#...", "#..#.###....#.##..##.#..#.#.##...#.#.#.#####", ".###..##.##.#.#.##.##....##..##..####.#.#.##", "#.#...##...#..##...#.########..#.#..###.#.#.", ".###.#..#..####.#....#.###.#.###..#...#...#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2533697280;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    int numFriends = 6;
    vector<string> hall = {"..", ".."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    int numFriends = 1;
    vector<string> hall = {"."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    int numFriends = 1;
    vector<string> hall = {"........"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 8;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    int numFriends = 1;
    vector<string> hall = {"...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 4;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    int numFriends = 1;
    vector<string> hall = {"..", ".."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 4;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    int numFriends = 1;
    vector<string> hall = {"...", "...", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 9;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    int numFriends = 1;
    vector<string> hall = {".##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    int numFriends = 1;
    vector<string> hall = {"..#", ".##", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 6;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    int numFriends = 2;
    vector<string> hall = {"................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2352;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2164694716800000;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    int numFriends = 2;
    vector<string> hall = {".#..", ".##.", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 34;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    int numFriends = 1;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2500;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 324717180480000;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    int numFriends = 1;
    vector<string> hall = {"..####..", ".###.##.", ".######.", "#.#.#.#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 13;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    int numFriends = 1;
    vector<string> hall = {".", ".", ".", ".", "."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 5;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    int numFriends = 1;
    vector<string> hall = {"....", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 8;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    int numFriends = 1;
    vector<string> hall = {".#..", ".##.", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 9;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    int numFriends = 1;
    vector<string> hall = {".", ".", "."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    int numFriends = 1;
    vector<string> hall = {".###."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    int numFriends = 5;
    vector<string> hall = {".........................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 102080160;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    int numFriends = 8;
    vector<string> hall = {"............................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 8691104822400;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    int numFriends = 1;
    vector<string> hall = {"###.", "####", ".###"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    int numFriends = 1;
    vector<string> hall = {".."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2157767693706240;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    int numFriends = 8;
    vector<string> hall = {".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 21646947168000;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1020917731680000;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    int numFriends = 1;
    vector<string> hall = {".#..", ".##."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 5;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 543354134400000;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    int numFriends = 2;
    vector<string> hall = {"..#", ".##", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 16;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    int numFriends = 1;
    vector<string> hall = {"..", ".#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    int numFriends = 1;
    vector<string> hall = {"..", "#.", ".#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 4;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 543354134400000;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 216469562400000;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    int numFriends = 1;
    vector<string> hall = {"...", ".#.", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 8;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    int numFriends = 8;
    vector<string> hall = {"..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 129881683008000;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    int numFriends = 8;
    vector<string> hall = {"..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 43293894336000;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    int numFriends = 1;
    vector<string> hall = {".#", "##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    int numFriends = 4;
    vector<string> hall = {"................................................", "................................................", "................................................", "................................................"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 18680832;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    int numFriends = 3;
    vector<string> hall = {"................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 110544;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    int numFriends = 8;
    vector<string> hall = {"........................................"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3100796899200;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    int numFriends = 1;
    vector<string> hall = {"...", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 6;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    int numFriends = 8;
    vector<string> hall = {"................................"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 424097856000;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1448328177676800;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    int numFriends = 2;
    vector<string> hall = {"..................................................", "..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 7650;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    int numFriends = 8;
    vector<string> hall = {"......................................"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1971788797440;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    int numFriends = 1;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2495;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    int numFriends = 1;
    vector<string> hall = {".#", "#."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    int numFriends = 2;
    vector<string> hall = {"........................................"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1560;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1969872192288000;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    int numFriends = 1;
    vector<string> hall = {"....", "....", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 12;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    int numFriends = 1;
    vector<string> hall = {".##", ".##", ".##"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    int numFriends = 2;
    vector<string> hall = {"..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 16200;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    int numFriends = 2;
    vector<string> hall = {"......", ".....#", "...#..", ".....#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 146;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    int numFriends = 2;
    vector<string> hall = {"..............."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 210;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    int numFriends = 1;
    vector<string> hall = {".##.", "....", "#..#"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 8;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    int numFriends = 1;
    vector<string> hall = {".###", "..##", "...#", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 10;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    int numFriends = 8;
    vector<string> hall = {"......................"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 12893126400;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    int numFriends = 1;
    vector<string> hall = {"#.#", ".##", "##."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 3;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    int numFriends = 5;
    vector<string> hall = {"...................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 45239040;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    int numFriends = 2;
    vector<string> hall = {".............................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2070;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    int numFriends = 8;
    vector<string> hall = {"..................................................", "..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 64940841504000;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    int numFriends = 1;
    vector<string> hall = {"###", "...", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 6;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 968262815520000;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    int numFriends = 1;
    vector<string> hall = {".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 50;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    int numFriends = 1;
    vector<string> hall = {"...", "..#", "..."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 8;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    int numFriends = 1;
    vector<string> hall = {".............................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 46;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    int numFriends = 8;
    vector<string> hall = {"........................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 43609104000;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    int numFriends = 1;
    vector<string> hall = {"....", "....", "....", "...."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 16;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    int numFriends = 2;
    vector<string> hall = {".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2450;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    int numFriends = 5;
    vector<string> hall = {"................................................"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 205476480;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    int numFriends = 1;
    vector<string> hall = {"........", "........", "........"};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 24;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    int numFriends = 5;
    vector<string> hall = {"..................................................", "..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 762753600;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    int numFriends = 8;
    vector<string> hall = {"..................................", ".................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 1464116290560;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 433192898880000;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    int numFriends = 8;
    vector<string> hall = {"..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................."};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 151528630176000;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    int numFriends = 8;
    vector<string> hall = {};
    MovieSeating* pObj = new MovieSeating();
    clock_t start = clock();
    long result = pObj->getSeatings(numFriends, hall);
    clock_t end = clock();
    delete pObj;
    long expected = 2134421316720000;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22895786&rd=14236&pm=11035
********************************************************************************
#include <cstdio> 
#include <vector> 
#include <map> 
#include <cstring> 
#include <algorithm> 
#include <cmath> 
#include <string> 
 
using namespace std; 
 
class  MovieSeating 
{ 
      public: 
         long long getSeatings(int n, vector <string> h) 
 
             { 
               long a[100]={0} , b[100]={0}; 
               long long ans=0; 
                
             
               long m,k,i,j;    
               m=h[0].size(); 
               k=h.size(); 
                 
                 for (i=0 ; i<k ; i++) 
                 for (j=0 ; j<m ; j++) 
                  if (h[i][j]=='.')   
                  { a[i]++; b[j]++; } 
                  long f=1;  
               for (i=1; i<=n ; i++) f=f*i; 
              
            if ( n>1) {   
                
               long long q=1; 
                
         for (i=0 ; i<k ; i++) 
         
            
               if (a[i]>=n) 
                { q=1; 
                for (j=a[i]-n+1 ; j<=a[i] ; j++) 
                        q=q*j; 
                 for (j=1 ; j<=n ; j++) 
                       q=q/j; 
                        
                      
                       ans=ans+q*f; 
                   
                } 
                 
         for (i=0 ; i<m ; i++) 
                
               if (b[i]>=n) 
                {  q=1; 
                for (j=b[i]-n+1 ; j<=b[i] ; j++) 
                        q=q*j; 
                 for (j=1 ; j<=n ; j++) 
                       q=q/j; 
                        
                       ans=ans+q*f; 
                    
                } 
                
                } 
             else 
              { 
                  for (i=0 ; i<k ; i++) 
                  for (j=0 ; j<m ; j++) 
                  if (h[i][j]=='.')  ans=ans+1; 
               
              } 
                           
              return ans; 
                } 
                 
      };

********************************************************************************
*******************************************************************************/