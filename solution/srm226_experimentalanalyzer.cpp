/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=3493
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class ExperimentalAnalyzer {
public:
    vector<int> getPredictors(vector<string> data);
};

vector<int> ExperimentalAnalyzer::getPredictors(vector<string> data) {
    vector<int> ret;
    return ret;
}


int test0() {
    vector<string> data = {"0 10 20 20 0", "1 20 30 17 98765", "0 10 30 29 1234567", "1 20 40 10 42"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> data = {"1 220 212 247 764 928 956 946 66 640 983 125 994", "0 816 835 98 81 783 267 946 584 309 757 876 670"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> data = {"1 8 5 1 6 1 8 5 1 4 9 3 4 5 4 9 2 8", "0 9 8 4 1 5 1 8 6 9 1 6 4 1 0 3 7 6", "1 5 7 0 5 3 9 1 3 4 2 1 6 5 8 1 1 2", "0 9 5 3 0 9 7 9 7 2 5 9 7 5 0 4 9 0", "0 9 5 4 2 6 1 6 7 1 4 8 2 1 1 5 7 0", "0 9 6 3 4 9 0 9 9 1 6 0 4 9 1 7 5 2", "0 9 7 7 0 8 6 7 6 1 4 9 2 8 0 9 7 8", "1 8 6 7 9 3 9 0 3 2 1 4 0 6 7 9 4 4", "1 0 2 2 5 1 8 2 2 0 3 1 8 7 5 9 1 6", "1 3 7 0 7 3 9 3 7 2 2 7 7 7 5 4 0 3", "1 3 9 8 8 4 9 4 0 0 9 1 2 5 6 1 2 8", "1 7 3 7 9 2 8 3 2 5 8 2 9 3 5 0 4 2", "0 9 7 3 2 9 5 8 9 1 5 7 6 6 2 0 7 3", "0 9 9 5 4 8 4 9 9 1 3 4 5 4 3 9 5 2", "1 8 1 2 8 0 8 4 1 3 8 8 0 8 8 9 1 7", "1 0 4 6 5 0 8 0 3 5 8 5 3 7 7 3 1 1", "0 9 4 0 1 5 4 7 2 3 8 0 8 3 1 0 7 0", "0 9 1 0 3 5 2 8 3 6 1 5 6 5 3 0 7 4", "1 5 3 1 9 2 9 3 1 1 2 6 6 9 4 3 3 9", "0 9 2 6 1 5 1 9 7 6 9 4 1 8 2 3 6 0", "1 8 2 3 9 2 8 2 2 8 0 9 6 6 9 1 4 2", "0 9 2 3 3 6 0 7 3 5 9 8 0 0 3 7 6 8"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 4, 5, 6, 7, 14, 16};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> data = {"1 8 2 0 3 1 1 7 0 0 7 3 6 3 7 9 1 0 6 4 2 7 0 1 8", "1 4 3 2 5 2 3 2 1 7 6 1 5 7 8 1 7 0 3 3 1 9 2 1 6", "0 0 6 1 9 9 6 2 1 2 1 7 1 2 3 4 5 1 0 5 9 9 1 7 0", "1 9 3 7 5 4 3 6 7 5 9 1 3 7 4 5 2 0 7 2 2 9 4 0 8", "1 8 1 5 0 3 0 8 1 3 1 1 3 8 4 7 2 0 5 7 0 3 2 7 6", "1 3 9 4 3 3 2 2 1 9 5 2 8 6 8 8 8 0 2 3 1 1 4 9 4", "0 1 6 3 8 5 4 8 9 6 6 8 2 7 1 6 6 2 0 7 9 6 0 0 0", "1 6 3 9 0 4 3 3 4 9 8 2 4 5 6 3 2 0 3 3 5 6 9 7 6", "0 1 0 1 7 9 4 2 3 7 8 8 1 0 3 3 9 8 9 4 9 5 5 3 1", "1 5 3 8 2 0 0 4 5 6 0 0 9 0 6 1 3 0 8 7 2 1 1 6 2", "0 1 5 4 9 6 6 0 1 6 5 8 0 8 0 8 9 2 8 3 9 5 1 4 0", "0 1 4 7 8 6 6 0 9 1 1 9 1 2 3 1 6 7 5 2 8 7 9 4 0", "0 1 2 6 9 5 4 1 0 3 8 8 2 4 3 9 5 3 1 3 8 1 3 8 1", "1 6 8 1 6 4 3 9 3 7 3 4 3 7 4 4 8 0 3 7 0 2 1 0 9", "1 2 5 2 2 3 2 5 6 5 5 0 6 5 4 6 3 0 5 0 0 7 3 5 2", "0 1 1 3 7 8 4 0 0 4 6 9 0 2 1 1 9 5 6 2 8 2 5 7 0", "0 1 7 4 9 6 5 4 8 3 9 8 0 7 0 7 0 8 4 6 9 7 9 7 1", "1 3 2 9 3 0 0 4 8 8 4 2 9 0 6 5 0 0 9 0 3 2 8 3 3", "0 0 3 0 9 9 6 3 4 0 4 7 0 0 1 2 7 4 0 8 9 8 9 0 1", "0 0 0 5 7 8 4 5 2 8 2 9 2 8 1 4 8 6 2 2 9 2 6 7 0", "1 6 7 3 4 4 1 6 8 0 3 3 8 2 5 7 7 0 1 6 4 6 4 9 3", "1 3 1 1 3 0 2 7 6 4 3 0 9 5 7 4 9 0 9 4 0 6 5 8 7", "1 6 4 4 2 2 2 1 4 1 6 2 8 9 7 6 9 0 4 9 3 4 9 6 4", "0 1 1 0 9 8 7 5 1 7 7 9 0 9 0 1 5 2 6 7 9 5 8 3 1", "1 3 9 5 5 2 3 0 4 9 8 2 4 3 4 4 1 0 0 1 0 7 0 9 2", "0 1 3 3 9 7 7 3 6 0 7 9 0 0 2 7 8 7 7 7 8 8 3 4 0", "1 2 2 0 5 4 3 6 9 0 9 4 6 9 6 8 6 0 6 0 2 9 8 5 9", "0 1 3 7 7 5 4 0 5 4 2 9 0 8 1 7 4 8 5 1 8 5 7 8 0", "1 5 8 9 3 1 2 9 5 3 1 0 4 7 5 1 4 0 9 2 1 6 1 6 8", "0 0 1 6 9 8 7 0 7 2 2 6 0 2 2 6 7 1 3 0 8 8 7 9 1", "0 0 5 6 9 7 4 4 3 0 2 5 1 2 3 2 2 1 4 2 9 1 0 9 0", "0 0 9 6 7 7 6 7 8 5 8 5 2 9 3 0 1 5 8 7 9 3 8 2 1", "1 3 1 2 5 1 0 9 4 2 3 0 5 8 7 4 3 0 1 2 3 4 9 2 9", "1 3 2 3 3 0 2 8 6 3 3 1 9 8 6 4 2 0 4 2 6 5 7 4 2", "0 1 3 9 7 8 4 7 0 6 5 9 1 6 2 4 0 2 0 3 8 4 4 5 0", "0 1 8 4 9 9 5 4 7 9 8 5 0 5 0 4 6 6 6 2 8 9 6 1 0", "1 8 8 0 5 1 3 7 6 3 4 0 4 1 5 8 2 0 9 8 2 6 1 6 7", "1 8 5 1 1 1 1 4 5 9 5 2 5 7 9 2 5 0 2 0 2 6 6 9 2", "0 1 5 2 7 8 6 0 0 3 3 8 0 1 2 3 2 3 4 0 8 8 4 7 0", "0 1 2 8 8 7 4 0 2 9 3 5 0 1 2 4 2 5 9 7 9 7 6 3 1", "1 2 9 5 3 3 0 3 5 4 5 3 4 7 7 1 5 0 7 9 2 0 3 1 4", "1 2 5 7 4 1 0 4 9 8 6 1 4 9 7 2 8 0 3 7 1 3 6 5 7", "0 0 5 2 7 6 4 3 4 8 3 9 2 6 3 1 5 3 8 7 8 5 9 8 1"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 4, 5, 6, 11, 12, 14, 17, 20, 24};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> data = {"0 72 9 1 15 49 20 72 68 20 43 39 81 27 88", "0 72 28 81 49 33 63 60 77 53 45 27 37 10 85", "1 36 83 17 0 93 71 48 21 93 17 74 88 93 4", "0 88 78 37 13 21 56 45 81 67 58 0 0 20 64", "0 71 70 20 94 24 5 72 21 62 73 9 69 12 51", "0 65 16 99 55 55 53 39 65 59 59 37 53 22 46", "1 59 10 79 0 90 55 18 13 23 20 81 97 89 30", "1 59 82 47 0 92 63 34 45 78 9 73 92 84 22", "0 81 56 77 15 3 40 90 46 71 44 87 66 20 52", "0 88 51 31 76 50 27 39 38 15 64 5 20 26 96", "0 82 18 0 39 35 91 81 33 3 31 50 2 20 91", "0 78 32 62 3 40 8 9 68 60 45 25 59 23 70"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 4, 5, 10, 12, 13, 14};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> data = {"1 4372710 8453118 3767108 9177724 2116119 7493469", "0 358151 6463794 657840 5981172 2068397 3141444", "0 2110488 985053 3460891 5797438 4254845 2016530", "1 7578339 7820824 7100908 9303570 2152337 4493613", "1 884726 9168291 4280330 8531114 2284884 8481876", "0 5326201 4873498 3204390 3200398 2552196 3587148", "0 8243951 927637 240707 7758909 4247396 240432", "0 3967300 5296057 1361708 6073995 8180312 1940655", "0 2329037 5452697 3602990 5750408 6897631 1790742", "1 7465477 9691121 8380870 8113310 8861142 9486213", "0 8284086 4297908 74135 5389388 4965579 802420", "1 9495769 9415509 9883589 9503715 2027928 9761170", "1 6729508 8592623 4041287 9352148 8413929 5540711", "1 7056701 8630831 4137168 9031066 8011167 5785157", "0 5321847 2397994 1000117 7103031 1547907 3025987", "0 9743316 924632 426250 324275 6272325 74187", "1 6140982 7146678 9666883 7933799 5863260 7437529", "0 406803 4975806 602219 4677549 8130622 2791396", "1 2454576 9376655 8818276 9005971 4533581 6469602", "0 7592868 6604723 1307949 6602212 9572309 1100172", "1 7512399 9151354 5223466 8972592 5104564 5702139", "1 2529220 9427848 7452046 9109537 3440356 9123239", "0 9064750 1089044 1070355 646970 2036123 345202", "1 5889999 9162559 7661289 8300755 9502493 5108327", "0 4335634 3118380 3256256 3624075 4863265 1322869", "0 6754815 5882813 22678 3369448 7209855 1196952", "1 2218745 8662064 6524226 9720247 546695 9581232", "0 7063977 2266842 2916706 1370578 9459940 39340", "1 9766558 9427115 8148546 9603307 1812604 8568630", "1 9210645 8901402 5642276 9196513 2019413 4433858", "0 6638363 5176976 2815790 7635387 9683772 1854775", "0 7244966 5228128 3159418 2582442 5141816 3413434", "0 5645141 1783718 1063189 7285528 3553802 2842050", "0 8630267 5905867 1380358 7698541 8215215 1121320", "1 2698818 8192882 7410018 9704557 5092443 4259098", "0 4692071 6172202 2369001 5015065 7803489 110764", "0 3562244 2193127 1471609 4960876 294450 2363693", "1 1629893 9959329 7501995 8638309 3732385 9510153", "0 6978531 5820432 1332200 5100298 2810881 2649194", "0 1612754 2364943 649118 3320050 6596917 3047428", "1 9920249 8414327 5455633 9326216 736517 4253491"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 6};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> data = {"1 839745994", "1 273038794", "1 634241648", "1 393775092", "0 933070948", "0 1337113850", "1 2066546023", "1 705803071", "0 750845077", "1 702118196", "1 999184150", "1 1215744575", "1 2090325780", "0 1585634379", "1 557177163", "1 1868046983", "1 2075524823", "1 1047072171", "1 1059667790", "0 683655870", "1 1701781471", "0 779149559", "0 803920861", "1 793850150", "0 1166741608", "0 595165777", "1 466906811", "1 1765040861", "1 532615438", "0 1482150418", "0 1981453116", "1 1315386042", "1 1603456290", "0 890945330", "0 1225450277"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> data = {"0 2 3 3 6 6 0 9 5 7 0 1 9 1 0 0 8 9 0 2 1 0 9 1", "1 4 0 2 7 7 7 9 4 3 7 9 6 9 1 2 2 6 8 0 2 8 0 7", "1 6 2 6 8 2 7 6 1 5 6 9 5 5 9 8 7 1 8 0 2 6 2 9", "0 3 7 6 1 2 0 2 1 0 1 0 9 1 5 5 5 9 6 4 0 7 5 0", "0 2 8 1 5 0 0 5 5 9 4 0 8 0 5 5 2 9 5 4 1 2 6 7", "0 2 7 1 1 6 0 0 7 5 4 1 1 0 4 5 2 9 4 8 1 5 7 3", "0 3 9 5 2 4 0 4 8 8 1 1 2 0 1 7 6 9 3 9 0 3 6 8", "0 1 4 2 0 7 0 6 1 4 2 1 4 1 9 6 7 9 0 8 1 9 6 0", "1 9 0 6 8 3 6 4 7 6 7 6 8 2 6 4 7 0 9 0 6 3 0 9", "0 1 6 2 1 3 0 4 5 5 3 0 2 0 3 7 3 9 6 6 0 1 4 5", "1 5 0 6 8 9 2 6 9 2 8 8 8 5 0 4 6 7 9 0 7 7 1 9", "1 4 0 5 9 0 4 5 6 7 6 4 8 3 2 8 2 4 9 0 8 6 1 7", "0 2 9 8 4 4 0 3 5 0 3 0 3 0 9 6 9 9 3 9 1 7 7 9", "0 1 6 4 0 1 0 4 4 2 0 0 4 0 9 8 0 9 7 5 0 2 7 0", "1 4 1 7 7 2 4 6 7 2 9 3 0 3 4 7 5 6 8 0 3 4 2 6", "0 3 7 9 5 7 0 6 1 0 3 1 3 0 2 6 8 9 7 1 0 1 7 1", "0 0 8 1 2 5 0 3 9 2 4 1 5 1 3 2 2 9 1 1 1 2 9 9", "1 9 1 1 7 7 3 6 7 8 6 3 4 2 6 8 8 6 8 0 6 1 2 7", "0 0 7 0 4 5 0 9 3 4 1 1 4 0 0 6 6 9 6 1 0 9 5 8", "1 6 0 2 7 6 1 1 4 1 7 5 4 8 5 9 3 0 9 0 3 0 1 9", "1 7 1 9 9 9 3 7 5 5 6 7 0 3 9 7 1 7 9 0 3 6 1 0", "1 6 2 9 7 3 7 2 0 4 6 8 2 3 7 1 2 2 8 0 7 7 1 0", "1 5 2 3 8 8 9 0 6 2 6 3 7 5 2 1 8 2 9 0 3 6 2 7", "0 2 6 0 3 7 0 2 5 1 2 0 7 1 6 9 1 9 3 4 0 3 9 9", "1 8 0 4 8 5 2 3 5 5 9 6 3 7 7 2 3 0 9 0 3 6 3 0", "1 7 1 4 8 2 6 6 9 8 6 2 4 5 6 1 6 1 9 0 3 1 0 8", "0 0 8 1 2 2 0 0 1 2 2 0 5 0 0 0 9 9 7 4 0 8 8 6", "1 9 2 7 8 4 8 3 2 3 8 4 1 2 3 0 2 0 8 0 7 8 2 3", "0 3 4 7 2 4 0 6 6 3 2 1 2 1 1 2 7 9 2 4 0 0 8 1", "1 4 1 6 9 4 6 2 8 9 8 3 6 2 2 0 7 0 8 0 7 9 2 4", "1 9 2 9 8 3 7 3 0 0 9 8 0 4 4 0 1 8 8 0 9 6 0 4", "1 8 1 8 8 6 9 1 4 2 6 8 7 2 8 0 7 4 8 0 9 1 2 7", "0 2 7 8 0 6 0 0 8 6 2 1 7 1 9 8 0 9 0 5 1 2 7 9", "0 2 8 6 2 3 0 7 0 0 4 1 4 0 2 4 6 9 5 9 0 7 5 5", "0 0 9 5 3 1 0 4 5 5 5 1 1 1 3 4 9 9 3 6 1 4 4 4", "0 0 9 1 5 0 0 4 4 3 3 0 6 0 0 1 0 9 6 6 0 7 4 6", "0 0 6 7 5 4 0 5 2 5 1 1 9 0 9 9 2 9 5 1 1 7 8 3", "0 2 4 8 3 8 0 3 4 9 0 0 6 1 7 9 0 9 7 4 1 4 6 6", "0 0 9 1 1 1 0 6 8 3 0 0 6 0 8 9 9 9 5 6 0 3 6 5", "0 3 6 8 1 3 0 0 2 7 0 0 3 1 0 1 9 9 6 5 0 0 4 4", "1 6 0 1 8 4 5 5 2 7 9 9 9 7 1 2 0 8 8 0 8 0 3 3", "1 5 2 2 9 4 5 7 0 2 6 3 2 5 5 0 1 2 9 0 4 6 0 3", "0 0 3 2 4 4 0 1 6 2 0 0 9 1 1 3 7 9 4 7 1 0 8 8", "0 2 5 8 5 1 0 4 3 7 0 0 0 0 2 6 8 9 3 8 1 5 7 4", "1 8 0 1 9 5 1 9 8 7 8 5 7 2 0 8 0 6 9 0 7 9 3 0"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 4, 6, 10, 11, 13, 17, 18, 19, 20, 22};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> data = {"0 2 64 28 83 86 54 6 98 48 0 35 47 41 26 83", "1 59 99 98 37 93 72 78 52 73 65 88 56 8 85 37", "1 36 58 76 43 1 46 93 29 75 68 97 62 49 59 29", "1 40 20 78 39 33 41 89 63 92 73 83 31 62 83 58", "0 3 70 10 88 32 54 15 42 55 18 33 88 96 14 76", "1 33 17 71 4 4 6 11 70 34 78 83 10 65 62 38", "1 36 93 96 25 59 70 53 61 33 71 96 50 56 74 46", "0 4 46 40 61 2 51 1 33 11 3 38 68 32 6 70", "1 88 1 75 26 72 43 86 44 43 38 87 58 16 50 28", "0 0 89 46 98 36 19 38 98 69 8 68 19 0 23 87", "0 0 69 49 49 88 17 45 70 8 7 63 21 61 23 68", "1 60 36 76 3 83 79 92 31 78 35 95 16 93 76 25", "1 16 39 89 20 22 35 30 48 26 96 81 57 86 93 0", "1 57 77 99 22 39 31 68 13 20 99 93 91 13 44 21", "1 69 77 95 23 97 29 21 99 6 61 81 43 79 88 25", "0 1 61 17 87 78 0 74 27 3 6 73 78 21 23 77", "0 0 86 50 85 39 59 17 12 82 16 54 31 29 4 92", "0 6 48 57 58 88 71 25 30 62 23 28 83 74 5 67", "1 42 65 92 13 27 84 20 89 40 72 88 42 81 33 46", "1 19 30 91 19 48 34 65 62 43 55 96 72 66 86 44", "1 84 20 93 22 70 62 37 68 62 34 89 38 72 32 45"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 4, 10, 11, 14, 15};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> data = {"0 86457962 51147935 72417487 20359808 75454797", "1 9430949 18218 31096425 48134883 37572304", "0 37261693 5696825 46799575 35259146 64617798", "1 17734371 45092134 21599911 19041718 4512932", "0 26935937 89894950 41381199 57556080 97573409", "0 45974434 93586976 65717731 75994412 77723691", "0 31839509 93142258 45226972 86695120 47077336", "1 11848733 57152991 24413337 57048624 11006420", "1 14905754 76846345 43646230 35786098 11590468", "0 79251369 38486027 22097188 64530575 54179982", "1 18940223 68448844 56189186 89135511 36858184", "0 87967204 76319175 62606831 78367262 95860513", "0 33652812 65644029 33663504 72547798 94628646", "1 12096645 99337846 78782808 67834521 20827333", "1 19019879 61084271 40039193 56765641 37218565", "1 4661646 11752446 73130972 91674923 15311987", "1 10816786 83896719 19609408 98634664 22264950", "1 17676958 22522852 30409333 98912698 34664409", "1 5010947 20371256 23688 13365619 17407863", "0 48616846 82079212 56142468 49846638 44722345", "1 7421510 9236802 41125989 2915744 23015927", "0 59643726 45598227 15769472 12395781 84284122", "0 55894770 65295110 32740712 6089215 85198391", "0 33241032 21554002 86975137 36096618 87487236", "1 5066482 25285303 70008205 85829108 37480936", "0 63103521 56444515 88090266 13610998 68570868", "0 70147369 22773445 98593944 87494618 79290525", "0 24679705 13476457 24799177 30308384 85082699", "1 11286686 85153264 56259561 46757042 15768811", "0 51677942 36756856 87313777 65684289 87602810", "1 7734007 57689166 18614305 5532731 21720821", "1 13010243 29638937 20041081 39611358 34546937", "1 18361189 12514754 26262221 28168127 18811300", "0 40620363 18456541 37393780 52967847 65971281", "0 30142279 58099111 8628777 8759105 49174361", "0 77127152 30473670 43171419 17191763 96831797", "1 10014915 9570326 64508121 27855246 16128399", "1 3400116 27845988 50761353 24655295 22347052", "0 61031124 32701238 7777348 45586225 66498326", "1 7403454 16995592 13746430 94347870 25707334", "1 729013 19355590 46295917 43063433 6723845", "1 16738578 30287739 61141041 48445101 39500372", "0 76457716 82005174 11615718 71540459 92995963", "0 72615682 50050611 30948192 17195096 92158765"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 5};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> data = {"1 4 5 7 8 6 6 0 3 6 4 4 0 7 8 8 2 8 7 4", "0 8 6 5 1 0 1 6 5 7 1 1 4 4 0 0 4 7 1 4", "1 4 8 9 8 8 8 4 2 6 4 6 7 3 8 1 6 3 2 9", "0 9 6 6 1 4 1 5 9 4 5 0 7 8 0 0 3 5 0 6", "0 9 7 1 2 5 7 7 6 0 5 0 0 1 4 0 4 2 1 0", "1 2 8 8 9 7 9 3 1 8 6 3 4 8 9 2 5 8 2 2", "0 8 9 1 2 2 3 9 8 7 2 2 8 6 5 0 7 3 1 6", "0 9 8 3 1 2 1 8 5 5 4 2 1 1 0 0 9 8 1 1", "0 8 8 1 4 1 2 9 5 6 4 1 8 1 5 0 6 7 1 9", "0 7 0 2 6 3 5 7 6 6 4 2 9 0 1 0 9 3 0 7", "1 2 2 9 9 8 7 4 3 3 6 4 5 1 9 9 2 8 8 4", "0 8 1 1 3 0 4 5 8 9 5 2 2 0 5 0 1 5 0 5", "1 4 2 9 7 9 2 2 3 7 2 6 1 5 9 6 2 0 7 9", "0 8 1 2 4 2 9 8 8 3 3 0 5 6 3 0 6 3 1 6", "0 9 6 6 2 2 4 6 6 6 8 1 7 9 2 0 1 0 1 7", "1 3 0 7 9 6 5 2 1 3 4 8 9 5 6 9 2 2 9 5", "1 0 9 8 9 7 3 2 3 3 4 8 5 1 7 4 0 1 7 0", "0 7 0 4 4 1 5 9 6 5 7 2 5 7 3 0 1 3 1 1", "1 3 4 7 8 6 1 3 3 3 1 5 1 6 6 7 9 8 2 4", "1 1 3 7 8 9 1 3 3 2 9 4 8 1 7 1 0 3 8 9", "0 7 5 2 2 1 4 6 9 7 3 2 1 9 0 0 3 3 0 0", "1 4 8 8 8 7 5 3 3 4 1 7 2 8 8 9 6 5 3 8", "1 0 2 9 8 7 0 3 0 9 0 4 4 2 8 3 7 4 6 1", "0 7 0 2 6 4 6 5 6 1 2 2 6 9 3 0 4 9 0 3", "1 6 8 7 8 6 0 4 2 3 1 4 1 2 6 5 2 5 3 5", "0 9 9 2 4 3 0 6 8 9 3 1 3 6 2 0 0 5 0 9", "0 7 2 2 3 5 0 7 5 0 7 2 8 0 5 0 6 2 1 4", "0 8 8 3 3 0 0 8 7 8 6 2 7 4 2 0 1 1 1 5", "0 7 8 5 2 3 5 5 8 3 1 2 3 0 4 0 4 4 1 9", "1 5 1 8 7 8 1 1 4 4 4 8 3 2 9 5 1 2 4 9", "1 4 9 7 8 9 9 1 0 6 9 5 1 1 6 7 3 9 2 1", "0 9 2 5 4 5 3 7 6 5 5 0 1 6 0 0 6 2 0 6", "0 8 6 6 4 0 3 7 5 0 5 1 1 5 3 0 4 1 0 2", "1 4 7 8 7 9 8 2 2 5 9 7 4 1 9 5 1 7 6 4", "1 5 4 8 8 6 4 2 4 6 9 4 8 9 7 8 9 4 4 9", "0 7 2 3 1 4 4 8 9 4 6 0 5 7 1 0 7 5 1 5", "1 3 8 8 8 7 8 0 1 8 3 9 1 7 6 3 0 3 8 9", "1 1 7 8 8 7 3 3 2 2 7 6 7 2 6 3 2 8 5 2"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 4, 5, 7, 8, 11, 14, 15, 18};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> data = {"1 921621661 1510856116 402364567", "1 97296061 1206146936 131514590", "0 1289282118 357010805 1404688472", "0 1303919719 466840519 1229261604", "0 2123509334 248621776 457920892", "0 2002749050 814489717 2005770320", "0 975496140 676510119 791184657", "1 266366547 1693216939 796124403", "0 1740652399 560132316 1868366021", "1 776527864 1988827694 1157757133", "0 2084906478 811906920 68524203", "0 1305165734 136824043 1226463883", "0 1532437544 696550027 1619455916", "0 2035067761 51866271 1622495685", "1 193386835 2062286544 768556594", "0 1684746754 435096815 292196559", "0 1355574553 649120273 1563957142", "1 57210540 1685147268 534150516", "0 1049982361 245732671 521861590", "0 1031659787 709223159 1933368439", "0 1931551562 676671856 786889989", "0 2013729880 382507404 645322678", "0 982088481 285984076 1234995007", "0 1144909376 521645355 1388368263"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> data = {"1 0 6 4 8 4 6 9 4 7 8 7 1 0 5 3 8 4 9 9 1 3", "1 3 0 7 9 5 4 7 9 9 0 1 9 0 7 0 8 8 8 1 2 8", "1 3 9 7 0 9 1 8 4 9 0 5 9 0 7 3 8 8 4 7 4 1", "0 5 5 5 1 3 8 5 3 0 6 1 8 4 3 4 2 2 4 3 9 7", "1 2 7 7 9 7 4 9 8 7 2 2 3 1 4 2 6 8 1 9 2 8", "1 0 4 0 2 5 6 9 4 3 4 4 6 1 0 9 9 0 7 2 4 7", "1 0 3 6 4 6 3 8 6 0 4 6 4 1 4 5 9 3 7 6 1 9", "1 1 2 6 5 5 4 7 9 2 1 6 7 1 7 4 9 1 5 2 3 7", "1 3 0 4 6 6 4 7 8 5 0 5 4 0 0 9 9 4 5 6 0 3", "1 0 8 2 8 4 6 7 5 6 3 0 9 1 4 7 9 1 3 2 0 6"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 5, 6, 7, 8, 13, 16, 20};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> data = {"0 0 0 7 1 4 2 2 0 9 7 2 1 7 3 5 7 6 3 2 5 4", "1 6 6 6 5 0 8 4 7 8 9 4 2 0 2 0 2 3 9 7 1 3", "0 4 5 4 0 2 0 1 2 8 4 0 0 5 8 2 2 2 4 1 2 1", "0 5 3 5 3 9 4 3 0 0 2 0 1 7 0 8 7 4 1 0 1 8", "1 8 2 1 6 1 8 3 6 3 9 4 9 0 4 1 7 5 9 5 8 1", "1 2 0 8 5 9 8 6 3 2 4 8 9 0 1 1 8 3 9 8 6 3", "1 0 3 4 5 9 8 1 4 9 7 0 2 0 7 0 0 6 9 5 2 0", "0 4 3 2 2 5 0 1 0 8 3 7 1 5 2 3 4 7 5 4 4 2", "0 9 8 8 2 6 4 9 0 0 1 1 1 3 1 4 1 9 8 1 6 9", "1 8 8 5 5 3 6 0 7 9 7 2 2 0 3 1 9 6 9 5 9 4", "1 5 9 6 6 2 7 9 6 2 1 1 2 0 6 0 4 3 9 9 9 6", "0 8 2 9 4 0 4 0 0 1 9 9 1 1 9 7 7 2 2 1 8 9", "1 3 2 1 7 7 9 9 9 2 1 3 4 0 3 0 4 0 9 9 8 1", "0 2 5 2 1 9 2 2 0 4 5 6 0 1 2 7 4 1 5 3 1 7", "0 7 4 6 0 4 4 8 1 2 0 3 1 9 2 8 1 6 7 1 6 5", "1 3 7 7 8 9 9 3 3 7 7 8 2 0 8 1 8 3 9 9 2 0", "1 8 9 3 9 9 7 1 3 5 0 9 2 0 9 0 3 0 9 6 2 1", "1 1 5 8 9 9 6 5 6 7 8 0 5 0 6 1 7 7 9 8 7 1", "1 7 8 2 6 5 6 7 9 9 5 4 8 0 9 1 6 4 9 8 1 9", "0 0 5 7 4 6 1 2 2 9 1 1 1 8 2 6 4 9 2 2 6 5", "0 6 9 3 1 7 0 1 2 3 0 1 1 8 2 7 4 8 5 2 2 9", "1 1 8 0 5 5 7 1 6 9 1 9 2 0 8 0 4 0 9 5 7 8", "1 9 7 3 8 3 8 5 9 0 3 6 8 0 3 0 4 5 9 9 2 3", "1 9 4 6 9 8 9 2 4 8 9 1 5 0 0 0 8 0 9 7 2 1", "1 3 0 6 8 0 9 6 6 3 7 2 5 0 7 1 2 0 9 9 3 8", "0 3 7 9 2 2 2 9 0 5 5 6 1 5 7 6 1 7 5 2 8 6", "0 7 3 3 2 3 5 7 2 9 4 2 0 2 4 7 7 8 3 3 1 8", "1 1 1 4 7 5 7 4 9 6 7 0 8 0 9 0 8 8 9 5 7 3"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 6, 8, 12, 13, 15, 18, 19};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> data = {"0 36 207 564 651 340 189 363 509 709 957 372 186", "1 123 331 392 94 718 791 174 236 501 171 36 474", "0 58 304 108 550 109 164 990 514 570 972 975 591", "1 972 796 78 863 897 876 164 757 908 374 43 411", "0 34 177 510 333 89 185 908 822 339 951 728 552", "0 48 799 400 300 242 258 582 742 57 940 630 807", "0 36 493 691 222 129 16 606 247 635 997 213 937", "1 820 201 945 971 782 724 78 426 218 285 9 585", "1 644 851 380 395 811 611 113 264 81 887 52 926", "0 13 217 959 400 513 201 481 677 40 941 308 478", "0 45 157 544 906 396 330 448 44 9 985 277 835", "1 510 137 502 236 802 736 4 699 462 14 59 308", "0 69 151 714 213 127 326 810 147 926 939 689 386", "0 27 961 711 323 670 297 621 654 393 964 683 434", "1 797 785 149 573 990 688 186 287 928 668 9 663", "1 776 529 133 778 897 649 176 441 965 13 91 739", "0 40 67 307 780 384 442 893 498 695 939 644 490", "1 131 938 440 537 733 624 169 663 226 880 115 193", "1 285 506 261 841 883 755 180 844 677 383 95 825", "1 623 429 276 347 952 721 148 927 943 476 52 285", "0 76 525 332 764 399 440 882 919 762 948 260 313", "0 50 857 431 166 623 92 778 106 461 998 842 56", "0 21 596 433 361 371 145 593 66 378 943 151 681", "1 676 293 743 197 708 775 2 622 632 461 41 637", "0 54 893 626 509 409 49 653 794 83 980 353 774", "0 21 878 437 986 569 379 727 777 144 980 636 764", "0 81 620 188 136 614 130 400 246 428 996 820 778", "1 276 954 452 284 808 604 27 28 30 434 23 99", "1 568 886 428 288 805 931 62 311 734 768 87 253", "1 329 40 245 373 798 755 39 449 786 131 85 581", "1 904 889 332 70 915 690 185 38 347 278 7 367", "0 65 928 733 583 299 418 535 887 397 944 508 980", "0 3 485 802 391 520 299 924 915 701 946 874 568", "0 69 11 961 969 218 168 921 484 379 956 247 347", "1 320 58 873 518 770 664 159 435 586 849 115 533", "0 47 41 799 940 523 232 536 686 752 992 188 502", "1 950 792 458 773 883 931 124 894 550 446 43 764", "0 38 837 907 651 421 160 942 68 224 963 942 507", "0 12 822 657 357 643 328 514 971 886 975 128 66", "0 79 409 85 25 535 423 684 534 481 998 751 489", "1 830 773 538 180 758 671 3 934 230 807 38 334", "0 27 458 268 709 463 156 750 396 117 962 945 2"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 5, 6, 7, 10, 11};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> data = {"0 1944914038 1696137778 1525367830", "0 1547932733 1185820653 1500052399", "0 230149443 1358715189 501418065", "0 1676118083 1499656529 2103271593", "0 1441540020 1189300515 1544659186"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> data = {"1 11 1 16 94 96 4 87 12 44 11 91 5 2", "1 94 29 69 74 59 87 14 67 11 75 29 60 36", "1 74 10 97 24 34 63 15 64 33 98 44 74 5", "1 88 23 24 6 98 63 12 81 11 87 93 54 57", "1 29 1 19 35 80 43 45 43 35 13 91 10 69", "1 95 73 81 2 19 42 94 71 15 93 9 65 70", "1 25 4 74 56 76 77 14 29 81 41 78 1 1", "1 67 4 64 29 13 35 90 12 40 32 73 2 16"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> data = {"0 163869663 388719849 383049741", "1 1982032201 1346175990 1500891700", "0 436834674 559375803 994453722", "0 652316051 372955428 361692727", "1 1946362869 1204080206 2066121600", "0 840867095 22073435 1166658385", "1 1864235269 2041251772 1847305529", "0 852306016 447986701 407997336", "1 1183214776 728141214 1985649244", "0 70064437 7110416 107908753", "1 1383409284 1328770197 1942831571", "1 1023334064 1596272317 1226876467", "1 2068895243 1481323649 1955807390", "0 758836687 541737411 312747384", "1 1432983907 1475284843 1512945413", "1 1512506825 1933755150 2041997368", "1 2041700103 1859742986 1995865005", "0 323696628 328891715 893352493", "1 1623710967 1193592990 1871502957", "0 9241593 127579695 36337622", "1 1935123182 1332735215 1400991717", "1 2130762600 1874898210 1234793873", "0 411777048 142083649 61450530", "1 1042383468 1979605937 1276643901", "0 219279208 371281702 65383690", "0 948808405 243728462 984221323", "0 999393888 131231007 1186873391", "1 1294115986 1618148416 1324126407", "1 1710811842 2024808989 1696767048", "1 1399327255 1317859960 1427366434", "0 145887863 452552798 165691442", "0 685701683 334764463 1001631935", "1 1596433536 1911594193 1533322508", "0 128647261 372955025 1051296077", "0 946946329 548039713 83591687", "1 1490995704 1541151932 2052868342", "0 805037508 405134691 593191395", "1 2048614262 1171142414 1309623012", "1 1024870244 1791074791 1778846631", "1 1403452711 2033486235 1555085078", "0 900806815 269954427 806033528", "1 1598931622 938905156 1474311731", "1 1468418323 749319445 2060324871", "0 407246582 393808982 163347811", "0 52629967 643176802 619367349"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 3};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> data = {"1 5 0 8 0 0 0 4 5 1 8 7 2 9 5 9 4 1 4 8 1 8 3 7 0", "1 4 0 4 9 0 8 1 9 1 9 2 4 9 9 4 5 3 3 8 0 9 2 7 8", "0 6 8 3 2 3 1 9 6 2 1 1 9 1 0 2 3 7 5 5 6 1 9 9 4", "0 8 9 5 2 7 8 9 0 2 1 2 9 5 1 8 7 7 3 3 8 1 8 9 3", "0 7 8 3 4 9 7 9 8 9 2 7 9 8 2 4 0 8 3 6 9 2 8 9 9", "1 7 1 1 7 0 8 0 5 3 8 0 7 3 7 4 0 4 8 2 9 9 7 8 9", "0 5 3 4 1 7 2 9 2 4 7 5 9 9 1 6 3 7 2 8 8 4 9 9 1", "1 7 1 8 0 0 0 5 0 9 8 8 3 8 7 3 5 0 5 9 0 9 7 0 8", "1 0 0 5 1 0 5 6 8 0 8 8 1 4 5 6 8 5 6 3 3 9 1 7 0", "1 2 1 7 9 0 7 7 4 8 8 7 4 5 7 6 5 6 8 8 0 8 7 5 4", "1 9 1 9 2 0 5 1 6 0 9 8 5 0 5 2 4 1 5 9 1 8 7 4 6", "1 5 1 2 5 0 4 7 3 2 9 9 4 9 4 4 6 3 2 6 6 9 6 1 2", "1 4 1 9 0 0 5 1 6 8 9 2 5 7 6 9 0 4 9 0 7 8 4 1 3", "0 9 6 0 3 9 1 9 6 0 5 3 9 0 1 8 4 9 8 9 9 7 9 9 2", "1 0 0 1 0 0 5 0 2 9 9 8 0 1 6 1 5 3 4 7 0 8 2 4 7", "1 6 0 1 7 0 3 1 6 8 8 3 6 8 8 4 5 2 8 2 1 9 7 6 8", "0 4 3 9 3 9 2 9 9 0 4 4 9 7 0 3 5 8 3 6 1 3 9 9 0", "0 5 4 0 5 6 2 9 6 4 1 0 9 7 2 5 3 8 5 2 8 3 9 9 5", "0 4 3 6 7 2 1 9 3 2 5 7 9 6 0 1 6 9 3 7 8 5 8 9 7", "0 2 9 9 5 6 9 9 3 0 3 6 9 4 0 9 8 8 6 2 1 6 9 9 3", "0 3 6 0 7 2 2 9 8 8 4 3 9 2 3 6 5 9 2 0 2 0 9 9 8"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 5, 7, 10, 12, 14, 17, 21, 22, 23};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> data = {"0 1547739701 1235063840", "0 2137772306 2078493647", "0 1850358669 1034533319", "1 812611956 561444528", "1 1004024375 85192128", "1 363177039 460306910", "1 524796577 45637143", "0 1468591221 2074083385", "0 2044279234 736418449", "1 1087650026 447481471", "0 1968119201 925466670", "0 1810289577 778299821", "1 775889843 220849441", "1 177617262 592237472", "0 1515330509 1985206901"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> data = {"0 8 3 0 7 5 4 6 4 1 2 8 8 5 3 1 9 8 8 5 6 1 0", "0 5 4 0 6 7 0 1 5 8 4 1 1 9 9 2 6 5 8 6 9 6 0", "0 8 1 7 6 1 5 0 6 9 8 5 2 7 6 1 8 9 7 9 4 2 0", "0 9 7 1 5 6 5 9 7 3 4 6 0 3 7 0 7 7 7 4 4 6 0", "1 1 1 9 3 7 7 9 0 5 0 8 1 0 0 6 1 1 5 1 3 4 8", "1 0 8 9 0 3 8 6 3 0 7 2 2 0 1 3 0 0 0 2 2 4 5", "1 1 5 9 1 0 8 3 3 5 3 7 3 1 0 7 2 2 3 0 2 4 5", "0 9 1 6 9 1 6 7 6 2 1 4 9 7 9 1 6 8 7 4 9 5 0", "0 8 4 4 4 7 3 0 4 0 4 3 5 8 4 1 8 9 7 4 7 6 0", "0 9 1 0 9 2 0 0 9 9 3 9 4 5 4 2 6 5 7 7 9 9 0", "0 8 8 0 8 4 2 7 4 5 6 5 4 8 4 2 6 9 8 7 9 1 0", "0 6 9 2 5 2 6 5 7 5 6 6 2 3 7 2 6 8 9 7 4 5 0", "1 1 0 9 3 7 7 1 3 9 4 5 1 1 2 4 4 2 4 1 1 3 6", "1 0 9 9 2 7 9 8 1 1 8 1 0 0 2 8 4 2 1 1 3 3 3", "0 3 3 5 6 9 5 0 9 6 7 0 4 7 4 2 8 7 7 5 5 5 0", "1 0 9 9 3 7 9 5 2 7 4 0 5 0 2 9 2 2 6 2 3 4 4", "0 7 5 3 4 1 0 8 5 2 3 4 1 2 9 1 7 8 7 9 9 9 0", "0 2 6 0 8 5 6 3 4 9 4 2 2 4 7 0 6 4 9 7 6 0 0", "1 0 0 9 0 0 8 7 3 2 3 4 5 0 1 8 0 0 6 1 0 1 7", "1 1 7 9 2 4 8 1 3 4 9 8 4 0 1 9 0 3 0 0 1 1 2", "0 3 8 3 6 3 0 8 8 3 5 4 4 4 9 2 6 7 9 6 7 6 0", "1 0 0 9 0 6 8 1 2 4 6 7 7 1 2 7 4 1 0 1 3 9 9"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 4, 6, 8, 13, 14, 15, 16, 17, 18, 19, 20, 22};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> data = {"1 5 24 29 7 66 64 97 76 70 90 85 90 74", "1 79 60 41 65 42 17 97 36 71 55 78 99 94", "1 54 86 7 43 14 42 94 91 99 67 78 95 79", "1 26 79 5 33 6 33 68 53 29 18 73 95 98", "1 86 98 25 41 80 38 84 85 18 26 85 95 88", "0 39 83 79 6 85 0 53 37 3 34 39 41 15", "0 5 98 92 65 68 14 29 20 1 62 1 87 33", "0 32 57 78 24 58 98 18 94 2 14 66 66 28", "1 20 13 39 47 6 11 74 40 25 66 79 95 78", "0 42 44 75 85 76 66 18 5 1 29 65 2 23", "1 38 91 61 43 45 55 89 55 15 66 99 99 79", "0 22 57 72 29 8 53 7 91 2 80 22 7 66", "1 57 25 67 3 48 20 94 77 89 72 98 95 82", "1 57 88 20 31 22 82 95 2 94 74 78 98 77", "0 36 86 86 56 20 75 58 75 4 84 70 9 29", "0 30 56 77 44 95 84 54 59 4 32 42 59 27", "0 27 47 80 81 6 91 48 52 2 48 27 21 48", "1 37 19 63 37 67 62 98 83 86 97 99 96 81", "0 28 62 79 54 87 14 12 31 3 80 20 78 63", "0 19 42 72 11 48 36 7 67 4 5 9 56 18", "1 56 46 42 78 73 70 70 1 96 95 94 94 72", "1 44 47 33 73 70 4 98 88 68 5 81 94 92", "0 23 43 97 63 88 37 30 30 1 1 57 46 44", "0 75 12 92 33 17 35 14 77 2 96 63 32 2", "1 32 11 27 77 98 76 78 39 71 23 83 95 84", "0 64 40 92 26 95 9 10 60 1 27 40 33 51", "1 98 59 46 53 47 67 86 87 6 74 75 94 84", "1 6 15 6 58 72 9 86 31 58 5 94 92 98", "1 62 31 67 97 76 95 71 79 6 1 84 90 75", "1 33 89 11 94 15 39 96 49 93 50 76 99 88", "0 67 78 79 54 21 58 10 53 2 95 37 52 47"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 7, 9, 11, 12, 13};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> data = {"1 1779638125 1800223207 1458540675", "0 1696328416 1112201514 838287344", "0 1067228076 1168536961 2127628561", "1 1110213861 2124935633 1552285442", "1 36491431 1151392735 1640798117", "1 1502409596 838787049 1475874684", "0 476651606 680544791 155981379", "0 1899331921 1610856776 1373699956", "0 106519628 1752064891 1776363076", "1 2052031307 746758804 1511390554", "1 683330490 111564109 2049331440", "1 2022488011 593835442 166674712", "1 218091443 847843307 51857668", "0 1991688007 1716479480 1461951739", "0 1536432147 1713123550 1714635582", "0 798120094 37417651 1170333863", "1 879575533 1993228668 924803520", "1 1812051977 2102253810 841877685", "1 1088787007 479409631 249108233", "0 1505044947 1044990673 1201956846", "0 1829661246 1928098878 1030804354", "0 1474380437 606265618 1484499753", "1 78297120 1676632119 563242846", "1 1385610730 682491703 331546814", "0 1588940449 1516577061 244258729", "1 13922945 202921889 1378504557", "1 588829445 372890003 644526989", "1 203366092 1140443014 455198041"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> data = {"0 8 8 0 6 9 8 0 4 3 0 8 8 4 2 8 0 7 0 2 0 3 8 4", "0 6 5 2 5 6 6 0 9 2 2 1 1 5 0 7 9 9 4 5 0 9 9 1", "1 3 5 7 5 7 4 5 5 5 7 8 3 0 8 0 3 4 9 1 6 1 5 8", "0 9 3 1 4 5 1 0 1 3 5 8 6 6 1 7 0 8 1 2 1 2 9 3", "1 1 8 9 2 2 9 5 5 7 0 2 3 0 7 1 8 0 9 1 9 2 9 2", "0 7 3 1 5 3 1 0 0 3 7 1 0 4 5 9 0 7 3 7 1 0 6 3", "0 7 7 1 5 9 1 0 2 2 9 8 8 2 2 7 7 5 7 4 0 9 5 8", "0 9 1 1 0 1 1 0 5 4 8 5 7 7 3 9 4 5 5 3 1 4 8 2", "0 6 4 2 0 0 3 0 4 0 2 5 9 5 5 7 7 8 6 7 0 7 5 2", "1 5 8 9 3 6 2 6 2 8 8 9 9 0 9 5 1 4 8 1 7 8 7 4", "1 5 5 8 1 4 2 9 4 5 2 1 8 0 7 6 1 2 8 0 2 9 5 4", "0 9 2 1 5 9 5 0 6 3 1 5 2 9 2 7 6 7 4 6 0 3 5 7", "1 5 1 7 6 1 0 7 0 6 6 0 0 0 6 6 3 0 9 1 3 5 0 6", "0 6 1 0 5 0 0 0 9 4 5 3 4 1 3 8 6 6 0 8 0 4 8 4", "0 9 5 0 9 7 5 0 4 4 9 7 2 1 1 7 8 6 0 3 0 2 7 0", "0 6 4 2 4 6 2 0 6 2 8 1 4 8 2 7 3 6 1 6 0 4 8 5", "0 7 4 2 1 2 2 0 1 0 2 1 8 9 5 8 4 6 6 3 1 6 5 6", "1 3 1 6 9 6 7 4 8 5 9 0 5 0 7 6 3 1 8 0 2 5 8 1", "1 0 3 8 7 4 7 2 1 9 2 2 2 0 8 0 7 2 9 1 5 6 7 6", "1 5 6 8 9 0 2 4 8 8 0 3 8 0 6 1 2 1 8 1 6 7 6 1", "0 6 1 1 8 2 6 0 8 4 4 0 9 5 4 9 4 5 5 9 1 6 0 3", "0 7 1 0 1 1 3 0 9 0 8 1 5 4 0 9 2 5 6 5 0 0 2 2", "0 6 5 1 6 0 8 0 3 4 3 9 2 7 4 8 9 5 5 2 0 0 4 1", "1 2 6 3 7 1 3 6 7 7 0 9 2 0 6 3 6 1 9 0 4 9 9 8", "1 5 9 8 4 0 2 8 9 9 4 1 1 0 7 2 7 0 9 1 6 5 7 8", "0 6 8 0 4 1 4 0 2 2 9 4 1 3 0 7 2 6 3 2 1 4 4 0", "1 0 0 8 8 4 8 2 7 5 5 1 8 0 8 3 9 3 8 1 6 8 1 4", "0 8 0 2 3 0 1 0 4 4 2 5 9 1 2 7 4 6 1 3 1 0 7 4", "1 3 0 5 1 3 0 6 0 9 8 7 2 0 6 0 4 3 9 1 2 6 7 5", "1 4 6 7 3 1 1 8 8 6 9 6 9 0 9 0 8 3 9 0 6 7 6 1", "0 6 1 0 4 6 3 0 0 0 3 8 9 6 4 7 9 9 1 2 0 0 5 9", "0 8 0 0 8 1 8 0 6 2 4 5 8 2 1 9 7 5 6 6 1 6 8 7"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 7, 9, 13, 14, 15, 17, 18, 19, 20};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> data = {"1 197205516 1637754120 1042793732", "1 414532516 1412407960 1205786213", "1 965216037 591585061 1633156083", "0 2069386974 631762950 167847648", "0 1585431708 1188873114 62103140", "1 720390464 1714920178 1820548921", "0 1471919219 1671782762 159589076", "1 302895789 1053416653 1968156717", "1 318873185 54870362 534730917", "1 458387418 2030423833 1378278491", "1 237390384 1000898651 1201063145", "1 249877302 371478533 474253906", "1 518549376 1983068336 980113947", "0 1912155833 1383200739 140779748", "1 61596506 1879296696 2101899166", "1 425214859 1790700143 951162867", "1 334018019 1023907986 342587810", "0 1468624459 1725626873 16930542", "0 1996200314 1480951197 197038237", "1 448832019 1582553905 621509503", "1 977162878 662907343 725621903", "0 1486330488 487430296 30887063", "0 1197495845 489746216 123310409", "1 794224465 444988005 1944246997", "0 2008956552 968215540 156542368", "0 2051169940 241447612 154296713", "0 1930650710 2113589391 135096824", "1 610101499 1910761946 2139243266", "1 893106941 469003738 360407443", "1 386379777 2038046880 1785888264", "0 1256706406 622423052 39883945", "1 584075268 964249508 998232942", "1 212221332 967961688 2140621252", "0 1160169792 658699326 66556882", "1 772195527 688454933 476836740", "0 1811358667 1865289548 26122766", "0 2058301972 626380734 181727069"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> data = {"1 61896810 68442793 83287490 47483070 51488996", "0 13900448 97301130 14052905 43888854 14577490", "0 35927525 92335740 64393316 41514293 30199005", "1 49829810 20972921 98885293 50137720 88001710", "1 29572864 15759008 85624386 52859435 2953433", "1 86017114 3346714 100683 38473764 44589830", "0 99582530 98511573 19913759 23285961 34126881", "1 24385421 3213023 46071625 40342088 89225242", "0 39891424 96193777 93135563 71029947 41502873", "1 92198846 71108857 8417779 40803211 87178280", "0 90868123 88393564 62531222 80050713 63019663", "0 86023028 97849603 21804372 76334991 45728669", "1 35375211 58129247 27973748 17819770 36229923", "0 26432088 93552375 58344453 8480047 61501483", "0 24804771 89339587 11837592 21456594 20567451", "1 41445535 58041037 25795698 77125996 78748541", "1 4739419 2081306 68693744 69379602 72376229", "0 95443935 89861808 66507472 38710616 49114817", "1 64720901 74293018 94436551 621840 8051303", "0 27071006 91221009 74039394 50646382 38476718", "0 94221437 97138624 27174271 85997705 92192777", "1 91895861 12798720 30696391 93108827 38508451", "1 42768733 72816265 90372420 80926747 18617868", "1 2673881 3278805 50073050 21514207 22790243", "0 69939669 96058249 3898641 31971645 69548310", "1 38414710 4589525 66883308 1951819 44913548", "1 11867584 66346107 61274612 83328569 2310047", "1 39404202 69265091 98593511 51760459 18380864", "1 25715375 10180151 80849844 48813162 51254574", "1 83689472 69672977 68244830 66378293 40471555", "1 32401851 31749330 56218590 76022044 89504352", "0 99460431 93617250 61915306 77062010 28948776", "0 9532094 89047277 35404265 87239280 59752404", "0 83549054 96530818 5025816 22716528 49791216", "0 14723126 99099172 70953674 27784439 2287541", "1 2069483 10108759 61688357 18769173 14317494", "1 57770673 27817575 30402119 82712478 67008601", "1 76489655 6644616 33532853 49008789 61852358"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> data = {"0 594 29 681 15 576 500 942 26 300 931 646 173", "0 343 211 776 11 257 562 220 199 11 994 607 87", "0 156 161 131 11 357 877 347 126 664 103 35 626", "1 863 960 903 787 164 83 88 865 890 645 6 790", "1 271 958 699 294 205 235 29 940 730 902 691 909", "1 793 977 585 422 911 147 23 871 277 409 64 28", "0 704 953 416 24 268 909 920 224 146 659 594 560", "1 268 979 431 488 866 71 8 952 746 858 590 66"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 4, 6, 7, 8};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> data = {"1 8946 9163 4488 6303 3214 2653 7544 3674 7878", "0 9669 2380 9221 9241 980 8748 2312 8704 307", "1 528 9799 7084 868 6835 1615 5369 196 5783", "1 6764 7381 2238 1050 1858 4100 4135 1539 5440", "0 1874 3984 8950 6505 8723 7769 1855 2798 380", "1 8178 8646 2370 1293 6410 5988 8413 9724 4959", "0 2971 2666 8839 7570 4529 7686 2908 9942 489", "0 126 5978 9406 6436 4244 8817 2771 5688 386", "0 4872 4062 9156 7561 5906 9032 1593 7365 610", "0 7589 6968 9463 6671 7251 8608 3044 8773 554", "1 6291 9320 773 6224 1084 998 4980 5483 7059"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 6, 7, 9};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> data = {"0 7 5 8 7 9 1 7 6 7 0 4 9 6 6 6 1 3 5 6", "1 4 0 9 4 0 7 2 3 9 7 6 0 8 5 3 9 1 1 7", "0 7 8 4 9 2 1 4 9 3 4 1 9 0 2 5 0 1 3 1", "0 8 1 3 7 8 4 5 4 3 4 3 9 7 1 1 1 8 3 4", "0 6 9 1 8 3 0 9 1 3 7 3 9 1 1 3 3 9 5 6", "1 1 2 5 5 0 6 2 8 9 8 7 5 8 8 2 9 9 1 3", "0 7 3 3 8 4 3 6 0 5 8 1 9 6 2 7 2 8 8 2", "1 1 5 3 0 0 6 0 0 9 4 3 7 8 2 7 9 7 0 5", "1 0 1 0 3 0 9 0 7 9 5 6 1 8 4 8 9 5 0 4", "0 3 4 0 7 5 2 9 7 5 1 8 9 1 2 8 7 0 4 4", "0 6 7 9 7 5 1 8 9 6 5 9 9 5 5 9 4 5 5 7", "0 7 0 1 8 3 0 5 5 2 9 9 9 5 9 0 4 8 2 5", "1 3 9 2 3 0 5 3 2 9 0 7 5 8 2 5 9 3 1 1", "1 5 5 4 1 0 7 1 0 9 8 2 5 8 7 0 9 3 1 5", "0 1 3 3 7 4 0 6 8 3 0 3 9 0 4 8 6 8 6 8", "0 2 5 0 8 7 2 5 2 2 3 3 9 1 6 9 4 0 7 5", "1 9 2 7 2 0 7 3 4 9 3 3 4 9 1 9 9 2 0 8", "0 7 3 7 9 1 4 7 3 8 3 9 9 2 1 7 7 8 9 0", "1 7 1 5 4 0 9 2 9 9 8 1 6 8 0 5 9 2 1 8", "0 4 7 4 9 3 3 9 5 8 9 5 9 6 7 9 2 7 3 2", "1 6 6 7 4 0 8 2 1 9 9 8 1 9 5 9 9 6 1 5"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 5, 6, 7, 9, 12, 13, 16, 18};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> data = {"0 9 3 7 1 0 9 0 3 8 9 7 3 0 3 7 3 9 8", "1 7 5 9 3 3 4 9 8 1 0 9 4 3 4 3 7 5 7", "0 2 6 5 2 1 0 4 2 5 3 0 0 0 6 7 3 8 8", "0 2 5 5 5 0 9 7 3 8 7 4 9 0 8 3 5 9 9", "0 4 4 7 4 1 0 5 0 6 8 1 0 0 7 0 0 9 8", "1 2 3 9 2 8 5 9 9 1 2 8 3 8 5 4 7 3 7", "1 3 7 9 3 4 9 9 6 4 1 9 6 6 3 5 7 3 5", "0 0 4 2 7 0 6 5 3 5 7 0 2 0 4 4 2 8 9", "1 7 1 9 6 8 6 9 8 0 0 8 7 2 8 9 7 1 0", "0 5 7 5 9 2 8 4 3 7 3 4 3 0 4 4 2 9 9", "1 3 6 9 1 7 4 9 4 0 2 8 1 9 6 9 8 7 3", "1 5 3 9 6 5 5 9 8 4 2 8 8 4 7 1 7 6 5", "0 2 1 7 2 1 4 0 3 8 6 5 2 0 3 0 5 8 9", "0 4 8 6 7 2 8 2 1 5 6 1 7 0 8 7 3 8 9", "1 2 0 9 6 6 4 9 7 3 0 9 9 1 7 0 7 5 6", "0 5 8 2 6 1 5 1 2 9 9 2 7 0 8 0 2 9 9", "1 8 2 9 6 8 9 9 8 1 1 9 5 8 8 8 9 4 5", "1 7 5 9 8 8 6 9 6 3 1 9 2 2 8 5 8 0 4", "1 0 5 9 4 3 1 9 7 3 2 9 6 7 5 0 7 4 2", "0 1 7 0 1 1 3 0 3 9 7 2 8 0 0 2 2 9 8", "0 5 6 6 9 2 4 4 2 8 8 7 6 0 9 2 6 9 9", "0 6 5 3 8 0 1 7 0 8 6 5 3 0 9 0 2 9 8", "0 7 8 4 6 2 1 0 2 8 9 0 2 0 8 9 1 8 9", "0 7 0 1 5 1 0 7 1 5 9 3 0 0 1 9 5 9 8", "0 7 4 0 7 0 0 8 3 7 4 0 6 0 3 4 4 9 9"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 5, 7, 8, 9, 10, 11, 13, 16, 17, 18};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> data = {"0 7159503 5805412 912872 4689910 2550911 9767063", "0 6113466 2504157 1162820 4343261 1400226 4390675"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> data = {"0 154 723 82 768 992 38 247 841 905 51 529 102", "1 626 24 542 64 872 577 223 56 423 963 121 414", "0 267 131 814 763 988 471 258 358 965 914 26 650", "0 549 998 687 769 998 877 256 718 850 649 312 978", "0 735 761 124 307 980 954 310 822 850 353 323 485", "0 500 635 216 404 999 192 483 299 932 390 327 478", "1 12 56 79 33 149 762 219 47 288 729 357 277", "0 15 525 156 536 970 30 754 448 836 997 421 923", "0 110 490 578 753 976 167 320 269 932 760 306 312", "0 2 243 195 717 972 664 880 194 857 638 701 239", "0 828 668 606 306 986 137 518 442 817 447 0 718"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 4, 5, 7, 8, 9};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> data = {"1 502 254 332 559 680 39 492 541 58 332 779", "0 81 0 658 726 530 422 115 322 226 39 149", "0 120 2 541 647 128 270 272 61 448 41 839", "1 228 358 181 470 931 9 790 446 194 282 154", "1 546 387 633 79 940 85 642 795 1 337 673", "1 953 566 650 513 768 14 610 865 95 938 427", "1 95 781 925 578 693 15 948 853 119 976 415", "1 178 517 905 372 679 60 498 729 26 235 424", "0 508 2 941 918 517 486 411 157 600 94 442", "0 499 4 605 853 123 675 327 198 440 38 990", "1 526 938 873 119 977 61 905 967 192 594 524", "1 731 602 831 444 784 6 600 983 124 692 121", "1 806 523 655 256 871 52 937 507 110 266 975", "1 858 52 857 34 918 39 442 572 106 204 656", "1 670 452 980 48 814 116 503 438 209 539 583", "1 777 865 408 537 760 113 592 626 141 201 724", "1 936 672 328 117 869 121 468 425 59 195 718", "0 826 4 600 994 358 774 263 59 772 68 88", "0 690 3 180 851 67 592 171 194 796 95 896", "0 830 4 689 967 627 619 210 39 622 37 335", "0 775 3 911 591 446 689 87 111 240 80 88", "0 604 1 662 724 103 602 297 65 325 4 67", "1 909 140 76 75 983 49 629 686 102 157 980", "1 772 768 210 447 742 20 493 449 133 401 191", "1 19 778 952 278 842 84 652 605 76 255 35", "1 270 822 409 425 755 134 865 832 133 311 133", "1 738 462 955 186 698 13 998 815 182 357 202", "1 425 852 614 584 905 33 714 749 75 845 655", "1 784 547 754 452 741 103 541 859 51 344 165", "0 50 0 504 630 555 354 293 394 520 32 134", "1 445 875 783 116 779 0 499 513 149 512 415", "1 251 632 14 44 837 54 920 643 211 584 142", "1 794 700 403 393 679 76 654 571 114 902 143", "1 16 539 499 537 692 38 813 970 54 919 77", "1 340 619 396 478 958 20 850 813 198 504 520", "0 312 2 432 938 605 862 411 269 538 99 306", "1 338 911 166 273 848 10 883 601 86 136 923", "1 145 194 303 17 768 35 798 836 70 151 618", "0 251 4 194 641 191 752 412 41 907 49 819", "0 26 1 645 781 44 983 265 279 989 44 574", "0 718 4 64 650 255 756 397 48 665 36 301", "1 924 43 910 9 686 85 717 750 163 944 959", "0 912 3 129 963 79 949 275 59 528 49 796"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 4, 5, 6, 7, 8, 9, 10};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> data = {"1 211 893 317 846 55 309 205 156 296 559 547", "0 764 15 816 797 10 106 608 692 500 312 86", "1 860 521 81 334 617 323 667 518 13 848 908", "0 133 11 232 61 723 623 995 990 974 669 47", "1 970 618 58 947 213 892 261 1 464 231 530", "0 108 17 418 845 601 177 254 906 194 839 185", "1 88 424 501 957 759 367 539 742 203 38 887", "1 633 222 310 663 795 335 96 35 362 193 831", "0 478 24 63 108 357 969 953 357 58 905 313", "0 959 20 0 122 742 268 406 934 440 178 389", "1 63 813 600 883 676 151 369 282 321 311 888", "0 700 1 14 552 53 560 571 345 316 641 284", "1 756 438 767 648 655 273 430 688 595 277 735", "0 26 8 478 224 986 313 439 786 939 218 134", "0 694 0 647 340 839 112 934 345 623 199 22", "1 123 249 551 96 908 97 400 549 333 879 762", "1 929 755 714 968 404 97 485 612 803 789 878", "1 961 558 186 757 873 120 634 114 758 882 447", "1 403 510 899 535 722 386 812 206 810 818 648", "1 500 159 855 829 913 800 674 140 331 876 783", "1 685 560 207 661 586 566 529 19 478 476 917", "1 517 838 99 784 757 964 465 422 589 865 989", "1 840 623 371 219 455 600 691 19 538 358 500", "1 221 29 535 545 835 579 947 507 66 78 901", "1 604 690 338 730 870 17 734 517 492 174 431", "0 285 6 726 344 868 110 153 131 588 416 165", "1 581 902 259 825 492 147 989 153 68 899 432", "0 733 13 264 0 61 642 744 875 39 510 317", "0 994 20 210 859 649 932 533 30 73 115 175", "0 39 2 932 502 169 76 101 868 372 385 366", "0 702 14 527 527 745 552 68 25 676 981 188", "0 407 11 13 518 327 995 992 452 846 930 305", "1 909 786 18 910 958 156 963 577 790 658 581", "0 669 20 185 696 756 111 968 902 175 819 371", "1 683 228 11 114 709 610 535 566 87 696 941", "0 739 12 678 179 991 510 318 881 254 468 78", "0 25 7 394 577 85 948 437 467 981 929 129", "1 321 498 82 2 134 676 392 895 503 393 631", "0 476 23 366 675 424 335 517 782 856 984 203", "1 18 877 633 8 682 947 314 669 198 534 781", "0 538 3 519 451 837 514 303 103 83 377 61", "0 752 7 364 396 348 505 83 589 9 426 44", "1 655 825 379 751 26 365 916 244 428 794 679", "1 301 166 447 886 163 827 389 636 925 229 440", "0 333 22 749 444 159 75 138 704 198 620 107", "0 753 6 785 510 107 276 118 295 70 854 111", "0 474 19 175 702 79 376 665 99 121 763 351"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 11};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> data = {"0 8 9 7 0 4 2 2 0 7 5 5 0 0 8 5 2 8 6 6 0 7 2 4 7", "1 0 0 0 3 1 7 0 9 0 0 9 4 4 0 2 9 2 0 1 3 3 5 4 0", "0 0 9 5 0 2 4 9 3 3 5 7 2 0 7 7 8 7 3 6 0 8 9 3 6", "0 5 9 9 0 2 6 9 8 3 4 2 2 1 7 8 6 8 6 1 0 7 7 9 1", "0 0 9 3 0 0 2 0 7 4 2 2 1 1 4 5 0 2 4 6 0 6 0 4 6", "1 1 6 0 7 9 8 8 8 1 0 9 4 5 0 0 9 3 0 2 9 4 8 1 8", "0 7 9 4 0 4 6 1 8 5 4 0 1 0 4 4 2 8 6 6 0 9 6 2 3", "0 0 9 7 0 0 0 4 1 3 6 3 0 0 4 5 5 5 3 7 0 9 3 4 9", "1 5 8 0 4 3 9 6 8 0 3 9 3 6 1 1 9 4 0 9 8 1 5 3 1", "0 8 9 5 0 9 1 1 6 9 5 6 1 1 9 8 2 9 5 1 0 6 5 5 4", "0 0 9 2 0 3 4 8 1 4 3 4 1 1 5 6 7 6 1 2 0 8 2 8 6", "1 7 1 0 4 8 8 2 4 1 2 9 5 4 1 2 9 2 0 1 2 4 1 6 9", "0 1 9 2 0 0 2 3 7 8 9 4 1 1 4 4 5 1 4 3 0 7 5 4 3", "1 1 5 0 7 4 7 4 7 0 7 9 4 7 0 1 9 5 0 4 7 5 8 5 3", "0 2 9 5 0 6 6 6 9 4 5 3 1 0 6 8 8 2 2 6 0 8 5 1 3", "0 4 9 5 0 1 4 2 0 4 5 0 0 1 4 7 7 3 5 0 0 7 4 8 3", "1 6 8 0 6 1 9 7 8 0 8 9 7 7 1 2 9 7 0 0 4 4 5 6 0", "0 7 9 4 0 1 3 4 8 9 9 3 1 1 6 5 0 2 6 8 0 9 5 4 0", "0 6 9 4 0 8 5 8 6 3 5 4 1 1 9 6 7 0 2 7 0 6 9 1 3", "0 4 9 2 0 3 5 3 3 7 5 2 0 1 6 3 7 2 2 8 0 9 4 5 0", "1 7 2 0 9 6 9 5 1 1 9 9 8 2 0 1 9 7 0 2 1 5 9 5 2", "0 8 9 5 0 1 1 0 2 7 3 0 2 1 3 6 0 3 1 1 0 9 2 9 0", "1 1 4 0 2 9 9 6 0 0 8 9 7 2 0 1 9 3 0 4 4 4 7 3 9", "1 0 2 0 6 4 7 4 9 1 2 9 3 3 1 1 9 8 0 7 9 0 9 9 0", "0 6 9 1 0 5 4 3 9 2 2 7 2 0 7 4 3 0 5 9 0 8 0 9 3", "0 3 9 6 0 9 0 7 2 6 1 1 1 1 8 6 6 3 2 8 0 6 0 4 0", "0 5 9 7 0 1 3 1 4 2 1 5 0 1 2 6 1 5 9 3 0 8 8 8 4", "0 3 9 3 0 4 1 4 2 7 0 3 2 1 5 3 7 2 2 9 0 7 1 8 1", "0 4 9 3 0 8 4 1 7 9 6 4 0 0 7 9 0 2 8 2 0 7 9 9 1", "1 1 3 0 2 1 7 5 9 0 7 9 6 3 1 0 9 4 0 5 1 0 5 8 8", "1 3 6 0 6 5 9 4 1 1 9 9 7 2 0 1 9 8 0 6 4 5 1 8 3"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 18, 20, 21};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> data = {"1 503087045 1999494914", "1 2110565153 1814623019", "1 813226325 1309758858", "1 2077777705 1233817106", "0 469307415 229592411"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> data = {"0 66 82 79 55 1 25 13 93 52 42 73 13 78", "0 5 8 40 41 7 19 90 79 98 20 10 20 21", "1 43 18 20 96 96 59 56 55 35 80 36 96 49", "1 48 98 55 75 31 48 36 71 93 13 62 75 31", "1 7 47 49 84 4 1 22 72 46 61 12 84 22", "1 17 27 95 74 71 55 29 15 5 31 95 60 86", "1 96 17 31 66 87 4 68 43 27 68 53 46 40", "1 42 73 76 72 33 23 28 50 89 48 41 11 50", "0 50 5 90 46 63 1 48 81 89 50 47 95 34", "1 56 70 52 70 69 1 51 48 26 72 9 92 15", "1 76 23 28 77 50 35 72 14 51 27 20 80 15", "1 77 3 56 97 91 81 10 50 7 38 86 91 37", "1 85 53 7 88 38 69 30 61 14 92 32 25 47", "1 46 80 18 75 92 99 86 20 77 60 98 54 22", "0 59 20 98 34 65 82 12 74 43 64 0 30 22", "0 87 81 60 57 2 66 79 81 7 79 90 49 38", "1 85 21 94 66 94 65 26 29 12 30 70 82 85", "0 90 47 61 25 57 53 90 81 9 18 9 86 98", "1 55 73 87 82 5 93 57 64 63 2 91 51 36", "1 60 9 65 84 75 18 37 13 87 60 60 86 5", "0 59 14 36 5 69 0 92 87 93 18 36 62 1", "0 94 3 75 37 91 69 20 73 45 74 22 76 34", "0 82 60 85 41 98 37 36 93 45 2 16 10 4"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 8};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> data = {"1 1 7 9 4 3 0 0 7 0 0 7 4 0 9 1 5 3 2 6", "1 4 3 9 9 7 2 3 9 0 3 3 8 7 7 5 5 3 6 1", "0 1 2 1 0 0 7 7 3 6 9 5 1 3 1 5 7 8 8 0", "1 2 7 9 2 7 6 5 8 0 0 7 9 9 5 0 5 1 4 8", "1 1 0 9 7 7 0 4 1 0 4 4 7 2 3 2 1 4 5 5", "0 7 4 4 0 1 8 7 7 4 9 0 1 6 3 2 9 9 9 9", "0 6 7 2 0 0 8 9 5 9 5 6 0 7 7 4 7 8 9 9", "1 5 4 9 2 3 1 0 3 0 4 7 8 1 7 8 5 2 5 2", "1 6 4 9 3 3 0 1 9 0 2 2 9 4 1 6 4 1 7 1", "1 1 3 9 6 2 6 5 1 0 4 2 2 3 5 7 2 3 1 3", "1 9 1 9 5 4 0 4 6 0 0 6 7 6 3 2 4 1 6 1", "1 2 4 9 1 8 6 2 1 0 4 5 7 4 7 8 0 4 2 8", "1 4 0 9 5 7 2 0 3 0 2 0 2 9 9 6 5 7 3 7", "0 0 5 7 0 0 7 7 8 8 8 6 1 8 6 6 6 9 8 6", "0 6 6 2 0 1 8 9 5 2 6 3 1 3 8 6 9 9 9 4", "0 2 0 0 0 0 7 6 6 7 8 4 1 9 9 4 8 9 9 8", "1 0 1 9 1 3 6 4 5 0 2 3 9 8 4 3 3 0 3 4", "0 8 6 5 0 1 9 9 3 9 7 1 1 4 2 7 8 8 8 2", "0 0 2 6 0 1 7 6 2 6 5 0 0 0 5 0 7 8 9 6", "0 7 7 6 0 0 8 9 0 9 6 0 0 7 9 8 6 9 8 6", "1 3 4 9 8 3 2 3 5 0 0 1 9 4 5 3 0 7 3 3", "0 9 3 1 0 1 8 7 8 9 6 6 1 4 4 4 7 8 8 3", "1 6 6 9 5 6 0 1 5 0 0 2 3 0 9 2 4 1 3 5", "1 1 6 9 3 9 2 1 3 0 1 7 9 0 6 3 2 4 7 8", "1 6 9 9 9 7 0 3 1 0 1 3 3 5 9 6 1 6 1 7", "0 6 5 1 0 0 9 8 2 2 7 6 0 4 2 2 8 8 9 3", "0 2 9 4 0 0 9 9 1 3 6 6 0 7 1 5 8 9 8 4", "1 1 8 9 9 6 4 3 3 0 4 2 2 9 1 4 5 0 7 0", "1 0 9 9 4 9 5 0 9 0 1 8 6 9 7 9 4 4 0 8", "0 1 0 8 0 0 8 7 9 6 9 9 0 3 9 7 9 8 8 1", "0 4 7 1 0 1 9 6 7 7 9 2 0 6 6 5 7 8 9 1", "0 4 6 7 0 1 7 6 5 8 7 1 1 5 3 6 6 8 9 1", "0 3 3 0 0 0 9 7 6 5 7 2 0 9 8 4 8 8 8 0", "0 5 4 4 0 1 8 6 6 7 7 6 1 5 9 4 6 8 9 5", "0 2 8 6 0 1 8 6 3 2 7 8 1 5 9 0 8 9 9 9", "1 6 4 9 2 7 0 3 1 0 0 7 5 0 2 2 3 2 0 3", "0 1 9 1 0 0 7 8 8 8 5 3 1 2 3 1 8 9 8 0", "0 7 7 1 0 0 8 6 0 1 8 3 1 5 4 8 6 9 9 2", "0 4 2 6 0 0 8 7 6 6 8 8 1 0 3 8 8 9 8 9", "0 2 4 5 0 1 9 9 8 2 6 0 0 5 0 6 7 8 9 3", "0 3 2 0 0 1 9 6 7 8 7 5 0 3 0 2 7 9 9 3", "0 6 4 5 0 0 9 9 0 1 7 7 1 9 2 3 9 9 9 1", "1 0 6 9 5 4 0 4 0 0 1 5 2 5 6 3 3 2 6 4", "0 7 9 4 0 0 8 9 2 5 7 1 0 9 2 9 8 8 9 0", "1 2 4 9 7 2 5 0 6 0 2 9 8 2 0 3 5 3 1 9", "0 4 2 8 0 0 9 9 0 2 5 4 1 7 3 2 6 9 9 9"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 5, 6, 7, 9, 10, 12, 16, 17, 18};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> data = {"0 78 25 29 12 8 97 41 67 64 6 50 34 25 37 51 9", "0 64 89 51 91 6 88 59 23 97 17 58 61 37 60 37 3", "0 44 49 46 30 4 89 22 39 61 7 29 24 45 2 59 51", "1 2 77 94 73 97 68 75 14 26 25 31 9 6 58 68 95", "1 4 89 99 19 70 7 89 16 42 51 94 6 94 69 88 94", "1 8 6 96 81 84 60 99 20 53 52 63 12 90 53 68 97", "0 89 68 14 23 8 93 16 79 77 7 76 54 2 4 9 10", "0 57 36 38 4 5 96 22 54 96 5 43 39 10 44 9 60", "0 84 63 20 95 3 89 20 46 58 7 41 79 70 11 55 59", "1 8 12 96 96 75 45 72 17 8 63 57 2 61 21 75 98", "0 33 53 9 73 1 97 37 36 82 15 51 34 34 27 21 32"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3, 5, 6, 7, 8, 9, 10, 12, 15, 16};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> data = {"0 97 51 29 1 7 39 1 25 28 62 59 58 51 98", "1 34 42 95 99 68 97 60 80 93 82 6 6 64 34", "0 13 58 45 57 9 46 54 47 39 30 10 5 28 98", "0 8 48 58 6 51 38 89 38 45 87 27 56 48 99", "0 85 64 72 19 0 17 76 46 23 16 1 18 11 98", "1 11 41 97 89 12 92 13 52 79 35 16 25 59 6", "0 21 32 13 18 68 32 43 44 12 50 56 68 1 97", "0 53 20 63 33 8 1 89 44 52 34 46 21 5 98", "1 95 36 91 84 71 68 94 93 80 70 78 75 80 35", "0 54 44 34 40 95 0 97 43 40 15 65 29 34 99", "1 34 64 98 74 14 88 59 58 70 72 96 30 84 15", "0 75 45 20 50 98 34 3 29 32 39 44 18 21 96", "1 48 99 92 90 24 76 59 95 98 51 91 94 59 40", "1 18 74 98 75 39 71 23 96 81 87 92 39 82 38", "0 55 49 10 20 49 18 99 21 41 85 33 90 21 96", "0 30 93 29 22 47 16 21 41 36 20 25 54 11 96", "1 53 60 92 84 53 96 44 53 84 79 67 12 84 89", "0 99 54 6 28 50 31 28 46 51 5 10 9 32 99", "1 66 39 96 95 33 87 74 50 75 20 31 77 65 67", "0 68 68 54 31 14 25 45 44 46 39 0 49 36 99", "1 19 14 94 70 7 92 46 74 67 51 51 46 79 10", "1 50 16 93 74 40 72 71 62 94 9 16 50 89 35"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 4, 6, 8, 9, 13, 14};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> data = {"1 6 6 8 3 0 5 0 5 5 2 2 6 0 0 5 1 3 0", "1 8 2 8 3 9 8 0 6 8 2 4 0 9 8 9 8 2 7", "0 0 9 3 0 0 6 9 7 7 8 5 4 4 8 1 7 8 6", "0 8 3 0 7 8 1 5 1 1 9 3 0 4 9 0 0 3 0", "1 1 3 9 8 6 3 0 4 6 5 8 7 7 3 8 6 6 1", "0 3 2 3 0 8 8 8 5 4 8 5 0 3 7 0 4 7 3", "1 7 0 9 3 4 6 0 7 3 1 7 2 1 4 3 8 2 0", "1 1 2 9 1 8 2 0 2 2 0 7 9 6 5 7 1 8 3", "0 0 5 4 2 8 8 5 8 1 8 2 5 4 4 0 9 8 3", "1 2 0 8 1 2 7 0 8 2 2 4 8 1 8 5 2 1 1", "1 3 8 9 6 3 6 0 4 9 4 0 1 3 1 6 2 1 4", "1 1 0 8 2 7 7 0 6 7 6 8 3 0 0 6 5 3 4", "1 2 6 7 4 4 7 0 1 6 4 6 4 2 9 8 1 5 2", "0 2 4 2 5 7 1 5 8 3 7 9 7 3 4 1 3 7 1", "0 4 9 4 3 9 7 2 7 8 8 4 6 8 3 1 7 4 1", "0 8 8 1 3 2 7 8 7 4 9 2 4 3 7 0 6 0 9", "1 2 3 7 3 8 3 0 5 9 0 3 1 8 9 7 0 6 5", "1 4 5 7 3 7 0 0 7 5 6 7 8 1 2 2 1 8 5", "0 5 5 3 5 9 4 5 7 5 9 2 6 8 7 1 6 6 2", "1 4 7 9 1 3 1 0 0 8 3 5 6 5 5 9 7 4 4", "1 0 0 9 3 7 0 0 3 0 6 3 9 5 2 5 9 5 4", "0 4 1 3 6 8 1 8 2 1 8 7 0 2 7 1 8 7 7", "0 0 0 0 1 6 9 2 3 0 7 1 8 3 5 0 0 0 7", "0 2 2 3 1 1 0 7 5 7 7 2 5 5 9 1 2 6 4", "0 0 4 3 3 7 0 3 7 2 9 9 4 9 1 0 2 9 4"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 7, 10, 15};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> data = {"1 4 9 6 9 4 0 9 4 4 7 0 4 0 0 1 9 6 5 0 4", "1 4 9 2 4 4 0 9 4 8 5 7 0 1 3 3 6 8 5 0 7", "1 7 9 2 4 4 0 9 2 3 6 7 0 0 6 9 6 4 6 0 2", "0 0 2 8 3 8 4 8 9 2 2 9 9 5 6 6 2 1 0 4 0", "1 7 9 1 5 4 0 9 3 0 3 9 3 1 6 0 9 3 4 0 2", "0 3 3 3 2 8 6 0 9 8 1 3 9 4 5 5 2 0 2 5 1", "1 8 9 6 9 5 0 9 1 0 5 2 0 0 9 1 9 6 5 0 3", "0 3 8 4 1 9 2 0 9 9 9 6 9 2 1 7 1 0 1 1 1", "1 5 9 2 6 3 0 9 7 4 8 8 8 1 8 9 5 3 5 0 2", "1 6 9 6 7 0 0 9 3 9 7 3 3 0 7 1 5 7 6 0 8", "1 8 9 7 8 4 0 9 5 6 8 9 2 0 3 9 9 8 7 0 6", "1 8 9 1 6 0 0 9 6 7 0 9 7 1 3 5 9 6 8 0 5", "1 6 9 1 5 0 0 9 1 2 5 0 0 1 6 0 8 7 6 0 8", "1 4 9 2 7 0 0 9 2 0 6 6 3 0 6 4 9 7 9 0 5", "0 1 2 9 1 8 7 2 8 6 5 1 9 5 0 7 2 1 0 5 0", "1 6 9 7 4 3 0 9 2 7 2 1 4 0 3 9 7 3 7 0 2", "0 3 4 0 0 8 4 3 9 1 8 6 9 4 4 9 1 1 1 5 1", "1 4 9 1 6 2 0 9 6 2 1 6 5 1 8 3 9 7 3 0 2", "0 2 1 5 3 8 2 2 8 3 9 2 9 7 8 5 1 2 0 4 1", "1 7 9 1 8 4 0 9 5 3 9 1 2 0 9 5 6 8 6 0 6", "1 5 9 4 5 5 0 9 3 0 2 2 5 0 7 0 5 7 7 0 4", "0 3 3 5 1 9 2 6 8 9 1 7 9 3 2 1 2 1 0 6 0", "1 6 9 3 5 2 0 9 7 8 4 6 2 0 6 7 9 4 6 0 6", "0 1 8 8 3 7 7 4 9 5 5 3 9 8 8 3 1 2 2 9 0", "1 8 9 9 6 2 0 9 0 9 3 3 2 1 6 5 6 4 3 0 9", "0 1 5 0 2 9 1 5 8 1 0 4 9 9 1 0 3 0 2 2 1", "1 9 9 9 8 0 0 9 7 4 4 4 4 1 6 2 9 3 7 0 5", "1 7 9 5 8 1 0 9 2 6 9 5 3 1 6 5 6 7 9 0 9", "1 5 9 7 5 1 0 9 7 1 1 4 1 1 2 3 4 4 6 0 9", "0 3 1 5 1 9 7 1 8 8 0 4 9 3 3 8 0 0 1 7 0", "1 9 9 6 6 5 0 9 7 1 7 4 6 1 2 7 9 5 3 0 5", "1 8 9 8 7 4 0 9 7 0 8 0 5 0 7 5 9 5 5 0 7", "0 0 7 6 1 6 7 1 9 0 0 0 9 8 1 1 1 0 0 3 1", "0 3 3 7 2 8 3 5 8 5 2 1 9 6 0 9 1 1 2 9 0", "0 3 3 0 1 7 8 7 8 0 7 6 9 6 7 8 1 1 2 3 1", "1 6 9 8 8 5 0 9 3 3 4 7 5 1 1 0 4 5 8 0 3", "0 2 7 4 2 8 7 2 9 8 7 3 9 6 9 0 0 0 1 6 0", "0 3 1 4 2 6 4 5 8 7 1 2 9 9 8 2 1 1 0 3 0", "1 5 9 4 6 3 0 9 0 9 9 7 3 0 2 2 9 3 8 0 8", "0 1 6 5 0 6 2 6 9 5 8 1 9 7 9 7 1 1 1 3 1", "0 2 1 9 1 6 3 1 9 0 5 3 9 8 5 8 2 1 2 5 1", "1 7 9 3 7 4 0 9 7 1 3 9 6 1 8 5 5 3 6 0 4", "1 5 9 5 8 1 0 9 6 2 6 4 5 0 1 6 6 4 4 0 4", "1 5 9 8 5 0 0 9 3 9 2 5 8 0 1 7 4 3 5 0 5", "1 8 9 3 7 4 0 9 3 1 1 9 3 0 5 2 7 9 7 0 7"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 4, 5, 6, 7, 8, 12, 13, 16, 17, 18, 19, 20};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> data = {"0 21570 73404 33791 47350 18657 29500 85626 89796", "0 3248 17009 81253 64126 85418 82126 68116 21227", "1 40317 51445 21521 31813 67741 81574 56022 75042", "1 87414 96853 78399 23981 998 4036 49123 38116", "0 17787 25310 74735 84969 24515 54953 68120 39604", "0 16010 53977 63281 40564 9747 72535 69726 14088", "1 64678 60157 48994 30420 80000 46886 55799 25919", "1 40266 57898 15568 23789 7379 55184 37202 37796", "0 10436 38135 97040 71607 7699 31988 62914 19125", "0 1391 9349 86922 41952 5749 17655 72799 69849", "1 89342 57585 18295 34515 36928 92258 12460 37930", "0 22214 83840 23629 86102 37801 76940 65579 9674", "1 51177 2400 81084 29118 85989 16751 16330 4684", "1 82529 44124 76181 1445 61788 33448 39347 88035", "1 31273 81105 37002 8810 28841 79657 23815 87766", "1 43138 10545 48316 16489 94802 32821 42569 67155", "0 16171 48152 23074 75914 89544 60254 92671 10948", "1 91012 60746 70362 28664 54364 57272 45414 54932", "0 2618 68519 23657 55993 98897 80323 90380 69121", "0 8622 55843 93443 58676 22086 75161 84347 46204", "1 29014 55481 10332 28909 3289 54466 5767 30770", "1 97877 55095 93766 15464 23172 87277 30103 52740", "0 10293 44515 92042 55747 84186 71624 67315 99507", "0 24153 75285 37292 64492 12167 90321 79093 55623", "0 2865 91451 48496 61629 97908 32751 80528 47026", "0 22688 95474 47056 78647 29975 95808 59794 66635", "0 18400 33698 66275 55716 70838 47147 80976 24758", "0 18014 59724 25517 79474 81409 28344 76722 32", "0 11463 44704 52571 85802 1964 77076 98285 34907", "0 10652 33106 40824 83627 10668 44268 80795 54896", "1 39161 46824 96766 15715 61074 88954 24861 26438", "0 14858 56310 17742 99835 28886 97077 61516 12730", "1 67697 90240 48872 25742 81989 63332 53569 25325", "0 12740 7538 89168 99463 32245 67522 96592 86387", "0 23603 88973 62687 43393 78639 94336 72282 82032", "1 76896 65113 20690 5854 66409 90019 52290 42730", "0 9680 77375 51109 44891 59611 93088 92194 82603", "1 27579 27386 99723 3376 92031 71240 6561 149", "0 20967 79871 52977 94239 88769 84877 87823 2411", "0 19071 42542 33322 71438 99082 68197 94818 67934", "1 33023 39619 42817 15783 52189 61776 30977 83206", "1 56321 365 53851 19614 15975 76975 28682 68577", "1 77404 3873 56721 1772 50060 85019 4060 80309", "0 5585 5829 41082 88244 2640 6126 89568 983", "0 245 90865 99627 44739 44327 44822 73828 50140", "0 15915 78512 61874 52145 7565 76764 69060 60155", "0 22750 47481 11604 64641 82509 19686 68479 3856", "1 59625 81711 10416 10499 47311 87973 48472 82830", "0 18854 29974 66850 70564 49054 73920 89157 34276", "1 29629 17399 16737 25662 71751 42523 27414 17100"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 4, 7};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> data = {"0 441 832 232 906 265 113 777 254 346 4 322", "1 498 395 933 133 951 427 169 96 115 288 206", "0 363 596 392 888 325 811 835 699 487 29 499", "0 757 861 755 975 550 644 825 569 897 21 849", "0 236 995 786 799 227 149 861 299 666 33 304", "0 401 979 776 902 90 596 813 845 550 20 660", "1 777 210 933 52 160 979 389 105 313 199 326", "0 786 952 167 854 603 168 787 398 642 23 82", "0 541 904 702 938 523 430 775 792 395 30 411", "1 926 221 896 546 987 531 39 107 111 288 90", "0 643 648 856 904 755 182 938 877 910 25 888", "0 770 928 583 782 757 12 940 786 741 7 357", "1 337 99 907 435 627 919 587 132 197 368 737", "1 849 130 977 273 772 624 616 4 221 613 286", "1 841 421 915 516 348 342 525 81 152 915 729", "1 790 159 909 520 420 656 504 6 284 830 423", "0 820 793 862 824 466 99 654 270 522 32 714", "1 799 298 914 725 528 703 375 46 208 476 670", "1 679 145 944 306 747 665 466 117 38 413 494", "1 982 283 987 203 802 36 350 32 199 571 87"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 3, 4, 7, 8, 9, 10};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> data = {"0 819807630", "1 1475404011", "0 335853389", "1 689147919", "1 947731830", "0 1740495564", "0 977537870", "0 1308275700", "1 1199356322", "1 1069487652", "1 1477202528", "0 12189626", "0 1377000494", "0 1431960764", "0 251545308", "1 190063866", "1 1448557032", "1 1900235776", "0 1554650122", "1 880895178", "1 748910446", "1 377534004", "1 896896081", "1 1791267874"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> data = {"0 2 3 7 6 3 3 6 1 0 9 7 4 0 7 3 6 8 7 4 0", "0 0 4 7 8 7 5 6 0 1 2 9 4 2 3 7 4 9 8 1 1", "0 2 8 3 9 0 5 5 6 0 7 6 4 2 7 5 4 9 1 1 2", "1 7 1 3 3 5 6 0 7 6 8 0 0 8 1 8 2 5 7 7 9", "1 6 1 5 0 3 1 4 6 6 7 0 0 8 7 4 0 5 2 8 8", "1 6 1 6 2 7 8 3 4 6 2 2 0 3 3 4 0 2 3 8 7", "0 3 6 4 5 0 1 1 3 0 8 8 5 2 1 2 4 9 9 5 3", "1 7 0 9 0 2 3 1 7 7 7 0 0 7 2 6 2 3 6 9 7", "0 1 9 2 6 3 6 8 7 0 4 6 9 2 8 6 3 7 5 6 4", "0 3 3 0 5 2 7 8 8 0 6 5 3 0 6 8 5 8 2 3 2", "1 7 0 8 3 7 0 8 7 7 4 1 0 9 9 3 1 6 0 8 9", "0 0 8 7 6 8 8 5 4 0 9 9 4 2 6 6 9 7 6 2 2", "1 6 1 4 4 2 5 3 2 6 4 0 0 9 8 7 1 2 9 9 7", "1 8 1 5 1 4 8 6 0 8 2 0 0 8 1 4 2 1 6 7 7", "1 4 0 2 2 2 9 5 7 7 2 1 0 9 4 1 2 5 3 9 8", "1 6 0 7 3 6 4 9 5 8 9 2 0 9 4 9 0 2 7 7 7", "0 2 7 0 8 0 3 6 4 1 2 6 7 0 9 6 9 8 3 6 2", "1 9 1 7 3 8 6 2 3 6 2 0 0 6 7 0 1 5 4 7 9", "0 0 8 3 7 7 9 6 6 1 4 6 1 2 0 4 4 9 4 4 6", "1 6 0 1 4 2 0 0 0 8 5 0 0 6 7 7 0 6 0 9 8", "0 0 3 5 8 8 7 3 6 1 7 4 6 0 7 2 6 8 7 3 5", "0 1 8 4 5 9 8 2 9 1 6 7 9 1 4 5 4 8 1 3 3", "0 3 7 0 7 7 2 1 8 0 8 8 9 2 4 4 5 9 2 5 6", "1 7 1 8 3 9 8 8 1 7 2 3 0 5 0 8 2 4 5 7 7", "1 5 0 8 1 5 3 6 9 3 2 2 0 3 8 3 2 2 8 8 7", "0 2 4 6 7 0 1 0 8 0 0 6 5 2 0 0 7 9 9 3 1", "1 4 1 7 4 6 4 4 3 8 2 2 0 3 2 8 1 5 6 8 8", "0 0 6 4 7 8 1 9 1 1 2 5 8 2 1 5 8 7 6 4 6", "1 4 1 7 1 4 3 0 7 5 5 3 0 9 4 1 1 2 4 7 9", "0 3 4 3 8 1 6 3 3 0 8 4 1 0 0 1 8 8 2 3 6", "1 5 1 4 3 0 0 6 2 8 2 1 0 4 8 4 2 6 0 9 9", "0 2 9 4 5 6 6 0 2 0 4 6 8 0 5 1 4 7 8 5 2", "1 7 0 1 2 0 3 5 6 3 0 0 0 3 3 6 0 3 0 7 9", "0 2 3 7 6 4 5 5 6 1 8 5 5 0 2 6 3 8 5 4 6", "1 5 0 1 3 3 6 7 5 6 9 3 0 5 8 6 0 6 0 7 8", "1 7 0 3 2 2 2 6 3 4 7 2 0 3 0 7 0 4 5 7 9", "1 6 1 9 0 5 4 5 3 3 5 3 0 6 1 4 1 3 2 7 7", "0 2 2 1 7 8 1 0 6 1 1 8 3 0 2 0 6 8 4 1 6", "1 6 1 5 4 2 2 7 2 2 9 2 0 3 1 9 2 3 7 8 9", "1 8 1 1 4 4 6 6 1 5 9 1 0 3 3 7 0 5 4 9 9", "1 4 1 8 1 1 6 1 7 5 8 2 0 8 9 9 2 4 5 9 8", "1 9 0 6 3 0 4 2 6 8 2 3 0 3 7 2 1 6 9 7 8", "1 4 0 1 3 7 7 6 6 7 7 3 0 9 6 7 1 0 0 8 7", "1 9 0 9 0 8 7 1 0 7 2 3 0 6 4 1 0 4 0 9 7", "1 7 1 9 4 7 3 8 4 5 3 2 0 5 7 1 1 5 1 8 8", "0 2 2 7 5 9 5 0 8 0 9 9 1 2 7 1 4 7 6 6 4", "1 8 0 7 3 4 9 6 3 4 4 3 0 5 9 7 2 6 9 7 9", "0 0 4 7 8 5 1 7 5 1 4 6 8 0 2 7 7 8 3 0 5", "1 5 0 8 3 5 7 6 1 3 6 1 0 9 9 0 1 2 0 9 8", "1 9 1 8 0 6 3 1 5 8 3 0 0 5 8 9 0 3 9 9 8"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2, 4, 9, 11, 12, 13, 16, 17, 19, 20};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> data = {"0 1944914038 1696137778 1525367830", "0 1547932733 1185820653 1500052399", "0 230149443 1358715189 501418065", "0 1676118083 1499656529 2103271593", "0 1441540020 1189300515 1544659186"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> data = {"0 2 1", "1 1 2"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> data = {"0 10 20 20 0", "1 20 30 17 98765", "0 10 30 29 1234567", "1 20 40 10 42"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> data = {"1 10 20 20 0", "1 20 30 17 98765", "1 10 30 29 1234567", "1 20 40 10 42"};
    ExperimentalAnalyzer* pObj = new ExperimentalAnalyzer();
    clock_t start = clock();
    vector<int> result = pObj->getPredictors(data);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=10420698&rd=6515&pm=3493
********************************************************************************
#line 114 "ExperimentalAnalyzer.cpp" 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <cstdio> 
#include <cstdlib> 
#include <cctype> 
#include <cmath> 
#include <iostream> 
#include <sstream> 
#include <utility> 
#include <map> 
using namespace std; 
typedef vector<int> VI;  typedef vector<vector<int> > VVI; 
typedef vector<string> VS;  typedef vector<vector<string> > VVS; 
typedef signed long long LL;   
 
#define REP(i,n) for(int _n=n, i=0;i<_n;++i) 
#define BE(a) a.begin(), a.end() 
#define PB push_back 
 
//--<contains tokenize tokint tokmat 
template<class A,class B> inline bool contains(const A&a, const B&b) { 
    return find(a.begin(),a.end(),b)!=a.end(); 
} 
//--> 
//--<tokenize tokint tokmat 
vector<string> tokenize(string s,string del=" ") { 
  s+=del[0]; 
  string w; 
  vector<string> res; 
  for (string::iterator it=s.begin(); it!=s.end(); it++) { 
    if(!contains(del,*it)) w+=*it; 
    else if(w!="") { res.push_back(w); w=""; } 
  } 
  return res; 
} 
//--> 
//--<tokint tokmat 
vector<int> tokint(string s, string ch=" ") { 
  vector<int> ret; 
  vector<string> p = tokenize(s, ch); 
  for( int i = 0; i < p.size(); i++ ) 
    ret.push_back( atoi(p[i].c_str()) ); 
  return ret; 
} 
//--> 
//--<tokmat 
vector<vector<int> > tokmat(vector<string> s, string ch=" ") { 
  vector<vector<int> > ret; 
  for(vector<string>::iterator it = s.begin(); it != s.end(); ++it) { 
    ret.push_back(tokint(*it,ch)); 
  }; 
  return ret; 
} 
//--> 
// BEGIN CODE: 
class ExperimentalAnalyzer { 
  public: 
  vector <int> getPredictors(vector <string> data) { 
        VI ret; 
    VVI mat = tokmat(data); 
        cout << "Here" << endl; 
        REP(j,mat[0].size()) { 
            if (j==0) continue; 
            VI one,two; 
            REP(i,mat.size()) { 
                if (mat[i][0] == 0) one.PB(mat[i][j]); 
                else two.PB(mat[i][j]); 
            }; 
            if (one.size() == 0 || two.size() == 0) { 
            } else { 
                sort(BE(one));            sort(BE(two)); 
                if (one[one.size()-1] < two[0] || one[0] > two[two.size()-1]) { 
                    ret.PB(j); 
                }; 
            }; 
        }; 
        return ret; 
  } 
   
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/