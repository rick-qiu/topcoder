/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10505
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class SoccerLeagues {
public:
    vector<int> points(vector<string> matches);
};

vector<int> SoccerLeagues::points(vector<string> matches) {
    vector<int> ret;
    return ret;
}


int test0() {
    vector<string> matches = {"-WW", "W-W", "WW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 6, 6};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> matches = {"-DD", "L-L", "WD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 2, 8};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> matches = {"-DWWD", "L-WLL", "DD-WD", "DDL-L", "DDLL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14, 7, 12, 8, 10};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> matches = {"-LWWLWDLDWWWWWWDDWDW", "D-WWLDDWDWDLWDDWLWDD", "LL-DLDWDLDLDWWWLWDDW", "LDD-LLLDLWLWWWWDWDWL", "LWWW-DWDLWDWDWWWDWDW", "DLLWD-WWLLDDDLWWDWWW", "WWLWDL-LLDWWWWWDWWLW", "LLLLLDW-LDLWDDLLLDWL", "DWWWWDDD-DWWWWDWWWDW", "WWWWLLLWL-LWWWWWLWWW", "DWWWWWWWLW-WDWWWWWWW", "DDDLLLDWWWL-DDWDWLDD", "LWLWLDLLLDLW-DDDWWDD", "LLWWLWDDLWLWL-WWWDLL", "WWWWLLDDDWLWDD-WWWLW", "DLDLLLWWLLLWWLW-DWLL", "DLWWWLDLWWDWWDWL-WWD", "LLDDLLWLLWLWLDLWW-WW", "LLWLLLWWLWLWWDWWLD-W", "LLWDLWDWDWLLWWDDWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {72, 62, 41, 41, 83, 63, 53, 35, 86, 50, 90, 32, 34, 41, 45, 36, 51, 32, 51, 45};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> matches = {"-D", "D-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 2};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> matches = {"-L", "W-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 6};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> matches = {"-W", "W-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 3};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> matches = {"-DDLWL", "D-LLDL", "WD-WWW", "DLD-LL", "DWLD-L", "DLWDW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {9, 10, 21, 10, 9, 20};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> matches = {"-LWLWL", "W-WLWW", "WW-LDL", "DWW-WL", "LDWW-L", "WWWDL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {10, 16, 7, 20, 11, 22};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> matches = {"-DDLWLD", "L-LDLWD", "WW-WDLD", "LLD-WLD", "LDLW-DW", "WWDLW-W", "LLLWLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {18, 13, 23, 12, 15, 23, 10};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> matches = {"-DWDLWDW", "W-DLWWWL", "DL-LLDWD", "DWD-LDLD", "WDLD-DDL", "LWDLD-LD", "WWWWWD-W", "WLLWDDL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {17, 21, 15, 18, 18, 11, 30, 17};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> matches = {"-DWDWDLD", "L-LWDDLD", "LW-DWLLW", "DDD-WWLW", "WLWW-DLL", "LLWWD-DD", "WWLWDL-D", "WDWWLDL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {20, 15, 17, 14, 16, 19, 30, 18};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> matches = {"-LLLLLDWD", "L-LLDLDLL", "DD-DDWWDW", "LWL-WWWWD", "WLWL-LLWL", "DDDDL-DLD", "WWDDLL-LW", "DWLWWDD-D", "LLLWWWDW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {17, 13, 31, 28, 20, 19, 19, 23, 23};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> matches = {"-WWLLWDDDW", "W-DWWDWDDW", "WW-DWDLLLW", "LWL-LWLLDL", "WWDD-LLLLD", "LDLLD-WLWW", "WDWDLL-DWD", "WLLDDDD-DD", "DDDWWDLD-L", "WWDLLDDDD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {22, 25, 27, 20, 23, 22, 28, 26, 22, 20};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> matches = {"-WDWDDLLDLLDWW", "L-LWWDLWLWLWLL", "LL-DDWLDWLWDWW", "DDD-LDWDDWDLWL", "WDLL-WDLWWDWLW", "WLDWL-WLDDWLWW", "DLLDWL-LDLDWWD", "DLDLWWW-LLWDWW", "LDWWDDDW-LLWWW", "WWWLDDWWL-WLWD", "LLDWLDLWWD-LWW", "WWDWLDWLDLW-WW", "WDLDDWWLWWDW-L", "WWWWDDWWWLWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {32, 35, 37, 28, 39, 32, 28, 41, 36, 47, 31, 39, 31, 40};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> matches = {"-LWLLLLLLLLDLL", "W-WLLWWWWWWWWW", "LL-LLLLLLLLLLL", "WWW-DWWWWWWWWW", "WWWD-WWWWWWWWW", "WLWLL-WLWLLWWL", "WLWLLL-LWLLWWL", "WLWLLWW-WWLWWW", "WLWLLLLL-LLWWL", "WLWLLWWLW-LWWD", "WLWLLWWWWW-WWW", "DLWLLLLLLLL-LL", "WLWLLLLLLLLW-L", "WLWLLWWLWDLWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {8, 66, 0, 74, 74, 36, 30, 54, 24, 44, 60, 8, 18, 44};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> matches = {"-DLDLLLDWDWWDLW", "L-WDWDLWWWWDLWL", "WW-LLWLWDDLWLDD", "DDW-LWLWDDLWDWW", "WDDL-WLDLLLWWWW", "LLDLD-DWLLLLLLD", "WWDDWW-WWWWWWWL", "WLLDLLL-WLLWWDW", "WDDWWWLW-LWWWDD", "DDLDLDLWL-LDDLW", "WLWDLWDWDW-LLLD", "LLDLLLDLDLL-LDW", "DWWDDWLLLDDD-DW", "WLLWDWWLLWDWL-W", "DLLLLWLLLLDLLL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {30, 47, 39, 45, 48, 18, 68, 31, 50, 34, 43, 19, 43, 43, 15};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> matches = {"-DLWDDDLWLLWLLLWLDLLDWWLD", "D-WWDWLWWLLLLDLWWDLLDLLLL", "LL-LDWDWWLLLWDWDDWDLLLDLL", "LLD-WLLDWLLLLWWLLLDLLLWLW", "LWWD-LDDWWWWDWLDLDWLLDWDW", "DDDLL-LDDWDDWLLWWDLLLDWDD", "DDDWLW-LWWWWWWWDLLDLLWWDW", "WDWWDDW-WWDLWWDWLWWWDDLDL", "LWWDLLLD-WDWWDLDDLWLWLWLL", "LWWWLLLDW-LLWDLLDDDWWLDLW", "WWLWLWLWWW-DWWDLDDWLDLLWD", "WDWWLLDLWDL-DLWDWDDLLWWDW", "LDLWDWWLWWDL-LLDLLDLLLWLL", "WLWWDDLLWWLDD-WDLDLLDWDLL", "DLLDWWDDWWWWDW-WLWDLLDDWW", "LWDWWWDLWDLLWLD-LDDDWLDLL", "DLWDLWDWWDLDWLWW-DDDWLWDD", "LWDLLWWWDWLWLWLWD-DDDWWLW", "WLLLLWDWDLLDWLLLLL-LLDLLL", "DDDWDWDWLWLLDDWDWLD-WWWWW", "LWWWDDWWLWWWDWWLDDWL-WWDW", "DLLWWWLLDDLWDLLWDWLLL-WWD", "LLDLWDDWWWLLLLLWWWDLWL-DW", "LDDDLDWLDDDWDLLLDWWDLWL-D", "LWWDDDLLWWLLDWLWWLDLLDWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {68, 58, 51, 42, 77, 48, 79, 77, 41, 50, 89, 70, 47, 64, 83, 55, 75, 71, 44, 100, 90, 66, 52, 70, 60};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> matches = {"-LLWWLLLLDWWLDLWDDLWLWDWWW", "D-DWWDDWLWDWWDDWWLLLWWLDWD", "LL-WLLLWLLLWWLLWDLLLLLLLLD", "LLW-DLDLLWWLWLWDWLLDWDDWDD", "LLWL-LLWLWWLWWDLLWWLLWLDWD", "WLDDW-WLWWWDWWLWDWDLLWWDDW", "WWWLWL-LLWLLDLLLLLLDLDDLLW", "WWDWWWW-LDDDWWWWWLWDWDLWDD", "WLWDDWDL-DLWDWLDDLWDLWWWDL", "LLLDWLDLL-WLLWWLWLLWLLLWWW", "LLDLLDWLWW-LDWWLLWLLDWWLDD", "WLLLDWWDLWL-LDDDWLLLWLWWWW", "DLWDLWWLDLDD-DDDLDLLLWWWDL", "LLWWDDDDLWLLD-LLWLDDDDWLWW", "DLWLLDLLLWWLLD-LLLWDLWWLDD", "WLDDDWWLLDLWWWW-DWDLDDDLWW", "DDDLWLLLLWDLDWWD-DLWLWWWLL", "WWWWLLDDWDWWDLWWW-WWLLLWDD", "WWWLWLLWWWWWWWDWLL-WLLWLDD", "LLLLWLDLWDDLWWWLDWL-LLLDDL", "DDLWWDLDDWLLDDWWWWWW-LWLLL", "LDWLLDLLDWLLLLWLLLLLL-DLDD", "LWLWLLLDDWWDWWWLDLLLDW-WLW", "WDWWWLWWLLWWWWLLLWLLLDW-LW", "LLWDWLLLWWWLWDDDLLWDWWWW-L", "LLWDDLLDLLLLLLLLLWWLWLDLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {73, 94, 41, 66, 60, 94, 62, 98, 85, 47, 62, 78, 53, 55, 54, 78, 68, 90, 90, 67, 86, 45, 62, 75, 67, 47};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> matches = {"-LDWDLWDWWLLLWLLLLLLWLLWLD", "W-WWLLDLWWLWLWWWLLLWWWWWLW", "WW-WWDLWWWDLLWLWLDWLWWWWLW", "WWD-WLLDDLLWLLWWWDDWWWDDWD", "DDDD-WLWWLDWLLWLLWLLWWWDDW", "WLDWW-WDWWLWLWLDLLLWLWWLLL", "LWLWWL-DWWDLWLWLLLDWWWWWWD", "DWWLWWL-WWDWWWDWWLWWWWLWLW", "DLDWLDLW-WDWLLWWLLWDLLDLDW", "LLLWDDDLL-LLLLDLLLDLDLLLWL", "WWWLWWWWWL-WDWWWLLDWWWWWLL", "WWLLLLDLLLD-LLDWLLLLDWLDDD", "WWDWLLWLWWDL-WWWWWLWWDWLLL", "DDLLWLWDDLDDD-LWLLWWDWWLDL", "LDLLWLWLWWDWLW-WDLDLWWWDLL", "LLWLWLLLLDDLWLD-LDLDWDLDLL", "WWWWWWWLDWLLWWLW-WLWLWWWDW", "WDWWWWWDWWDLWWWWD-LWDDLWWL", "DWWWLWWLLWWWLWDWLW-WDWWLWW", "WDLLWLDLLLWLDWWWLLL-WWWLLD", "LLWWLLLLDWDDLDWWLLLL-WWLDL", "DDDLLWDDLWLWWWWDLWLLD-LLDL", "DLWLWWLDDLDWLLLDDWWLLW-WLL", "LWWLDWDLLWDWDWDLDLLLLLW-DL", "WWLWWDWLWLLWDWWWLWLWWWWL-W", "WWWWLLWLWWLWDWWLWLLWWDWWD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {50, 73, 76, 72, 64, 76, 73, 101, 57, 37, 94, 48, 90, 55, 59, 40, 108, 99, 101, 63, 47, 45, 53, 63, 92, 89};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> matches = {"-LLLWWLDLLLWWDWWLLWWLLWLDWLLLWW", "W-WWLWWWDWWDWDLWWWWWLLWWLWWLWWW", "DD-DLWDLWLLLLWLDLLLWDLWLLLLLLLL", "LDL-LDDLWDDWLWLLDDLDWLWLDDLDLWD", "WLWL-WLDLLLWLLWLWWWWDLLWWDWWWWL", "LDLWD-LLLWWWWLLDDLLWWLWLLWWWWLL", "LWLLLW-DLLDWDDWLLWDWLLWLLDWWLLD", "WLWWLWW-LWLWLWWLLWWWWLLWDWWWWWL", "WLWWWWWW-LWLWLWLWWWWLLWWWLWLWWL", "WDWWLWLLL-DWDDWLWLWWDDWWLWWLDWW", "WWWWWLDWDW-DWLWLWWWLWDWLLWWWLLW", "WLLWWLDLLDL-DWDLLLWLWLWDLLDDDLW", "WLLWWLDLLLDD-WWDLLDLLWWLLWDDDLL", "LWWWLWLWWWWLW-WWWWWWDWLWLLWLWWL", "WDWLLWDLDLWLDL-DDLDWLLLLLDLWLLW", "WLWDDWWWLDLWLWW-LLWLLDWLLDLDDWW", "LLWWWWWDLLDLWDLD-DLWDLDDDWWWLWW", "DDLWDWWDDLLWWDDDD-WWDDWLWLDWLWW", "LDWWWDWLLLDLWDWLDW-WLLLLDLWLLWL", "WLWLWDLWLLDLWDWLLWL-LLLDLLWDDLW", "WWWWWWWWWWLWWLWDWWWW-WWLWWLWWWW", "LLWWWWWWWWWWWLWWWWWDW-LWWWWDWDW", "LLDWLDWLLLLLDDDLDWLWLL-LLDDDWLL", "DWLLWLWDWWLWWLWWLDWLDDW-WLLDDWW", "LDLLWWLLWDLWDWWLLWWLWLLL-WWLDWD", "DDLLLLLLWDLLDLWWDLLWWLWDD-DLLLL", "LDWWLLDDDLLWWLWWWWDDDLWWLW-LLWW", "DWLWLWLLLWWWWLWWWWWWLLLWWWW-WWL", "WDDWWWWDLWDWWWWDLWWLLDDLWWWL-WW", "DWWWWLDDLLDDDLLDLLWLLLLDLWDDW-L", "LLWWLDDLDLDDDDLDLDLWDLWWDLLLLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {78, 113, 56, 56, 90, 66, 70, 106, 114, 102, 107, 64, 56, 107, 53, 89, 91, 82, 64, 60, 124, 141, 56, 99, 93, 59, 76, 103, 101, 62, 68};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> matches = {"-LWLWDDDWWWWLWLLWWLWDWLLLDLDWLLLWL", "D-LDLDWDWLLLWLDDLWDWWLLLLLDWWDLDLL", "LL-LLWWDDWWLLWDLLDLDWWLLDLLLWDWDWD", "WDL-DWWWLWDDLWDLLDLDDDDWWLLLWDLLDD", "LWDL-LWLWWWWWWWLWLWWWWWDLDLDWWWWWL", "DWWWL-WWLLLWLLLDWWWLWWLLWWDWLWLLLW", "LLLLLL-DDLDWLWWLDDLLDLWDDWLLWLLWDL", "WDDWLLW-WWWDLLDWWWLLWWLLLLDDWLDLLW", "LDLWWLWW-LLLLWLLDDWWLWDDDDDLLWDLLL", "LWWWLDWWD-WLLWWLWLWWWWLLDDLWWLDLLL", "DLLLWLWWDD-LWWLLWWLLLDLDWDWWLDLWLL", "WLWWDLWLWWL-LWLWLLLWLDWDDLDLWDLDLD", "WDDDDDWLWLWW-WWLWLWWLWDLLDWWLWWLDW", "LLDLDLDDDLLWL-DLLWWDDLDWDWDLDLLLDL", "WWDLLLWWWLWLLW-WWWLWWDLLDLDWLWLLLL", "WWWDWWWDWWLDLWW-LWWWWDWLWLDLLLWWLW", "WLDWLDWWLLLLWWWL-DLWWLLDDLLWWDWDDL", "LWWWLDWLDLLLLWLDL-DWLWLLLLLDWLLLWD", "WDWWWDLWLDWWLWLLLW-WLDWWLLDWWLWLDL", "LLLWWDWWLLWLLWDDDLL-LWDDWWLLWWWLDL", "WWWWLLWWWDWWDWDDWLWL-WLDLLLDWWWWLL", "WWLWDDLWLLLWLWLLWDLWL-DLLLDLWDLWWW", "LWWWDDWWWLDLLWWWWWLWWW-LLDWLWDLLWL", "LWLWDDLWWWLWLLWWWWWWWLL-DDWLWLLDWW", "WWWWWWWWWWLWWLWDLLWWWWWW-DWWLWDWWL", "WWLWLLWWWWDWDWDLWWWWLLLLW-WWWDWWDL", "DWWDDLLWWLDWLWWDWLLLWWLLDD-WLLLLDW", "WWWLLLWLWDWWWWWLWWDWLLDLLLD-DLWDLL", "WLLWWDWWWLWWDWWLLDDWWLWWWWDL-WLWWD", "LWLWLLWDLLWDWDLLWWWDWLLLLDLWW-LWLL", "WWWWDWWLWWLWWWWWLWWWWLWDWLWWLW-LLD", "WLWWDWWLWLWWWLWLWLWLWWWDDDDDWLW-DW", "LWWWLWWWDWWLLWWDDLDWWLLLLLWLWWLL-D", "WWLWLWWDWLWWWDWDWWWLLWLLLLWWDWLWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {85, 69, 81, 68, 119, 102, 44, 75, 64, 105, 81, 78, 119, 48, 81, 125, 81, 70, 95, 71, 94, 81, 114, 120, 128, 122, 90, 93, 93, 86, 127, 115, 102, 119};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> matches = {"-LLWWWWLLDWWWWWWWLLWLWWLLWWWLWLDWWLWWWLL", "D-WDDLWWWDDWWLLLWLWLWLWWWLLDWLLLDDDWLWWW", "DW-LDLWWLDLLWDWWLDLLWLDWDLLLWLWLDLDDDLLL", "LWL-WLWWLLWWWWWLWLWWLWWWLLLWWLWWWLLWWLLL", "DWWD-DWWWDLLDWWWWLWLWDLWLWLWDWWWDLWWLDWW", "DWWLW-DWDLLWWLWWWDWWWWWLWWDWWDDDWWLDWLDD", "WDLDWL-LLLLLLDLLDLWDWLLLDLLLWWLWLWWWWLDD", "DLDDLDL-DWDDLWDWWLLDWLDWLDWDDLDWDLLDWWLD", "LLWLDLLW-WWLDDWLLLWWWLWWWLDLWDWWLLLLWLLD", "WWDWWWWWW-WWWWWLWLWWWWWDLWWWWDDWWWLDLDWL", "WWWWDDWWWL-LWLLLWLLWWWDWDWLWWWLWLLWWWLWL", "WLWLWDDDLLL-WDWWWWDLWDWWDWDWWLWWWLWLWDWL", "LDLDLLWWLWWL-DWLDLLWDLWWLLDWWWWWLDDWLDWD", "DWWDLWWWWDWLW-WLWLLWLLLWDDLWWWLWDWLLLDWD", "WLDLDLWWDLDDLD-WWLLLLDWWLWWLWDDLWDWDWDWL", "WWWLWDWWDDWWLWW-WLDWWWWWDWDLWLWDWLLWWDWW", "WLWLLLLWWLDLWWLL-DWWWLWWLLWWWWLDLLLLWWWD", "LWWWWWWLWLWWDWWLW-WWWWWWLWLWWWDLLLDDLDLW", "DWWLLLDLDDDWWWDLWD-DDLWWLLLWWWDWLLLWWDWD", "WWLLWWWLLWWDWLWLLLL-WWWWWDLWWLWDDDLDWDWD", "LLLLLDDLLDWDWDLWLDLL-LWLLDLLDWLLLLLLLLWL", "LDWWLDLWLDWWWWWWWWWWW-WDDDDWLDWWDWWWWLLD", "LDLDDWDWLDDWDDDDDLLLWW-WWWWDWLWDLDLLLLWL", "LDDLDDLLWLDLLWDLDLLLLDD-DLLWLDLLLLLWLWLD", "WWWWWWWLWLWLDWWDDWWWLWLW-LDWLWWWWDDLLWWW", "DDWLWLWWWLWLWDWLLLLLWWDWL-DLWLLWLDLWDWWL", "LWWDWDWWWDLLLDWWWWWWLWWWLL-DWDWDDWWWWWWW", "LLWDLLLLDDWDLDLLWLWWWLWWWWL-WLWWLLDDWWWL", "LDLWDLWLWDLDLDLLDLLDWWLLLLLD-LLLLLWLDWWL", "DWDLLWWWWDWLWWWDWLLWWWWWLDWWL-WWDWDWWWWD", "LDWDLLWLDLDDLLWLDLLDWLWWLDDWDL-LDLWLWLWL", "DDWLLLWDDLLWDDWWDLWDDLWWWLLLWLL-DWLDWLLL", "LWWWWWWWLLWWDWWDDWWWLWWWWWWWWWWW-DWWWWWD", "WWWDWDWLWLWWLDWWWLWWWLWWWWDLWDDWW-WWWDWL", "LLWLWDWLLLWLWWWDWDWWWWLWLDLLWDWWLW-DWLWL", "LLWDDLWWLDDDWDWLWDLWLWWWDLLWWLLWDDL-LLLW", "LDWLWLLDDDLLDLDLLLLWWLWWWDLLWLLDLLLL-WWL", "WWLLWWWWWDLLWLLDLDDWDDWWLWWWWDWWLLLLW-LW", "DDWLLDLWLWLLLLDWLLWLWLWWLDLWLWLWWDDDWL-W", "DWWLWWLWWDWDLWWLWWWWLWWLLWLWDDDLDWDWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {131, 101, 73, 135, 117, 134, 73, 89, 102, 153, 112, 129, 99, 101, 84, 146, 91, 157, 111, 101, 60, 129, 73, 47, 147, 107, 150, 93, 56, 136, 91, 82, 156, 146, 129, 96, 74, 117, 85, 138};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> matches = {};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {109, 79, 126, 105, 125, 91, 137, 76, 88, 147, 128, 173, 107, 115, 68, 168, 108, 74, 189, 75, 165, 128, 174, 134, 97, 146, 117, 177, 84, 77, 127, 74, 180, 111, 156, 92, 77, 148, 111, 124, 155, 165, 77, 105, 186, 104};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> matches = {};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {149, 180, 169, 148, 169, 81, 126, 107, 98, 124, 183, 120, 161, 157, 67, 137, 85, 88, 102, 124, 171, 156, 146, 91, 140, 157, 133, 81, 106, 94, 138, 150, 147, 71, 100, 80, 154, 139, 144, 104, 136, 87, 75, 69, 107, 149, 114};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> matches = {"-WWWLLWWLWWLWDDDDLLLWLLDLWLWWWLLWWDDLWWWLLDDWLDLDW", "L-WWWLWLWLDLLDDWDWDLDWWWDWDLWDWWDWDWWWWLWLDDDDLDWW", "WD-WLDWDDDDDLWDDLWWDWDWWDDLWWWDLDWWDLLDDLLLWLLWDWW", "WLL-LDDWLDWLLWLLDDLLWWDLDLWDWDDWWWLWDLWLLLWDDDLLWW", "WLWL-LWWLWWLDDWDLWDLDWWWWWLDWWDLLDDDWWDLLLWLLLDDDD", "LWLWW-DWWWDDWWWWDLLDWDLWDWWDDDWDWWWWDDDWWDWLWDDDDW", "DDWWLW-DDLDDLDLWLWDLLDLLLWDDLWDWDDLLLLWDLLLLWLWLWD", "WWWWWWD-WWDDWDWLWWWDDWWDWWWDWWLWWDLDDWWDLDWLDLWLDW", "WDWWDLWL-DDLWWWWWLDDWWWDWWWWDWDDWDWWWDWLDDWLDDWDLW", "LLWWWLWLL-DLDLDDWWLWWWLWLDWLLDDWWLLLWLWLWDDLLLWWWD", "LDLDWWWDLL-LLLWDDWDLDWDWDLLWWWWDWLWLWDWWWLLLDWWLLD", "DWDWWDWWDWW-LLWWLDDWWWLDWWWWDDDLWLWDWDDWLWDDWLWLDW", "WLLDLDDDLDWL-DLLDLLWDLLLDDLWLWLLWWWLDLDWDLLWDLLLWW", "WDWLWWWWWDDWD-WWDWWWLWDWWWDWWDWDWDWWWWDWLDWDWWWWWW", "WLDDLDDWLWWLWW-WDLDLDDLWWWWWWWWLWWWLDWWLDLWLWDDDDL", "WWLWLDDLLWDLWLL-WLDWDWDWLLLWLWWDDDWLDWLLDWDDDDWWDW", "WDDLWWDWWDWDDLDW-WWWWWLWWWDDWWWWWWWWDWWDLLWDLLDDWD", "DWDWLWDDDWWDWLWWW-DWDWDDDWWDWWWWDWDDWWWWLLDDDDLWWD", "DWDWWLWLDLWDDWWWDL-DWDWDLWWDWWWWWWWDWWDWDLWWDWWWDW", "WLWWDDLWLWWLWDWWDWL-WWLWWWWDWWWLWWWWLWWDDWLLLLWLWW", "LLLLDLWLLDLLDLDLWDLL-WLLWDWDWWDLWWWDDLWWWDDDDLLWLW", "LDLLDLDDDLLLLLLWDLDDD-WDLDDDDLDLLDLDDWWLLLLLLWWLLD", "LDDWDDWLDDWDWLWLDLLDWW-WWWWWWDWDDWWWWDWWWWWDWDWLWD", "LDLLLLDWWLDDWLDWDDWLLWL-DWLDLLWWLLDLDLDLDLDDDDLWLW", "LDLDDDDDLDWLDWWLLLDLDWDL-WLWWWDDWDWDLLWDLLLWLDLLDW", "LLLLWLDWDLDLDLLLLLLLWWWLD-WLDWLWWWDWLLWWDDLLDLDWLD", "LLWWWWWDDWLWDLLWDLLLWLLDLW-DWWWLWWWLWWDDLLDDDLDDLD", "LWLLLLLWLLLLWDLLWLLDWWWWLDL-WLLDLDDWLDLWDDWLWDLLLD", "LDLWDWLDLWLDLLLWLDLLLDWWWDWD-DWLLLWLDWWDLLDLLDDLWD", "LDLLDWDLDDDLDLDLLLLDDDLDWWLDL-DDDDLLDDDLWDDLLLWDLD", "WLWWWLLLDDDDWWLLWLDDDLWWLWWWLL-LLLDLDWWDDLLLLLWLLD", "DWWDLWDDWLDLWWDWDLWDWWWWWDWWWDL-LWDWWWWWDLLDDWDWLW", "DLDWDLWLDDDLWDDDDDDDDWDDLWWLDWWL-LWDLDWLLDDWDLDDLW", "DLLLLWLDDDWWLLLLLLWLWDLWLDWDWDWLW-DDWWWDLLLLLLLDDW", "LLDWDDLWWLLLLDLLLLWLLWLLWDDWLDLLLD-WLLWLLDDWLDWWLW", "WDDDLLDLLLWWWDLDLDLLDWWWWWWDDDLWWDW-DDWWDLLWLWLLWW", "WDWWDLWDLWDLWWLWDDLWDWLWDWLDDWWLDWWW-LWDLWLDDDDWDD", "LDDWLWWLLWWDWDLWLLLLWWDWDDDDDWWLWWDWW-WLLWWLLWLDDW", "LDWLLLLLLDLLLLWDDLLLDWWLDDLLDLWDDLDLLL-DDDLDDLWDWL", "DWWLWWWLLWWDWDDWDLLLDDLDDWWWDWDLWDDLLWW-LLLLWLLDWL", "WWLDLWWWWWWWDDWWWWWWDWWWWWLDLWDWWDDWWWWW-DWWWDWDWL", "WWDWDWWDWWLDWLWDWDWWWDWWWWDWWDWDDWWWLWWWL-DLWDDLLD", "LWWWWWDDDWDWDWDWLDDLWLWWWWDDWDDDWWWWWWWDWW-LDLWWWD", "DDLLDWLDWDWWWLLDLDWWLWWWWLWWDWWDWDWWWWDWDWL-DLWDWW", "DWLDDLWLLWWLWLWWLLLLWDLDWWLWWWDLWLWDWWDDDLDL-DLLWW", "WDDWWWDWWDWWDDDDLLDDLWDWWWWDDDLWDWWWWWDWDDDLW-DDDW", "WWWWWLWDLWWLWDDWDWWLDDLWWWWWWWWLWWWWWWWDDWLDLW-DWW", "WWDWWWWWDDWDDLDLLWWWWWDWDDLWWWWDLLWWDLDDLWLDWDW-WW", "WDDWDLWLLDLWWDLLDDDDWLDWLDLDWDDWDDDLWDWLDWDLDDLL-W", "LWDDLLDLLWLDLLDWLLWLLDLLDDLWWDLDLLLWWWWDDLDLLLLLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {138, 140, 139, 110, 135, 161, 94, 163, 173, 118, 117, 176, 100, 192, 147, 123, 171, 176, 172, 177, 102, 68, 165, 89, 108, 81, 128, 88, 94, 71, 103, 165, 102, 104, 86, 127, 129, 125, 58, 127, 195, 182, 169, 178, 137, 173, 161, 165, 116, 75};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> matches = {"-WWWDDWWLWWLWDDDDDLLWLLWLWLWWWLLWWWDLWWWLLDDWLDLDW", "L-WWWLWLWLWDLDWWDWDLWWWWWWWLWWWWWWWWWWWLWLDDWDLDWW", "WD-WLDWDDWDDLWDDLWWDWWWWDDLWWWWLDWWDDLWDLLLWLLWDWW", "WLL-LDDWLDWLDWLLDDLLWWDLDLWWWDWWWWLWDLWLLLWDDDDLWW", "WDWL-DWWLWWLWDWWLWDLWWWWWWLDWWWLLDWWWWWLLLWLDDDDDW", "LWLWW-DWWWDDWWWWDLDWWWLWDWWWDDWDWWWWDWWWWDWLWDWDWW", "DDWWLW-DDLDDLDLWLWDLLWDDDWDWLWWWDDDDLLWDLLLLWLWLWW", "WWWWWWW-WWWWWDWLWWWWDWWDWWWWWWLWWWLWWWWDLDWDDLWLWW", "WDWWWLWL-WWLWWWWWDDDWWWDWWWWWWDDWWWWWWWLDDWDDDWDLW", "LLWWWLWLL-WLDLDDWWLWWWLWLWWLLWWWWDLLWLWLWDDDDLWWWD", "LDLDWWWDLL-LLLWDDWDLWWDWDLLWWWWDWLWLWDWWWLLLDWWLDW", "WWDWWWWWWWW-LLWWLDWWWWDDWWWWWDDLWLWWWDWWDWDDWLWLWW", "WLLDLDWDDWWD-DLLDLLWWLLLDWLWLWLLWWWLDDDWDLLWDLLLWW", "WDWLWWWWWWWWW-WWWWWWLWDWWWDWWDWDWWWWWWWWLDWWWWWWWW", "WLWDLDDWLWWLWW-WDLDLDWLWWWWWWWWLWWWDWWWLDLWDWDDDWL", "WWLWDDWLLWDLWDL-WDDWWWDWLLLWLWWDWWWDDWLLDWDDDDWWWW", "WWDLWWWWWDWDWLDW-WWWWWLWWWDWWWWWWWWWWWWWDLWDLDWDWD", "WWWWLWWDDWWWWDWWW-WWWWDWDWWDWWWWWWWDWWWWDDDDDDLWWW", "WWWWWDWDDLWDDWWWDL-WWWWWLWWDWWWWWWWDWWWWDLWWDWWWWW", "WLWWWDLWLWWLWDWWDWL-WWDWWWWWWWWLWWWWLWWDDWLLLLWLWW", "LLLLDLWLLDLLDDDLWDLL-WLLWDWDWWWLWWWDDLWWWDDDDLDWLW", "LDDDDLDDDLLLDLLWDLDDD-WDLDDDDLWDLDLDDWWLDDLLLWWDLW", "LWWWWWWLWDWDWLWLDLLDWW-WWWWWWWWWWWWWWWWWWWWDWDWLWW", "LDDLLDDWWLDDWDDWDDWLLWL-DWLDLDWWLLDLDLWDDLDDDDLWLW", "DDDWDDWDLWWLDWWLLLDLWWDL-WLWWWWDWWWDDLWDLLLWLDDLWW", "LLLLWLDWDDDLDLLDLLLLWWWLD-WDDWLWWWDWLDWWDDLLDLDWLD", "LDWWWWWDDWLWWLLWDLLDWLLWLW-DWWWDWWWLWWWDLLDDWLDDLW", "LWDLLLLWLLLLWDDLWDLDWWWWLDL-WDLDLDDWLDDWDDWLWDLLLD", "LDLWDWLDLWLDLLLWLDDLLWWWWWWW-DWLLLWLDWWDDLDLLDDLWW", "LDLLDWDLDDDLDLDLLLLDDWLDWWLWL-WDDDDLDDDLWDDDLLWDLW", "WLWWWLLLDDDDWWLLWLDDDDWWLWWWDL-LDLDLDWWDDDDLLLWLLD", "WWWDLWDDWLDLWWWWDLWDWWWWWWWWWWL-LWDWWWWWDLLDDWWWLW", "DLDWDLWLDDDLWDDDDDDDWWDDLWWLDWWD-LWDLDWLLDDWDLDDDW", "DLLLLWLDDDWWLLDDLLWLWWLWDDWWWWWLW-WDWWWDDLLLLLLDDW", "DDDWDDDWWLDLLDLDDLWLLWLDWWDWLDLLLD-WLLWLLDDWLDWWDW", "WDDDLLWLLLWWWDLDLDLLWWWWWWWDWWLWWWW-WWWWDLLWLWLDWW", "WDWWDDWDLWDDWWLWDDLWWWLWDWLDDWWDWWWW-DWDLWLDDDDWWD", "LDDWLWWDLWWDWDLWLLLLWWDWDWDWDWWLWWWWW-WLLWWLLWDDWW", "DDWLLLLLLDLLLDWDDDLLDWWLDDLDDLWDDLDLDL-DDDLDDLWDWL", "DWWLWWWLLWWDWDWWDLLDDWLWWWWWDWWDWWDLLWW-LLLLWLLDWL", "WWLWLWWWWWWWDWWWWWWWWWWWWWLWLWDWWWWWWWWW-DWWWWWWWL", "WWWWWWWDWWLDWLWDWDWWWWWWWWWWWWWWDWWWLWWWL-DDWDWLLW", "LWWWWWWDDWDWWWWWDWDLWLWWWWWWWWDWWWWWWWWWWW-DWLWWWW", "WDLLWWLDWDWWWLLDDWWWLWWWWLWWWWWDWWWWWWWWDWL-WLWDWW", "DWLDDLWLLWWLWLWWLLLLWDLWWWLWWWWLWLWWWWWDDLDL-DLLWW", "WDWWWWDWWWWWWDDWLLDWLWWWWWWDDDLWDWWWWWWWDWDDW-WDWW", "WWWWWDWDLWWLWDWWDWWDWWLWWWWWWWWLWWWWWWWDDWLDLW-DWW", "WWWWWWWWDWWWWLDLDWWWWWWWWDLWWWWWLLWWWLWWLWDDWDW-WW", "WDDWDDWLDDLWWDLLDDDDWLDWLWLWWDWWDDWLWDWLDWDLDDLL-W", "LWDDLLDLDWLDLLDWLDWLLDLDDWLWWDDDLLLWWWWDDLDDLLDLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {134, 151, 133, 112, 146, 160, 97, 178, 179, 120, 115, 185, 100, 195, 148, 129, 178, 185, 182, 172, 94, 66, 177, 84, 119, 77, 138, 76, 98, 69, 94, 161, 99, 105, 84, 132, 128, 125, 49, 136, 199, 192, 189, 174, 137, 189, 154, 182, 110, 72};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> matches = {"-LDDLWWDWWLDLDWDWWWWDLLWLDDWDWWDDWWWDDWWDWWWWLWDLW", "W-DWDWWDWWDWWWDWWWLWDWWWWDWWDWWWWDWWWWWWWDWWWDLWDW", "WD-WDWWWWWLWWWWWDDWWWDDWDDWDDWDWWWWWWWWWWWDDDWWWWW", "DLD-DWWWLDWWDDWWWWWDLDDDWDDWDWWDDWWWDDWWWWWDWWWWDW", "DDDW-WDDWWDWWDWDWWWDWWDWWDWWWWWWWWWWWWDWWWWWWDWDWD", "DWDDD-WDDDDWWDDLLDDDDWDDDWWDLDDLDDDDLLLDDDDWWLDWWD", "DDDDWW-WWDLDDDDWWWWLDDWDWDDWWWDDDWWWWLDWWWWWDLDDWW", "DDWDDWL-DLWLLDWDLWDWDDDLWDLWWLDWLWDWWDDWDLLWDDLLLD", "DDWDDWDL-DDDDLWDDWDDLDDWDLDWWWWWWWDDLDLWLWWWWDDLDL", "WDDLDWDWW-DDWDWWWDWDDDWWDDLWWWDDDLWWWDLDDWWWDDLWDD", "WDDWLWWDWW-DWWWWWWWWDWWWWDWWWWWLWWWWWWDWWWWWDWWDWW", "DLDDLWWWWWW-DDWDWWWDDDLWWDWDWWWLDWWDDDDWWWWDWLLDLW", "WDWWDDLWWWDW-WWDWWDWWWWWWWWWWWWDWWDWWLWWWWWDWWWLWW", "WDDDWWWWWWDWD-WWDWWWDDDWWDLDWWWDLWWWLLWWWWWDWDWWDW", "DDWDDWDDDDWDLD-LDDLWWDWWDWDWDDDDDWDDDLWDDWWWWDDDDW", "DWDDDWWWWWDLLDD-WWWWDLDDWLDDWWWLDWWDDDDDWWDWWDWDLW", "DDWDLWDLDDLLLDWW-WDWDDWDDDDDWWWDDDWWWDDDLWWWDDLLDD", "DDDWWWLLWDWDLLDLL-DLLLDDLDWWWLDDWWDWWLLWWWWDLDDLWD", "WWLDDWWDLWDLDDDLDW-LLDDWDLDWDDLWDWDWLDDWLWDWDLDDDD", "WDDDLWDWWLWDDWWDWWD-DDLWDLWWWWDDDWWWDDLWDWWWDDLDLD", "WLWWDWWDLWDWDDWDWWWD-WWWWDDLWDWWWWWWLDWDWWWWWWWWWW", "WLWLWWWWWLLWDWWLDWWWW-WDDWWWWWWDWWWWWDWWWLWWWWWWWW", "WDLDDDDLWWWWWWWDWWWWDL-WWLDLWWWDDWWDLDWWDWWWWWWDWW", "DDDDWWDDWDWWDLDLDWDDLDW-DWWDDWDLLDWDWLDDLWWWWDLDLD", "DDDDDWWWWWDWDWWDWDDWDDDD-DDWWDWLLWWWLDWWWWLDWWWDDL", "WWWWWWWWWWDDWWDWWWDWDWWDW-WDWWWWWWDDWWDWWWWLDWDWWW", "WWDDDWWWWDLWLWLWWWWWDDWWWW-WWWDLWWDWWDDLWDLDWWWDDD", "LDDWLWDDDWDLWDDWDDLDDDLDWWW-DLDLLDWDDDDDWLDDLWDWWD", "DLWDDWLDWLLLDDDDWLWDLDLDLDLW-DDWWWWWWDLDDWDLDDLDLW", "WDWDWWDDDWDDDDLLLWDDWLDDLDDWD-DDDWWDDWDWDWWDDDWDDW", "WLLDDWWWDDLDLDWLWWWLDDDWWLDWWD-DLWWWWDDWDWWWWDLLLD", "WWWWDWWWWWLWDWWWDWWWDDWWWWWWDWD-WWWWWLWWWWLWWWWWWW", "WDWDWWWWWWLWDWWLLWWWDDDWWLDLWWWD-WWWDDWWWWWWWDWWDW", "WDDDDDWLDLLDDWLDWLDDWDWDLDDDWDLDW-DDWDDDDLDWLDLLLW", "DLDLDWDDWLDLWLDDDDWDDDDDWDWLWDDDWW-WDDDWDWWWLDDDLD", "LDDWDWLDWLDDDLWDLDDDDWDDDDDWDWDDLDW-DDWLDLDWLWDDDL", "WDDLDWWWWLDWDDWWWDWWLLLWWDDLWDWWLWWD-DWDWLWWDWDDDL", "WDWWWWWWWWLWDWDLWWWWDWWWWWDWWWWDWWDWW-WWWWWWDWWWWW", "LDDWDWWDWWWDDDWDWWWDWDDWWDDWWWWDDDWWLD-WWWWDDLWDDW", "DLDDDWDWLDWLLDDLDLDWWDLDWDDWLDLDDWWWDLD-LDDWDDWDLW", "WLLDLDWWWDWDLLWLWWWWWDLWWLWWWWDDLWWWLLWW-WWWDLWDWD", "DDWDDWDLWDDDDDDLDLLWDWDDDDDWWDDDDWDLDWWDW-WDDDDDDD", "DLDWWWDDWDDDDDWDDDLDDDLDDLDDDDDDDDDDDDLWDD-DLLDWDD", "DDWDDWDDDLDWLWDLLWDDDDWDLDDDDWDDDWDDLDDWDDW-DDDWLD", "WDDDDWWWWDDDLWWLDWDDDLLWDLDWWDDWDWWWLDDWDWWW-DLDLD", "WWWLDWWWWWDWWDWDDWWWDWLWDLDWWWWDDWWWLDWWWWWWW-WDDW", "DDLWDWDWWDDDLDWLWWWWDDDDDLDWWWLDDWLWLDLWLWDDWD-WWL", "WLWDLWWWWDLWDWWWDLWDWLLWWDDWLLDWDWWWWWWWWWWDWWL-DD", "WDDWLWWWWDWDDDWWDWWWWLDDLDDWWWWDDWWWLLWWWWWDWDWL-W", "DDDDWWLWWLDLDDWLWWWWDWDDDDDWWDWLWWWLLWWWWWWDWDWWD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {118, 183, 158, 143, 173, 67, 127, 100, 95, 134, 186, 137, 184, 149, 101, 155, 111, 93, 97, 115, 162, 172, 158, 97, 128, 184, 140, 91, 85, 103, 114, 179, 158, 70, 86, 81, 145, 187, 139, 81, 125, 92, 78, 87, 115, 158, 127, 144, 158, 126};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> matches = {"-LDDLWWDWWLDLDWDWWWWDLLWLDDWDWWDDWWWDDWWDWWWWLWDLW", "W-WWWWWDWWWWWWDWWWLWDWWWWWWWDWWWWDWWWWWWWDWWWDLWDW", "WD-WWWWWWWWWWWWWDDWWWDDWDWWDDWDWWWWWWWWWWWDDDWWWWW", "DLD-DWWWLDWWDWWWWWWDLDDDWDWWDWWDWWWWWDWWWWWDWWWDWW", "DDDW-WDDWWWWWDWDWWWDWWDWWDWWWWWWWWWWWWDWWWWWWDWDWD", "DWDDD-WDDDDWWDDLLDDDDWDDDWWWLDDLDDDDLLLDDDDWWLDWWD", "DDDDWW-WWDLDDDDWWWWLDDWDWDDWWWDDDWWWWLDWWWWWDLDDWW", "DDWDDWL-WLWLLDDDWWWWDDDWWDLWWWDWLWDWWDDWDLLWDDLLLD", "DDWDDWDL-DDDDLDDWWWDLDDLDLDWWDWWWWDDLDLWLWWWWDDLDL", "WDDLDWWWW-DDWDWWWDWDDDWWDDLWWWDDDLWWWDLDWWWWDDWWDD", "WDLWLWWDWW-DWWWWWWWWDWWWWDWWWWWLWWWWWWDWWWWWDWWDWW", "WLDDLWWWWWW-DDWDWWWDDDLWWDWDWWWLDWWDDDDWWWWDWLLDLW", "WDWWDDLWWWDW-WWDWWDWWWWWWWWWWWWDWWDWWWWWWWWDWWWLWW", "WDDDWWWWWWDWD-WWDWWWDDDWWDLDWWWDLWWWLLWWWWWDWDWWDW", "DDWDDWDDDDWDLD-LLDLWWDWWDWDWDDDDDWDDDLWDDWWWWDDDDW", "WWDDDWWWWWDWLDD-WWWWDLDDWLDDWWWLDWWDDDDDWWDWWDWDLW", "DDWDLWDLDDLLLDDW-WWWDDWWDDDDWDWDDDWWWDDDLWWWDDLLDD", "DDDWWWLLWDWDLLDLL-DLLLDDLDWWDLDDWWDWWLLDWLWWLDDLWD", "WWLDDWWDLWDLDDWLDW-LLDDWDLDWDWLWDWDWLDDWLWDWDLDDDD", "WDDDLWWWWWWDDWWDWWD-DDLWDLWWWWDDDWWWDDLWWWWWDDWDLD", "WLWWDWWDLWDWWDWDWWWD-WWWWDDLWDWWWWWWLWWDWWWWWWWWWW", "WLWLWWWWWLLWDWWLDWWWW-DDDWWWWWWDWWWWWDWWWLWWWWWWWW", "WDLDDDDLWWWWWWWDWWWWDL-WWLDLWWWDDWWDLDWWDWWWWWWDWW", "DDDDWWDDWDWWDLWLDWWDLDW-DWWDDDDLLDWDWLDDLWWWWDLDLD", "DDDDDWWWWWDWDWWDWDDWDDDD-DDWWDWLLWWWLDWWWWLDWWWDDL", "WWWWDWWWWWWDWWDWWWDWDWWDW-WDWWWWWWDDWWDWWWWLDWDWWW", "WWDDDWWWWDLWLDLWWWWWDDWWWW-WWWDLDWDWWDDLWDLDWWWDWD", "LDDWLWDDDWDLWDDWDDLDDDLDWWW-DLDLLDWDDDDDWLDDLWDWWD", "DLWDDWLDWLLLDDDDWLWDLDLDLDLW-DDWWWWWWDLWDWDWDDLDLW", "WDWDWWDDDWDDDDWLLWDDWLDDLDDWD-DDDWWDDWDWDWWDDDWDDW", "WLLDDWLWDWLDLDWLWWWWDDDWWLDWWD-DLWWWWDDWWWWWLDWLLD", "WWWWDWWWWWLWWWWWDWWWWDWWWWWWDWD-WWWWWWWWWWLWWWWWWW", "WDWLWWWWWWLWDLWLLWWWDDDWWLDLWWWD-WWWDDWWWWWWWDWWDW", "WDDDDWWLDLLDDWLDWLDDWDWDLDDWWDLDW-DWWDDDDLWWLDLLLW", "DLDLDWDWDLDLWLWDWDDDDDDWWDWLWWDDWW-WDDDWDWWWLDDDLD", "LDDWDDLDWLDDDLWDLDDDDWDDDDDDDWDDLDW-DDWLDLDWLWDDDL", "WDDLDWWWWLDWDWWWWDWWLLLWWDWLWDWWWWWD-DWDWLWWDWDWWL", "WDWWWWWWWWLWDWDLWWWWDWWWWWDWWWWDWWDWW-WWWWWWDWWWWW", "WDDWDWWDWWWWDDWWWWWDWDDWWDDWWWWDDDWWLD-WWWWDDLWDDW", "DLDDDWDWLDWLLDDLDLDWWDLDWDDWLDLDDWWWDLD-LDDDDDWDLW", "WLLDLDDWWDWDLLWLWWWWWDLWWLWWWWDDLWWWLLWW-WWWDLDDWD", "DDWDDWDLWDDDDDDLDLLWDWDDDDDWDDDDDWDLDWWWW-WWDDDDDD", "DLDWWDDDWDDDDDWDDDLDDDLDDLDWDDDDDDDWDDLWDD-DLLDWDD", "DDWDDWDDDLDWLWDLLWDDDDWDLDDDLWDDDWDDLDDWDDW-DDDWLD", "WDDDDWLWWWDDLWWLDWDWDLLWDLDWWDDWDWWWLDDWWWWW-DWDLD", "WWWWDWWWWWDWWWWDDWWWDWLWDLWWWWWDWWWWWDWWWWWWW-WWWW", "DDLWDWWWWDDDLDWLWWWWDDDDDLDWWWLDDWLWLDLWLWDDWD-WWL", "WLWDLWWWWDLWDDWWDLWDWLLWWDWWLLDWWWWWWWWWWWWDWWL-WD", "WDDWLWWWWDWDDWWWDWWWWLDDLDDWWWWDWWWWLLWWWWWDWDWL-W", "DDDDWWLWWLDLDDWLWWWWDWDDWDDWWDWLWWWLLWWWWWWDWDWWD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {113, 191, 166, 150, 174, 70, 131, 110, 92, 136, 179, 135, 185, 150, 97, 159, 108, 88, 98, 121, 165, 170, 159, 97, 127, 182, 134, 89, 94, 104, 118, 186, 148, 78, 92, 75, 152, 180, 146, 78, 117, 97, 79, 82, 124, 174, 118, 147, 157, 128};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> matches = {"-LDLLWLLWLDDWLWLDLLLDWLWLLWWWWDDWWDLLLWLDLLWLWLDLD", "W-WDWWWWWWWLWWLWWWWWWDWWWWWWWWWWLWLWWWDWWWWWWWWWWW", "WD-DLLWWLWWLLWDWWWLWDWWLLLLLWWLLLWLDLLLWDLWLWLLLDW", "WWW-WWWWLWWWLWWWDWWWDDDWLWWWWLLWWWLWWWWDWWWWWLDDLD", "DLWL-WDDWLWLLWLWWLLDLLWDDLWLLDLDLWWDLLWDWWWDWWLLLW", "DLDWL-DWWWWWWLLWLDWWWDLLLWLDLDWLWLLLDDLLDLDLLLDDDL", "WLDDLW-WLWWDWWWLLWDDWLDDLLLWLWLWDDLLWLDLWWWLWLWLWD", "WLLDWWW-LWWLDWDWWDDWLWWWLLLWWLWLDWDLLLWLLDWDWLDLWW", "WDWWWWWW-LWWDWWWWWWDWWWWLWWDWWWWWWLWWWWWWWWLWWWWDW", "WLWWWDWDL-WWWWWLWWLWLLWWWDWLDDDWLWDDLLWLWWWLWLLLWD", "WLLDLDWDLW-WLLLWWDDWWDWWDLLWWLLLWWLLLLWWWLDDLWWLDL", "WWDLWWDWLWW-LWLLDLWWLWWLLWWDWWLDLWLDWWWWWDDWDLWLLW", "WDWWWLWWWWWW-WWWWWWWLLWWLWWWDWWWWWLWDWWDWWWDDWWWWW", "DLWLLWDLLDDLL-LLWWDDDLWLLLWWDWWDWWLWDLDLDWWWWLLLWW", "WWDLWWWDLWWDLW-DWLDLWWWWLDLWWWLWDWWLLWWLWWWLWLDWLW", "WLWLWWLWLDWDLWW-WDWWWWWDDLWWWWWLWWLWWWWWWWWWWLWLLW", "WWDWLWWLWLLDWDDL-LLWWLDDLDLDLLDLDWWLWLWWWLLLLLWLLD", "WLDWWWWDLLWWLWDDD-WWLWWDLWDWWWWDWDLLWWWWWWWDWWWWWW", "WLDWWWWDLDWLWWWWWW-WLDWDLDDDWDLDDWDLWWWLWWWWWLWLLW", "DDLWDLDLLWLWWWLDDWW-DLWWWWLLLLLLDDDWLWLLDLDLDLDLLL", "WWDWWWWWWWWWWWWWWWWW-DDWWWDWWWWWWWWDWWWWWWWWWWDWWW", "WLWWLWWWDWWLLWWDWDWWW-DLLWWLDWWDLWDDWWWLWWWWDLDLDW", "WDLWWWWLLWWLWDWWWLWDLD-LLLWWWLDLDWWLWLWLWDWDWDWLLL", "DLDWWWWWLWWWLWWWWDWWDWW-WWWWWWLWWWLDWWWDWWWDDDDWWW", "WWDWWWWWWWDWWDWWWWWWWDWW-WDWDWWWWWWLWDWLWWWDDWWWWD", "WWDDWWWDLWWWDWWWWDDWLWWLL-WDWLWWWWLWWWWLWWWWDLWWWD", "WWWDWWWWLWWWLLWWWDDWLLDLLL-WWLWWLWLWLWWLWWWWWWWDWW", "WDLLDWDWLWWWWDWLWWWWLWWLLWW-WLLLLWWDWWWLWWWWWLWLLW", "DLLLLWWWDWWWWDWLWWWWWWWLDLWL-WLLLWLLLDWLWWLWLWLLLL", "WWWWWWWDLWWWDDWWWWWWWWWLWWWDW-LDDWLWDWWLWDDWWWWWWW", "WLWWWWWWDWWWLWDWWDWWLWWLWWWWDW-WWWLWWDWWWWWLWWWLWW", "WLDLWDDWLWWWLWWDDLWWWWWLLDWWWWW-WWLWWWWWWDDWDDWWWW", "WLWDWWWWLWWWLWWLWWWWWWWWLLWDWLLL-WDWWWWLWWWDWLWLLW", "DDWLLWWDWLLLWLLLLLWDWLLWLLLWLWWDW-WLLWLWWLDWDLDLLL", "WWWWWWWWDDWWWWWWWWWWWWLWDWWWWWWWWD-WWWWDWWWWWWWWWD", "DDWDWWWDWWWLWWWLWDWWLDWLDWWWDLDDDWD-WWWWDWWWWWLLWW", "DLWDDWWLWWDLLLWLWLWWDWWLWLWWLWWLDWLD-WWLWWDWWDWLLW", "WLLLWDWDDWWDWWWWWLDWLWWWDDDLWWDDLWLLD-WWWDWLLLWLLW", "WLWWWWWDWDWLWWDLWLLWLLWLWWWLWLLDDWLLDW-LWDWDWLWLLW", "LLDLWWDWWWDWDDWWWWWWLDWWDWWWWWWWWLWWWWW-WWWDWWWDWW", "DDLLDDLWDWWLLWLLLLLWDLLDWLWWLLWDWWLWLDLD-WLLLLWLLW", "WWWWWWWLLWWWWWWLWWLWLWWWLLWWWWWWWWWWWWDLW-WDWLLDLW", "WWWLLWWLLWWWDLWDLLLWWLWWLLDLWWDLLWLDDDDWWW-DDDLDLW", "WLWLWWWWWWWLDWWLWLWWWWWLLWLLWLWLLDLLWWDWWWL-WLLLDW", "WLDLLWLLWWWLLWLLWLLWDLWLLLLWWLLWLWLLWLLDWLWL-LWLWL", "WDWWWWWWWWWDWWWWWWWWWDWLDWWWWDLLWWLWWWWLDWWWW-WDWW", "WWWLWWWWWWWLWDWDWDDWDLWWLLDLWLWWDWDDWWWDWWWDWL-WLW", "WLWLWWDWWWWWLWWWWDWWLWWWWWWWWWWDWWWWWWWWWDWWWWW-WW", "WLWWWWWWWWWWDWWDWLWWLWWDLLDWWLDDWWDWDWWLDWWWWLDW-W", "WWLLLWWLDLWLLLLWDLLWWLDLLLWLWLDDWWLWLLLLDWLWWLLDW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {69, 214, 106, 174, 108, 70, 92, 118, 201, 110, 81, 142, 188, 98, 128, 163, 81, 166, 132, 65, 202, 148, 100, 180, 217, 174, 139, 136, 105, 173, 176, 164, 151, 70, 226, 162, 131, 123, 107, 194, 67, 140, 98, 135, 88, 204, 141, 214, 172, 87};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> matches = {"-WDWWDWWDLLLDWDLLWLWDDLDLWDDDDDDDDLWWWDWLWWDLDWLLL", "W-LDLLWWLLDDWWDWDWDDDDWLLLLLWLDWDLWLDWDLLLLWDWLWLL", "DD-LWDWDWDWWWDLDLDLLLDLWWLWLDDWWLWWLWLLDDWLWLWWWLL", "LDD-LWWWWWDWWWWLDDWLLDDDWDDWDWWWWLLLLDWDLLDWLWDDWD", "DWWW-LDLDWDLWDWDDWWDLWWDLWDLDDLLLLDDWWDLWDWLDDLLWW", "DWLDW-LDDDDDDWWDWLDWDLWWWDWLWLDWDWWWLLWWLWLWWLLDLW", "LWLLWD-DLDDLDDDWWDDDDLDLWWLDWDLDLDWLDWLLWDDLDWDWDL", "WLDLLLW-LDLWDWLDLLDDWDWDLLWDLWDWLDLLWLWWDDLLLWLWDW", "LLWWWDLW-DLWLDWWWLLDDWWLWLLDWDLDWWLDLWLDWWWDLLLDDD", "LWDDWDWDW-LDDWLWWDWWWLLDDLDWDLLDLDLLWWLWWLWWDWWWDD", "WWWLLDLDLD-DLWLDLLLWDLDDLWLDDLWWDLWLLWDDLWLLLDDWLW", "DDDWWDDWLDD-WLDLDWLWLWWLLDWDDDLDLLWDWLDDDDDLDWLWWW", "LLLDWDWDLDDD-WDLWLWDWDLLWLDWDWWWLLWLDDWLLDWDDLDWDL", "DWWWWLDWWLDLL-LLWDLDDWLWWWDDDDDLDLWDLWLWDDWDLLLWDW", "LDDWWLWDWDWLWD-LLLLDDDLDWLWDLDWDLWDWWDWWLLWWLWLDWD", "WWWWWDDLWDLDWWW-DLLDDLDDLWLWLDDWLDWWLWLDLWWWLWLWLL", "WDDDWLWWDWWLDLLW-LWLDWLLWLLDLWLLLLDWDWDDLLLWWWDLLL", "LWDLWLWDWDLWWDDDD-WLWWLLWDDWLWWDWDWDDWLDLLLDWDWLDW", "WWDDDLLDWDLWDWLDWD-DWLDDWLLDLLLDLWDWDLDWWDLWWWLWWD", "LLWDDWLLWDWDDDWLLDD-DWDDDDWWWWWWDLLDWDWWLWLWDLLWLW", "WWDDLLWLLLWWDWDWLDLW-DDWWLDWWDDWDDDDLDLLLWDDWLDWLD", "WLLDDLLLLWWWWLLLDLDWD-DWLDLLDDDLWWLLWLDLLLLDDLDWLL", "LLWDDWLLLDLWDLDDLWDDWL-LLLDDLWLLLLDLDWDLWLDLWLDLWW", "DLDLLWLWWWDWWLWWDDWWLWW-DDDLLLDWDWWDDLDLWLLDDDDWLD", "WDDLLWLWWWDLWDDWDDLWDDLD-WDDDLWWLWDDLDWWWWWDDWLWWD", "WDDDLLDDWLWWLDWWWLDLLWLWL-LDLWDWLLWDLLWWWLWLDWLLWD", "DDLLWWLDWWWDWDLDWLWWWWDWWL-DDWDDWWLDWLDWWWLLDDWLDD", "LLDLDWDLLWLLDDLWDDLWLLLWWDD-DWWWWWDDLDLWLWDWLLWWLW", "DWWWWDLDDDLDDLDLLDDLDDDWDWDW-DLLWDLLWLDWWDLDWDWWLW", "WDDWWLWDWLWDDDLDDDLLDDWWDLWDL-WDDWLWDWWWDDDLWDLDWD", "WWLLWLLWLWWLWWDWWLWWWDWLDWLLDL-WWWLDWDLDWWLDLWWDWW", "LWDWWDDLWWLWWWDDDWWLDLLLWLLLWDD-LLWWWLDDLDDLDDLDDL", "LLWDWDLLLLWLLLLWDDDLDLLDLWLDWWWW-LLDWWWWWLLDLWLLWL", "DLDLLWWDDLWWDWLLLWDDDWLDWWLDLDDLD-DWLDWDLWLDLWLWLW", "DDWWLWDWDDWWWLLDLLLWWDDLDLLWWWWDDD-LWWWDDWLLWDLDDD", "DLLLLLLDDDWWDWLWDLLWWLLLLDWDDLDLLLL-WWLDDWLLLDDWDW", "DWWLDLWDDWDWWDDLDWDWLDLWDWLDDDDWLDLL-DWWWWDLDLDLWL", "DLDWWDWDDWWLDDWDLLDLWDWDLDLWDDLLWLWWL-LDLDLWDWDLLW", "WWWDWWLDDDLWDLLWWWWLLWLLDDDLWLWLLLLWLD-WLWDLLLDWWD", "DLDDWDDLLLDLDDLLDWWWWDDLDLWWLLLLWDDDWWD-WWLDLDWDWD", "DDWLLWWDLDDWWDWWWWLLLLLLDWDDWWDDDDLDWLWL-DWWLWDLWD", "DDWDWLWWLDWDDLDWDDWWLDDDLWDDLDDDDWDDDDLLL-DLLWWLWD", "LDDWLDLLWDLDLWDLDWWLDLWDWLLWWDLWWWLLLLLDWD-LDLWLLW", "DLDWWWWWDWLWLLWLLWDWDDLWLDWWWLDWLDWWDWDDLWD-DLDWLW", "DLDLLWDLDDWLWDWLWLWWLWDWWLWDWLLDWWLWDLWLLLDW-WDWDW", "WLLLWLLLDDWDDWWLDDWWDDLWLDDDWDWDDDWLWLLWDLWDW-DDWL", "DDWWLWWWDLLWDDLLLLLLLLLDWLLLWWDDLWLLDLWDWWWLLW-DWL", "WWLWWLDLDWWLWLDWWLWWLLLDDDWWLDDDDLDWLWWDLDDLDDL-DW", "LWDLWLWDDWLWLLWDWWDWWDDLWLDLDWLDWLDWDDLWDWWWDLDD-L", "LDWLLLLWLWLLWWWDDWWDDWDLWWDWWWDLDDWDLWWLDDLDWWWLD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {131, 122, 123, 146, 123, 153, 123, 121, 133, 129, 118, 124, 108, 125, 140, 139, 122, 144, 132, 129, 131, 112, 130, 138, 139, 140, 153, 121, 126, 132, 147, 116, 134, 131, 142, 117, 130, 124, 129, 116, 147, 117, 135, 148, 149, 122, 134, 122, 136, 133};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> matches = {"-WWDLLWWDWLDLLDLLLDWWWLLLDWLLLLWDLDWDDLWWWDWWWWWDL", "D-DDLDLDLLDWLWLDLLWWWDLLLDDDDLWLDWDDWWWLLWWLLDDDDL", "DD-DDWDLWDLWLDDDDWDWWWDLLWDDDWLLDLLLDLWLLDLWLWDDWD", "LWW-WWWWLWDDWDDDWDLDDLWDWDLDLWDWDDWWWDWLLWWLWLWLWW", "WLLW-LWLDWLLLWLLLDWLWDDLLWLWLLDDLWWDDWLDDLDDDLDLDL", "DLLDL-LLDDLWWLLWLDWWDDWWWDLWWLLWLLWWDWDLWDDWLLWDDL", "WDDWWL-LDWDLLWLDLDDLDLWLWDWLWDLLDWDLWWDDDDDDWLDWWW", "DDDDDDD-DLDLDWWLLWDLLDWLWDWLWLWWDLWWWWWLLWDDDDWDDD", "WDDDDLWW-LDLDWLLLDDLLDWLDLDWDDDLLWDDWWWDWWLLDLLDLL", "WLWWWWDDL-LWLWLLWWDDDLLLWLWDDDWLDDLLDWDLWLWDWDLDDD", "DLDWWWLWDW-DWWWDWLWLWWWLLWWLLDDLWLDWLWLLLLWLLWLWDD", "WDDLDDDLWWD-DDWLDWWLLWWDLWWLWLDWLWLDWWLLLLDLWLLWWW", "WDWDLDWLLWDW-WDWLLLDDWLWDDDLDWLWWDWWDWWWDLDDLDDLDD", "WLDWWWLWWDWLW-DWDWDWWDLDDLDDDWWLLDDDLLDDDDWDDLWDDL", "WDWLWDWDWLDWLL-WDLDDLLWDLWDLLWLDWDLLWLLDWLLDWWLLDW", "DDWLWWDWDDLLWLW-WDLWLDLLWDDLLWWWLLDDLDLWWLLLLWDDWD", "DLWDLWLDDWLDLWDD-DDLDDDWLLWWLDWWDDWLLLDLDLLDDLWWLL", "DDLLDLDWLLLLDDWWL-DDDDDDWWWDWDDDWDWLWDLWLDLWWWWWDD", "WDDDLLWWWWWWWWLDDD-WDWWWDLWLWWWLWLWLWDWWWDDWWLLLDL", "LLDWDLLLDDWWWDLDDLD-WLDWWLWWWLDWWDWLLLDWLDDWWDLWWL", "WWLWLWLLWDWDLLLLDDWW-WLDWWWLWDWLWDLDLDLWLLWDDLLWLD", "DDWWWDDDWLDLWLLDWWLWL-LDWLDDWDWLDWWWLLDDDDWWLWWDDD", "DWLLDWDWWDDLDDDDWDWLLL-WWDWWDLLDDDDDDDWWLLDDLLWDDW", "DDLLDWDDDWWLWLWDWWWWWLD-WWLDDDWDDDDWLWLWLWDWDDLLLD", "DDWLWWLWLWLWLDLLWLLLLWDD-LWWDLDWDDDDWDDDLDLDDLDDWL", "LWLLWDLWLWWDDDDLDWLWLLLDW-DWWLWWDWLLWLDWDWWDLWWLWL", "LWLLLDLDWDLDDDWWLDLDWDWLLW-DDDLDLWDLDWLDDDWWDDLWLD", "DWWLWLDLWDLDLLLLLDWDWDWDWDW-DDDWLWLLLDDWDWWWWLLLLL", "DDLDLDWDWWWWLDWWDLWLDDWDDLWW-DDLWDWWDWDDWDDWDLLWWW", "WDLDWWWLDLLDWWLWLLWDDLLLLLDDL-WWDWLLWWDLWLWWDLDLLL", "LDDLLWWLLDWLLLDLDLLLWLWDWLLDDL-DWWDDLLDDWWLLLLWLLD", "LDDLDLLLLLDLWLLLWWWWDDLWWDLDLDW-DWLLLLLWWDWDDWWDLW", "DLLWLWLLWWWWDLWDWLDWWDWLWWWWDWWL-DWLLWWDWDWDLDLLWL", "LDDLLWWDDDLLLLDLWWWDWDLDLDLLLDDLD-LWWDWLWDDWDDLDDL", "WDDWDLDWLDDDWDWWDDWLWLWDLLWWLDWLDD-LDDWLWLLWWLLDLD", "LDLWLLDLWLLWWWLLWLDWDWWDLWWWDLWWWWW-WDDWWWWDDLWLDL", "DWWDWWWLDWWWWDWWLLLLLLWLLLLLDDWLWDWL-WWLLLWWLLLWLW", "DLWWDLLWDDLDLDLLDLWWWWLLLWLWDWLLLLDWD-DLLWWLDWDWDD", "DDLDWDDLDLDWWWDLDWWWWLLLLDDWDWDLWWLWDL-LLWWWLWWWLD", "WLDWLDLLDWWWLLWLLLDWLLDWWDLWLLWWLWLDWWD-DWLWDWWWWD", "LLWWLLWLWDWWWWWWLLDLDDWDWLDLDLDWLDLWLDLL-WWLLLWWLL", "LLLLLDWDDDDLLLDLLWWWWLLWLLDWDWDWLWLDLLWLW-WWDWLDLD", "DLLWWWWWWWWLLWDWDDWLLLLLWWWWWWLDWDLDWLWDDL-LLWDWLL", "DWLLLDDLWDLLLLWWLLDDWLDLDDWWLLDLDLDDDDWDDWD-DWDDWW", "WLDWLLLWWWLDWWLLWLWLLWLWLWWWWDWDLWDLWLLWDLDW-WLDWL", "DLDWWDDLWWWWWDWDDLLLLLWLDLLLDWDLWLLDDDLWWDDLD-LLDW", "DDDWLDDWDLDWDLLWWLWDLLLLLWDDDWWWWLLLLDWDLLWDDW-DWD", "LWWDLDWLWLDWLLLWWWDLWLWLLLDDWWLDLDLWLWWWDLDWWDW-DL", "LDWDWLDWLWLDDWWLDLWDLLWDLLLLLDDDDWLLDLDWWLDWWDWL-D", "DWDWWLWDDLDWDLDWLWWDDLLWWWLLLWDLLWWLDLLDDLDWDWDLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {128, 123, 126, 144, 122, 129, 129, 143, 107, 120, 144, 131, 142, 138, 133, 136, 125, 146, 134, 136, 128, 155, 131, 153, 128, 141, 111, 125, 146, 123, 98, 130, 144, 105, 138, 155, 134, 121, 134, 140, 127, 130, 125, 106, 140, 130, 132, 132, 123, 146};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> matches = {"-LLWLWLLWLWLLLLLLWLLLLWLLWLWLLLLLWLLLLLLLLWWWWLLLL", "W-WWWWLWWLWLWLWWLWLWWWWLWWWWWWWWWWWWLLWWWLWWWWLWWW", "WL-WWWLLWLWLLLLLLWLLWLWLWWLWLLLLLWWWLLWLWLWWWLWLLL", "LLL-LWLLWLLLLLLLLLLLLLWLLLLWLLLLLWLLLLLLLLLLLLLLLL", "LLWW-WLLWLWLLLLLLWLLWLWLWWLWLDLWLWWWLLLLLLWWWLLLLL", "LLLLL-LLLLLLLLLLLLLLLLLLLLLLLLLLLWLLLLLLLLLLLLLLLL", "WLWWWW-WWLWLWWWLLWLWWWWWWWLWWWWWWWWWLWWWWLWWWWLWWW", "LLLLLWL-WLWLLLLLLWLLWLWLLLLWLLLLLWWWLLLLWLWLWLLLWL", "LLLLLWLL-LLLLLLLLWLLLLWLLLLWLLLLLWLLLLLLLLLLLLLLLL", "WLWWWWWWW-WWWWWWWWWWWWWWWWLWWWWWWWWWWLWLWLWWWWWLWL", "LLLWLWLLWL-LLLLLLWLLLLWLLLLWLLLLLWLLLLLLLLLLWLLLLL", "WLWWWWWWWLW-WWWWWWLWWWWWWWDWWWWWWWWWLLWWWLWWWWWWWW", "WLLWWWLWWLWL-WLLLWLWWWWLWWLWWLLLLWWWLLWLDLWWWWLLLL", "WLWWWWLWWLWLW-WWLWLWWWWWWWLWWWLWLWWWWWWWWLWWWWLDWL", "WLLWWWLWWLWLWL-LLWLLWLWLWWLWLWLWLWWWLLLWWLWWWLLLWL", "WLWWWWLWWLWLLLW-WWLWWLWDWWLWWWLWLWWWLLWWWWWWWLLWWW", "WWWWWWWWWWWLWWWL-WLWWWWWWWLWWWWWWWWWWWWWWLWWWWWWWW", "LLLWLWLLWLLLLLLLL-LLLLLLLLLWLLLLLWLLLLLLLLLLWLLLLL", "WLWWWWLWWLWLWWWWLW-WWWWWWWWWWWWWWWWWLWWLWLWWWWLWWW", "WLLWWWLWWLWLLWWLLWL-WLWLLWLWWLLLLWWWLLWLWLWWWWLLWL", "WLLWLWLLWLWLLLLLLWLL-LWLLWLWLLLLLWDDLLLLLLLWWLLLLL", "WLWWWWLWWLWLWLWLLWLLW-WLWWLWLWLWWWWWLLWLWLWWWWLWWL", "LLLLLWLLLLDLLLLLLWLLLL-LLLLWLLLLLWLLLLLLLLLLLLLLLL", "WWWWWWWWWLWLWDWWLWLWWLW-WWWWWWLWWWWWWLWWWWWWWWLWWW", "LLLWWWLLWLWLLLLLLWLDLWWL-WLWLLLLLWWWLLLLLLWWWLLLLL", "LLLWLWLLWLWLLLLLLWLLWLWLL-LWLLLLLWWLLLLLWLWLWLLLLL", "WLWWWWWWWLWLWWWWLWLWWWWWWW-WWWLWWWWWWLWWWWWWWWWWWW", "LLLLLWLLLLLLLLLLLLLLLLLLLLL-LLLLLWLLLLLLLLLLLLLLLL", "WLWWWWDWWLWLLLLLLWWWWLWLWWLW-LLLLWWWLLDWWLWWWLLWLW", "WLWWWWLWWLWLLLLLLWLLLLWLLWLWL-LLLWWWLLDWLLWWWWLWWL", "WWWWWWWWWLWWWWWWWWLWWWWWWWLWWW-WLWWWWWWLWLWWWWWWWW", "WLLWWWLWWLWLLLLLLWLWLLWLWWLWLWL-LWWWLLWLWLWWWWLLWL", "WLWWWWWWWLWLWWWWLWLWWWWLWWLWWWLW-WWWLLWWWLWWWWLWWW", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL-LLLLLLLLLLLLLLLL", "LLLWLWLWWLWLLLLLLWLWWLWLLWLWLLLLLW-WLLLLLLWDLLLLLL", "LLLWLWLWWLWLLLWLLWLLLLWLLWLWLLLLLWW-LLLLWLLWWLLLWL", "WWWWWWDWWWWLWWWWWWWWWWWWWWLWWWWWWWWW-WWWWLWWWWLWWW", "WLWWWWLWWWWWWWWWLWLWWWWWWWLWWWWWWWWWL-WWWLWWWWWWWL", "WLLWWWLWWLWLWLLLLWLWWWWLWWLWWWLWLWWWLL-LWLWWWLLWWL", "WLLWWWLWWLWLWLLWLWLWWWWWWWLWWLLWLWWWLLL-LLWLWWLWWL", "LLLWLWLWWLWLWLDLLWLLWWWLWWLWLWLLLWWWLLLL-LWWWLLLWL", "WWWWWWLWWWWLWWWWLWLWWWWWWWLWWWWWLWWWWWWWW-WWWWLWWW", "LLLWLWLLWLLLLLLLLWLLWLWLLWLWLLLLLWWWLLLLWL-LWLLLLL", "WLLWWWLLWLWLLLLLLWLLLLWLWLLWLWLLLWLLLLLLLLW-WLLLLL", "LLLWLWLLWLLLLLLLLWLLLLWLLLLWLLLLLWDLLLLLLLWL-LLLLL", "WLWWWWLWWLWLDLLWLWLWWLWLWWLWWWLWLWWWLLLLWLWWW-LWWL", "WWWWWWWWWLWLLWWLWWWWWWWLWWLWWWLWWWWWLWWWWLWWWW-WWW", "WLWWWWLWWLWWWLWLLWLWWWWLWWLWWWLWLWWWLLLWWLWWWWL-WL", "WLLWLWLWWLWLLLLLLWLWLLWLLWLWLLLWLWWWLLLLLLWLWLLL-L", "WWWWWWWWWWWWWWWLLWLWWWWLWWLWWWWWWWWWLLWWWLWWWWLWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {90, 240, 141, 33, 109, 6, 233, 93, 27, 258, 49, 259, 158, 209, 157, 205, 261, 30, 255, 142, 86, 174, 25, 230, 106, 72, 262, 12, 158, 137, 246, 144, 219, 0, 75, 85, 259, 246, 161, 177, 119, 264, 69, 85, 46, 160, 246, 178, 111, 225};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> matches = {"-LDWLWLLWLWLLLLLLWLDDLWLLWLWLLLDLWWWLLLLLLWWWWLLDL", "W-WWWWLWWLWLWLWWDWLWWWWLWWWWWWDWWWWWLLWWWLWWWWLWWW", "LL-WDWLLWLWLDLLLLWLLWLWLDWLWLDLLLWWWLLDLWLWWWLDLLL", "LLL-LDLLDLDLLLLLLDLLLLDLLDLDLLLLLDDDLLLLLLDDDLLLLL", "LLDW-WLLWLWLLLLLLWLDWLWLWWLWLDLWLWWWLLLLLLWWWLLLDL", "LLLDL-LLDLDLLLLLLDLLLLDLLDLDLLLLLDDDLLLLLLDDDLLLLL", "WLWWWW-WWDWLDWWLLWLWWWWWWWLWWWWWWWWWLDWWWLWWWWLWWW", "LLLWDWL-WLWLDLDLLWLDWLWLDWLWLLLDLWWWLLLLDLWWWLLLDL", "LLLDLDLL-LDLLLLLLDLLLLDLLDLDLLLLLDDDLLLLLLDDDLLLLL", "WDWWWWWWW-WDWWWWWWWWWWWDWWLWWWWWWWWWWLWDWLWWWWWLWL", "LLLDLDLLDL-LLLLLLDLLLLDLLDLDLLLLLDDDLLLLLLDDDLLLLL", "WLWWWWWWWLW-WWWWWWDWWWWWWWWWDWWWWWWWLLWWWLWWWWWWWW", "WLDWWWLDWLWL-DLLLWLDWDWLWWLWDLLDLWWWLLWLDLWWWWLLLL", "WLWWDWLWWLWLW-WWLWLWWWWDWWLWDWLWLWWWDDWWWLWWWWLDWL", "WLLWDWLDWLWLWL-LLWLLWLWLDWLWLLLWLWWWLLLLDLWWWLLLWL", "WLWWWWLWWLWLDLW-WWLDWLWDWWLWWWLWLWWWLLWWWDWWWLLWWW", "WWWWWWWWWWWLWWWD-WLWWWWWWWLWWWWWDWWWWWWWWLWWWWWWWW", "LLLDLDLLDLDLLLLLL-LLLLDLLDLDLLLLLDDDLLLLLLDDDLLLLL", "WLWWWWLWWLWLWWWWLW-WWWWWWWWWWWWWWWWWLWWLWDWWWWDWWW", "WLLWWWLWWLWLLDWLLWL-WLWLDWLWDLLLLWWWLLDLWLWWWWLDDL", "WLDWLWLDWLWLLLDDLWLD-LWLDWLWLLLDLWWWLLLLLLWWWWLLLL", "WDWWWWLWWLWLWDWLLWLLW-WLDWLWDWLWWWWWLLWLWLWWWWLWWL", "LLLDLDLLDLDLLLLLLDLLLL-LLDLDLLLLLDDDLLLLLLDDDLLLLL", "WWWWWWWWWLWLWWWWLWLDWLW-WWDWWWLWLWWWWLDWWDWWWDLWWW", "DLLWDWLLWLWLDLLLLWLWLDWL-WLWLLLLLWWWLLLLLLWWWLLLLL", "LLLDLDLLDLDLLLLLLDLLLLDLL-LDLLLLLDDDLLLLLLDDDLLLLL", "WLWWWWWWWLWLWWWWLWLWWWWWWW-WWWLWWWWWWLWWWDWWWWDWWW", "LLLDLDLLDLDLLLLLLDLLLLDLLDL-LLLLLDDDLLLLLLDDDLLLLL", "WLWWWWDWWLWLDDLLLWWWWLWLWWLW-DLDLWWWLLDWWLWWWDDWWW", "DLWWDWLWWLWLDLLLLWLDLLWLLWLWL-LLLWWWLLLDWLWWWWLWDL", "WWWWWWWWWLWWWWWWWWLWWWWWWWLWWW-WLWWWWWWLWLWWWWWWWW", "WLDWDWLDWLWLLDLLLWLWLLWLWWLWLWL-LWWWLLDLWLWWWDLLDL", "WLWWWWWWWLWLWWWWLWLWWWWLWWLWWWLW-WWWLLWWWLWWWWLWWW", "LLLDLDLLDLDLLLLLLDLLLLDLLDLDLLLLL-DDLLLLLLDDDLLLLL", "LLLDLDLLDLDLLLLLLDLLLLDLLDLDLLLLLD-DLLLLLLDDDLLLLL", "LLLDLDLLDLDLLLLLLDLLLLDLLDLDLLLLLDD-LLLLLLDDDLLLLL", "WWWWWWDWWDWLWWWWWWWWWWWWWWLWWWWWWWWW-WWWWLWWWWLWWW", "WLWWWWDWWWWWWWWWLWLWWWWWWWDWWWWWWWWWL-WWWLWWWWWWWL", "WLLWWWLWWLWLWLWDLWLWWWWLWWLWWWLWLWWWLL-LWLWWWDLWDL", "WLLWWWLDWLWLWLWWLWLWWDWDWWLWWDLWLWWWLLD-DLWWWWLWWL", "LLLWDWLWWLWLWLWLLWLLDDWLDWLWLWLLLWWWLLLL-LWWWLLLDL", "WWWWWWLWWWWLWWWWLWLWWWWWWWLWWWWWLWWWWWWWW-WWWWLWWD", "LLLDLDLLDLDLLLLLLDLLLLDLLDLDLLLLLDDDLLLLLL-DDLLLLL", "LLLDLDLLDLDLLLLLLDLLLLDLLDLDLLLLLDDDLLLLLLD-DLLLLL", "LLLDLDLLDLDLLLLLLDLLLLDLLDLDLLLLLDDDLLLLLLDD-LLLLL", "WLDWWWLWWLWLWLDWLWLDDLWLWWLWWWLDLWWWLLLLWLWWW-LDDL", "WDWWWWWWWLWLDWWLDWDWWWWLWWLWWWLWWWWWLDWWWLWWWW-WWD", "WLWWWWLWWLWWWLWLLWLWWLWLWWLWWWLWLWWWLLLWWLWWWWL-WL", "DLDWLWLWWLWLLLLLLWLWLLWLDWLWLLLDLWWWLLLLDLWWWLLL-L", "WWWWWWWWWWWWWWWLLWLWWWWLWWLWDWWWWWWWLDWWWLWWWWLWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {107, 236, 124, 26, 114, 26, 228, 112, 26, 255, 26, 261, 136, 194, 133, 196, 259, 26, 256, 132, 112, 182, 26, 222, 105, 26, 256, 26, 170, 133, 247, 128, 223, 26, 26, 26, 258, 249, 168, 182, 118, 263, 26, 26, 26, 146, 235, 174, 116, 226};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> matches = {"-LWWWWWWLWWWWWWDWLWWWWWWWLWWLWWWWWWWWWWWWWWWWWDWWW", "L-WWWLWWWDWWWWWLWLWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", "LL-WLLWDWLWLLWWLDLLWLWDLLLLWWWWWLWWWDLWWLDLLLLDWWW", "LLL-LLDLLLWLLDWLLLLLLWLLLLLDLWLDLLWDLLLLLLWLLLLLLL", "LLLW-LWLLLWLLWWLLLLLLWDLLLLWDLDWLWWWLLWWLDWLLLDDWD", "LWWWW-LWLWWWWWWLWLWWDWWWLWWWWWWWLWWWWLWWWWWWWWWWWW", "LLWWLL-DLWWLWWWLWLDLLWLLWLDWLWWWLWWWWLWWWWWDLLWWWL", "LDWWWLL-LWWLWWWDLWLWWWWLWLLWLWWWLLWWLLLWLDWLWLWLWD", "LLLWWWWW-WWWWWWWWLWWLWWWWLLWDWWWLWWWWLWWWWWLLLWWWW", "WLWWWLLWW-WLWWWDWDWLLDDWWWLWWWWWLWWDWWLWWWWLWLWWWW", "LLDDLLLLLL-LLLWLLLLLLLLLLLLLLDDDLDDDLLLLLLDLLLLLLL", "WWWWWLWWWWW-WWWLWLWWWWLLWWWWLWWWLWWWDWWWLWWDDWWWWW", "LLLWWLLLLLWL-WWLLLLDDDWLDLLWLWWWLWWWLLLWLLWLLLWDWD", "LLLLLLLLLLWLL-DLLLLDLLLLLLLLLWLWLLWLLLLDLLDLLLLLLL", "LLDWLLLLLLDLLW-LLLLLLWLLLLLLLLDDLLLDLLLLLLLLLLLLLL", "WLWWWWWDLWWWWWW-WLLWLWWLWWWWWWWWWLWWWWLWDWWLLLWWWL", "LLWWWLLLLLWLWWWW-LLDWWLLLLWWLWDWLLWWWDLWLLWWLLWWWL", "WWWWWWWWWWWWWWWWW-WWLWWWDWWWLWWWWLWWWWWWWWWWWWWWWW", "WLWWWLWWWWWLWWWLLL-DLWLLLLLWLWWWLWWWDWWWWWWLWLWWWD", "WLLWWLLDLLWWWWWLLLL-LDWLLLLWLWWWLWWWWLLWLWWWWLWWWD", "LDWWWWWLWLWLWWWWWWDW-WWLWLWWWWWWWWWWWWWWDWWLLLWWWW", "LLLLLLLLLLWLLDWLLLLLL-LLLLLDLDWWLLWLLLLLLLDLLLWLWW", "LLDDLLLLLLWLDWWLWLLLDW-LLLLWLWWWLDWWWWLWWWWLLLLDWL", "LWWWWWWLWWWWWWWLWLWWLWL-LLWWWWWWLWWWWLWWWWWWDWWWWW", "WLWWWLWLWLWWWWWWWLWLWWWL-WWWLWWWLWWWWDLWWWWLLLWWWW", "LLWWWLWLWWWWWWWWWLLWDWDLW-WWWWWWLWWWLLLWWWWWWLWWWW", "LLLWWLWLLWWWWWWLLLLWLWLLWW-WLWWWLWWDLLLWLWWWLLDLWL", "LLLDLLLLLLDLLLDLLLLLLDLLLLL-LDLDLLWWLLLLLDLLLLLLWL", "WWWWWLWWWLWWDWWLDLLWDWWWWWLW-WWWLWWWWLWWWWWLLLWWWW", "LLDDLLLLLLDLLDWLLLLLLDLLLLLDL-LWLWWLLLLLLLLLLLLLDL", "LLLWLLDLLLWLLWWLLLWLLWLLLLLWLW-WLWWLLLLWLDWLWLLLDL", "LLLLLLLLLLLLLLDLLLLLLLLLLLLDLDL-LLDDLLLDLLDLLLLLLL", "WLDWWLWWDWWLWWWWWLWWLWWLWWWWLWWW-DWWWWWWLWWWWLWWWW", "LLWWWLLLLLWLDDWLLLLLLWLLLLWWLWWWL-WWLLWWLWWLWLLWWW", "LLDDLLLLLLDLLLLLLLLLLLLLLLLDLWLWLL-LLLLDLLDLLLLLLD", "LLLLLLLLLLWLWWDLLLLLLWLLLLLDLLWWLLD-LLLDDLLLLLLLDL", "LLLWLLLLLWWDWWWLLLWWLWDWLWDWWWWWWWWW-LLWWLWLDLWWWL", "LWLWDLWWLLWLWWWLWLLWLWLWLLLWLWWWLWWWW-DWWLWLLLDWWW", "LLWWLLWWLLWLWWWLLLLWWWWLLWWWWWLWLWWWLL-WLWWLLDWWWW", "LLLLLLLLLLWLDDWLLLLLLLLLLLLDLLDDLLDDLLL-LLDLLLDLWD", "LLWWWLLWLLWLWWWWDWWDLDWDLLWWLWWWLLWDLWLW-LWLWWWWDD", "LDWWDLLLLLWLLWWLLLLWLDLLLLLWLLLWLLWWLLLWL-WLDLWLWL", "LLLWDLLLLLDLDWDLLLDLLLLLLLLLLWLWLLDLLLLWLL-LLLDLDL", "LLWWWWLWWLWWWWWLWWLWWWWWLLDWWWWWWWWWWWWWLWW-WWWWWL", "DLWWWWWWLLWWWWWLLLLWLWWWLLWWWWWWLWWWWWLWDWWW-WWWWW", "WLWWLLWWWWWLWWWLWWWWLWWWWLWWLWWWWWWWWDWWWLWWW-WWWW", "LLLWDLLLLWWLWWWLLLLWLWWLLLLWLWDWLWDWLLLWLLDLDL-DWW", "LLWWLLWLLLWLLDWLLLLLLDLLLLWLLWWWLLWWDLLWLWDLDLW-WW", "LLLDLLLLLLDLLDDLLLLLLDLLLLLWLWLWLLWDDLLLLWWLLLDL-L", "LLLWDLWLLWWLWWWLLLLLLWWLLLLWLWWWLLWWLLWWLLLLLLDLD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {243, 256, 132, 44, 117, 244, 159, 170, 215, 198, 21, 220, 107, 35, 23, 224, 159, 266, 192, 146, 227, 55, 137, 224, 207, 218, 161, 38, 215, 38, 81, 12, 237, 125, 22, 51, 159, 183, 176, 44, 173, 108, 49, 222, 197, 236, 102, 111, 50, 119};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> matches = {"-WWLWWWWWWLWWWLWWWLLWWWWWLWLLWWWLWWWWWWWWLLLLWWWWW", "L-WLDWWDLWLLWLWLWDLLDWWWWLLLLLLWLLWLWWDWLLLLLWWLDD", "LW-LWWWLWWLLWLLDWLWWLWWLLLLLLLLWLLLLWWWWLWLLLWWLWL", "LWW-WWWLWWLDWLLWWWWLDWWWLLLLWWLWLLWLWWWWLWWLLWWWWL", "LWWL-LDLWWLLWLLLWLLLWDWLWLLLDLWWLLLLWWLWLDLLLWWLWL", "LWLLW-WLDWLLWLLLWLLLLWWWWLLLLLLWLWLLWWWWLWLLLDWLLL", "LDLLWL-LLWLLDLLLDLLLDWWDLLLLLLLWLLLLWDDDLLLLLLDLLL", "WWWDWWW-WWLDWLWLWWLLWWWLWDLLLLWWLWWLWWWWLWLWDWWWDL", "WWDLWDDL-WLDWLLLWWLLLWWLWLDWLWWWLLWLWWWWLLLDLLWLLD", "LLLLLLLLL-LLDLLLDLLLLDDLLLLLLLLDLLLLDDLDLLLLLLDLLL", "LWWWWWWLWW-LWWWWWLWLWWWWWLWWWWWWWWWWWWWWLWDLWWWWWL", "WDLWWWWWWWW-WWWLWDLLWWWWWWWLWWWWLLWLWWWWLWLWLWWWLL", "LLLLLLDLLDLL-LLLDLLLLDDLLLLLLLLDLLLLDDDDLLLLLLDLLL", "WWLWWWWWWWLWW-WWWWDLWWWWWWWWWLWWWDLLWWWWLWWLDWWWWL", "LWWWWLWLWWLWWD-WWLLWWWWWWWWWWLWWWWWLWWWWLWWLWWWWWW", "WDWLWWWDWWWLWLL-WLLLDWWWLDLLLLWWLLLWWWWWWWWLLWWWWL", "LLLLLLLLLDLLDLLL-LLLLDDLLLLLLLLDLLLLDDDDLLLLLLDLLL", "LWWLWLWLWWLLWLWDW-LWWWWWWWWWLWWWLWWDWWWWLWWDWWWLWW", "LWWWWWWWWWWLWWWWWW-WWWWWWLWWLWWWDWWLWWWWWWWLWWWWWL", "WWWWWWWLWWWLWWLLWWL-WWWWWDWWLWWWLWWLWWWWLWLWWWWWWW", "LWLLWWDLLWLDWLLLWLLL-WWWLLLLLLLWLLWLWWWWLWLLLLWLLW", "LLLLLLDLLDLLWLLLWLLLL-WDLLLLLLLWLLLLDWDWLLLLLLWLLL", "LLLLLLDLLDLLDLLLDLLLLD-LLLLLLLLDLLLLDDLDLLLLLLDLLL", "LDLLLLDLLWLLWLLLWLLLDWW-DLLLWDWWLLLLWWDWLLLDLWWLDL", "LDWLWWWLLWWLWLLLWLLWWWWL-LLLLDWWDWWWWWWWLWLLLWWLWL", "WWWWWWWWWWLLWDLWWWWWWWWWW-LWWWWWLWWWWWWWWDWLWDWWWW", "LWDLWDWLWWWLWLLDWWDLWWWDWL-WWLWWLWWLWWWWLLWWLWWWWW", "DWWLWWWLWWWLWLLLWWLLWWWWWLD-LWWWLWWWWWWWLWWLLWWWWL", "LWWLWLWWWWWWWLWLWWLWDWWWWLLL-WWWLDWLWWWWLDLDLWWWWW", "LWWWLWWWWWLWWLWDWLLWDWWLWLWWW-WWLWWLWWWWLDDLWLWLWL", "LLWLLDWLLWLLWLLLWWDWLWWDLLLLWW-WDLWLWWDWLLDLLDWWDW", "LLLLLLLLLDLLDLLLDLLLLDDLLLLLLLL-LLLLDDLDLLLLLLDLLL", "DWLWWWWDWWWWWLWDWWLWWWWWWWLWWLWW-WWLWWWWLWDLWWWWWL", "LWWDLWWLWWLLWLLWWDWLWWWWWLDLWLWWL-WLWWWWLWLLLWWDWW", "LLLDWDWLLWLLWLLWWLLWWWWWWLLLLWWWLD-LWWWWLWLDLWWLWL", "WWWLWWWWWWWWWWWLWLLWWWWDWLLLWWWWLWW-WWWWLWWWLWWWWL", "LLLLLLDLLDLLDLLLDLLLLLDLLLLLLLLDLLLL-DLDLLLLLLDLLL", "LLLLLLDLLDLLDLLLDLLLLDDLLLLLLLLDLLLLD-DDLLLLLLDLLL", "LLLLDLDLLWLLDLLLWLLLLLWLWLLLLLLDLLLLDW-WLDLLLDWLLL", "LLLLLLLLLDLLDLLLDLLLLDDLLLLLLLLDLLLLDDL-LLLLLLDLLL", "LWWWWWWWWWWLWWLWWWLLWWWWLWWWWWWWDWWWWWWW-WWDWWWWWW", "LWLLDWWLLWLLWLLLWLLLWWWWLLLLLLLWLLWDWWWWL-LLLWWWWD", "LWWWWDWLWWLLWWLWWLLLWWWWWLLWLLWWWWLLWWWWLW-WLWWLLW", "LWWLDWWLWWWWWDWWWWLLWWWWWWLWWWWWWLWLWWWWLWW-WWWDWW", "LWWLWWWWWWLDWLLLWWWLWWWLWWWWWWLWWLWLWWWWLWWW-WWDDL", "LLWLLWDLLWLLWDLLWLLLWWWDDLLLWLLWLWDLWWWWLLDLW-WDLL", "LLLLLLDLLDLLDLLLDLLLLLDLLLLLLLLDLLLLDDDDLLLLLL-LLL", "LWWLWWWWWWLLWLWLWLLLWWWWWLWWWLLWLWLLWWWWWWLLLWW-LW", "LWDLDLDWDWLLWWWLWWLWLWWWLLWLLLLWLLLLWWWWLWWLLLWD-L", "LWWLDDWWWWLLWLLWWWLLWWWWWLLLLWWWLWWLWWWWDDLLLDWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {227, 108, 127, 197, 106, 116, 52, 194, 129, 18, 229, 217, 21, 226, 220, 183, 19, 192, 247, 223, 111, 43, 18, 104, 137, 240, 197, 197, 188, 183, 131, 18, 233, 169, 137, 234, 19, 20, 55, 18, 255, 123, 186, 228, 212, 108, 19, 167, 133, 182};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> matches = {"-DDDDDWLDDDLDDDDDWDDDDDDDDWDDDDDDDLDLDDDDDDDDDDWDD", "D-DDDWWDWDWDWWDWDWDDDDWDDDWDWWDWDWDDDDDWDDDWDDWWDD", "DD-DDDWDDDWDDWDDLWLDDDDDDDDDDWLDDDDDLDDWDDDDDDDDDD", "DLD-LDDDDDDLDDDDLDLDDDDDDLDDDDLDDDLDDDDDDLDDDDDDDD", "DDDD-DWDDDWDDWDDDWDDWDDWDDWDWWDDDWDDDWDWDDDDDDDWDD", "DDDDD-WLDDWDWWDDDDDDDDDDDLWDDDDDDDDDLDDWDLDDDDDWDD", "DLLDLD-LDDDLDDDDLDLLDLLDLLDLDDLLLDLLLDLDDLLDLDDDDD", "WDWWDDW-WWWDWWDWDWDDWDDDDDWDDWDDWWDDDWWWWDDWDDWWWD", "DDDDDDDD-DWLDDDDDDDDDDDDDDDLDDLDDDDDDDDDDDDDDDDWDD", "DLDDDDDDD-DLDDDDLDLLDDLDDLDLDDLDDDLLLDDDDLDDDLDDDD", "LLDDLDDLLD-LDDLDLDLLDLDDLLDLDDLLLDLLLDLDDLLDLLDDDD", "WDWDWDWDDDW-WWWWDWWDDDDWDDWDDWDWWWDDDWDWWDWWDDWWDW", "LDDDLDDLDDDL-DLDLDLLDDLDDLDLDDLDLDLLLDLDDLLDLLDDDD", "DLLDLDDLLDDLD-DDLDLLDLLDLLDLDDLLLDLLLDLDDLDDDLDDDD", "DDDDDDWLDDDDDW-DDWDDDDDDDDWDDWLDDDDDDDDWDDDDDDDDDD", "DDDDLDDLDDDLDDD-LDLLDDDDDLDLDDLDDDLDLDDDDDLDDDDDDD", "DDDWDDWDWWWDWWDD-WDWWDDWDDWDWWDWDWDDDWDWDDDWWWWWWD", "DLLDLDDLDDDLDDLDL-LLDLDDLLDLDDLLLDLLLDDDDLLDLLDDDL", "DDDWDDWDDWWDWWDDDW-DWWDDDDWDWWDDDWDDDWDWWDDWDDWWDW", "DDDWDDWDDDWDWWDWDWD-WDDWWDWDWWDDWWDDDDDWWDDDDDWWWD", "DDDDLDDLDDDLDDDDLDDD-LLDDDDLDDLDDDLLLDDDDLLDDLDDDD", "DDDDDDWDDDWDWWDDDWDDW-DDDDWDDWDDDDDDLDDWWDDWDDDDDD", "DDDDDDWDDWWDDWDDLWDDDD-DDDWDDDDDDDLDDDDWDDDDDDDWDD", "DDDDDDDLDDDLDDDDDDLDDDD-DDDDDDDDDDDDLDDDDLDDDDDDDD", "DDDDDDWDDDWDWWDDLWDDDDDW-LWDDDDDDDDDDDDWDDDDDDWDDD", "WDDWDDWLDDWDWWDDDWDDDDDDD-WDDWLDDWDDDWWWDDDDDDWWWD", "DLLDLLDLLDDLDDDDLDLLDLDDLL-LDDLLLDLLLDDDDLLDLDDDDD", "WDDDDWWDDWWDWWWWDWDDWDDWDDW-DWDDDWDDDWDWWDWDDDWWDD", "DDDDLDDLDDDLDDDDLDLDDDDDLLDL-DLDDDDDLDDDDLDDDDDDDD", "DLDDLDDLLDDLDDDDLDLLDDDDDLDLD-LLDDLLLDDDDLLDDLDDDD", "WDWWDWWDDWWDWWDWDWDDWWDWDDWLWW-WDWDWDWDWWDDWDDWWWW", "DDDDDDWLDDDDDWDDDWLDDDDDDDWDDWD-DDDDDDDDDDDDDDDDDD", "DDDDDDWDDWWLWWDDDWDDDDDDDDWDWWDD-DDDDDDWDDDDDDDWDD", "LLDDLDDLDDDLDDLDLDLLDLLDLLDLDDLDL-LLLDDDDLLDDDDDDD", "DDDDDDWDWWWWWWDWDWDDWDWWWDWDWWDDDW-DDWDWDDDWDDWWDD", "DDDDDDWDDWDDWWDDLWDDDDDDDDWDWDDDDDD-DDDWWDDDDDDWDD", "DDDDDDWDDWWDWWDDDWDDDWDDDDWDWWDDDWDW-WDWWDDWDDWWWW", "DDDDLDDLDDDLDDDDDDDDDDDDDDDLDDDDDDLDD-DDDLDDDDDDDD", "DDDDDDWDDDWLWDDDLDDDDDDDDLDLDWLDDDDDDD-DDDDDDDDDDD", "DLDDLLDLLDDLDDLDLDLLDLDDLLDLDDLDLDLLLDL-DLLDLLDDDD", "DLDDLDDLDDDLDDDDLDDDDDDDLLDLDDLDDDLDLDDD-DDDLLDDDD", "DDDDDDWDDDWDWWDDDWDDDDDDDDWLDDLDDDDDDDDWD-DDDDDWDD", "DDDDDDDLDDWDDWDDLDDDDDDDDDWDDWDDDWDDDDDWDD-DDDDWDD", "DDDDDDDLDDDLDDDDLDLLDLLDDDDDDDLDDDLDDDDDDDL-DDDDDD", "DDDDDDWDDWWDWWDDDWDDDDDDDDWDWDLDDWDDDDDWDDDD-DDWDD", "DDDDDDWDDDWDDWDDLWDDWDDDDDWDWDDDDWDDDDDDWDDDD-DWDD", "DDDDLDDLDDDLDDDDLDLDDLLDDDDLDDLDDDLDLDDDDLDDDD-DDD", "DLLDLDDLLDDLDDLDLDLLDLLDLLDLDDLLLDLLLDLDDLLDDDD-DL", "DLDDLDDLDDDDDDDDDDLLDDDDDLDDDDLDDDDDLDDDDLDDDDDD-D", "DDDDDDDDDDWDWWDDDWDDDDDDDDWLDDLDDDLDLDDDDDDDDDDDD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {103, 160, 113, 83, 159, 109, 49, 196, 107, 73, 48, 195, 57, 49, 118, 79, 196, 49, 177, 165, 74, 138, 128, 85, 132, 166, 49, 184, 75, 61, 207, 116, 134, 62, 184, 139, 184, 82, 111, 51, 75, 150, 132, 79, 132, 134, 74, 51, 83, 104};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> matches = {"-DDDLDWLDDWLDDDDLWDDDDDDDDWLDWDDDDLDLDDWDDDDDLDWDD", "D-DWDWWDWWWDWWDWDWDDWDWWDDWWWWDWDWDDLDDWDWDWDDWWDD", "DD-DDDWDDDWLDWDDLWLDWDLDLDDDDWLDDDLDLDDWDDDDDDDDDD", "DLD-LLDLDDDLDDDDLDLDDDLDDLDLDDLDLDLDLDDDDLLDDLDDDD", "DDDW-DWLDDWDDWDDLWDDWDDWDDWDWWLDDDDDLWDWDDDDDDDWDD", "DDDWD-WLDWWDWWDDDWDDWDDDDDWDDWDDDDLDLDDWDLDDDDDWDD", "DLLDLL-LLDDLDDLLLDLLDLLLLLDLDDLLLDLLLLLDDLLLLLDDDL", "WDWWDDW-WWWWWWDWDWDDWDDDDWWDDWDWWWDDDWWWWDDWDWWWWD", "DDDDDDWL-DWLWDDDLDDDDDDDDDWLDDLDDDLDLDDDDDDDDDDWDD", "DLLDDLDLD-DLDDDDLDLLDDLDDLDLDDLDDDLLLDDDDLDDLLDDDD", "LLDDLLDLLD-LDDLDLDLLDLLLLLDLDDLLLDLLLDLDDLLDLLDDDL", "WDWWWDWDDWW-WWWWLWWDWWWWDDWDDWDWWWDDDWDWWDWWDWWWDW", "LLDDLDDLDDDL-DLDLDLLDDLDDLDLDDLDLDLLLDLDDLLDLLDDDD", "LLLDLLDLLDDLD-LDLDLLDLLDLLDLDDLLLDLLLLLDDLLLLLDDDD", "DDDDDDWLDWWDWW-DDWDDWDDDDDWDWWLDLDLDDDDWDDDDDDWWDD", "DDDDLLDLDDDLDWD-LWLLDDDDDLDLDDLDDDLDLDDWDDLDDDDDDD", "WDDWWDWDWWWDWWDD-WDWWDDWDDWDWWDWDWDDDWWWWDDWWWWWWW", "LLLDLLDLLDDLDDLLL-LLDLLLLLDLDDLLLDLLLLLDDLLDLLDDLL", "DDDWDDWDDWWDWWDDDW-DWWDDDDWDWWDDDWDDDWDWWDWWDDWWDW", "DLDWDDWDDDWDWWDWDWD-WDDWWDWDWWDWWWDDDDDWWDDDDDWWWD", "DLDDLDDLLDDLDDDDLDLL-LLDLDDLDDLDLDLLLDDDDLLDDLDDDL", "DDDDDDWDDWWDWWDDDWDDW-DDLDWDDWDDDDDDLDDWWDDWDDDWDD", "DDDDDDWDDWWLWWDDLWDDDD-DDDWDDDDDDDLDLDDWDDDDDDDWDD", "DDDDDDDLDDWLDWDDLWLDDDD-DDDDDDDDLDDDLDDDDLDDDDDDDD", "DDDDDDWDDWWDWWWDLWDDDDDW-LWDDWDDDDDDDWDWWDDDDDWWDD", "WDDWDDWLDDWDWWDDDWDDWDDDD-WDDWLDDWDDDWWWDDDDDDWWWD", "DLLDLLDLLDDLDDDDLDLLDLLDLL-LDDLLLDLLLDDDDLLDLLDDLD", "WDDWDDWDDWWDDWWWDWDDWDDWDWW-DWDDDWDDDWDWWDWDDWWWDD", "DDDDLDDLDDDLDDDDLDLDDDDDLLDL-DLDDDDDLDDDDLDDDDDDDD", "LLLDLLDLLDDLDDLDLDLLDLLDLLDLD-LLLDLLLDDDDLLLLLDDDL", "WDWWDWWDDWWLWWDWDWDDWWWWDDWDWW-WDWDWDWDWWDDWDDWWWW", "DDDDDDWLDDWLDWDDDWLDDDDDDDWLDWD-DDDDLDDDDDDDDDWDDD", "DDDWDDWDDWWLWWDDDWDDDWDDDDWDWWDD-WDDDDDWWDDWDDWWDD", "LLDDLLDLDDDLDDLDLDLLDLLDLLDLDDLLL-LLLDDDDLLDDDDDDD", "DDDWDDWDWWWWWWDWDWDDWWWWWDWWWWDDDW-DDWDWDWDWWDWWWD", "DLDWDDWDDWWDDWDDLWDDDDDDDDWDDWDDDDD-LDWWWDDDDDDWDD", "DDDWDDWWDWWDWWDWDWDDWWWDDWWDWWDWDWDW-WWWWDWWWDWWWW", "DLDDLLDLDDWLDWDDDDDDDDDDDDDLDDDDDDLDD-DDDLDDDDDDDD", "DDDDDDWDDDWLDWDDLDDDDDDDDLWLDWLDDDDDDD-WDDDDDDDWDD", "DLDDLLDLLDDLDDLLLDLLDLLLLLDLDDLDLDLLLLL-DLLDLLDDLL", "DLDDLDDLDDDLDDDDLDDDDDDDLLDLDDLDDDLDLDDD-DDDLLDDDD", "DDDWDDWLDDWDWWDDLWDDDDDDDDWLDWLWDDDDLDDWD-DDDDDWDD", "DDDWDDWLDWWLDWDDLWDDDDDDDDWDDWDDDWLDDDDWDD-DDDDWDD", "DDDDLDDLDDWLDDDDLDLLDLLDLDDDDDLDLDLDDDDWDDL-DDDDDD", "DDDDLDWDDWWDWWDDLWDDDDDDDDWDWWLDDWDDLDDWDDDD-DDWDW", "DDDWDDWDDWWDDWDDLWDDWDDDDDWDWWLDDWDDDDDWWDDDD-DWDD", "LLLDLLDLDDDLDDLDLDLDDLLDLLDLDDLDLDLDLDDDDLLDDL-DDD", "LLLDLLDLLDDLDDLLLDLLDLLDLLDLDDLLLDLLLDLDDLLLLLD-LL", "DLDDLDDLDDDDDWDDLWLLDDDDLLWDDDLDDDDDLDDDDLDDDDDD-D", "DDDDDDDDDDWLWWDDLWDDWDDDDDWLDDLDLDLDLDDWDDDDDDWWD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {114, 183, 117, 63, 160, 144, 38, 213, 115, 61, 37, 217, 56, 37, 137, 91, 224, 35, 181, 168, 59, 140, 139, 96, 158, 165, 43, 188, 75, 43, 213, 115, 162, 60, 206, 141, 222, 91, 116, 39, 72, 151, 142, 87, 139, 150, 60, 39, 94, 117};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> matches = {"-LLLLLLLLLLDLLLLLLLDDLLDLDLLDLDLLDLLLDLLLDLLLLLDLL", "W-LDLLLDLLLLLDWLDLLDWWLWWWLLWLWLLLWWWWLLWWLWLLWDLL", "WD-WWLLWLWLLWWLWWWLWWDLWWWDDWLWLLWWWWWLDLDWDLLWDLW", "WWL-LLLDWLLWLWLDDWWWDWLWLWLLWWDLLLDLWWLWWWDLLLDDWL", "WWWW-WDDLLLWLLLLLWLWWWLWWWWWWWWLWWWLWWWLWWLWLLWWLW", "WWWWW-LWWWLWLWLWWWLWWWLWWWWWWWWWWWWWLWLWLWWWWWWWWL", "WWDWWL-WWLWWWWWWWWLWWWLWLWWWWWWLLWWLWWLDWWLWLWWWWL", "DLLLLLL-LLDDLLLLDLLWWWLDLDLLDLDLLWWLLWLLLWLLLLLDDL", "WLWWLLDW-WWWLWLDLLLWWWLWWWLWWLWDWWWLWWLLWWLWLLWWLW", "WWLWWWLWW-WWWWWWWLWWWWWWWWWWWWWLWWWWWWLWLWWWLLWWWW", "WWWWWLLWWW-LWWWWWWWWWWWWWWWWWWWLWWWWWWLWWWWWWLDWLL", "WWLLLLLLLLL-LWLLLLLWWWLWDDLLWLWLLLWLLWLLLWLLLLWWDL", "WWLWWLLWLLWW-WLWWWWWWWWWWWLLWLWWWLWLWWLWWWWWLWWWWL", "WWDWLLLWWLLWL-LLWLLDWWLDLWLLWLWLLWWLDDLLLDLWLLWWWL", "WWWWWLWWDWLWLL-WWLLWWWLWWWWWWLWLWWWLWWWLWWWWLDWWLD", "WWDWWLWWLLWWLWD-DLLWWWLWWDLDWWDLWWWLWDLLLWLLWLWWDW", "WDWWDLLWLLLWLWLD-LLWWWLWWWLLWWWLLWWLLWLWWWWLLLWDDL", "WWDWLLDWDLWDLWLDW-WWWWLWWWDWWWWWDWWWWWLWLWWWWLWWDW", "WLLWWLWWWLLWLWWWWL-WWWWWWWWWWLWLWWWLWWLLDWLWLLWWLL", "DDLLLLLLLLLDLLLLLLL-DDLDLDLLDLDLLLDLDDLLLDLLLLLLLL", "DLLLLLLDLLLLLLLLLLLD-LLDLDLLDLDLLDDLLDLLLDLLLLLLLL", "DLLDLLLWLLLLLWLWLLDDW-LWWWLLDLDLLDWLDWLLLWLLLLWLLL", "WWWWLWWWLLLWLWLWWWWWWW-WWWWWWWWLWWWLWWDWWWWWWLWWWW", "DLLLLLLDLLLDLDLLLLLDDLL-DDLLDLDLLDLLDDLLLDLLLLLDLL", "DWLLLLLDLLLLLLLLWLLWWWLW-WLLWLWLLLWLDWLLLWLLWLLLDL", "DLLDLLLDLLLLLLLLLLLDDLLDL-LLDLDLLLLLLDLLLDLLLLDLLL", "WWWWWWLWLLLWWWLLWLDWWWWWWW-LWLWLWWWWWWDWLWLWLLWWWL", "WDLWLLWWLLLDLWLWLLDWDDLWWWW-DLWLWDWLLWLWLWWLWLWWLW", "DLLLLLLLLLLDLLLLLLLDDDLDLDLL-LDLLLDLLDLLLDLLLLLLLL", "WWWWWLWWWWWWLWWWWWWWWWLWWWWWW-WLLWWLWWLLWWLWLWWWWW", "DLLLLLLLLLLDLLLLDLLDDLLDLDLLDL-LLDLLLDLLLDLLLLLLLL", "WWWWWWLWWLLWWWLLWLWWWWWWWWWWWWW-WWWWWWLWWWWWWLWWWW", "DWWWLLLWWLWLLWLWWLLWWWLWDWDWWLWL-WWDWWLLLWLWLLDWLD", "DLLWLLLDLLLWDDLLLLLWWWLWLWLLDLWLL-LLDDLLDWLDLLDWLL", "DLLLLLLDLLLDLLLLLLLWWLLDLWLLWLWLLL-LLDLLWDDWLLWWLL", "WWLWLLWWWWWWLWLLWWWWWWWWDWWWWLWLWDW-WWWWWWWWLWLWWW", "WWWWDLLWDLLDLDLLDLLWWWLWWWLWWLWLLWWW-WLDLWWWLLWWDL", "DLDDLLLLLLLLLDLLLLLDDLLDLDLLDLDLLLLLL-LLLDLLLLLDLL", "WWWWWWWWWWWWLWLLWWWWWWWWWWWWWLWWWWWLWW-WWWWWWWWWWW", "WLLLDLLWLLWLLDLLLLWWWWLWWWWWWLWLLWWWWWL-DWLWLLLWLW", "WWLWLDLLLLLLWWLWWLLWWWWWWWLLWLWWLDWLWWLW-WDWLLWWLD", "DLLLDLLDLLLDLDLDLLLDDLLDLDLLDLDLLDDLLDLLL-LLLLLDLL", "WDWWDDWWLLLWWWWWWWWWWWLWWWLWWLWLLWDWWWLLLW-LLLWDWL", "WWLWWLLDLLLWLLLWWLDWWWLWWWLDWLDLLWWLWWLLWWW-LLDWWL", "WWDWDLDWLWWWWWLWWWWWWWLWWWWWWWWWWWWWWWWWWWLW-LWWWL", "WWWWWWWWDLWWLWWWWWWWWWWWWWWWWLWDWWWWWWWWWWWWW-WDWL", "WLLLWLLDLLLWLLLDLLLWWWLWWWLLWLWLDWWLLDLLLWLLLL-LLL", "WDLLLLLDDLLLLLLLDLLWDLLWDDLDDLWLLLDLDDLLLWLLLLL-LL", "WLWDWLLWLLLWLWLLLLLWWWLWWWWLWLWLWWWLLWLLLWLWLLLW-L", "WWLWWLLWWLLWDWWWWWWWWWWWWWWWWDWLWWWWWWDWLWWWWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {25, 114, 170, 113, 173, 239, 216, 65, 185, 243, 227, 92, 221, 109, 220, 161, 135, 206, 188, 24, 22, 72, 232, 26, 90, 23, 185, 149, 24, 226, 24, 248, 164, 82, 59, 216, 128, 26, 258, 162, 166, 27, 182, 136, 234, 253, 94, 62, 149, 222};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> matches = {"-WWWWWWWWWLLWDLWWWWWWLWLWWWWWWWWLWWWWWWWLWWWWWWWLW", "L-LWLLLLWWLLLLLWLWLLLLLLLWWWDLWWLLWLLLWLLLWLLLLLLL", "LW-WWWWLWWWWWWWWLWWWWLLLWWWWWWWWLWWWLWWWLLWWLWLWLW", "LWL-LLLLLWLLLLLWLWLLLLLLLWLLWLLWLLLLLDLLLLWLLLLLLL", "LWLW-WWWWWLWWWWWLWWWWWWLWWWWWWWWLWLLWWWLLLWWWWLWLW", "LLLWL-LWWWLLLWLWWWLWLLWLWWWWWLWWLLLLLWWLWLWWLDLWWL", "LWWWLW-WWWLLWLLWLWLWWLLLWWLWWWWWLWWWWWWWWLWWLWWWLW", "LWLWLWL-LWLLLLLWLWLWWWWLWWWWWWWWLWWWLWWWWLWWWWLWLL", "LWLWLWWL-WLLLLLWLLLLWLLLWWWLWLLWLLLLLLWLLLWLWWLWLW", "LLLLLLLLL-LLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLL", "WWLWLWWWWW-LWWWWLWWWWLLWWWWWWWWWWWWWWWWWWWWWWWWWLW", "WWLWWLWLWWL-WWWWWWWWWLLWWWWWWWWWLLWLWWWWLLWWLWLWLW", "LLLWLWWWWWLW-LWWLWLWWLLLWWWWWLWWLWLWWWWLWLLWLWLWWW", "WWWWWLLWWWLLW-LWLWWWWWLLWWWWWWWWLWWWWWWLWWWWWWLWLW", "LWLWLWLWWWLLWL-WLWWWWDLLWWWWWLWWLLWLLLWWLLWLWWLWLW", "LWLLLLLLLWLLLLL-LWLLWLLLLWLWWLLLLLLLLDWLLLLLLLLLLL", "LWLWLWWWWWLLWWWW-WWWWLWLWWLWWLWWLWWWWWWWLLWWWWLLLW", "LLLWLLLLLDLLLLLLL-LLLLLLLLLLLLLWLLLLLLLLLLLLLLLLLL", "LWLWWLLWWWLLLLLLLW-LWLLLWWWLWLLWLLWLLWWLLLLWLWLDLL", "LWLWWLLWLWLLLLLWLWL-LLLLWWWWWLWWLLLLWWLLLLLWLLLLLW", "LLLLLLLLLWLLLLLLLWLL-LLLWWLLWLLWLLLLLWWLLLDWLLLLLW", "WWLWWWWWWWLWWDWWWWWWW-LLWWWWWWWWLWWWWWWWWWWWWWLWWW", "LWLWLWLWWWLDLWWWWWWWWW-LWWWWWWWWWWWLWWWWWWWWWWWWLW", "WWLWWWLWWWLWLWWWLWWWWLW-WWWWWWWWWWLWWWWLDLWWWWWWWW", "LLLLLLLLLWLLLLLWLLLLLLLL-LLLWLWWLLLLLLWLLLLDLLLLLL", "LLLWLLLLLWLLLLLLLLLLLLLLL-LWWLWDLLLLLLLLLLLLLLLLLL", "LWLWLWLLWWLLWLLWLWDWLLLLWW-WWLWWLLWLLWWLWLWWLLLLLW", "LLLLLLLLWWLLLLLWLWLLLLLLLWL-WLWWLLLWLWWLLLWWLLLLLL", "LLLLLLLLLWLLLLLLLDLLLLLLLDLL-LLLLLLLLWDLLLLWLLLLLL", "LWLWLWLWWWLLWLWWWWWWWDLLWWWWW-WWLLLLWWWWLLWWWWWWLW", "LWLWLLLLLWLLLLLDLWWWWLLLWWLLWW-WLLLLLWWLLLDWLWLLLW", "LWLLLLLLLWLLLLLLLWLLWLLLLLLLWLW-LLLLLLLLLLLLLLLLLL", "LWWWWWLWWWWWWWWWWWWWWLLLWWWWWWWW-WWWWWWLLWWWLWLWLW", "LWLWLWLWWWLLLWWWLWWWWLWLWWWWWLWWW-LWWWWLLLWWWWLWLW", "LWLWLWLLWWLLWLLWWWLLWWLLWWWWWLWWLW-WWWWLLLWWLWLLLW", "WWLWLWLWWWLWLLWWLWWWWWLLWWWWWWWWDLL-WWWLWLWWWWLWLW", "WWLWLWLLLWLLLLWWWWWWWLWLWWDWWWLWLLWW-WWLLLWWLWLWLW", "LLLWLLLLLWLLLLLLLWLLWLLLLLLLWLLLLLLLL-LLLLLLLLLLLL", "LLLWLLLLLWLLLLLLLWLLDLLLWWLLWLLWLLLLLL-LLLWDLDLLLL", "WWLWWLWWWWLWWLLWWWWWWWLWWWWWWWWWLWWWLWW-WLWWWWLWWW", "WWLWWWLWWWWWWLLWLWWWWWWLWWWWWWWWLWWWWWWW-WWWWWLWWW", "WWLWWWWWWWWWWDWWLWWWWLWLWWWWWWWWWWWWLWWWW-WWWWWWLW", "LLLWLLLLLWLLLLLWLLLLLLLLWWLWWLWWLLWLLWWLLL-WLWLLLW", "LLLWLLLDWWLLLLWWLWLLWLLLWWLLWLLWLLWLLWWLLLW-LLLLLW", "LWLWWLWWWWLLLLLWWWLLWLWLWWLWWWWWLLWLLWWLLWWW-WWWLW", "LWLWLLLLWWLLLLLLLWLLWLLLWLWLWLWWLLWLLLLLLLWLL-LWLD", "WWWWLWLWWWLWWWWWWWWWWLLLWWWWWWWWLWLWWWWLWLWWLW-WLW", "LWLWLLLLWWLLLLLWWWWLWLLLWWLLWLDWLWLLWWWLLLWLLWL-LW", "WWWWWWWWWWLWLWLWLWWWWWLLWWWWWWWWLWWWWWWLWLWWWWWW-W", "LWLWLLLLLWLLLLLWLLLLLLLLWDLWWLLWLLLLLWLLLLWLLWLLL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {232, 79, 237, 46, 213, 148, 207, 163, 105, 2, 261, 214, 183, 216, 178, 56, 210, 26, 131, 120, 71, 243, 232, 256, 49, 36, 128, 84, 17, 181, 93, 31, 247, 183, 156, 187, 169, 47, 55, 225, 226, 250, 80, 90, 180, 90, 231, 125, 249, 80};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> matches = {"-WWWLWWWWLWWWWWWWLWLWDLWWWWWWWWWLWLWWWWLDLWWWWDWWW", "L-LWWWDWWWWLWDWLDDWLWLDWDWWWWLWWWWWWDWWWWWWLDLWWWW", "WW-WWWWWDWWWWWWWDLWWWWDWWWWWWWWWLWLWLWWWLWWWWWWWWD", "LDL-LWDWLLLLWLDLLLWLWLLWDWWWWLLWWWLWLWWDLLWLLLLLWW", "DWWW-WWWWLWLWWWWLWWDDWWWWWWWWWDWLDLWWWWLWLWWWWLLWW", "LDLWD-WLLDLLWWDWLLDLLLLWLWWWWLLWLDLWLDWLLLWLLLLLWW", "LWWWLW-WWLWLWWWWWLWDDDDWWWWWWWLWLDLWLWWLLLWWWLWLWW", "WDWWWWL-WDWLWWWWLWWLWLDWWWWWWLLWWWWWLWWLWLWLWWDLWW", "WWLWWWLW-WDLWWWLWWWDLLWWWWWWWLLWWWLWWWWWWWWLWWLLWW", "LWWWLWWWW-WLWWWLWWWWWWWWWWWWWWWWWDWWDWWDDLWWWWLWWW", "LWWWWWLWWW-LWWDDWLWWWWLWWWWWWLWWLWLWWDWLWLWWWLLWWW", "LWWWWWWDWWW-WWWWWWWWWWWWWWWWWLWWWWLWWWWDWDWWDWLWWW", "LDLWLWLDLLLL-DWLWLWLLLLWDWWWWLLWLDLLLWWLLLWDLLLLWL", "LDLWLWDLLWWLW-WLLLWLLLWWDWWWWLLDLWLWLLWLLLDWDLLDWD", "WWWWWWLDWWLLWW-DDLWLLWWWWWWWWLLWLLLWWWWLLLWWWLWLWW", "DWLWDWWWWLLLWWW-LLWWWWWWWWWWWWLWWWLWWWWLWWWWWWWWWW", "LWWWWWWWLWWLWWWW-WWWWWWWWWWWWWWDWWLWWWWWWLWWWWWWWW", "WWLWDWWWWDDLWWWWW-WWWWWWLWWWWLDWWWLWDWWWDWWWWDWWWW", "LWLWLWWDLWWLWWWDLL-WLDDWWWWWWLLDLWWWDWWDLLWWLLDLWW", "WWDWWWWWLLWLWWWWLLW-WWWWWWWWWDWWLWWWWWWWWWWWWWWLWW", "WWWWWWDDLDLLWWDLWWWW-WWWWWWWWLDWWDWWDWWLLWWLWWWLWW", "WWWWWWWWWWLWWWWWWWWWL-WWWWWWWWLWWLWDWWWDLLWWWLWLWW", "LDLWLWDLLLLLWDDLWLWLDW-WDWWWWWDWLDDWWDWLWLWLWLLLWL", "LLLWLWWDLLWLWLLLLLWLLWL-WWWDWLLDLLLDWWWLLLDDDLLLWW", "WWLWLWWWWWDLWWDLLWWLLWLW-WWWWLLWLLLDLWWLLWWLWLWLWW", "LLLWLWDDWLLLWLLLLLWLLLLWW-WWWLLWDDLDLWWWLLWWLLLLWD", "LWLWLWDWLLLLWWWLLLWWLLWWDW-WWLLWLLLWLWDLLLWWLLDLWW", "LDDWWWLLLLLLWDWLLLWLDLWWWWW-WLWWLWLWLDDLLLDLWLLLWW", "LLDWLWLDLWWLWLLLLLWLLLWWDWWW-LWDDWLWLWWLLLWLLLLLWW", "LWWWWWWWWDWWWWWLDLWLWWWWWWWWW-WWWWLWDWWLWLWLWWWWWW", "WWWWWWWWLWWLWWLWLWWLWDWWLWWWWL-WLWWWWWWDLLWWDWWWWW", "LWDWWWWLWLDLWWLLLLWLLLLWLWWDWDL-LLLWLWWLLWWLWWWLWW", "WLWWLWWWDWWLWWWWWWWWLWWWWWWWWLLW-WWWLWWDWLWWWDWLWW", "LWWWLWDWDLWLWWWLLWWLWLLWWWWWWLDWL-LDWDWLLLWWWWDWWW", "WWLWWWWWWWWWWWWWWWWWWDWWWWWWWLWWDW-WWWWWWWWWWDWLWW", "LWLWLWWWLLDLWWWLLLWLLDLWLWWWWLLDLDL-WWWWDLWLDLLLWL", "WWDWLWWWWWWLWWWLLLWWWWWWWWWWWLWWWWWW-WWWWLWWLWWWWW", "LWLWWWWLLLLLWWWLLWWWLLLWDWWWWLWWDLWWW-DLLLWWLLLLWW", "LWWWWWWDWLLLWWLLLLWDDDWWLWWWWLLDLDLWLW-LLLWLWLDLWW", "WWWWDWWWWWWWWWWWWWWWWLWWWWWWWDWWDWLWDWW-WWWWWWDLWW", "WWWWWWWLWLWLWWDLDLWWWWWWWWWWWDWWWWWWLWWW-LWDWWWLWW", "WWLWWWWWDLWWWWWWWWWWDWWWWWWWWWWWWWWWWWWDW-WLWLWWWW", "LWLWLWWDLLWLWDLLWLWLDLLWLWWDWLLDLDLWLWWLLL-WLLLLWW", "LWLWLWLWWWLDWWWLLLWWLWLWDWWWWLDWLWWWWWWLDLW-LLWWWW", "LWLWLWLWDWWLWWWLLWWWWWLWDWWWWLLDDLWDWWWLLLWL-WLLWW", "WWWWDWWWWWWDWWWWWLWWLWWWWWWWWLLWWWWWWWWLWWWWW-WLWW", "WLDWLWWLLWWLWWDWLLWLWLWWWWWWWWLWLLWWLWWLLLWWWL-WWW", "WWLWWWWLWLDLWWWLWWWWWWWWWWWWWLLWWWWWLWWWWLWWWWW-WW", "LLLWLWWLLLLLWWDLLLDLLLWWDWWWWLLDWLLWLLWLLLWDLLLL-L", "WWLWLWLLLLDLWWWLWLWLWLWWLWWDWLLWLDLDWWDLDLWDWLLLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {197, 129, 202, 62, 184, 55, 133, 146, 172, 195, 157, 249, 51, 79, 123, 203, 210, 209, 85, 195, 170, 183, 120, 55, 119, 57, 67, 68, 62, 223, 195, 83, 195, 132, 223, 76, 188, 89, 77, 223, 196, 238, 63, 144, 128, 206, 159, 215, 50, 85};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> matches = {"-LLWWWWDDDLWWWWLDDLWLWWWLLDWWWWLWWWLLLWDLLLWDWWDLW", "W-WWWWWWWWWWWWLWWWWWWLWLWLLWWWWWWWWWWWWWDWWWLWWWLW", "WD-WWWWWLLWWWWWDWWLWWDLWWWWWWWWWWWWDWLWWWWWLWWWWLW", "WDW-WWWWWLWWWLWLLWLWDWDLWLWWWWWDWWWWLWLLWLLLLWWWLW", "WLWL-WWLLLWWWWLLDWLWWDLWLDWWLWWLWWWLLLWWLDLLLDDWLW", "WLLLW-WDLLLWDWLLLWLWLLLLLLWWLWWLWWWLWLLLLWLLDDDLLW", "WLLLWW-DLLLWWWLLDDLWDLLLLLLWDWWLWWWLLDDDLLLWLLWWLW", "WWLWWWW-LLWWWWWLDWWWLDWWWWWWDWWLWWDLLLLWLWWWWWWLWW", "WLLWWWWW-LWWWWWWWWWWWWLWWWWWWWWWWWWWWLWWWDWDWWWWLW", "WLWWWWWWW-WWWWLWWWLWDWWWLWWWWWWLWWWWLWWWWWWLWWWWLW", "WWWDWWWWWW-WWWLLWWLWWWDLWDWWLWWLWWLWWWDWLWWWWWWWLW", "WLLWWWWWDLL-WDWLLWDWWLLWLWLDWWDLWWWWLLWWLDWLLWWWLW", "WLLDWWWWLWDW-WLLLWLWLWWLLLWWLWWLWWWWWLLWLWDLLLWWLW", "DLLWWWWWDLLWW-WLWWLWWLWWLLWWWWWLWWWWWLWLLDLLWDDWLW", "WLWWWWWWLLWLWW-LWWLWWWLWLLWWWWWWWWWWWWDWLWWWWWWWWW", "WWLWWWWWWWWWWWW-WWWWWLWWWWWWWWWWWWWWWWDLLWWWDWWWWW", "WWWWWWWWWWLLDWLW-WLWWWWWLLWWWWDWWWDWWLDDLDDLWWWLLW", "WDLWWWWWLLDDLDWLD-LWLDLWLLWDWWWLWWLWLLLWLWLDWWDLLW", "WWWWWWWWLWWWWWWWWW-WWWLWWWWWWWWWWWWWWWWWWWWWWWWWLW", "WLLWDDWDWLLLWDWLWWL-LLLLLLWWLWLLWWWWLLWWLWLLWLWDLW", "WLWWWWWWWDLWWWWLWWWW-WWWWLWWLWWWWWWWLWWWLLWWLWWWLW", "WLWWWWWWLWWWWWWLDWLWL-WWWWLWLWWLWWWWWWWWLWDWWWDWLW", "WWWWWWWWLLWWWWWLLWWWWW-WWWWWWWWWWWWWWWWWLWWDWWWWWW", "WLWLWWWWLLDWWWWLWWLWWWW-WWWWWWWLWWWWLLWWLWWWWWWWDW", "WLWWWWWWLWWWWWDWDWLWWLLW-WWWWWWWWWWWLWDLLWWLDWWDLW", "WDWWWWWWDWWWWWWLWWDWLWWWW-WWLWWLWWWWWWWWWWWWDWWWLW", "WLDLDWWWLLWWWWLLWWLWWWLWDL-WWWWLWWWWLWLDWWLLLDWDLW", "WLLDWWWWLLLWWWDLLWLDLLWWWLW-DWLWWWLWWLLDLDLLLLWWLW", "WLLDWWWWLLWWWWLLWWLWLLLWWLWW-WWLWWWWWLWLLWWWDWWWLW", "WLWLWWWWLLLWWWLLDWLWLLLLLWLDW-WLWWLLDLLDLLLLLLWDLW", "WWLWDWWLDWDWWDLLWWLWLDLLWDLWWW-LWWWWWLWDWDWLWWDDLW", "WWLWWWWWLWWWWLLWWWLWWWWWWLWWWWD-WWWWWWWWWWWLLWWWLW", "WLLLWWWLLLLWWWLLLWLWLLDLLLLWLWLL-WDLLLWLLLLLLWWLLW", "WLLDDWWLLLWWLDDLDWLDLLLLLLDDLWDLW-LWWLLDLDLLLLWDLW", "WLLWWWWDWWLWWWWWWWLWLLLWLLWWWWLLWW-WLWWWWWWWWWWLLW", "WLWDWWWWLLWWWWLWWWLWWLWLDWWWWWWWWWD-DLWWLLLWWWWLLW", "WWWWWWWWWLWWWWWWWWLWWWWWLLWWWWWWWWWW-WWWLWWWWLWWWW", "WWWWWWWWWWWWWWWWWWWWWWWWWLWWWWWLWWWWW-LLLWLWLWWDLW", "WLWWWDWWLLLDWWWWDWWWLLLLWLDWWWLLWWWWLD-WWDWLWWWWLW", "WLDDWWWWLLDWWWDLWWDWWWDWDWWWWWWDWWDDWDL-LWWLWWWWWW", "WLWWWWWWWWWWWWWWWWWWWWWWWWWWWWWLWWWWWWWL-WWWWWWLLW", "WLWWWWWWWWLWWWDLWWDWWWWWLWWWWWWLWWWWWWWWW-WWWWWWLW", "WLLLWWWWWWWWWWWLWWWWLLWLLDDWWWWWWWWWWLDWDW-WDWWDWW", "WWLLWWWDLWWWLWLWWWLWWWWLLWWWWWWLWWWWWLWLWWW-WLWWWW", "WLLWWWWWWWWDWDWWWWLWDWWWDWWWLWDLWWWWWLLWWLWW-WWWWW", "WWLWWWWWDDLWWWWWWWLWLLDWWWWWLWWWWWWWWLDWLWLWW-WWWW", "WLLWWWWLLWDDWWLLWWLWLLLWWLWWWWWLWWWWLLWWLWLLLL-WLW", "WLWWWWWWLWLWWWWLWWLWLWWLLLWWWWWLWWWWLLWLLWWWLLD-LW", "WDLWWWWLWWWWWWWLWWLWWWWWWWWWWWWWWWWWWWWWWWWWWWWW-W", "WLLDDWWLLLLDDLLLLDLDLLLLLLLWLWLLWWLDLLDWLWLLLLWDL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {82, 225, 195, 129, 80, 58, 59, 130, 212, 199, 169, 98, 93, 104, 174, 228, 134, 75, 247, 71, 182, 176, 195, 164, 177, 203, 115, 76, 137, 59, 111, 213, 50, 48, 126, 124, 188, 205, 138, 145, 230, 158, 165, 178, 171, 149, 90, 128, 248, 39};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> matches = {"-LLWWWWDDDLWWWWLLWLWLWWWLLDWWWWLWWWLLLWDLLLWDWWDLW", "W-WWWWWWWWWWWWLWLWWWWLWLWLLWWWWWWWWWWWWWDWWWLWWWLW", "WD-WWWWWLLWWWWWDLWLWWDLWWWWWWWWWWWWDWLWWWWWLWWWWLW", "WDW-WWWWWLWWWLWLLWLWDWDLWLWWWWWDWWWWLWLLWLLLLWWWLW", "WLWL-WWLLLWWWWLLLWLWWWWLWLWWWWWLWWWWLLDWLWLLLDWLLW", "WLLDW-WDLLLWWWLLLWLLWLLLLLLWWWLWWWDDDLWDLLLLLDWWLW", "DLLWDD-DDLLWWWLLLWLWLLLLDLLWLWWLWWLLDLWLLWLDLLWDLW", "WWLWWWW-LWWWWWWWLWLWWWLWLWWWWWWLWWWWWLLDLLWWWWWWLW", "WLWWWWWW-WWWWWWWLWDWWWWWWWDWWWWWWWWWWWWDLWWLWWWWLW", "WLWWWWWLW-WWWWWWLWLWLLWWWLWWWWWLWWWWDWWWWWWLWWWWWW", "WLLWWWWWWW-WWWWWLWDWLLWLDWWWWWWDWWLWLLWWLWWWLWWWWW", "WLLWWWWWLLL-WWDLLWLWLLLWWWWDWWWLWWWWLLLLLDWLWDDDLW", "WLLWWWWLLLDW-WLLLWLWLLLWDLWWWWWWWWWWLLDWLWWLLWWWLW", "WWDWWWWWLLWWW-LLLWLWLLWLLWWWWWWWWWWDLLDWDDLWLLDDDW", "WLWDWWWDLWWWWD-WLWLWLLWWWLWWWWWWWWWWWWWWWWLWWWWWLW", "WLWWWWWWLLWWWWW-LWWWLWWWWWWWWWWWWWWWDWWWWWWLLWWWLW", "WWWWWWWWWWWWWWWW-WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", "WLLDWWWDLLWWWDLLL-LWLLLLWLLWLWWWWWDWLDLLLLWLLWWWLW", "WLWWWWWWLWWWWWLWLW-WWWWWWWWWWWWDWWWWLWWWLWWLWWWWWW", "WLLWWWWWLLLWLWLLLWL-WWDLLLWWLWLLWWDWLLLDLLDWWWWDLW", "WWLWWWWLDLWWWWDLLWWW-LWWDWWWWWDLWWWWLWWWWDWWWWWWLW", "WWWWWWWLWLLWWWWLLWWWW-LWWLWWWWWWWWWWWWWWLWWWWWWWLW", "WLLWWWWWDLLWWWLDLWDWWW-LDWWWLWWLWWWWWLWDLWDLWDWWWW", "DLWWWWWWWWWWWWLWLWLWLWW-DLWWWWWDWWWWWLLWWLDWWWWWLW", "WLWLWWWWWLWWWWWWLWLWLWWW-WWWWWWWWWWWDLDWLWWDWWWWLW", "WWWWWWWWLDWWWWDLLWLWWLLWW-WWDWWLWWWWWWWWWWDWWWWWWW", "WLDWWWWWWWDWWWLWLWLWLWDWDL-WWWWLWWLLWWWWLWWWLWWLWW", "WLLWDWWWLLLWWWDLLWLDLLLWLLW-LWDLWWWDLWWWLDLLDLWWDW", "WDDDWWWLLLWWWWDDLWLDLLWWDLDW-WDWWWDWLLWLLWWWLLWWLW", "WLLDWWWLLLLWDDWWLWLDWLLLWLDWD-WLWWWWLLWDLDLLLLWLLW", "WLWWWWWDLLWWWWLLLWLWLLDWDLWWWW-LWWWWLLDWLWLLWWDWLW", "WLWWWWWWWDWWWWWWLWLWWDWWLDWWWWW-WWWWWLWLLWWWLLWWWW", "WLLWWWWWLLLLWDLLLDLDLLLLLLDWDWDL-WLWLLLWLDLLLLWWLW", "WLLLWDWLLLDDWWDLLDLWLLLLLLWWLWLLW-LDLLWDLLLLDWWLLW", "WWWWDDWWLLWWWWWLLWLWLLLWLLWWLWLLWW-DWWWWLWWWLWWLWW", "WLWWWDWWWLWWWWWLLWLWWWWLDWWWDWWWWWW-DLWWWWDLWWWWLW", "WWWWWWWWWWLWWWWLLWLWLWWWWLWWWWWWWWWW-WWWLWLLWWWWLW", "WWWWWWWWLWWWWWWLLWWWWWWWWWLWWWWWWWWWW-WWDWWWWWWWWW", "WLWWWWWWLLLWWLLDLWLLLLLLLLWDWWWWWWDLWL-WLLLWWWWLWW", "WLLWWWWWLLLWWWLDLWLWLWLWWLWWWWDLWWDWLLW-LWLLWWWWDW", "WWWWWWWWWDWWWWWWLWWWWLWWWWWWWWWWWWWWWWWW-WWWWWWWLW", "WLWLWWWWLLLWWWWWLWLWLLWLLWWWWWDLWWWWLLWWL-WWDDWWLW", "WWLWWWWDWLWWWWWLLWWWWDWWWWWWWWWWWWWWWWLWLL-WWWWWWW", "WLDWWWWWDDLWWWLDLWWWWWWWWWLWWWWWWWWWWLWWLWW-LLWWDW", "WLWWWWWWLWWWWWWWLWLWWWDWWLWWWWWLWWWWDWWLLWWL-WWDWW", "WDWWWDWWWWWWWWWLLWWWLLLLLLWWWWLWWWWWLWWWWWWLW-WDLW", "WLDWWWWDLLLWWWLLLWLWWWLLWLWWLWWLWWWLWLWLLWWLDL-WLW", "DLWWWWWLLLLWWWWLLWLDWLWLWLWWWWWLWWWWWLWWLDDWDWW-LW", "WWWWWWWWWWWWWWWWLWLWWWWWWLWWWWWWWWWWWWWDLWWWWWWW-W", "DLLLDDWWLLLWWLLLLWLWLLLLLLDDWWDLWWWWLLDDLLLLDWDLL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {86, 224, 174, 114, 87, 67, 54, 144, 215, 213, 165, 82, 88, 99, 177, 205, 294, 70, 235, 82, 186, 198, 159, 169, 166, 209, 127, 74, 110, 65, 108, 187, 52, 50, 114, 131, 187, 218, 108, 122, 244, 133, 176, 184, 172, 137, 85, 120, 233, 49};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> matches = {"-WWLLDWWLLDLWWWWLDDLWWWWDWWWWDLWLLWWLWWWWWWLWWWWLD", "W-WLWWWWWWLLWWWWLWWLLLWWWLWWWWWWLLWLLWWWWLWWWWWWLW", "WW-LWDWWLLWLLWWWLWWWWWWWDLWWDWWLWLWWWWWWWLWWWWWWLW", "WWW-WWWWDWDWLWWWLWWWWLWWLWWWWLLWWWWWWWWWWLWWWWWWLW", "WWDW-WWLLWWLWWWWLWWLWWWWDWWWWWWLWLWWWWWWWWWWWWWWLW", "LWWWW-WDLLDLWWWWLWWWWWWLWLLWWDDWLWWWLWWWWWWWWWWWLW", "WDLLWL-WLLLLLWWWLLWLLLWLLLWWWLLLLLWLLWWWWWWLLWWWLW", "WWWWWWW-DDWWDWWWLDWLWWWWWWWWDWDLLLWWWWWWWDWWWWWWLW", "WWWWWWWW-WWWWWWWLWWWWWWWWWWWWDWWDWWWWWWWWWWWWWWWLW", "WWWWWWWWW-WLWWWWLWDDWLWWWLWWWWDWLLWWLWWWWWWWWWWWLW", "WLDDWWWWLW-LDWWWLDWWDLWWWWWWWLWWWLWDLWWWWLWLWWWWLW", "WWWWDWWWWWW-WWWWLWWWWWWLWWWWWWDWWWWWLWWWWLWWWWWWLW", "WWWWWDWWDLDW-WWWLWWLLWWWDWWWDLWDLLWWLWWWWWWWWWWWLW", "LLLLDLWWLLLLL-WLLLDLLWWLWDDWWLLLLLWWLWWWWLWLWWWWLD", "WDLWLWWWLLWLWW-DLWWLWWWLLLWWWLWDLLWDLWWWWLWLWWWWLL", "WDLWWWWLLLLLWWW-LWWLWDWLLWLWWLLWLWWWLWWWWWWLDWWWLW", "WWWWWWWWWWWWWWWW-WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWLW", "WDWLDWWWLWLLWWWWL-WLWWWDWWWWWLLLWLWWLWWWWLWWDWWWLW", "WDLLLWWDLLWLWWDLLW-LLWWWWLLWWLDWLLWDLWWWWWWLWWWWLL", "WDWWDWWWLWWWWWWWLLW-WWWDLWWWWLWWWWWWDWWWWWWWWWWWLW", "WWWLWWWWWLWLWWWWLWWL-WWLLWWWWLWWLLWWLWWWWLWWWWWWLW", "WWWLWWWWWLWWWWWWLWWLW-WWWDWWWLWLDLWWLWDWWLWWDWWWLW", "WLLLDLWWLLDLLWDWLWWLLL-WLLWWWLLLLLWLLWWWWLWLDWWWLD", "WWDLDWWWLLWLWWWWLWWDWWW-WLWWWLWLLWWLLWWWWLWDWWWWLW", "WWWLWWWWWWDLLWWWLWDLWWWW-WWWWDLDLLWWLWWWWWWWWWWWLW", "WWWLWWWWLWWWWWWWLLWWWLWWW-WWWWWWWWWWLWWWWWWLWWWWLW", "WWWDLDWLLWDLWWWWLWWLWWWWDL-WWLWWWLWWWWWWWWWLWWWWLL", "WLLLDWDLLLLLLWWWLLWLLDWWLLL-WLDLLLWLLWDWWDWLWWWWLL", "DLLLWWWDWLLDLWDWLLWLLDWLLLLW-LLLLLWDLWWWWLWLWWWWLL", "WWWLWWWWWWWWWWWWLWWDWWWWWWWWW-WWLWWWDWWWWDWWWWWWLW", "WWDWWWWWLWWLWWWWLDWWWLWWWLWWWL-WLWWWLWWWWDWDWWWWLW", "WWWWWWWWLLWLWWWWLWWLWWWWWLLWWLW-LLWWLWWWWWWWWWWWLW", "WWWWWWWWDWWWWWWWLWWWWLWWWLWWWLDW-WWWLWWWWWWWWWWWLW", "WLWWWWWWWWWWWWWWLWWWWWWWWWWWWWWWD-WWWWWWWWWWWWWWLW", "DDWLLDWDLLDLLWWWLWWLDLWLLLWWWLLDLL-LLWWWWLWLWWWWLD", "WWWLDDWWLWWDLWWWLWWLWDWWLDWWWDLWWLW-LWWWWLWLWWWWLW", "WWWWWWWWLWWLWWWWLWWWWDWWWDWWWLWWDLWL-WWWWWWLWWWWLW", "LLWLLLWLLLLLLWWWLLDWLLWLLLWWWLDDLLWWL-WWWLWLWWWWLD", "WWWLLWWLLLDLLWWWLLDLLLWLWLLWWLLLWLWDLW-WWDWDLWWWLL", "LLWLDWWLLLDLDWWDLDDLLLWLLLLWWLLLLLWWLWD-WDWLLWWWLD", "WWDLWLWLLLLLLWWWLWWLDLWLLLLWWLLLLLWWLWWW-DWLWWWWLL", "WWWLWWWLLWWWWWWWLDWWLWWWDLWWWLLWWLWWLWWWW-WLWWWWLW", "LLWLLWWDLLWLDWWWLLDLLLWDLLLWWLLLLLWLLWWWWL-LWWWWLW", "WDLWWWWWLWLLWWWWLWWWLWWLWWWWWWLWWWWWLWWWWWW-WWWWLD", "WWDLLWWDLWDLWWWWLDDWWWWWWLWWWLDWLDWWLWWWWWWL-WWWLW", "WDLLLDWDLLWLLWWWLLDLDLWDLLLWWLLLLLWWLWWWWDWLW-WWLL", "WDLLWWWLLLWLDWWDLWWLLLWLLLLWWWLWLLWDLWWWWLWLWW-WLD", "DWLLWLWLLLWLLWWWLLWLLLWLLLDWWLWLLLWLLWWWWLWLLWW-LD", "WWWWWWWWWWWWWWWWLWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW-W", "WWWLLWWWLDLLWWWDLWDLLWWWWLWWWLLWLLWWLWWWWLWLWWWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {112, 142, 150, 208, 161, 131, 68, 155, 243, 194, 146, 232, 158, 62, 88, 100, 291, 140, 91, 211, 163, 168, 65, 152, 169, 208, 141, 60, 66, 230, 181, 167, 219, 239, 68, 132, 233, 64, 71, 57, 69, 175, 64, 191, 116, 64, 74, 63, 291, 123};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> matches = {"-WWWWWWWWWWWWWWWWWWLWLWWWWWWWWWWWWWWWWWWWWWWWLWWLW", "W-LLLWDWWWWWWLDDWWWLWLWWDWLLLWWLWLLLLLLLWLDWDDDWLD", "WW-WLWWWWWWWWDWWWWWLWLWWLWWLWWWWWLWWWLLWWWWWWWWWLW", "LWL-LWLWLWWWWLWWWWLLWDWWWWWLWWWWWWWDLLWWWLWWDWDWLW", "WWWW-WWWWWWWWWWWWWDLWWWWWWWLDWWLWLWWWWWWWWWWLWWWLW", "LWLLL-LWLWWWWLDDWWWLWWWWWWDLWWWLWWWLWLLWWLLWLLLWLW", "LWWWWL-WWWWWWLLWWWWLWWWWWWWWWWWWWWWLWLWWWWWWLWWWLW", "LWLWWDL-WWWWWLWLWWLLWLWLWWWLWWWLWWWLWLWWLDWWLWWWLW", "WWLDLWLW-WWWWLWWWWWLWLWWWDWLWWWLWWWLLLLWLLWDLWWWLW", "LWLLLLLLL-WWDWLLWWLLWLWWLWWLLWWLWLDLLLLLLLLDLLWDLW", "LWLLLWLWLW-WWLWWWWWLWDWWWWLLDWWLWLLDWLWLLLLDDLLWLD", "LWLLLDLDWWW-WLLWWWWLWLWWLWWLWWWLDWWWWLLLWLWWLLLWLD", "LDDWWWLWLWWD-WDWWWLLWLWWLWDLWWWWDLWWLLWDLLWWLWWWLW", "WWLWLWWLWWWLW-WWWWLLWWWWWWWWWWWLWLWWWWLWWLWWWWWWLW", "WWWWLWLWWWWDWW-DWWLLWWWWWWWLLWWWWWWLWLWWWLWWWLWWLW", "WWLLWWLWWWWWWWL-WWLLWLWWWWDWWWWWWLWDDWDWLLWLLWWWLW", "LWLWLWLWDWWLLWLD-WWLWLWDDWDLDWWDDLWLLLLLLWWWLLWDLL", "LWLLLWLWWWDWLLLLD-LLWLDLDWLLWWWLDLLLLLDLLLLLLLLWLW", "WWDLLWWDWWWWWLWWWW-LWLWWWWLWWWWLWLWWWLWWWWWWLLWWLW", "WWWWWWWWWWWWWWWWWWW-WWWWWWWWWWWWWWWWWWWWWWWWWWWWLW", "LDLLLLLLLWWDWLWLWWLL-DWWLDLLLWWWWLLLLLLLDLLWLLLWLL", "WWLWWWDWWWWWWLWWWWLLW-WWWWWLWWWWWWWWLWWWWLWWWLDWLW", "LDLLLLLWDWWLWLLLWWLLWW-WWWWLWWWLDLDLLLLLLDLLLWWWLW", "LWWLLWWWWWWWDLDLWWWLWWW-WWLWWWWWWLWWLWWLWWWLWWLWLW", "LWLWLLLLWWWLLLDDWWWLWLWW-WWWWWWLWWWWLDWLWLLDLLWWLW", "LWLLLLLLWWDLLLLWWWLLWLWWL-WLLWWLWLDLLLLLLLWWLLWWLL", "LWLWLWLWLWWDWLWWWWWLWLWWWD-LWWWLWLWLLLLWWLDLDLWDLW", "WWWWLWWWWWWWWWWWWWWLWWWWWWW-WWWWWWWWWWWWLWLWWWWWLW", "LWDWLWLWLWWWWLLWWWLLWLWWWWWL-WWWWLWLWLWLLWWWWLWWLW", "LWLLLLLWWWWLLWLWDWWLWLWLWDDLW-WLWWLWLLWDWLWLDLWWLW", "LDLLLLLLWWWLLLWDWWLLWLWDDWWLWD-LWLLLDLLLLLLLLLDWLW", "LWLWWWWWWWWWWLWWWWDLWWWWWWWLWWW-WWWWWWLWWWWWWWWWLW", "LWLLLWDLWWWDWLDLWWDLWWWWDWLLWWWL-LDWLWWWLLLWLLLWLW", "LWLLWWWWDWWWWLWWWWWLWLWWDWWLWWWWW-WLWWLWLLWWWLWWLW", "LWLLWDLLLWWWWLLWWWWLWLWWLWWDDWWWLL-WWLWWDLWLLLLWLW", "DWWWLWLWWWWWWWWWWWWLWLWWWWWLWWWWWWW-WLWWLDLWWWDWLW", "LWLWLLWWLWWWWLLWWWWLWDWWWWWLLWWLWDWW-LWWWLWWLWLWLW", "DWLWLWWWWWWWWWWWWWLLWWWWWWWWWWWLWWWWW-WWLLWWWDWWLW", "WWLLWWWWWWWWWLWWWWWLWWWWWWDLWWWLWLLWWL-WWWWWWWWWLW", "LWLWLDWWWWWDDLWWWWWLWLWWWWDLWWWWWWWWWWW-WLLWWLWWLW", "WWWWLWWWWWWWWWWDWWLLWWWWWWWLWWWDWWWLLWWW-WWWDLWWLW", "WWLWWWWWWWWWWWLWWWWLWWWWWWWWWWWWWWWDLLWWW-WLWWWWLW", "LWLWLWLWWWWLDLWLWWDLWLWWDWWLWWWWDWLWWLWLWL-WLLLWLW", "LWWDLWDWWWLWWLLDWWLLWLWLWWDLWWWLWLWLWWDDDWW-LLWWLW", "WWLWWWLWWWWWWLLWWWLLWWWWWWDLWWWWWWWDWWWWWWWW-DWWLW", "WWLWWWWWWWWWWWDWWWWLWWWWWWWLWWWWWWWWWLWWWLDWD-WWLW", "LWLLLDLWWWWWWWWDWWWLWLWWLWWLWWWWWWDWWLLLLWWLLW-WLW", "LDLLLDLLWWDLLLLDWWLLWWWWLDDLDWWLDLWLLLLLLWWWLLL-LW", "WWWWWWWWWWWWWWWWWWWLWWWWWWWWWWWWWWWWWWWWWWWWWWWW-W", "LWLLLLLWWWWWWLLWDWDLWLWWWWWLWWWLWLWDLDLLWWLWLLLWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {227, 77, 226, 165, 227, 120, 205, 124, 126, 52, 78, 112, 113, 208, 168, 134, 69, 45, 169, 291, 47, 198, 63, 118, 116, 58, 111, 244, 117, 75, 49, 198, 85, 177, 108, 177, 157, 214, 172, 160, 177, 208, 127, 119, 199, 204, 134, 56, 291, 88};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> matches = {"-WDWWLWWWLWLWLWLWDWDLWWLLWWDWLWWWLDWWLLWLDWDWLWLWW", "W-DWWLWWWLLLLLWLDWWLLLWWLDWLWLWWWLWDWLLWWLLLWLWLDW", "WW-WWLWWWLWLLLWLWWWLLDWWLWWWWLWWWLWWWWLWWWWLWLWLWW", "DWD-DLWWWLDLLLDLLWWLLLWLLWWLWLDWDLWWDLLDLLLLWLWLWW", "WWWW-WWWWWWWDLWLLWDWWLWWLWWWWLWWWLWWWLWLDWWWWWWLWW", "WWWWW-WWWDWWWLWWWWWWWWWWLWWWWLWWWLWWWLWWWWWLWLWLWW", "WWWWLL-WWLWLLLDLDWWLLLWDLWWLWLDWWLWWDLDDLDLLWDLLWW", "WWDWDWW-WLLDLLWLDWWLWLWLLLWLWLWWWLDWWLLWDDLLWLWLDW", "WWWWDLWW-LLDLLWWLWWLLLWLLDWLWLWWWLWWWLLWLWLLWLWLDW", "WWWWWLWWW-WWWWWLWWWWWWWWWDWWWLWWWDWWWWWWWWLDWWWLWW", "WWWWWDWWWL-WWWWLWWWLLWWLLWWDWLWWWLWWWWLWWWWWWLWLWW", "WWWWWLWWWLW-WWWLWWWLLLWWWWWLWLWWWWWWWWLWDLLWWWWLWW", "DWWWWLWWWLWL-LWLDDWWLWWDLWWLWLWWWLWWWWWWLLWDWLWLWW", "WWWWWWWWWWLDW-WWLWWLWWWWLWWWWLWWDLWWWWWWWWLLWWWLWW", "WWWWLDWWWLLLWL-LLWWLLLWWLWWLWLWWWLWWWLLWLWLLWLWLWW", "WWWWWWWWWWWWWWW-WWWLLWWLWWWWWLWWWWWWWWWWWWLDWLWLWW", "WWWWWDWWWWWLLWDL-WDLDWWLLWWWWLWWWWWWWWWWWWDLWWWLWW", "WWDWWLWWWWLLLLWLL-WLLWWWLLWDWLWWWLWWDWWWLWLLWLWLDW", "DWWWLLWWWLLLWLDLWW-LLLWLLWWLWLWWWLWWWWLWWWLWWLWLDW", "WWWWWWWWWWWWWWWLWWW-WLWWWWWWWLWWWLWWWLWWWWLWWWWLWW", "WWWWWLWWWWWWLLWLWWWW-WWWLWWWWLWWWWWDWWLDWWLWWWWLWW", "WWWWWLWWWWWWDLWWWWWLW-WWLWWWWLWWWLWWWWDDWWLWWWWLWW", "DWWWDLWWWLWLLLWLLDDLLL-LLDWLWLWWLLDWWWLWLDLLWLWLWW", "WWWWWLWWWLWLWLWLWWWLWWW-WWWDWLDWWLWWWDLDWWLLWWWLWW", "WWWWWLWWWWWWWWWDWWWLWWWL-WWWWLWWWLWWWWLWWWWWWWWLWW", "WWLWWLWWWWDLWLWLWWWWLWWWL-WWWLWWLLDDWWLWLWLLWLWLWW", "WWLWDLWWWLWWLLDLLWWLLLWDLD-LWLWWWLWWWLLWLLLLWWWLWW", "WWWWWLWWWLWWWLWLWWWLLWWWLWW-WLWWWWWWWLLWWWLLWWWLWW", "DWWWLLWWWLDLLLWLDWWLLWWDLWWL-LWWWLDDWLWWDWLLWLLLWW", "WWWWWWWWWWWWWWWWWWWWWWWWWWWWW-WWWWWWWWWWWWWWWWWWWW", "WWWWWLWWWLWLDLWLLWWLLLWWLWWWWL-WWLWWWLLWLWLLWLWLDW", "DWWWLLWWWLLLDLWLLWWLLWWLLLWLWLW-DLDWWLLWDWLLWLWLDW", "WWWWWLWWWLWDLLWLLWWLLWWDLWWLWLWW-LWWWDLWWWWLWLWLDW", "WWWWWWWWWWWWWWWDWWWLWWWWLWWWWLWWW-WWWWWWWWWWWWWLWW", "WWWWLLWWWLDWLLWLLWWLLWWWLWWLWLWWWL-WDWLWDLLDWLWLWW", "WWWWWLWWWWDLDWWLWWWLWLWLLDWWWLWWWLW-WLLWWWLWWLWLWW", "WWDWLLWWWLLLWLWLWWWLLDWDLWWWWLWWWLWD-LLWLDLDWWDLWW", "WWWWWLWWWWWWWLWWDWWWWLWWLWWLWLWWWLWWW-WWWWWDWWWLWW", "WWWWWWWWWWWDLWWLWWWDLWWLWWWDWLWWWLWWWW-WWWWLWLWLWW", "WWWWWLWWWWWLWWWWWWWLLWWLWWWLWLWWWLWWWWD-LDLWWLWLWW", "WWWWDWWWWLWDLLWLWWWLWWWWLWWLWLWWWLWWDWWW-WLLWLWLWW", "WWWWWWWWWLDWWWWLWWWLWLWWLWWWWLWWWLWWDDWWL-LWWWLLWW", "WWWWWDWWWWWWWLWWWWWLWWWWLWWWWLWWWWWWWWWWWW-WWWWLWW", "WWWWWDWWWLWWDLWDWWWWLWWWLWWWWLDWWLWWWWWWWLW-WWWLWW", "WWWWDLWWWLDLLLDLDWDLLLWLLDWLWLWWLLWWWDLWLLLL-LLLWW", "WWWWWWWWWWWWWWWLWWWLWWWWLWWWWLWWWLWWWWWWDLLWW-WLWW", "WWWWWLWWWLLDWLWWDWWLLWWDLWWWWLWWWLDWWLLWDWLLWL-LWW", "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWLWWWWWWWWWWWWWWWWW-WW", "WWWWLLWWWLWWWLDWLWWLLLWLLWWLWLWWWLWWWDWWLLLDWLWL-W", "WWWWLDWWWLLLWLWLDWWLLLWLLWWLWLWWWLWWDLLDLLLWWLWLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {94, 74, 112, 60, 145, 220, 69, 74, 76, 214, 150, 179, 152, 218, 89, 232, 158, 88, 88, 239, 207, 176, 67, 161, 244, 109, 76, 176, 76, 294, 90, 69, 103, 254, 92, 104, 89, 181, 195, 116, 161, 147, 233, 195, 64, 206, 105, 288, 95, 76};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> matches = {"-WWWWLWWWL", "D-WWLLWWWL", "WW-WLLWWWW", "DWW-DLWWWL", "WWWW-LWWWW", "WWWWW-WWWD", "DWWWDL-WWL", "WWDWWLW-WL", "WWLWWLWW-L", "WWWWWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {24, 16, 25, 17, 32, 49, 17, 19, 18, 46};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> matches = {"-LWWLWWWLWW", "W-LWLWWWLWW", "WW-WWWWLWWW", "WLL-WWWWLWW", "WWLW-WWWLWW", "DLLLL-WDLWL", "WLLLLW-WLWL", "LWLWWWW-LWW", "WWLWLWWL-WW", "LLLLLWWLL-L", "WLWWWWWLWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {28, 39, 51, 30, 42, 8, 12, 34, 45, 6, 33};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> matches = {"-WWWDLWLLWWWDLWW", "W-WLLWWWLLWWWWWW", "WD-DWWWLLWWLWLWW", "WLL-LWWLLDLLDDLL", "LWWW-WWLWWWWDLWL", "WLDWD-WWWWWLDWWW", "WWDWLL-LWWWLWLWD", "WLLWWWW-WLWLWLWW", "WWWLWWWW-WWDWLWW", "DLWWDLWLW-WWLLWW", "DWWWLLWLDL-LLLDW", "WWWWWWWWWWW-WWDW", "WLLWWWWLDWWL-DWW", "LWWLWWWWWWWWW-WW", "DDWWWLWDLWWLWL-L", "LLWDWLWLLDWLWLW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {41, 53, 40, 23, 46, 51, 26, 58, 57, 37, 21, 71, 39, 71, 29, 30};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> matches = {"-DWWDLLLWDLLLWLW", "W-DWWLLLWDLLLWLW", "WW-WWDWWWWLLLWDW", "WWW-DLLLWWWLLWLW", "WWWL-LLWWWLLLWWW", "WWLWW-LWWWWLWWLW", "WWWWWW-WWWWLWWWW", "WWWWWLL-WWWDLWWW", "WDDDLLLL-WLLLWLW", "WWWWWWLWW-LLLWLW", "WWWWWWWDWW-LWWWW", "WWWWWWWWWWW-WWLW", "WWWWWWLWWWLW-WWW", "WWDLLLLLWWLLL-LW", "WWWWWLWWWWLLLW-W", "WWDDLLLDWLLLLWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {18, 22, 39, 33, 38, 61, 75, 51, 15, 35, 70, 82, 72, 16, 61, 15};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> matches = {"-WLWWWWWWWWWWWWW", "W-WWWDWWDWWWWWWW", "WW-WWWWWWWWWWWWW", "WWW-WWWWWWWWWWWW", "WWWW-WWWWWWWWDWW", "LWWWW-WWDWWWWWDW", "LWWDWD-WWWWWWDDW", "WWDDWWW-DWWWWWWD", "WWWWWWWW-WWWWWWD", "WWWWWWWWD-WWWWWD", "LWWWWWWWWW-WWDWW", "DWWWWDWWWWW-WWDD", "LWWDWWWWWDWW-WWW", "WWWWWLWWWWWWW-WW", "WWWWWWWWWWWWWD-D", "WWDWWWWWWWWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {55, 41, 50, 48, 43, 44, 34, 37, 47, 42, 40, 37, 38, 46, 44, 48};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> matches = {"-WWDWLWWLDWWWWLW", "L-LLWLWWLDWWWLLL", "LW-WWWWWWWWWWWWW", "LWL-WLWWWWWWWWDW", "LWLL-LWWLDWWWWLL", "LWWWW-WWLWWWWWLW", "LWLWWL-WLWWWWLLL", "LWLWWLW-LLWWWLLL", "DWLWWLWW-WWWWWLW", "LWWLWLWWW-WWWWWW", "LWLWWLWWLD-WWDLL", "LWLWWWWWLLW-WLLL", "LWLLWLWWLLWW-WLL", "LWLLWWWWLWWWW-WW", "WWLDWWWWWWWWWW-W", "LWWWWDWWWWWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {72, 19, 75, 51, 22, 67, 24, 21, 64, 49, 23, 24, 21, 46, 71, 61};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> matches = {"-LLLLLLLLLLLLLLL", "L-LWLLLLLLLLLWLW", "WL-WLWLLLLLWLWLL", "WLL-LLLDLLLDLLLL", "LWLL-LLWWLWWLDLW", "WWLWW-LWLLWWWWLL", "WWWDWW-WLLDWWWLL", "LLLWLLL-LLLLLDLL", "WWLLWLLL-WWWLWLD", "WLLWLLLWW-WWLLLL", "WDWWWLLDLW-WLDLW", "LLLLLLLLLLL-LLLL", "WWWLLLWWWWDW-LWW", "WWLLLLLWLLLDL-LL", "WWDWLLLWLLLDWW-W", "WWDLDLWLLLLWLWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {12, 28, 47, 27, 50, 66, 68, 24, 58, 54, 53, 12, 67, 28, 65, 45};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> matches = {"-WLWWDLWLWWWWLWWLD", "L-LLLDLLLDWLLLWWLW", "WW-WLDLLLWWDWWWWLW", "LWL-WLLWLLWLLLLDWW", "LWDW-WDWLWWWWWLWWW", "LLLDW-LLLWWLLLWWLW", "LWWWLL-WWWWDWLWWDW", "WWWLLWW-WWWLWLLWLW", "WWWWWWWW-WWLLWWWLW", "LWLWLDLLL-WLWLWWLW", "LLLLLWLLLW-LLLWWLD", "LDWWLWLWLDW-WLWWLD", "WDLDWWLLLWWL-LWWDW", "WWWWLWWWWDWWW-WWWD", "LWLLLLLWLWWDLL-WLD", "LWLDLWLLLDDLLLW-LL", "WDWWLWLLWWWLDLDW-L", "LWLWLWLLLWWLWLWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {65, 23, 63, 34, 74, 32, 75, 60, 81, 29, 14, 63, 49, 86, 27, 13, 65, 35};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> matches = {"-WWWWWLLWDWWWWWWWL", "L-LWLLLLLLDWLLWWLL", "WW-WLWLWLWWLLLLWLW", "LDL-LWLLLWDLLLLWWL", "WWLW-WWWLWWWWLWWLW", "LWLLL-LLLLDLLLLWLL", "WWWWLW-WLWWLWLWWWW", "LLWWLWL-LLWWWWWWLW", "LWWWWWWW-WWWWWWWWW", "WWWWLWLWD-WWLLLWLL", "LDLWLDLLLL-LLLLDLL", "LWWWLWLWLLW-WLDWLL", "LWLWWWWLLWWW-WLWLW", "WWWWWWLWLWWWW-WWWW", "LWWLLWLLLDWLLL-WLW", "LLLLLLLLLLLLLLL-LL", "WWWWWWLWLWWWLLLW-W", "LWLWLWLWLLDWDLDWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {73, 21, 51, 23, 75, 14, 81, 54, 94, 51, 13, 46, 61, 84, 45, 1, 72, 45};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> matches = {"-LWWLWWWWWWWWWWWWL", "L-WWWWLWWWWWWWWWWW", "LW-WLLWLDWLLWWWWLL", "LLL-LLLLLLLLLLLLLL", "LLLW-WWWLLLLWWLWLL", "LLLWW-LLWWLLWWWWLL", "LLWWLW-LWWWLWWWLLL", "WLWWWWW-WWLLWWWWWW", "LLLWWLLL-DLLWWLDLL", "LLLDLDLLL-LLWLLDLL", "LLWWWWWWWW-WWWWWWW", "WLWWWLWWWWL-WWWWWL", "LLLLLLLLLLLL-LLLLL", "LLLWLLLLLLLLW-LLLL", "LLLWLLLLWWLLWL-WLL", "LLLWLLLLLLLLWLD-LL", "LLWWWWWLWWWLWWWW-D", "WLLWWWLLLWLLWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {84, 93, 55, 4, 48, 49, 57, 78, 36, 22, 84, 81, 3, 21, 34, 21, 70, 70};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> matches = {"-WLWWWWWWWLWWWWWWW", "W-LWWWWWWWWWWWWWWL", "LW-WWWWWWWLWWWWWWW", "LLL-WLLLLWLLWWDLLL", "LLLW-WLLWWLWWWWWLL", "LLLWW-LLWDLLWWWWLL", "WLLWWW-WWWWLWWWWLL", "WLWWWWL-WWLLWWWWWW", "LLLWLLLL-WLDWWWDLL", "LLLWLLLLL-LLWWWWLL", "LLLWWWWWWW-LWWWWWW", "LLWWWWWWWWL-WWWWWW", "LLLWLLLLLWLL-DWWLL", "LLLWLDDLDWLLW-WWLL", "LLLWLLLLLWLLWW-WLL", "LLLWLDDLLWLLWWW-LL", "LDLWWWWWWWLWWWWW-W", "WLLWWWWLWWLLWWWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {84, 88, 90, 13, 45, 39, 62, 69, 33, 16, 84, 76, 13, 19, 16, 21, 73, 66};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> matches = {"-WLWWWWWWDLWWWWWWW", "W-LLWWWWLLLLLLLWLL", "WW-WWWWWWWWWWWWWWW", "LWL-WWWWLWWWWWWWLW", "LWLW-WWWWLLWLLLWWD", "LDLWD-WWLLLLLLLWDL", "LWLLWW-WLDLDLLLWWL", "LWLLDWW-LLLWLLLWWL", "LWLDWWWW-DWWLDLWWW", "LWLLWWWWW-WWWLWWWL", "WWLWWWWWWW-WLDWWLW", "WWLWWWWWWWL-WLLWWL", "LWLWWWWWWWWW-WLWWW", "WWLWWWWWWWWWW-WWWW", "LWLWWWWWLWWWLW-WWW", "LWLLLWWWWLLDLLW-LL", "LWLLWWWWLDWLLWWW-L", "WWLWWWWWWWWWLWLWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {76, 19, 102, 58, 33, 15, 20, 19, 54, 55, 64, 47, 75, 74, 66, 19, 41, 67};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> matches = {"-LLWWWWWLWDWWLWWLL", "W-WWWWWWWWWWWLWWWL", "WW-WWWWWWWWWWWWWWW", "WWL-WDWWWWDDWLWLLW", "WLLW-DWWDWLWWWDDLL", "WDLWW-WWWWWWWWDWWW", "WLLWWW-WWWWWWLDDDW", "WLLWWLW-WDLWDLWLLW", "WWLWWWWW-WDDWLLLWL", "WLLWWLWWL-LWWLLWLL", "WWLWWWWWWW-WWWWLWW", "WWLWWDWWWWL-WWWWLW", "WDLWWWWWLWLW-LLLDD", "WWLWWLWWWWWWW-DWWW", "WWLWWLWWDWWWDW-WLD", "WWLWWWWWWWWWWWL-WW", "WWLWWWWWWWWWWWWD-W", "WDLWWDWWWWWWWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {31, 63, 99, 33, 28, 60, 36, 26, 43, 25, 63, 42, 29, 67, 52, 63, 69, 61};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> matches = {"-WWLWWDWWDWWWWWWLW", "L-WLDWDDWDWWWDWDLW", "LW-LLWWWWWWWWDWDLW", "WWW-WWWWWWWWWWWWLW", "LWWL-WWWWLWWWWWWLW", "LWWDL-WDWLWWWWWWLD", "LWWLWW-WWLWWWWWWWW", "WWWLWWW-WLWWWWWWWW", "LWWLLWLW-LWWWLWDLW", "WWWWDWDDW-WWWWWWLW", "LWWLWWDWWL-WWWWWLW", "LWWLLWWDWLW-WWWWLW", "LWWLWWLDWLWW-DWWLD", "WWWLWWDDWLWWW-WWLD", "LWWLLWLLWLWWWW-WLW", "LWWWWWWWWWWWWWW-LW", "LWWWWWWWWWWWWWWW-W", "LWWLLWWWWDWWWWWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {80, 30, 35, 88, 59, 33, 56, 54, 28, 75, 37, 34, 30, 42, 30, 48, 93, 40};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> matches = {"-LLWDWWWWWLWLWWWWWW", "W-WWWWWWWWLWWWWWWWW", "WW-WWWWWWWDWWWWWWWW", "WLW-LWWWWWWWWWWWWWW", "WLWW-WWWWWWWWWWWWWW", "WLLDL-WWWDLLLLWDWWW", "WLDWWW-WWWLWLWWWWWW", "WLLWLWW-WWLDLWWDWWW", "LLLDWWDW-DLDWDWWWWW", "WLLWLWWWW-WWWLWDWWW", "WLDWWWWWWW-WWWWWWWW", "WWLWLWWWWDD-LDWWWWW", "WLWWLWWWWWLD-WWDWWW", "WWWLDWWWWWDWW-WWWWW", "DLLWLWWWWWLWLW-DWWW", "WWLWDWWWWWLWLDW-WWW", "WLLDLWWWWWLDLLWW-WW", "DLLDLWWWWWLWWWWWW-W", "WLLWLWWWWDLDLWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {45, 93, 87, 55, 84, 27, 44, 35, 32, 44, 88, 47, 68, 59, 35, 46, 32, 38, 35};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> matches = {"-DDDDDDDDDDDDDDDDDDD", "D-DDDDDDDDDDDDDDDDDD", "DD-DDDDDDDDDDDDDDDDD", "DDD-DDDDDDDDDDDDDDDD", "DDDD-DDDDDDDDDDDDDDD", "DDDDD-DDDDDDDDDDDDDD", "DDDDDD-DDDDDDDDDDDDD", "DDDDDDD-DDDDDDDDDDDD", "DDDDDDDD-DDDDDDDDDDD", "DDDDDDDDD-DDDDDDDDDD", "DDDDDDDDDD-DDDDDDDDD", "DDDDDDDDDDD-DDDDDDDD", "DDDDDDDDDDDD-DDDDDDD", "DDDDDDDDDDDDD-DDDDDD", "DDDDDDDDDDDDDD-DDDDD", "DDDDDDDDDDDDDDD-DDDD", "DDDDDDDDDDDDDDDD-DDD", "DDDDDDDDDDDDDDDDD-DD", "DDDDDDDDDDDDDDDDDD-D", "DDDDDDDDDDDDDDDDDDD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> matches = {"-LLLLLLLLLLLLLLLLLLL", "L-LLLLLLLLLLLLLLLLLL", "LL-LLLLLLLLLLLLLLLLL", "LLL-LLLLLLLLLLLLLLLL", "LLLL-LLLLLLLLLLLLLLL", "LLLLL-LLLLLLLLLLLLLL", "LLLLLL-LLLLLLLLLLLLL", "LLLLLLL-LLLLLLLLLLLL", "LLLLLLLL-LLLLLLLLLLL", "LLLLLLLLL-LLLLLLLLLL", "LLLLLLLLLL-LLLLLLLLL", "LLLLLLLLLLL-LLLLLLLL", "LLLLLLLLLLLL-LLLLLLL", "LLLLLLLLLLLLL-LLLLLL", "LLLLLLLLLLLLLL-LLLLL", "LLLLLLLLLLLLLLL-LLLL", "LLLLLLLLLLLLLLLL-LLL", "LLLLLLLLLLLLLLLLL-LL", "LLLLLLLLLLLLLLLLLL-L", "LLLLLLLLLLLLLLLLLLL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> matches = {"-WWWWWWWWWWWWWWWWWWW", "W-WWWWWWWWWWWWWWWWWW", "WW-WWWWWWWWWWWWWWWWW", "WWW-WWWWWWWWWWWWWWWW", "WWWW-WWWWWWWWWWWWWWW", "WWWWW-WWWWWWWWWWWWWW", "WWWWWW-WWWWWWWWWWWWW", "WWWWWWW-WWWWWWWWWWWW", "WWWWWWWW-WWWWWWWWWWW", "WWWWWWWWW-WWWWWWWWWW", "WWWWWWWWWW-WWWWWWWWW", "WWWWWWWWWWW-WWWWWWWW", "WWWWWWWWWWWW-WWWWWWW", "WWWWWWWWWWWWW-WWWWWW", "WWWWWWWWWWWWWW-WWWWW", "WWWWWWWWWWWWWWW-WWWW", "WWWWWWWWWWWWWWWW-WWW", "WWWWWWWWWWWWWWWWW-WW", "WWWWWWWWWWWWWWWWWW-W", "WWWWWWWWWWWWWWWWWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> matches = {"-LWLDWWWLWWLLDWLWLLW", "W-WDWWWWWWWWWWWWWWWW", "WL-LWWWWLWWDLWWWWLDW", "WWW-WWWWLWWWWWWWWWWW", "WLWL-WWWLWWWLWWWWLWW", "WLWLW-WWLWWLLWWLWLLW", "WLWLWW-WLWWLLDWLWLWW", "WWWLWWW-LWWWDWWDWLWW", "WLWWWWWW-WWWLWWWWWWW", "WLWLWWWWL-WLWWWDWLWW", "WLWLDWWDLW-LLDDLWLWW", "WLWLWWWWLDW-LWWDWWWW", "WWWWWWWWWWWD-WWWWWWW", "WLWLWWWWWWWWD-WWWLWW", "WLWWWWWWWDWWLW-LWLWW", "WWWWWWWWLWWLLWW-WLDW", "WLWWDWWWLLWLLWWL-LWW", "WWWLWWWWLWWWWWWWW-WW", "WLWLWWWWLDWLWWWWWL-W", "WLWLWWWDLWWLLWWLWLL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {29, 97, 38, 94, 45, 33, 34, 46, 96, 46, 28, 70, 93, 49, 44, 67, 34, 93, 51, 31};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> matches = {"-WW", "W-W", "WW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 6, 6};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> matches = {"-LWWLWDLDWWWWWWDDWDW", "D-WWLDDWDWDLWDDWLWDD", "LL-DLDWDLDLDWWWLWDDW", "LDD-LLLDLWLWWWWDWDWL", "LWWW-DWDLWDWDWWWDWDW", "DLLWD-WWLLDDDLWWDWWW", "WWLWDL-LLDWWWWWDWWLW", "LLLLLDW-LDLWDDLLLDWL", "DWWWWDDD-DWWWWDWWWDW", "WWWWLLLWL-LWWWWWLWWW", "DWWWWWWWLW-WDWWWWWWW", "DDDLLLDWWWL-DDWDWLDD", "LWLWLDLLLDLW-DDDWWDD", "LLWWLWDDLWLWL-WWWDLL", "WWWWLLDDDWLWDD-WWWLW", "DLDLLLWWLLLWWLW-DWLL", "DLWWWLDLWWDWWDWL-WWD", "LLDDLLWLLWLWLDLWW-WW", "LLWLLLWWLWLWWDWWLD-W", "LLWDLWDWDWLLWWDDWWL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {72, 62, 41, 41, 83, 63, 53, 35, 86, 50, 90, 32, 34, 41, 45, 36, 51, 32, 51, 45};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> matches = {"-LL", "L-L", "LL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 6, 6};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> matches = {"-DWWD", "L-WLL", "DD-WD", "DDL-L", "DDLL-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {14, 7, 12, 8, 10};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> matches = {"-WWWWDDDWDDWWWDDDWDDWDDDDDDDWDDWWDWDDDDDWWDDDWDDWW", "W-WWWDWDWWWDWWDDDWDDWDWDDDDDWWWDWWWDDDDDWDDDWDDWDW", "DW-DWDDWWDDWDWWWWWDDWWDDWDDWWDDWDDDDDDWWDWDWWDWDDW", "DDW-WWDDWDWWWWWDDDDDDDWWWWWWWWWWDWDDDWDWDDWWWWDDDD", "DDDD-DDDDDDDWWWDDWDWDWDWWDDWWWDWWWDDWWWWDWWWWDWDWW", "DDDDW-WDWWDWDWDWDDDDDWDDWWDWWDDWWDDDWDDDDDDWDWDDDW", "WDWDDD-WDWDWDWWWWWDDDWDWDWDDWWDWDWDDWWDWWDWDDWDWWW", "WDWDDWW-DWDDDDDDWWDWDWDDDDDDDDDDWDWWWWWDDWDDDDDWWW", "DDDWDDDW-DDWWWDWWDDDWWDDWWDDWWWWDDWDWDDWWWWDDDDWWD", "WDDDWDDWW-DDWWDWWDDWWDWDDWDWWWDWDWWDDWWWDWDWWWWWWW", "WDWWWWWDDD-WDDDWDDWWWDWWDDDWWDWWWDWWWWWDDWDWWWWWWD", "WDWDDDWWDDD-DDDDWWDWDWDDWWDWDWDWWWWWWDWDDWDWDWDWDD", "DWWDDWDDWDDD-DDDDDWDDWWDWDDWDWDWWWDWDDDDWDWDDWWWDW", "WDDDDDDDWWDDW-DDDWWWDDWDWDWDWWWWDDDDWWDDDDWDWWDDWD", "DWDDDDWDDDDDDW-WWDDWDWDWDDWDDWWDDDWWWDWDDDDDDDWDWD", "DDDDWWWWWWDWWWW-DWWDDDWDDWWWWWDWWWWDWWDDWDWWDDDWDD", "DWDWWDWWDWDWDDWW-WDDWDWDDDDWDWWDDDDWWWWDWDWDDDDWWD", "WDDDDDWWDWWDWDDWW-WDDDDDDDWDDWWWWDWWDDDDDDDWDWDWDW", "WDDDWDDDWWWDWWDDDD-DDDWWWDWWDDDDDWWWDDDDWDWWWDDDWW", "WWDWDWWDWWDWDDWDWDD-WWWDWWWDDWDDDWDWWDWWDDWWWWWWDD", "DDDDDDWDWDDDDDWDDWDW-WDDDDDWWDDWDDWDDWDWDDWWDWWWWD", "DDWDDWDWDWDWDWWWDWDWD-WWWDWWDWWDDDDDWDDWDDWDDDDDWW", "WWWWDDWWWDDWDDDDWDDDWW-DWWWWWWDWWDDWDDWWWWDWWDWWWD", "DWWWWWDDDDDDDDDDDWWWWWD-WDWDDWDWDDDWWDDDWDDWWDDDWD", "WDWWDWWDDWDDWWWDDDDWDDDD-WWDDWWWDDDWDDWWDWWDWDDWWD", "WWDDDDWWWWWWDDWWWDWWWWDWW-DDDWWWDDDWDWDWDDWDWDDDWW", "WDWWWDDDWDDDDDWDDWDWWDWWWD-DDDWDDWWDWDDWDWWDDDWWWD", "DDDWWWDDDWWWDDDDWDDWWWWDWDW-WWWWWDDDWWDDWWWWWWWDWW", "WWWDWDWDDDDWDDDWWDWWWWDWDDWD-DDWDDDWWDWWWDDWDDDWDD", "WWWDWWDWDWWWDWWDDWDDWDWWDWDWD-WDDWDWWDWDWDWDWDDDDW", "WDDWWWDWWWWDDDWWWWDWDWDDDDDWDW-DDWWDDWWWDWWDWDWWWD", "WDWDDDDDWWDWWWWDWDDDDWDWDDDWDWW-DDWWWWWDWDDWWWDDDD", "WWDDDDDDWDWWWWDWDDDDWWDWDDDDWDWD-DDWDDWWDDWWWWWDDD", "DWDDDDWDDDDWWDWWDWDWWDWWWDDWDWWDW-WDDWDWDWDWDDDWDD", "DWDWDWWWDWWWWDDDWWDDWDWDDDDDWWDDDD-WWDWWWWWWWWWWWW", "WWWDWWDDWWDWWDWWDDWDWWDWWDDDDWDDWWD-DWWDWWDWDDWDWW", "WWWWDWDWWWWDWWWWWDDDWDDWDWWWWWWDDWWD-WDDDWWDWWDWDW", "DWDDWWDDDWDDDWDWDDDDDWDWWWDDDDDWDWWWD-WWDWWDWWWWWW", "WWWWDDDDWDDWWWWWWWWWDWWDWWWDDDDDWWDWDD-DWDWWWDDDDD", "DDDWDWWDWWWDDWDDWWDWDDDDWDDDWWWDDDDWWDW-DDDDDDWDDW", "DDWDDWDDWDDDDDDWDWWWDDDWDWWWDWDWWWDDDDDW-DWDDDWDWD", "WWDDWWWDDWWDDWDWDDWWDDDDDWDDDWDWDDDDDWWWW-DDWWDWDD", "DWDDWDWWDDDWDDWWWWDWDDWWDWWDDWWWDDDWWWWWDW-DWDDDWW", "DWWDWDWDDWDWWDDDDWWWDWWDDDDDDDWDWWDWDWWDWWD-DWDWDD", "DWWWWDWDDWDWWWWDWWDDDWWWWDWWWWDWDWWWWDWWWDWW-DWDDD", "DWWDWWDWDWDWWDWWDWWDDWWDDWWDWWWWWWWWWWDDWWWDW-DDWD", "DDWWWWDWDDWDWDDDWWWWDWWWDWWDDDDDDWDDDWDWWDWWWW-WDW", "DDDDDWDDDWWDWDDWDWDDWDDWDWDWWWDWDWWDDWDDWWDDDDD-WW", "DWDWDWDWWDDDDWWDWDDDDWWWDDDDWDWWDDDDWDDDWWDWWDWD-W", "DWWDWWWWWDDDWDWDWWWDWDWWWDDWWDWWWWDDWDWDWWWWWDWWW-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {113, 119, 119, 131, 123, 110, 127, 116, 119, 129, 143, 118, 114, 114, 108, 130, 120, 110, 124, 130, 112, 115, 132, 114, 121, 132, 122, 133, 118, 117, 128, 114, 121, 118, 135, 127, 134, 123, 125, 112, 111, 116, 122, 116, 132, 139, 129, 112, 112, 138};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> matches = {"-DD", "L-L", "WD-"};
    SoccerLeagues* pObj = new SoccerLeagues();
    clock_t start = clock();
    vector<int> result = pObj->points(matches);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 2, 8};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22755004&rd=13751&pm=10505
********************************************************************************
#include <vector>
#include <fstream>
#include <sstream>
#include <set>
#include <string>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <map>
#include <cstring>
#include <cmath>
#include <queue>
#include <numeric>
#include <cstdio>
 
using namespace std;
 
#define fe(i,a,n) for(int i = a, _n = n; i < _n; i++)
#define fi(i,a,n) for(int i = a, _n = n; i <= _n; i++)
#define LL long long
 
class SoccerLeagues {
  public:
    vector <int> points(vector <string> matches) {
      int n = matches.size();
      vector<int> res(n, 0);
      fe(i,0,n) {
        fe(j,0,n) { if(i == j) continue;
          if(matches[i][j] == 'W')
            res[i] += 3;
          else if(matches[i][j] == 'D') {
            res[j]++;
            res[i]++;
          }
          else {
            res[j] += 3;
          }
        }
      }
      return res;
    }
       
 
};
 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/