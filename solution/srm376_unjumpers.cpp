/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=8288
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Unjumpers {
public:
    int reachableTargets(string start, vector<string> targets);
};

int Unjumpers::reachableTargets(string start, vector<string> targets) {
    int ret;
    return ret;
}


int test0() {
    string start = "**.";
    vector<string> targets = {"..*", "*.**", ".*.*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    string start = "..***";
    vector<string> targets = {"..****..*", "..***....", "..****"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    string start = "*..*";
    vector<string> targets = {"*..*......", "*.....*...", "...*.....*", "...*..*...", "*........*", "*...***..*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    string start = "...***";
    vector<string> targets = {"***...", "..****", "**....**", ".*.*.*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    string start = "..................................................";
    vector<string> targets = {"."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    string start = ".*.";
    vector<string> targets = {"*.*", ".", "***", "*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    string start = "*..";
    vector<string> targets = {"*", "*...", "*.....", "*.........", ".*.....", ".*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    string start = "*..*";
    vector<string> targets = {"*..*", "***", "************************************************", "**...*", "**....*", "**.....*", "...."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    string start = "**************************************************";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    string start = "****..........**.*..******..***..*";
    vector<string> targets = {"*..*.*.*...****.*", "**..**..*..****.*.*.**.....****.**", "****.*.**.***...*...*...*....*..**.****..", "..**..**.*.*****..*.*.**.***.*..*****...*...*", "*.", "..*.**.....****.*******.****", "***.**...*", "****....*.*.*.**......*..", "**..**..**..**..*..**.**.*****..****..**......**", "**.*..****......*.*", ".*..*.***.*..."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    string start = "*******.*******..*.**********.****.*.***.*";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    string start = "......*.....*..........................*......";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    string start = "*******.****.******************..******.**********";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    string start = "*****.***************************...**************";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    string start = ".";
    vector<string> targets = {"**..*.**", ".*.**", "*.*..*.**", "***.*...*.", "...**..."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    string start = "*";
    vector<string> targets = {"**..*.**", "..*.**", "*.*..*.**", "***....*.", "...**..."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    string start = ".*";
    vector<string> targets = {"**..*.**", "..*.**", "...*..*...*.***", "***....*.", "...*....*....."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    string start = "*";
    vector<string> targets = {"*********.***.******", "***..***.*****.*.***", "****.**********..**.", "*****.********.*****", "****.*.*******.****.", "**.*******.*******.*", "****.**********..***", "..******.****.******", "*****.********..****", "********************"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    string start = ".*";
    vector<string> targets = {"*********.***.******", "***..***.*****.*.***", "****.**********..**.", "*****.********.*****", "****.*.*******.****.", "**.*******.*******.*", "****.**********..***", "..******.****.******", "*****.********..****", "********************"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    string start = "..*";
    vector<string> targets = {"*********.***.******", "***..***.*****.*.***", "****.**********..**.", "*****.********.*****", "****.*.*******.****.", "**.*******.*******.*", "****.**********..***", "..******.****.******", "*****.********..****", "********************"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    string start = "***";
    vector<string> targets = {"*********.***.******", "***..***.*****.*.***", "****.**********..**.", "*****.********.*****", "****.*.*******.****.", "**.*******.*******.*", "****.**********..***", "..******.****.******", "*****.********..****", "********************"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    string start = "..*..";
    vector<string> targets = {"..*..", ".", "*", "..*", "..................................................", ".................................................*", "**.....................................*..*..*..*", "**..................................*..*..*..*..*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    string start = "*.................................................";
    vector<string> targets = {"*", "*.................................................", "...*.....*...**............*...**.*.*.****.*.*..**", "...*.....************.............*..............*", "...*.....******...***.............*..............*", "...*.....******...***......******.*.*.****.*.....*", "*..*..*..*...*****.......***......*.......*..*...*", "...**..*.***...***................*..*...*...*...*", "*..*..*..************....***......*..............*", "...**..*.***...******.............*..............*", "*..*..*..*********.......***......*.*..*..*..*...*", "...**..*.***...*...**.............*..*...*...*...*", "*..*..*..****...*****....******...*..............*", "...**..*.***...******.......***...*..............*", "*..............................................***", "...*.....*...**............*...**.*.*.****.*.*..**", "...*.....************.............*...........****", "...*.....******...***.............*...........****", "...*.....******...***......******.*.*.****.*..****", "*..*..*..*...*****.......***......*.......*..*****", "...**..*.***...***................*..*...*****...*", "*..*..*..************....***.........****.....****", "...**..*.***...******....***......*......***..****", "...**..*.***...******..***..***......*.....*******", "*.............***......***........*......***.....*", "*.*...............................................", "...*.....*...**...........**...**.*.*.****.*.*..**", "...*.....************....*........*..............*", "...*.....******...***.........*...*..............*", "...*.....******...***....*.******.*.*.****.*.....*", "*..*..*..*...*****........**......*.......*..*...*", "...**..*.***...*.*................*..*...*...*...*", "*..*..*..*******.**.*....***......*..............*", "...**..*.***...***.**.............*..............*", "*..*..*..******.**.......***......*.*..*..*..*...*", "...**..*.***...*...*..............*..*...*...*...*", "*..*..*..****...*****....***.**...*..............*", "...**..*.***...******.......***..................*", "*.............................*................***", "...*.....*...**............*...*..*.*.****.*.*..**", "...*.....************.........................****", "...*.....******...***.............*...........****", "...*.....******...***......***.**.*.*.****.*..****", "*..*..*..*...*****.......***......*.......*..*****", "...**..*.***...***................*..*...*****...*", "*..*..*..************....***.........****.....****", "...**..*.***...******....***......*......***..****", "...**..*.***...******..***..***......*......******", "*.............***......***........*......***.....*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    string start = "***";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    string start = "*************************.********.********..*****";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    string start = "**************************************************";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    string start = "*****";
    vector<string> targets = {};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    string start = "****";
    vector<string> targets = {"**.**"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    string start = "*.*.****.****.*.*....*...*..******.**.*.****.***.";
    vector<string> targets = {"*.*.****.****.*.*....*...*..******.**.*.****.***.", "*.****.***.**...**.***.****.***.**.", "*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*", "...*", "*.***.***.***************", "*****************", ".", "*.**.******.***...........*", "********...****...****", "*****.*****.*****.*****.*****.*****", "*.*.****.****.*.*....*...*..******.**.*.********", "*.*.*.*******.*.*....*...*..******.**.*.****.***.", "*.*.****.****.*.*....*...*..******.**.*.****.***.", "..*********.*.*.*..**....*..******.**.*.****.***.", ".................", "*.***.*****", "*....*****....****....****", "*.*.****.****.*.*....*...*..******.**.*.****.***.*", "*............*", "...*...*...*...", "**********.*************.********", "*.*.*.*.*.*.*.*.*.*", "........*.......*......*", "**************", "**************************", "..........*...*..****.***.***....*", "********", "*.*....*...*.*", "..........*...*..****.***.***....*", "..........*...*..****.***.***....*", "..........*...*..****.***.***....*", "*******.**********.*******.", "*.*.****.****.*.*....*...*..******.**.*.****.***.", "*.*.****.****.*.*....*...*..******.**.*.****.***.", "*.*.****.****.*.*....*...*..******.**.*.****.***."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    string start = "...";
    vector<string> targets = {"***"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    string start = ".";
    vector<string> targets = {".", "*", ".*", "*.", "**", "..*", ".*.", ".**", "*..", "*.*", "**.", "***", "...*", "..*.", "..**", ".*..", ".*.*", ".**.", ".***", "*..*", "*.*.", "*.**", "**..", "**.*", "***.", "****", "....*", "...*.", "...**", "..*..", "..*.*", "..**.", "..***", ".*..*", ".*.*.", ".*.**", ".**..", ".**.*", ".***.", ".****", "*...*", "*..*.", "*..**", "*.*..", "*.*.*", "*.**.", "*.***", "**..*", "**.*.", "**.**"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    string start = "..*..*.*.*.**.**..**.*...*.**.*.*.*.**.*..*.*.*";
    vector<string> targets = {"..*..*.*.*.**.**..**.*...*.**.*.*.*.**.*..*.*.*", "..*..*.*.*.**.**..**.*..**.**.*.*.*.**.*..*.*.*", ".**.**..**.*.*..*.*.*..*.*.**.*.**.**...*.....*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    string start = "***";
    vector<string> targets = {"..."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    string start = "...*..*..*.***.***..*.**...**";
    vector<string> targets = {"***...*.**", "**..*..**..***", "*.**..***...."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    string start = ".";
    vector<string> targets = {"******"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    string start = "*";
    vector<string> targets = {".*"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    string start = "**************************************************";
    vector<string> targets = {".................................................*", "................................................*", "...............................................*", "..............................................*", ".............................................*", "............................................*", "*", "**", "***", "****", "*****", "**.*..**.*.*.*.*.*.*.**..*.*.*.*.*.*.*..*.*.*.*", ".**..*.*.*.*.*.*.*.*.*.*.****.*.**"};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    string start = ".*...";
    vector<string> targets = {"*.*...."};
    Unjumpers* pObj = new Unjumpers();
    clock_t start = clock();
    int result = pObj->reachableTargets(start, targets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=13351270&rd=10796&pm=8288
********************************************************************************
#include <iostream> 
#include <sstream> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <memory> 
#include <cctype> 
#include <string> 
#include <vector> 
#include <list> 
#include <queue> 
#include <deque> 
#include <stack> 
#include <map> 
#include <set> 
#include <algorithm> 
using namespace std; 
 
typedef long long Int; 
typedef pair<int,int> PII; 
typedef vector<int> VInt; 
 
#define FOR(i, a, b) for(i = (a); i < (b); ++i) 
#define RFOR(i, a, b) for(i = (a) - 1; i >= (b); --i) 
#define CLEAR(a, b) memset(a, b, sizeof(a)) 
#define SIZE(a) int((a).size())  
#define ALL(a) (a).begin(),(a).end()  
#define PB push_back 
#define MP make_pair 
 
int F(string s) 
{ 
  int A[] = {0, 0, 0}; 
  int N = SIZE(s); 
 
  int i; 
  FOR(i, 0, N) 
    if(s[i] == '*') 
      break; 
 
  if(i == N) 
    return -1; 
 
  FOR(i, 0, N) 
    if(s[i] == '*') 
      A[i % 3] ^= 1; 
 
  return A[0] | (A[1] << 1) | (A[2] << 2); 
} 
 
class Unjumpers { 
  public: 
  int reachableTargets(string start, vector <string> targets)  
  { 
    int temp = F(start); 
    int res = 0; 
    int i; 
    FOR(i, 0, SIZE(targets)) 
    { 
      int t = F(targets[i]); 
      if(t == temp || (t ^ 7) == temp) 
        ++res; 
    } 
 
    return res; 
  } 
 
   
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/