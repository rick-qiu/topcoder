/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11492
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TwoConvexShapes {
public:
    int countWays(vector<string> grid);
};

int TwoConvexShapes::countWays(vector<string> grid) {
    int ret;
    return ret;
}


int test0() {
    vector<string> grid = {"??", "??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> grid = {"B?", "??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> grid = {"B?", "?B"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> grid = {"BW", "??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> grid = {"WWB", "WWW", "WWW", "WWW"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> grid = {"BBBBBB", "WWBBBB", "WBBBBB"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> grid = {"?BB?", "BBBB", "?BB?"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> grid = {"???", "???", "???"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 66;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> grid = {"?????", "?????", "?????", "?????", "?????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 986;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> grid = {"W???W", "?????", "?????", "?????", "W???W"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 155967956;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> grid = {"?WW", "B?W", "BB?"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> grid = {"?WWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", "B?WWWWWWWWWWWWWWWWWWWWWWWWWWWWW", "BB?WWWWWWWWWWWWWWWWWWWWWWWWWWWW", "BBB?WWWWWWWWWWWWWWWWWWWWWWWWWWW", "BBBB?WWWWWWWWWWWWWWWWWWWWWWWWWW", "BBBBB?WWWWWWWWWWWWWWWWWWWWWWWWW", "BBBBBB?WWWWWWWWWWWWWWWWWWWWWWWW", "BBBBBBB?WWWWWWWWWWWWWWWWWWWWWWW", "BBBBBBBB?WWWWWWWWWWWWWWWWWWWWWW", "BBBBBBBBB?WWWWWWWWWWWWWWWWWWWWW", "BBBBBBBBBB?WWWWWWWWWWWWWWWWWWWW", "BBBBBBBBBBB?WWWWWWWWWWWWWWWWWWW", "BBBBBBBBBBBB?WWWWWWWWWWWWWWWWWW", "BBBBBBBBBBBBB?WWWWWWWWWWWWWWWWW", "BBBBBBBBBBBBBB?WWWWWWWWWWWWWWWW", "BBBBBBBBBBBBBBB?WWWWWWWWWWWWWWW", "BBBBBBBBBBBBBBBB?WWWWWWWWWWWWWW", "BBBBBBBBBBBBBBBBB?WWWWWWWWWWWWW", "BBBBBBBBBBBBBBBBBB?WWWWWWWWWWWW", "BBBBBBBBBBBBBBBBBBB?WWWWWWWWWWW", "BBBBBBBBBBBBBBBBBBBB?WWWWWWWWWW", "BBBBBBBBBBBBBBBBBBBBB?WWWWWWWWW", "BBBBBBBBBBBBBBBBBBBBBB?WWWWWWWW", "BBBBBBBBBBBBBBBBBBBBBBB?WWWWWWW", "BBBBBBBBBBBBBBBBBBBBBBBB?WWWWWW", "BBBBBBBBBBBBBBBBBBBBBBBBB?WWWWW", "BBBBBBBBBBBBBBBBBBBBBBBBBB?WWWW", "BBBBBBBBBBBBBBBBBBBBBBBBBBB?WWW", "BBBBBBBBBBBBBBBBBBBBBBBBBBBB?WW", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB?W"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 73741817;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> grid = {"?"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> grid = {"B"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> grid = {"W"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 77983978;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> grid = {"B????????????????????????????????????????????????B", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "B????????????????????????????????????????????????B"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> grid = {"?????????", "???????W?", "?????????", "?????????", "?????????", "?????????", "?????????", "?????????", "??????W??", "?????????", "?????????", "?????????", "?????????", "?????????", "?????????", "?????????", "?????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 3922493;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> grid = {"??????", "??????", "??????", "??????", "??????", "??????", "??????", "??????", "??????", "??????", "??????", "??????", "??????", "??????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 154998;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> grid = {"????????????????????????????????????????????B???", "???????????????????W????????????????????????????", "?????????W???????????????????????????????B??????", "????????????????????????????????????????????????", "??????????B?????????????????????????????????????", "?????????????????W??????????????????????????????", "????????????????????????????????????????????????", "?????????????????????B??????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> grid = {"???W????????????????????????", "????????????????????????????", "????????????????????????????", "???B????????????????????????", "????????????????????????????", "????????????????????????????", "????????????????????????????", "????????????????????????????", "B???????????????????????????", "??W?????????????????????????", "??????????????????????????W?", "???B????????????????????????", "????????????????????????????", "????????????????????????????", "????????????????????????????", "???????????????????W????????", "????????????????????????????", "???????????????????????B????", "????????????????????????????", "????????????????????????????", "????????????????????????????", "????????????????????????????", "????????????????????????????", "????????????????????????????", "????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> grid = {"B?????????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 34;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> grid = {"??B?B?W?????BW??????????????????B???????WWW", "???W??????????W???????????????????????B????", "?WB???????B????B??????B????B????W??B??W????", "??WB??W?BB??WB?????BB??B??????B??B?????????", "??????????B?????W?????????W?????W?W????????", "???B?????????????????????B?????????????????", "???????????????????B?????B??????B??W????B??", "W????BWB?????????????W???B??????W?B???????B", "??W??W???????????BWW??????B?????BW????W??BB", "?????BW?????????W??????B??????WB???????????", "?????????B???????W???WW?W???????B?B??BB????", "W??W??WW???????????????????????W???????B???", "?????B?????????????????????????B???????????", "????????W????W??B???????????B?????B???B????", "??????????B????????B????W???????WW?????????", "????????????W?B????B????W??????????????W?BW", "??W?W?????????W???B????W?????B?B???B???????", "?????W??????????B?BW???????????????????????", "B????????BW??????B????B??????W???????B??W??", "????????W??????W??????????W?BW??????W??????", "?????B?B??WBB????W???????????????????W?B???", "B??B??B???B?????????B????W??????????WW???W?", "B??B?????B??W??????WWW????W???????B???W?W??", "?????W?B?????W????????????????W???WW?????B?", "????WB?????????????????B??W????????????W???", "???W????????????B??W??W?B????????????????B?", "??W????W?WB????????????????BW?????WW???W???", "?BB??B???W?????BBB??W????????????????B??B??", "??????B???B????B?W?????B?????????????B???B?", "???????B?BB?W?B????????W??????B??WW????B??B", "W?????W?????B?????????????B?????????BWW????", "B?????????????????W?????W??????????W????W??", "B????B??W???B?????????W?WWB???????W????????", "BBB???????W??W??????????W?W?WB?????????????", "???W???WW???W???????????B?????????B????????", "?????????B????????????B????????????????????", "?B???W?????WWW??B?????????B????W???W???????", "??????????????????????????W????????BW???B??", "??????????W??????B?B??????B????B?????B?????", "?B?B??????????W?????????WB???B???????????W?", "???B??B?W??B?????????B????B???B?B????????W?", "??????W???????BWW??????????B????W?????????W"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> grid = {"????W?", "B?????", "?W????", "??B??B", "?B????", "??????", "??????", "?W??B?", "BWB???", "???W??", "?W?B??", "??B?B?", "??????", "??????", "??????", "??????", "??B???", "??????", "?B????", "W??B?B", "?W?B??", "?????W", "??????", "?W???B", "??????", "???B??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> grid = {"?", "W", "?", "W", "?", "?", "?", "B", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "W", "?", "?", "?", "?", "?", "W", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "B", "?"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> grid = {"WW???W?????B????????????", "????B????B??BB?????BB???", "WW??????????W??W????W?W?", "??W???????????????????W?", "W????WW?W????W????????B?", "??W?????????????????????", "B?B????W???W????????????", "????????????????????W??W", "?????WB?W???W????W???W??", "???B????B??B??????B??W??", "????W???W?W??????W??W???", "???W?????????????WB???W?", "?B???BW????????B????????", "???????????????????????B", "???????B???????B?????W?W", "??????????W?????????????", "??W???B???W??W????B?W???", "???B???????BW???W???????", "B??????????????????B????", "?????????B??????????????", "??????WB???WW????????W??", "?W?W?????????????????B??", "????????????W?B??????W??", "????BB??B?B???B??????W??", "?B?????????W??????B?B???", "??????????????B???WW????", "?B????W?W???????????????", "????????B??????B?B?????B", "??????????BW??????B???B?", "?????????B?B?????????BB?", "?????B????BW?B????BB????", "B???B???????????????????", "W??????????B????????????", "????B??B?WB?B???????????", "????????????W?W?B???W???", "??B?????W???????????B???"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> grid = {"????B??B????B?", "???????B?B????", "???WWW????????", "B??B?B???????B", "???????????B??", "?????????????B", "?????B???W????", "??????????????", "?????B?B???B?B", "??????????????", "???????W??????", "??B?????W?????", "??????W????BW?", "??BW????????B?", "W?B???????????", "????????BB???B", "??B?W?B??W????", "?????W??B?????", "???WW???????W?", "????BBW??W????", "???????B???W??", "??????W????W?W", "??????????B???", "??????W???????", "???????W???W??", "????W?????B???", "????????W????W", "??????????????", "B?B???????????", "??????????B??W"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> grid = {"B?????W????????B????B?", "??B??BB????B??????????", "?????????W????W???B???", "?W?B???????????W??????", "??????B????B??W???????", "??B???B??W????B??W???W"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> grid = {"???????W???B?????W???", "??WW????B????????????", "?B??W?W?W??????????B?", "?B??W??????????B?????", "W???????W??B?????????", "?W???B????BW?????????", "?????W???????????????", "?????B???????W?W????W", "?W???WB?B????????????", "??????????B??B??B???B", "B??????????????B?????", "W????????????????????", "???B???????????WW???B", "B??BB??W????W????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> grid = {"??BBB??W?W?????????B?????WWW??????????????????", "????W???W?B????W???????W?B?????W???????W??????", "?????????????W????????????WBW????????W?W??????", "???????W?W??????W????????B?W???W??????B?????W?", "????????BW?????B?????????W?B??W????W?????????B", "??????BB?B??????W?W????WWW??W??????B?????B????", "??????B?W?BB??W?WW?????????WB??????????B??W???", "????????BB????BB???????W?????B??W???????????B?", "???W?????????????W?W?????B?W???B???????????B?W", "??????????B???W?W???B?W???W???B?????W??????B??", "??BBWW??????????????B?????????W?????????W?????", "????W?W????W?B?B???????????B??WW?B?????B???W??", "W?????????W??B???B???B???B?????B????WBB?????B?", "B??W?W?B??????????BWB??W???????B??B??????B????", "??????B??B??????????B??WB??????????B????W?????", "W??W???B??????????B???????????????BW??????????", "WW???????????W?W???WW?B???????????B????B?????B", "?????B???????????W??W???B?B??????WW?????????B?", "W??WW?????????WB??????????W???????W???????B???", "??B??????W?B?????????W??????W????????W?????B??", "????WW?W?????B?B????????B???W??????????B?????B", "???????WB?????????????W??????????B????????????", "??BW?B?????????W????????WWB?????B?????B??????B", "W?????????????W???W????????W??????B??????????W", "???W??????????????????B???B???B????WW?B???????", "???B???????W???W?????WW??B??B??????B??W???????", "????W?W?WW?????????????????????BW?????B?????W?", "?????????????BW????W???????????????W?W??W????W", "??????BB???????????B????????WWB?B??B????????B?", "?W??B??????????????????????W??????????????????", "??????????W????B????????B?????????????????????", "?????????B?????????????????????BW?WB?W????W???", "????????W?????BB?????W???B??????????????????B?", "???????W??????W?W??????????B?B????????????????", "W??????????????B???B??????B????????W????B?????", "????????????W???B?W??W????WB????WB???????????W", "?????????WB???????B?B????????B?B?W???B??W?????", "???????B??????????B??????????W??????B?B???????", "W????????????W????B????B????????W?W??W????????", "??????????W?B???????????????????B?W???????????", "???B??W?W??W??????W???B????????????W??????B??B", "B??????????????????B?B?W??BB????B??????????WW?", "?????W????????B?WW??WB??????W??W?????B???????W", "??B???B???B???W????W??B??W????B????????B?B????", "W???W??BB?W?????????????BB??????????W?????????", "?W???W?BW?W????B???????W?W??W??????BW?????????", "??WB????????????B??B???W?B?????????????????W??", "????B???????????????????W????????????WB?W??W??", "W????WBW??B?????????B?????????????????????????", "?????B?W??????????B???????W?????????????B?????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> grid = {"???B??????B??W???W??????B????BW????W????", "??????????B?W??W?W????????????????W???B?", "?B??????????W?????W???B?????W??????????W", "?????W???????????????????W???B?B?????B?B", "?????B????????WB?????W?W????????????????", "???????B??????????????????????W?????????", "?????B????????W??W?W????????????????????", "?W??????????????B??????????WB????W?????W", "????B??W?W?W???W?W????????W???B??B????B?", "W?B?????????W???B??W??B???B?BB?W?????WB?", "????W?????????????????????W??????BW?????", "????W???????B??W?W????????????W?????W???", "?W?B??B????B????B??W??W??????????B??????", "?????B???????W?W??W???????????????BB????", "?B?????????W????B??W?????B??B??????B???B"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 464;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> grid = {"????W?????????????", "?????????W????????", "??????????????????", "??????????????????", "?????????W????????", "????????????????W?", "??????????????????", "????????W??W??????", "?WW??????????WW???", "???W??????????????", "????W?????????????", "?W???W???W????????", "?????W????????W???", "??????????W???????", "????W?????????????", "??????W?W??????W??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 33606;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 969938;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> grid = {"????????????W??", "???????????????", "???????????????", "???W?W??W??????", "????????WWW????", "??????W???W????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 6148;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 4763;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 127406;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 13200;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> grid = {"???????", "???W???", "??W??W?", "??????W", "???????", "???W???", "???????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 784;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 294734;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> grid = {"??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "?W", "??", "??", "??", "W?", "??", "??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 305;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> grid = {"??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "B?", "??", "??", "??", "??", "??", "B?", "??", "B?", "??", "?B", "??", "?B", "??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "B?", "?B", "??", "??", "??", "??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 488;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 42527;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 13838;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 404725;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> grid = {"?????????????B????????????B???????", "?????????B??????B?????????????????", "B??B??????????????????????????????", "?B??B?B?????B???????B?????????B???", "?B???????????B?B?????B????B???????", "?????B????????????????????????????", "??B?????????B?B?????????B?????????", "???????B?????B?B????????????????B?", "????????????????????????????????B?", "????????????????????????B?????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 21669;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> grid = {"??", "??", "??", "??", "??", "??", "??", "??", "??", "??", "?B", "??", "??", "B?", "??", "B?", "B?", "??", "??", "??", "B?", "??", "??", "B?", "??", "??", "??", "??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 243;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> grid = {"??????????????BB?????????????????B??????", "B??????????????????B???B???????B???B????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 38099;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> grid = {"???????W??????????????B????????????B?????????", "?????????B?????B??????????BBB???B???B????????", "????????B????B??????????????????BBB???????B??", "????????????B?????B??????????????????????????", "???BB????B???????????????????????????B??????B", "B????????????B?????B?BB??B???????????????????", "?????????????????????????????B?????B?????????", "???B????????????????B?????????????????BB?B???", "?????????????B??????????????????????B????????", "?????B??????????B?B?B????????????????????????", "??????????B????????????????????????B???B?B?BB", "?????????????????????????????????B?????B?????", "??B??????????????????????B???????B???????B??B"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 8195;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> grid = {"???????????B?B?W???????????", "?????????????????????B?????", "????????????B???????????BB?", "???BBB????????B????????????", "???????B??????????B????????", "?????B????????????????B????", "??B????????????????????????", "?BB???B????????????????B???", "B????????????????B?B???????", "??B??????B???B???????B?????", "B????????????B?????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 102;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> grid = {"??B???????", "??????????", "??????????", "?????????B", "??????????", "???B???B?B", "??B????W??", "???????B??", "??????????", "??????????", "??????????", "???????W??", "??????????", "????B????W", "???????B??", "??????????", "???B????B?", "??????????", "??????????", "?????W????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> grid = {"??????????????????????????", "?B????B??B????????????????", "?????B?????????????????BB?", "??????????????????????????", "B???B??????B?????????????B", "????B???????????????B?B?W?", "???????B???B???B??????????", "?????????B????????????????", "??B??B????B?????B?????B???", "??????B???????BB???????BB?", "?????????????????W????????", "B????????????????????B????", "?????????B????????????????", "????B??B???????????????B??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> grid = {"????????????????????????????B??", "???????????????????????????????", "???????????????????????????????", "????W?B????????B??B????????????", "??????????????????????????B?B??", "???????W?B??????????BB?????????", "B?????????????????????????????B", "B?????????????????B????BB??????", "??????????B????????????????????", "????B????????B???B?????????????", "B???????????????????????B??????", "????????B??????????????B???????", "?????????????B???????B??????B??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> grid = {"??"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> grid = {"????", "????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> grid = {"???????", "???????", "???????", "???????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1296;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> grid = {"????????????????", "????????????????", "????????????????", "????????????????", "????????????????", "????????????????", "????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 980580;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> grid = {"?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????", "?????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 60730029;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 685819111;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 503647436;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 792104885;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 383118731;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 347185194;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 387821360;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 831675423;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 466959323;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> grid = {"???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????", "???????????????????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 101192153;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> grid = {"?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????", "?????????????????????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 888681522;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 480090996;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 882384324;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 605200880;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 213501186;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> grid = {"????????????????????????????????????????????", "????????????????????W???????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 242155533;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 459211245;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> grid = {"????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "????????????????????????????????????????????", "???????????????BW???????????????????????????", "????????????????????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 485820426;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 944880718;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 466886988;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> grid = {"?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "?????????????????????????????????????????", "????WWWWW????????????????????????????????", "?????????????????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 516236605;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 116534074;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 111326409;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> grid = {"BBB", "BBB", "BBB"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> grid = {"?????????????????????????????W", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "B?????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 895878312;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> grid = {"??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????", "??????????????????????????????????????????????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 155967956;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> grid = {"BBBBBBBBBBBBBBBBBBB?", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBBBBBB", "BBBBBBBBBBBBBBBB?BB?", "BBBBBBBBBBBBBBBBB?B?"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 32664376;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> grid = {"??????????", "??W???????", "??????????", "??????????", "??????????", "??????????"};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 15999;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> grid = {};
    TwoConvexShapes* pObj = new TwoConvexShapes();
    clock_t start = clock();
    int result = pObj->countWays(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 514342491;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=20463878&rd=15175&pm=11492
********************************************************************************
#include <algorithm>   
#include <string>   
#include <set>   
#include <map>   
#include <vector>   
#include <queue>    
#include <iostream>   
#include <iterator>   
#include <math.h>   
#include <cstdio>   
#include <cstdlib>   
#include <sstream>   
 
#pragma comment(linker, "/STACK:60777216")   
 
using namespace std;   
 
typedef pair<int,int> pii;   
typedef long long ll;   
typedef vector<int> vi;   
 
#define UN(v) SORT(v),v.erase(unique(v.begin(),v.end()),v.end())   
#define SORT(c) sort((c).begin(),(c).end())   
#define FOR(i,a,b) for (int  i=(a); i < (b); i++)    
#define REP(i,n) FOR(i,0,n)    
#define CL(a,b) memset(a,b,sizeof(a))   
#define pb push_back   
 
const int mod = 1000000007; 
 
int d[55][55][2][2]; 
 
bool canbe(string s,int n1,char c1,int n2,char c2){ 
  REP(i,s.size()){ 
    if(i<n1){ 
      if(s[i]!='?' && s[i]!=c1) return 0; 
    }else{ 
      if(s[i]!='?' && s[i]!=c2) return 0; 
    } 
  } 
  return 1; 
} 
 
class TwoConvexShapes { 
public: 
 int countWays(vector <string> grid) { 
   int n = grid.size(); 
   int m = grid[0].size(); 
   int sum = 0; 
   REP(type,2){ 
     CL(d,0); 
     char fr = (type?'W':'B'); 
     char sc = (type?'B':'W'); 
     REP(i,m+1) if(canbe(grid[0],i,fr,m-i,sc)) 
       d[0][i][1][1] = 1; 
     int t; 
     REP(i,n-1)REP(j,m+1)REP(t1,2)REP(t2,2)if(t=d[i][j][t1][t2]){ 
       REP(j2,m+1)if(canbe(grid[i+1],j2,fr,m-j2,sc)){ 
         int nt1 = t1; 
         int nt2 = t2; 
         if(t1){ 
           if(j2<j)nt1=0; 
         }else{ 
           if(j2>j) continue; 
         } 
         if(t2){ 
           if(m-j2<m-j)nt2=0; 
         }else{ 
           if(m-j2>m-j) continue; 
         } 
         d[i+1][j2][nt1][nt2] =(d[i+1][j2][nt1][nt2]+t)%mod; 
       } 
     } 
     REP(i,m+1)REP(t1,2)REP(t2,2) sum=(sum+d[n-1][i][t1][t2])%mod; 
 
    REP(i,n+1){ 
      bool good = 1; 
      REP(j,n){ 
        if(j<i){ 
          if(!canbe(grid[j],m,fr,0,sc)) good=0; 
        }else{ 
          if(!canbe(grid[j],m,sc,0,fr)) good=0; 
        } 
      } 
      if(good) sum=(sum+mod-1)%mod; 
    } 
   } 
   // subtract shit!!! 
  bool good = 1; 
  REP(i,n) if(!canbe(grid[i],m,'W',0,'B')) good=0; 
  if(good) sum=(sum+1)%mod; 
  good = 1; 
  REP(i,n) if(!canbe(grid[i],m,'B',0,'W')) good=0; 
  if(good) sum=(sum+1)%mod; 
   
   return sum; 
 } 
  
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/