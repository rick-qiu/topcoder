/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11176
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class P8XMatrixRecovery {
public:
    vector<string> solve(vector<string> rows, vector<string> columns);
};

vector<string> P8XMatrixRecovery::solve(vector<string> rows, vector<string> columns) {
    vector<string> ret;
    return ret;
}


int test0() {
    vector<string> rows = {"10?", "?11"};
    vector<string> columns = {"01", "10", "1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"101", "011"};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> rows = {"0", "?", "1"};
    vector<string> columns = {"0?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "1"};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> rows = {"10", "01"};
    vector<string> columns = {"10", "01"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"10", "01"};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> rows = {"?"};
    vector<string> columns = {"?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0"};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> rows = {"??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> rows = {"????1???????????0??", "??????????????????0", "???0?????1????1?1??", "???????????1???????", "?1??????????0?1??1?", "???????????????????", "??????1??1?????????", "??1????????????????", "??0??0????1????????", "1??????0??????????1", "??1?????1???1?????1", "??????0????????????", "110????????01??????", "???1???0????0??????", "??????????1????????", "?0??????????????1?1", "??????????1?11?????", "????????0????????1?", "???????????????????", "???1???????????????", "?1????0?0???1???0?1", "??????0???????????0"};
    vector<string> columns = {"??????????????????????", "??????????????????????", "??????????????????????", "??????????????????????", "?????????1????????????", "????1?????????????????", "??????????????????????", "??????????????????????", "?????1????????????????", "???????1???????????1??", "??????????????????????", "??????????????????????", "??????????????????????", "???1??????????????????", "0???????????????0?????", "???????0?????????1????", "??????????????????????", "???????????1?1????????", "?????????1????????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0000100000000000000", "0000000000000000000", "0000000001000010100", "0000000000010000000", "0100000000000010010", "0000000000000000001", "0000001001000000000", "0010000000000000000", "0000000000100000000", "1000000000000000011", "0010000010001000001", "0000000000000000100", "1100000000001000000", "0001000000000000100", "0000000000100000000", "0000000000000000101", "0000000000101100000", "0000000000000001010", "0000000000000000000", "0011000000000000000", "0100000000001000001", "0000000000000000000"};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> rows = {"1??1??0??1??1????01?", "?1???????11?1???0???", "??????11????10????1?", "?11?111??1???1011??1", "???????011???1?1110?", "?1???11?1??10????11?", "?11??1??1?1??1101???"};
    vector<string> columns = {"11?1111", "?11?110", "1?11111", "1111111", "0111???", "11??0?0", "1111011", "??0???1", "0100?11", "111111?", "1111101", "011?110", "1111011", "1?1001?", "1001111", "1??1?10", "111?10?", "0101111", "??1?111", "11??011"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"10010000111111111011", "01001011011111110111", "00011111010010111011", "11101111110011011011", "01001110110011111100", "11011110111101011111", "01100100111011101111"};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> rows = {"001000000?00000?0", "000??100000010101", "00000000001001100", "0?0?00001001?0110", "000010?00010?0100", "00000010?110?0100", "00000?000110?0011", "101?0100100000000", "0000000100?0?0000", "10010000?01000010", "0100000??0??00010", "00010000?11000010", "10000100001?1110?", "0?00011010000?000", "?00100000?0000010", "000000?000000???0", "0??00001100010000", "100100?0000000000", "0000?000000000000", "0?000000000001101", "00101??0001010001"};
    vector<string> columns = {"01??00010?0???00?00?0", "000?0000001??0000??0?", "???0?1?0?0?1?0?0000??", "000100?00?0??00????00", "0???110?0??01??000010", "?00?10???0?0?0?000?01", "0100?0????????00?0?1?", "0?0?00?0?1?1???00??0?", "0??000??0000100?10001", "?00???????110??0?0??0", "??0??0?101??100??1??0", "?01??11?01?11000?0???", "00100?0?00???00?????0", "?000??01??00??00?0???", "??000??000?00?0?0?0?0", "0?0100?100?00?0??0?0?", "?000??0?100000?01?0?0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00100000000000000", "00000100000010101", "00000000001001100", "00000000100100110", "00001000001000100", "00000010011000100", "00000000011000011", "10100100100000000", "00000001000000000", "10010000001000010", "01000000000000010", "00010000011000010", "10000100001011100", "00000110100000000", "00010000000000010", "00000000000000000", "00000001100010000", "10010000000000000", "00000000000000000", "00000000000001101", "00101000001010001"};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> rows = {"?", "?"};
    vector<string> columns = {"10"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1", "0"};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> rows = {"??????????1??", "??0?????????1", "??????10???1?", "?1???????1???", "?????????????", "???????1????1"};
    vector<string> columns = {"1?010?", "01?111", "1111?1", "11111?", "1111??", "?1?1??", "111?00", "?01101", "?1111?", "01?110", "011?1?", "011100", "10?011"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0000000111111", "1101111001111", "0010111001111", "1111011011011", "0101101100001", "0011000100011"};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> rows = {"??01???????????1??0?10?", "0?0?1?????1??0????0????", "1??0?0???????0??????0??", "00?0??0???0?0???0?10??0", "??1???0???0???0?000??0?", "??10?0????0?0?????0??0?", "?0??????0???0010?0??0?0", "?1???0?????001??????1??", "???0???0??0?1??10??????", "???00????0??0????0??0??", "???10?00?0?0??????1??00", "???????00????????1??1??", "?0???0????1??????0???10", "??0??0??00??0???00????1", "?0?????1???????1?????0?", "??00??1???????0???????1", "1???????????001???????0", "??????10?????????10????", "????0??000??????????0?1", "???0??1???0???1????????", "00??0????001????????0??", "??100???????001??????0?", "???0????010?00?????01??", "???0??0?01?0??0????????"};
    vector<string> columns = {"?????1???????????0??????", "???0??0???????????1??0?0", "??????????0?0?0?????????", "????????????????????0???", "0?????0?????????0?0????0", "??0?0???????????0?????0?", "0??1??0??0?????0?10???0?", "?????????0???????????1??", "??10???0????00?????????1", "??????0??????1??????????", "??00?1?1??????????00???0", "??????0???????????????1?", "0?0?0???????0????1??1000", "?0??????????0????0??????", "010?1???????????????????", "?0???????????1?0???0????", "???0???1??????1?????????", "??1???0???0???????1?1???", "???0?1?00??0?0???0?????0", "???00????????10?????????", "????0????0??????????????", "?????0?0???1?????00??0??", "??????0????01?0?????0???"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00010000000000010000100", "00001000001000000000000", "10000000000000000000001", "00000000000000000010010", "00101000000000000000000", "00100000000000000001100", "00000000000000100000000", "01000000000001000000100", "00000000000010010000000", "00000000000000000000000", "00010000000000000010000", "00000000000000000110100", "00000000001000000000010", "00000000000100110000001", "00000001000001010000000", "00000010000000000000001", "10000000000000100000000", "00000010000000000100010", "00000000000000000100001", "00000010000000100000000", "00000010000100000000001", "00100000000000101000000", "00000000010000000000100", "10000000010000000000000"};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> rows = {"1?????????????11?", "11?????1???1?????", "?1??????1?????1??", "???11????????1???", "?????????????11??", "?????????01??????", "1????11?????????1", "??1??11?????0??1?", "??1???000??1?1???", "???01????1???????", "????1????????0?0?", "??1?????00?????0?", "??????????1?1?1??", "???????0?1??1???0", "?????????1????0??", "1??0????1????????", "?????????1?0??0??"};
    vector<string> columns = {"01???1??01?1???11", "??0???1???????1??", "?????0??????1??1?", "1????1?1???1?0?0?", "??0?1????0??1??0?", "11??1?111?0????1?", "1?0?????1???1?101", "1?1????????????0?", "1?10010????0????0", "??????0??11??1???", "?00??0?1??0??11??", "0?????1??0?1???10", "??110????1??0?1?1", "?1?1??1????0?1???", "?0????????0???0??", "??1?1111?1?10??1?", "?1????0???0?1???1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"10000000000001111", "11000001000100000", "01000010100000110", "00011000100101000", "10000010000011100", "00000011001000011", "10000110001100001", "10100110000000011", "10100000000101000", "00001011110000000", "00001000000000000", "00100011001000001", "01000000011011100", "00101000010110000", "00100100110001000", "10000011111000000", "01000001110001000"};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> rows = {"11100", "11111", "0?000", "1111?", "11?0?"};
    vector<string> columns = {"????1", "?1???", "?????", "???1?", "?????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"11100", "11111", "00000", "11110", "11000"};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> rows = {"1??11?1????", "01???111??1", "?????1?1?1?", "?1??11???0?", "?01?1??1???", "??11110??11", "1????11?1??", "?1?111?11?0", "?1????01111"};
    vector<string> columns = {"1??1??1??", "1?1?10?1?", "?111?11?1", "?1????1?1", "??1??1?11", "????11?1?", "???11?00?", "10???1?11", "11??11?10", "??????1??", "??1?1111?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"10011010000", "01001111001", "00000111010", "01011100001", "00101011001", "10111101011", "11010111100", "11111111110", "11000101111"};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> rows = {"??????", "??????", "?????1", "??????", "??????", "??????", "??????", "??????", "??????", "?????0", "??????", "?????0", "??????", "??11??", "??????", "??????", "??????", "??????"};
    vector<string> columns = {"??0?????????????10", "??1?111110????1???", "?1?1????1??1??1?1?", "10??????????????1?", "?????1101?1?1?????", "01?11?1??01???????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000001", "000110", "001001", "000110", "001010", "011000", "011010", "001000", "011100", "000000", "010010", "000100", "010000", "001100", "001100", "000000", "100101", "000000"};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> rows = {"1??10001?0?1?10101???01011110?", "1?11011?111111?011?110???00?01", "??1111011011????111011?110011?", "?1111101111111?10111011001?0?1", "1?0100?100?1011??01?1111??011?", "111111?11?111?11?11???11?1101?", "1??0111111111111?100?11?11?111", "1??1?1?1?1?1?010???111?1011111", "1?11001001???101?00101?10?0111", "11001?0011111?0?1?11?00111?01?", "?0?11?0111111?1101010?1??01111", "010?110??000?10?1001??00??11?1", "010011111011?0????1?101001??10", "0?11?1?11?011???111011?1100?10", "00110010101001011?1??110?10111", "111111??11?00??0??01?11??????1", "1?11101011111?11?11??010?011?0", "?001?10110011??111??111??01011", "1111?0111101?1011??1101?0?1100", "?10?1??1001?110?11?1?11?1110?1", "?1?010??000111?1110111?10?1011", "11?10??1111010111001??111?1101", "110?1?10?11?011000010010?0101?", "11?1??11???1???1?011?101?11???", "?101?1101?11?111??1??0101?010?", "??00111111111?11?1011010??1110", "??01?1?1?01111??00???010111101", "111?11???001??1111?1111?111010", "011?11111??00101?11?1?111?01?0", "11???100?1??01111??100??0?0010"};
    vector<string> columns = {"1?1?1?0??0?1011111?001?110???1", "0011101??01001?10101100?000100", "11?10111?0101111?1?11000??0110", "11111101010011101111??011??111", "11110111101001??1010?101000111", "111111?10011?1?10?1101010?1010", "?0010110101111101111???1110111", "111111110110110011?0?011111101", "110111??11111001?0?11?111?0101", "001111?1?1111?11??0?1?10??0?11", "0011011??1111?0?1?01???1111111", "01111011?11100110?01111100?00?", "11110110011011001?011?010111?0", "0111011101111101010000111?1?11", "?1101?10??1001?1000101001?111?", "?1101011101111101010??011110??", "111101100?111111111?011111???1", "01001?1?1000111010111111?11110", "?0?111111?0?1?1?0?1110?1???110", "1?00??1100?1000111?1???101110?", "?1?1??1110101111?111111011?1?1", "0110101101011110111111011??111", "11?1111011010?1?001110101111?1", "1???110101011111?1???1?1111110", "0101011?111??101101?0111?10001", "11??11111?10000110111?11?10101", "011?1111111001000111110100??10", "101?1111?10?10?110111?1111??11", "010?11110010100??00?11101111?1", "11111111111?10101?01011011?001"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111100011011110101111010111100", "101101111111111011111011100101", "011111011011100011101101100111", "011111011111110101110110010011", "110100110011011010111111110111", "111111011111111101111011011010", "111011111111111111000111111111", "111101010111001011111111011111", "101100100110010100010111010111", "110011001111110010111001110011", "101111011111101101010111101111", "010111011000010110011000001111", "010011111011101111111010010110", "001101111101100111101111100110", "001100101010010111101110010111", "111111011100000001011110101011", "111110101111101111100010001100", "000101011001100111101111001011", "111100111101010110111011011100", "110010110010110111110111111001", "110010100001111111011111011011", "111100111110101110011011101101", "110011101111011000010010001011", "111111111101100110111101011101", "010111101011011110111010100100", "110011111111111101011010001110", "000111110011111000001010111101", "111011100001111111111110111010", "011011111000010111101011110110", "111111001111011110110010000010"};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> rows = {};
    vector<string> columns = {"??0??00????????????????????1??", "?????????1?????????0?????0????", "????1???1?????00?1????????1?0?", "?1??????????????1?1?????0?????", "?????????????0??????0????0??1?", "?????????????????????0?????0?1", "1??????????0????10?????1???0?0", "??????1?????????0???1?????????", "??0???????1???0???????????????", "????????????????1??????0??????", "??????????????????????????????", "?0????????????????0???????????", "???1??????????0?0??????????0??", "????????1?????10?0????????????", "???0????????1?1??????1????????", "???0????????????1???????????0?", "???0?1????????????????????????", "??????????????????????????1???", "??10???0????1?1??????11?0?????", "?????00??????1????????????0?0?", "?????????1?0?????01?0???00???1", "01??1?????0????????????0?0?0??", "?10???1???????????????????????", "?????????1????????????????????", "???0????01??????????????????01", "????????1?????0??0?0??????????", "???????????1??????????????????", "?????1?1??????0?0??0???1??????", "??1?0?????00???????0?1?1?????0", "??????0??1??0?????????0?????1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000001", "000000000000000100000100000010", "000000000000000000000000001100", "000000000000000000000000010000", "000000000000000000000000100010", "000000010000000000000001000000", "000000000000000000000110000000", "000000000000000000000001000010", "000000000000000010001000110000", "000000010000011001111010000010", "000000000000100000100000000000", "000000000001000000100000000000", "000000000010000000000000001000", "000000000100000100001000000000", "000000000010000000001000001000", "000000000000001000000000000000", "000001100000000100000000000001", "000000000100000000000000100000", "000001000000000100010000000000", "000000000000000000000000000000", "000000000000000000000010000000", "000001000010000000000000001100", "000010000000000000000000001000", "000000000010000010000001000101", "000000000000000000000000000000", "000000000000000000000001000100", "000000001000000000000000100001", "000010000000000000100000000000", "000100000000000000100000000000", "001000000000000001010000001000"};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> rows = {"?1111101111?11111110111010?110", "1??1111?11011110?1111111?111?1", "1?11011?11111111100111?1111111", "1?11?1111111??11?0?0011011?111", "1111111100?11110?1101111?11?11", "1011101111??01???111111111?1?1", "1???11011011?1111?1?1?1110??11", "10?11?111??11111??010101?1?101", "??1111011??11111???1?1?1111111", "1110111?111?11111111111111?011", "111?11?1?11?1?01111111111?1011", "?1?111011??1111111101011101111", "111111111?0111?11??01?10?01??1", "11?101111111111111011?0?1?111?", "?1?111111111?111?1?1111111?111", "?101011111111?1??11111111?11??", "11?11111011011111111??01?11111", "?11110111111111001111?11111111", "1?111111011?111111?11111?11101", "1101?11010111?11111?0?11111?11", "11111??1?111?111100?11?111?111", "1111111001?1111111??0??1?01101", "0111?111111??1111101111011?111", "111010111?11?11111111111111111", "011?101?1111?11?10?11111?11101", "1101111001??101111111111?11?1?", "111110111111101?111001111111?1", "11111111??11?111110??111?01111", "111?1?1111111111111111111?1111", "?1?111111?1111?011111?1?101111"};
    vector<string> columns = {"1?11??1??0?1111?1?1?11?1???1??", "11??0?0?1????1111??011?1??1?1?", "?????1??11?11????1111???11????", "1?10111111???1??10111111????11", "0?101??111?10111?1?1?1?111?1?1", "??1?11?11???1??1?1?111?10????1", "?011??????1?????1??111?????11?", "?11?011?1??00111?111?11?11?11?", "?11??1?0?11?1?1?????1???????11", "???0???011?11????1?1???101??11", "???1??11111??0101?11111???11?1", "?1?1?????1?11?1?11111?1?1??11?", "??1???1?1?11???????11110?????1", "1?11???1?????11?1111?1111111?1", "1?1??111???1?1?1?111?1?11??11?", "?11??1?1????0?1?1??1??1????01?", "0??11?01?1??11111111?111??1111", "?1?1?1?11???????010???111???1?", "??1?1?1?1??1?011?11111??1?????", "1????1??????11?1111?????1??11?", "11?1?1??111111??1????0???111?1", "?1????1??1??1?1??????111?1????", "1?111?1?111??1?11110101?1?1??1", "??1???11?11???1???10?1?11?11??", "???1?1?01?1????1??1101011110?1", "?1??11111??111?111?11?1111????", "11111??11?1?1??11??1111??11??1", "?1?1?1?1?1???1?1?11?1??111?111", "11??10?1111??????11???01??1?11", "??11???11111???11???11?1??11?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"011111011110111111101110100110", "110111101101111001111111011111", "101101101111111110011101111111", "101111111111001100100110110111", "111111110001111011101111011011", "101110111101010011111111111111", "111011011011011110111111101111", "101110111011111110010101111101", "101111011101111111110111111111", "111011101111111111111111110011", "111111010110100111111111101011", "010111011001111111101011101111", "111111111001111111001010001111", "110101111111111111011101101110", "011111111111011101011111110111", "110101111111111001111111101101", "110111110110111111110101111111", "111110111111111001111111111111", "101111110111111111111111011101", "110111101011111111110011111011", "111111010111011110001111111111", "111111100111111111110001101101", "011111111110011111011110111111", "111010111111111111111111111111", "011010111111011010111111011101", "110111100111101111111111011010", "111110111111101011100111111111", "111111110011011111010111101111", "111010111111111111111111111111", "110111111011110011111111101111"};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> rows = {"00000000?000000010000000000000", "00000001?000010000000010000000", "001100000110000000100000000?10", "100001000000000000100000000000", "000?0??1000000?0000000?010010?", "0?0010000010?10010010000000000", "0010000000000010000?0000010000", "00000?0100011001100??000001000", "00000000?0?0000010000010000001", "000000100000000101000000000000", "000001000000001000000001?01000", "000000000000000010000100000000", "00000000000?000001000000010000", "010?00000?00000001000000000001", "000000?000000000000?100000000?", "000100000000000000010000000000", "1010011000000000000100000?0010", "000000?00000000000000000010000", "000000000010001000000001001100", "0000000000?000001001101000000?", "0??1000?00001000?000?000000000", "000000100100001000001?00000000", "0?01?0000000100001001000000000", "00000000010000000?0?0000000000", "000010000000010000100000000110", "0000000000?0010111000100100100", "010000010010011000000000000010", "0000110000100000000?000001?000", "0?0000000001011100010100000000", "00000000000000?000000000000010"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000010000000000000", "000000010000010000000010000000", "001100000110000000100000000010", "100001000000000000100000000000", "000000010000000000000000100100", "000010000010010010010000000000", "001000000000001000000000010000", "000000010001100110000000001000", "000000000000000010000010000001", "000000100000000101000000000000", "000001000000001000000001001000", "000000000000000010000100000000", "000000000000000001000000010000", "010000000000000001000000000001", "000000000000000000001000000000", "000100000000000000010000000000", "101001100000000000010000000010", "000000000000000000000000010000", "000000000010001000000001001100", "000000000000000010011010000000", "000100000000100000000000000000", "000000100100001000001000000000", "000100000000100001001000000000", "000000000100000000000000000000", "000010000000010000100000000110", "000000000000010111000100100100", "010000010010011000000000000010", "000011000010000000000000010000", "000000000001011100010100000000", "000000000000000000000000000010"};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> rows = {"0??00????????0??00??0?0?00?0??", "???0?0???00?000?????0????0???0", "?0?0?0?000000??0??00???00???0?", "0??000?0?00000?0??0000??00?0??", "00?0?0??000???000??000?0??0000", "0?0????0?00000?00?000???000010", "?00?0?0???00?0??000?00???0????", "0?00?????0?0?00?000000??00???0", "0???0000?000??000?0??0???00???", "?0??00?0000?0??0???0?????0??0?", "???0??0??000??????0??????00???", "?????0?0?0?0000???0100??????00", "0000??????????000?000??0?0????", "??0?00?0?0??0????0?0???0000??0", "00????????????0??00000?0??????", "??0??0?0??000??????0?0??0???00", "0?0??0????????0?00?000?000????", "????????0?0?0??00?0??0?000000?", "?000?00???0?00?0?0??00000???0?", "00?00????0??0?0?????00?0????00", "??00?????????????0??0??0???0?0", "0?00000??0????00??00???00??0?0", "??00000?0??0??0000000???0??0??", "0?00???00??0000??????00?000?00", "??0000?0?0?????1????00?00?000?", "?0?00?0?0?00??0000??0?0??????0", "0?????00???0??00?0?000??00??0?", "00?0?00??0?00???0????1?0??01??", "?????0????0?0000?00?0????0????", "0000?????000?0????????????????"};
    vector<string> columns = {"0?0?00000??0??0000????000??000", "?0?0??00????000?0?0?1?0????00?", "0??0??00??0000000000???00?00?0", "0000???0?0000???0??????000???0", "0?0000??0???00???0?????0????00", "?0???0?00?0??00?0000000?0?000?", "?00??00?000???0000??00?00??0??", "?00?00?00??00000?000?????0000?", "??0????00000?0?0000000????00?0", "0??0000000??00000????0?00?0000", "00?000000?0?????0?00000?00000?", "??0?0?00?00?00??0??0?0?00?0000", "0?0000000?000?0??0?00??00???00", "????0???0??00???00??000?00?00?", "00???00?????00???0??0000?00?0?", "00?0?00000???00000000?0??0?00?", "?00?000??0000?0??00?0??00??000", "0??0??00?0??0??????0????00?000", "0?00??0??00?0?000??0?0?0??00?0", "?00?????0?010??0000000????00?0", "?????00?0???00?????000??0000??", "0??0??0000???0?0?0?0??00?0??0?", "?00????00????00?0?0???0??00?0?", "?00?0?00??????????0000??00?0?0", "0?0??00?0??0?0?0?0000??0?0?00?", "?000?0000????0?00????0?000?00?", "?0???000000000???000??0?000??0", "?????000?0?0000??00?0?0??0?1??", "?0000?00000?0?0000?0000?0?0??0", "?00??000?0001???????000????000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000010", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000010000000000", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000010", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000100000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000100000100", "000000000000000000000000000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> rows = {"1???1??1???1???????1???1??????", "????????0?????0???????1???????", "????????0??1?1????????????1???", "??????????1???1????????????1??", "??????11?????1???01????????00?", "????1?????????1????1??????????", "?????????0???1?1?????0????????", "??????0??????11?0??1?1???????1", "?1???????1??????10?1?0????1???", "???????0?1?????11?????????????", "1???1??????????1?????1???1????", "????????1????????1????10??????", "??1???????1???1??????0???1??10", "1?1?1???????1??1??011??1??????", "0??1???????????????????00???11", "???1??1???????0??1???1????????", "???1?????0????????11??????1??0", "???????????1????????????1?????", "????????0???0??0??1?11???00???", "???????0???1?????0????????????", "????1??1?1??0????????????11???", "?????1???????????????1?0??1???", "0????????????????0???????1????", "????????????0???1??????????0??", "?0?????????0?????????1?0??????", "???1?0?????????0??????0??0????", "???1101?1????????????1????????", "?1???????1????????1?????1?????", "????????1?????????1????????0??", "???1??1????1??10???????1????0?"};
    vector<string> columns = {"10?0??1?01?10100011?011011?101", "??1101111001100100111?1?11?011", "?110??1011?01?101?011?11101??0", "11?01111?01100110111000010?11?", "110011111?10?11011111?110?10?1", "1001010?01110?11111101??11?110", "??110001011111111010100?11011?", "1?0101???0011011?011111?111?0?", "110?101?11?00??101?0??0?1?0101", "0?11???111?1?011?111?1010001?1", "1111?1001?1110???11010111?101?", "111111?111110111??111101001111", "1?1110?0?0?1??001?11?10?0?011?", "111010011100?101011110000?1???", "0?00?0111?11?1110101011110?1?0", "0001101011111111?001??11101110", "??101?111011?111??1?1111011?10", "011??11000111001101001110111?1", "00?00111?0???0?1110111101010??", "0110??11?11111001011111???100?", "1?0101011111011111??1111?0??01", "10111101110?110010101?01101111", "1101?0110?01??11111011101?1001", "101?1?0111?101011010110101110?", "01?10110111101111111101000?111", "1111?1001?1001011?101?0?00?111", "011?11101011111?010?011?011111", "11??1011?110?011110?1?010?0000", "1011011?000?0?100110101?1?0?00", "000111?1101110011??11?11?011?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100110010001001000111111101111", "010000110001110010010011001111", "101000110111111011101001001010", "010110010111001101101100010110", "101000110001111100110011011001", "010110111011101000011110010010", "011001101010110110011010101101", "101011001111011001010111011101", "111011010111101110010001011011", "110010000101011111000101101001", "111011110001110101010110011010", "111111101111110101100110110110", "001100100010111111000000010010", "111011010001111101011001100000", "011111000101100111011110001111", "111111111111000101000111011101", "110110111000011011110100011100", "010011001101100000011111101111", "111100110111011001111111100110", "010101001111010110110111010000", "111110011111011011011001011110", "101111101101110000100100101100", "011111101010110110011000110110", "101011100101001110010000011010", "000101001010001111001110100111", "101100100010100001000100100000", "101110101001111110010101010110", "110001110101101101100110110001", "011000011011101101100110000010", "010110110111101000010001110101"};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> rows = {"??????0???????0?????????????0?", "?????00??0??00?0????????????0?", "???????0?1??1??0??01??0?0?????", "01??1?0???0???00????0??0??????", "????0????000?0????????????????", "001?00??????1?????1??0?0?????0", "???????0??00?1???0????00??0???", "???0??????0?????0???0100????0?", "???11?????0?????0?????0?00????", "???0?0??00?1??1?0?????0?0???00", "0???1??0?1????00??????0??1???0", "???101????0???????????0??00??0", "???1????????1????0??10?01?0???", "????0?0??0??00?00??0????0???10", "??01??00?0??????0?00???0?00???", "??????0???1?1??0?0??0????1??00", "?0??000?0????0?0???????001??1?", "?????0????10??0????000??0??0??", "??????????0?100?1???00??0??01?", "01???0??0?????0?1?0??00??1?0?0", "????0??000?1????????00??10????", "?????????????0??0????0?00?????", "00????0??0????????00??????????", "01??0000??????0??0??????0????0", "??0??0????00????????0?0??????0", "?10?0??????????0??????????0???", "??????0??0?0???0???0?00?0???0?", "1?0??0???????????0?10?001??000", "0????0???0????0??????00?????0?", "????????00?001?0??0?????0?0???"};
    vector<string> columns = {"???0?1000??00?000?0000000??0?0", "?0???000000??0?0???10?100??0?0", "100??11?0000?00?0?0?001???0?00", "?00?00?000?0100000?0?010010000", "?1000??00?0?000?1000?0??0000??", "0??????000??000?0?01??01??100?", "0011?1000?101?0110?00??0??00?0", "00?10001101?0?00?0?0?0?0?0?000", "0??101101?0?10?00???0??00?010?", "?11?10??00?0100?0?00?0?0?00010", "?00??001?00000?00?0?011?0?0000", "??00???00?0?10?00?001?10?0??00", "?0???0000?0????01001??00?000??", "00000?1100110???0??00?100?000?", "?010000??1?00?0?0?0???0000010?", "?0?0000001?0000??0?0?0??0?000?", "????00?0??00?0????0010?0?00?00", "??00?0011000??00?0?0??0??011??", "0????0000010?0?1001?0000??0???", "?000?0000?0000?101???????0?0??", "?0??0???10??00???1?0000?00100?", "0000??0000?1?000?00?01??????00", "0?00001?0?0?0?0???1?0????00???", "00?0?0000?100??1??110?00?000?0", "0?0001000000?0?0?00??100100010", "??1?000?0?1????????100?00?0000", "0?0?0?10?10000?00??100?1100?01", "00??0???0?0?00?00010???0001?0?", "00?0000??010110?1010??010???0?", "0101?????00???000?0????10??0?0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000100", "000000000000000000000010001001", "000000000100100000010000000001", "010110000000100000000000001000", "000000000000000000000000000001", "001100000000100000100000000100", "000100000000010010000100000100", "000010001000000001000100000000", "000110011000000000000000000000", "000000000001011000010000000000", "000010000100100000000101010010", "000101000000000000000100000000", "000100000000100000001000100011", "000000000000000000000000000010", "000100000000000000000000000000", "000000000010100000000001010000", "000000000001100000000010010010", "000000010010000000000000000000", "100000000000100010000001010010", "010000000101010110000000010000", "000000100001000000000000100000", "000001000000000001100000000000", "000000000000000101001100100100", "010000000000010000000000001010", "000000000000010000100000000000", "010000000000000000001000000000", "110000011000000000000000000000", "100100001000000000010000100000", "000000000000000000100000000001", "000000000000010000000000000000"};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> rows = {"1????1??1110?1?11111101111?11?", "11?111???1?1?????11?1?1?1?111?", "1?0?11?0011?00?0??11???011111?", "0?11???0??110101?1??111?111??0", "1?1?11111?111010??10111?1????1", "1111???11?1?0??1?11?10?11?11?1", "??1??11???1111?1111110?101110?", "1??1?11??1??1?1?110110101111?1", "001101??10???111??01?111?11?11", "?1111?101?111011111?11??1?01??", "?1??11001?1??110110?10?0?111??", "?1111?01??1001111111???10?0?1?", "10?111?0?11?1?1?1101?1111??011", "???1?111??1010111?100?1?10?1??", "111?1?11?1?1?10?1101?111111?01", "10?0?1?1????1111??11101??1??1?", "1110??1101111?1??101?011101110", "?11100111?111?1??10???1??11110", "10?1111?1?01??1??10??11011?10?", "1?10?11???011??1?111??11111??1", "???1?01110?11?01?10?1111????01", "??10?1??111?11111110?01?????01", "1101111?011111?0111?1111?111??", "0?11?11?11101?1101111100?0111?", "?0?1?01110?11?11??0100?11????1", "00???01?1101???1??01?11??0111?", "??110?1???11?1?11011??1?0?01?1", "1111?1110???1101??111?1??1?010", "1?0???11111?11??1?1??110?1??11", "0??11?111001?0011???01?1101111"};
    vector<string> columns = {"0???1???111?1????????1??1?????", "1??0??0101???????1??????0?1???", "?1?1???????11?1???0??1?11??11?", "???11011?1??1??0?0????10??1?1?", "?????11?1????1????1??111???11?", "????1?????11??????1??1?1?11??0", "1?1?????????1?10?1?0?0????1?0?", "?1?1??1?10?0?1??1?11??????0???", "11???????0???1?1?11???100?11?1", "01???0???1???1?1??????????????", "?11???10??0???0???0?01??00???1", "?????1?1???00??10?11??0?????1?", "???0???1????0111??1?????11??11", "01?11?1?0111?0???0???1??11??1?", "1?0???1????1011????????1??1?0?", "1?0101??11?1?1?1??11?1?1??1?11", "??0100?0?011??????1?111???????", "??1??1???1??1??10011?1??1?10?1", "??????0??10???1??1??1???????11", "?1111??1?1?101???1?011?0??1??0", "??1?01??1???0?1?0?1??1???0???0", "?100?011?1?0??1????11?111?1?1?", "?1??????1????1??1???1?1?1??11?", "?1??1????1???1?11?0100?????1??", "?1???10??1????11????01???0?1?1", "??0?1??????????111??11????11??", "?????????1????11??????1??????1", "1???1?1??1??001?1?1?????0111?0", "1?0????????10??????1?1?11??1??", "??1????????1?0??1??11?1???????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"101101011110010111111011110110", "110111000111101001101010101110", "110111000110000000110000111111", "011110000011010111001110111000", "111011111111101010101110100011", "111101011010000101101001111101", "001011100011110111111001011100", "110101101100101011011010111101", "001101001001011101010111011011", "111110101011101111101101100111", "010011001111011011001000011100", "011110010110011111110001000010", "100111000111101011010111100011", "011101110010101111100010101110", "111110110111110011011111111101", "100001111000111100111011110111", "111000110111101001011011101110", "111100111011101001000110011110", "100111101101011101001110111101", "101001111001100101110011111011", "010100111001110101011111000001", "011011111111111111100010110001", "110111100111110011111111011100", "001101111110101101111100001110", "000110111011101101010001100101", "000010101101000100011110001110", "111100100111110110111010000101", "111101110010110101111010110010", "100011111110110111100110010111", "000110111001000110100111101111"};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> rows = {"???1??????????0????1??????????", "??0???0???1??0???0??????0?????", "?1?0????0????1???????11??0????", "???????0????????0?????0????0??", "???1?????1?????0????????????1?", "?????0?0???????????1???????0?1", "???????10??1?????1????????????", "???0??1???????????????????????", "??1????????????01??1?0????00??", "1???????????????01????0???????", "0?????????0???0????????????00?", "??00?????1????????????????0???", "???00???????????0??1???10?????", "???????0?1?1????????????0?????", "????????????????????0?????????", "????????0???1?????????????????", "?????1?1?????????????????????0", "???0??0????????1??????011???0?", "0?????????????0???0????101?1??", "0?????1?0?0???1???0?1??0??????", "????????????????1????11????10?", "???????01?0????10???????0???01", "????????1?????????1?11???????1", "0???????0???????????????01??0?", "????1???????1?0?00???????11???", "???????????11?1?????????0?????", "?????0?????????????1???0??????", "????????10????????11???????0??", "??????????????1????1????????0?", "?????????1??????1?????1??1?0??"};
    vector<string> columns = {"?0????0?1?00??00?0???????????0", "01??0???1???0??1??1??1??????11", "0???1??1?00??0??1???0???0?1???", "???0?01?????000??1??10???010?0", "??0??1?0?0?01001??1?0?1?1?0??1", "???0?0??10??01??00?01?0?01??01", "0100?10?0??????????0??1?0001??", "11?01????00?1?????0??1??0???1?", "1????1?1?000?00?1?0??????11?1?", "?1?01?????0??0?011?000?1????10", "0??11??10???1?0???1???1??0???0", "000?00????001000??????1???1??0", "??11?000010??0??10?0??????????", "10???11?1??0??01????0????0?1?1", "????0?0???0?0???????0110??????", "0?1?011??1????0?0?0?01?0001??1", "????11???10?11?0?010??0?1???10", "111????????00??1??0?00??0?0???", "???01?0?????001??00??0??011?01", "1????1?1?????0???0?????1?11???", "00?1?1??110??????000????1?????", "0?11?01????0????11?101??000?00", "1????010??00?01???1?0?1101?1??", "?0??10???0???1???????00???00??", "0?01?0???0??110???1???????????", "?00???????1?00?1??0???1???0??1", "10???0??00???1?010??0????1?000", "???????0?0????111?1?0??0?0??0?", "????10?????1?00??10??0??1001?1", "?101??0?????011????0??0?1????0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000100000000000000010000111011", "000000000010000000100011000011", "010000000000010000000110000010", "000000000010110001001100000000", "000100010101001011000001000011", "010000000001100100110000110001", "010100010001010001000000100100", "000000100000001001010000010000", "001000001000100010010010100000", "110000000001100001000100000000", "000000100000000000000000000000", "000000010100000000000000000000", "100000000001000101011001000001", "001000000111000000001000001000", "000101000010000010000000000000", "000001100000100100000010100010", "000001010000011000010101001000", "000000010000010100000001100100", "000101000001000101001011010100", "000000100000011000001000000000", "001000000000000010000110000100", "010010001000010100000010000001", "100110101000000101101100000001", "000100000000000000000001010000", "000010010011100100000000011000", "001100000001101010010000011000", "110000000000001010010000010100", "000100011000000000110000100000", "000000000001001000010011000001", "011000110100000110000010110000"};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> rows = {"0?0?0???10??0?0??0???101???100", "??10?1??0?11??01???1?00???????", "1101001??0??1?01?0?010??0?0???", "0?00???0?0?00???11???0????0?0?", "0?00010?10?0?11?100????0?10?01", "?1???101000?11???1??0?0??1???1", "100??00??0?0?01?0?110100000??1", "?10????0?01?000??????0??????01", "1?1000?00??000?1?00000?01??0??", "????0?10?1000?0?1????0?1??0???", "11?1?0?1???1?0??10????0???1?0?", "?0?1001?00?00???00?0??0??000?0", "00??1?1?1???0??00????110?0???0", "001??0?0???11???0001????110100", "000?0?1110??00?001?01101?0000?", "1?00????0?1?0?010??100???1?0??", "?0?000???01?0?0?1??1??011??10?", "00???0?1?0110??01??0??0?0?11??", "0???????1001??0?01?00???0??1??", "1???0??0011??0?????10?0?010?00", "11???010???0000???0???10?000?1", "?????0??????1?00??????????0010", "1100101?00??0??1?1?0??1?1???0?", "??????0?0000?0010???00?010??00", "?0001?100??00??11??10??0?0?10?", "10010??1?00?0????0??10?0??????", "0???11?????1?1000??01??0?0?00?", "10?0?1?01010?0??011??0000010??", "?0101???0??100??0?001?????00??", "0??0??10??100?10?011?1?10????1"};
    vector<string> columns = {"?1?00?0??01?11??0?10?1??0??0??", "0?010?000?00??????0??01???1???", "?01????1?0?00???0?0?10?????000", "0010?11?1?00000????0?1???00?00", "111??1??0?10?010????0??10?0?00", "??01???????00?0?1???1110??000?", "1???0??0?00?????0?1????0??0??1", "01??1??????000000?00?0?000?1?0", "?000?0???0?001??????001?011010", "??00?0000?????0??0???????0?001", "???0??00????0????1???01?001??0", "??1??110101?0??100?110????0???", "00100??1???01??????000?0??01?1", "0???0??0??100100??1?0???0???1?", "?????00?0100?11?1?10000?0?????", "11?1??1?01?01??110????0010?00?", "1???1???000110?00?000?0???1??0", "??0?10?10100?0??0??????000????", "??10011?0?0001??????0100?000??", "??1?0?001101?011?1????1?????11", "0?0?0?110000?01?0?10??1??0??00", "?0?0?0?001?0110000001111?0100?", "??10???00??00?0?????0?0?00?0??", "100??100??1?1100??1??00?11?0??", "???0???000?1?1???10101?10??00?", "?0?1101?0????01??00??0??01??01", "?11?000?000?????1?01??10100101", "?????0??1??0??0?0??00??1?1?00?", "0?0??????1?00000?010??1?0?1???", "?0?1??0011100101?1????100??0?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000011000000000011101000100", "001001010011000100010000000000", "110100110010110100101000000010", "000010000000001011010000010000", "000001001000011010001000010001", "110001010000110001000000010111", "100000000000101001110100000011", "010000001010000001100000000001", "101000100000000100000000110010", "000000101100000010010011010001", "111100010001000010000000011100", "000100100000000000001000000000", "000010101001000000111110000100", "001100000001100000010011110100", "000000111000001001001101000000", "100000100010000100010000010000", "000000000010000010010001100100", "000100110011000010000000011100", "001000001001000001000101000101", "100100000110000000010000010000", "110000100000000010000010000001", "000100000001100010000010000010", "110010100010000111000010111001", "000100010000000100000010100000", "000010100010000110010000000100", "100100010000001100001000100100", "000011000001010000001010101001", "100001001010000001100000001000", "001010100001000000001000100000", "000000100110001000110101010001"};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> rows = {"101?0?1?1?0000??0?10?011010?0?", "00100001?10?0?0000?00?1?01?001", "?0?000?1??00?00?000?1?1?01100?", "00000010??11?00???0?00001??010", "?00?0?0?000?10?0?101???01000?1", "010?011??0?0??0?00000000101010", "11?011?000?000??0101??11?1100?", "?10???000?0101000??10?10???0?0", "?10000??001101000?0?0?????101?", "01?11?1??0?0000?0?101?0??10??0", "00?0110??1?0110??0000??000?10?", "0?000?0??0?0?00?00?011100?0000", "10??0?1?00001????10?0?0001?11?", "101?000000101?01?0?0011?0?10??", "00??0?0?11?000?01010?000000?0?", "?000001000??1010?010???000???0", "01??10?01?0??000?000100?0?0011", "?00??000??00??0??00?1?100?1?10", "??1?0?10?010010??1??00100?0??0", "?10?100000010010?001?0010?00??", "?0??101??1010?00?0?01??01?010?", "0000000010000001??0??011001?01", "00?00??????00?00?00??01?00000?", "?000000?000?00?01?1?000001??10", "?1??00??110?00???000??110?01?1", "1101?0?1?0?0??0000001??00000?1", "0?100?00000?00?00??001?000000?", "011?000000???00?1??01001???000", "0??1001?0?010000?11?110??0?11?", "0?1001?0?100?0??111?10?1?0??0?"};
    vector<string> columns = {"??10?0??00??0?0?0110??101?1?0?", "??0??00??1?00?1??????0010000??", "10?????0?0?0??????0?????1??0?0", "?1?????00101???000?0??010?0??0", "0?0???1??????????????0??0??00?", "0??10?00????110??1?00??1???01?", "?0???01?10??1???001???0??011??", "?0???0?????1??0??0???000????0?", "10??0??00???10?????01?0??1???0", "?1101??00???000???0???10???0?0", "??0??0??0?0??100?1??????0????0", "00?0????101??0???????0??????0?", "????0?????????0????1??0?110???", "0????0?0??00??110010?00?0??101", "0?01??110?0?00??001???000??00?", "??00?0????010?0???00???????01?", "??1?0????0000??00?0?01?0000???", "?0??????0?????0?????1??0010?11", "0?????0110???0??????1?0???1???", "???01?0??????00?1?00?????10???", "1????0????1??01?0????0??1???01", "???0????0???1100???0?0???1??00", "0?0???00100??0??00??1???00????", "0???100??1000??0???1?0????00??", "????0??0??110?10?1??????1?00?0", "????0?????1?010?0??00?0?0000??", "0??000?0????0000???1??0?????0?", "?1??00??00??11?0?01?00?00??101", "0??00?0?0???10?0??1??????0?01?", "??0????0?0??00????0????0???1?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"101000101100001000100011010000", "001000010100000000000010010001", "000000010000000000001010011000", "000000100011000000010000100010", "000100010000100001010000100001", "010001100000000000000000101010", "110011000000000001010011011000", "010000000001010000010010000000", "010000000011010001000000101010", "010110100000000000101000010000", "000011001110110000000000000100", "000000001000100000001110010000", "101000100000100001000000010110", "101000000010100100000110001010", "000000001100000010100000000000", "000000100000101010100000000000", "010010001000000000001000000011", "000000001000000100001010001010", "001000100010010011010010000100", "010110000001001000010001000000", "000010100101000000001000100100", "000000001000000100000011001001", "000000010000000000000010000000", "000000000000000010100000010010", "010000001100001000000011000101", "110100110000000000001000000001", "001000000001000001000110000000", "011000000000000011001001000000", "000100100001000001101100000110", "001001000100000011101001000000"};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> rows = {"1111?0?1011?11111??111?11?111?", "?1??11110??111?11?11?1110?1?11", "1101011?1??1111?0?11?11111?111", "?111????11?1?11110?101?1111?11", "11?001??1?11?11111111001??11?1", "1?111101????10011?11?110?0?111", "10111?1111111???01?111??1111?1", "??111?110??1?1101??011?110011?", "111?11111?10101110111??1?1??11", "110?1?010???1111???11???0?1111", "1101?1?11??1111?111??11111111?", "??11110?110?11??11?1?11?1111??", "01???1?0?0?1?0111?1110?111??11", "011?11101111101?11111?111?1110", "11?111111??1?1??11111????1?01?", "11111?11001110?011?1???1111111", "10?111?11111?0??100101?11?1111", "10111?011111??1?1111111??1??1?", "111?1??????1110?111101?1111?10", "??11111?11???0?1111111?11?111?", "?11?111011?11?111?1111??110001", "?1111111?0111???0?1???11111110", "11??1?11?110111111111?11?111?1", "11?11?0101111111?0?1?1111?001?", "??1??1??111?11111111011111??11", "1?11111111?1?0?1?1?11??11?001?", "?111101?1?1001111?111?1?1?11?1", "11111111??1?1?111???1111?1?111", "111?111??1??1?01????1?1111111?", "1?1?11111??111111?11???1101?01"};
    vector<string> columns = {"????11??1????0?1???11111???1??", "??111???1??1???1??1?11?1??1?1?", "??011??1100?1?1??111110?1???1?", "1?????11??1?1???1??1?101??1?10", "???1???????1?1???11????1?????1", "0111?110??11??11???111????0???", "???0?011?0??????1?11???011??1?", "?11?1?1??1?000?????1????1111??", "00?1???0??1?11?0?11???????????", "11????1???1?0??0????1??1??0??1", "1?????????1?111?1???111?11????", "??????????101????1??1??1?100??", "?1??1???1??1?1?1?????111??????", "?11??????111???00??01??1???1??", "??11??1?1???1?1111?1???????1??", "1?11??0???10???0??1111???1?111", "??????0?1?1???????1?1??1?1????", "?1?0????0?1?0?????1???10????1?", "??10????1??11?1????1??????????", "111?????1??1?1??????1????11???", "???0??1?1??????1?101???1?1?1??", "??1101?1??110???1??1?0?11???1?", "?1?101????1???????0???11?1???1", "?1?11?1??0??1111?11?1?11?1???1", "1011???????1???1??1??????1??1?", "?????0??1???11?11???11??1?1??0", "?1??10?0??1????1??1?011???1??1", "???111?1???????11?????101???1?", "?11?????11?11?1?1???01?1??????", "1?1111???1?110?1?1??1?11???1??"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111100010110111110011101101111", "010011110001110111110111001011", "110101111101111100110111110111", "011111001101011110010111111111", "111001011011011111111001001101", "101111010100100110110110000111", "101111111111100001011101111101", "001110110101011010001101100110", "111011111010101110111001010011", "110010010000111100011000001111", "110101011101111111100111111110", "011111001100110011110110111111", "011101001011101110111001110011", "011011101111101011111011101110", "111111111001111011111001010010", "111111110011100011111001111111", "100111111111001010010101111111", "101110011111001011111111010011", "111010101001110111110101111010", "101111111100100111111101111110", "111011101111111110111101110001", "111111110011101100100011111110", "110010110110111111111011011101", "110110010111111110111111100011", "001001111110111111110111110111", "101111111101001111011011100010", "011110111010011110111010101101", "111111110010111110001111010111", "111111100100100101001011111110", "101011111001111110110111101001"};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> rows = {"1"};
    vector<string> columns = {"?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1"};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> rows = {"00"};
    vector<string> columns = {"0", "0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00"};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> rows = {"?????????????????????????????"};
    vector<string> columns = {"?", "?", "0", "?", "1", "?", "?", "?", "0", "?", "?", "?", "0", "?", "?", "?", "0", "?", "?", "0", "0", "0", "?", "?", "?", "0", "0", "?", "?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00000000000000000000000000001"};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> rows = {"??????1????1??????????????????"};
    vector<string> columns = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "?", "1", "1", "1", "?", "?", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000111111111111111111111111"};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> rows = {"?", "?"};
    vector<string> columns = {"11"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1", "1"};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> rows = {"?0", "11"};
    vector<string> columns = {"11", "01"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"10", "11"};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> rows = {"?????0????????11??1??????0??1", "?????1?????0???1?1???1???00??"};
    vector<string> columns = {"10", "??", "?1", "??", "10", "1?", "?1", "??", "?1", "??", "1?", "?1", "?0", "0?", "?1", "1?", "1?", "01", "?0", "??", "0?", "1?", "?0", "01", "00", "1?", "?1", "??", "?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00000000000000110010000110111", "00000100000011011101111000000"};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> rows = {"????0?1?010??1?01???0?11??0?11", "1001?11??1??10100?000??110111?"};
    vector<string> columns = {"?0", "1?", "00", "??", "0?", "?0", "??", "01", "??", "??", "11", "1?", "??", "??", "1?", "?1", "01", "?0", "??", "?1", "0?", "?1", "?0", "??", "?1", "?1", "??", "??", "??", "??"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000100100010010000011000011", "100101100100101000000001101110"};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> rows = {"0", "?", "?", "?", "?", "0", "1", "1", "1", "?", "?", "?", "0", "?", "?", "0", "?", "0", "0", "1", "?", "0", "1", "?", "1", "?", "0", "?", "?"};
    vector<string> columns = {"00111011110001100001101111010"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1", "1", "1", "1", "0", "1", "0"};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> rows = {"?0", "??", "10", "?0", "0?", "0?", "0?", "0?", "00", "??", "01", "?0", "?1", "11", "??", "??", "??", "00", "0?", "??", "0?", "??", "0?", "?1", "?0", "11", "10", "10", "00"};
    vector<string> columns = {"??11?0000000110?10?0??0???110", "000?0?10?0???10110001001??0?0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00", "00", "10", "10", "00", "00", "01", "00", "00", "00", "01", "00", "11", "11", "00", "01", "11", "00", "00", "00", "01", "00", "00", "01", "00", "11", "10", "10", "00"};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> rows = {"111?1111111?0111?111011?111?1", "11111?11111111111?11111?00?10", "11111?111?1110??11111?1111?11", "1111111?1111011111011?11?1111", "11100111111111111??1001??011?", "11?11?1111111111010111?111111", "111?1101111111110?1?10111?1?1", "11111111111111111101111111?10", "1101111111111?1101??111111111", "1111111111111010111111111?111", "111111111101111111011111?1101", "11111111111?111111?11111100?0", "1111?11111?101110111111?1111?", "?011??111111111?111111101?111", "111110111?11?1111??1?11101111", "11111?1?111?1011??01111011111", "1111111111111111111111?011111", "11??11111?11?11111111111??11?", "111?111101?1111111?1101111?00", "111??1?1111??1?111??1?1111011", "1?11?11011110??1111111101?111", "1111?11111?1111111111111?1111", "1?01111?1111111111?1??1111111", "011111111111111111?11?1?11?01", "101?11111111111?11?1?11111111", "11101111111??1111111111111111", "11?1111111011?11?10111?111?11", "1111111111?111011111110111101", "110?11?11111?1?1110111111111?"};
    vector<string> columns = {"????11??1?1?????1?1111???????", "??1????11??11??1?????11??1?01", "11?1??1??11??????11?111?1?1?1", "???????1111??0?1??????1????1?", "??1?1?1???0??1??1??1??????010", "???111111??1???111?1????????1", "?1?????111?1????????11?1??1??", "1?0?1????0?11?1011??11???1?1?", "111??1??0?1?1????1111??1??1??", "????110????1?????11?1????111?", "1111?1??1????1???1?1?????????", "?????11??11?1?111??????11????", "1111?1?1????1?????111??????1?", "???????1????1???111?1??1?1??1", "?1?????0111?1?1?1?????11?????", "111?011?11111??11?????11?????", "?11??1?1????1?11?101????????1", "?1?11???1??1???1?1????1?1??0?", "??????11???01?1??1???1?1??1??", "??1111111???11???11??1???1?1?", "0???1?1?????0?11???1011??????", "11??111111111??111?10?111?11?", "??1???1?1???1??1??1?11???1?1?", "1???1???11???0100?11??1??1111", "????1110?1?????1??011???1????", "0?????????1??1?11?11???1?1???", "?1?11?1?011?1?1??1????????11?", "01???0??0??1???11??????111???", "????????111?1???1???1?111??1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"11101111111001110111011111101", "11111011111111111011111000110", "11111011101110001111101111011", "11111110111101111101101101111", "11100111111111111011001100111", "11011011111111110101110111111", "11101101111111110010101110101", "11111111111111111101111111010", "11011111111110110100111111111", "11111111111110101111111110111", "11111111110111111101111101101", "11111111111011111101111110010", "11111111110101110111111011110", "10110011111111101111111010111", "11111011101111111001011101111", "11111111111010111001111011111", "11111111111111111111110011111", "11111111101101111111111101110", "11101111010111111101101111000", "11110101111011011111101111011", "11110110111101011111111011111", "11110111110111111111111111111", "10011111111111111101001111111", "01111111111111111101111011101", "10101111111111101101011111111", "11101111111001111111111111111", "11111111110110110101111111011", "11111111110111011111110111101", "11011101111101011101111111110"};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> rows = {"???1?0??????????0????????0??1?", "??0????1????0?00?????1??00????", "????1??????0?????0???0?????11?", "1???0?1?0?0??????1????1???????", "??????0??0?0??00??0?0???0?0?11", "???00?1??0?0?1?0??010???????0?", "0?0?0?????1?0???????0??????0??", "??0????0??11???????00???1???0?", "?1???1???0??010?0?0??0????0??1", "????0????0???1??0????0??0?????", "0??1???????????????0??00?0????", "?0????11???1????????0??0?????0", "??00??????0??0??011??0?0????00", "?????101????0??0?1???1110?0?0?", "?????????????1??0?0??0???1????", "00???1?1??11??????1????????0??", "??0???10????0???1???0?????????", "0?11??????00?1??0?0????????1??", "?0????????0??0??1?1?0?110????0", "?????1?????????????101?10?0?00", "0?00???0????00?00??1?????0?0??", "0??00?111???0???10????????10?1", "???01???0??????1????????11?0??", "????????00???1?????????????0??", "??????0???????1????1??????????", "?0????????0??????0????????????", "?1??????00?1?????1??0?0?????0?", "0???01???0??????????01??10??0?", "0??0????????1??????100????1???"};
    vector<string> columns = {"?0?1???1??????????0????0?0?0?", "???0????????????????0??????1?", "????0????????????????1????0??", "?0?????????0??1?????????1???1", "1????????0???1????1???0???0??", "??????0???????01???0?????0??0", "??1?????0??1?0????0????1?????", "???0?????00???0???1?0???0?1?0", "??0??????0?????0????????????1", "???0??0??0??0????????????1???", "?1??00????????????1???1?0????", "??????????0?1??????0?0?????1?", "???0????????0??01???????0??0?", "????????????????????11????0??", "?0?????????0???0??????????0?0", "0?0???????????0??????????????", "?1??????????????0?????????1??", "00??1????0??0?????0??????????", "0?0??1??????00???????0???????", "0?01?1?????????????01????????", "0?????????0????1?0???????00??", "??1???????????????0??????????", "???0???????0??????1?0????????", "???0????????????0????????????", "?????0?1?1????????????1??0?0?", "??????????????????????0??????", "???0??0??????????????????0?0?", "??????????????????1??????????", "???0???0?1?????01?0?????????0", "0?????00????1????????????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000100000000000000000000000010", "000000010000000000000100000000", "000010000000000000000000000110", "100000100000000001000010000000", "000000000000000000000000000011", "000000100000010000010000000000", "000000000010000000000000000000", "000000000011000001000000100000", "010001000000010000000000000001", "000000000001010000000000000000", "000100000000000000000000000000", "000000110001000000000000000010", "000000000000000001100000000100", "000101010000000001000111000000", "000000000000010000000000010000", "000001010011000000100000100000", "000000100000010010000000000000", "001100000000010000000000000100", "000100000000000010100111001000", "000001000000000000010101000000", "000000100000000000011000000000", "000000111000000010001000001001", "000010000001000100000100110000", "000000000000010000000000000010", "000000000000001000010000010000", "000000000000000100000000000000", "010000010001000001000001000000", "000001000000000000000100100100", "000000000000100000010000011000"};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> rows = {"0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "1", "1", "?", "0", "0", "1", "0", "?", "0", "?", "0", "0", "1", "0", "0", "1", "?", "0"};
    vector<string> columns = {"?0??10???00?1?000??00?0??00?00"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0"};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> rows = {"11", "11", "01", "1?", "10", "1?", "?1", "?1", "11", "?0", "11", "0?", "1?", "00", "??", "10", "11", "?1", "??", "01", "??", "10", "??", "11", "?1", "??", "1?", "11", "1?", "1?"};
    vector<string> columns = {"11011111??1?1001101011?1?1?111", "?1110??11010101?111110111??1?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"11", "11", "01", "11", "10", "10", "11", "11", "11", "00", "11", "00", "11", "00", "01", "10", "11", "01", "11", "01", "11", "10", "01", "11", "01", "10", "10", "11", "10", "11"};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> rows = {"?0?0??0???000?0?????00?0?0010", "?0?0?0??00?01000?00?00?00?010", "0??0??0?0?000??0??0?000000???", "??0010000????00??0??0?00??0??", "??0???000??01???00?100??0?0?0", "????000?0??00?????????0??010?", "?0??0000???0????0???0000???00", "0??0??0?001?00?11?0?0????????", "??0000???000000??1???0000????", "??0????0000100?0????0?0???000", "?0????0?0?0010??0?01??0?0???0", "???00?0??00?0?0?000?0????000?", "0?0000?0001???0?????0?0?00???", "00????000??0????0?????0?0?0?0", "0?01?00000?000???00??00000?1?", "?00??0????????0?0000?01???0??", "0?0?00??00000?1?00?00?1??0???", "0???????00?0?0?00????0?0??0??", "??00???0??0???????0??0?0??0??", "00???0?0?00?1?0??0??0?0????0?", "?0???1??0????0??00?00???0?01?", "?00?00????1?0???00???0?00?0??", "?00?01000??010?0???0??0??????", "00???0?0???0?00?0?000?0?00?00", "0?00?00??0000????0?00???0??0?", "?0??0?????0??00000???00?0??00", "??0??001?0???0???000?0??????0", "????0??0100?00?0?1010???01000", "0?0?1000?0??0?01000?0000?????", "01??0?0?0000???0?001?000??000"};
    vector<string> columns = {"000?0?011??00100?0100?00000010", "0?0?000?0?00000000000000000000", "00000?00?000?00?000?0000000100", "0001??00000?000000000?00000010", "0?00??000000000?000?00001000?0", "100000?0?0000000000??0?00?1000", "000000000?10001000000?00000?0?", "??00000?000000000?0?000000?000", "000000000000000?00??01000??0?0", "000010?0001?10?00??00000?10101", "00000?000000?0?0?000000??0?000", "00000000000000001000?0000?0100", "0000000?10000?00000??000?00011", "?00???000?0000000000000?00?000", "000?00000?0000?00000?000000??0", "1?0?000000000?10?0001?000??000", "0??000000000000000001?10000000", "0?0?0000000?0010000000?0000001", "0100100?001000000?0100?0?0?000", "000000010?0000?1??0?0?100?0100", "0000?1?01000?000?0?00010?00000", "?000011?00000?0000?0000000000?", "0?00??00?100000000000000000000", "000000?0000000?000000000?0?000", "00000000000?0000001?000?100100", "00000000000000011?000?00000000", "??00000?0?00100000?0001000000?", "000?00?101000??00?000000000000", "00?00?0??000?0000000010000000?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00000000000000000000000010010", "00000000000010000000000000010", "00000000000000000000000000000", "00001000000000000000000000000", "00000000000010000001000000000", "00000000000000000000000000101", "00000000000000000000000000100", "00000000001000011000000001000", "01000000000000010100000000001", "00000000000100001000000000000", "00000000000010000001100000000", "00000000000000000000000000000", "00000000001000000001000100000", "00000000000000010000000000000", "00010000000000000000100000010", "00000000000000000000001001000", "00000000000000100000001000000", "00000000000000000000000000000", "00000000100000010000000000000", "00000000000010000000000000000", "00000100000000000000000000010", "00000000001000000010000000000", "00000100000010000000000101001", "00000000000000000000000000000", "00000000100000000000010000000", "00000000000000000001000000000", "00000001000000000000000010000", "00000000100000100101000001000", "01001000000000010000000000000", "01010000000000000001000000000"};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> rows = {"??????0??0???0???0?0?00?0????0", "0???00???00????0??0?0????0?00?", "0??0?0?0??0????0???0????00??00", "0?00???0?00???0??0?0???0?0???0", "0????0?0??0?????????00?0????00", "??0????00???0???0?1???0???????", "???0?0??0???????00?00?000????0", "0????0?00???0???0?????????00??", "??1?????00?00?000???00????????", "?0??00??????0???????0????0?0??", "??10????0?00???????????????0?0", "????????????00???0?0????0?0?0?", "?0?????0??0??????????0??0?????", "????????????0?0?0??????0?0?00?", "?????0?0???0??0000????000?????", "?0?00???0?????0????0??????????", "0000???????00?1?0???0000??????", "?0???????1????0????00??0000???", "?0???0??00??00???????00???????", "0????0?0??001?????0????????0?0", "?0??0????0??01??0??0???????0??", "0?0???0?00?00???0???0??0?0????", "??1000?00???0??0??00100?0??0??", "???????????0???0???00?00?0???0", "??00????0??0???????????????0?0", "???0??????0??0?0???000???00???", "0?????????????0??????0????????", "?00????00?????0???????????????", "??0?????0????0????????????????", "?0????????0???0?????0????0?0?0"};
    vector<string> columns = {"000000000000000010000000000000", "000000000000000000001000000000", "000000000000000000000001000000", "000000000000000000000000000000", "00000?000000000000000000000000", "000100000000000000000000000000", "000000000000000000000000000000", "0000000000000?000000000??00000", "001000000000000000010000000001", "000000000000000000000000100000", "010000001010000000000011000000", "000000000000000000000000000000", "000000000000000000000000100000", "000000000001000000000000000000", "000000000000000000000100?00010", "000000000000000000000000000000", "000000000000001000000000000000", "000000?00000000000010010000000", "000000000000000000000000000000", "000000000000000000100000000010", "000000000000000000000010000000", "000000000000000000000000000010", "0000000000000000000?0000000000", "000000000000000000000000000000", "000000000000000000000000000000", "0000000000000?0100000000000000", "000000000000000000000000000000", "000001000000000000001000000000", "00000000000000?001000000011000", "000000000000001000000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "001000000000000000000000000000", "000000000000000000000000001000", "000000000000000000000000000010", "000000000000000000000000000000", "000000000000000000100000000000", "000000000000000000000000000000", "000000000000000000000000000000", "001000000000000000000000000000", "000000000000000000000000000000", "001000000000000000000000000000", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000010100", "000000000000000000000000100000", "000000000000001000000000000000", "000000000100000000000000000000", "000000000000000000000001000000", "000000000000100000001000001000", "000000000000010000100000000000", "000000000000000000000010000000", "001000000000000001001000000000", "001000000000000000000100000000", "000000000000000010010000000000", "000000000100000000000000000000", "000000000100000000000000000000", "000000000000000000000000000000", "000000000000000100000011000000", "000000000000000000000000001000"};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> rows = {"000000000000000000000000000000"};
    vector<string> columns = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> rows = {"0000000000000000000?0000000000"};
    vector<string> columns = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> rows = {"000000000000000000000000000000"};
    vector<string> columns = {"?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> rows = {"000000000000000000000?00000000"};
    vector<string> columns = {"?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> rows = {"000000000000000000000000000000"};
    vector<string> columns = {"0", "0", "0", "?", "?", "0", "?", "?", "0", "0", "?", "?", "0", "?", "0", "0", "?", "0", "?", "?", "0", "0", "0", "?", "0", "?", "0", "?", "?", "?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> rows = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    vector<string> columns = {"000000000000000000000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> rows = {"?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"};
    vector<string> columns = {"000000000000000000000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> rows = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    vector<string> columns = {"0000000?0000000000000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> rows = {"?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?", "?"};
    vector<string> columns = {"000000000000000000000000000?00"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> rows = {"0", "?", "?", "0", "0", "?", "?", "0", "?", "0", "0", "?", "0", "?", "0", "?", "?", "?", "0", "?", "0", "0", "0", "?", "?", "0", "0", "?", "0", "?"};
    vector<string> columns = {"000000000000000000000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> rows = {"0?00???????00??000?0?0?0??0?0?", "???00?000?0??000????000??00?0?", "???0?0?0000000?00??00????0?000", "00000???0??0?0?0???0?0?00??000", "000????000000?00000?000?0?0000", "0?0??00?00???00000?0?00???0?0?", "?0???00??000?0?000?00???00??00", "000?0?0???000?00??0??00??0??00", "?00???0000000??0000000000000??", "?0??00?0?000??0?000????0?00000", "?0??0????????0?0??00????00?0?0", "00??00??0??0??0???00?0000000??", "0000?00000???000???0???0?0?0?0", "??0??0????000?0??00?000000???0", "?0??0?0?0???00??0?00??0000????", "000?0000???000?0?000?0???00??0", "???0?00?????0000000?0?0?0?0000", "?00000?000?0?000??000??00???0?", "?0?00?0???00?0???00??0??00?00?", "0?0?0?0000?00?00??0?00?00??000", "00?0?000000?0???000000?0??000?", "00?????000000??00?00000?0?000?", "00?0?000????0?0?0000?00?0000?0", "00???000000??00?0?000?0??0?0??", "0??0??0?0000?0??0?00?????0???0", "00?0?0?00???000???00???0?0??0?", "0?00??0??00?0?00?00?00?00000??", "?000?000?00??0000000?0?????000", "0???0?0?0?0?0000?0??0?00??0??0", "?0?0?00???000000?0?00??00?0000"};
    vector<string> columns = {"0?00?0?00??000?0?00???0?00?0?0", "00?00??00?00?0?000000000?000?0", "??000?????00?0?0?????0??00??0?", "0???00?000????0?000??0????0??0", "???0??0000?000?0?????000???0?0", "00?000?000?00000?0?0000??0?0??", "00?0?00????000??000?0???0?0?00", "???0000000?0??0?00?0?0?0???00?", "0??00?0????0??00?0?000?00?0?00", "?0000????000?00?0000??0?0?00?0", "??0?????00000??00000???0?00000", "000000??0000?00000??00?000000?", "0?0000?00??0000000?0????000??0", "000?00?0????00??0?000?0?000?00", "?0?00??00?0?0?????0??00000??00", "?00000?000???00?0?000?00??0??0", "????0????0???0?000?0000???????", "?0?0?00?0000??0?00?0000000?00?", "?00?00??00?0?0?0?00??0?0?0?000", "0?000?0000?0?0?000?0????00?0??", "?0000???????????0?0?0????00?00", "0?00??000?0????0000??0?00?0???", "??0?????00000?0?00000000??0?00", "00?0????0?0?00?00?00?00?0?00?0", "?0?0?00000???00?0??0000?0?000?", "0????000?0?00?????00?0???00?00", "00?0??00000?0??0??????0?00?0?0", "0????0000?00000???00?????00000", "00?00000??00?000000000??00?000", "0??00????00?00??0?000?0???000?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> rows = {"11?1?????11??11??11??11??11?1?", "1111111?1111?1??1??1?11??1?1?1", "?1?111111???1?????1??11?1?111?", "?1111????11?11?111?11??1?1??1?", "?11?111???11??1??111?1???1111?", "???1??111?1?1?111111?111????11", "?11?111??1?1?11?11????11111?11", "11?11111?11???11111??11?1?111?", "?1111?11??11?1??1??11111?111??", "????1?1??11???11?11???1??1?111", "??111?111?11?1111?1????11???11", "?1111????11111?11111??111?1???", "1??111???11????111?111?1?1??1?", "1??11????111?1111?1??1111?11?1", "1?1?1???1???111111111111111??1", "????1111111?11???111??111?1?1?", "11?1?1111?11??11??111?111111?1", "?1???111?1??111?1?1111111111??", "11??1111111??11111111?1???1???", "?1?1?1?111?11????????1???111?1", "??1???111?1?????1??111???1?11?", "??111?1??1111?1??1?1??11?1111?", "1?111?1?1????1111111???1?11???", "11??1?1?1??11??1?1???11??1????", "??1111??11??1?111?11???1?111?1", "1111??1?11?1111????11?????1??1", "?1???111??1?1?1??111???1??1111", "1?1?11???1????1111111????1111?", "11?1?111?11???111111??111111??", "1????111?11111?1??????1111111?"};
    vector<string> columns = {"11??1???11??1?11???111??111???", "111????11?1111??111?1?1?111?1?", "1111???????11?11???1111?11?111", "11???1111????11?1??1?11???1???", "??111??1?11??1?111??111?11?1?1", "?1??1??11?1?1?1??1???111???1??", "11??1111??111?1111?1??1?1?1?1?", "1??1??1??11??11?1111??111??1?1", "?1?1?11??1?111????1??1??1111?1", "1?11???????11?1?1?11?11?111111", "111??1??1111?1?1111????1111111", "?1111?1?11????111?????11?111??", "1111111??1??1?1?1????1??1?1?11", "??1111??1?????11111?11?11?11??", "1?1?11?1?111???1???11?1?11??11", "?1??1?1?11111?1?1111?11?1111??", "?11??1?111??111?11???1?1??????", "11??11???111?1??11?1?11??11???", "?111??1?111??111?11??11?11?11?", "?11?1???1?1???1??111?11?11?1?1", "????1??11??1???1?111?1?111?111", "?????111?1?111??1?1?1?1?11??1?", "1111?11111111????11?1?11?1?111", "?11111?111?111111111?111111???", "1?1?1?1??1????11?11?1??11?11??", "1111?1?11?11?111?1?1??1111??1?", "???111?111?111?11?11?11?1??111", "?????1???1???1???11111?1111111", "?1?111111111??111?1111???1???1", "1111?1?1?11?11?1111??111?11?11"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"110100000110011001100110011011", "111111101111010010010110010111", "010111111000100001100110111111", "011110001110111111011001110111", "011011100111111001111101111110", "100100111010111111110111010111", "111011101101011111010011111011", "110111110111011111111111101111", "111111111111110010011111011101", "001010111110001111110011111111", "001111111011011110110111100011", "011110000111110111111111101101", "111111100111010111011101010111", "100110111111011110100111101111", "111111101101111111111111111101", "010111111110110001111011101110", "111111111011111101111111111111", "011101111111111010111111111111", "111011111110111111111111001111", "111101011111111001111101011101", "011000111110100110111100111111", "111111111111101011011011111110", "111111101011011111110101111111", "110110111001101101001110011111", "011111011100111111111111111101", "111111111111111111111110101111", "111011110110111011110111011111", "111011011101101111111011111111", "110101111110011111111111111111", "110001110111111111111011111111"};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> rows = {"????1?????111?????????????????", "???????1??1??1????????????????", "????1?1?????????1????1????????", "?11??????????????????1?11?????", "?????????1??????????????????1?", "??????1???????????11??????????", "?????????????1?1??????????????", "????????????1????????1????11??", "1????????????1????1???????????", "?????1????????1??1?1???1??????", "??1????11????1????????????????", "?????1?1??????????????????????", "???1??1??1????11????????1?????", "?????11???????????????????????", "??????1???11??????1???????????", "?1?????????????????????1??11??", "???1???1???????????????????1??", "????1????????????????????1?1??", "?????????????????????1?????1??", "?????1??1????11???????????????", "????????????11????????????????", "?????1????????????????1???????", "???????????????????1????1?1???", "?????1???1??1?1?????????1???1?", "??????????????????????1???1???", "?????????????1?????????1??????", "????????????????????????1?????", "??1???????????1???????1???????", "??1?111???1???????????????????", "????1????????1??1??1?????????1"};
    vector<string> columns = {"1?1111?11111111111111111111111", "1111111111111111111111111?11?1", "111111111111111111?111111?1111", "111111111?1111?111111111111111", "11111?1?11111111111?1?1111?111", "1111111111111??11?1111111?1111", "?111?1111111111111111111111111", "1111?1111111111111111111111111", "111111111111111?11111111111111", "1?11111111111111??11111??11111", "111??11?11111??11??1111111?111", "111111111?11111111111111?11111", "111111111?1?111111111111111111", "111111?111111111???11?111?1111", "1111?11111?11?11111111?11?1111", "1111111111?11?11111111111111?1", "?11111111111111111111111111111", "11111?111?11?11111111111111111", "1111?11?11111?1??111?1111111?1", "11111?11?1111111111111111??111", "1?11111111111111?1111111111111", "1111111111?1111111?11?111111?1", "1111111111111111111111111111?1", "1?111111?11?11111111111111?111", "111111111111111111111111111111", "1?11111?111111?11?111??111111?", "??11111111111???11111111111111", "111?1111?111111111?11111?11111", "111111111111?11?11111111?111?1", "11111111111111111111111?111?11"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000111111111111111111111111111", "011000010111111111111111111111", "111111111111111111111111111111", "111111101011111111111111111111", "101111101100011111111111111111", "111111111111100011111111111111", "111011111111111101111111111111", "111101101101101111111111111111", "111110111011110111111111111111", "111111111111111011010011111111", "111111111110111110101111111111", "111111111111111111011111111111", "111111111111111111111101111111", "011111101100111110111110111111", "011101101111111111110110111111", "011111111101111111111101011111", "111111010101111101111111111111", "111111001111111101111110111111", "111111101011111101101111101111", "111111111111111111111111111111", "111111111101111111111111111111", "111101111111101101101111111111", "111101111110111111111111111111", "111111011111111111111111110111", "111111011011111111111011111111", "111111111110110101111111101011", "111110101111100111111111111111", "111111111111111111111111110111", "111111111111111110101101111001", "111111111111111111111111111111"};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> rows = {"1111?11111?1?1111111111?111111", "1111111111111111111?1111111111", "11?11111111111?111111111111111", "1111?1111111111?1111?111111111", "111111?1111111111??1111111111?", "?1111111??1?1?11111111?1111111", "?11?1111?11111111?11111111111?", "1111111111?1111111111111111111", "?11?11111111111111111111111111", "1111111111?1111111111111111?11", "111111111111111111111111111111", "1?111111111111111111111111111?", "111?1111111111111?111?1111111?", "1111111111?1111111?1??1?111111", "1?1111111111??111111111111111?", "111111111111111?11?1111111??11", "1111111?11111111?1111111111?11", "111111111??1111111111111111??1", "1111?111111?11?1111111111111??", "1111111?1111111111?11111111111", "111?1111111??11111111111111111", "1?111111????11111111?111111111", "111?111111?111?111111111?11111", "111111?1?1111?11?1111111111111", "11?11111111111111111111111?111", "111111111?111111111111?111?111", "11111111?1?11111?1111111111111", "11?11111111111?11111111?111?11", "11?1111111?11?11111111?11111?1", "1?11111111111?111111?111111111"};
    vector<string> columns = {"??1??1?1??????1??1????????????", "?11?1????????????????1???1????", "1???1??1??????????????????????", "????1??1??????1????1???1?1????", "?1????????????????????????????", "??????????????????????1??1????", "????1?????11????????????????1?", "????1???????????????????1?????", "1???????????????????1????????1", "???????????????????????1?1?1??", "???1??????????????????????11??", "????1??????????????????1??????", "????????????????????????1?????", "?????????????????????????????1", "?????????????????????1????????", "11??????1??????????????????1??", "????????1???????1?1???????????", "?1???????1?????1??1??????1?11?", "?????1????????1?1?1????1??????", "??1?1??????????????1?????????1", "???1?????????1????????????1???", "?????????????1????????????????", "??????1??????????????????1????", "??1??1???????????1????????????", "??????1111??????1???????1???1?", "?????????????????????????1????", "1?1?????????????????1?????????", "??????????????1????????????1?1", "?1?1???????1?????1??????????1?", "??1??1??????1??11????1??1?????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111101111101011111111110111111", "111111111111111111101111111111", "110111111111110111111111111111", "111101111111111011110111111111", "111111011111111110011111111110", "011111110010101111111101111111", "011011110111111110111111111110", "111111111101111111111111111111", "011011111111111111111111111111", "111111111101111111111111111011", "111111111111111111111111111111", "101111111111111111111111111110", "111011111111111110111011111110", "111111111101111111010010111111", "101111111111001111111111111110", "111111111111111011011111110011", "111111101111111101111111111011", "111111111001111111111111111001", "111101111110110111111111111100", "111111101111111111011111111111", "111011111110011111111111111111", "101111110000111111110111111111", "111011111101110111111111011111", "111111010111101101111111111111", "110111111111111111111111110111", "111111111011111111111101110111", "111111110101111101111111111111", "110111111111110111111110111011", "110111111101101111111101111101", "101111111111101111110111111111"};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> rows = {"111111111111111111111111111111", "111111111111111101111111101111", "111111111111111111111111111111", "111111111111111111111111111111", "110111111111111111111111111111", "111111111111111111111111111011", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "1111111?1111111111111111111101", "111111111111111111111111111111", "111111111111111111111110111111", "111111111111111111111111111111", "111111111111111111111110111111", "111111111011011111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111001111111111", "111111111110111111111111111111", "111111111111111111111111111111", "111101111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111101111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111110111111", "111111111111111111111111111111", "111111111111111111111111111111"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111111111111111111111111111111", "111111111111111101111111101111", "111111111111111111111111111111", "111111111111111111111111111111", "110111111111111111111111111111", "111111111111111111111111111011", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111101", "111111111111111111111111111111", "111111111111111111111110111111", "111111111111111111111111111111", "111111111111111111111110111111", "111111111011011111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111001111111111", "111111111110111111111111111111", "111111111111111111111111111111", "111101111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111101111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111110111111", "111111111111111111111111111111", "111111111111111111111111111111"};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> rows = {"011111110000110111111100001101", "000011111100110011011111001001", "111010111111110101100101111001", "111111011111110111011011010011", "110011011110111101111100011111", "101110001110101110110110111110", "011011011111111011111111011111", "110011101111100010010111101111", "111011001000111100101011001010", "101011010111101010001?10111111", "110100111110011111011111100111", "111001011011111010111111001000", "001100100010110111111111111010", "111111111101111111110110111111", "111010010110100111011001111110", "111101010110001110111111110100", "011100010111111001110001111111", "011001010011101110011011100001", "111101111011111110111101111111", "110101111101000111110010111011", "110010001011101111100001111111", "101110111101110110111111001010", "101101011011111111000010100110", "001110111111110010011111010110", "111111100111101111111011111100", "111110111111011111001010111011", "111011101010111011000011011110", "001111101001010100101011110110", "110110011011111011111111111100", "011111110111001010011000100110"};
    vector<string> columns = {"1101101111010101011100?0101101", "101110111011011111111000111011", "00?1110111110111001111101?1010", "0111?01?1011101111101101101110", "110101110111111101111111111011", "11?110110110?1001?111000010000", "00?011101111010111101010111011", "?1111111110?011000001101111111", "111011110111110100100101000010", "101101101101111111100111?11101", "1111101010111100101001?1011110", "111111111101111011101111101010", "001001010110111111111010110111", "0001?1111110111010111111011101", "011111110110011110010101110001", "111110100?10?11010011010111010", "1010?110?001110110111100100110", "010101111111110101010111111110", "111011111?01111010111100111010", "001111110111101111101011111011", "0111111110110?0000111111011110", "100101000010110110110111110111", "101111001010111101111110110100", "0011111001001111101110011111?0", "11011010?111101101100101110111", "0011001101010100111111111101?1", "10001111?110011110101011101111", "11?1111100111111111101?11?0011", "11111010?111011111110111010011", "111?0001001011000011010?111101"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"011111110000110111111100001101", "000011111100110011011111001001", "111010111111110101100101111001", "111111011111110111011011010011", "110011011110111101111100011111", "101110001110101110110110111110", "011011011111111011111111011111", "110011101111100010010111101111", "111011001000111100101011001010", "101011010111101010001110111111", "110100111110011111011111100111", "111001011011111010111111001000", "001100100010110111111111111010", "111111111101111111110110111111", "111010010110100111011001111110", "111101010110001110111111110100", "011100010111111001110001111111", "011001010011101110011011100001", "111101111011111110111101111111", "110101111101000111110010111011", "110010001011101111100001111111", "101110111101110110111111001010", "101101011011111111000010100110", "001110111111110010011111010110", "111111100111101111111011111100", "111110111111011111001010111011", "111011101010111011000011011110", "001111101001010100101011110110", "110110011011111011111111111100", "011111110111001010011000100110"};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> rows = {"000000000000000000000000000000", "000000000000000000000010000000", "000000000000000000000000000000", "000000001000000000000000000011", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000010000000000000000000000", "000000000000000000000000000000", "00000000000000?000000010000000", "000000000000000000010000000000", "000000100000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000001000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000010000000000000", "000000000000000000000000000000", "000100000000000000000100000000", "000000000000000000000000000000", "001000000000000001000000000000", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000"};
    vector<string> columns = {"?0000000000000?0?000?00100?000", "0001100000000000000000000000?0", "000000?00000?0000000000?000000", "0000000?00??0?0000000000000000", "000000000000?00000000000000000", "01?000??0010000000000000000000", "0??0?00000000000000?0001000000", "00?100000000?000?000000?000?00", "00000000?000000000000000000000", "00000000000000000?0?00?000000?", "?00?000?00000000000000000??000", "0000?000?00010?00000?000000000", "00?000000000?00000?00?00000000", "00000000000?000000010000000000", "0?0?0?0010000?0000000??000?000", "?00000000000?000000?0000?00000", "0000000?0000000000000?00000000", "0000000000000??0?0000000000000", "0?000000000000000?000000000?00", "00000000000000010000?000000000", "000000?00?000000?00?000000?00?", "000?000000000?0000000100000000", "0?0000000001??0000000000000?00", "000000000?00000000000000000000", "0000000000??000000000000?10000", "?0000000?00000?000000000000000", "00?00000?000?0000000000000000?", "000100000000000000?000000000?0", "00000000000000?0?0000000??0000", "00000000?000000?000?0?00??0000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "000000000000000000000010000000", "000000000000000000000000000000", "000000001000000000000000000011", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000010000000000000000000000", "000000000000000000000000000000", "000000000000000000000010000000", "000000000000000000010000000000", "000000100000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000001000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000010000000000000", "000000000000000000000000000000", "000100000000000000000100000000", "000000000000000000000000000000", "001000000000000001000000000000", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> rows = {"001000011001001011100001000110", "011000100011001110100100010011", "010000001000001010000010001001", "000101100000011010000001111010", "110110001110001101000010101100", "010100000001101010100000010000", "000010000101110011010001100000", "100111?00001000011000101100001", "011101101011001000000110010010", "001000101000000100000000010100", "001010010001011101000100000010", "000111100010100001010000000001", "000100000000001001000001110011", "001001000001011011011001111000", "100010011010010001001000000000", "101010011101111100001010101001", "001010000010110010101010100110", "011110000111000000001100001100", "001110111010011000010000100111", "000010101011111100000000010010", "011100111001100111000011000100", "011111101101000001001000100010", "100110100110100001000101010000", "000000110101001011010000101100", "001101001011000000001110011000", "100101000111000011101001000000", "000001000010010101111001010010", "000010111010111101000000010101", "000101001111011100001111001010", "111011101110101110001110000100"};
    vector<string> columns = {"1?00100001?0??0?11?0?00??0???1", "???10?1100000???10???00?0???01", "1?0100?010?0?0??101?0???00??10", "??0?00?11?010?0?0011?1?100????", "?010???0??0?00???0??110?????11", "10?100?????01??00????010??101?", "?0?010?1??00????0?00?????1000?", "01??10??????0001?00?1?00?0??11", "0101?1???1?0?1?00001??1?1?1?0?", "01??1??????100?011?100101?11?1", "0?0?1?01??011??00?1??1?0?10??0", "1???01?0??00?????00?00?00110?0", "0000?0??00?0?1?????0010?11??11", "1100000?1??0???????0110?10????", "0?1?11?01?0?00???10????????001", "?0?????100??111???00?111?1?100", "00??0???0001???00010?0??00??0?", "?1??????0?011??10?100??00?010?", "00?110000?0??1010???00?11?0???", "?0101000?00000?1?0??1??0?0001?", "1??0?1?1101??10?01011?0111???0", "??11??001?101??1?01?000??0??11", "0?0?1?1?00?011?1101001?1?0??00", "?00??01?001?01111?1?00?000???0", "00?010110??100??1?1?01?0?001?1", "0???0????0010?00?00????0111???", "?0?0??10000?000??0011010?00??1", "???000?1?010????010???????0???", "1?????0?00?0????00??10?100??00", "0000101000?00001???0?11101????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"001000011001001011100001000110", "011000100011001110100100010011", "010000001000001010000010001001", "000101100000011010000001111010", "110110001110001101000010101100", "010100000001101010100000010000", "000010000101110011010001100000", "100111100001000011000101100001", "011101101011001000000110010010", "001000101000000100000000010100", "001010010001011101000100000010", "000111100010100001010000000001", "000100000000001001000001110011", "001001000001011011011001111000", "100010011010010001001000000000", "101010011101111100001010101001", "001010000010110010101010100110", "011110000111000000001100001100", "001110111010011000010000100111", "000010101011111100000000010010", "011100111001100111000011000100", "011111101101000001001000100010", "100110100110100001000101010000", "000000110101001011010000101100", "001101001011000000001110011000", "100101000111000011101001000000", "000001000010010101111001010010", "000010111010111101000000010101", "000101001111011100001111001010", "111011101110101110001110000100"};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> rows = {"111111110111111111110111111111", "111111111111111111111111111111", "111111110111111111111100111111", "011111111111111111111111111111", "111111111111111111111011111111", "111111111111111111111011111111", "111111111111011111111111111111", "111111111101111111111111111111", "111111101110101111111111111111", "111111111111011111111?11111011", "111111111111111111110111111111", "111111111011111111111101111111", "111111111111111110111111111111", "111111101111111111111111111111", "111111110111111111111111111111", "000111110110111111111111111111", "111111111111011111110100111111", "111111011111111011111111111111", "010111111111111011111111111111", "111111101111111111111111001111", "111111111111111111111111111111", "111111111111111111110111111111", "111110111111111111101111111111", "111111111111111111111111111111", "101111111111111111111111111111", "111111111111111111111111111111", "110111110111101111111111111111", "111111111111111111111111101111", "110111111111111111111111111111", "110111111111111111111111100111"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111111110111111111110111111111", "111111111111111111111111111111", "111111110111111111111100111111", "011111111111111111111111111111", "111111111111111111111011111111", "111111111111111111111011111111", "111111111111011111111111111111", "111111111101111111111111111111", "111111101110101111111111111111", "111111111111011111111011111011", "111111111111111111110111111111", "111111111011111111111101111111", "111111111111111110111111111111", "111111101111111111111111111111", "111111110111111111111111111111", "000111110110111111111111111111", "111111111111011111110100111111", "111111011111111011111111111111", "010111111111111011111111111111", "111111101111111111111111001111", "111111111111111111111111111111", "111111111111111111110111111111", "111110111111111111101111111111", "111111111111111111111111111111", "101111111111111111111111111111", "111111111111111111111111111111", "110111110111101111111111111111", "111111111111111111111111101111", "110111111111111111111111111111", "110111111111111111111111100111"};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> rows = {"000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "0000000000000000?0000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> rows = {"111100111100110010100101001010", "011111000101000100111101000101", "0111111000?1001000101111101111", "100?00000000111111010000111000", "01001011110?0000?0100000001101", "110010111001111001011111001011", "000111100000?10010110010000101", "001101001110010110100000011100", "010001?00100111101001010110011", "1010101111?0100100111100100010", "10111000100?000111101011100000", "001010000010111010001101000110", "111000101001001001110111110100", "000100011?10010011011000111001", "00111?0?0001011?010100011?0110", "000100100000001101000010100011", "100010001110001011111001110011", "01?0000110000100101?010111?000", "0010100?00100010000110100000?0", "1110000?1100101011011100110100", "011101011110111011000111110101", "0010010101010010010010000?0110", "110100001101001111001101100100", "110010110010000100101101011100", "100000001?0110100?000110010100", "0?00100?0010100001101011101011", "00010?00110110?100?11100010111", "10100100001001001011111?011000", "001001100100111010011010010001", "100101?00111011?10011101000101"};
    vector<string> columns = {"010100011110000100000011001001", "100101000110100010010011100101", "100101111001011001001000000111", "111011001000100001011011000000", "111000010111101001111100000110", "100011010110110011011010101000", "101011101100100100000001000011", "010101100100111010110000001111", "111010110110100011000001011100", "011001001111010010110111011111", "000100011000111011011001101110", "011000111000000000001100000111", "101111010000010001000001010100", "100100110011010011011010000111", "000101001010111110011110110000", "011010110001101000011111101001", "011011100111001010100001010000", "111001000101100001011011101101", "100101101101000000011000111010", "001101001001101110111110100011", "111001000011101011001011010001", "001001101010100100101000110110", "001100001110111111011010010000", "001000010101010010101001010101", "011011000010101000000110101001", "1110001100?0011100001010001001", "100011000100010001101101010000", "011011101000010110001000011011", "101001001101001110100100011000", "110010011100000010011110001011"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111100111100110010100101001010", "011111000101000100111101000101", "011111100011001000101111101111", "100000000000111111010000111000", "010010111101000000100000001101", "110010111001111001011111001011", "000111100000110010110010000101", "001101001110010110100000011100", "010001100100111101001010110011", "101010111110100100111100100010", "101110001001000111101011100000", "001010000010111010001101000110", "111000101001001001110111110100", "000100011010010011011000111001", "001110000001011001010001110110", "000100100000001101000010100011", "100010001110001011111001110011", "011000011000010010100101111000", "001010010010001000011010000010", "111000001100101011011100110100", "011101011110111011000111110101", "001001010101001001001000000110", "110100001101001111001101100100", "110010110010000100101101011100", "100000001001101001000110010100", "000010010010100001101011101011", "000100001101100100111100010111", "101001000010010010111110011000", "001001100100111010011010010001", "100101100111011110011101000101"};
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> rows = {"11110111011?11101?111111111111", "1101111001?1111011101011001010", "111111101111011011111111111001", "10111110001110111111110111?111", "100111010110110110101111111111", "11011111?1111111111111101111?1", "1111?1110111111011110110101?11", "11101111111111?111101101011111", "111110011001101111101111111110", "1111111101111111110101??111011", "11111110?11011011111101011111?", "1111111111?1111110111111010111", "11111111011111?111111111111111", "110111011?11010011011111111011", "111110111111101100011111111111", "11111101?111111111111110011110", "100?11100110110111100111101010", "1111111101111101?1111100111111", "111111111101111101110111111110", "111100111?1111111?101111111110", "0101011111011111111?0011101111", "1101?1111111111111111111101111", "101101111101111?11111111101111", "1100111111101101101111011111?1", "111111111011111111?11011111111", "11111001111011111100111110?110", "1111111101111011111111011?1011", "0?1111111111000011111111111111", "0111111111111?1110001111111111", "111111111110011111101110001111"};
    vector<string> columns = {"111111111111110111011111111111", "11100111111111110111?10111?111", "100011111101111101111111111111", "111011110111111111?111110?1111", "10111111010?111001001111101111", "11111111011111?111101111101111", "111101111101111101111110?01110", "001001011011011100111111110111", "11011111?11?101111111111111010", "101101100111111101101111101100", "111111111110111111111111111111", "111011101011111110111110110111", "111111101?11111111111110111?11", "11?011110111110111111111110011", "111111?11?11111111110111111001", "11110111111011011111?110111101", "111110011101111010111111111110", "10?111101110111011111111111110", "1111111101111?111101010?111111", "101111111101111111110111011111", "1101111111?1111111111111111111", "101100111111101101110010111111", "1001111110?1101101111111110111", "1111011101111010?11111111?1111", "1011110111111?110111000?100110", "011111011111111111100?01111111", "1111011?110100110011111011101?", "111?11111011100111111111001101", "11111?01?011111101010111111111", "000111011111101111111111111011"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111101110111111011111111111111", "110111100111111011101011001010", "111111101111011011111111111001", "101111100011101111111101111111", "100111010110110110101111111111", "110111111111111111111110111111", "111101110111111011110110101111", "111011111111110111101101011111", "111110011001101111101111111110", "111111110111111111010101111011", "111111101110110111111010111110", "111111111111111110111111010111", "111111110111110111111111111111", "110111011111010011011111111011", "111110111111101100011111111111", "111111011111111111111110011110", "100111100110110111100111101010", "111111110111110111111100111111", "111111111101111101110111111110", "111100111111111111101111111110", "010101111101111111110011101111", "110101111111111111111111101111", "101101111101111111111111101111", "110011111110110110111101111111", "111111111011111111011011111111", "111110011110111111001111101110", "111111110111101111111101101011", "011111111111000011111111111111", "011111111111111110001111111111", "111111111110011111101110001111"};
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> rows = {"0100000000000000001?00?00000?0", "0001000?0001000100010000000000", "000010000000000?00001000001000", "10100000000000000000000?000000", "10?010010001000?000000000?0000", "00100000000?000000010000000000", "101100001000000000000000000000", "00000?0001?00?0000110100100000", "10000000000000000000000?100100", "010000000000000000000101000000", "000000000000101000000010000000", "000000010000000000000000001000", "00000000?000001010001001010000", "000001000000001001000000000000", "000000?000000001100000000?0000", "000000000010000100?00000010000", "000?0010000000000000000010?001", "100001000000001000?00001000000", "010000000000010010000101000000", "10000000?000000001000000000?00", "0000101001?0000000100001000000", "000000000000001000101100000000", "000000100000000000000100000100", "000000000000100000000000000100", "0000?0100000?00000000000000010", "00?10000010000001000?100000001", "000000101000000010000000000000", "000000010000000000001001001000", "000000100000000000000000100000", "000000000000?0000?001010000100"};
    vector<string> columns = {"000000?000100000?0000000000001", "100000000?0000000010?0??000?00", "??000000000?0?0000010000000001", "00000001?000000000100000000000", "0010000000001?0000000100010101", "?0000000?0000000000000?100000?", "?0000000000?101000100000011000", "00?000000000?0001000?000010000", "?1000??00000?0?000000000010?00", "??001100000??000000000???000?0", "00100000000100000000000?000100", "00?0001000000000?000000?0010?0", "00?00001010?000000100110010000", "00000000000010010?000000000000", "?00010??000100000000000?000100", "001010000000000000?0100?000000", "000000?000101?00010001000?0000", "00000?0?01001?00011010?0000100", "0000?0000010000000?000010000?0", "?1?0?1010?0?000000000000000000", "00000?0000000001000?0?0?000000", "0000000100?00100?100000000?00?", "000000011?00000010000000?00010", "?0?00000000000001000?010101010", "000000010??0000000001000010000", "01?00000000?001100000000000000", "?0?1101010???000010?0?00000000", "000000000000000?000000001?0000", "000?11100000000?0000000?000?00", "10000001000000?10?001?0?0?0000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"010000000000000000100000000000", "000100000001000100010000000000", "000010000000000000001000001000", "101000000000000000000000000000", "101010010001000000000000000000", "001000000001000000010000000000", "101100001000000000000000000000", "000001000100010000110100100000", "100000000000000000000000100100", "010000000000000000000101000000", "000000000000101000000010000000", "000000010000000000000000001000", "000000000000001010001001010000", "000001000000001001000000000000", "000000000000000110000000000000", "000000000010000100100000010000", "000000100000000000000000100001", "100001000000001000000001000000", "010000000000010010000101000000", "100000000000000001000000000000", "000010100100000000100001000000", "000000000000001000101100000000", "000000100000000000000100000100", "000000000000100000000000000100", "000000100000000000000000000010", "000100000100000010001100000001", "000000101000000010000000000000", "000000010000000000001001001000", "000000100000000000000000100000", "000000000000000001001010000100"};
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> rows = {"100010101?10010111010?10101011", "111?100111110011?0010000111001", "010001111011011011110100110000", "101100100110110000101010111111", "1001?1011100110101010101010111", "0100111111?010011111?111110110", "01000110111110001?110010001011", "110001?00001101001010101011010", "11?101101111111101011011111100", "1100111111111?010001111?101011", "000100?10001101010100000011011", "10011010101?1101?111000?010001", "100010000011010111100001110110", "0100?0011111110011000010101100", "111010110110010101001111111001", "101?10100001101001010101100011", "01001111011101010?010001000000", "1010?10011101?1001110101110101", "11010110110101?010100100000111", "010110101011100111000010011010", "000101100011001111001111001011", "1011111111110000111001?1100011", "001110001000100111011111001011", "011?11001?010001?0010001111000", "011100110011101000100111010101", "01101?101110110111100101010101", "000111000000111011011110100000", "111101111101111010111101101011", "111001?10011001010110100001111", "?01?01101111110011001010110111"};
    vector<string> columns = {"1?0?1???0?110?110?1??1?01?0111", "110??????110?11?0???1011???1?0", "??100?0???1???01??0???00?0?1?0", "1??011??1??1??0?1?0?0??1?011?0", "0?01?0???0?0????01?00?11?10??1", "111?1110??01?1??0111?111010?01", "?0??1???1??1?110?0????0?011?0?", "???0??0?1101????1???10?101???0", "01??0??1???0110?101??1?11??11?", "??1?110??00111????01??10?1?0??", "110??11?1?0001??1??0?1???10101", "???1?1?0?10?0?1?10??1??0??0?01", "?0010000???0?010000?101?0?1???", "0?101?0??11?011?1?00?1?01???10", "??0???001?110?0?00??1111?011?1", "0???11?1??1?0?0?01?10??????1?1", "11110?1??1???11?11?111????0011", "0????11?00?1?00?01100?001??11?", "?00111?101?0??0?001?1?1?0?0???", "?100?100010?111??10??11101?00?", "00???100?0001?0001?000001?001?", "??010?1????0??10?0?111???01?0?", "110?1???11??1?????1001000?0?11", "111?011?001??10??01???10?1??11", "00??111?1100?0?0?11?1??1?01111", "?1??01??11000???10110001??????", "?0001?01????1???1?0??1111101?0", "001???0??????????1?01?10?1?110", "???10100110?1?11???0??0100???1", "0???1??1101???10?101???1110?01"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100010101110010111010010101011", "111010011111001110010000111001", "010001111011011011110100110000", "101100100110110000101010111111", "100101011100110101010101010111", "010011111100100111110111110110", "010001101111100010110010001011", "110001000001101001010101011010", "110101101111111101011011111100", "110011111111100100011110101011", "000100010001101010100000011011", "100110101010110101110000010001", "100010000011010111100001110110", "010010011111110011000010101100", "111010110110010101001111111001", "101010100001101001010101100011", "010011110111010100010001000000", "101011001110101001110101110101", "110101101101010010100100000111", "010110101011100111000010011010", "000101100011001111001111001011", "101111111111000011100111100011", "001110001000100111011111001011", "011111001001000100010001111000", "011100110011101000100111010101", "011010101110110111100101010101", "000111000000111011011110100000", "111101111101111010111101101011", "111001010011001010110100001111", "101101101111110011001010110111"};
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> rows = {"100011000?00011010100000100010", "101000000000?100010?10?0010000", "010100000001101000000000100100", "000001000000000100100000000010", "0000001000?0000111010000000000", "10000?100000101000001100000101", "1000100000110001?00?0000000000", "00010001?010011100000?00000010", "?000000000010000?1000000001000", "01100000000001000101100000010?", "000110010000000010010100000100", "00011010?000010000010100000100", "00000000001010000001100?000001", "000100100100000000000010000000", "0011000?0000110010001100001000", "001?10000?00100000011010101101", "0000000000?0000100?11000000001", "011101110100000011000000100001", "00000?001000000100000000001000", "1000000010011?0000110100010?00", "01000?001001000001000000100100", "00000000000?000001100000010010", "000010010000010000001001000000", "000000000001100001100101100101", "1100100001000?0000001010?10100", "01001000001000000010000?100010", "100000001000000001001010000000", "000000000000?00000010010010101", "000001000101000000000000000011", "11000011101000000?000000000100"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100011000000011010100000100010", "101000000000010001001000010000", "010100000001101000000000100100", "000001000000000100100000000010", "000000100000000111010000000000", "100000100000101000001100000101", "100010000011000100000000000000", "000100010010011100000000000010", "000000000001000001000000001000", "011000000000010001011000000100", "000110010000000010010100000100", "000110100000010000010100000100", "000000000010100000011000000001", "000100100100000000000010000000", "001100000000110010001100001000", "001010000000100000011010101101", "000000000000000100011000000001", "011101110100000011000000100001", "000000001000000100000000001000", "100000001001100000110100010000", "010000001001000001000000100100", "000000000000000001100000010010", "000010010000010000001001000000", "000000000001100001100101100101", "110010000100000000001010010100", "010010000010000000100000100010", "100000001000000001001010000000", "000000000000000000010010010101", "000001000101000000000000000011", "110000111010000000000000000100"};
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> rows = {"0000000?000000000000000?00?010", "000000011000100000100001000000", "000000000000000000000000000000", "0000000000000000?0000000000000", "000000000000000001000000000000", "000000000000001?00000000000000", "??00000?0000100000000000000000", "000000001000000000000000010000", "0?00001?0000000000000000000000", "1000000000000000000000?0000010", "000000000000000000?00?00000000", "0000000000000?0100000100000000", "00000000000000?100010000101000", "000000000?00000000000000000000", "0?00000001000?001?0001?0000000", "000101000010000000000000000000", "000000000000100000010000000000", "00000000000000000000000000101?", "000000000000001010000000000000", "100000100000000000100000000000", "000000?00000000000000000000100", "01000000000100010000000000?000", "00000000010000000000000000000?", "0100000000000000000000000?0000", "0?0?00000000000000000000000000", "00?000000000010000001000000100", "000000000000000000000000000000", "0001110001000000?1110000000000", "?00000100000000000000000000000", "000000000001010000000000000000"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000010", "000000011000100000100001000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000001000000000000", "000000000000001000000000000000", "000000000000100000000000000000", "000000001000000000000000010000", "000000100000000000000000000000", "100000000000000000000000000010", "000000000000000000000000000000", "000000000000000100000100000000", "000000000000000100010000101000", "000000000000000000000000000000", "000000000100000010000100000000", "000101000010000000000000000000", "000000000000100000010000000000", "000000000000000000000000001010", "000000000000001010000000000000", "100000100000000000100000000000", "000000000000000000000000000100", "010000000001000100000000000000", "000000000100000000000000000000", "010000000000000000000000000000", "000000000000000000000000000000", "000000000000010000001000000100", "000000000000000000000000000000", "000111000100000001110000000000", "000000100000000000000000000000", "000000000001010000000000000000"};
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> rows = {"10110000101010011011?00101?11?", "01?011?0?1??000100110111110000", "00100110?1010110??1101?0?0??00", "010000100111000001?110?1001000", "0?0?101?101110?111100000000110", "00100111?0001?010011010?00?010", "110?10111001110100001011011100", "0100111?00010101101?0010100011", "00000?100010000101100101100010", "?10110111111100101001000000101", "0101110111101000000110?0010110", "000010101100?11011001010000000", "01001110?0100000?10100001011?1", "1??0?011111110???00??101010010", "100000000101111110110110000100", "?001011?01010?0?010001101?1100", "00011??10?110100?011?101110011", "01?111000101101?01110010100001", "11?000?00101001101?1000?01?0?1", "0?0000011001101100101?01101110", "011101?01?0001010011000000010?", "0111010?100?1010?1100010110000", "?00000101010111000?001?1010010", "1101?01001010?00110?10010?0?11", "0?11111010110?1011?0000?110?01", "001111?110?010001?1?0011100?00", "0?110?01000?000111000000000011", "000101?01000111110100110100101", "001010010110101000??01?001?1?0", "1?0011011110011010111?011?001?"};
    vector<string> columns = {"111101000010101011101000010011", "000011100110010010010000011011", "101001000000010000101100111010", "110000100010010110100110100011", "111011011000001011011100110101", "001000000001001001110110100111", "100000100100011000100001000001", "011100000111011101100001000011", "011100110001001101000110010110", "011001001000011110010010000110", "000100100000100100010000000000", "101011100111010000011110110101", "100010010001101010000001111101", "100010000110000111001101111100", "000000010100100011101001101101", "110100101000010010010011110001", "001001110001001010001011100101", "010100110110110001101101100001", "110110001110110010000010100011", "100100100111010010010001000001", "011111111101110100101011110000", "0100?0110111100011000000110011", "001110110100011111110101100000", "100010100110101100011001110110", "000110001101100101100101111000", "100011011010110010010011001011", "011000011000100111010100110101", "110011111100011001111000001100", "011001010010100111001100110101", "100011100111011001010110010110"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"101100001010100110111001010110", "010011100110000100110111110000", "001001101101011000110110100000", "010000100111000001011011001000", "000110111011100111100000000110", "001001111000110100110100000010", "110010111001110100001011011100", "010011100001010110100010100011", "000000100010000101100101100010", "110110111111100101001000000101", "010111011110100000011000010110", "000010101100111011001010000000", "010011100010000011010000101111", "111000111111100100001101010010", "100000000101111110110110000100", "000101100101000001000110111100", "000111010011010010111101110011", "010111000101101101110010100001", "111000100101001101010000010001", "000000011001101100101101101110", "011101101000010100110000000101", "011101001001101001100010110000", "000000101010111000000111010010", "110100100101010011001001000111", "011111101011011011100001110101", "001111111000100011110011100100", "001100010000000111000000000011", "000101001000111110100110100101", "001010010110101000010110010110", "110011011110011010111001110011"};
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> rows = {"0010000000000?0000?00000000000", "?000000000000000000000?0000000", "00?0000??00000000000000000?00?", "00000?000000000000000000000000", "000000000000000??0000000000000", "0000??00?000100?00000000?00?00", "0000100?000000?0000000000?0000", "000000?000100000?1000?000000?0", "00000000?000000?000000000?0000", "0000?0000000001100000000000000", "00?000000000000?0000000?000000", "00000?0?0000000?00000000000000", "0000000000?00000010?000000000?", "00100?00000000000?00000?000000", "?00?0000000000000?000000000000", "00??00??00??00?000100000?00000", "0000?000?0000000000?00?0?00001", "0000000000000000?0000000000?00", "0000?01?0000000000000?00000000", "000000010000?0?0?000000000?000", "00000000?00?00?000??0?00000000", "?00000?0000000000000?0?000000?", "000000000000000?000000000000??", "00000001?00000000?00?000000000", "000000000000000000000000000?00", "0000000000000000000000000000?0", "0?00?00000?000000?000000?0?000", "000000000000?0?000000?00000??0", "0000010000?0000000000000000000", "000?000000000000000000?000000?"};
    vector<string> columns = {"?00000010000100000000000000000", "000?0?100000000000000000000000", "000000000000000000000000000000", "00000000000000?010000000000000", "000001000000000000000000000000", "0000000000?000000000000000?000", "000000000100000000000000000000", "0000000000000000000000?0000000", "00000000?000000000?00000000000", "000000000?0000000000?0000?0010", "000?00000000000000010001000000", "00000000000000000000000?000?00", "000000000000000000000000000000", "00000000000000?000000000000000", "000000000000000000000000000000", "0000000000000?0000000000000000", "0000000000000000000000000000?0", "00000000000000000000?000000000", "100000000000010100000000000000", "00000?010000000000000000000?00", "000000000000000000100?00000000", "?00000000000000100001000000000", "000000000000000000000000000000", "00000000?000000000000000000000", "000000000000000000000000000000", "00000000?000?00000?00000000000", "000000000000000000000000000000", "?00000000100000000000000000000", "0000000000000000000?000000?000", "000000000000000000000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"001000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000100000000000000000", "000010000000000000000000000000", "000000000010000001000000000000", "000000000000000000000000000000", "000000000000001100000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000001000000000000", "001000000000000000000000000000", "000000000000000000000000000000", "001000000000000000100000000000", "000000000000000000000000000001", "000000000000000000000000000000", "000000100000000000000000000000", "000000010000000000000000000000", "000000000000000000100000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000010000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000001000000000000000000000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> rows = {"000?0?0?0000000?00000000000000", "00000010?0000???000?0000000000", "000000100000000000000000?00?00", "0000?0000?00?000000?0?00100000", "00000000?000000000000010000000", "00000000000?000000000000000000", "000?0?00000000?0000?000000?000", "00000?0000000?000000000?00000?", "0?0?10???0000?100?0000000??000", "000000000000?000?0000000000000", "0000000000?00000000?00?0000000", "00000000010?000?000?0000000000", "000001000010001000?000?00000?0", "?0?00?00000000000000?000?00000", "0000?0000000?0000000??00001010", "0010000100000?0000001??01000?0", "000000000000000000?00000000?00", "0000?00?000000?0?0000001000000", "?0000000000?00000000?000000000", "000000?000011000100001?000?00?", "0?0000000000000000000?000000?0", "00000000000000000?0?1000?00000", "000000000?00000000100000?00000", "0000000000000000?000000000000?", "00000000000?000000000010000000", "00?0?000?1?00000000000??000000", "000001000?000000000000000?0001", "00000000?0000000000000000?0000", "00000000010000000010?00000000?", "00000000000010??000?0010000?00"};
    vector<string> columns = {"00?0?0000010000000?000?010?001", "000?000?0000??00???00000000000", "0000000?000000?0?00?000000000?", "00000?00000010000000000000?0?0", "00000?000?0?000?0000000?000000", "000?000?00000000000100?0000001", "0?00?0?000000010000?0000000000", "0000000000000?00?10?0?00?00000", "00?000000000000000000000000000", "0???0001000?00000000?000000?00", "?11000000000?000?0000000000000", "?00000000?000000000100?0000000", "0000?00?00000001000001?0000000", "0001000?0000000100000010000?00", "0000?00000000?000000?000000000", "00?0?000000000?00000???0001000", "000?0?001000000?01000000000000", "000000000000000000000010000?10", "000000000000000?00000?00000000", "000000?00000100000000000001000", "00000000000000010?0?0?000000?0", "000000?0000000100000000?0000?0", "0?000000000?00000001?000000000", "?0000000?00000000000000000?000", "00000?001?00100000000?00000000", "000000000001000000?000?0010010", "000?00000000000?00?10000000000", "00000000000000000000000000?000", "00000?000000000000000000000?00", "0000??000000?000?0000000000?00"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> rows = {"000000000000?010000?0000000000", "????0000000?01?000000000000000", "0000000?011000?00000?000110000", "000000000?000000000010000001?0", "000000?00000?0000000?000110000", "0000000000000000000?00?0001000", "00000000??100?0000000?00000000", "00?0000?0000?1000100011?0000?0", "0000000000000000000?00?000000?", "0?1??00010000000000000?000?000", "0100000010000?0000?00?00?00000", "000000000000100000000000010000", "00000?000000001000000000??0000", "11000?00?000100?00000000000000", "1?0?0000000010000000000000000?", "0000000000?0?00000000000?00000", "00?00100?000000000000000000?10", "0000000?00001000000000010?0?00", "000001?00000001?000000000?0000", "010100000?0??1000010?000000000", "00000000010000000?0000000??000", "0?0000?000000?00000000000?1001", "100?00000000?00001000000000001", "0010000?00000?0??0?00000000000", "?00100000000000?00101000000100", "00000?000?1000000010?00000000?", "0?0001000?00000?000?0000000?0?", "0000010000000100?0000000000010", "?0?100100000?100?10?1000100000", "00?01010000000000?0??000000000"};
    vector<string> columns = {"??0?00?0???01?00?0???0?00?0??0", "0011?0??0000?00000000000100?10", "??0?0?01???00000??????000?011?", "?000??00?0??0?00?00?00000000??", "0?00?00??01?0?0?000?0????100??", "0?00?0??00000?1?00010?0?10??10", "?0???0?00?01?000000?00000?0???", "000??0??000000?0?01000?0??1?0?", "00?0??0??00?011?0??000?0?0?00?", "000?????0??????0?0??00000000??", "?00?0?????000??00?00???0???0?0", "0???0?010?00000????00?1?0000??", "????0?1000000?0????000???100?0", "0000???00??0?0????000?0??0?01?", "?0000?0?????0??0?000???00?0100", "0?00?00?0?0?000?000000??000???", "?00??0000?0?0??001000?000??0??", "????000??0????00?0??000?00??00", "00?0?0?0000000?001?0?0?00?????", "0?0?0?0001100?000?0?0?00?000??", "000???00?1?????00??00?0??0??1?", "00??0?0????0?0????0001000?0000", "000000?????00000?000?0????00??", "0?????00????0?00000?00??0????0", "0?010?0?0???0?0???0?0??????0?0", "00?0?000??00?0?0?00?0?0?000??0", "???00?0??0??0?1?01??0??00?0?00", "??10000??0000?00?0??1000???000", "0?0??0??0010?10?00??0??00??0?0", "???00000?0000000???00000?????0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000001000000000000000", "000000000000010000000000000000", "000000000110000000001000110000", "000000000000000000001000000100", "000000000000000000000000110000", "000000000000000000000000001000", "000000000010000000000000000000", "000000000000010001000110000000", "000000000000000000000000000000", "001000001000000000000000000000", "010000001000000000100000000000", "000000000000100000000000010000", "000000000000001000000000000000", "110000000000100000000000000000", "100100000000100000000000000000", "000000000000000000000000000000", "000001000000000000000000000010", "000000010000100000000001000000", "000001000000001000000000000000", "010100000000010000100000000000", "000000000100000000000000000000", "000000000000000000000000001001", "100000000000000001000000000001", "001000000000000000000000000000", "000100000000000000101000000100", "000000000010000000100000000000", "000001000000000000000000000000", "000001000000010000000000000010", "001100100000010001001000100000", "000010100000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> rows = {"10111111111111110?00?01?111010", "011111000101111010000111001?1?", "100?11011111100110001?0111?100", "01011101101?101?110111?11??111", "00?1110?010?100?0111111?101010", "1010111?111??10011110111100110", "11010100?0??0111111101011?1111", "11111111010111101011011?11?0?0", "01101010100011111101??11001010", "11101?00?011011011??01111111?1", "1101?1?1?101011111011111011111", "11111011?1110111101011?1011111", "11?1101011?0?11?11?11001?01101", "1101?10100111?01011011?11100?1", "10101011011111??1110111?011100", "110000101001111101111?11?11100", "100011?1?10111011110110?011101", "0?0?1?11111111?0?10110011?1110", "1101011101010001111101110?0110", "101101011110??10?1110001101110", "111000?11?01111111011111110101", "010011111?1100?1111?11100?110?", "001111011011?0?110101101111?01", "1111101?01?1000110101?10111110", "0?11110?100100?1001110011?0111", "11111111010101110?010111111111", "01100?111111111?0111011?011100", "?01?011101011?0?11111??1010010", "11111?11?111000111?11011111111", "1?10011101000?0101101111011001"};
    vector<string> columns = {"??????1?11????????????????????", "???0??????????????????????????", "??????????????????????????????", "??????????????????????????????", "???????????????????????1??????", "?????????????????????1????????", "??????????????0?????????1?????", "?????????????1????????????????", "????0????????????1?????1?????1", "???????????????????????0??????", "???????????????0??????????????", "??????????????????????????????", "???????????1??????????????????", "?????????1?????????0??????????", "?????????1????????????????????", "1?????????????????????????????", "????????1??????1??????????????", "??????????????????????????????", "??????????????????????????????", "????????0????????0????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "???????????????????0????0?????", "????????????????????????????0?", "????????????????1?????????????", "??????????????????????????????", "??????????????????????????????", "?????1?????0??????????????????", "??????????????????????????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"101111111111111100000010111010", "011111000101111010000111001010", "100011011111100110001001110100", "010111011010101011011101100111", "000111000100100001111110101010", "101011101110010011110111100110", "110101000000011111110101101111", "111111110101111010110110110000", "011010101000111111010011001010", "111010000011011011000111111101", "110101010101011111011111011111", "111110110111011110101101011111", "110110101100011011011001001101", "110101010011100101101101110001", "101010110111110011101110011100", "110000101001111101111011011100", "100011010101110111101100011101", "000010111111110001011001101110", "110101110101000111110111000110", "101101011110001001110001101110", "111000011001111111011111110101", "010011111011000111101110001100", "001111011011000110101101111001", "111110100101000110101010111110", "001111001001000100111001100111", "111111110101011100010111111111", "011000111111111001110110011100", "001001110101100011111001010010", "111110110111000111011011111111", "101001110100000101101111011001"};
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> rows = {"01100101011?1001?110?0?1111001", "1100?01?000001?1000?0?01001011", "0111000001001000?10?01011?1110", "00110111?0?1?1110110?000000001", "1?1010000?111??10000?010011010", "011100100101000101100??0010101", "1?100001001?0?0000001000001001", "0?1010101010000111100?10110101", "00100011?1110010011010100??011", "10110110?1001110110?1101100000", "1?01?1?000101111111??011101001", "0000001001001?1010000?00001110", "111110110001110001?0?011110?11", "101100010???010?0011111111?101", "??1010111001??110001111000?111", "011?101010?010101100010001?000", "101011000000?00?110100010011?0", "100000110011100101?0?1110100?1", "01100010?00?110?0?01?011001?10", "0101010110?1110101101111?01001", "0111?1110100000010?10011000100", "10?000010?0011100?101000110101", "00011011?010100000001001101010", "11110000010?010011101111101101", "01???1?10010?0110?1?0101?10001", "0101?1010001100110010?10010?11", "01101101011001101100?0000101?1", "0100011011?111?1?0111110?00010", "01?001100100011101010110?11110", "01000011001110111?101?11?00?11"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"011001010110100101100001111001", "110000100000010100000001001011", "011100000100100001000101101110", "001101110001011101100000000001", "101010000011100100000010011010", "011100100101000101100000010101", "101000010010000000001000001001", "001010101010000111100010110101", "001000110111001001101010000011", "101101100100111011001101100000", "100101000010111111100011101001", "000000100100101010000000001110", "111110110001110001000011110011", "101100010000010000111111110101", "001010111001001100011110000111", "011010101000101011000100010000", "101011000000000011010001001100", "100000110011100101000111010001", "011000100000110000010011001010", "010101011001110101101111001001", "011101110100000010010011000100", "100000010000111000101000110101", "000110110010100000001001101010", "111100000100010011101111101101", "010001010010001100100101010001", "010101010001100110010010010011", "011011010110011011000000010101", "010001101101110100111110000010", "010001100100011101010110011110", "010000110011101110101011000011"};
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> rows = {"?101??1??11?000???1001?00??110", "?1?11??1010?11??111?001????011", "111111?????0?11????010?1111??1", "1?0??0??11??110??11??11?1?110?", "?001?11?11???1110??1??1????111", "?11?11110?010001?011?10?11?1?0", "1?111???11?1?11111?1110?1?1?10", "111?1?11010111??111?1???1???11", "?11??1???1????111?1?1111?1?1??", "???1?0?1?0?10???11?111????1?1?", "?1??0?0?1?110?1??????0??11??1?", "1?1??00?0?01????111?11??1?1010", "11?1?0??0??0?0?1?111???1??11?1", "??1?1???1?1?11?0?0101?1???1?1?", "110?11?1?0?11??1??0?010?0??111", "111???11??1??011?11?110?????11", "??11111?0??00?1?1?0??0?1??1???", "1?10?11111?11????1?0??11?0111?", "0?1101?10?11111?1?1??1?101?1??", "?11??11????11?00?1?1????1?111?", "0????1011?1????0111?1?1?????11", "11111?0110?10?0?11?111?01?0??1", "??11?11?111?111?1??11?1?011??1", "?110011????111101???00?00??1??", "11?????1??1??1110??1?01?0101?0", "1??111?1???1?1?0??1?11?01?1?1?", "?1?10?00???011??1??11?1??1?11?", "?0???1??1?0??01?1??01111111?11", "1?1?11110011??1011?1?111?????0", "11111?1??01?1?1?1?1???111?1?00"};
    vector<string> columns = {"101010101010111111111011111011", "111011111111011111011011111110", "100101111101111101101110011111", "110011111111001001111101110111", "110110001111110011111111111111", "111110111111111111010111111111", "011100010000111101111011111011", "111011111010001111111111111111", "111101111111101111111111011111", "111101111101111011011110110111", "111101011110111101011101111011", "110111111011110111111011111100", "100110101110011101011111001101", "111111111100101111010011010111", "110111101111101111000100100001", "001111111101110111011110111111", "111111111111110100111100111111", "1111?1111111110100111011101111", "011111111011110010011100011111", "011110111110011010111111111011", "111101110111101111111111110111", "011010111110111110101011111111", "011001111111110111111111111111", "111110110111110111111011011111", "001111111111110111101010001111", "010111111111101110111110111011", "101111001110111111111111101111", "110110111111101111111111011111", "011110010110111111111111001100", "111010110111111110111110111101"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"110111111111000111100110011110", "111111110101111111110010111011", "111111110010111010101001111111", "110010111100110111111111111101", "100101101111011101111011101111", "011011110101000110111101110110", "101111111111011111111101111010", "111111110101111011111101111011", "111011101111011111111111110110", "111110111001011111111111011111", "111101011111011111110011111111", "101110010101000111111111111010", "111110110110101111111111111101", "111110001110111000101111111111", "110111111011111111010100000111", "111101111110101111111101011111", "101111110110011111011011101111", "111011111111100111001111001111", "001101010111111011110111011101", "111111111111110011111010111111", "011111011111111011111111111111", "111111011001010111111110100101", "101111111110111011011111011111", "111001111111111011000010011111", "111111010111111100111010010110", "111111110111111011111110101010", "111101001110111011111111111111", "101111111101001011101111111111", "111011110011111011111111111110", "111111111011111111111111111100"};
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> rows = {"?0?11??1001?11?0?0??00?0?1000?", "011??00??0??000?0????1?01?0100", "?1??10??00?????000100?0?101???", "00?0?0?0?000??0??00??000????10", "0?00?000??001??0?0100?0?10?001", "101?0000????010?0000??1?0001?0", "?1?0??00?0??10?????10?01001100", "000???00??000?00??????0?00?0?0", "1?00010??0?1001000??0?0??0??01", "00???010?000???0??010?0?10100?", "????1?010?0????00????00?01?001", "0?0???00110??0?00?00?1?????100", "00000????0?0???1?0?????0?????0", "?0010?000???00?0?0???????10??1", "??0??1??0?01?011??1110??00??0?", "?00??????000?000100???000??00?", "01??00???0?00?????00?0?0??1?01", "0?1000010?011???0???1?0?0?0?01", "?00?10?0?0??00?0????0001?0?0??", "???00?0??00???00??0???0???0011", "000010???000?????0??0???1??00?", "??10?0?1010000001?1????000?110", "????1000?000????0000??00?0?1?0", "000??000?0??00000?1???0???10?0", "???00?000?1000??10100???1?00?0", "?00?11100????0000?100?00101011", "0?0?0?01??00?0?00?0?000??00000", "0?0?0?0???010?0?101?0???0?1000", "?0???1?01?0????0100?0?1101000?", "??000000100?0?0?0??0???111?000"};
    vector<string> columns = {"0000100??00100?001000000?01000", "01100010?01000?010000010000100", "0000100010100?001101?0000?0?00", "100000000010110001000000000111", "1?0000001000101000000000010110", "000001000001000000?00011001111", "000000000001000000000100000010", "000001000000000000000000100110", "00000010000?001000100000100011", "101000000110001000101010010000", "000000000000001001000100000000", "?00010100100000001010000000000", "010001?000010?1010000110000000", "000000101000001001000000000100", "?00000?001001010100?1000010000", "100101000010000000001000000000", "01?010000101110000??1001110001", "100000000000000000000000110000", "001100010000000000010101110000", "000100111100001000000000000100", "000010000000101100101100100110", "100000010000010?00000?01001000", "010000010001000?00000000000010", "100001001000010100100000000000", "000000000000101000000000000100", "001?0010011?100110100001010100", "0?1010000010001000000101110100", "011001000010000001000110000000", "100000000010001101000?00001000", "00000000001?001001000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100111010010110000000000010000", "011000000000000000000100100100", "011010000000000000100000101010", "000000000000010000010000000010", "000000000000101010100000100001", "101000001000010000000010000100", "010000000001100000010001001100", "000100000000000000010100000010", "100001000001001000010000000001", "000010100000100000010000101000", "011010010000010000101000011001", "000000001100001000000100100100", "000001100000000110000000111000", "100100000000000000000000110001", "000011110001001111111001000100", "100000010000000010000000001000", "010000100000000000000000001101", "001000010001101001001000010001", "100010000000000010000001001000", "000000000000100000000000000011", "000010100000010010000000100000", "001000010100000011100000000110", "011010001000000000000000000100", "000100001000000000100000101010", "000000000010000010100011100010", "000011100010000000100000101011", "000100011000001000000000000000", "010001001001000110110010011000", "000001001100000010000111010000", "000000001000000000000001110000"};
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> rows = {"?00???0?0??0?0?01?10?00?000??0", "0?0???0?0?000?0?0??0???000?000", "?010?0?01???0?0????1??0000?000", "00000?0?010000000????0?00?0?0?", "0000?00?0????0?000010?10?00???", "00?0000??0?0??00?00??0?0010??0", "00000?00?0??0?0??000?0????0??0", "0010??00?0????????0??1??00??00", "???0?00??00?0?000000?0????00?0", "?0?000?000000?0?0??00?0??00000", "00??00?0000000?000??000??00?0?", "?????0??00?11??100?000?0???0??", "01?00??0??0????00?00001?0??010", "?0??0??1???001?0?1?0?1??000?00", "?000???000????0???0?00?0?01???", "???0???0000?00?0?01???00001??0", "????0???000?000??000000?0???00", "000??00?0???0?00?0??010?00???0", "1?0??0000??0000?0?0?0000??00??", "0???0?0?100?001?0?001??0?0??00", "000?0?000?0000????0??0?0??0?01", "??000??0?00?0??000??000?????01", "0101??00?0?1??0????00?00?0?0??", "0?0???0?00??00?00000??00000000", "10?000000?????0000000???1?????", "?10?????0???00??0?0?000??00000", "?0?00000000???00?0?00?0?0000?0", "??000?1?1????0??0?100??0??000?", "?0?011000?000?0?00??000?0?0?00", "??0000?00??0??0?0?0?0100?0001?"};
    vector<string> columns = {"001000000?000011000000000?0000", "010??0?0000000000000?00000?0?0", "1000000000000001000000?000010?", "00?00001010001000?000000000?01", "00000000000?000000000000?001?0", "000?00000000000000010000000?00", "000000?0001000000000?0000?0100", "0000000000?1000100000010?1000?", "0000?0000000100000?00000?00001", "00000000000??00000000??0??0000", "000000000000100000000010010?0?", "0000?000000000?000?01100000000", "001000?100000?000000?00?000000", "1?000000000000000?0000?00?0000", "0010100000000010??000000000000", "0000000?000000100?1000?0?00000", "000000000?00000000000?00000000", "00000000000001?000000000000000", "000?00?000?0000000000100?00000", "00000000?0000100?000000100?010", "0010000000000000000100??000100", "00000?000?01000000010?00000000", "100100???000000000000?0000?0?0", "0000?101100?01000000?000000000", "00000?0??000010000??0010?00000", "0000000000000?0?00010001000000", "0000000000?100000000?00??0?0?0", "0000?00000001000000000000?0000", "0?0001000000000??00000?000?00?", "000000000000010000000000000?0?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000010100000000100", "000000000100000000000000000000", "001000001000000000010000001000", "000000000100000000000000000100", "000000000000000000010010000000", "000000000000010000000000010000", "000000000000000000000000000000", "001000000000010000000100000000", "000000000000010000000000000000", "000000000000000000000100000000", "000000100000000000000000000000", "000010000001100100000000000000", "010000000000000000000010000010", "000001010000010001000101000000", "100000000000000000010000001000", "000000000001000000100000001000", "000000000000000000000000000000", "000000000000000000000100000000", "100000000000000000000000000000", "000000001000001100001000000000", "000000000000000000000000000001", "000000000000000000000000100001", "010100000001000001000000000000", "000001000000000000001000000000", "100000000000000000000000100000", "010000000001000000000000000000", "000000000000000000000000000000", "000000101000100000100000000000", "000011000000000000000000000000", "000000000000000000000100000010"};
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> rows = {"11??1?11110?1101?1?1??1?1??111", "11?1????1?11011????1?11111011?", "?1?????1???111???1010??10110??", "1??1?0?01??1??10011?1101110111", "1?11?1?0??11???1???1101?11?111", "?11?1??1110??1?1111?111110??10", "001110??111??011?011?0??1??1?1", "?0?1???1?????111111???101?1???", "1111?1??1?1????101?0??111?0??1", "????1????1110?1111????11011010", "?1??1????1??01?110?11??101??11", "????111?1011??111?1??0??00????", "1011111111111????001???10111?0", "111111??1110?1???1??11??0?1?1?", "???1?1??110?1?01111???11??11??", "?11??1????1?1100??1?11?1?1?111", "0??11?100?1??1?1??111?111??0??", "111??????011??0?1111?111?0?0?1", "?111???1?11?11?1???1?11??1111?", "10?0?101111?10110?1?0??11?1???", "111?1??111101?1?1?01??????1???", "0111?11??1??111111?10??0?111?0", "??1111??01??1?1??????1?11?11??", "???111?1111?0?01111???111??11?", "?1?1???111??11?100?1?1?0???10?", "??10????1?1?11??1?11?0?00?11??", "??11??11???????1?10??0?1?11??1", "??1??1?1?1??1111???110?1111?01", "?1?111??11?11?111??01?11??1??1", "???1?01?1?1110111??111??100??1"};
    vector<string> columns = {"?1?00?01??111????1100?11?11??0", "1?1?0?01???0???1?11011?????0??", "1??1?1???11?011?1??1011?1?0111", "????110??0111???1111??1111111?", "1????111?0101?1?1111???011?111", "???1?111????1???0???1?0?01101?", "10?10?1?1?0?10??1111?1?????111", "11?11?111011?11???1011111?1?0?", "?1??1??11??1?1???1?1111??1?1??", "?0???0??0???11??10??1???111110", "??101111?11??1?0??00?1?1??11?1", "1101?11110111????010?1111?1?1?", "1?10011100??111?0??1?1?1?111?1", "111?1010?1?11????1??1??1?1?101", "111?1??0??1?11?1??1?1??11?0?11", "?11??01?111?1?01???111?1?1?11?", "1???01?1??00??110?1111110?1011", "??1?11?????1?1?1?110111110?11?", "011101?011??11???11?1??10?1???", "??0?1??1??1111?1111???1??10??1", "1????1?1???11111?011?01?11???1", "?1?11111?1??111???????111??111", "?1?10?001??10?111110??1?????11", "11???01?10????1????11011?1??11", "1100111??111??10?1?1?????01?11", "?????1111??1110?1?1?1?1???1??1", "?1?????111?1111?0?1?1010?11??1", "?11??001??1??1?1?011????1?1?10", "11????11?11?1011111101??1110??", "?????1????00??111?111?1?10????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111010111101110101110110100111", "110100101111011100010111110111", "010100011011110011010101011000", "110100101101101001101101110111", "101101001111000110011010110111", "011111111100011111101111100010", "001110111111101110110000100111", "101110110101011111101110111110", "111101101010101101000011100101", "100010000111001111110011011010", "011011101111010110111001010111", "110111101011011110111010000100", "101111111111111000011001011110", "111111011110011011101111011110", "111111011101100111100011101101", "011111001011110001101101110111", "011111100011111100111011101000", "111101000011110111111111000001", "111111111111111101011111111110", "101011011111101101100011111001", "111110011110101011010111101111", "011101110111111111110110011100", "111111100100111001101111101101", "000111111110010111110011100111", "011111111101110100110100111100", "101011011011110010111010001111", "101101110001011111000001011111", "001101010110111110111011111001", "011111101111101111101011011011", "111110111111101111111100100001"};
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> rows = {"?111??1?11111?111?11??1??01111", "111111???0?0?1111111111??0??11", "1????1??111???1?1011??11111?11", "1??11111????1????1?0?11?1??01?", "111111??0?1?11???1?0?1??1???1?", "11?11?111?10?1??111?111?1?1111", "0111110111??11???11?1?01011??1", "11?1?11??011?11?1???1???1101?1", "1????1?1?11?10??1?1110111???1?", "11?11????1??0?0?1111?1111????1", "???0?1?1?11????11?????1111??11", "1??111??11????1?1???1??1???1??", "1?1??011011?1??1?11111?0??1?1?", "1???11??1?111??1??11011???1???", "?1??1?1???111?11111??0?1111??1", "???1?111??1111?1111???111?111?", "?0?01011110110?1111?1??111?1??", "11??111???1??1?00?011?1?1??1?1", "?11?????11111?1011?????11?0110", "?1?1?111?1???11111111?1??1111?", "111?1?1?11?11??1??1111??0???11", "1?11?10???01??1??1??1?11110111", "?11??????11?1??1??????1?111111", "1??0?1??11?01??10?1?101???1111", "???01?11????11011?1?011????11?", "?1??1??1111?1????1?111011?11??", "11???11?1??1??????11?1????1?1?", "?11?1?1???110111?11111?1?101?1", "1?111111??????11????1?1?1??111", "?01111???1??111??1?1?1??1??111"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"011100101111101110110010001111", "111111000000011111111110000011", "100001001110001010110011111011", "100111110000100001000110100010", "111111000010110001000100100010", "110110111010010011101110101111", "011111011100110001101001011001", "110101100011011010001000110101", "100001010110100010111011100010", "110110000100000011110111100001", "000001010110000110000011110011", "100111001100001010001001000100", "101000110110100101111100001010", "100011001011100100110110001000", "010010100011101111100001111001", "000101110011110111100011101110", "000010111101100111101001110100", "110011100010010000011010100101", "011000001111101011000001100110", "010101110100011111111010011110", "111010101101100100111100000011", "101101000001001001001011110111", "011000000110100100000010111111", "100001001100100100101010001111", "000010110000110110100110000110", "010010011110100001011101101100", "110001101001000000110100001010", "011010100011011101111101010101", "101111110000001100001010100111", "001111000100111001010100100111"};
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> rows = {"?0??0?0000?10????00??00?00?1?0", "100???0000000?000??0?000?0??0?", "?00?00?000?00???00??0?000?0?00", "00???00?0?0?0????00?0?00000000", "??000??000??0?0???00???0?0??0?", "00??0??0???0?0?0?00?00?????000", "?000000??0???0?00?0?00?0???0?0", "?0??0?0???0??0?0??0???00?0??00", "0?00?00?0??0?00001??0010?0????", "00???1???0?00?0?000?01?????0??", "0100???0???000000??0???000??0?", "?0?00000???0?00??0000?0?00?0?0", "?0?1?0?1??????00???0?0?00?000?", "0?0?00?0?00??000?01000?10?0000", "0?000?0001???0???00?00??000???", "00?00?0?0???000???000?0?000000", "1?00??1?00???00?0??01??0000000", "000000?0??0?00?0?00000101010??", "?00????10??1?00?000?00??0?0??0", "0?0?001?0000?000???00???00???1", "0000??000?0??00??0??0?0?0??00?", "0000?0?0000??0?0??00?????00?0?", "?000?0?0??100000??000000??00?0", "?1?0?0????0?0000?0??0?000??00?", "?0?0???0??0????0?000?00????0?0", "000?00??00?0??000?0??100?000??", "?0?0000???0?0?01?????0??0?0000", "?0010?000?000??0?0?00???0000?0", "0000????00?00?00?0000??100000?", "??10?0?00??010001001????001??1"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000001000000000000000100", "100000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000001000010000000", "000001000000000000000100000000", "010000000000000000000000000000", "000000000000000000000000000000", "000100010000000000000000000000", "000000000000000000100001000000", "000000000100000000000000000000", "000000000000000000000000000000", "100000100000000000001000000000", "000000000000000000000010101000", "000000010001000000000000000000", "000000100000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000001", "000000000010000000000000000000", "010000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000100000000", "000000000000000100000000000000", "000100000000000000000000000000", "000000000000000000000001000000", "001000000000100010010000001001"};
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> rows = {};
    vector<string> columns = {"100111110011111011111111011001", "111101011101111101111111001000", "101101001001011010111101111111", "100001110111110100100011111110", "010111110011001011110011111111", "101110101011111011111100110101", "100010101010111110010110101100", "011011010101110110111011111101", "110110100011011011101111000111", "110000000011101110001110111101", "11110011001100111101?011111111", "111111001101010011001011111111", "100110101111111111010001100101", "001100111001001111111110011010", "110110111011110100101011001110", "101010111111110110101111001100", "110110010000010001111011001110", "110011110010110010111101100111", "011011111101111111000110111010", "010111010111011100110001101011", "111111011001110000111110010011", "100101000111101111100000111100", "100011111111011011100000011110", "000101111000010111111111101011", "010100101110011010010011100100", "111011111101111100011010111111", "011010111111010110111011110111", "011011100110001000100100000101", "011101100100110011111001101010", "001011100101000101101100111010"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000011111111111111110111", "001011111100001000001111111111", "010100111100000001110001111101", "111011010001011010110010110111", "000111101101101111010111101011", "100111110110010110100101101101", "111101111011100111010111011010", "110011101110001111000101010111", "111000101001100101110001100111", "001110111111010101000001101100", "001011001011110111011110011010", "010111101111010111111011110111", "000000110111110011011101000111", "101010111111101111110111100111", "011011100001110110111011011100", "110110101111110001001001010110", "111001111101110111111110110000", "110101110001011110010010110100", "110111011110011111110110001111", "111011011101101010110101010101", "110100011100001011111111100111", "110100100000100011111110001101", "111001101110101011001011110111", "101011011111001011100110110110", "101111111111110000111101110000", "010101101110010110111001110001", "110111110110111111101001110110", "001001001111111101111111111010", "110111111010001100100111110011", "100011001101000010111111111001"};
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> rows = {};
    vector<string> columns = {"111111?11111011101111011101111", "1110?1111101111110111111110?01", "1111111111110111?1111111110111", "000111111011101111100111000110", "011011011101111111111110111010", "11?01111010011111?111110011?01", "011011111?1111111?11?011110111", "110111101111111111110111011101", "111110111100111111111?10111111", "11011111011?01111?1111101?0011", "111111011110?11111000111111?01", "1011111100110101?1111111111011", "101111011110101010111110101101", "111011001110101110?10110111111", "1111100001111001?1111101001000", "11110110101111110101101111?111", "111111111?11011111101001101111", "10?101011?111111?1011110111111", "111111111011011111101011110011", "1?1111110001001111001101111100", "110111110011111111111101101111", "011111100111011111100111101111", "111011111111111111110111111101", "1010?1100110000111110100101101", "11001011111?10111111101101111?", "01111101010110001111?111111111", "011111111010010111111101111011", "101101011101111111111110111111", "111111111111111111111011111011", "11111100111110000101011?110111"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000001111111111111111111111011", "101110000011111101111111111111", "101110111100100011111111111111", "010111011100111110001111111111", "111110001111111110110111111111", "111111111101111111111010111111", "011110100111011111011011100011", "111011011111101111010011101111", "111011011010110001111011111011", "100100111011110101110101011111", "011111101110111100111110111011", "111101010100011011011110111111", "111001011011011001111101010101", "101111010101111101011011101011", "111101011011111111111011101011", "111111110111111111111111101011", "111110111011111111110011100101", "110111110110111010011111111111", "111110111111011101010111101111", "101011111111011101111101011111", "101011011111001111001111101011", "110111111101111111110100010110", "111101011111110101111001111111", "011110000110111011011110101111", "101111111100101111111011111111", "101011010111110011111001110111", "100111111111111010110111001101", "011101111010011010111011011110", "111111010110001100101011111111", "001111111101111101111011111111"};
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> rows = {};
    vector<string> columns = {"0010000?0000?000000?0011100010", "00001001000000?000000?000??000", "001000000010000??1000000101?01", "?0?000000??00?000?00001100?000", "0000010?000??00000000000001000", "?0000?000000??10?0110001?01001", "00?00?0000010000100000000000?0", "0000000?0000000100000001000?00", "0?0000000110000000000100?0?100", "00000000?0?000000000000?01000?", "0??000?0?000000000100000000100", "000000000000000000000110000000", "00?10001000?0?0110000000010000", "00000?0000?0000000000000000000", "?000000010000?1?00?00000?0100?", "10000000100?100?00010000000001", "01?000?000?00?000000000000?010", "0001010000?00000000000000?100?", "000?000?1100000000100001000000", "0001000000?0?000?0100??0000000", "000010000?0000000001?00000?000", "00000000000010000?000?00000?00", "?10?0000001000100000000?000010", "00010?10?000010001001000?00?00", "01000000000???001?000??0000?00", "000000000000000001?000000?0001", "00000?11010010000000000000000?", "000000000010?000111000100010?0", "1000010000000?0000000000001000", "00?1000000010000100000??000001"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000011", "000000000000000000000000011100", "000000000000000000000001100000", "000000000000000000111110000000", "000000000000000011000000000000", "000000000000000100000010000001", "000000000000001000000100000000", "000000000000001001001000000000", "000000000000110000000000000010", "000000000001011000000000000000", "000000000011000000000000100100", "010000000000000000010000000000", "000000000100001000000000000010", "000000000000000000000100000000", "000000001000100000000000000100", "000000010000000000001000000000", "010000000010000000011000001000", "000000100010000000000100100000", "000001001010010000100000000000", "000000001000000010000000000010", "000000000000000000000100000000", "000010000001000000000000000000", "000110000010000000000001000000", "000100011000010000000001000000", "000000000000000000000001100000", "001000000000000000001000000000", "000000001010100100000010100001", "000001000001000000000000000000", "010000000000000000000001010100", "000000101000000000010000100010"};
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> rows = {};
    vector<string> columns = {"?10?1?1??10?11??111111??????1?", "?010?11?0010??111????1??11????", "?1??1?11100?1??1?111?11???1?0?", "?1?1???1?101???1??11?111??1011", "1?10??111???10101????????1111?", "????101?011111111?1???0???01??", "??1?11?1?1????10111?10?1??111?", "1???11?11?11?010111?1??10??011", "11?1??0111011?111??11?0??1?101", "?011??1???????1?1?11111?11?100", "?11??11?11??1?1??11?11?111?11?", "1?1??1???01??1??101?11?11??110", "??0?11?01??1?1????11???1?1?011", "?11?1?0?1?1101??1?1?111100????", "1??0??0??11??11??0??1???110111", "111?11111?101??111?11?1?1?1?11", "11??0111?1111111??10?11?1?????", "???11?10101?1?1?1?1?01????1??1", "1???11???0111111?1??1111?00???", "1??10?110??1?1??????101???011?", "1???10101?111?11110?1?10?110?1", "??1?1?00???110?1?011????1?1?1?", "???1?1?11101??1????1011??11?1?", "001??1?01?????11?1?1111?1?1111", "?1?111??00?0?111110?11??1?1?1?", "11?11?01011?11?1?1????1?011001", "1??1?111101?1010?0111????1????", "11?11?11??111?1?11?1??1??101?0", "??1??1?11??11?1?11???????1??1?", "1110?111??0?111??111111??11?1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000101000111111111111", "001000000001010111000000111111", "000001111110000011000011000011", "000110000100010100001100110100", "111010001011001101110000010101", "010101110110000110110110001011", "101010010101001010001101001111", "000100100011010000011101111111", "010111100001001011010101100001", "101100000010110010000000111001", "100010010100101001110110011101", "110100101000011001111001101100", "101010101001001010100101111111", "111000000000100101101010011010", "100111110110101110110101101110", "100001011001011100100000111001", "101010110110001111010011100101", "001001100011001110110000010111", "111010001111010011010110001010", "011101001101010000000100100111", "001001000110101111111110100011", "001111010101010111100010001010", "000101000101011001101000011111", "011000000010010011110010000000", "000001011100100110000010001001", "010100110100101010000101110110", "000111001011011100000001010011", "100001000111100010001011100100", "011101101010110110011011000011", "010011000000111000010000110001"};
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100010000000000000000000010000", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000010000000", "000000000000000000000000000000", "000000010000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000010", "000000000000000010000001000000", "000000000000000000000000000000", "000001000100000000000000000000", "000000000000000000000000000100", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000000000000000011000", "000000001000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000100100", "000000000000000000000001000000", "000000000000000100000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000100000", "000000000000000000000000000000", "000000000100000000000000000000"};
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> rows = {};
    vector<string> columns = {"001111101111101111111000101111", "?01100111111111110011111101101", "011111101110001011111100001111", "111111000010001110111111111110", "110001111111100001101010110100", "101100000110011000111111111010", "100011111011111001111101111101", "111101111110111111110111001110", "110110101110101111101110101110", "010100111010111011111111110111", "010101101111111111001011111101", "110111111111011111001111110101", "111101110101111111011011010111", "011110011101000111010111101111", "111110111010000111001111001111", "011110110110111111111111011100", "111101011110110111010111111011", "101100111101110111111111100110", "111111110111111110011111110111", "011010111110001110111110000011", "110111111011101101110010001111", "101011111010111011111101111111", "011111111110111011110101111011", "100101110100100010101111100001", "111110101011110111101110111010", "100110011010111110111101011111", "111110111110011110100111111110", "101110011101101111111111111111", "100111000101111111010101101111", "010111101011111011011111110111"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000011111111111111111111", "001111111100000000111111111111", "110001111100001111000011111111", "111111011101110111011111111111", "010011111110111001011100011111", "010110001111011000101111100011", "111110111111001010111101111101", "101001110111101011101111101101", "111111101110101011111110111100", "110101111101010111110111100101", "111110111110101100111110111111", "110111000010010011101101010001", "111110010111111011111011110001", "101110010110111110000111110101", "111110111110111101011101100111", "110101110000110011011111111111", "111111111101111011010111111111", "011111011110011011111111111000", "011000111111101111111000110110", "111011111110111111001011100011", "111110111011101111110101011011", "101011111111111111010110111111", "101111110001000111111111111111", "101111010111111111000111101111", "111111000111011111110110010111", "001110010110101101100111010111", "110101011110111101011010111110", "111111011010111011111101101111", "011011101100111111011011111111", "111111101111111001001111001001"};
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> rows = {};
    vector<string> columns = {"110110010101100011110000111010", "010000100000111011010110001011", "001111011?01101000010100001101", "000000011100010011001100110100", "000011001111101001011111100100", "10100001?101000010110010110101", "0??011000001000100101000110111", "0001100110101010100101000?1011", "010001?101010?10001001?0000111", "001101010110011001111111010100", "111011111000011101100000110110", "011110001001010010000011100100", "011001?1?111001000101010010000", "?0001001100011100?000010101111", "01111001?011111100010000101010", "0010011101111101001010?0100001", "100010100000001011001010011101", "00011011000010100101011110?011", "01001100000?00011111100?111101", "1010100000111001000100010011?1", "000110010000100100000111011011", "00?001101110010101101101000000", "101001001001?01101110001010001", "000000110010001011100111011011", "01010001010111100??10110010111", "0110101110010111001?0100?00?00", "?01011100001?011?1010111000101", "0?1011101010111011010000100100", "101001010010101101100100110010", "1111110100010011011111?1110101"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000011111111", "000000000000001111111100000111", "000000000111110000111101111011", "000000111000110001001100000101", "000111111101010010011110001111", "001011000111110110100000110011", "011000001111001000010010000010", "110100111010110101110101010111", "101101010001010000011000100010", "101001000010100101100001000100", "011001010011100000100100011000", "000011000110010101111101101101", "000101111011011001000100011100", "101100000011101001011100000010", "010101011101111101110110110011", "001010100110000010010100111011", "110000010001001010001011000100", "111001001101101010000010110111", "011010000010100110110001110111", "000001011101111011000101101101", "101011000010100010100010000001", "111001111100111101010000010001", "010101101100101001101011000000", "011001101100100000001000101001", "100111001011000010001101010111", "110010100000100011100011110111", "010100110000011010000110001100", "100111000101110111001011001011", "010110111000001101000100010110", "010110111110011111000011101001"};
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> rows = {};
    vector<string> columns = {"1?1111111111111111111111111111", "111?1111111?1111?11111?1111111", "11?111111111111111111111111111", "?1111111111111111?11111111??11", "111?11111111111111111111111111", "1?1111111111111111111?11111111", "111111?1111111111?111111111111", "1?11111?1111111111111111111111", "?1111?11111111?11??11111111111", "1?111111111111111111?111?111?1", "?111111111111111??11??11111?11", "11111111?1111111111111?111?111", "11?111111?1?1?111111?1?1111111", "111111111111111?11111111111111", "1111?11111111111111111?111?111", "11111?111111111111?11111111111", "1111111?1111111111111111111111", "111111?11111111111111111111111", "11111111??1111111111?1?1111??1", "1111?1???11111?111111111111111", "11???11111111?11111111111?1111", "11?1111111111111111111111111?1", "111111??11111111?1111111111111", "11111?111111?11111111111111?11", "1111111111?11111?1?1?1111111?1", "111?111111111111?1111111?11111", "11111?1111?1111?11111111?11111", "111?111??111111?1?1111111111?1", "1111?1111111111111111?1?1111?1", "11?11111111?1?1?1111111111?111"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000111111111111111111111111111", "111000011111111111111111111111", "111111100000111111111111111111", "111111101111000011111111111111", "111111101111111100011111111111", "011111111111111111100011111111", "111111111111111101111100011111", "111011111111011101111101101111", "111111111111011101111111110011", "111111110111111111111111110111", "111111111111111111101111111101", "111111110011101111111111111111", "111111111111111111110111111111", "111111100011111111111111111111", "011111111111111101111111111111", "111111111011011111101111111110", "101111111111100111111101111101", "000111111111011111111110111111", "011111111111111111111011111101", "111111111111111111111111111111", "101101110111111111111111110101", "101110111111111110111111111111", "111111110111101111011111110011", "111111111111111110111111111111", "111101111111110111101111111111", "111111101111111111111111111111", "110111111011111111011111111011", "100111111111111111110111110111", "111101111101011110111111110101", "111111111111111111111111111111"};
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> rows = {};
    vector<string> columns = {"????1110?1?1?00101101??10?1???", "0?1?0??0111?11?0?1?000?1001?11", "?1?00??1?11?????0??0?????1?010", "???0?1??1???1?001100010?1?1?11", "?1??010100?01?0?1???0?1101001?", "11?11?001??10??01111?1??1????0", "?000?11??11?110?00010?0???0100", "001???10??????1???10?0?01?1000", "?11?????11?1101???11?1??11111?", "00?01?0??11???00????0?0?010?1?", "?11101?1??01?0?1?10???1011??11", "??????1?1111?1??10?1?11????11?", "?1?1?10?00?1101?111?1000?0?010", "0?1?1????01?0?110???1?10?11?01", "11?1????00?1011??0?1?01??10?1?", "?011?0?0?01?00???0000?1????10?", "?1?1?001???01?11?1??1?????10?1", "?1??11??010??11?0?10???001?0??", "1???1?1??001?1011?0?10111110??", "1???????1??????0?0011?00?00101", "?0001?01?101???00??01?01011111", "11??????1???00?11???11?1?11?10", "11??1??00?111?11011100??????11", "11?110????0??0???00010?1?00000", "0011?1?01??00?1111111?1?1?????", "?0??0?0???11?????0111110?????1", "0111?0?1?01?101?1?1?00?101?101", "???1000??1?111?00???0??1?0???0", "??1??1110?0?1???10?11111010?1?", "11??0??0???10????01??0111?0?11"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000011111111", "000000000000001111111100111111", "000000001111110000011100000000", "000000010000110001101100000111", "000011100001000010000001001011", "001100100010010110100100000000", "010100100110000000000001000000", "000001000010001101001100000000", "011000001000010000010010010001", "010111111000001010010000000000", "110110001001101000001000001000", "110001110000000000110101101101", "001100011010000101111000001000", "010100011000000010000001000100", "000000000101010011111000001100", "000000100001010001000101011000", "011000000010010100101001010001", "001000101000010001100101001001", "100000100100010010111000101001", "110100000010010000010010001101", "100001100011010001100011010010", "111000000010000000010000010001", "110000000011110100000101100100", "000001111010000100001001110010", "001000000100010000010101100001", "000011000011001110011101010100", "001001101101000001010001010000", "010101000000100000011010000000", "011011001010001100110100111100", "101001001001000001001110101000"};
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> rows = {};
    vector<string> columns = {"??????????????????????????????", "??????????????????????????????", "??????0??????1????????????????", "???????????????????????1??????", "??????????????????????0???????", "??0???????????????????????????", "??????????????????????????????", "???????????0????????????0?????", "??????????????????????????????", "??????????????????????????????", "??????????????????????0???????", "????????????0????????????1????", "????????????1?????????????????", "??????????????????????????????", "?????????????1???????1????????", "??????????????????????????????", "??????????????????????????????", "????????????????????????0?????", "????????????????1??0?????????1", "?????????????????????????????1", "????????1?????????????????????", "???????????1??????1???????????", "??????????????????????????????", "????0?????????????????????????", "????????????????????????1?????", "????????????1?????????????????", "????????????????1?????????????", "????????????????????1?????????", "?????????1??1?????0??????0????", "??????????????????????????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000001", "000000000000000000000000000010", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000000000000000011010", "000000000000000000000001100000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000110000000", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000000000000000000000", "000000000000000000001000000000", "000000000000000000000000100000", "000000000000000000000000000000", "000000000000000000010000000000", "000000000000000000100000000000", "000000000000000001000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000010000010000000"};
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> rows = {"??????????????????????????????", "11111?111111111111?1111?11?11?", "??????????????????????????????", "00000000000000?0?000??000000?0", "??????????????????????????????", "11?11111111?11111?111111111?11", "??????????????????????????????", "0000?0?000?000000?0?0000000000", "??????????????????????????????", "???111111??11111111?1?111???11", "??????????????????????????????", "0??0?00000000000000?000?000?00", "??????????????????????????????", "11?11111?11?111111111111?11111", "??????????????????????????????", "0000000?000000000?00000??00??0", "??????????????????????????????", "?111??111?11?11111111111111?1?", "??????????????????????????????", "00000000??0000000000000??00?00", "??????????????????????????????", "1?111?111111111?111111?1?1111?", "??????????????????????????????", "00000000?0000000000000000?0??0", "??????????????????????????????", "11?11111?11111?111?11111111111", "??????????????????????????????", "00000?000?00?0000??000?00??000", "??????????????????????????????", "1?111?11?111?111111?1111?111?1"};
    vector<string> columns = {"?1?0?1?0?1?0???0?1?0?1?0???0?1", "?1?0?1?0?1?????0?1?0?1?????0?1", "?1?0?1?0?1?0???0?1?0?1?0???0?1", "?1?0?1?0?1?0?1???1?0???0?1?0?1", "?1?0?1???1?0?1?0?1?0???0?1???1", "?1???1?0?1?0?1?0?1?0???0?1?0?1", "?1???1?0?1?0?1?0?1?0???0?1?0?1", "?1?0?1???1?0???0?1?0???0?1?0?1", "?1?0?1???1?0?????1?0?1?0?1?0?1", "?1?0?1???1???1?????0?1?0?1????", "?1???1???1?0?1?0?1?0?1?????0?1", "?1?0?1?0???0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "???0?1?0?1?0?1???1?0?1???1????", "???0???0?1?0?1?0?1?0?1?????0?1", "?1?0?1???1?0?1?0?1?0???0?1???1", "???0?1?0?1?0?1?0?1???1?0?1?0?1", "?1?0?1?0?1?0?1???1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0???0?1???1???1", "???0?????1?0???0?1???1?0?1????", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1???1?????0?1?0?1?0?1?0?1", "?????1?0?1???1?0?1?0?1?0?1?0??", "?1?0?1?0?1?0?1?0???0?1?0?????1", "???0?1?0?????1???1?0?????1???1", "?1?0?1?0?1???1?0???0?1?0???0??", "?1?0???0?????1???1?0???0???0?1", "?????1???1?0?1???1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1???1?0?1?0?1???1?0?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "111110111111111111011110110110", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "110111111110111110111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "010111111111111111111111110111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "111111110110111111111111011111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "111101111011011111111111111011", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "101111111111111011111101011111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "110111110111110111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "111110111111011111111111111111"};
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> rows = {"??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111"};
    vector<string> columns = {"?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1", "?1?0?1?0?1?0?1?0?1?0?1?0?1?0?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> rows = {};
    vector<string> columns = {"??????????????????????????????", "000000000000000000000000000000", "111111111111111111111111111111", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "000000000000000000000000000000", "000000000000000000000000000000", "??????????????????????????????", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "000000000000000000000000000000", "111111111111111111111111111111", "000000000000000000000000000000", "111111111111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> rows = {"??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111"};
    vector<string> columns = {"??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "110011001100110011001100110011", "??????????????????????????????", "110011001100110011001100110011", "??????????????????????????????", "??????????????????????????????", "110011001100110011001100110011", "110011001100110011001100110011", "??????????????????????????????", "110011001100110011001100110011", "??????????????????????????????", "110011001100110011001100110011", "110011001100110011001100110011", "110011001100110011001100110011", "??????????????????????????????", "110011001100110011001100110011", "??????????????????????????????", "??????????????????????????????", "110011001100110011001100110011", "110011001100110011001100110011", "??????????????????????????????", "??????????????????????????????", "110011001100110011001100110011", "??????????????????????????????", "??????????????????????????????", "110011001100110011001100110011", "110011001100110011001100110011", "110011001100110011001100110011"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000111111111111111", "111111111111111111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000111111111111111", "111111111111111111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000111111111111111", "111111111111111111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000111111111111111", "111111111111111111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000111111111111111", "111111111111111111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000111111111111111", "111111111111111111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000111111111111111", "111111111111111111111111111111", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000111111111111111", "111111111111111111111111111111"};
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> rows = {};
    vector<string> columns = {"??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111", "??????????????????????????????", "000000000000000000000000000000", "??????????????????????????????", "111111111111111111111111111111"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> rows = {"1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1"};
    vector<string> columns = {"0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> rows = {"?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?"};
    vector<string> columns = {"?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> rows = {"1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1"};
    vector<string> columns = {"?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?", "?0?0?0?0?0?0?0?0?0?0?0?0?0?0?0", "0?0?0?0?0?0?0?0?0?0?0?0?0?0?0?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> rows = {"1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> rows = {};
    vector<string> columns = {"1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000", "000000000000000111111111111111", "111111111111111000000000000000"};
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> rows = {"1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1", "1?1?1?1?1?1?1?1?1?1?1?1?1?1?1?", "?1?1?1?1?1?1?1?1?1?1?1?1?1?1?1"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> rows = {"0?0?1?0?1?1?1?1?0?0?1?1?0?0?0?", "??????????????????????????????", "0?0?0?0?0?1?1?0?0?0?1?0?0?1?1?", "??????????????????????????????", "0?1?0?0?0?1?0?1?0?1?0?1?0?1?0?", "??????????????????????????????", "0?1?0?1?1?1?0?1?1?1?0?0?0?0?0?", "??????????????????????????????", "1?0?0?0?1?0?1?0?0?0?0?0?0?1?1?", "??????????????????????????????", "1?1?1?0?0?1?0?1?1?0?0?0?0?1?0?", "??????????????????????????????", "0?0?1?0?0?0?1?0?0?1?0?1?1?1?1?", "??????????????????????????????", "0?0?0?1?0?0?0?0?1?0?1?1?1?0?0?", "??????????????????????????????", "0?0?1?1?0?0?0?1?0?1?1?1?0?0?1?", "??????????????????????????????", "1?0?0?1?0?1?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "0?1?1?0?0?0?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "1?0?0?1?0?1?0?0?1?1?1?0?1?0?1?", "??????????????????????????????", "0?1?1?0?1?0?0?0?0?0?1?0?1?0?1?", "??????????????????????????????", "1?0?0?0?0?1?1?1?0?0?1?1?1?1?0?", "??????????????????????????????", "1?0?1?1?1?1?1?0?1?0?1?1?1?1?0?", "??????????????????????????????"};
    vector<string> columns = {"??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "1?0?1?0?0?0?1?1?1?0?0?0?0?1?1?", "??????????????????????????????", "??????????????????????????????", "0?0?1?1?0?1?0?0?0?0?1?0?1?0?0?", "??????????????????????????????", "1?0?1?1?0?1?0?0?1?0?0?0?0?1?0?", "1?1?0?0?1?0?1?0?0?1?1?0?0?1?1?", "1?1?1?1?0?1?0?0?0?1?0?1?0?1?1?", "0?1?1?0?1?1?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "??????????????????????????????", "1?0?0?1?1?0?0?0?0?0?0?0?1?0?1?", "??????????????????????????????", "1?1?0?0?0?0?0?1?1?1?1?1?1?1?1?", "??????????????????????????????", "1?0?0?0?0?1?1?0?1?0?1?0?1?0?1?", "??????????????????????????????", "0?0?0?1?0?1?0?1?0?0?0?1?0?0?1?", "??????????????????????????????", "??????????????????????????????", "0?0?1?1?0?0?1?0?1?1?1?1?0?0?0?", "??????????????????????????????", "??????????????????????????????", "0?0?0?1?0?0?0?1?1?1?0?1?0?0?1?", "0?0?0?0?1?1?0?0?0?1?0?1?0?1?1?", "0?1?0?0?1?0?1?0?1?1?1?1?1?0?0?", "0?0?0?0?0?0?1?1?0?0?0?1?1?1?1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000010001010101000001010000000", "000000000000000000000000000000", "000000000010100000001000001010", "000000000000000000000000000000", "001000000010001000100010001000", "000000000000000000000000000000", "001000101010001010100000000000", "000000000000000000000000000000", "100000001000100000000000001010", "000000000000000000000000000000", "101010000010001010000000001000", "000000000000000000000000000000", "000010000000100000100010101010", "000000000000000000000000000000", "000000100000000010001010100000", "000000000000000000000000000000", "000010100000001000101010000010", "000000000000000000000000000000", "100000100010100000101000001010", "000000000000000000000000000000", "001010000000100000101000001010", "000000000000000000000000000000", "100000100010000010101000100010", "000000000000000000000000000000", "001010001000000000001000100010", "000000000000000000000000000000", "100000000010101000001010101000", "000000000000000000000000000000", "100010101010100010001010101000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> rows = {"0?0?0?0?1?1?0?0?0?1?0?1?0?1?1?", "??????????????????????????????", "0?0?1?1?0?1?0?0?0?0?1?0?1?0?0?", "??????????????????????????????", "1?0?0?0?0?1?1?0?1?0?1?0?1?0?1?", "??????????????????????????????", "0?0?0?1?0?0?0?1?1?1?0?1?0?0?1?", "??????????????????????????????", "1?0?0?1?1?0?0?0?0?0?0?0?1?0?1?", "??????????????????????????????", "1?1?1?1?0?1?0?0?0?1?0?1?0?1?1?", "??????????????????????????????", "1?1?0?0?1?0?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "1?0?1?1?0?1?0?0?1?0?0?0?0?1?0?", "??????????????????????????????", "0?0?0?1?0?1?0?1?0?0?0?1?0?0?1?", "??????????????????????????????", "0?0?1?1?0?0?1?0?1?1?1?1?0?0?0?", "??????????????????????????????", "1?1?0?0?0?0?0?1?1?1?1?1?1?1?1?", "??????????????????????????????", "1?0?1?0?0?0?1?1?1?0?0?0?0?1?1?", "??????????????????????????????", "0?0?0?0?0?0?1?1?0?0?0?1?1?1?1?", "??????????????????????????????", "0?1?1?0?1?1?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "0?1?0?0?1?0?1?0?1?1?1?1?1?0?0?", "??????????????????????????????"};
    vector<string> columns = {"??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "0?1?1?0?0?0?1?0?0?1?1?0?0?1?1?", "0?1?0?1?1?1?0?1?1?1?0?0?0?0?0?", "0?1?1?0?1?0?0?0?0?0?1?0?1?0?1?", "1?0?0?0?1?0?1?0?0?0?0?0?0?1?1?", "0?0?1?0?1?1?1?1?0?0?1?1?0?0?0?", "??????????????????????????????", "??????????????????????????????", "0?0?0?0?0?1?1?0?0?0?1?0?0?1?1?", "??????????????????????????????", "0?0?0?1?0?0?0?0?1?0?1?1?1?0?0?", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "1?0?0?0?0?1?1?1?0?0?1?1?1?1?0?", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "1?1?1?0?0?1?0?1?1?0?0?0?0?1?0?", "0?0?1?1?0?0?0?1?0?1?1?1?0?0?1?", "0?0?1?0?0?0?1?0?0?1?0?1?1?1?1?", "??????????????????????????????", "1?0?1?1?1?1?1?0?1?0?1?1?1?1?0?", "1?0?0?1?0?1?1?0?0?1?1?0?0?1?1?", "1?0?0?1?0?1?0?0?1?1?1?0?1?0?1?", "0?1?0?0?0?1?0?1?0?1?0?1?0?1?0?", "??????????????????????????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000001010000000100010001010", "000000000000000000000000000000", "000010100010000000001000100000", "000000000000000000000000000000", "100000000010100010001000100010", "000000000000000000000000000000", "000000100000001010100010000010", "000000000000000000000000000000", "100000101000000000000000100010", "000000000000000000000000000000", "101010100010000000100010001010", "000000000000000000000000000000", "101000001000100000101000001010", "000000000000000000000000000000", "100010100010000010000000001000", "000000000000000000000000000000", "000000100010001000000010000010", "000000000000000000000000000000", "000010100000100010101010000000", "000000000000000000000000000000", "101000000000001010101010101010", "000000000000000000000000000000", "100010000000101010000000001010", "000000000000000000000000000000", "000000000000101000000010101010", "000000000000000000000000000000", "001010001010100000101000001010", "000000000000000000000000000000", "001000001000100010101010100000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> rows = {"0?0?1?0?1?1?1?1?0?0?1?1?0?0?0?", "??????????????????????????????", "0?0?0?0?0?1?1?0?0?0?1?0?0?1?1?", "??????????????????????????????", "0?1?0?0?0?1?0?1?0?1?0?1?0?1?0?", "??????????????????????????????", "0?1?0?1?1?1?0?1?1?1?0?0?0?0?0?", "??????????????????????????????", "1?0?0?0?1?0?1?0?0?0?0?0?0?1?1?", "??????????????????????????????", "1?1?1?0?0?1?0?1?1?0?0?0?0?1?0?", "??????????????????????????????", "0?0?1?0?0?0?1?0?0?1?0?1?1?1?1?", "??????????????????????????????", "0?0?0?1?0?0?0?0?1?0?1?1?1?0?0?", "??????????????????????????????", "0?0?1?1?0?0?0?1?0?1?1?1?0?0?1?", "??????????????????????????????", "1?0?0?1?0?1?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "0?1?1?0?0?0?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "1?0?0?1?0?1?0?0?1?1?1?0?1?0?1?", "??????????????????????????????", "0?1?1?0?1?0?0?0?0?0?1?0?1?0?1?", "??????????????????????????????", "1?0?0?0?0?1?1?1?0?0?1?1?1?1?0?", "??????????????????????????????", "1?0?1?1?1?1?1?0?1?0?1?1?1?1?0?", "??????????????????????????????"};
    vector<string> columns = {"0?0?0?0?1?1?0?0?0?1?0?1?0?1?1?", "??????????????????????????????", "0?0?1?1?0?1?0?0?0?0?1?0?1?0?0?", "??????????????????????????????", "1?0?0?0?0?1?1?0?1?0?1?0?1?0?1?", "??????????????????????????????", "0?0?0?1?0?0?0?1?1?1?0?1?0?0?1?", "??????????????????????????????", "1?0?0?1?1?0?0?0?0?0?0?0?1?0?1?", "??????????????????????????????", "1?1?1?1?0?1?0?0?0?1?0?1?0?1?1?", "??????????????????????????????", "1?1?0?0?1?0?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "1?0?1?1?0?1?0?0?1?0?0?0?0?1?0?", "??????????????????????????????", "0?0?0?1?0?1?0?1?0?0?0?1?0?0?1?", "??????????????????????????????", "0?0?1?1?0?0?1?0?1?1?1?1?0?0?0?", "??????????????????????????????", "1?1?0?0?0?0?0?1?1?1?1?1?1?1?1?", "??????????????????????????????", "1?0?1?0?0?0?1?1?1?0?0?0?0?1?1?", "??????????????????????????????", "0?0?0?0?0?0?1?1?0?0?0?1?1?1?1?", "??????????????????????????????", "0?1?1?0?1?1?1?0?0?1?1?0?0?1?1?", "??????????????????????????????", "0?1?0?0?1?0?1?0?1?1?1?1?1?0?0?", "??????????????????????????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000010001010101000001010000000", "000000000000000000000000000000", "000000000010100000001000001010", "000000000000000000000000000000", "001000000010001000100010001000", "000000000000000000000000000000", "001000101010001010100000000000", "000000000000000000000000000000", "100000001000100000000000001010", "000000000000000000000000000000", "101010000010001010000000001000", "000000000000000000000000000000", "000010000000100000100010101010", "000000000000000000000000000000", "000000100000000010001010100000", "000000000000000000000000000000", "000010100000001000101010000010", "000000000000000000000000000000", "100000100010100000101000001010", "000000000000000000000000000000", "001010000000100000101000001010", "000000000000000000000000000000", "100000100010000010101000100010", "000000000000000000000000000000", "001010001000000000001000100010", "000000000000000000000000000000", "100000000010101000001010101000", "000000000000000000000000000000", "100010101010100010001010101000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> rows = {"1?????????????????????????????", "?1????????????????????????????", "??1???????????????????????????", "???1??????????????????????????", "????1?????????????????????????", "?????0????????????????????????", "??????1???????????????????????", "???????0??????????????????????", "????????0?????????????????????", "?????????1????????????????????", "??????????0???????????????????", "???????????0??????????????????", "????????????1?????????????????", "?????????????1????????????????", "??????????????0???????????????", "???????????????0??????????????", "????????????????1?????????????", "?????????????????0????????????", "??????????????????0???????????", "???????????????????0??????????", "????????????????????1?????????", "?????????????????????0????????", "??????????????????????0???????", "???????????????????????1??????", "????????????????????????1?????", "?????????????????????????1????", "??????????????????????????1???", "???????????????????????????0??", "????????????????????????????1?", "?????????????????????????????0"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100000000000000000000000000000", "010000000000000000000000000000", "001000000000000000000000000000", "000100000000000000000000000000", "000010000000000000000000000000", "000000000000000000000000000000", "000000100000000000000000000000", "000000000000000000000000000001", "000000000000000000000000000010", "000000000100000000000000000000", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000100000000000000000", "000000000000010000000000000000", "000000000000000000000000000000", "000000000000000000000000001000", "000000000000000010000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000010000", "000000000000000000001000000000", "000000000000000000000000000000", "000000000000000000000000100000", "000000000000000000000001000000", "000000000000000000000000100000", "000000000000000000000010010000", "000000000000000000000100001000", "000000000000000000000000000000", "000000000000000000001000000010", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100000000000000000000000000000", "010000000000000000000000000000", "001000000000000000000000000000", "000100000000000000000000000000", "000010000000000000000000000000", "000000000000000000000000000000", "000000100000000000000000000000", "000000000000000000000000000001", "000000000000000000000000000010", "000000000100000000000000000000", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000100000000000000000", "000000000000010000000000000000", "000000000000000000000000000000", "000000000000000000000000001000", "000000000000000010000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000010000", "000000000000000000001000000000", "000000000000000000000000000000", "000000000000000000000000100000", "000000000000000000000001000000", "000000000000000000000000100000", "000000000000000000000010010000", "000000000000000000000100001000", "000000000000000000000000000000", "000000000000000000001000000010", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> rows = {"??0", "11?", "?01", "1?1"};
    vector<string> columns = {"1???", "?111", "0?1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"010", "110", "101", "101"};
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> rows = {"??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "?????0????????????????????????", "??????????????????????????????", "??????????????????????1???????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "???????????1??????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "?????????????1????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000010000000", "000000000000000000000000000000", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000010", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000001000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000100", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000010000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> rows = {"00??0???00?0????0?0????0??0?0?", "00??0000000?????0?0000???0?00?", "0000?0?0?00???0???000?00?0000?", "???????0?00??????00????000????", "??0??0?000?0????0?0???00?0????", "?00000??0000??0???0000????00??", "?00?0??000??0?000?00000???????", "0?0?0000????00?0??0?000?00?0?0", "0?000?00?0??0????0???0?0????0?", "?0??????00?0?0??0???00??0?000?", "00?0????0?0?00????00??00?00???", "????0?0?0?00?0000?0?00??00??00", "0?000?0?00?00??0???0?0?00??000", "?0????0000?0000?????0?0?????0?", "?00?0?0?0?000?000?0????00?000?", "??000???????0????0??0???00?0?0", "00?000?00???0?00??00?0????0?0?", "?00?000??00?00??000??0000??0?0", "??0?00000??00?00?0?00??0000??0", "??????0???0??00000000??000???0", "???00???00??000?00????0??0??00", "0???0?00??0?0000?000??????0000", "??????00??0?0?0?000?00?00????0", "00?0?000???0?????0???0??????00", "000?0???0?00?0?00??00??000??0?", "00?0?0?00??0000?0??000??000?00", "000?00?0?000??00000???????0?00", "00?00?0?0??00??000?0?0?0??000?", "00??0???0000?00????000?0???0??", "0?0?0???0??0??00??00?????0??00"};
    vector<string> columns = {"???1????01?????1???1?0???00???", "0?0??00??0?????????11??00?0?0?", "?1?1?000?????1??????1?????0??0", "?1????1??1????10?11?011?1?????", "???1???00?????0??0?1?0?10??0??", "?00?0010??????1?0?01???0???11?", "?011??????????011?0??????11???", "???0??????1????1???1100????1??", "???????1?0?0?0?????1?????0??0?", "????00?????????????1?1?11????1", "??0????11??????1?0???0??0?01??", "????????1???0??????1??1?0?0000", "111????????1?0?00?????0????0??", "?????11???0??0????????1?00?10?", "?1011???1???1?0??????00???0?00", "???1?1?0???0???????0???????0??", "??1??10?????????1?1????10?0???", "?11?????0??????????????0??0?1?", "0??0???0??001?0??0?0?????1?1?0", "10?1?0????????????0????1??100?", "??????0????0????????????0????1", "1??????????0????00????0?1??001", "???10?????0???1?1??1???????1??", "?1???1?10??????1????11??0?????", "1??0???010?001????????01??????", "??0??1??11??11?0??????????1???", "?10????1????????010?1?????????", "?00?1??0???1?????????0??1????1", "???11??????????1???1?????0????", "?1111??????0???????0????10???0"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000001010000100100", "000100000001001101000001001001", "000000100000000111000000000001", "100010100000001000010110001011", "000000000000101000000100000001", "000000000000010010000001010010", "000101000000010000000000000000", "000000001011000000000001000000", "010000000010001000000000110000", "100100000000000000000000010000", "000000010000000000000000000000", "000000000000100001000000000000", "000000000000001000100000010000", "000000000000000000000000111000", "000101000000000000000010000000", "100000110010000000000101000000", "000000100000000010000010000000", "000100000001000000000000000000", "000100000000000010000000000000", "111011011100000000000110000000", "001000010001000000000001001000", "000100000100000000000001000000", "010100000000010000000000000000", "000010000100000010010000100000", "000100000100100000000000000101", "000000100000000000100000000000", "000000100000000000010000010000", "000001010010010000100010000000", "000001000000000100000000000000", "000000000100100000001000000100"};
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> rows = {"00", "0?", "??"};
    vector<string> columns = {"001", "0??"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00", "00", "01"};
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> rows = {"1????01?????0???1??00??0??00??", "1?1???1???1?010???1?000???1???", "???101???0???1????????1?1?1??1", "10?11?011?00?????00?0?001?????", "?110???0?1?1???10???0?0???????", "1???????1?????10??0?11?1??1???", "?0??101??????01?1001?1???0????", "0?????00??10111???0???10??????", "?0?1??????10??????1??1??1?10??", "???1??1?101?10?011?01????0??0?", "??0???????00??0????0??1?0?1?0?", "???0?01110001??????1???0?0???1", "0??010?0?1?1?1?????010?111?0??", "?1???01?1?0??0?1???110??000???", "0?????0?0????1???0100??0?0????", "1????1?0?00?1?1????????0???1?1", "?10????11???11???00?100??1001?", "?00?11??00??1??1???1???1?1?11?", "0?11??11???0100???1?0???11????", "?0???1?11????0?1????1??1??0??0", "??0??000?1?10?0?1?1?10?110111?", "?11??1????????0?1?0?11???0?0??", "????0?1110?010?11?1??1?????11?", "00???00?00???0??1?????0????1??", "??1??100??0?0??1???1???0????1?", "?1?????1??01?0110?1??????0??1?", "0?11??0??111?0??01?10??01????0", "1??11?0?0?0?1???????0???1?1?10", "?1??10010?0???1??0??0111?1??0?", "??0?1?1??1??0???????1??1?0?0??"};
    vector<string> columns = {"????????0?0???????1?0??0?????0", "?????01???11???????????0???0??", "00?????0?0?0?????????1??????0?", "1?0??1??1?0?????0??????????0??", "???0?10????1??1?0??1??????0???", "?????????0??00??????????????0?", "?0????1?1???00??1?010??0???1??", "0??1?0?010????1???????10???011", "0?110?0??1???1????10?1???1?0??", "????01??1????0?????????10????0", "????0??????0?????1???1???????1", "?00????1??0?1??????????????1?1", "0????00?0?1?0??0??1??0???1??1?", "1??????11?0?1??1??????0?00????", "??1???0???1????110?????0?0?1??", "??????10?????0?????1???0??????", "????1???1????1?1?????0?????0??", "?00?1???0?????????1??11?????1?", "0??????1??1??0?1???00????1????", "???1???11??1??1?????1?????00??", "??00?0??0?1?00??????1??1????1?", "??1????1?11???0?????11????00??", "?00???????0?1?????1?????????1?", "0????0??0??1???01????????0?1??", "?1??????????????10????????????", "?1??????0??????????????0?00??0", "???1?0??1???1?1??10??0?0???110", "???1???0?1???1?0???100?1????1?", "0?1??0??0??0???0????0???01?0??", "110???????0????1?????????0?0??"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"100000100000000010000100110000", "101000100010010000100000011000", "000101000000010001001010101001", "100110011000010010000000100001", "011000000101000100100000000000", "100000001000001000001111001000", "000010100000001010010100000010", "000000000110111010001010100000", "000100010010011010100100101000", "000110101010100011001000000001", "000100100000100100001010001100", "000000111000100010010010000001", "000010000101010000001001110000", "010010101000000100111000000001", "000000010000010010100010000000", "100101000000101000100000110101", "010100011010111000011000010010", "000011000000110100010001010110", "011100111000100100100001110001", "000011011000001100001011000010", "000000000101000010101001101110", "011001000001000010001100000001", "010000111000100110100100000110", "000010000000000010000000001100", "001001000000000100010000000010", "010000010001101101100000000011", "001100000111000001010000100000", "100110000100111000010000101010", "010010010000011100000111010100", "000011110100000000001001000000"};
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> rows = {"??0", "11?", "?01", "1?1"};
    vector<string> columns = {"1???", "?111", "0?1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"010", "110", "101", "101"};
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> rows = {"???0????1??00?????????1?1?0???", "1???1???1??11?????????1????1??", "11??????0???????????????1?????", "01?????0??????0????1?0?01?????", "??????????0?0?????????????00??", "???????????0??????????1???????", "??0?1????10???1??0???????????1", "????????????0???????????0?????", "1?????????1???1?????1????????1", "????1?1?1?1??11?1??1??????????", "??????????11??????????????????", "???1??????????????1????0??????", "?0??1????1???0??0????1???????1", "0????????????1??1?????0??1????", "?0?1?????1???1??1??0?1??????10", "???1????????011???1??0?????1??", "???????????1?????????????1?1?0", "?????11???????1??????1??0?????", "???1????1???????1?1??????1?101", "??1?0????0???????1????????????", "??1??11??????????0??1?1???0???", "1??1????1????0?0???1??????1???", "??1??????????011?????????1????", "?????01??????????????????0????", "?????????????????0???????1????", "?0????????????????1??????0????", "0??????1??10?????????1????????", "?1?????1?1??110?0?????????????", "????????????1????1?????????1??", "??1??1?1??????????1??0????????"};
    vector<string> columns = {"0?0?????????????0?????????0???", "0?1????1?????????????1????????", "11???1??0????0??0???????????0?", "?00?????????00??????????0?1???", "??0?0?1?0?1??0?????????10????0", "??0???????????????00????1????0", "???0????1??1?????????0???0????", "1??0?????1?????0????0??01?????", "0????????0???????0?????0??????", "?????????0????????????0?11????", "?????0??00????00????1?????1???", "?1???0?0??0??1???????001??0???", "???011?????0??????1???1??????0", "???0????001????10?????10???1??", "?????????01????1????01????????", "???0??????0??1???1??0????????1", "??????0???1?????0???????????0?", "0??1?000?0???????0?0??????????", "??1??0????????00???11??0????1?", "?1???0?????00???1??????????1?0", "???????????1?????????0??00??0?", "??0??????????????00????1??????", "???1???????0??0????0??????????", "1???0?????0???????????????00?1", "??1?0??0??????0??????00???????", "???????0??0?????1???1???????1?", "0?????0?0?1?0??0??????????????", "??????????????????????00????1?", "??0?1??????????????0??????????", "?0???????0????0?0?????????0???"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000001000000000000010100000", "100010001001100000000010000100", "110000000000000000000000100001", "010000000000000000010000100010", "000000000000000000000001010000", "000000000000000000000010010000", "000010000100001000000000000001", "000000000000000000000000000001", "100000000010001000001000000001", "000010101010011010010000000000", "000000000111000000000000001100", "000100000000000000101100000000", "000010000100000000000100000001", "000010000000010010000000010000", "000100000100010010000100000010", "000100000000011000100000001100", "000000000001100000100000010100", "000001100000001010000100000000", "000100001000000010100000010101", "101000000000000001000000000000", "101001100000000000101010000000", "100100001000000000010000001101", "001000000000001100000000011000", "000010100100000001000000000000", "000000011000000100000000010000", "000000010000000000100000000000", "000001010010001000000100000000", "010000010100110000000000001000", "100000000000110001100000000100", "001001010000000010100000100000"};
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> rows = {};
    vector<string> columns = {"00????????????????????????0000", "1?????????????????????????????", "00????????????????????????1100", "1?????????????????????????????", "01????????????????????????0010", "1?????????????????????????????", "1?????????????????????????????", "1?????????????????????????????", "00????????????????????????0110", "1?????????????????????????????", "1?????????????????????????????", "1?????????????????????????????", "01????????????????????????0110", "1?????????????????????????????", "00????????????????????????1110", "1?????????????????????????????", "1?????????????????????????????", "01????????????????????????0000", "1?????????????????????????????", "00????????????????????????0010", "00????????????????????????1000", "00????????????????????????1010", "1?????????????????????????????", "01????????????????????????1010", "00????????????????????????0100", "1?????????????????????????????", "01????????????????????????0100", "01????????????????????????1000", "01????????????????????????1110", "1?????????????????????????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"111110000000000000001111111111", "000000000000011111110000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000111100001110000000000", "000000011001100110010000000000", "000000101010101010110000000000", "111110000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> rows = {"????"};
    vector<string> columns = {"0", "1", "0", "1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"0011"};
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000001", "000000000000000000000000000010", "000000000000000000000000000100", "000000000000000000000000001000", "000000000000000000000000010000", "000000000000000000000000100000", "000000000000000000000001000000", "000000000000000000000010000000", "000000000000000000000100000000", "000000000000000000001000000000", "000000000000000000010000000000", "000000000000000000100000000000", "000000000000000001000000000000", "000000000000000010000000000000", "000000000000000100000000000000", "000000000000001000000000000000", "000000000000010000000000000000", "000000000000100000000000000000", "000000000001000000000000000000", "000000000010000000000000000000", "000000000100000000000000000000", "000000001000000000000000000000", "000000010000000000000000000000", "000000100000000000000000000000", "000001000000000000000000000000", "000010000000000000000000000000", "000100000000000000000000000000", "001000000000000000000000000000", "010000000000000000000000000000", "100000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> rows = {"?0", "?0", "?0"};
    vector<string> columns = {"111", "000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"10", "10", "10"};
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> rows = {"??10", "1111", "1011"};
    vector<string> columns = {"011", "111", "010", "111"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"1010", "1111", "1011"};
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> rows = {"?1", "00", "00"};
    vector<string> columns = {"100", "???"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"01", "00", "00"};
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00000000000000000001000100100", "00000000000000000000000000000", "00000000000000000000000001110", "01000000001000000000000000000", "00000000000000000000000000001", "01000000000000000000000010000", "10000000000000000000000000100", "00100000000000000000000000000", "00000000000000000001000000000", "00000000000000000000000000000", "00000000000000100100000000000", "00000000000000000001000100000", "00000000001000000000000000000", "01000000000000000000000000000", "00000000000000000000001000000", "00000000001000000000000000010", "00000000000000000000010010000", "10000000000000000000000000000", "00000000000000001000000000000", "00000000000000000010100000000", "00000000000000000100000001000", "00000000000000001000000110000", "00000000000000000000000000000", "01000000000000000000000000000", "00000100100000000100000000000", "00000000000000000000000000000", "00000001000010000000000010001", "00000000000000001000000000000", "00000000000000000100000000000", "01000000000000010000000000000"};
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> rows = {"??0???????????????????????????", "11????????????????????????????", "?01???????????????????????????", "1?1???????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????"};
    vector<string> columns = {"1??????", "?111???", "0?1????", "1111111", "1111111", "1111111", "1111111", "1111111", "1111111", "1111111", "1111111", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000", "0000000"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"010000000000000000000011111111", "110000000000000000000011111111", "101000000000000000000011111111", "101000000000000000000011111111", "000000000000000000000011111111", "000000000000000000000011111111", "000000000000000000000011111111"};
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> rows = {"??", "??"};
    vector<string> columns = {"0?", "?1"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"00", "01"};
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000001", "000000000000000000000000000010", "000000000000000000000000000100", "000000000000000000000000001000", "000000000000000000000000010000", "000000000000000000000000100000", "000000000000000000000001000000", "000000000000000000000010000000", "000000000000000000000100000000", "000000000000000000001000000000", "000000000000000000010000000000", "000000000000000000100000000000", "000000000000000001000000000000", "000000000000000010000000000000", "000000000000000100000000000000", "000000000000001000000000000000", "000000000000010000000000000000", "000000000000100000000000000000", "000000000001000000000000000000", "000000000010000000000000000000", "000000000100000000000000000000", "000000001000000000000000000000", "000000010000000000000000000000", "000000100000000000000000000000", "000001000000000000000000000000", "000010000000000000000000000000", "000100000000000000000000000000", "001000000000000000000000000000", "010000000000000000000000000000", "100000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000000000000000000111", "000000000000000000000000011001", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000100000", "000000000000000000000001000000", "000000000000000000000001000000", "000000000000000000000001000000", "000000000000000000000000000000", "000000000000000000000010000000", "000000000000000000000100000000", "000000000000000000000000000000", "000000000000000000000000100000", "000000000000000000000110100000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000100000000", "000000000000000000000000000000", "000000000000000000000100000000", "000000000000000000000000000000", "000000000000000000000100000000", "000000000000000000000000000000", "000000000000000000000100000000", "000000000000000000000001000000", "000000000000000000000000000000", "000000000000000000000001000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> rows = {"0??????0????1?1????1???00?0?1?", "???01????11??????????10??????0", "??????????0?1?1???10?11?????0?", "???1???0????????????????????1?", "1?1?1???0??1??????1?00??????0?", "??01?0?0???1???1?0???1?1????0?", "0??0?010?0??10?0??00??????????", "????????0?1001???1??01????0???", "???0??1???????01????????1???0?", "0?110?0001?01???1????1?11?????", "??1??11???????10?1?????11??1??", "1?1??10?0?011???01010111???0?0", "???001????0?0???0???0?1???????", "0???10?1???0?0?1????1?11??????", "1?01???????0?0?0??0000???0?110", "101??11??????1????????1??0??1?", "??11???1?????0??0????0?????1?1", "??1?????????????0?1?1??????0??", "??????1????001?????0????1?????", "??????1101??11??0????10???????", "???110??1?11????1?01????0?0???", "??0???10??1???1?1???0?1???0???", "???1?0?0????????0?????0??1??0?", "00?0???????????1????????0?0?0?", "?0???????01????01?0?01?????1?1", "??101?0??011?10??????0????1?1?", "0?001?????????????0?0????11???", "1????0???0?1????1???1??00?1?1?", "?????101??0??????1??0???1?????", "100?????1????????????????00?00"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000101000010000000010", "000010000110000000000100000000", "000000000000101000100110000000", "000100000000000000000000000010", "101010000001000000100000000000", "000100000001000100000101000000", "000000100000100000000000000000", "000000000010010001000100000000", "000000100000000100000000100000", "001100000100100010000101100000", "001001100000001001000001100100", "101001000001100001010111000000", "000001000000000000000010000000", "000010010000000100001011000000", "100100000000000000000000000110", "101001100000010000000010000010", "001100010000000000000000000101", "001000000000000000101000000000", "000000100000010000000000100000", "000000110100110000000100000000", "000110001011000010010000000000", "000000100010001010000010000000", "000100000000000000000000010000", "000000000000000100000000000000", "000000000010000010000100000101", "001010000011010000000000001010", "000010000000000000000000011000", "100000000001000010001000001010", "000001010000000001000000100000", "100000001000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> rows = {"??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????", "??????????????????????????????"};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000001111111111111111", "000000000000110000000001111111", "000000000001000000000000000111", "000000000000000000000000000001", "000000000000000000000000000001", "000000000000000000000000000001", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000"};
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> rows = {"??0???????????????????????????", "11????????????????????????????", "?01???????????????????????????", "1?1???????????????????????????", "??????????????????????????????", "??????????????????????????????"};
    vector<string> columns = {"1?????", "?111?1", "0?1?0?", "??????", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "000000", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111", "111111"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000000000000011111111111111111", "110000000000001111111111111111", "101000000000001111111111111111", "101000000000001111111111111111", "000000000000001111111111111111", "100000000000001111111111111111"};
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> rows = {};
    vector<string> columns = {};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"010000000000000000000000000011", "000000011000000001001000000000", "000010000000010000000100000000", "000000000000000000000000000000", "000000000000000000000000000001", "000000000000000010000000000000", "000000000000000010000000000100", "000010000000000010000000000101", "000001000000000000000000001000", "000000000000000000000000000000", "000000000000000000000000000001", "000000000000000000000000001100", "000000000000000000000000000000", "000001000000000000000000010001", "000000000000000000000000100000", "000010000100010000100101010110", "000000000000000000000000010000", "000000000000000000000000000100", "000000000000000000000000000100", "000001000000000000000000001100", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000000000", "000000000000000000000000001000", "000000000000000000000000000000", "000000000000000000000000010000", "000000000000000000000000000000", "000000000000000000000000010000", "000000000000000000000000000000", "010000000000000000000000010001"};
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> rows = {"10???", "?11??"};
    vector<string> columns = {"01", "00", "??", "10", "1?"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"10001", "01100"};
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> rows = {"??", "??"};
    vector<string> columns = {"11", "11"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"11", "11"};
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> rows = {"0??1????0?1??0????1????0?1????", "??011????????1110????0??1??1??", "??1?1??????1??????1??0?10??1??", "???0????1?1011?1?1?????0?????1", "????1???1??11?1???????1?1????1", "1?????????????11???01??0??1?1?", "??1?0?0??00????1??1???1????1?1", "?110?11?1?????????1?????11????", "1???1???011??????1?????1?1????", "????????0????1???11111??????1?", "111?1???????1?????10?1?11???1?", "?1????11??111????11?1??0??????", "???0?????1?1?????????1????1?1?", "???1?????????11?1?????1???1???", "1?1???0????????????1????????1?", "???110?1????1?11?0?1???????1?1", "1??1???1??????????????11??11?1", "?????1??0???1??11?1?11???1????", "0??1???1???1?????????11?1?????", "??1?????1?????1????????1?11??1", "1110?0?11??????0?1?1?1?????01?", "1?00???????1?1?1??10???1???1?1", "??01??????????1????11??1??????", "????1????10???1???1?1?1????0?1", "???????????0?????1???1??????1?", "?1?1?1????????????1??10?????11", "???11???????11???????1????1???", "11??111?1?1???????11101??10?11", "????1???111????1?????0?1?????1", "????????1???????1??111????1??1"};
    vector<string> columns = {"?1?1????11????1???0??1???????1", "1????1?????11?1?????1??????1?1", "0011?1?1???????1?????????10??1", "1?1??11??1??0?0???1?0?????????", "??1???????????1?1??????1?0????", "?1?1?1???0?????0????0??11????1", "1?????????1????11???11??????11", "1111??11??0??1?1?1??1????1?1??", "0???????0???11??10?11???????11", "111??1??1?0?1???11????????1??1", "?????0?11?1??01?11?1?11?1????1", "??1?1?1??????1111?????1???1??0", "???1???1????????0?11??????????", "?111????????1??11?11?1?0??11?1", "??1??1??1???11???11??1???0?1?1", "1????1?1?1??0???1????1???1????", "10???????????1?????????0??1?1?", "???11?11?????1?0?????11??1????", "11??111???11?1??11?1????1??1?1", "??1???1?1?01???????1?0????????", "???????11??????????1????11????", "0???1??11??1?0?111?1???????0??", "1???1???1?0???1???????1?10??1?", "????100???1??1?1??0????0?1???1", "???1???1?111?1??????0??1011???", "?1?????????11????????????1????", "11????1??????????1???0?????0??", "1?1????1????1???1????1???1?1??", "0???????????????0111??11??1???", "1?11???11?????1?1??1??????????"};
    P8XMatrixRecovery* pObj = new P8XMatrixRecovery();
    clock_t start = clock();
    vector<string> result = pObj->solve(rows, columns);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"000100000010000000111010111111", "000110000100011100000000100101", "001010000001000101100001001111", "001000001110110101000100001001", "000010011001101010000010100001", "101010000100001100101000111110", "001100001001000101100010100101", "111001111000100000100100111011", "100011010110010001000011011100", "000000000000110001111100010010", "111011000010100010100101100010", "010000110011101001101000100000", "000010100101001100001100001110", "000110101001111010010010101001", "101001000001010000011011001010", "001110010011101110010000000101", "100101110011000100000011111111", "010111010000100110101100110101", "010110010001000100100110100000", "111001111000001101000101111001", "111000111010000001011100000011", "100011001011010100100001010111", "010101001001001000011011000000", "010010000100101000101011000001", "100001000100000001000110100010", "111101001000101010100100010011", "010110000001110100010100001100", "110011101010000100111010110011", "000010101110000100010011000001", "001011101110010110011100101101"};
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22714443&rd=14552&pm=11176
********************************************************************************
//  SRM 527 (B) 
 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <cmath> 
#include <cassert> 
#include <iostream> 
#include <sstream> 
#include <string> 
#include <vector> 
#include <queue> 
#include <set> 
#include <map> 
#include <utility> 
#include <numeric> 
#include <algorithm> 
#include <bitset> 
#include <complex> 
 
using namespace std; 
 
typedef unsigned uint; 
typedef long long Int; 
typedef vector<int> vint; 
typedef pair<int,int> pint; 
#define mp make_pair 
 
template<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; } 
template<class T> void chmin(T &t, T f) { if (t > f) t = f; } 
template<class T> void chmax(T &t, T f) { if (t < f) t = f; } 
 
namespace BM { 
  #define MAXN0 110 
  #define MAXN1 110 
  #define MAXM  10010 
  int n0, n1, m, ptr[MAXN0], next[MAXM], zu[MAXM]; 
  int to[MAXN0], fr[MAXN1], us[MAXN1], ze; 
  void init(int _n0, int _n1) { 
    n0 = _n0; n1 = _n1; m = 0; memset(ptr, ~0, n0 << 2); 
  } 
  void ae(int u, int v) { 
    next[m] = ptr[u]; ptr[u] = m; zu[m] = v; ++m; 
  } 
  int augment(int u) { 
    int i, v; 
    for (i = ptr[u]; ~i; i = next[i]) if (us[v = zu[i]] != ze) { 
      us[v] = ze; 
      if (!~fr[v] || augment(fr[v])) { 
        to[u] = v; fr[v] = u; return 1; 
      } 
    } 
    return 0; 
  } 
  int fof() { 
    memset(to, ~0, n0 << 2); memset(fr, ~0, n1 << 2); memset(us, ~0, n1 << 2); 
    int ret = 0; 
    for (ze = 0; ze < n0; ++ze) ret += augment(ze); 
    return ret; 
  } 
} 
 
int M, N; 
vector<string> S, T; 
 
struct P8XMatrixRecovery { 
   
  bool check() { 
    int x, y, z; 
    BM::init(N, N); 
    for (y = 0; y < N; ++y) for (z = 0; z < N; ++z) { 
      for (x = 0; x < M; ++x) { 
        if (S[x][y] == '?') continue; 
        if (T[x][z] == '?') continue; 
        if (S[x][y] != T[x][z]) break; 
      } 
      if (x == M) { 
        BM::ae(y, z); 
      } 
    } 
    int res = BM::fof(); 
    return (res == N); 
  } 
   
  vector <string> solve(vector <string> rows, vector <string> columns) { 
    int x, y; 
     
    M = rows.size(); 
    N = columns.size(); 
    S = T = rows; 
    for (x = 0; x < M; ++x) for (y = 0; y < N; ++y) { 
      S[x][y] = rows[x][y]; 
      T[x][y] = columns[y][x]; 
    } 
     
    for (x = 0; x < M; ++x) for (y = 0; y < N; ++y) { 
      if (S[x][y] == '?') { 
        S[x][y] = '0'; 
        if (check()) { 
          continue; 
        } 
        S[x][y] = '1'; 
      } 
    } 
     
    return S; 
     
  } 
   
};

********************************************************************************
*******************************************************************************/