/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4617
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class BalancedGame {
public:
    int result(vector<string> conflicts, int p, int q);
};

int BalancedGame::result(vector<string> conflicts, int p, int q) {
    int ret;
    return ret;
}


int test0() {
    vector<string> conflicts = {"TWWW", "LTWW", "LLTW", "LLLT"};
    int p = 20;
    int q = 20;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> conflicts = {"TWWW", "LTWW", "LLTW", "LLLT"};
    int p = 0;
    int q = 0;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> conflicts = {"TTT", "TTT", "TTT"};
    int p = 1;
    int q = 1;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> conflicts = {"TWWTTWWLWWWWLWWWLTLL", "LTWLTTLLLWLLTLWLLWLW", "LLTWLLTWWWLTLLTWLWWW", "TWLTLLWLLTWLLLWWTLLT", "TTWWTTLTWTTWTWWLTLWW", "LTWWTTWWWWWWWLLTLTLL", "LWTLWLTWLLTLWTLWTTLT", "WWLWTLLTWLWLTWLWLWWL", "LWLWLLWLTLLLWWWWLLTT", "LLLTTLWWWTWWLWWLLLLW", "LWWLTLTLWLTWLLWLWWTW", "LWTWLLWWWLLTLWWWLWTW", "WTWWTLLTLWWWTWLTLTTT", "LWWWLWTLLLWLLTWLWLLW", "LLTLLWWWLLLLWLTLLLWL", "LWLLWTLLLWWLTWWTWWWW", "WWWTTWTWWWLWWLWLTLWL", "TLLWWTTLWWLLTWWLWTWW", "WWLWLWWLTWTTTWLLLLTL", "WLLTLWTWTLLLTLWLWLWT"};
    int p = 5;
    int q = 10;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> conflicts = {"TLWWLWLTTLWWWTWWTTWLWWLLWLWLWWLWLWT", "WTWWWWTLWLLLWTTLWWWWTWWTLLWLTWLLWWW", "LLTWWWWWWTTLLLWWWLLWLLWWWLLLWWTWLTT", "LLLTWWWLTLLWWWLWWLWTTWWTLLWLLTWTLWT", "WLLLTTWTTWWLTLWTTWLLWTLWWTLWWWWLLWT", "LLLLTTLTWWLLWTLTLTTWWWWTWWWLTTWWWWW", "WTLLLWTWWLWWWLTWWLLWTWLLWLWLWLLWLLL", "TWLWTTLTLLLLLWWWLWTTWLWTLLWLWLTLWLL", "TLLTTLLWTWTLWTLWWLWWWWWWLTLWWLWLTWW", "WWTWLLWWLTWTTTWWLWWWWWLWWWLWLTLWWWT", "LWTWLWLWTLTLWLWWWLWTLTWWWWWLWLTWLLL", "LWWLWWLWWTWTLWWWWLLWTWLLWLLWLTWLWTT", "LLWLTLLWLTLWTTLTLLLLWWTLLLLWTWLTLTT", "TTWLWTWLTTWLTTWLWTLLLWWWWWWTLTWWTWL", "LTLWLWTLWLLLWLTTLWTLLLWLTLWWWTTLLLL", "LWLLTTLLLLLLTWTTLWLLWTWWLLLWWWTLTWL", "TLLLTWLWLWLLWLWWTWWLWWTWWLLWTWLLWWT", "TLWWLTWLWLWWWTLLLTLTWLLLWWWWLWLWTLW", "LLWLWTWTLLLWWWTWLWTWWLLWLLLTWLLWWLW", "WLLTWLLTLLTLWWWWWTLTWLWLTWTWLLWTWWL", "LTWTLLTLLLWTLWWLLLLLTLWLWLLWWLTTLWW", "LLWLTLLWLLTLLLWTLWWWWTTWTWWLTWTWWLW", "WLLLWLWLLWLWTLLLTWWLLTTWWWTTTWTLTWL", "WTLTLTWTLLLWWLWLLWLWWLLTWLLWLWTWTWT", "LWLWLLLWWLLLWLTWLLWTLTLLTWLWWTLWWTW", "WWWWTLWWTLLWWLWWWLWLWLLWLTTWLWLLTLL", "LLWLWLLLWWLWWLLWWLWTWLTWWTTLWLLLTTT", "WWWWLWWWLLWLLTLLLLTLLWTLLLWTWLLWLWT", "LTLWLTLLLWLWTWLLTWLWLTTWLWLLTLTWLLW", "LLLTLTWWWTWTLTTLLLWWWLLLTLWWWTWTLTW", "WWTLLLWTLWTLWLTTWWWLTTTTWWWWTLTTWWL", "LWLTWLLWWLLWTLWWWLLTTLWLLWWLLTTTLLT", "WLWWWLWLTLWLWTWTLTLLWLTTLTTWWWLWTLW", "LLTLLLWWLLWTTLWLLWWLLWLLTWTLWTLWWTW", "TLTTTLWWLTWTTWWWTLLWLLWTLWTTLLWTLLT"};
    int p = 18;
    int q = 15;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> conflicts = {"TTWLLLTLTWW", "TTTWTTLTLWW", "LTTWLLWWLTL", "WLLTLTWLWWW", "WTWWTLWLWWT", "WTWTWTLTWLW", "TWLLLWTWWWT", "WTLWWTLTTLW", "TWWLLLLTTWT", "LLTLLWLWLTT", "LLWLTLTLTTT"};
    int p = 9;
    int q = 16;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> conflicts = {"TWLLLLWWWLLWLLTLWLLTWWTTLWLLLTWWWLWLLLLWLWLLLWL", "LTWWWWWWWLWTTWWWLTTTWLWWLWTWTWLLWLWWLLLLWWWWLLW", "WLTWLWWWWLLTLLWLWWLWLLWWLTWLWWTWLTWLWWTWLLWWWLW", "WLLTLTLLLWTWLLLWWTTWLWWWLTLLWWLLLWLWWWWTWWWTTWW", "WLWWTWLLTLLLLWTWWWLTWWWTLLLLLWWLLWTWTWTTLTWWLWL", "WLLTLTWWLWWLLWWWWTWTWLTWLLTLLLWWLWWWLWTWTTWTTWL", "LLLWWLTLTWWWWLWLWWLWTWWLTWWLTTWWLWWWLWWTWWLWTLL", "LLLWWLWTLLLTLTTWLLWLWWLTWTWWTWLTLWTWWTTTWTTWTWL", "LLLWTWTWTWWWWLLLTLWLLWLWLWTTWTTLLWLWWLWWLWLLLLW", "WWWLWLLWLTLWLWWTWTWLTLWLLWLWTLWWWWWWWWLWLLTWTTW", "WLWTWLLWLWTWWWTTWTLWWLTTWTLTWTTLTTWWWLWLLWWWTTW", "LTTLWWLTLLLTWTTTWLWLLWWLTLWLWWWLWTTTWLTLLWWWLLW", "WTWWWWLWLWLLTLWLLTTWWLLLTWWTLWWWTLTTWLLTWWLWWWW", "WLWWLLWTWLLTWTLLWLWWLWLLLWWLTLLLWWWLTLLWWLLWWLL", "TLLWTLLTWLTTLWTWWLWWWLLLWWWWLLWWLWLLLWLWWLWWLWL", "WLWLLLWLWTTTWWLTWLWWLTLTLWWLLLTLWLWLWWWWLLLTTWT", "LWLLLLLWTLLLWLLLTWLWLWLLTWWTWWWWWWWWLLWLWTWWLWL", "WTLTLTLWWTTWTWWWLTLTLTLTWWLTWWWWTWLLLLTTWLWWWWW", "WTWTWLWLLLWLTLLLWWTTWLWLLLLTLLLTLTTWLWLWTLTWWTL", "TTLLTTLWWWLWLLLLLTTTWLWWWLLLWLTLLWWWWTWWLWLTLWW", "LLWWLLTLWTLWLWLWWWLLTLWWLLTTLWWLLWWTLWWWWLWLWTL", "LWWLLWLLLWWLWLWTLTWWWTWWWTTWTLLTWTWWWLTLWWLLWWL", "TLLLLTLWWLTLWWWWWWLLLLTWTTWWLLWWWLWLTWLWLLTTWLL", "TLLLTLWTLWTWWWWTWTWLLLLTLWTWWWLWLWLWTWWWWWLLLWW", "WWWWWWTLWWLTTWLWTLWLWLTWTWTWLLWWTWWLWTLWLWWLLWL", "LLTTWWLTLLTWLLLLLLWWWTTLLTWWLLLWTLWWWTLTLWLLWWL", "WTLWWTLLTWWLLLLLLWWWTTLTTLTTTWTLWLWLLTTWLWWWLWL", "WLWWWWWLTLTWTWLWTTTWTLLLLLTTLWLWLWWTWWWWLWLWWLW", "WTLLWWTTLTLLWTWWLLWLWTWLWWTWTLLLLLWTTTWWWWWLWLT", "TLLLLWTLTWTLLWWWLLWWLWWLWWLLWTWTLLWWWWLLWLLWLLL", "LWTWLLLWTLTLLWLTLLWTLWLWLWTWWLTTLLLLTTLTTLLWWWW", "LWLWWLLTWLWWLWLWLLTWWTLLLLWLWTTTLWWLWTWTWTWTLLL", "LLWWWWWWWLTLTLWLLTWWWLLWTTLWWWWWTWLTWTWWLWLLWWW", "WWTLLLLLLLTTWLLWLLTLLTWLLWWLWWWLLTWWWWLLLWWWWWT", "LLLWTLLTWLLTTLWLLWTLLLLWLLLLLLWLWLTWWLWWWLLLTWL", "WLWLLLLLLLLTTWWWLWLLTLWLWLWTTLWWTLLTWWLWLTWWWTW", "WWLLTWWLLLLLLTWLWWWLWLTTLLWLTLTLLLLLTWTTTWLTLWW", "WWLLLLLTWLWWWWLLWWLTLWLLTTTLTLTTTLWLLTLLTWLLLWL", "WWTLTTLTLWLTWWWLLTWLLTWLWWTLLWWLLWLWTWTLTLWLLTW", "LWLTTLTTLLWWTLLLWTLLLWLLLTLLLWTTLWLLTWWTWLTWLLL", "WLWLWTLLWWWWLLLWLLTWLLWLWWWWLLTLWWLWTTTLTWWLWWT", "LLWLTTLTLWLLLWWWTWWLWLWLLLLLLWWTLLWTLLWWLTWLTLW", "WLLLLLWTWTLLWWLWLLTWLWTWLWLWLWWLWLWLWWLTLLTLWLL", "WLLTLTLLWLLLLLLTLLLTWWTWWWLLWLLTWLWLTWWLWWWTWWL", "WWLTWTTTWTTWLLWTWLLWLLLWWLWLLWLWLLTLWWWWLTLLTLL", "LWWLLLWLWTTWLWLLLLTLTLWLLLLWWWLWLLLTLLTWLWWLWTW", "WLLLWWWWLLLLLWWTWLWLWWWLWWWLTWLWLTWLLWLWTLWWWLT"};
    int p = 3;
    int q = 12;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> conflicts = {"TWTWTWTLLTLWWLLLLWLWWLTWWWWLWTWLLTWWWLWLTTTLWWWL", "LTTWWWLWWTLWTLLWWLTTWLLWWWLLLWWLWWWTTLTLLTWWWLWL", "TTTWLWWTLWWTLWTWTWWWTWLLWLWLLWLWWWWLWLLWWTWWLTTW", "LLLTWWWLLWLLTLLWWLWWLLLLWLWWWLLLWLWTWWWWLTLLWWWL", "TLWLTWWLWWWWWLLLWTLLWWLWWWWTLWTLWTTLWWLTLWLLLWTL", "LLLLLTTLWWTLLWWLLLWWTWTWLLLWLWLWLWLWTWTWWTWWLLWW", "TWLLLTTWTWLWWLLTTWLLWWWWWTWWWWLTWTWLWLLWLTWWWWWW", "WLTWWWLTWWTTTTWTLTWWWWWLWTLWWTWLWTLWWTLLWLLLTTLL", "WLWWLLTLTTWTWWWWLWWWLWWTLLTWLTLLWLWWWLWLWWLTTWWL", "TTLLLLLLTTLLWTWWWWLLTWLLTTWLTLTLTLWWWWWTTWLWWLWL", "WWLWLTWTLWTWLWWTTLLTLWWWWLWTLLTWLWWWTLLWWLWWLTTL", "LLTWLWLTTWLTLTWLWLLTWLLWWWTTWWWWLWLLTLWLTTWWWLWT", "LTWTLWLTLLWWTTLWWWTWTLLLWWWLTLWLWWWLLTWTWTLLWLTW", "WWLWWLWTLTLTTTWWLTLWLWLLWLWWLLLLWLTWTWLWWLLWLLTL", "WWTWWLWLLLLLWLTLLTTWTLWLWLTLLLLTWTWWLWLWWWWTWLLW", "WLLLWWTTLLTWLLWTLWLWLWTTLWWLLTLLWLTTLLLLLTLWTLWL", "WLTLLWTWWLTLLWWWTWWWLTWLLLWWLLLTWLTWLLWLWWLLLWLT", "LWLWTWLTLLWWLTTLLTTTWLWTWWTWWTWWLLLLWLWWWLLWWWLW", "WTLLWLWLLWWWTWTWLTTWWWWLWWLWWTWTWWWWLLWTWWTLTTWW", "LTLLWLWLLWTTLLLLLTLTWWLTLTWTLLLWLLTLLWLTLWTWWTTW", "LLTWLTLLWTWLTWTWWLLLTTLWWTWLWLWWWTWLLWLLTTWWWLWL", "WWLWLLLLLLLWWLWLTWLLTTLWTLWTWWWLWTWLWLWWWWWWLWLL", "TWWWWTLLLWLWWWLTLLLWWWTWWWTWLTLWWWWTLWLWLTWLWWWT", "LLWWLLLWTWLLWWWTWTWTLLLTLTLWWWWWTWLTWWWLWLLLLLTW", "LLLLLWLLWTLLLLLWWLLWLTLWTWLLTWLTWWTLLTWWTTWWWLWW", "LLWWLWTTWTWLLWWLWLLTTWLTLTTLWWWWWWLTWLLLTLTTLWWW", "LWLLLWLWTLLTLLTLLTWLLLTWWTTWTWLLLWWWTWWWWWLWLTWW", "WWWLTLLLLWTTWLWWLLLTWTLLWWLTWLWLWTTWTLWLLWLWWWTL", "LWWLWWLLWTWLTWWWWLLWLLWLTLTLTWWWLWWWTLLWWLWWLWTW", "TLLWLLLTTWWLWWWTWTTWWLTLLLLWLTTWLWLLWLTTTWWWWLWT", "LLWWTWWLWTTLLWWWWLLWLLWLWLWLLTTTLLLLLLWWTTTTWWTW", "WWLWWLTWWWLLWWTWTLTLLWLLTLWWLLTTTLWTLWLWLWWWLTWL", "WLLLLWLLLTWWLLLLLWLWLLLTLLWLWWWTTLWWWWLTLLLLLLLL", "TLLWTLTTWWLLLWTWWWLWTTLLLLLTLLWWWTWLLLWLWTLTWTWW", "LLLLTWLWLLLWLTLTTWLTLLLWTWLTLWWLLLTLLTLWLLTLWWLW", "LTWTWLWLLLLWWLLTLWLWWWTTWTLLLWWTLWWTTWWWLTWLLLTL", "LTLLLTLLLLTTWTWWWLWWWLWLWLTTTLWWLWWTTWWLTLWWTWLW", "WWWLLLWTWLWWTLLWWWWLLWLLTWLWWWWLLWTLLTWTLWWLWTWW", "LTWLWTWWLLWLLWWWLLLWWLWLLWLLWTLWWLWLLLTLWWWLLWLL", "WWLLTLLWWTLWTLLWWLTTWLLWLWLWLTLLTWLLWTWTLLWLLWWL", "TWLWWLWLLTLTLLLWLLLWTLWLTTLWLTTWWLWWTWLWTWWWWWWW", "TTTTLTTWLLWTTWLTLWLLTLTWTWLLWLTLWTWTWLLWLTWWWLLW", "TLLWWLLWWWLLWWLWWWTTLLLWLTWWLLTLWWTLLLLLLLTWLWWW", "WLLWWLLWTLLLWLTLWLWLLLWWLTLLLLTLWTWWLWWWLLLTWTLW", "LLWLWWLTTLWLLWLTWLTLLWLWLWWLWLLWWLLWTLWWLLWLTWWL", "LWTLLWLTLWTWWWWWLLTTWLLWWLTLLWLTWTLWLTLLLWLTLTWL", "LLTLTLLWLLTLTTWLWWLTLWLTLLLTTLTLWLWTWLWLLWLWLLTL", "WWLWWLLWWWWTLWLWTLLLWWTLLLLWLTLWWLLWLLWWLLLLWWWT"};
    int p = 16;
    int q = 18;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> conflicts = {"TLLLLLTWWWWTLLWWWT", "WTTWTTLLWLLWWLTLWW", "WTTWWTLWTWLWWWWLTW", "WLLTLTWWWTWLWLLWLT", "WTLWTLWWWWLLWLLWTW", "WTTTWTWLLWTLLWWWLW", "TWWLLLTLLWTWWWLLWW", "LWLLLWWTWLLWWLLLWT", "LLTLLWWLTTWLTWTLWT", "LWLTLLLWTTTLLLLWTW", "LWWLWTTWLTTTLLWWLL", "TLLWWWLLWWTTLWTTLL", "WLLLLWLLTWWWTWLLWW", "WWLWWLLWLWWLLTTWLL", "LTLWWLWWTWLTWTTTWT", "LWWLLLWWWLLTWLTTLW", "LLTWTWLLLTWWLWLWTW", "TLLTLLLTTLWWLWTLLT"};
    int p = 18;
    int q = 6;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> conflicts = {"TTWLWLTLTTLWWWWTTLTLWLWTWLTWTWTLLL", "TTLWLWLTWTWWWWWLLLLWWTLWTWWLTTWLLL", "LWTLLLLLWWWWLWWTLWWWLWLLTTLLLWLTTL", "WLWTLWTLTLWLWWWLLWTLLTTLLWWLTLLLWL", "LWWWTWLLWWLWWWWLTWLLLLLLLTWLLWWWLW", "WLWLLTWTLLWLLWWTWWWLTWTLTTWWTWLTLW", "TWWTWLTWWLWTTWWLWLWWLWTWLLWWWWWWWT", "WTWWWTLTLLLWLLLWWLLWTWLLWLTLWWTLWL", "TLLTLWLWTWLLLLLTLTTLLWLLWWTLLWTTLW", "TTLWLWWWLTLLLWLWLLTWLTLLWTWTLLWTLW", "WLLLWLLWWWTWLWWLWTLWLWWWLWLLWLWLWW", "LLLWLWTLWWLTWWLWTWWWWLLLWLWLWWWWWL", "LLWLLWTWWWWLTWTLWWWWTLWLWLWLWWWWWW", "LLLLLLLWWLLLLTLLWTWWTWWLLTWWWLLTWW", "LLLLLLLWWWLWTWTWLWTLWLWTWWWWLLLWTT", "TWTWWTWLTLWLWWLTLLLWWWWTLLLLLLLLTL", "TWWWTLLLWWLTLLWWTTWLWWTLLTLWTLWWWW", "WWLLLLWWTWTLLTLWTTWLWWLTWWWLWWWLLW", "TWLTWLLWTTWLLLTWLLTWWWWLTWLWTWTWLT", "WLLWWWLLWLLLLLWLWWLTWWLWTLLWWLLLWL", "LLWWWTWTWWWLTTLLLLLLTWWWTLWLWWLLLW", "WTLTWLLLLTLWWLWLLLLLLTWTLLLLWLLTWL", "LWWTWTTWWWLWLLLLTWLWLLTTLWWLWWWLWL", "TLWWWWLWWWLWWWTTWTWLLTTTLTWWLLLLWT", "LTTWWTWLLLWLLWLWWLTTTWWWTTLTWWTTWL", "WLTLTTWWLTLWWTLWTLLWWWLTTTTWWLLLLL", "TLWLLLLTTLWLLLLWWLWWLWLLWTTWWLLLWW", "LWWWWLLWWTWWWLLWLWLLWWWLTLLTWTLLWW", "TTWTWTLLWWLLLLWWTLTLLLLWLLLLTWWLWL", "LTLWLLLLLWWLLWWWWLLWLWLWLWWTLTLLLL", "TLWWLWLTTLLLLWWWLLTWWWLWTWWWLWTWWW", "WWTWLTLWTTWLLTLWLWLWWTWWTWWWWWLTWT", "WWTLWWLLWWLLLLTTLWWLWLLLLWLLLWLLTT", "WWWWLLTWLLLWLLTWLLTWLWWTWWLLWWLTTT"};
    int p = 19;
    int q = 11;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> conflicts = {"TLLLTLWLWWLWLTTTWWLWWLLTWWLWWWTLLLWWWTWTLLLLTWWLW", "WTTLWWWWLWWTLWWWWWTLWLLWTWTWLLWWWWWWWTWTWWLWWWLLL", "WTTWWTLWWLWWTWWLLLLWLLWLWLLLWLLWWLWWWWTTTTWWLWTTW", "WWLTLLWLWWWLLWWLWLWLLWWLWLLTLWWTWWWTWWTTLTLWLTWLT", "TLLWTWWTWTWTWLWTTWWLLWLLLLWLLLLWTTTWWTWLWWWWLWLTL", "WLTWLTWWWWWWLWTWWTLWWWWWWTLWLWWWWWLLLTLTLLTWLLLWL", "LLWLLLTWTWLLWWLLWLWLLLTTLWWLLWWTLTLLLWLWWLLTWTWLT", "WLLWTLLTLLLLLWWTWWLWWLWWWWLWWLWTWWLLWWWLWWLLLLLTW", "LWLLLLTWTWLWLTWWLWWWWLWLWWWWWWLWTTTWWWWWLWTWLTWTW", "LLWLTLLWLTWWLWWTWLTLLLLLWLWLWWWLLWWWLWWLLTLLLLLLW", "WLLLLLWWWLTWWLLWTWLLWLTWTLTWLLLLWWTWLWTWWLLWWWLTW", "LTLWTLWWLLLTWLWWWLTLLLLWLWTLLWLTWTWLLWLWWWWWWWLWL", "WWTWLWLWWWLLTTLLWWLTLWWLWWWLLTWWLTWWWLLWLTWWWWTWW", "TLLLWLLLTLWWTTLWWWLWTLWWWWWWWWTWLWWWWTWWWLWWWWLWL", "TLLLLTWLLLWLWWTLTLWLLWWLWLWWLLTTLWLLWTTLWTWWTLWLW", "TLWWTLWTLTLLWLWTWWWLLWLTWWLWLWWLWLWTTTTWLWLTLWTLT", "LLWLTLLLWLTLLLTLTWLWTLLLLWWLLWWLWLWWTLTLLWLWWTTLL", "LLWWLTWLLWLWLLWLLTLLLWWLWWLWWTWTWWWTTWWWWLWWWLWLW", "WTWLLWLWLTWTWWLLWWTTTWWLLLLWLLWWWWTWLWLLLWWWLLLWW", "LWLWWLWLLWWWTLWWLWTTTWTLLLWLLWWLWLTTWWWWLLTLLTWLL", "LLWWWLWLLWLWWTWWTWTTTTLWWTLWWWLLLWWLWWLWLLWWWLLLL", "WWWLLLWWWWWWLWLLWLLLTTTLWLTWWTWTLWWWWWWWLWLWWWTLW", "WWLLWLTLLWTWLLLWWLLTWTTLWWWWLLWWLLLTLWLLLLLLLWLLW", "TLWWWLTLWWLLWLWTWWWWLWWTLWTLWTLWWLLWLLTLTWWWWWLLL", "LTLLWLWLLLTWLLLLWLWWLLLWTLLWLLWLWTWWWLWWTLWWLTWWT", "LLWWWTLLLWWLLLWLLLWWTWLLWTLLLTWWWTWWWTLWWLTLLLLLL", "WTWWLWLWLLTTLLLWLWWLWTLTWWTTWTTLTLLWWWTTWWLLWWWWW", "LLWTWLWLLWLWWLLLWLLWLLLWLWTTWWWLWWLTLWWWLWLLWLWLL", "LWLWWWWLLLWWWLWWWLWWLLWLWWLLTWLWLWTWTLWWLTWWTLWLW", "LWWLWLLWLLWLTLWLLTWLLTWTWTTLLTWWWWLWLLLLLWWLTTTWL", "TLWLWLLLWLWWLTTLLLLLWLLWLLTLWLTWWWTLWWWLWLWWLLWWL", "WLLTLLTTLWWTLLTWWTLWWTLLWLWWLLLTLTWLWWTTLWLTWLWWL", "WLLLTLWLTWLLWWWLLLLLWWWLLLTLWLLWTWWLWWTWWWWLWWWTW", "WLWLTLTLTLLTTLLWWLLWLLWWTTWLLLLTLTTWWWLWLLWWLWLLW", "LLLLTWWWTLTLLLWLLLTTLLWWLLWWTWTLLTTLWLWWLLTLTWWWL", "LLLTLWWWLLLWLLWTLTLTWLTLLLLTLLWWWLWTTTLWLWLWWLWLW", "LLLLLWWLLWWWLLLTTTWLLLWWLLLWTWLLLLLTTTWTWLWLLTWWT", "TTLLTTLLLLLLWTTTWLLLLLLWWTLLWWLLLLWTTTLWWWWLWLLWL", "LLTTLWWLLLTWWLTTTLWLWLWTLWTLLWLTTWLWLWTLLLWLLWWTL", "TTTTWTLWLWLLLLWLWLWLLLWWLLTLLWWTLLLLTLWTLWLWLWWWL", "WLTWLWLLWWLLWLLWWLWWWWWTTLLWWWLWLWWWLLWWTWLTTWLTW", "WLTTLWWLLTWLTWTLLWLWWLWLWWLLTLWLLWWLWLWLLTLTWLLWW", "WWLWLTWWTWWLLLLWWLLTLWWLLTWWLLLWLLTWLLLWWWTWLWWLL", "WLLLLLTWLWLLLLLTLLLWLLWLLWWWLWLTWLWLWWWLTTLTLWWLW", "TLWWWWLWWWLLLLTWLLWWLLWLWWLLTTWLLWTLWLWWTLWWTWWWW", "LLLTLWTWTWLLLLWLTWWTWLLLTWLWWTWWLLLWTWLLLWLLLTLWW", "LWTLWWLWLWWWTWLTTLWLWTWWLWLLLTLLLWLLLWLLWWLLLWTTL", "WWTWTLWTTWTLLLWWWWLWWWWWLWLWWLLLTWLWLLTLTLWWLLTTW", "LWLTWWTLLLLWLWLTWLLWWLLWTWLWLWWWLLWLTWWWLLWLLLWLT"};
    int p = 15;
    int q = 13;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> conflicts = {"TTLLWLWWTTTWTWLLLWLLLWLWTWT", "TTLWLWWWWWWLWWWTLWWLTTWLLLL", "WWTWWTLLTLTLTLLWWWLLTWWWLWL", "WLLTLWLLWWWWWTTWWTLWLWWWLTL", "LWLWTWLWTTWTLLLLLLLWLTWLWWT", "WLTLLTLWLTWWLWWTWLLTLWLWLWL", "LLWWWWTLWWWTWWTWTWWTTWTLLWL", "LLWWLLWTWWTTWTLWWLWTLTWWTTL", "TLTLTWLLTLTLLLTWWWWWWTWLLTW", "TLWLTTLLWTTTLWTWWLLLWWLWLWL", "TLTLLLLTTTTTTLLTTTLWLLTWLWT", "LWWLTLTTWTTTTTLWTWWTWWLWLTW", "TLTLWWLLWWTTTWLLWLTLLLLTWLT", "LLWTWLLTWLWTLTLWWLWLWLWLTWL", "WLWTWLTWTTWWWWTTLTLLWLLWLWW", "WTLLWTLLLLTLWLTTWWLTWLLWLWW", "WWLLWLTLLLTTLLWLTTTWWWLLTWL", "LLLTWWLWLWTLWWTLTTLLWWWLLLW", "WLWWWWLLLWWLTLWWTWTTTWLWLWT", "WWWLLTTTLWLTWWWTLWTTLWLWTLL", "WTTWWWTWLLWLWLLLLLTWTLWWLTW", "LTLLTLLTTLWLWWWWLLLLWTLLWLW", "WLLLLWTLLWTWWLWWWLWWLWTWLLW", "LWLLWLWLWLLLTWLLWWLLLWLTLLL", "TWWWLWWTWWWWLTWWTWWTWLWWTWT", "LWLTLLLTTLLTWLLLLWLWTWWWLTW", "TWWWTWWWLWTLTWLLWLTWLLLWTLT"};
    int p = 16;
    int q = 9;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> conflicts = {"TWWWLLLLLLWTLLTWLLLLWLLTTWLWWWWWWWWWWWWWWL", "LTLLLTTLLLWWWWWLTLWLWLTLWLWWWTWWWWTTWWWTWL", "LWTWLLWWLWTTLTLWTWLWWLWWLLTTLWTTWLWWLLLTTT", "LWLTWTWWWWWWWLLWLWLTWTLWWLWTTWLTLWTWTTLWLW", "WWWLTTWTTTWTLLWLTTWWWTLWLLLWWWLWTTWTWLWTLW", "WTWTTTTWTWWTWWTTLLWLTLWLLTWWLWLLWLWLWTLWWL", "WTLLLTTTLTTLLWLWWWLLTWLLTTWLLWLLLWLWTLLLWL", "WWLLTLTTLLTTLTWLWTLLLWLLWWTLWLWWWWWWTWLLWW", "WWWLTTWWTWWTTWLLLWWTWWTTLWWTWTLLLLWWWTWWTW", "WWLLTLTWLTLWWWLLLWWLWTTLWLLLWLLWLWLWWLTLWW", "LLTLLLTTLWTLWWLTTWWLLWLTWLLLWTLWLWWTWWTWWL", "TLTLTTWTTLWTTTLWLWLTLLLLWTWWLLWWWWWWLWWWLW", "WLWLWLWWTLLTTLWWLTWTWWLLWLTWTWWWWLWTLWTTTT", "WLTWWLLTLLLTWTLTLWLTWWLWLLLWLWWLLWLTWWWWLT", "TLWWLTWLWWWWLWTTTLWLLTLLWWWWWTWTTWWWWTLWWL", "LWLLWTLWWWTLLTTTWLLWWWTLWWWLWLTLWTLWTWLWLL", "WTTWTWLLWWTWWWTLTTWWLLWWWWTWWTTWLLWWLLLLWL", "WWLLTWLTLLLLTLWWTTLLLWTLWWWWTWLWLWWWWTWWWT", "WLWWLLWWLLLWLWLWLWTTTLWWWWLLLWLLLTLLTWWWLT", "WWLTLWWWTWWTTTWLLWTTWLTLWTWLWWWLLLWWLWTWTW", "LLLLLTTWLLWWLLWLWWTLTWLWTWLLLLTWWWWTWTLWLL", "WWWTTWLLLTLWLLTLWLWWLTWTLTLWLLLTLWWLWTWWWW", "WTLWWLWWTTWWWWWTLTLTWLTLLWWLLWWLWLLWWWLWTW", "TWLLLWWWTWTWWLWWLWLWLTWTWWTWTLLLLTTWTTWLLT", "TLWLWWTLWLLLLWLLLLLLTWWLTTWLWLWLWWLLLTWTWW", "LWWWWTTLLWWTWWLLLLLTLTLLTTLLTWWWLLWLWLWLWL", "WLTLWLLTLWWLTWLLTLWLWWLTLWTWLLWTWLTLLWWLWT", "LLTTLLWWTWWLLLLWLLWWWLWLWWLTWTWLWWLLWLTWWL", "LLWTLWWLLLLWTWLLLTWLWWWTLTWLTWWWTWWTWLLLLW", "LTLLLLLWTWTWLLTWTLLLWWLWWLWTLTWWWWWWWLWTTT", "LLTWWWWLWWWLLLLTTWWLTWLWLLLLLLTLWLWWLTWTWL", "LLTTLWWLWLLLLWTWLLWWLTWWWLTWLLWTWLLWTWWWWW", "LLLWTLWLWWWLLWTLWWWWLWLWLWLLTLLLTWWLLLWWLW", "LLWLTWLLWLLLWLLTWLTWLLWTLWWLLLWWLTWWTLWLLW", "LTLTLLWLLWLLLWLWLLWLLLWTWLTWLLLWLLTTWLWTLW", "LTLLTWLLLLTLTTLLLLWLTWLLWWWWTLLLWLTTWTLTWT", "LLWTLLTTLLLWWLLTWLTWLLLTWLWLLLWTWTLLTWWWWW", "LLWTWTWLTWLLLLTLWTLLTTLTTWLWWWTLWWWTLTLWWW", "LLWWLWWWLTTLTLWWWLLTWLWLLLLTWLLLLLLWLWTLTW", "LTTLTLWWLWLLTLLLWLLLLLLWTWWLWTTLLWTTLLWTTW", "LLTWWLLLTLLWTWLWLLWTWLTWLLLLWTLLWWWLLLTTTT", "WWTLLWWLLLWLTTWWWTTLWLLTLWTWLTWLLLLTLLLLTT"};
    int p = 8;
    int q = 4;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> conflicts = {"TTWLLLTLTLWWWWLTWLWLTTWLW", "TTWWLTWLWWWLWTTLLTWLWWWLL", "LLTLLLWLLLWWWTLWWWLLWWWLW", "WLWTTWLTLLWWLWLWTTLWWTWWL", "WWWTTTWWWLLWWWLTWLWTTWLWT", "WTWLTTWTLLWWTWWWLLTWWTTLL", "TLLWLLTLLWWLLTTWLLWWWWTLW", "WWWTLTWTLWWLWTWTTWWLLWWLW", "TLWWLWWWTLTWLWWWWWWLLLLWT", "WLWWWWLLWTTLLWTLLWLLWWWWL", "LLLLWLLLTTTTLLLWWLTLLTTLL", "LWLLLLWWLWTTTWWLWLLWWWLTL", "LLLWLTWLWWWTTLTWLLWLLLLLW", "LTTLLLTTLLWLWTWLWTTLLLWWL", "WTWWWLTLLTWLTLTWTWTWLWWWL", "TWLLTLLTLWLWLWLTWWWLLWLTW", "LWLTLWWTLWLLWLTLTWWTLWWLT", "WTLTWWWLLLWWWTLLLTWLWWWLT", "LLWWLTLLLWTWLTTLLLTWTWWLL", "WWWLTLLWWWWLWWLWTWLTLTLWL", "TLLLTLLWWLWLWWWWWLTWTLTWW", "TLLTLTLLWLTLWWLLLLLTWTLWL", "LLLLWTTLWLTWWLLWLLLWTWTLT", "WWWLLWWWLLWTWLLTWWWLLLWTL", "LWLWTWLLTWWWLWWLTTWWLWTWT"};
    int p = 12;
    int q = 1;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> conflicts = {"TWLTWLLWWWWLWLWLLLTWWTLLWW", "LTTLLTTLLLWLLWWLWLLTTWLLLT", "WTTWWWWWWTWWLWTLLTWTWTLLLW", "TWLTTWTLLLWWWLWWTWLLWWTTLW", "LWLTTLWWWLLLLLLLWWTWLWWTWW", "WTLLWTTLLLWWWLWLLWLWLWWTLW", "WTLTLTTLLWTWLWLWLWWTWLLWLL", "LWLWLWWTWWWWTTLLLWLWWLWWWL", "LWLWLWWLTLTWWWTLTWTLWTWLWW", "LWTWWWLLWTWWWWLWWLLLTWLLLL", "LLLLWLTLTLTTTLWTTWLWWWWLTW", "WWLLWLLLLLTTLLWLWLWTWLLLTW", "LWWLWLWTLLTWTLLWWTWTWTWWLL", "WLLWWWLTLLWWWTLTLWWTLWLWTL", "LLTLWLWWTWLLWWTLWLWWLWLWWW", "WWWLWWLWWLTWLTWTLTWWWTWWTT", "WLWTLWWWTLTLLWLWTWLLLTTLWL", "WWTLLLLLLWLWTLWTLTWLWWLWWW", "TWLWTWLWTWWLLLLLWLTWTTTLWL", "LTTWLLTLWWLTTTLLWWLTWWLWWT", "LTLLWWLLLTLLLWWLWLTLTWTTTW", "TLTLLLWWTLLWTLLTTLTLLTWTLL", "WWWTLLWLLWLWLWWLTWTWTLTLWT", "WWWTTTLLWWWWLLLLWLWLTTWTTL", "LWWWLWWLLWTTWTLTLLLLTWLTTT", "LTLLLLWWLWLLWWLTWLWTLWTWTT"};
    int p = 4;
    int q = 12;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> conflicts = {"TWWTLTWWLLWWLTWWLWWTL", "LTLLWWWTTLWLTLWWWLLLW", "LWTLWLWWLLTLTLWWLTWTW", "TWWTLTLLWLLWWWWWLTLWW", "WLLWTTWWLLLLLLTWLLWWW", "TLWTTTWLWLLLLTLWWWLLL", "LLLWLLTLLWWWTWLWTWWTL", "LTLWLWWTWWWWLLWWWWWWT", "WTWLWLWLTWWLLWTLLWWLT", "WWWWWWLLLTWWWTTLWTWTT", "LLTWWWLLLLTLWWWTWWLWL", "LWWLWWLLWLWTWLLWWWWWL", "WTTLWWTWWLLLTWLLWWWWW", "TWWLWTLWLTLWLTLWWWWTW", "LLLLTWWLTTLWWWTTWLWLL", "LLLLLLLLWWTLWLTTTLWLW", "WLWWWLTLWLLLLLLTTTLWT", "LWTTWLLLLTLLLLWWTTTWT", "LWLWLWLLLLWLLLLLWTTLL", "TWTLLWTLWTLLLTWWLLWTL", "WLLLLWWTTTWWLLWLTTWWT"};
    int p = 18;
    int q = 15;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> conflicts = {"TTWTWWWWLWWLLTLWWTTLWWWWWLWLLLLLWWWLTWWWWTLLLWTL", "TTWWWLLLLWWWWTWWTLWLWLLWTWLLLWLTWWTWTLTWWWLWLWWW", "LLTWLTWLLWLWWWWWLLWLLWWWLWWWLWWTWTWTLLWLWLLWWWWW", "TLLTLWLLLWLWLLLWWWLLWWWLWWWWTLWWLLWWTLWWWWLLLWWW", "LLWWTLWTLLTLTLLTLLTWWWWWWLWWWWWLTWWWWWLLWWWTWWTL", "LWTLWTLLLLTLTLLWLWLLWLLWTLWWWWWWTWLLWWWWLTLLWLWL", "LWLWLWTLTLWLTWLLWWWTLLLTWWLWLWWWTLLLWWLWLTLWLTWT", "LWWWTWWTWLLLLLLLLWLWWTWWLLTTLTLWTLTLWLWLWLTLTLWW", "WWWWWWTLTLTLLWLLWTWWWWLLLTTLWWWLWWWWWWLLTWLLLLLL", "LLLLWWWWWTLWLWLLWTLWLWWWLTWTTWLTWWTLTWWWTLTLTLLW", "LLWWTTLWTWTWWWWTTTWWWWWLWTTWLWWTTTWTTLWWWTTLTWLL", "WLLLWWWWWLLTWWTWWWWLLTWLLWLWTWLLWTLWWTWWLLLWLWWW", "WLLWTTTWWWLLTWTWLWTTWTLTWWTWWLLWWWLWWTLWTWLLLWWT", "TTLWWWLWLLLLLTWTTWTWLLWWLWWLWWLWTWLWLWLWTLTWTLWW", "WLLWWWWWWWLTTLTLWLWLWTWWLLLWLLLTWLWLTLLWLLLWWLLL", "LLLLTLWWWWTLLTWTWWWWWLWWTWWWWLLTWWWWWTWWLWTLWWLW", "LTWLWWLWLLTLWTLLTLLWTWLWWLLLWLTTWLLWWTLTWTWTTWLL", "TWWLWLLLTTTLLLWLWTWWLTWLLLLTLTLWLTWLTLWTLLLWWWLL", "TLLWTWLWLWLLTTLLWLTWWLLLWTWWTLWLWWWLWLLWLWWWLLWW", "WWWWLWTLLLLWTLWLLLLTWTLWWWTLWLLWTWLTWTWLWTWLLTLT", "LLWLLLWLLWLWLWLLTWLLTWWLTLWWWLWTTLTLWLWLLWTWWTLW", "LWLLLWWTLLLTTWTWLTWTLTLWWTLLTTWWWWWWWWTWTLWLWLWL", "LWLLLWWLWLLLWLLLWLWWLWTLWLTWTLLWLLTWLLWWWWLTWTWW", "LLLWLLTLWLWWTLLLLWWLWLWTWWWWLTWWLWWTWWLWWWWTLWLT", "LTWLLTLWWWLWLWWTLWLLTLLLTLTLLWTLWWLWTLWWLLLLLLLW", "WLLLWWLWTTTLLLWLWWTLWTWLWTWLWTLLWLTWLLWLWWLLLWWW", "LWLLLLWTTLTWTLWLWWLTLWTLTLTTLWTWLLTLWTLWWTWLLLWT", "WWLLLLLTWTLLLWLLWTLWLWLLWWTTWLWWLWLWWTWLLWLWTWLW", "WWWTLLWWLTWTLLWLLWTLLTTWWLWLTWLLLLLWLTLLLWWWWTWW", "WLLWLLLTLLLLWLWWWTWWWTWTLTLWLTWWWWTLLWWLWWTLWLWL", "WWLLLLLWLWLWWWWWTWLWLLWLTWTLWLTWTTTTWWLTLWWLTWLL", "WTTLWLLLWTTWLLTTTLWLTLLLWWLLWLLTWLWTWLWWLWWLWWLL", "LLLWTTTTLLTLLTLLLWLTTLWWLLWWWLTLTLWTLWLTLTLWTWWW", "LLTWLLWWLLTTLLWLWTLLWLWLLWWLWLTWWTLTLWLTWWWLWWWW", "LTLLLWWTLTLWWWLLWLLWTLTLWTTWWTTLLWTLWLTWLWWWWWTT", "WLTLLWWWLWTLLLWLLWWTWLLTLLWLLWTTTTWTWLWLWLWTLLLW", "TTWTLLLLLTTLLWTLLTLLLLWLTWLLWWLLWWLLTWLWWWLLWLLW", "LWWWLLLWLLWTTLWTTWWTWLWLWWTTTLLWLLWWLTWLLWWLWTWL", "LTLLWLWLWLLLWWWLWLWLLTLWLLWLWLWLWWTLWLTWLWWWLWWL", "LLWLWLLWWLLLLLLLTTLWWLLLLWLWWWTLTTLWLWLTWLWTWTTL", "LLLLLWWLTTLWTTWWLWWLWTLLWLLWWLWWWLWLLWWLTTLLLTWL", "TLWLLTTWLWTWLWWLTWLTLWLLWLTLLLLLTLLWLLLWTTTWWLLL", "WWWWLWWTWTTWWTWTLWLLTLWLWWLWLTLLWLLLWLLLWTTWTWWW", "WLLWTWLWWWWLWLLWTLLWLWTTWWWLLWWWLWLTWWLTWLLTLTLW", "WWLWLLWTWTTWWTLLTLWWLLLWWWWTLLTLTLLWLLWLWLTWTTLL", "LLLLLWTWWWLLLWWLLLWTTWTLWLWLTWLLLLLWWTLTTWLTTTWL", "TLLLTLLLWWWLLLWWWWLWWLLWWLLWLLWWLLTWWLLTLWLWWLTW", "WLLLWWTLWLWLTLWLWWLTLWLTLLTLLWWWLLTLLWWWWWLLWWLT"};
    int p = 0;
    int q = 9;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> conflicts = {"TWWLLLLWWWWWTWLLTWWLLWTLTLTWTLLLWTLLWWTLWWWTWTW", "LTWLWWWWLLLLLWLWWWLWWWWTWWLWLTLWWWWWWLTLWWWLWLW", "LLTWLWWWLWWWLWLWLLWTWLWTWWLWLWLWLWLTTTWWLWWTLLL", "WWLTWWTLWWLWTTWWWWWLWLTLWTLLLWWLLWTLTWLWTWWWTLL", "WLWLTWLWWWLLLTWLLLTWLWLWWWWLWWLWTLLLWWTLLWTTWTL", "WLLLLTWTTWTWWLWLWLTWWWLLLTLWWTLLLLLWWLLWWLWLLTL", "WLLTWLTTTWLWWLWTLLLLTWTWWWTTWLWWWTWWTTTTWWLTLLT", "LLLWLTTTWWWWLWWWWLTWLLLWLLWWLWWWWLLLLTLWWLTLWLW", "LWWLLTTLTWLWWWTLTWLWWLWWLTLLTTWWLLLWLWWTWWLLWTL", "LWLLLLLLLTLLWWWLLWWTLWTLWWTWWTLTWWWLLLTLTLTWWWT", "LWLWWTWLWWTLTTLWLWWWLTWTWWLLLWTWLLLLWWLTLTLLLLL", "LWLLWLLLLWWTWLLWTTWWLWLLWLTTWWLTLWWWLWLWWLLLWLW", "TWWTWLLWLLTLTTTWLTLLTWWLLLWWLTWWWWWWTWLWLLLTTLT", "LLLTTWWLLLTWTTWLWTWWLWTWWWWWWLWTLLWLWTWLLWLWWLL", "WWWLLLLLTLWWTLTTLWTWTLWLTLTWTWLTTTLLLLWWLLWLWWL", "WLLLWWTLWWLLLWTTLWTLTTTWTTWWWTLLWWTWLLWTWLLTLTW", "TLWLWLWLTWWTWLWWTLLTLTLLWWLTLLWWTLLWWLWLWTWTLWL", "LLWLWWWWLLLTTTLLWTWTWLWTTLWLTLWWLLTLTLWWWWLWWLL", "LWLLTTWTWLLLWLTTWLTLLWWWWLTLLWWLWWLWWLWTWWLWWLT", "WLTWLLWLLTLLWLLWTTWTLWLTWLLLLWLWLWLWWTTWWLTLLWL", "WLLLWLTWLWWWTWTTWLWWTLLWWTWWWLWWWWWWWWWTLWWWWTW", "LLWWLLLWWLTLLLWTTWLLWTLLLWLTWLWTWLLWWLWLTWTWLWT", "TLLTWWTWLTLWLTLTWLLWWWTWLLWWLWTLWTLLLLWLTLTWWWW", "WTTWLWLLLWTWWLWLWTLTLWLTLLTWLLLWWLLWLWWLWLLWLTT", "TLLLLWLWWLLLWLTTLTLLLWWWTLLLWLLWWWWTTLTWWTLTWWW", "WLLTLTLWTLLWWLWTLWWWTLWWWTWWTLLWLTLLLLLLWWLWWWL", "TWWWLWTLWTWTLLTLWLTWLWLTWLTWWTTWLLLLWLTWWLTWLLW", "LLLWWLTLWLWTLLLLTWWWLTLLWLLTLWLTLWWTLWLWLTWTLLL", "TWWWLLLWTLWLWLTLWTWWLLWWLTLWTLLLLWLWTWTLWLLLWWL", "WTLLLTWLTTLLTWLTWWLLWWLWWWTLWTLWWTLWLLWLTWWWLWL", "WWWLWWLLLWTWLLWWLLLWLLTWWWTWWWTWLWLWTTLLWWWLTWW", "WLLWLWLLLTLTLTTWLLWLLTWLLLLTWLLTWLLWWWWWLWLWWTW", "LLWWTWLLWLWWLWTLTWLWLLLLLWWWWLWLTWLWTLWLLWLWLLL", "TLLLWWTWWLWLLWTLWWLLLWTWLTWLLTLWLTTLLWWWTWLWWWW", "WLWTWWLWWLWLLLWTWTWWLWWWLWWLWWWWWTTWWLTLLWWLTLL", "WLTWWLLWLWWLLWWLLWLLLLWLTWWTLLLLLWLTLTLTLLWLLLW", "LLTTLLTWWWLWTLWWLTLLLLWWTWLWTWTLTWLWTLWWWWLWLWL", "LWTLLWTTLWLLLTWWWWWTLWWLWWWLLWTLWLWTWTLTLTWTWWL", "TTLWTWTWLTWWWLLLLLLTLLLLTWTWTLWLLLTWLWTWLLWWLLL", "WWLLWLTLTWTLLWLTWLTLTWWWLWLLWWWLWLWTLTLTWLLWWWW", "LLWTWLLLLTWLWWWLLLLLWTTLLLLWLTLWWTWWLWWLTWWTWWL", "LLLLLWLWLWTWWLWWTLLWLLWWTLWTWLLLLLLWLTWWLTWTWLL", "LLLLTLWTWTWWWWLWLWWTLTTWWWTLWLLWWWLLWLLWLLTLLTW", "TWTLTWTWWLWWTLWTTLLWLLLLTLLTWLWLLLWWLTLLTTWTTWT", "LLWTLWWLLLWLTLLWWLLWLWLWLLWWLWTLWLTWWLWLLLWTTWW", "TWWWTTWWTLWWWWLTLWWLTLLTLLWWLLLTWLWWLLWLLWTLLTW", "LLWWWWTLWTWLTWWLWWTWLTLTLWLWWWLLWLWLWWWLWWLTLLT"};
    int p = 15;
    int q = 15;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> conflicts = {"TTWWTWLWLWLWWLLWLLTTWWLLWWLWTLLTWWTWLWL", "TTLTTWLLWLWWLWWLLWTLWWWLLWWWLLWLLLLWWWW", "LWTWWLWWTTWWLWLWLLWWLLWWLLWWTTWLLWWWWWW", "LTLTLTLLLWTWTWWTLWLWWTWWWLWWLLLLWWLWLTW", "TTLWTWWWLWWWWLTLTLWWTWWWLLLWWLWWLWWWLWW", "LLWTLTWLWTWWLWWWLWTLLLWWTTLLTWWTLLLWTWW", "WWLWLLTWLTLWWTTLWWTWWWLTWLTWWLLWTWWLWWT", "LWLWLWLTLWLWWLLLLWWLLTWWTLWTTLWWWWLTLWT", "WLTWWLWWTWLTWLLLLWWLWWWWWLLTLWLWWLWTLLW", "LWTLLTTLLTLWLWLWLTWWLTLWTLTWTLLLTWLTLLL", "WLLTLLWWWWTWWWLWTWLLLTWTWWWWWWWLLLLWWTW", "LLLLLLLLTLLTLTTLWLTWWLLLLLWWWWWTLWWLWLW", "LWWTLWLLLWLWTLLTLLWLTWTLTWWLLLWLLWLLLWT", "WLLLWLTWWLLTWTLWLLLTWWWWWTTLLLWWWLLWTTW", "WLWLTLTWWWWTWWTWWWWTWWLWTWLWTLWLTTWWLLL", "LWLTWLWWWLLWTLLTTTLLLTLTWLLWLLWLLLWWLWW", "WWWWTWLWWWTLWWLTTWLLWWWWLLWLTLWWLWWTTLW", "WLWLWLLLLTLWWWLTLTWTLLWWWWLLWLWLTTWLWWW", "TTLWLTTLLLWTLWLWWLTWLLLLWLLWWWWWWLLLLWW", "TWLLLWLWWLWLWTTWWTLTLWLLWTTWLLWLWWLWWLL", "LLWLTWLWLWWLTLLWLWWWTTWTWWTLLWWLWWLLWWL", "LLWTLWLTLTTWLLLTLWWLTTWWLLLWWWWTLTWWWWL", "WLLLLLWLLWLWTLWWLLWWLLTLLWWWWLLWWTWLWWT", "WWLLLLTLLLTWWLLTLLWWTLWTWLTLTTWLWWLWWWW", "LWWLWTLTLTLWTLTLWLLLLWWLTTTLTLWTLTTLTLL", "LLWWWTWWWWLWLTLWWLWTLWLWTTWLLWWTLLWWLWL", "WLLLWWTLWTLLLTWWLWWTTWLTTLTTWLWLLWWTWWT", "LLLLLWLTTLLLWWLLWWLLWLLWWWTTWWLLWWWLWTW", "TWTWLTLTWTLLWWTWTLLWWLLTTWLLTWWLLTWWWLW", "WWTWWLWWLWLLWWWWWWLWLLWTWLWLLTLLLWLWWLL", "WLLWLLWLWWLLLLLLLLLLLLWLLLLWLWTTWWTLWWL", "TWWWLTLLLWWTWLWWLWLWWTLWTTWWWWTTWLLWWLL", "LWWLWWTLLTWWWLTWWTLLLWLLWWWLWWLLTLTLTTL", "LWLLLWLLWLWLLWTWLTWLLTTLTWLLTLLWWTLLWLW", "TWLWLWLWLWWLWWLLLLWWWLLWTLLLLWTWTWTLWWW", "LLLLLLWTTTLWWLLLTWWLWLWLWLTWLLWLWWWTLLL", "WLLWWTLWWWLLWTWWTLWLLLLLTWLLLLLLTLLWTLW", "LLLTLLLLWWTWLTWLWLLWLLLLWLLTWWLWTWLWWTW", "WLLLLLTTLWLLTLWLLLLWWWTLWWTLLWWWWLLWLLT"};
    int p = 2;
    int q = 9;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> conflicts = {"TWTTWLLLWTLT", "LTLWLWWLLWLL", "TWTWLTLWLTTW", "TLLTLLWWWWLL", "LWWWTWTLWTWT", "WLTWLTLTWWTW", "WLWLTWTWLWWL", "WWLLWTLTLLLL", "LWWLLLWWTWTT", "TLTLTLLWLTLL", "WWTWLTLWTWTL", "TWLWTLWWTWWT"};
    int p = 14;
    int q = 2;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> conflicts = {"TLLLTWWWLLLLWTLL", "WTWLTWLWWLWLWLTW", "WLTLLWTLWWWTTLWL", "WWWTLWLLWWTLTWTW", "TTWWTWWLTTWWWTLW", "LLLLLTWWTTWTWWWW", "LWTWLLTWWWLTWTWW", "LLWWWLLTTWLWLLWT", "WLLLTTLTTWTWTTLW", "WWLLTTLLLTWWWLTW", "WLLTLLWWTLTWLWLW", "WWTWLTTLLLLTLTWW", "LLTTLLLWTLWWTWWT", "TWWLTLTWTWLTLTWT", "WTLTWLLLWTWLLLTT", "WLWLLLLTLLLLTTTT"};
    int p = 17;
    int q = 1;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> conflicts = {"TWWWLLLLWTTLTWWWWWLWWWW", "LTWLLWLWLTWLLTWWWLTTWLL", "LLTWLWLLWWTTWLWWWWLWWLW", "LWLTTLLLLLWWWWLWLLWWWTL", "WWWTTLLWLLLTTWWWLWWLLWW", "WLLWWTTTWTTWWLTLWLLTTLL", "WWWWWTTTLTWWLWWWWWWTWTL", "WLWWLTTTWTWLLWTLLWWLWLL", "LWLWWLWLTWWWWLLLLWTLWTW", "TTLWWTTTLTLLWWLLLTWLWWL", "TLTLWTLLLWTLLWLLLWWWWWW", "WWTLTLLWLWWTWWTLWWLWWWW", "TWLLTLWWLLWLTLTLWTLWLLL", "LTWLLWLLWLLLWTLWLWTWWWW", "LLLWLTLTWWWTTWTLLWWWWLW", "LLLLLWLWWWWWWLWTWWWTTWL", "LLLWWLLWWWWLLWWLTLWTTWW", "LWLWLWLLLTLLTLLLWTWWTLL", "WTWLLWLLTLLWWTLLLLTLTLL", "LTLLWTTWWWLLLLLTTLWTTTL", "LLLLWTLLLLLLWLLTTTTTTWL", "LWWTLWTWTLLLWLWLLWWTLTT", "LWLWLWWWLWLLWLLWLWWWWTT"};
    int p = 7;
    int q = 15;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> conflicts = {"TWTWWWWWTLTWLWLTLWWLLWWWTWLLWT", "LTWLLWLWLWLWTTTTLLLWLWLLLLTLWW", "TLTWLWWWLTLLWLLLWTTLLWWLLLWWWW", "LWLTTWLWWTWTWWWLWLLWWWLWWWWTWW", "LWWTTLWLLWWLLLLWTWLWWWWLWWWWLL", "LLLLWTTTWTTWLLLWTTWTLTTLWWWWWL", "LWLWLTTLWLWLLTWTLWTTWWLLWWWWLL", "LLLLWTWTLWWLWLLWLWWLWLWLWLWWWL", "TWWLWLLWTWTWLWLWTLWLWLTWTTLWWW", "WLTTLTWLLTWTWTWWLLWLTLWWWWLTLW", "TWWLLTLLTLTWWWTTLLLWWLLTLTTWTW", "LLWTWLWWLTLTLLTLTTTLWLWLWTLLWW", "WTLLWWWLWLLWTLWWTTLWWWLTWWLWWL", "LTWLWWTWLTLWWTTLLTLLWTWWLTWWWW", "WTWLWWLWWLTTLTTLLTTWWLLLLWWWWT", "TTWWLLTLLLTWLWWTLTLTWLLLWWLLWW", "WWLLTTWWTWWTTWWWTTWLLWLWTTLWWL", "LWTWLTLLWWWTTTTTTTWWWLLWTTWWLL", "LWTWWLTLLLWTWWTWLLTTWTTLLWWWTW", "WLWLLTTWWWLWLWLTWLTTLWTLLWLLWT", "WWWLLWLLLTLLLLLLWLLWTTTWWTTLWT", "LLLLLTLWWWWWLTWWLWTLTTWLLWTLLL", "LWLWLTWLTLWLWLWWWWTTTLTWLWWWLL", "LWWLWWWWLLTWTLWWLLWWLWLTWLLTLL", "TWWLLLLLTLWLLWWLTTWWLWWLTWTLLW", "LWWLLLLWTLTTLTLLTTLLTLLWLTWLWW", "WTLLLLLLWWTWWLLWWLLWTTLWTLTWTW", "WWLTLLLLLTLWLLLWLLLWWWLTWWLTWW", "LLLLWLWLLWTLLLLLLWTLLWWWWLTLTW", "TLLLWWWWLLLLWLTLWWLTTWWWLLLLLT"};
    int p = 8;
    int q = 2;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> conflicts = {"TWLWTLWWLWTLTWWWLLTLWLLWLW", "LTWTTLWLLTLWTLTLWWWTLTLWTW", "WLTWWWWWWWWTLWLLLTLWLLWLTW", "LTLTTLWLWWLWLLTWTTWTLWLTWT", "TTLTTLLLLLTLLTTWLWLWWWWWWW", "WWLWWTWLWTWLWLTWWWLLLLLWWW", "LLLLWLTLWTTTLWLWWLWWLTWLLL", "LWLWWWWTWLLTTWLWLTTTLLTTLW", "WWLLWLLLTWWWWTLTWWLTTWWLLT", "LTLLWTTWLTLLTWLWLWWWLLWWTW", "TWLWTLTWLWTTWWWLWTLWTWLLWT", "WLTLWWTTLWTTWLWTWLWWTLWWWT", "TTWWWLWTLTLLTWLWWLWLLWLLWW", "LWLWTWLLTLLWLTTTTTLLTTLWWL", "LTWTTTWWWWLLWTTTTWLTWWLWLT", "LWWLLLLLTLWTLTTTWWLTLWWLLW", "WLWTWLLWLWLLLTTLTTLWLWLWLL", "WLTTLLWTLLTWWTLLTTTWLWWLWL", "TLWLWWLTWLWLLWWWWTTTWLLLWT", "WTLTLWLTTLLLWWTTLLTTTWLLWL", "LWWWLWWWTWTTWTLWWWLTTWTLLW", "WTWLLWTWLWLWLTLLLLWLLTTLLL", "WWLWLWLTLLWLWWWLWLWWTTTTTL", "LLWTLLWTWLWLWLLWLWWWWWTTTW", "WTTLLLWWWTLLLLWWWLLLWWTTTW", "LLLTLLWLTLTTLWTLWWTWLWWLLT"};
    int p = 0;
    int q = 14;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> conflicts = {"TWWWWLLWLWLWWTLWTLTLWWWTWWLTWLLWWWLTLWTL", "LTTTTTLWWWLTTLWWLLLWWWLWWWLLLWTWLTLWLWTW", "LTTLTLWWLLWWTTLWLWWWWTTLLWWLLLLWLWLWTWWL", "LTWTWWTWTLLLWLLWWWLLWWWWLLLWWWWTTLTLLLWW", "LTTLTWLLTWLLTTTLLWLLTLWWLLTWWLTLWLTWWTLW", "WTWLLTLWTLWWWLWWWWLTWTTWLWWLWWWWLLLWLLLL", "WWLTWWTWWLWWLWTLWLWTTWTLTWLLLTWWLWWLLLTL", "LLLLWLLTLLWLWWTTWWWLLLWWTTLTWTLLWLLWLLTW", "WLWTTTLWTLWWLWLLWTWLLTLLTWWTWLLLTTWTLWLL", "LLWWLWWWWTTWLWTLLWLWLWLWWLWTWLWWWWLLLWWT", "WWLWWLLLLTTWWWWWLLWLLLLWLWWLLLTLLWLWWWTW", "LTLWWLLWLLLTLLWTTWWWTWWLWWLLWLTLTWTTWTWW", "LTTLTLWLWWLWTLLWWWTTWLTLLLTLTLLWTLTLWLWT", "TWTWTWLLLLLWWTTWTWLWWWWWWWLLTLLLLWWWLLTW", "WLWWTLTTWTLLWTTTLWLTWTTLWWWLLWWWLWLTLTWW", "LLLLWLWTWWLTLLTTLLLLWLTLLWTLLTLWWWWLLWLW", "TWWLWLLLLWWTLTWWTLWLWLLWWWTLWLLWLWTTWTWL", "WWLLLLWLTLWLLLLWWTTTWWWWWLLLTLWLLWLLWLLL", "TWLWWWLLLWLLTWWWLTTLWLTLLWTLLWWLWWLWWWLL", "WLLWWTTWWLWLTLTWWTWTTLLLLLWLLTWLWWWLLLTW", "LLLLTLTWWWWTLLLLLLLTTWWWTLWLWLWTWLTWLWLW", "LLTLWTLWTLWLWLTWWLWWLTWLLLLLLLLTWLWLLLTL", "LWTLLTTLWWWLTLTTWLTWLLTWWWWWWLWWLLWWLWWL", "TLWLLLWLWLLWWLWWLLWWLWLTWWTLWWTWTWLTWTWW", "LLWWWWTTTLWLWLLWLLWWTWLLTTWTWLWLWLLLTTWT", "LLLWWLLTLWLLWLLLLWLWWWLLTTWWLLTWLWWLLWLL", "WWLWTLWWLLLWTWLTTWTLLWLTLLTLTWLTTWWTLLTW", "TWWLLWWTTTWWWWWWWWWWWWLWTLWTWWLWLLLLLTWT", "LWWLLLWLLLWLTTWWLTWWLWLLLWTLTWLLWTWWTWLW", "WLWLWLTTWWWWWWLTWWLTWWWLWWLLLTWTTWLLWTTW", "WTWLTLLWWLTTWWLWWLLLLWLTLTWWWLTTLTLLTWWW", "LLLTWLLWWLWWLWLLLWWWTTLLWLTLWTTTLLLTTLWT", "LWWTLWWLTLWTTWWLWWLLLLWTLWTWLTWWTTLLWWWW", "LTLWWWLWTLLLWLLLLLLLWWWLWLLWTLTWTTWLWLLW", "WWWTTWLWLWWTTLWLTWWLTLLWWLLWLWWWWLTWLWTL", "TLLWLLWLTWLTWLTWTWLWLWLTWWTWLWWTWWLTWLLW", "WWTWLWWWWWLLLWWWLLLWWWWLTWWWTLTTLLWLTTLW", "LLLWTWWWLLLTWWTLTWLWLWLTTLWTLTLWLWLWTTWL", "TTLLWWTTWLTLLTLWLWWTWTLLLWTLWTLLLWTWWLTL", "WLWLLWWLWTLLTLLLWWWLLWWLTWLTLLLTLLWLLWWT"};
    int p = 1;
    int q = 12;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> conflicts = {"TLLTTTWL", "WTWLTWLL", "WLTLWWWL", "TWWTTWWW", "TTLTTWWL", "TLLLLTLW", "LWLLLWTL", "WWWLWLWT"};
    int p = 8;
    int q = 10;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> conflicts = {"TTLLTWWLLLTTLWLWLWWLWWLTW", "TTWTLWTWTWWLWLLTWLWWWTLLL", "WLTTLWWLWWWTLTLWLLWWWTWWT", "WTTTLWLWWWWLTLWWWWWLLLWWW", "TWWWTLWLTWLTLTLWWWLWWTTTL", "LLLLWTWTWTWLTTWLWLTLLLTTL", "LTLWLLTLWTWWLLWWWWTWLWTWW", "WLWLWTWTWLLLWWLWLLLWLWWLT", "WTLLTLLLTWTWLLTLWLLTWWTWL", "WLLLLTTWLTWWWLLTLWTWWWWLT", "TLLLWLLWTLTWWLWLLTLTWLLWW", "TWTWTWLWLLLTWWWLWTTTLTWWW", "WLWTWTWLWLLLTWWWLWTWLWWTW", "LWTWTTWLWWWLLTWTWLWLWLLLW", "WWWLWLLWTWLLLLTWWWWLLWLTL", "LTLLLWLLWTWWLTLTWWWWWWWLT", "WLWLLLLWLWWLWLLLTLWWWTTWW", "LWWLLWLWWLTTLWLLWTWWLTWWW", "LLLLWTTWWTWTTLLLLLTTWLWLL", "WLLWLWLLTLTTLWWLLLTTTWLLW", "LLLWLWWWLLLWWLWLLWLTTLLLT", "LTTWTWLLLLWTLWLLTTWLWTTLT", "WWLLTTTLTLWLLWWLTLLWWTTWT", "TWLLTTLWLWLLTWTWLLWWWWLTW", "LWTLWWLTWTLLLLWTLLWLTTTLT"};
    int p = 18;
    int q = 0;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> conflicts = {"TWTLLWWTTWTLLWWWTWLTLWWWTWWTWWWWWLTTLTWLWWLWWWW", "LTWLWTWLLLLWWWTLWLWWLWLLTTWWLTWWWWLWWWWLWWLWLLT", "TLTTTWLLTWWTWWLWTWWWWTLLLTWWLWLTLLTLTWWLTWTWLWT", "WWTTWWWLWWLTWLWLTTLTLLWTLTWWWWTLLLWTWLLWTWWLWLL", "WLTLTWTLWLLWTWWWLLWLLLWWLTTLTWWWWWWWWLLWWWWTWWL", "LTLLLTWWWTLTLTWWLWWWWLLTWTLWWWLWWWWWLTWLWLWWWLW", "LLWLTLTWWLWWLWWWLTWTWWLWLLWLWTWLLWWTTWLWLWLLTTL", "TWWWWLLTWWTTWWWWWWWLWLLTLWWWWLWWLLLWWWWWWLTWLLT", "TWTLLLLLTWWTLWLLWWWWTLWWWTWWLWLLTLLTLLWTWWWWLTW", "LWLLWTWLLTTTTLLWLLTWWLWWTWLTLWWLLLLWLLLTWWWLWTL", "TWLWWWLTLTTLLLLLLLWLWLWLWWWLLTLTWTWLWTLWTWWWLWT", "WLTTLTLTTTWTWTWWWWWLTWTWLLLLWWLLWWWTWLLTLLLTWWT", "WLLLTWWLWTWLTLLLLLWWWTLTTLLWWWLLLWLWLTLLTWLLLWL", "LLLWLTLLLWWTWTWWLWTLWLWTWLLWTTLTWWWWWWTWTWLLWLL", "LTWLLLLLWWWLWLTWLWLLLLLWWTWWLWWWWWTWWLLWTLLWLWL", "LWLWLLLLWLWLWLLTWWTWLWWWLLWWLLLWWLTWTWWWWWWWWWL", "TLTTWWWLLWWLWWWLTWTLLWLWTWWLWLLLWLTTWLTLLWWLTTL", "LWLTWLTLLWWLWLLLLTWLWLWWLWWWWLWLTLTLTLWLWTLTWLL", "WLLWLLLLLTLLLTWTTLTWTWWLWWWLWLLWWWLWWWLWWWTLWLW", "TLLTWLTWLLWWLWWLWWLTWWWWWWLLLWLLTLWTLLLWLTWLWLW", "WWLWWLLLTLLTLLWWWLTLTLWWLWWLWWTLTLWWLWWTLWWTTWW", "LLTWWWLWWWWLTWWLLWLLWTWLWWWTWTWLTLWTLWWWWWTLLLW", "LWWLLWWWLLLTWLWLWLLLLLTWLLTWTWLWWWLTTLLWTTWTLTW", "LWWTLTLTLLWLTTLLLLWLLWLTLLLTWLLWLWTLLWWLWLWWLWW", "TTWWWLWWLTLWTLLWTWLLWLWWTWWWWLWTWWTTWTTWLLLTTWT", "LTTTTTWLTLLWWWTWLLLLLLWWLTWWLWLWWTLLLLTTLWWWWTT", "LLLLTWLLLWLWWWLLLLLWLLTWLLTLWLTWTWWLWLTLLWTLLWW", "TLLLWLWLLTWWLLLLWLWWWTLTLLWTWTLLTLWTLWWLWWLWWWW", "LWWLTLLLWWWLLTWWLLLWLLTLLWLLTLLLLLLWTWWLTTLWLTW", "LTLLLLTWLLTLLTLWWWWLLTLWWLWTWTWWLLWWWLWWWLWTLWW", "LLWTLWLLWLWWWWLWWLWWTLWWLWTWWLTLWLWLTLWWLWLWWWW", "LLTWLLWLWWTWWTLLWWLWWWLLTLLWWLWTWTWTWWWLTTLTLWT", "LLWWLLWWTWLLWLLLLTLTTTLWLLTTWWLLTWLWWLWWWWLWTLT", "WLWWLLLWWWTLLLLWWWLWWWLLLTLWWWWTLTTTTLLWWLLWWLL", "TWTLLLLWWWLLWLTTTTWLLLWTTWLLWLLLWTTLTWLLLLLLLTT", "TLWTLLTLTLWTLLLLTWLTLTTWTWWTLLWTLTWTTLLWWLWWLTL", "WLTLLWTLWWLLWLLTLTLWWWTWLWLWTLTLLTTTTTWLWWWWLWW", "TLLWWTLLWWTWTLWLWWLWLLWLTWWLLWWLWWLWTTLTWWLLWWW", "LLLWWLWLLWWWWTWLTLWWLLWLTTTLLLLLLWWWLWTLWWLWLLW", "WWWLLWLLTTLTWLLLWWLLTLLWLTWWWLLWLLWLWTWTWLLLWTL", "LLTTLLWLLLTWTTTLWLLWWLTLWWWLTLWTLLWLLLLLTTWLLWL", "LLLLLWLWLLLWLLWLLTLTLLTWWLLLTWLTLWWWLLLWTTLWTWT", "WWTLLLWTLLLWWWWLLWTLLTLLWLTWWLWWWWWLLWWWLWTLWLW", "LLLWTLWLLWLTWWLLWTWWTWTLTLWLLTLTLLWLLWLWWLWTLTT", "LWWLLLTWWLWLWLWLTLLLTWWWTLWLWWLWTLWWWLWLWTLWTTL", "LWLWLWTWTTLLLWLLTWWWLWTLLTLLTLLLWWTTLLWTLLWTTTT", "LTTWWLWTLWTTWWWWWWLLLLLLTTLLLLLTTWTWLLLWWTLTWTT"};
    int p = 8;
    int q = 2;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> conflicts = {"TTWWWWLWLWLLWLLTWWWWWTWLLWW", "TTTTLWWWWLWWLTWWTLTLWWLWWTW", "LTTWWWTLWTWWWLWWWWTLTLLWLTL", "LTLTWLWTWLWLTTTWWWLWWWLLLWL", "LWLLTWWWLWTWWLLLWLLWLLWTWLW", "LLLWLTWWLLLTTWWWWLWLLWLWLLT", "WLTLLLTWWWWWWLTLWWLWLWLWTLW", "LLWTLLLTLWTLWLTWWWTWLWWWLLW", "WLLLWWLWTLLWTWWLWWTWWWLWLLW", "LWTWLWLLWTWLWTWWLWLLLWLTLWW", "WLLLTWLTWLTWTLLLLWWWLWLWWWW", "WLLWLTLWLWLTWLWWWWWTLLWWLLT", "LWLTLTLLTLTLTLLWLTWWWWLLTLW", "WTWTWLWWLTWWWTTWWWWLWWLLWLL", "WLLTWLTTLLWLWTTWWWWWLWWLWLW", "TLLLWLWLWLWLLLLTWWLWWLLWLTW", "LTLLLLLLLWWLWLLLTLWLLLLWTWT", "LWLLWWLLLLLLTLLLWTLWWWLLLTL", "LTTWWLWTTWLLLLLWLWTTTLLWLWT", "LWWLLWLLLWLTLWLLWLTTTWTWTLT", "LLTLWWWWLWWWLLWLWLTTTLWWWWL", "TLWLWLLLLLLWLLLWWLWLWTLLWWW", "LWWWLWWLWWWLWWLWWWWTLWTLLTL", "WLLWTLLLLTLLWWWLLWLLLWWTLLT", "WLWWLWTWWWLWTLLWTWWTLLWWTWL", "LTTLWWWWWLLWWWWTLTLWLLTWLTW", "LLWWLTLLLLLTLWLLTWTTWLWTWLT"};
    int p = 4;
    int q = 6;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> conflicts = {"TWLWLWWTTWLWWWLWWWLTWLTTWLLLWLLWLLWLWWLWTWW", "LTLWLWLWWWWWLLLLLWWLWWLWLWWLWWWTTWLLTWLLWTT", "WWTLWLLWLWLWLWWWLLWLWTLLLWLWWWLLLTWLTWLLTWL", "LLWTLWLLWWLLTWTTWLWLTLWWLWWLWWTLWLLTWTLTWLT", "WWLWTWWWWLWWWLLWWLLWLWWWWLLTWWWWWWWWWLLWWWW", "LLWLLTWWWTLWLTWLTWWLWWWWLWLWLWWTWLLLTLTWWTW", "LWWWLLTWLLLLWWWTLWWWWTWWWLWTWWWLTLWTLWWLLTL", "TLLWLLLTWTLWWLWWLWWWWTTWLWLWLWLWWTWWWTLLLLT", "TLWLLLWLTWWWTLTLTLWWWLLTTWLWWWWWLLTLWLWLWLL", "LLLLWTWTLTLWWLWLWWWLWLTWWLLTTWLLWLWLWWTLWLL", "WLWWLWWWLWTTTWTLTTTWLLLLWWWWTWLWWWLWLTWTLTT", "LLLWLLWLLLTTWLLWWLLLWWWWWWLTWLWTWTTWWLLWTTL", "LWWTLWLLTLTLTTTWTWTWLLTWLWLLWTLWLLWLLTWWTLW", "LWLLWTLWWWLWTTWWWWWTWLLLTWWWLWWWTLLWLWWLLLL", "WWLTWLLLTLTWTLTWTLWWWWWLWLWWWTWLWTLWWTLLLWW", "LWLTLWTLWWWLLLLTLLWLWTTWWLWWWWTTLWLLWLLTTLL", "LWWLLTWWTLTLTLTWTWWLWLLWLLWWLWWLLWWLWLTWLLW", "LLWWWLLLWLTWLLWWLTLWLWWLTLLLWWWWLWWLLWLTWWT", "WLLLWLLLLLTWTLLLLWTWLLTLTWLTWWTWLWWLTWLWWTW", "TWWWLWLLLWLWLTLWWLLTLLLTWLWLLLTWTTTLLWWWWWL", "LLLTWLLLLLWLWLLLLWWWTWWLWLLWTLLLLLLWLLLWWLW", "WLTWLLTTWWWLWWLTWLWWLTTLLWTWLWLLLTTWLLTLLTW", "TWWLLLLTWTWLTWLTWLTWLTTTWWTLTWWTWLWLTLLTWTL", "TLWLLLLLTLWLLWWLLWWTWWTTTWWLWWWWTTLWLTTWWTW", "LWWWLWLWTLLLWTLLWTTLLWLTTTLLLLLTWWLLLTWWWWL", "WLLLWLWLLWLLLLWWWWLWWLLLTTLWTLWLLWLLWWLTWWW", "WLWLWWLWWWLWWLLLLWWLWTTLWWTTTWTTTWWLLLLLLWW", "WWLWTLTLLTLTWLLLLWTWLLWWWLTTLLLWTLWLTWLTWWL", "LLLLLWLWLTTLLWLLWLLWTWTLWTTWTWWWLTLLLTLLLWL", "WLLLLLLLLLLWTLTLLLLWWLLLWWLWLTTTWWTWLWWLWLT", "WLWTLLLWLWWLWLLTLLTTWWLLWLTWLTTWLLLLWWLTLLW", "LTWWLTWLLWLTLLWTWLLLWWTLTWTLLTLTLWTWWWLWLLW", "WTWLLLTLWLLLWTLWWWWTWWLTLWTTWLWWTTTWLWLTLLL", "WLTWLWWTWWLTWWTLLLLTWTWTLLLWTLWLTTWWLWWTLWW", "LWLWLWLLTLWTLWWWLLLTWTLWWWLLWTWTTLTTLLWWTTL", "WWWTLWTLWWLLWLLWWWWWLLWLWWWWWLWLLLTTWWLWLWT", "LTTLLTWLLLWLWWLLLWTWWWTWWLWTWWLLWWWLTTWLWLL", "LLLTWWLTWLTWTLTWWLLLWWWTTLWLTLLLLLWLTTWLWWW", "WWWWWTLWLTLWLLWWTWWLWTWTLWWWWLWWWLLWLLTLLWL", "LWWTLLWWWWTLLWWTLTLLLWTLLTWTWWTLTTLLWWWTWTW", "TLTLLLWWLLWTTWWTWLLLLWLLLLWLWLWWWWTWLLWLTLW", "LTLWLTTWWWTTWWLWWLTLWTTTLLLLLWWWWLTLWLLTWTT", "LTWTLLWTWWTWLWLWLTLWLLWLWLLWWTLLWLWTWLWLLTT"};
    int p = 6;
    int q = 18;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> conflicts = {"TWLWTWWTTTLLLLWWTTLWWLLLTW", "LTWLWWWLLLWLWLLLLWWLWTTWLW", "WLTTTLWWTTWLLLLWLWLWLWWLLL", "LWTTTTLTWTLLTWWWWWWLWWLLLW", "TLTTTLTWTLLWWWWTWLLTLWLLWL", "LLWTWTWTWLLWWLWWWLTLWLWWWL", "LLLWTLTLLWLLWWLLLLWWLWTWWT", "TWLTLTWTLTTLWWWWLWWWTLLLLL", "TWTLTLWWTTWTWWLWWLTTLLWWLT", "TWTTWWLTTTTLWWLTLLWWWTTWLW", "WLLWWWWTLTTWWWWWWTLWLLWWLT", "WWWWLLWWTWLTWLWLLLLWLLTTWW", "WLWTLLLLLLLLTWTTLLWWLWLTLL", "WWWLLWLLLLLWLTLWWWLWTWLLLW", "LWWLLLWLWWLLTWTWWLTTLLLLTW", "LWLLTLWLLTLWTLLTWLLLTWWTTW", "TWWLLLWWLWLWWLLLTLWWWLWWWL", "TLLLWWWLWWTWWLWWWTWLLWTTWL", "WLWLWTLLTLWWLWTWLLTWTTWTLW", "LWLWTWLLTLLLLLTWLWLTWTTTWW", "LLWLWLWTWLWWWTWTLWTLTLWWWW", "WTLLLWLWWTWWLLWLWLTTWTWWWL", "WTLWWLTWLTLTWWWLLTLTLLTTLW", "WLWWWLLWLLLTTWWTLTTTLLTTLW", "TWWWLLLWWWWLWWTTLLWLLLWWTW", "LLWLWWTWTLTLWLLLWWLLLWLLLT"};
    int p = 13;
    int q = 2;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> conflicts = {"TTWLWWTWLLWWWLLWWLWWLLLWLWTWLTLLLWWLWL", "TTWLWWWWWWWWWWLTWWLWWLTLLLLWWWLLLWWTLW", "LLTLLWLLWWTLWLTTLWWWWWWLLWWWLLTWLWLWWL", "WWWTWLLLLWWLLWWWWWLWWLWLTLLLWWWWTLLWWL", "LLWLTWLWWWTLLTLWLWLLTTLTLLWWWWTLWWWWWW", "LLLWLTLTWLLWLTLWLWWWLWWWWLTTWWWTTWLWTL", "TLWWWWTLWLLWWTLTLTTLLLLLLWWLTTTLWWLWLL", "LLWWLTWTWLLLLLLWWWWLWWWLLLLWLLWLLWWTLT", "WLLWLLLLTWLWLTLWLWLWLLWWWLWWWLLWWWTLLT", "WLLLLWWWLTWWWTLLWTWLTTLWLTTWLWLWWWLWWL", "LLTLTWWWWLTWWLWTTWLTWLLWTLWWLTLTWTLWTL", "LLWWWLLWLLLTWWWTWLLWWWWTLWWWLLWWLWWWWW", "LLLWWWLWWLLLTLWLWLWLTTTTLWWLWWLWLWWWWL", "WLWLTTTWTTWLWTTLWWLLTLWTWLWWWTWWTLTWWW", "WWTLWWWWWWLLLTTWLTTWTWTWWLTWLLWTWTTWTL", "LTTLLLTLLWTTWWLTLWWWWWWWWLTWTLTLTLLLLL", "LLWLWWWLWLTLLLWWTWWWWTLLWLWLWWWWLWTLLT", "WLLLLLTLLTLWWLTLLTLWWWTLWWLTLWLTWTWWWL", "LWLWWLTLWLWWLWTLLWTLTLWWTLLTLLWWWLTTTT", "LLLLWLWWLWTLWWLLLLWTWLTLLWLLWLWWWWTLTL", "WLLLTWWLWTLLTTTLLLTLTWTLLWLWLWTLWWTWWW", "WWLWTLWLWTWLTWLLTLWWLTWWWLTWLLWTLWWLWL", "WTLLWLWLLWWLTLTLWTLTTLTWLWTTWLTTLLTTWW", "LWWWTLWWLLLTTTLLWWLWWLLTWWWLWWWLTWLWWT", "WWWTWLWWLWTWWLLLLLTWWLWLTWTWWLTLWTWTTL", "LWLWWWLWWTWLLWWWWLWLLWLLLTWLWWTLWLWWWW", "TWLWLTLWLTLLLLTTLWWWWTTLTLTLWWLWWLLLTT", "LLLWLTWLLLLLWLLLWTTWLLTWLWWTLWTLTWWLTL", "WLWLLLTWLWWWLLWTLWWLWWLLLLLWTWLWLLWLLL", "TLWLLLTWWLTWLTWWLLWWLWWLWLLLLTTWLLLLLW", "WWTLTLTLWWWLWLLTLWLLTLTLTTWTWTTWWLWTWW", "WWLLWTWWLLTLLLTWLTLLWTTWWWLWLLLTLLWWTL", "WWWTLTLWLLLWWTLTWLLLLWWTLLLTWWLWTLLWLL", "LLLWLLLLLLTLLWTWLTWLLLWLTWWLWWWWWTWLLL", "LLWWLWWLTWWLLTTWTLTTTLTWLLWLLWLLWLTTWL", "WTLLLLLTWLLLLLLWWLTWLWTLTLWWWWTLLWTTWL", "LWLLLTWWWLTLLLTWWLTTLLLLTLTTWWLTWWLLTL", "WLWWLWWTTWWLWLWWTWTWLWLTWLTWWLLWWWWWWT"};
    int p = 7;
    int q = 19;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> conflicts = {"TTTLWLTTTWWLWWWWWLWLTWLWTLLLLLWLWLLLT", "TTWLTLTLLWWLTTTWTWWWTLLTWWLLLLLWWWWLT", "TLTTWLWLWTLLTWWLWWTWWWWLWLTLWTTTLLTTL", "WWTTLLWWTTWWTLWLLLWLWWWWLWLWWTWTTWWWL", "LTLWTLWLWWLLWLLLTLWLLTLLTLTWLWLWWLWLW", "WWWWWTTWTLLWWLWLLWWWWWWLLLLTLLWLTWWWW", "TTLLLTTTWLWWWLLLLLWTWWLTLLLWTLLTWWLLL", "TWWLWLTTLWTWTTLWWLLTLWTWTWLWTLWWLWLLT", "TWLTLTLWTLWTLLLTWLLLLWTTLTWWWWWTTWWTW", "LLTTLWWLWTLWWWLLWWWLWWWTTLTTWWTWLWLWL", "LLWLWWLTLWTLLLLWLLTWLWLWWTLLWWWLWLTLL", "WWWLWLLLTLWTWLWLTLLWWWWTLWLWLTTLWLLWL", "LTTTLLLTWLWLTLWTLWLLLWLWWLTLTWLWLTTWW", "LTLWWWWTWLWWWTWWLLTLLLLWWLLLLTWWWWWWL", "LTLLWLWWWWWLLLTLWTWWWTWWWLLWTWWWLLTWW", "LLWWWWWLTWLWTLWTTWTWWLLTWTWWWWWLWLWTL", "LTLWTWWLLLWTWWLTTLWLLWWLTWLWLLWLWWLLW", "WLLWWLWWWLWWLWTLWTWLTWLWWWWLWWTWLLTWW", "LLTLLLLWWLTWWTLTLLTWLLTLLLTWTWWWLWLLL", "WLLWWLTTWWLLWWLLWWLTLLLTWWTLWWLWLLWWW", "TTLLWLLWWLWLWWLLWTWWTWTWWWTWWWWLWWWWW", "LWLLTLLLLLLLLWTWLLWWLTTWTTWTTLTWTLTWL", "WWLLWLWTTLWLWWLWLWTWTTTTWLWLWWLWWWLLW", "LTWLWWTLTTLTLLLTWLWTLLTTLLTWWWWWWWLWW", "TLLWTWWTWTLWLLLLTLWLLTLWTLTLLWLWWLWLL", "WLWLWWWLTWTLWWWTLLWLLTWWWTLWTTWTWTWLT", "WWTWTWWWLTWWTWWLWLTTTLLTTWTTWLWLWTWLW", "WWWLLTLLLTWLWWLLLWLWLTWLWLTTLTWWTTLTL", "WWLLWWTTLLLWTWTLWLTLLTLLWTLWTLWLWWWWL", "WWTTLWWWLLLTLTLLWLLLLWLLLTWTWTLLTWTLW", "LWTLWLWLLTLTWLLLLTLWLTWLWLLLLWTLWLTTW", "WLTTLWTLTLWWLLLWWLLLWLLLLTWLWWWTTLLWL", "LLWTLTLWTWLLWLWLLWWWLTLLLLLTLTLTTWTWW", "WLWLWLLLLLWWTLWWLWLWLWLLWTTTLLWWLTWWW", "WLTLLLWWLWTWTLTLWTWLLTWWLLLWLTTWTLTTL", "WWTLWLWWTLWLLLLTWLWLLLWLWWWTLWTLLLTTL", "TTWWLLWTLWWWLWLWLLWLLWLLWTLWWLLWLLWWT"};
    int p = 16;
    int q = 5;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> conflicts = {"TTLLWLWLLTWWWWWWW", "TTLWLWLLLWWLWWWWT", "WWTLWLWLTWWWTWLLL", "WLWTWWLLWWWLTLLLW", "LWLLTLWWWTWTLWWWT", "WLWLWTWLWWWLWWWLW", "LWLWLLTLLWLLLTLWT", "WWWWLWWTLLWWLWLLL", "WWTLLLWWTLLLLWLLW", "TLLLTLLWWTTWWWWTL", "LLLLLLWLWTTTWWWTW", "LWLWTWWLWLTTWWLTT", "LLTTWLWWWLLLTLTLT", "LLLWLLTLLLLLWTLWW", "LLWWLLWWWLLWTWTTW", "LLWWLWLWWTTTWLTTL", "LTWLTLTWLWLTTLLWT"};
    int p = 38;
    int q = 62;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> conflicts = {"TLWLLWLWWLLLLLLTWWWWWTLWTTLWWLLLLWWWLWWWLWL", "WTWTLWWWLLWLWWWWWWLLTLWWWWWWWTLWTWWLLWWTTWW", "LLTWTWWLLWTWTTLWLWWWLLWWLTWTTLWLLLWWLWTLLWW", "WTLTLLWTLWLWWWWLLLWWWLLWWTWWWLTLTLTWWWLWTWT", "WWTWTLLLLLLWWLTLWWWLWWLLWLLLLTWLLWLLLLWLLWW", "LLLWWTTLLWTLWLTWLTLWWWWLWWWWLWTLWLTWTTWTTWL", "WLLLWTTWWWTWLWLLWLWWWLWWWWLWTWWWWWWTLLWLWWW", "LLWTWWLTWLLLLTWWWLLWLLWWWLWLWLTWTTWTLTLLWLT", "LWWWWWLLTWWWLWWWLLTTTTWWLLWTTTWWWLWTWWWWWLW", "WWLLWLLWLTWLTLWWTWLWLWWWWLLTLWTLLWWWLLLLWWL", "WLTWWTTWLLTWWWLWLWLLLLWWTLLWWLTLWWLWLWWLLWW", "WWLLLWLWLWLTTWWTTTTWWWWWWLWLLWLWLWWLLWLLWWL", "WLTLLLWWWTLTTLWWLWWLWLWWLTTLWLWTLLWLWLWWWTL", "WLTLWWLTLWLLWTWWLTWTTLWWWWLWWLWWWWWLWLLLTWL", "WLWLTTWLLLWLLLTLWLWLWLTTWWTWLWLWWWWWLWWWWLL", "TLLWWLWLLLLTLLWTLWLLWTWWWTWTTWTWWWLWTLWTLLL", "LLWWLWLLWTWTWWLWTLWWWTTLLLTLWLWLTWLWTWWWTWT", "LLLWLTWWWLLTLTWLWTLTWWLWLTLWLWLTWWLWWWLLWTL", "LWLLLWLWTWWTLLLWLWTWLLLWLWWWTWLWWWWLLLWLLWT", "LWLLWLLLTLWLWTWWLTLTWTLLWLWTTTLWTWWWWWWWTWW", "LTWLLLLWTWWLLTLLLLWLTLWWWTLLWWWTLLWLWLWTWLL", "TWWWLLWWTLWLWWWTTLWTWTTLWLWWWLWTLTLWLWLLWTL", "WLLWWLLLLLLLLLTLTWWWLTTLWWWWLLTWWWLTWWWWLWW", "LLLLWWLLLLLLLLTLWLLWLWWTWWLWLLTLWWWWLTLWTLL", "TLWLLLLLWLTLWLLLWWWLLLLLTWLWWTTWTLWWTLLWWTW", "TLTTWLLWWWWWTLLTWTLWTWLLLTWLLLLLLWWWLTLWWWT", "WLLLWLWLLWWLTWTLTWLLWLLWWLTLLLTWWWWWLWWLWLL", "LLTLWLLWTTLWWLLTWLLTWLLLLWWTLLTTWLWTTLWLLWL", "LLTLWWTLTWLWLLWTLWTTLLWWLWWWTTWWTWTLLWWLWLL", "WTWWTLLWTLWLWWLLWLLTLWWWTWWWTTLWTTWWWLTLTTW", "WWLTLTLTLTTWLLWTLWWWLLTTTWTTLWTWTLLWWWWWWWW", "WLWWWWLLLWWLTLLLWTLLTTLWLWLTLLLTWWWLWLTLTWL", "WTWTWLLTLWLWWLLLTLLTWWLLTWLLTTTLTWTWTWWWWTW", "LLWWLWLTWLLLWLLLLLLLWTLLWLLWLTWLLTLTWWLWTWW", "LLLTWTLLLLWLLLLWWWLLLWWLLLLLTLWLTWTWTTLLWWW", "LWLLWLTTTLLWWWLLLLWLWLTLLLLTWLLWLTLTLLWWTLL", "WWWLWTWWLWWWLLWTTLWLLWLWTWWTWLLLTLTWTWLWLWW", "LLLLWTWTLWLLWWLWLLWLWLLTWTLWLWLWLLTWLTTTWLW", "LLTWLLLWLWLWLWLLLWLLLWLWWWLLLTLTLWWLWTTWWWL", "LTWLWTWWLWWWLWLTLWWLTWLLLLWWWWLWLLWLLTLTWWW", "WTWTWTLLLLWLLTLWTLWTLLWTLLLWLTLTLTLTWLLLTWL", "LLLLLLLWWLLLTLWWLTLLWTLWTLWLWTLLTLLWLWLLLTL", "WLLTLWLTLWLWWWWWTWTLWWLWLTWWWLLWLLLWLLWLWWT"};
    int p = 52;
    int q = 33;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> conflicts = {"TLWWWLT", "WTLWWWW", "LWTWWWW", "LLLTWTL", "LLLLTWT", "WLLTLTT", "TLLWTTT"};
    int p = 36;
    int q = 96;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> conflicts = {"TLWTWLWTLWWWLWTLTWTLLWWWLLTWWWLLLWLWWTT", "WTLWLLLLLWLWWWLWTWWWWWWTLWWLTTWLTLWLWWT", "LWTWLTWWWWLWLLWWWWWWWTWLWTWWWWWLWWLWTTL", "TLLTWTLLWWLWWLLLWTWLWLWLLWLWWWLLTLWWLWW", "LWWLTLWWTTLWWLWWWWLLTWWWLLWWLWWLLWLLTTL", "WWTTWTTLLWLWWWTWWWWLWLWWWTTTWLTWWLWWTWT", "LWLWLTTWLWLTTWTTTLWWTLLTWLWLWLWWLWWLWTT", "TWLWLWLTTWTLTWWWTWLWLWTLWLWLWWWWWWWWWWW", "WWLLTWWTTWWWWWWWWTLLTWLWLLWTLTTLWTLTTTW", "LLLLTLLLLTLLLWTLWWWWLWLWLLWWWWTTTLLWWWW", "LWWWWWWTLWTWWWTWWLWLWWTLWLWLWTLTLWLWLLW", "LLLLLLTWLWLTTTWTWTWWLLWWLLTWWLWTTLLLWLT", "WLWLLLTTLWLTTWWLLTLLWWLTWWLWWLTLWLWLTLL", "LLWWWLLLLLLTLTLLWLTLTLLWLWLWLTLWLTLLLWW", "TWLWLTTLLTTLLWTLLLLWWLWWWWLLWWTLLWWWLWL", "WLLWLLTLLWLTWWWTLLWLLWTTLTWLWWTWLLLWTLL", "TTLLLLTTLLLLWLWWTLLWLWLWLLLLWTLLTWLLWLW", "LLLTLLWLTLWTTWWWWTLLLTWTWWLTWLWLWTLLLTT", "TLLLWLLWWLLLWTWLWWTWWWLLLLLWWWWLLWWLTTW", "WLLWWWLLWLWLWWLWLWLTLLTLWWTLLWLLTLLLLLT", "WLLLTLTWTWLWLTLWWWLWTLWLWLLWWWLLWWTWWWT", "LLTWLWWLLLLWLWWLLTLWWTWLWWLLWWWWTLWWTWW", "LLLLLLWTWWTLWWLTWLWTLLTWWWLWLWWWLWLLTLW", "LTWWLLTWLLWLTLLTLTWWWWLTWLTLWWWTLWWLWLT", "WWLWWLLLWWLWLWLWWLWLLLLLTLWTTWLLTWLLLLT", "WLTLWTWWWWWWLLLTWLWLWLLWWTWLTWLTWWLWTLW", "TLLWLTLLLLLTWWWLWWWTWWWTLLTLWTWLLLWWWLL", "LWLLLTWWTLWLLLWWWTLWLWLWTWWTLLLTLWWWWLL", "LTLLWLLLWLLLLWLLLLLWLLWLTTLWTLWLWTWWLWL", "LTLLLWWLTLTWWTLLTWLLLLLLLLTWWTWWTWLLWLL", "WLLWLTLLTTWLTWTTWLLWWLLLWWLWLLTWLWTLWWL", "WWWWWLLLWTTTWLWLWWWWWLLTWTWTWLLTTLWLWWT", "WTLTWLWLLTWTLWWWTLWTLTWWTLWWLTWTTWWLLWW", "LWLWLWLLTWLWWTLWLTLWLWLLLLWLTLLWLTWTWWW", "WLWLWLLLWWWWLWLWWWLWTLWLWWLLLWTLLLTTTTL", "LWLLWLWLTLLWWWLLWWWWLLWWWLLLLWWWWTTTLTW", "LLTWTTLLTLWLTWWTLWTWLTTLWTLLWLLLWLTWTWW", "TLTLTLTLTLWWWLLWWTTWLLWWWWWWLWLLLLTTLTL", "TTWLWTTLLLLTWLWWLTLTTLLTTLWWWWWTLLWLLWT"};
    int p = 11;
    int q = 27;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> conflicts = {"TTWWLLLW", "TTLWLWLT", "LWTTLTLW", "LLTTWLLL", "WWWLTWLL", "WLTWLTWW", "WWWWWLTW", "LTLWWLLT"};
    int p = 68;
    int q = 38;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> conflicts = {"TWWTWLWWWWTLLLLTLLLLLWLWLWWTWLLTWWTLTLLWLTWLWWTL", "LTWTLWWTTLLWWLWWWLLWWTLTWWLLWWWWLTTLWWTWLTWWTWTT", "LLTLWLLLTWLLLLWWLLWTLLWWWWWWTWTLWLLWWLLWWTLWTWTL", "TTWTLLLLTWLLWLLLTWWWLTWWTWWLWLLWWWLWTTLLLTTWWTWW", "LWLWTWWWTTTLLLWLLWWWWLWTWLWLTWLLWWWWLWWLWLWTWWTL", "WLWWLTLLWLTLWLWTLWLTWWWLLWWWWLLTWWLLTWWLTWLLWWLL", "LLWWLWTLWLLLLLWWWLWWTTWLLWWLWWWLLLTLWTWLLWLWTWWL", "LTWWLWWTTWWWTWTLLLWWLLLLWWWTWWWWLTWLWWWWLLTTLWTL", "LTTTTLLTTWWLLTWWLWWWWWWWWLWWWWWTWWTWLWTLTWWWWWWL", "LWLLTWWLLTTLLWWWWLLWLWWLWLLLWWWTWWWLWWTWLTLTWTLL", "TWWWTTWLLTTLLWLWLLWWLTWLLTLWTLWTWTLLLLWWLWLLTLWW", "WLWWWWWLWWWTTWTWTWWLWLWLWTLLTWWTLTLLWLLLWWLWTWLT", "WLWLWLWTWWWTTLWLTWWLWLTWTLTLTLTLLWTLLWWWLLLWWWTL", "WWWWWWWLTLLLWTWLLWTTLLWWWWLWWLLLLTWWLWTWLTWWTLWT", "WLLWLLLTLLWTLLTWTTWWLWWTWLWLLLLWLWWLWWWLLLTWLWWW", "TLLWWTLWLLLLWWLTWLLWLLLLLLTWWLLLTWLWWWWWLLTWWWLW", "WLWTWWLWWLWTTWTLTWWWWTWWWWLLLWWLWTTWLWLWWWWWLTTL", "WWWLLLWWLWWLLLTWLTLTTTLTLLLWTLWWLTWWTWWWTTWWWWWT", "WWLLLWLLLWLLLTLWLWTWLWTWLWWWLWWLLLWTLLLWWWWLWWLW", "WLTLLTLLLLLWWTLLLTLTLTLWWLLWTLTWWWLLWLTWTWWTLLWL", "WLWWLLTWLWWLLWWWLTWWTWLTLWLLTLWLTWLWWTWTTTWLTTLL", "LTWTWLTWLLTWWWLWTTLTLTTLWTWWWWLLTWWWLLLTWTTLWLWT", "WWLLLLLWLLLLTLLWLWTWWTTWLWLLTWLLWWWTLWTLTWWWLWTT", "LTLLTWWWLWWWLLTWLTLLTWLTWLWLWWWLTWLTTWLTTWWWTTWL", "WLLTLWWLLLWLTLLWLWWLWLWLTWLWLWLLLLTWLWLWWLWLWLWL", "LLLLWLLLWWTTWLWWLWLWLTLWLTWWLLWWTTWWWWWWTWTWLTLW", "LWLLLLLLLWWWTWLTWWLWWLWLWLTLWWWWLWTLTTWWWTTTLLLT", "TWLWWLWTLWLWWLWLWLLLWLWWLLWTTTTTLLTWWLLTWTLWTWWL", "LLTLTLLLLLTTTLWLWTWTTLTLWWLTTWLLLWWTLTTTTLLLLWWW", "WLLWLWLLLLWLWWWWLWLWWLLLLWLTLTWWTWLWLWWTLLWLWWTL", "WLTWWWLLLLLLTWWWLLLTLWWLWLLTWLTTLWTWWWLWWLWTLLWL", "TLWLWTWLTTTTWWLWWLWLWWWWWLLTWLTTLTLTWWWLLLLWLTWT", "LWLLLLWWLLLWWWWTLWWLTTLTWTWWWTWWTLLWLWLLTLWWWLWT", "LTWLLLWTLLTTLTLLTTWLLLLLWTLWLLLTWTWWWTWWLWWWLLTW", "TTWWLWTLTLWWTLLWTLLWWLLWTLTTLWTWWLTWWWTTWLWLTLTW", "WWLLLWWWLWWWWLWLLLTWLLTTLLWLTLLTLLLTLWTWTLTTLLLL", "TLLTWTLLWLWLWWLLWTWLLWWTWLTLWWLLWLLWTWLTWLTLLWWW", "WLWTLLTLLLWWLLLLLLWWTWLLLLTWTLLLLTLLLTWWLTLLWTLW", "WTWWLLLLTTLWLTLLWLWTLWTWWLLWTLWLWLTTWLTTWTWWWWLL", "LLLWWWWLWLLWLLWLLLLLTTWTLLLTTTLWWLTLTLTTLWTWWTLW", "WWLWLTWWTWWLWWWWLTLTTLTTLTLLTWLWTWLTLWLWTLTWWLWL", "TTTTWLLWLTLLWTWWLTLLTTLLWLTTWWWWWLWWWTTLWTLLLLLL", "LLWTLWWTLWWWWLTTLLLLLTLLLTTWWLLWLLLTTWLTTWTWWWTW", "WLLLTWLTLTWLLLLLLLWTWWLLWLTLWWTLLLWTWWLLLWLTLWWW", "LTTLLLTWLLTTLTWLWLLWTLWTLWWTWLWWLWTWWLLLLWLWTWWL", "LLLTLLLLLTWLLWLLTLLWTWLTWTWLLLWTWWWWLTLTWWLLLTWW", "TTTLTWLTLWLWTLLWTLWLWLTLLWWLLTLLLTTWLWWWLWTLLLTL", "WTWLWWWWWWLTWTLLWTLWWTTWWLTWLWWTTLLWLLWLWWLLWLWT"};
    int p = 49;
    int q = 93;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> conflicts = {"TWLWLWTWWWWLWLWWWWLWTWWLWWLTTLWW", "LTTTLLLLWTWTWTLWLWTWLWLLWTLTLWLT", "WTTLWLWLWWWWLTLWWWWLWWTLLTWWWWLW", "LTWTWLLWTWWWTTWTTWTTLTWLWLLTTLLT", "WWLLTLWTWLLWWWTLTWLWWLLTWTLTLWWL", "LWWWWTLTTLWWTWLLLTLWLLTWWLTWWTLL", "TWLWLWTWWWWWLWWWLLLWLLWLTWWLWLLL", "LWWLTTLTWLWLLWTLWTWTWWWWLWLLWLLW", "LLLTLTLLTLLTWTLWWWLWWWWTLWLLLWWL", "LTLLWWLWWTTLLLWTLLLWWLLLLLWLWWWL", "LLLLWLLLWTTWWLTLLWWWWWLTLWWLWWLT", "WTLLLLLWTWLTLWLWWWLWWLLLWLWLWWTW", "LLWTLTWWLWLWTWTTLWWLWWLWLLTTLLLL", "WTTTLLLLTWWLLTWTWWLTLLTLWLWTWWWT", "LWWLTWLTWLTWTLTLWLWWWLLWWLTLWLWL", "LLLTWWLWLTWLTTWTWWLLWWTTLWLWLWWL", "LWLTTWWLLWWLWLLLTWWTLLLLWLWWTLLW", "LLLLLTWTLWLLLLWLLTWTLWWWLWWWWLLW", "WTLTWWWLWWLWLWLWLLTTLWLLLLTLWLTT", "LLWTLLLTLLLLWTLWTTTTTWWWLWLWWLLW", "TWLWLWWLLLLLLWLLWWWTTLWWTLWLWWTW", "LLLTWWWLLWLWLWWLWLLLWTLLLTWLLLWL", "LWTLWTLLLWWWWTWTWLWLLWTWWLTWWWLW", "WWWWTLWLTWTWLWLTWLWLLWLTWWLLLWTL", "LLWLLLTWWWWLWLLWLWWWTWLLTTLWWLLW", "LTTWTWLLLWLWWWWLWLWLWTWLTTLWWTLL", "WWLWWTLWWLLLTLTWLLTWLLTWWWTWWLLT", "TTLTTLWWWWWWTTWLLLWLWWLWLLLTWWWL", "TWLTWLLLWLLLWLLWTLLLLWLWLLLLTWLL", "WLLWLTWWLLLLWLWLWWWWLWLLWTWLLTWW", "LWWWLWWWLLWTWLLLWWTWTLWTWWWLWLTT", "LTLTWWWLWWTLWTWWLLTLLWLWLWTWWLTT"};
    int p = 4;
    int q = 93;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> conflicts = {"TTTWTTLLLWLTLWLLWLLTLLTTW", "TTWWTLWLLTLTWLLLLLWTWWLLW", "TLTWWLLWLLWLWWLWWLWLWWWLW", "LLLTLTWTLTWLWLWWWTLLTLTWW", "TTLWTWLLWWWWWWWTLWLLWTWWW", "TWWTLTTWWWLWWWWWWLWWWWLWL", "WLWLWTTWLLWLLTWLWLTLLWLLW", "WWLTWLLTTWWWLTWWTWWWWWLTL", "WWWWLLWTTLTLTWLWTWWWWLLWT", "LTWTLLWLWTWLTTTLWWTWWLLWL", "WWLLLWLLTLTTWLTLTLWTTWWTW", "TTWWLLWLWWTTTTLWWLTLLWLWT", "WLLLLLWWTTLTTWLTWWLTWLWLW", "LWLWLLTTLTWTLTWWWLTLWWLTW", "WWWLLLLLWTTWWLTLTWWLLWWLT", "WWLLTLWLLWWLTLWTWLLLLLWWL", "LWLLWLLTTLTLLLTLTWWWWLWLW", "WWWTLWWLLLWWLWLWLTWTWWLTL", "WLLWWLTLLTLTWTLWLLTWTWLLL", "TTWWWLWLLLTWTWWWLTLTLWLTL", "WLLTLLWLLLTWLLWWLLTWTWWLW", "WLLWTLLLWWLLWLLWWLLLLTWWL", "TWLTLWWWWWLWLWLLLWWWLLTLL", "TWWLLLWTLLTLWTWLWTWTWLWTT", "LLLLLWLWTWLTLLTWLWWWLWWTT"};
    int p = 38;
    int q = 71;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> conflicts = {"TWT", "LTT", "TTT"};
    int p = 21;
    int q = 29;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> conflicts = {"TWWLTTWWWWW", "LTLLWLLWWWL", "LWTTWWLLTWW", "WWTTWLLLLWL", "TLLLTLLWLLT", "TWLWWTTWTLW", "LWWWWTTTLWW", "LLWWLLTTLLT", "LLTWWTWWTWL", "LLLLWWLWLTW", "LWLWTLLTWLT"};
    int p = 38;
    int q = 28;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> conflicts = {};
    int p = 0;
    int q = 1;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> conflicts = {"TW", "LT"};
    int p = 1;
    int q = 0;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> conflicts = {"TLLLLLTWWWWTLLWWWT", "WTTWTTLLWLLWWLTLWW", "WTTWWTLWTWLWWWWLTW", "WLLTLTWWWTWLWLLWLT", "WTLWTLWWWWLLWLLWTW", "WTTTWTWLLWTLLWWWLW", "TWWLLLTLLWTWWWLLWW", "LWLLLWWTWLLWWLLLWT", "LLTLLWWLTTWLTWTLWT", "LWLTLLLWTTTLLLLWTW", "LWWLWTTWLTTTLLWWLL", "TLLWWWLLWWTTLWTTLL", "WLLLLWLLTWWWTWLLWW", "WWLWWLLWLWWLLTTWLL", "LTLWWLWWTWLTWTTTWT", "LWWLLLWWWLLTWLTTLW", "LLTWTWLLLTWWLWLWTW", "TLLTLLLTTLWWLWTLLT"};
    int p = 18;
    int q = 6;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> conflicts = {"TWWW", "LTWW", "LLTW", "LLLT"};
    int p = 0;
    int q = 0;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> conflicts = {"TW", "LT"};
    int p = 50;
    int q = 0;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> conflicts = {"TWW", "LTW", "LLT"};
    int p = 100;
    int q = 0;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> conflicts = {"TWWLL", "LTWWL", "LLTWW", "WLLTW", "WWLLT"};
    int p = 50;
    int q = 50;
    BalancedGame* pObj = new BalancedGame();
    clock_t start = clock();
    int result = pObj->result(conflicts, p, q);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=10420698&rd=8006&pm=4617
********************************************************************************
#line 93 "BalancedGame.cpp" 
#include <string> 
#include <stack> 
#include <queue> 
#include <vector> 
#include <algorithm> 
#include <cstdio> 
#include <cstdlib> 
#include <cctype> 
#include <cmath> 
#include <iostream> 
#include <sstream> 
#include <utility> 
#include <map> 
#include <set> 
using namespace std; 
typedef vector<int> VI;  typedef vector<vector<int> > VVI; 
typedef vector<string> VS;  typedef vector<vector<string> > VVS; 
typedef long long LL;   
 
#define REP(i,n) for(int _n=n, i=0;i<_n;++i) 
// BEGIN CODE: 
class BalancedGame { 
  public: 
  int result(vector <string> c, int p, int q) { 
        int N = c.size(); 
        int x = ceil((double)(N-1)*p/100)    ; 
            int y = ceil((double)(N-1)*q/100)  ;   
        REP(i,c.size()) { 
            int w,l; 
            w=l=0; 
            REP(j,c[i].size()) { 
                if (c[i][j] == 'W') w++; 
                else if (c[i][j] == 'L') l++; 
            } 
            if (w < x || l < y) return i;  
        } 
        return -1; 
  } 
   
 
}; 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/