/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11995
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class CheckerExpansion {
public:
    vector<string> resultAfter(long t, long x0, long y0, int w, int h);
};

vector<string> CheckerExpansion::resultAfter(long t, long x0, long y0, int w, int h) {
    vector<string> ret;
    return ret;
}


int test0() {
    long t = 1;
    long x0 = 0;
    long y0 = 0;
    int w = 4;
    int h = 4;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"....", "....", "....", "A..."};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    long t = 5;
    long x0 = 4;
    long y0 = 1;
    int w = 3;
    int h = 4;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"A..", "...", "B..", ".B."};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    long t = 1024;
    long x0 = 1525;
    long y0 = 512;
    int w = 20;
    int h = 2;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"B...B...B...........", ".B.A.B.A.B.........."};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    long t = 1000000000000;
    long x0 = 0;
    long y0 = 0;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    long t = 1000000000000;
    long x0 = 999999999900;
    long y0 = 999999999900;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    long t = 53;
    long x0 = 85;
    long y0 = 6;
    int w = 5;
    int h = 14;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".....", ".....", "B....", ".B.A.", ".....", ".....", ".....", ".....", ".....", ".....", "B....", ".B...", "..B..", ".A.B."};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    long t = 679602775797;
    long x0 = 751643451398;
    long y0 = 609519693026;
    int w = 18;
    int h = 22;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", "..................", ".................."};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    long t = 527959003168;
    long x0 = 257299044646;
    long y0 = 773484397761;
    int w = 28;
    int h = 15;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................", "............................"};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    long t = 938626756051;
    long x0 = 142272644309;
    long y0 = 100856877041;
    int w = 13;
    int h = 13;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".............", ".............", ".............", ".............", ".............", ".............", ".............", ".............", ".............", ".............", ".............", ".............", "............."};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    long t = 335554881855;
    long x0 = 265658101423;
    long y0 = 621618981818;
    int w = 21;
    int h = 45;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    long t = 649945297836;
    long x0 = 253810759486;
    long y0 = 100074117028;
    int w = 15;
    int h = 27;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    long t = 222332285533;
    long x0 = 68319652758;
    long y0 = 95663685246;
    int w = 20;
    int h = 40;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    long t = 755009382459;
    long x0 = 331449088893;
    long y0 = 38720111700;
    int w = 26;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    long t = 841962939614;
    long x0 = 4581745762;
    long y0 = 3766489094;
    int w = 16;
    int h = 14;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".B.......B......", "A.B.....A.B.....", "...B...B...B....", "B.A.B.A.B.A.B...", ".............B..", "............A.B.", "...........B...B", "..........A.B.A.", ".........B......", "........A.B.....", ".......B...B...B", "......A.B.A.B.A.", ".....B..........", "....A.B........."};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    long t = 961195159132;
    long x0 = 8209672372;
    long y0 = 7621134326;
    int w = 9;
    int h = 18;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"...B.....", "..A.B....", ".B...B...", "A.B.A.B..", ".......B.", "B.....A.B", ".B...B...", "A.B.A.B.A", ".........", ".........", ".........", ".........", ".........", ".........", ".........", ".........", ".........", "........."};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    long t = 423056240991;
    long x0 = 3567691065;
    long y0 = 35166256;
    int w = 46;
    int h = 5;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".B.........A.B.A.B............................", "..B.......B.......B...........................", ".A.B.....A.B.....A.B..........................", "B...B...B...B...B...B.........................", ".B.A.B.A.B.A.B.A.B.A.B........................"};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    long t = 121652718325;
    long x0 = 3869676544;
    long y0 = 3225848336;
    int w = 38;
    int h = 22;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    long t = 569269002631;
    long x0 = 718088861036;
    long y0 = 303534338108;
    int w = 42;
    int h = 10;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".........B...B...........B...B...........B", "........A.B.A.B.........A.B.A.B.........A.", ".......B.......B.......B.......B.......B..", "B.....A.B.....A.B.....A.B.....A.B.....A.B.", ".B...B...B...B...B...B...B...B...B...B...B", "A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.", "..........................................", "..........................................", "..........................................", ".........................................."};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    long t = 313282560;
    long x0 = 591169985;
    long y0 = 196895;
    int w = 23;
    int h = 41;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    long t = 532361565818;
    long x0 = 98353056435;
    long y0 = 428605538;
    int w = 35;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    long t = 314065649311;
    long x0 = 523684189;
    long y0 = 478741803;
    int w = 38;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    long t = 1250;
    long x0 = 1234;
    long y0 = 1244;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    long t = 22001977010;
    long x0 = 4579474508;
    long y0 = 268599873;
    int w = 49;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    long t = 427181356848;
    long x0 = 350973827119;
    long y0 = 171926898228;
    int w = 47;
    int h = 45;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    long t = 392170939097;
    long x0 = 717986484428;
    long y0 = 28190150705;
    int w = 45;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    long t = 186625051038;
    long x0 = 95921191614;
    long y0 = 34969232437;
    int w = 49;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    long t = 287976195065;
    long x0 = 300922238829;
    long y0 = 275013207573;
    int w = 49;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    long t = 549875162607;
    long x0 = 549892320229;
    long y0 = 549757977557;
    int w = 46;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    long t = 78172190763;
    long x0 = 146673604969;
    long y0 = 9016317260;
    int w = 49;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    long t = 100677359661;
    long x0 = 109109738260;
    long y0 = 91392925718;
    int w = 47;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"...............................................", "..............................................A", ".............................................B.", "............................................A.B", "...........................................B...", "..........................................A.B..", ".........................................B...B.", "........................................A.B.A.B", ".......................................B.......", "......................................A.B.....A", ".....................................B...B...B.", "....................................A.B.A.B.A.B", "...................................B...........", "..................................A.B..........", ".................................B...B.........", "................................A.B.A.B........", "...............................B.......B.......", "..............................A.B.....A.B.....A", ".............................B...B...B...B...B.", "............................A.B.A.B.A.B.A.B.A.B", "...........................B...................", "..........................A.B..................", ".........................B...B.................", "........................A.B.A.B................", ".......................B.......B...............", "......................A.B.....A.B..............", ".....................B...B...B...B.............", "....................A.B.A.B.A.B.A.B............", "...................B...............B...........", "..................A.B.............A.B..........", ".................B...B...........B...B.........", "................A.B.A.B.........A.B.A.B........", "...............B.......B.......B.......B.......", "..............A.B.....A.B.....A.B.....A.B.....A", ".............B...B...B...B...B...B...B...B...B.", "............A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B", "...........B...................................", "..........A.B..................................", ".........B...B.................................", "........A.B.A.B................................", ".......B.......B...............................", "......A.B.....A.B..............................", ".....B...B...B...B.............................", "....A.B.A.B.A.B.A.B............................", "...B...............B...........................", "..A.B.............A.B.........................."};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    long t = 49389802810;
    long x0 = 15520017261;
    long y0 = 1477380162;
    int w = 48;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    long t = 501937597387;
    long x0 = 237674560426;
    long y0 = 2281702295;
    int w = 47;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    long t = 716087155557;
    long x0 = 229391343722;
    long y0 = 174215135316;
    int w = 50;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    long t = 617858313061;
    long x0 = 357930592522;
    long y0 = 191220978927;
    int w = 46;
    int h = 45;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    long t = 624477368561;
    long x0 = 353228137921;
    long y0 = 193840042436;
    int w = 49;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    long t = 63715976458;
    long x0 = 97684720734;
    long y0 = 26598572545;
    int w = 46;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "B.............................................", ".B............................................", "A.B...........................................", "...B..........................................", "B.A.B.........................................", ".....B........................................", "....A.B.......................................", "...B...B......................................", "B.A.B.A.B.....................................", ".........B....................................", "........A.B...................................", ".......B...B..................................", "......A.B.A.B.................................", ".....B.......B................................", "....A.B.....A.B...............................", "...B...B...B...B..............................", "B.A.B.A.B.A.B.A.B.............................", ".................B............................", "................A.B...........................", "...............B...B..........................", "..............A.B.A.B.........................", ".............B.......B.......................B", "............A.B.....A.B.....................A.", "...........B...B...B...B...................B..", "..........A.B.A.B.A.B.A.B.................A.B.", ".........B...............B...............B....", "........A.B.............A.B.............A.B...", ".......B...B...........B...B...........B...B..", "......A.B.A.B.........A.B.A.B.........A.B.A.B.", ".....B.......B.......B.......B.......B.......B", "....A.B.....A.B.....A.B.....A.B.....A.B.....A.", "...B...B...B...B...B...B...B...B...B...B...B.."};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    long t = 301142035343;
    long x0 = 601708394924;
    long y0 = 123356172;
    int w = 45;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    long t = 220094611978;
    long x0 = 363941437745;
    long y0 = 71812251670;
    int w = 48;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"..................B.......B.......B.......B.....", ".................A.B.....A.B.....A.B.....A.B....", "................B...B...B...B...B...B...B...B...", "...............A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A", "..............B.................................", ".............A.B................................", "............B...B...............................", "...........A.B.A.B..............................", "..........B.......B.............................", ".........A.B.....A.B............................", "........B...B...B...B...........................", ".......A.B.A.B.A.B.A.B..........................", "......B...............B.........................", ".....A.B.............A.B........................", "....B...B...........B...B.......................", "...A.B.A.B.........A.B.A.B......................", "..B.......B.......B.......B.....................", ".A.B.....A.B.....A.B.....A.B....................", "B...B...B...B...B...B...B...B...................", ".B.A.B.A.B.A.B.A.B.A.B.A.B.A.B..................", "..............................B.................", ".............................A.B................", "B...........................B...B...............", ".B.........................A.B.A.B..............", "..B.......................B.......B.............", ".A.B.....................A.B.....A.B............", "B...B...................B...B...B...B...........", ".B.A.B.................A.B.A.B.A.B.A.B..........", "......B...............B...............B.........", ".....A.B.............A.B.............A.B........", "....B...B...........B...B...........B...B.......", "...A.B.A.B.........A.B.A.B.........A.B.A.B......", "..B.......B.......B.......B.......B.......B.....", ".A.B.....A.B.....A.B.....A.B.....A.B.....A.B....", "B...B...B...B...B...B...B...B...B...B...B...B...", ".B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B..", "..............................................B.", ".............................................A.B", "............................................B...", "...........................................A.B.A", "..........................................B.....", ".........................................A.B....", "........................................B...B...", ".......................................A.B.A.B.A", "......................................B.........", ".....................................A.B........"};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    long t = 810973226555;
    long x0 = 42432648380;
    long y0 = 21494636599;
    int w = 46;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    long t = 986498469333;
    long x0 = 982965598569;
    long y0 = 981803746882;
    int w = 46;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    long t = 58203262705;
    long x0 = 19504872765;
    long y0 = 1149804706;
    int w = 45;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    long t = 815347097641;
    long x0 = 758633057064;
    long y0 = 688672049685;
    int w = 48;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    long t = 269962303941;
    long x0 = 215697576251;
    long y0 = 7324502182;
    int w = 45;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    long t = 274042536744;
    long x0 = 420395712261;
    long y0 = 76796231302;
    int w = 48;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    long t = 642340067543;
    long x0 = 591812581788;
    long y0 = 557089554725;
    int w = 46;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    long t = 356073976149;
    long x0 = 152281381259;
    long y0 = 104734750030;
    int w = 47;
    int h = 45;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    long t = 329193341487;
    long x0 = 638447895368;
    long y0 = 19935539763;
    int w = 47;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    long t = 822513639938;
    long x0 = 960509954357;
    long y0 = 619029071413;
    int w = 49;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    long t = 187322262781;
    long x0 = 93624229527;
    long y0 = 75302440977;
    int w = 46;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    long t = 212558707866;
    long x0 = 177369532816;
    long y0 = 73602451024;
    int w = 50;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    long t = 182530080103;
    long x0 = 183992994766;
    long y0 = 181005731890;
    int w = 48;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    long t = 873562319261;
    long x0 = 803342332922;
    long y0 = 802706858755;
    int w = 49;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    long t = 471494909291;
    long x0 = 447388238155;
    long y0 = 300732981585;
    int w = 46;
    int h = 45;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    long t = 119652239703;
    long x0 = 163031818310;
    long y0 = 7606640133;
    int w = 45;
    int h = 45;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    long t = 227867180707;
    long x0 = 84968892894;
    long y0 = 78215663643;
    int w = 48;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    long t = 585039310992;
    long x0 = 585142995790;
    long y0 = 584922980433;
    int w = 49;
    int h = 45;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    long t = 398082475592;
    long x0 = 707317697736;
    long y0 = 88282391342;
    int w = 47;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "...............................................", "B..............................................", ".B.............................................", "A.B............................................", "...B...........................................", "..A.B..........................................", ".B...B.........................................", "A.B.A.B........................................", ".......B.......................................", "......A.B......................................"};
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    long t = 361724312503;
    long x0 = 381963408048;
    long y0 = 105430387235;
    int w = 48;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    long t = 824169968749;
    long x0 = 638446894021;
    long y0 = 18280119169;
    int w = 47;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    long t = 625406303504;
    long x0 = 230643493643;
    long y0 = 17181049483;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    long t = 705586176445;
    long x0 = 394190039227;
    long y0 = 292863688772;
    int w = 46;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", "..............................................", ".............................................."};
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    long t = 157663634735;
    long x0 = 158606317211;
    long y0 = 154887464467;
    int w = 46;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    long t = 620400516500;
    long x0 = 589615973001;
    long y0 = 554656938582;
    int w = 45;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    long t = 326918781985;
    long x0 = 329345435748;
    long y0 = 318037329477;
    int w = 46;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    long t = 118220466224;
    long x0 = 117380660465;
    long y0 = 112374334195;
    int w = 45;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    long t = 67093726457;
    long x0 = 65696841143;
    long y0 = 2871537728;
    int w = 48;
    int h = 46;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    long t = 270016178416;
    long x0 = 281845177192;
    long y0 = 258104892179;
    int w = 47;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    long t = 403186427667;
    long x0 = 421050745937;
    long y0 = 76848759860;
    int w = 31;
    int h = 4;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"...............................", "...............................", "...............................", "..............................."};
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    long t = 426434293862;
    long x0 = 216282255010;
    long y0 = 206565813570;
    int w = 35;
    int h = 47;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    long t = 171498057148;
    long x0 = 191446614684;
    long y0 = 151532101703;
    int w = 35;
    int h = 48;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    long t = 353976646170;
    long x0 = 364227393891;
    long y0 = 343622874710;
    int w = 15;
    int h = 33;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    long t = 946917800636;
    long x0 = 932703219984;
    long y0 = 919212015759;
    int w = 42;
    int h = 3;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".B...B...B...B...B...B...B...B............", "A.B.A.B.A.B.A.B.A.B.A.B.A.B.A.B...........", "...............................B.........."};
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    long t = 453156750788;
    long x0 = 366551436830;
    long y0 = 311486841104;
    int w = 28;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    long t = 31066245595;
    long x0 = 46910400810;
    long y0 = 4488431627;
    int w = 20;
    int h = 19;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "B...................", ".B..................", "A.B.................", "...B................", "B.A.B...............", ".....B..............", "....A.B.............", "...B...B............", "..A.B.A.B...........", ".B.......B.........."};
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    long t = 244950415594;
    long x0 = 241823855022;
    long y0 = 241810581509;
    int w = 8;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    long t = 903844891236;
    long x0 = 177030148933;
    long y0 = 96756380196;
    int w = 4;
    int h = 8;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"....", "....", "....", "...A", "..B.", ".A.B", "B...", ".B.A"};
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    long t = 431258501041;
    long x0 = 103654420917;
    long y0 = 26344718410;
    int w = 3;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"..."};
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    long t = 166533504048;
    long x0 = 148035479345;
    long y0 = 4363243561;
    int w = 2;
    int h = 32;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", ".A", "B.", ".B", "..", "..", "B.", ".B", "..", ".A", "B."};
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    long t = 812735458838;
    long x0 = 698300980099;
    long y0 = 674326859898;
    int w = 4;
    int h = 32;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "....", "B...", ".B.."};
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    long t = 915630015369;
    long x0 = 390126199955;
    long y0 = 378572260192;
    int w = 1;
    int h = 9;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {".", ".", ".", ".", ".", "B", ".", ".", "."};
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    long t = 761703165272;
    long x0 = 973626525341;
    long y0 = 549758173347;
    int w = 3;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "..."};
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    long t = 868206227067;
    long x0 = 991141206512;
    long y0 = 644858582020;
    int w = 3;
    int h = 20;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"...", "...", "...", "...", "...", "...", "...", "...", "...", "B..", ".B.", "A.B", "...", "..A", ".B.", "A.B", "...", "...", "...", "..."};
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    long t = 694617519438;
    long x0 = 617093666026;
    long y0 = 340663570659;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    long t = 872218734186;
    long x0 = 456219066896;
    long y0 = 455337079299;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    long t = 303650775418;
    long x0 = 381674616391;
    long y0 = 97180648757;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    long t = 582365504861;
    long x0 = 582971765866;
    long y0 = 567938828306;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"A"};
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    long t = 326387796408;
    long x0 = 456959677654;
    long y0 = 35702997718;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"A"};
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    long t = 433165417941;
    long x0 = 590904107149;
    long y0 = 275046784067;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    long t = 188338688302;
    long x0 = 98771982765;
    long y0 = 19330696482;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    long t = 692005967774;
    long x0 = 421946189204;
    long y0 = 112500392260;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"A"};
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    long t = 788111792411;
    long x0 = 856798386566;
    long y0 = 19345294468;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    long t = 320393435214;
    long x0 = 331529039495;
    long y0 = 309238173814;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    long t = 478941011598;
    long x0 = 511885218667;
    long y0 = 305087400721;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    long t = 224775070214;
    long x0 = 362680956566;
    long y0 = 10342565491;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    long t = 152593024438;
    long x0 = 164412299866;
    long y0 = 138096448837;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    long t = 483912409864;
    long x0 = 697989297525;
    long y0 = 143619262563;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    long t = 763396800558;
    long x0 = 643879772658;
    long y0 = 558701232404;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    long t = 844761601720;
    long x0 = 730898936952;
    long y0 = 348643172980;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"A"};
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    long t = 635508119926;
    long x0 = 631499436896;
    long y0 = 621834045509;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    long t = 753253996661;
    long x0 = 843105714811;
    long y0 = 550963978850;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    long t = 30844676097;
    long x0 = 38130750369;
    long y0 = 19327666209;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"B"};
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    long t = 897724537072;
    long x0 = 294393385018;
    long y0 = 154664976437;
    int w = 1;
    int h = 1;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {"."};
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    long t = 1000000000000;
    long x0 = 900000000000;
    long y0 = 899999999994;
    int w = 50;
    int h = 49;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    long t = 1000000000000;
    long x0 = 1000000000000;
    long y0 = 900000000000;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    long t = 8019369461;
    long x0 = 6790998641;
    long y0 = 4574177340;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    long t = 1000000000000;
    long x0 = 2;
    long y0 = 3;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    long t = 1000000000000;
    long x0 = 1251241;
    long y0 = 0;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    long t = 1000000000000;
    long x0 = 499999999997;
    long y0 = 499999999999;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    long t = 1000000000000;
    long x0 = 200000000000;
    long y0 = 0;
    int w = 50;
    int h = 50;
    CheckerExpansion* pObj = new CheckerExpansion();
    clock_t start = clock();
    vector<string> result = pObj->resultAfter(t, x0, y0, w, h);
    clock_t end = clock();
    delete pObj;
    vector<string> expected = {};
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22714443&rd=15172&pm=11995
********************************************************************************
//  SRM 550 (B) 
 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <cmath> 
#include <cassert> 
#include <iostream> 
#include <sstream> 
#include <string> 
#include <vector> 
#include <queue> 
#include <set> 
#include <map> 
#include <utility> 
#include <numeric> 
#include <algorithm> 
#include <bitset> 
#include <complex> 
 
using namespace std; 
 
typedef unsigned uint; 
typedef long long Int; 
typedef vector<int> vint; 
typedef pair<int,int> pint; 
#define mp make_pair 
 
template<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; } 
template<class T> void chmin(T &t, T f) { if (t > f) t = f; } 
template<class T> void chmax(T &t, T f) { if (t < f) t = f; } 
 
 
 
struct CheckerExpansion { 
   
  int choose(Int n, Int k) { 
    if (!(0 <= k && k <= n)) return 0; 
    if (~n & k) return 0; 
    return 1; 
  } 
   
  char solve(Int t, Int x, Int y) { 
    if ((x + y) % 2 != 0) { 
      return '.'; 
    } 
    if ((x + y) / 2 > t) { 
      return '.'; 
    } 
    return choose((x + y) / 2, y) ? "AB"[(x + y) / 2 % 2] : '.'; 
  } 
   
  vector <string> resultAfter(long long t, long long x0, long long y0, int w, int h) { 
     
     
    vector<string> ans(h, string(w, '?')); 
     
    for (int i = 0; i < h; ++i) for (int j = 0; j < w; ++j) { 
      //  x=x0+j and y=y0+h-i-1 after t turns.  
      ans[i][j] = solve(t - 1, x0 + j, y0 + h - i - 1); 
    } 
     
    return ans; 
     
  } 
   
};

********************************************************************************
*******************************************************************************/