/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=3005
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class LargestCircle {
public:
    int radius(vector<string> grid);
};

int LargestCircle::radius(vector<string> grid) {
    int ret;
    return ret;
}


int test0() {
    vector<string> grid = {"####", "#..#", "#..#", "####"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> grid = {"############", "###......###", "##.######.##", "#.########.#", "#.##..####.#", "#.##..####.#", "#.########.#", "#.########.#", "#.########.#", "##.######.##", "###......###", "############"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> grid = {".........."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> grid = {"#######", "#######", "#######", "#######", "#######"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> grid = {"#####.......", "#####.......", "#####.......", "............", "............", "............", "............", "............", "............", "............"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> grid = {"###########......########", "###......#.######.#######", "##..####..########......#", "##.######.########.####.#", "##.######.########.####.#", "##.######.########.####.#", "##.######.########.####.#", "##..####..########......#", "###......#.######.#######", "###########......########"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> grid = {"##################################################", "##################################################", "#################..............###################", "##############....############....################", "############...#..............###...##############", "##########.......############....##...############", "#########.....#..............###...##..###########", "########........############....##..##..##########", "#######......#..............###...#...#..#########", "######.....#...############...###..##..#..########", "#####......................##...##..##..#..#######", "####..........############...##...#...#..#..######", "###.........################...##..##..#..#..#####", "###.......####################..##..##.##.##.#####", "##......########################..#..#..#..#..####", "##.....##########################..#..#..#..#.####", "#.....############################..#..#..#.#..###", "#....##############################.##.##.#..#.###", "#...################################.#..#..#.#.###", "....################################..#.##.#.#..##", "...##################################.#..#.#..#.##", "...##################################..#.#..#.#.##", "..####################################.#..#.#.#.##", "..####################################..#.#.#.#.##", ".######################################.#.#.#.#.##", ".######################################.#.#.#.#.##", ".######################################.#.#.#.#.##", ".######################################.#.#.#.#.##", ".######################################.#.#.#.#.##", ".######################################.#.#.#.#.##", ".######################################.#.#.#.#.##", ".######################################.#.#.#.#.##", "..#####################################.#.#.#...##", "..#####################################.#.#....###", "..#####################################.#....#.###", "...####################################....#...###", "...###################################...#....####", "#...##################################........####", "#...#################################...#....#####", "##...################################........#####", "##....##############################........######", "###....#############################.......#######", "####....###########################.......########", "####.....#########################.......#########", "#####.....#######################.......##########", "######.....#####################.......###########", "########.....#################........############", "#########......#############........##############", "###########.......########........################", "#############..................###################"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> grid = {"#######################", "#######..........######", "#####..............####", "####................###", "###.....########.....##", "##.....##########.....#", "##....############....#", "#....##############....", "#...################...", "#...################...", "#...################...", "#...################...", "#...################...", "#...################...", "#...################...", "#...################...", "#....##############....", "##....############....#", "##.....##########.....#", "###.....########.....##", "####................###", "#####..............####", "#######..........######"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> grid = {".................................................."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> grid = {"..................................................", ".................................................."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> grid = {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> grid = {"..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", "..", ".."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> grid = {"."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> grid = {"..", ".."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> grid = {"...", "...", "..."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> grid = {"...", ".#.", "..."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> grid = {"......####", ".####.####", ".####.####", ".####.####", ".####.####", "......####", "######....", "######.##.", "######.##.", "######...."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> grid = {"######....", "######.##.", "######.##.", "######....", "......####", ".####.####", ".####.####", ".####.####", ".####.####", "......####"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> grid = {"....######", ".##.######", ".##.######", "....######", "####......", "####.####.", "####.####.", "####.####.", "####.####.", "####......"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> grid = {"####......", "####.####.", "####.####.", "####.####.", "####.####.", "####......", "....######", ".##.######", ".##.######", "....######"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> grid = {"#..........#...#.#.#..###.#......##....#", "...#......#..#....#...#..#......#......#", ".#.........#..#.....#.......##...#.#....", "..#......#...#...#..##..#..#.#........#.", "..#.....#......#.#........#.....#...#..#", ".......#...#..#.#.....#......##...#..#..", "..###..#.#..#.##.....#.....#.........##.", "..#....#.#..............##.....#......#.", "..#...#.....#..#...#....#.#..#....##.#..", "...........#.####...#.......#.##.##....#", "#...##....#.###...#####.....#....#.....#", "##............#.....#....###.#.....#...#", ".#..###...#...##..#....##........#....#.", "..#.#...................#....#...#...#..", "..#....##.#....#....#...#...#..#....#..#", "....#..............##.##...#.#...#...#.#", "#...............#.#...#..#.###...#...##.", ".#..#........##......##...#.#..#.#...#..", "....##........#.......##...####........#", "..........###..#......##..#..##..#...#..", ".....#............#.......##..#.#..#...#", "....#...#.#....#...#..#..##...#...#.....", "#.....##..#.#.........##.#..#....###....", "#.#.....#.#.##....#...#..#...#..#.#..#..", ".....#.#..#............#..#.#..#.......#", "..#..........#.##.#..#..........#..##...", ".....#..........#...#.......##..........", "#.....#...#...#..#...#.#......#...#.....", ".#.##.......#.........##.#..#..####.....", ".......#.#####..#....#..#......#.#......", "............#....#..##.#.#........###.##", "..#...#..#.#.#.......#...#.......#...#..", "......#........#...#...........#.....#.#", "#..#....##..#............#..#......#....", ".##...#...#......#..#....#......##...#.#", "...#..#...#..#.##...#......#...#.......#", "......#......#....#.#.#...#..##.........", "#........##........###....###...........", "....#....#...........##.#......##.....#.", "...........#..##............###.##.##...", "###.....#....#...#...#...#........#####.", "##.#..........#...#......#.#.#.....###.#", ".....#.#.#.#......#..#.#.....#.....#....", ".#.##......#...#.....#.#.#..#....#.....#", ".#......#......#.#..#......#.......##...", "##...#....#.#.........#.....#.#..#......", "....#.....####.##..##.....#.#...#....#..", ".#....#..#.#..##...#..##....##..#.##....", "........#.....##....#........##.....#..#", "##.##.#...#......#.#.#..#....##...##.#.."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> grid = {"......#.#..##.#....#.#...#..##..##..##........#..#", ".....##.#...#.#...#...#.....#..#.....#........#..#", "............##.#....#.......#...##..#..##..#....#.", "#......#...#....###.##.....##...........#.#.......", "..........##.........#.#..........#...#.#.......#.", "#..#...#....#...........#....##.#..#.#....#......#", "........#...........#...#.##..#...#....#......##..", ".#.#.....#....#.#....#......#....##............##.", ".####.#.##..##......##.###...#.........###.....#..", ".......#.#.#.#..#...#.#...........##...#.....#...#", "..............#.#..........##.##....#...#.###.....", "..............#.....#....#....#.#....#.......##...", ".......................#.#......#.#...##..........", "..............##.###.##.....#..#........#........#", "#..##...#...#.....#..........#...#...#..#...#.....", ".#.........#.####.....#.......#...................", "....#...##.....#.#..#....#..............#...##...#", "......#.#.#.####..#....##.#..#..###..#.#..#.......", ".###...........#..#.#..........#.#.###.#...#......", "##.#......##.#...#.....##..#...#....##.#....#.....", "#.#..........#.##........#........#.....####.#.#..", "...##...#...#.#...............#....##.#.#...#..#..", "......##........##.#....#....####.#....#.#...#...#", "...#..#.....#....#.............#...#...#.#.#...##.", "..#.......##....#.#.#..##.....#...#...#..#....#..#", "#.#......##..#.#....#..##......#.#..##..#.#.#....#", ".................##.....#...##.....##.#....#....#.", "...........#.......#..........#.......#.#..#.#....", "#...#............##....#........#.....#...#...#.#.", ".#..#..#........#......#..#.............##........", ".........##.........###....#.......#..........#...", "..........#....#..##...#...#...#............##....", "#........#............#.##.......##......#.....#.#", "#...##.#........##...#............##..#..#....#...", "#...#..#.....#.......#.#.#........#..#.#........#.", ".#.#.#.........#...#...#.......##...#..#.##.##...#", "...#..##....#..##..#..#........#.....#....#....#..", "....###....#..###...#.......#........#.##.......#.", ".#..##..#..#..#.#.#..####......#............##..#.", ".......#.....###.###...#.........##............#.."};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> grid = {"........#.........##......#.....##...............#", "#.............#.#.#..###.......#...#.....#........", "......#.......#.....#..#...........##.#........#..", "............#...#.................###..##.....#...", ".#.......#....#..#.................#........#.....", "......#...#........#...#...............##.........", "#.#..........#..............#..#...............#..", ".............#....#.......#.............#...#....#", "#...#...#....#.........#...........#...#...###....", ".......#..#....#...............#.....#..........#.", "....#.....##.........#.....#..........#.....#.....", "...#...........##........#......#.#...............", ".##........#....#...........#...#.................", "..##....##.....#...#...#.................#........", "....#..#.....................#.......#....##..#.#.", "#...#........#....###..#...#.............#..##....", "......................#.........#.#......#...#.#..", "....##.....#...........##.#....#......#.#....#....", "..#.#............#.......#........................", "....#................#........#.##............#...", "...#.#.....#.##....#...#...........#............#.", "........#........##.........#...#.#....#.#.....#..", "..........................#.#........#.#..........", "...........#........#..#..#....#.....#........#...", "...............................#.#......#....#....", "...#...#...#.......#...#.........#........#.#.....", ".#...#....#............#..#..........#.#.........#", "...........#...........#.............#...#........", "...........#........#...............#.#...#.......", ".......#.....#...#............#.................#.", "......#..#....#.......#...........#..#........##..", "....##....#...#.#........##......#.#......#.#.#...", "...#..#...#....#......#.........#.......#...#.....", "................#............#....#...............", ".................##...#..#...#............#.#.....", "......#......................#....##..........#...", "#...#.##.#......#....#..................##..#...#.", ".......................#...#....#.......#......#..", "###..##...#..#....#.....#..........#..........###.", "......##...#.........#..#.........................", "............#.#....##......#..#..................#", "...................#......................#.....##", ".........#.#.#........................#.#.#.#.#...", "#............#.....#......................#.#.....", "..#...#............#..#...#...............#......#"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> grid = {};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> grid = {"############", "###......###", "##.######.##", "#.########.#", "#.##..####.#", "#.##..####.#", "#.########.#", "#.########.#", "#.########.#", "##.######.##", "###......###", "############"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> grid = {"#####.......", "#####.......", "#####.......", "............", "............", "............", "............", "............", "............", "............"};
    LargestCircle* pObj = new LargestCircle();
    clock_t start = clock();
    int result = pObj->radius(grid);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=10484254&rd=5858&pm=3005
********************************************************************************
#include <string>
#include <vector>
using namespace std;
 
class LargestCircle {
public:
int radius(vector<string> grid)
{
  //vector< vector<int> > corners;
 
  int mindim = grid[0].length();
  if(grid.size() < mindim) mindim = grid.size();
 
  /*for(int y = 0; y <= grid.size(); y++)
  {
    vector<int> row;
    for(int x = 0; x <= grid[0].length(); x++)
      row.push_back(0);
    corners.push_back(row);
  }*/
  
  int in[2][2];
  for(int r = mindim; r > 0; r--)
    for(int oy = r; oy <= grid.size() - r; oy++)
      for(int ox = r; ox <= grid[0].length() - r; ox++)
      {
        bool good = true;
        for(int gy = 0; gy < grid.size() && good; gy++)
        for(int gx = 0; gx < grid[0].length() && good; gx++)
        if(grid[gy][gx] == '#')
        {
          int rx, ry;
          rx = gx - ox;
          ry = gy - oy;
          in[0][0] = rx * rx + ry * ry - r * r;
          in[1][0] = rx * rx + (ry + 1) * (ry + 1) - r * r;
          in[0][1] = (rx + 1) * (rx + 1) + ry * ry - r * r;
          in[1][1] = (rx + 1) * (rx + 1) + (ry + 1) * (ry + 1) - r * r;
          if(in[0][0] <= 0 && in[1][0] <= 0 && in[0][1] <= 0 && in[1][1] <= 0)
            good = true;
          else if(in[0][0] >= 0 && in[1][0] >= 0 && in[0][1] >= 0 && in[1][1] >= 0)
            good = true;
          else
            good = false;
        }
        if(good) return r;
      }
  return 0;
}
};

********************************************************************************
*******************************************************************************/