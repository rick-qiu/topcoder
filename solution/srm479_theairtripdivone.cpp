/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11030
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TheAirTripDivOne {
public:
    int find(int n, vector<string> flights, int time);
};

int TheAirTripDivOne::find(int n, vector<string> flights, int time) {
    int ret;
    return ret;
}


int test0() {
    int n = 3;
    vector<string> flights = {"1,2,1,4,7 ", "2,3,9,1,10"};
    int time = 20;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    int n = 3;
    vector<string> flights = {"1,2,1,1,1 2,3,2,1,98"};
    int time = 100;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    int n = 477;
    vector<string> flights = {"47,74,1,1,1"};
    int time = 20;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    int n = 7;
    vector<string> flights = {"1,3,15,17,11 1,3,14,16,14 5,7,12,18,18 1,6,13,1", "6,12 1,2,18,14,13 5,6,10,10,18 3,1,10,10,10 1,3", ",17,16,10 2,3,16,18,16 6,1,15,12,10 2,1,15,18,1", "0 4,7,10,16,15 6,3,10,14,10 1,6,19,19,15 1,4,12", ",10,14 4,7,10,18,14 2,3,16,12,12 1,3,14,10,19 3", ",7,17,10,12 2,1,14,12,16 4,3,19,11,12 1,6,10,18", ",12 2,3,16,12,10 6,2,10,18,12 5,1,14,18,12 5,1,", "18,10,10 3,2,19,15,10 7,4,16,19,14 6,3,16,12,10", " 5,7,14,13,13 1,3,12,10,16 5,7,16,18,15 6,2,18,", "12,14 3,2,10,18,16 4,2,18,18,14 1,5,10,18,16 2,", "3,10,19,16 1,4,11,18,15 2,1,15,15,14 7,2,10,12,", "10"};
    int time = 74;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    int n = 3;
    vector<string> flights = {"3,2,433,781,482 3,2,701,725,556 3,1,313,701,145", " 2,1,156,97,483 1,2,105,33,986 2,1,987,657,689 ", "3,2,182,486,817"};
    int time = 725;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    int n = 5;
    vector<string> flights = {"5,3,159,109,81 2,1,734,26,605 2,4,521,1,981 5,1", ",440,521,651 4,1,843,741,353 5,3,201,125,245 1,", "3,278,846,297 5,4,761,269,951 3,4,279,711,361 4", ",3,65,777,751 1,2,207,433,945 1,2,101,461,661 4", ",5,225,911,804"};
    int time = 295;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    int n = 4;
    vector<string> flights = {"2,1,481,519,153 1,3,31,538,553 2,3,521,869,276 ", "4,1,761,689,476 1,2,821,313,876 1,3,966,431,876", " 3,1,709,230,33"};
    int time = 476;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    int n = 9;
    vector<string> flights = {"1,6,567226,749388,890852 3,1,38165,597007,61554", "5 4,5,341523,427799,215529 9,4,447134,90227,426", "873 4,3,221269,909135,655784 7,2,379061,873981,", "670529 3,8,352031,923811,79501 1,7,776868,57213", "7,71041 1,3,255907,557677,268590 1,4,450721,230", "963,31779 2,6,547831,998222,161665 7,4,666286,4", "02971,581613 3,4,903381,151438,145360 9,1,14500", "6,295423,219949 9,6,734385,331901,51111 3,7,695", "685,511396,708701 9,3,400517,446253,551313 7,4,", "465310,521105,160985 1,8,273565,847795,513793 7", ",3,449576,362900,440002 9,1,65045,401681,128239", " 1,5,992803,460831,267979 7,1,676069,774961,347", "889 9,5,621399,763105,148239 7,9,289133,257989,", "363401 2,7,342369,182390,532866 8,3,267489,8540", "70,123425 7,2,828105,942657,140876 9,3,418701,5", "07655,494798 8,4,476636,311553,546031 9,7,95191", "5,333037,953719 3,1,856897,371241,711629 8,4,99", "3265,69513,405770 1,6,860997,134189,474073 1,7,", "615219,370429,391025 3,7,982251,869479,524737 7", ",1,152311,859640,474687 9,6,430121,304961,80755", "2 3,4,968733,381357,218042 2,9,403321,220263,25", "5901 9,3,187633,426751,917161 7,3,539745,950717", ",256887 4,6,976353,947089,643601 1,6,533551,453", "753,74595 1,2,93156,97499,270876 6,4,556358,592", "376,440641 8,6,697482,781818,212561 1,3,3941,76", "799,331701 5,9,772401,787463,386281 6,4,309232,", "452851,308881 1,7,10145,289261,213201 8,1,21448", "3,881783,701328 4,2,487105,757033,514986 1,3,58", "4989,647081,442987 6,4,315634,762317,473182 6,4", ",485151,221667,662295 5,4,260516,942301,755580 ", "3,8,73109,574081,435177 7,1,496026,633605,54484", "8 7,4,595209,502521,563001 6,1,897841,830440,81", "9521 3,1,618551,783843,727741 7,5,115161,740785", ",137988 7,1,678245,417748,41648 3,7,192278,5268", "46,46297 7,8,268951,985061,926090 4,9,483279,76", "0711,399361 1,4,890065,743777,903751 1,7,289207", ",394433,73945 5,8,724189,998479,138216 2,1,9334", "61,222661,929124 1,6,328911,396804,869922 5,7,6", "03205,924537,190692 7,1,11097,492481,306519 8,7", ",89008,36601,246117 1,4,872031,522538,755553 4,", "8,937521,104869,266276 4,5,826761,315689,647476", " 2,7,342157,380218,268821 2,7,636341,421777,699", "117 4,3,753111,767966,241431 1,4,488501,491709,", "775230 4,6,258783,184103,975569 1,6,375053,5360", "01,378845 8,1,755429,663488,66023 4,5,202640,56", "4403,941953 7,4,437569,355406,435123 9,5,127875", ",592189,705788 1,7,852601,934345,122156"};
    int time = 301413357;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 300896341;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    int n = 7;
    vector<string> flights = {"7,1,735447,163477,77233 2,1,387815,47341,663201", " 4,6,496281,541126,826055 4,1,248801,745321,643", "111 5,7,548109,807445,627973 1,5,472476,544721,", "351381 1,5,250365,218482,534591 7,3,632949,2909", "7,208860 4,3,851952,780081,785345 4,2,774489,30", "5577,14513 5,7,851736,860926,993201 5,6,538083,", "322701,540236 4,5,131221,164947,992321 7,6,1921", "37,56011,114041 3,4,372301,322623,510773 3,2,24", "9855,761321,861485 6,7,137603,361671,704201 5,1", ",441545,307388,416827 4,5,843421,733793,948251 ", "7,1,718363,366237,216389 5,1,20047,395565,23798", "2 6,7,878407,579660,133851 7,2,273169,806790,63", "3156 6,1,790761,234243,841230 7,1,373571,947452", ",10506 7,6,636557,193963,321761 2,6,816939,6086", "21,876417 3,2,667956,574379,596751 3,4,719629,9", "24347,768716 3,1,483881,219841,304577 6,4,77619", "1,135605,364097 2,3,137217,30505,728281 2,5,904", "616,42901,198177 5,7,35201,341461,403544 1,3,46", "581,249976,978855 4,1,701041,954481,603266 2,1,", "982291,152863,317968 2,1,421977,257781,516903 7", ",5,246529,343041,487137 5,6,402505,48143,5460 3", ",6,387313,763933,751603 7,1,339497,236481,64033", "7 6,7,442021,550563,952228 6,5,347137,570685,26", "2583 6,1,122596,82329,9948 6,1,391797,886507,39", "9241 4,1,81887,260225,327310 3,7,425729,25179,2", "28166 3,7,18037,241063,486711 7,6,954226,272894", ",119085 1,3,415651,332776,187751 6,5,856025,600", "833,244405 3,1,441696,326699,682898 1,6,409759,", "773677,6741 2,1,944045,623092,216311 1,3,556177", ",343556,546429 1,4,415283,720723,615471 3,4,143", "961,659829,466451 5,3,435269,635446,17603 1,2,8", "78891,599996,137989 3,7,761831,788156,195905 5,", "7,67795,301069,387289 5,3,987881,642853,480257 ", "3,5,250185,162209,651017 6,2,116715,218201,9193", "24 7,3,672378,754829,359303 3,4,498193,187725,7", "01246 1,5,505055,452745,740596 1,4,231108,39098", "2,96483 3,6,28981,739026,339885 1,2,818441,7744", "1,609044 3,1,206721,790424,345478 2,6,310011,16", "6201,503681 5,1,146205,894865,528201 2,7,702881", ",887995,920641 7,1,146041,202403,581361 7,1,388", "031,677909,273809 4,7,581907,376363,686977 3,6,", "568501,551266,385256 2,1,542056,996142,965957 2", ",1,239000,595881,599193 7,6,311431,810236,25027", "9 1,3,219211,249481,268096 4,6,247991,43675,303", "71 3,2,841366,536471,404331 2,7,364647,601648,7", "7911 4,3,126437,363393,37124 3,1,279325,596874,", "258264 1,4,211951,483303,351613"};
    int time = 303356989;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 302905454;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    int n = 3;
    vector<string> flights = {"2,3,920081,895328,74466 3,1,412829,980357,90446", "5 3,1,916965,794801,101675 3,2,536289,611041,41", "7983 2,1,842720,503649,932079 3,1,565207,399228", ",824301 2,1,784995,68200,911167 2,3,524965,8862", "05,875891 2,1,751559,645161,140905 3,1,611153,7", "55986,435323 2,3,491392,582881,157280 3,1,40240", "6,80041,165626 2,1,952353,927625,144498 3,1,926", "501,455783,348008 1,2,424139,641190,490581 3,1,", "144128,366955,763784 2,1,868045,680816,269265 3", ",1,387221,711969,375326 2,1,192721,766501,16619", "3 2,1,128193,181521,678783 3,2,973614,44677,529", "997 2,1,632709,495610,267731 3,1,643151,340569,", "522832 2,3,847401,633227,581301 2,1,915241,8610", "01,340733 3,1,631797,702145,891899 2,1,156507,7", "61583,475392 3,1,978269,996929,187969 3,1,72864", "1,89993,232876 1,2,717087,204586,698233 3,1,508", "113,725673,748713 2,3,899300,643162,371457 2,1,", "335927,891323,248043 2,1,712561,893521,752727 3", ",1,61355,937037,57039 2,1,505974,572901,820093 ", "3,2,167881,944093,47546 3,1,556196,367297,19045", "3 2,1,356663,154751,720121 2,1,108539,213793,49", "2182 2,1,225148,798752,261456 1,2,540876,130049", ",631817 1,2,23957,268114,62721 1,2,384764,73127", "8,239336 2,1,204805,502846,655441 3,2,770901,38", "5912,573311 2,1,970481,131061,91880 3,1,250522,", "942401,809332 1,2,749800,745628,109153 1,2,6782", "70,111717,192750 1,2,433176,732609,102209 1,2,4", "05751,751503,453408 2,3,694421,125296,641729 2,", "1,991597,882261,397455 3,2,281731,251717,998111", " 3,1,869326,721197,138847 3,2,58151,867351,8340", "09 3,2,243849,883009,382801 2,1,578606,189681,3", "14569 1,2,11873,198580,748913 3,2,620929,688981", ",702601 2,3,16321,85509,644943 1,2,758776,15804", "0,981639 1,2,656089,161197,603991 3,1,569318,58", "518,91567 1,2,365694,993833,590209 1,2,958403,9", "36833,594381 3,1,102600,192993,88913 2,1,507113", ",871554,513411 2,1,220653,431691,771532 1,2,142", "901,917089,543937 2,3,226651,239649,968671 3,2,", "320131,694251,741121 2,1,26161,180993,469501 2,", "3,666997,539841,119287 2,1,51361,827295,729657 ", "3,1,883901,628854,994653 3,1,297801,976541,7210", "12 2,1,241705,917188,571257 1,2,377313,114621,3", "37491 2,1,522475,478017,237681 3,1,988593,91560", "2,672149 3,1,614293,292277,791424 3,2,724206,53", "7460,673937 2,3,205357,187855,164676 2,1,914435", ",961033,854767 2,1,790902,79745,253316 2,1,8926", "73,595916,521867 3,1,880267,375621,669508"};
    int time = 15506461;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 14980420;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    int n = 3;
    vector<string> flights = {"2,1,872581,706881,478161 3,1,353636,587017,1595", "61 3,1,734449,813965,466456 1,2,200037,265413,6", "58401 3,1,801664,899073,269081 2,1,525231,45002", "5,634886 2,1,860595,231713,208644 1,2,877826,13", "4367,935649 3,1,832602,359321,290266 3,1,740386", ",423445,151782 2,1,528713,738165,85723 1,2,9798", "1,960881,115850 3,2,378256,104465,434742 3,1,24", "5620,953853,765951 1,2,970762,937201,334429 3,1", ",617756,379243,577321 1,2,133431,627165,845055 ", "3,1,828053,808324,151456 2,3,821165,971715,8400", "01 2,1,988441,164244,306120 3,1,143481,356651,7", "57312 2,1,279721,17965,808993 2,3,981881,896001", ",875101 3,1,951945,427577,660897 2,3,380915,710", "93,154161 3,1,594126,963353,526283 3,2,455776,7", "48801,142337 3,1,685589,524737,687951 1,2,99103", "1,918329,2241 1,2,714806,371126,114713 3,1,4635", "41,728289,463181 1,2,518364,255970,284153 3,2,4", "10401,662087,289525 1,2,199428,974393,664617 2,", "1,958113,855681,771877 3,1,321421,208086,980706", " 2,1,585206,720895,606201 2,1,409869,861041,296", "781 3,1,208649,346853,678025 3,2,966421,10267,2", "54609 2,3,840513,381976,263691 3,1,745589,72288", "1,99425 2,1,711212,777899,175135 3,1,744057,744", "791,59489 1,2,715279,222181,918741 2,1,907861,6", "81162,556751 2,1,247022,643651,495973 3,2,58960", ",670208,489101 3,2,406321,139085,683331 3,1,512", "933,750217,172271 3,2,622509,328065,752241 3,2,", "999393,469866,602276 1,2,769265,860609,275297 2", ",1,272265,727249,972097 2,1,477193,842906,54896", "1 1,2,150729,798977,663648 3,1,456413,843033,32", "421 3,1,929689,275483,362124 2,1,708359,204349,", "483941 3,2,485845,527081,334406 2,1,425725,2998", "65,136353 2,1,26045,292611,132241 3,1,734891,67", "1484,419881 3,2,688037,254271,182100 1,2,766005", ",314489,960449 3,2,808013,165746,67021 3,1,7021", "69,537298,561359 2,3,827633,595360,168974 3,1,8", "72486,173777,370139 2,1,697109,724896,8001 3,2,", "80417,597485,108856 1,2,457094,932699,807101 1,", "2,383321,845063,515361 1,2,331231,934374,942481", " 1,2,877112,892301,847771 1,2,864897,231931,730", "595 3,1,59640,299671,433681 2,3,45706,961729,91", "8113 1,2,763848,76611,515296 2,1,12501,401511,6", "8097 1,2,951989,610198,344758 2,3,695129,282421", ",858597 3,1,349345,91564,134933 2,3,948181,5928", "34,936688 3,1,649141,450737,419901 1,2,582624,1", "74817,741127 1,2,411881,533154,483421 2,1,59432", "5,419057,553956 2,1,167241,73403,697476"};
    int time = 506432641;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 505871867;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    int n = 9;
    vector<string> flights = {"2,3,573583,571693,914317 3,2,111696,637751,6421", "67 2,7,715781,323105,147997 8,1,153795,140738,4", "33767 1,4,242351,299894,9446 4,1,623257,723201,", "432067 4,1,758233,108834,994563 2,9,113696,3128", "81,711366 7,4,979237,671433,564374 5,4,728303,6", "42001,329041 9,1,313443,41923,856141 8,7,3265,3", "74946,818984 9,5,854481,786550,173751 8,1,57192", "1,796647,970667 5,2,527785,103771,552249 1,2,84", "5698,249593,770317 6,4,270517,306476,191801 2,4", ",855721,426831,883421 7,4,97823,148775,122631 2", ",4,782583,661191,958331 3,6,459873,881297,15863", "9 3,8,199360,913285,569681 1,8,830744,927721,42", "5128 9,1,177425,461707,625001 6,2,810121,827127", ",622506 9,5,333501,761468,87811 4,2,657706,2408", "69,313801 8,1,51825,536876,164961 7,1,769376,77", "7741,204667 4,2,215068,73223,90076 8,6,697481,5", "62961,922569 2,1,938842,118889,70311 5,1,33841,", "865781,952106 4,7,524711,753377,209171 4,6,3580", "46,641491,456094 1,4,174817,797796,163376 3,1,2", "6361,706336,784935 7,9,115048,405257,800866 9,4", ",813685,849939,798871 3,2,594561,566113,55723 9", ",5,269401,469521,475207 1,4,802383,409592,18941", " 1,7,623910,383129,317421 1,3,749801,472081,776", "171 2,5,32521,50353,555201 5,7,404953,865397,94", "0881 7,6,267751,585255,384951 1,5,499056,996399", ",911791 5,4,555020,735009,309359 4,9,90545,6212", "8,353220 3,8,54371,779803,931703 9,1,980737,541", "664,509179 7,5,867250,655107,946361 1,5,443029,", "185129,753329 5,7,888241,915416,434426 1,7,7097", "01,360595,916984 7,1,393212,105571,606465 9,5,5", "33528,562377,689895 8,6,70325,555331,362051 9,4", ",833901,549400,546470 5,7,509734,724991,842412 ", "1,3,351139,954805,481267 1,4,129489,10143,27219", "3 1,4,648325,388561,267823 7,1,873931,708561,29", "961 7,8,60849,796729,524691 8,2,795525,495037,6", "38356 3,1,529210,583093,329610 1,7,907271,56315", "0,284172 3,4,122241,420575,793338 9,4,568535,99", "8961,472767 7,1,882581,923579,598356 6,3,309498", ",136751,927569 9,7,501119,946862,227688 7,4,686", "995,83363,217188 6,1,625227,325761,199067 6,1,3", "83290,638497,345276 6,1,677593,175697,961141 4,", "5,489972,885929,582656 3,1,551597,169966,835545", " 6,3,359769,823355,290885 3,7,302113,687785,469", "713 1,5,193066,899697,868776 7,1,694831,863295,", "947025 7,4,593345,348345,989889 4,1,290273,3572", "1,484824 1,2,715307,930041,335393 1,4,426041,85", "3186,105825 2,5,604658,692845,924063"};
    int time = 172143611;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 171615833;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    int n = 3;
    vector<string> flights = {"3,1,204973,149121,197706 1,2,964701,846126,2041", "29 1,2,317611,383635,736473 2,3,801751,100642,9", "37537 2,1,362191,695245,792421 1,2,207693,21253", "6,252325 3,2,123432,696225,487157 1,2,11038,485", "440,440701 1,2,778381,143634,739395 3,1,945375,", "243244,254305 3,1,786845,821795,508813 3,2,4351", "3,907829,677720 3,1,491779,684581,841119 1,2,86", "1357,593127,611631 2,1,705164,438921,789635 3,2", ",905431,322682,939715 2,1,589516,635492,736116 ", "2,1,348921,689215,682851 2,3,807782,202141,1705", "1 3,1,32161,868438,130325 2,3,952393,169071,885", "336 3,1,49737,827157,115929 2,1,840630,256209,4", "7901 1,2,275956,766919,689681 3,2,235381,550522", ",84309 1,2,190965,138709,24817 1,2,19009,699073", ",524151 2,1,184061,315781,486502 1,2,603007,399", "501,73421 2,1,147687,168286,650864 3,1,316481,3", "62001,789009 2,1,672737,202489,267331 2,1,19494", "5,908803,38294 2,1,514667,648679,852758 1,2,850", "889,630489,996412 1,2,241277,848569,832557 3,1,", "256782,516785,140901 2,3,984748,555538,908189 2", ",1,28661,362536,352714 2,3,751761,660581,99499 ", "2,1,888345,57641,211226 3,2,998306,344251,28380", "3 3,1,776511,337982,562561 3,1,415477,797247,28", "5729 2,1,253695,824121,7617 3,2,301581,846879,9", "43091 2,1,139082,876661,831309 3,1,836413,14353", "1,166091 2,3,861601,654065,838207 3,2,11891,155", "841,38809 1,2,293681,487809,285153 3,2,414173,6", "26745,703913 3,1,174287,689591,155766 1,2,31511", "5,569941,834961 3,1,489379,606328,313450 3,1,60", "3607,8511,407385 2,1,51077,909045,772201 1,2,62", "1952,59604,925791 2,1,901967,929721,892809 1,2,", "480043,871646,238168 3,1,374623,403117,173817 3", ",2,778541,719369,897461 1,2,862761,739156,55150", "1 3,1,192771,961601,227561 3,1,269312,280752,98", "1336 2,1,403776,361926,300921 3,1,200851,406251", ",442624 2,3,492793,211025,708641 1,2,202751,322", "38,91588 1,2,145281,521419,166481 2,1,661899,84", "6745,362777 2,1,147231,952661,987101 1,2,340086", ",855873,888881 1,2,216357,483193,988905 1,2,515", "977,55082,473901 2,3,415873,488101,693780 3,1,7", "2994,719574,496466 1,2,864746,153561,65097 2,3,", "216571,428061,64640 3,2,606281,489899,626929 1,", "2,716701,162020,398017 3,2,206523,107261,106791", " 2,1,187185,586645,311831 2,1,323251,807347,558", "767 2,1,169601,792409,473276 3,2,279399,548929,", "985981 2,1,542513,80198,507465 2,1,637109,76748", "9,71538 3,2,404063,430384,419937"};
    int time = 94971782;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 94563020;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    int n = 4;
    vector<string> flights = {"3,1,217121,477234,965789 2,1,652891,847597,6962", "89 1,2,242581,406302,65743 1,2,361489,801401,74", "5791 1,3,692785,938141,494705 4,3,843833,998837", ",866729 3,1,348713,427706,258773 1,2,431430,632", "269,363056 4,1,456505,28181,652801 3,2,539385,2", "33621,12729 2,1,329017,409311,852965 2,3,886683", ",625335,163901 2,3,704797,467135,216089 3,1,758", "246,127431,867218 2,1,89779,851055,737981 2,3,8", "79813,503124,866475 3,1,674477,18377,408765 1,3", ",246593,183277,494181 3,1,508526,690949,242669 ", "1,2,55687,61921,447956 4,1,498141,82469,889223 ", "3,1,130155,198437,611737 2,1,945801,31332,16139", "4 1,2,429051,885822,820560 4,3,924251,466858,53", "2389 3,1,836865,792254,521454 3,1,507312,114801", ",135132 2,1,416295,430643,69731 4,2,629976,7590", "97,224201 2,3,727132,772161,123184 3,1,696195,5", "02457,219081 4,1,103603,659636,38987 3,4,273857", ",525169,727337 3,1,147369,796471,459376 4,3,464", "181,78353,446022 3,1,982081,523146,238771 3,1,2", "16481,150413,342371 3,1,267473,478325,675281 1,", "3,738793,225611,815436 1,2,598535,699464,823401", " 1,3,939318,4978,112236 4,3,407257,529556,53063", "9 4,1,170818,112989,326591 3,1,313996,382166,18", "0089 4,1,336481,478795,301341 3,1,486901,407651", ",66111 2,1,119445,826795,902834 1,3,98651,68386", "9,603481 3,1,157627,384005,978999 3,2,897731,94", "1378,987241 3,1,510141,548933,190483 3,4,931083", ",395953,205285 3,1,780018,929761,331311 4,1,246", "145,872009,950769 1,3,992428,722402,115144 4,1,", "477069,98336,320815 3,1,386645,433393,413421 4,", "1,975326,287183,656519 2,1,789701,484801,862153", " 1,2,987181,277851,540383 3,2,246269,917849,499", "457 1,3,44670,898693,299077 3,1,126685,659577,3", "39481 2,3,835201,531107,458866 2,1,365084,36776", "0,522417 3,4,11701,542703,981020 4,1,840121,354", "945,927001 1,2,425300,928789,164865 3,2,489802,", "529536,590385 1,3,741269,260144,102821 3,1,1182", "89,757235,529361 4,2,283981,570517,742301 3,2,4", "69185,83893,856621 1,3,351981,961453,747541 3,2", ",63657,974992,351901 2,1,671759,868822,689761 3", ",1,829049,578683,806593 2,3,211533,893380,28062", "9 2,4,185451,280825,737299 2,1,394577,929437,50", "4205 2,1,269433,746362,941585 4,2,188224,450641", ",318073 1,3,804121,482691,983046 3,1,119196,803", "324,692494 4,3,38801,112378,632001 4,1,264481,4", "71093,593753 3,1,204476,599081,944540 3,1,54288", "1,911141,503401 4,1,286075,938271,79901"};
    int time = 40813851;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 39915933;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    int n = 8;
    vector<string> flights = {"4,1,232931,71683,478495 5,3,279901,271501,37066", "5 7,3,629509,142629,831724 5,1,378665,91568,125", "86 5,7,790057,9567,78593 2,6,358153,408381,3432", "6 1,5,431611,43571,395785 5,2,619373,981391,645", "327 6,5,445636,651251,37709 5,3,213653,581267,8", "67443 4,1,666035,963875,625253 3,5,508185,30358", "3,40157 5,3,932693,941159,424868 7,4,957850,628", "949,699701 2,4,821601,293093,418993 3,2,389661,", "540559,667813 1,7,595032,361659,833973 3,4,4517", "16,120126,412801 4,7,837121,985217,148481 2,5,5", "94226,822665,547731 1,5,571139,258771,956708 5,", "7,135031,895981,978987 5,1,785937,12088,64961 1", ",5,972661,63654,141126 6,5,856651,380969,144791", " 6,1,871261,894201,98521 5,1,556839,930542,4217", "61 5,7,385721,237729,977985 3,2,472506,843909,2", "62479 3,1,776253,67840,399513 5,3,543722,38227,", "506997 7,4,388328,521798,829137 2,7,756897,8360", "33,961379 3,4,368825,368545,318675 7,5,458681,4", "98413,662181 5,1,5997,508549,567071 1,7,198641,", "130933,251794 1,5,591394,166997,98723 2,8,77916", ",248836,843729 5,1,796737,49201,352021 3,7,4216", "41,684141,289572 5,8,515483,901089,909154 6,3,1", "72806,210621,209808 6,5,862821,791492,87529 4,3", ",590657,402301,155209 5,8,495349,500141,407203 ", "2,6,493983,572179,360761 7,2,277090,135794,9823", "01 6,1,462401,96191,729236 3,1,862445,812309,80", "0353 1,5,167269,997371,699551 2,1,910936,980921", ",970867 1,7,854629,209537,545649 4,3,996060,386", "361,143841 1,5,634140,400453,394429 1,3,328444,", "260625,779001 4,7,508501,103853,567541 5,3,3249", "03,396181,318005 2,7,484913,764599,658889 3,1,7", "34337,713801,536665 8,3,606290,331077,9341 5,7,", "206798,920446,635169 7,5,101387,633895,832326 1", ",7,793401,667651,856273 6,3,126971,579841,88816", "1 3,7,494468,846896,911490 2,1,142001,479005,32", "9985 5,7,530501,943436,399541 3,1,928196,47489,", "71792 6,3,856721,174801,9401 6,3,763861,470353,", "736989 1,3,881033,21346,406071 1,6,918117,51999", ",5136 6,1,460001,784685,537327 3,1,200951,46646", "5,60685 3,2,452486,431862,415569 4,6,362905,547", "993,82972 1,7,488829,675155,82495 4,3,468985,79", "9109,838205 5,7,747355,987913,704921 1,5,970813", ",984670,598366 1,5,728953,214160,630899 1,5,404", "381,665096,329705 2,1,824389,414,227899 7,3,729", "089,387532,812551 5,4,980972,205001,319361 7,8,", "100413,740976,157323 8,2,195001,454907,188387 5", ",7,343789,276074,952047 1,2,62139,455317,406470"};
    int time = 54232174;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 53103336;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    int n = 5;
    vector<string> flights = {"5,4,357621,243602,550941 3,2,511979,335084,1865", "99 2,1,678483,88564,277130 2,1,254353,311133,33", "5167 4,3,516850,511771,737656 5,1,152882,825300", ",22873 3,1,549879,66041,436961 4,2,694926,87317", "7,619977 1,4,409501,990401,456201 2,1,42804,526", "921,999715 2,4,255249,691676,282381 3,4,237689,", "500785,965312 4,5,588641,521769,651077 3,1,7678", "91,84653,415149 3,1,102375,309866,127996 5,3,77", "7981,641446,583681 2,3,488766,466107,493134 4,2", ",425014,427903,352031 3,2,135683,388801,133554 ", "3,4,265905,494677,959276 4,5,644583,590970,4278", "89 3,5,568545,176337,122636 4,1,636787,67951,22", "1831 4,1,726709,248253,806693 5,2,470963,195201", ",97629 1,4,641721,732825,313613 4,1,246717,1350", "97,994213 1,2,687705,45942,513521 3,1,758837,12", "1108,180453 1,2,944917,25172,527337 5,1,510604,", "595905,150247 1,2,632441,944089,846340 4,3,7600", "01,853797,88359 4,2,424626,597119,106286 4,3,48", "3105,181271,491515 4,3,908273,662870,379264 3,5", ",371349,149345,136506 1,2,266969,41894,959571 4", ",3,959003,940287,312690 1,4,689809,830348,21146", "9 1,3,834217,745481,424867 2,5,694321,506771,68", "4876 3,4,410041,330065,679943 3,1,226633,130449", ",388761 1,2,749347,19009,366351 3,1,88426,35681", "7,195255 3,5,213982,814455,712503 4,1,363027,95", "8367,511841 1,3,477178,722381,148701 2,4,751991", ",437307,590855 3,4,526419,299775,586031 4,1,503", "001,689595,442209 2,1,985053,817121,437623 3,4,", "389993,562157,762057 2,4,473473,185258,188337 5", ",1,492187,331631,857651 5,3,988666,474801,96648", "1 5,2,327402,78187,126149 2,3,335059,981089,312", "155 4,1,316675,350634,658117 1,4,483425,661870,", "818069 5,1,278351,641722,337514 2,5,817509,1137", "11,559235 4,1,178401,986119,108376 3,1,755023,2", "34301,408572 1,4,409567,972870,673660 2,1,62904", "6,29357,985317 1,4,583681,967577,271551 1,2,108", "286,522305,505056 4,2,657701,587221,974913 4,1,", "157219,510017,369570 5,1,221377,574819,909315 2", ",1,294063,84701,462959 1,2,425146,288919,381141", " 5,1,633819,188021,485753 5,1,530331,642031,182", "751 1,3,138420,477928,210826 1,2,11201,750397,8", "54129 2,5,388499,816151,118813 3,2,438551,47940", "5,463616 5,1,204968,189501,977146 5,2,277372,52", "5601,754981 1,2,315873,666083,871967 1,4,962817", ",460675,820273 1,3,763003,920681,957462 1,4,139", "415,234803,307293 3,1,611531,504810,299281 5,4,", "158951,115210,903051 2,3,989639,457281,135505"};
    int time = 62476771;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 62024496;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    int n = 8;
    vector<string> flights = {"5,3,294781,634234,320979 2,3,577076,674271,6091", "4 1,5,869345,246541,632089 5,3,139324,229489,77", "3459 6,8,304569,96801,700470 3,1,712541,612761,", "112539 7,1,611057,988743,397481 8,1,333923,4684", "9,583633 7,1,60595,736084,776211 8,1,115731,796", "311,293141 8,1,430965,768425,539937 1,2,968329,", "283616,96421 8,7,193121,474885,128310 2,1,76382", "3,894135,865319 5,3,604345,893286,889025 1,6,57", "2377,579486,288708 3,1,819867,403609,601803 5,7", ",932427,160033,779965 7,3,452031,89057,672599 1", ",7,118798,603331,78439 7,4,238335,354006,703216", " 2,1,33457,686169,959140 7,1,671833,951148,9353", "61 5,4,242785,9769,78556 1,7,551733,384824,4735", "74 1,2,185097,796741,48084 1,7,194866,292182,81", "9667 3,2,428083,937098,773940 5,7,753761,976535", ",204241 4,7,896,729638,364774 7,5,909971,518861", ",850561 1,2,386633,650171,812225 5,7,291842,805", "991,344967 5,1,341649,219197,143681 3,2,507780,", "903846,682077 5,7,828788,189339,674078 7,6,4574", "25,973892,983224 7,1,374897,18023,919922 1,7,96", "3509,187797,797019 6,4,75969,658633,180583 7,1,", "545405,416281,434715 2,1,881051,726629,696233 5", ",3,436817,478645,851246 1,7,475785,93241,493931", " 7,4,295161,242045,290126 1,7,139693,680461,421", "439 1,2,856833,878597,75257 5,1,848353,103517,3", "41057 1,7,347844,558305,955161 1,3,918408,69776", "1,997805 2,3,460620,924208,644707 4,2,118061,13", "9521,456206 7,1,583273,557106,928477 5,6,376079", ",903369,718261 5,6,243121,142973,48192 6,7,6171", "51,566217,573671 3,4,298240,817137,237477 4,6,1", "88597,805821,476027 7,5,611481,396665,301473 5,", "3,999923,614993,746658 1,6,538081,264409,586666", " 5,3,926625,726207,51689 5,6,287718,83251,92592", "1 3,5,108943,390801,993387 2,3,378768,434961,43", "6872 3,1,459661,700647,360121 8,5,255871,834966", ",79901 5,1,335895,364840,981128 7,5,643981,8727", "13,224495 8,5,976521,292199,191345 6,1,398089,8", "58361,885409 6,1,805375,977765,587446 6,5,91274", "9,136001,718217 3,5,680573,211981,243161 3,5,89", "421,26283,595293 5,3,905121,183813,289233 6,5,2", "0329,761529,497356 5,4,933391,570240,555740 4,7", ",31949,989306,122049 5,7,699955,190802,187876 3", ",7,904730,506251,55545 5,7,232667,735111,628192", " 5,1,561227,996633,479801 6,1,804757,469173,192", "221 1,3,45339,251233,901617 1,2,405806,178007,7", "98373 3,1,252177,264139,17000 3,7,807901,74375,", "32353 5,1,966470,298401,249566"};
    int time = 78690593;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 77254249;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    int n = 5;
    vector<string> flights = {"3,2,337226,51297,417711 3,1,324484,481017,31951", "3 2,4,229982,87331,984121 1,3,973521,758786,421", "985 1,4,622319,58041,147935 3,1,518575,275313,2", "85247 3,1,79732,570293,592937 2,4,358540,886901", ",723665 5,1,928463,785603,394790 5,3,191137,771", "268,540745 4,3,11729,617155,463921 2,3,278976,9", "33376,365686 4,1,505921,127977,62849 2,5,303273", ",337415,527615 1,3,745206,591681,870640 1,3,543", "561,677659,197739 3,2,216646,799603,182159 3,4,", "755885,262241,152127 3,1,436969,192229,678268 5", ",3,760737,434581,851452 2,1,787465,711803,91633", "7 1,2,480343,53697,885394 2,5,995121,52816,3195", "69 2,1,321499,263473,639559 2,3,95803,17265,233", "869 1,3,170811,830001,464680 5,4,701317,277625,", "97402 1,2,477932,186543,178872 5,1,940204,12830", "1,634549 4,3,522809,697026,556569 2,5,291575,44", "9943,577136 1,4,328133,889499,879004 1,2,829213", ",20907,356817 3,1,76481,827458,547853 3,5,30643", ",966081,928316 1,2,285906,564009,431861 3,4,510", "947,816627,997401 1,3,124987,739209,72841 4,1,1", "11909,990101,443988 4,5,40845,684901,882933 2,3", ",962931,602497,424177 1,4,265155,619049,390493 ", "2,1,37153,700669,161709 4,5,833628,870777,55112", "1 3,5,826416,749840,434937 4,5,480918,61046,579", "561 5,1,616681,680613,347019 4,2,755196,199231,", "165236 3,4,886226,867261,662993 3,1,24427,67200", "3,16881 5,4,742301,14886,620724 2,1,463110,7006", "06,520831 2,1,284329,410170,939673 1,3,270463,7", "97201,917860 2,4,173409,398009,486148 5,1,23771", "2,201108,459509 3,4,756000,354283,907844 5,4,92", "1773,955374,230687 4,1,160875,323639,72921 3,1,", "53217,497517,830931 5,1,266137,102468,443129 2,", "3,99349,571255,676261 1,4,337781,7888,855479 2,", "5,292407,812145,269561 1,3,328150,277656,715679", " 2,5,384909,104361,677676 3,1,318977,396406,119", "029 3,5,100113,428278,402640 5,2,383026,369551,", "224265 5,1,115009,649163,361116 5,4,528197,8358", "24,733205 4,1,447111,850189,723213 2,4,963297,3", "78305,802659 5,3,590195,929589,147635 2,4,84155", "1,684881,240861 1,3,716538,58929,854051 5,2,617", "549,112488,876876 3,1,625288,116683,110963 4,1,", "16397,327221,65501 5,2,647831,138465,706606 4,1", ",713879,85347,269341 5,2,408129,41051,14205 4,1", ",127095,932294,362585 5,1,789696,214966,681609 ", "1,3,401143,584551,232585 4,5,330201,49774,39716", "9 5,2,653539,713276,810709 1,3,885381,660321,80", "3281 4,5,555809,96533,903871"};
    int time = 346709780;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 346133166;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    int n = 5;
    vector<string> flights = {"4,1,162225,686745,901771 3,1,872051,131256,1858", "89 1,3,24707,36373,56054 5,3,373057,817539,9651", "29 2,1,47493,653089,114052 3,5,52969,162127,823", "745 2,4,527566,309416,434084 1,2,322110,718631,", "207968 1,2,167684,139576,582151 5,2,128139,4427", "65,768045 5,1,59133,889002,650665 5,4,682441,63", "7891,855014 1,4,554329,117097,300300 1,3,681361", ",549959,135221 4,1,769657,404375,964477 5,4,526", "378,869941,181641 1,4,443364,77785,624401 1,4,4", "01504,715457,653592 1,3,12246,491058,875393 5,1", ",127889,972848,613073 2,1,479945,907824,731905 ", "3,1,758525,347057,558601 1,4,991787,751561,9084", "17 2,3,587183,287402,939066 3,5,734771,946732,7", "389 5,1,601585,669621,77213 3,1,28616,725161,11", "3737 1,2,159873,899753,448931 4,2,708901,347517", ",237986 3,1,39315,611831,483458 1,3,991897,4028", "08,125957 5,4,105655,725425,558270 4,1,338614,8", "7565,822631 4,5,766567,615164,353501 4,3,924121", ",403785,885217 4,1,473885,666220,724501 3,1,508", "513,5301,267315 1,3,688345,836691,969435 1,2,63", "9545,961185,203265 1,2,843466,604251,307523 3,1", ",943920,752913,209800 5,2,755975,890061,66973 2", ",1,826332,875908,326016 2,5,44358,186993,313713", " 4,1,826926,379,385573 3,1,64278,303301,766571 ", "1,3,75137,699879,38369 2,5,403089,698805,777037", " 3,1,512551,36865,702421 4,2,231009,289049,5549", "81 5,4,284221,334342,229192 4,1,566397,532121,2", "40688 2,4,92741,532157,347521 5,3,441231,337949", ",740661 1,4,616792,650657,631172 1,3,12124,8740", "77,739049 5,1,737263,971593,950784 2,4,844929,4", "55809,180744 4,1,715074,164407,601660 5,4,74628", "5,976026,541133 3,2,655298,95425,393948 4,3,420", "61,60003,949541 5,3,846189,454739,11958 2,3,784", "265,128826,390909 1,4,739506,816421,256254 1,4,", "286376,780667,943531 5,2,853427,285641,841385 3", ",5,687856,665937,213048 1,2,900901,24961,597701", " 1,4,427476,667616,301105 4,1,108677,177441,275", "90 4,1,127851,968795,49505 1,3,222535,901957,35", "1122 5,4,303954,585116,94341 2,1,823729,785652,", "626251 4,1,74795,115949,509551 5,1,236365,82541", "7,320838 1,4,1375,202750,567795 3,5,913508,5079", "45,159690 5,1,716393,740805,485310 1,4,338617,6", "31749,400501 2,5,327319,516209,322634 5,4,50373", "7,415720,611062 3,1,297212,692433,540166 1,2,44", "8397,184527,426273 2,5,801161,288777,766641 2,3", ",341780,513188,968383 4,1,74881,90488,124341 5,", "1,313067,722601,880129 5,1,9751,416356,785731"};
    int time = 601151017;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 600501994;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    int n = 3;
    vector<string> flights = {"2,3,532173,300896,44033 2,1,781821,495101,94620", "6 2,1,242648,351256,796289 3,1,51665,597631,215", "311 2,1,31954,611666,237457 2,1,500351,157091,1", "81369 2,1,199649,817001,634229 2,3,472393,95888", "1,287021 2,1,122573,472965,393449 2,1,702865,52", "2700,839709 2,1,670787,334730,286261 1,2,626517", ",860897,670418 1,2,879375,193851,794601 2,1,827", "332,595466,710781 1,2,325570,608875,979179 1,2,", "404765,647985,103857 3,2,200657,908694,664881 3", ",2,518265,749065,674761 1,2,858195,806321,74130", "1 3,1,411881,187009,930826 1,2,523003,137582,46", "0961 3,1,816395,720713,404693 1,2,931901,821531", ",735553 1,2,270021,428142,49927 3,2,685356,3915", "39,671111 3,1,154651,144927,59057 2,3,304041,36", "617,553349 1,2,785246,220311,144811 2,1,441485,", "779481,486876 3,1,253297,805260,654757 1,2,1094", "09,730285,838273 1,2,59750,927489,208839 3,1,41", "3515,48773,888291 3,1,384841,563501,561463 2,1,", "710305,343385,871293 1,2,745235,205647,137481 3", ",1,169945,810001,123941 3,2,90977,443376,842252", " 2,1,409156,679686,36321 3,1,153751,513401,8252", "29 2,1,222881,102988,566433 2,1,433988,663113,1", "73341 1,2,425729,774101,63672 2,1,605813,644049", ",304001 1,2,72172,508095,895148 2,1,219267,3043", "6,629237 2,1,30802,1343,784614 2,1,193921,54912", "1,923111 2,1,273901,126238,594905 3,2,823647,30", "8072,494839 2,1,570066,63545,355981 3,1,505717,", "923809,31552 1,2,943508,611069,204520 2,1,54858", "5,336690,288695 3,1,945201,77363,531614 3,2,274", "73,249833,191391 1,2,868721,624889,517068 1,2,8", "19186,284345,75787 2,1,108561,944869,58671 3,1,", "524095,326961,377825 1,2,708853,65671,54141 3,1", ",754544,679995,240703 3,1,420337,162791,647112 ", "3,2,978061,55462,671946 3,1,88093,868436,60455 ", "1,2,584736,663606,288899 2,1,630705,398878,3968", "42 2,1,861026,681679,389105 3,2,57823,262891,81", "8367 1,2,95013,648912,549041 3,1,476541,934295,", "369083 2,1,942441,144545,948253 3,1,111793,2208", "1,944976 3,1,958280,53905,450162 2,1,780818,515", "561,789725 1,2,651419,730239,98369 2,1,588201,3", "2801,928583 2,3,474583,511751,567591 3,1,950789", ",510279,864577 1,2,565986,987286,619221 2,1,469", "303,27457,645890 3,1,612456,947725,787889 1,2,7", "78045,456513,416711 1,2,170939,561639,242882 1,", "2,524097,612861,944445 3,1,108281,293316,333400", " 3,1,542129,776513,395791 2,1,812715,481495,862", "780 2,1,546492,131887,519457"};
    int time = 3312721;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 2490519;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    int n = 475;
    vector<string> flights = {"425,69,160567226,391749388,4890852 216,98,47303", "8165,597007,3615545 37,411,118341523,170427799,", "37215529 109,41,683447134,950090227,82426873 10", "2,305,706221269,69909135,257655784 369,288,3737", "9061,40873981,8670529 181,248,653352031,1069238", "11,374079501 332,415,247776868,480572137,222071", "041 67,49,549646417,278840199,119255907 352,90,", "150378796,137583463,225450721 313,229,144328646", ",513494529,36547831 472,215,318773941,170724397", ",553666286 96,38,31452501,368026285,47903381 43", "8,335,189920160,288159400,133145006 273,224,160", "203213,358403181,478734385 176,361,110710191,56", "7314089,139695685 396,426,317333277,103301481,1", "10400517 153,113,39202255,105948,738066085 326,", "335,55521105,554160985,43110748 396,183,1089773", "45,330434686,108129401 15,195,68513793,19056699", "7,490170279 276,275,48440002,278570943,18768960", "1 170,356,226128239,407412023,760640414 160,197", ",145992803,539460831,49267979 471,217,42676069,", "486774961,460347889 408,301,601621399,33763105,", "700148239 23,430,101289133,680257989,54363401 4", "51,158,262342369,131182390,250532866 296,446,85", "1267489,679854070,304123425 152,145,625828105,6", "7942657,226140876 267,468,544418701,81507655,20", "0494798 460,174,393186914,257244835,4476636 253", ",131,398713617,320516971,211951915 187,119,1050", "43116,625352806,9856897 266,229,553902119,66166", "2373,1993265 363,95,113190751,116936619,2608609", "97 189,398,771804541,97979506,109615219 354,50,", "186085236,132727579,36982251 4,412,758987917,49", "1315149,332152311 140,187,573534711,4703685,240", "430121 411,252,19683399,80133376,2968733 332,34", "2,850474297,483015466,296129476 315,268,1032056", "01,160403321,694220263 101,106,507755361,881876", "33,91426751 61,356,59540376,576539745,595950717", " 212,180,607818885,28976353,488947089 51,61,428", "60571,653533551,289453753 70,227,134671853,1030", "93156,428097499 426,288,725063961,103267725,302", "5309 83,101,10440641,50335433,102239781 57,393,", "455212561,444585961,656981445 191,274,547331701", ",333243725,108803556 251,363,29386281,44985669,", "33084517 307,151,324308881,355800313,126908701 ", "170,86,178213201,272651156,477228097 233,58,682", "701328,700817710,167931713 80,58,278514986,5893", "02568,110605386 389,131,204442987,106566657,112", "931689 259,117,6473182,10599486,230010817 76,26", "7,154662295,458799676,382506676"};
    int time = 301413357;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    int n = 22;
    vector<string> flights = {"1,14,102044733,395270942,633598535 22,13,167728", "481,12838967,71939318 22,15,817407257,455529556", ",718530639 1,5,10650340,336894049,879170818 5,1", "9,536554131,744264191,143967863 3,12,698382166,", "305180089,997550841 3,7,160176017,119814036,514", "09309 15,7,3986553,27486901,527407651 3,20,2119", "64089,181119445,305826795 6,13,33139801,2344356", "1,471902551 17,7,222603481,87754543,207588157 2", "1,15,22978999,735658903,235119306 1,14,63098724", "1,92657849,181572561 17,3,127510141,174548933,4", "71190483 21,8,817102651,822104,245931083 9,19,5", "08780018,494929761,532331311 16,11,158246145,56", "9872009,148950769 11,19,96874285,192905623,1029", "92428 22,2,238471300,560730713,16477069 20,17,2", "15058187,146924853,6386645 13,5,153919960,13974", "6649,52975326 1,13,324275110,148562401,37478970", "1 9,13,93955501,99610480,11332973 4,1,64277851,", "114540383,254559243 14,17,264917849,130499457,7", "90838341 1,3,250547697,228426979,639350811 9,16", ",93848705,56600083,396044670 7,21,2460547,85874", "289,929126685 3,1,539388126,244180927,345835201", " 9,18,118672061,581805921,33744002 5,2,35367760", ",445522417,60244719 14,11,75542703,143981020,41", "033926 10,4,394708093,126840121,106354945 11,1,", "297227397,144908725,214594678 10,15,392164865,9", "07990357,254105 15,12,15489802,360529536,525903", "85 17,15,365741269,219260144,44102821 21,3,1551", "63061,2620036,329372835 1,21,341757235,32529361", ",169960932 8,17,793207405,89872040,514972174 17", ",11,587742301,916199009,334650901 1,8,202469185", ",66083893,270856621 13,1,70723873,531200895,283", "51981 15,9,209562259,478332466,104063657 20,17,", "369044610,100179629,99671759 10,21,404337999,56", "8593441,253829049 19,3,694918501,66677913,55752", "6886 3,15,175893380,676280629,201312001 21,22,3", "282236,112185451,295280825 7,13,198896181,20831", "3278,14973002 10,3,114394577,159929437,17750420", "5 22,9,243269433,72746362,65941585 9,17,1065415", "36,139628882,63188224 17,13,42834705,185162356,", "348536941 16,21,3485743,246804121,177482691 2,5", ",127544077,378418223,44454125 12,22,241772671,7", "19038801,112378 7,12,554567609,486264481,154710", "93 1,11,124847857,244174311,10911753 2,13,35894", "4540,517736461,27593305 7,14,324156691,26187704", "1,261542881 5,19,180857543,481415187,47381488 1", "9,17,19938271,140079901,202517173 1,15,76394259", "3,536844841,10639009"};
    int time = 36738793;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    int n = 420;
    vector<string> flights = {"211,151,187437139,16756681,24106448 160,85,4557", "79481,52486876,78212257 321,331,27285540,480409", "263,196925761 337,340,639654757,282959293,79076", "501 109,85,483838273,38753146,103221802 181,311", ",318059750,712927489,88208839 46,91,355634665,5", "13000622,49247626 1,393,116991733,606413515,557", "048773 211,310,362808951,699973765,113827069 40", "8,349,210384841,701563501,267561463 136,406,221", "453005,237340933,293526512 409,85,47343385,8887", "1293,4091590 79,265,570567414,267970615,4736076", "88 313,1,644767099,120302881,184487101 36,361,2", "33109821,456745235,255205647 161,156,278434801,", "392169945,630810001 1,129,853359956,192090977,3", "29443376 152,59,66818137,380409156,274679686 28", "1,28,100037236,66128014,15028645 398,383,334980", "649,132905917,357399061 141,241,571544065,11980", "2561,416755569 121,130,323948331,546673531,1415", "3751 41,109,82347092,395349121,6222881 48,73,83", "797715,543008620,135433988 113,281,422913295,33", "923747,390425729 141,352,44634721,648016101,351", "481529 106,73,12644049,174304001,38563651 321,1", "27,480998153,897072172,412508095 288,400,427982", "941,230133769,331764580 191,382,338219267,60003", "0436,626629237 151,381,264240385,170554978,3074", "31211 271,365,243133981,62030802,341001343 154,", "221,236180791,309193921,132549121 271,209,83104", "552,645273901,249126238 265,157,82882567,174701", "971,286117651 76,166,63546324,59501144,50782364", "7 372,259,76838941,397630339,179239895 415,366,", "446063545,259355981,360178017 85,337,213923809,", "428031552,272897173 13,350,74543852,87006232,79", "4229437 28,9,304204520,49894295,35544400 205,33", "0,542288695,138296937,65239474 341,43,961531614", ",40231169,229500032 189,149,10027473,107249833,", "14191391 379,81,405047995,87444230,99868721 249", ",168,109061641,91679281,831587233 104,306,12528", "4345,24075787,673410929 181,241,944869,19405867", "1,349208589 115,55,342326961,172377825,44128253", "5 203,33,117065671,267054141,77061052 417,270,4", "3491813,200173690,183700441 99,289,35754544,667", "9995,121240703 232,361,200123001,368361805,1444", "20337 411,372,606671346,10954625,312978061 282,", "366,693331167,464805298,276088093 276,295,32916", "3826,188559361,3515401 1,61,70156801,525410857,", "19619696 376,146,89288899,182590418,722662151 3", "11,1,214630705,551398878,358396842 41,151,13686", "1026,207681679,653389105"};
    int time = 776785246;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    int n = 68;
    vector<string> flights = {"65,9,739245161,175106177,19626577 35,20,7091041", ",300553345,680461992 17,44,120720353,71000896,4", "25327865 12,45,98647576,821723491,267985768 9,6", "5,172503500,433626112,610642685 36,34,185579521", ",575129985,169246276 48,37,407510035,69958699,3", "03270889 24,45,26138617,432687437,492317321 17,", "33,411920425,30625375,189085821 9,5,367023210,3", "49727309,126137326 61,25,345682981,201188626,44", "4290725 21,53,224401101,459452244,214293307 47,", "51,199635361,342992529,58792059 27,53,577164017", ",103741891,16035101 65,45,438617908,69711973,78", "7275376 1,61,139297253,520052611,18230591 52,1,", "253323009,219448969,175242753 68,61,301548001,2", "1588141,1658527 50,65,773384281,52026625,342394", "175 1,58,299950006,54717415,109790729 37,51,669", "793570,566034027,69088681 36,64,416551777,59216", "4530,56721926 63,47,631737415,30968241,16666222", " 32,61,316121836,198973198,137804089 43,9,19947", "529,167344021,217847761 55,29,124292625,4781660", "1,745153905 57,65,91564705,30652429,68009657 17", ",46,204473130,146241187,17653881 21,25,68899876", "6,8007373,250702232 35,33,350440657,247456385,3", "8309451 43,14,365445769,341999853,208735138 31,", "1,104335267,34611083,11903959 60,29,711815512,9", "4812501,334368462 44,15,963262129,229112389,127", "317780 31,42,530497576,2333215,300068935 33,68,", "389909149,528483053,593846641 13,17,108413137,3", "4411461,153804106 5,37,73281625,524825596,92272", "4050 25,45,196512801,64803133,100882369 17,1,47", "444320,42194443,414800158 29,61,314836508,94002", "793,611781521 35,53,18731485,337961127,20892663", "6 54,1,206441631,370876717,173587972 3,40,26084", "467,707815255,265155871 23,28,192430951,2892139", "60,547077805 33,5,434400193,361317421,329743690", " 10,5,528274153,600696009,283678151 1,63,113704", "306,462525211,284225601 3,56,108360226,23441235", "3,17205813 57,1,166892401,6618067,95714380 31,4", ",107340666,193670653,118034463 21,43,94368277,2", "61677801,135102301 57,7,661206065,619144620,108", "92801 45,63,296377249,417437263,396315667 52,25", ",738031921,615606382,66042184 54,59,375743317,7", "29950057,4341273 5,20,43193921,343793921,597045", "961 25,33,76629761,710152969,476827964 65,49,19", "1191363,574474279,626138081 1,49,66166417,11680", "21,27325611 63,47,445195066,104470761,122662562", " 46,33,247337251,714899017,131853485 61,26,2566", "16377,735507745,126754321"};
    int time = 236686273;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    int n = 424;
    vector<string> flights = {"85,125,357142801,49987873,467115526 105,231,409", "320136,241319604,66682567 312,141,26206332,7340", "88281,147461983 137,37,371908036,678587428,2721", "88001 190,279,38529226,29218617,291115806 393,1", "52,452801782,515162881,60534101 117,293,5326079", "3,322964029,126078065 345,49,58832142,846958333", ",72936185 67,269,163985283,68953778,159544540 1", "46,341,508914673,605715201,904861801 389,423,18", "0251017,850501092,135007237 204,347,111793969,4", "39270966,93271981 9,142,586712298,68657293,3368", "58791 93,216,336771165,65271977,30175537 84,66,", "167100856,86499776,3624951 349,49,316082895,793", "419481,137855152 397,381,107039197,426998415,17", "3672501 9,3,131811701,411384241,132273989 143,2", "51,251280259,122767705,99201025 329,281,6442341", "02,147275101,461710909 122,189,259526252,501284", "980,117407895 121,263,267781099,812797495,19437", "857 315,116,124750945,197813922,313260861 173,1", ",20605326,347023997,128417395 281,295,103367161", ",277705255,25072762 207,372,407936142,106339341", ",460887337 319,196,6493061,206023122,199608748 ", "313,408,62796271,237035221,143718889 384,157,56", "3689609,79651357,6481634 273,417,30876028,40606", "917,676694768 73,235,590930497,84947942,2078643", "76 394,256,239511386,38399377,290576021 399,393", ",731588507,591578275,4152683 373,242,148262953,", "560974087,29249203 377,335,16455005,399490141,2", "42585848 354,303,384868849,410829062,518901889 ", "181,395,388254215,1243453,25510941 93,221,29669", "993,285410203,36855586 120,61,104867359,8324662", "6,692941313 376,337,828856848,721515296,5807745", " 113,245,416873633,7633145,21309373 326,157,542", "624895,300515401,246130630 145,382,222511537,52", "2562813,443277031 5,17,83770802,566514603,86406", "7 24,100,408992851,315796591,129346147 13,273,2", "37116273,139098037,566933833 287,405,343159105,", "839074663,316086946 271,321,124980025,165859001", ",60987433 11,310,295880329,491810171,206079941 ", "397,226,785764274,57087409,389172497 228,45,101", "288584,210316051,374885902 81,395,42780466,2368", "22053,58545815 217,277,703337812,34749367,32181", "8421 265,225,315663625,6842821,161940767 96,182", ",66102013,396913536,411203141 25,113,31774657,5", "49547741,726868529 215,98,143071168,269703550,2", "50342639 225,281,629311951,399025537,241667089 ", "322,313,805675321,450161627,63999991 107,55,533", "820817,15994521,940157089"};
    int time = 445860275;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    int n = 263;
    vector<string> flights = {"129,15,462578801,73675881,142590972 184,220,388", "105972,78558502,598595816 202,37,155195614,2284", "4890,224991259 55,243,434944281,487604062,23378", "442 74,107,676839736,21092003,405142921 213,99,", "165455401,244182159,335603962 141,25,194800971,", "249690838,265869011 40,206,195290731,463552636,", "399451958 189,231,5238369,158941527,188213789 1", "40,66,559345135,663990319,335051059 134,81,2871", "80017,597336223,29324593 260,253,846976533,1580", "06546,82143257 138,81,168019521,553887181,78533", "0369 203,251,145699498,57680332,14139343 115,20", "7,212307317,68738087,269096702 77,81,163374877,", "149281815,247931266 76,223,518713909,227787866,", "985944405 12,81,462516976,124856395,651556468 1", "48,88,878417161,44387839,478901470 244,215,1766", "5089,32991193,637877164 3,178,259441729,8265532", "9,719206033 252,113,192239659,571251373,9348733", " 8,12,406193966,137133889,47985967 205,179,2302", "62937,210195997,96134073 72,142,440294975,66113", "1085,421415531 15,191,148588543,25122217,221641", "741 32,187,167895604,134596001,86686601 47,55,4", "15499109,678900105,626625587 168,191,472243234,", "930109965,277203781 50,251,166794526,506973601,", "323661421 129,55,21853550,54117019,4975087 221,", "161,26927825,123061206,268596817 46,189,5704294", "84,203199445,111216764 235,15,825408821,5567428", "3,108262593 94,188,73903485,334655665,44011236 ", "23,79,507621487,316211586,44230109 34,118,20078", "3241,35140722,778973201 79,196,74502693,2864764", "72,541531717 261,138,495428206,289446151,314031", "83 96,40,622174701,226993861,166852689 262,56,1", "52539629,24175579,195105924 71,245,587381545,12", "6018986,16940315 152,164,774484237,74150747,144", "00871 91,108,668941313,88108655,50781169 21,242", ",102747349,78536158,56415505 77,131,779682981,2", "4744821,407160073 59,225,291575285,159298395,57", "3522457 118,261,140536579,263833201,274172061 3", "3,69,220664425,567523161,12131330 220,128,66376", "216,117742456,359175881 119,210,234590049,45555", "812,61602411 61,213,92524273,334764041,66785337", "7 149,80,468624259,158420593,669550216 5,108,56", "4555473,270992422,114613304 231,42,68130085,523", "06808,63405205 40,93,174346433,252202681,248545", "135 13,70,399694417,660859480,302681787 8,205,4", "85683885,558678275,62962097 174,169,51430849,28", "0433737,184569886 13,92,28584543,36344825,19849", "2355 188,60,152254081,242508673,219906389"};
    int time = 27712801;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    int n = 350;
    vector<string> flights = {"1,19,534459369,33631543,285271850 247,225,53003", "8891,695766171,34933662 57,336,20371263,2619824", "81,139640920 1,168,1371411,433790976,50289289 1", "51,60,523331995,189179431,444205151 276,91,1083", "24581,39114643,127708904 221,157,833478283,3670", "21569,66725851 335,141,7106239,23422137,3342147", "49 231,215,577227601,52621713,261195146 123,262", ",357794455,117340381,135932341 13,315,87284669,", "695182521,119722432 181,100,16244875,567080229,", "429258985 333,92,330138089,4595525,120786689 25", "3,277,112876141,351095277,165493651 311,167,624", "485557,341820781,631784911 34,321,273912598,385", "155559,59715241 121,286,67273823,495829225,2729", "34758 44,19,65202369,394704321,45198113 157,282", ",121176127,81272054,161354611 201,111,626898097", ",157504621,300368237 162,141,89006457,164509477", ",70522075 51,176,420022361,208226701,401918693 ", "59,125,373899961,39459721,26304769 165,51,12291", "3116,97472782,172847483 87,51,13342801,18328117", "6,123240181 33,121,342651763,47958821,970876589", " 27,178,263532361,188207263,446638471 43,51,755", "29673,130183681,72911431 309,267,558492481,9096", "42200,105843973 291,303,345664151,69890044,1794", "663 11,245,443452721,503217443,850057716 64,341", ",118704749,65788201,59497858 336,76,52267009,47", "4756390,118407579 34,211,128782421,409568737,22", "4466298 294,87,794550616,35040747,242346676 227", ",243,203914107,704028541,416586349 150,97,19223", "4001,34207489,243645161 281,45,98458829,4492084", "16,125790781 265,176,852221149,116310185,234330", "825 341,16,211502764,80764093,137034835 49,110,", "415682267,707749525,205144917 313,155,459423451", ",168015871,170319346 143,75,158333473,41086927,", "2874951 243,127,53527450,969031009,470961 28,83", ",325953057,394534260,23381841 197,201,340053361", ",41516617,498715322 310,151,262181845,44152659,", "162222331 101,265,418895297,241151229,956516261", " 277,60,205234561,119721736,363798661 71,253,26", "1873811,265262894,15684703 71,162,182125641,582", "02513,76321441 163,72,97664101,598240048,207509", "81 226,281,187594639,150847285,61191325 74,29,3", "28819110,181756174,166894575 31,223,421565560,4", "35557027,165074859 1,271,900291169,730560641,14", "5658773 17,329,628492159,346704529,162852559 20", "4,316,174724571,355104817,161478175 176,181,219", "819069,383668825,604006615 15,1,378852431,24557", "2154,247208166 7,85,890713,294103603,115484891"};
    int time = 97131439;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    int n = 270;
    vector<string> flights = {"199,83,245430406,87406113,678431626 41,42,82739", "2441,21716502,256818001 205,18,17901971,3017948", "11,160745039 74,219,674433197,26588707,19952569", " 163,35,646233556,64735498,2715076 41,105,32281", "0713,294411,581024016 269,1,240916583,41646561,", "148521257 1,163,533364070,117038982,9918660 225", ",76,39396603,269654212,41091457 79,118,98654181", ",84923326,67010671 219,205,754464246,38415777,1", "10765128 1,261,72205187,253498006,108506211 113", ",150,119894321,15647820,394076341 146,174,11268", "561,46330156,37233561 250,35,737508889,22100069", "8,866652513 157,217,298146534,462384321,6678726", "68 181,175,472234183,447827389,93342721 94,205,", "46415866,493180234,294824808 71,199,5604618,106", "693489,100650809 141,60,334480405,78602789,4565", "98304 241,226,25403067,134545646,134935265 221,", "223,511722030,12879701,676761526 187,11,3897352", "9,15955031,880531641 91,229,304853297,44395373,", "516828901 211,184,27639061,399860220,202649266 ", "165,197,40080886,644376533,23105137 259,191,451", "565173,97820423,274181249 6,27,346139473,342405", "666,577216751 85,55,363235085,21631649,66687601", " 109,196,295245511,430236233,134184913 60,121,7", "9621641,232215393,684719604 97,28,612760906,216", "094399,490334212 43,25,211677025,265915791,1985", "30175 128,61,584700535,167377401,524230915 200,", "61,203296873,157802784,92026507 19,145,17922429", "3,361322017,389319976 94,111,3235903,348684197,", "750812151 46,193,519449455,409708687,162973427 ", "203,221,199408483,851692621,148654789 66,121,26", "5782861,88668403,17974792 85,163,18899548,22886", "6473,171006545 91,259,660680713,360912961,14204", "53 133,171,13222696,294703809,194482213 263,85,", "54299239,87623488,137173441 197,184,100709701,5", "46958079,423660636 13,134,304116555,387912611,1", "82917266 115,65,38677897,68567581,137309386 11,", "109,573649435,10421062,70034289 247,195,2204083", "93,28160161,73430445 151,181,202097481,1851669,", "86161 258,108,135146206,69977326,832413161 190,", "146,437707312,330472081,28567951 256,127,281037", "129,452775224,2949016 266,111,796599001,4470096", "85,75807151 139,192,135457169,490280072,6707723", " 215,55,145612039,522936469,181536356 55,121,48", "7733150,131327751,80111329 115,7,128284701,2595", "54335,23990689 171,91,19014285,178558366,198330", "409 249,111,630260539,624229254,269757421 11,91", ",232646541,340913287,50329291"};
    int time = 376081675;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    int n = 477;
    vector<string> flights = {"220,22,316285301,733625145,107091076 221,451,15", "6170045,21090466,238698841 98,473,87058668,1340", "40921,244686325 432,325,533458301,359556317,299", "812952 220,159,228436741,257197879,117141600 29", "3,400,428360217,85374913,465031997 420,415,2113", "96681,8058205,154426931 267,47,205595261,342970", "741,32929801 129,245,41604925,20466265,53162819", "7 161,72,95114314,158117391,24523777 289,432,50", "2715843,68751026,200755820 205,154,34652295,161", "522021,190708023 442,97,40047820,149462503,3565", "14440 388,8,7610188,106172089,42779770 290,29,5", "24159956,487637110,296516868 277,128,207345482,", "194731131,156235667 469,239,324421241,41495777,", "378689407 451,213,61357851,36213085,168431251 2", "41,253,44416997,321999583,145445329 299,352,242", "076307,2534091,471750470 304,10,307223275,41636", "3942,38812806 88,145,492578593,352789329,530406", "1 301,220,284657735,266888083,27163151 89,265,2", "63708441,62190193,191467456 139,259,52499389,69", "249451,1344993 226,268,266324521,390995361,1330", "70017 465,300,245814703,368939265,115264081 349", ",46,9353536,90061025,4336129 306,364,60844891,6", "4115433,940501126 212,449,134179771,308434027,1", "78933249 460,13,320190781,715247513,71417377 33", "7,350,283967825,74988875,11515321 43,409,226853", "291,86792679,121011430 45,77,290110401,62783028", "1,2444601 457,77,254367289,55045630,462240091 1", "9,285,33340833,149161833,743666 19,133,56238771", "7,189978441,238758048 397,181,469978156,1941264", "1,739595262 1,465,57508957,279141633,77245237 3", "66,130,121476128,481645441,130216546 331,429,45", "3937177,324801998,520814501 325,368,473333131,7", "2013294,173976705 383,125,20683244,224431877,29", "331529 385,384,192455433,61801234,380735587 346", ",441,480725802,367043441,22893784 50,372,276610", "61,241607977,151132155 133,272,133286866,683983", "851,18807481 163,49,447440995,115781766,9925824", "8 423,373,360380791,95887776,801638069 106,82,1", "46610551,185764771,653780634 69,250,305943676,9", "5256173,277818061 415,145,192069421,167114892,1", "04612503 362,407,326284949,72696041,84481625 43", "1,247,162900805,720287825,694265089 14,356,2463", "2890,42218229,86537500 131,148,390311811,308229", "901,243308313 148,220,16141543,254886391,162817", "84 102,52,452336305,120584509,179590516 31,144,", "78584461,230055634,6717547 27,334,196041517,272", "779157,366314551"};
    int time = 557010609;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    int n = 59;
    vector<string> flights = {"15,34,893991078,520902656,192291857 35,54,13393", "4329,305801356,186009656 48,31,124468566,254687", "548,33982085 30,15,804331531,418408947,21833710", "9 30,3,657981925,400914683,413465059 7,9,999862", "21,169579761,666458027 49,24,236602883,25152819", "5,495753485 14,41,250090216,82470993,524883886 ", "57,11,398983201,239215796,966384037 26,45,45464", "6956,590740097,159149145 9,55,148054760,3669860", "26,44819386 54,10,170974970,83332217,467213860 ", "34,45,906665230,37248772,129345156 34,13,163087", "111,30620693,9285193 48,46,506548096,170260299,", "94789377 2,1,379929529,838914616,91551559 46,17", ",227939449,594321534,413936659 17,2,765402716,3", "72066113,980162393 22,12,17079067,190460446,292", "345505 52,46,184569657,333048511,117837377 23,5", "3,445988401,1405801,4763503 36,14,49652989,1258", "87672,858205066 10,24,39853343,364476921,449064", "01 40,9,282704251,116804326,113345233 18,39,178", "514293,85173630,116895571 8,48,484577248,830927", "8,308293783 27,7,661359241,244598477,391093816 ", "48,33,801628276,374856307,811696777 2,42,101523", "346,212846699,102078568 55,31,73142844,52511079", ",752313765 23,28,614374972,21610896,154218853 3", "0,18,44217928,412108723,44559489 1,57,102499669", ",199473824,203044969 40,19,317092186,26318775,7", "2028161 18,25,222790090,7945471,369052633 47,26", ",86180673,13893139,617599501 20,25,935827152,15", "4955864,92793916 46,54,232141951,108555184,3854", "2291 37,30,616688937,8630077,150269881 52,5,537", "085921,93850184,672734285 59,22,335063311,83951", "56,301512768 59,55,24295617,186259843,29150317 ", "43,53,48199058,178456886,4999327 26,8,26165951,", "33975601,179584946 39,32,975693077,736790510,83", "45877 59,26,89164321,428115961,1317361 38,47,11", "6374451,248891508,215841949 19,22,256604761,509", "537309,466156015 53,59,103797528,368535210,4999", "13776 26,12,377678632,46382681,298331383 18,26,", "58043686,23603581,451898870 35,5,18012501,67509", "616,34418973 52,33,180013135,12982969,301378959", " 57,1,569344888,7504465,445053750 1,44,18195938", "9,847078789,60912955 25,40,34006666,6061861,313", "660945 11,56,36757013,143847121,111068551 15,52", ",33521797,124694207,453449437 8,39,3948871,9926", "5609,707441427 33,8,306055639,11120602,51639334", "5 24,22,810696221,307160449,180507931 43,34,166", "916597,641073247,161340673 58,13,183115021,3524", "89843,359999641 14,1,672965784,29820001,6956581"};
    int time = 238721107;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    int n = 407;
    vector<string> flights = {"1,2,471124,898368,467225 2,3,349387,490851,7662", "90 3,4,239572,638164,697006 4,5,115544,351436,8", "89610 5,6,541522,427798,415528 6,7,116433,34429", "0,447133 7,8,690226,626872,752251 8,9,641604,72", "1268,809134 9,10,355783,470743,817562 10,11,579", "060,473980,670528 11,12,835680,791072,952030 12", ",13,823810,679500,601606 13,14,246364,376867,97", "2136 14,15,771040,729216,296748 15,16,746416,84", "0198,555906 16,17,357676,468589,178795 17,18,88", "3462,550720,830962 18,19,831778,428645,594528 1", "9,20,647830,398221,561664 20,21,273940,724396,2", "66285 21,22,402970,981612,952500 22,23,926284,3", "03380,551437 23,24,845359,120159,259399 24,25,9", "45005,295422,319948 25,26,103212,303180,934384 ", "26,27,631900,551110,110190 27,28,414088,295684,", "911395 28,29,508700,633276,801480 29,30,700516,", "946252,151312 30,31,602254,205947,166084 31,32,", "137200,465309,721104 32,33,760984,910747,289270", " 33,34,242882,177344,234685 34,35,229400,273564", ",647794 35,36,213792,766996,670278 36,37,749575", ",362899,840001 37,38,570942,589600,965044 38,39", ",701680,328238,712022 39,40,240413,389584,26909", "6 40,41,292802,460830,767978 41,42,925720,10471", "6,476068 42,43,874960,547888,204732 43,44,37287", "5,521398,563104 44,45,948238,915622,509679 45,4", "6,589132,857988,463400 46,47,326000,129607,5423", "68 47,48,782389,432865,846170 48,49,411870,8674", "88,454069 49,50,923424,980026,318269 50,51,4281", "04,542656,340875 51,52,229266,678792,918700 52,", "53,607654,794797,288884 53,54,371423,886913,844", "834 54,55,976635,811552,246030 55,56,113616,216", "970,551914 56,57,333036,853718,743115 57,58,852", "805,956896,671240 58,59,111628,502118,262372 59", ",60,293264,269512,205769 60,61,790750,936618,86", "0996 61,62,434188,874072,604540 62,63,879505,81", "5218,370428 63,64,791024,785235,527578 64,65,18", "2250,869478,324736 65,66,387916,915148,152310 6", "6,67,459639,374686,334710 67,68,303684,230120,3", "04960 68,69,607551,883398,133375 69,70,368732,1", "81356,818041 70,71,974296,715465,129475 71,72,4", "05864,707492,705600 72,73,303320,420262,555900 ", "73,74,145755,255360,987632 74,75,626750,217160,", "776680 75,76,240375,639744,250716 76,77,656886,", "490054,418884 77,78,276352,347088,343600 78,79,", "521560,660570,233550 79,80,653752,574594,700876", " 80,81,671852,593155,697498 81,82,770875,722712", ",663960 82,83,767724,425308,156357"};
    int time = 401413356;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    int n = 410;
    vector<string> flights = {"1,2,307307,691637,848945 2,3,935256,248180,4928", "33 3,4,736687,446755,316690 4,5,907522,452704,4", "42092 5,6,230437,149140,750736 6,7,119900,22648", "0,664966 7,8,540040,752956,894504 8,9,728553,87", "2884,209660 9,10,182623,574816,941126 10,11,309", "745,379900,601936 11,12,478216,501856,340552 12", ",13,371287,717283,639775 13,14,857768,111880,73", "3153 14,15,283420,637940,783874 15,16,994324,41", "9056,753955 16,17,521920,610414,240034 17,18,64", "3024,370124,940465 18,19,967240,273402,197475 1", "9,20,803840,362055,258472 20,21,711199,930310,1", "55618 21,22,243010,424444,207280 22,23,248768,7", "94465,171680 23,24,569998,737266,690582 24,25,8", "44253,946476,301092 25,26,140717,364375,815070 ", "26,27,151240,385414,260011 27,28,784288,811468,", "392125 28,29,847978,686176,434924 29,30,764992,", "931674,523204 30,31,161402,127448,507932 31,32,", "294112,519988,490624 32,33,433736,108204,993960", " 33,34,834331,584074,387100 34,35,646948,268951", ",381100 35,36,101542,686870,650858 36,37,455367", ",570016,222358 37,38,620530,190288,981718 38,39", ",456944,926632,773985 39,40,601840,403320,29994", "2 40,41,256334,885952,705520 41,42,862944,49310", "9,761953 42,43,120080,405610,659231 43,44,98051", "2,746670,390268 44,45,103272,898024,941374 45,4", "6,845055,729581,357061 46,47,859060,873216,7284", "16 47,48,962832,316642,385740 48,49,967705,1561", "24,642558 49,50,606167,287886,131860 50,51,5617", "76,836368,556830 51,52,282518,918330,899434 52,", "53,812350,671593,999750 53,54,727517,550672,554", "872 54,55,183184,370360,763732 55,56,309876,350", "260,555264 56,57,746984,379549,101483 57,58,752", "560,227230,109942 58,59,728670,243340,703570 59", ",60,886048,937348,942768 60,61,758686,233925,54", "3976 61,62,302872,315724,797398 62,63,825622,31", "9492,419512 63,64,367075,508744,309551 64,65,16", "9084,785980,539854 65,66,343110,135464,203177 6", "6,67,336946,719228,564850 67,68,136295,180004,7", "83385 68,69,541619,722156,862735 69,70,350674,4", "59836,542701 70,71,917062,138875,672770 71,72,8", "38366,240400,734296 72,73,829281,749251,753808 ", "73,74,921005,704620,492088 74,75,627616,950995,", "839800 75,76,362388,824080,933840 76,77,104628,", "387862,607628 77,78,526210,951400,324106 78,79,", "410644,104464,856892 79,80,268849,155326,608480", " 80,81,548420,954340,849703 81,82,528328,289765", ",595460 82,83,936762,564208,630400"};
    int time = 103470526;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    int n = 449;
    vector<string> flights = {"1,2,394789,369694,759742 2,3,591136,371267,6407", "44 3,4,176998,931952,311728 4,5,317154,763920,5", "79460 5,6,669440,340956,789232 6,7,578975,63337", "5,265685 7,8,729038,616100,405920 8,9,327976,66", "2848,804376 9,10,874024,503272,137414 10,11,627", "614,201250,233002 11,12,845205,791680,970639 12", ",13,319724,277294,440995 13,14,174822,443560,47", "7658 14,15,297738,387858,803578 15,16,769222,68", "9041,516645 16,17,299602,482158,307712 17,18,38", "2168,255884,262240 18,19,652126,287332,369780 1", "9,20,336968,192228,778267 20,21,607009,263092,5", "60736 21,22,734580,751451,270631 22,23,231970,5", "87464,711802 23,24,916336,224014,624824 24,25,7", "14065,660250,342550 25,26,372916,380342,653696 ", "26,27,985393,269376,678884 27,28,795120,852815,", "219568 28,29,864291,184875,921498 29,30,463472,", "439558,102784 30,31,826394,198928,290728 31,32,", "197830,533520,601556 32,33,993602,795802,217264", " 33,34,833868,649360,666412 34,35,870810,230000", ",864679 35,36,409349,416808,301316 36,37,177624", ",297401,944420 37,38,211501,877931,186542 38,39", ",378871,789644,147530 39,40,940203,628300,83454", "8 40,41,714988,188852,322808 41,42,297025,45656", "8,350926 42,43,706144,891574,749942 43,44,37713", "5,501385,487673 44,45,228132,889498,279003 45,4", "6,717410,128116,729212 46,47,120906,556816,6666", "82 47,48,357920,376480,227457 48,49,247852,2686", "52,203194 49,50,230642,466080,928315 50,51,9280", "90,137316,785905 51,52,764008,131860,573847 52,", "53,859613,710946,716626 53,54,597400,367690,449", "622 54,55,824986,339208,272840 55,56,638776,230", "876,685708 56,57,606360,911908,290100 57,58,343", "987,210105,804914 58,59,545608,748369,840844 59", ",60,284900,582932,180640 60,61,871495,162001,46", "1152 61,62,462930,702496,824176 62,63,610150,88", "7968,765154 63,64,619048,490492,764146 64,65,93", "8215,437152,800668 65,66,761708,859555,395740 6", "6,67,801088,267889,633627 67,68,570776,551120,8", "53680 68,69,304025,756928,612118 69,70,328307,2", "68432,638246 70,71,140896,141412,711784 71,72,1", "26415,649839,234936 72,73,636206,554756,801918 ", "73,74,507864,380917,861045 74,75,479560,609640,", "298184 75,76,876862,776732,728149 76,77,915320,", "416680,980612 77,78,647018,981623,517681 78,79,", "355195,899230,665235 79,80,403852,943648,886225", " 80,81,767260,962992,520657 81,82,977650,724426", ",772002 82,83,416880,529000,376104"};
    int time = 398785602;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    int n = 422;
    vector<string> flights = {"1,2,430129,216762,468658 2,3,373445,732925,4578", "23 3,4,906040,677645,245940 4,5,373895,164972,2", "10595 5,6,352400,368100,912598 6,7,674840,43962", "9,931748 7,8,976098,526355,309337 8,9,743920,22", "3586,127781 9,10,345034,941104,350900 10,11,300", "822,966670,393325 11,12,434364,344508,339964 12", ",13,911896,916620,909271 13,14,844500,873199,96", "5488 14,15,814528,104628,882578 15,16,620260,30", "9452,165081 16,17,834323,189136,583954 17,18,78", "0464,875989,215872 18,19,371824,332792,209440 1", "9,20,585222,820190,448004 20,21,206912,482824,9", "58934 21,22,638602,100500,605590 22,23,124592,1", "92434,779125 23,24,136720,864644,195427 24,25,4", "97171,104640,235917 25,26,850250,897290,233662 ", "26,27,282550,594208,642860 27,28,276228,613108,", "125536 28,29,286117,366298,407990 29,30,700480,", "600400,265468 30,31,588124,506740,382700 31,32,", "949932,347936,532706 32,33,970015,988135,120520", " 33,34,275710,479557,404720 34,35,259148,496881", ",735136 35,36,631480,419105,244175 36,37,226918", ",890675,767872 37,38,251752,155363,212000 38,39", ",902073,164807,434404 39,40,962574,600123,72991", "8 40,41,582267,684441,840275 41,42,792850,60157", "6,961264 42,43,482096,976072,481654 43,44,50008", "0,964480,965845 44,45,331260,428191,126712 45,4", "6,678592,917636,560580 46,47,975225,384370,4566", "70 47,48,578500,187484,632704 48,49,410640,1762", "64,395348 49,50,858718,196768,456765 50,51,4294", "48,762520,204446 51,52,368632,503748,393874 52,", "53,860965,788635,541824 53,54,443547,526864,902", "039 54,55,267847,949024,602731 55,56,682761,938", "864,434560 56,57,272100,955125,212059 57,58,406", "480,235645,775063 58,59,772840,393392,880760 59", ",60,360520,638400,154160 60,61,926660,106405,98", "6838 61,62,964749,485430,468298 62,63,505439,48", "3864,583853 63,64,352240,851878,863475 64,65,47", "7460,252832,243523 65,66,818904,441537,591104 6", "6,67,570736,641118,827940 67,68,712680,882985,4", "08832 68,69,336330,141112,149957 69,70,153600,2", "37472,185869 70,71,259168,155178,370838 71,72,8", "98004,834360,366976 72,73,479800,376853,620959 ", "73,74,941634,500832,473407 74,75,926038,484785,", "667216 75,76,667225,813814,853216 76,77,465580,", "581616,630136 77,78,742484,283000,302720 78,79,", "782580,392638,316085 79,80,993450,279306,908436", " 80,81,551227,823965,125974 81,82,733810,638518", ",769510 82,83,434800,158176,984970"};
    int time = 719186172;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    int n = 468;
    vector<string> flights = {"1,2,935032,545048,287918 2,3,206107,542233,6340", "96 3,4,672258,960000,783570 4,5,363520,344497,7", "04878 5,6,836256,491000,342535 6,7,357120,66221", "2,472120 7,8,235138,422024,146850 8,9,799804,74", "4574,352108 9,10,877180,305200,263044 10,11,351", "568,500215,415296 11,12,667146,678210,564544 12", ",13,638626,121114,431264 13,14,895534,816440,81", "8416 14,15,375220,176048,899380 15,16,369280,51", "2736,206574 16,17,797706,360400,967600 17,18,29", "6317,785152,962115 18,19,483913,700080,872107 1", "9,20,501268,913792,931264 20,21,733220,830085,1", "55041 21,22,497952,421781,213200 22,23,425332,8", "30470,821600 23,24,347020,607442,243434 24,25,6", "97440,183674,673396 25,26,502666,150034,736030 ", "26,27,784174,340693,913589 27,28,437941,767965,", "735052 28,29,732943,522958,280406 29,30,821840,", "150168,225575 30,31,161792,457920,442644 31,32,", "690330,361984,776386 32,33,425702,264622,853408", " 33,34,231285,212958,943821 34,35,881664,621064", ",351730 35,36,524314,664165,818068 36,37,233940", ",907469,156550 37,38,307765,386500,748662 38,39", ",227405,470338,514081 39,40,135350,651701,48160", "0 40,41,691692,942698,623685 41,42,386116,79666", "3,416960 42,43,435520,460864,968308 43,44,81095", "2,538418,450885 44,45,375560,848616,489223 45,4", "6,364210,185434,916464 46,47,167824,617335,3815", "50 47,48,769197,497787,478039 48,49,911436,9333", "65,869631 49,50,844790,724276,178954 50,51,5756", "02,801640,628266 51,52,741172,404066,552165 52,", "53,984520,505792,946171 53,54,821030,379710,406", "217 54,55,866520,922612,412980 55,56,138257,683", "626,497476 56,57,409885,521068,628208 57,58,336", "064,341216,770935 58,59,635968,957074,692065 59", ",60,533810,432556,787888 60,61,364520,880672,55", "2568 61,62,681439,987320,670292 62,63,984715,57", "1172,168956 63,64,470872,257172,935298 64,65,56", "2186,859292,136096 65,66,551335,510778,678778 6", "6,67,749856,341695,311476 67,68,890584,808635,6", "94212 68,69,473164,499618,923659 69,70,896000,3", "76408,133511 70,71,716524,308255,400000 71,72,6", "21493,648560,673396 72,73,514412,917011,407904 ", "73,74,858111,741556,641520 74,75,614176,400328,", "901648 75,76,732634,988000,427721 76,77,300790,", "203833,211156 77,78,871868,472588,277612 78,79,", "481340,575315,387148 79,80,906400,215968,396657", " 80,81,340480,427260,750049 81,82,305412,123175", ",988525 82,83,889960,164022,701421"};
    int time = 175944682;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    int n = 477;
    vector<string> flights = {"1,2,1000000,1000000,1000000 2,3,1000000,1000000", ",1000000 3,4,1000000,1000000,1000000 4,5,100000", "0,1000000,1000000 5,6,1000000,1000000,1000000 6", ",7,1000000,1000000,1000000 7,8,1000000,1000000,", "1000000 8,9,1000000,1000000,1000000 9,10,100000", "0,1000000,1000000 10,11,1000000,1000000,1000000", " 11,12,1000000,1000000,1000000 12,13,1000000,10", "00000,1000000 13,14,1000000,1000000,1000000 14,", "15,1000000,1000000,1000000 15,16,1000000,100000", "0,1000000 16,17,1000000,1000000,1000000 17,18,1", "000000,1000000,1000000 18,19,1000000,1000000,10", "00000 19,20,1000000,1000000,1000000 20,21,10000", "00,1000000,1000000 21,22,1000000,1000000,100000", "0 22,23,1000000,1000000,1000000 23,24,1000000,1", "000000,1000000 24,25,1000000,1000000,1000000 25", ",26,1000000,1000000,1000000 26,27,1000000,10000", "00,1000000 27,28,1000000,1000000,1000000 28,29,", "1000000,1000000,1000000 29,30,1000000,1000000,1", "000000 30,31,1000000,1000000,1000000 31,32,1000", "000,1000000,1000000 32,33,1000000,1000000,10000", "00 33,34,1000000,1000000,1000000 34,35,1000000,", "1000000,1000000 35,36,1000000,1000000,1000000 3", "6,37,1000000,1000000,1000000 37,38,1000000,1000", "000,1000000 38,39,1000000,1000000,1000000 39,40", ",1000000,1000000,1000000 40,41,1000000,1000000,", "1000000 41,42,1000000,1000000,1000000 42,43,100", "0000,1000000,1000000 43,44,1000000,1000000,1000", "000 44,45,1000000,1000000,1000000 45,46,1000000", ",1000000,1000000 46,47,1000000,1000000,1000000 ", "47,48,1000000,1000000,1000000 48,49,1000000,100", "0000,1000000 49,50,1000000,1000000,1000000 50,5", "1,1000000,1000000,1000000 51,52,1000000,1000000", ",1000000 52,53,1000000,1000000,1000000 53,54,10", "00000,1000000,1000000 54,55,1000000,1000000,100", "0000 55,56,1000000,1000000,1000000 56,57,100000", "0,1000000,1000000 57,58,1000000,1000000,1000000", " 58,59,1000000,1000000,1000000 59,60,1000000,10", "00000,1000000 60,61,1000000,1000000,1000000 61,", "62,1000000,1000000,1000000 62,63,1000000,100000", "0,1000000 63,64,1000000,1000000,1000000 64,65,1", "000000,1000000,1000000 65,66,1000000,1000000,10", "00000 66,67,1000000,1000000,1000000 67,68,10000", "00,1000000,1000000 68,69,1000000,1000000,100000", "0 69,70,1000000,1000000,1000000 70,71,1000000,1", "000000,1000000 71,72,1000000,1000000,1000000 72", ",73,1000000,1000000,1000000 73,74,1000000,10000", "00,1000000 74,75,1000000,1000000,1000000"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    int n = 75;
    vector<string> flights = {"1,2,1000000,1000000,1000000 2,3,1000000,1000000", ",1000000 3,4,1000000,1000000,1000000 4,5,100000", "0,1000000,1000000 5,6,1000000,1000000,1000000 6", ",7,1000000,1000000,1000000 7,8,1000000,1000000,", "1000000 8,9,1000000,1000000,1000000 9,10,100000", "0,1000000,1000000 10,11,1000000,1000000,1000000", " 11,12,1000000,1000000,1000000 12,13,1000000,10", "00000,1000000 13,14,1000000,1000000,1000000 14,", "15,1000000,1000000,1000000 15,16,1000000,100000", "0,1000000 16,17,1000000,1000000,1000000 17,18,1", "000000,1000000,1000000 18,19,1000000,1000000,10", "00000 19,20,1000000,1000000,1000000 20,21,10000", "00,1000000,1000000 21,22,1000000,1000000,100000", "0 22,23,1000000,1000000,1000000 23,24,1000000,1", "000000,1000000 24,25,1000000,1000000,1000000 25", ",26,1000000,1000000,1000000 26,27,1000000,10000", "00,1000000 27,28,1000000,1000000,1000000 28,29,", "1000000,1000000,1000000 29,30,1000000,1000000,1", "000000 30,31,1000000,1000000,1000000 31,32,1000", "000,1000000,1000000 32,33,1000000,1000000,10000", "00 33,34,1000000,1000000,1000000 34,35,1000000,", "1000000,1000000 35,36,1000000,1000000,1000000 3", "6,37,1000000,1000000,1000000 37,38,1000000,1000", "000,1000000 38,39,1000000,1000000,1000000 39,40", ",1000000,1000000,1000000 40,41,1000000,1000000,", "1000000 41,42,1000000,1000000,1000000 42,43,100", "0000,1000000,1000000 43,44,1000000,1000000,1000", "000 44,45,1000000,1000000,1000000 45,46,1000000", ",1000000,1000000 46,47,1000000,1000000,1000000 ", "47,48,1000000,1000000,1000000 48,49,1000000,100", "0000,1000000 49,50,1000000,1000000,1000000 50,5", "1,1000000,1000000,1000000 51,52,1000000,1000000", ",1000000 52,53,1000000,1000000,1000000 53,54,10", "00000,1000000,1000000 54,55,1000000,1000000,100", "0000 55,56,1000000,1000000,1000000 56,57,100000", "0,1000000,1000000 57,58,1000000,1000000,1000000", " 58,59,1000000,1000000,1000000 59,60,1000000,10", "00000,1000000 60,61,1000000,1000000,1000000 61,", "62,1000000,1000000,1000000 62,63,1000000,100000", "0,1000000 63,64,1000000,1000000,1000000 64,65,1", "000000,1000000,1000000 65,66,1000000,1000000,10", "00000 66,67,1000000,1000000,1000000 67,68,10000", "00,1000000,1000000 68,69,1000000,1000000,100000", "0 69,70,1000000,1000000,1000000 70,71,1000000,1", "000000,1000000 71,72,1000000,1000000,1000000 72", ",73,1000000,1000000,1000000 73,74,1000000,10000", "00,1000000 74,75,1000000,1000000,1000000"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 12000000;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    int n = 47;
    vector<string> flights = {"19,40,17,52,54 43,37,28,37,65 29,22,91,91,43 37", ",35,40,97,67 22,37,17,97,67 8,39,27,49,10 5,37,", "46,49,81 20,1,64,1,82 2,8,1,66,12 6,22,73,94,1 ", "8,25,11,42,1 28,34,79,85,74 4,16,3,22,53 23,14,", "45,1,5 31,40,27,15,85 47,44,75,34,52 42,27,63,3", "0,73 21,29,37,18,97 31,46,24,70,10 16,32,26,10,", "17 43,12,51,16,93 8,23,94,90,55 45,41,62,95,50 ", "5,31,77,30,35 20,34,40,79,67 11,39,82,46,43 4,2", "7,55,81,26 4,44,91,64,1 13,44,50,82,78 19,33,1,", "46,27 16,36,79,64,97 39,8,98,67,54 33,35,27,16,", "43 16,28,57,1,61 18,44,89,31,98 19,16,91,96,56 ", "6,9,46,97,43 44,26,84,61,9 31,28,61,28,84 43,3,", "90,96,8 1,10,21,4,20 27,19,46,10,82 33,10,81,56", ",88 25,1,3,17,53 31,18,93,78,21 1,27,69,43,48 2", "0,8,6,99,28 17,3,74,1,16 11,24,39,33,67 28,44,2", ",71,6 21,25,67,28,21 10,34,4,23,81 38,1,12,69,4", " 22,19,28,55,7 40,34,34,8,82 19,31,1,76,92 3,13", ",68,19,12 6,40,67,87,13 5,39,67,51,58 5,24,40,1", "6,79 16,25,35,37,22 35,28,58,43,46 5,47,34,56,1", "2 10,13,82,90,5 14,4,80,44,34 27,16,95,37,94 26", ",9,10,77,91 35,27,19,83,61 46,3,46,44,63 28,40,", "16,53,58 33,38,67,18,73 42,24,1,4,6 28,22,64,25", ",67 19,41,23,26,34 34,31,74,37,87 24,2,64,51,91", " 3,36,5,88,97 46,15,61,1,27 30,34,44,34,10 38,2", "1,28,76,46 45,21,31,26,64 38,27,49,86,89 19,41,", "56,43,14 20,41,47,88,36 26,21,49,12,45 19,21,55", ",67,67 27,46,13,33,19 25,28,82,78,98 31,19,8,1,", "3 27,15,1,46,22 6,27,82,1,79 28,18,31,55,99 37,", "24,95,42,28 16,21,52,37,82 1,32,93,3,52 4,10,9,", "87,76 25,42,91,15,52 12,35,89,73,6 7,34,42,46,9", "7 1,38,64,85,19 38,17,45,40,3 31,11,7,30,52 47,", "39,64,4,24 43,32,49,49,14 27,6,29,34,91 24,1,71", ",10,78 1,10,38,75,75 36,10,1,37,34 2,14,19,1,22", " 4,33,30,1,29 15,1,84,1,48 36,11,28,37,34 13,41", ",53,46,97 17,4,30,10,1 30,29,37,1,37 19,7,49,59", ",99 12,16,43,78,48 30,41,55,19,2 26,21,50,47,96", " 20,1,73,82,22 14,20,34,46,85 15,37,34,78,2 28,", "27,30,61,1 36,22,34,43,19 29,3,19,78,95 5,40,67", ",28,42 7,14,21,1,35 32,21,29,79,4 1,36,7,94,64 ", "29,39,21,50,93 14,11,19,83,4 22,12,44,49,13 12,", "4,31,24,98 14,32,51,37,55 2,26,65,47,66 7,4,1,1", ",37 31,35,90,58,55 20,36,62,71,1 3,9,19,87,86 6", ",24,11,25,35 40,46,6,4,78 30,27,91,79,67 14,4,4", "7,58,37 42,26,88,23,55 39,16,10,92,94 12,29,10,", "75,16 42,44,31,37,88 19,42,10,43,4 2,39,67,1,19", " 10,3,72,54,64 44,19,83,34,28 28,13,54,16,10 20", ",33,97,7,27 9,38,91,24,87 41,21,94,76,88"};
    int time = 301413357;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    int n = 47;
    vector<string> flights = {"17,41,40,34,54 15,6,46,64,43 35,6,1,52,7 15,37,", "10,1,48 40,29,49,86,27 42,7,22,53,82 38,17,13,8", ",35 21,40,9,85,10 21,5,38,88,90 17,14,55,19,13 ", "45,12,11,35,1 33,44,31,61,91 33,3,90,93,7 45,28", ",89,24,16 7,45,21,43,31 8,10,46,47,37 22,40,56,", "48,3 10,46,33,7,56 7,3,22,99,64 29,45,1,21,29 2", "2,3,6,3,58 17,5,1,85,53 26,22,48,50,5 34,25,43,", "51,91 6,26,73,10,76 20,25,34,37,22 19,8,49,1,98", " 33,14,76,71,92 8,12,48,1,61 7,6,92,4,10 44,34,", "1,33,45 47,25,40,9,63 13,14,38,13,28 6,16,44,13", ",1 35,47,7,46,13 46,12,60,64,59 30,22,7,5,75 39", ",46,44,44,21 8,7,9,78,19 5,1,27,70,91 14,16,46,", "55,76 8,38,37,59,40 20,30,52,44,10 40,8,85,76,5", "5 29,18,73,61,75 13,9,74,88,60 18,37,46,78,82 2", "8,22,43,52,91 22,18,60,1,29 21,41,34,34,33 18,4", "2,13,7,1 39,37,66,67,22 18,5,72,79,79 41,18,25,", "40,69 41,44,28,49,19 39,15,88,52,6 25,20,1,34,4", "8 34,31,73,23,23 9,32,58,46,24 2,15,48,82,10 24", ",40,82,46,70 13,1,65,31,53 35,32,89,29,94 33,13", ",64,46,79 37,5,4,72,64 2,28,49,91,89 33,46,34,4", ",86 33,7,76,61,44 19,8,19,34,85 44,6,73,44,50 7", ",8,11,59,34 39,44,66,7,74 13,45,26,7,7 5,15,21,", "4,34 9,24,46,37,94 42,35,91,92,1 33,18,76,94,89", " 20,42,48,92,23 25,2,55,61,89 42,10,28,56,11 36", ",22,19,61,5 40,34,46,76,94 31,27,86,76,15 11,25", ",71,55,85 43,11,31,33,19 30,4,13,69,8 4,14,28,9", "1,55 13,17,58,83,92 34,47,64,34,23 31,8,72,19,8", "8 23,1,42,57,67 39,18,1,68,76 40,18,76,78,28 25", ",9,74,49,61 26,31,88,34,28 16,33,82,23,91 9,15,", "97,29,51 6,36,57,13,82 3,41,30,19,67 10,7,29,10", ",45 5,22,35,23,58 5,11,6,73,22 31,42,82,1,37 33", ",34,61,51,91 37,4,8,64,78 7,21,67,33,81 39,17,4", "9,40,62 46,4,19,98,28 10,20,49,28,91 44,19,89,5", "8,77 21,23,31,31,82 6,14,82,46,72 46,37,55,1,2 ", "37,32,32,33,59 15,1,56,40,15 25,41,91,16,84 8,3", "9,66,1,46 44,18,85,61,49 14,9,67,38,79 17,27,86", ",70,63 15,22,72,55,34 25,46,64,82,47 17,36,22,9", "1,35 34,6,91,71,94 24,35,67,57,85 8,41,64,13,17", " 41,25,58,34,97 17,26,4,61,93 5,4,46,31,28 13,2", "0,12,90,55 9,8,73,3,7 3,37,67,20,31 8,40,36,15,", "56 19,45,79,45,16 38,3,6,55,73 3,9,12,85,88 15,", "45,88,26,84 43,33,59,8,55 28,31,17,2,85 34,46,2", ",31,77 3,45,37,28,18 16,10,42,51,73 10,16,34,67", ",44 22,17,22,90,44 19,22,68,36,13 41,15,52,22,4", " 46,47,34,5,34 28,1,37,66,14 25,43,68,55,89 30,", "42,19,81,61 44,25,1,15,51 6,24,79,67,91 45,2,72", ",25,72 15,24,27,38,9 16,36,28,33,23 29,2,1,25,3"};
    int time = 527407651;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    int n = 47;
    vector<string> flights = {"10,47,43,49,70 42,23,67,92,76 19,12,92,39,64 21", ",29,7,77,97 44,21,14,1,1 39,16,13,91,55 20,6,63", ",99,39 24,6,59,68,25 16,38,96,19,82 26,46,67,89", ",89 1,5,88,34,10 26,12,50,63,44 7,10,91,84,57 3", ",15,58,28,14 25,23,20,82,59 21,44,56,16,52 14,2", "5,84,28,19 8,32,79,18,73 43,39,34,73,77 43,47,7", "8,77,5 1,32,67,97,56 35,5,68,70,40 16,25,78,73,", "39 26,25,57,64,31 4,19,14,19,37 28,18,82,82,20 ", "25,46,28,1,59 8,4,67,12,14 16,5,1,78,10 27,22,1", "3,33,82 24,25,46,11,56 3,32,73,20,1 20,24,81,79", ",6 43,7,73,10,30 22,9,19,2,49 38,29,73,82,26 19", ",34,85,37,1 21,23,35,54,73 38,4,76,1,78 29,43,2", "3,1,72 5,21,1,78,98 34,1,49,25,59 44,28,80,64,3", "0 44,41,12,54,58 12,28,37,70,23 39,9,59,67,32 3", "1,12,73,96,1 35,43,82,64,14 26,29,7,37,2 15,4,2", "5,70,46 21,31,12,21,37 37,10,32,19,12 6,22,40,8", "2,4 20,2,16,82,60 28,47,26,63,17 28,25,97,1,1 1", ",31,34,82,43 6,7,61,97,14 2,27,12,67,51 32,38,3", "7,40,16 23,35,85,52,28 1,26,37,32,74 46,38,91,1", ",34 40,39,16,75,67 10,26,67,97,87 39,25,72,91,4", "0 47,4,40,64,4 4,44,58,43,1 27,5,25,58,21 21,15", ",10,58,97 36,22,78,79,65 34,18,62,84,73 12,5,53", ",89,86 5,4,67,72,28 21,2,13,73,49 35,3,91,1,52 ", "19,6,37,87,21 29,9,36,85,18 25,42,80,46,38 44,1", "2,56,55,8 24,33,46,11,23 37,12,76,18,47 47,6,66", ",47,82 46,5,20,7,43 22,47,1,52,37 29,1,25,22,87", " 40,15,76,4,32 20,14,1,19,32 10,3,1,31,50 45,44", ",64,1,40 41,10,28,4,61 21,37,78,30,70 4,46,98,2", "5,24 34,17,78,94,31 19,14,10,13,83 19,20,56,4,9", "3 28,35,34,10,78 16,1,58,5,91 21,15,14,96,86 23", ",16,38,22,69 21,25,95,6,69 21,47,4,17,3 17,37,5", "9,25,67 28,42,48,1,73 17,14,34,11,99 45,47,46,9", "0,96 34,32,1,54,16 46,26,56,79,85 9,10,28,51,81", " 46,6,55,12,33 45,20,61,9,91 31,14,10,34,43 42,", "19,74,37,29 38,24,68,77,82 35,1,12,86,61 34,6,9", "4,79,84 21,12,48,47,19 20,45,79,87,26 31,3,41,6", "4,10 35,1,84,79,49 16,34,64,15,19 23,37,5,19,4 ", "34,28,6,70,81 43,7,3,70,24 39,16,40,34,80 45,12", ",35,70,25 34,28,64,37,55 28,16,43,52,55 25,39,6", ",93,97 32,4,73,19,61 43,6,13,19,13 47,27,87,2,1", "7 7,18,34,86,36 4,27,65,78,1 14,37,15,49,79 36,", "11,7,38,39 1,45,64,86,9 7,36,62,28,1 9,30,56,92", ",79 21,12,35,54,19 9,20,31,15,97 3,41,92,99,58 ", "39,16,88,10,28 8,26,41,97,58 40,18,25,45,8 1,5,", "86,75,79 4,3,44,19,12 13,41,85,46,99 39,1,70,19", ",67 21,37,92,83,34 39,45,23,62,35 9,18,53,37,92", " 2,33,58,37,58 16,44,7,1,1 41,17,92,53,32"};
    int time = 321008325;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 321008056;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    int n = 47;
    vector<string> flights = {"38,45,48,46,32 37,28,46,67,79 18,35,15,5,39 33,", "45,94,50,55 21,35,37,2,1 42,45,16,93,91 12,36,3", "3,19,72 20,12,1,21,53 2,37,46,4,7 13,38,1,92,65", " 15,38,96,69,68 12,23,19,5,78 46,31,68,41,70 24", ",23,20,46,45 20,19,67,23,34 9,5,10,37,94 17,8,8", "9,43,21 42,36,76,37,68 17,22,1,56,10 35,6,52,90", ",73 24,14,30,78,37 36,41,7,21,29 35,18,28,2,6 6", ",45,72,97,97 28,22,43,28,99 35,29,52,28,65 41,3", "4,7,34,43 41,14,34,28,74 24,18,58,9,34 23,36,55", ",40,37 4,16,73,12,53 23,10,67,39,86 31,37,40,35", ",43 42,43,79,7,93 1,14,14,98,64 37,1,53,98,16 1", ",8,91,4,68 7,19,25,78,89 26,38,27,19,54 23,16,7", "3,61,59 30,43,1,97,45 27,41,82,87,59 16,42,67,6", "6,3 16,2,24,88,17 22,23,90,95,16 29,11,51,19,11", " 28,35,45,81,73 5,39,38,4,86 45,28,65,12,73 35,", "32,55,7,67 9,20,84,94,67 28,30,39,7,94 40,12,91", ",67,55 11,1,83,20,95 4,35,52,10,72 44,24,60,94,", "31 8,12,52,70,1 18,40,46,87,56 8,24,88,78,77 34", ",14,67,99,75 18,32,97,76,49 31,22,22,2,85 17,28", ",79,90,2 8,32,57,58,32 47,13,10,67,99 33,12,49,", "51,73 8,14,77,12,40 35,1,94,68,67 18,8,80,40,76", " 43,16,40,82,80 15,2,21,86,35 3,46,18,87,81 39,", "17,70,80,67 40,11,56,1,42 18,5,7,17,13 35,40,37", ",70,17 1,35,74,36,84 12,33,34,18,67 47,8,11,35,", "29 12,29,61,1,19 9,23,31,91,86 38,47,28,17,45 7", ",3,37,4,21 19,42,34,73,97 2,6,46,1,82 28,21,49,", "55,56 20,7,26,52,13 20,1,76,33,40 18,40,44,52,3", "4 25,22,56,4,46 35,1,26,46,1 32,22,69,34,63 15,", "39,43,90,23 8,46,76,18,87 3,11,90,59,7 11,16,67", ",1,79 38,18,49,94,50 44,43,97,67,34 33,8,79,41,", "78 46,27,46,9,23 36,28,10,1,26 3,32,1,62,23 8,1", ",59,64,59 45,6,59,48,98 29,5,67,81,62 23,14,30,", "64,76 13,4,60,76,88 43,30,4,85,17 35,20,64,45,3", "7 16,10,25,55,1 38,22,94,91,76 9,21,55,55,37 24", ",45,73,47,56 9,32,25,88,34 1,23,13,34,58 36,13,", "40,74,19 36,17,10,17,89 9,3,94,1,53 1,44,66,67,", "85 17,3,20,87,75 3,7,26,93,45 28,15,63,25,10 36", ",37,18,78,82 32,36,56,23,94 33,24,37,13,91 27,5", ",64,76,23 45,23,1,46,94 12,14,43,23,3 45,8,67,3", "6,60 43,21,51,60,71 17,8,91,19,17 30,26,82,56,2", "4 23,15,40,80,62 21,47,82,12,33 6,46,49,61,57 1", "2,1,99,73,79 45,16,24,64,94 46,3,55,55,82 6,32,", "48,33,37 12,1,2,34,5 37,6,35,55,19 4,32,54,13,1", "9 27,8,42,61,67 1,23,44,78,34 14,1,26,64,67 15,", "10,41,47,93 13,17,97,67,46 46,32,80,1,31 22,5,4", ",83,23 39,13,17,90,69 41,13,19,65,76 21,30,45,3", "6,6 12,28,91,82,49 5,38,31,64,31 39,44,61,91,98"};
    int time = 192423178;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 64140968;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    int n = 47;
    vector<string> flights = {"43,1,52,19,18 29,32,52,78,73 8,31,76,10,51 23,1", "4,34,40,70 46,19,49,6,52 47,39,51,46,58 38,14,4", "1,31,76 10,22,14,1,90 39,9,67,81,23 27,20,1,1,9", " 41,44,64,46,75 22,5,99,4,55 16,20,31,64,34 39,", "16,61,98,24 21,10,82,10,71 27,32,82,34,92 13,25", ",97,85,19 35,29,84,4,85 37,5,34,83,79 6,11,28,1", "9,65 38,18,1,34,40 32,30,89,72,67 10,21,39,60,7", "8 5,11,85,98,56 27,13,71,88,62 29,28,14,47,97 1", "2,44,74,82,48 42,10,53,79,1 34,30,73,82,74 41,1", "6,82,46,82 1,38,50,64,78 11,37,63,66,37 27,33,7", "4,1,91 7,25,89,55,7 30,25,55,50,70 15,12,54,57,", "98 45,11,19,1,10 38,15,67,28,1 11,32,4,51,7 25,", "41,44,41,12 9,8,36,10,67 4,12,73,16,91 33,18,98", ",71,22 31,1,4,79,53 39,43,73,87,89 11,36,7,70,1", "5 38,3,66,41,68 30,39,19,57,58 46,38,60,16,13 4", "7,46,68,78,56 40,20,63,88,47 33,23,4,88,25 30,1", ",25,76,31 43,35,91,59,19 26,20,46,99,57 45,27,9", "6,58,76 46,44,27,33,73 6,11,25,1,62 25,27,80,73", ",69 3,24,8,10,1 29,33,16,46,89 3,38,16,1,82 11,", "5,8,46,50 13,4,46,14,64 4,15,36,67,35 37,13,91,", "89,94 13,26,1,71,27 18,12,88,52,30 17,22,28,38,", "89 22,7,46,74,67 23,5,88,85,95 47,22,76,17,8 2,", "24,25,76,63 40,24,10,13,90 37,11,1,25,55 12,31,", "12,57,1 42,27,20,85,25 27,6,82,58,19 10,20,75,4", "1,66 35,13,26,56,69 13,38,97,34,64 4,17,66,7,98", " 32,35,64,61,55 22,5,87,70,28 35,4,34,14,19 39,", "5,96,88,9 34,45,46,1,45 25,44,46,60,34 35,5,1,5", "9,64 34,24,51,80,64 46,27,46,1,46 23,2,89,89,7 ", "27,42,38,67,77 42,5,55,34,12 24,43,64,70,23 28,", "7,92,56,70 16,13,12,29,1 24,19,55,68,51 12,18,2", "2,34,70 47,15,10,28,1 26,44,15,39,78 16,39,86,6", "1,45 15,37,6,20,1 32,39,73,46,7 43,16,95,5,2 14", ",12,96,60,39 8,31,48,31,90 6,44,96,27,11 41,15,", "65,99,20 7,34,24,44,36 45,22,84,96,61 2,16,23,4", "9,52 16,7,1,97,51 25,1,5,50,89 13,17,45,37,70 2", "6,19,10,56,37 44,30,84,16,58 17,32,82,94,34 21,", "31,24,17,1 34,10,7,72,1 38,21,33,64,23 27,10,56", ",60,82 40,31,98,34,4 26,7,25,98,27 8,28,35,66,9", "1 23,29,67,37,72 35,1,73,64,37 14,16,60,9,76 32", ",45,12,83,34 15,16,1,64,70 1,38,1,95,16 19,10,5", "6,33,84 20,22,61,90,28 10,46,94,46,91 3,7,46,30", ",9 15,28,37,19,72 6,11,73,79,32 25,11,1,64,22 2", "5,18,18,12,82 38,20,10,88,58 46,11,84,69,64 28,", "30,54,46,77 10,3,46,9,91 4,21,65,67,4 40,14,36,", "46,55 47,12,33,79,40 28,38,43,21,1 21,39,28,37,", "64 7,17,37,64,8 7,42,85,16,54 16,24,45,12,18 15", ",7,51,19,92 17,29,8,75,64 22,25,12,24,13"};
    int time = 501221;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    int n = 47;
    vector<string> flights = {"46,26,28,14,97 34,31,68,76,67 13,9,89,76,49 23,", "39,55,65,46 26,37,55,22,97 7,41,33,24,54 9,34,9", "8,15,45 20,40,12,41,67 9,14,40,29,28 14,21,22,3", "6,52 18,8,64,9,66 11,32,97,12,9 41,27,94,98,11 ", "44,34,5,28,77 36,33,68,79,37 14,1,16,41,10 44,1", ",32,94,90 43,38,29,55,72 43,41,49,93,96 23,11,1", "0,69,37 43,41,22,31,74 46,21,27,12,88 21,24,64,", "64,2 19,38,20,34,52 4,13,9,91,14 36,16,19,37,8 ", "25,33,97,91,9 1,34,76,74,22 23,9,5,15,55 26,19,", "73,94,52 4,33,37,43,15 26,19,43,58,67 22,43,67,", "52,35 7,9,56,37,34 38,34,32,38,21 12,28,28,73,3", "9 32,4,86,89,9 14,11,12,96,64 16,44,32,73,92 38", ",40,8,70,88 25,6,35,10,29 6,10,83,37,97 45,30,3", "7,55,14 44,47,95,46,81 15,33,73,54,78 29,12,88,", "88,4 39,23,70,91,1 34,15,87,31,56 41,47,29,93,7", "2 18,5,70,37,33 33,10,13,12,91 27,47,56,99,98 2", "8,6,73,59,52 36,41,84,13,5 46,15,1,1,67 35,11,8", "2,7,64 2,43,28,37,59 30,20,79,67,37 46,7,34,63,", "60 31,30,30,79,32 16,37,43,68,35 44,33,19,45,94", " 6,13,61,32,16 13,39,90,23,91 6,32,37,49,19 17,", "38,82,9,18 3,7,19,50,9 44,25,91,89,10 9,35,67,6", "6,10 19,7,28,25,16 40,9,77,91,1 14,32,52,47,93 ", "45,20,7,40,8 18,27,81,52,25 25,7,26,7,80 30,22,", "16,16,5 26,35,23,24,1 28,6,41,1,1 33,11,1,97,61", " 21,9,6,23,9 41,2,47,85,91 18,4,55,82,33 14,23,", "80,12,73 16,41,35,32,67 1,12,13,95,58 45,9,64,1", "0,80 7,8,45,42,25 34,1,1,14,37 3,10,43,10,86 22", ",34,67,19,89 17,5,12,24,99 43,15,12,36,33 10,41", ",22,18,1 34,43,50,31,13 14,6,37,76,34 19,7,28,5", "8,28 42,16,19,49,6 22,11,69,64,61 9,6,49,43,73 ", "27,14,26,28,69 9,31,94,7,10 17,35,46,34,28 28,9", ",89,5,76 35,41,49,28,12 37,36,73,46,4 17,24,1,5", "7,34 47,29,67,8,91 42,24,43,82,36 16,47,52,46,2", "3 27,12,38,28,96 23,45,61,73,4 17,19,53,88,28 2", "2,37,18,58,22 46,10,94,68,95 26,43,96,72,28 46,", "41,3,31,55 20,12,10,73,4 12,34,23,44,46 6,19,73", ",31,13 13,15,4,75,1 45,47,52,19,87 3,18,6,73,1 ", "20,30,1,49,65 4,11,7,22,45 16,14,27,63,85 19,23", ",86,96,10 31,33,54,37,9 30,45,7,24,37 26,4,84,4", "1,37 27,28,59,10,34 28,1,89,88,25 2,36,55,21,50", " 46,45,14,1,77 27,11,21,9,1 42,29,81,50,37 23,1", "8,5,76,67 47,34,95,34,28 19,35,1,88,6 3,32,82,5", "5,53 21,39,61,16,82 14,42,94,34,77 46,9,72,28,2", "9 46,2,47,82,23 39,21,16,22,13 40,13,16,15,40 7", ",21,75,94,4 10,6,28,92,64 9,24,61,24,17 15,20,2", "6,13,22 34,5,97,82,48 33,47,44,46,40 8,40,55,64", ",25 42,7,70,31,40 21,5,18,58,8 37,1,51,31,64"};
    int time = 921369857;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 307123181;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    int n = 47;
    vector<string> flights = {"27,6,68,94,85 17,46,89,10,27 26,40,2,4,49 45,22", ",37,83,40 32,30,5,88,70 46,19,73,34,56 22,45,90", ",34,46 4,34,1,62,53 32,4,70,1,73 14,2,24,67,64 ", "7,19,55,64,18 44,38,78,13,4 32,38,49,82,49 36,4", "6,10,67,21 26,12,34,12,19 30,1,25,50,12 46,15,9", "8,91,90 21,1,71,54,85 42,35,49,22,41 4,11,44,12", ",56 9,3,89,82,66 1,6,5,96,83 42,36,16,62,47 26,", "44,80,95,46 10,42,87,89,19 22,21,76,86,12 1,38,", "87,49,8 42,16,80,45,59 4,11,13,79,10 8,39,2,26,", "74 3,1,84,74,34 6,16,79,20,83 20,1,6,54,1 28,23", ",77,7,62 13,20,40,71,13 18,17,82,68,11 1,27,34,", "15,85 3,5,68,54,9 39,30,27,7,23 8,35,34,71,66 2", "8,32,1,24,8 33,14,78,49,82 38,29,31,30,82 37,12", ",82,79,72 19,28,62,70,13 24,31,28,4,53 13,14,55", ",95,96 46,41,64,42,45 41,45,19,82,99 9,44,76,20", ",83 43,9,55,65,70 2,3,55,85,41 20,18,82,85,87 1", "4,45,18,99,45 1,35,14,93,42 28,30,22,13,10 41,4", "4,3,78,28 28,2,1,56,1 39,35,18,37,71 45,23,55,1", "2,5 41,42,86,67,28 43,2,16,43,55 38,4,34,52,66 ", "15,41,88,45,89 21,46,76,4,19 1,33,39,34,34 27,2", "1,71,92,38 42,25,22,47,29 25,12,39,80,61 31,37,", "91,45,90 1,34,39,22,13 24,47,28,12,49 46,22,1,5", "8,82 44,25,72,10,10 26,14,73,75,46 38,31,37,89,", "91 25,34,95,71,77 25,17,92,69,71 13,25,98,27,49", " 43,29,28,70,19 37,46,99,56,9 45,26,56,19,88 15", ",9,25,42,79 24,19,12,61,37 46,31,37,33,89 42,36", ",23,64,68 44,3,11,23,73 6,31,63,91,88 41,14,62,", "79,30 36,18,16,91,82 20,18,62,22,49 22,16,31,60", ",73 46,10,36,75,1 25,33,82,69,92 3,43,49,1,15 2", ",5,88,56,19 7,42,25,64,54 1,29,88,31,99 26,42,9", "7,47,91 8,19,90,34,13 1,40,90,16,45 21,47,58,46", ",28 1,32,75,40,1 46,7,57,88,25 11,31,77,81,16 4", "0,41,55,19,91 3,31,67,76,1 9,38,23,43,13 17,2,7", "6,58,12 9,21,1,51,53 31,15,19,82,19 42,31,49,1,", "37 1,18,94,23,34 45,5,12,67,22 36,45,49,73,91 7", ",11,31,22,56 44,6,43,61,97 1,2,12,61,88 36,43,8", "8,57,23 17,20,24,68,82 21,34,16,45,55 15,45,76,", "37,53 34,37,62,57,55 22,1,37,49,55 31,2,7,10,40", " 11,38,45,70,89 21,26,40,36,31 6,1,31,67,48 37,", "6,28,22,67 5,45,42,70,61 23,9,19,12,64 30,28,28", ",29,12 11,45,79,3,43 1,18,64,1,28 30,22,70,75,2", "7 7,12,55,28,64 1,10,78,7,14 7,1,79,69,16 36,6,", "97,91,59 1,38,4,7,84 27,12,72,94,55 5,20,43,94,", "22 7,12,86,87,63 21,37,82,55,64 19,43,45,35,32 ", "31,17,15,64,37 26,24,5,28,48 2,40,54,99,62 11,2", "1,36,67,34 40,17,20,34,81 40,3,98,34,6 28,1,4,1", ",19 19,24,9,57,74 14,19,8,41,60 37,3,45,55,17"};
    int time = 338771863;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 169385820;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    int n = 25;
    vector<string> flights = {"25,19,160567226,391749388,4890852 16,23,4730381", "65,597007,3615545 12,11,118341523,170427799,372", "15529 9,16,683447134,950090227,82426873 2,5,706", "221269,69909135,257655784 19,13,37379061,408739", "81,8670529 6,23,653352031,106923811,374079501 7", ",15,247776868,480572137,222071041 17,24,5496464", "17,278840199,119255907 2,15,150378796,137583463", ",225450721 13,4,144328646,513494529,36547831 22", ",15,318773941,170724397,553666286 21,13,3145250", "1,368026285,47903381 13,10,189920160,288159400,", "133145006 23,24,160203213,358403181,478734385 1", ",11,110710191,567314089,139695685 21,1,31733327", "7,103301481,110400517 3,13,39202255,105948,7380", "66085 1,10,55521105,554160985,43110748 21,8,108", "977345,330434686,108129401 15,20,68513793,19056", "6997,490170279 2,18,187689601,89065045,40740168", "1 14,23,760640414,483589585,227869097 3,6,49267", "979,453525721,220504717 19,11,460347889,1288047", "33,536672876 24,5,700148239,192515623,57109680 ", "8,14,54363401,6526001,564329608 19,15,250532866", ",52946171,248711871 14,20,304123425,8980027,442", "118270 5,7,226140876,56829267,70778793 1,5,2004", "94798,423188885,209071424 14,10,4476636,6731155", "3,455546031 17,21,211951915,647333037,70953719 ", "16,6,9856897,38371241,119711629 19,23,1993265,4", "69069513,15405770 1,19,260860997,695134189,3454", "74073 16,6,109615219,125370429,30391025 11,4,36", "982251,116869479,240524737 17,24,332152311,2118", "59640,61474687 11,10,240430121,26304961,2228075", "52 24,1,2968733,330381357,185218042 22,16,29612", "9476,1205865,538807493 1,21,694220263,416255901", ",7245756 11,8,91426751,1917161,58276681 1,20,59", "5950717,390256887,105690055 10,3,488947089,5064", "3601,59821561 21,1,289453753,274074595,36600877", " 3,6,428097499,67270876,179722713 11,25,3025309", ",49556358,331592376 16,8,102239781,892697482,16", "3781818 20,16,258076799,547331701,333243725 6,1", ",167787463,29386281,44985669 17,7,452452851,324", "308881,355800313 1,20,415289261,178213201,27265", "1156 22,8,113881783,682701328,700817710 13,5,23", "7757033,278514986,589302568 11,14,665647081,204", "442987,106566657 14,9,66762317,6473182,10599486", " 17,1,49221667,154662295,458799676 1,21,5192468", "5,483260516,414942301 5,13,43436159,11073109,26", "1574081 2,1,239846734,493496026,150633605 12,9,", "93502521,17563001,7818981 20,16,313830440,53081", "9521,547596651 1,5,52924537,37190692,593009368"};
    int time = 1;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    int n = 48;
    vector<string> flights = {"37,33,1,1,1 3,37,1,1,1 13,11,1,1,1 18,19,1,1,1 ", "28,21,1,1,1 40,11,1,1,1 33,17,1,1,1 7,13,1,1,1 ", "33,45,1,1,1 13,46,1,1,1 38,33,1,1,1 37,13,1,1,1", " 21,13,1,1,1 48,40,1,1,1 1,13,1,1,1 37,4,1,1,1 ", "37,13,1,1,1 37,1,1,1,1 28,7,1,1,1 41,45,1,1,1 3", "9,40,1,1,1 1,37,1,1,1 14,1,1,1,1 11,25,1,1,1 1,", "45,1,1,1 31,7,1,1,1 41,17,1,1,1 34,11,1,1,1 33,", "43,1,1,1 12,3,1,1,1 46,5,1,1,1 12,1,1,1,1 43,45", ",1,1,1 1,41,1,1,1 17,25,1,1,1 5,13,1,1,1 19,45,", "1,1,1 27,39,1,1,1 39,24,1,1,1 41,1,1,1,1 29,45,", "1,1,1 4,9,1,1,1 7,45,1,1,1 47,41,1,1,1 45,39,1,", "1,1 33,1,1,1,1 25,19,1,1,1 43,28,1,1,1 13,6,1,1", ",1 21,10,1,1,1 47,37,1,1,1 7,9,1,1,1 3,1,1,1,1 ", "29,1,1,1,1 7,16,1,1,1 25,26,1,1,1 25,43,1,1,1 2", "9,46,1,1,1 19,7,1,1,1 13,20,1,1,1 47,37,1,1,1 4", "6,10,1,1,1 9,41,1,1,1 8,1,1,1,1 19,13,1,1,1 17,", "4,1,1,1 20,16,1,1,1 14,9,1,1,1 29,7,1,1,1 36,31", ",1,1,1 4,33,1,1,1 19,7,1,1,1 41,13,1,1,1 13,21,", "1,1,1 33,31,1,1,1 4,37,1,1,1 34,9,1,1,1 37,16,1", ",1,1 7,31,1,1,1 47,1,1,1,1 25,4,1,1,1 10,37,1,1", ",1 1,13,1,1,1 46,7,1,1,1 29,46,1,1,1 39,1,1,1,1", " 33,13,1,1,1 16,7,1,1,1 47,16,1,1,1 46,17,1,1,1", " 35,19,1,1,1 46,25,1,1,1 7,17,1,1,1 5,20,1,1,1 ", "25,39,1,1,1 20,43,1,1,1 45,13,1,1,1 34,1,1,1,1 ", "9,7,1,1,1 37,19,1,1,1 42,37,1,1,1 11,33,1,1,1 7", ",11,1,1,1 3,13,1,1,1 21,1,1,1,1 13,1,1,1,1 22,7", ",1,1,1 17,46,1,1,1 39,25,1,1,1 37,19,1,1,1 37,4", "1,1,1,1 31,7,1,1,1 37,25,1,1,1 48,33,1,1,1 9,25", ",1,1,1 14,22,1,1,1 48,1,1,1,1 46,33,1,1,1 19,33", ",1,1,1 11,25,1,1,1 16,13,1,1,1 1,31,1,1,1 41,3,", "1,1,1 45,9,1,1,1 29,43,1,1,1 43,25,1,1,1 37,13,", "1,1,1 30,33,1,1,1 43,25,1,1,1 4,18,1,1,1 14,13,", "1,1,1 42,16,1,1,1 17,23,1,1,1 1,19,1,1,1 15,37,", "1,1,1 44,32,1,1,1 1,33,1,1,1 17,25,1,1,1 9,1,1,", "1,1 1,34,1,1,1 8,25,1,1,1 7,5,1,1,1 2,5,1,1,1 4", "8,10,1,1,1 7,19,1,1,1 33,28,1,1,1 4,33,1,1,1 19", ",25,1,1,1 1,9,1,1,1 20,31,1,1,1 39,31,1,1,1 28,", "25,1,1,1 25,4,1,1,1 46,13,1,1,1 6,46,1,1,1 39,7", ",1,1,1 13,25,1,1,1 7,46,1,1,1 5,35,1,1,1 2,17,1", ",1,1 37,25,1,1,1 7,3,1,1,1 45,19,1,1,1 31,9,1,1", ",1 19,40,1,1,1 35,47,1,1,1 37,1,1,1,1 17,41,1,1", ",1 41,19,1,1,1 33,3,1,1,1 9,37,1,1,1 28,20,1,1,", "1 23,41,1,1,1 14,13,1,1,1 47,9,1,1,1 4,22,1,1,1", " 37,18,1,1,1 25,1,1,1,1 1,40,1,1,1 43,25,1,1,1 ", "13,1,1,1,1 1,43,1,1,1 25,35,1,1,1 47,21,1,1,1 1", "7,7,1,1,1 17,43,1,1,1 17,14,1,1,1 46,7,1,1,1 12", ",1,1,1,1 25,37,1,1,1 31,4,1,1,1 37,25,1,1,1"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    int n = 3;
    vector<string> flights = {"2,1,1,1,1 2,1,1,1,1 2,1,1,1,1 3,1,1,1,1 3,1,1,1", ",1 3,1,1,1,1 2,3,1,1,1 2,1,1,1,1 2,1,1,1,1 2,3,", "1,1,1 1,2,1,1,1 1,2,1,1,1 3,1,1,1,1 1,2,1,1,1 3", ",2,1,1,1 3,2,1,1,1 2,3,1,1,1 1,2,1,1,1 1,2,1,1,", "1 3,1,1,1,1 2,3,1,1,1 1,2,1,1,1 2,1,1,1,1 3,2,1", ",1,1 3,1,1,1,1 3,1,1,1,1 3,1,1,1,1 2,3,1,1,1 2,", "1,1,1,1 3,1,1,1,1 1,2,1,1,1 3,1,1,1,1 2,3,1,1,1", " 3,2,1,1,1 3,1,1,1,1 2,1,1,1,1 1,2,1,1,1 2,1,1,", "1,1 3,2,1,1,1 3,1,1,1,1 2,1,1,1,1 3,2,1,1,1 1,2", ",1,1,1 2,3,1,1,1 1,2,1,1,1 2,1,1,1,1 2,1,1,1,1 ", "2,3,1,1,1 2,1,1,1,1 3,1,1,1,1 3,2,1,1,1 3,2,1,1", ",1 2,1,1,1,1 2,1,1,1,1 2,1,1,1,1 1,2,1,1,1 1,2,", "1,1,1 1,2,1,1,1 3,2,1,1,1 1,2,1,1,1 2,1,1,1,1 1", ",2,1,1,1 1,2,1,1,1 3,1,1,1,1 1,2,1,1,1 2,3,1,1,", "1 1,2,1,1,1 3,1,1,1,1 3,1,1,1,1 1,2,1,1,1 1,2,1", ",1,1 1,2,1,1,1 2,1,1,1,1 3,1,1,1,1 3,1,1,1,1 2,", "1,1,1,1 3,1,1,1,1 3,1,1,1,1 3,1,1,1,1 3,2,1,1,1", " 3,1,1,1,1 1,2,1,1,1 2,3,1,1,1 2,1,1,1,1 2,1,1,", "1,1 3,1,1,1,1 3,2,1,1,1 2,3,1,1,1 3,2,1,1,1 1,2", ",1,1,1 3,1,1,1,1 1,2,1,1,1 3,1,1,1,1 3,1,1,1,1 ", "3,1,1,1,1 2,1,1,1,1 3,1,1,1,1 3,1,1,1,1 2,1,1,1", ",1 3,1,1,1,1 3,1,1,1,1 3,2,1,1,1 1,2,1,1,1 3,1,", "1,1,1 3,1,1,1,1 2,1,1,1,1 2,1,1,1,1 1,2,1,1,1 3", ",1,1,1,1 1,2,1,1,1 3,2,1,1,1 1,2,1,1,1 2,1,1,1,", "1 2,1,1,1,1 3,1,1,1,1 2,3,1,1,1 1,2,1,1,1 2,3,1", ",1,1 2,1,1,1,1 2,1,1,1,1 2,3,1,1,1 1,2,1,1,1 1,", "2,1,1,1 2,1,1,1,1 1,2,1,1,1 3,1,1,1,1 2,1,1,1,1", " 3,2,1,1,1 2,1,1,1,1 3,1,1,1,1 1,2,1,1,1 3,1,1,", "1,1 2,3,1,1,1 2,1,1,1,1 1,2,1,1,1 1,2,1,1,1 3,1", ",1,1,1 3,2,1,1,1 3,2,1,1,1 3,2,1,1,1 2,1,1,1,1 ", "2,3,1,1,1 1,2,1,1,1 2,1,1,1,1 1,2,1,1,1 3,1,1,1", ",1 1,2,1,1,1 3,1,1,1,1 2,1,1,1,1 2,3,1,1,1 2,3,", "1,1,1 3,1,1,1,1 3,2,1,1,1 2,1,1,1,1 3,1,1,1,1 2", ",3,1,1,1 2,1,1,1,1 3,1,1,1,1 1,2,1,1,1 2,3,1,1,", "1 3,2,1,1,1 3,1,1,1,1 1,2,1,1,1 2,1,1,1,1 1,2,1", ",1,1 1,2,1,1,1 2,1,1,1,1 2,1,1,1,1 1,2,1,1,1 3,", "2,1,1,1 2,3,1,1,1 2,1,1,1,1 3,1,1,1,1 3,1,1,1,1", " 1,2,1,1,1 3,1,1,1,1 3,2,1,1,1 3,1,1,1,1 1,2,1,", "1,1 3,2,1,1,1 1,2,1,1,1 3,1,1,1,1 1,2,1,1,1 3,1", ",1,1,1 3,1,1,1,1 3,1,1,1,1 2,1,1,1,1 2,1,1,1,1 ", "1,2,1,1,1 3,1,1,1,1 1,2,1,1,1 1,2,1,1,1 3,1,1,1", ",1 1,2,1,1,1 3,1,1,1,1 3,2,1,1,1 2,1,1,1,1 3,1,", "1,1,1 2,1,1,1,1 2,3,1,1,1 2,1,1,1,1 3,1,1,1,1 2", ",3,1,1,1 3,1,1,1,1 2,1,1,1,1 3,1,1,1,1 1,2,1,1,", "1 3,1,1,1,1 2,1,1,1,1 3,1,1,1,1 2,1,1,1,1 2,1,1", ",1,1 3,2,1,1,1 2,1,1,1,1 3,1,1,1,1 2,3,1,1,1 2,", "1,1,1,1 3,1,1,1,1 2,1,1,1,1 3,1,1,1,1 3,1,1,1,1"};
    int time = 4;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    int n = 3;
    vector<string> flights = {"1,2,1,4,7 ", "2,3,100,1,10"};
    int time = 100;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    int n = 3;
    vector<string> flights = {"1,2,1,1,1 2,3,1,1,1"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 999999997;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    int n = 477;
    vector<string> flights = {"1,2,1,1,1 2,477,1,1,1"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 999999997;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    int n = 174;
    vector<string> flights = {"1,2,1,1,1 2,3,1,1,1 3,4,1,1,1 4,5,1,1,1 5,6,1,1", ",1 6,7,1,1,1 7,8,1,1,1 8,9,1,1,1 9,10,1,1,1 10,", "11,1,1,1 11,12,1,1,1 12,13,1,1,1 13,14,1,1,1 14", ",15,1,1,1 15,16,1,1,1 16,17,1,1,1 17,18,1,1,1 1", "8,19,1,1,1 19,20,1,1,1 20,21,1,1,1 21,22,1,1,1 ", "22,23,1,1,1 23,24,1,1,1 24,25,1,1,1 25,26,1,1,1", " 26,27,1,1,1 27,28,1,1,1 28,29,1,1,1 29,30,1,1,", "1 30,31,1,1,1 31,32,1,1,1 32,33,1,1,1 33,34,1,1", ",1 34,35,1,1,1 35,36,1,1,1 36,37,1,1,1 37,38,1,", "1,1 38,39,1,1,1 39,40,1,1,1 40,41,1,1,1 41,42,1", ",1,1 42,43,1,1,1 43,44,1,1,1 44,45,1,1,1 45,46,", "1,1,1 46,47,1,1,1 47,48,1,1,1 48,49,1,1,1 49,50", ",1,1,1 50,51,1,1,1 51,52,1,1,1 52,53,1,1,1 53,5", "4,1,1,1 54,55,1,1,1 55,56,1,1,1 56,57,1,1,1 57,", "58,1,1,1 58,59,1,1,1 59,60,1,1,1 60,61,1,1,1 61", ",62,1,1,1 62,63,1,1,1 63,64,1,1,1 64,65,1,1,1 6", "5,66,1,1,1 66,67,1,1,1 67,68,1,1,1 68,69,1,1,1 ", "69,70,1,1,1 70,71,1,1,1 71,72,1,1,1 72,73,1,1,1", " 73,74,1,1,1 74,75,1,1,1 75,76,1,1,1 76,77,1,1,", "1 77,78,1,1,1 78,79,1,1,1 79,80,1,1,1 80,81,1,1", ",1 81,82,1,1,1 82,83,1,1,1 83,84,1,1,1 84,85,1,", "1,1 85,86,1,1,1 86,87,1,1,1 87,88,1,1,1 88,89,1", ",1,1 89,90,1,1,1 90,91,1,1,1 91,92,1,1,1 92,93,", "1,1,1 93,94,1,1,1 94,95,1,1,1 95,96,1,1,1 96,97", ",1,1,1 97,98,1,1,1 98,99,1,1,1 99,100,1,1,1 100", ",101,1,1,1 101,102,1,1,1 102,103,1,1,1 103,104,", "1,1,1 104,105,1,1,1 105,106,1,1,1 106,107,1,1,1", " 107,108,1,1,1 108,109,1,1,1 109,110,1,1,1 110,", "111,1,1,1 111,112,1,1,1 112,113,1,1,1 113,114,1", ",1,1 114,115,1,1,1 115,116,1,1,1 116,117,1,1,1 ", "117,118,1,1,1 118,119,1,1,1 119,120,1,1,1 120,1", "21,1,1,1 121,122,1,1,1 122,123,1,1,1 123,124,1,", "1,1 124,125,1,1,1 125,126,1,1,1 126,127,1,1,1 1", "27,128,1,1,1 128,129,1,1,1 129,130,1,1,1 130,13", "1,1,1,1 131,132,1,1,1 132,133,1,1,1 133,134,1,1", ",1 134,135,1,1,1 135,136,1,1,1 136,137,1,1,1 13", "7,138,1,1,1 138,139,1,1,1 139,140,1,1,1 140,141", ",1,1,1 141,142,1,1,1 142,143,1,1,1 143,144,1,1,", "1 144,145,1,1,1 145,146,1,1,1 146,147,1,1,1 147", ",148,1,1,1 148,149,1,1,1 149,150,1,1,1 150,151,", "1,1,1 151,152,1,1,1 152,153,1,1,1 153,154,1,1,1", " 154,155,1,1,1 155,156,1,1,1 156,157,1,1,1 157,", "158,1,1,1 158,159,1,1,1 159,160,1,1,1 160,161,1", ",1,1 161,162,1,1,1 162,163,1,1,1 163,164,1,1,1 ", "164,165,1,1,1 165,166,1,1,1 166,167,1,1,1 167,1", "68,1,1,1 168,169,1,1,1 169,170,1,1,1 170,171,1,", "1,1 171,172,1,1,1 172,173,1,1,1 173,174,1,1,1"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 5813952;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    int n = 108;
    vector<string> flights = {"1,2,7474,5167,9658 2,3,3438,2641,7154 3,4,4919,", "7179,707 4,5,7560,7860,5001 5,6,8736,6929,632 6", ",7,6163,176,5468 7,8,2116,823,1112 8,9,5902,821", "0,5257 9,10,5763,809,3730 10,11,6369,1022,1724 ", "11,12,1193,26,7110 12,13,6233,2948,6817 13,14,9", "023,979,9600 14,15,5701,1316,3076 15,16,9473,74", "5,7016 16,17,9739,1007,8616 17,18,9957,6158,237", "8 18,19,4868,8682,4563 19,20,403,5129,9198 20,2", "1,3268,3836,3326 21,22,3347,3053,4520 22,23,276", "0,9303,9682 23,24,3580,7485,831 24,25,5557,8775", ",781 25,26,2316,583,3502 26,27,4737,7291,2134 2", "7,28,7504,9965,9221 28,29,6716,4308,7267 29,30,", "4634,1365,644 30,31,3744,350,1138 31,32,8645,42", "68,8501 32,33,133,2532,5479 33,34,5339,7419,761", "3 34,35,3587,2391,5954 35,36,985,9091,1429 36,3", "7,2136,74,1267 37,38,7952,5971,7314 38,39,2761,", "1374,7013 39,40,6671,9961,3972 40,41,9210,458,7", "936 41,42,4783,8573,2982 42,43,9711,9123,1204 4", "3,44,876,8367,9147 44,45,5628,8705,7055 45,46,5", "986,2578,2386 46,47,6398,9371,7484 47,48,2304,9", "31,6399 48,49,5697,2594,6248 49,50,7077,8196,30", "18 50,51,6379,671,5995 51,52,5090,6488,3485 52,", "53,4730,4664,9498 53,54,5698,7062,9077 54,55,64", "69,2146,9384 55,56,8119,9634,9515 56,57,1110,45", "76,3900 57,58,331,9320,1933 58,59,7288,2334,890", "8 59,60,3907,3328,347 60,61,8555,2952,8718 61,6", "2,6598,5795,2571 62,63,7722,4590,272 63,64,1386", ",694,1094 64,65,2866,5227,7906 65,66,603,9782,7", "233 66,67,1411,6665,4940 67,68,4913,7062,4947 6", "8,69,1020,7460,6012 69,70,3553,9405,6178 70,71,", "20,7163,1891 71,72,5880,7711,2924 72,73,2544,52", "92,9582 73,74,7610,6352,110 74,75,7988,7605,244", "4 75,76,3192,4589,5483 76,77,3549,2551,1838 77,", "78,9572,91,9339 78,79,6956,5788,6891 79,80,4777", ",6534,4233 80,81,2747,7134,7425 81,82,6568,8387", ",7279 82,83,4907,4043,6217 83,84,4075,2229,164 ", "84,85,6115,8944,6597 85,86,6491,5105,2300 86,87", ",5426,4807,5165 87,88,3213,3257,3991 88,89,2660", ",7701,4102 89,90,5329,4914,306 90,91,6202,5727,", "4313 91,92,8256,6190,4273 92,93,7975,7454,7449 ", "93,94,3987,1510,4749 94,95,3123,7204,8689 95,96", ",1530,7659,20 96,97,4936,9544,2041 97,98,8503,1", "484,1003 98,99,6927,6959,8740 99,100,1576,4798,", "6431 100,101,1987,6629,6925 101,102,9853,9856,8", "223 102,103,3469,8759,6210 103,104,2797,5343,53", "41 104,105,9025,7219,4612 105,106,2746,5678,392", "7 106,107,6141,6007,2618 107,108,4277,6984,5758"};
    int time = 858585341;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 8091989;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    int n = 300;
    vector<string> flights = {"104,83,7921,29,6328 83,112,9009,9110,7862 112,1", "24,1054,2708,2580 124,6,4988,4772,4822 6,92,105", "9,6120,8583 104,32,5156,845,6696 32,255,675,168", "2,9524 104,5,2001,1987,518 5,64,742,5312,8599 6", "4,292,3111,8819,8151 292,13,9375,4101,9558 13,1", "4,948,578,8640 14,78,7397,358,1313 78,16,1115,3", "247,288 16,75,2002,8125,1785 75,155,7276,9981,7", "368 155,60,1774,7308,8882 60,234,630,8049,350 2", "34,22,2509,3468,9216 22,263,946,3181,6380 263,8", "0,837,8071,9162 80,24,2259,9876,5086 24,226,571", "1,2740,2532 226,265,1148,9545,1716 265,201,4237", ",8688,7052 201,135,7704,7558,7692 135,4,2472,80", "29,1007 4,267,6435,3425,6875 267,30,9375,31,769", "2 30,115,6093,4074,2736 115,31,6926,2409,211 31", ",200,7243,112,7143 200,178,5641,4441,2030 178,7", "6,4891,6053,15 76,273,9688,5755,9344 273,53,122", ",2792,1642 53,282,1953,6930,2654 282,120,937,96", "29,6261 120,17,7641,7400,5182 17,42,3777,2248,8", "538 42,140,6184,3214,1201 140,278,5892,6265,1 2", "78,45,9598,4705,4720 45,77,6288,5037,3233 77,27", ",445,8869,7933 27,125,2614,7879,9784 125,49,174", "9,6661,4613 49,188,484,5788,7191 188,89,2565,43", "68,9323 89,90,4569,7239,9220 90,275,7362,5071,2", "483 275,219,610,5161,6304 219,118,1343,9704,687", " 118,241,9497,7186,4048 241,284,1692,2733,3054 ", "284,100,7925,6789,2404 100,131,1400,9625,7986 1", "31,254,1026,786,6594 254,61,5489,8407,934 61,27", "9,5860,4288,9651 279,3,2574,6328,6016 3,187,792", "0,3956,1593 187,244,8878,2049,1607 244,245,6795", ",3093,9128 245,57,8918,658,9173 57,85,9970,2506", ",4387 85,66,1665,1055,2938 66,176,2342,1493,994", "0 176,289,3368,5546,5926 289,39,2432,6905,7977 ", "39,232,6391,8847,1138 232,185,7335,809,3610 185", ",266,6115,6515,8977 266,213,7107,324,9358 213,4", "0,6616,1232,7710 40,23,4442,6137,400 23,41,7620", ",3627,9936 41,196,7899,8730,7878 196,86,5066,34", "50,7445 86,7,1484,6520,1553 7,48,1047,7215,30 4", "8,138,1817,5973,9174 138,96,4284,1805,1977 96,1", "69,7155,6774,188 169,183,3660,6172,7097 183,88,", "2930,1870,7477 88,150,6479,8138,8826 150,233,28", "70,2515,5762 233,249,2445,2410,3695 249,63,6841", ",7333,6713 63,218,9140,3213,2182 218,208,8950,5", "159,2699 208,163,5877,8406,1746 163,160,6640,75", "44,6965 160,97,8904,6381,8965 97,143,2270,4857,", "2791 143,167,1324,6462,5589 167,166,8233,2082,7", "372 166,151,7929,3551,1909 151,95,9851,6450,354", "5 23,300,6118,8507,7801 1,104,3223,9742,9550"};
    int time = 79391255;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 1126064;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    int n = 300;
    vector<string> flights = {"145,273,395100741,722,71631 62,179,861671995,66", "8,92914 261,173,622071033,230,22388 132,179,607", "470213,708,54328 247,261,133230056,714,53496 25", "7,250,679789947,423,65658 145,43,350156179,986,", "23682 247,129,879821232,104,77986 122,183,36762", "1561,447,70623 199,94,103906890,53,15465 112,43", ",72752170,999,38109 209,55,493011462,809,29485 ", "63,109,669719904,167,67814 180,37,499710250,792", ",65205 248,121,382696744,260,67701 294,145,2248", "83182,424,20712 167,179,26659642,823,28037 74,6", "2,882420460,626,29583 54,1,292789297,444,21884 ", "106,179,895591238,407,70823 173,139,794412767,8", "92,37770 137,179,254111110,443,60289 137,219,49", "9985926,893,89289 179,93,358527844,681,98877 17", "3,63,280091059,931,5314 121,179,471801887,118,1", "1769 173,219,253080575,311,67002 145,129,591716", "283,695,88778 300,199,151765849,676,98503 137,1", "73,865108366,539,81639 95,121,628347206,258,902", "90 206,109,825842845,649,73731 129,179,39377465", "6,878,4178 179,121,980282244,314,72116 106,299,", "30392263,708,20237 5,194,176829997,318,90389 54", ",39,486649729,714,20965 122,273,466680648,919,4", "4314 248,74,712238305,803,35125 209,299,9009677", "15,553,89515 132,121,74064569,863,34392 122,229", ",16464873,248,90905 102,55,284772764,221,65814 ", "247,294,353689921,611,18959 74,139,143446833,52", "8,51684 139,158,459129001,714,86721 92,5,640676", "029,133,24280 62,294,444411495,478,43749 55,35,", "15983047,488,28807 158,219,322319143,24,25486 2", "61,300,413953035,540,5464 299,167,290825053,762", ",67067 183,250,496143662,268,96698 93,112,68587", "7910,391,53928 43,55,999512907,141,53170 5,250,", "30940395,967,24138 35,250,949801529,13,80831 24", "6,102,51556737,507,11895 257,145,341811651,755,", "69594 294,158,537281687,10,32525 55,109,2802130", "66,167,23583 74,246,877596669,390,37597 1,54,16", "7393028,727,14890 121,158,95040578,692,96844 21", "9,179,752575722,600,62341 158,229,385385716,310", ",669 180,194,83233159,707,88260 206,209,9546160", "02,399,83601 173,62,380571543,442,87868 62,112,", "234658800,386,82550 1,139,991114625,642,5142 13", "7,148,48854500,742,2660 62,250,132251434,447,71", "38 173,261,684214407,82,33471 121,246,577826369", ",846,86397 137,129,76437775,966,55764 179,173,5", "37810203,404,62706 121,92,983908710,530,13060 1", "79,183,547341136,894,36959 261,248,395863447,21", "5,92403 55,39,166161723,159,55600"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 1453705;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    int n = 400;
    vector<string> flights = {"226,269,462651,855,2826 121,400,961365,253,1603", " 188,319,346662,774,5714 317,269,661879,308,728", "3 66,269,260743,861,7834 72,66,583692,433,9682 ", "349,319,328559,430,4457 349,319,921836,514,6125", " 82,305,752532,843,2164 72,169,587926,187,6124 ", "299,372,712939,943,6353 169,188,191817,904,8796", " 243,317,27938,771,5183 115,349,676490,961,7930", " 349,342,539111,649,5377 82,400,824012,823,1649", " 253,107,296832,741,3476 115,269,290664,720,831", "9 121,349,484645,704,2423 68,305,190943,810,816", "4 68,115,19742,947,6796 107,243,893504,47,2200 ", "299,372,454905,337,5518 115,72,405287,40,4477 4", "00,299,802580,595,6022 319,372,361012,577,7230 ", "317,319,403764,308,7318 305,121,450216,970,5770", " 107,115,263826,928,7648 299,107,468146,629,883", "4 319,349,618169,488,8750 349,372,381367,685,16", "1 121,188,729371,645,2418 66,226,689862,977,830", "5 253,372,347138,147,1211 188,226,225231,964,95", "01 253,243,47009,593,1268 269,188,185278,813,41", "12 107,319,867975,799,9130 317,319,180912,59,50", "08 253,72,997569,120,6901 342,72,765315,687,230", "2 1,68,460278,613,6760 66,115,246554,330,6858 1", ",299,246955,927,1503 299,243,237923,739,8740 24", "3,68,365302,806,8653 121,317,75437,910,2944 188", ",400,321266,465,1692 372,121,894858,124,4884 29", "9,319,375728,69,9628 400,349,292954,641,1651 82", ",299,18127,821,855 188,299,346307,506,1453 115,", "107,807335,753,5665 169,115,588718,730,5129 107", ",299,539420,120,4767 299,68,883364,212,7370 317", ",188,491764,276,5565 121,349,12294,61,6441 305,", "299,783907,65,9974 121,317,53161,165,4726 66,18", "8,98510,921,4421 243,319,46565,903,6227 342,115", ",672842,374,5774 107,243,167663,4,4102 1,82,544", "472,974,3998 68,372,209488,774,2045 269,253,974", "51,504,9836 115,400,34471,855,8576 400,305,4808", "46,974,1948 107,319,143017,612,6442 1,169,74260", ",294,4490 317,169,296628,119,9018 253,1,859815,", "644,1455 269,107,796198,187,1417 107,319,554648", ",335,1069 269,317,780453,178,1416 269,107,53732", "9,50,473 372,243,277991,448,3755 121,349,810879", ",727,6681 66,169,304000,419,1568 349,169,420591", ",438,101 243,253,347447,142,8188 305,349,431295", ",342,9309 317,253,54125,119,1058 72,305,536449,", "336,7773 243,305,553356,713,1477 400,317,615039", ",623,9692 349,317,635633,33,789 400,305,205681,", "59,9632 169,115,163302,59,483 319,115,261468,68", "6,683 299,305,844000,276,6527"};
    int time = 763636200;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 763089476;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    int n = 477;
    vector<string> flights = {"263,342,597,418,9168 170,345,812,218,7928 105,2", "63,28,703,6777 385,255,391,638,7071 255,40,248,", "378,4677 385,345,879,732,5829 255,228,763,603,1", "339 305,147,28,572,4714 228,163,369,868,4288 26", "3,323,199,286,6749 238,255,329,767,703 40,398,5", "95,767,7704 170,238,953,541,5694 105,398,97,632", ",1378 147,228,238,344,6738 244,147,972,301,6130", " 163,192,901,565,4143 1,105,874,119,3717 178,19", "2,934,74,869 40,228,52,357,8778 342,263,759,972", ",2562 170,263,936,371,8881 192,1,861,668,2281 3", "23,244,720,846,4744 255,228,793,275,2978 228,24", "4,80,846,3302 269,192,767,122,2761 305,345,500,", "293,1940 255,105,904,564,4537 199,178,176,496,4", "559 199,255,499,84,8049 105,263,446,9,3491 305,", "192,990,989,252 105,170,612,8,1098 345,70,344,9", "57,8756 40,385,603,965,1068 170,269,201,190,902", "9 70,192,487,353,5322 314,105,99,372,5050 385,3", "05,491,611,7142 314,244,29,981,3088 199,342,218", ",313,1925 192,269,378,518,1596 345,1,614,356,20", "47 342,147,224,672,6432 70,398,142,901,3107 305", ",147,34,662,8609 23,345,472,148,2406 23,477,963", ",524,2707 263,238,865,112,2571 147,398,456,780,", "3348 345,238,603,234,9801 228,255,151,86,7509 3", "85,345,363,435,7008 170,342,684,441,3850 323,16", "3,948,695,2370 192,238,23,579,987 263,192,303,8", "74,7147 263,147,975,901,3329 105,255,228,797,74", "23 1,192,448,61,1448 228,314,659,34,369 105,269", ",458,967,9239 255,163,65,537,144 178,269,456,84", "0,9590 178,1,454,969,3395 263,105,15,297,5757 1", "05,147,314,29,1953 178,105,535,482,5951 244,40,", "353,82,6596 170,244,331,689,2143 269,105,415,51", "8,2206 192,170,203,797,1224 228,238,945,358,110", "6 105,147,378,381,2318 255,269,622,878,8552 192", ",70,188,393,183 192,228,740,583,6087 163,263,23", "5,547,2828 170,323,619,412,4474 345,147,293,736", ",5111 342,199,309,23,6265 269,105,230,958,7348 ", "105,323,414,679,7337 255,263,716,147,3901 314,3", "05,544,222,9129 244,477,891,272,5873 199,323,33", "7,800,6585 170,314,109,870,1224 342,305,677,206", ",7069 244,178,67,506,5822 263,342,673,445,9625 ", "178,323,169,116,8575 385,269,603,373,2184 170,4", "0,893,26,408 238,398,726,249,2425 147,23,917,13", ",376 385,255,999,803,432 163,255,955,840,6841 1", "70,199,98,932,2852 192,323,94,497,8830 70,105,9", "55,517,7414 323,314,154,22,3157 345,40,565,801,", "7378 345,178,304,474,9724 385,323,103,484,136 1", "05,385,253,899,7834 192,40,233,617,5925"};
    int time = 63289900;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 21095604;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    int n = 477;
    vector<string> flights = {"402,459,95233,249,5624 445,402,16509,512,2176 7", "0,19,52749,5488,7148 477,318,9314,5651,3596 459", ",333,74901,5540,3070 477,318,58105,7478,7462 14", "5,19,96335,973,9185 283,459,86477,941,7321 302,", "19,17983,6043,9874 19,70,61379,8024,7724 45,477", ",48738,8518,4418 1,445,15295,1044,8482 45,333,7", "010,791,3608 459,283,99701,2618,3428 1,302,3182", "6,4409,4359 1,19,83085,9036,4463 459,318,72259,", "650,9899 333,19,40241,8907,6363 333,477,7716,22", "35,7644 445,459,45217,6353,6311 477,45,24226,16", "40,7866 45,145,78466,3232,3536 318,283,11125,10", "32,2876 45,19,22054,1224,9638 70,477,81904,5854", ",8161 333,302,36698,2022,6180 445,40,34398,7679", ",4042 318,459,2132,5173,4512 302,70,33100,7559,", "8363 19,318,97893,1104,9611 19,459,22798,3324,9", "492 477,145,25250,8535,852 45,40,53561,5727,145", "4 333,1,66806,6376,8320 283,459,8893,6847,9532 ", "318,283,80352,3102,2025 477,333,63809,5734,4652", " 283,45,94638,9011,5653 40,333,10161,3887,164 7", "0,40,95170,7399,3302 19,445,9062,9819,6915 45,4", "02,70807,5160,1921 1,40,55528,8363,4565 318,145", ",80298,7440,1524 318,333,22805,9535,5345 45,40,", "44577,3695,6864 45,19,32424,9572,9898 40,402,29", "137,1851,715 402,1,51419,5842,2500 333,145,4136", "8,6089,2884 318,402,50867,2445,4756 333,477,969", "93,5438,5168 1,302,31364,5922,9679 45,283,36044", ",5792,9138 333,318,46124,7843,4763 402,445,3752", ",665,8146 477,333,68507,4971,4851 1,318,52509,8", "886,5457 145,302,10684,2536,6848 1,333,78269,71", "59,2465 145,477,12011,4252,590 477,45,65643,278", "3,375 302,402,77091,1177,6152 145,459,69284,380", "1,3846 477,19,65656,5531,4727 302,145,20243,651", "9,9565 19,318,69936,79,1130 45,145,81745,982,76", "59 477,445,74595,6610,3250 445,283,32724,5047,7", "39 445,477,10581,2232,1305 45,302,81578,6253,99", " 283,1,25643,8260,9887 477,70,9860,2641,6557 30", "2,70,4462,3685,1041 283,477,31122,2510,2746 445", ",477,36992,9558,5671 40,145,27141,6769,5233 283", ",333,79688,8062,3441 283,70,58563,6189,5791 302", ",1,72389,8199,8316 302,318,12111,484,7277 283,7", "0,67275,2960,2735 477,333,38704,9667,6740 333,4", "77,26681,6337,4952 19,333,95000,9554,9087 302,4", "0,43692,3861,8209 477,333,19890,6798,455 45,19,", "35642,5449,1091 302,45,45453,3707,3081 145,283,", "52291,7702,9716 318,1,71980,309,5647 283,302,67", "292,7266,1263 45,70,2761,6798,5532 445,40,25206", ",9721,9653 19,302,50696,2558,4732"};
    int time = 19338;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 767;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    int n = 477;
    vector<string> flights = {"1,392,56576,760,566 222,415,28936,970,463 108,4", "77,68172,763,579 77,257,26546,424,327 20,63,344", "25,576,482 294,271,78483,149,597 230,332,52874,", "39,561 286,120,11975,788,71 1,280,7873,923,579 ", "460,332,63319,157,265 332,460,62432,747,977 94,", "381,34464,482,826 222,452,20722,185,327 415,63,", "88783,159,298 20,222,38292,871,11 183,271,3101,", "372,236 77,267,28057,34,88 415,120,43586,33,330", " 312,452,98726,720,755 63,1,14598,613,449 277,2", "22,83083,15,972 20,77,85401,465,538 381,1,70020", ",61,38 213,94,74908,59,488 460,332,64114,808,91", "6 271,77,40774,795,330 271,13,16637,362,382 277", ",13,99536,550,123 94,334,22915,946,779 277,334,", "98586,999,376 392,294,72809,606,857 222,267,700", "34,901,730 453,392,97719,614,556 40,381,48660,6", "98,428 257,40,41849,567,231 69,271,10654,708,66", " 453,280,24643,472,944 40,36,42586,312,467 312,", "94,71326,947,668 20,415,38626,570,857 222,294,9", "9639,351,357 213,36,32452,544,820 109,108,32287", ",289,370 280,415,34252,188,596 63,332,89716,58,", "174 120,20,74927,203,44 271,312,28844,127,18 47", "0,460,72771,833,2 36,334,66882,495,445 63,36,72", "962,967,548 346,222,40710,427,567 460,222,58902", ",95,140 453,1,41062,741,511 197,452,65427,98,11", "4 179,183,55692,975,937 452,415,7012,463,309 46", "0,452,99238,780,15 415,1,66037,265,765 40,280,8", "1616,31,458 230,63,15022,210,431 332,280,55975,", "450,578 94,460,63296,181,874 346,63,43138,430,1", "19 267,120,84421,536,819 94,277,86547,607,786 1", "79,109,84050,609,350 271,346,6524,971,657 452,3", "46,8548,517,12 13,312,61293,817,139 415,312,709", "21,120,549 460,69,13104,827,360 77,63,47435,982", ",719 108,230,31146,450,401 381,271,97815,416,51", "7 267,286,9503,725,815 230,280,6684,65,818 77,3", "92,44526,413,184 332,477,11986,983,769 334,20,1", "7541,930,352 280,69,83397,371,188 1,257,85087,7", "50,843 230,294,25966,293,17 108,415,73100,696,3", "53 13,20,73520,784,913 280,334,76106,334,461 34", "3,332,86506,146,25 179,294,8911,499,759 294,470", ",50612,890,648 63,277,89327,136,125 120,271,282", "32,35,35 452,183,70178,774,760 415,477,87139,92", "3,365 381,415,35974,108,834 332,69,26637,529,38", "1 280,40,49332,917,265 183,197,47074,57,354 286", ",13,83510,565,63 286,477,21246,214,126 213,343,", "94219,260,330 477,334,92647,502,257 40,1,54592,", "945,539 280,269,19437,218,284 94,277,91477,180,", "765 257,332,571,738,696 277,452,8765,563,638"};
    int time = 912345678;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 456167500;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    int n = 7;
    vector<string> flights = {"1,4,10,8,2 4,6,14,8,2 6,2,8,1", "0,1 2,7,19,5,1 ", "1,5,15,17,11 5,3,10,1", "0,18 3,7,12,18,18"};
    int time = 147;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    int n = 6;
    vector<string> flights = {"3,6,9,9,9 ", "1,5,5,5,5 ", "5,2,4,9,3 ", "2,6,5,7,7 ", "4,3,9,9,9 ", "1,4,9,9,9"};
    int time = 32;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    int n = 6;
    vector<string> flights = {"3,2,245207,393,30668486 3,4,110797,944,74904546", "1 5,4,171894,1353,548955100 5,3,187921,1361,929", "431043 3,6,79938,110,691604798 3,1,205111,534,8", "15553830 6,4,15297,536,279226830 2,4,9903,1365,", "392357393 4,2,191131,1312,359494866 2,1,197258,", "1151,216305436 4,6,271517,475,556347363 5,3,474", "7,538,508824830 2,4,233070,47,401358771 3,1,169", "012,1016,471690204 5,2,83042,960,252849471 2,1,", "30524,157,634350255 3,1,9445,984,467248267 4,1,", "70562,13,835328417 6,5,39875,813,607824225 2,4,", "253295,487,88024661 6,1,95649,192,776455903 3,2", ",262462,1387,377323580 1,5,120555,596,749184885", " 4,2,225915,1370,287451428 5,6,210824,803,33613", "8872 2,3,4985,980,589011717 2,1,96425,822,83651", "6304 5,4,21131,1302,51956022 2,4,251261,1275,68", "8818798 2,4,143783,468,605184406"};
    int time = 811391988;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 672367417;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    int n = 4;
    vector<string> flights = {"3,2,10492,10705,589694840 3,1,6546,6230,6983212", "0 3,4,7359,8956,812774581 1,2,12685,12895,27461", "3583 1,2,5971,8584,582803285 2,3,10326,318,4463", "09117"};
    int time = 913565475;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 366462179;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    int n = 7;
    vector<string> flights = {"1,3,15,17,11 1,3,14,16,14 5,7,12,18,18 1,6,13,1", "6,12 1,2,18,14,13 5,6,10,10,18 3,1,10,10,10 1,3", ",17,16,10 2,3,16,18,16 6,1,15,12,10 2,1,15,18,1", "0 4,7,10,16,15 6,3,10,14,10 1,6,19,19,15 1,4,12", ",10,14 4,7,10,18,14 2,3,16,12,12 1,3,14,10,19 3", ",7,17,10,12 2,1,14,12,16 4,3,19,11,12 1,6,10,18", ",12 2,3,16,12,10 6,2,10,18,12 5,1,14,18,12 5,1,", "18,10,10 3,2,19,15,10 7,4,16,19,14 6,3,16,12,10", " 5,7,14,13,13 1,3,12,10,16 5,7,16,18,15 6,2,18,", "12,14 3,2,10,18,16 4,2,18,18,14 1,5,10,18,16 2,", "3,10,19,16 1,4,11,18,15 2,1,15,15,14 7,2,10,12,", "10"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 999999967;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    int n = 3;
    vector<string> flights = {"1,2,1,500000000,1 2,3,500000000,100000000", "0,1000000000"};
    int time = 600000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    int n = 4;
    vector<string> flights = {"1,2,3,4,5 ", "2,3,4,5,6 ", "3,4,5,6,7"};
    int time = 100500;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = 50237;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    int n = 3;
    vector<string> flights = {"1,2,1,1,1 2,3,2,1,98"};
    int time = 100;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    int n = 3;
    vector<string> flights = {"1,2,1,900000000,7 ", "2,3,900000000,900000000,900000000"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    int n = 3;
    vector<string> flights = {"1,2,1,1,1 ", "2,3,1000000000,1000000000,1000000000"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    int n = 3;
    vector<string> flights = {"1,2,1,999999995,1 2,3,1,1000000000,1"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    int n = 3;
    vector<string> flights = {"1,2,1000000000,1000000000,1000000000 ", "2,3,1000000000,1000000000,1000000000"};
    int time = 1000000000;
    TheAirTripDivOne* pObj = new TheAirTripDivOne();
    clock_t start = clock();
    int result = pObj->find(n, flights, time);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=251074&rd=14158&pm=11030
********************************************************************************
#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <set>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>
#include <queue>
#include <climits>
#include <cstdio>
 
using namespace std;
 
typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<double> pnt;
typedef pair<int, int> pii;
 
#define RA(x) (x).begin(), (x).end()
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())
 
template<class T>
void splitstr(const string &s, vector<T> &out)
{
    istringstream in(s);
    out.clear();
    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));
}
 
 
class TheAirTripDivOne
{
public:
    int find(int n, vector <string> flights, int time);
};
 
struct flight
{
    int trg;
    ll first;
    ll period;
    ll time;
 
    flight() {}
    flight(int trg, ll first, ll period, ll time) : trg(trg), first(first), period(period), time(time) {}
};
 
struct pqitem
{
    int trg;
    ll prio;
 
    pqitem() {}
    pqitem(int trg, ll prio) : trg(trg), prio(prio) {}
 
    bool operator <(const pqitem &b) const
    {
        return prio > b.prio;
    }
};
 
int TheAirTripDivOne::find(int N, vector <string> flights_strs, int T)
{
    string flights_str = accumulate(RA(flights_strs), string());
    vector<string> flights_arr;
    splitstr(flights_str, flights_arr);
 
    vector<vector<flight> > flights(N);
    FE(i, flights_arr)
    {
        int a, b;
        ll f, p, t;
        sscanf(i->c_str(), "%d,%d,%lld,%lld,%lld", &a, &b, &f, &t, &p);
 
        a--;
        b--;
        flights[a].push_back(flight(b, f, p, t));
    }
 
    int low = 0;
    int high = T + 1;
    while (high - low > 1)
    {
        int safety = (low + high) / 2;
        priority_queue<pqitem> q;
        ll prio[N];
        fill(prio, prio + N, LLONG_MAX);
        q.push(pqitem(0, -safety));
        prio[0] = -safety;
        while (!q.empty())
        {
            int trg = q.top().trg;
            ll p = q.top().prio;
            q.pop();
            if (p != prio[trg])
                continue;
 
            FE(e, flights[trg])
            {
                ll t;
                if (p + safety <= e->first)
                    t = e->first;
                else
                    t = (p + safety - e->first + e->period - 1) / e->period * e->period + e->first;
                t += e->time;
                if (t > T) continue;
 
                if (t < prio[e->trg])
                {
                    prio[e->trg] = t;
                    q.push(pqitem(e->trg, t));
                }
            }
        }
        if (prio[N - 1] == LLONG_MAX)
            high = safety;
        else
            low = safety;
    }
    if (low <= 0) return -1;
    else return low;
}
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/