/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4585
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class BoggleScore {
public:
    long bestScore(vector<string> grid, vector<string> words);
};

long BoggleScore::bestScore(vector<string> grid, vector<string> words) {
    long ret;
    return ret;
}


int test0() {
    vector<string> grid = {"XXEY", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"EYE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 9;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> grid = {"XEYE", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"EYE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 36;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> grid = {"TEXX", "REXX", "XXXX", "XXXX"};
    vector<string> words = {"TREE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 32;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> grid = {"XXXX", "XSAX", "XDNX", "XXXX"};
    vector<string> words = {"SANDS", "SAND", "SAD", "AND"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 59;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"X", "XX", "XXX", "XXXX", "XXXXX", "XXXXXX", "XXXXXXX", "XXXXXXXX", "XXXXXXXXX", "XXXXXXXXXX", "XXXXXXXXXXX", "XXXXXXXXXXXX", "XXXXXXXXXXXXX", "XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 9734704571760;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> grid = {"ABCD", "EFGH", "IJKL", "MNOP"};
    vector<string> words = {"ABEF", "DHCGBFAE", "FGJKL", "PONMIJKL", "ABCDGHLKPONMJIEF"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 425;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> grid = {"ABAB", "BABA", "ABAB", "BABA"};
    vector<string> words = {"ABABABABABABABABABABABABABABABABABABABABABABABABAB", "BABABABABABABABABABABABABABABABABABABABABABABABABA", "AABBAABBAABBAABBAABBAABBAABBAABBAABBAABBAABBAABBAA", "BBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABB"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1488430080000;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> grid = {"AFJD", "BDJU", "FIEE", "KDFE"};
    vector<string> words = {"ABDJEIFKD", "AFJDUE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 225;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> grid = {"TREX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"TREE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> grid = {"TEXX", "REXX", "XXXX", "XXXX"};
    vector<string> words = {"TREE", "TRE", "TR", "EE", "E", "XXXXXX", "X"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1154524;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> grid = {"OVIK", "BJUU", "UQUN", "QIHN"};
    vector<string> words = {"UNUNHUQHNNNUIJUNNUNUNUUIUQUBVOBUBQUIKU", "QUQJVBVUUQUBUJOJVJQUUUIJQHUNNUNUQIHIQBOBO", "UNUUKUUIUKIKUQJUUNUKIJUJUBVJUNUUNHNNUQJI", "NUIUJQBUQJUQIQUBVOJUQIUQQJIUJVIU", "UNNNHIQUHUUUNHNHUIHQIUIUQHIQUNUJUI", "QIQUQUKUVBQQIQUIHIUIUNNUUNNHQUUKUI", "UQUBJUJQUVOBJUNUIUUNUNUUUKUUUN", "UBOJQJUNUQUJUIUNNUJUJOBVJOJQUVIUQHQUHIUU", "IUQIQHIUBUBQQUBOVBQJBVOJUJIUUQUQUUNUKIKUUHIQ", "UIQIUIQHQUNHQBJUUNNUNNUUNNUUJIJUJVUU", "QIQUIUBVIJOJIVIVOBVBQJUKUKIUJUKIUI", "OVIKUKIUUUUNUNNUUQUIUUUUUNNHN", "VJQUQUNUUUNUJBVIUUUHNUUNUUNNUHUUUNU", "KUNHIUIUUUNHNUJVIKUKUKUNUIUUHUUQUQUBJI", "QUQUIQUQIUNHUUQJUBVJUHUNHNHIQUJOV", "JBJBQUIQQUJOVIVUUIVBJUIKIKUUIJBOJ", "OVJQUVOBUQBVIJUQIQIUHNUNUIUUUUKUJVIUU", "UIQBOBJVJOJOJIVIKIUUJQIHNUJUIHQIQJUI", "OBUIQUJIUUIQUQHNHUQJUQQQBOVBOJUIHNHNUN", "JIUQUUKUUIVBVIUUNUUNHNHNUNNH", "JOVIUVBJIUNUIVBQJQUIUQJBJBVJUBQUN", "NHQHNUHNUNNHQUJQUIUJIKUUUUNHUQUIQBQB", "KIKUQHUIQIUQUIUQUJOBOJVIJVUKIVUUUU", "NUNNUUVIUQBVIUUUUHNNUNHUUUNUJIVJI", "NUUKUUHUNNNUIUKUQJVBJIJIVBJUVUUJ", "JIKIJUVOVOJBUQIQIHNUN", "UKUUUNNUUNNHNHQUUKUNUNUJUIHNUHIQ", "JIUKUUUUKIUJUNUUQUUUUUIQUQUHNHQQQBOBVIJI", "HNNUNUUNNHUQIQIUNUNNUKUKIJVJOJU", "VBOBJOBVJUQUJIVJQIHQIHNNUJOJVOBOJO", "HUUNUUNUQIUUNNHIUHIQUQIQHI", "IUNHUUNHQUQUBVBOJUQIUBVOBVIUUVIJ", "UJQBOBOBUJUUUKUUIQIHNNUUQQUIUQUQUNU", "IJOVUKUUVBQQUQQUIUQJBOBUJQIQ", "OBUJBQUHNHQUQQHQIUIQUJUQUQJOBOJQQ", "UIUKIUIUUUNNUHIUHNHNUUUIUUNUHNNHNHQUIQ", "NNUUJOBVUUUUUUQUVIVUUQBVUQQQUUIVIUKI", "BQBJUBOBOJIVUJQQIUQJUUHNUNNHQBOJI", "UIJIJOVJUBUQJUUNNUNNUJOBOJBVUN", "HNNUIQIUNUUNHIQUBOVUNNHNUNUNUIJUJOVIJVOJQ", "UJVJIVJUNUUVBUIQIUIHQBJQUUIUVJUVJIJIJIKUQUN", "IUIQJBJUNUKIKUIUUIUKUKIUNHNUUNN", "BOVBJVOVJQUQUJQUQQUUUUUQUIQIUJQU", "OVIVUKUUIJUJUVJUJIUUNUIKUQHUIUIQIUHNUU", "QQUNUUKUUJVBVOBQUIUNHNHQUUKI", "NUHNUNUUVIUUNUNUUUIUBUBU", "JBOJOVOJBVIUNNHIQHQHNHIUQUQIUNNUQ", "IKUUJBOBQIUQIQQQUJBJUJIK", "UJVBOVJBQJVBUIHNUIKUUIQUQBJVUUIKIVIK", "UIUNUUQJOJIKIJBJUNHNUUUJBQHNNUUQUIU"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1206971540;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> grid = {"ZCAX", "BADJ", "MVCS", "EVBE"};
    vector<string> words = {"AADACAJDXJCSJADJDXAJADJDXAJXDCVV", "VVVDXAXJDVBESCJDCAVBSESBVBMVCACEBVMB", "XDXJXDXJCSJDACACACDVCDSDVMEMBMBAMVBCBSBVM", "XDSJAJCBCJCBVBEBVMVMEVEVMBACJAACZCA", "XJDCBVMBVAZBAVBVBCAZAMBMEVVE", "JDCDSJAABZBZBADVBVCADJACBVBCBEBVCA", "CJAAMEVEVACAAMBVADJDSDACZCDCACECAZACSC", "SCVCJCVVEVEMVEMEVEMEMAVBECVADAACS", "VDJSCDXADJXJCVCBCVBECVVBVBVMEMVMEVCDSE", "SDJDCSJCSDXJXDCBAZACJDXDCZCBVABCDCE", "JSJAXJSCSCVCVBVBVMVEMBCAXACDJACDJDC", "CDJADAJDJDXACBVMVVBAZAVVVM", "BSECVDXJADSEBVVCACBZADVEVBCA", "ACBZBACAXAABVDXJCVEMACZABMAADXDJDXJDS", "BVCDACACZABZBACVEMVVMBAZBZCA", "ESJXJDAMAZBZACAMAAAMVBCDJSDSBCSJXAAA", "XJCSDJCJDVCACDAJSDAAJSJAXJAABAZBAZCDSJCJADCVE", "JSCSCDAACAXDCEBVABCBACZAMA", "BMADCBVBCAXAACAVVEMACDCSECECJAAZBM", "AXAAADVVCABVDACSJSDSEBCJSEBESCSECVCVBV", "CBADVCJCSCAVBCBECSJAACJDVMVVDAA", "BZADVABAAACVBVCDAXAAVCJXADAXJXDJA", "JXDVBSCVCVVDAVEMVVBESCECVEVVEVBEB", "AJSBEBEBSDAZBACACZCABABCBAVDSCEBECDVVV", "BAZCBVVMACSJXAACESECSBECECDSE", "DAVABVBMBAMVEVDCBADCSDADVBCVAZCBACDCVM", "ACDAJCVVMAZCACACDADAAZABACDAMVBCSBSCJX", "ABVBCBZADADXDXJXJSBVMVE", "ZCADSEBECSCJAJACAVVMADCBVADCAADVVEVB", "CVCECDCAXJAXDXJDJDCADACAXDXDAAX", "AAXDCAJDADCBCDJXAXDSBCJXD", "CBCVBCEBECECVACBVCVDSJSBVMAAAZABVE", "SCDSBESDVBZCZBAMACACDJSJAJXAX", "DAACAVBSECVEVVBVAAXJDCZCAVACAADVAADXA", "ESBESEBESJXJSDAVDXDACBCAJCEB", "AAMACACVMACVCEBSCDADAVCBVCBVCBVVCJSCV", "CBSCAMVCEBSBVDCAXJCVABACVBMEVMBMVVVM", "ZBVBABCDJCJCAMBMBZCAXDVCAACBCACADAZBVC", "BVVCVMVMADSCJSCADVVMVDXDAAJXACDADSJCJ", "VMBZBAACZBMVEMEVMEVVMAAXDXAJADCDCSCV", "MBMVDCECACACDJSDVCVCSJDCAMEVVEVVEMB", "SDVDACBMVEVCECBEBVMVVBVMAMAVEMVBS", "EVMVBCESJCVEVVEVAZCAAXJSDACAZCAACBCV", "VMACVVBVCJXJSDVVVBZADXAXDCVDCDCVBZC", "AJAACACZAMVCESESBVBVEVEMBVBEBECJXA", "MEVVBACZACAVVBSCVEVMAZBVAMBCDSJAJCSJ", "AMBVVMVVMEVCADCBVVMVCAZAADAAACDACJXDV", "VBVDJDCACDXADXDCDXDJSCJCVVCEBECBVBMVEVVE", "EBCEBESBVBECBVMACDSEBVVBCBVEVEMVBSECVM", "VBEBSESBCVEVMEMVBSJCDSB"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 3620356;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> grid = {"INDD", "HDAP", "VEAL", "YCWG"};
    vector<string> words = {"EYEHINADNHVCALWGLGWADALAEDI", "DPAAWAADDDPAPLPDNDEHECVEHNADDVD", "NANAADAEHNINAADAALWEAADAPDPDDPADADDP", "DPDDADIHDEVEYCEYEAPDAPADNHIDVHNHIN", "DAECWAWCYEYEHINIDDPDNAAEWAGAWEYCAEVC", "HDAGLGLWLGAEHDEWCEHIDALAEAPAEYEDADADAE", "GLPLADDADAECADAPDAPDALWLPLP", "LGLAAEAWAAPLAEWLAEHEWCYCWCVHDADPAPDDAP", "CAEVECEAEHNALALWLPACYCWCWLALADAPDAPLACE", "WLWLWEAGAGLPDADPDDAEHVCEWLAWCYEYV", "IHNDIDNDNDHIHDVDHDNDEADHIDADEADI", "NADVCYVHIHVYEYCYVYVEHNDNIDAPDD", "DPADVCEVDNDVDNHEAPLWLWGLPLGACYVD", "APACEDAEVYEADPACYCVCVDIDHVDAAAEV", "YVCYVDNALGLAEDECYCYEVECYEHEAEWG", "YCVDNIHIHVHNDAEAWECYVCWEYVCAWECVCWEV", "LGLAAADEWACYVDDPALWGAGWAEAWEVCA", "NDHIHEAEADANHECWLAAPADPDPLGACADDNH", "WAEYCADALGAGAANHEYCWCEWAAEYCYC", "DANDAPDPALADNALADAAGWCVDVYEAALPD", "VEDHIDIDIHIHDDDPDDDADDDAWGWCADHDAGADECWAL", "ADEWADVYCYVECVDAECWEHIHVDEHEADNIHEAAPL", "IDAEYEVEADADPAPDPLAWGAGLAPAAWGWAPDPDNI", "AADDNIDACAPAWAEVYVDVCYVCAALWCVCV", "VDDNDNDDAPALANDPLPAPDDDVYEHIHVC", "YEDALAGLALWLGAEWAPAPDADDADPAAEYCAAD", "GLPADALAPAGAWAEAWCWLPDNANIHVCYVHIDDPD", "GWECYVDEAPAECVDHDAGLPAPDPALPADPD", "WCAWAADDALALPDDAEVEVYEYEDVHNDDDI", "WCAGWLWLGACYEYVEADEAWLWCVDNAPAADANDD", "NDDNDPLPADDDANDADPLGAGWGA", "HVYEHNALAADAPDADDHDEWEAPLAEWAGWGWG", "PAGLAWCWLPDPLAAPANHIHVCEDINDNDPAA", "NADDADDHINHDIHEADPACVEHEALGAECEDNHNDALWGL", "DAEAADACVCYVEAGAWEYEHINHNDAPLWG", "EAAALPAEAEAPDDHIHEAEAWALWGWGLWLPDPADHVHD", "VYCWEAEAPLWAWLADVEYEALPANHINDDALG", "YECWEDDPDPLADHDAPDANDDINDNININHEWAAD", "HDVHEAPDDHVEADPANDAEWCEAGAEVYCA", "GWLWLWEWLWGACYVDNDDNHIHIDDALANADDD", "DDDDADDPLPAEWGWCEVDDNDPAGADADDAA", "CVHNDAADECYEYCAWCVYEYCVCYVYCWLAWC", "AEAPDDPLWAGLACYEWGWACEYVDDD", "NDAPALGWEVECWALAWEDNIDADIHVYCWC", "HNIHIDNHEYVCVEADACVHEWLGWLADIDI", "DNDPDNADDNAEAGWLGWAEYCWGLADADAGWGAW", "IDHINAPAGAADDPLADAPDPLGLPAPLADAAPAAAE", "CEACYCADANDVCALAEVEALGWCWCYEAWCVD", "CVDDPDPADPDDAAGAGAADDPLGWECYCWA", "PADNHINIHDAADEYVHNDAEYCALAGLGWLG"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 8632604;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> grid = {"DSBF", "VTWO", "AYKS", "JMIR"};
    vector<string> words = {"AVDSDSWSOSRKYVAVDVSWSDTSDVT", "SVDTAYKSKWSIKIRKOSKIRSOSWSRKIRSWKYI", "AMKYKYKRKSRSRKOWSKIYVTWFWSWFBSVDVSVAJMJM", "SIRIKMJAYTBTBWBOSOSWKMYTYAYWSKWKWOWSRI", "SDVATVSTWFWYMIRKOKYAJYWSWSRKRSOS", "OKRKRIMIKYKIMKYWFBOSOKWTBFOKOKIYMIYAY", "AYATKMISRSWSDVTWSVYTKIKTWFOKWYWFBTDVAJ", "DSDVDVSBSWSIMATAVAVTSVAYMIMJAJYTSDTBO", "IYVTAYTATWOKOBTBSDVTBTYKMIMIKYWOKW", "YAJYMIYMAVTVAVTDSTWTKYISIKSWSKTSDSD", "TATBWBTVSTAYVTSBFBOSOBST", "JAMKIMATDTSTBOFWTVSWYWSWYWKOBFOSISWSBO", "OFBTDTVAVYWOKMATKWYJMYISOBWTDVSD", "DTVAVAYMJATAMKTSVYTVAYJYVAMATVDSBWSW", "VTYTBFBSDTBWOWKTWYJMAMYWBSBOFOF", "OFWBWSIYWSTVYTDTVAYJAYTVDTDTVAJYIMAJ", "FBFBOBFBWSWTSVDTKMIYISRKIKOKYAYMJAV", "KWSKMYISOSIKISKMAVYJYAVYAMJMKTDVYI", "WKTVTAYIRKTYTAMKWFOBTSDTBSTDTKMYW", "ATKIMJMAMATVTSDTKSOKMIYIMYJMKIYIRKWYAM", "OKTYTVSWTKRSIKYMAMAJAVSWOKMJAMYKIKSK", "MISKTWSTSBSTSBWTDTKMYKIYTSVAJYATBOFWFWTD", "OSKRSKISWBOKSOBWYAMJYJYWOBOBW", "YVTDTWTWYJYMJAMKWTVDVATATWYTKWKWSOBWYATDTSVA", "SKIKYIKRSOKRIYWSTVYKTWSRIRSOSRSWS", "SVYKIRSKWSBSBFOFWSIRIYJAVTATK", "TATWSDVTSDTYMYKIMYTVTKTWTBFWKRKRIKRKSOB", "TSTVYMKIKYJYVAVSDSDSVDVDTSBSBOSRK", "WOWSBTKYMJYIYIKSOKIRSRIRSOKISRKRIM", "JYMYKWSBSTWSWSWOBFBFWTAJAJYKMISRSR", "RIKTBSWYIYTWTWYJAMATYKOSOSISKYIYVYAMJYKOWK", "KWTKRSOKWSIRIKMJAJAJYWYWKRKSIRKWBF", "WBFOFWOWSKRKMIRKYMIYAJMAMYTDSBOKSR", "WYWKYVAYWTDVAVSWSRSWSDVAYJMJAYAM", "AYAVYVAMYIMAYKTBOWFWBWTAMJAJMIRIKO", "MYKMJATVAJMATVSVDTVAVYVYWFOSRIRSR", "TDVTSDVAYVTDVATBFBWOWSVSDTSBWTWSO", "RIKRSOKSWTYVSWBTVYMATYWTKIRSRKTVTWKTWS", "YVAVATSTBWTSDVYKOFWOKSWYTWBOFBSTV", "VTKTWTYJAVDTBSWTATDTKSRSKYVTAJAYWKOWYVYJ", "FOSWFOBWSRKSRIYMJMYTD", "WSWKIYIRKTAVSBTDTAVTDTAYAMKRSKSWYVDT", "DVTWSOFOBTVAVTAYKRSRIRIRKISWBWBWTWS", "DSVDSDTSBSBSDVYIRSIMKYMKIKIKWBSDV", "OBFOKOSOSRIYAJYJYVDVSDSWOKMJAVDV", "DTBSWTVSWYIMAVYWTVTKWYMIMYWYKSRKIMI", "OWOKOFBSVYKWSDVTKRKRIKTSWBSTWS", "RKRSISKRIKTYAYTKWOWYMKSRSKIKWOFBTKOBTK", "KWBTKWYJMJAVSDTSDSDSDTWKWY", "FBTWYKIKSOKOFOKMKRSIRKISOSOSO"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 75360;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> grid = {"YSJE", "BLJQ", "LFOB", "LJRW"};
    vector<string> words = {"BRBWRBQJJSJSBLFJFLJRWROFLLFOWOQ", "JJFRFJEQJQJJSBSBFLYSJFBFRWBWBR", "BWRFOBWRBOBOFLLSBLBYLFBFRFORBRJFLLBYBLF", "OJLFLLFJLLLJLJORBOWBORFLFRJLLJFLOWRO", "LLFBFRWOFJOWRJOJFJEQOJLBLJFLFBFJOBQBOBOF", "LSBLLLJLBFJJLJQJSBYBFLFBLFROBOQJQJO", "JFJROFJLJOLOBJEJSBFBLBYSJOFLFJLFLYBYSY", "JSJJFORWRWROFBLORWRJLBLSLBFLFJBRO", "OFORWOWOFLFJJQEJSYBSJLOBJFLJLJRW", "JLBLLBLLJLJFLFOBRFRORJLFRWROJLJLLFJFJL", "JQBJFJJLYLBFLFBFJRWOJLJLJFLOJQJOQJEJSB", "LJLFJQEJLSYSJLOFLJSBLJQJEJEQEQBW", "FOROJFOLLFLJJEJSJJQJBJEJLJBO", "QOJFLFJLLLLFLLJEJJJBJEJSJQJLJLJSBLSJE", "BRJFOJSJFLJOJJEJQJBJQBQOBRFLFBFOJLJ", "EJLBSJQOJOWOFRJOLJBOLFBFLFJQOQJQOJOJ", "SBLJEJQJLJJOBORFLYLJEQJSBLLLFBLOLYLBSY", "JQEQJLLJOBOJSLFLLLBSJSLFRFBYSJ", "SYLJEJJEQEJJEQJQEJEQBJLSJEJQJB", "YSYSJSYSBLBYLBLJFOBQBJLFLJRJRJOQJQJ", "JOFRBJJQJEJBJFRJFOBJLORWOBWOJJSB", "QJBRFLLBLLJBQOQJEJJQJLYLSLJEQJJJE", "JORWBWOJFLBYSJJOBOFJBOWOBQBOJOFJOBJQEJ", "YLLJFLJLFBLORFBYBLLJJQOJLLFBS", "OJLBFLFLFOWBWOJBOWRWRBOBROWOLYSJQOF", "YBYBLLFLJLLJLJLJLLSJOJLJFLYSJE", "LLJJBQJLLFBLJLJBWBWBRJLJOWROJOW", "SLSJJBJFLLFOJJJSJSJEQJQEJEJFOJRJRFB", "OQJJBQOBWBWBQOFJRWRJLBFLJFLYLJSLS", "BOJLLBLYLBLSJFJJLFLLYBFLFJLBFJEJLY", "YSJLYLLLSYLYSJSBLBLFJLF", "JFJFLBYBLJLJOJOBRJFLJEQEJQBOWOWRW", "BJQEJQJJFLLJOQOFJLLFLBFLLFJBR", "SLJOJLJFLLOJEJSBLFLFROJRBOWOWBWB", "LLJLLFJLYLOBJSJSYLBLYSJSLJJEJJBJFR", "SYBLJQJEJSJEJJQJEJLSBLJFOBJSY", "LFLJOQJBWRWRWRWBWBRJFOFLLJLB", "WRBOBORBQEJLSBYLOFLLOBJLBLJFOLBLOQE", "RBOJFLBLLJOQOWOJLFLLJJJQOQJL", "JLJLLJLBSBLBLLFBSJSBLYLJEQBQBOWOL", "LLFLOFLYSYLJLJBOLYSJQJEJSYBSLOBRWORJL", "JSBSLJOJOLSYLJQJEJLYSJLBLBLJSJQJBWOJBO", "RFJEJEJBOQBQEQBROBQORFOWOLBLOBRFJFLFLJEJL", "JJBRWOFBLLJFLJRWRWBQORWOBOQBJSYBFJFJRFJ", "BWBRJOQJEQEQBRFOLYLOFBSLJJSBLFOW", "EJLSJJOLJSJSBSJEJQJEJEQEJSJQJJ", "JLFLJFROBQORBWBWBRFLJRFBLLBFRFBYLJEJJJ", "BFJFLLLYLLFLLLSLFLBYBLLJJSBSJQJEQEQ", "SJQOJQOQBWRBQOQOJLFLLLJOFRBWOLFJL", "QBRWRBJQJEJEJLYSJOJSLOJLLJRJOQB"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 32574884;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> grid = {"QHZO", "VXBW", "MHVX", "JSQP"};
    vector<string> words = {"BXMXBVQSHVXBXPVWZXVHBHXQXHVHXMVHSMHBOWO", "VXHMSQVXBWXVHBOZXVSVPQVXMVQXHBOWXWBXPQ", "VBWBHQVXMVHXBWVWVBHVMJMHSHSQHJHJSMX", "XBZOWOBHQHXVHMXZBVXVSQXPQVPXPVSQHMSVW", "BVWVPXVXMVHXHQHQVHXHQHBOZOWOBXWBXVHBVBXV", "BHXBXVXZXVMJHBZHVHQHBXPQVSQXQVXQV", "BXPXBVXQVWVSVSQXBXQXHBZHXVWVQHQVBOWZHBOW", "SQPXWVBHVMHMXHQHQXZXQHBZX", "ZXQHZOZWOBVPVXQHMHQSQXBZOZOWXWOBHSQHXQ", "WOWZXMXZXZOWZXHMSJMHVSJSJMJMJHQ", "VXPXPVBXHVBOWZXZHZOZBOZHXHBVPQPQH", "WXQHMVXQXZWZBHXZOZBVSHQPVSMHVQHZOBO", "XQPQHSMVHZHZWZWXBHQHZWOWOBXH", "ZXBHVQHBWVPVPXVSVWXVBHZOBHSQVPXPQXW", "PVPQSQVQVWZWVHBWVQXPVHSMHVQXBXVMSQPXWBOZW", "VHVXQHZXZWOZBWVPQHQXWXPVQSM", "WBXVBXQXQHJHJSVHVWVXZOZWVXVPVPQVQSQSVXQ", "SHMHQSVWXPXBOBXVPXPXVXVWOZHVM", "QHZOBOWVWOBVHVPQSMJHSMSMHBOWXWZ", "WZOBXHBHMSHSQHJMXBXQSVPVQVXHXHXQHZHVMVHVHB", "SHMSQVHVSVBHXQHBXBWOZXHXZXMHMVHQ", "ZOZHBOBHSHSVXZOZXVXQXHVMJSHQVQPVQS", "HZXHXHSHQPQPXWVWOZHBXVHVXQXQVBXVHXZOZW", "QVHZOZHZWVHMVMHMHVXHQVXHSVHVM", "PQVWVXPVXQHQSQVSMXVSVWVHVQXQXHQHVHV", "JHXMXVBZOBWBXVXHXQVHMXMHVBXVWOZHVHVQH", "OZWOWXBHQXPQSJSVSJSMXQHQXVMJ", "HVQHQVMVMHMJHMXMVMJHQSHVXVHMJSVWOWV", "XWOZWVWOZWVWXWZOBZBHVHQSHMSHXBXVHQ", "VHBXBOBVXHVHBWOZXVXWZBVHSQVHBZHZWBHJ", "OZOWZHBXZHZWXVSQHQHJHVQSMVMSMHVHSMSMSQVSQVXQ", "HZHQXVHVHMVMVHQXPQHMVXMSJHVSMVHSMHVHV", "ZWXBOWBXHBOWOWZWXVSMXQXMVQXHVMHQH", "XBOBHXBZXBHBZXMXVHBXBXHVQXBXHQHQH", "VHXQXVHXBHSMSQSJHBZBWBXQVHXHBVHVWOZOW", "VHMSHVHQHBHVMXQVHMVHQHZOZWOBZHBO", "ZBHQHJHSQVSMJMXMVHVMXHVPQXBHBXWBHXH", "HSVSVSMJHJSVXHQSHJSVSMHJMXQXMJSQS", "QSVXVXMJSJMXHBHJHVHQPXBVHMSVBVWBXBWZBHZBWVXH", "XQVXHQXVXVXPXPQPXQXPVHJ", "MXZXVWVHQPVXBHVPVXMHMXQXVXZOBOZOZWXWVW", "OWXVWOZOBHQHVQVQHVXMXVHQHXZHX", "MJSHVHXQHXVPXBWBVBZXVMHJHJSJSMVQVHJMJ", "VHXHZOBHVHXBZHZOZOWVHXQXVQHQHBH", "WVBOBVPXPVXWZWOWVPVWVSHVXHBXVWZBOWX", "WOWOBXVPVSJHXHQVXQVHZHXVSVHBHQVBVQVXWBXV", "WXVXHZHQHZHZWBHVHVHVHSJMVXZXQH", "HXHBXQXVXBOZOZHQVMSQVBOBXMHMSHBHBXBZBO", "JHJHVQXQPXBVBZXVHVSMJSVXVWXWBHZBXB", "VPQSQXVHXBOZXVMHQXPQHQVQPXWVXMJ"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1547708;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> grid = {"ASXU", "GKQM", "ZMCD", "ZPLG"};
    vector<string> words = {"MGSXMCMZZMZKQSKXMDMDCGDCKASQXSQK", "LCQKCLPCGLDQCGDLGLGCM", "KAGZGKXSXSASXMCGLPZGASXMXKSQCKQMQDCMU", "UXUQMZPCMLPMGSASKCGDLCQCQSGMPMLDMCK", "ZMPMCDQDLGCDGCMXKGSXQXQCMCLGCLGC", "XUMDMCLGCMQSXSKXMUQMLCGDGLDLGD", "AKGMKCMCDGLPZZGKCPZZKAKASAGAS", "CGLPZPZMZZMQMQKAGAGSXMCGLM", "MUMCDLMGZKMQUMCKGZGSGKQMCQXKZMGMCMZPZ", "ZMPLMKSQCLGCLDMCGDQMKCMXKCKQUMCQDCQD", "PLGCGCQMDQMUMXSGKAGASGMZPMCMDQCKXQDC", "LDCGLDLGLGDGLCDQMUQMCMCDCDGL", "ZPZZZKGASQUMCDGDLCMLGCLDCQUMCMQMCPMKXQX", "QXKGMZZPLPMKMCKAGSKXQXUXUXSXQCMUMCQM", "XSGASAKAKGZPCMQMDCMQDCQSQMUQMQCD", "GKQKQMCKCMPCMGASKCDQXKCMQXKSASQXMQKCLMPL", "UXMQSQSASQKQUXUMUXUMDQMCGCDGCQCQXMX", "GZGSXUQSAKAGZPMPCMUXSXQCMUQU", "MLMGKCQCQCMUXKZKCQMXMUQSGKGKZMGSXSASGZKX", "MQMGKZPLDCPZGAGKGKMPCLCPZPLPZZPZM", "SKZMCPCQDGLGLGDQSKZMQCMQCLPZZMQMQC", "PZPZPCKZKZGMZZPCGDMUQXSXSXKG", "MLDLCDCQUXKMPZKCGLPLDQXQXQMLDMDGCPMKXK", "MGKCGDGCPMZPLGCGDCMCMCQUMXUQKCGDG", "GCQUQSASXUQMUQMQMDGLPMCGDQXQKA", "QXKQMUQMXUXKXMQUMXMUQMU", "QSXUXKXKAGAGSQSGKZGKZGKQMPMGZZ", "LPZZPCDCPZKXQUQSGKGSQSGASGSX", "PMGZGKSGSXSQKMPMZZMGKSKCGCGLPCMDCDMQK", "SKXSGAGKCMQMZZGAGKAKSXKGA", "MKMPCKCKCLCMKSGZGMLMKMCGDCQSKGA", "KXKGAKZZZPLCMZZPMGMPLPZMPCQKGAKG", "LGLDQDMDGDMDGCDMXUMUQKZMCDLMLMZZZ", "PCMPZMQXKSQDCGDCPZMPZMP", "PLDGLGLPMQUXQUMUXQDMCQDMDQDLPCMU", "QSQCLDQUMQSAGAKXUMUMDMDQXUQCMC", "CMXQDGCLDCPCKQUMXMUXMDGCQCKSAGSGSGS", "GCPMQDCQMGZPLPZMZZKXKQXQKSXKMZPZPZZM", "SAKASGKGAKAGKCKQMXQMCLDCPZPMGAKCG", "ZKZGZKXKXMDQUXUMCPMPMLPZMKZGZMQDMQDG", "GZPMZMLMCPLMCQKSGKXSXMQSQMZZKGAGA", "QCMXUXUMDMQDLGCLGDQMQSKCKZPZKAKMZZMGMQMUQ", "SGKCMDLPMZKXQCQMZKQUXQCKZPCMPZPLGLM", "LMPCMCPZMZMZZPMKCPMPMQMUMUM", "PCKXQDGCPCPCQSKAKCPCLDCDQDMCMUMU", "QDMUMCMDMDGCMQMUXMQXSASQMDMDCDGDCPZZZ", "XSXKXKZKZMZPZMZGKZPCQMPCMZZMQMLDCQSQXSA", "QSXUQCDMQXQKASQDMCGDCGLDGCPMZMCMP", "DGDLGDQUXSAGZZPMKSASAKXUQDCMKZKZGSASAK", "GASQMQSQMXKGKAKSKCQCGCDCDCKMLCMQDGCL"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 228137;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> grid = {"EWSW", "CFRL", "MGHP", "FQUL"};
    vector<string> words = {"HPLWRHRHLUGMFGULPLHQMFQGMGFRFCWFECGFH", "LPHGRGHLSWLPLUPRFSLRGQUQMQMFEFGC", "CMQUGRGQFMFSRHPHQHLPUQUHUHUQUQFMQMCM", "SFMGMQUGFQHULUQFQULPLHUQGCFHGQGMQHL", "CGCFEWCGRHPRSRHUGFWECFCGCECGRLSRWSWEWF", "WEWEFSWECMGFMFGRWRLPHGFHUHRLRPL", "FMFCFHRWLSFRWRWEWCMFQGRFGFHPLSWLHQGQG", "EWCFRPHQHRLPULHLUHQMFMGCEWCWCGQH", "LPULPHPLWSWLWRLSWSRWRSRPUGCWSWLW", "ULHLHFRSFMCWCWFHRWCFHUHPRGQGUGCGUL", "HGRWRLSLPHLPRFRFGQFGRLSRGCECMQMFECWCMGHFRP", "RFEWSLWLPHPLUPHQHUPLSFWCWFWRWECG", "LSFHQGHLHPRWSLSWSLSWFGQMQMFWSWSFHUQ", "EFECGHQGHPRPLRWRGUQGCWRWRWSWRPLWLP", "GHRPRPHRPUPUPHULPLHQFMQFMFMFMFQMQUHLHRWRW", "LPUPRLHLHLUQULHGRGHULHRWLSFSRFWSWCMFMGFH", "LHPHPRPHFMFMFQGRGFMGFHUPRLWSLHFCFMFHLHU", "RLSLRFMFMFQGFRLRLHRGFQHUPHULPLPL", "SFMCGUGCGFGFMQMFMQMFWEFEFRWSRGHRFW", "FEFECGQMFQUGMCWCWFGCEWFGQU", "QUPLHGHFWFMCEWCMGCMQHRFMF", "RLHULPRSLSWSRWFSFSFCMQFMGRFMGMFMGU", "MCMCGFMFMGMGQHQFQGUGQFMFWRGHR", "GMCWRHLSRWEWSWRHRSRWRHLSRSFCWFMFEWRW", "QFQMCGQMFGRWSWECGCWSLSLPRWRSRPHRPL", "RLPHULUQMFGFGRHPRLPRFEWEFCMGFEWEWSLPU", "EFRHRHPUQGUPLPRWRWLHRSRFRSFGFRHLUPLPRFW", "WSWLSRSWSWEWFMGMFCFRFMCGCEFCMFQ", "LPRGFMGRHGQFGMFQUHULUPHLRLWRGFQMQGQ", "HULPLWRHLPUGFGUQMCWRPLPRFGCGQFMC", "SLWSLRWRPLWRWSRPLRWECWFHUGFGFMC", "FWFCFWEFMCWFWFSFMQUQULHLHRFGUPLS", "WLHLUGMGHPUHFMCMFMCFMGCMFQHFHU", "RWFWCMFMFGUGRWFHQFQMCMGMCFMCMFHRSRWLRFSWS", "WSFSFMFEFGUHUPHFHPRWSRLPUGFGQ", "LPLWLHLPRWLHRGQUHLHLHFECGHLRWE", "RSRGCFMFMGULUHLPHPLSFMQHLULHUGCMFR", "CFEWCFEFSRLPHFSWFHQMQFQGRHGRWSWCMCFRSW", "RGRPRWCWEFMCGCMFCWSRSWLWRLPUPL", "LHUPRHPHPLRLRPHGRPRHGFGCFCGQHUHUPLUQUGR", "FQHLPRHQMCEWFRWCGFMCFHQHGRLWSW", "QMFSFEWFWSLSRHLUGQUQUHFWRLPUHGQUQGCEFHLH", "MQUPULPUQHLHLPRHLSRPRHLHPRPLUQFGQGHPH", "FMCGFWRGULUQFQHLHPLHGFMQFGRHPUPHPRWRGCFSLR", "FGUQFQGHLUPLRLSRPUQUPLPLPLUPHFWRWF", "PLPLHLUPLSFEWECEFHULHFEWFMFWS", "FQGFQUHRHQFGFHGUGHRHFRWFHFRGHLPUHULHPLPLP", "CFGQHPLHPLHQMFQMCMFGHGQHRGRSRFSFCW", "GCFGFMQUPRLWSLHQFQGRGFHPRWFHLPHQGCG", "CEWSRHFMQUQMCEWFGMGFGQMFWSRFH"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 535274;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> grid = {"GEXQ", "FHXW", "CATP", "RMBN"};
    vector<string> words = {"GHAHACFGEGEHCMAHGHCMAHEGFATHGHGEGHCFACAC", "CAHEGFCRATNTHXWTHFCACHATMBTXHGFG", "CFGFAFGEHXHXWQXAFCFEFEGEHXQ", "MBNPTPTHCFGEXWTWQXWTWTHTPXXXAXPXXH", "NPTPTWXPBAMACMRCACRARMBNBAMCHATXWPB", "GHGEHFHFATATNTAFEXXQXQXWXEGEHEHGHTN", "EXHCARAFEGEXHTPXXWTACHEXQXXXXQWXTBNP", "MRMTHACFCMBACFAHGFEXWPXPTAHXWP", "TAMCFEFHGFGFABTBMTXQXXE", "RARABAFAXTHTBMBNPNTXACFGEXEXXXQXWX", "GFGHCFAFGFCFEXQXWPXWTAMAFCAHTXQXACMBTA", "WXEFCHXXQXHFEXQXXXHTXWPTWPBP", "BTPXXQWXQXHEGFGFATPWTABARMCFG", "RMBMBNPTXQXHXXQXQXXHAXHEGFGEX", "GHXTPTPNTPWTAFCFARMCFGHAMARCRCATMRCF", "NPXATBNBMTMRMCMRAXEHCATHGEXWXQXQX", "EGFEXARAHFCHCHFCFGHEHAMBMBNBNTPTP", "QXXXEGFEXQWTNBMBTXPXPBMAFGFAXQXW", "FCARMBPXXHEXQXWTNBMBAXXEGHEXHF", "PWQXEFGEHGHGEXPWXQXXTAXQWPTBNBMT", "RAFGHXHXHCFEGFGEFAHAXWPBMTWTPBMRMRM", "RMBTHGFEHFAFEHGHTXXXQWXXWPTWQWT", "GHXEXEGFEFEHXHAXTMACRATMCAXTWPBMRAFH", "WXHXEGHGHGEFHXEXTMBNBMCABPXATXQXHA", "QXWTXQXHGHACAFAFCFACAHEGHFEXQX", "TAMTXXXEHGFHXHFAFGEHFGEHFGHTAFCAR", "MTABPTHGFCHAMACMAFHEFHXHGFCACFARMRATXP", "GEHTPNBTNTMBTHEFHGHXTAHTMBMRCFCHGHFEFEFAHGF", "GEFATPNPTMTMAFCFEXAMTBMBNTPBNBNPNPXPW", "QXTWXEFEXWXQXEHXHATBNTXPBNBTWPTMBAM", "TPTNTMRCRMRAXATPTWPWXEXEXEGHXHTNP", "XQXPXEXHARMCFGHTHABTHCMRCMTNPNTPTPB", "EXWXEHEGHXXTABMCRCRMRMRCMBTMBNTHTABPW", "GFATXHXXWPBTMCMRAFGFACRCMTNPTATHG", "HFEHXPXTBPXPWXQXHGEHXEXEXACABPNBTPNTNP", "ARABNPWXWXXXEGFGFHTXTPNBAXEGFCMRAFATXX", "XEHTMRMAHTPNPBNBTBNTBNPXPBMRCHFEX", "FAMRAHAFHFEXTXTBMCAFCMTPTNBNPXHFHFCF", "FGFHFGEXHAXEGHTXEHXTNBMRCMTATPXWQXQXQ", "NTXTMTWXWXEHXWPTNBATNPNPNPWXQXEXAC", "MCRACMAMBNPXXEHEFEHEXXHTABNPXXXXWQXQXHCHX", "RCAMABTXQWXEXEGFCFHCAMTBABAMBPNPXWXAXTMR", "QXXHTWXAHTATMCRAHTMAFHCMCFCR", "XEFEHXHFAFCFEXQXQWPXXXWXQWXXHTM", "TMTMRCMCMCMBPNTBTMTMBATARAFHEXEXAFACM", "MTMRCMBNBTXXXXHEXXWPNTPTWQXQXQWXE", "CMBAFHAHFCMRARMRAXWQWPXHCFCFAXWQXWX", "XQXXEHEXPTWTAFHCFHTWTXXHCFHXHXACMCF", "CFEHATWXTAFGFHGEFHFATXQXEXQWXEHTNPNTXW", "RATBNPXWXWXXWQWQXXWXXEXPTNTPW"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 545518;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> grid = {"RROK", "BOXR", "TLXJ", "BMYA"};
    vector<string> words = {"KXJYJYAYAYXOBRROBROTLBLYXOTLBTBMYMXY", "RROOROXXJYJYJROKOXJXXMXXRXKXRXOXXOTM", "RBTBLMBTMYXMYAYXJRXRROXKOX", "RXAJXRXRJYXAXAYJAYAYJRKORXLMYMYMLBT", "RXOLBRROXJXOXJAJAYAJROORRBROXJR", "XRROOOXORBTBLXYJRJXRKXOXMYJAYXRKOORBRORXRXXXLY", "BRROXLMXJAJXRXLOBROROOROORR", "ORRBOOKOORROROXKOXORBROXRXYMTMXOBOXL", "JXROKXORXRXLTMXAJYLXJYAXRXLTOBROT", "BTORRBOOROROXXLTOXXOORXRXYAJXXOXRKRX", "RORBROROXOXRXXOKXKXJRXRORBROORRBTB", "RBRBRXLXOXMYXMXMTMLTLBOBROBLXLBLXXOOR", "JYMTMBMLBLTBRBLBTOTLYXLBOTBMBTLBOR", "OXKXROKXJAXMTOTLXKXRBRBRORBRBR", "ORKXOOXLMXRXLMLMBTMXJYJAJRXROKOKX", "JXYAJRKOKRKOROXJXRKROOLXXKOKOXLB", "ORBOBTOXRJXLTMLYAXOBRBLMLXMYXMYLBRB", "OBTBTMBTBOOXRXRJRXMTLBLOROOTBRRRBRBRROLTO", "XRKORKOXLMXAYXAXXLMLYAXRKXKOXRBRB", "OTLXKORBTOXOXJYLXXXJXAJYLBTLXLXRJXK", "JYMYAJRXXAXXLMXRXMYXMBMXRXJYMXMBTOLXJX", "RXAJXXLOOKRJAXYLMYLXLBLTMXXORRRXLYMLBOROR", "XYJYAYMBLMYXRJYMBMXXROROROORKORXRBOXY", "RBRRBTOLOBLBRORXJAYJAYLXJAXXORXKORO", "KRKOOXROXJYJYLORROXOXRBRXJXMYLYA", "LOTBRRORBTBLYJAXAXJAJYAJXAJXLMLYLB", "LTBRROBROXRKXOLTBLTBLXJXJROROKRXRX", "KRXKRXORJXMBTBLYLYJYAJYLBRO", "AJAYXXXRKORXXMXLBTMTBRXLTLOTOXA", "XXJAJRKOKRORORJAXAYMXJRJY", "RJAXMYLBTBTBMYXMBMXYXRJXJROKORORXX", "KOKXLXOTBTMXROXOXLBLTMBTOBR", "MXYMYMXXOOTLTBLBMLBROXAJYMYAXRJRJA", "TMXYXLBLMLMXJXOXLYJXRXROOXKXLXJXXRBOORKXOR", "BLXOBROXAYLXYXRXOBLXLYAXYXMBTBRXJ", "RBOXRXKOOTOROROXYLXLYXJYMBMTLBMBMTBMLTM", "TBMLTBLBLXORJXOXLBLXXRKOOLXMLOO", "XRKXOTMXAJXOBLBTLTMTORXRXRXRORORJYJXOLX", "OLBLBLXAXJRORXOOORROBROTLBLXXROORXOXJXA", "TOXLBLBMLMXLXXXJROKXOTLBLYXMTMBMTMXYLX", "YMBLTBRXKXORJXAYAYJXRXKORXRXOXLBRBT", "ROOXYAYMTMBLTMTOLBTMLTMLXOOLXMBMYMXOXJXO", "XRKXROROLOLXXROLXOORJXXRRBOT", "LMXYXXLMTORBRBRBRBOXOROXAXXKOXRXL", "XROTMYLXLBRRROBLXAXORBTBTOXXJAJRJROKRXMXL", "RXXRXJXOROKRXRKRXJYAJAJAJAXJ", "AYMYMTBMXMXOOOXXRRRBOBRROORK", "OXKXXAJXLYAXYXRJYMYXOOROXXAXAJXOR", "KRXYXLBLOOXROXRKXXXKXJAJXRXXAYLTMX", "RRXRJXOXOXLYXAXOXMBMYLBTLTMLBLMYJ"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 30443417;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> grid = {"TYTN", "IRMW", "TBRQ", "VYUD"};
    vector<string> words = {"NWMBITYRYMRYTITVYVYVYVYUYURDQDQRB", "BRMWQUDUDQRRRRYRITYTITITIT", "TYIRYRTIYMQUBYTRTYTITIBMRRYBVBVBITIBR", "TNMYTITYTNMQMBMRTNTRRRTRTITRYTNMNWQ", "TIYMTWRRMRUYRDQWRQMNMTRTRIYTYTYTNTW", "TYTRITYTNMNMRMRWQURBVBVYTVTYTYBVBIYR", "YIBIBYRBRBRTRYMRYTITRYRTRTRTMRMYTYRMRR", "YRTNTYMNTRMBRTNMYMQRMQWNMQWQUQUBITYT", "YMRTVBMNMWTMRURRTNMWNTYMQUDRQRWQUYUB", "YRQWRRMWNMTMBYBTITYUQUDQMWQRBRMRQMRURD", "RDQRMQDUBURQRWNWRUQMTRTYTBYRQDUDRUYVB", "QRMTNMQMNTRYRYTIYRTNTYTMQRQDQRUQDQ", "DQMTMBMRTYRDRDQDUBMQUDUDUYT", "TIBRUQRRBUQWTWTWMYTMTYTYTYRMTRYTRRDR", "TRRRTRBRUBYVTBRDRUDRUDQUYRQUDRBVTY", "QMTYTWTRBVBRUYVTBRYTMYIBRQRQUBYBTY", "DRQMYIBTIYIBVBVYRMWQRDUDUQWTYMQRQWM", "UDRWRBIBYBTBRYTYITIYTRYTYTIBMQWQRWN", "WQDRUQDQURWQMTRBRRDRWRDQWRWNTMRYUD", "YVYTVBUQUBRTITYVTYVBIRBYVBUBRB", "TYRYVBRBVBYRMNMBYVTYVBYTBRYRRMTY", "YBVBIBRRDQDRBTRIBTYRMWNWRDRBVTRMWRYURY", "IRIRTVYBRMRRBMNMRITRTRYRTWT", "VTVTRMQWMRTRITVYBTYRMNMTMRBR", "YRURMNWRYTYVYURBVYVBTBVBITV", "TRTRRUYVBUBMYMQWQMNTRRMYRRDURYV", "BRBYVTIRMRRUDQDQWQMQUBMNWNMWNTRTIY", "MRUQWMWTWTMTNMRMBYVYBYRDQMTYTWTNTRTYB", "TBYBUQWNMWMQRMQWRQWQRYTITRYRTRYTMNWNW", "NTRBYBTYBRWTYTITRTYBIBVBMRDQDRUDRU", "TRBMBMNMTRMWRBVYUBVYVBVYRRTRMBMBMRTYRYRTRM", "QMRBIBYRYTVYRRMNMBUBYTRITYITVTBIRMRIBT", "UYVYBRQRDRMRTYBUDUYBRMRTYMRIRTN", "UBIYRYTMTYITYMWMWNWQDURDRRITVYBMYMTMYM", "NMRDQDRWTRRBMRYMRWTRIYTMRDUBRMTWQU", "TRTWNWRRRUDRQWNMRUDUBRYITRBRYTVTRMYI", "TMBUDQWMBRDUQMQMWRYTBTIBIRITRTYTYBYRDRWQ", "RTVTVTVTRTRMYRTNWTWQURBRBUDQMWRYUYV", "YTMQWQUYRWMRIBYRWRRRMNMRITIT", "NMWTRTRBTITVYRDURMNTRTMQRYVTRMRBRYBV", "TIRTBMYMRTRRDQUDUYRUQWTYMRQWRUDQDRBURY", "YUYTYUBIRRQDQURQDRYUQMYMRUQRYUDUDRBMBIBT", "TYRTRTIBMQWNMRTYTYMRTWMYTRRWMRRUYBMWNW", "BTBIRITVBYBUBURMRTMQRYRDQRUQUBVYRDRYT", "VYUQDUQUYRUYURUYUDQDRQWRDQDU", "NMNTMRDRUDUQRWNTYTYRTBUQURQRYRBRBMQ", "URWMNTRBVBRWQUDUQUBRRURWTMRUQWQMBTY", "YTRYMWQMBUQMTWQDUDURBYRRTRTRYTRBVTBYVYTRYR", "WQMBRYITIYITBYTIYMQUYRMBURRTITR", "DURBRRIRTVBUQRQDUYVYUYBUYRUBIYR"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 3232492;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> grid = {"GFBQ", "HEGG", "ISBB", "LVII"};
    vector<string> words = {"IVBSISHSIIIVLVSEGHGHESILSIIIBVLVBBII", "FBGQBEGFGBIBIVLISHGHEBEBVIVIVLVILV", "GBGGGBEGHSHFGBGBISIESHEGFGEFHIHG", "BQGBFGGBFGSGFGBEGEIHSHSIIBGBEBGBVBGGBIB", "IBBIBIBGSHGFBFGEGFEBFHGEFBEGQBGBGBIBGGBG", "IIBGFBEGGBIISEGFHEGBGQBQGF", "GBSHGFGGBEIHFHEIHIHIESVBSIVLSLILI", "SLILILVBIBBIBEHFGEBFEHILSI", "EBBGBIIIIVIHEIVIBVIIBSBGFGEGFBE", "HFEHGEGBGGBBSISVIVISGQBFEBFEIHEFBGQGSIB", "EBVBIIBSLILISISGBQGBGQGBGGBBBBGEILSHG", "BVIIBGQGBSVIEBFGFEGQBQGBGGQGBISGSLVBSHSIV", "BGBGQGSGBVIBIIVBBBGFEFEGBBGQBGQBGGBGBG", "SIBGFBQGBBBIBIIBEFHFGEILISE", "GFEHILIEIEHGFBFBGEFEHSVLIHSLILSLI", "GEGSGBBIIBGFBGGBEBQGFBGBIIVIVILVLIVII", "VLSVIHSHEIVBGGBQGBVILVBGBGQBQGEGHG", "GBISVSBIISVBGBESIBBEILVISBSGFEBEGBSIEILS", "FEBSISESGBIBSIBIBSVLVBBBIBGBGQGGQGBSH", "LSGFEHFEHISESHESVSILVBGBQBGBIBBSGSIVII", "EBGQGBIBGBGBGBFBQGFEHEHGEIVI", "SBIBGBBGGSIIIIBBGEIEGBGQGQGBGBGBI", "QBGGBGGGBIVBBIBSGQGBGBGBISEBSLSEBGBIBI", "LSBIIBIIBIBISBSLVILSVLSLISBGBQGG", "IHSLILSIBGQBGBQGFHFHEGFBGSLSEGB", "HEFBFGBFGHISIBEBQBGQGFEHIVL", "SVIBEFEFBFGSEBFGEHGEBGGBIBGBGBSHG", "QGQGEHFGEBFGHIESGEBQGBIBIBIIBVBIB", "GEILSGBVSISGEGFGEILSLVIIIBVBIIIIISLIE", "IVLSEGEHGEGFBGBGEGHEFEGFGBBSVBGBGBGBGB", "GFBFHFGSEGFHGEIEGBGGGEBGBVIVIL", "BGSBIVIIBIVISBGGQGEGEFBGBIISISHSIE", "LIEIHEBVLVIESIESGESHEGFGEFEILVIVIVI", "GHSGFEGBGQGSIVBGBGQBGBBBSIVSVLI", "QGQGBEHGFGBIIVIBBGEBVIBGEBIBEIHGFBF", "HGFGHIVIEBFEFBEHFBGGBGBVSBGBVLVIBSG", "BQGBGBBEFBFEBISVBGGSHGHFGSVIBIBIB", "IEBGBIBGBBGEGGGBGGSHIVBSVLSGQGFBQBQGBIIBBI", "GFGHEBFBEHEBEHEIHGFGEBGBGGFBGGBVIL", "GFGQGQGQGGSGFHESBSILIHFEBGBBGBGFEFHI", "GEBSVSHIHFBEGFBEBGBGBIIBEFEGSIVLSVL", "BBEGFGHFBEBGBIBBVLVLVIEGFGE", "BIVLSGBGQGFBGBGBIIIBIBI", "SGSIHIEGFGGBSGQBQBEBQGBBBBVBISHFGG", "GBVIBBIIBIIBBBEIHIESIEIHILSBEFGHG", "BISEBQGBQGBIIIBBSIHFEGBFBFGHGFBGF", "VIEGEIHFBFHGHIEBFBGQBFGEGBS", "VISBGBGBGBIIBGBGSVISISISIHEBQGG", "GFGQGSIESGGBFHGEBFEHSEGSGGQGBFEIEGFHGH", "GHEBGBEGQBGBVBBGQGQGQGQBEBFGQB"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1639561980;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> grid = {"UECN", "JJZT", "CBLU", "CEAS"};
    vector<string> words = {"ZTUZLBECCEBZUAELTZEUJEJCELECCCBCJJJ", "ECCEAUAEALUTZTULJLJCNCTCZJ", "ZCEJEJEJUEJCJECNCECJUJUJBJCCCJZNZBCEL", "ZCNZTZLJCTLJUJCJJJCBEBJLTZJBCECBCBZLBJE", "BCBCBJEUJCCBLTUASLAECJCNCEZNC", "ECECCELSLTLJJEUEJCCBCJBLEABL", "CJEZEJCBCJJBCCJJZEZNZCNCTCTUTNZE", "UTCEZTLJLBCCCBZBJCBASLBCCCECJEJEUJ", "CZNCEUJCBZCNTNZNTCJCBCCECCJ", "BECCBJUJBZCZECJCJCELEALEBZTULSULTUSAL", "BJECJZJUJBLELZUASLZCNCJZLJJJEZLULABE", "CZNZCECNZJUEUECNTLSUAEAEBLTZJLBCB", "UTNCZEUJCJUJUJLZCZBCBASLECBEAECEASU", "ASLECELALJEJBASUTUTCEZLZTNZBCJZUSA", "ECEBJLJUJZBCBJUJJBCBLBEBAECEASLSALSLZT", "EJCCCELJBABCBJECNTUAUALEAELSAEBAELTZCZE", "TNZJEUEJECTLZCZULTLZBJCJJLTLTZLTCZLZLS", "CJZEJEJUJBJCCCCECEBECECECJLALSLBC", "EJEZLELJLTUSABJZTLSUSASASUSLZLZJZ", "CZCZJUEZNZBLJBLUZCNTLBCBEBLJCZ", "CZBZNTLJJECNCZTLSAECBAELUTCZBLEABJ", "SABCCCBLJLTCZNCEJLJEJBJECTNTUTUSUZULA", "JECTUAULBJLAECELABCCCBLSUTUSLS", "EZBCCECECBCCCCBCBJBECCJUJCJCJCELABL", "CECBLSLULUTLECEBCJBALBLEBJZEJEJEZLTCJCJJCJZ", "BZUTNCJCTCTZNTUSAELJZUTUSLELAUTUZEJBJEZEZ", "USUSAULUTCTLSLBLBJUJCJCJLUTULUSLJUJUJJJJB", "ZCNCNCJEJUEJBZJUEUJCJJCCEBC", "JCCCCBEBCELEASAEALECBECJBJ", "ZNCNTULZCZUTZEUJBALBABJUEUJCEZUASLEL", "EZCZLUABEBLEBZEUJLECBABLAEBCCJEJECJBJCNZ", "SLZLELELECJEJCJZECEZCEJLZLJJJCECNZULSLZBE", "LSALSLJEJCJCZLSAELASUTCTUAELALJBCECCJJ", "UJBJEJEUECZBCBLJZJCTULTCEUECECT", "JZUZEUEJJCECBJBJCECECBCJLJBZTNCZEU", "LSASAEBLJJUECTNCJCNTNZBCBZEZJB", "JCTCEJEJUJUEJZJUJEZBZBCBJUEJCJZEUJJJ", "CNCZCZJCZBEAULJUJJLJCNCZNCEJJCTCJ", "JCTZEJJBZNTLELZUSULEBZEJLUZNCJLZTZLABJUJB", "CTLABABJBALBCCCBLBCCJBEAECELU", "SLULEALZJBJBEALBCBLAULTLSALELECBZNTCNTU", "ECEBZJCNTNZJZECNZECTZNZNTLBJEJJ", "EJBZNTCTCTNZBECCCEBLSUTCNZJZJBL", "CCELZEJEJCBJZLAECBZCNZJBZCNCZEJJ", "CCJUJBJECZBLBZLTULJCJUJECEZBZL", "UEZLULTUZCTZNCTUSLUSABJUEZLELASLZJ", "UJEJEUJJUJUJCEAELBZEJCJCCEAELSAUA", "CECECJEJCELSAUTZUTNCNCZLABLECEBJEJC", "CBABJCJLZCJEJJBCJCJZJJEJUJBJEZCZLTNTUA", "SUASASUTLAUSLZNTNZTLALBJBCEBC"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6296499;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> grid = {"JGYG", "QMIB", "NEJU", "CNPQ"};
    vector<string> words = {"IGBUJQJIENJIJQJMQGJMYIJQPQJBY", "NPQJUIUIGQEPQJPUBJQUJEPJPNCNNMIG", "EJIYGMJUPJQJMQNQMYMNQGIECEPJQUPECN", "NCNNEJUJPUPUQPNPNCECNJNJQJEQJ", "YGYBJQJMGMJUIJIGJMYGBYBYIECEJMNNJBJIMEJQ", "IBGYMNCEQENCEIBIGYGQGQGIYMYGJGJM", "QPQJPUIMJBYGYBIBGIGYGIMEQNEPEMGIMJPNE", "NECNCECEIUBUPJIEJMENPJBJMJQJ", "ENPQJBJBIMIMNMIYBIYBIECEMEIUQUJMNNJB", "NEMJMIGYGYBUQJEPUQUIJNNNNNEMNCN", "NEMYGIYGJMGMGIGYMGYGMENNNECNEPNPJIEMI", "QPNNNCNEQMEPUBUBGBGYMNMIGIG", "JBJQPUIJBUPUIGYBGYIYMNCNNEQ", "MJQENEQGIBYGMEQEMJQNQMIEPJNCNJIUP", "GIGMEPNNMQGQGIEQJQMQJMIYMJMNN", "ECNNCNNNCNQGIGBJMIYMIJIJNENENNC", "JPQUQJQJQPUPQUJIUPQJBGIEJPNENCNMIGB", "ENEQMJMIEMJQGJMQGJMNQNEMNQMGJGMQ", "EQEIBJQPNNEMNQNCNNCNJPEPEIGYGBJQUIE", "JNCEJMJMEMYBJBUPNEIECNCEMEMIJQUIEIB", "IUPQPQUPUBUIEPUJQUQUPUPEMENENNMIME", "NJUPNCECEPUBJPENJEPJUQJEMIGYIBJBIG", "IMENNJBIGJGMIUIGYGIMNNNCNNQJG", "IENPECEPQJQJQJMNMQNEPNPUPQUJUPUBI", "JMIEJEPUJNPQUIGYIGMEMGMYMJBGYIGYG", "GIYGYMJQGMGMYGMJGJQECNEMIBGBIGM", "QGIEJIGYGYMGQNEJEIJEMYGIGIYBYGIUJIEJQJIEJNN", "QPUPQJIGBGYBIMGMGQMIGYGYMJQNENEMJMNMN", "UJBJIGBUJUBYGYGIEJMYGQEIJPEIJQUIMJMQEQJ", "ENCNCNENECNQNCNNCENNCEIGY", "QGIUPJUJMQEMECNCNEIUQPECEJMGYIG", "MNCEIJUPEIGYIGQMQMJNJQPUPQUQ", "UQUQUQPUBGBJQJEIGYMJNPNEQNCN", "UBYMENMENMEJNEJEIUPJQJUQJPNNMIUBYGI", "IGIYGIBIGYBUIGIYGBJMJMNQNENEMJGQMG", "BJUPJUBJPNEMJQMEJEPJBYGJMQMJQUJMJQUPE", "YMGMJQEQGJGJMYGIYMYMQMEMGIYMQMIMYGMGIYGB", "NPUQPNJBGBGYBUBJIGIENNCNCNMJ", "EJUPJIUQPUPEPUJMJGMJMEJPUQPEPJQ", "QJUPQPUBGYMYGIEPJUI", "JIJBUQPUQUBIGQNECENEPEIEPJQJPJBIB", "GIBUJQUBGIJIYBIUBGIUJPEPJEMNNEPUJIG", "IJMGYMNNJPJMQMEIMIBUBGIGYIUBYMJQMENNPNJBUI", "PEQNMJQNNJUBYMIMQGYGBJBJBIGYGYIYBUIUPJ", "YMJPQPJNNQGYIJBJBGBJMGIGYGBIUIYBG", "EJNEQEQJGIUPEIGQJQMIMJMJQGIBJUBUBG", "JBJQUPNNCNEIMJBIECECEIMNEQGIENCNNJBJENMJM", "GYBGYBGIJUQUIJBGYBGYMQEJEPU", "IYIGIEIBYGIUIJMYIBUBJUJNNEPQPUJBIMJ", "ECEPQUBYGYMQEIEMNMGYBUBGBUJENQNNNCNENEP"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 531023;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> grid = {"XFUZ", "HKEB", "NVVR", "IOND"};
    vector<string> words = {"VNIONHFEBZUEZUFEFKHKXHVEUFEBUZU", "XHVHKFHXKFKVNONRDRNOVEBEBUFXFEUBZ", "HXFKHVNHNHFKHNVNONOVHFHNKVEZUKXKNHNKUZ", "RDRNVNIVNOVNIVNOVHNKNVKUFEVEFEVBR", "FUBRBEUFKHNONRVBRNDVOVKXKU", "OIVHFEVONVDVDREKXHXKXKVKUEFXKERNVRVK", "ZUEVOVKUBUEKXKVNVBZBVRERBVBZUEUZBZUERVVVNON", "ONONHFEKXFUZUEUKEZUEFXKFUBUEF", "VNREBUZUBVDVONINKERBEUFHXFUBZUF", "ZUBVNDVVKUKUEZUKFUEVONVEUEFUEVOVEFXF", "DNOVVONVNDRDNOVBZEVINVHKFKXHKHKVKVIOINV", "FXKXKHVVEVVNHNHNKNINOVBERBZBRVBEVO", "FHFKFEFHXKUKEBVVNRNREVERVDRBEBVKNKU", "FXKFXHKXKVNOVOVERBZUFHVIOIVNVON", "XHVNDNOIOVHNIVHFKUBZBVKXHX", "NOVEZBUEUBUBVBEUEVHNVINIONKXKXK", "DRBEKHVNDRBUZEFUZBVNDNREVKFKEVBUFEFHF", "ONDNVKNKXFKXKHVINKEBREBRDNVVONIONRBRDRDNR", "ERBEFUFXHVEVNOVEVNRBERBUFHNOVVEVNVNRBVOVKV", "INKHVINHVNONVOVEFEKUFUFXKVONVREK", "HKXFXFKFEZEFKFHNKHFHFXFXKFXFXKNINO", "FHVVNVKNKVIONOIOVNONOVKEVNDRBV", "IOVVBUFEZBZBVDREZBEVVNVBRVKVKHNKHFXHVN", "FEVKFXKUZUBEZUBEZEVEKVKVEFHXHNKUBUZEFXHF", "UBZBUZEUZBZEKEKVRDNVEZBZERNRVVHKXKVKF", "HNIOVDRBVDNVEZEBZUZEZEZEFHFKFXK", "OIONVINKNVVKHNVIVNVNOVONDVDNDREVOVKXKHFE", "VEKFHXKVNIONINHXHXKEVVVIONKHKXKUEBEZ", "BUBEUEVKEREUZERBUKUBRNVBZUBUKUFX", "INIOINIVHFUBUBEFUKVVNVBVNVVOVRDNR", "DRNOIVEFXFXKFKXKFKVHVVRNRDVOIOVEZ", "ZBERNVNIOVRNVNVOIONVIVHNVNH", "INIOVDVKUEFXHVINIOIVINHVHXFK", "VEVIVOVKVEFXHFUEFXHVVRDNVRNOVONI", "XKXKNINHFKEBUBZBZUZBRDNDNRND", "VBZEKNINKNIOVERVVNHXFHXHNOINKEUKHNI", "VONHNVKVRVEVNVIONVBZBRNREFUKVBEZEVVIV", "RNDVRVKFXFUEREZEBRVKVVEVRVDVEKHXHFHFKNOVKVV", "XKNHXHFUFXHVOVVKVOVEUFKNHVERBRDN", "NDVDNVNKXHNVIVKNKVVDVRD", "NHVNVNIVKHKNINIVIVIOIVKUZEVRB", "DRBRDRNDVOIVIVVOVRNDNVNDNVHX", "KEBVVNVEUEVONDRNRNRBZUKVKXHXKEUEKVEKV", "NVHNVVVNINHVVNRNVNVIOVNVNRNDNRDRVKH", "BVDNDNVIVNKHKVEREUFXHNIONONKU", "ONVNREUKUFKFKFUZEVINVHXHFKEVBVBEBERV", "REVKVKFKXKVHXFXHXHVNVEFKEKERVVHXHFKVVNIN", "KNHVINIVKFHKEREBVDVBEVONKVIVNVEVNDNV", "DRNONDVONKUFKEKUKVVKVEZEVEFHXFUKEKUK", "NOINHFXHNIOIVOIVHXHFEKUKEFKVBZEFUFXHXF"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1583294;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> grid = {"RSFG", "FCEG", "XFUX", "YONM"};
    vector<string> words = {"YFUFFFUCSFRSFCFCXCFESEXEUCUNMXECFGUFNX", "CECFRFXOUXNMXEUGECRCSESRSFGGUONXUFUOXFFFEGGEX", "FSFSRCSFSFGEGEXGGEGEUGFEUCFNFUFON", "GFEXGUMXNOXFOFEGESRCSFGEUGGFGECF", "GGEUOXFCFFFEGGEGFCSFFFCFOXCRCXYXOYONUN", "GEFGFCESFCFCFFFUXMXGGEFOUCUGFSRCSEG", "ESEFEFGXEGEFFFFRSEFYOXYONFEGECF", "XUNUCRCRSCSFFFFEGESESFRSRSFSEGEGF", "MNMUCXYOUFXFRSFGEGGEFFRCUMXESFFXYONU", "FXYXFRSEFXYFYXFCUGXEXGXEGGEUGX", "OFCFNXGGFESFSEGEUOYXFFCRCRFRCXONFX", "FRCEXNMUOUFYXYOUXUCSEXGGEFYONUNUFUMNUCXF", "CFEXGUNMXUGEUMNUEFESECFSCSFESFRCFGG", "OXYXCRCFEGUCRSCSESRCSEFGEFCSFCXFFRFS", "SRCFEXMUFXOUCRSRFRFXFSFSCRCRFCFGFGF", "CFRSRFRFRCFXFNXNFXFCXYOUXUFOXO", "SCRSRSRCFGGEUCSCUGEXEFOFYONFXOX", "XUMNXGEUXMXNUEFXYFFXOUFNXEGFGGEXNXM", "CFSFXFXFFFFOXFFUOUOFESFECXFSFG", "SCEFNUCFCSFCUEGGGFGGGGUCRFFFSCUCEXMNO", "MUXMXEUFNUXUCRSCEGGEGGFESFCXOUEGEF", "YOUCFXFFCXFOUXUOXYXCFCFXOFFXOXCFNXNFX", "NMUCFEUFOXFXCFCRCXCFCFCXFEXEFXCUEUCF", "SFCEFUNXMNONXNMNOYXOFUOXFXYXCS", "YOUNMXMNUGFEXNXUECFFCXFFCSCUXUG", "UGGEGUXUOFFCXFSFSRSRCFXFSEUM", "FCFXYFXFXFCXFCRSRCXFFEUMNUECFCXFCSC", "GEGGXUNUMXMUEXMXECUGUCRSECRFSFGGGF", "UOUEFCFOYXFSFSCFFUFESRCFSFGGXNMNUFYX", "GESCXOUOFUCRCFCECUFONXUXMUFEFGEUCFRCUX", "ECRSRSEUMUGUCFCSFCFGGUMNXEFSRFCRSE", "RCFFRCSRSECFEGEXUOYFNMNOUECUMUFFSFC", "OXONONUNOFFRFSFCXYOUXGEGEXN", "XFFSRFFFXYONMUFOFCSRSFXFRFC", "RSCECFXFOYFEGEFCEGFCRSRSCFCEXUOFUGX", "SFCRFFXFCXOYOXYXFXFXFCRFSFEFY", "XOYXFNMUMUCUGUESFXONFCRCFUCESRSCXFXOFCXO", "SRCEGUFFRSRFXFFXCFXOUMXECSCSEGEGEUX", "XYOYFOUNUFEFCSFRCSCFEXGXNXMNXESR", "GEUXMUOFOYFYXYXFXFEFOYOYOFXFFOXYFEFGUFEU", "NUECRCFEGEFUGXNXGGFGFEGEFGUGUMNUFNFXC", "EGGFGGXGGGFGUGUNXUOUXGUECFEFCFECFONMNX", "EGXNXNMNUXGEUCUEFGXGXMXNONXMXNXNUFXO", "EFCUEGGGGXNUNFUOXOUEXGGEFFFYFXOYF", "XEGXUMNMNFYXCFXFSRSFSRFFEXGXEXN", "ESFGEGGGGGEGUNOYFUFNFEFXOFUXGXMXN", "FRSCFCRSEFXOYOXYFNMUGXNFECFFNXECF", "FCUCFXFNFUGECRCEFOUOXYFCSRFSEXNFYFCUEUECF", "YXYFEXEFXOFCSFCEFNOFYOXONXNXUOYXF", "EFUOXYOYOUNOYFNOXYXONUOFOUOFEGFGF"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1511730;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> grid = {"XSZN", "JDEN", "TIUJ", "QWEP"};
    vector<string> words = {"WTDJITWQTQTDTDSDXJDESZENNJEIU", "TQWQWEJNUNZEZESEJENJNNZDSDZNNN", "IUNZNUDTWTIWITITDTDTJXJIJDJXSE", "EPUIENZNUJENNUEZDENZSXDTWUIJSENNZ", "DJIENNEUWTQTJXSJIUJPUITQWUWUNJNZE", "DXJTIWQIWTIWEIWEWEPEJUEDUDZNNEUPEPU", "JUEJEITDIWTDZDIWUIWQWQIJIDJTWIWQWEIUPJ", "QTWUEPUWQTJIEPUEZNZEDITITJDZDUWQ", "JTIQWEWQWIUIWQTIQTIQWTJTQIDESXJIEUEP", "DUPEJUJNNNENUJEJUIUNNNZNZS", "EZDJIUITWEUIWEWEIUDSZNNJEJENJPUDZSXJSE", "TWTDXSXSZDEZDXSDJXSENZNZNZEJUWUEIE", "ZDIUJEDSJDJDSDUEJUPEIWUNEUWITWTJSZNNUWT", "WUWUDIQWQTIUNNNZEZSXDTDEZSDSXDUWQ", "XSJITJTJIJDEZNEZNZEJEIJXJTIEIEZDIEUEJEP", "XDENZDZNEDXSEZNZDSDTJTQIDEZESJIEIQ", "NNJPJNEUEIJXJSZDUPJENNJESXSDUW", "NZNNNZSZNEZEIJIDSZSXJTQTITQWQWUJU", "QWITJTQWEPUWQWUDJXDSXDZDED", "EJNEUEZSZNUEIUJEPJNZSEUWIQWTDTJXJT", "QTQWQTDJTWEIEPUPJUWEPEITWIEJPUEJP", "NUWUENUPUWUPEIUDXJDIDJDZDUIJDEJEIEPJ", "XJIJXSZEZENUEPJUIQIEIJDZD", "SJSDJSJSXSENUEIEUJPUDJIDIEZNNZDIESEN", "UEWQWUJEPUDTIENEJENZNEDUIEWUNJPUENESX", "NJNJNZNNZNZSXDTQIEIDSXDXSZEN", "EWTJTQIWIUIQWTQIWTWEJNEIWIT", "EDXDSZDSJXDUWEUEUPJNZEJNNZSJTD", "SENZNEZENEUNNNUPUNEDJXJTWEPUIWEPJ", "ENZSDTWTJDTQWQTWQWEPJNZDXDJITDIDTQ", "JNEZSXDJSZSEDSDIUIEJEIEIWTJSEZEUESX", "UJPUPUDUIEJNUNEDZDTIQTWTDIDZNZENJEI", "ZSJSZNZDJIQIEZDXDZDZESJIWEWT", "QWTDEIJDTITQWQIWQIQTQWUDSENZDUDUJE", "WTWUJPEIQWQIDUPUEIQIDIQIDX", "IWQIEPEUIQIQTWUIDIQIUWQWQTIDJTQ", "JTQTDJITDZNEJPJNJEIEPEPEUDSEUIUN", "IEJUEZDSZSDXDXDEUENNUWTQWTQWIT", "JDUDUDTQIWTQWQTIQIQTQTQW", "NEJNUITIWUJPUIDXSZNNNZNUNZDXSZNN", "JEIWIEUIDTWTJIJIJIQTDXJXJXDSJITWQT", "WEUIDUDXJTDTIJXSDEZNJEIEIQWIEJENE", "ESENEJNUEDEJPJEIJXDTJDESJSDJXSZNENNEDXJS", "SEZDTDIEUEPJEJENZDXDXJTIWIWQIUWTDTQWTWT", "SDZSJDZSDSEJPJENNZNZNZNEZESZNJUJE", "DTITWEPJPUPJNNNNZDXJTJSZEJUJNN", "SJTWIEIEUESXSJTDTQTQIEITIQITWTJTJT", "XJTWQIJSEUNZNZDTJIDSJITQWTQWUJUEIUEZEJE", "JSZSEJUEDUWUEJNESDEUPJPUIUJPJEDJTDX", "NNJNUPUENUIJSJSJSXSDJDSZDZSDJSJIQIUE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 448231;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> grid = {"CXEU", "KBYG", "FMJY", "GIFR"};
    vector<string> words = {"JYRYGYEXBCBYBCKXKXYYGEYUGYR", "GYFIMBEYYGYJYXEUYYFMFYFJFRYF", "EXBXEUEYUEYJYGYYUYUGUYBKMGMIMIFMFKCK", "UYUGYJRFMBJBMJYYYJIGMBYBFKXEXEYUGEU", "JYYXEUGYUEUGYRJBCXKBYUYUEBFMJMKMIG", "RFMKFMFMFJFMBMIGFIGFIFGFMIMJMKFMYYYXEYMF", "KFGMFYGJIMFIGMJGYBFBXKMYXYUYXBFKFGF", "CKBCXYBYXYEBEYYGEUGYUGUGYMJMFRJIFYGJF", "YBMBYJFIGIFBYXCBJBKXYXCBKXBEGJFMFJRJBXBF", "GMBJGJYJYXBFGFBYUYYYYFYGUEBKCKFGMYEUY", "MFBFIJGYUEUGUEBCBCXCKCBKCBJYGYRYY", "IJMKBYUEUEBCKXKXYYFMYYRYRYGJIFIJ", "GFGFKMGFIJGUEGEGUEBKXYUGEB", "YYFMGMFBMKFMBJYJYYJYFJIFIGIMIMJMGIMYXYXBXEUY", "FMKBMFBYMFIMBXYMKXKBFMYYGEXKFMFYRJGU", "YYFRYGUEXBFBXYMGFBEGEXEBEGJFJIMIMY", "MGIGFIJRYRJIFIFMBCBKBCBMJIJYJIMJYJYXE", "GYEUEGEUGYBXKCKBFMKMJFYFYRFRFMIMJG", "YJIMYGYJBJBFMKBCXKMGFBXKXYUYXBK", "YGYJBCBKFGMFKCXYJYYGYGJIMIJFRJYJYUGYMY", "RYFYYYRFYYMBMGFKMGIJFRYFMGFGI", "MFKBXKCBEBCXBJBKCBCKFKFBYXYYYU", "MKXYGUGYFMBEGEXEGYUGYGYFYGUGYGJMF", "YUYMIGMBKXKFIJBFIFYRYFYFRJFMIFBEGJYUG", "JGUEBXBEUGYYJBMYJGEXCKXYGYMIMJYGYUEBYMBYMK", "FIMKBFIFKMFJYGEUEYJGYGYRFMYJIJMYEGY", "GYRYRYYUGYFMFIMIFIGIJGEXYEBKCBMIFIF", "KBCXCKXKXEGYJYJMGFIMJGYMIMFYYYFMGIF", "RJIJBXYUYUEXYJYGJRFYJRYJMGIFMFIFIJIFG", "CBJMBFIMBMKXBKMJIFBMIFMFIJYGJMBXCXKMFGI", "RFIMIGMGFBXEYJBKCXCXKXYBCKCBCKXEG", "RJRYGYUYYYXYEYEYEBXCKXCKXYEYUYGJRYRYGE", "BJGJRYRYRJMGIMJIGMGIFIGMFMJFIJRJYGYYEB", "FMFKCBFIFBKXEXCKBCKXYUYEUEGJR", "GUYJIMFBCKMBJYFYYMBCXBEGJMKXC", "CBFIFJYYXBXBJMJBKBXYGJRJBMGFMGMFMKMGIJG", "UYMJFMGMYBYMKCBEBKMFIFRFMGFBCXKM", "XCXEUYEGYGEUEBCKFMJYJIGIJYGUGYBC", "IJMFKXCBFIFIGMFYYMIFIGFG", "FIJIMKXCBFIGIFIFJRFMIFRJGU", "XKFKBFMFGFMKBMIFRJBKFGFBKFKBFKMG", "KCKXEGYJGEUYUGYEBXYXYBKMIJRFYFIMI", "EXBFIGFBYJMJIMYMJFYYBMBYEYMYJFYJYJRJYX", "FGFKFGIFGFKXKMIMFBCBMJYXEGUGYJYJFMJM", "KBYUGEXBJBXYUYBKBFGFGMIFIFMFR", "GIJYRJGEXBYBEXCXKBJIFMBEGYFIFMFGFKXYX", "KMGIFBMBJYGJMJRYFJYXYJYBMBYYFMYJMKMBKMBKBEB", "JRFRYYYYEUGJIFRFIJMJBEGYJGJYJ", "GJRYGUGJGYRFIGMJIMJFJYJRFIJIFGFI", "RFMGFKXCKMFYYUYYJGYXCKMYBM"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 294684;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> grid = {"UMBZ", "BCIE", "RVQZ", "IYFN"};
    vector<string> words = {"MBEQEQFVCRYFZQFVRBUMBMCVCMIZIVIYIVY", "MBIZEQFZEZIEZBEIZBMCVFVRBMUBU", "ZNQCVFZQEBEQCIEIVFVIYQNFZIZQIEZEBMUB", "FYFZFQIEZBEBMBEIQFNQNFYQZFQFYQC", "FYVQFQZFQZIBCMUBUBVRYFZICQFVBCIZIVYVCVI", "IBCMBMIEZIZQZEIEQIEIBEQIQYQIMUCRBUBUM", "IYQIVIRYFNFNFNFQVRYIRCRIRIYVBVRB", "RBUMIVICBCBCUMUCBUMIZICQCUCBRBRYR", "NQZQEZIZFVYFQNFZIBMBVCRCIZI", "ZIZNZNZFZFZICQNQEBIVFQCMIVFVRVFNQNZIEIC", "BIEZIMBCIZIZFVRIVBRIRVFQNFQIQCUBRCVIV", "ZFZFYQEIQCRIVBCBMBEBZEIBZIQCBIEZ", "VBVYVFZQVCBMBVCUMUCRBCICUBCQVBRCBVICBMU", "ZEBIEZEBEZEBZIZIMBMBCBCBUM", "ZIZBZBICBCMUMCIZEZBEZBZBEQYRBRY", "YQFZFQVBMBUMBVFQVFVIZEIZEQZQEIQNFYIY", "QEQYIRCRIRCBZBMUMUCIZNFVRVIVI", "IYVFNZFZEZEZEZNQZEQNZEZNFVIZEIVY", "IYRCBIZNFNFNZFVQIQZNQIZIBMBM", "NZNFNZICBUBVCMCIVIRIVIMUBCRVQFNFV", "YFNFVYFYVYVIEQFYRVIZEZBIQZQEZQEI", "FNQEZFZFYFVIYRBRIYIRVYQZEZNZEQVI", "MBEQIBCBCMBVBMBCRYFNQZEZBCIVIVRVFVRYVIZ", "NFZIEZEIQVFQYVFNFVIEQFQIZEZIZNQVIZEQN", "IRVBCQFNFNQEBMBVIMCUCRCBCQYFVCBIMBUMB", "RIYQNFYIRBRBRVYVCRVYQEZQYIRCBMUCB", "IVRIYIYQCRYFNFVCBMCBZEBZIBMCBMCMBC", "MUMCBCVBMBIBCRBVIQZIZEZBEQEBMCRCQFVFYR", "QFNZNZNZFZEZFVCUMBICBZBM", "CMIQCUCUCQCQYVBUBVIZEZQCBZBEZEZNQEBZ", "RVQIBIBMIZIQZNFVQVFZFQZIQFQN", "VBUBUBMBCRVRYQFQFQIBMUBCRIRBVYRCUCQE", "EZQZEQYIRIVIYIYIVIYRYIRYQZEBMBZIZIZI", "BZBEZEBCVIYQIQEZFNFYIRCQNQNZ", "UMCRIVRYIRVBRBUMUCBCMCMBMBCUB", "RIRBRYFQIQCVQNQYRVFVQNZNQVIYQYIYVCBZE", "BZBZBMUCRVFQCBCRYIRBUMCBCIM", "VCBZBEZFZNFZQFNZFVIZFQFQCUCRCMBMBCB", "VYVCMBMBIEZEBCBZEIMIQNZIZIQIZIMBRIRIYFVRB", "BZIZIQIMBCVRBCQZQEICVCBCMCUBVQNQEZEZE", "UBRYIYIVRBVBRVYRIYVRCMUCBMBMCVFVQ", "VQYRVIYRVBMUMBMBCRBRBMIQCVBCIZEQFYVCB", "FVCICIZIQVBUBVIQZQCIQYVQIMUBMCMUBRYIR", "VIVFVFVBRYRBCRBUBRCBCVIVIVYIYFYVCIZIMC", "UMBUCIQZQVYVFQCQIBIMCQNQFZEICQCRYFNF", "ZBCVIYRYVYRBCBIVQNZEQCBRYQVYR", "YVIYQIQVQYRBMBRIYFQIZQEZQVFNFVYQZNZN", "EIZBCBRIVBCBMBZEQNFNZQEQVQNZEI", "UMCRVBUMCUMBMCUBUBUMUMBM", "ZIZEQNZFNFNZIVBCRCUMBMIEQVBCBV"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 468908;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> grid = {"VIHK", "UMBR", "NVOT", "MIYF"};
    vector<string> words = {"NIOMBMVUMIVMVBMVIBMVMIOIMIOBHKHIVIVMU", "BKBVIVYFOTYTOMNMVBRKBHKBIMBVBIMHIVUVUMOF", "FOVIYVUNINMVNUVIVMVIYFYIYVIYFOTOBROVUMIUM", "NMNMINVOBMUVMBKBOYOYFTOYTFYVMVMVMVU", "TOBMOYFTYTBMOFYVMIHIBVMIHKBMBMOTORHKRTOVOTBM", "RTRHMIMHMNMNMBTRKROMUVIMIVIBI", "BVBVBHKHROBVYTYORHKHBKRTRHMOYTRBOIYINUIU", "YTYORBHKHIVUVBIMORHIUIVIBIUNIMIOINU", "NMIMIVBHMVUVMNUNVYOFYFORTRK", "OINVNIYOMHRTYTRKHBKRKBORHMIVUVUVIMN", "MVMNVUIBIHMOTROBMBTOYVIYOVNUIHKBOTRTFOM", "BTRTYTYVMNMHKRTOVUVMNUMHBTBMBMVU", "YFOMIHBOTROFTBIHBOTYFORBRHMHROMUVMBRH", "HRORTFYIOMUMNMHIMOTYFORKRBOIVORBVNU", "IMVOFOFYTBRBMVNVIVOVYVNVNMHIVUVMVBKHKROR", "MVBRHIVUMVUNMIYFYTBHBRKBRHKHBKRKHIHK", "UVOIMNVBVBMORTBKHIMOYFYTORTOTOVYOMUIUM", "MVIVIMINUMBIBVMOMNVMVMVMVUVIVYIVMVM", "TRKHKRKBOFORHIMVIOBHMIUNVOMOVMUMOY", "KHMBIVMBTBVINUVOYVNMNUIBIUNVBTBOROVOROFOYI", "BMVIHIMUNMVUIUIUIVUVBTFTBRKHBTOYT", "VOMORBHIMBOBHIUNVIOFTFORHRKHRHMN", "BKRKROININMVMVUIUMOTYVOIYTOYVUVYVY", "VMBRORKHRBHKHIVIUVBTFYINUNMIMBRTOIYVB", "IUVIYIVNUIHIBHMVUNVYOMHBHRHBHBTOT", "KRTBHMIUVUVMVIVINUNMUVMVMUMHKRKBVM", "KHMVUVMOIYTYTFYIOFTRTFYOBVMNMVOMBVBT", "VIUVUVIHIBVORHRKBHRKROMBMVIMVIB", "VUMBMHRBKRHIHKHKHMUVMOVOBVNUVMHROI", "MIMHRTYOFYVMIHIBTBMVIBVYFTOFOTYVOY", "MVMUNINMOMIMHIHMHBRORKBHIU", "NIMNUIBKBHKBTRHROVOBOTOIYTOVIVYOVMNVBOMHBR", "IMNIVYIOMUVIOFYORHMVMOFOBOF", "OTYTOVMIVYFYVUVMOBORTFOIMIMIYFO", "VOYVMIYFOYVUMVYFYOVMVUIUIHBVNUMNIYFTB", "UIBVNUVMOIMIORKBROVINVMINMVYVBVOMBIMUIH", "HROVNMNMVIVYTBTYFTBMVUVUV", "VOFYIOYFYOVBTRHRKRTOIYTOYVNMVIUMUVI", "MNMNUMIHKBHIMVUVOVORHKRHKHBVNMUIVUVMH", "RKHMHKBKRHKROTBVMIMVUMVMNUVUNMINMUV", "YTFTBOMUVYVOVUNINIOYOFYORHMUNVYIORTBOIVOYF", "INVMNVOBRHKRKBOFTYIYTBKBROFYORBRKHK", "MIBIMNMVUVUNMNVNIVUMUNUNMVMIYFYVMI", "OVUIBVMNMUVUIHMOVMIBIVUIVUIBMBHRBHR", "ORBTYORHMORBMHIHIUVIUVMIYTRTFOIYI", "OIVUNMVIMBMIUVUNIMVMNUMNIMVIVI", "KBOIYTBVUVUVUMUNVNVMIYIMNV", "VUVIMOYIMNUVUVMVNMIHMNVINVUVUVMIOYF", "YTFOMIBTOYFYIMINMIYFTFYOFYINMNINVMN", "NUVMIUVUNIVIMNVOYFOTFYTYIYTYIOBIBTOIVI"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 781846;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> grid = {"TREX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"TREE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5758282696760;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> grid = {"ABCD", "CDAB", "ABCD", "CDAB"};
    vector<string> words = {"ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAC", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAD", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAE", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAF", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAG", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAH", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAI", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAJ", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAK", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAL", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAM", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAN", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAO", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAP", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAQ", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAR", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAS", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAT", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAU", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAV", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAW", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAX", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAY", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAZ", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDAA", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDBB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDCB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDDB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDEB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDFB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDGB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDHB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDIB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDJB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDKB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDLB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDMB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDNB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDOB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDPB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDQB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDRB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDSB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDTB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDUB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDVB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDWB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDXB", "ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDYB"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6680647872500;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4986798321760;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> grid = {"EEEE", "EEEE", "EEEE", "EEEE"};
    vector<string> words = {"EEE", "E", "EE", "EEEE", "EEEEE", "EEEEEE", "EEEEEEE", "EEEEEEEE", "EEEEEEEEE", "EEEEEEEEEE", "EEEEEEEEEEE", "EEEEEEEEEEEE", "EEEEEEEEEEEEE", "EEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEEE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5035968009260;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6582031250000;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4428160000000;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 3271484375000;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 3297539062500;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 2770967000000;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAB", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAC", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAD", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAE", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAF", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAG", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAH", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAI", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXAJ", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBA", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBB", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBC", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBD", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBE", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBF", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBG", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBH", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBI", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXBJ", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCA", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCB", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCC", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCD", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCE", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCF", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCG", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCH", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCI", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXCJ", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDA", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDB", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDC", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDD", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDE", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDF", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDG", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDH", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDI", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDJ", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEA", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEB", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEC", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXED", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEE", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEF", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEG", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEH", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEI", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEJ"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6582031250000;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> grid = {"EEEE", "EEEE", "EEEE", "EEFE"};
    vector<string> words = {"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "EEEEEEEEEFFFFFFFFFFFFFFFFFFFEEEEEEEEEEEEEEEEEEEE", "FEFEFEFEFEFEFEEFEFEEFEFEFEFEFEFEFEFEFEFEFEFEEEEEF", "EFFEFFEFFEFFEFFEFFEFFEFFEFFEFFEFFEFFEFFEFFEFFEFEF", "EEEEEEEEEEEEEEEEFEEEEEEEEEFEEEEEEEEEEEEEFEEEEEEE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6853478912240;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"ERE", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ZZZZ"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 8886718750000;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> grid = {"XXXX", "XXXX", "XXYX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXYXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXYXXXXXXXXXXXYXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5003371081313;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> grid = {"EEEE", "EEEE", "EEEE", "EEEE"};
    vector<string> words = {"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6582031250000;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> grid = {"XXXX", "AABB", "CCDD", "EEFF"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4756400525000;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 3154296875000;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4986798321760;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 9738281250000;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 607808009260;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> grid = {"EEEE", "EEEE", "EEEE", "EEEE"};
    vector<string> words = {"EEEEEEEEEEEEEEEEEEEEEEEEEEE"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 3659179687500;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6582031250000;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"A", "AA", "AAA", "AAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4238281676280;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4986798321760;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"X", "XX", "XXX", "XXXX", "XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 3352656925860;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"A", "AA", "AAA", "AAAAA", "AAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5455003468780;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 6381835937500;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"A", "AA", "AAA", "AAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 2770967004780;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> grid = {"XXXX", "XAAA", "XXBX", "XXXX"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAABAAAAAAAAAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB", "AAAAAAAAACCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ", "A", "B", "C"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 524743868420;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 7907532140700;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> grid = {"XXEY", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXEYE", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXYEE", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5890935501814;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 8496093750000;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"A", "AA", "AAA", "AAAA", "AAAAA", "AAAAAA", "AAAAAAA", "AAAAAAAA", "AAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1805116046760;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 2939453125000;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> grid = {"EYEY", "EYEY", "EYEY", "EYEY"};
    vector<string> words = {"EYEY"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 8704;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 9165039062500;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5075546875000;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5194950462500;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 415039062500;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> grid = {"OSOS", "SOSO", "OSOS", "SOSO"};
    vector<string> words = {"O", "S", "OS", "SO", "OSO", "SOSO", "OSOS", "OSSO", "SOOS"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 14972;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "ABCA"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4195514117500;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 2006835941928;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX", "X", "XXXXX", "XXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1705470096216;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AA", "A", "AAA", "AAAAA", "AAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAA", "AAAAAAA", "AAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5266325256060;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 9794921875000;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAA"};
    vector<string> words = {};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 4488699884260;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"X", "XX", "XXX", "XXXX", "XXXXX", "XXXXXX", "XXXXXXX", "XXXXXXXX", "XXXXXXXXX", "XXXXXXXXXX", "XXXXXXXXXXX", "XXXXXXXXXXXX", "XXXXXXXXXXXXX", "XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5607808009260;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX", "X", "XX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5455253195052;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> grid = {"AAAA", "AAAA", "AAAA", "AAAB"};
    vector<string> words = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "ADASDASDSAD", "DFG", "GRDFS", "GRHFDB", "SAASEW", "JHFDXC", "SACASF", "A", "XCVXCVSDV", "GREHGF", "DSFSXZC", "DSFWEF", "AAAB", "AAAAAAAAAAAB", "YTUHJGFDFG", "XZASDWD"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 9095361172335;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"X", "XX", "XXX", "XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXX", "XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 5240035232680;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> grid = {"XXXX", "XXXX", "XXXX", "XXXX"};
    vector<string> words = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X", "XX", "XXXX", "XXXXXXXXXX"};
    BoggleScore* pObj = new BoggleScore();
    clock_t start = clock();
    long result = pObj->bestScore(grid, words);
    clock_t end = clock();
    delete pObj;
    long expected = 1624873296432;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22682779&rd=10673&pm=4585
********************************************************************************
#include <iostream>
#include <stdio.h>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <math.h>
#include <algorithm>
#include <map>
#include <set>
#include <limits.h>
#include <memory.h>
 
using namespace std;     
 
#define fu(i,a,b)    for ( i = (a); i <= (b); i++)
#define rep(i,a)    for ( i = 0; i < (a); i++)
#define All(a)       (a).begin(),(a).end()
#define Abs(a)      ( ((a)<0)? -(a): (a) )
#define mem(a,i)    memset( (a), i, sizeof(a) )
#define pb              push_back
 
typedef vector <int> VI;
typedef vector <string> VS;
 
#define LL long long
 
const int offx[] = {-1,-1,-1,0,1,1,1,0};
const int offy[] = {-1,0,1,1,1,0,-1,-1};
 
const LL M1 = 1000000;
const LL M  = M1*M1*10;
 
 
VS a;
LL c[4][4][60];
 
LL res;
 
class BoggleScore
{
  void process(string s)
  {
    int len = s.length();
    int k,i,j;
    int t,x,y;
    
    mem(c,0);
    rep(i,4) rep(j,4) if (a[i][j]==s[0]) c[i][j][0]=1;
    
    fu(k,1,len-1)
    {
      rep(i,4) rep(j,4) if (a[i][j]==s[k]) rep(t,8)
      {
        x = i+offx[t]; y = j+offy[t];
        if (x>=0 && y>=0 && x<4 && y<4 && a[x][y]==s[k-1]) c[i][j][k] = (c[i][j][k]+c[x][y][k-1]) % M;
      }
    }
    
    LL tmp = 0;
    rep(i,4) rep(j,4) tmp = (tmp + c[i][j][len-1]) % M;
    tmp = (tmp*(len*len)) % M;
    
    res = (res + tmp) % M;
  }
  
  public:
  long long bestScore(vector <string> grid, vector <string> words)
  {
    int i;
    a = grid;
    
    res = 0;
    rep(i,words.size())
      process(words[i]);
    return res;
  }
};

********************************************************************************
*******************************************************************************/