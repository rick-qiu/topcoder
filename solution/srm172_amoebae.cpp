/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=1814
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Amoebae {
public:
    int cultureX(vector<string> known, vector<string> candidate);
};

int Amoebae::cultureX(vector<string> known, vector<string> candidate) {
    int ret;
    return ret;
}


int test0() {
    vector<string> known = {"...XXXXXXX.......", "....X.X.X........", "...XXXXXX........", "...............XX", "......X.....XX..X", ".XXXXX........X.X", ".X.XXX.......XXXX"};
    vector<string> candidate = {"X.X..........XXXX", "XXX...XX......X.X", "X.X...XX........X", "XXX...XX.......XX", "X.X....X.X.......", "XXX...XX.X.......", "X.......X........"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> known = {"...XXXXXXX.......", "....X.X.X........", "...XXXXXX........", "...............XX", "......X.....XX..X", ".XXXXX........X.X", ".X.XXX.......XXXX"};
    vector<string> candidate = {"X.X..........XXXX", "XXX...XX......X.X", "X.X...XX........X", "......XX.......XX", "X.X....X.X.......", "XXX...XX.X.......", "X.......X........"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> known = {"......................", "....XXX...............", "..X...X......XX.XX....", "..XX.........XX.XX....", "...XX.................", "..........X...X..XXXX.", "..XXX.....XX.XX.XX..XX", "..X........X.X..X....X", ".....XX....XXX..X....X", ".....XX.....X...XX..XX", "............X....XXXX."};
    vector<string> candidate = {"....X......XX.XX.XX...", "....XXX....XX.XX.XX...", ".........XX...........", ".........XX...........", "......................", "..X....XXXX....X......", "..X...XX..XX...X......", ".XXX..X....X..XXX.....", ".X.X..X....X..X.X.....", "XX.XX.XX..XX.XX.XX....", "X...X..XXXX..X...X...."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> known = {".XXXX.X...X...XXXX..", "X..XXXXXXX.X.....XX.", ".X.X.XX....X..XXX..X", "..XXX.X.X....X......", ".XXXXX...X.....XXXX.", "..X.XXX..XX....XXX.X", ".......XXX..X.X...XX", "XX....X.....X...X.X.", ".....X.....XX..XXX.X", "X...XX.X.X..X....X.X", ".X........X.........", ".X..X.........X.....", "..X.X..X..........XX", "........X.X...X.XX..", "....X.......X.X..X.X", "....XX..X..X.X.X...X", "X.....X.........X.X.", "X.X...X.............", "..XXX.X...X..X..XX..", "X.......XX...X......"};
    vector<string> candidate = {".X.....X.X......XX.X", "X.X.X..X..XX........", "X..XXX......X....XX.", "XXXXX.............X.", "XX.XXX...X.XX.XX..X.", ".XX.XX..XX.....X....", "XXXX.X.X........XXX.", ".X....X..X..X.......", ".X.X..X......X.X...X", ".X..XXX..X.........X", "X....X....X..X....X.", ".XX.....X......X....", "......XXXX....X.....", "...X...........X..XX", "X.X...X....X.XX.....", "X.X.XX..X......X....", "X.X.XX.XX....X..X.X.", "XX..XX..XX...XX...X.", ".X..X.XX....X...X...", "..X..XX.XX..X.XX...."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> known = {".....XXX...X.....XX.....XX.XX..XX..", "..X.XX.XX.X....XXX....X......X.....", ".....XX...X....X.X....X.X.X........", "X.....X.......XXX.X....X..XX.X.....", ".X.X....X.X........X..........XX...", "........XX........X.....X..X.X.....", ".X..X...X...XX.X..X.....X..........", "..............X......X...X....X..X.", "XX..X.....XX..X...X...X.X..X....X..", ".X....XX..X...............X.X.XXXX.", "...XXXXX.....X...X....X.XX..XXX..X.", ".........X..XX....X.X......XXXX....", "..XXXX.X..XXX.X...........X..X.XX..", "X...X...........X..X.X..X.XX..X.X..", "..X....X.....X..X.X....X..X.X..XXXX", "X..XXX..X..XX.XX.X..X...X...X..X.XX", "....X....X.X...X..X..X..XXX...XXXX.", ".X..XX.XX.....X..XX..............XX", "X..........X..X......XXXX.....X..X.", ".X.XXX...X..X..XX.X.X.X.X..X.......", "X....X.........X....XXXX..X....X..X", "..X.XX...X......X.X.......XX....X..", "X.XXXX....X.XXX..XX..XXXX.X.XX.....", "XXX.X........X.X..X..X....X..X.....", "......X..X..XX..X.....XX........X..", "...X.....XX..X..X..X.X......XX..X.X", "..X..X.......XX......X......X...XX.", "..X.XX......XX.X..X.....X...X.X..X.", ".X.X.XX.XXX.X..X.X.................", ".......X.XX..X..X..X.....X.X..XX..X", "X...XX.......X...X...X.X....X......", "X.......X.X......X.X.X......X.....X", "....X.X.X.X....XXX..XX.....XX.X..X.", "...X..X.X.XX......X.....XX.XXXX....", "..X......X...X.X...X...X.X.XXXX...X"};
    vector<string> candidate = {"..XX......X..XX.X....X..X.XX..X....", "...X.X.X.......X..X....X...........", ".XXX.X.XXX.....X.X.X..XX.XX.X.XX.XX", "X...X......X.X........X...X.X.....X", "X.....X....X...XX....X.X........XX.", "..XXX...XXX............X.XX..XX..XX", "....X.X..X..X.X...X.X....X.XX...X..", ".XX..X........XX..X......XX..X....X", "...X......X...X..X...XX...XXX..X.X.", "..XX...X..X...X...X.XX.....X.....X.", ".XX.X........X..X..X......XX.X.XX..", ".X.X..XX..X.XX......X....X.........", "X..X.X..X........X.....X..X..XX...X", "X.X.........X.XXX..XX..X.........X.", ".........X......XX.....X.....X..X.X", "X..X.X.XXX.X.....X...X...X...X..X.X", "X......X..X.XX.X......X....XX.....X", "X.X...................X...X..X..XX.", ".........X........X..XX..X......X.X", ".X....X.X.X.......X..XX..XX.XXX...X", ".................XXX...XX...X..X...", "..X...X...XX.....X.....X..XX....XX.", ".......XXX.XX....X...XX..XXX.X....X", "........X...XXXX..X..........X.....", "..........XX.X.XX.X.........XX....X", "...X.....X.X.................X....X", "...XX.X.....X.....XXXX...X...X.X...", ".............X.....X..X..X.X.X..X..", "...............X....X....X..X.X.X.X", ".XX..XX........X.....X.XX....X....X", "...X....X..X...XXX..X........X.....", "X.XXX.XX..X......XX.X......X.X.X...", ".XX.X....X..X..X.X.................", "....XXX.X.X......XX.....XX...X.XX..", "......X....XX..X.....X...XX.X.....X"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 64;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> known = {".....XXXX..X.......XX.XX..........XXX.X...X...X...", ".....XX..X.X.X...X...X.X....X.X.X.X.X.....X..XX..X", "...X.XX..X.X....X.X..X.X..XX.X......X.X..XXXXX....", "..X...X......X...XX.X..XX.X.X...X.................", "X.....X........X...X..X...X...XXX....X.......X....", "...X....X..X.X...X.X....X..X......X.X.X..XX.X.....", "......X..........XXX.X.X.XX..X..........X.X.X..X.X", "X....XXXX.X..X...X....X...X...X...X...XX...X..X...", "........X.X...X.X.X.............XX....XX.......XXX", "...X.X...X....X......X.XX...XX........XX...XXX.XXX", "...X....X.X...X.......X...........X...XXXXX.X..X.X", "..X.X.X...X.X......X..X...X...X.......X...X..X....", "....X.....XXXX.X.....XX.XX.......X..........XX....", "..X.XX.XX.XX.X...X.X....X.XXX...........X..XX...X.", ".......X...X.XXX.......X.XX...X......XX...........", "...XX.....X.X....X...X...XX..X....X.....X.........", "X.XX....XX..XXX..XX...X...XX....XX...XXXX....X..X.", "X...........X......X.XXX.X..X.X...XX..XXX..X.....X", ".X.X.X...X........X..X..X.XXX.....XXX...X..X.X...X", "XX......X....X....X..X.X.XX.X........XX.XXXX.X...X", "X..........X..X....XX.......X.X......X...X..X.....", ".X.XXXX.......X...X..X.XX.X.XX..XX.......XXX...X..", ".X..X...X....X.....X.X...........X.X.X......X..X..", "..X........X...X.....XX.XXXX.X...................X", ".X...XX.XXX.XXX...X..X.X.XX.X...X.X...X......X.X.X", "..X....X..XXXX....X........X.XX....XXX....X.X.X...", ".XXX...X.......X.XXX....X..X...X......X......XX...", "...XXX.....X....X.......XX..X.....X...XX..........", "...X.......X......X......X.X.X.XX.............XX.X", "X.X...XX.XX..X........X..XXX.........X...XXX.XX..X", ".....X....X..X.XX.XX....X.....X...X..X..X...XX.X..", "...........XX....X...X....XX....XX.X............X.", ".X...X...XX..XX..X.X..XX...X........X.X.....XX....", "...X..X...X....X..X.XX....XX....X..X......XX..X...", "..X.X.X.X......X.......X.X..XX..X.........X.X....X", ".XXXX.X.....X.XX....XX...XXXX...X...X.XX.X..X..XX.", "...XX..X.XX.X.X........X.X.X...XX..X..X....X..X..X", "....X.XX.X..X.......XXX...XX.X.X....X..X..X.......", "....XX....X.X.X...X...X...X.X.............X.......", ".X..XX...X.........XX.X.................X...X.....", ".........X.X.......XXX...XXX...XX....XX..X.....X..", "............X..X.X...X.X.........X..XXXX.X...X..X.", "..X......X.X..X...X...X..X.XX..X..X.XX..........X.", "...................XX....X.........X..XXXX.X......", "X...X...XX..X.X.X......XXX.X.X.....X.X........X..X", "X......X..X..X.....X....XX.....X.......XX...X.....", "X......X.......X.........X.X..X.....X...........X.", "............X....XX.XX.X.XX.X..X.X......X.XX...X..", "...X.....XX...........XXX.X.....X......X....X.X...", ".XX..X.X.XX..X.X...X....X....XX.X.....X.....X..X.."};
    vector<string> candidate = {"X.XX.....XX...XX..X.....XX..X..X..XX....XX.......X", ".....X....X..XX................X...X..X.X.X.......", "..X...X...X.....X.X.X.......X...X........XX..XX..X", ".....X...XX.X...X.XX......X.XX..X..X.X.X.X.X.....X", "..XX.....X..X.X............X..XX...X.XX..XXXXXX...", "X...........X...X.X.X.XX.....X..XX...X.X.X..X...X.", ".X...........X..X..X....X..XXX...........X.....X..", "....XX.......X..XX..XXX.....XXX....XX.X.XXX..X..X.", "XX.X.XX.X.X..XXX.X...X.X....X.X.XX..X....X........", "....XXX...X..XXX.......X.....X.X.X....X...X..X....", "....X.....XX.....X.XX......XX........XXX..XXX.XXX.", "X.X.XX.X..X.......X..X.X.XXX.XX.....X.......X.XX..", "XX........X..X...XX.X..........X.X..X....X..X.X...", "..XXX...X.......X.X....X............XX...X...X....", "XX....X.XX.X.X..XX......XX......XX.X..XXX..X......", "X..XX...XXX.X..XX...........X..........X.......X..", "X.X.X....X.....X....XX..XX.......X....X...XX..X...", "..XX.....X.X....X.......XX..X..XXX...X...X.X.X.XX.", "X.XXX....XX....X...XX...X....XXX...X.......XX.XX..", "X.XX.X.X...XX......X.XX...X.......X.....X..X......", "XXX.......XX.X..X..X.X......X.............XXX..X..", ".......X......XX.X..XX.X....X......X.X.....X..X...", "X..XX....X.X...XX.X.X...X...X...XX..X.X....XX.....", "...X..XX...X.........X.X..X...X.....X.X........X.X", "X...........X.X.X...X...X.....X...X.X.X.XXX..X..XX", "......X.X.X.....X.X...XXX..X.......X...X...X.X....", "X.....X...X............XX.X.........XX...X.X.X..X.", "............XXXXX..XX........X..XXXX.X...X..X.....", "....X..XX..............XX.......XXXX...X...X.XXXXX", "......X..XXX.XXX...X....XXX.....X.X.......X..X...X", "..X.X....X......X.XX.X.X....XX...XXXX.............", ".X.X....XX.X.....X.X.XX...X.X..........X........X.", ".....X.......X....XX..X..........XXX.X.....X..X.XX", "......X....X.X....X..X.........X.X.X.......XX...XX", "..X.XX....X...XX.X........X..X....X.....XXX....X..", ".......X....X..X...XX..XX.X..X..........XX....X.X.", ".X..X..X..X.XX..X...X..XXX..X.X....XX...........X.", "X..X.X..X..X..X..X...X....X........X.X...XX.......", "...X...X...XX...X.XXX..X.XX......X..X.X....X.X....", "X..XXX....X.....X..X....X......X...XX...XX..X...XX", ".X..X..X.........X.....X...XX..X...XXX.X....X..X..", "..X.....X......X..XX..XXX...XX.X...X.......X.X....", "XXX....X..X.X...XX.........X..X.XX...XX..XXX....XX", "XX.X..X.....X...X..X.......X..XXX..X............X.", "..XX.X.X.XX...XX.X.........XX.........X...XX....X.", "XX.XX..X..X.........XX..X......X.X...........X...X", "XX.X..XX...XX...X...X....XX...X......X..XX..X.....", "....X...X.XX............X..XX.X......X.X.....XXXX.", "..X.X..X....X.......XXX..........X..X...XX.......X", ".XX...XXXX..X..X...X...................X....X..X.."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 109;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> known = {"..X.XXXX..XXX.X..X............X..X.....XXX........", "X.X.......X........X............XX.XX.X.XX....X...", "...........X.X.XX....X.X......X.X.X............X..", ".X.X.........X..XX.X....X.....X..XXX....X.XX.X..X.", "....X...X..............X...X.XXX..X......X.X..XX..", "........X.X.X.X..X..XX.......X.X........X..X.XX...", "..X......X...X..X.X.XX.X...X.X.....X.X..X..X.X..XX", "..X.X...X....X..X..X..XX.X....XX....X......XX....X", "..XX.X.X....X..X....XX....XX...X...X..X......X...X", "...........XX.XXX....XX...X.XX......XX.X.....X.X..", "...X...X..XX.X...XX...X..XX..X.X..X.....X..X.X....", "X.X...X.X......XX.XX.X...X.X.XX..X.......XXX..X...", ".....X..X...X.X.........X.X....X........X..XX...X.", ".X....XX...X..X...XXX...X.X..X.....X.X..X.......X.", "..X.XX.......X.X.X.X..X....XXX.X..X.....X.....X..X", ".X...XXXX.X...X.X...X..X.XX..X....X......X.....X..", "X.X.X..XXX.XX.....X...X.X..XX....XX....XX.....X...", "X..X.XX..XX..XXXX.X...X.X.XX.XX....X.....XX.X.....", "X.XXXXX..X.X..X.X.........X....X......X...X...X...", "...X...X......X..XXX.X.........X.X..XXX..X.XX.X...", "........X....XXX..........X........X.....X...X..X.", "....X..XXX..........X.....X...X...X.X.............", ".............X...XX....X..XX..XXX.......XX...XX..X", "X....XX.......X.XXX.X.....XX.XX.........X.X.X.X.X.", ".......X..X...........X...X..X....XXX..X....X.....", ".....X...X.X..XX.....X..X..X...X............XX...X", ".X....XX...X...XXX.X....XX.X..XX.X.XX.....X.......", "..........X.....X..XX...X.X..X.XX......X...X.....X", "..........X...X.....X.XX.X.XX....XX.XX....XX.X....", "..X................X.X....XX..X.XX.XX.X.X.....X...", ".....X..........X.X.XX.....X.....X...........XXX..", "......X.XXX....X.X..........XX.....X....X.....XX..", "XX.X....XX......XX...X....XX...X...X......X.......", "..XX.XX.XX...X.XXXX.X.....X.X....X..XX.X....X.....", "...X.....XX.....XX..X.X..X..XX...X.........X..XXXX", "X......XX...XX..X.......X.XXX....X...X..X....X....", "..X...X...XX..X..XX....X...XX.........XX..X.X.XX.X", "XX.......X.....X....X..X..X...X......X..X...X.X...", "..X........XX..X.X..X...X....X...X.X.X......X.....", ".X............X..XXXX..XX.....X....X...X...X....X.", ".X.X.X....X.XX.......X..XX...X.XX..X...XX.......X.", ".X.X.X....X.X.X....X...X.XXXXX....XX.X.X..XX.XX.XX", "......X....X..X......X..X.....X...XX.........X..XX", "....XX.......XX.......X..X.X........X..X..X...X...", "X..X...X.X..XXX..X.......X..X.X.XXX..X.........XX.", "XX.XXX..XXXXX.X..X.....X.X.....X..X....X.X........", "...............X.........XX...X..XX..X.....X.X.X.X", ".XX.X..X.X.XX.XXX....X.....X....X..X......X..X.X..", "X.....X...X..XX.X...XX..........X.X.....X..XX.....", ".....X...X....X.X.X.X.XXX......X...X.X......X.XXXX"};
    vector<string> candidate = {"...X.....X.X.....XX.X.XXX.XXXX.X...........XX...X.", ".X.....X....XX.X.XX....X...X..X........X.XX.X..XX.", "....XX..X.........X....XXX.........X........X.....", ".....XXX..X.XX.XX.X..X........X...XX..X.....X..X..", "....X.....X..X..X...X.X...XX...X.XX.X.............", "X...X..........X.X...X..X.X...XX.....XX...X.XXX...", "X.....XX.X.XX..X..X.X.XXX....X......X.X..XX.X..X..", "........X..XXX...X...X.X..XXX.X..XX....X..X......X", "...XX....X.X.X.......X..X..XX......X.XX.X.X...X.X.", "X..X.X...X..XXX..X.X.XX...X.X.X......X.X....X....X", ".XX......X...X.......X.....X.X.X..X.X..X.......X..", ".X......X...X..X.....X.X.....X..XX..X.X.X....X..XX", "X......X.X......X.........XX.X..X...X..XXX...X.XX.", ".......XXX....X.X...X...XX..X....X...X.XX..X.XX.X.", "..X.X.X.......X..X.X.....X.X........X.XX.X.....X.X", ".XX.X...XX.......X.....X........X.X.....X..X.XX.X.", ".....X.....XX..X.........XXX.X........XXX.....X...", "X.....X....X....X....X..X.X..........XX.X.....XX..", "X...X...X....X.....X.....X...XX.X....X....X....XX.", ".X..........X........X.X.X....X.XX....X.X..XXXX.X.", "X..X..XX.X..XX.X.X....X..X..X...X.......X....X...X", ".......XXX....X.....X....XX.XXX.....X.X...X.......", "....X...X..XXX.XXX.XX.XX....X.XX.XX.XX...X...X..X.", "...X..X.XX.X..X.........X........X..X.....X.X..X..", "..X.X......X.....XX..XX......XX...XX......X....X..", "..XXX....X....X...XX..........X..X......X.XX.....X", "X...X...X...XX....X..XX.....X......X..X.XXX......X", "...X...X..XX.X..X.XXX.XXX.XX..X..X...X..X.X.X..X..", "...XX......X.....X..X.XXX.X......XXX.........XXX..", "...........X....X...X...XX....XXXX..........X....X", ".XX.....XX............X.X.X.........X.............", ".XX......X.......X.....XXXX..XX...XX.X.XX....X....", ".X....................X.X....XX.............X..X..", "...XX.X.........XX......X..X...X..X..X...X....X...", "......XX.X..X..X.X....X....X.X.XX.......X.X.X...XX", "X...X..X.X...XXX.......XX...X.X.......XX.XX.......", ".XXX....X...XX.XX.......X..X......XX..X...XXX...X.", "..X................XX..X.X.X......X.X.X.....X.X...", "...X.XX.X.XXX.X.X.X....XX..X.X..X...XXXXX.X.XX....", ".....X.X.....X......XX......XX.......XX.......X..X", "..X..X...XX...X.X.X...X.......XX.....XX.XXX.X..X..", "...X.X.XX.....X..XX.....X...XX..X.X.X.X........XX.", ".XXXX...XX..X.....X...X...X.X..X...X.X....X.....XX", "..XXX...X.X.....X...X.XX.X......X...X.X..XX.X..XX.", ".....X.....XX......XXX..XXX......X..X...X.X...X...", "XX......X.XX....X....X..X..X...X.....X.XX.X.......", "XX.X....X.X.X.X..X.......X...X......X.XX..X.....X.", ".....X..XX...XX...X....X.....X.......X..XXXXXXXXX.", "X....X.....XX.....X......X..X....XX...X...X..X..X.", "X..XX...X..X......X.......X....X.X.X.......X....X."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 118;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> known = {".XX..XXX........X..X.XXX......X.XX...XX..X.X.X....", ".X.XX..X.X.X.....X.XXX.X.....X........XX....X.X.X.", "X..X....XX.X......X.....X.....XX.X..XX............", "...XX..X.....X...X....X.....X....X.X.X.X..X..X.X.X", "....X.....X....X.XXXX....X....XX..X.XXX.X...XX.XXX", "...XX........XXX....X..X....X.X.....X..........X..", ".X....X.X....X...X..............X..XX.X.........X.", "X.X...........X.XXXX...X...X.X.X.XX.....X......X.X", "....X.X..XX.X.......X.XX.....X..X.....X..X...X...X", "..X....X.....X..X............XX..XX.........XX....", "........X.XX..XX.XX.......X.XXX.XX........XXXX.X..", ".X..X......X...XXX.X....X.X.XXX.X.....XX..X.....XX", "X.......X.XXX..X.....X....XX.X.......XX...........", ".XXXX.X...X.XX.........X.XX......X....X.X.......X.", "....X....XXXX...........X.X.X.X.....X..X.X.XX.X...", "....X..X.X....XX....X.X.....XXX..........X..X..X..", "........X.....XX....X...XXX..X..X.X...X.XXXXX.....", "..X...XX....XX....XX.....XX.XXXX...XX.............", "......X.XXX.....XXX....XXX..XX....X.X.....XX..X...", ".......X.X...X.X.X..XXXXX.XX......X........XX....X", ".X..X.X....X..X....X..XX....XX...X...X..X.XX.XX...", "X..X..XX......X...XX...........X.XX..X.X..X.X...XX", ".XX.......X........X..X....X............X.XX.XX.XX", "...X...........XX....X...X.X..X...X..X..X......X..", "X.X.....X..................X.XX.........X.X.X.....", ".XX....X.X.XX.......X.X......X.XX.X..XX.X......X.X", "X..X.X..XX.XXX...X........X....X..X.X.X.....X.X...", "X...XX...........X.X......X..X.X........X.X.X.....", ".....X.XX............X...XX.....X...XXX...X..XX.XX", "......X........X.X.X..X.X..............XX....X.XXX", ".XX......X...X........X..X..X..X.XXXX..XXX..X..X..", "....X....X.X.X.........XX...X.X.....XX..X...X.XX..", ".XX............X.X.X.X.XXXX..X.X.XX.XX....X.XXX...", "..................X...X.X..X...........XX..X.X...X", "....XX.X........XX...XXX.X..XX.....X..X....XXX.X.X", "......XXX....X.X.....XX.XXX..X............XX.X....", "X..X.XXX...XX....X.....X.....XXX....X..X.....XX..X", ".XX.......X....X.....X..X.X..XX.XX........XXXX..XX", "...XX.X..X....XX....XXX....X.X......X...........X.", ".X.X...X.........X.X.....X.........XX....XX.X....X", "X...X.X.........X.XX..X.....X...........X.....XXX.", "X......XX..X..XX..X...X.X..........X..X.....X..X..", "..X.X.XXX..XXX...X.XXXX.XXX...X.XX..XX..XXXX....XX", "..X.XX...X......X.X...X...X...X.....XX....XX....X.", "......XX.X.........XX..X.X....X..XX....X..X..X....", "...X..X.X..X.X.............XX..X.......X..X....X..", "....X..X....X...XX..X.X.....X...X.....X.....X....X", "........X.X..X..XX......XX.X.X....X....XX.X...X...", "..XX.....X.XXXX........X...X.............XX.XX.XXX", "X..X.X...XX...X......X..X...........XX...X.XX..X.X"};
    vector<string> candidate = {".........XXX.....XXX...X..X......X.X.X.....X.X....", ".....X..XX..X..X...XXXXX.X....X...X.XX.....XXX...X", ".....X.XX..X.X..X.X..X..X..XX..XXX.X..........XX.X", ".X.XXX...X......XX.......XXXXX.........XX.X...X..X", "X.X.........X....XXX...X.....XX.XX....X.XX..X...X.", ".X.XXX....XXX...X..XX.X.....XX.X..XXX..XXX...X.X..", ".X...XX...X...X.X..X..X.X..X.X.XXXXX..X..X..XX.XXX", ".XXX..X.X...XX.X.XXX.X.X...XX.XX..X.XX......X.X...", "..X...X.......XX..X.X.X.X.....X...X.XX..X......X..", ".X........X...X...XX........XX...XX...............", "......XX.XX..X.........X...........X.......X......", "X....X...X.......X.X.XXX....X..XX...XX..X.X.......", "....X..XX.XXXX.X.......XXX.X....XXXX...X.....X...X", "...X.X..XX.......X.X.....X...XX.......XX..X......X", "XXX.........X..XX..X..X.XX..X.XX......XXX....X.X..", "....X.X.XXXX..XX...X..XX.XX...X...X.XX...X....X..X", "X.........XX.....X..X.XX...........XX..XX......X.X", "X..XX..XX...X.X....XX.XX.X......X..X.XXXX.X....X..", ".....X.XX.X.XX..X..X.X.......X..X..X.X.X.....X..X.", ".....XX....X....X..XXX.XXX...X.X......XXX..XX.....", "X...X................X...XXXX...X....X..XX.X......", ".........X.....XX....X...XX..X....XXX..X.X..X....X", "..X.....XXXXX....X....X.X.X...X.X.X.X.X...........", "X....XXX..X......X.X.....XX...X..X.X..X.X.XX.....X", "X...X...X.X...............XXXX...X.X...XX.X..XX.X.", "X.X..X...X.......X.X..X..X.X......X......XX.......", "X.X..........X.......X.X...XX..X........X..X...X..", "......X........XX..XX.X.X...X.XX...X....XX..X..X..", ".......X.X.X........X..X.....XX.X..X.XX...X.......", ".X.......XX..XX.....XX.XXXX..X..X......X.X...X....", "X..XX.......X.......XX..X...X...X..XX..X...X.XX.XX", ".XX..XX.........X......X..X..XXX.X..X.....XX....XX", "..X...........X..XX....XXX........X....X.X.X.X....", ".XX....X..XXX............XX.....X...X...X...X.....", ".XX..X..........X...X..XX.X............X.X.X.X.X.X", "X...X..XX.....X.....X...X........X........X.X..XX.", ".XX.X....X...X.X.......X..X.......X.X.....X..X.X..", "...XX.X..XX...X...........XX..X..X.....XXXX.X.....", "....X.....XX.X.XX......X...XX..XX...XX..XX.X..X.XX", "..X...X....XX.XX.X..X.....X.X..X....X.............", "XX..X...X.XX.X..X.......X.XX.X..X...X..XX.X.X....X", ".....X....X...XXX...XXX.X.X........X....XXX...X.X.", "..X...XX.......X..XX....X..X.......X...X...X.....X", "..X.XXX...XXXX...X..X.X.X.X...........X.XX....X...", ".X..X..X.....XX....X.XXXX.X........X...X....X.X..X", ".......X......X..X....X...X.X.X..XX...XX.......XX.", "......X.......X.X.X.X..XX.X...X.X....X.X..X.XX...X", "..X.XXX......XXXX.X.X.XX.X.XXX...X.X.XXX....X.XX..", "X..XX.XX...XX.X.X....X....X...X.XX...XX..X.X..X...", "....X...........X..XX.X.X..X.....XXX....X........."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> known = {"..X..X........XX...X.X.X........X.......XX.....XXX", "......X.X.........X........X....X............X....", "XXX.......X..XX..XX......X...XX...X........X.X.X.X", "...XX.....X..........X...XXXX.XX..X.........X.X..X", "XX...X........X...X..X.......XX....XXX.X....XX....", "X.XXX....X.X....X..XX........X.X.X..X.........X.XX", ".X...X...X...X......X..XX........X.......X.XXX.X..", "...X...X.X..X..X.X..XX..X...X..X.......XX..X.X....", "X.X.XXXXXX.......XX..XXX........XX..XX.X.X........", "....X....X.......X..XXX.XX...XXXX...X.........X...", "...XXX.X......X.XXX....XX..X..X..X...X.X..X..X.XX.", "XXX.X..XX..X....X..XX.XX..X.......XX.X...X.XXX.X..", "......X....XX...X...X......X...XX..X......X.X...X.", "XX...XX.....XX..X.XX...X.X..X.XXXX.......X......X.", "...XXX..XX....XX....X..X.X...X.....X.....X..X...X.", ".....XXXX.......XX......X.......X.......X.......X.", ".X.X......XX.X.X..X.....X...........X....X...X.X..", ".XX..X.X......X..X..X........X.XXX...X.X.X..X..XXX", ".X.......X...X.X...X..X.X.X............X.X..X..X..", ".X.XX.....X..XX...X.X..XX.........X....XXX...X...X", ".....XX..X.......X..X.......X.X...XXX.X....X.XXX..", "...X.X.X.X.....X..X.X..XXXXX..XXX.XX.X...XXX......", "X.X.X..X..X..X.....XX.........XX.X....XXX..X.....X", "X.........XX....X.XX...X.XX..........X...XX..X....", ".X.....X......X.......XX...X..XX...X.X......X.....", "XXXX...X..X.X.XX..X.X......XXX.XXX.XXX..XX..XXX...", "..XXX.X.X....XX...X.XXX.X..X.XX..XX........X.....X", ".X..XX.X..XXX...X.XX..XX.X.X....XX.....X.X....X.X.", "..X..X.....X.X.................XXX..X.X.....XX.XX.", "X...X.......X..X...............X....XX....X.XX....", ".X.X.....X......X............X..........X.XX..X.XX", ".......X.......X..X.XX.............X..X..X.X....X.", "..X.........X.X......X..X..X.XXXX...X...X..X..X..X", "X.........X......X...XX..XX....X..X.X.X..........X", "..XXX.X..X...XXXX..XX.XX..XXX....X.X.XX.X.........", "XX..X....XX..X.....X.........X...XXX....X....XXX.X", "...XXX.........X.....XX.X...X.....X..X............", "X..X....X...X...........XX.X..XXXXXXX...XX.....XXX", "..X.XX.X..X.X.X...XX.X...X......X...XX..X.XX..X...", "...X..X....X........XX....XXX...X.X........XXXX.XX", "..X.XX..X.X.X.X.X......XXX.X..X.X..X...X.........X", ".X.X..X........X........XX.XXXX.............X..X..", ".......X..X.X...X..X..XXX.X.X.........X.......X.X.", "X..X.........X.X.....X.X.X...XXX....XXX.X...X.....", "..XX.......X.XXX....X...XX..........X..X....X..X..", "..........X......X.X..X.........X.X.X....X.X......", ".....X.......X..X..X.......X..........X.X...X.....", "X...X..X..X..XX...X.....X..X...X....X...X.X....XXX", ".X.X..X.X...X.X.XX.................X..X.X...XX.XX.", "......XX............X.....XXXX........X...X.X....X"};
    vector<string> candidate = {".X...XXX....XX....X...X..X.X...X....X.X..X..X.X..X", "XX........X..X.X.....X.........X..X.X...XX.XX.X...", "........X..X....XXX.X..X.X.XX.X....X...XX.X......X", ".X.X.....X..X........XX..X..X..XX...X....XX.....X.", "...XXX..X....XX...X.....X.XXX.XXXXX....X.XX.X.....", "..X.XX......X.......X..X.X.X....X........XX....XX.", "...XX..X..X....X....X.....X.........X..X.........X", ".XX...X..XX.XX...XX...X..X.........X.....X......XX", "..X.XXXX.X....X..X...X....X.X.X...X..XXX...XX.X..X", "..X........X.....XX..X...X.X....X......X.....X.X..", "X...X.X......X........X....X..X..X.........X..XX..", ".X......X....XX..X.X...X.XXXX......X.XXX...XX.X..X", "X......X..X..X.........X..........XX.X.XX.X.......", "....XXXX.X.X..X.XX...........X.X...X....X.........", "....XXX....X.X.........XX.XX......X....X.XX..X.X..", "X..X....X...X..X.....X....X.X..X....XX........XX..", "........X....X.....X..X.XX...X....X.............X.", "..X.X.X...XX...X....X.X.X..............X.X......XX", "......X..X......X.......X.X..X.X.X.....XX.X.X.X...", "...XX..X...X........X....X.X.X...X..X.X.....XX....", "...X.XX.X......X.....X..X.X.XXX...XX....XXXX......", "XX.X.X..X.XX..X..X.X.X....X.XX...XX....X......X.X.", "...XX..X..........X...X..X.........XXXX.XX....X.X.", "..X.X.X....X....X.XXXX.......X..X..............XX.", "X.X....X.X....XX..X..X..XX...X.......X.......XXXX.", "X.....X....XX...XX...XX...X........X......X.X.X...", "....X.................X......X.XXXX...XXX...XX...X", ".X..X.X..XX..X..X......X..X.X..X...X.....XX.X.X...", ".X.X.X.X.........XXXX..XXX..............X..X.X.X..", ".X...X.XX.X.XX.X..X.X.....X.X.X.........X.X.X.....", "..X....X..XX.....XX............X.X....X.....X..X..", "......X...X...........XXX..X.X.....X...X.X.....X..", ".XX.......X..XX....X.X.XX............X..X.....X...", ".X..XX..X....X..X.X.XXX..XXXXXXX.XX...XX...X.XX..X", ".XX..X.XXX..X..X..X..XX.XX............X.........X.", "X.........X.....X...X.X.X.X...X......X............", "....XXXX..X....X....X......X.......X.X.X.....X....", "..............X.....X..XX.X....X..XX..X.....X.....", "X.X.XX...X....X......X....X.X...X.X...X......XX...", "..X..X...X.XX..X....X.XXXXXXX...XXX..XX....XX..XXX", ".X.X....X.......XXXX....X.XX....X..XXX.X..X....X..", ".XX..X......X................X.....X.....X..X.X.X.", "..X.X.......XXX.X....X.XX..X.X....X....XX...XX..X.", ".X..X....X......XX.X.XXX..X......X...XX.....X.X.XX", ".XX.X.......XXX.X.XXXXX.X...............XX...X.X..", "..X.XXX..X.X.X..XX....X......X..XX.X..........X...", "XX.......XXX.XXX....X....X.X..X..X.XXXX....X.XX.X.", "......XXX...XX..XXX.XX.....X.XX.XX.X...X...X.....X", ".XX........X..X............X.X...X.X..XXX.XX..X...", "X..X.XX....X..X..X..X.X...X.XX.XX......XX.XX....X."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 106;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> known = {"....X..X...X.XXXXXX....X.XX.XXX...X......XXX....X.", ".XX.X..X.....XX.XXX.X.X.....XXXXX.X.........X.XX..", "...X...X.....X...X...X.X...XX..XX.X..........X....", "X.X..X...X..X....XXX.....XX.X.X.XX..X..XXX....X...", "X..X....X..XXX......X.X.X.X..X...XXXX......X......", ".......X.XXX.X...........X...X....X.X.......X...X.", "..X.X......X....X.........X..XX..X......X........X", "X....X..X....X.XXX...X........X..X.X.XX.X...XX..X.", "..X........X.XX.........X..XX..X..X.......XX......", ".....X.XXXX............X......XXX.......X..X......", "..XX.X...X........X..X.....XX......X........X...XX", "X.....XX.X...X.....X...X..XX....X...X.......XX....", ".X.XX..X..........X..X...X...X..X.......X.X.......", "X...XX...X.X....X...X....X........XXX..XXXX......X", "..X...X...X.....X..X..X.X.X.....X.X...............", ".XX...X.XX...X.X....X....X.....X....X...XX..XX..X.", "...XX.X.......X..X..X.XX..XX.X.X.....XX.....XX...X", "X.X.X......X.XX.XX.X.......XX..X.X.XXX..XX..X..X..", ".X...X.X..X.XX..XXXX.XXX.....X...X......X.....XXX.", "X..X.X.X.X......X....X.XX...X.X..XX.X....X.X...X..", "X.....XXX...X..X.XXX....X.........X..XXXXX........", ".XXX...XX.XX......X.X..........X.X..X.....X..XX...", ".......XXX.XX...X....X...X.X.X..X........XX.....XX", "..XX.X......X.XXX..X...X....X.X..XX.......X..X...X", "....X.X......X...X...X.X.XXX.X....X.X..X...XX.X...", "X..X...X...XX.X.X......X.X...X..X.X........XX.....", "XX..........XXX..................XXXX....X.X.XX.XX", "X.X..X...XX......XXX.X..X.XX..XX.....X.X.........X", "..XX....X..X.X.X.XX.............X.XX.......X......", "...XX..X....XX....XX..X...XX......X..X.X...X......", ".X...X....X..X...X...XX...XXX.XX......X.......X...", ".......X.X.X..XX.X.X.X.X....X...XX...X.X.X.X...X..", ".XXX..X.X..XX....XX........XXXX....X..XX..XX......", "XX..X..X.X.X....X..XXX...X.......XX.......X......X", "X..XXXX.X..X..X....X...X..X.X..........X.X.XX.....", "X.........X.....X..X...XX...X.X...X.XXX.X.X......X", ".XX.X...XX...XX.X..X..X.......XXXXX.X...X...XX....", "..X........X.XX.X..XX...XX..X....X.X......X..X.X.X", ".X.X..XX...XX........X......X...X....X.....X......", "..X....X...X........XXX....XX...X.X....X.X....XX..", "X.X.XX..X...X.........XX..XX.X...X.X....XX.X..XX..", ".X..X.......X...X...XX........X...X...XXXX..XX...X", ".X....X...X...X...X..X.XX.XXX.......X....X.XX..XX.", ".....X.........X.X.XX.............X.XX............", ".X.XXX..X..X...X...X......XX....X...XXX.......XX..", "X..XX.......XXX.X...X....X....X...X......XX.......", "...X..X.X..X.......XX.......X..X........XX....X..X", "..XX.X.XX......X..XX.X..XX...X.X.X.......X...XX...", ".XX..X..XX.XX....XX.......X..X......XX.X........X.", "X..X....X.X......XXXX.XXX.XX....X.......XXX..X.X.."};
    vector<string> candidate = {"X...X.XX.XX.X...X..X.....XX...X.X..X.XX......X....", "...X..X......X..XX...X..X........X....X...X.....XX", ".XX...........X..X........X.XX.X.......X..........", ".XX.X......X...X...X...X..XX.X....XX.X..XX........", ".XX....X.X.............X...XXX...XX.X..X.X....XX..", "....X..X..X.X......XX.....X.XX..XX..XX.X......XX..", ".X.X..X.XXXX...X.XXXX..XX...X...X.....XX...X...XX.", ".........X..X..XX........X...X..X.....X...X...XX..", "..XX............XX.......XX...XXXXX....X..X...XX..", "........X.X...XXXX...XX.XX....X..XX.X.............", ".XXX..X..X......XXX.X.........X.....X.XXX...X....X", "X.X.....X..X..X.XX...XX.....XX....X.XX..X.X.X.....", "...X...XX.X.......X.XX.X......XX.XX...X...X.X...XX", ".........XXXXXX.XXX.XX..XX...X..X..X..........X.X.", "...XX.X...X.XX.X.X..X..X......X.X.X.....X....XX..X", ".X..X.XX.......X.........X.XXX..........XX.X.X....", "X....X......XXXXXX.X........X..X..XXX....X..X.X.X.", "...X....X.....X......XX.....X...X.....X..X......X.", "X...XXXX...XX..X.....X..XX.X..X..X................", "..X.XX...X...XX...X...X..XX.X.X.....XX.....XX.X.X.", "XXX.XXX.XX.X....X........XX...XXX.X....X.XX.......", "X..X..X...X...XX..XXXX.X.......X..XXXX....X..X..X.", "..X..X...X.....X.....X...XX...X...X...X.X.X..XX...", "...X.XX.X.X.......X.X..X.....X.....X.X...X......X.", "X......X......XX...X.XX.X.......XXX..X.X.........X", "X.X......X.X......XXX.XXX.X.......XXX.......XX....", "...X.XXXX...X.....X.X..X..X...X..X........XXX...XX", "....X......XXXX...XX...X......X..X.X....X..X..X..X", "....X.X........X.X.X..X.X..X.XX....X...XXX.X...X..", "X.X..X.X.XX..X..XX...XX.X.X........X.XXX..X.X..XX.", "..XX.....X...X...X.......XXX....XX..X.X.X..X...X.X", "X.XX.X.....X..XX...X...X..XX...X...X.X.X..XX......", "..........XX..X.X..XX........X...X..X..X..X....X..", ".X..XX...XX.XX.X..XX.XX.XX................X...X...", "....X..XX.XXX....X.....X..XX....X..XX.......X.X..X", "........X...X.........X......X..XX.X.X.X..XX......", "......X.XX.....XX....X.....XX.XXXX......XX....X.XX", ".XX.X......X......X..X.XXX.X.X.......X...X.XX.X.XX", ".X.X...X.........X.....X...XXXX.X..XX.....X.......", "...X.X.XXX.....X...........X...X......X.X.........", "..X...XXX.....X......XX.X...XXX.X...XX.X.XX.X....X", ".X...XX.X.X......XX........XX...X......X..X.X...X.", "......X...X..XX.X.XXX.X.......XX....X.X...X...X..X", ".X..X...XX.X........X.X.XX..X..X.....X.....XX.XX..", ".....X..X..X..XX.XXX..X....XX.X...X....XX..X...X..", ".X......X...X.........XX......X.X.........X....X.X", "...XXX..X...X...X..XX..X.....X.X...XXX....X..X..X.", "...XXX..X.....X....X..XX...XX......XX.X.X...X.....", "XX....X...X..X.X..XXXX.X.....X...XXX...X.......X..", "...XX..X......X.....X.XX...XX..X.......X...X.....X"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 111;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> known = {".X................XXX..X..X.X.........X..X...X....", ".....X.XX..XX.X..X..X.X....X...XX.XX..X....X.XX..X", "X..XXX....X..X...X..XXX...XX....X......XX.X..X....", ".XXX...X.X....X.X..XX....X...X..X........XX.XXX.XX", "X.XX.....X..X...........X......XX.X...............", "..X.X.........XX....X...X.X..X..X..X.....X.XX.X.XX", ".XX......XX....X..X..X....X.X......X.X.......X....", "XXXX.XX.X..X..........XXX.XX.XXX....X..X..........", ".X.XXX....XX...X..X.....X......X......X.....X...XX", "X..XX.........X......X..X.....X.XX..XX...XX.X..X..", "X.X..X..X.XX........X..X............XX.....XX.XXXX", ".X...XXX...X.XX.....X.....X....X....XXX.XX.XX.X...", "..XX....X......X.X...XX..X.....X....X......X..X...", ".X..X....X...X....XX...XXX..X...X.XXX..X.X........", "X.......X...X...X....X.X..X..X.X....X....X..X...X.", "X.XXX..X..XX..X.X.XX.....X...XX........X...XXX....", "X......X.........X..X.......XX......X............X", "XXX...XX..XX.XXX.XXXX........X.X....X..X..X..X...X", "XX.X.XX.X..X.XX.X.XX.X.........X.XX.XX.X..X..X....", ".X....X.X.X.X...X..X......X..X.....X.......X.X..XX", ".......X....X....XX.X.X......X.X..XXX....X....XX.X", "..X.....X.XX.......XXX...X..X....X.X..X........X.X", "...X..XX..X......X.........X...X....XXX.X......X..", "XX...XX.....X..XXX.......XX....X.X....XX...X...X..", "..X....XX..X..X......X..X..X..X...XX....X......XX.", "XX.X.X..........X......X...........X.X..XX.X..X...", ".....X..X..........XX.......X.......X.X.X..X.X.X.X", "....X...XX....X...X.X...XXX........X......X......X", "X.X...X......XX.......X..X.XX...XX.XX.....X...X..X", "..XX...X.X.X.X........X..XXX..X.X...X.............", ".XX......X.X.........XXX..XX.X......X...X.....X.XX", "..XXX....X..X.XX...XX..X.........X.XX....XX...X...", "..XX...X...X....X.X.....XX..X..XXXX.X..X.X...X....", "..............X.XX...X..XXXXXXX..........X.....X..", ".....XX.X.X....X...X.X........XXXX.X.XX......XXXXX", "X.X....XX..XXXX.X.X...XXX.XX..XXX..X......XX.X.X..", "..XX....XXX..X...XX...X..XX.X....X....X....X......", "XX...XX...X...XX....X.......X.......X..X..X.....X.", ".X..X....X..X.......X.XX....X.X.XXXX.X.....X.X.XX.", "X.XXX.X...X...XXX......X...X...X....XXX.X..X...X.X", "X...XX.XX.X..XX........XX.XX.....XX.X.......XX..X.", "..X....X.X....X.............XX..XXX.........X...X.", ".X.XX...X.X.XX.XX.......X.....XX.............XXX..", "..XXXX.X..X...X.......XX..........X.X...X.........", "XXXX.X..XX..XX...........XX....X..X.XXX.......XX..", ".XXXX.....X.X....XXX..X........X...XXX.X.X..X.....", "..XX...XX.....XX..XXX...X..X....X.................", "....X........XX.....X......XX.X..X..X.X..XXX....X.", "..X.XXXXX.......X.X......XX....X..XX.X..XX.X.X.X..", "..X..XX.X.X....XX.X.X...X...XX.X..X..X...XX.X....."};
    vector<string> candidate = {".....X.X....X.......X.X..........X....XX...X..X...", "..X......XX....X....XXX..X.X..XX.......X..XXXXXX..", "...X..X.X.....X..X....X.....XX.....X....X.....XXX.", "XX...X...X...X..X......X..X......XX....XX......X..", "X....X.X......X..X.X......XXX.......XX.X.....X.X..", ".X......X............XXX.X.........X.XX.X.X...XXX.", "X..X...X..X.X.......XX....XX...X.........X......X.", "...X...X..X.X..XXXX.....XX....X.X..X.X.....X.X.X..", "X...XX..X.X.....XX.X..X..X...X.X.XX..........XX...", ".....X.....X..X..XX..X.X..X.......X....XX.........", "........XX....XX..X..XX...XX.XXX..X.X.X...X..X.X.X", "........X......X......X....X.X.XX.....XX...XX.....", ".......X.X......X...............XX.............XXX", "......X...X..XX.XX..XX.XX...XXXX..XXXX.X........X.", "..X...X.....XX..XX..XXX.XXXXX.X.XX..X..X.X.X...XXX", "..X..XX.XX...X...X..XX...X...X.X..X....X......XXX.", "X....X.XX..X....X.X.X.......X......X.........X...X", "XXX...X...........X..XXX.....X..X...X....X.X......", ".X.X.......XX.X.X..........X.......X..X..X.....XX.", "...X......X.XXX................XX...X.....X.......", "......X...X...X....X..X...X...X.XXXX.XX.XX......X.", "X.X..X...X.X.......X....X.X..XX......XX.XX....X.XX", "X.....X.X...X............XXXXX..X..X..XX...X...XX.", ".X.X...X.X.X.....XX.X.XXXXX..X.....XX..X.X.XX....X", "........XX.....X.X.X..X.X...X..X.....XX......XX...", "......XX................X.........X....X..........", "......XX....X.XXX...X.XX..X..X...XX.XXX...........", "X...X..........XX.XXXX......X..XX....X.......XX.X.", "X...X............X....X..X...XX......X....X..XXX.X", "X.X......XX.........X.........X..X.....X...X..X.X.", "..X....X...X.X.X...........X...X.......X....X.X...", ".............X....X.......X...X.X.....X.X...X.....", "XX..X.X.X......XX.........XX.....X....X.X...X.....", ".XX....X.........X.X.....XX..X.X........X..XXX...X", "X....X.X...XX...XX.X........XXXXX.X...X.X..X..X.X.", "X.X..XX...X.....X.....X.X..X...XX..X..X....X..X.X.", "X...X....X.X.....X.....XX..........XX..XX.....XX.X", ".....XX.....X.X..............XX........XXX.....X.X", "X....X....X........XX.XX.XX......X.X....X.XX.XX.X.", "..............X.........X.X..X........XX....X...X.", ".....X..XX....XXX..X...X...X..X..X....X...X.X.X.X.", ".......X...X..XXXXX.X......X.X.......X....X.....X.", "....X...X....X....X...X......XX.......X..XX...X...", "...........XXX.......X.....X....X.XXX.XXX..X..X...", "..X.....X...XX.........X...X...X.X..X..XX.X..X....", "XXXX.X..............X.....X...XX.....X......X.X...", "..X.......X.....X...X.X....X.X....X..X.XX...XX...X", "......X....X.XX.X...XX...X..X.......X.............", "..X..XX.....X......XXXX.....XX.....X.XX...........", "..X..XX.X..X...X..X.......XX....X....X.X.......X.."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 128;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> known = {"..X.XXXX......X.XX......X....X.X....X....X..XX.XXX", ".X.X.........X.X.....X.......X..XX.X.........XX.X.", "..X..X...XXX..XX........X..............X.X....X..X", "X.XXX.X........X...XX......X.X...X........XX..X.XX", "X.XX.X..X.........X.XX...XX.X....X..X....X....X...", ".XX.....X.X.............X....X....X...XX...XX...X.", "..XX...X....X.......X....X..X...........XX..X.....", "..XXX.X...X.XX..XXXX..X....X........X......X......", ".X.X....X.....X..X..X..........X....XX.......X..X.", "XX..X...X..X.....XX.X...X.......X......X.XX...XX..", "......X....X..X..X...XX..X.X.X...X..XX....XX....X.", "......X.XXX..XX..XXXX..XX.XXX......XX.....XX..X...", "..XX...X.......X.XX...XXX..XX.X.....XX.XXXX.......", "XX..X......X..X...XX..X..X..X...X....X....X......X", ".....X.X.X.X.X......X.X....XXX.XX.........X.......", "X.X...X.X......X.X.XXX...X...XX.X..X..X.XXX..X....", ".X...X.X.X.X..X.....XXXX....XX.....X...XX....XX...", ".X..XX....X......X..XXXX...X.X.X........X....X.X..", "X.......X.X...X...X.X.X...XX....X.XXXX.X..X..XXX..", "..X......X......X.X.X..X...XXX.....X...XX..X......", "X.X...X..X.X.XX.....X.XX...........XX...X........X", ".X..X....X..X.X........X..X....X......X.X..X....X.", "X.XXX.....XX.....XXX.X..X..X......X....XX.X..X.XX.", "....X.....XXX..XX...X.....X...X..X......XX....X.X.", "...XX.XXX......X.X.X.....XXX..XX..X......X.X.....X", "..X..X.X......XX...X.X.X....X..X....XXX.X..X......", "XX.........X.XX...............X...X..XX.....X.XXX.", "...X..X....XXX.X..X..X...X..X..X..XX...XXX..X.....", "XXXX.XXX.X...X...X.X.............X.X..X.X..X......", "X..X.XX.XXXXX...X......X.......X..X...X..X.X...X.X", ".XX.....X..X....X......XX.X..X.X...X....XX.....X..", "X..X.....X....X.X.X.X..X...X.XXX..X......X..XX....", ".X...X...X.......X....X........X......X.X.XXX..X..", "...X..XX......XX......X.......XX...X...X..XXX.X...", "..X.X.X.X.X.XX.XX.XX..XXX...X...X.....X.X..X......", ".X.X....X..XXX....XX.....XXX..XX........X......XX.", "XXX.......XX...X.XXXX..X........X..........XX....X", "XXX..X..X...........X....X...X.........XX....XX...", "...........X....X..XX.X......X.XXX...X...X.....X..", ".X....XX.X..XXXX.X..XXX.X.....XX....X........XX...", "X..X.X..XX.....XXX.X.XX..X.X.XXX...XXX.X....X....X", ".X.X.....X.......X.....X......X.X..XX...X.XX..X...", "...XX......X....X...X.XX..X.X.X.XX...X...........X", "..........XX..XXX..X....X.....X.X.X..XX.....X..XX.", "X...X.....X..XX....XX.....X....X....X...........X.", "......XX.XX..XX.X....XX......XXX.X.......X...XX...", "...X..X....XX.X.X.....X...X..X..X..........X..X...", "...X.XXXXXX....XX.X.X.XX...XX....X..X.X...........", "..X..X.XX....X...XX..X..X.X..X.......X.....X......", "....XXX.X..X.XX.XX....X.....XXX..X......XX..X..XXX"};
    vector<string> candidate = {".XX...X.XXXX..XX.....X....X.XXX.......X.X.X.X.XX..", ".XX....X.X....XX..XX.XX.....X....X.......X.....X..", "........XX..X.....X..X......X...........X.....X.X.", "...X.X..X...XXXX...X..X.XX...XX..XXX..X....X.X....", ".X.X..XX..X..X.X....XX.........X.X..X...XX.......X", "...X...X..X..X..X.X......X.XX....X...XX...X...X..X", "...X.X...XX...XX.....XXX..X.X............X......X.", "..X..X........X..X.X....X..XXX......X..X..X.....XX", "...X.X..XXX.X....X....XX..X.....X.X..X.X........XX", "....XX.X..X....X..XX...X..X...XX..X....X..X.......", "XX.....XX...X.......X........X..XX..X....X....X.XX", "......XX...X..........X.....X.....X.X..........X..", ".XX.X........X.XX..........XX....X..X.X..........X", ".......X...X..X.........XX.....X..X.X...X........X", "..X..X...X...XX.XX....X.X...X..X..X......X..X....X", ".X.......X....X.....X.X...X...XXX.......X.XX...X.X", ".X.....X.X.........X............X.X..............X", "....XX.XX.X...X.X...XX..X.X...XX......X.......X..X", "...X..X......X..XX...X.XXXXX...X.....XX.X.........", "XXX...XX.X......X....X..X....X.X......X.X..X.X.X..", "..XX..XX..X.X.X...X...X....XXX...XX.X..XX..X......", "X...X.........XX.......XX.X..XX....X......X.X.....", ".XXX...X........X..X...X..X.X.XX...X...XX.X.XXXX..", "X.....XX....X.X.....X..X...XX...X.X..X..X.X..XXX.X", ".............XX.X....X.......X......XX..X.........", "..X...XXX.X.....X.X.X........X...X...X.......X.XX.", "...X...XX...X...XX.XX....X.XX.X..X.XX.............", "XX..X....X.X....X.............X..XXX.......X....X.", "XX...X....X.X.....X.XX...X.X...X.........X.X.X.X.X", "X..XX..X.XX.....XXX........XX.X...X....X.......X..", "...........X...X.X...X.........X....X..X.X........", "......X..XX..XXX.XX..X................XX....XX.X..", "....X.....X...........XXXXXXX....XX...X.X.XX.XXXX.", "..XX.XX...X.X..X....X....X.XXX.X..X...X...XX....X.", ".X..XX.......X......X........X..X..X...........XXX", "........X....X....X.XXXX..X.X.X..XXX..X...X.......", "...XX.XXX...X.X..X.X.X..XX..X........X...XX...X..X", ".XX.....X...XX.X.X..X.X...X......XXX.XX..XX.X..X..", "..X......X.X.X...X.X.X.XX.XX..XXX..XX....X.....X..", "X....X..XXXXX..X...XX.XXXXXX...XX....XX.....X....X", ".X..XX..XX.X....X....X..XXX.....XX..X...X....X...X", ".XX....XX..X...XX......XX...X.X..XX..X..X.XX..X...", ".X......XXXXXX.......X..X..XXX..X....X.X.X.X..X...", ".....X..X.X..X...X.X...X.......XX..X.XXX....X.....", ".......X.X.X.....XX......X......X.X...X..........X", "X....XX.XX...XXX....X.........X.XX.....XXX.XX.XXX.", "............X.X.X.X..X.....XXX.X...X....X.....X.X.", ".X....X...........XX..X....X...XX.X..XX....XX.X.X.", "X.X...XXXXXXX...X...XX............XX..X.X..X.X..X.", ".XX..X..X...X.....X..XXX.X.X.........X.......X..X."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 131;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> known = {"...X..XX.....X....XXX.X..X.........X....XX.....X..", "X.X...XX......X............X...X..X...X....X.X....", "..X..X..X...XXX..XXX....X....X.....X.X..X..X..X.X.", ".XXX..X............X.X..X.X..X.X.X.......X.X..X.X.", ".X..XX......X....XX...X.XXX...X.XXX.........X.X.X.", "..XXX.X..X....XX..XX.....X.X...X.X....XX.X.X.XX.XX", "......X..XX....X.XXX......X.....XX.X.....X..XXX...", "...X..XX.....X..XX....X..X...X....X.XX.X.....X....", "X..X.X..X..X...X.XX...XX.X..XX....X...XX..XX.X.X.X", "X.....X.XX.X...X...XX....XX...XX.X.X..X....XXXXX..", "..XXXX............X...X...X...X...X..X.X..XX.....X", ".X...XX...XX.X..XX.X..X..........XX.XX.X..X....X..", ".X...XX.XX.X.X............X.XX......X.............", ".....X...X....XX...X...X.X.X.....XXX.XX.XXXXXXX...", "....X.XX...X.X....X....X.............XX..XX.XX...X", ".XXX.....X...X.XXXX.XXXX.X......X...X...X.X......X", "..X.X.X..........X.X....XX...X.......X..XX......X.", "X...X..X..X...X.X...XXXX..XXX...XXX.......X..X....", "X....X......X..X...........X.XXX.......X..X.X...X.", "....X.X.....XX..X..X.X.X..XX....X....XX....XX.X...", ".......X..X.XX...XX....X..X..XX.....XX.X.X..XXX...", "......X.X.X....X..........X...XXX.XXX..X..XX.X....", "..X.X...X..X..........X.....XX...X..X...XXX...X.XX", "X.XX..X.....XX.X..X...XX.......XX.XX.X..X..X.XX.X.", ".XX....X..X.......XX.XX....X.X.....XX..X..X...XXX.", "..X..X.X.XXX..X.XX...XX.X......XXXX...XX........XX", "X........XXXX..X...X.X..X.XX..X.X...X..X...XX....X", ".X.X.XX.X..X..XXXX...X..XX.XX.XX.X....XXXX....X..X", "X......X.....X.XX.X.X.X.....X....XX...X........XX.", ".XX...X..........X..XXXX...XXX..X.XX..XX...X..X.X.", ".X.X....X.XX...X..XX....X...X..X....XX.....XXXXX..", "......X.X.....X...X.............XX......XX.....X..", "............X..............X...X....XX...XXXXX..X.", ".X.XX......X.......X.....X.XX..X.XX......X.XXXX...", "X...X...X..XX....XXX......X.....XX.XX...X.......XX", ".X.XX..X.XX.X........XXXX.....X.XX..X..X...XX..XXX", "X.XX...X..XX.....XX.X....X...XX.X....XX.XX....X...", ".X.X......X.X.X..XX..X.X..X...XXX....X..XX.....X..", "...X.XX..XX.X....X.X........X.X.XX...XX.XX.XX.X...", ".XXX.XX...........X..X..X............X....X.......", "X.XXXX.X.......X.X...XX......X........XX.X.X.X.X..", ".X.X....X....X.X.....XX....X.XXX.XX..........X....", "............XX....X...XXXX.X..X.X....X.X......X...", "...XXXX.X.........X.....XX........XX.........XX...", ".....X.X.X.X..X.....X..............XX.......X...X.", ".....X..X......X.....X..X.....X..XX.....XX.....X..", "............X.....X...XX..XX..X.....XX..X.....XXX.", "XX..X.X.XXX..X.....X.X.....X.X...X.....X.X.X.XX...", "....X..XX.......X.XX......XX....XX...XX.X..X.....X", ".XX...XX.....X.XX.X..X.......X.....XX.....XX.XX..X"};
    vector<string> candidate = {"X.....XX.X.......X.......X......XX..XX.X...XX.X.X.", "...X..X...X.....X....XX.XX....XX.X.....X....XX...X", ".....X..XXX.X....XX..X...........XX......X...X.X..", "X......XXX.X.X..X.XX..............X...X...X..XX..X", "..........XXXX...........X...XX.......X.X....X..XX", ".X.XXX.XXX.X..X..X...............XX.X.XX..........", "...X...X..X....X...XX..X..X.....X.XXXX..X......XX.", "X....X........XX.X.X............X......X.....X....", "....X...XXX.....X.....XX.X....X..X...X.....X......", "....X.X.........X..X.X..X..X.X.....X..X.X...XXX...", "X.X.......X.XXXX.X.....XX...X.XX.XXXX..XX....XX..X", "..X....XX....X..X...X........XX......XX..X.X..X...", ".X....XX.X.X.XX..X.X...X.XX.X......XX.......X.....", ".......X........XXX..XXX.X........XXXXX.X.X...XX.X", "X....X.....XXX...............XX.X...X.X.XX.....X..", ".XXX..X..X.....XXX............X..X......X..XX...X.", "..X..X....XXX.X....X.X...X....X.X......X.X....X...", "X.X.XXXXX...X.X.X...........XX........X.XX....XXX.", ".....XX.X..XXX..X.X......X..X.....XX.XX..X....X.X.", "..X.....X.....X....XX...X...XX..X......X..X.......", ".X.XXXX......XX.....XXXX..XXX.XXX..XX..X..XXX..X.X", "....XX........X......X.XX...X.XX...X..X.X......XX.", "..X.X.X..X....XX..........XX......X..XX....XXX..X.", ".X......X...X....X.X..X...X..XXXXXXXX....XXX.XXXX.", "X..X.....X......X......X.......XXXX.XX..X.X..X....", "..X....XXX........X...X.............X.XX...X.....X", ".X......X.X..X.......X..X.XX..X..X..XX.X..XX......", "X.X.X...X.X..X...X..XX.X.XX...X.XX.........X......", ".X....X.X.......X..X..XX.....XX...X..X.X..XX......", ".....X.......X.X....X......X.X..XX.X.X......X.X.X.", "..X.X..X......XX...X....X...X.............X....X.X", "X.X........X.X.X.X..........X.X..XX..........X.X..", "XX.X..........XX...X......X.X.X.............XXX...", "...X....XXX.X........XX.XX..........X...X.X.XXX..X", "...X..............XXXX.X.XXX.X...X..X...X..X..X..X", ".X..XX..........X.X....X..XXX..XX......XX.X...X...", "X..XXXX.....XX..X.........X..X.....X.XXXX.X..XX.X.", ".......X....X...XX..X...XX......XX.XX.X.X..X.X..X.", ".X..X.....X..X...X.X...X...X......XX..X.XXX..X....", "X.X..XXX.X.X.....X.X......X..XXXX..X..XX..XX...XXX", "..XX...X...XX.X.XX.X.XX.XX.........XX.....XX...X..", ".XX............XX......XXX...X..X..X.....X...X....", ".........XXX...X...X..X...X...XX......X...X.X.XX.X", "..X.X....X...XX....XX.XXX.X......XXX.X......X.X...", ".XX...X.......X.X....XX.XX.....X..X.....X.X..XX...", "X...X..X..XXX...X.XXX...X...X...X....X..........X.", ".X...X.X...XX....XX...XX..X....X..X....XXX.XX.X...", ".......X.X.X...XXXX...XXX..XXX..X..........XX.....", ".X..X....X..X....X...........X....X.XX.X....XX..XX", "........X.......XXX..X....X.....X..X...X..XX.....X"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 121;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> known = {"..X..XX..X.XX..X..X...X.XX...X.XXX.XXX..X....X.XX.", "XX..X.....X.X..X.XX..X.....XX....X....X.XX.....X..", "........X.....X.........X.XX...X.X....XX..........", ".X....X......XX...X........XX...X...X...X......X.X", ".............X.X...XX......X..X.......X...XX.....X", "X.XX..X..XX.X....X.XX................XXXXX.......X", "X..........X...X.X..X.X.X...............X.X......X", ".X..X.X....X.X...X.XXX.XX.......X.XX....XX...XX..X", ".X.......X.X....X....X..X....X.X...X.X.XX.........", "....XXX...X..X.X.....X.XX......X..XX..X.....X...X.", "X...XX.XX........XX.X.XX.XX..X.X..............XXXX", "...X......XX..XXXXX....X.....X..X.....X.X...XXXX.X", ".X...XXXX....X.X..X.X.X......X.....X.XX..X...X..XX", ".XXX.XX.XXX.XX.......XXXX....X....XX..XXXX.X.X..XX", "XX.X..XX.X....X....XX...X.....X..X.X.X..X...XX....", "......X.X.X....X..X......X...XX.X....X...X....X..X", ".......X.X.X........XX...X.X.X..XX.X..X.X...X..X..", ".X...XX..X..X...X..X.X.X.X.X.....X..X..X...XX.XX..", ".X..X.X..X......X.XX..X.....XX..XX...XX..X.XX.XX..", ".......X...XX..XX....XXX.X....X..X.....X...X.X....", ".....X......XXX..X......X..X.......X......XXX.X.XX", "......X.........X.X.XXXX.X...X.X.....X.X..........", "X.........XX....X......XXX..X....XX..X..XX...XX.XX", "X...X....X.X.X.......X..X..XXX.X..X...X.X..XX.X.X.", "XXX.X.X.....X.....XX......X.X.....XX.X.....X.X....", "..X.X..X..X.....X.........X.X...X......X....X.X...", "..XX..XX.X.XX......XX..X......X........X.......X.X", ".XXX....X.X.....XX.X....X......X.XXXX..X......X...", "..........XX..XX.X..X.X....X.X..X..X.X.X..X.X..XXX", "..X............X.....X.....XX.X...X.X...X...X.X...", "X...X....XX.XXX.....X.X..XX.X.....X.XX..X.........", ".X.....X....X.X...XXX...X..X.X.X.....X..X.....X...", "...X..X.X.XX....X........X.......XXX....X.X.X....X", ".....XX..XX...X...XX.....XX...........XX...XX.XX..", "XX....X..XXXX...XX..X.XX.X.X.............XXX...X..", "...........X..X...X.X......XXX.XX.XX.....X.X...XX.", "X..XXX....XX.X..X......X.XX.X..X..........X.X....X", "XX........X.......XX..XX..XX......XX...XX.X.X...XX", ".X...X....X.XX......X.....X.X...X..XX...X.X.....X.", "....XXX...XX.X..X....X.....X.....XXX.XX......X.X..", ".....X.....X...X.X.......X....XXX..X.....XXXX.....", "...X.......XX.X....X...X.X....X.X...XXXX.....XXXX.", "X..X.XX..X........X..XX.X...X.X..XX..X.X.X..XX..X.", ".X....X...X....X....XX........XX..X...XXX..XX.....", ".X...XXX..X...X...XX...X.X.XXXX....X.X.X.X..X.XX.X", "...X........X.......X.XX.XX.X.X...XXXXX..X...X....", ".X.X.X..XX.....X.X.X....X...XXXX........XXX.X.X.XX", ".....X........X.XX..XXXXX......X.XX.....X..X....XX", "X..X.X...X.X..X..XX.XX..X.X.XX.X.....X....X.....X.", "....XX...X...XXXX.........XX.XX...........X......."};
    vector<string> candidate = {".XX.XXX...X....XX.XX.....XX.XX...X..X.X..XX..XX.XX", "X.XXX..X..X......X.XX.....X...X.........X.X.XXXXX.", "X..X.....X...X...X.X.X..X.X.X..X..XX..X.X.XXX...X.", "X........X.............X...X.X...X..XXXXXX..X..X..", "..X....X..........X.XX......X.X....XXX.X....X...X.", "X..XX..X.XXX..XX..X.X.....X.XX.X.X.XX..X..........", "X...X..................X..X..X..........X.XXX..X..", "........XX.X......X.X...X.......XX......X......X..", ".XX.X....X............X........X.....X.XXXX.X....X", "...X..X..X...X..X.X..X..XX..X.X..X.X...X.....X..X.", "..X....X..XX..XX.X.X.X...X.X............X.X.XXX.XX", "..X....X.XXX..X..X..XX...X..X.X..X........X.X..X.X", "X....X..X.X.XXX...X..X..X.X.....X...X...XX........", "....XX..XX.........X.....X.X..XX..XX...X..........", "X....XXX.X.X..X...X.XX.........X..X.X.X..XX.......", "...X.......X..X.X....X..X.X.X..X..X....X.X.XXX...X", "...X......X.XX.X.XXX..X....X....XXXXX.....X....X.X", "....X.XXX.X.............X.XXX.X...XX.XX.X....XXXX.", "...X....X.X.X..XX..X..X.....XX..X..X............X.", "...XXX..X.........X..XX......X.X.X..X...X.XX...X..", ".........X..X.X........XXXX....X...X..X...X.......", "X...X.....X...XX........XX..XX..X..........XXX.X..", ".X.XX.X..X...........XXXX..X.XXX.XX...X..XX...X...", ".X.XX...X.X.X...........X.XXX..........XX...X.X..X", "..XX...X..X....XXXXXXX...XX.X.X..XX..XX......X..X.", "X.X.X..X...XXXXXX.X.X.X.X..XX.......X......XX...X.", ".X.X.....XX...X.XX....X...X..X........X..X.X.X....", "XX.....X......XXX..................X.X.X.XX.X...X.", "..............X....X...X....XX...X.....X...X......", "....X......X.X....X.XX....X....X......X......X.X..", "......X..XX.....X..XXX.....X...X..XXXX....X.......", "...XXXX..X........X........XXX......XXXX..XXXXXX..", "XX.....X.....X..XX..X..XX....X..X..X.....X..X.....", "..X.............X.....XX....X.....XXX...XX...XX...", "X......X....XX.XX..XX......X..X...X..X..X.X...XX.X", "..X....XX.X........X.X...X..XX...X.X....X.X.X.....", ".....X..X.....XX......X...XX..X.X..X.....XX....XX.", "......XX....XX..X...XX.X.XX....X.X...X......XX.X..", ".....X.XX...X........X...X...XX......X.......XXX..", "...X..X.X.X..X..X..X.X.XX.X....XX..X..............", "..X............X..X.X......X.....X..XX.....XXX....", "..X.X.XX...XX...XX.X..XX...X..X....XXX..XX...X.X.X", ".X.X.X..X.X.XX.X.......XX...X......XX.......X..X.X", "..X.X..X..X..XX.....X...X..X.X.X......X..XX.....XX", "..X....X.X.XXXX.....X..X.X.........X..X.XX....X.XX", "X....X..XX......X...............X.X.....X.X..X....", ".XXXX.......X.X....X.....X......X...X...XX......X.", "..X...........XX.X.X..X..X.........X....XX...X....", "..XX......XX..........XX.XX..X...X....X.........X.", "XXX.XX.X..............X....XX..XX............X...."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 139;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> known = {"...X..X.....X.....X....XXX.X.XX.XXX.....XX..XXX.X.", ".......XXX..XX...X.XXXX.X.X.....X.X...XX.X..X.....", "X.XX......XX....X.X.XX..X....X........X.X....X....", "X.XX..X.X.X.......X.XX.XX.....X.......X....X....XX", ".....X.X....X.X.......XX..X...XX.X..X......XX...X.", ".X...XX.....XX....X....X.X..X..........X.XX.......", "........X.XXX.X......XXX.....XXXX..X.XX..X.XXX..XX", "..X....X..X.X.X......XX..X...X.....X.X..X..X..XX..", ".XX.........X......XXX.X...X...X.....XXX..XXX..XX.", "X......X.......XX.....X..X.X.......X..XX..........", "X.X.......XX.XX...XX.X..XXX...X..........X.....X..", ".XXX........XX.X..X..XX.XXX.X....X.....X......X.X.", "........X............XX.......X...........XXX..X.X", "XXXX........XX......XX......X.X....XX...X..X.....X", ".X..X......X.X...X..X.........XXXXX.X.X.....X.XXX.", "X.....X....X..X..X......XX.X...XXX..XX...X.XX.X.XX", "XX..X..X....X....X..X..XXX.X.X.X...X......XXX..X.X", "X..X.X.X...X.....XX......X..X...X..XX.......X.X.X.", "X.X.X...X.X..X.....X...X.........XX..........X...X", "........XX.X.XX.....XX...XXX....X.X..X..........X.", "X...X..X....X.XX.X.X.X.X.XX..X.X.....X.....X.X....", "X.........X..........X...X.X.......X..XX.XXX..X..X", "X....X....XX......XX...XXX.........XX...X..XX.....", ".X.....XX.XXX.XX...X..........X.X.....X...X..X..X.", ".X...X.......X...X.X..XX...X........X.X.XX.....XX.", "XX.......XX...X.XX.......X.....XX...........XX..X.", "....X.......XXX...X.....XX.....X....XX...X...X...X", "X....X....X....X......X.....X.....XX..X......X....", ".X...X.........XX..X.XXX.X...XX.....X.X.X....XXX..", ".X..XX..X.....X.....X.......X.....X....X.X.X..X..X", "XXX.....X...XX..X.XX..X.X.XX...X..........X.X....X", ".....XX....X..XX..XX...X.....X....XX...XX....XXXXX", ".X...X.X.XX..X.X...XX.XX..X...X..XXX.XXX....X.....", "X....XX.........X.X...........X.XXX...X.......X..X", "XX..X............X.X.X.X..X.X.X.X......X.XX.X..XXX", ".X.X.X.............X.X.....XXX..X.....X..X....XX..", "X.XX.XX.XXX.....XX.XX...X...............X.......XX", ".X..X.X..X....XX.XX...XX.X...X....X...XX..X....X.X", "..X...XX.....X..X.XX.X.X..XX....X.......X.XX..X.X.", ".XX..X.X.XX.......X..X.......XXX.........X.X.XX..X", "...XXXX.X....XXX.X.....X.......X.....XX..XX..X...X", "XX...X.XXX....X....XXX.....X.X..X..XX...X......X..", "....X..XX.........X.XX.X.X.X.....XX...XX.X...XXXX.", "X..X..X.X.XXX.....X..XX...X.XX....X..X..........X.", "...XX.....X.X.XX.X.X.X...X...........X...X.X.....X", "....X...........XX...X...X....X.........X.X..X..X.", ".....XXX..X..X.XX....X.XX.X.......X....X....X.....", "..X....XX...X.X..X..XX...XX....X....X..X..X....X.X", "...X.X....X..XX.......X........XX.....XXX.....X...", "X....X...X.......X.X.X.XX....X...X......X.XX..X..."};
    vector<string> candidate = {".X.X.......X.X..X....X...X.XX..X.XX.XX..XXX.XX.X..", "....XX...........X.....XX....X.X.....XX..X....X...", "........XXX...XX.X.X.X.XX.....X....X..X...X.......", "X...X.........X.....X....X.....XXX........X..X....", ".X.X....X..X...X..X..X.X....XXX...X.X..X.X.XX..X.X", ".XXXX.X..X.X..X.X..X.X.X....X..X.......X....X...XX", ".....X.XXX.X.X..X.....X..X....XX..X.X...X..X...X..", "X....XX..XX.XX..XX.....X...X...XX...X.XX.........X", "..XXX....XX..X..XX......X...XXX.X....X.....X....XX", "X.X..XX..XX.X.....X.XX.XX...X...XX.X...X..........", ".X..X......X.X......X.XX..X.X.X..X......X.....XX..", "XX.XX..XX.X...X.....X...X.XXXX.X..X....X...X..X...", ".X..X......X.XXXX...X..X.......X....X........X.XXX", "..X.XXXX....XXX.X..XX................X.X..X....X..", ".X....X..X.......X....X.XX..X...XX....XX..X.......", ".XX..X.X...X.....X..X..XX..XXX.XX...X...X...XXXXX.", "X.....XX..XX.XXX.X....X.X...X.....X.X.......X...X.", "..X....XX..X...........X......XX..XXX..X......X...", ".X...............X.X..X..X.X.....X.XX.XX..XXX....X", "...X.....X.....X.X.XXX.....X..X...X....X..........", "X.X.X...X..X...XXXXX.XXX..XX..X..X.X.X......X.XX.X", ".X.....X........XXXX..X......X..X...XX.......X....", ".XX...XX..XX....XX.X..XX.......X.X..X....X..X..XX.", "XXX....XX....X.XXXX.X...X....XXX.........X.X.....X", "X..X....XX...XX......XX.XX......X...X....X...X...X", "X..X......X.....X..XX.XXX.XX.XXXXX.....X.X.X..X...", "..X..X..X...X.X.XX.....X......X....X..X........XX.", "X.XX.X.X..X.X...XX..XXX.X..X......X....X.XX.......", "........X.X...XXXXX.........X..XX........X.X...X.X", ".X....XXX....X....X..........X...X....X...X...X.X.", "..XX...X........X...X....XX.........X.XX..XX.XX...", "..XX.X...X....X...X.X.XX.X..XXX....X..XXXXXX.....X", "..X..X...................X.X....XXXX...X..X.X..X.X", "......................X......X.........X..........", "...X.............X..X.XX.X...X......X..X......X...", ".X.....X......X..X...X......X.......X..X..........", "........XX.XX.........XXX......XX.X.XX....X..XX..X", "..X.X.X.X.X...X.XX.XXX....X..X.X..X..X.X.....X.X..", ".X.....X.XXX...X.....X...X....X.X..X.X.XX.X.X.X..X", "X.X.X.X..X...X........X.....XXXXX....XXXXX...X....", "......XX...X.X.X.XXX.........XX..X...XXXX...X...XX", "..X..X.....X.....X.X.X.............X.......X.XX.X.", "X.X.......X....X...XX......XX.....XX.....X.....XX.", ".............XX...XX..XX..X..XX.........XX....X..X", "....X.....XX....X....X..X...X.....XXXX.X....X.X..X", "....X.X.......X.XX..X....XXX......XX....XX.....X..", ".X.....X.X.XX..........XXX..XXXX...X..............", "..X.X..X.X.XX..X.XX..XX....X.XX..X...X.XXX.X.X....", "......X....X.X......XX..X....X.............XX.....", "XX....X..X..XX....X.XX.......X.......X...X...X...."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> known = {"X.X.X...X.....X.XXX...XX.....X.XX.XX....X.........", ".X.X...........X....XX......X.....X.XX..XXX.......", ".XXXX...........XXX...XX....XX.....X.XXXX...X.X...", "..X.....X...X.XX..X.X..X..X........X.X.XX...X.....", "...XX.........X......X...X.X.X..XX..XX..X..XX....X", ".....XXX......X........X..........XX...X.XXXXX....", "X..X...........XX.........X...XX..XX....X.....X..X", ".X..X..X.X...........X...XXX....X.......X.........", "XX.X.XXX..X.X..X.XXX.XX....XX....XXX..X......XX...", ".X....X.XX..X..X.X....X.X.....X.X.X.....X..XX..XXX", ".X......X....XX..XX......X.......X..X...X.....X...", "XXX..X...X.X........X....XX....X.X..X...........XX", "X...X...XX...X.X.X.XXX..XX...XXX.X.X..X...XX.X....", ".XX.......XX.XX.....XX...XXXX...X.XX..............", ".X...X..........X.....X.XXXXX....X......X..X.X....", "X..XX.X..X....X....X...XX.X.X..X....X..X...XX...X.", ".XXX......XXXXX.X...X....X.....X.X.XX.....X..X....", "XXX....X....X.X.................XXX.XXXX.....X....", "X.XX.X.....X.XX.X..X.......XX..X.X....X......X....", "........X.X.........XX.XX........X.....XX.X...X.X.", "X......X..X...X.X.XX.......X..XX..X.....X.X.X.XX..", "X.X.....X.X.....XX.....X..X..X...X.X...X..X.....X.", "...XX.XXX......X..X......XX..XX....X....X.......XX", ".......X..X...X.XXX........XX.XX......XX...X...XX.", "X...X..XX..........XXX.....X....XXX.............X.", "....X........X.XX.....XXX.XX.XXX....X.........X.XX", "XXX.....X......XX..X..XX...X.X..X.......X.XXX....X", "X..XX..X.X..XX..X.....X..X..X.....X...XXXX.XXX.XX.", ".X...........X....X........X...X..X.XX..XX...X.XX.", "..X..X.XX......X..XX..........X.XX.X.XX.X.X...X...", "XX.....XX...XX..X.....X....XXX..X...X....X.X..X.X.", "X.X...X...X..XX...X..XXX....X...X..XXXX...........", "X.....X...XXX..X.X.......X.XXX.X...X...X..........", ".XX..X..X.X....X....X.............X.X...X......X..", "XX.X..XXXXX..X....XX...X.....X.X........XX......X.", ".XX.XXX.X..X...X..XXX..XX..X.XX....XX....XX......X", "..XXX..X.XX..X.........X....X.....X.XX.XX.X.X....X", "X..X..X.XX..X......X....X..X.X..X....X....X.X..X.X", "...X.......XXX.X.........X.XXXXX....X...X.XX......", ".XX....X........X..X..X.......X.XXXX...X........X.", "X.X.X...XX...XXX.......X..X...XX..X...X.....X...X.", "..X.X.....X.....XX..X.X...X..............X....X...", "...X.......XX.X.....X.......X..X...X.XX...X..X....", "...XXXX..X..X.X.....X....X...X.XX...X...X........X", "X......X.X..XX...X..X.X.........X....X..X....XX...", "......X....XXXX.....X.X.X......X.....X..X...X.XX..", "X.....X..X......X.X.........X...XXXXX....X.....X..", "..X.............X....X....XXXX...X....X......X..X.", ".X...XX......XX....X..XX.X.XX...X....XXX.X.XXX..X.", "X.XX.......X....X.....X....X.....X......X..X..X..X"};
    vector<string> candidate = {"X.X.XX......X....X..X.X....X.X...XX.....X..XX....X", "................X...X........X.X...X...X..X.......", "X..XXX.....X....X.....XX...XXXX....X....XXX...X...", ".XXXX.X......X.....X....X.XX.............X..XX....", ".XXX..X.....X.X.XX...X.XXXXXXX....XX......X..X.X..", "XX....X.XX..X......X.XXXX...XX..XXXX.......XX.X...", ".............X..X.......XX..........X...XX........", "..X....XX.....XX..XX.X.XX..X.....XXX..X...X.X.....", "...X...X.XX.XXX..X...X..X.XX.........XX.XXX..XX...", "XX.XX.X..X.XX......X.XX..XXX.XX.X.X..X.XXX..XXX..X", "..XX.XX.......XX.X....X..X..XX..........XX.X.....X", "..XXX.X......X..X..X.XX.XX.X..XX...XX.X...........", ".....X....XXXXX...XX....XX........XX...X...X.X.XX.", "X.X.XXXX.....XX.X.XX.X....X.X..XXXX.....X..X....XX", "...............X........X.X.......XX..X.X.X...X...", "XX.X....XX.....X......X.............X...X.XX.XX.X.", ".....XX..XX.......XX............X.....X......XX...", ".....X...XX....X.XX......X...XX..X..XXX....X....X.", "......X...X..XXXX.XX......XX...X.XXX.XX.X....XX...", "X...XX........XX...X.X......X.X......XXX...X...X..", "....X..X.XX....XX.X....X..XXX........X...X.....X..", "..X.X.....XXXXX........X.XX...XXX.....XX.XX..X..X.", "XXX.....X....X.....X.X.X..........X...X.X....X....", ".XX..XX..X....X.XXX.X..X.X.X......X..XX.X.X....X..", "..X..XX..XX.X.X..X...X..XX.X....X.X.XX.X...X..XX..", ".XX...X...XXX..........X.....X.XX.X.X...X.X.....X.", "X..XX..X..X.XX.X.......XX....................X..XX", "X...XXX....X.X.X........X........X.X........XX....", ".X.X.XX.XXX..X.XX.X.X...X...X...X...X...X.....X...", "X...XX.XXX..X.X.....X...X..XX...X..X......XX....XX", "......X..XX......X...............X.XX......XX.X...", "..XXX.......XX....XX....X.........X.X....XX.X.....", "XX...XX..X.......X.XX.X..X.......X.X.X.X.....X...X", "X.XX.X.XX.....XX.......X...XXXX...X......X....XX.X", "XX.X...X....X......XX.XX..X..X...........X..X..X..", "XX.......X...X....XXX........XX........XX..XXX....", "X...XX....X.X..X..X.....XXX.X.X.X..X............X.", "......X..X..X...X...X...X...XX...XX..XX....XXX...X", "..X.X..X.XX..XXXX.........X..X...X...X.X...X.X....", "............XX....X.X.X......X...X.X..X.XX.......X", "....X...........X.........X.X..X..X.XXX.X....XXX..", "X...X....X..XX....X.....XX..X..X..X.X.X.XX.....X..", "X..X.X..X..X.....X......X..XX.X..........X..X.XX..", "..X.X.......X.X....X.X......X.XXX..X.XX......XX...", ".X.X..X..X....X.XX..X.....X..X...X.XXX...X.....X..", "...X..X......XX..X.X.....XX.....X.X..X...X.X.X.XX.", "..X..X..XX........X..X......X.X.X.X.X...X..XX.X...", "XX...X........XX........X..XX..XXXXXX....X.X..XX..", "XX...XX........X.....X...X.XX........X.X......X.X.", "..X......X....X..X..XX.....XX.X....X.X..X..X...X.."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 102;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> known = {".X............XXX........XXX....X.XX....X.XX......", "X..XXXX..X...X..X..X.X..X.X.........X.XXXX..X..X.X", "...XX..............X....XX.X.X....X.X......X....XX", "X..X.XX.XX......XX..XX.X.XXXX..X.XX......X........", "X.....X.........XXX...X....X..............X....X..", "X....X.......X...X...X.....X...X.X...........XX.X.", ".XX.XXX.......XX.X..X.X...X.X..X..X......X.XX.X..X", ".XX...XX..X.X...X.........X.....X.......XX........", "X...X....XXXX.....XX..XX.X....XX..X.....X.........", "X.XX.XXX...X.......XX...XX..XX.X....X.XXXX.X......", "....X.....XX...X...XX..............X...X...X...XX.", "X.......X.....X..XX.X..X.X.X.XX.X..XX....XXXXX...X", "..X..XX..X.....X..X......X..X.X.X.................", "...XX..X..X......X........XX.X.......X.X.......XX.", "..X...X.XX..X....X..XX.......X.....X.X..XXXX..XXX.", ".X..XX.X....XX.X.XX..X....X.....X......XX...X.XX.X", "X...........X...........X...XX.X....X..X.X...XX..X", ".X....X....XX.XXX.....X...X..X..X..XXX.XX..X......", "X.........X.X....X.X..X.X...X..........X...X.XXXX.", ".X.....X.X.X..X...X.....X....X.X..XX.X..X..X..XX..", "....X...X...XX.X....X...X.....X.X..........X..X...", "X.XX.X..X...X....X...X.XX.....X.....XXXXXX..X..X..", ".......X.......XX...........X..X.X..X.X.X...X..X.X", ".X..X...XXX.....X....X...XX......XX.....X.XX...X.X", "............X....X..X.XX...X...X...............X.X", ".XX....XX....X..XX..XXX.X....X...X..X.XXX.......XX", ".XX.X.X....X..........X.X.XX.XX...X.X.X.XXX..X...X", ".X...X...........X..X..XXX..XXX...X.X.X.X.XX..X...", ".....X....XXX...X......XX.XX.X.X.X.X....XXXX......", "....X.XXX........XXX..X...X....X.X...X.XX..X......", "X.X.......XX..X....XX.......XXX..X.X....X..X.X....", ".....XX.X.....X.X.XX..X.XXX...X.X.......X......XX.", "X...X....X.X..XX.XX..X......XX.X..XX.....X.....X..", "..X..X..X.X........X..............X......X........", "..X.XX.XX.X...........X..XX..X.X..X..X.X..X.X...X.", "X.X....X...XX....X..X.X...X...XX....XXXXX...X.X.X.", "....X..........X..XXX...XX.....X..X.....X.........", ".....XX.....X....XX......XXX......XXX.....X....X..", "X.XXXX..XX..XXXX....X..XX.XX.X.XX....X...X........", "....X.....XX...X...X.X.....XX..X.....XXX.XX..X...X", "...XX.....X....X...X...X....X....X......X..X......", ".XXX...X...XX......X.....X..X..........X...X...X..", "...X.....X...X...........X.......X..XX..X...X..X.X", "X.....X.X.XXX....X........XXXXX.X.....X...X.X.....", "..X.X...X....X...XX......X..X...X...XXXXX...X.....", "..X.X....X....XXX.........X.X..X..XX...X........XX", "X....XX....XX...XX.XX.....XX..X..X..X.XXX..X..XXXX", "..X..XX.....X.......X..X.XXXXXXX..X...X..XXX.....X", ".X...X.....XX..X....X.X..XX...X..X.XXX...XX.......", ".X...X.XXX....XXX...XXXX...XX............XX.....XX"};
    vector<string> candidate = {"X.XX...X..XX..XX...X..XX.XXX...X.....XX..X....XX.X", "X...X...X...X......X....X.....X..X.....XX.XX.X..X.", "...X....XXX.X.....X...X.......X....XXX..XX....X...", ".XX..X.X....X...X..XX.X.X....X..X.....XXX......X..", "...X.....XX...........X.X.XX..X...X....X...X...XXX", "........X..X....XX.....X..X.X.X...XXX.XX....X.....", ".XX.....X.X..XX..X......X..X....X..X.X......X...X.", ".XX.X....X.XXXX.X.X.X.XX...X..X.X...X....XX..XX...", "..XX......X..X.........X...X..XXX.....X.X....X....", ".......X..........X.X....XX.XX..X..X..X...X....X..", ".....XX.X..XX...X.X....XX..X.......X.....X.XXX....", "X...X.......XX...X..X.XX.XX.......X...XX..XX......", "X....X.....X....XXX....X.X.........X.XX..XX..X....", ".X....X...X.X..X.X.X.....XXX...........X....XX....", "...XX.X..X......X................X....XX....XXX...", "......X..XX.X...X.................XX...........X..", "...X...X.X..X......XXXX.X.XX...X..XX..X.X..X..XX..", "......X....X......X.XXX..........X..X.....X.......", "..X.X..X....XX.XX...X...X......X..XX.XX....X......", "..X..X....X.....X...X.X......X.X....X.X....X.XX..X", "XX.....X...X..XX....X..X.........XX.........X..X.X", "....X.X......X......XX.XXXX..X.X.XX...X.....XX..XX", "XX.X.....XX...............XX.......X..X..X..X.X...", "X.......X..X.X.X.....X..X..X.XX.X.X.....X....X....", "X..X....X.X..X.X.X.X......X.XXX.X.X.........XX...X", ".XXXX..X..X.......X.X.X..XX.X.X....XXXX..X.X.X..X.", "X.....XX.X..XX.X.X.X...XX...X....X......X..X.X....", "X.X..X.XX....XXX..XXX.XXXXXX.....X..X.....X.......", "..X.XX.X..X..XX.X............X.X......X........X..", "X.......X..X...X.......X.XX..XX..XX..X..X.......X.", "X.X..XX....X.XX.....X...X...X..............X.....X", "..X......X...X..XX........X...........X....XX..XXX", "X.........X...X...X....XXX.X..X.X.XXX......XX.X...", "X..X.....X.....XXX......X.....X....X.X..X.XX...X.X", ".X.....X...X.XXX...X...XXX...X...X....X..X..X.....", "..XX...XXX.......X.....X...XX..X.XX.XX..X.........", "..X..XX..XX.X...X....X..X.....X.....X.....XX...XX.", ".X.X.XX.XX...........X..XX.......X..X.X..X..X...X.", ".XX..X...X........XX.X...........XXXXX..X....XX.X.", ".XXX...XX...XX...X....X...X.X.XX.X..X.X..XX.....X.", "XX..X.X..XXX...X..X.X..XX..XX.X.XX..XX.XX.........", "..X..X.XX....X...X.X..XX.....X.X.XX.X....X...XX.X.", "X..XX....X.X......XX......X...X.......X..X.X.X..X.", "...X..X.......X..X.X.X.X.....X.XX.X...X.X.XX......", "....X......XX..X.X.......X.........X..XXX.....X..X", "X.X......X..X..XXX..X..X......X..X..X.XXX..X......", "......X.....X...X...X..X.....X.XXXX....X..X....X..", "X...X.....X..X.X.X....XX...XXXX..X.....X.XX....X..", "......X...X..XX....XXX.....XXX..X....X....X.....X.", ".....................X...X..X..X..X..X............"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 123;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> known = {"........X.X..X.XX..XX..X....X...X...XX.X......X...", "X.......XX...X..........XX.X.XX..X..X....XXX......", "XXX..X...XXX...XX..XXX.X...XX...........X.X..XX..X", ".X......X...X.X.....XXX...XX.X.X...X.XX..........X", ".....X....X.X.....X..XX...X.X..X.X...X.X.X.X.XX..X", "X.XX.X..XX.X..XX....X....X.X....X........X......XX", ".....X........X...X....X..XX..X...XXXXX...X..X....", "X...X.X....X.....X..XX....X.X.X.X.XX.XX...X......X", "X..XXX.......XXX...X......XX..X..XX....XX...XX....", "........X..X.XXX...X.X.XXX......XXXXX..XX........X", "X..XX.XXX....X.......X.X....X...X..XXXX....X.....X", "X..X..XX....XX...X.......X.....X..XXXX............", "...XX.........X....X...XX..XX....X..X....XXX......", "..X.X.XXX.....X........X.X.X..X....X.XX.XX.......X", "XX..X.X..X..X.X.X....X..X..X.XX....X...........X..", "..XX.X......X.X..X.......XX.XXX..X.X..X......XXX.X", "...X.XX.....X....XX.....X......X.X.X...X....XX....", "XX.XXX.X...XX....X......X...........X...XXX.......", ".........X.X....X..X..X....X...........X..X..XXX.X", "..XX....X.X..X..X.XX..X.............X.X.X.X.X.X..X", ".X..........XX.............XX................XXX..", "..X.X.X....X....X...XX.X..X.X....XX..........XX...", "....X....X.......XX..XX.X..X.....................X", "........X....X.....XXXXX...X..X..XX..X.X.......XX.", "X..........X.X.X......X.XX...X.X..X.X.X.X.XX.XX.X.", "X...XXX...X..X.X.X.X..XXX......X..X...XX.X...XXX..", "X......XX....XX..........XX..X.....X..X...X....X..", "...X.X......X.....XXX.X....XXX.....X.....XX.X.XX..", "X..X.......X........X...X.....X.X....XX..X.....X..", "...............X......XX.X......XX.....XXX...XX.X.", "...X.X......X.X.X..X.XX..XX..X....X..X.XX....XXX..", "..X.XX.....XX..X.X..XXX..X...XX.X...X..X...X.X....", "......XX..XXXX.....X...X.X.XX.X....XX...X.......X.", "X..X.X.XX...X................X.X..X.....X.X.......", "XX.X........X.......X.XXXX.X....XX......X.....X...", "...X.X...X.X.X...XXX..........X...X..X..XX.X.....X", ".XXX.X.X.....X.....X...XX.XX..X.X....X.....X.....X", "...X...X.X..XX..X..X.X....X.X.X...X...............", "..........XXXX........XXX..X.X..XX...X.X.....X....", ".XX.........X...XX.....X.....X...X..XX.X.XX.X.XX..", ".XXXX.XX.XX...X..XXX...X..X.X.....X......XXXX..X.X", ".....X...X......X.X.XXX..X..........X.XXXX..X.X.XX", "XXXXX.X....XX.X..X....X...X.XX..XX.....X.......XX.", "..X..X.XXX....XXX........XXX.......X..X.........XX", "X....X.....XX..XX......XX.XX..........X.X...X..X..", ".X....XX.XX.XXX...X.X..XX.X........X......X..XX..X", ".X.XX..XX.....X.XXXX...X..XXX........XXX.X......XX", "XX..X...XX.X.......XX...............X..X...XXXX...", ".X......XX...X...X.X....XX.X....X...XXX...X..X.X..", "....X.X.XX...X.X....X....X..X...XXX...X....XX..X.."};
    vector<string> candidate = {".X..X..X...X..X....X.XX.X..X.X.....X.X..XXXX...X..", "..X.X.XX...XX.X..X....X.X...X.X..XX.XXX.X...X.....", "..X..X..XX..XXX.X......X..XX...XX.............X.X.", "................X....................X.XX..X...X.X", ".....XXXX...X..X.X..............X.....X..........X", "...XXXX.X.....X......X..X...X..X..........X.XX....", "..X.XX......XX....X...X.....XX..XX.X...XX....XX...", ".XX......X....X..X........XX........X.XXXX...X....", ".X.XX.X..XX..X...X..X.X..X.XX.XXX.X..X.....X.X..XX", "....X...X..X.XXX..X.X.X........X.X.X.X.X......XX.X", "....X.X......X..X...X..XX.XX....XX.X..X.X.X.....X.", "...XX.XX.......X..X.....X...X..X..XXXX..X.XXX.X...", "XXX.X...XXX....X....X.X..X.....X........XX.X...XX.", ".X.X..X..X...X.......X..XX...X..X.X.......X.XXX.X.", "..X............XX.X.............X....X..XX......XX", "......XX.....X......X...X....XXXX..X...X..........", "......X.X.XX.....XX.....XX.XXXX.X...XX.....X.XX.XX", "X....X...X....X..X.X..X.XXXX..X...........X.....X.", "..XX.XXXX.X.........XXX.....X.....X.XXX.XXXX..X..X", ".X.X.X.X....X....X....X.X..X...X...X.X..X........X", "......X...X..X.........XX..X.X...XXX..XX.XXX...XX.", "X...X.X...XX.X.XX.X.X.X.XX...X..X....X......XX..XX", ".X...X........X...X.XXX.X.....X...........X.X....X", "X.XXXX..XX.....XX.....X.........XX.X........XX...X", "XX.XX....XXX..........X....X.X......X...X........X", "X.X...XXXX....X..X.X.....XXX.XX..X..........XXX...", "..XX.X.X..X.XX....X..X.XX...X....X.X.X...X.......X", "XXX..X....X.X.X...X.......X..X..XX.XX...X.X..XX...", ".....XXX...X.......X...XX......X..X....X...X.....X", "........X...XX.XX..XXX......X...X.......X.XXXX.XXX", ".X.........X..X..XX...........X..X.X..X.......XX..", ".X....XX...X........X.......XX..X...X....X.......X", "...XX....X.X..X....XX.....X....X.X..X....XX..X.XXX", ".........X...XX.XX..X......XX.X.XXXX....X....X...X", "..X............X......X....XXX.XXX......X.XX.X..X.", "....XXX....XXX.X.X.X..X......X.....X...X.....X...X", ".....X........X.......XX....X.....XX..XX.....X.XX.", "X....X.X......XX..XXX..XX.....XXX..XXXXXXX........", "X.X............X.X....X..X........XXX..X.X.....X..", "..XX....XX..X..X.....X....X....XXX.X....X....XX...", "X..X.X..X..X......X..X..X..XXX...XX.......X.X.XX.X", "......X....X.X....X.....X....X...X.XX......XX.....", "X.X.......X....X...X.X.XXX..XX.XXX...X.X.........X", ".....X.....X......X.XX.....X...X.......XX....X..X.", "...X....X......XX..X.XX....X...X.....XX......X..XX", ".....X.X....XX.XX..X....X....X.XX...X...X..XXX...X", "....X.XXX.........X.....XX........X.XX............", "XXXXX.....X.............X.XX.......XXX....XX.XX.X.", "...XX..XXXXX.X.........XX...X........X.....X......", ".X.....X....X....X..X.X.X..X..XXX.....XX.XX......X"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> known = {"...X..X.X.X.......XX...XX....XX....X.XX..XXX.....X", ".XXX...X....XX.X......XX...........XXX.X.......X.X", ".....X..............XX.....X.X.X..X.XX..........XX", "...XXX.X.X..X...X...X...X....X......X....X....X.XX", ".......XXXX......X....XX....XX.....X.XX..X.X.X...X", "..X....X....X........X...........X..X.X.X....XX...", "X...XX..X.X...XX.X.XX........X......XXX.........XX", ".XX..X..X.......X..X...XX.XX..XX...X..XX....X.....", ".X.........X...X......X...XX...X.....XX..X.XX.....", "X...X.....X..X.XX...X.X.X.........X......X.X..X...", ".....X.X.X..XX......X.X....X....XXX.XX...X........", "....X..XX....XX........X.....X.X....X....X..X.XXX.", "XXX.XX..........X...X.X.....X.X....X......X.......", ".X...X..X.X.................XX.....X..X..X..X.X...", "..X........XX.X.........XX..X.................X.XX", "..........X..XX.X.X.XX..X.XX........X.XX...X......", "..X....X.XX...X...X....X.....X...XXX.X.X.X..XXX...", "..X...X..............X....XXXXX..X.XX......X......", ".XX.X.X.X......X...X..X...XX..X........X..XX..XXX.", ".....X..XX.X......X.XX........X......XX....X.X....", "........X..XX..X....X.....X...X.XXX.X....X........", "....X....X.............XX.X.........X.X.........X.", ".X..X......XXX...X.X...XXX..XX.......X....XXX.X...", "......X.X.X...XXX..X..XX.......X....XX.......X...X", "X.......X.XXX...XXX.XXX.......X.XXX.....X.X.XX..X.", "XX...XX...X..XX.....XXXXX.....X.XX..XX.X....X.X..X", "........X..X.X..XX..X.....X....X...XX...X..X......", "........XX..X.X...X......X...X..X.X..X.........X..", ".XXX......X.....X.....X.................X.X......X", ".....X.X..X...........X.XX...X....XXX...........XX", "X.X....XX..XX.X...X.XX.....XX...X......X...XX.X.XX", "....X..X......X..XX.X......X..X.....X..X.XX..X....", ".X.X...X.X...XX...XX.XXXX........X.XX......X..XXX.", "XX.X...X..............XX....X....X....XX.X..X.X..X", ".XX...........X.X......X....X.X.X......X.....X...X", ".X....X....X....X.X..XX.X..XX..X.X....X.......X..X", "..........X....XX..X...X.X.X..X.X..........XX...X.", ".X....X.X.X.X..X......X........X.XX....X..X.X.....", "..X...X.....XX..X...XX..X..X...X..X.....X..XX.XXXX", "...XXX.........X.XXX...X.....XX...XXXXX.X.X..X....", "...XXX......X.XX.X..X..X....X.X..........XX.....X.", "..........XXX.X.........X.X...X.......X..........X", ".X..XX........XXX..X..X..XX.....XXX.X...X..X.X..X.", "X...X...X.XX.XX.......X..X..X...X.XXX..X....XXX..X", ".....X.XXX.X....X..X..X...XX.....X.X.X..X..X.....X", "...X.XX.........XX..X.X......X..XX.X...X...X.X.X..", "....X....XXX......X.......XXX..X.XX........XX.X...", "X.........X.XX.XXXX.X.X..X.XX....XX.....X..X..X.XX", ".X..X.X...X..X..XX....X......X..X.....X..XX..X.X..", ".X...XXX.X....XX..X...XX..XX.X..X.XX.....X...XX..."};
    vector<string> candidate = {"....XXX...XXX..XX..X.X..X........XX..X....XXX....X", ".X.X.X.X.X...X..XX.X.X.X.X....XX.X...XX........X..", "..X.X.X.....XX...XX.X.....X.X....X.XX...........XX", ".X....XX.....X...X..X...XX...XXX...X.X..XX.X..X...", "..X..X.X...X...XX..X...X.X......X..XX.X.......X.XX", "XX.........X..XX.X.XX.XX.........X..X..X....XX....", ".XXX.X.XXX.X.XX...............X.XXX.X..X....X...X.", "..XX..XXXXXX.....X..X.......X.X..X....X.X.X.X..X.X", "..X.X.XX.X..X.XXX......XX.X..X....XX...X...X......", ".X...X...X........X.X.X..X...XX.....XX..X.XXX...X.", "X..X.X.........X..XX....XX.X...X.XX....X.X.X.XX.XX", "........X.XX.X.X.XX.X.X..X.....X.....X...X.......X", "X....XXXX....X.XX.......X...XX..XXX......XX...X...", "XX.X...XXX...X.X..X.X.X..X.XXX.X.X..X...X....XXX..", "..X.X...........X......X.X........X...X..X....XX..", ".XX.X....X.X..X...X.....X..X...........XX.X.......", "...X.....X.X.XX.XX.X.X...XXXX.X....X.....XXXXX..XX", ".X..X..X.....XX.....XX..........XX....XX...XXX....", ".....XX..XX.........X.XX.XX..XXX..X...X..X..XX.XXX", "X...............XX.....X...X...XXXX....X....XXX.X.", "..X..X......X......X..X..X.XXX.XX.X......X.XX.X...", "..X.......X.X.....X......X.XX.X.....X....X...X.X..", "....X.XX...X.X...X..X...XX..X...X.X.X.X...X......X", "........XXXX....X..XX......XX....X..XX..X...X..X..", "........XX.....X....X...X..X.X....X.......X...X...", "........X...X.X.....X..X.X........X.XXX.XX.......X", ".XX....X.X.......X..XX.X......X..X..XXX..XX.X..X..", "X....XXX..........XX.........X..........X......XX.", "....XXX.X..X..X....XX.X.X.......X.X...X.....XXX...", "..X.....X.....XXXX...X..X.X.X.X..X...X......XX.X..", ".....X...X.XX..X........X.........X.X........XX...", ".........XX.X...X.........X..X.....XX..XX........X", "X....X....X.X.....X.XX...XX.XXX.....X...X.XX.X.XX.", "....X...XX..X...........XX...........XXX.X..X.XXX.", ".X.....XX.....X.X......XX....X...XXX.....X.....X.X", ".........X.....XX.X.X.XXX..XX..XX......X..........", "X.X.X.X...X....X.X..X.X.X.X.X.X..XX.XX.XX.XX....X.", "........X.X...X....X.X.X..X....X......X.X...X.....", "..X.....X.....X..X..X...XXX....XXX.XX.XX.......XXX", ".....X.XX..X....X.X...X.................X........X", "...X......X...X.....X.X.X.XX.X...X.X.X.....X.X....", "..X.X......XX.......X.X.X.X.....X...X..XX...X....X", "...X..X.X.X..XX...X...X........X.X.X..X......X..X.", "X..XX........X......X.X.X.XX.X....XX.X..X..X.X....", "...X....X...XX....X......X.X..X.X........X.X...X.X", "...X.XXX..X.X.....X.X....X.X..XX......XX.XX.X...X.", "XX...X..........X...X...........X..X.........X.X..", "..X..XXX..X....X.....X.X.X...X.X....X...XX.X...X..", "XX..X.X.......X..X...X...X.XX.....X.......X.XX..X.", ".X...X......X..X.....X..X...X.X...X...X.X.......X."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 124;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> known = {"..X..X..........X...X.X.X...X...X.....X.......X...", "..X..XXX...X.XX.X........X.XXXX.XXX.X..XX.X.X.....", ".XXX..X.......X.X.X.X..X..XXX....X..X.X...........", ".X....X...X......X..X.XXX..X......X..XX.XXXXX.X.X.", "..X....X........X...X..XX.XX......XX.......X..XX..", ".........X.X................X...XX.X.X..XX........", ".X.XX........XX....X....X..XX.....X..X.X.X....X..X", "XX...........X....XX.............X.X........XXX.X.", "X..X......XX...XX....XXX....XX..XX............X.X.", "..XX.....X...X.XX.XX...X..X..X............XXX.....", ".X....X..XX.X..XX...XX...X..X...X..X...XX...X....X", "..XX.X........X...XX.X.X.......X.X.X......XX.XX...", "X......X.......X..XX.X....XX...X..X..X...X....X.X.", "X..X........X....XXXX...........X....X..X...X.....", "XX...X.X...X.....X...X....X..XX.X.......X...X.X.X.", "X....XXX...X..XX..X.X.X...X......X.X....X..X.XX.X.", "......X.......X.X......X.X.X...XX..XX...X......X..", "..XX..X.XXX..X.X.....X.X.XX....XX...........X.X.XX", ".....X........XX.X.....X..X..X..X..........XX.XX.X", "XXX..X.X...............XX....X....X.........X....X", "......X....X......X..X.X.....XX..X.X..X..X........", "...XXXX.X...X.XX.X.XXXX.X...X.X.....X............X", ".X......X....XX..XX..X......XX......X.............", "X.X......X...X..X.....X.X.X......X..X.XX...XXXX..X", ".....X..X..X...X.X..X.X.......X.X.X..XX..X.....X.X", "...X.X....X..X....X..XX....X..X.X..X....X..XX...X.", ".X.X.X...X.....X......X.........X...X....X....X...", "X..X.XX..XX...........XX....X...X....X.....XXXX.X.", "....X...X.....XXX..X.X..X..XX...............X.X.XX", "..XX..X.X.........X...X.XXXX...X.X..XXX......X.XX.", "..XX......X.X....X......X..........XXX..XX...X.X..", ".X..X.XX.....XXX...X..XX...XX...XX.X..X.X.....X...", "X..XXXX..X.....XX.......XX.....X.X......X.XXXXXX.X", "....X...XX..X.XXX.....X.X.X.X..X...XX....X.X..XXX.", ".....XX...X....X......X.X....X.....X...X.XX...X...", "..X....XX.XX..X.X.X.XXX....X..X........XXX.X.XX..X", ".XX...X..XX..X.X..........X......X..X...XX....X..X", "X..........X....X..XX....X..XX...X.............X..", "..XXX.XXX........X..XX.X.XXXXX.....XXXXXX..X..XX..", "X......X.XXX.X......XXX....XX.X.X........X....X...", "..XX...X.....X......X.X.X....X...X.X.XX....X..X...", ".X.X....X..XX.XXX...X....X..X..X......X.....XXX...", ".X..X.........X........X...X....X........X..XX....", ".......X.X...XX.XX................X.XX.XX.X.......", "X......X......X....X.XX.XX..XX.....XXX.........XX.", ".....X...XX.....X.....X.X.X.X....XX........XX.....", "XX..XXX....X.X..X..X.......X.............XX..X....", "X..X..XX...X......X...X.....X.....X...........X...", "..XX.X...X....XX.X..X.X...X....XXX.X.....X..XX....", "...X..X....X..XXXX.XX..XX.....X.X..XXX.X....XXX..."};
    vector<string> candidate = {"XX.X...X.XXXX.X..XX.X.X.....X.X.XXXXX...X.........", "........X...X..X.........X...X.XX...XX...X....X...", "X.X.XXX.............X....X....X.X....X..X..X...X..", "...X.X..............X.X..X....X....X.X..X...X.....", "..........X.X....XX.X..X.....X....XXX......XX.....", "XXX..X.XX..XX.X..XX......XX..XX..X.X...XX..X....XX", ".X....XX.XX.........X....X....X..XX...X...X..X....", "X...XX..X...X....X..XXX...XX......X........X..X...", "XX..X.X.XX.XX....X.....X....XXX..X.XXX...XX.X.....", ".X......X........X.X..X.XXX..X...X.....X.X.X....XX", ".XXXX...X.X.XX..XX..XXX..X.....X....XX..X..X..X...", "X.XX..X.............X........XX......X..XX.XX.X...", "......X.X.X...X.....X..X.X..X.......X.XX.XX.XX....", "X...XX.X.......X.XX.....XXX.X.X...X.X.X.X.........", ".XX...X.X.X.X..X..XX..XXX...X....X.X.....XX.X....X", "X...XX....X......X.XX.......X.X....XX.....X...XX..", ".....X.X..X..X.X.X.X......X.X...X...X..X....X.....", "...........X..X.XX....X.X..................X.X.X..", ".X..XX......X...X...XX.X.XX.....XX.X.X....X.X....X", "....X........X.X....X...X......X............X..X..", "..XX..X.X.X.X..X...X..X....X......X.XX.X..X.XX.X..", "X.........X.X........XX...X..X...........X...X....", ".XX...X.XX......X...X...X.XX..XX..X..XX..X...X.X..", "....XX.XX........XX..X..X.....X...X..X..X.X.XX.X.X", "..XX...X.XX....X.X..XXX...X.XX..X......XX......XX.", ".XXXX......X.....XXX.X...XX...X.....X..XX.X.XX.X..", "...X.XX.........X.X.X.......X...X........X.X..X...", "X...X..X.............X..X.XXX....XX.X......XX..X.X", "X....X....X.X.X.X...XX......X...............X.....", "XXX....XXX........X.X..XX.X...XX....XX.X.XX...XX..", "X......................X.X..X.X......X.X.X.....XX.", "XX..X....X..X....XXX......XX.......XX.X...X.....X.", "..XXXX.X......X........X..X......X...X....X.......", "X.X........XX..X...X....X..XX.XX..X...X......X...X", "...X..X.X..X...XX..X.....X...X.XX.......XX......XX", ".....X..X..X..X........XX....X....X.X.......X..X..", "....X....X...XXX.X.........................XX.X.XX", "X...X...X.....XXX....XXXXX...X.......XX.....XX...X", ".XX..X.....XX.XX.....XX...X.....XX..XX..X.X.....XX", "..X........X.X...X.XX......XX...XX.XXX...X.X..X.XX", "X.....X.X...XX....XX....X.XX...XX..XX..X..XX....X.", "....XXX....X..XXX......XX...........X.XXX..X......", "......XX.XXXXX...XX....XXX........XX.XXX....X...X.", "XXX........XX.....X......XX...X.X.XX.X.XX..XXX....", "....XX..X....XX..X..X.X....X..X...XX.X....X..X..X.", "..........X...XXX.XXX..X.......X.......X.......X..", ".X......X....X..XX.X...X.X...XXXX.X.....XX....X.XX", ".X.XXXX..XXX.X.XX..XX...X..............X...X.X....", "XXX.X....XX....X...X....X.XX...X......XX.....X....", "XXXX....XX.X..X.....XX.X.X.XX...............XX.XXX"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> known = {"X...X.X.XX..X.X...XXX...X.X....X..............X..X", ".XXXX...X..XX.X..X....X.X..X.....X.XX..XX..X....X.", "....XXX.X.X.....X....X.X.X..X.X.XX.X.X.X.X.X.....X", "..X..............XXXXXX...X..X.XX.....XX.........X", "X.......XX....X.X.XX..X..X...X..........X..X..X...", ".X.X.......X.X....X.X.X.X....X.X...X.X.X..XX...XX.", "..........XX...X..X.......X.X..XX...X.X.X..X....X.", ".X..X.XX.....X..X...X.XX.X...X...X.X..........XXXX", "X.X.X....X.X.XXX........X............XX....X....X.", ".....X............X.X....XX.X.X.X.X...XX....X..XX.", "....XX........X..XX....X..X.X..XX......XX..XXX.X..", "X.X..........XX..XX.X...XX.........X...XX.........", ".......X.X......X........X..X...X...X........X.X..", ".....X..X..X.X.X.X...X.......X..XXXXX...XXXX.....X", "...........XX.X.......XX.......X.....X.X..XX....X.", ".XX.XX.X..XXX.....X..X...X...XXX.XX...XX.XXXX...X.", "..X..X.X.X....X.XX.....X........X.X..X......X..XX.", "..X.XX..........X..X.....X..X...XX....X.........XX", ".........X...X...XX..XX..X.X.........X.X......X.X.", ".....X..XX........XX..........XX.XX...X.....XX.X..", "....X....XX.XX.XX.X..X......X............X.X....XX", ".X.X.........X....X.X...X..X..X...XX......X...X...", "X..X.X..X..XXX.X.XX....X.....X.X..X...X.X..XX.....", "...X.X....X...X......X...X......X.X...X..XX.X.X.X.", "XX.....X..X...X...X.X.X..X.X.....X...X.........X..", ".X..X....XX.X..X.X.X.XX..X....X..X..X....XXX.....X", "...XX.XX.X......XX.XX..X...XX..X..X.....X.........", "XX......X..XX.X........X..X..X..XXXX.....XXX..XXX.", "........X...X..XX....X....X....X...X......XX.X....", ".X......X..X.......X..XX....X...X..........XXX.X.X", "..........XX..X...X..X.XX..XXX..X.X............XXX", "..............X..X....XX.X..........X...XX...X.X.X", ".XX...X.......XX...XX..X.X...X.........X.XX.......", ".XX............X..XX..X...XX.X.XX....XXX.X.X.....X", "X..X.........X.XXX.XXX.XX.X....X..X..X...X.......X", ".X.......XX..X...XXX..X.XXXX.....X.....X.X.......X", "....XX..X........X.X.XXXX......X.......XX...X....X", "X..XX.............X.....X......X..XXXX....X.X.....", "..X.X.X...X..X.X..XX..........X.X....XXXXX......XX", "X......X..X.....X.X.X.XXX......X....X...X.X..XX...", "...X...X...X.....X..X..X......X.X..XX......X..X.X.", "X..XX.XX....X..........X....XXX.X..X.X....X...X...", ".X...XX....X.X...X..X.......X...X.X..XX....X..X...", "....XXX.X...X........X......X..XX.X.....X.........", ".X.X.....XXXX..........X...XX....X..XXXX.......X..", ".X....X.X............X.....X...X..XX...X........X.", "X.X...XX....XX..XX.....X....XXX.......X...X....X..", ".....XX.XX....XX.....XX......X............X.X.X...", ".X..XX......XX....XX..X...X.....X.X..X...XXX......", ".X...X......X..X........XXX..X...X...X.........XX."};
    vector<string> candidate = {"XXX.XX..X.XX..........X..................X..XX...X", ".....X..X.X.....XXXX.X.X..X........X.X....X..X....", ".XX....X....X..X..X.....X...X.............XX..X...", "...X.....XXX......X.XX.XX..X..X...........X..X....", "....X.XX.XX.X.XX....XX..X..X.XX..X...X.XX......X..", ".........XX...XX....X......X...............XXX.X.X", "....X.......XX...X..X..XX........X....X...X.X.....", "XX..........X.X.X..X....XX....XX..X..XX.X....XX.XX", ".X....X.XXXX.....X..X..XX.XXX..X......XXXX.X......", "X.XX..XX.XX.X...X.X.XX........X.......X.....X.....", "..X...X.X....XX..XX.....XX.X.....XX...X......X....", ".X....X.....X...X.X..XX..XX.X...XX...XX...X.......", "..X........XXXX....X..X....X..XX....X...X..X.X...X", "X.XXXX....X.......X...X.X....X.X.X......X..X.XX...", "..X.XXXX.X......X..X.......X......X.........X...X.", "XXX.X.X..XX....X.....XXX...X...XX....X.......X..XX", ".X..X.....X.....XX.X.X.X......X.......XXXX.....X.X", "X...X..XX.........X.....X...XX...XX...........XX..", "...X.X.XXX.X.X..XX...X.XX.X..X.......X....XX...XX.", "X..XX.X....X..X...X...XX..X..X....X....X.........X", "....X...X..X.X..X...X.XX.XX...X...XX.XX.....XX....", "...............X.XX....X.........XX..XX.X.X.XXX...", "XXXX.XX.XX..X.X...X.X.X..XXX..XX.X.....X......X.X.", "..XXX......X.X.......X..XXX..XXX........XX.XX.XX..", "X..XX..X...........X.......XXXX.XX.X.X....X...X..X", ".XX.....X......X.X...XX.X.X..X...X................", "X........X...X....X..X....X......X......X.X..X..X.", "X..........X..X...X..........X........X.X..XX...XX", "......X...X....XX..XX....X.X..X...........XXXX..XX", "..X..XX....X.X.X.XXX....XXXX.X...X..X...X..X.X..X.", "..X....X..X...........X.X..X.......X....X.......XX", "...XX...X...XXX.X.X..X......XXX...X.X......X.XX.XX", "...X..X...X...XX...XX.........XXX...X...X.XX......", "......XX.X..........X.X....X.........X..X....X.X.X", "XX.X....X.X............X...X..X..X...X.X....X.XX.X", "..X.X.X.....XX.XX....X....X.....X..X..XX......X...", ".....X..X.....X.X....X..XX....X..X.X...X........X.", "XX.X.....XX..XX...X....XX...X.XX...X..X....X..XXX.", ".X..X....X.......X.X...X.XX.X..XXXX..X.X.X....X...", "....X..X...XX......XXXX..X..X....XX....X.XX..XX..X", "..X.......X....X.......X..X....XX...XX.X..X.X..XX.", "....XXX.X....X..X..XX.X...X.......X........X..X..X", "..X.X.X.X......XX.X.X......XX......X.X.X...X..XXXX", "XX....XX..........X...X.XXXXXX.XXXX..X.XXXX....X.X", "X....X...X.X..XXX........X.X.X..X....X...........X", "..X..X.X.XX..X.X..X..XX........XX..XX...X.X.X.X...", "X..X......X..X....X.XX.XX......X.XX.X...X..XX.....", ".X..XX.X......XX..X........XXX...........X..XX...X", ".XX...X.XXX.X......X..X...X.X...XX.....X...X...XX.", ".....X.XX....XX.X...X..X.X....XX....X......X....XX"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> known = {"X...XX.....XXX..XX............XXX....X....X.XX.X..", "..X....X..X...X.X......X...X.XX.....XX.X..X.......", ".....X...X...........X.X.......X...XXX.......XXX.X", ".X.XXXX...X....X...XX.X.X....X..XX.X....XXX..X..X.", ".X........X....X.XX...X..XXXX...X........X.....X..", ".........XX..X...X..........XX.....X..X.X......X..", ".........XXX..X......X.X..X.X.X.XX.X..X.X...X.X..X", "X.X...X..X.....X..XX.X....XXXX....XX...X..X...X..X", "..X.X......XX.XX...X.............XX....XXX.XX..X.X", ".X............XX.X.......X.XXXXX.X.X.X....X.X...XX", "X........XX.X.X...X......XX.....XX...X.X.X...X.X..", ".X...X.XXX...XX........X..X.XXX........X.....XXX..", "........X.XXX..X..........XX.X.....XXXXX..XX....X.", "......X..X.................X..XXXX.XX.....XX.....X", "..X..X...XXX.X......X......XXXXXX.X..X.XX.X..X....", "X.......X..X.XX....X.....XX..X.X........XX........", "..........X......XX...X.....X........XX..X.....XX.", ".X.XXXX..XXX...X.XX.....X.XX...XX.X.....X...X..XX.", "..X.X..XX...X.X..X......XX..........X........X..XX", "....X..X..X...X....XX......X.XXX....X.XX...X..X...", ".X...X......XX...........XX...X.X.....X..XXXXX....", "....X...........X..X.X....XX.XX.X...X....XX.X...X.", ".X......X.....X.........XX..X....X....X....X.....X", "X...X..X...XX..........XX..XXXX...X...X...X....X..", "X..X.X.......XX.X.X..XX..X.X....X...X..X......X..X", ".........X.......X.X.............XXX....XXXX.X.XXX", "........XX......X...XXX.XX...X.X.X.XXX..XX..XX...X", "...X...X...X...X.....X.X.X.X...XX.X..X.X..........", ".....X.XX....X.........XX.X....XX......X....X.....", ".XX.X...XX...X....X...XXX.XX..X.....X..X..XX.....X", "..XXXX.XX..X......X.X........XX....X........XX....", ".....X..XX...X..X..........X....X...........XX.XXX", "X..XX..X....XXX..X.X....X.XX.X.X..X...X.......X...", "....XXXX...X.X.X....X......X.......X......XX.....X", "........X.X....XX...X.X..X.XX...X.X...X..XX.XX....", "...X.....XX..XX.X.XX..X......X..X...X..XX.XX......", "X.......XX.........X.XXX..X...X..X...X....X..XX...", "....X.....X.XX..XX...X....XX..X...XX.............X", "...X...X..X....X.X......X.X.XXX.....X..X.......XXX", ".XX...X......X..X.X.X.X...X....X..X...X.XXXX......", "..XXX.X..X..X.X.X...X..XXX..X.X.X...X.XX...X.X.X..", "..X.X.XX....XXX....XXX...X.X..X.X.................", ".X......X......X..X..X..X.X.X.X..X.X.XXX...X......", ".........X.......XX..X...X..X.XX...X........X...X.", "....X..X..XXX......X..X..X..X..X.....X..X.X.XX.X.X", "X.XXX..X...X..X..X..X.................XX.X..X...X.", "...X..X...X...X..X.X.X.X..........X......XX.XX.X..", "X......X...XX.X.XXX..X...X....X....XX.X..X.......X", ".XX...X..X...........X..X...................X.X...", "X...X..X....X........XXX...X...X..XX.XX....X..X.X."};
    vector<string> candidate = {".X...XX...............X.X.X.....X..X...X.X...XXXXX", "X............XX...X....XX.X.X...XX.X.......XX.....", "XX.X....XX........X.X.X...XX.XX......X.X.......X.X", "..X..XX..X......X.X....X.X.......XX..XX...X..X....", ".X.X.X.....X....X....X......X..X...X...XX.X......X", "X......X.X....X..X...X.X..XX..XX..X...XX..XX.X.X..", "......X.X.XX....XX.X...X.X.........X....X....XX..X", "X.X...X.....X.X.....X.....X...X...X......X..X.....", ".X.X.X...XXXX...X.......XX..X....X...X..X.........", "..XX.....XX.X......X..X..XX....X........X......X..", ".X..X......XXXX...XX....X.XXXXX.......X...X...XXX.", "............X...X.XX...XX.X...XX.X.XX.XX.X...XX..X", "X.X.......X...X...X...X.X.....XXX.X...X..X........", "..XXXX.XX.X..X.....X.XX.........X....X....XX..X...", "..X........X..X.......X.....X....X...X.X..X...X...", "X...X....X.X..X.......X.X....XX........X....XX.X.X", "..XXXX..X...........X......X..X..........XXX.....X", ".XX...X..X.XXX.X.XX......XX..XXX..X.X.........XX.X", ".XX...X..X.X..X.X...X...X....X........X..X.....XX.", "..X..XX.....X...X..X.X..XX.........X........X...X.", ".X.XX..X....X.XXXXX.X.X.XX......X..X.....X..X.....", ".X..X.XX............X.XX.X....X......X..X........X", "...X.XX...X.....X....X..X....X.X....X...XXX......X", "XXX...XX....X......X.XX...X.X.XXX.X...X..X..X.X...", ".X.............X.X..X.X...X..X...X....X.X.X.......", "X.......X....X..X..X...X..XX.X...X.XX............X", "X.XX......XXX..X.........X......X..X...X...X..XX..", "X..XX..XXX..X.X..X......XXXXX...X.X..X..X.XXX...X.", "........X......X...X......X.......XXX.XX..........", "X.XXX..XXX..X....X.XX.....................X..X....", "..XX....XXX...X.X.....X....X..X.X..X.X..X..X..XX..", ".XX...X......X........X...X...X..XX..X.XX......X..", ".XX..XX..X.X......XX.X.X...X.X..X........X..X...X.", ".X.X......X.......X....XX........X...XX..XX..X..XX", "...X.XX.......X.X.XX...X.X.XX...XX..XX...XX...X...", "..X.....X...X..X...X.X.X..........XX..X.X..XX...XX", ".XX.XX.X...X..XX...X...X.X..........X.....X.X.X.X.", "........X...XX.XX............X..XX......X..XX.XX..", ".........X.X....X.....X.XX........XX........X....X", ".........X....X.XX......X....X......X......X.X.XXX", "X...XX.X.X...XX...X.....X..X...X...X...XX.X..X.X.X", ".XX...X...X.....X......XX.......X..X...X.........X", "....XX...X..X.X.XXX..X....X...X..X.XXXX....X....X.", "X...X......XXXXXXX....X..X.X.X.....XX...X.........", ".X...X.......XX....X......X.XXXX..X.X.............", ".XX....XX..X.X...X.....X....X...X......XX..X......", "X.......XX.XX..XXX....XX......X.X.....X...X.X..X..", "...X..X..X...X..X...X.X..XXX..XXX..X...XXX........", "..X........X...XX..X....X..X.....X...X..X.X....X..", "X.X.X.X.....X.......X.......X........X...X........"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> known = {".X..XX.XX.XX....X...XX.X....X..XX......X...X..XX..", "......X.......X....XXX...X...X.X....X.....XX..X.XX", ".X....X........X.X.........X.....X..XX...X....X..X", "X.X..X...X...X.X.XXX....X.....X.X.X.X.XX..X..XX...", ".......XX.....XX.X..X........X...XX............XX.", ".......X...X.XX.X....XX..............X..XX...X...X", ".......XX.X...XX...X....XXX..XXX..XXXXX...X...X...", "X.......X........X.......X..X.XX...X......X.XX.X..", "......XXXX.....X....X.....X...XX.X...X..XX..X.X.X.", "...X..X..XX....XXX.XX..XX...X.X...XXXX.X.....X..X.", "..X..X......X...........X....X.X..X.X.X.X...X.X.X.", "..XXXX.X......X...XXXX...X.X......X.X...X....X....", "......X....X..XX.......X.X.X..X...XXX....XX.X.....", "..........X............X......X..X..XXX..X......X.", "XX..X...XXX.......X.............XX.X......X.X.X...", "......X..X.X......X..X..X..X.X.X.....X...X.X....X.", "........XX...XX...X...X....XX......X..X..X..X.X..X", "X.X...X.......XXX.X.X........X.X...X....XX...XX..X", ".........X.X..XX......X.........X..XX.........XX..", "..X....X..XXX.X..........XXX.XX.XX..X..XX...X.....", "X....X....X..X.....X..X.X.....X.......X.X..XX.....", "XX.XXX..XX..XXXXXXX.X.X..XX.........X.......XX..X.", "........XXX.XX...X..X.......X......XX......X.X....", "....X....X..XX.X.XXX..X..........X....XXX.....X...", ".X.X..XX.XX..XXX.X.X..X.X.XX...X..X..........X..XX", "X...X..X....X...X.X.......X.X..X..X...XXXX...X....", "......XX..X......XX...XXXX.X...........X.XX..X....", ".X...X.X....X......X.XX.X.X.X...XX...X.XXXX...X...", "...X.X...X...XX..........XX..X.X..X.X....X...X....", "..X.X....X.XX...X..X......XX..X...X.X......X.X....", "...X...X.....XXX.X.X..X..XXX...XX..X...X....X.X..X", "X.X...X.........XXXX..........X..X.X...........X.X", "X.XXXXX.......X..X..X..X.X..XX...X....X......X.X..", ".............X....XX..XX..X.X......XX.XX..........", ".XX.X...XXX...X.X.X..X...X..XXX...XX.X...XX.......", ".....X.X..XX..X......X..X..X...XX..........XXX.X..", "X...XX.......XX...XX.X.XXX..XX..X.....X....X.X..XX", "X.......X.X.........X....XXX..X......X...X..XXX..X", ".XX...X..X..X.............XXX.XX.XXX..X..X..X..X..", "..X...X.X.....XX....XX.X.XX.XX..X.XXX.......XXX.X.", "XX.X.X.XX..X....XX.....XX.X.X.X..X.......X........", "..X..X..X.X..X..X....X..XXXX..X.XXX.X..X.....X....", "X.XX...X.XX..............X.X.X.X......XX..X...X...", ".....X..........X.......X........X....X.X..X.....X", "..X...X...X..X.X.X.X.X.XX.....X.XX....X....XX....X", "XX.X...X.XXX...X......XXX........X......XX..X.X...", ".X.X....X...X.XXX...X...............X..XX.X.X...XX", ".....X.X.X.....X.......XX........X...........X....", ".XX..X..X.XXX.....X......XX.X.............XX.X....", "X......X..XXX.X...X.X..XX.X.XXX.X.X...X..XX.XXX.X."};
    vector<string> candidate = {"..........X.XX.X.........X..XX......X.......X.X..X", "XXX.XX.XXX....X..X..X..XX...X.....X....XX.........", "X......X.......X.X..X.......XX..X...X...X.X....XX.", ".......XXXXX.X..X....X.XXX..XX...XXXX..X..........", "....XX.....XX...X.X....X.XX.X....X..........X...X.", "...X.X.XX..XX..X..X....X.X..XX.X....X.......XX.X..", "X..X.X..XX......XXXXX..XX...X..X......X....XX.X...", "......XX.X...XX...X...X.........X..........X..X...", ".......X.X....X.XX..X..X...X.X.XX..X.X......X..X..", "XXX.XXXXXX...X.X..X..X.X.X....XX.X..X.X..X....X...", "X...X......X.X...X.XXXXX.X.X...X......X...X..X.X..", "..X.XX.X...X.X.X...X.X...X.X.X..X.X..XXX.....X....", "......X....X..X....X..X.X..X..XX.XXX.X.XXX...X....", ".XX........X...XX..XX.X..XXX......X..X...X.X..X.XX", "...X.X..X.....X.....X....XX..X...X....X.X...X.....", ".X...X..X.X......X.XX...X....X.X.X.....XX......XX.", ".....X..X...X...X..X.....X...XX....X..XX.........X", "......XX.XXXX...X....XX......XX...X.X.X.X.X.X.....", ".X.XXX.X....XX...X.XX.X...XX...XX.X..X....X......X", "..XX..X.XX..X.XXX...X.XX.X...X.....X..X...X.......", "X.....XX..X..X.......X.....XX..X..XX.X.XX.......XX", "...XX.X.X.X......X...X.X.X.X...X.........XX..X.X..", ".....X......X...........X......XX.........XX.X...X", "XX...XXX.X.X....X.XX..XX.XX...XX.X..X.X...X....X..", "X.X..XXX....X...X.X.....XXX....X.X..XX.X.X..X.X...", ".XX...X....X.XX.X.X......XX......X.X...X.X.....X..", "...XX..X.X...X....XX...X....X...X..X..........XX.X", ".......X..X....XX.....XX.....X...XX..XX...X....X..", ".....X..XX..XXXX..XX....X.XX...X....X..X.X.X...X..", ".X.....XX.X.X...X.......X.X.XX.X.................X", ".........X.....X.......XX.X..X..X...XX...X.X...X..", "........X.XX.......X.....XX.X....X..XX..X.....X.X.", "X.X.XX.X.X..XXX..X.X.X.X....X......X...X.X........", ".X.X...X....X...X...X.X..XXX...........XX...X.XX.X", ".X...X..........XX....X...X.XXX.XXX.X.X...XX...X..", "...XX..XX....X....X.X..X....X....X.X.....XX..XX.X.", "X.....X.XX..XX..........X....X....X.......X.....X.", "XX.........X.XX.XX..XX.....X.XX....X........XX....", ".........X..XX....X........X.X.XX.XX..X.X....X...X", "X....X.....X..XX.....X.X.......X..XX.......X....X.", "..X.X.XX...XX...X.......X.....X.X................X", ".X....X.X........X.....X.......X.X........XXXX....", "X........X.....X..............XX.X....X........X..", ".X.....X.X...X........X.......X.X.XXX.......XX..X.", ".X...XX.......X......XX.XX.XX.XX.X..X.X...X...X...", ".XX..XX......X...X..X...X...X..X....X...X.........", ".X.XX.........XXX....X..X..X..X......X..........X.", "XXXXX......X.....X..X...X.......X.....XXX..XXX....", ".........X...X.....X.......X.X.....X.XXX....XX..X.", "...X.X.X..X.X.X.X.....X.........X......X.....XXX.X"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> known = {".XXX..X...XX....X...X...XXXXXX.XX.X......X....X...", ".....X..X.X..X..X.XX.XXXX...X.X...X...X.X....X..XX", "....XX...X......XX...........X..X.....X.X..X......", ".........X.XX.......X..X..XXX.XX..X..X.......X..X.", "...XX..XX....X.X.X....XX....X..XX.XXXXXX.X..X..XX.", "...X....X...X.....X.XXX.....XX..X..X.....X..XXX...", ".....XX.X..XX....X....X.....XXXX.X.........X.X.X..", "X...X....XX...........X.X..X...X.X...XX..X.....X.X", "XX.XX......XXX.......X.X..X....X..X..XX...X...XXXX", "...XX.XX.XXXX...XXX.X..X.X...X.......X..X...X....X", ".X......X.X..X..XXX.X.....X.XX...X..XX..X.....X..X", "...X..X.....XX.....XX.....X.X.........XXX...XXX.X.", ".......X...X...XX....X..X..XX..X....X....X..X.XXX.", "....XX....X.X...X...X.X....X......X.XX....X.....X.", "...X.X....X......X....X.....XX.......X..........XX", "X.XXXX..X....X.XX..X.XX....X....X..........X.X..XX", "..X......X....XX...XXXXXX....X........X....X..X.X.", "...X.X.......XXX..X..XX........XX.X....X..XX.....X", "X...X.....X......X........XX...XXX..X....X...X..XX", ".X...X.X....XX.X....X.X..X.X...X.X.X..X..X.....XX.", "..........X.X...X..X.....X...X.XXX..X.XXX.X.X...XX", "....X..X..XX.X....X........XXX......X..XX..X..X...", "..XXXXX.X.......XX.XX.......X.X.........XX.XXXXX..", "....XX..X.XXX.........XX...X.....XXXXX.X.X.X..XX..", ".......X...XXX........X..X.X...X.X..XX..X.XX...X..", "..X..X..XXX....X.XX.X....X..X...X....XXX...X...X..", "........XX.X...XXX..X...X.X....X....X.......X.X.X.", "...XX.X.....X.........X.X.....XX..X......XX......X", "..X...X.......X.....XXXX......X..XX.X.X.XX.X....XX", "X..X.......XX..XX.....XXXX.XX..........X.X..X.XX.X", ".X........X....X.X..X.......XX..XXX.......X..XX.XX", ".X.X........X..X.....XXXX...X..XX...XX.X..X.....X.", "..XXX....X.............X.....X....X.X.....X...X..X", "........X....X..XX...X.X.X...XX..X..X.X.X.XXX.....", ".XX.X...X....X..X...........X....X....X.XX.X.X..XX", "XX.XX...X........X.....X......X.X..X..X..X........", "...X.X.XX....X.X....XX.XXX..X.........X..X.XX.....", ".X...........X..X....XX.X...X......XX.............", "...X....X.X..X..X..X...X.......X....X....XXXX.....", "X.X.X...X..X...X...XX..X....XXX.....X...X.X......X", "....X..X.....X.X..XX.X.....X..X...X..X..X....X..X.", "X.X..X.......XXXXX.....XX..........XX......X....X.", ".....XXX.XXX.X...X.....X...X.XX.........XX.....X..", "XXX.......X........X..X..XX......XXX..X.XX.....X.X", ".XX......XXX....X..XXX..X.XX...XX...X..X...XX.XX..", "...X..X.X..X.X.X...........X.X.X..X.X..X........X.", "..X..X..X....XXX...X..X...X....XX....XXX.X.....X..", "XX.......XXXXX.XX....XX...XXX...X.X.X.X...X.......", ".X...X..XX.X.XX.....X.....X.X.....X.X.X..XXXX.XX.X", "XXX.......X.XX..X...X...XX......X.X.XX.X..XX......"};
    vector<string> candidate = {"..X...X....X..X..XXXX.X...XX...X......XXXX......XX", "X.....XX..X......X..X......X..XXX.X..X..X...XX..X.", "X...X.X.XXX..X..XX..X.XXX..X.X......X.X...X.X....X", "..X.XX..X....X..X......X.....X...............X....", "XX.X.XX..X.....X.X.XXX.X.....XXX......X.X....X....", "..X..X.X.........X..XX.XXX......X......X.X...XX..X", ".X..X.....XXX.XXX.X.X.XX....X..XX..........XXX....", ".X.....X.X..X........X....X.X...XX......XX...X....", ".XX.X..X..X.......XX.........X.X......X.XX.X.....X", ".X..X....XXX...X........X..X.....X.....XX......XXX", "XX..X.X..X...X...X.X...XXX...X....XXX...XX........", ".X........XX.X.X.....X.XXX.......X.....X...X.X.X.X", ".......X.....XX...X.X......X...........X.X........", "..X...XXX..X.X.XXX..X..X....XX...X...X..X......X..", ".....X..........X.X..........X...X.XX...X..X.XX...", "XX..X...X..XX......XX.XX.........X...X.....X......", ".X...X..X..X....X..X...X.......XX..X.X.X..X..X..XX", "X...X..X.X................X.XXX.X..X..XX.....X..X.", "X.........X.X...X....X..XX.....X....X.X....XXX....", "...XXX..XX....X.X..X.......X...X....X...X......XX.", "XX.X.X..X.....X.......X.X.....X.X.......X..X.X....", ".XX....X...X...X..X.X.X..X..X..X..XX..X...XX......", "................X...XX...X.XX..X.....X...X.......X", ".XX..........X..X.X.........XX.......XXX.X..X..XX.", "..X.X.....X..............X.......X.XXXX...X.......", ".....X.......X.X..XXX...X..XX.XX.X.....X.....XX..X", "...X....X.X.X........X..X....X..X..XX...X.X..XX..X", "X........XX.X..X..........X......X.X....XX.X..X..X", "..X.....XX.......X.X.XX.X...XX.X...X.X..X.X..X....", "..X..X....X..........XX.X..XXX....X.X.X...X..XX.X.", "..XX.....X.X...XX.....X.X...X.XX.X.............X.X", "XX..X.XXX...X..X....X.....XX.........X..XX.X.....X", ".....X..X.X.X.X.X.XX.XX....X...X.............X....", "X...X..X....X..X....X.....XXXX..X.....X....X......", "..X..X..XX..X.X........X.XXXXX........X......X..XX", "X.XXXXX..XX....XX....X.XX...X..XX..X..X.....X.X...", ".X...XX...X.XX.X..X.................X.XX.X.....XX.", "...X.......X..X.X.XX...XX.X.X..X.X.XXXX.........XX", "...X......X...X...X.....X..X.X.X.XXX.X...X...X.X.X", "X.X....X.....X.......X.XX....X..X..X...X....X...XX", "....X.X.X...XX.XXXX.......X.XXX...X.....X.....XX..", "...X.....XX....X....X..X..X..X.......XX..X.X.X....", ".....X..XX......XXX..X.X.X.X..X.X.X...X....X.X...X", "..X..XX......X.X...X..X.....XX.X...X.......XX...X.", "X..........X....X.X...X.....XX.X..X..X.X.......X..", "XXXX.X.......X...X.X....X..X..X.....X....X....X...", "......X.....X.....X.X.....X.X.....XXX..........XX.", "X....X......X...X..X.XX...........X..X.......X...X", "..X...........XX..X...X..X.......X.....X...XXX.X..", ".XX.X.....X.X.XXX.XXXXX..X.XX...X.X...X.X..X.X.XX."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 143;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> known = {"......X...XX........X....X...XX..X.X..X.XX....X.X.", "X.X....X..XX.X....................X....XXX..X...XX", "X..XXX.....X..XX...XXXX...XXX...............XXXX.X", "......XXX...X.X....X..X.X..............X..X.X.X...", ".X.XXX...X..X.XX.X......X.......X.XX....X.X...XX..", ".X..XX...X.......X.XX.X.....X.X.....XX..X..XXX..X.", "X..XXX..XXX.X....XXXX.X..X....XXX.X.......XXX....X", "........XX.....X.X...XX......X.X.....X...X..X....X", "XXX...X.XX.X............XX.X........X......XXX.X..", ".X.X....X.......X..XX.X....XX.X.....X..XX..X...X..", "......X.X.....XXX.X....X.....X....X.......X.....X.", "XXXXX.X.XX..XX.XX..XX.XXX...X.X.X..X...X...XX.X...", "...X...X................X..XX.....X....XX....X..X.", "..X..X....X....X..XX......X.XX.XX..X.X.XX..X..X...", "X..XX....X.....XX.X.....X.XX...X.........XX.X..X..", "X...XX....XX....X....XX..XX.X..X..X.X....XXX.X....", ".XX..X....X.XX...X.......X......XX...X..X..X......", "X.X.....X..XX..X.XX...X......XX.XX........X..XX...", "X......X.XX......X...XX...XX...X..X..........X.X.X", "....X..X.X....X...X.X.X.....X.....X.X.......X....X", "..X.....X.XX....XX.X.X...........X......X.X...XX..", ".X..XX.XXX....X.X..XX........X..X.....X........X..", "XX..X.....X.........XXXX.X......X.......X.X.XX....", "X..XX.XXX..XX....X.....X.X..X........X.....X......", "X..X.XX...........XX.....X........X.XX..X.XX....X.", "X........X.X......XX.X.....X....X.X..XX.X.........", "XX.X.XX.X..XX.X....X.X.......X.XXX.X.X..X....X....", ".X....XX....XX......X..XX......X.X..XX..X..XX.X..X", "...X....X..XX..........X...XX.X.......X...X....X..", "X...........XX.XX.X..X...XX..XXX....X......X....X.", "X....X..XX.....X...X.X..X........XXX.........XX..X", "...XXX.X.X...X..X.......X....X..X.X.......X.X.....", "XX.X.........X........XX..X.X..............X.X...X", "...X.XX.....XXX.X.X.XX..X..XX.X.XX........X.XXX...", ".X.X....XXX....X..X.X.....................X.......", "X..XX..XX....X.X........XX..X...XX.........X..X..X", "..XX.X...X.X....XX...X.X.......XXX.X.XX...XX.XXX.X", "....X..X..X.XX.X..X...X...........X......X.X..X...", ".X.XX.X..X..XX....X....XX.X...X......X..X.X.X....X", "..XX...X.X.....XX..XX..X.......X........XX.......X", ".X....XXX......X....X...................XXXX..X...", "...XX.....X..X.....X....XX....X..XX..X.X...X.XXX..", "X..X.X.X....X.X......X....X.........X.......X.....", "X...XX..X...X..X.X....X..X...X..X....X.X......X...", ".XX.X.....X......X.XX..X........X..XX.XX..X..X..X.", "....X......X..X..XX...X....XX.......X..X........X.", ".X....X.......XXX.XX...XX...XXX..XXX..X..X........", "X....X..X.......XX.X.....XX.X..X...XX..X...X......", "....X..X..X...X.....X..X..X....X....X.X......X.X..", "X............X.XXXX..XXX..............X........X.."};
    vector<string> candidate = {".....X.......X.XX.XX...X..XX..X........X....X.X...", ".XX...X..X......XX.XX.....X....X.X....X.X.X...X.X.", ".XXX..X.......XXX.X.X..X...X...X..X..X.X...X...XX.", ".XX.....................X.XX..X.......X..XX.......", ".X.....X.X.....XX...X....X.X..X......X....XX.X....", "......XXX.X..........XX....XX..X.X.XX..X.X..X.....", "...XX......X..XXXX.XX....X.XX...XX..X..X..X...X...", ".......X..XXX......X..X..X..X.XX...XX..X...XXX...X", "...X...X.XXX..X..X.XXX.X.XXXX..X......X.X.X.XXXX..", "...X......XX.........XX.......XX..X..X..X...XX..X.", ".....XX.....X.X..XX.X..X..XXXX.....X...X.XX.XX....", "..X..X..X.X..X.....XX.............XX..X.......XX..", ".....X..XX....X..........XX....X.....X....XXX...X.", "XX...XXXXXX.X.....X......X........X.X.XX........X.", "...X.XXX..X....X....XX....XX....X.X.....X.X..XX..X", "...XXXX.X..X..X........X.XXX....X....X....XX.X.X..", "......X..X..X.XX.X.X.X.....X.X.X.X..X.XX.....X...X", "...X.....X...XX.......X.X......X......XX...XX...XX", ".......X..X..XXX...........X.XX.XX......XX....XXX.", ".XXX......X.............XX.XX....X...X.....X..X...", ".X.......X...X.XX..X.X.............XX...X.X..X....", ".X...XX.......X.X....X....XX.....X............X...", "...........X.X.X..X.X......X..XX...X.....X....XX..", "..XXXX..XX.X.X.XX...XX..X.XX.X.....XX.X....XXX...X", "X...X.....XX....X......X.XX..X.....XX.X...X.X..X.X", ".X.XX.XX..X.....X.X.........X...XX......X....X..X.", "..XXX......XXXXX..X.XXX.......XX.X.X.............X", "X..XX.X.X...........X.X....X.X....X.....XXX..X..XX", "............XX.X.X..X.X.X.X.....X......XX...X.X..X", "X...X.X.......X.X...XX.....X.X...X.......X...XX.XX", "......XX..X..X..............X...X.X........X..XX..", ".....X.....X.X......X...XX...X.X.X..XXX..X........", "X...X..X.....X..............X.XX......XX..X.....X.", "..X.X...X.X.X...X.XX........XX....X......X.XXXX...", "...X.X......XX..XXX.XX....X.XXX.X.....X..X.X......", "..XX.X........X...X...........X.X.X.X.....X...XXX.", "XXX.....X.X............X...X..XX..X.X..........XX.", "X.X...X....X.....XXX.....XX....X...X..X..XX...X...", "...........X.X.X.XX..XXX...............X.XX.......", "...X..........X..X...XXXX.....XX....X.........X..X", ".XXX...XX..X.X...X......XXXXX.........X..X...XX...", ".X..XX..XXX......X.X....X..X...XX.X.XX..X.......X.", "X...X..X......XX......X.X..X......X..........X.X..", ".X..X..X.X...XXX...X.XX..X.X...X.....X....X.XXXX..", "X.........X..XX....X........X..X.X......X...X.....", "....XX..X.X.........X........XX....XXX...........X", "XXX..X..X..X.....X....XX....X.X..X..XX.X..........", "X....X..XX........X.......X...X...XX..XX....XX.XXX", "..X....X....XX..XXX......XX..X.X.XX.....X.......X.", "....X..X.XX......X...XX..X.......X..X....XX..X.XX."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 73;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> known = {"X.X......XXX......XXXX.XXX....X..X..X.XXX..X.....X", "X..X....X........X..X.X.X....X.X....X.........X.X.", ".......X.......X..X.X.XX.XXXX.......X..X..XX....XX", "..XX.....X...XX..XX..XX.....XX...X.XX.XX....X.X...", "X.XXX.......X.X.X..X..XX....XXXX.X........X.X.....", "X..........X..XX......X....X...X.X.X..X...XX......", ".....X..X.X..XXXX.......X..X...X...X........X.....", "XX..X.......X.X.......X..X...X..X.....X..X..X...XX", "........X...X.X.....X.X..X...X...X................", "..X.....X..X.X........XXX.......X.X...XX.X.X......", ".X....X...X.X....X.XXXX.X.....XXX....X........X.X.", "X....X..XXX..X..X.....X.X.X...X.....XX.X..X.......", ".X....X............XX..X......X.XX.X..X..X........", "..X....XX...XX.X.X......X.X..X.X..X.XXXX.X....XX..", "..X.XX.....X.......X.X.X....XX..X..X..X...X..XX..X", "X.X.......X.XX.XXX.......XX....XXX..X.......XX..X.", "XX..X....X..XXX.X.X....X.X.........XX.X.X.....X...", "X...X.X...X...X...X....XXX......XX.......X.X.X...X", "..XX.X..X.X..X....X.XXXX..XX..X.XXX...X......X....", "XX......X..X.X.XX..X.X..X.X.......X.XX.XX......X..", ".....X..X...XXX....X.X.XX...X..X....X.XXXX.X..X...", ".X...XX.X..XX.........X.X.....X......X.XX..X......", "X...XX.......XX.X..X.X.....XX.X..........XXX.X.X.X", "..XXX...XX.X...................XXXX......X.X..X.XX", "X.X.X.X....X..XX.....X.X.X.XX..X........X..X...XX.", "...X.X.......X....XXX..XX...XX.X....X...X......X..", ".......X..X...X....X.X...X.XXXXX..XX..X...XX.X...X", ".....X.XX....X..X....X..X...X.X.X..X.X.X.X..X.....", "X....XXX.X.X.X.X.X.X...X..X.X.X...X...X...X.....XX", "XXX.XXX...X.....XX..XX...X..XX....X.......X.XX.X..", "X..............X......XXX..X.X......X....XX.....X.", "..XX..........X.X.X............XX.X....XX.X.....XX", "..X.....X...X..XX........XX.X.....XX.X.X.X.X..XX..", "....X...X.X..........XX...X........X...X.......XXX", ".....XXX.....XX.........X.......X.X......X...X..X.", ".......X..X....XX.X........X........XX....XX....XX", ".X.....X....XX.....X.X..XX..XX.X....X.X...X.X..X..", "X..X..X..X...X....X.........X.X........X.....X....", ".X..X......X...X.........X...X...X.X.X.....XX.X.X.", ".X...X.........X.X....X..XX.X.....X..X.X.......X..", "..XXXX.............XXXX.....X.X.....X....X.....X..", ".X...X.X..XXX..XX...X..X.....XX...X...X......X....", "X.XXX.XXX.XX.X....XXX..X.X.X...XX........XX.X.....", "X.......X..X.XX.X....X...X..X...XX.X...X..X.X..XXX", "X...X.X.XX..X.X......XXX..........XX...XXXX..X....", "...XX.....XX.XX.....X....XX....X..XXX..X...X......", "..X........X........X..XX....X.....X.............X", "X............XX.X..X....X..X.XX........XX.........", "..X..X............XX...X.X..X......XX....X.......X", "....X..X.XX.X.X.X.XXX....XX..X....XX.X.X.X.X.X...."};
    vector<string> candidate = {"..X...X...XXX.X.......X....X...XX.XX.........X...X", "X.X.X..X........X..X.X...X.......................X", "........XX...X.......X...X....X.X..X.XXXX.........", "....XX.X........X.X...X..X...XX.X.XXX.......X.....", "X.X..XX...XX......XXXXXX.XX.X....XXX..XX...X...X..", "...X..X.X......X.X..X..X.X.........X...XX..X....X.", ".X.X.X.....X.......X.XX........X....XX..X.........", "....XX.XXX..X.X....XX.X....X.X..X......X.XX.XXXX.X", "....X....XXX......X......XX..X..X.......XX....X...", "...X.....X.....X.....X....X.X.....XXXX..X.X....X..", ".X....XXXX...X.X..XXX..XX....X.X..........XXX....X", "...X....XX....X.............X.XXX......X.X....X...", "X..XX..........X..X.......XXX........X.....X......", "XXXXX.X.XXX..XX....X..X.X.......XX..............X.", ".X.X......X..X.XX.X...X.X..XX.XXX.....XX.X.....X..", "X.X.X...XX.X...XX..X.X...X.XXX...X..X.XX.....X.X.X", ".XX.XXX.X.X.X.X...X...XX...XXX.X.X.X....XXXX...X..", ".XX.X....XX..X.............X...X.....X.X.....X.XX.", "...X.XX..XXXX..X..X.X.X..X..XXX.X....X...........X", ".......XX....X...........X....XX..X...XX..X.X....X", "......X....XXX..X.........X......X....X.XX...XX...", "....X....X......X.X.....X...X....X........X.......", "...................X.XX..X..XX...X...X.......XXXX.", "...X..X..X.....X..........X.X...X.X...XXX..XXX..X.", "...X...X.X...X.........XXX...X.X.XX...X.XX..X..XXX", "...X..X.X..XXX...X...X.X....XX....X.XX....X.......", "..X.....X.XXX..........X....X...XX.X..X.X.....XXX.", ".......XX..X...XX.X...XX....XXX...X..X.XXX.X..X.X.", "..X..X.X........XXX.....X....X.X...X....X.X.X.....", "X......XX....XX.X......X.XXXX.X....XXX.......XX..X", ".X.X......XXX...XXXX....XXX........XX..X...X...X..", "XX.X.X...XX.X.X...XXXX..X.X...........X..X...XXX..", "X.X..........XX..XX..X.X....X........XX.XXX.......", "..X..X.....X..X...XXX...X.X....X.....XXX..X.......", ".X...XX...XX....X...X....X.....X.X.X..X....X......", ".......X.....XX..X...X..X..XXXX..XX.X..X...XX.....", "..X...X.X..X.X..X.X.....XX.X.X......X....XX.....X.", "..X....XX........X.X.........X.XX....X...X......XX", "...X.X.X.X.......XX.....X.XX...XX..X......X.X.X...", "..XX.X.....XX.X...XX.......X.X..X...XXX........XXX", "...........X.X....X.....X...X.X........XXX.XX.....", "X....X.....X.X........X.......X........X..XXXX.X..", ".XX........X.X..XXX..XXXX..XX.....X......X.....X..", "X.....X....X...XXX............X......X.X..XX..X...", "............X...........X.............X.....X.X...", ".......X..X..X.X......XXXX....X.X....X...XX...X.X.", "...X.X.X...XX.............X.XX..X.....XX.....XX...", ".....X.XXXX.X....X.....X..XX.......XX.X.....XX...X", ".X.X..XXXX........X...X........XXX..X..X..X.X.X...", ".........XX.X..XXXX...X....X..X..XXX..XXX........."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 121;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> known = {".XX.X......X.X..XX...X..X...............X..XX..X..", "XX.XX.......XX......X...XX....X..X..X..X.X..X.X.X.", "....XX....X.X...XXX..X.X.XXX...X..X.....XX...XX...", "X........XXXX.....XX...XX.X.X.X..X..........X...X.", "....XXX........X......X...X..X....X....X.XX..X...X", ".XXX..XX..X....XXX............XX....X..XX.....X..X", "....X...X.X..XX......XXXX.X..X..X....X...X.X...X..", "X.X......X....X.............X....X.X.X..X.X.X.X.X.", "X.....X....X..X....X....XX.X....X.XX.......X.XX...", ".........X..........XX...X....X...X.X...X....XX.X.", "X.......X..X.X.X................XX....X.....X.XX..", "...........X....XX.....X.X..X...X.....X......X.X.X", ".XXX..X..X.....X..XXX.....X.XX....X..........XX...", ".XXX.X..X..X.......X..X......X.X..X.X.X...XX.X.X.X", "......X....X.XX...XX.....X....X.X....X.........X..", "X....XX.....X.XX...X...X.....X.XXX.XXXX....X....X.", "..X.X.XX.X.....X.XX..........X...X...X..X.X.....X.", "X....X....XXX.XXX.....X.....X.X.X...XX.X..XXXX...X", "X......X......X....X..X.XX.X....X.X...X.X.X.....XX", ".XX...........X....X...XXX...X.XX...X........XX...", "X..X..XX....X......X....X...XXX..X..X...X.X.XX....", ".XX......XX..X.......XX....X.....X......X.X.XX..X.", ".....X.X......XX........X.X.X..XX.X.X.X..XX...X...", "......X.....X..XX...XXX...XX.X...X.....X.X......XX", "XX...XX.X......X.........X...X.....X.......X..X.XX", ".XX........X........X.X.X.X.......X..X..X.XX.XX...", ".....X........X.......X...X.X.X...................", "X.X...X..X....XXX......X.XX.XX.X..X.XXXX.X.X.....X", "XX..X.....X.....X..X..X.X......X...X.....XX....X.X", ".XX...X..X...........X..X....X.X.X.XXX..XX..XX..X.", "...X..X.XX...XX.XX...X.....XX...XX.X...X.X...X.X.X", "XXX...........X.X.X.X....X.X.X..XXX.X.......XX..XX", "X.X.X.X............XX.X...X...XXX.X.X.......X.X.XX", "....X.X....X...XX.X.......X.X..XX...XX...XX..XX...", "..X...X......X.X...X.X..XX..X..XXX...XX.XXX.......", "..X..X.X..XX.XX...XX..X....X...X....X..X........X.", "X....X.X.X.X..X.X.....X....XX....XXX.X....X.X.X..X", "..X.X..X..X.XX....X...X..X.X.X.X..X.XX.X.X...X...X", ".XX....XX...X.....X.X....X.....XX....XXX.X.XX.X.X.", ".XX...X.....X...X........XXX......X...........XX.X", "XX....X....X.XX........X.X...X.X..X...XX.......X..", "...............X.........X...XXXX...XXXXXXX..X....", "..XX........X........X...X........XX...X........X.", "..X.X....X.XXX...X..X...X....XX....XX...X.......X.", ".XXX..XX....X..X..XX.......X.X..X..X....X.XXX....X", ".X...X..X......X..XX.XX..XXX.X...XX.XX.......X..X.", ".X.X.X.....XXX...X...X.XX....X.X.XX.X...X........X", ".X..XX...X.X.X..X.....X..X.......X...XX...XX.X..X.", "...XX......X...XX..XX..X.X.........X..........X...", ".......XX.............XX........XX.X.......X..X..."};
    vector<string> candidate = {"..X...X.X..XX...X......X.XXX.....X........XXX...X.", ".....X.X....X..XX......X.XX.....XX..XX..XX..X..XX.", ".X..XXX.XXX...X..X....XX.XX...X...............XXX.", ".X...........X....XX.X....XX..XX..X..X........X.XX", ".....X..X.....X......XX.X...XX.........X....X....X", "XXX...XX..X...X.......XX...X.XX....XX.....X.....X.", "X....XX..X....X.......XX......X.X........X.X......", ".X.XXXXX.XX...X...X.XX...X..X..X.XX...XX..........", ".XXX...X..X.XXX...................X.X.....X..X.X..", "XX..X.X...........XX.X...............X.XXXXX.....X", ".X.X.................X....XX...XXX...X.XX.X..X....", "X...X.X...X......XX.X.XXX....X....X......X...X...X", ".X...XX..X....XX...X.X.......X..XXXXXXXX..........", ".............X.XX....X.....XX...X..X.X...X..XX...X", "X..X....X.....X...........X....XX..X......XX......", "....X.XX...XX......XXX......X............X...X..X.", "X.X......XX.X..XXX.XXXX..XX....X...XX..XXX.XX..XX.", "....XXX..XX.X..X.X.X.X...X..X.X...X.X.X..X.X..X.X.", ".X....X.........XXX..............XX......X.XX....X", "..XXXX..X.......X..XX.XX........X..X....X..X..X.X.", "....XX.X..X............X....X..X....X....XX.......", ".................XX.........XX.X..X.XXX.....X.X...", "........X....XX..X...X.....X...........XX.........", "..X..X..X.X.X..XX..X...X.X...XX.....X....XX.X.....", ".X.X..X....X.........XX.X.........X..........X.XX.", "X..X..X....X....X..X..X...X....XX..X..X....X.X....", "....X.XX...X...X.X....X...X......X.X..X.XX.XX.X.X.", "......X.X.XXXX..X.X.XXX.X.XX.X......X..X..X...XX..", "X...XX....XX.....X...XX.XXX.....X.....X....X.X.X..", "........X....XX....X.XXX...X......XX.X............", "..X.X.XX.....X.X..X.X.XX..X...........X...........", "......X.X......X...X..X........X....X.XXX.X..X....", "......X..XX....X..X.....X...X......XX...XX..X.X.X.", "......X...X..X............X..X.X.........X...XX...", "....X...XX.X...XX..X..XX.....X.........X..X.X..XXX", ".......X..X..X..X...X.X..X.X.X...X.X...XX.X.......", "X......X.X.X......X.X.X..X......X..X.XX.X......X..", "X...XXXXXX.X.X.....X...X..X.XX...........X..X...X.", "X...X..X.X..XX.X.X...XXX.X....X...XX.X.X...X.X.XXX", "...X.X....X..XX..........X......X..X.X..XX.X......", "..X.X....X....X.XX.X.XX.X.X...XX.........X.....X..", ".X.......XX..X..X..X.X...XXX...XXX......X......X..", "..XXX....X............X...........X...XX.X...XX.X.", "..X..XX....X.X.X.......X.....X..XXXX.X.....X..X...", "X....X.XX.X.....XX..X.XXX.X..X.....X...X....X..X..", ".X......X..X..X....X..XX..X.X........X.........X.X", ".X.XX..X.XX.X...XX..X...X...XXX.X...........X..X.X", "..XX.X..X..X.X.........X..X.X...X....X....X...X...", "..X..X...X..XXX.X.XX.X.......X...X.X......XX...X..", ".....X.X.X....XX..XXX........XX..XXXXX.X.....X...."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> known = {"...........X.X........XX..XX....X..X......X...XX.X", ".X.......XX.......XX.....XXX...XX...X.X.XX..XXX...", ".....X...X...X.......XXX..XX.....X...X...X.....X..", "...X....X..X.......XXX..X......X...X...X..........", "X.X....X.XX........X.X.X....XXX......XX.XX...XX..X", "...X..X.X.XX.XX..XX...X.XX....X...X....X.X..X.XX..", "....X..XX.X.X.X..X..X..X......X.X.XX....X...X.X...", "X.X......X...XXX...........X......X....XXXX.......", "XX.XXX.XX.X............XX..XX........X.X......X.X.", "X..X.XX.XXX...........XXX.......X..X..XX..XX......", "X.......XX..X.X.XX..X.....X.....XX...X..........X.", "....X.X...XX.XXX..X..XX...X.X..XXX..XX.X..XX....X.", "XX.X..XX.....XX.......X.....XXX...X.XX..........XX", "......XX............X..........X..X....X..X...XX..", ".X....X...X....X...XX.X.X.XX...X.X...........X.X..", "X..X.X..X........X...XX..XX...X.X.X.XXX...X.X....X", ".....X...XX..XX....X..X.X...........X...XXX...X.X.", ".XX.....X..X...........XX.....XX.X....X.XX...X....", "XX..X..XX.X..XXX.......X.X.....XX..X.XXX..X.X...X.", "..XX..XXX.X....X..X.....X.XXX...X.....X..XX.XX....", "..XX.X...X.X.......X...X..............XX.XX.X.XX.X", ".......X.......XX.XX..X.X.XX.X...X..X..X.X...XX.X.", ".X..XXX..X.XX.X.X....XX.XX.....XX..XX........X.XX.", "X.X.....X.X..XX..XX.......X.X..XX.....X....XX..X..", "...X.X.......XX....XX.XX..X..XX.......XX...X......", "X.X....X.X..XX..X...........X...X..XXX.....XX.....", ".X.X.....XXX.X.....X...X...X.....X..X.......X.....", "X.......X.XX.XX.......XX........X...XX......X..X.X", "XX.........X..X.X......X.X........X...X...X...XX..", "XX.X..X....X...X..X..........XX.X........X........", "XXXX....X...X.....X...X.X.XXXXX.XX......X..X.X...X", ".X.XX....X.X.X.X..X.....X.....XX....X....X.XX..X..", "..XXX.....X...X....X...XX.X.XXXXX...X...XX....X.X.", "...X.....X....X....XXX..X.....X....XX.X.......X..X", "..X.....X....X..........X....X.......X...XX..XXX.X", "....X.......X.........X.X.X.....X..X.X.X...XX.X...", "....XX..X.....X.X.......XX...X.......XX..X.X.X..X.", "X.XXX..X.....XX.X.XX.XX......X....XX.XX........X.X", "X.X.X...X.X....X.............XXX.X.X...X.......X.X", "..X.XX...........X.X..X...X.X..X.........X...X...X", "......XXXXX.XX..XX.....XX.XX.....XX..X..X...X....X", "X.XX.......XXX.X.....XX..XXX...X...XX.......XX....", "....X.XXX.......XX.XX.X.XXXX.......X..X..X....XX.X", "X..X...X..X.X.X...........X....X...XX.X...X.X....X", ".XX.XX..X...XXXX..X.X.X.....X...X.....X.X.....X.X.", ".......X.............X.........X.X.X..X...........", "...X.X.X.....XX...X.....X.XX....XX..X...XX....X.X.", ".XX....X..XX....X....XXX....XX..XX..XX....X.....X.", "..X.XX..XXXX....X.X..X........X.X............X...X", ".....X.....................X...XXX.X......X......."};
    vector<string> candidate = {".X..X....XXXXX..XX...X...X.X.X.X.......X....XX.X..", "..X...X.XX.X.X..X.....X...X........X.X.X.........X", ".....X..X.....XXXX...X.X.XX....X.X.X....X.XXX.X...", "..X.X..X........X.X.XX..X.........X.....X....X...X", ".X....X..X..X...X...X...........XXX...X..X........", "...X...XX...........X.X........XXX............X...", "..XX.X.XX.X..XXX..........XX..X.....X.....X...XX..", "X.XX..X.X.....XX..X..X...X......X.X.X.....XX..XXX.", ".XXX...X....X....X.X......XXXXX......X....XX......", "X..X...XX....X..X....X.......XXX..X..............X", "XX.XX...X.X.XXX.....XX...X....X.X.....XXX.X.X.X...", "X..XXX.X.X..X...X.X............X...XXX...X......XX", ".X.XX..X.....XX.XXXXX.....X.XX..X..XX..XXX........", "XXX..XX.XX............X.....XXX...........X.X..X..", "X.XX...........X.XXXX..X.X.X..X.XX..XXX..X.X......", "X........X..XX.........XX........XX.X..XX.XXXX....", ".....X.X.X.X..X.XX.XXXX.X.....X..XX.XX....X..XX...", "....X.X...XXX.....X........XX.X...XX.X....X......X", ".X..X..X.XX....X.....X......X......X....X..X......", "...XX...XX...X.XXX....X.X....X.XX.X..XXX..........", "......X..........X...X....XX.X..X......X........X.", "...........X.......XX.X.XX.......X......X..XX....X", "...XX.X....X..X..XX..X....XX....X.....XX...XX....X", "X.XXX.XXXXXX.....X.X.......X.......X...X.....X.X.X", "XX..X.....X..........XX.....X.X......XX..XX.......", "....X......X...XXX.XX....X...X..............X.....", "....X..........X.X.X.....XX..X.X..XX.XX...X.......", ".....X..X.......X.XX......XXXX...XXX..XX..XX.....X", "..XX..X.....XX.......X.X...XXXXX..XXX.X..X........", "...X.X...XX...X...X..........XXXX.........X.X....X", "XX...XXX..XX.XX......X..X...X.......X.XX.X...X.X..", ".X...XX...X...X..X.XX......XX.X.........X.XXX.....", "..............X.X......X....X..X.X..X....XX.XX....", "..............X...X..X..X......X.X....XX.X.X.....X", ".XX........XX..X.....X...X.......XX..XX...X....XX.", ".XX.XX.....XXXX..X....X.XX.....XX...X...XX.X.X....", ".................X.X..X..XX.XX..XX.....XX.X.X....X", "XX...X.XX...X...X.XX.X..XX.X.X..X...X...XXXXXXX...", "X...X....X.XX....XX...XXXX..X..X....XX.X....X.....", "..XX....X..X.X.X..X..X.....X.X.XX.XX...XX..X...X.X", "...X....XX...XXX.X..X.....X.X.X...X.XX..XX...X....", ".X......X.X.....X...X.....X..X...XX.XX..X...X.....", "X.XX.X...X.XX....X.XX..XX.....X..X....X..X....X...", "XX.X..X...XX..XX.X..X....X..X...XX..XX.X.X......X.", ".................X..X...X.X................X......", "..........X.X.XX.X...X....X...X..........X.X.XX...", "..X..XXX..XX...XXX.....XXXX.X......X.XX....X.X....", "..X.X..X...X..X.X.XX.....X..X....XX.X.XX.X.X..X...", "X...XX..X.X.......X......X.X.X..X...X.X.XX..X....X", "...X...X..XXX....X..X..X..XX..XXX........X.X..X.XX"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 86;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> known = {"X..X....X..X.........XXXX.....XXX.....X.X.XXX....X", "...X.......X.........XXXX..X...........X..XX.X....", "...X.X..X..XX...........X.......XX...X...X...X.X..", ".XX...X.....X...XX...........X.XX.XXX...XX....XXXX", "X....XXXX.XX...X..X.X...X..X....X..........X......", "X.....X.....X.....X.XX...X...X.XX.X...X...X..XXXX.", "X......X.X.X..X...XX...XX..XXXXX.....XX.....XX....", ".X.XXX..X......X....X.X..X..X........X....X.XX....", ".X..X.X.X......X.....X....X..XX.XX....X..X....XXX.", ".......X.X....X....XX...X.........X.X..........XX.", "X.XX...X...XXX....X..XX...XX...X.XXX.X..X.X....X..", "....XX.X..XX.XX....X....XX.....X..........XX...X..", "...XX.X.X........XX.X.X...XXX....X.XXXXX...X.XXX.X", ".X...X.X...X..X...XX.....X.X........X....X.....X.X", "XXX..XX.X....X.X.X...X.X..X....X..X.X..X..X.X..XX.", ".X...X............X.X.XXX.XX.X.......X.X.X..X..X..", "X.XXX.X.....XXXX.X...X..XXX......XX..X.........X..", ".....XX.XX..XXX...XX..X.......X.X..X.....X......XX", "X.XX.XX.XX..XX........X.X.....X...................", ".........X..XXX.X...XXX...XXX.........X..X...X.X..", ".X......XX.X..XX.X.XX...XX..XX.X.XX.......X.XX.X..", ".....X...XX.X..X...X.XX..X.X.X...X..X.....X..XX.X.", ".X.XX.X.X.X....X...........XX..XX.X....X.X..X..X..", ".XX.XX.XXX..XXXX......X.....X..X.X..X..XX..XXXX...", "X..X.......XXXX.XX...XX..XX........XX..X......XX..", "X.X.........XX....X.X.....X....X...X...XX.X.XX..XX", "X.X.XX..X.X..X.X.X...XX.X....X......XXXX.X..X.XX..", ".......X.XX.......X..XX...XX....X.X.....X..X.X..X.", "...X.......X.....X..........X.X.XX....XXXX....X...", ".....X.X..XX...X..XX.XX......X......X.X..X........", "X..X..XXX..X.X...XX......XXX...X......X..XX..X....", "...X.....XX.X.....XX....X.XXX..XXX..X.XX...XX..X..", "..X.X.X..XX.X..XX..........XX.......X.XXX.X...X.X.", "..X....X.XX....XX.X....X....XX.X.X..X....X.XX..X..", "X.X...X....XX...X.....X........X.X.X.....X........", ".......X.XX..X.......X.....X.XX...XX.X.X...X....XX", ".X....X.X..X....XX....X......X..X...XX.X.......X.X", "XXX...X..X..XXX........X.....XXXX.......X.........", "X.XX....X.X.....XXX...X..X.......X...X...X.X.....X", "..........X.X...X.........X..X..XX.XX...X...X....X", "X..X..........X...X.....XX.X..XXXXX.....XXX..X....", "X..XX...X..XX....XX....X....X...X.........X..XXXX.", ".X....X..X.....X...XX..XX......X......X...X.X.....", ".......X.X..X..X.XX.XX..X...XX..X...X..X.XX.X.....", "..X....X..................XX.X..XX.X.XX..X.XX.....", "XX.....X.X.....X.X.X......X.......X.X.X.X.XX......", ".XX..X........X..X...X..X.X.XX....X......X.XX...XX", "X..X...X..XX........X.X.X.X.........X.X....X....X.", "..X....XXX....X..XX...X...XX....X.X.....XX...X.X..", "X..........XXX......X...X.........XX..X....X...X.."};
    vector<string> candidate = {"..XXX.....X....X.X....X....XX.....X.XX...XX....XX.", "..........X.X..X...XXXX.....XX..XXX.X....X..X....X", "......X..XXX...XX.....X..X..XX.....XX...XXX..X.X..", ".X...X.....X.X..X.....X...........XX...X.XXXX.X..X", ".....X...X..XX....X.X....XXXX......X..XX.X.X.....X", "XX....X......X......X........X.X.X.XX...X...XX..X.", "X.......X....X...XX.XX...X....X....X.X.X.X.XXX....", "XX.XXX.X.X.X.....X......XX.XXX...XXXX.X.X.X.......", ".X..XXX...X..X..........XX..XXXX.....XX..X.X......", "..................XX......X.X.....X.X..X....X....X", ".X.....X.XX......XX....X...X.X.X.......XX...X..X..", "XX....X...X...X.X.XXXX..X.X.X....X.X...X.XX.......", "X.......XX.X..XXX....XX..X...X...X.XX..X.XXXX.X..X", ".XX.X....X.X...XX.X..X..X...X......XXXX...X.X..XX.", "..X.X.X..X...........X.X.....X...X.X..X..........X", "XX..X.XX..X......X....XX...X....X........X...X..X.", ".XX..X...XX.X........X.X.X..XX...X......X....X...X", "X....X.X.....X..X...X..XX.X....X..X..X.X...XX.X...", "....XX....X.X.XXXX...........XX....XXXX.....X.X..X", ".......XXX.X..........X....X..X....XXX.X..X.X..X..", ".......X..X.....XX..X...X.....XXX...X.XX..X..XX...", ".X...X....X.X...X.X...XX..X....XXXXXX....XXXXXX...", "X...........X....X.....X..X..XX....XXXXXXXXX...X..", "......XXX...XXX.X......XX.XX.X.XX.....X.X.X...X...", "....X.X..........X..X.X...X....XX.XXXX....X...X.X.", "XXXXXX.X...X....X.....XX..XXX..X....X..X..XX...X..", "XX..X...XX.....X.XXX..X.X..X.....X....X..X.....X..", ".XX...X...X..X..X..X..X.X...XX.........X.X.X....X.", "X.XX..X.....X..X.....X.....X.X.....X.......X.X....", ".....X.XX...X.....X......X.....X.X.X..........XX.X", "...X....X.X...X....X.X.....XX.X.....X...XX..XXX..X", ".XX........X.X..X..X......X..XX..X.......XX.XXXX..", "..XX..XX..X..XX..X.....X...X.X.......X..XX...X...X", ".X....XX.....X.....X.X.X.XX.XX...X....X..X.X...XX.", "........X.XXX..X........XXX.....X..X...X....X.....", ".XXX..X.....X...X..X.X...XX......X..X..X.X....X..X", "...X..XXX.X.X..XX.X...X.XX.X...X.......X....X..X.X", "..X....XX.XX.........X.X.X..XX.......X.XXX.X.X....", "X..X..XXX...X........X....XX..X.X.X.X.........X...", "...X..XX.....X......X..X.........X..XX.X..........", "..XX......X.......X.XX.......X....XX......X....XX.", "X....X...X.X.X.X.X.X.X........X.........X.XX....XX", ".......X....XX.....X.X...X.......X..........X.....", "....X.X....X..X.X...X..XX...X.X.XX.XXX.X......X...", ".....X.X...XX.......X.X..X..X....X.XXX.XX.....X...", ".XXX...XXX....XX..X.X.X..X...X.XX....XX.....X.XX..", "X.X..X..X...XX...XXX.X....X.X..X......XX.XXX......", "..X...XX.X.X...X.XX.X......X..X.......X.X..X.X...X", ".XX........X.XX....X..X..X.....X......XXX...X.....", ".X.X.XXXXXX..XX.X........XX...X.X...XX.X..XX.X..X."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 138;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> known = {".X..X....XXXX..X.X.XX.....X......XX.XX.X.XX...X..X", "XX.X........X...XX.X.X.........XX.X.X.....X.XX....", "X..X.XXX.XX.X.....X...X...X...X..X.X.X....XX.X.X..", ".X..X.X....XXX.XX......X.............X..X.X...X.XX", "X..X....XX..........XXXX.XX....X...X.....X..X.....", "X.........X....X....X..X....X.....XX....X....XXX..", "XX.X.....X.........X......XXX....X.....X.....X.X..", ".XXX...X.X.X.X..........X............X...X..X.X..X", "X.X.XX...XXXX....X..........X......X.XXX.X.X....X.", "X.X........XX..X.X.X.....XX........X......XX.X....", "....X..X...X........XXX.....X...XX....X..XX.XX....", "X.XX.X.X...X..XX..XXXX.X...X.XX......XX..X..X..XX.", ".XXX..X..X.X.X.......X..X........XX..X..XXX...X...", "....X.X..X............X...X......X..XX.....X....X.", "....X.XX..X........X........X..X...X.X......X.X.X.", "..X..XX.....XX..X.......X.X.X.X....X.X..X..X.X.XXX", "..X...X..XX....X....X..X.X..XX.X...X..X....X..X...", ".X..X..X..X......XXXXX..XXX..X.....X.....XX.....X.", "..X.X.X.....X.X...XX.XX.X...X......X.....XX.X..XXX", ".X.......X.X....X.X..X......XX.X..XX..XXX...X..X.X", "....X....XX..XX.......X.XXX......XX.X.X.X.X.X.X.X.", ".....X....XX.X.XX......XX..XX...XX.X..X....X.XX.XX", "XX.XXX..X..XXX..X..XX......XX..XX..XX..X..........", "..XX..X....X...XX..XXX..X....XXXX.....X...........", "...X....XXXX.X..X...X.X.X.X.X....X..X.....XX....X.", "X..X.....XXXX.X....X....X....X.XX...XXXX.....X..XX", "...X...XX..X....X..X.....X.XXX..XX.X...X.XX...X...", ".X.XX....X..X.X.X...X.XXX...X.X.X.......X.XX...XX.", ".X..X..XX.X..X.....X.....X..X.XX....XX.X.XX...X...", ".X...X..X.X.X........XXX.X....X..XX..XX...XX.X....", "..X..X.XX..X....X....X.....XXX.X....X....X..XX.X..", "X.....XX..X........X.X.........X.X.......X.X......", "...XX.X...X.......X.XXXX.XX.X...X..X....X...X..X..", "X.X..XX.XX.X...X..X.X....XX.X............X......X.", ".X..XX..X.........X.......X........X.XXX.XXX...X..", "...X.XX.....X.X......X.....X.XX...XX....X.XXX...X.", "..X...XX.X..X..X.XX.XXX.X.XX..X....X....X.X...X...", "....XX.X.....X....XXXX.XX....X....XXXX.X........X.", "....X.......X..XX...XX....X.....XXXXXX..X...X....X", ".X.XX............XX.XX.....XXX................X...", "X..........X..XX..X....XX....X........X....X.....X", "X.XX....XX..X..........X.XX.X.......XX....X....X..", "X........X...X.X.X............X.X...X...X..XXXXX..", "X......X...X....XXX...X.XX..X......XX...X..X.X.X..", "......X.X.........X.X..X.......XX...X.....X.......", "XX.X..X...XX......X............X..XX..X...XX..X...", "X.XX.XXX.........X.XXXX.X....X..X....XX...X.X.XX.X", "...XX..X.XXXX.X......X.....X......X.XX.XXX.......X", ".....X.X...X.....XX.X...X.X.....X.........X.X.X..X", ".....XXXXXX........X......X.X..X...X..X...X......."};
    vector<string> candidate = {"X..X.X.......X...XX..X..X.XX.X.X...XX..........XX.", "..X..XX.X..............X.....X...X...X.....XX.XX..", "X...X.....X...........XX..X..........XXX.XXX...XXX", ".X....X.XX.XX.X...XX....X...XX.X......X.X...X..X..", "....XX.X.XX..X...X......X....X.X.X..X.X.......XX.X", "XX.X.X.....XX.........X.............X.X....XXX....", "....X.....XX.X.....XX.....X.X...XX.....X...X.X..X.", "..X.XX......XX...XX...XX.X...XXX......X......X....", "..X.........XXXX....X...X..X...X..X.X.X......X....", ".....X......X....X......X....XX........XXX.X..XXX.", "..X....................X.....X..X..X.XX....X.XX.X.", ".X.........X.X..XXX.X.X.XX.X...X..XXX..XX.....X...", "....X....XX...X.XXX.....X..XXX.......X.X.X.....X..", ".X.....XX....X.X..X........X...X.XX.XX.XX...XXXX.X", "..........X.........XXX...XXX..X..X.......X.X.X...", ".....X.........X......X...XX....X..X...X......X..X", "....XX..X..X.X...X.X.XX...XXX..XXX........X.XXXXXX", "..XXX..X.XXXXX...X..X...X..X........X.XXX.XXX.....", "......XX....XX...XX.....XX.X.....X.......X.XX...X.", "X.X....X.....X.......XX.X.XXX......XX..X....X..X.X", "X....XX.XX.X.X..XXXX.........X.XX....XXXX......X.X", ".........XXX.X..XX.....X.X............X...XX......", "..X.X.X.XX...X..X.X...X.XX...............X......XX", "..XX.............X.XX...X....X......XXX.X.X.X....X", ".....XX....X..X..X.....X.....X.X.......XX......X.X", "...X..X.....X.X.X....X..X...X.XX...XX.....X....XXX", "..X.X.....X.XX..XX..X...XXXX.......XXX...XX.......", ".X....XX...XX...X.....X......XXX.X........XX......", "......X.X.X..X.X.X.X.XXXX.XX.......X.X....X....X.X", "........X..X......X..X...X..X.X..XXXX.XX..X.X.....", ".....X..X...X.......XXX......X...X........XX.X....", "..X.X......X.X....X....X...X..X..........X.X......", "....X.X...X.X..X.X...XXX..X..X.X......X..X....X...", ".X..XX..X..X.X...X.XX...X....X..X....X..X..XX..X..", ".X.....X........XXX..X...XX...........X.X.XX..X...", "X.XX..........X.X.XX.XX.X.........XX.XX........X.X", "X..X.X...X.X...XX....X..X..X.XX..XX......X.......X", "..X..X..XXX..X..X...X....XX...X.X..XX..XX.X..X...X", "..XX.XX.XX....X.X.X.XX..X.XX..X.XX.XX.......X.X...", ".X.........X..X...XX..X..XXX.X.XXX........X....XXX", "..X........X......X.XX.......................XXXXX", "XX.X.X..XX..........XXX....X.XXXX....X....XX....XX", "X....X..X........XXX..X....XX.........X...X..X....", ".X.........X.......X..X.XXX..X....X...X.....XXX...", "....X.XX.X..X..XX..X...........X.X...X..X.........", ".X..XXX.........X..X.XX...XX..........X....XXX....", "X.....X...X...X..X..X.X.X......XX.....X...X.....X.", ".X.......X........X..XX.X.....X.........XX..X..XX.", "...XX....X.....X...X.....X..X......XX.X........X..", "X...X.X.X.XX.....XXXXXX.X.X.....X...XX...X.X..X..."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> known = {".XX...X.X...X.X.....XX.X.XX.X..XXXX.......X..X...X", "X.X.....X.....X..X.....XX......XX..X.X.X..XXX.X..X", "XX..X.....X....XX.X....X..X..X.XX.XX...X......X...", "..XX.X..X...XXX..X..X..X.X..XX...X..X.X...X.......", "..X.X........XX...X.X.............X..XXX.XX..XX...", ".X.X.....X.......X...XX.X.X...X.......X.........X.", ".X...X......X.X.........XXX......X.X.X.......X...X", "..X....X.........X....X...XX.X..XXX.X.XX....X.....", "...X.X.......X..X..X..........X.X......X...X.....X", "X...........X.X....XX..X..X.....X.X.....XXX.X..X..", "..........X.X..X..XX............X...X.X...........", ".......X.....XXX.X..XX........XXX...X....X..X....X", ".X.........XX.......XX...X..X...X.X.X.....X...XX..", "...XX.....X..X.X.X.X.........X..............X....X", "XX.XX..............XXX.X..XXX.XXX.X.....XXX....XXX", "X...........X...X....X.X..X..XXX.XXX.X.XXX.X......", "...X.X.X..X...X....X..XX.XX.X...X..X......X.X....X", "X...X.X.X.X..X.X....X.........X..X....X.XX....X..X", "....X.X.....X.XX....X.XX....X....X.......XXXXXXXX.", "X.XX.X..X......X.X..X..X....X.X.XXX..XX.......XXX.", "X.X.X..X.....XX.XXXXX.....X.X....XX....X.XX....XXX", "..XX....XXX.XX...X........X..X..X.....X..X.XX.XX..", "......X.X........X...XXX...X..X.....XX.XX.....X..X", ".......X...X.X.X.X..X..X..X.X....XXX.......X..XX..", "........X..........XX..X....X......XX..X.X.X.XX...", "XX..X..........X.X......X..X.X..X...X...XXX.......", "X.....X.XX..XX.X...XXXX.X......X.X..XX..X......X..", "....X.X..XX......X.....X.X.XX..........X...X.X....", ".......XX.......X...XX...X..X....X.X..X..X.....X..", "X...X.X...X..X.X....X...X...X...X.......X...X..X..", ".X...X.........XX.........X..XX......X..XX.X..X..X", "X.X..X...X.XXX.X.X...XX...XX.....X....XX...X.X.X..", "....X...........X.X.X...X...X.XX..................", "X.XX...X....X....X...X.X..X..X........X...........", ".X.X..X...X....X.....XX...X.........X.X...X.X..X..", "......XX.X.XXX..X..............X......XX..........", "X..X...X..X...XXXX..XX.X........X.........X......X", "...X.X...X.....XX..XXX...X...X....XXXXX..XX...XXX.", "..XXXX..........X......X.X...XXX...X...XXX....X...", "....X........X.X...X....XXX..XX......X............", "X....X.X.X..X.X..X.XX..XX.....X...X.........X.....", ".........XX......X.X.......X......X..XXX......XX..", "..X.......X.X.X........X.XX.....X.X..X......XX....", "XXX....X...X...XX...X.X.X.X..X.X....X...X..X......", "...X..XX....X.X..XX..X.X.X....X...............X..X", "...XX..X........X.....X..X..X....X...X.XX..X...X..", "...XX...XX..........X......X.XX...X.X..XX......X..", "..X.....XX......XX.X.....X.X..X...XX....X.X.X....X", "X.XX....X...X..XXXXX.XX.X....X...X.X........X.....", "X..X..X..X.X....XX..X....X.X.X.........X..X.X.X.X."};
    vector<string> candidate = {".X.XXX.............X.X..XXX..X.X.....X..X..X.X....", "..X.....X....XX...XX.X...X.X....XX..XX..X..XX.X.XX", ".....X.X.....XX...X.....XX...X..X.X...X....X..X.X.", "X..X..XXX...X.X..XX...........X..X.....X.....X..XX", ".........X...X......X.X...X..........XX......X..XX", "....XX..X.X...X...X.XX.X....X..X.XX.......XX.X.X..", "......X.....XXXXX....XXX..X............X.X.X.X...X", "XX....X.X...X...XX....X.X..X..XX....XX....XX...X.X", ".X...X..X..XX..XXXXX..X.XX...XX...X....X..XXX.XX..", "XX.XXX....X....XX.XX..X...X.X...XX.X....XX......X.", ".......XX..X......XX...X.....X..X.X.......X......X", "XXXX.X.X.X....XX..X....X..X..X....X..XX..XX.X..X..", "..XXXXX.X..XX...X...XX.X......X.......X.X.X.X.X.X.", ".X..XX.....X....X.X..X.X..X...X..X...X............", "XX.X.XX....X.......X..X..X......XX.X........XXXXXX", "X.X.....X...X.X...........XX....X.X..........X.XXX", ".X..X.......XX.X...XX.....X..X...XX..XXX.X.X......", "..X...X...X.....X......XX.X..X..X....X.X.....X.X..", "X.............XXXXX...XX.XX.X.X..XXXX......X.X....", "...XX.X...X......XXX..X.X..X.....X...X....X......X", "..X...X........X......XX.........XXXXX.X....X.XXX.", ".XX.........X...X.X.X...X...XXX.X......X...X..X...", "XX.......X..X..X.....X....X....XX....XX.XX.X.X...X", "..XX..X..X.X...X.XXX.....X.X......X..XX...X.X.....", "X....X...X.....X..X.XX.X.....X....X...X..X...XX.XX", "....XXXXX....XX...X..X..X....X.....X......X.X.....", ".XXX.X..XX......X....X..X...X.X.....X.X.........XX", ".X....X.X..X.X.....X....X........X...X...X....XXX.", ".XX..............X...X....X....X.......XXX.XXX....", ".X...X...X.....X...X......X..XX..XXX.....X.....X..", "..X........X...XXXXX.X........XXXXX.......X.X...X.", "...XX..X...X.X......X.X.....X.X.........X...XX.X..", "X...X.XX.....XX............X.XX.....X.....X.......", "....X...X....XX...XX...X...XXX..X..X....X..XX..X.X", "X...X..X.........X..X..X..XXXX....XX.......X.XX...", ".X..X.........X.X......X........XX...X.XX.XX..XX.X", ".X.....X.X.....X.......X.X......X......X.....X...X", "X..XX....X..X.........XX.........X...........X..X.", "....X.....XXX....X...XX.XX.X..X..X.XX...XX.X....X.", "X...X.X.X....X..XX........X...X...X...............", "X...X.....X..X...X.X........XXX....X...X..X..XXX..", "...XX...X.XX.........X....X..X...X.X.X..X....X.X..", "X....X...XX.X..X....X.XXX.XX.X............X.....XX", "X.XX................X....X.........X.X.X..X...X...", ".XX..X...XX.X.X......X...XX...X......XXX.....X.X.X", "....XX.XX......X...X.X.....XX..X.XX.X....XX...X..X", ".X..........XXX...X....X.....X........XXX..XX.....", "...X...X..X....X......X......X...........XX...X.XX", "X..X........XXXX....X..X..X.........XX.X..XXX.X...", "..X..X..X..X.X.XX....X.X.XXX..X.........XXX......."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 119;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> known = {"....X....X....X.XX.XXXXX......X....X.X....XX.XXX..", "..XXXX..X...X....X..X.X.........X..X...X.....X.XXX", "XX.XX.....X.X........X.......XX.X..X.XX....XX.X...", "..X...XXXX..............X..X..X.X.X.XX.X..X...X.X.", "..X.........X.XX..X..XX.......XXX.X....XX.X.....XX", ".X..XXX...............X........X..X...XX.X.X......", "XXX..X......X..X.....XX.X......X......X..XX......X", "X............X........XX...X...XX..X.....X.....X..", "...XXX...X.X....X.XXX....X.....XX...XX.....X.....X", "....X...X......X.XX.X.XXX....XX...X........X.X...X", ".X........XXX...X.XX.....XXX..X.X.....X.X....XXX..", "..X..X....X.....X.......X.X.....X.X..X.......XX...", "X...X..X........X.X..X...XX.X....X.X.X.XX....XXX..", "XX.......X.X..X....X...X.X....XX.X........X.....XX", ".X.....X......X..X........X.X.XX........X......X..", "XXX..XX.XXX.X.XXX....X..X.X.X.X.X.......XX.X......", "...X...X......X..X.X...X....X..X...X....X.....X.X.", "........X.....XX.....XXXX....X.X..........XXX.X.X.", "X...X......XX...........XX.X.X.XX........X........", "....X.X.X..X....X.X..X.....X.X....X..X.......X..X.", "....XX.X......X.......X...X.....XX..XXX...X.X..X..", "...........X...XX.X..X......X.X.XX....X.XX...XXX..", "..X........XX....X...X..X............X...........X", "X.....X...XXXXXX....X...X....X..X.X.X........X...X", "X..X..X.X...X...X.......XXXX..........X.X..X..XX..", "....XX.....X.XX....XXX...X..XXXX.....X..XXX.X.X.X.", "X....X...X.X....X...XXX..XX....X...XX.X.X..X...XXX", ".....X....X...XX....X..XX.......X.XXX......X...X..", "X.X..X.XXX.X..X...X.X...X....X.XXXXX....X.XX..X.X.", "X..X....XXX...X.X.X..X.X...X..X..XX....XX.X.......", "X..X.....X.XXXX.X...X...X..XX...X....XX..X.XXX...X", "...XX...X.X.X..X..X..XX.X....X...X.XX.....XXX.X.X.", ".X........X.X.X.......X...X..X..X...........X..XX.", "XX.X.XXX...XX..X.XX......X.X....X....X......X.....", "X..XX..XX.X..XXX.....XXX...XX...X..X...X.X........", "X.XX.X.....X......XX.X.X...XX.X........X..........", ".......X.....X.XX.......X....XX...X..........X..X.", "X.XXX..XX.......X........X.X....XX.XX.XX.......X..", "X.X..X....X.XXX.X..X...X.X.X....X.XX....X.X....XX.", "..X.X....X.XXX...X.X.X..X..X........X....X..X..X..", "....X.XX....X....X...X..X..X........X.X.XX..X..X..", "........X...X..X....X......X...X..XXXXXX.......XX.", "XX..X.X......X..X....X...X.X...XX....X.X.....X.X..", "....X..X..X.....X.X...X.X.XX...X........XX....X.X.", "....X.X.X.........XX.....X........X..XXX..X....X.X", "..X....XX....X.....XX.........XXX...XX.X..........", "........X..X.......XX...XX.XX.X.X.X...XXX....X.XX.", "....X....X..XXX.X.X.....X....X.XX.....X.XXX.XX.X..", "XXX....XX..X....XX...XX...X...XX..X..........X....", "..X.X....XX..XX.XX..XXX...X.X...XXX..X.....X......"};
    vector<string> candidate = {"...X.X.X.............X...X..XXX...X.X.X..........X", "XX..X......XX..XXXX....X...X.........X..X...X..X..", ".X.........X.........X......X..X..XX.XX.....XX.X.X", "XX.XX.X...X...XX...X.....X.........X..X......X..XX", "X......XX..X...X..X..X.X.........XX.X.X........X..", "X.......XXX......XX..X.XX...X...XX.XXX.....X.X..X.", "..X.X.....X...X.X...X...X.XX...X..XXXX.X.X......X.", "...XX.XX...X.X.....XX.....X..X....X....X..........", "..X.XXX.....XX..X.....XX..XXXX...XX...XX...XX..X.X", "XX....X..X.X.......XX....X.X..XXX....X..X..XX...X.", ".X.X..X.X.X...XX...XXXX..X......X.X...X.X...XX....", "...XX.X.........X.X....XXX....X.XX.X.XXX....X.XX..", "........X.....X...X.....XX.......XX.........X..X..", "..X....X..X..X...XXXX......X.....XX.X...X....XX...", "XX....X.......X.X...X.X.X.XX.......XXXX.X....X.XXX", ".....X...XXX...X.X...X....X.X.....X.X..X....X.XX..", "X.X..XX.........X..X..X...X...XX...........X..XX..", ".X....X.......XXX........X..XXX.X...X...X..X...XXX", ".....X..XX..X....X.XX......XXXX.X.X....X..X.X.X...", "XX.X.X..XX.............X.X.XX....X.....X......X.XX", ".X..X......X..X......X....XXXX..XX..XX...XX.......", "..X.X..X..X.X.X.....X...X...X.XX..XX..X..X...XX.X.", "...XX...X..X.X...X....X...........XX....X.XX..X..X", "....X.X.X.X....XX...XX..XX..........X..X..X.......", ".XX...X.X....XX.X...XX.X...XX.X.X.XX.X.X......X..X", "X.X.XXX.X..X..X.X..X.........X....X...X........XXX", "............X....X.X.X..X..X..XX...X.XXX...X......", "XX..X.X.XXX...X......X.X.X....XX.XX.X...XXX......X", "XX.XX...X.X...X...X.XX..X.X.X...X.X.XXX..X.X.X....", ".....XX..X...X......X...X.........XXX...X...X..XX.", "..X....X.X.X.XX.X...X..XX...X.X.X.XX.X..XX.X.XXX..", "XX.XX.....X.....X.X.X....X.......X.X..X...X....X.X", "..X....XX.X..........X..X..X.....X.XXXX.XX.X......", "....X...XXX..X....X.X....X......X..X.....XX..X....", "..X..X..XX......XXX.X....X.X...XX.....XX......XXX.", "........X........XX..X......X.......XXX.X...XX...X", ".........X............X....X.XX...X..X..X..X......", "......X...XX.XX........XX.....X......XX.X....X....", ".XX..........X.......X.............X....X..X...X..", "...X..X..XX.X..X........X..X.X..X...X.....X......X", "...X.X....X...X..XXX...XX.X.........X.....X...X...", ".X.X.X..XX.X..X..XXX.X..XX.XXXX..X.X..X.XX........", "......XX...X....X.......X......X.X.....X.X.XX.XXX.", "X.......XX..X..............X..X.X...........X....X", ".XX..........X.X.X.X..XXX.X..X..X..X.......X.X....", "....XX.XX....X..X..X..X.X...XX....XX..........XX.X", ".X...X.....X...XXX..X....X........X...X.X..X..XXX.", "....X.X........X.X..X..XX..XXX...XX.X...XX.X.....X", ".X..X....X...X..XX..XX.....X.X...X...X.XX...X....X", ".X.X.XXX......X...X..X....XX......X....XX...XX.X.."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 130;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> known = {"X...XX..XX.XX......................X...X.X.X..X.XX", ".XX..X..XX.....X.....XX.......X.........XX..XX.XX.", "XX.........XX.X....X........XX..X..X.XX...X...XX..", "..X.....XXX..X..X..XX....X........X..X..X.X..X....", "X..X..X.....X.......X..X.......X...X...XX.X.....XX", "XX..X....X.X.........XX..X.....X.XXX.X...X....X...", ".XX.X.X......XXX..X.........X...XX...X....XX....XX", "X...XX...X.X..X...X.X..X.............XX...X...X..X", ".........X..XX...XXX.XXXX.X.X...........XX......XX", "..X...X.....XX...X.............X...X..X...XX.XX..X", ".....XXX.......XX...X....XXX........X..X..........", "X..X..........X..X.XX..XXX......XX....X..X..X.X...", ".......X...X.X.XXXX....X.X..XX..X.....X.XXX.X.....", "X.X.......XX...X.......X..X..X..X.X...X.........X.", "...X.XX.X...X.XX.......X...X..X...X..............X", "X...X.X.X..........XX..X..XX.X...X.XXX......X.X..X", "XX.............XXXX...XX...X....XX..X...XXXX.XXX..", ".X...X..X.X.....XX...X..XXX.X.XX..X.....X..X....X.", ".X..XX....X..XX.X.X..........XX...XX...X..X......X", "..XX....X.X.X.X...X....XXX..X.X.X..X.X....XX...X.X", "XX.................XX...X...X.X..X..X..X..X....X.X", "....X......X....X.X......XX..XX.XXX.XX...X....X...", "..X.....XX..X.XX..X.X.X.X.X..X........XXXX...X..X.", "......X..XXX..X.X.....X......X..X....X..X..X......", "...X..X.....X....X......X....X.XX.X...X..X......X.", "......X......XX..X.....XX...........XX...XXX..X..X", ".X................XXXX......X.X.....XXX..X.X.XX.X.", ".X....XX..XXX..X.........X.XX.XX.X..X...XX.XX.....", "........X.X.X..X.....X..X......X..XXX.X.........X.", "....XXXX........X..........X..X...XX..XX......X...", "....X...XX..XX..........XX.XX.....XX.X......X...X.", ".XX...........X..XX..XXX.....X.X........X......X..", "..XXX.X...X..X.....X.XX...X......X.X.....XX.......", "..XXX......XX..XXX.XX.X.X..X...XX...X.XX.X..X...X.", ".......X.XX.XX..X....X...X...XXXX..XX....XX..XXX..", "............X.....XXX..X..X.....XXX.......XXX.X...", ".....X...X..............X..X.XX...X...........XX..", "..X..X....XX......X.X..X...XX..........X.XX.XX..X.", "..........X...X....X.......X....XX.......X.X.XX...", "..X.........XX..XXX..X.......X....X...XX....X.X..X", ".X..X..XXX...XXXX.XX..X.X.XX.X..........X..X.X.XXX", "..X.XXX..XXX.X.X..X.X..X..X..X...XX...........XX..", ".X..........X.X...XXX...X.........X....X.XXXX.X...", "...X.X...X.XX..XX....X.XX....XX.XXX...X.......X...", ".....X.X.XXXX..XXX.X...XX.X...XX.......XX.XXX.....", "..X.X..X.........X....XXX......X......X...........", "X..X.X....X.X.X........X.............X...X........", "......XX......X.X.X..XX.X....XX........X...X...XX.", "X..........X...X.....................XXX........X.", ".........X....X.....................X....XXX..X.X."};
    vector<string> candidate = {".......X.X.X.X..........XX........X..X.X.XXX..X.X.", "X.......XX.......X...XXX..XXXXX..X.X.X..X..X.....X", ".X.X...X...X........XX....XXXX.....X.........X....", ".....X.X........XX.X....X.X...X.XXX.....X.X..XX...", ".......X....X.XX.XX.X..X.X...X...X....X..X......X.", "...X.XX......X..X.X.X.X.XX.X......XXX.............", "....X.......XX.X...X..XX..X............XX....XXXX.", "........XX..XXX..X.....X.....X.X.XX....X.XXX.XX.X.", "....X...X......X..X.X...XXX..X..X.X..X.X.X.XXX....", "XX...X.X.X......X.X....X.........XX.....X.....XX..", "..X..X.........XXXX..........X......XXX......XX.X.", "X.....X..X.........X.XX..X....X...X....X....X..X..", ".....X.X..X..X..X.X.....X.X...XXX...XX.X....X..XXX", "X.....X.X..XX...X........X...X...XX..X.X..X.X..X.X", "X..X.XX..X..X....X.....X...XXXX.XX......X...X....X", ".....X.X....XX...X.........XX.....XXX....X..X.....", ".XXX..X...X.X...X.......X.X.X..X.XX...X....XX.....", ".X..X....X..XXXX....X...X.......X.X..X..XXXX.X.X.X", "XX..X..........X...X.XXX.XXX......X.XX.......X...X", "......X..XX....X.XXXX...X..XXX.X..X.....X.X....XX.", "XX....X....X...XX...X.XXX......X.X..XX...XX......X", ".XXX..XX....X.XXXX.X....XX.X........X.XX..XX..XX..", "....XX..X.X...XX..XX...X..X.X..XXX..X...X....XX...", "X.X......X..XX..........X....X..X..X.X.....XX..X..", "......X................XX.XX.....X..XX..X..X.X....", ".X.X...XXX..X...........XXXX.........XX.X...X.XX..", ".XX......XX.XX...XXXX....X...X.XX......X..XX...XX.", "....X..X..X...X.X.XXX...X..XX.....XX.X.....XX.X.X.", "..X...X..X..X.X....X...X....XX..X..XX.X.X.....XX..", "....X.....X........XX.X.X..XX.X.X..X....X.X.X.....", "X...X..XX..XX...X..X.X...X....XX.X......X.X..X.X.X", "..X.XX....X.......X...X.X..X..X...........X.X...XX", "XX...X.....XXXX....X.....XX..XXXXX....XXX...X..XX.", ".....X...........X..X...X.X.....X.X......X..XX....", "...XX.X..XXX.X.X.XX......X..........X..XXX..XX..X.", "..X..XX........X.....X....X....X.....X...X.....X.X", ".....X..X............XX....XXXX.XX...XXXX..XXXX.XX", "...X..X.X.X...X............XX..XXX.X....X...X..X..", "....X..X.XX...X.X.XXXX.X......XX..XXXXX......X.X.X", "..X..XXXX........XXX..X.........X...X.X..XX..X...X", "...XX..X.....X..X...X...XXX..X.X....X.....X...XX..", "..XX..XX...X.......X........X.XX........X...XX....", ".....X.....X...X.....XXX.XX........XX...X...X...X.", "...X....X.XX...X.XXX..XX..X...X...X...X.X.X..X.X..", "..X.XX.XX...X..X.....X....X.........X.X..X...XX...", ".......X..XX..X.X..X.XX.X.......XX...X.XXXX.X.X...", ".....X...X.XX.XX.XX.........X.....XXXXX..XX..XX.X.", "XXX.......XX.....X...X...X.......X....X.....X.XXX.", "X.....X..........X.XX.X......X.XX.X.XX.X..X....XX.", ".X..XX.XX.X..X.......XX...X.....XX................"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 101;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> known = {"...X.X...X..X.....XX....XX...XX..X.X.X.XX.XX......", ".XXX.........XX...X.XXX..X.X.....X..X..X.........X", ".X..X.....X....X.......XX.......X...X.X...XX..XXX.", "X..X.XXXX....X..........X.X.X.X.X...XX..X...X...X.", "...X..X.X..X..X......X........XXX...X.....XX.X.XXX", "..X.X.X...X....X..X.X.....X..X.X....X....XXXX..X..", ".XXX........X...X.X.........XX.....X...XXX...X.XX.", "X...X.........XXX..X...X......XX......X....X.X..X.", ".X.X...X.XX.XXX.....XXXX.X.X.X.......X....X....X.X", "X..X.........X......XXX.X.X..XX..X..XX..X..XX.X.X.", ".XX....XX.X...X.....X..X.X.X....XXX..X.X.X.XX.X.XX", "X.X.....X.....X....X.XXX.XX..XXXX....X..XX...X..X.", ".XX..........X.X...........XX.X.....X..XXXX...X.XX", "....X........X.X.....XXX..XX.X....X...X....XXX..X.", ".X.X.....XX..X.......XX..X..X.X......XX......XX...", "....XX..X.XX..X.X.......X..X.X...X.X.X..X...X...XX", "X...XXX....X.......X.X....XX.XXX.XX.XX...X.....XX.", "........X.....X.X.....X......X.X.XX........XX.....", "XX.....X.X....XX..X...X......X.XXX...X.X.....X...X", "..X..X.XXX.X.X...X......X.................XX.X.X..", ".....X....X.X.XXXX...XX.X....X..X..X.XXX.X......X.", ".X.....X..X...X..X..X.....XX........XX..XX.......X", "X..XX..XXXX.X...X.X.....X.....X...X...X.....X.....", "X.XX..XX.X..........XXXX.X.X..XXX.....X...X..X.X..", "...XX..X.......XXXX.XX....X.X.X...X..XX.....X....X", "....X......X.....X.X.X..XX....XX.XXXX.....X.X.XXX.", "..XX..............XXX.X.X..XX.X...X.....X.X...X.XX", "X...XX..X.X.XX.X.....X..XX...X.....XXX...X...X...X", "........X.....X...X.X.X...XX..XX..X.X.X.X..X.X..XX", "X.X...X...X.X.X..X.XX.....X..X...X..X.XX.X....XX..", "........X.........X.X.XXX.......X...X....X.X...X.X", ".XX....XX...X.X..X.......X.X.X..X...XX..X...X....X", "XX.....X.....X...X.X..X.X.X......X...X...X.X..X.X.", "..X......XX....X.X.X......X.....XX..X...X.XXXXX...", ".X..XX..X.X...X..XX.....X.X.....X......XX..XXXXX.X", "..X..XX.X..X.XXXX.XX...XXX...............XX..XX...", "...X.XXX..X.....X......XX.X....X.X.......X....XX..", ".X..X.....X.X..X....XX..X.X..XX.XX.....X..XX.X....", "....X..XXXX...XX.X.X...XX.XX..X..XX.X..X..X....X..", "......X.X..X.X..XX..X......X..X.X.X..X..XXX...X..X", ".XX.............X..X...........XXXX..X....XX.XX...", "XXXX....X.X...X....X...XX.X.....XX.X....X...X.XX..", "....X...X..XXXX..X...X.XX.....X...X.X.X.XX...XX...", "....XX.X.X.X....XX..X.XX..............X..........X", "X...X.X....XX.........X..X.X.X.....XXXXX........X.", "...XXX.....X..X......X........X....X....XX.....X.X", "..XX.X.X.......X......XX......X...XX.X.....X.XXX..", "X.X.X.........X.X...X.XX.......X...XX..X....XX....", "....X..XX.X.XX......X.XX.X..X.......XX........X...", ".X.X.XXX...XXX.........XXX.........X......XX...X.."};
    vector<string> candidate = {"......X....X.X.........X...X...X.....X..XX....X.XX", "...XXX....X.........X.XX.....X.XX.......X..X....X.", "X........XX.X..X.................X...X..X.XX.X.X..", "....X.XXX...X......X..XX.....X...XX.XX..X..X.....X", "...X....X.X.....X.XXX.X.XXX..X..X..X......X.XXX..X", "....XXXX.XX.......XXX.........X................X.X", "X.....X..X..X..XX..XXX...XX.X.X.XXX.X.X.......X..X", ".X..XX...XX..X...X...XX......X..XX.XX.......X.....", "...X........X..XX..X....X.........X......X.....X.X", ".........X...XX.XX...XX...X...XX...XX......XX..X..", ".XX...............XX.XX....................X.XX.X.", "..XXX..XXX.....XXX..X..XX.X........X.....X......X.", ".X....X....X.....X................XX.X.X..X....X..", "..X..X..X.....X....X.X.....X.X......X......XX.....", "....X.........X.......X......X.XX.XXX......XXX....", "..X...XXX.XXX.XX.X........X..X.X..X...XX..XX..XX..", "XX...X....X..X.......X......XX.X.X..X...X......X..", ".X.X...X..X......X.X.X.X..X..X.XXX.X.X..X......XX.", "..X........XX.X........XX....XX...XX.X..X..X...XX.", "......X....X...X.............X......X...X..X..X...", ".......X.XXXX.X.........X..........XXX...XXXX...X.", "XXXX.........X.X..X......X..X.X..XX.X.....X.X...X.", "X.XX......X.X.....X.XX.XX..X.....XX.X.X.X..X...X.X", "...X..X.X..X...X....X....X..XX...XXX..XXX....X.X..", "..XX.XXX..X.XX...X....X..X....X.X.XX...X.X...X....", "X...XX....X....XXX.X..X....X......XX...........X.X", ".........X.X..X.XX...X.X....X..X..X..XX..XXXX...X.", "..XX.......XX...XXXX.......X...X.X..X....X.X......", "XX..X..X......X..........XXX...X..X...X.X.XX.XX..X", "X....X.X.X..X..X..X...X..XXX..........X.......X.X.", "...X.....X..X......X.X.XX.XXX..X...X..XX..XX..X...", ".X.........X..X.........X...X.XXX....XX.X.X.X...X.", "XXX..X....XX..XX.X....X...........X..X.....X...X..", ".XXX.X....X.........XXXX..X..XX.X......XX...X.X...", ".....XX...X...XX...X.XX.....X..X..X......XX..X..XX", "..X...X....XX...XX.XX.....XX.........X...X........", "X....X.....X..XXXX.X..X..X.X.XX...XX.X.....X..XXX.", ".X..XXX......X.X..XX.X..X..X.X...XXX.X......X..XXX", "...........X...XX.........X.X......X.X..X.X...XX..", "...X.XXXX.XXXXXXX..XXXXX...............XX..X.XX.X.", "..X.....X....XX.XX....X.......X.........X..X.XX.X.", "...X..X.X.XX..X......X.X....XX......X.....X..X.XXX", "X..........X..X.XXXX.X.X.X..X...XXXX.XX.X......XX.", "....X....XX...X.X..X....X.....XXX...XXX.XXXXX...XX", "XXX..X..XX.X..........X....X..X....X.XX.....X.XX.X", ".XXX...X..X...XX...X...XXX...X...X.....X...X..X.X.", ".....X.....X....XX...XX..X..XX..X..XXX.X........X.", ".XX...X.X.X.XX..X......XXX..XX.....X......X.XXXXX.", "....X....XXX.X..X.XX.X...X.X..X....X.....X..X.....", "X...X...........X....X...X..X....X.......X........"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 116;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> known = {"..XXX.XX.XX..X...XX.X.........X.....X.........XX..", "......XX..X.XXX...XX.....XX........XX.....XX......", ".X......XX..X...X...X.XX.XX...X....X.....X........", "X...X.X...........X.XX.X.X.X...XXXX.X..X.X.X......", "XX.......X.XX.X............X.X.XXX..X.X.XX..XXX...", "...X.X...XX....X...XX.XX.X.XX...X.......X.X.......", ".X.......X......X.X....X..X.X....X..X.XX.X.X.XX...", "X.XXX.X.......X..X......X.X.....X.X....X......XX.X", "X.XX..X..XX...XX...X..X...XX.X...X.X.X.X..XX.X....", "X.XX......X..XX.XXX....X..XX..XXX..X....X.XX......", "....X.X....XX..XX.X....X......X......X......X.X...", "..X....X...XXX.XXX..X...............X...XXX.....XX", ".XX..X.X..X.X...X.X.XX...............X.XXX.XX.....", "X...XX...X.......XXX....X...X.X.XX...X...X......X.", ".X.X..XXX..XX..............XX.X....X.X......X..X..", "..XX.X..X.....X.......X.....X.X.X.....X...X...X.X.", "....XX.XXX.X....X.X..XX...X.....X.X..........X.X..", ".X.X..XX...X.X..X.....X....XX.........XX.X......XX", ".XX.XX.......XX...X....XX.X.....X.X........X....X.", "....X..XXX........X.....X......XX....X...X......X.", "....X.X..X....XXX.....X...X...X..X.....X...X....X.", ".X.XX.X........X.X..XX..XXX.XXX.X.X.X.........XX..", "X.....XXX...XXX.X.X....X......XX..X......X..XXX...", "X.X..XX.X......X.X.........X.X.XX...XX..X.X.....X.", "....X..........XX...X.....XX.X...X.XXXXXX....X....", "XX.XXXX.X.XX....XXX..XX..X...........XX...........", ".....XX.X.......X..X....X.X.....X......X.XX..X.XX.", "..X..X.X...X..XXX..X..XX....XX........X.....XXX.XX", "X.X.XX.X.........XX.X.X.X.X.....X.X...X.X..XX.....", "....X.X.X..X.X...XXX.XX...X.......X.X...X.XX......", "..XX.X......X..XX....X...X...X.X.XXXX...X....XX.XX", "X....XX...XX.....X.XX.X.X....X.XX....XX.X.......X.", ".........X.XX....X.....X..X.....X..X.....X.XX...X.", ".X.X.....XXXX........X.X...X....X.X.XX......XX..XX", "..XX.X..XX...X.....X..X.X.....X....X...X...X...X..", "...X...X...XX.........XXXX.......X.XXX.X..X...XXX.", ".X..X....X......XX.X..X.......XX...........X......", ".............X.....X.X..XX.XX........XXXXX..X.....", "X....X.X.XX....XX...........X..XX........X........", "...X.XXX..........X...X.X.X.XX.X.X..X.....XX..XX.X", "X.XX...X.X.......XX.X.X..X...X.....X.XX...XX..X...", "X..X..XXX...XX.XX......X...X..X...XX.XX.XX..XXXXX.", "X....X.......X..XX.....X.X...XX......XX...........", ".........XX.X...X.XXX...X.......X..........XX.....", ".XXX..X.XX..X.X....X.....X.....XX.X..........XX...", "X......X..X..X..X.X..X..X.....X.XXX......X......X.", "XX......X......XX.X..X.XXX..XX...XX.....X..X.XXX..", "..X.X.XXX.X.......X.XX...X.X..........X.XXX...XXX.", "X.X....XXX..XX.X...............X.X...XX.X.....XX..", "XX.......X.X...X..X..XX....XXXX..X.X....X......X.."};
    vector<string> candidate = {".XXX.XX..XX.X.X....X................X.....X...X..X", ".....X...X.....X...X.....X....X.......XX...X..XX..", "X.........X..X...X.X...X...X.X.X.X.X..XX.X........", "X..X..X.....X.........X.X..X.XX.X...XX...XX..X....", "..X.............X...X..X...X........XX.....X.....X", "X....X..X.........XX....XX..XXX...X......X...X.XX.", "....X.X....X...XX.........X.X.....X.....X..X.XX...", ".X.XX.X...X.......X.....X.XX..X..X........X.......", "X..XX...XXX....X........X.X.X...XX..XX.XXX...X....", "..X.X...X.XX..X..X..XX......X.X.X.....X....X..X...", ".......X......X..X......X........X..X...X.....X.X.", "X.X..XX.....XX......XX.XXXX.....X.........X.......", "X......X..X.....X..XXXXXX........X.X.X..XX.....XXX", ".X.......X....X...........XXX..XX...X.........X...", ".XX......X..X..X....X.....X.XX........XX.X....X...", "...X.X.X.X........X....XX....X...XX.XX...X.X.X.X.X", "....X.......XXX..X..XX....X..X.....X.......XX..X..", "X.........X...X....X.XXX...X.X.....X...XX......X..", "..XX.X.X.XX.X..........X..XX..X..X..X.X..X......X.", ".X.X..X...XX.XXXX.....X...X...X..XX..XXX....X..X..", "...X.XXX..XX.X....XX......X....XXX........X.......", "XX..XX....X..XX....X.X.XX....X..........XXXX.X..X.", "XXXX.X..X..XX....XX.....XX..X.X.....X..X..X.X.....", "...X.XXX..X....X................X...X........XX.XX", "....X..X........X.XXX......X..X..X.X....XXX..X.XX.", "XX...XX..XX...X..XXXX........X...X..X......XX.....", "XX........X..........X...X.X...X.X...X...X.X.X....", "..X.XX....X.XX.X.....X.X...XX..XXX...X.X.X....X.XX", "X.X..........XX......X.X.....XX......XX...X.X.....", "....X....X....X...XXX...X...XXX...X.......X....X.X", "XX...XXX................X....X..XX...XX.X..X.X...X", ".X..XX.......X.XX...............XX...XX...XX..X...", "X....X....XX......X..X..XXX....XX.X.X.XXX..X..XXX.", "..XXXX..XX....XXX.....XXX..X.X..X...XXX..X........", "..XXXX...X......XX..X..X.X...X.XXX.X....X.XXX..X..", ".X.......X.X..X.X.X.....X..X.X...XX..........XXXX.", "XX.X......X....X......X.XX...X....X.X.XX.X....X...", "X..XX...X.X.XX..X.X...................X..X....X..X", "X.X...XX............XX.XXX......X.XX......XX..X.X.", "X...X.XX..XX.XXX..........X..X.........XX......X..", ".XXX........XXX...X......X..X.XX.XXXX.........XXX.", "X.XX.....X..XX...XX......X.XX....XX...X....X...X.X", "....X.X.X.X...X.X...XX.X...XX.X..X....X.X..X......", "XX.....XXXXX....XX....XX..X.....X.XXX.....X.X..X..", "......XX.......X.X.......X.XXX..XXX....X..XXX..X.X", "X.............X...X....X................XX.....XX.", "X....X..X...X..X..X.XXX.....X..XX.XX......XX.X...X", "XX..X.X......X....XX...XX.X.......X.X.XX.......XX.", ".X...X.X..XX..........X..X....X.X...X....X...XX.X.", ".X......XXXX....X.....XX.......X..X..X......XX.X.."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 110;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> known = {"..XX.X...XX...X..X.XXX.X.X.....X...X.....XX..X....", ".XXXX.......X...X...X...X.......X...X....X.X.X.X..", "...................X.X....X.XX..X..X.............X", "....X...XX.X.X......X..X..X....X..X.X....X..X..X.X", ".X.XX.X..XX..XX......X...XX..X...X.X......X.......", "X.....X.X...X..XX.........X.....XX.X....XX.X..X.X.", "X.X..XX..XX...X..X..X..X......XX...X...X.....XX.X.", "..X...........X..XX........X.X.......X...XX...XX..", ".......XX.X...X..X.............X.......X..X...X.X.", "XX.....X..........X....X...XX....X..XX.....X...X..", "..XX...X..X.XX........X..XXX.XX..X.X.XX..X.......X", "X.X...XXX....X...X...X.....XX.XX..X.....X.XXX..XX.", "...X.X....X....X.XX...X......X...X........X.X...X.", ".X...XX.X.X....X......X...XX...XX..XXX.X.X..XX...X", "....XXX.....XX..X...XXX..X.XX..X..X.XXXX......X.XX", "..X...X......X...X..XX.......X.XXX....XX..X.X....X", "..XXX...X.XX.X..X....X....X..XX...X....X.......XX.", "....X.X............X.X.X.....X......X.......X...X.", ".....X.X.XXX.X.....X.......X...X....XX..X.........", "...XXX.......X..X......X....X.XX.....X.XX...X..XX.", "X.X.....XX.XX....................X......X.XX....X.", "....X.X.X.....X......X...X..XX..X.X.XXXX.X.X.....X", ".XX...X....XXX..X......XX..X.........X......X..XX.", ".X..X..X.....X....XX.X..X..XX.XX..X.....X.X..X.X.X", "....XX.X.......X......X....X...X.X.....X....XX....", ".X.........X..X.X...XXXXX.XX....X....X..X.X.X...XX", "................X..X..X...X....XX....X......X..X.X", "..X...XX....X.....X.....X..X.............XX.X.....", "...XXXX.......X.XXXX..X...X.X......X...........XXX", "....X...X.X.X.XX..X.....X..XX....X.X.......X..XX..", "X.X...X...X..X...X....XXXXXX.X.X.X.X..X..X.XX.XX.X", ".....X...XX..X..X..XX..X.X...XXXXX..XX.X.........X", "X......X.X.X.....X.X.X.X..X.X..X....X.....XX...XX.", "..X...X..X.....X...X..XX.XX........X..X..XXX.XX...", "..X....X........XX...X.X.....X..X..XX.......X.X.XX", ".X...X..XX....X.....X.X..X.......X..XXX...X.X..XX.", ".X.X..XXX...X.....X..X..X....XX.......XXX.X.XX.X.X", "X.......XX..XX..X....X..X.....XX.......X.....X...X", "XXX.X.X...X..X...X.XX..XX...X....XX......X.XX..X..", "X.X........X.......X...X.....X....X....X..X...X.X.", "X.X.X.X.....XXX.XX..X.X..X..........X.....X..X....", "X...X.....X.X.......X.XX....X..X......X.........XX", "..........X..XX..X.X...XXX.XX..XXXXX.X.XX..X.X...X", ".XX...X......XX..X..X.XXX.XXXXX.....XX...XX.......", "..........XX......X...X..X.........X.X....XX..XXX.", "....X.XXX.......X.............X........XX..X..XX.X", "....X..X.X..........X.X......XX.....XXXX.XXX.XX...", "......XX...XX.XX.X....X........XX..X.....X.X.X..XX", ".....X.XX.X...XX.X.......X...X..X...X..X..X.......", "..XX.X.X.X..X..XX.XX..X......X..XX..X.XX.X.XX..X.X"};
    vector<string> candidate = {".XX...X......XX....XX..XX...X.XX...XX....XX.XX....", "..XX...X.XX..X.X......XX...X.XXX.......XXX....XX..", "..X.XX....X.X.X.X.....XX....XX..X.....X...XX...X..", "..X.....X....X...XX..XX.....X..X.X.X...X........XX", "X.....XX....X.....XX..X..X...........X.........X.X", "..X....X.X..X......X...X...X........XX........XXX.", "....XX.....X..X.X.X....X..XX.X.X.X...X......XXX...", "........XX....X..X.X....X...XX.X..X...XX.X........", ".X......X......X....X....XXX.....XX...X..X.......X", "XX.....XX.XX...XXX..X.........................X.X.", "X.......................XXX....XX....X...X.X.XX...", "...X..X..X..X....X...........XX.X....X.XXX.X......", "X...X......X.X..XX.X..X.X...X.....X..XX.XX...X....", ".X.X....XX.............XXXX...X...X.........X....X", "XX........X...X.XXX.....XX..X....X....XX.XX..X...X", "X...X..XX.XX....XXX..XX..X.X...XXXX...XXX..X....X.", "......X.XX.X.X.X...XX...X....XXXX.....XX...X......", "X.X..................X...X...........X..X.X....XX.", "...........X....XXX..X......X.X.XX.X.....X...X....", ".X....X..X.....X.X.XXX...XX.X...X.X....X......XX..", "X......X.X.X...................XX.X....XX.XX......", "..X.....X.X.X.....X....X..XX..X..X...XX..X.XXX.X..", "...X...X...X...XX.....X..XX.XX.X....XX..X.X......X", ".X.......X......X..X..XXX.............X..X.X..X...", "..XX.XXXX..XX.......X...X..XX..X...XX....X..X.....", "X....XXXXX.X...X........X..X....XXX..X.........X..", "........X.X......X...XX..XX.XX..X..XXX........XXXX", "XXX..X..XXXX...X..X...X..XX..........XX.X.X.......", "....X.X.........X...X...X......XX........XXX..X.X.", "..XX...X..X.X.XX.X.X...X...XX....X.............X..", "..XX....X....XXX.........X....XX......X.....X.X...", "..XX..X..X......XX...XX.X.XX.......X...XX.....X..X", "...X.X.X..X..X.XXX..X.XX.....X.....X.....X...XXXX.", ".X.XXX....X.X..X.........X....X.XXX.............X.", "..........X.XXXX..X..X..X.X....X.X..............XX", "XX.X..X.X..XXXX..X.XXX.........X..XXX..XX...XXXXX.", "..XX..............X...............X.XX.XX..XXXX...", "X..X..X.X.X.XXX.....XX...X.X........XX..XX........", "..X....X.X...X.XX..X......XXX.XX..................", "XX..XX........XX.XX..X.....XX...X..X..X.X..X.X....", ".XX.X...XX.XX...X.X..X............XX.XXX...X..X.X.", "X.X..X...X...XX...XXX....X....X............X.XX...", "X..X....X..XX.XX.X...X..X.X....X.X..X.X......X....", ".............XX.....XX..XX...XX.X.......X.......XX", "X........X........X.X..X.XX.X..X.XXX....X...XXX.X.", ".X...XXX..X......XXX........X...XX......XXX.......", ".............X.X.X.X..X...XXXX.X....XX........XX.X", ".XXXX.X..XXX...XXX...X..XX....X.X...X.X.....X...X.", "X.X.X......XX........XX...X..X.......XXX....XX.XX.", "...X..X.............XX.X.....X.......X.X.X...X.XX."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> known = {"X...XXX..X..XX..X....XXX..X.X...X..X........X...X.", ".........X.....X.X.....X..X.......X..X....XX.....X", "X.X........X.X......XXXX..........X..X.X..XX......", "X.X............X.X...X..X.X.....X.XXXXX...XX.X....", "..X..X...XXX.....X...X.X.X.X.X........X.X....XX.X.", ".X......X..X.XX............X..XXXXX..X..XXXX...X..", "X..XX.XX.....XX......XX.....X.XXX....XX..X..X..XX.", ".XXX..X..XXXX.X...X...XXX.X.....XX.XXXXX...X.XXX.X", "..X..X.XX...X..X..........X..X.X..X.....X......X..", "....X.XX..X....X.....X.......X.X..X..X....X.X.....", "X.X...X..X........XX....X.X....XXX.......X........", ".X.X....X..X.....XX.X....XXX...XX....X........XX..", "....XX.X.X.X.X.X.XXX..XX.......X.X.X...X..........", "......XX.X...X.X.X..XXXX...X.XX...XX..X.X.X...XXX.", "X..X......XXX.X......X.X....X....X.X..X...XX.XX.X.", "..XXX.X...X.X..XX....XXX....X.X.XX....X..X..X...X.", "X...XX.XX.......XX.....X..X.X.....X.....X.X.X..XX.", "..X..X.XXX.XXXX.....X....X......X.X..X....X..X..XX", ".X.X.XX.XX..X.X..X..........X.X..X....X..X......XX", ".XXXX....XXXX..XX......X.X.X.X..XX.......X....XX..", "......XX..X...X........X..X...X..XXXX.....X...X...", ".X.....X..XXX.....X.X..X......X..X.X.X..XX.X...X..", ".X.X..XX...X....X.....X.X.X..XX.....XX.X....X....X", "..X......X.X.X.X.....XX.X.............X..X.X....X.", "XX....XX..X.X................X..X..X........X..X..", "..X.X.X...XX.X.X...X.XX..X.X...X.X...X......X..XXX", ".X....X.............X..X.X......X....XXXX......X..", ".......X.X...X..X.......X....XXXX.X........X.XXX..", "XXX..X.X........XXX..X..XX...X..X..X.X..........X.", "........X..X....X..X....XX...X.......X.X.X.....X..", ".........X..X....X.....X.....X..X......X.X...X...X", ".X...X.X..X..X...X.XX.X....X........X.XXX...X...X.", ".XX.........X..X..X.X.XX..X...X...X.X....X.X..X.X.", "..XX.X.XX.X..........X...XXX......X...X.X.X...X.XX", ".XX.X.....X.............X.X.........X...X.......XX", ".X.........XXX.XX..X.X.X.X......X.XX...X....X.....", ".........X...X.X...X..XX..X.XXX..X......X.....XX..", ".X.XX.X..X..X.....X..X....XX....X...X..X.X....X.XX", "XX........X..XX.X...X.X..XX........X.....X.X..XX.X", "....X.X.X....X.X..X..X....XX...X.XX...X...X...X.XX", "..X.XX...X................XX..X.X..X...XXX..X.X...", "X.....X..X...X.........XX.....XX...X.X..XX...X....", "X..X..XX....X..X...X.........X..X.XX...X...X.X.XX.", "..X..X.X..XX.X..X.XXX.X.............X.X.X....X...X", "..X...X...XXXXX....X.XX..X.......X.....XX....XX..X", "..........X..X..X.XX.....X.X.X..XX..XX........X...", "...XXXXXX......X.X..X..X.X.X.............XXXX.....", "X....XX.XX......X..X.X...X...X..X...X.....X....X.X", "..XX..X...X..XX.X.X.XX.....X.XX.....XXX.....XX.XX.", ".X.....XX..X.X..X.XXXX.XX..X..X..X.........XX.X..."};
    vector<string> candidate = {"X..X..XX.X.X.....X..X........X....X....X....X.X...", "...X.............X..X........X..XXX.XX.X.X........", ".......X.X.XX......X.X....X.........X..XXX.XXX....", "......X.....X.....X.X..XXXXX...X..........X.....X.", "XX......X.X...X.X.X..X..X.X.X.................X...", "X.X.....X.X..X....X....X.XX.X.X..XXX.XX...........", "...X.XXX.XXX....X.X....XXX.X.X..X..X......X..X.XXX", "..X..X.XX.XX.XX.........XX.X......X.............XX", "...X..X....X.XX.X.......X.......X.XXXXX..X..X.X...", "XX.XX....X.X.X.XX.X.XXXX....XXX...X.X..XX..XX..X.X", ".X..XXXXX.X..X.....X....X..X.XX.X...X.....X.XX....", "XX......................X..X..X.......X...X..X.XX.", "...........X..X.XXX.X............XX.....XX..X.X.XX", ".....X.......X.X.X.X........XX..X.X..X....XXX.X..X", "....XX.X.X........X.........XX.X..X.XX...X......X.", ".X........XX.X...XX.X.XX.X...X...........X.X..X.XX", "..X.......X...X......X....X......XXX..X..X.X.XX...", "XX.X..X.X......X.XX..X..X.......X.X..X...X........", "..X......X.X.XX.......X...XX.X......X....X.......X", ".X...........X....X.....X...X..X.....X..X.X....X.X", "...X..X......X.X..XXX.....X...XX.XX........XX.X..X", ".....XX......X..X..X.....XX.........XX...X..X.X...", "X..X..X.X..X.XX...........XXXXX.XX.XX..X.....X...X", "..X.....X.X.XXX....X...XXX....X........X.......X..", "..X.....X...XXX.X.X.XXX.X..XX......XX.......X...X.", "XX......X...X......................X...X.XX.....XX", ".X.X.X..X...X.X.XX.X...X...X....X.....X.....X..XX.", "...X..............X.XX.XX...XXXX..XXXXXX..........", "X....X.X.X........X.....X......XX....X...X..XX....", "......X.....X...X.....X.X.XX...X.XX....X..X.XX..X.", "....X.X..X..X.X.XXX...XX...XX....X.......X........", "..X.......X.X.X..X.X.XXX.X..X.X...X..XXXXX...XXX..", "X...X.XXXX......XX.....X.X.X.X.....X...X........X.", "..X..XX.X..XX.X.XX...X.X.XX..X.............X..X...", "XX........X.......XX.X......X..X..X...X.X.X.......", "X....X..X.........XX..X......XX..X...X.X...XX.....", "........XX...X.X..X.....XX...X.XX....X.........X..", ".XXX.X..X...X.X...XXX.XXXXXX..XX..XX.X........X...", "XX..XX..X.X..X.XXX.XXXX..XXXX...X.............X.XX", "..XX...X...X............X..X..X..X..X....X...XX.X.", ".......X.XX.......X..X....X.....X.X..X.XX...X.X..X", "X.....X..XX..X....X.XX.....X...........X.X...X..X.", ".XX.X.X.....X...X.X...X.X.XX...X..XXX.............", "X.XXX.X..XX..X..XX.......X.X............XXXX......", ".X.........X...X.......X.X.......XX..X..X.X.X..XX.", "..X.XX.X.XXX...X.......XX.XXX..X.X....XX...X.X...X", "XX..X...XXX.........X..X..........X.X.X...X....X..", "..XX.X.X.XX.X.X.......X.X..X....XX...X...X..X.X...", "..X....XX....X..X.X.X.X....XX.X.X...XXX.........X.", "............X......X...X..X..X....X.....X...X.XXXX"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 95;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> known = {"....X.XXX..X.....XXX...X.XX.X.....X..XX.XX.....X..", "X.X....X....XXXX...X..X.X..X..X......X...X...XX.XX", "X...X..XX.X.......X.X..X..X.........X..X..XX......", "...X......X......X...X....X.......X.X......XX.X...", "X.....X........XXX..........XX....XXXX..X.....X.XX", "..................XXXXX..X.X.....XX...........X...", "....X........X.X.X.............XX.X..XX...X......X", "...........X...X.XXXX.X.XX.XX.XX...XX..XXX....X..X", "X.XXXX.X.......X.X..XXX.......X..XX..X..X..X...XXX", "XX........XX......X.XX.XX....XXX.....X....XX....X.", "..X....X..X.X..X..X............X....XX....X.XX.X..", "X.X..........X.X..X.....XXX.......XX..............", ".....XX.....X.....X..X.....XX.......X..X....X.XX.X", ".....X..X.....X....X.........X.X..XX.X...X.X......", "X.X.X..X.......X..X....X..XXXXXX.X....X..X.X....X.", "...XX.X.......X..X..X.X.X...X.X..X..............X.", ".X.X...................X.............X.X.XX.XXX...", ".....XX..X.....X.X.X..XX..X.X......X..X..X....XX.X", "..XX.XXXXX..XX...X....X...X..X.XXX.....X.X........", "..X.X..XXX.X.....XXX...X.X.XX..X...X..X....X.XXX.X", "X.X....XXX.X..........X.....X..X.X......XXX..X....", "XX..XX...X.......X.X...X.X....XXXX.........X..X..X", "X...XX.X.....XX.......X...XX.X...X....X..XX..XXXX.", ".XX....X.X.X...XXXXX......X.......XX.......X...X.X", "X.......XX...X....X....X..X..X.XX.X..XX.X.X..X...X", "...X.X........X.X.......X...X.X...X....X.....X..X.", "...XX..X..X...X...X......X..XXXX.XX...XXX.........", "XX...XX......X...X...X......X..X.X......X......X.X", "X...X.X..X.X..X..X.X.X.XXX.....X........X.X..X..X.", "X.X...XX....XXX.......XX.......X.X...............X", ".X.X......X..X..X..X..X.XX.X...X......X..X....X...", ".....X.X.....X.X....X.XXXXX...X..X...X..X..XX..X..", "XX....X...X.XX.X...X....XX.XX...XX..X.X........X..", ".X.....X.......XX.XX...X...X..X.X....X.X..X.....XX", "....X..XXXXX.X..XX.XX.X.....X..X..X.XXX....XXX....", "X..X.............XXX.X..XX.X...XXXXXX.X.X.X.......", "XX..X...X...X....X.X.......X.X..XX.....XXXX.....X.", "........X...X........X...X..XX...XX....X.XXXX.X...", "XX..X..X...XX..X......X.X.X........XXX.X......XX.X", "XX....X.XX..XX...X.......X..X....XXX.X.....X.X....", ".....XX.XXX....X...X....X...X.X.X.....X........X..", "....X.X.XX.X.X.X..XX.X..X...XX....XXXX..X.....X.X.", "X...X..XXX.XX.X.XX.X....X...X.....X...XXXX.....X..", "X........XX........XX..XXXX.X...X.X.....XX.X......", "....X.......X...........XX..X.X.X..XX.X.XX.XX.X.X.", "....X..X.X............X...X........X..X..X..XX.X.X", ".......X..XX......X..XX...X............X..X..X..X.", ".X.................X..X...X..X.X....X......XXX..X.", "X....X.X.X.........XX..X.....XX......X.....X...XX.", ".X.X...X...X.....XX....X.XX.X....X.........X......"};
    vector<string> candidate = {".X.XXXX....X.XX..........X.......X........X.....X.", "X......X........X...X.X..X....X...X..XXX.X.X..XXX.", "XX.X......XX.X.........XXXX.X..X........X.X.....X.", "....X....XX.....X.X....XX.X.X..........X.X.....X..", "...X....X..........X.XXX........X...X.X...........", ".XXX.....X....X..X..X...XXXX....XX..XX....X..X....", "X.X......X.....XXXX...X.X.........X.X.X.X.......XX", ".XX..X...X.X..X..X.......X.........X.........XXX..", "....X..X.X...X.XX....X.....XX..X....X......X..X.X.", "..X.......X..X.X..X..XX....XX..XX.....X.X....X.XX.", "X.X.X.......XX.X.X......X......X.XXX.X.X..X....XX.", "....X....XX..XX.X....X....XXX.X.X...X....XX.X.XX.X", ".X..........X........X...XX...X.....XXX...........", ".....XX........XX...X.........XXX...XX..X..X......", ".....X..X...........XX..X....X.X.....X..X.X.X..X.X", "XX.XX.X.....X........X.X...X...XXX..X....X....X...", "XX...X..XX..X..XX..X......X....X..X.....X...X.X..X", ".XX.XX.X.XXX..XX.............X..X.X..X....XX...XX.", ".....X......X....X......X..XX..XXXX..X...X.....X..", ".X.X.X..X....X........XX..XX..X...X..X............", "..XX..X....XXX..X......X......X.......X...XX...X..", "X.....XXX.XXX.X....XX.XXX.X....X............X...X.", "X.X.X..XXX......X.X..XX..XXX...X.....X........XXX.", ".....X...X...........X.X.......XX.X.X.XX.XX..X.X..", "......XXX..X....X....X.X........X.....X.X.X.X.X.X.", ".XX...X.XX......XX.......XX..XXX.X.X.XXX....X...X.", "...X.X....X..X.XXX.......XX...X.X...X.....X....X..", "...........X...X..X...X...X.X....X....XX.....X..X.", ".X.X..X...X...X....XX........XXX..........X..X.X..", ".X.......XXXXX.XX.XX..X.X..X.XX.X......X......X.X.", "X....XX.X..X..XXX.XXX...XX..X.X..X.....XXX....XXXX", "X...X.......X..X.X...X...X..X.XX..XX..XX...X...XXX", "....XXX......X.X.X.X......X.X......X.X..XXX.XXX..X", "..X.........X......XX.........X.X..XXX.......XX...", "........X.XX.X.............X.X..X.X.X.X..X.X...X.X", "X.........XX..X.X.XX.X..X.X.XX.......X.X....X.....", "..XX..X.XX..X....X.X..XX.XX..X...X.........X.X.XXX", ".X..XXX.....XX..X..........X..XX......XXXX.X.X....", ".........X...X.XX...X...X..X......X..X.XXXX..X....", "..X...XX...X.XX..X......XXXX..X...X.X.X.X....X.X.X", "....X....X.....X....X.....X.....XXXX.X..X......XXX", "X.X.X.....X......X.X...XXX...XX..XX.X..X.........X", "X........X.....XX.........X..XX..XX.XXXX.X.XX.X.X.", "....XXX..XXXX..XXX........X......X....XXX..X..X...", "...X.....X.XXX......X......X.......X...X..X.X.....", ".....X.XXX..............X.....X....X.X.XX.X.....XX", "X..X......XX............X.X.......X.X..XX.....X...", "......X..XX.....X...........XXXX....X.X.X.XX.XXXX.", "...X.X..XXX...X.............X..XX.X....X....XX...X", "X.XX.XX....X...X..X.X.....X.X.X..X..X......XX....."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 108;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> known = {"X..X..XX.X..XX.....X..X..........X...X....X..X....", "XXXX...XX.X......X.X......XX.XX..X.X.......X.X...X", "...X.X.X.....X..XX....X...XX.....XX...X..X.....XX.", "X..........X.........X............X.XX.XX...X.....", ".........X....XX.XX.X..X.XX......X.XXX.X.........X", "....X.........X.....X......X.......XX..XXXX..X....", "X...X.XX...........XXX.XX..X.X...XX.XXXX.XXX.XX.X.", "XX..X........XXXX....X..X.....X...........X.X..X.X", "X.......XX..XX.X...XXXX.....XX.X...X.............X", ".X.X...X.....XX..XX.X..X...X.X..X.....X..XXX.X....", ".....X.X.X.......XX..X...XX..X.....X....XX...X.X..", ".....X....X.....X...........XX.....XX..X....X.XX.X", "....XXXX.....X....X..X...X.......XX......X....X...", "X........X.....X...X...X...X.........X........X...", "....XX.X....XXX..XX.X..XX..X.XXX...X...X.XXX..X.X.", ".XX.X...X..XX......X.X..X......XX......X..........", ".X.X..XX.....XXXXX.X...X.XXX..X.XX..X.......X..XX.", ".XX....X.X..XXX....X..X....X.X..X.XX.....XX...XX..", "..XX......X.X.....X...XX.XX....XX...XX.X...X.X..X.", "XX.XX...X....X......XX.....X............X.........", ".X...X..X..X.X....XX....X...X.XXX.XX.......X.....X", "......X..X...........X..X...X.X.X.X....X...XX....X", ".....XX....X.....XX...X.................X..X.X...X", "XX.....X..X......X.....X...........X......XX.....X", "....X..X....X..X...X.X.....X...X.....X.X..X.......", ".X........XXX.......XXX...X.......XX..X.XX..XX....", ".....X............X.X......XX.X.XX.X..X.XXX....XX.", ".....XX...XX..........X....X.XX.........X..XX..X.X", "...X....X.X..X........X.X....X.X....X.X..X.....X..", "XX......X....X.X....X....XX.....XX.....XX..XX....X", ".....XX.............XX.X...X....X....XXX...XX.XXXX", "XX.....XX...X.X.XX.........X...................X..", "X.X....X....XXX.X................XX.....X..X....X.", ".....XX......X.......XX........X.XX.XX....X.XX..X.", "X.....X.X...X..X..X.XXXX..XX..X...XX..X.......X.XX", ".X.X.XXXXX...X.X..XX.XX.......X........XX....X....", "X...X..X.....XX..X..X.XX..XX.............XX.X...X.", "..X........XX....X...........XX.X....X....X....X..", "...X...XX..X.X...........XX.X........XX..XXXXXX...", "X..X.....................X.X...X...XX.X....X.X...X", "..X...X....X.....XX.....X..XX....XXX.....X.....X..", "..X..XXXX....X......X...XX....X.XXXX.X.X...XX.X..X", "..XXXXX.X...........X..X.XX.X.......X.....XX..X...", "..X..XXXX.......X...........X..X.....X.X.X....X.XX", "..XX.X.......X...X..X....X.XXX..XX.X..........X...", "..X..X...X....X....X...X...X.X......X............X", "..X.XXX......XX..XXX.XX.....X..XX...X.........XX..", ".XX....X..XX...X..X..X.X.X.X.....X...X...X..XX.X.X", ".X....X....XXX......X....XX.........X...XX.....XX.", "X.X..XXX......XX.................X.X......X.XX..XX"};
    vector<string> candidate = {"XXX.....XX.X....X.....X..............X.X....X...X.", "...X.X..........X....XX...X.X.X.X.......XX..X....X", "X.X...X.X.........X....XX.....X.XXXX.XXX.X.....X..", "....X.X.....X......X.X.X.X..X....X.X...X.X.X..X...", "X..XXXXX..XX...X......XX.....X.....XX.X.XX........", "....XX.X....XX.X.....XX.........X.X.XX..X..X......", "...X..X.XX.X.X......X..XXXXX.X...XX...X...XX...XX.", ".......XX.X.........X.X......X..X.X..XX..X.X...X.X", ".......XX.....X....X..XX..XX..XX..X....X....XXXX..", "X........XX.X.............X....X......X...........", "X..XXX.....X.X..X....X..XX.X.....X..X.......X.....", "X....X.XX.....X.X.....X.X...X......X..X.X.XXX.....", "..XXXXX.X.X.X........X....X....X......XXX..X.....X", "..XX...X..X.XXX..X..XX.X...X..X.........XX....X.XX", "X..X.X..XX.......X.........XX...X.X...XXX.........", "X.X.X....X....XXX.X....X....X.XXX.X......XX..XXX..", "XXXXX.XX.XXXXX...X..XX.XXXXXXX....X..XXX...X.X.X..", "X.X.X..X.X......X..X....X.XX....X.X.X..X......X...", "..XXX....X......X.XX..................X.....X..XX.", "....X.XX.XX..........XX.X.X..XXX.X...X..X.XX....X.", ".XX...X..X...XX...XXXX..X.X....XX.XX.........X....", ".X.........XX.X.X.....X...X..............XX....X..", "X....XX..X......X.....X..XX.X.X.......X..XX..X..X.", ".X.....X.X.......X...X...X.X.....X.X...XX.....X...", "X........X....X..X..X......XX.XX.X...X.....X......", "............X........X..X.........X.XX..XXXX.....X", "X..XXX.X........XXX.......X.......X.X.X.X.X.XX...X", "......X...X..X..X.....XX..X...X..............XX...", ".......X....X.....X..X....XX..X.....X......XX.XX.X", ".X...X....X.....X.X..XX..X....X....X...X...X..XX.X", "..X.X..X.XXX.....XX.....X.X.X..X.......XX.X.......", ".....X.X..XX.X....XX..X.....XX.X.........XXX...X..", ".XX......XX.X..XX.........X..X...X....X...XXXXXXX.", "..X....X.......X.X...............X........X.X...XX", "X.X....X.X...XXXX.XX..X..X...X.....X.....XXXXX.X..", "X.X.....X.XX.X....X.X.X..XX.X..XXX..X......X...X..", "X.X..X....X.X....X..XX.X.X.XX..X.X.XX.X....X.X....", ".X.....X.X...X..X..X....X....XX.....XXX....X......", "X..XX...X..XX....X.........X.....XX.XX.....X..X.XX", "....XXX...X.XX.....X.X.X.X.XX...X...X.X...X.....X.", "XX....X.X.XX...XX.X......XX....X..X.X..XX......X..", "X.XX....X.XXXXX.XX..X.X.X..XX....X...XX..X.....X..", ".....X.XX.XXX.X.........XX.....X.X...X.X......XX..", "...X.....X........XX..X....XXXXX.X.X.....XXX....X.", ".X.X..X....X..X..X....XX.......X.X.XX....XX.XXX.XX", ".....XX.X.X.X.XX.X.XX..X.......X...........X...XX.", "....X.XXX.......X...XX..X.....XXX.X.X...X..X......", ".........X.X.X..X.....X......X.....X.X......X..X.X", "....X.........XX....X....XX..XXX......X......X.XX.", "X.X.XXXXX...X.X.X.XXX.X.X..........X..X.X..XX....X"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> known = {".X...X...XX..XX......X..XXX..XX...X....XX.X.XX..XX", "...X.X....XX.X..X....XX...XX..X.....XX...X........", ".X.X.X......X......X.X..X.....XX.....X..X.X...XXX.", "..X.X..X...XX..X.....X.XX.....X..X..X......X....X.", "........X....X......X.X.......X....X.X...XXX....X.", "X.X..XX.....X......XX.........X.X.X......X......XX", "..........XX.....X.........XXX.XX.......XXX.......", "X...X.XX..X.XX......XX..XX.....XX.....X.X...X.....", ".....X.......XXX.XX...XX...X.X.X...X.....X..X..XX.", ".X......X..XX.X......X.X...X....XXXXX..XX.....X..X", "X.X.....XX.X.X.X...XX...XXX.X....X.....XX.........", "...XXX..X..X....X..X...XX..X..........X..XX...XXX.", "...X.X.....XX.....X.........X.....XXX...X.X....XX.", "...X...X..........X.....XXX...XX.X.XX...........XX", "....XXX....X.....X.X...............X.X.......X..XX", "X.X..X....X...X.X.X...XX.XX..........XX....X.....X", "X.XX...X.XX.X.....X.......X..XX....XX.X..X..XX.XX.", "X.X.....X....XX.X.X.....X..XXXX..XX..XX..X......X.", "X...X..X.X...XX......XXX....XXX.XX..X.....X..X..X.", "..X...X.....XXXX..X.X...X...XX...X...X...XXXX..X..", "...X..X....X.........X............X..X.....X...X.X", "...X.X.X.X..X......X.X.X.X...X..X....XX.X.......X.", "..X.......XX..............XXXX....X..XX...X.X.....", ".........XX.X..X...XXXXX.....XX...X.X.......X.....", "...X.....X....X..XXX......X...XX...X..X......X....", "...X...X.X..X...X.X......X...X.X..X.......XX.X.X..", ".X.XX......X....XXX.X...XX..X.XX.......X...X...X..", ".........XX..XX.X..X...XX...XX.X.......X.......X..", "XX.XX...X.XX....X.X.....X...X.......X..XX.X.....X.", ".....XXX......XXXX......X..X.....XX...X.XX.XX.XXX.", ".X.X..........X......XX...XXX.X..XXX.........XX...", ".......XX.X.X..XX.....XX.X.X..X.......X.X.X.X.XX..", "...XX....X...X.X..X...XX.......X......X..X..X..X..", "XX......X..X....X...XX.X.XX....X......X....XXXX...", "....X..........X....XXXX.X...X.........X....XX....", ".....XX.X...X.........X.....X.....X..X.X...X..X.X.", "......X....X.......X...X..XX....X.X......X..XX...X", "...X..X.XX....X..X.XX...XX.X....X..XX........XXX..", "..........X....X...X....X..X...X.X......XX...X.XXX", "X.........X..X..X.X....XX......X....XXX.X..X..X.XX", ".XXX.XX......XX.....X.....X....X..X......X.XX.....", "......X.XX...........XX.XX......X.X..X.........XX.", ".......X........XXXX..X.....X.X.......X..X......XX", "..XXX.X...........X............X......X....XXX....", "..X...X....X..X.....X...X..X....X.....X....XX..X..", "....X....X.......X......XX........X.XX.X........X.", "..XXX....XX.X............X...X.X..XXX.XX.XX.X...XX", "..XXX.....X...X.....X...XXX..X....XX...X.XXX......", "XXXX........XX.XX..X..X...........X..X....XX..X.X.", "X.X.....XX..XXX............XX.....X...X.......XX.."};
    vector<string> candidate = {"..X...XX...........XX.X....XXX..X..X.....X.X......", ".....XX.....X.X..X.....XX.X..X..X....X...X...X..XX", "...X..........X......X...X..X.....XX....X....XX.X.", "...XX.....X.....XX...X................X.X..X.....X", ".....X.X.....XX..X.........XXX..X.XX.XX....X....X.", ".....XX.XX.X....X.....XX........X.........XXXX...X", "...........X.X.....XX..XXX..............XXX..XX..X", "....X....X.X..........X..............X..X....X.X.X", "..X....XXX..X..X.X...XXXX....X.......X.X........X.", ".....X.XX..XX...X..X.X.....X..X..X...XX.....X...XX", ".X.XX.XX.X....X.....X..X...XX.XX.........X.....X..", "X.X......X.....X.X..........X......XX..XX..X..XXX.", "..X........XX.X.XXX.....X.X..XX......X....X....X..", "...XXXX..X.......X...X.......X.........XXX.X......", "...X.....XX.X.XX..X..X....X.X..X..XX.......X......", "..X..X...X.............X...X..XX..X.............X.", "......X.X..X.X......X..X..X.....X.X...XXX...X.XX..", "X.........XX...X.XX.X...........X.....X...XX...X..", "X..X.X.XXX....X.X........X.X...XX.......XX....X..X", "..X.X.X......XX...........X.....XXX.XX..X...X.X.X.", "...X.X....X.XX...X.XX....X....X..X...XXX...XX....X", "XX....X.XX.............XX.....X......X..X..XX.XX.X", ".XXX.X.XX.X......X..XX....X.XXX.....XXX.X....X.X.X", "X.......XXXX.X.XXX.X.XX...XX...X.......X..X..XX..X", "X.XX.........X.......X.X..X.X.X.X.X..X...XX..XXX..", "X...X.....X....X....X...X...........XXX...XXX..X..", "XX..X..X....X.X...X.XX..X..X..X.X..X.X........XXX.", "X.X..X...XX.X.XX....X..........XX.........X...X.XX", ".......X..X.....X.X...X....XX.X.XX.X..X.XX..X.....", "...XX..X..X.XX.X.......XX..........XX......X....XX", "...X.......X.X..X..X....X.....X...X...X.X....XXX..", ".......XXX..X..X....XX.X.X...X..X.XXX.......X.X...", "X.....XX.X......X.X.XXX....X.XX......X.....X.XXX..", ".X..........X...X.X.......X.....XXX.XX..XX..XX....", "......X...X....X...X.....X...X..X....X....XX..X...", "........X......X.X...........X.....X...X..X..X....", "XX.X...X..XX....X.X....XX..X.XX...............XX.X", ".X........X.X.X.........X...X.X.X.XX..X..XX.X.....", "XX..X.XX.X..X........XXXX.......X.......X.....XX.X", ".........X.X.X..X.X...XXXX.XX...X.......X..XX.....", "X..XX..X.XX.X.X........X....X.....XXX...........XX", ".XXXX.X........X.X.XX..X.....X......XX..X.........", ".....XX...X.XX.XXX.X..............X.XX....X..X..X.", ".....X......X......X...........X.X.........X.XXX..", "X..XX...X....XX...X...............X...X..XXX.XXXX.", "...XXX...X...X..XXXX...X....XX...X..X..X......X.X.", "X.XX......XX......X.X..X.....X.X.X..XX......X.XX.X", ".....X...X.X..X..X.X.X...X.....X.....X...........X", ".X...X....X...X......X..XXX............X..X.....X.", ".X..X.X.X.....X..X...XX..X....X.......XXX.XXX...X."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 95;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> known = {"X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X"};
    vector<string> candidate = {"X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> known = {"X.X.XX", "XX..XX", "...X..", "X.....", "..X..X", "..X..."};
    vector<string> candidate = {"X.....", ".X...X", ".XXX.X", ".X...X", ".XX..X", ".X..X."};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> known = {"XXXX", "XXXX", "X..X", "XXXX"};
    vector<string> candidate = {"XXXX", "X..X", "XXXX", "XXXX"};
    Amoebae* pObj = new Amoebae();
    clock_t start = clock();
    int result = pObj->cultureX(known, candidate);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=152347&rd=4665&pm=1814
********************************************************************************
#pragma warning( disable : 4786 ) 
 
#include <vector> 
#include <string> 
#include <algorithm> 
#include <cstdio> 
#include <set> 
#include <map> 
#include <functional> 
#include <deque> 
 
using namespace std; 
 
int dx[] = { 0, 0, 1, -1 }; 
int dy[] = { 1, -1, 0, 0 }; 
 
void fluud( vector< string > &a, int x, int y ) { 
//  printf( "%d, %d, %c\n", x, y, a[ y ][ x ] ); 
  if( x < 0 || y < 0 || y >= a.size() || x >= a[ y ].size() ) 
    return; 
  if( a[ y ][ x ] != 'X' ) 
    return; 
  a[ y ][ x ] = 'F'; 
  for( int k = 0; k < 4; k++ ) 
    fluud( a, x + dx[ k ], y + dy[ k ] ); 
}; 
 
int mn( int x, int y ) { 
  if( x < y ) 
    return x; 
  return y; 
}; 
 
int mx( int x, int y ) { 
  if( x > y ) 
    return x; 
  return y; 
}; 
 
void extract( vector< string > &a, vector< vector< char > > &meb ) { 
  meb.clear(); 
  int sx = 100; 
  int sy = 100; 
  int ex = -1; 
  int ey = -1; 
  for( int y = 0; y < a.size(); y++ ) { 
    for( int x = 0; x < a[ y ].size(); x++ ) { 
      if( a[ y ][ x ] == 'F' ) { 
        sx = mn( sx, x ); 
        sy = mn( sy, y ); 
        ex = mx( ex, x ); 
        ey = mx( ey, y ); 
      } 
    } 
  } 
  ex++; 
  ey++; 
  meb.resize( ey - sy, vector< char >( ex - sx, 0 ) ); 
  for( int ty = sy; ty != ey; ty++ ) { 
    for( int tx = sx; tx != ex; tx++ ) { 
      meb[ ty - sy ][ tx - sx ] = ( a[ ty ][ tx ] == 'F' ); 
      if( a[ ty ][ tx ] == 'F' ) 
        a[ ty ][ tx ] = '.'; 
    } 
  } 
}; 
 
vector< vector< char > > flep( vector< vector< char > > meb, int r ) { 
  if( r & 0x1 ) { 
    vector< vector< char > > marb = meb; 
    for( int y = 0; y < meb.size(); y++ ) 
      for( int x = 0; x < meb[ y ].size(); x++ ) 
        marb[ y ][ meb[ y ].size() - x - 1 ] = meb[ y ][ x ]; 
    meb = marb; 
  }; 
  if( r & 0x2 ) { 
    vector< vector< char > > marb = meb; 
    for( int y = 0; y < meb.size(); y++ ) 
      for( int x = 0; x < meb[ y ].size(); x++ ) 
        marb[ meb.size() - y - 1 ][ x ] = meb[ y ][ x ]; 
    meb = marb; 
  }; 
  if( r & 0x4 ) { 
    vector< vector< char > > marb( meb[ 0 ].size(), vector< char >( meb.size(), 0 ) ); 
    for( int y = 0; y < meb.size(); y++ ) 
      for( int x = 0; x < meb[ y ].size(); x++ ) 
        marb[ x ][ y ] = meb[ y ][ x ]; 
    meb = marb; 
  }; 
  return meb; 
}; 
 
void flood( vector< string > a, multiset< vector< vector< char > > > &meebas ) { 
  for( int y = 0; y < a.size(); y++ ) { 
    for( int x = 0; x < a[ y ].size(); x++ ) { 
      if( a[ y ][ x ] == 'X' ) { 
        //printf( "%d, %d, %c\n", x, y, a[ y ][ x ] ); 
        fluud( a, x, y ); 
        vector< vector< char > > meb; 
        extract( a, meb ); 
        vector< vector< vector< char > > > mebpoti; 
        for( int i = 0; i < 8; i++ ) 
          mebpoti.push_back( flep( meb, i ) ); 
        sort( mebpoti.begin(), mebpoti.end() ); 
        meebas.insert( mebpoti[ 0 ] ); 
      } 
    } 
  } 
}; 
 
class Amoebae { 
  public: 
  int cultureX(vector <string> a, vector <string> b) { 
    multiset< vector< vector< char > > > meebas; 
    multiset< vector< vector< char > > > meebbs; 
    flood( a, meebas ); 
    flood( b, meebbs ); 
    multiset< vector< vector< char > > > meebls; 
    for( multiset< vector< vector< char > > >::iterator itr = meebas.begin(); itr != meebas.end(); itr++ ) { 
      if( meebbs.count( *itr ) ) 
        meebbs.erase( meebbs.find( *itr ) ); 
        else 
        meebls.insert( *itr ); 
    } 
    return meebbs.size() + meebls.size(); 
  } 
};

********************************************************************************
*******************************************************************************/