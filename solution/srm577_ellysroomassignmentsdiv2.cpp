/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=12521
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class EllysRoomAssignmentsDiv2 {
public:
    double getProbability(vector<string> ratings);
};

double EllysRoomAssignmentsDiv2::getProbability(vector<string> ratings) {
    double ret;
    return ret;
}


int test0() {
    vector<string> ratings = {"724 42 13 17 1199 577 1001 1101 483 845 196 1163 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3333333333333333;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> ratings = {"42 911 666 17 13 1 1155 1094 815 5 1000 540"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> ratings = {"1168 196 440 643 227 1194 1149 372 878 23 767 296 ", "110 52 840 367 790 884 620 676 380 1007 304 262 10", "63 917 230 951 635 898 894 319 724 597 470 1143 62", "7 1175 436 484 457 991 433 747 8 94 830 1044 1053 ", "360 1167 391 364 1120 192 56 528 366 712 480 83 11", "59 483 949 356 1163 9 845 750 781 784 1016 985 346", " 466 947 73 911 690 630 609 866 788 98 1017 410 11", "9 617 245 801 205"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> ratings = {"470 840 410 1168 637 464 498 1118 276 1013 989 874", " 64 192 296 611 44 999 583 365 1195 20 838 274 425", " 236 960 1116 857 630 664 98 1046 807 1111 529 47 ", "31 676 1112 42 376 56 1105 814 6 871 364 319 1145 ", "491 199 1121 713 353 956 579 445 1031 627 618 202 ", "763 271 188 1140 1044 311 895 1175 74 465 454 708 ", "1181 866 387 99 784 700 308 853 977 253 62 782 371", " 8 908 1151 83 932 55 1077 897 517 767 990 567 869", " 607 603 499 356 772 310 332 357 845 1159 1128 104", "2 783 953 315 1020 360 696 793 847 1 716 731 1097 ", "660 302 761 484 23 89 609 161 978 312 87 363 879 6", "02 635 409 749 475 106 632 961 1053 414 422 1146 6", "51 970 907 719 110 118 218 471 334 747 645 575 757", " 156 137 101 150 1084 48 859 1016 396 779 791 195 ", "1148 138 141 304 523 1129 940 569 1058 113 949 967", " 261 1017 433 126 205 679 998 325 831 239 774 245 ", "992 407 991 667 489 580 628 1055 383 924 706 369 8", "37 380 596 392 734 183 397 1165 911 657 1028 617 1", "45 105 870 707 447 281 841 526 367 297 66 851 643 ", "1142 168 480 3 347 1101 737 1025 647 588 1049 458 ", "508 759 654 927 744 937 402 440 1158 620 1067 528 ", "1001 1186 705 124 511 597 395 1063 399 753 1093 10", "05 717 1173 278 81 762 71 51 801 890 1185 413 674 ", "252 805 775 52 612 1075 1187 131 559 72 1141 298 8", "5 640 1184 290 1127 423 925 1108 114 864 605 802 1", "39 962 104 817 289 816 359 323 1068 368 477 1022 2", " 377 512 688 1029 340 28 1193 910 417 984 1163 385", " 858 212 119 898 9 473 180 140 346 262 971 170 564", " 226 123 698 196 10 466 1174 446 248 1194 227 94 3", "09 850 1179 1035 680 750 67 650 765 61 982 412 736", " 149 822 933 621 117 1062 678 929 693 125 836 852 ", "694 711 275 358 524 825 997 372 781 873 725 818 57", "1 1041 460 796 287 723 142 322 691 220 830 778 116", "7 68 1059 1011 958 324 200 947 29 216 57 443 488 9", "85 666 690 1182 230 1114 153 73 1086 191 1010 586 ", "250 96 211 40 217 1155 82 641 1066 1131 896 154 22", "4 5 951 917 1189 709 777 1034 724 436 626 270 1052", " 593 50 926 901 634 1082 943 894 721 945 366 391 4", "27 646 1076 712 496 868 435 1120 177 1149 330 483 ", "1152 351 176 457 1126 235 1143 790 780 1166 686 80", " 121 222 305 355 581 476 34 533 147 316 881 539 45", " 146 263 22 788 527 519 1069 710 59 148 234 661 81", "3 1081 133 884 548 405 344 451 887 789 1007 295 39", "8 728 553 642 878 77 293 684 877 554 478"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.037037037037037035;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> ratings = {"9 917 360 56 747 630 830 898 1044 985 391 1053 947", " 1159 245 433 991 1016 1163 372"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> ratings = {"1140 856 938 846 280 207 141 168 335 566 218 318 6", "22 723 789 78 833 379 75 682"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> ratings = {"6 167 13 316 1001 614 259 842 447 651 42 1177 838 ", "213 972 893 794 500 277 1178 333 1010 481 952 95 8", "46 1076 866 535 997 1147 444 1128 676 26 796 766 1", "064 1180 628 951 1182 896 404 473 1052 589 160 938", " 509 445 696 293 547 105 844 267 31 349 258 1069 3", "10 1060 643 837 954 829 1055 670 665 422 41 477 11", "84 499 1017 306 386 967 799 963 12 253 699 979 583", " 839 212 66 581 58 182 1025 898 791 564 20 881 872", " 879 456 748 147 102 272 313 248 634 1068 33 1082 ", "291 343 1077 702 800 956 116 478 784 1150 728 1099", " 318 603 1164 1163 1074 1111 246 1103 1195 79 319 ", "833 1056 299 119 632 984 776 1196 869 517 519 389 ", "1112 513 730 865 1037 1161 140 660 889 546 339 636", " 668 15 544 416 780 540 995 480 831 150 539 98 458", " 970 83 82 409 1093 350 915 112 249 1003 574 227 6", "81 853 148 522 941 419 266 427 1176 241 507 801 61", "7 733 120 1183 388 390 121 197 527 721 164 530 777", " 792 742 67 138 891"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09090909090909091;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> ratings = {"1197 182 958 625 624 370 1178 952 823 340 663 686 ", "1189 244 503 790 814 451 656 551 452 740 188 996 3", "33 1132 1053 935 687 326 612 969 1034 832 263 816 ", "925 682 571 541 725 165 597 729 207 224 161 619 47", "8 237 598 1119 766 605 874 228 264 432 246 674 21 ", "751 202 931 174 311 951 444 702 770 971 1141 1091 ", "860 19 168 418 997 700 634 689 283 882 817 521 100", "6 26 977 399 601 258 230 235 477 567 23 1021 557 3", "4 319 328 77 810 1142 37 295 1045 209 1058 390 4 2", "51 39 408 726 805 63 9 104 778 758 583 532 17 420 ", "1171 179 978 442 1195 1183 111 851 980 668 513 110", "4 73 459 466 856 303 45 1122 474 694 752 909 1145 ", "948 514 29 1159 515 27 360 910 627 1179 272 482 59", "1 445 638 50 108 924 695 191 256 1191 448 262 609 ", "1165 248 718 715 1148 382 327 424 872 569 904 94 5", "28 743 1030 206 995 840 387 572 267 456 539 231 13", "8 529 819 650 1153 310 43 1188 281 329 473 942 429", " 494 547 1074 426 1061 821 479 696 999 748 699 116", "4 1033 449 658 1000 292 226 64 803 491 864 815 708", " 223 158 1180 1196 197 7 1131 375 1060 545 180 993", " 781 30 984 1031 371 1073 861 834 1092 476 818 112", " 185 692 240 745 930 828 350"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> ratings = {"1013 1124 1103 1154 1038 1159 1084 1114 1151 1158 ", "1088 1015 1096 1169 1018 1073 1104 1035 1091 1133 ", "1140"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> ratings = {"1185 1045 1130 1048 1081 1071 1159 1194 1046 1112 ", "1021 1038 1082 1129 1161 1135 1148 1040 1173 1051 ", "1160"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> ratings = {"1 2 3 4 5 6 7 8"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> ratings = {"4 1 5 2 7 6 8 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> ratings = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", " 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 3", "7 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 ", "54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70", " 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 8", "7 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 ", "103 104 105 106 107 108 109 110 111 112 113 114 11", "5 116 117 118 119 120 121 122 123 124 125 126 127 ", "128 129 130 131 132 133 134 135 136 137 138 139 14", "0 141 142 143 144 145 146 147 148 149 150 151 152 ", "153 154 155 156 157 158 159 160 161 162 163 164 16", "5 166 167 168 169 170 171 172 173 174 175 176 177 ", "178 179 180 181 182 183 184 185 186 187 188 189 19", "0 191 192 193 194 195 196 197 198 199 200 201 202 ", "203 204 205 206 207 208 209 210 211 212 213 214 21", "5 216 217 218 219 220 221 222 223 224 225 226 227 ", "228 229 230 231 232 233 234 235 236 237 238 239 24", "0 241 242 243 244 245 246 247 248 249 250 251 252 ", "253 254 255 256 257 258 259 260 261 262 263 264 26", "5 266 267 268 269 270 271 272 273 274 275 276 277 ", "278 279 280 281 282 283 284 285 286 287 288 289 29", "0 291 292 293 294 295 296 297 298 299 300 301 302 ", "303 304 305 306 307 308 309 310 311 312 313 314 31", "5 316 317 318 319 320 321 322 323 324 325 326 327 ", "328 329 330 331 332 333 334 335 336 337 338 339 34", "0 341 342 343 344 345 346 347 348 349 350 351 352 ", "353 354 355 356 357 358 359 360 361 362 363 364 36", "5 366 367 368 369 370 371 372 373 374 375 376 377 ", "378 379 380 381 382 383 384 385 386 387 388 389 39", "0 391 392 393 394 395 396 397 398 399 400 401 402 ", "403 404 405 406 407 408 409 410 411 412 413 414 41", "5 416 417 418 419 420 421 422 423 424 425 426 427 ", "428 429 430 431 432 433 434 435 436 437 438 439 44", "0 441 442 443 444 445 446 447 448 449 450 451 452 ", "453 454 455 456 457 458 459 460 461 462 463 464 46", "5 466 467 468 469 470 471 472 473 474 475 476 477 ", "478 479 480 481 482 483 484 485 486 487 488 489 49", "0 491 492 493 494 495 496 497 498 499 500 501 502 ", "503 504 505 506 507 508 509 510 511 512 513 514 51", "5 516 517 518 519 520 521 522 523 524 525 526 527 ", "528 529 530 531 532 533 534 535 536 537 538 539 54", "0 541 542 543 544 545 546 547 548 549 550 551 552 ", "553 554 555 556 557 558 559 560 561 562 563 564 56", "5 566 567 568 569 570 571 572 573 574 575 576 577 ", "578 579 580 581 582 583 584 585 586 587 588 589 59", "0 591 592 593 594 595 596 597 598 599 600 601 602 ", "603 604 605 606 607 608 609 610 611 612 613 614 61", "5 616 617 618 619 620 621 622 623 624 625 626 627 ", "628 629 630 631 632 633 634 635 636 637 638 639 64", "0 641 642 643 644 645 646 647 648 649 650 651 652"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.030303030303030304;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> ratings = {"384 43 374 224 511 340 178 566 81 325 376 635 404 ", "435 175 350 216 534 455 311 223 475 111 62 330 442", " 545 540 242 631 592 102 48 44 446 467 287 647 529", " 53 590 580 94 222 469 643 123 113 338 207 210 347", " 601 50 558 245 107 96 636 302 154 575 149 257 106", " 235 622 284 159 480 281 303 459 433 492 493 561 4", "38 33 263 277 352 166 59 567 67 619 491 452 187 46", "4 251 42 183 335 26 195 2 72 496 290 584 296 134 3", "70 99 406 12 383 266 25 29 119 300 147 35 494 458 ", "603 132 579 629 318 637 141 131 79 447 294 69 453 ", "91 504 162 301 233 260 411 568 420 304 122 339 213", " 419 144 594 228 356 105 299 518 286 366 170 409 8", "3 168 621 305 186 252 445 465 82 473 217 525 552 3", "65 239 40 472 502 436 150 392 359 595 28 11 444 41", "2 255 118 576 218 264 95 156 169 577 214 244 520 4", "31 137 10 71 297 333 547 348 506 385 583 90 5 554 ", "38 421 58 103 346 274 396 457 427 108 282 64 414 3", "29 354 308 289 632 219 206 555 155 184 323 573 76 ", "437 517 172 236 557 355 288 326 157 642 61 319 353", " 267 397 485 389 522 615 240 292 117 586 448 489 5", "37 109 639 75 191 100 556 369 481 570 439 248 254 ", "55 551 543 56 278 46 199 563 648 488 336 18 546 60", "8 533 372 163 418 234 21 68 6 394 462 505 415 84 2", "00 625 351 271 593 185 450 176 148 36 484 87 651 3", "1 205 417 426 495 405 153 332 535 497 652 49 345 3", "17 121 231 307 526 449 262 174 211 45 39 360 74 46", "6 208 92 581 410 14 609 398 188 562 320 180 316 51", "9 602 226 490 212 430 363 428 624 309 565 127 1 32", "8 613 23 456 124 578 138 476 559 220 314 313 173 7", " 253 133 306 34 620 524 487 203 470 341 429 310 64", "5 357 515 158 41 349 230 440 146 66 16 164 344 241", " 512 343 177 510 544 508 181 541 215 422 477 550 3", "31 574 408 32 379 482 37 402 259 63 380 528 89 532", " 202 171 22 167 268 265 270 114 393 194 315 474 36", "2 161 192 312 88 606 610 27 527 334 605 536 521 22", "7 85 70 128 618 143 514 641 416 86 52 151 80 276 2", "79 523 451 136 198 617 498 530 232 407 116 189 634", " 587 20 110 516 582 616 569 165 531 51 225 640 209", " 269 368 454 626 112 98 460 434 140 361 4 432 229 ", "553 193 572 256 600 101 358 386 47 630 15 381 612 ", "598 261 129 483 627 160 375 197 327 614 295 500 3 ", "93 403 243 571 413 179 130 649 471 378 499 9 391 6", "07 501 60 604 275 298 249 486 633 237 337 623 373 ", "30 589 388 120 142 382 291 564 322 539 548 468 13 ", "560 250 399 293 478 97 390 400 387 273 258 646 8 1", "39 283 73 443 272 19 126 285 280 342 538 503 135 4", "61 507 509 221 57 65 104 182 321 401 371 585 145 5", "88 190 324 542 152 201 628 463 364 611 423 377 395", " 78 115 441 204 424 54 599 24 644 77 196 650 425 1", "25 591 367 596 638 513 238 479 549 597 246 17 247"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.030303030303030304;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> ratings = {"539 457 277 929 180 296 820 319 839 199 210 989 88", "5 1033 1132 479 1023 425 340 828 843 934 1124 434 ", "264 206 1117 569 388 351 972 348 176 1182 832"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> ratings = {"75 648 152 724 535 196 107 966 786 370 985 1182 74", "1 957 1128 1045 850 1023 210 499 539 759 6 50 537 ", "532 1184 916 1127 845 1112 1136 972 129 315 44 293", " 1159 800 871 694 1057 412 232 1109 1004 63 945 52", "7 467 801 1117 1197 791 968 261 589 1094 1198 652 ", "403 761 438 131 1174 896 635 935 712 959 971 980 5", "9 396 768 944 790 1077 813 428 408 1061 697 762 56", "0 455 98 168 1098 461 307 977 443 956 469 462 18 1", "04 873 2 58 665 463 476 433 753 316 182 573 352 57", "9 169 538 522 983 722 965 700 550 385 1138 1105 28", "3 811 1169 1003 369 112 1179 154 1139 121 887 170 ", "450 415 1111 1100 562 894 950 738 87 1107 677 114 ", "179 502 3 584 80 622 540 609 146 691 66 825 802 11", "35 976 836 456 1126 708 1038 211 405 705 166 597 3", "88 912 1116 441 314 955 1146 949 418 1172 703 135 ", "758 1067 903 524 984 751 910 534 9 783 111 400 409", " 274 1043 960 491 466 826 907 47 567 489 445 79 33", "0 290 115 301 655 306 310 563 693 671 723 48 961 2", "41 1110 858 620 877 264 421 519 726 215 725 479 15", "9 1154 627 365 386 1075 1007 767 1092 865 381 214 ", "156 1165 64 746 503 1029 623 711 707 690 347 828 3", "03 771 1031 893 670 25 504 1069 937 719 600 701 89", "0 118 596 495 1056 332 127 685 755 1001 86 555 164", " 29 123 266 190 327 376 106 505 998 5 1072 914 118", "3 612 739 821 490 1070 16 867 630 470 488 1158 633", " 256 298 747 606 558 675 666 779 71 498 818 357 10", "95 523 1060 587 15 425 618 378 999 235 248 812 475", " 863 139 364 200 1149 792 1137 292 153 449 337 338", " 954 437 962 997 55 65 632 383 262 716 497 810 919", " 1099 667 1059 392 576 280 698 1173 226 973 1041 7", "77 345 878 296 1121 624 394 333 110 419 96 928 835", " 494 996 148 880 963 209 19 604 14 155 752 809 974", " 287 1013 1055 355 309 829 74 397 784 273 1002 807", " 680 823 730 782 279 706 175 853 986 662 870 416 8", "5 1103 343 611 1073 785 431 284 1143 246 901 1047 ", "1014 436 171 108 185 594 188 52 588 728 953 787 53", "1 1039 1036 220 737 1177 874 278 1040 150 382 577 ", "452 322 1087 1106 341 254 653 939 686 981 24 1079 ", "750 163 657 1193 69 399 639 839 484 205 674 1199 6", "61 395 650 827 932 45 820 342 1088 1157 206 1022 6", "63 778 354 229 217 353 1062 227 528 429 350 10"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.038461538461538464;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> ratings = {"912 174 318 951 200 1058 166 396 535 667 827 472 3", "91 682 390 1014 537 1013 346 274 677 1194 1011 475", " 938 25 1016 919 453 349 26 337 168 456 716 1022 1", "186 1104 704 1052 181 17 755 862 593 512 712 462 9", "92 888 130 258 105 913 664 943 985 607 696 338 290", " 447 719 175 703 153 882 53 119 116 795 928 661 10", "63 136 1021 1000 622 1182 770 469 766 433 1042 339", " 820 55 1038 611 193 151 235 50 491 668 525 370 15", "2 700 1056 77 1108 685 714 861 877 1172 406 561 96", "5 837 46 218 369 320 192 839 185 418 84 549 312 94", "1 1159 765 279 623 974 93 814 787 905 830 348 783 ", "499 494 127 132 544 957 910 366 1102 1006 1028 75 ", "1091 1029 600 848 384 138 1096 36 825 784 805 669 ", "211 847 282 496 43 763 896 699 342 278 415 567 155", " 513 859 83 1015 708 655 752 981 736 38 1009 720 6", "49 583 241 126 224 742 23 449 1111 670 441 81 1002", " 545 531 461 573 474 873 852 819 373 524 115 881 1", "01 411 6 307 122 532 694 723 850 242 528 129 405 1", "101 1007 239 1125 484 698 740 118 303 64 871 88 69", " 82 163 990 254 793 73 747 956 86 914 19 183 492 4", "16 1107 644 849 313 203 35 829 230 662 1178 557 97", " 353 983 186 613 273 1067 676 7 180 123 206 598"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.07142857142857142;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> ratings = {"779 642 588 318 976 210 974 310 600 1194 902 518 6", "56 222 1198 146 957 458 1160 889 834 725 872 1158 ", "283 165 531 59 633 1021 1078 150 343 1043 802 753 ", "450 509 909 634 1065 619 748 469 1071 507 22 224 3", "48 374 939 292 324 489 209 35 690 216 303 539 447 ", "982 265 970 887 419 323 231 319 65 524 464 566 103", "4 259 452 1169 682 599 666 496 179 894 866 626 499", " 42 989 1079 965 562 167 241 48 1076 25 151 523 46", "5 646 560 1042 890 58 551 460 558 305 415 495 388 ", "559 1086 532 1057 106 855 1001 392 934 136 485 482", " 514 4 662 176 334 228 1005 391 15 273 105 393 888", " 516 581 978 64 363 125 898 5 434 132 1170 247 103", "9 804 307 616 186 339 527 817 137 449 863 242 681 ", "987 738 737 256 390 1197 880 352 502 200 416 194 1", "63 917 668 293 236 926 776 1048 1186 478 699 215 5", "22 746 280 162 767 571 1089 536 858 614 734 364 34", " 211 1153 768 289 932 510 296 870 904 213 928 389 ", "739 517 640 204 1138 90 521 506 225 235 701 1044 3", "09 174 86 1092 384 291 14 720 1047 1167 903 949 50", " 547 946 891 412 542 1150 639 1025 923 11 1085 709", " 763 751 1062 467 118 1145 152 300 980 453 1188 11", "7 131 922 214 781 39 615 944 710 525 83 298 1105 3", "0 418 254 979 852 238 124 879 669 931 313 951 1011", " 591 1041 1185 1156 914 572 1173 78 1182 234 991 1", "010 205 33 1166 697 376 953 47 244 967 1154 316 86", "4 197 8 267 954 1108 109 1106 270 9 975 60 500 118", "9 793 199 724 843 101 655 839 1192 685 1123 164 83", "8 1072 537 473 1184 206 134 350 477 704 1037 1038 ", "420 1128 1017 141 960 93 657 1002 398 637 565 181 ", "138 272 771 413 67 1069 1109 815 533 530 959 195 5", "1 284 1133 515 575 120 1110 53 743 26 471 2 402 39", "7 187 108 98 386 6 676 84 1051 19 92 605 1168 20 3", "30 557 831 1087 775 687 77 969 185 996 387 123 105", "4 1142 643 882 830 628 964 895 919 91 1020 629 962", " 173 308 1129 472 973 916 446 754 183 665 784 175 ", "940 611 31 1137 567 760 999 812 635 341 457 383 79", "9 597 218 251 328 718 79 1052 593 498 484 795 32 1", "049"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.043478260869565216;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> ratings = {"646 925 1158 1123 692 630 1181 351 885 154 436 284", " 1016 128 2 307 816 389 920 797 157 643 1025 147 8", "68 679 419 751 582 1187 827 832 553 658 665 405 53", "7 717 1022 230 796 682 48 617 99 952 695 266 383 1", "128 187 425 3 649 161 490 1083 1116 503 484 1132 3", "53 738 213 891 969 841 1137 89 260 200 340 521 685", " 327 371 240 428 8 276 73 903 303 626 488 668 998 ", "608 756 1182 867 1150 565 166 864 519 49 877 207 5", "23 1010 550 219 130 914 322 730 268 1003 387 1091 ", "331 754 9 862 92 627 971 731 348 728 1143 540 1095", " 1054 593 443 441 1034 828 204 1038 314 1066 287 1", "114 117 20 245 60 232 931 1188 181 783 25 399 989 ", "725 1026 805 746 538 559 940 476 229 102 619 342 6", "24 543 7 244 572 847 40 298 588 143 974 479 486 39", "5 709 372 1172 834 640 272 82 344 1155 426 450 745", " 573 1070 758 152 36 1 735 339 905 726 1129 1021 8", "1 733 517 174 461 1169 433 223 910 277 594 164 546", " 1009 483 789 800 798 167 928 126 987 775 367 239 ", "528 937 541 85 729 447 347 1072 1149 1060 442 821 ", "623 599 520 794 1056 681 656 883 52 410 1141 533 7", "88 512 434 114 100 96 535 592 296 909 16 734 686 1", "134 701 621 982 192 373 993 1043 111 491 1152 712 ", "199 116 140 56 466 722 1068 446 886 703 851 511 66", "2 814 836 460 29 131 781 628 105 195 165 300 1029 ", "872 38 258 1175 739 323 400 1121 962 1055 825 343 ", "727 689 956 285 250 50 21 853 1184 159 597 37 915 ", "706 967 325 839 1107 1002 462 97 939 1078 923 708 ", "1183 882 1012 1033 1194 799 248 919 451 935 852 24", "6 151 414 736 129 299 355 273 328 524 1126 716 34 ", "732 1031 317 642 304 264 953 786 610 534 293 282 6", "80 698 525 561 401 334 949 341 1020 297 176 309 92", "2 489 238 916 382 859 283 1105 1146 881 41 501 117", "6 830 973 555 1074 1067 1185 765 860 14 17 782 119", "0 985 574 966 415 66 71 629 694 453 362 583 1044 4", "04 1147 35 1000 475 896 493 506 454 33 613 235 109", " 422 388 212 684 19 43 468 253 1087 180 135 975 65", "2 162 463 696 366 270 874 697 437 1006 571 1093 18", "4 638 465 1045 984 747 904 123 605 308 1097 604 88", "4 390 856 281 196 544 142 615 1196 515 892 1005 63", "3 1064 1007 191 455 1084 67 812"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.04;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> ratings = {"308 754 143 794 483 360 275 962 1025 554 827 303 1", "77 321 282 1063 515 958 758 652 573 79 471 233 422", " 796 1127 313 328 320 604 567 478 30 1166 546 1091", " 428 353 208 885 1187 167 222 494 33 277 661 1077 ", "1078 392 179 1081 738 304 919 1181 262 909 853 341", " 701 14 587 623 15 221 374 367 111 831 1119 745 36", "1 621 51 442 1146 109 695 1035 380 1042 902 689 87", "1 288 606 312 646 777 485 138 26 857 1026 11 1101 ", "675 1095 512 1179 215 619 83 78 116 466 124"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.16666666666666666;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> ratings = {"17 361 883 1184 318 56 1062 1152 360 340 668 635 8", "27 822 611 231 1099 205 137 377 664 796 881 442 71", " 684 1001 470 414 282 699 127 47 950 653 744 953 4", "95 396 59 507 1194 1108 672 469 350 8 161 170 1187", " 990 506 1087 797 590 383 871 554 139 830 560 471 ", "338 1179 816 212 1065 973 670 488 993 512 746 213 ", "610 902 662 1034 1126 850 1016 1176 336 602 133 66", "9 2 37 595 562 974 681 78 125 428 1110 828 886 323", " 24 511 952 1141 1059 544 808 333 956 273 330 165 ", "752 1026 658 1030 191 1161 496 643 1076 738 867 32", "7 1044 791 807 1007 1125 983 436 513 347 606 957 1", "95 405 711 996 768 1136 819 1096 148 1072 1098 852", " 229 1116 907 734 1149 234 753 911 574 101 637 279", " 685 264 680 843 686 190 1037 671 310 810 1117 108", "6 1123 962 781 727 444 519 293 1140 395 717 862 38", "0 641 988 633 526 836 644 580 422 813 1006 898 160", " 754 64 576 1090 1102 184 321 515 889 114 804 1144", " 946 258 505 494 110 500 1145 122 1121 296 371 514", " 749 432 435 219 705 690 879 1137 1142 88 335 788 ", "103 563 654 248 833 782 520 1115 1158 452 533 345 ", "238 363 528 454 43 914 268 243 723 164 317 869 678", " 121 187 842 209 623 140 423 233 239 438 831 1147 ", "44 814 1119 613 832 240 715 105 632 33 175 524 153", " 415 906 113 931 186 923 937 1066 693 376 167 694 ", "984 420 478 326 878 400 456 407 57 575 21 453 772 ", "1008 339 419 1042 1033 46 646 887 806 890 144 787 ", "1134 283 913 542 659 303 745 92 601 930 89 15 1060", " 731 79 1181 430 1133 612 1020 1112 1165 475 1036 ", "969 31 394 944 226 561 315 1004 322 971 1077 446 1", "106 280 120 1063 489 289 319 1067 176 70 761 177 5", "84 770 925 294 736 547 510 87 437 320 636 18 19 92", "4 227 928 846 948 169 634 824 539 559 460 963 1050", " 401 742 857 492 651 42 50 156 348 1089 159 199 10", "11 94 638 390 38 800 692 578 579 291 455 183 1000 ", "498 757 155 39 237 426 546 457 929 366 751 368 103", "2 118 709 179 1019 329 3 909 1153 981 249 1009 958", " 713 1085 798 1031 389 230 271 587 440 631 372 932", " 203 1104 427 884 790 838 461 934 255 80 301 9 550", " 707 769 343 566 900 620 997 6 609 185 1055 218 97", "5 447 849 739 583 847 25 756 783 829 365 763 385 4", "77 232 732 1071 721 521 722 735 1080 1156 1088 801", " 859 1043 466 278 1070 353 799 252 1058 36 966 166", " 1005 597 162 1183 647 207 861 589 844 936 398 373", " 83 851 1185 307 16 1027 982 945 1038 1135 413 897", " 572 716 605 154 1131 888 116 1143 197 1095 171 11", "98 815 476 998 864 1146 927 1180 818 679 1193 449 ", "853 63 834 710 379 270 1078 995"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.034482758620689655;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> ratings = {"185 1117 32 1177 541 524 321 1134 377 1144 230 117", "6 1093 930 183 419 92 456 300 558 1135 905 702 117", "9 194 620 873 643 824 626 684 1127 1035 996 1190 8", "45 353 317 1193 783 387 238 885 597 47 735 903 16 ", "243 122 1162 213 193 446 112 1109 867 274 428 719 ", "876 70 1087 296 1198 843 1006 613 751 344 770 403 ", "883 570 386 699 1080 530 447 827 105 888 18 648 99", "2 6 477 370 776 752 389 25 270 899 679 1029 132 34", " 774 1158 802 716 1149 1152 222 252 733 266 343 72", "7 293 975 522 1113 209 136 950 480 86 920 644 559 ", "722 665 409 46 302 904 254 116 614 275 583 58 1056", " 641 281 851 175 204 889 157 400 153 819 527 805 4", "71 1195 809 111 323 554 174 169 171 565 82 941 215", " 523 9 627 961 1073 1083 255 26 371 1052 749 472 7", "13 838 840 210 906 821 290 1001 669 948 1057 160 1", "172 971 564 1120 361 121 657 268 782 607 74 999 14", "0 1075 928 973 434 942 362 686 350 828 1107 861 66", "6 1011 993 424 977 778 847 479 1099 1192 24 896 11", "70 734 315 1157 31 1070 995 1153 590 933 1115 687 ", "1096 730 804 1123 283 39 462 757 549 604 984 853 1", "019 1166 696 758 668 688 662 337 438 1036 402 514 ", "276 505 1055 1023 292 704 649 273 1178 360 619 245", " 207 272 75 1095 406 437 15 426 1081 1145 979 1027", " 542 356 731 4 781 728 203 660 747 1161 1118 516 6", "56 81 633 94 220 76 628 44 1189 799 1129 67 1188 5", "99 256 1175 164 922 880 837 746 416 60 791 924 547", " 168 383 764 593 366 242 378 511 102 521 126 991 8", "82 170 382 467 874 763 1168"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.058823529411764705;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> ratings = {"1051 903 13 732 858 1015 818 46 806 450 464 537 53", "4 1157 43 1126 1008 445 660 992 1115 48 877 205 20", "0 1098 242 119 728 657 1112 764 575 1166 714 564 2", "97 1165 389 880 1036 617 900 1113 1075 753 289 427", " 320 929 951 1193 941 943 1048 1031 541 736 923 76", "2 826 286 136 474 248 1176 754 875 596 698 1172 16", "0 1114 866 1111 961 268 865 134 779 665 911 760 71", "1 580 771 340 179 770 1187 296 1167 1188 392 544 1", "071 483 94 1010 1059 987 574 459 237 473 247 956 1", "024 131 1076 1053 278 227 873 1056 731 928 378 103", "4 744 693 121 310 962 1127 285 183 328 216 208 58 ", "1082 585 834 234 623 361 838 960 672 466 687 447 1", "5 804 324 114 801 755 5 1004 831 566 424 319 382 6", "03 284 959 531 514 465 1134 374 601 609 1042 444 1", "044 142 394 1027 907 1078 332 30 111 122 883 829 1", "153 162 634 1124 864 1158 29 780 810 881 649 364 4", "94 232 213 970 694 279 80 861 739 181 295 944 1099", " 1142 1184 388 153 1000 1019 345 869 610 819 763 7", "59 550 26 477 431 957 24 342 379 351 1169 790 521 ", "1084 805 885 375 781 630 411 663 626 202 490 3 106", "2 799 709 625 735"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.07692307692307693;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> ratings = {"847 84 23 765 629 822 572 818 393 128 886 494 945 ", "1117 72 1032 98 243 628 146 5 82 510 339 539 336 9", "88 534 1067 1059 516 1006 938 52 747 248 885 484 2", " 1187 519 1194 380 367 4 933 1188 1173 373 493 113", "9 261 1095 167 948 173 825 570 900 726 1151 515 79", "6 391 344 42 213 1185 427 639 66 306 1035 1088 107", "9 985 85 451 566 781 863 1078 470 349 294 387 220 ", "398 101 1033 711 134 369 615 925 376 241 959 766 4", "96 223 659 1075 1025 284 1135 893 279 1133 760 550", " 379 611 1145 79 1053 33 721 1193 254 859 438 910 ", "337 1110 498 661 301 467 286 876 16 442 1092 430 6", "75 144 161 674 272 217 804 622 341 1124 691 581 11", "65 417 119 574 1076 562 710 328 967 169 377 472 43", "7 595 1161 1137 201 151 682 1179 295 19 77 782 591", " 107 80 1102 552 1138 772 642 829 1157 853 48 486 ", "1186 91 837 218 558 962 96 92 831 920 87 475 580 5", "65 627 309 638 664 698 1003 95 94 303 358 188 771 ", "1112 870"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09090909090909091;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> ratings = {"386 248 614 48 134 27 1129 293 267 313 352 554 688", " 638 66 1029 425 1074 729 279 311 167 351 839 97 1", "018 22 446 1148 785 333 417 964 705 563 1030 147 6", "18 776"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> ratings = {"220 846 1119 509 131 16 851 171 259 477 837 925 63", "9 151 853 153 433 478 527 66 740 778 777 440 922 1", "069 1147 1164 358 427 1098 1195 742 689 80 682 405", " 144 33 608 894 462 675 271 473 977 190 227 431 93", "4 615 858 915 1081 1055 921 609 861 255 850 318 18", "9 511 980 1021 1096 567 60 993 1022 1009 556 386 2", "66 524 148 702 1168 704 423 501 581 966 217 555 14", "3 461 262 974 619 835 128 130 1106 1044 429 1121 5", "79 460 1128 295 947 641 1198 923 872 590 747 362 8", "2 651 713 1142 693 329 1012 410 436 421 1123 632 9", "28 1042 933 534 29 965 408 164 316 468 733 348 407", " 228 620 298 776 862 718 292 808 395 121 589 1072 ", "1124 210 946 1011 160 349 132 960 705 568 764 901 ", "219 365 593 935 435 594 265 912 475 1134 1182 539 ", "1025 598 547 327 136 313 1132 1017 2 235 522 497 8", "82 229 1129 163 88 69 743 941 642 880 759 920 392 ", "1076 23 888 471 1136 30 126 215 856 428 1001 1145 ", "275 336 1125 419 291 909 1187 741 312 481 192 93 2", "64 1000 488 680 180 800 87 1169 518 1160 537 785 9", "27 731 970 1057 191 735 284 326 1068 1156 90 71 55", "7 64 42 734 656 166 366 1152 936 193 528 565 212 7", "84 867 491 288 913 1126 169 515 549 985 1028 469 5", "26 247 841 403 75 230 695 566 1073 963 592 645 83 ", "864 543 560 6 550 231 669 363 508 36 802 1099 640 ", "305 384 261 812 479 1186 559 104 586 213 350 149 2", "05 937 274 832 40 679 296 10 411 1115 545 541 757 ", "729 530 172 246 251 1181 135 335 372 525 603 1162 ", "325 574 796 49 952 510 319 532 77 89 561 636 177 4", "22 991 810 317 967 795 404 1018 617 979 1118 200 7", "07 457 244 236 465 1161 278 1138 399 155 1120 1083", " 152 1005 43 690 486 1090 161 1176 287 81 297 844 ", "1007 655 871 863 98 70 1185 385 402 1031 1148 279 ", "905 248 413 115 322 13 809 337 484 494 381 820 794", " 1159 1173 932 1154 811 1034 307 1082 768 162 480 ", "1143 207 1191 32 223 1030 304 240 874 538 1131 256", " 723 859 103 964 625 553 184 623 140 196 836 666 1", "16 973 904 1087 85 257 1 353 763 379 845 285 397 6", "35 11 1046 770 1163 352 51 897 117 737 676 583 383", " 507 415 46 978 688 101 165 159 1002 945 474 665 3", "40 585 942 1016 1079 1157 878 571 242 573 113 78 6", "77 949 1074 374 19 996 815 1086 575 1071 781 232 7", "73 914 984"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.038461538461538464;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> ratings = {"197 94 261 933 913 999 188 943 1025 398 525 969 10", "37 992 864 103 284 219 368 889 211 363 801 745 902", " 199 583 667 953 36 782 1052 781 502 58 194 715 31", "2 830 214 693 512 1080 412 120 1114 919 1034 717 8", "47 1049 856 736 1072 927 1001 403 816 1108 216 625", " 540 436 665 1009 165 225 170 114 467 545 770 949 ", "700 535 349 501 273 434 716 302 974 1095 480 973 6", "44 833 129 353 982 977 126 637 25 348 402 733 1128", " 966 1119 351 547 1131 99 47 878 487 1141 241 48 9", "90 882 222 623 201 619 1153 819 649 508 507 870 33", "3 1057 85 624 104 477 582 1165 378 635 291 306 263", " 858 689 433 326 295 748 327 800 177 409 6 390 206", " 968 107 461 180 805 568 824 594 452 125 105 141 6", "07 247 50 303 189 1189 78 1156 357 144 703 1160 49", "8 845 393 651 662 628 722 747 97 1065 289 719 70 1", "01 51 91 839 324 1015 492 784 674 942 998 133 455 ", "1129 96 661 896 980 681 666 98 439 940 792 286 181", " 344 894 1045 178 1122 828 542 510 952 19 121 132 ", "865 1138 164 975 419 329 600 744 1116 38 1012 28 9", "84 394 1176 251 1091 590 481 1117 175 790 888 862 ", "1184 414 33 350 1118 694 899 342 397 809 725 672 1", "014 1133 820 938 315 499 534 796 860 829 339 756 1", "174 642 617 314 500 2 985 63 209 726 237 514 1179 ", "526 100 293 1164 741 618 60 382 316 813 1021 1094 ", "275 528 1157 223 359 881 958 18 1121 1024 1051 340", " 794 35 68 1143 765 20 632 138 365 1146 552 562 10", "04 406 309 941 1040 292 1109 838 946 381 965 520 7", "49 1148 1020 230 1103 604 774 446 614 5 494 530 15", "7 298 52 996 1105 518 468 137 775 1081 136 1100 70", "5 369 438 1130 652 1175 988 939 338 714 254 215 11", "35 879 587 475 1087 400 1058 808 1047 869 905 389 ", "307 80 1046 1055"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.05;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> ratings = {"1161 36 719 440 761 320 956 115 495 881 853 971 81", "2 909 892 839 653 889 1192 806 256 1057 885 744 17", "1 1037 940 423 347 183 1135 687 217 362 220 61 947", " 96 1052 960 879 137 820 122 969 536 72 1116 127 6", "92 11 789 326 174 1004 158 641 1126 873 643 231 69", " 90 661 664 743 519 535 958 962 1187 54 431 538 49", "3 900 827 1092 404 1021 56 565"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> ratings = {"20 1060 288 685 668 358 513 1154 281 962 617 60 34", "7 521 372 13 732 213 994 932 48 184 58 489 1036 96", "9 224 381 1197 687 1063 530 953 1115 548 1188 830 ", "218 114 951 542 467 168 551 703 95 346 896 457 305", " 1195 1112 287 1143 503 538 764 316 678 454 118 87", "0 835 47 1108 483 317 481 968 898 240 679 761 68 5", "25 980 577 1058 1020 368 837 997 813 736 120 1 840", " 694 423 533 854 558 195 366 405 111 484 283 1005 ", "965 1051 985 504 1196 1046 398 353 235 308 70 942 ", "209 639 1181 291 472 61 946 362 715 742 466 163 11", "22 450 866 911 1136 1150 480 1148 1073 87 329 67 1", "113 6 268 482 241 160 161 22 282 45 885 237 367 74", " 545 377 166 278 78 747 97 522 875 929 1057 825 10", "90 727 769 1178 355 714 682 31 781 1100 157 106 46", "5 490 1042 286 1130 491 206"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.1111111111111111;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> ratings = {"511 358 602 365 689 640 702 194 182 1006 290 939 1", "24 148 850 638 940 781 730 564 976 1042 752 826 56", "6 95 1087 384 510 356 838 416 900 1118 523 177 424", " 600 936 631 513 123 1023 301 817 243 868 734 391 ", "1054 100 1173 879 543 516 1153 1053 515 865 1156 1", "9 477 81 898 1150 1083 197 130 238 1061 1035 650 1", "102 593 687 99 1073 535 1166 1038 596 606 903 708 ", "1080 934 745 539 990 14 688 429 779 420 222 421 17", " 932 599 878 212 591 641 660 176 241 339 1184 298 ", "310 723 213 736 1008 227 278 33 452 913 757 149 12", "0 928 570 870 128 625 1033 837 829 800 1151 559 15", "5 378 266 645 54 588 315 503 1037 1146 34 300 478 ", "1109 1015 639 9 187 951 572 464 963 609 139 945 10", "04 157 567 816 355 697 427 352 276 455 2 297 237 4", "35 308 762 330 759 91 506 1101 935 659 1187 978 61", "2 107 345 1034 299 617 571 667 313 678 1100 1135 2", "72 334 533 642 648 542 761 710 720 1188 1144 791 2", "5 684 312 475 1045 63 970 718 652 552 508 121 346 ", "557 192 80 1074 953 235 61 867 114 382 1078 737 65", "5 168 84 528 594 952 835 1024 220 208 1107 982 753", " 1141 964 691 778 968 943 1077 204 32 1093 409 137", " 797 167 83 201 929 1050 731 537 1195 512 257 1001", " 974 649 673 1027 158 769 335 1106 909 661 777 540", " 843 1134 1079 1059 798 630 656 530 683 680 536 50", "1 830 344 1090 1060 256 930 1165 1136 432 18 209 6", "4 991 889 70 172 1117 281 744 1160 714 527 809 834", " 470 890 1123 875 1002 1084 29 116 399 486 644 418", " 805 681 624 792 509 156 522 305 862 1014 289 1069", " 774 206 787 1196 979 562 481 393 784 77 989 841 4", "99 329 1148 820 277 788 55 819 88 216 682 1143 902", " 134 247 395 332 224 616 743 955 46 1112 877 1176 ", "225 1167 1049 136 534 50 40 180 20 113 785 195 894", " 1174 491 742 1191 517 1018 1182 386 45 110 1016 8", "82 705 896 68 965 60 321 1097 944 26 590 1163 696"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.047619047619047616;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> ratings = {"6 677 396 1030 579 19 174 743 724 54 710 940 114 7", "57 473 832 1013 830 212 816 675 373 511 162 387 10", "3 994 341 1017 1065 1081 879 597 708 177 605 421 6", "97 1117 187 806 575 66 574 705 767 362 429 137 695", " 1118 1147 167 351 1064 320 1008 658 854 685 544 1", "093 871 209 75 395 886 229 878 1154 497 39 406 606", " 985 193 431 848 308 438 771 246"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.2;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> ratings = {"1086 1091 857 921 22 1027 865 595 693 236 935 497 ", "646 611 1003 1158 504 428 71 928 201 1095 657 880 ", "506 79 876 146 80 251 496 91 466 629 333 14 653 55", "2 458 511 579 581 303 570 284 767 518 649 381 591 ", "167 536 161 118 83 33 319 1065 147 596 290 905 443", " 351 847 992 335 298 416 810 1000 912 1186 811 128", " 666 1139 588 1041 299 81 1037 456 176 768 766 859", " 395 808 602 321 286 632 1010 317 1028 513 798 717", " 217 1078 701 89 924 853 1044 125 512 262 749 516 ", "474 18 628 639 194 1174 1092 559 1058 1024 610 15 ", "801 862 691 594 1194 366 1081 1013 877 747 260 84 ", "264 373 337 1100 813 56 384 849 967 933 183 860 86", "7 998 668 263 1019 1163 543 544 1005 872 1049 1022", " 858 274 904 162 61 42 1112 963 692 225 108 658 57", " 374 671 881 1036 212 164 887 243 224 1181 951 108", "5 678 227 1103 566 400 328 296 624 1145 457 892 77", "2 495 96 682 1137 961 806 64 401 930 362 216 714 9", "37 1053 234 361 744 824 782 785 368 919 324 861 30", "8 561 190 760 1073 795 1009 793 623 855 1136 958 6", "72 390 268 273 637 230 281 719 656 168 154 1177 24", "5 944 341 995 1071 424 215 578 354 550 826 510 677", " 1089 252 1172 47 879 450 616 73 940 1018 502 866 ", "996 908 654 385 737 742 178 705 704 202 383 970 70", "3 636 508 895 389 1079 839 1119 192 191 503 575 47", "7 838 589 63 598 1150 777 567 277 708 724 463 155 ", "1051 265 37 818 625 25 592 515 915 489 199 730 432", " 751 1179 269 1102 885 663 435 170 112 759 97 46 4", "98 1 1080 379 664 189 988 802 184 833 1068 845 169", " 1077 137 732 638 799 932 938 897 197 987 1184 75 ", "754 991 527 421 143 669 172 989 54 139 20 695"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.05263157894736842;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> ratings = {"485 596 58 446 413 319 785 611 255 510 74 935 742 ", "537 619 1068 759 170 647 881 830 928 955 234 1136 ", "517 142 1001 732 685 236 985 186 749 361 273 887 1", "037 1134 896 1014 366 1081 264 54 697 712 1090 591", " 487 392 711 568 724 1063 706 933 1006 1093 833 84", "9 852 773 248 1110 29 185 164 968 716 1197 260 567", " 1088 827 861 48 24 56 703 1148 599 314 974 207 19", "5 797 387 408 756 347 739 722 909 576 1046 898 204", " 422 176 312 171 226 425 691 454 930 351 391 1084 ", "190 723 929 197 40 831 924 1154 863 445 301 560 20", "2 766 22 913 1082 238 1192 604 629 28 167 1124 19 ", "304 700 502 349 762 528 950 269 1015 876 479 419 1", "131 378 84 660 30 1026 94 307 321 235 526 473 68 1", "4 557 754 210 143 858 769 336 46 696 839 1167 1117", " 340 790 639 137 1181 811 988 1122 686 1151 1024 4", "02 1114 770 127 746 187 297 150 662 50 577 200 352", " 805 1031 450 398 130 405 1078 256 38 1155 13 469 ", "277 525 617 951 407 936 784 661 442 124 331 294 66", "6 616 411 1074 620 59 417 428 1102 622 1190 1054 5", "54 106 999 114 1116 997 843 952 743 994 262 326 84", "1 220 357 729 535 95 948 12 5 138 491 505 1189 104", "8 139 436 669 548 456 298 132 183 1149 225 155 267", " 897 702 966 338 536 1099 496 675 239 11 606 959 1", "36 288 807 562 625 1022 957 1073 601 1092 441 135 ", "832 1016 636 895 1130 995 500 810 1137 99 476 1058", " 458 240 867 1166 873 792 263 1011 1184 850 822 64", "0 1094 553 597 840 862 564 580 656 623 201 341 115", "6 27 337 903 878 1165 1098 477 259 698 1121 818 24", "4 172 64 694 261 512 1163 251 140 18 311 1120 532 ", "1139 275 1018 36 145 424 296 918 650 1061 772 168 ", "474 605 481 158 399 882"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.05263157894736842;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> ratings = {"429 80 782 249 1167 1086 1118 1165 784 110 758 901", " 366 753 239 1155 257 456 833 803 620 989 17 951 9", "57 1104 128 1099 378 705 872 998 318 553 633 1153 ", "135 1026 198 1055 411 632 219 887 937 181 1038 104", "5 940 634 1039 283 276 515 621 356 658 603 885 830", " 514 879 428 896 1018 424 206 484 332 1023 1092 24", "1 156 1007 692 1161 108 72 1114 1191 189 1074 536 ", "1140 202 86 569 1094 814 212 119 196 769 1129 604 ", "48 388 1061 870 704 737 223 232 688 956 646 209 11", "82 748 651 40 1052 339 287 335 671 186 1093 221 10", "27 548 240 3 805 497 797 1053 389 550 330 984 334 ", "159 825 479 512 205 233 465 340 607 955 1064 449 9", "35 358 729 1190 672 455 345 783 860 785 1137 1136 ", "807 28 200 1198 271 828 349 791 595 591 1060 51 11", "46 10 383 305 986 767 573 804 813 371 1098 370 265", " 868 1001 1051 713 941 552 787 33 899 781 719 81 7", " 774 947 738 1077 1128 363 752 158 336 324 1134 73", " 106 665"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.09090909090909091;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> ratings = {"559 898 318 907 750 764 111 443 122 912 90 579 476", " 310 927 266 396 80 1153 738 323 762 1126 1109 100", "5 1162 1044 858 1181 484 342 870 1117 585 207 836 ", "1011 313 728 200 795 682 861 444 808 196 806 85 99", "0 652 552 731 605 1169 206 503 819 1079 704 933 79", "8 102 431 451 378 785 3 348 540 874 897 981 165 98", "3 450 315 670 308 1182 68 702 1194 909 869 732 460", " 270 586 625 894 1164 664 23 726 337 518 87 410 11", "72 1008 1073 720 701 916 653 549 96 354 175 569 73", "0 486 931 391 328 951 839 848 777 491 780 816 866 ", "193 289 970 375 249 505 601 1019 756 152 1077 881 ", "176 481 1183 161 317 204 690 123 1081 1062 1185 66", "2 233 109 863 201 574 404 908 468 31 548 244 1095 ", "822 561 856 139 170 647 610 253 949 692 48 361 127", " 1043 680 564 892 297 399 363 114 810 502 576 855 ", "367 11 886 681 1140 125 1163 279 676 66 582 70 598", " 117 1115 1094 617 26 959 1178 654 1082 1037 21 86", "7 563 1161 343 78 686 513 812 458 236 1187 642 809", " 366 663 173 765 177 802 656 407 487 415 434 683 1", "052 357 158 521 29 483 133 669 229 132 613 929 103", " 101 419 761 865 551 77 413 332 507 1176 578 1141 ", "260 699 713 421 469 954 358 932 877 424 219 591 11", "74 350 1068 95 398 1193 395 754 550 470 384 789 82", "3 747 523 147 252 446 304 1046 1021 52 263 178 105", " 594 691 1125 33 320 478 472 162 546 501 255 465 1", "179 83 1108 63 827 940 246 12 232 556 1030 824 814", " 98 307 56 385 1159 433 636 895 859 560 1151 1100 ", "208 1038 1048 946 668 734 953 1035 203 923 74 571 ", "393 4 274 1012 1061 400 380 44 1090 882 295 273 46", "4 960 840 537 901 844 588 1099 1025 467 239 50 112", "0 526 915 1124 381 247 924 718 603 910 1188 751 24", " 153 107 1033 35 154 947 745 757 488 414 820 735 1", "82 743 1144 566 640 1020 157 426 792 418 281 1051 ", "30 184 1102 592 1056 1134 993"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.047619047619047616;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> ratings = {"439 559 325 586 700 895 866 260 77 917 210 639 108", "4 536 585 1155 444 1102 503 69 212 348 309 729 216", " 373 779 1165 107 843 407 220 943 1182 270 972 691", " 1146 1107 156 663 122 400 496 343 357 996 62 1134", " 45 853 245 614 112 1098 1023 1070 780 370 1132 62", "5 564 214 1093 931 619 1123 289 18 499 680 1125 10", "31 195 899 724 1142 1111 167 1127 584 474 105 240 ", "620 696 1074 13 606 894 319 145 1075 367 1138 427 ", "1175 786 79 687 938 814 545 1164 546 939 770 991 1", "199 617 535 46 369 254 1109 645 804 882 53 1149 44", "8 881 951 436 1110 415 532 371 1090 465 524 119 91", "1 1063 408 401 185 934 1150 463 207 730 906 593 31", "6 347 850 5 227 616 429 577 152 642 264 1178 16 65", "6 481 1097 1027 160 113 359 955 971 276 397 752 83", " 1156 43 816 157 392 1160 550 197 566 238 305 387 ", "1171 1124 865 121 1016 1136 654 251 927 985 180 11", "58 173 966 715 467 402 870 655 1053 741 323 141 29", "2 603 942 446 1081 422 416 63 82 218 647 297 118 5", "54 514 667 746 360 253 1121 228 64 666 277 622 681", " 28 674 832 55 183 391 356 697 47 85 130 1082 355 ", "233 806 1135 303 886 181 660 163 609 304 1019 1159", " 727 1068 1172 1010 1025 464 224 510 364 933 1141 ", "511 395 516 431 312 613 1148 644 745 418 194 338 4", "12 924 458 1095 1089 315 92 830 859 520 1151 643 4", "10 885 229 278 1038 930 280 1062 539 4 365 507 572", " 1185 857 426 552 433 334 350 133 967 918 1092 611", " 889 232 595 888 326 827 405 236 935 993 124 127 1", "114 182 44 565 332 840 1086 177 753 497 950 175 80", "2 1112 676 1139 33 460 1043 153 800 252 109 136 79", "2 406 1050 11 258 1106 20 169 665 598 986 190 1033", " 1035 230 679 120 1040 728 482 56 563 1170 1128 57", "1 868 864 165 485 268 869 243 873 1113 282 1072 79", "6 628 801 726 250 1118 1037 754 154 777 505 219 26", "2 478 976 699 471 354 807 923 763 685 553 861 1153", " 508 200"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.047619047619047616;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> ratings = {"964 728 603 865 1133 801 444 673 1030 767 656 832 ", "594 588 179 1175 807 1122"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> ratings = {"1066 229 242 57 435 872 504 87 974 916 939 481 199", " 493 963 697 926 5 695 420 1109 169 9 878 530 947 ", "1079 1122 630 532 55 731 83 802 1070 739 846 1148 ", "12 436 506 1168 215 378 38 774 745 627 559 608 274", " 769 228 46 763 472 1068 1157 230 1054 726 757 748", " 330 610 1191 595 204 848 961 668 283 488 450 704 ", "1147 194"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> ratings = {"955 948 1011 849 726 815 630 689 134 939 727 787 5", "87 617 437 382 386 193 18 816 1046 686 328"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> ratings = {"163 1062 128 118 224 423 1060 599 852 928 652 705 ", "440 282 23 622 669 106"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> ratings = {"127 247 97 84 969 847 884 1185 576 943 726 959 557", " 112 745 450 208 1116 469 873 827 215 396 169 1107", " 851 620 753 539 119 1075 1164 837 570 957 885 893", " 676 33 479 992 999 886 997 1067 817 839 541 728 1", "013 908 1007 754 108 641 537 1160 649 517 806 712 ", "702 490 502 230 447 1096 475 840 385 238 872 1114 ", "746 290 895 1092 431 470 521 311 515 600 346 189 1", "188 366 170 532 980 544 832 725 1051 953 167 565 4", "11 138 1129 68 1062 1136 1069 1135 100 1050 1025 9", "49 692 199 903 325 948 71 592 197 141 543 1027 234", " 184 729 80 224 89 359 329 214 841 656 1121 1157 5", "8 685 269 491 1162 107 79 1040 749 634 648 794 90 ", "560 774 1123 968 114 791 994 413 907 468 401 225 9", "11 356 118 15 317 568 971 166 50 670 369 922 391 6", "45 264 410 372 1127 1039 573 1169 795 229 179 63 4", "96 682 845 986 154 191 417 783 488 448 547 121 111", "5 20 717 735 382 388 226 803 115 182 493 164 900 2", " 126 549 477 929 761 1073 1197 1106 623 160 294 86", "6 232 1167 572 464 94 856 1190 889 239 333 838 420", " 639 578 798 1048 1141 456 1019 556 582 950 540 47", "4 381 360 93 1178 631 1012 175 747 1179 146 12 336", " 703 823 250 109 453 598 527 858 984 1058 779 405 ", "632 81 295 621 1011 159 3 1089 323 503 51 1130 117", "2 279 482 522 149 881 768 38 406 742 1066 1034 134", " 296 298 287 283 248 48 587 476 525 60 45 863 918 ", "436 836 734 281"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0625;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> ratings = {"633 837 655 403 255 211 58 987 788 314 482 276 583", " 202 184 373 651 130 162 507 72 167 879 1025 1057 ", "913 984 186 14 375 590 1144 720 492 727 95 930 199", " 956 462 4 1110 1141 1059 586 1140 852 641 168 730", " 1084 689 553 1001 335 117 909 768 1008 1091 1018 ", "1139 96 833 1029 80 1012 514 256 50 1166 17 519 61", "3 497 404 1193 854 618 243 1093 970 463 1033 858 1", "056 2 120 1127 279 123 503 22 883 1152 433 624 949", " 471 1062 1150 444 811 1177 66 249 352 1128 349 37", "6 542 226 713 106 183 985 942 952 784 315 354 982 ", "723 1045 979 198 466 774 775 659 871 580 672 1191 ", "707 208 907 746 1058 615 1046 77 891 1063 140 510 ", "508 136 240 488 896 457 1118 990 1074 225 271 565 ", "875 36 640 1181 175 446 562 540 980 308 364 758 59", "3 128 1017 1115 185 316 576 950 581 440 459 268 11", "11 41 304 664 46 827 1050 1013 1076 915 491 292 11", "37 400 74 381 1064 477 697 258 966 1079 1130 923 1", "02 1113 420 1053 625 325 536 338 387 1129 494 5 89", "5 1086 476 754 1044 318 724 927 939 166 448 861 82", "8 617 721 749 417 612 539 426 84 742 760 684 347 8", "48 900 329 964 209 578 85 253 342 451 726 808 1180", " 1 725 239 1190 228 1041 461 398 138 629 799 610 3", "86 452 160 865 1094 584 998 416 392 699 662 1006 6", "5 959 566 1119 305 323 307 1080 647 667 171 161 72", "2 142 609 107 849 39 515 1014 676 105 90 884 223 4", "05 360 1036 955 690 1148 242 480 210 1125 1026 34 ", "717 450 986 802 644 914 170 337 216 200 86 825 59 ", "840 1167 310 1165 654 1185 704 8 872 814 231 132 5", "34 1186 787 441 634 521 1087 800 751 52 87 359 234", " 798 646 465 1048 588 866 780 499 12 427 429 293 1", "022 1179 336 109 61 785 1151 677 298 43 934 324 16", "3 317 219 343 1069 606 385 1102 1172 1164 812 1122", " 743 906 40 1010 1071 513 414 319 425 628 1067 92 ", "1184 1000 745 291 33 977 428 1028 555 215 563 1142", " 45 311 474 1120 969 487 605 1021 127 423 544 141 ", "296 529 847 670 1187 968 710 932 668 614 874 763 5", "27 25 29 711 274 439 919 838 1040 989 237 260 341 ", "885 177 301 272 975 221 88 905 218 649 893 1097 87", "7 1198 357 897 1030 517 1068 334 149 582 415 796 2", "38 867 454 356 269 31 300 1157 889 686 1016 42 478", " 817 823 631 483 156 178 732 549 936 733 868 68 20", "1 13 851 997 270 350 401 19 506 1132 1155 552 277 ", "685 203 299 801 273 712 137 69 965 110 213 714 761", " 538 1037 312 594 1090 764 146 53 384 734 413 1109", " 70 195 546 637 407 504 397 1178 143 93 533 622 86", "9 192 791 435 1162 122 511 1146 1054 929 153 38 84", "4 880 589 502 230 294 773 860 981 82 545 627 290 8", "55 469 344 903 204 993 678 76 1189"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03333333333333333;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> ratings = {"802 837 962 18 1109 941 986 138 1082 930 343 1179 ", "321 708 1089 1074 410 435 714 409 349 608 46 196 9", "52 27 170 599 131 832 575 329 1012 616 905 163 786", " 515 583 76 553 860 182 709 663 919 936 67 908 719", " 655 1003 621 518 711 21 396 497 118 938 427 768 2", "78 280 79 317 793 72 230 30 403 66 913 666 760 945", " 841 206 189 1024 537 723 976 635 64 989 135 296 8", "84 122 51 164 1136 102 228 771 112 548 871 1004 40", "7 1000 1108 1145 687 738 1090 1097 1034 1165 172 7", "77 35 946 479 33 701 17 22 643 318 1122 157 981 91", "1 979 1111 1187 316 489 848 99 1144 363 254 649 48", "4 458 956 695 724 523 894 187 1171 568 1031 406 34", "8 468 939 662 978 735 784 341 419 984 1166 743 918", " 28 383 613 596 232 838 587 727 319 55 775 511 660", " 133 1194 670 744 223 264 473 283 551 1151 1119 34", "4 716 1026 973 297 803 672 909 1117 627 964 560 11", "61 681 281 485 100 193 387 577 194 538 475 1054 12", "9 1023 359 77 153 657 180 856 371 266 86 1081 65 1", "048 80 929 499 757 413 219 893 1021 498 209 78 244", " 1163 69 910 97 347 522 328 460 15 747 11 166 1008", " 1185 159 47 1159 235 418 1112 684 1030 385 276 22", "9 690 334 415 906 398 438 262 299 404 732 177 1172", " 421 980 463 29 1113 213 606 260 335 162 1013 586 ", "43 688 1051 132 391 1182 453 430 1154 626 390 192 ", "1141 338 353 508 749 375 525 63 420 220 658 862 24", "1 290 706 628 115 1199 504 1135 215 624 1072 642 3", "60 95 614 367 638 487 1104 1084 1147 1011 890 437 ", "769 729 292 781 844 741 899 242 698 1103 259 333 1", "036 948 532 24 1133 139 776 536 493 957 850 433 94", "4 315 83 361 931 646 1093 836 519 1188 991 382 622", " 633 992 679 728 813 637 38 1114 753 796 759 1138 ", "412 169 1198 563 1073 715 1016 110 1091 654 539 64", "0 569 388 867 717 834 252 791 987 1139 993 1168 11", "69 707 823 306 74 815 42 1189 765 19 491 702 370 1", "053 1180 1005 214 932 1137 842 700 442 733 441 492", " 134 739 1042 249 431 603 901 883 300 56 651 459 6", "09 117 366 293 736 1148 446 1077 1129 440 773 352 ", "287 579 927 758 846 471 897 255 565 1020 448 529 8", "80 483 806 982 258 958 1047 857 208 1019 358 963 2", "04 1055 817 950 123 93 1125 1196 951 289 816 233 6", " 683 742 1164 279 402 752 955 610 111 968 970 82 5", "72 745 696 101 426 644 574 634 150 677 91 305 854 ", "652 682 827 411 1041 798 130 774"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.037037037037037035;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> ratings = {"535 1110 644 645 1179 137 151 266 60 73 314 189 94", "7 18 384 1145 616 1155 194 25 359 1052 117 754 500", " 929 723 653 13 1094 61 99 271 312 267 392 1072 31", "7 832 624 1160 14 1102 710 95 143 118 777 413 119 ", "811 462 315 726 135 877 19 322 863 937 269 882 654", " 867 855 1118 84 508 374 642 395 670 878 681 729 8", "16 429 608 30 1106 888 582 643 880 400 166 953 498", " 325 530 394 396 1016 930 735 1068 297 886 77 691 ", "238 283 1156 973 984 399 557 340 679 220 488 107 1", "048 526 96 915 558 547 1190 446 881 217 55 387 113", "5 892 879 850 1132 544 1142 437 677 605 130 998 11", "67 79 628 26 604 869 1125 991 848 491 391 361 256 ", "1090 9 1171 403 432 326 116 649 942 24 967 572 618", " 703 697 157 195 341 1025 975 32 1076 362 350 428 ", "1169 155 1175 70 381 833 234 885 158 228 959 1199 ", "823 106 167 1032 635 1 304 1017 964 57 331 525 15 ", "1006 308 417 76 830 631 965 368 224 11 978 883 184", " 1193 910 62 40 846 956 1087 51 807 198 524 1114 9", "11 936 1041 343 1080 479 451 1133 675 704 612 966 ", "585 345 241 861 932 1058 227 899 181 239 598 152 5", "19 711 1089 1153 472 380 464 865 650 562 214 250 5", "59 126 97 247 1113 659 1034 63 1061 1091 961"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.07142857142857142;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> ratings = {"897 498 246 90 161 47 33 934 942 34 138 767 378 11", "67 614 157 272 1055 1165 300 610 1029 219 502 862 ", "526 307 213 394 1119 442 156 644 907 1103 690 1124", " 684 888 890 401 255 323 1080 854 1116 1161 960 11", "9 1009 169 779 37 177 564 989 786 429 208 1197 1 9", "63 812 278 319 456 550 406 11 769 1187 611 1002 42", "0 360 297 389 588 1111 233 53 531 499 436 475 254 ", "911 432 330 294 433 1122 468 96 976 1075 794 580 4", "62 369 391 666 851 41 791 1142 833 362 1173 198 15", "3 346 860 1004 392 678 1071 358 532 179 465 524 11", "18 218 1041 752 486 266 142 431 443 525 89 871 448", " 7 285 584 1026 1195 546 158 1085 876 318 230 832 ", "816 377 361 651 1053 110 1065 60 437 933 961 293 7", "38 852 359 72 15 1162 434 1019 146 148 938 992 561", " 235 639 903 764 1018 1105 286 480 722 803 303 321", " 802 807 924 99 290 223 332 487 835 489 668 1160 3", "24 831 1172 640 624 415 519 1174 345 891 160 837 1", "196 827 988 18 813 1144 289 425 393 1156 981 617 6", "60 874 50 470 966 712 760 201 140 82 622 768 1171 ", "81 727 1066 823 530 310 804 398 137 118 603 139 17", " 1015 340 1185 586 374 948 247 205 196 951 1010 22", "9 629 260 127 379 664 538 590 363 455 674 783 508 ", "612 910 553 529 514"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.07142857142857142;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> ratings = {"931 213 161 82 506 1163 83 1185 1167 335 365 1090 ", "580 233 514 111 270 656 1055 73 425 401 1108 301 3", "39 1188 870 281 137 390 1171 320 446 780 490 420 5", "58 76 934 125 411 212 749 393 845 471 645 1068 319", " 900 834 127 144 757 338 631 181 120 1164 329 959 ", "163 664 96 833 438 439 910 1062 608 765 550 683 77", "3 1013 64 1140 123 485 350 548 973 1067 515 103 56", " 109 352 827 491 731 1165 1072 1146 308 1003 634 8", "59 605 1031 100 202 991 881 497 1102 398 259 187 8", "13 572 895 905 1126 364 999 1121 1166 521 729 330 ", "294 655 740 541 326 621 341 215 635 787 1039 925 6", "9 915 1169 269 1193 932 886 1162 204 985 917 388 4", "5 687 676 825 1157 459 1148 130 883 74 849 1065 43", "7 951 55 810 901 94 162 619 225 783 41 1019 864 67", "1 149 1030 823 98 1106 19 61 92 819 229 761 296 11", "90 461 351 754 384 192 1070 695 1178 299 462 652 3", "16 244 48 85 325 815 961 1125 297 511 136 518 556 ", "774 24 843 1040 31 715 1084 135 852 452 88 366 80 ", "993 280 762 222 199 501 786 454 614 108 481 797 13", " 380 704 523 1198 1000 889 134 1116 812 880 227 48", "6 914 340 469 441 312 30 596 795 99 653 892 793 18", "8 1097 661 209 700 170 313 565 1064 1024 576 538 3", "45 746 429 1139 447 1095 741 1187 367 508 449 1096", " 1035 983 697 659 876 838 214 732 660 292 211 767 ", "498 766 26 714 152 817 284 247 494 801 1009 466 22", "4 1021 890 29 867 553 1118 733 593 821 327 702 108", "3 721 323 946 262 923 385 1109 805 375 428 673 413"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.058823529411764705;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> ratings = {"908 975 713 902 933 886 1152 343 800 122 1021 421 ", "1131 993 901 115 719 1148 1068 1087 958 499 46 848", " 927 696 906 803 821 759 523 667 662 10 1077 731 1", "036 449 88 692 678 227 685 752 495 728 67 649 81 1", "052 779 673 357 174 684 1103 140 824 559 672 1101 ", "48 990 239 598 202 303 1166 9 838 870 275 674 429 ", "751 503 506 834 286 849 1037 144 528 211 1151 512 ", "961 433 722 695 785 1174 604 456 126 18 408 561 11", "9 1141 826 616 484 11 910 1075 155 590 691 844 12 ", "94 135 3 260 1099 93 73 768 1129 283 533 86 61 539", " 1181 856 974 634 720 1019 428 259 425 1104 1011 5", "25 872 1128 1132 353 336 962 635 660 810 765 911 7", "11 290 53 921 578 448 238 42 166 445 142 266 923 1", "034 782 269 1 382 393 675 8 587 312 79 700 176 119", "8 537 43 404 181 1121 125 1159 1175 1196 791 313 2", "28 654 282 796 965 311 835 805 1182 287 624 841 65", " 1162 854 846 1007 828 334 570 648 489 560 1074 11", "99 878 196 387 858 72 25 325 583 409 892 1012 180 ", "1039 969 328 426 1000 629 248 798 823 288 669 704 ", "663 273 410 1161 355 944 329 644 593 940 861 556 3", "2 7 658 565 647 447 143 797 133 356 299 612 178 61", "8 807 948 413 915 170 1061 422 917 130 1046 607 11", "05 369 536 1185 1025 836 666 775 1081 350 452 179 ", "359 218 935 307 510 1176 330 930 596 51 185 1139 9", "32 364 132 1138 305 69 594 736 1183 262 918 920 61", "3 1088 1157 778 926 363 532 59 998 475 789 956 20 ", "1073 1158 430 182 981 515 888 832 1086 29 769 698 ", "354 477 38 304 215 960 109 437 1053 156 1102 205 1", "57 806 912 112 483 665 814 505 852 62 1003 770 264", " 761 258 699 27 54 66 455 877 1044 851 914 964 347", " 1043 384 298 567 190 1194 419 36 1172 746 625 401", " 450 885 1097 1051 942 860 1032 171 739 1047 864 6", "71 50 344 476 386 279 710 891 544 655 461 175 949 ", "399 485 1016 493 314 1147 106 271 75 595 521 745 5", "64 204 951 338"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.045454545454545456;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> ratings = {"574 767 505 1101 396 979 482 621 1103 740 904 1088", " 698 883 723 1114 1128 127 439 973 774 53 833 822 ", "133 79 433 961 617 1081 208 769 67 298 337 54 915 ", "504 350 772 565 457 374 1015 631 672 443 466"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3333333333333333;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> ratings = {"569 839 174 684 101 881 729 1197 479 246 1034 931 ", "61 40 432 904 68 342 673 861 910 1039 998 121 966 ", "634 348 206 1157 1057 765 234 1087 191 152 30 224 ", "779 586 943 346 145 16 871 367 407 277 679 844 443", " 819 459"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3333333333333333;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> ratings = {"618 38 1176 206 633 777 59 295 68 985 222 273 806 ", "507 132 446 1075 110 470 37 193 478 376 325 238 11", "57 847 659 762 348 405 860 930 493 146 1050 610 51", "2 185 596 1115 218 30 393 486 958 535 1178 307 289", " 915 715 838 544 482 1125 334 894 106 294 269 236 ", "1189 542 368 614 1117 1132 805 517 989 406 914 217", " 598 249 496 803 114 754 77 579 358 187 641 1028 5", "95 381 1079 190 265 1090 680 468 89 973 928 931 89", "9 176 673 948 1177 195 1015 820 545 51 878 918 971", " 514 593 181 45 161 403 1162 2 167 663 262 566 66 ", "72 281 221 845 22 736 237 564 562 809 1139 191 104", " 240 205 957 846 1153 929 213 399 1142 257 1100 75", "6 609 349 969 309 1044 60 646 314 932 1174 268 100", " 714 149 602 968 766 603 688 694 630 718 437 666 4", "60 214 329 554 531 415 87 1145 111 551 414 684 668", " 841 48 1104 746 640 827 789 719 645 413 568 623 7", "84 1 1094 420 42 1185 601 359 379 761 815 1024 937", " 731 204 1019 816 139 974 1192 332 47 1039 492 682", " 1085 767 10 119 574 208 698 591 1146 556 675 1041", " 350 683 986 569 1114 627 671 159 895 536 648 142 ", "608 759 189 156 44 1144 693 898 658 919 772 228 42", "3 371 80 955 707 245 725 278 434 316 828 710 1056 ", "1152 837 71 387 96 639 1013 352 219 635 842 874 29", "9 849 561 873 885 550 306 168 1182 356 661 620 900", " 819 411 594 286 1118 706 1061 697 56 964 786 340 ", "723 259 817 1180 321 141 75 923 11 412 532 55 481 ", "865 225 872"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.058823529411764705;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> ratings = {"60 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 4 3 2", "1 40 41 42 43 44 48 49 50 53 52 51"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> ratings = {"42 911 666 17 13 1 1155 1094 815 5 1000 540"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> ratings = {"21 20 19 18 17 16 15 14 13 12 ", "11 10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> ratings = {"999 911 666 27 23 1 2 3 4 5 6 7 8 9 10", " 11 12 13 14 15 16 17 18 19 20 21 22"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> ratings = {"100 99 98 97 96 95 94 93 92 91 90 89 88 87 86", " 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71", " 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56", " 55 54 53 52 51 50"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> ratings = {"470 840 410 1168 637 464 498 1118 276 1013 989 874", " 64 192 296 611 44 999 583 365 1195 20 838 274 425", " 236 960 1116 857 630 664 98 1046 807 1111 529 47 ", "31 676 1112 42 376 56 1105 814 6 871 364 319 1145 ", "491 199 1121 713 353 956 579 445 1031 627 618 202 ", "763 271 188 1140 1044 311 895 1175 74 465 454 708 ", "1181 866 387 99 784 700 308 853 977 253 62 782 371", " 8 908 1151 83 932 55 1077 897 517 767 990 567 869", " 607 603 499 356 772 310 332 357 845 1159 1128 104", "2 783 953 315 1020 360 696 793 847 1 716 731 1097 ", "660 302 761 484 23 89 609 161 978 312 87 363 879 6", "02 635 409 749 475 106 632 961 1053 414 422 1146 6", "51 970 907 719 110 118 218 471 334 747 645 575 757", " 156 137 101 150 1084 48 859 1016 396 779 791 195 ", "1148 138 141 304 523 1129 940 569 1058 113 949 967", " 261 1017 433 126 205 679 998 325 831 239 774 245 ", "992 407 991 667 489 580 628 1055 383 924 706 369 8", "37 380 596 392 734 183 397 1165 911 657 1028 617 1", "45 105 870 707 447 281 841 526 367 297 66 851 643 ", "1142 168 480 3 347 1101 737 1025 647 588 1049 458 ", "508 759 654 927 744 937 402 440 1158 620 1067 528 ", "1001 1186 705 124 511 597 395 1063 399 753 1093 10", "05 717 1173 278 81 762 71 51 801 890 1185 413 674 ", "252 805 775 52 612 1075 1187 131 559 72 1141 298 8", "5 640 1184 290 1127 423 925 1108 114 864 605 802 1", "39 962 104 817 289 816 359 323 1068 368 477 1022 2", " 377 512 688 1029 340 28 1193 910 417 984 1163 385", " 858 212 119 898 9 473 180 140 346 262 971 170 564", " 226 123 698 196 10 466 1174 446 248 1194 227 94 3", "09 850 1179 1035 680 750 67 650 765 61 982 412 736", " 149 822 933 621 117 1062 678 929 693 125 836 852 ", "694 711 275 358 524 825 997 372 781 873 725 818 57", "1 1041 460 796 287 723 142 322 691 220 830 778 116", "7 68 1059 1011 958 324 200 947 29 216 57 443 488 9", "85 666 690 1182 230 1114 153 73 1086 191 1010 586 ", "250 96 211 40 217 1155 82 641 1066 1131 896 154 22", "4 5 951 917 1189 709 777 1034 724 436 626 270 1052", " 593 50 926 901 634 1082 943 894 721 945 366 391 4", "27 646 1076 712 496 868 435 1120 177 1149 330 483 ", "1152 351 176 457 1126 235 1143 790 780 1166 686 80", " 121 222 305 355 581 476 34 533 147 316 881 539 45", " 146 263 22 788 527 519 1069 710 59 148 234 661 81", "3 1081 133 884 548 405 344 451 887 789 1007 295 39", "8 728 553 642 878 77 293 684 877 554 478"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.037037037037037035;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> ratings = {"95 60 94 70 92 91 90 88 86 84 82 80 1 2 3 4 5 6 ", "7 8 9 10"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> ratings = {"40 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ", "16 17 18 19 21 22 23 24 25 26 27 28 29 30 31 ", "32 33 34 35 36 37 39 20 38"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> ratings = {"48 1 2 3 4 5 6 7 8 9 10 ", "11 12 13 14 15 16 17 18 19 32 45"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> ratings = {"21 1 2 3 4 5 6 7 8 9 10", "11 12 13 14 15 16 17 18 19 20"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> ratings = {"100 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 28", " 18 19 20 21 22 23 24 25 26 27"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> ratings = {"1168 196 440 643 227 1194 1149 372 878 23 767 296 ", "110 52 840 367 790 884 620 676 380 1007 304 262 10", "63 917 230 951 635 898 894 319 724 597 470 1143 62", "7 1175 436 484 457 991 433 747 8 94 830 1044 1053 ", "360 1167 391 364 1120 192 56 528 366 712 480 83 11", "59 483 949 356 1163 9 845 750 781 784 1016 985 346", " 466 947 73 911 690 630 609 866 788 98 1017 410 11", "9 617 245 801 205"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> ratings = {"1199 196 440 643 227 1194 1149 372 878 23 767 296 ", "110 52 840 367 790 884 620 676 380 1007 304 262 10", "63 917 230 951 635 898 894 319 724 597 470 1143 62", "7 1175 436 484 457 991 433 747 8 94 830 1044 1053 ", "360 1167 391 364 1120 192 56 528 366 712 480 83 11", "59 483 949 356 1163 9 845 750 781 784 1016 985 346", " 466 947 73 911 690 630 609 866 788 98 1017 410 11", "9 617 245 801 205"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> ratings = {"40 39 38 37 36 35 34 33 32 31 3", "0 29 28 27 26 25 24 23 22 21 2", "0 19 18 17 16 15 14 13 12 11 1", "0 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> ratings = {"121 120 101 100 99 91 82 81 88"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> ratings = {"724 12 13 14 15 16 17 18 19 20 21 22 3", "10 162 163 164 165 166 167 168 169 170 171 172 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> ratings = {"22 1 2 3 4 5 6 7 8"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> ratings = {"100 99 98 97 96 95 94 93 92 91 90 ", "89 87 86 85 84 83 82 81 80 79"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> ratings = {"1199 42 13 17 1163 577 1001 1101 483 845 196 724 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> ratings = {"100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ", "16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ", "31 32 33 34 35 36 37 38 39 40 41 42"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> ratings = {"22 21 20 19 18 17 16 15", " 14 13 12 11 10 9 8 7 6", " 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> ratings = {"724 42 13 17 1199 577 1001 1101 483 845 196 1163 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3333333333333333;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> ratings = {"20 19 18 17 16 15 14 13 12 10"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> ratings = {"100 62 63 14 24 21 17 39 56"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> ratings = {"21 20 19 18 17 16 15 14 1", "3 12 11 10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> ratings = {"100 12 11 1 2 3 4 5 6 7 8 9"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> ratings = {"1199 42 13 17 117 577 101 1101 483 845 196 1163 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> ratings = {"1199 911 666 17 13 1 1155 1094 815 5 1000 540"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> ratings = {"30 1 2 3 4 5 6 7 8 9 10 11 12 1", "3 14 15 16 17 18 19 20 21 22 23"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> ratings = {"1119 20 19 18 17 16 15 14", "4 13 12 11 10 9 8 7 6 5 4 31 34 56 199 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> ratings = {"21 20 19 18 17 16 15 14 13 12 11 ", "10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> ratings = {"99 98 97 96 95 94 93 92 91 90 ", "89 88 87 86 85 84 83 82 81 80 ", "79 78 77 76"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> ratings = {"10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> ratings = {"8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> ratings = {"132 34 32 31 30 29 28 27 26 25 24 23 22"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> ratings = {"999 6 5 14 3 2 1 99 17 18 19 20 21 22"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> ratings = {"100 10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> ratings = {"40 39 38 37 36 35 34 33 32 31 30 ", "29 28 27 26 25 24 23 22 21 20 19 ", "18 17 16 15 14 13 12 11 10 9 8 ", "7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> ratings = {"1000 11 12 13 14", " 15 16 17 18 19", " 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> ratings = {"1000 12 14 15 16 17 18 19 20 21 22 23 24", " 25 26 27 28 29 30 31 32"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> ratings = {"21 20 19 18 17 16 15 14", " 13 12 11 10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> ratings = {"1163 42 13 17 1199 577 1001 1101 483 845 196 113 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> ratings = {"1199 42 13 17 1198 577 1001 1101 483 845 196 116 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> ratings = {"21 20 19 18 17 16 15 ", "14 13 12 11 10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> ratings = {"1199 13 17 1198 577 1001 1101 483 845 196 1163 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> ratings = {"100 1 2 3 4 5 6 7"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> ratings = {"1199 724 42 13 17 577 1001 1101 483 845 196 1163 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> ratings = {"50 1 2 3 4 5 6 7 8 9 10", "11 12 13 14 15 16 17 18 19 51"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> ratings = {"60 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 2", "0 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ", "37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53", " 54 55 56 57"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> ratings = {"21 20 19 18 17 16 15 14 13 12 1", "1 10 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> ratings = {"1198 42 13 17 1197 577 1001 1101 483 845 196 113 3", "60 985 296 1044 917 1007 898 119 1016 23 56 1159 1", "194 372 951 991 947 1053 433 1017 1011 391 110 9 2", "30 245 788 830 747 2 3"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> ratings = {"1 2 3 4 5 6 7 8 9 10 11 12 13 ", "14 15 16 17 18 19 20 21"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> ratings = {"22 1 2 3 4 5 6 7 8 9 10 11 12 13 ", "14 15 16 17 18 19 20 21"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> ratings = {"41 40 39 38 37 36 35 34 33 32", " 31 30 29 28 27 26 25 24 23 22", " 21 20 19 18 17 16 15 14 13 12 11 10", " 9 8 7 6 5 4 3 2 1"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> ratings = {"1199 1197 1198 1 2 3 4 5 6 7", " 8 9 10 11 12 13 14 15 16 17", " 18 19 20 21 22 23 24 25 26", " 27 28 29 30 31 32 33 34 35 36 37", " 38 39 40"};
    EllysRoomAssignmentsDiv2* pObj = new EllysRoomAssignmentsDiv2();
    clock_t start = clock();
    double result = pObj->getProbability(ratings);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=9905703&rd=15497&pm=12521
********************************************************************************
#include <algorithm>
#include <cassert>
#include <sstream>
#include <vector>
#include <string>
#include <iostream>
using namespace std;
 
class EllysRoomAssignmentsDiv2
{
public:
 
double getProbability(vector <string> ratings)
{
  string rating;
  for (int i = 0; i < ratings.size(); ++i)
    rating += ratings[i];
  istringstream iss(rating);
  vector<int> regs;
  int member;
  while (iss >> member) regs.push_back(member);
  int elly = regs[0];
  sort(regs.begin(), regs.end(), greater<int>());
  if (regs[0] == elly) return 1.0;
 
  int pos = 0;
  for (; pos < regs.size() && regs[pos] > elly; ++pos) ;
  assert(regs[pos] == elly);
  int N = regs.size();
  int R = (N + 19) / 20; cout << N << ' ' << R << endl;
 
  if (pos < R) return 0.0;
  
  return 1.0 / R;
}
 
};

********************************************************************************
*******************************************************************************/