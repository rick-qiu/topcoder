/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11274
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class GogoXCake {
public:
    string solve(vector<string> cake, vector<string> cutter);
};

string GogoXCake::solve(vector<string> cake, vector<string> cutter) {
    string ret;
    return ret;
}


int test0() {
    vector<string> cake = {"X.X", "...", "...", "X.X"};
    vector<string> cutter = {".X", "..", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> cake = {"..XX", "...X", "X...", "XX.."};
    vector<string> cutter = {"..", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> cake = {"...X..."};
    vector<string> cutter = {"..."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> cake = {".X.", "X.X", ".X."};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> cake = {"XXXXXXX", "X.....X", "X.....X", "X.....X", "XXXXXXX"};
    vector<string> cutter = {".X.", "XXX", ".X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> cake = {"."};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> cake = {"X.", ".X"};
    vector<string> cutter = {".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> cake = {"....", "....", "....", "....", "....", "...."};
    vector<string> cutter = {"..", "..", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> cake = {"."};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> cake = {".", "."};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> cake = {".."};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> cake = {"...", "...", "..."};
    vector<string> cutter = {".", "."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> cake = {"............", "............", "............", "............", "............", "............", "............", "............", "............", "............"};
    vector<string> cutter = {"....", "....", "....", "....", "...."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> cake = {};
    vector<string> cutter = {"................................................", "................................................", "................................................", "................................................", "................................................", "................................................", "................................................"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> cake = {};
    vector<string> cutter = {".", ".", ".", ".", ".", ".", "."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> cake = {};
    vector<string> cutter = {"........"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> cake = {};
    vector<string> cutter = {".......", ".......", ".......", ".......", ".......", ".......", ".......", ".......", ".......", "......."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> cake = {"..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................."};
    vector<string> cutter = {".........................", ".........................", ".........................", ".........................", ".........................", ".........................", "........................."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> cake = {"..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................."};
    vector<string> cutter = {".....", ".....", ".....", ".....", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> cake = {};
    vector<string> cutter = {".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", ".....", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> cake = {};
    vector<string> cutter = {".........................", ".........................", ".........................", ".........................", "........................."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> cake = {};
    vector<string> cutter = {".................................................."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> cake = {};
    vector<string> cutter = {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> cake = {};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> cake = {};
    vector<string> cutter = {".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", ".........................", "........................."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> cake = {".......X......X.X....X..XX.X.XX.XX....X.......XX..", "......X.........XXX...........XX..X.XX.X.XX..X.X.X", "X.X......XXX..XXX..X.....X..XX........X.....X.X...", "X...XX.X.........XX.................XXXX.XXX...XX.", ".X......XX.X..X.XX.X.XX....XX.....X.....X.X.......", ".XX.......X..X...XXX.....XX.XX......XXX.X..X......", "X...........X....X..X.X...XXXX.X.........X.....X..", "...X...X..XX...XX..X.X...X..XXXX...........X.X.XX.", ".X....XX....X.X...X...XXXX...X...X.X.X.X....X....X", "......XX..X.....X....X...X...X.......X....XX...XXX", ".X.X...XX.XXX.XX....X.X..X....X..X.X.........X..X.", "..X.XX..X.......X..............X.......X..XX.XX...", "..X........X..X..............X....X.....X...X....X", ".X.......X.......XX.....X..X......XX.....X......X.", "X..X...X.........X...........X.................X..", "....X...XXX......X.XXX..X.............XX......XX..", ".......XX..XX.....X..X.XX..X.X..X..XX......X..X..X", "...X..X.X.............X...X....X.XX...X....X......", "...........X.X.......................X.....X.....X", "XXX.........XXX..X..X...XX....X...............X...", "X.X....X..X....XXX....X.............XX......XXX...", "...X........XX...X..X...XXX..X......X..X......X...", "..X.X.....X....X..XX....X.X................XX.....", "XX...XX.X...X......X.XX.X.X.....X..X..X.......XX.X", ".XX...X....X.......X.X.X..X.XXXX.X.............X..", "..........XX.X..X..............X.....X.X.....X....", "....XX..X....XX.XXXXX..XXX...................X.XXX", ".............X...XXXX....XX.X.....X....XX..X...X..", "..X.XX.XX.X......X..........XX.XX....X...XX.......", "XX.X.XX.....X....XX....X...X...X....XX......XXXX..", "...X.....X..X......XX....X.............XXXX.X..X..", "...X.....X....X..XX.....X......XXX..X.X...........", ".....XX.X....X......X..X...X.X.X...........X.....X", "XX..X.X............X.XX.....X..X..X..X...X.....X..", ".X.......X...XX....X....X....X.X..........X.XX....", "X...........X.XX...XX.....XX..XXX.X.XX.....X...X.X", "X......X......X.X........X........X....XX.XX..X...", "X..X..X..............X.......X.X.......X......XX..", "...X...X.....XX.X.....XX.X..X...............XX....", "X.X..X.X......XX...........XX......X.XX.X...X.....", "....X..X....X....X.X..XX.X......X.X....X..X.X.....", "...XX.X..X.......XX.X.X....X..............X.X.X...", "...X.....X..XXX....X.X.......XX..X...X......X.....", "...X.....X.....X.X..............X..X.......XX.X..X", ".XX....X.X.X..XXX......X.X..X........XX....XX.....", "....X.............X...X.X...X..XX..X...X......X...", "...............X........XX...XX.....X..X..XXXX.XXX", "......X.....X....X.....X..XX.........X...XX.XX....", "X..XX...........................X....X...X........", "..X.X...X.......X...X...X...X......X...X.XX......."};
    vector<string> cutter = {"XXXXXXXXXX.XXXXXXXXXXX.X.", "X.X.X.XXXX..X.X.XXXXX.XXX", "XX.XX.X..X..XXX..X.XXXXXX", "XXX.XXXXX.XXXXXXXXXXXXX..", "X.XXX.X..XXXXXXXXXXXXXXXX", "X.X.XXXX.X.XXXXXXXXX..X.X", ".XX.X.XXXXXXXX.X.XXXXXXXX", ".XXX..XXX.XX.XXXX.XX.XXXX", "XXXXXXXXXXXXXXXX..XXX.XXX", "XXXX.XXX.XX.XX..X.XX.XX..", "XXXX.X.XXXXXXX.XXXXXX.X..", "X..XXXXXX..XXXXX..XXXX.XX", "XXXXXXXXXXXXXXX.XXX...XXX", ".XXXX.XX..XXX.X.XXXXXXXXX", "XX.XXXXXXXXXX.XXX.XXXXXX.", "XX..X.XX.XXX.XX.XXXX..XXX", "XXXXXXXX..XXXXXXX.XX.XX..", "XXXXXXXXXXXX.X.XXXXXXXXX.", "X..X.XXX.XXX.X.XXXXX..XXX", "X..XXXXXXXXXXX.X..XX.XXX.", "XXXX.XXXX.XXXX.XXXXX.XXXX", "X.X...XXXXX.XXX..XXXXXXXX", "X.XXXXXXXXXXX..XX.X.XXXXX", ".X..XX..XX.XXXXXXXXXXXXXX", "XXX.XX..XX.XXX.XXXXXX...X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> cake = {"..X..X.X..XX....X....X.XX.X.X..X...........XX.....", ".X.......X...X....XX.....X...X...XXX......XX...X..", "......X...X.......XX.X...X.......X....X....X.XX.X.", ".........X.......X.....XXXX..X....X.....X....X....", "....XXX.XXX....X......XX.X.X..X.X.....XX.XX..X....", "X.X.X..X................X..X..X....X.....X....X..X", "..XX.XX........X.......XX....XXX.....XX.XX..X.X...", "X....XX.X.......X........X...XX....X.XX.X...X..X.X", ".X.X.X...X.X.XX..XX.X....X..XXX...X..X.XX........X", "X.XX....XXXX...........XXX.....X...X..X.X.XX......", "..X.....XX.X..............X...X.....X..XX.XXX..X.X", "..XXX.X...X.X....XXX................XX......XX..XX", "X.XX..X...X..X.X....X....X...X.......X.X....XX....", ".X...........X.....X..X....X.X..X.XX..............", ".......XX.X.XX..XXX.XXX..........XX..X......X.....", "..........X.X.........XX..X........X...X.X....X.X.", "..X..X..X.....XX.......XX.X...X.X.....XXXX.XX....X", "X.X.....XX......X...X....X.X..XXX.....X...........", ".X..XXX.......X....X.X..........X..X............X.", "...XX................X.XXXX....X..X........X.X....", ".X........................X..X.X....XX.X......X...", "......X..X...XX.X...XX............X..X...XX...XX..", ".X..X.XX...............X...........X..XX.X....X...", "X.......X.X.X.....XX..X..X..X........XXXX.X.......", "...X.X..XXX.X......XX......X.........X......X..X..", "..X...X..X..XXXX...X..X...XX..XX.XX..X......XX....", "X...X..X.X....X...X..XX.X...X.......X.......X.X...", "..XXX.X.....X.XX.X.........XX.....X........X..X...", ".X...X..XX...XX..XX....X..........X...........X.X.", ".X...X.X....X..............X........X...X.........", ".X.....X..X........X..X..X.....X.....X.XXX...XX...", "....XXXX..X..............X......X.X..X...XXXX....X", "........XXXXX....X..XX.X...X...X...........X......", ".......X.XX.X......X...X......X...............XXX.", "....X......X..X....X...X........X.X..XXXX.........", "X..X.......XX...X....X..XX.XXX..X......XX.X..X..X.", ".X.X.XX..X...XX.X..X.X.X....XXX..X..X.X......X....", "X.....X......X..X...X.X...X..........X.X.X.....X..", "..X...........X..XX.X..XXX..X.XX...X......XX......", "...X.......X....XX.X.XX..X.XXX..............XX....", "..X.XX......X....XX...X.............XX....XX...X..", ".X.XXX.......X...............X...X.X..........X...", ".X.....XX.......X.X.X..XXX...X...X...X.X.XX..X.X..", "X.X..X.X...X..X......X....X............XXX......X.", "..........X.X......X.X.......X.X......X..XX..X...X", ".X..X.X.XX.X...X.........X.X...XX.X...............", ".X.XX..X...X.X..X.....XX......X.....X.....X.......", "......X..X...XX..........X.....X..X.X..X...X..X.XX", ".X........XX....XX..XX.....X.XXXXX..X.....X.....X."};
    vector<string> cutter = {"XX..XXXX..XXXXXXX..XXXX.", "X.XXXXXXXXXXXXXXXXX.XXXX", ".X...XXXX.XXX...XX.XX.XX", "X.XXXX.X.X.X.X.XXX.XXXXX", "XX.XXXXXXX.XX..XXXXX.XX.", "XXXX.XXXX.XXX.XX.XX..XXX", "X.X.XXXX.XXXXXXXXXXX.XXX", "..X.XXXXXXXXXXXXX.X.X...", "XXXXXXX..XXXX..XXXXX.XXX", "XXXXXXXX.XXX.XXXXXX.XX..", "X.XX..XXXXXXXXXXXXX.X..X", "XX.XXXXX.X.XXXXX.X.X.XXX", "XXXXX.X.XX.XX.X..XXXXXXX", "XXXXX.XXXXXXX.XX.XXXX.XX", ".XX...XXXXX.XXXXXX..XXX.", "XXXX.XXXXXXXXXX.XX.XXX.X", ".X.XXXXXXXX..XXXXX.XXXX.", ".XX..X.XXXXXXXXX.XX.XXXX", "XX.XXX.XXXXXX..XXXXXX.X.", ".X..XXX.XXXXX.XXXXXXXXX.", ".XX.XX..XX.XXXX.XXX.XXXX", ".X.XXX.XXXXX.X.XXX.X.XXX", "XXX..XXXX.XX..XX.XXX..XX", "XX.XXXX..XXXXXX.XXXXXXX.", ".XXX.XXXXXXXXXXXXX.X..X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> cake = {"X.X..X...X....X.X..X..X...X...X..X.X..X........XX", ".X.X...X.X..X...XX..X...............X............", ".X.X...X....X..X...............XX.XX....X.....X..", "X.X.....XXXX.....XX.......X....X.X..X.X...XXX.XXX", "........X....XX.XX.XX..X..X.....X..X...........X.", "X.....XXX.XX..XXX...X.........XX....XX......XXX.X", "......XX..X..XXXX...X..X....XX.X......X..X.X....X", "X.X.....X.......XX....X.....X......X......X.....X", ".......X.........X..X..X......X............X.....", "...X.....X...X......XX.........X....X.X.X..X.....", ".X..XXX.......X.X......XX.....X.....X.........X..", ".XX...X........X...XX.XXX.....X...X...X..X..X....", "X.X...X..X..XX..........X...X.X..X.......XX....X.", "..X..X....XXX.X.X...X.X.X....X......XX...X.....XX", "..X............X...X.......X...X......X....X..X..", ".X.XXXX......X.X.......XXX..X...X.X.......X.XXX..", ".....X........XXX..X.....X...X.................XX", ".X.X.XXX......X.........X...X...X..X.......X...X.", "X.X..........X.X.X....XX...X......X..X....X....X.", "X.X...X..X...........X...X.XXX.X.XXX.......XX.X..", "XX.XX..X......X..X.........XXXX..X.............XX", "XXXX..X..X..X..X..XX...X.XX..X..XX.X....X........", "..X..........XXXX..X...........X.XX..X....X.X....", "X.....X....X.XX.XX..X..X........XX......X...X....", "X........X.......X........XX......X......X...X...", "X..X.XX........X.......X.......X........XX.......", "......X........XX.......X...XX..XX....XX....XX.X.", ".....XXX.......X..................X..X......X.X..", "..X.XX.......XX.....XX..X.........X..............", "X.X...X..XXXXX....X..........X.....X.X..........X", "....X.....X...X.X.X.XX.....X..X.X...XX.......XX..", "X....X........X..XXXX........X...X.X.XX..........", ".....X....X.X..XX..X.X.X.XX......XX......X.......", "X.........X...X...X.X..X.X.......X....X...X..X...", ".......XXX....X.....X....X.........X.X...X...X...", "..X.....XX.X.....X.XXX...X.XX.XX.X......X...X.XX.", "....X.X....X.X....X....X......X....X.....X...X..X", "X.........XX...X.X....X..X..X....X..X.XX.....X...", "......X..X.X......XXX...X.XX.X....XX...X..XX.X...", "...X...X..X....XX........XXX...X....X....X.XX....", "X.X..X...X..X.X.....XX..X..X.XXX........X........", ".................X.X.....X.......XX..X......X..X.", "....XXX...X.......X..X.X..X..X....X...XX......X..", "X...X.XX..X....X.XX.X...X.X...........XX....X..XX", ".X.X....X.....XX....XX.........X.....X...X....X..", "...XX.....X....X.X....X.....X...XX..X.....X.X..X.", "X.X......X..........X...X........X..X........XX.X", "..X.....XX.............XX.....X......X.X.X.......", "............X..............XX....X..X........X...", ".X.....X...X..XXX...X..X.XX....X......XX.X..XXX.X"};
    vector<string> cutter = {".XX...XXXXXXXXXXXX.X.XXXX", "XXXXXXXX.XXXXXX.XXXXXXXX.", "X.XXXXXX...XX.XXXX.XX....", ".XXXXXXXXX..XXX.XX.X.XXX.", "X.XXXXXXX.XXXXXXX.XXX.XXX", ".XXXXXXXXX..XXXXXX.X.XXXX", "X.X.X.XXXX.XXX.XX.XXX.XXX", "X..XX..XXXX.XXX..XX.X..X.", "XXXX.X.XX..XXXX.XXXX.X..X", "XXXXXXX.XX.XXXXXXXXX.XXXX", "XX.X.XXXXX.XXXXXXXXXX.XX.", "XXX.XXXXXXX.X.XXXX.XXXXX.", ".X.XXX.X.XXXXXXXXX.XXXXXX", "..XXXX.XXXXX.XXXXX.X.XXXX", "XX.X.XX..XXXXXXXX.XX.X.XX", "XXXXXX.XX.XXXXX.XXXXX.XXX", "..XXXX.X.XX.XXXXXXXXX.XXX", "XX.XXXXX.XXXX.XX.XX.X.XXX", "XXX.X.XXX.X.XXX...XX.XX.X", "X.XX.X.XX.XX.XXX.XXXXXXXX", ".XXXXXXXX.XX...XXXXXXXX..", "XXXXXX.XXXXXXXXXX.X..XXXX", "XX.XXXXXXXXXX..X....XXX.X", "XXX.XXXX.XXXXXXXXX.XX.XXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> cake = {};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> cake = {};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> cake = {".X.X..X.X.XXX..XXX....X..X...X.X..X.XX..X......XXX", "X...XX..X....X.X.X..X..XXX.X.XX.X...X.....X.X...X.", "X..X..XXXX..XX..XX....X.XXXX.XXX..XXX..XX.X..X.X..", "X...X.XXX..X.XXXX..XXX.X.XX.X.XX...X.X...XXXX.XX..", "XX...X.X....XX......X..X.XXXX..X.XXX..X.X..XXX..X.", "XXX..XXX.XXX.X.XXXXXXXX........XXX..XX..XXX...XXX.", "...X.X.X..XX..XX.X.XXX.....XX.....X..XX.X....X.XX.", "XX.XXXX..X.XX.XXXX..X.X.X..XX..X...XXX.XXX.X.X.X..", ".XXXXX..X..X.XXX..X.X.......XXX..X.XXX...XX..X.XXX", "XXXXX...XXXX..X...XX.X.X..XX....XXX...X.XXX...X.X.", ".XXX.XXX.X..XXXX..X.XX..X..XX.XX.XXXX.X.XX.XXX..XX", "X.X.XXXXXXX..X.XXX.XX.X...X.X.X.X..XXXXXX.XX..XX.X", "XX.XX...XXX.X..X.....XXX...X..XXXXX.X..XX.XXX..X.X", "X...X.....XXXX....X....XX..XX..X..XXX.....X..X.X..", "...X..X.XXXX.X..XXXXXX.XXX.....XXX..XX.X........X.", "XXX...X..XXXX..XX....X...XXX.XXXXXXX.XXX.X.XX..X..", "XX.X.XX..XXXXXX.X.XX...XX.X..XX...XX.XX..X.X.XX...", "..X..X.XX.XXX......X.XX.X.....X.XXXX...X..XX......", ".X.XXX..XXX.XX...XXX..XX.X.XX..X.XX..X.X.XXX.X...X", "...X.....X.XXX..X....X.X.XX.X.X...XX..XX....XXXX..", "X...XX.XXX...X...XX.XXX..X......X.XXXXX.XXXX.XXX.X", "X..XX.XX..XX.X.X.XXXXX..XX..X..X.XX...X..X.XXX..X.", "XX.X..XX.X..X.X...X.X...XX.XXXX.X..XXXXX..X......X", ".....X.X.XXXXXXX.XXXXX..XXXX.XX.X.XXX.X..XXXX.XX.X", "X.X.X.XX.X.X.X...X..X.XX..X.X.X.X.X..XX.XX.....XX.", "X.XXXX.XXXXXXXXXX.XX.XX.X..X.X..XX...X.X.XX.X.X...", "XXX.XX.XX.XXX.XXXXX......XXXX.X.....X...X...X.XX..", "XX..XXX....X....XXXXXX.X.....X..XXX...X.XX...X....", "X.XX.XX...XXXX..X.XX.XX.XXXXXX....X...X..XX.XX...X", "XX..XX.XX.....X....XXX.X.X......X....XXX..X..X.X.X", "XX..X.XX...X......X...XXX..XXXX..X..XX.X.XX.X.XXX.", "..XXX..XX.XX.XX....XX..X.X.X...X.X.XX.X..XX..X.X..", "XX.XXXX..X....XX.X.XX.X.XXX.XXX.XX..X..XX....XX...", "XXXX.....X..XX.XXXXX.X.....XX....XXX.XXX...XXX..X.", "X...X.XXX.....XXX.....X.X....XX..XXX.X.X......XXXX", "X.X.X.XXXXXXX.X.XXXXX.X...X...XXXX.XXXXX..XX..XXX.", "XXX.XX.XXXXXXX.XXX...X.X.XX..X.XXX.XX.X.X.XX...X.X", "XX...XX.X..XXXXXXXXX.XX.X.X.XXX......XXX.X..X.XXXX", ".X.XX.X.X.XX..XX...XXX..X..X..X..X.X...X.X.XX..XX.", "....X..XX...XX.X.XX...XX...X.X.XXXX..X.X.XXX..X..X", "XXXX.X.XX...XXXXXXX.X..X.XXXXX..XX........XX..XX.X", "X.X.X.X...X.XX...X.XXXXX.X.XX.XX.XX..XXXX..X.X...X", ".X..X.XXXX.X.XX.X...X.X.XX.X.X..X.X.X.XXXX.XXX.X.X", "XX.XX..X.....X.XXX......XXX...X..XX.XX....X...XXXX", ".X.X.......X.XX.X.X.X.........XXXX....X..XX...XX.X", "..X...X.XXX.XXX.XXX....X.X...X.XX...XX.X...XXXXX.X", "X...XX.XXXX...X..X...XXX.XXX..X.X.XX.X..X.....X.XX", "...X.......X.XX.X.XXX..X.X..X.X...X....XX..X..X.XX", "X.XXXXX....XX.XX..XX...XXX.XX.XX..X..X..X.X..XX..X", "X.X.XXXXXX.X.X..X....X.X.X.X.X.XXXX.XXXX.X..X...XX"};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> cake = {};
    vector<string> cutter = {".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> cake = {"XX.X..XX.X..XXXXX..XXXXXXX.X.X.XXXXX.XXXXXX...XXXX", "X.X.....X.X..XX.XX...XX.XX..X.X...XX..XX.XXX...X.X", "XX.XX.XX..XXXXXX.X.XX.X...X.X.......X...X..XXXXX..", "XXXXX.X..X.X.X.XXXX..X.....XXX....XX..X..X....XXX.", "XXX..X.X..X.X...X.XXX.X......X.XXX.XXX..XXX.X..X.X", ".X.X..X..X....X.XX.XX.X.X.....X.X.X.XXXX.XX..X....", "....X..X.....X..XXX....X.X.X..X.XX..XXX.XX.X..X...", "X.X.X...XXX.X.XX.XXX...XX.X.XX.......XXX.X..XX.XXX", "XXXXXX.XXXXXXX..XX.XX..XXX.X..XX.X...XXX.X..X...XX", "XXXXXXX.X.XXXX.X.XX.X....XXXX..XXX.XXXXXX........X", "XXXX.X......XX.........XX.XX.....X....XXX.X.......", ".XXXX.X..X.X..X........X....X.......X...XX.X...X..", "....X.X.XXXXX..XX.X.XX..X.....XX.X..X..X.XXXX.X.XX", "X.X..X.X.X.X.X.X.XXX.XX..X.X...XXXX.....XX.XXXXXXX", "XXX.XXX.....X..XX.XXXX....X......X.....X....XXX.XX", ".XXX.X.X.....XX.X..X.X......X..X..X...XXX....XXX.X", "X..XXXX.XX.XX..X....X...XXXX.XX.XXXX.XXXXX..X...XX", ".XX.XXXX.XX.XXX.X..XX.X.XX.XXXXXXXXX...XXXX..XX..X", "....XX.XX.XXX....XXXXX.X.XX.XXX..X.XX...X.XX.....X", "..X..XX.XXX.XX....XX..X.X...XXX...X.XXX.X...X.....", "X.X..XXXXX.X..XX...XX........X......X.XXX..X..X..X", "XXXX..XXXX.....X......XX.X....X..X.....XXX..X..X..", "XXXXXX.XX...X..XX.X.X....X.XX..XXXX.XX...XX..X..XX", ".XXX.XX.XX..XXXXXXXX..X...X.X.X.XXXX.XX....X.X.X.X", "X.XXX...X...XXX.XXXXX..X.XX.X..X..XXXXX.....XXX.XX", "X..XXXX......XXX..X.XX.X...X.X.XX..XXXX..X..XX.X.X", "X...X..XXX.XXXX..X.X.XXXX....XXXX..X.XXX.XXXXXX.X.", "X..XX....XXXX.X....XX.XXXXXXX.XXX..X..X..XXX..XXXX", "X....X.XX.XXX..X.XX.XX.X..X.XXXX.X.XX.XX..XXX....X", "XX.X..XX.XXXXX.XXXXX.XXXX..X.X.XX.XXX.XXX..X...X..", "XXXXXXXXX.XX.XX.XX..X.X.X.X.XXX....XXX.X....X....X", "X.X.XXX.XXXX...X..X...XX.....X.XX....X.XX....XXXX.", ".X...XXX.X....X.XX...X.XX..X..X.XX.XX.X...XX.....X", "X....X.XXXX...X...XX..XX....X.......X.XXX...XXX...", "XX...XX.XXXXXXX....XXXX........X....X..X..XX.X..XX", "XX....XXXXXXX.X..X.XXX.X..XX.X.XXX.XXX.X.....XX..X", ".XX....XXXXX...X.XX.X.X.XX..X.XX.....X.X..X...XXXX", "..XXX.XX....X...X.X.XX.X.XX..X.XX.......X.XX..XXXX", "X..XX.X.X....XXX.X...XXXX.X...X.X.X.X.X...X.XX.XXX", "XXX..X.X.XXXXXX......XXX.XXX...X.X...X.XX....X...X", "XXXX...XXX...XX......XXXX.XXXXXXX.X...X..X.X.XX...", "XX.XX.X.XXX....X.X..XXXXXXX.XXX..X.X...X..X.X.XXXX", ".X..XXXX.XX..XX.X.X...XXXXXX.XXX..X..X.XX.XXX...XX", "X.X..XXX......XX.....X.XXXXX...X..XX....XXX......X", "XX.XX.XXX.X..XXX...X...XXXX.X...X...X.X..XXX...X.X", "XXX.XX.XX.....X.X..XX....XX.....XXXX.X.X.X.XXXXXXX", "..XXXXX.XX.....X.X...X....XX......X...XX..X..XX..X", "X..X.XXXX.X.XXX.X.X.X.X...XXXX.X.X.X....X.X.X.XX..", "XXXXX.X.X....XX......XX....X..XX...X..XX..XX..XX.X", "XXXXXXXX.X.X.XXX.X.X..XX.XX.X..XX.X.X..XXX.XXX.XX."};
    vector<string> cutter = {".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> cake = {"XX..XXX..XX..XXXX..X.X.XXXX..XX.XX.XXX.XX.XXXX.XXX", "..X...XX..XX..X..X..X.X.X..X...X..X.XXX..X.XXXX.XX", "X...X..XXX.XXXXX....X..X.X..XXX..X.XXXX...XX.X..XX", "XXXX....X.X.X.XXX.X..X....X.XX.X..XX...X..XXX....X", "X.XXX..X...X.X.X.X.XXXX.X.XX..X....XX...XX.XX...XX", ".X.X.X.XXX.XX.X...X.XXXX..XXXX.XX...XXXX.X..X...XX", "X.X...XXXXXX.XX...X...XXXX...XXXX.X.XXXXX.X.XX.XXX", ".XXX...XX.XX..XX..X....X..XX...X.X.XX.X.XXX.XXXXXX", "X.X.XXX..X.X...XX....X......X.....XXXX.X.X.X.XX.XX", ".X.X.XX...X.X.X..X.X..XX...X.X..X.X.XX.XXXX...XX.X", "X.X...XX...X.X..X..X...X.XX..XXX..X............X.X", ".XX.X...XXX.XX....X.X..XX.XXX..XX....X..X.....XXX.", "...X.XX..XXX.....X.X.X.XXX...XX.XX.X.X.XX..XXXXXXX", "..X..XXX.XXXX......XX.X.XX.....XXX..X.X.X...XX..XX", "X.XXX...XX.XXXXX..X.X.XX.XX..X..X..........XX....X", "XXXXXXX..XX.XXXX..XX.X.X..XX....XX..X..X...XXX..XX", "XXXXXXX.X.XXXXXXX..X..XXX.X.X...XXXXX.XXXXX.X.XX.X", ".X.X.X......X...XXX.X.XXXXXX.X.....XX..XXX.X.X.X..", "X.X.X.X....X.....XXX.XXX.X..XX......X..X..X.XXXX..", "XX.XXXXXX....X.XXXXX......X...X....X...X....XXX.X.", "XX...X.X.X.X....X.XXX.X...XXXX.XX...X..XX.XX.X...X", "....X.X.....XXX......XXXXXXX..XX..X.XXXXXXXX.X...X", "X.......X.X..XX.XX.X.XXXX.XX........XXXXX.XX..X.XX", "XXXX......X.XXXX.X.XXX.XX.....XX..XX.XXX.X.X...XXX", "XXX.X...X..X..X.X.X.X.X.X..X..XX.XXX.X..X.XX..X.XX", ".XX..X...X.X.X.X.X.XX..XXX.X.XXXX.XX..X..X.XX.XX.X", "X.X..XX.XX..X..X....XX..X..XX.XX..XXX.XXXXX.XXXX..", "XX...X.XX.X..X.......X.X.X...XXXX...XXX.XXXX.XXXX.", "XXX...X.XX..XX..X..XX.X.XX..X..X.X.X...X...XX.X..X", "XXXXX..XXXX......X.....XXXX..XX.X...X...XX...XXX..", ".X.XXX.XXXXX.X....X.X..XX.XXXXXXXX..X..XXXXX..X.XX", "X.X.X.XX..X.XX.X.....X.......XXXXX..XX...X..X....X", "XXXXXX.......XX.X.X...X....X..X.XX..XXX...X..XX..X", "XX..X.XX...X.XXX.XXXX.XX.XX.XXX.....XXXX.X.XX...XX", "XXX..X.XXXX.XXX....XXX....X..XX..X..XX.XX.X.XX...X", ".XXXXXX..XX.XXXX..X.X.XX..XX.X.X.XXX..X.X...X..X.X", ".....XX....X.X..X.X.....X.X.XXX.XX.X....X..X.X..X.", "..X...XX......X..X.....X...X.X.XX...X.XX.X..X.XXXX", "..X.XXXXX...X....X.X..XXX..XX...XX..XXXXXXX..X...X", "X.X..XXX.X.XXX.X..X.XX..X..XXX..XXX.X...XX.X.XXX..", "XXXX..XX..XXXX...XX.XX.X.X..XXXX.X...X......XXX.XX", ".XX.XX..X.XX..X.X.XX..X.XX...XX...X..X.X.X..X....X", "X.X..X.X.XXX...XXX..X..XX.X....X...XXX..X.XX.X...X", "X..X.X..XXXXX.XX.XX....XXX.X.X....X.XX..XXX...X.XX", ".X..XXX..X...XXXX.XXXX.XXXX.X...X..XXXX..XX...X..X", "X.X.XXXX........X..XXXXXXXXX.XX..X.XXX.XX.XX..XX.X", "..X..X.XX.X..XX.....X..XXXX.XXXX..X.X.X..XXX....XX", "X....X..XXX....X...XX.....XX...XX...X.....XX.....X", "..X..XX..XXX..X.....XX.X.....X...X.X.X....XXX.XX.X", "X..X.XXXX.XXXXXXX.XX.XXXX.XX..XXX.X.XXXX.XXXXXXXXX"};
    vector<string> cutter = {".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> cake = {};
    vector<string> cutter = {".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> cake = {"X.X..X...XX.XXX...XX.........XXXX.......XX...XX.X.", "...........X.X...............................X....", "..X.......X..........XX.XXX....X....X....XX..X....", "..X....X........X...........X.............X......X", "..X.......X....X...............................X..", ".............X.....X.......XX....X.X..............", ".X..X.....XXX..X...........XX.X.....X..X......XX.X", "X.X.......X..................X....X..X...X.X.X.XX.", "X........X..X.X........X...X.X....................", ".X........X.......X..X...X............X.....X..X.X", "XX...X........XX............X.X...X.XXX.X.X..X..XX", "X..X.X.X..XX........X...........X....X..X........X", "..X............X..XX......................X.XX....", "X...X.....X..X.X........XX........X.........XX....", "..XXX.......X.X.......XX...X...................X.X", "X....X........X...............XX........X...X....X", "...XXX.X........X.....X....X.X.........X..........", "X...X...XXX.....X..XX..X..............X......XX..X", "...XX......X..................X..X...X.X..X.......", "X........X...............X.....XX..X.X....X.......", "......X.........X...X...X.X..X.........X......XX.X", "XXX.....XXX....X.X.........XX..X..X....X.......X..", "X......X...X.....X.......X......XXX....X...X.....X", "................X.....X........X..X........XX.XXX.", "...XX.........X......X..X...XX......X.....X.X....X", "........X......XX.X..XXX......X...................", "....X.....X...XX.......XX...........X......X......", "X.X.....X..X.....XX.......X..X..XX....X......XX..X", "......X....X......X.X......X.X.........X..X.......", ".X.....X...............X.........X....XX.....X....", "X....X..X....XX........XX...X....X........XX...X.X", "...XX...XX..X..X.XX.......X.....X........X.....X..", "....X...................X........X.X...X..X.X....X", "...........X.....X...............X..XX......X....X", "X....X.....XX..X..X....X....X...X..X.......X......", "...X...X...........X.X........X...............X...", "............X..X..X.................X.....X..X.X..", "..X.X.......X.......XX..X....X..X.......XX........", "X....X............X...XX.XXX....X....X..X........X", "....X.XX.........X...X..........X..X...X....X.....", "X.X....X.X......X.........X...............X.......", "..........XX...X......X...X..X.X..X...X.X..X.XX..X", "....X.....X......X...........X.....XX.......X...X.", ".....XX...X.....X......X......X..X................", "X..............XX..X........X.XX........X........X", ".X........X....XX...............XX.............X.X", "X.XX...X...XX..X....XX........X.XX.......X.X.X...X", "X....X.X......X...X.....XX...............X.X.....X", "..X....X............XXX...........................", "XX..X.X.XXX..XXX.XXXXX...XXX.XXX.X.X.XX.X.X.X.X..X"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> cake = {"XXX.X.XXX.XX.XXXXX..XXX.XXXXXX.XXXXXXXXX.XXX.X.XXX", "X..X..XX.X..X.X.X....X..XXXXX.XXXXXX.XX.XXX...XXX.", ".XXX.X.XX..X...XXX..XX.XXXX..X.X.XX.XX.XXXX...XX.X", "X.XXX.XXX.XX..XX.XXXXX...X..X.X.XXXXX..XX....XX..X", ".XXXXX.XX.XX.XX.X.X.X...X.XXXXXXX.XXX.X...XX.....X", "XXX.X.X..XX..X.X.X.XXXX..XXXXX.X.XXXXX.XXXX..XX...", "XX..XX.X.X..X.XXX.XXXX.X.X.XX.X.X.X.XXXXX.X.X.X..X", "X...XXX.XXXXXXX..XXX.XX.X.XXX..X.X.XXXX..X......XX", "...XXXXXXX.XXX....X....X.XXX.XXXX.XX.X..XX.X.....X", "...XXX.XX.XX......X...X.X..XXXX..XX..X...XXXXX..XX", "..XXX.XXXXX..XX..XXXXXXX..XXXX..XX...X...XXXXXXXX.", "XXXXXX.X.XXXXX.XXXXXXXX.XXXX...XX.X.XXX...XXXXX...", "XX.XX.X.XX.X.X.XXXXXX..X..X..XXX....XXX..XXXXX.X..", "X.X.XX.X..X.X.XXXXXX..X....X.XX....XXXXXXXX...XX..", "XX.XX.X.XXXXXXX.XXXX.XXX..X.XXXX..XXXXXXX....XXX.X", "XX.XX...X..XXX.XX.XXXXX.XXXXXXX...XXXXX..XXXXXXXXX", "X.XX...X..XXXXXX.XXXXX.XXXXXXX.X.X.XXX.XXX.XX.XX.X", "XXXXXXXXX..XXXX.XXXXXXXX.XXX...XX.XXX.XX........XX", "X.XXXXXX..XXXX..XXXXXXX.XX....XXXX...XX.X......XXX", ".XXXXXXXX.X.XX.X.XXX.XXXX.X.X..XX...XXXXXX.XX.XX.X", "XXXX.XX..X.XXXX.XXX.XX..XXXX..XXXX.XXXXXXX.XXX..X.", "X.X..X.XX.XXX.XXXXXXX...XXXXXXXXXX.XX..X..X...XX.X", ".XX..X.X..X..X.X.XXXXX..XXXXXX....XX..X..X..XXXXXX", "XXX...X..X....X.XXX.XX..X..XX...XXX.XX..XXXXXX.XXX", "X.X..X.XXX..XXXX.X.XXX....XXXX.XXX..X..XXX.XX.XXXX", ".XX..XXXX.XX..X.XXXXXX.X..XXX.X.XX..X.XX..XXXXXX.X", "XXX.X.X......XXXXX...XX..XXXXX.XXX.X..X..XXXXX....", "XXXX.X.X...X.XXXX....XX.XXX.X.XXXXX...X...XXX.X..X", "XX.X.XXXX...XXXXXXX....X.X.X.XX..XX...X..XX.XX...X", "X.X.XX..X.XXXX.X.XX..XX..X...X..XX.X.XXX........XX", "XXXXX.....XXX.X.XX.XXX..X....XXXXXXXXXX..X...X.XXX", "XXX.X......XXXXXX.XX..XXXXX.X.XXXXXX.XX..XX...X.XX", "XX.X.XXX..XXXXXXX...X.XXX..X.XXX..X.X...X.X.....XX", "XXXXXXX....XXXXX..XX.XX...XX..X..XX...XX.XX..X..XX", "XX.XX.....XXXXXXXXXXXX..XXX...X....X.XX..X.XX..XXX", "X.X...XX..XXXXXXX.XXXX.X.XXX.X...X..XX..X.XX..XXXX", "XX.X..X....X.X.X..XXXXX.X.X.XX.XX....XXXXXXX.XXXX.", "XX.....X..X.X..X.XXXXXXX...X..XXXX...X.XX.X.XXXX.X", "X..X..XXXXXXX.X.XX..XX...XX.XXXXXXX.X.XX.X...XXX.X", "XXX......XXXXX.X...X....X..XX..XX.XXXX...X...X...X", "XX......X.XXX.X.XXX.XX.X...X..XX.XX.....X.X.X.X.XX", "X.XXXXXX.XXX.XXX.XXXXXXXX...XX..XX...XX...X.X.XXXX", ".XX.XX.XXX.X.X..XXXXXXXXX.......XX..X....X.X.XXXX.", "XX.XX...X.X.X..XXX.X..XXXX..XX.XX.XX.X.X.X..X.X...", "X.XXX..X.XXXX.XXX....XXXXXXXXXXXXXXXX.X....X.X....", ".XX.XX..XXXXXX.XX.XX.XX.XXX.X..XX..X..X.X.XXX....X", "X..X..XX.XX.X..XXXX.XX.XXX.X..XX..XX.XXX.XXX...XXX", ".XX.XXX.XX.X..XXX.XX.XX.XXX.XXXX.XXXXX..XXXX.XXXXX", "XX.XXX..XXX...XX.XX.X..XXX.XX....X.XX..XXX.X.XXXXX", "X.XXX..XXXX..XXXXXXX.XXXXXXX..X.X.XXXXXXX.X.XXXXXX"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> cake = {"XX.XX..X.XX.XXX.XXXX..XXXX.XX..X..XXX..XX.XXXXXXXX", "X.XX..X..X.XXX.X.XX..XX.X.XX..X....X..XX...X.X..XX", "X.X.XX..XXX.XXX.XXXXX..XXXXXXXXX....X.XX..X.X..X.X", ".X.XX.XXXX.X.XXXXXXX.XXXXXXXXXXXX....XXXXXXXXX..XX", "XXXXXXXXX...XXXX.X.X.XX.XXX.X...XX.X..XXXXXXX.X...", "XXXXXXXX..XX..X.X...XX.XXX......X.X..X.X.XX.XX...X", "XXX.XXX.XXX...XXX..XXX.XXX.X.X.X.X....X..X.X.XXXXX", "X..X.X.XX.XX..XXX.X.X.XX.XX.XX.X....XXX.XX...XXXXX", "..X..X.X.XXX.X.XXX.XX.X.XXXX..X..X.XXXXXX.X.XXXXXX", ".XX.X.X..XXXX..X..X..XXXXXX.XXX.X.XXXX.X..XXXXXXXX", "XX.XXX...XXX..X..X.X.XXXXX...XXXXXXXX.X...XXX.XXXX", "X.XX.XX.X...XX.X.XX.XXX.....XX.....XXXXX.XXX..XXXX", "XXX.XXXX..XX.....XXX.X..X.XX.......X.XXXXXXX..XXX.", "XXXX.XX.XX..X...XXX.X.XX..X.X.XXX.X.XXXXX.XX.XX..X", "XXX..XXX...XX.X.XXX..XXX.X.X..XXXXXXX.X.....XX....", "XXX..X..X.XXXX.XXX.X..X.X.X.....X.XX.X.X...X.X...X", "XXX.X.X..XXXX.X.XX.....XX......X.XX.XXXXXXX.X.XX.X", "XX.X.X..XXXX...X.....X...X.XXXXX.X.XXXXX.XX..XX..X", "X....XXXXXXX.XX.X..XX..XXXX.XXX.X..X.XX.X..XXXX.XX", "X.X.X.XXX..X..XXXXXXX.XXXX.XXXXX..X.XXXX.XX.X..XXX", "XXX..XXX..X..XXX.XXX.XX..XXXXXXXXXXXX..XXX.X..XXX.", "XX..XX.XXXXXX.X.X.XXXX..XXXX.X...XXX..XXXXXX.XXX..", "XX.XX..XXXXX.X...XXXXXXX........X.X..XXXXXX.XXXX.X", "X.XX...XX.X.X..XXXXXXX....X.X....X...X.XXXXXXXXXX.", ".X....X....XXX...XXXX.X.XXXX...X..X.X....XXXXXXX..", "X.X..X.X.X..X...XXXX.X.X.X.XXXX..XXXX....XXXXX.X..", "X.X.XX.X....XX.XXXX..XX.X..XXXXXXX...XX.XX..X.XX.X", ".XXXX.X.XX.XX.X.XXX.X.XXX.XXX.X.X...XXXX....XXXXXX", "XXXX.XXXX.XXXX.XXXXX.X.X.XXX.X.XXXXXX.X.XX.X.XXX.X", "XXX.XXX..XXXXXXX..XXX.X..XXXXXXX.XX...XX.X..X.X.XX", "XXX..X.XXXX.XXX.....XXX.XXXX.X..XX.X....X.X..XX.XX", "XX..XXX.X..X..XX....XXX..XX.X.XXXX.X..XXX..X.X.X..", "XXXXXX...X...X.XXX..XX..X.XXXXXXX.XXXXXX.XX.XXX..X", "XX.X.X..X.XX...XXX.XX.X..XXXXX.XXXXXX.X.XXXX.XX..X", "X.X.X....XX....XXXX..X.XX.XXX.X.XXXX.X..X.X..X..XX", "X.XX.X..XXX...XX.X...X...X.XXX.XXXXX.X...XX.XXXXX.", ".XXXXXXXXX..X.X.XX.....X..X..X.XX.X..X.XXXXXXXXX.X", "XXXXXXXX..XX.XXX.XX.XXX.X.....XX.X..XX.X.XX.XX..XX", "XXX.XXX.XX.X.XX..XX.XXXX.XX.XX..X.X.X.X.XX.XX...XX", "XX.XXXXXX.X...X.XX.XXXXXX.XXX..XX..X.XXXXX.X.X..XX", "XX.XXXXXXXX...X.XX...X.X.XXXX..X.XX.XX.XX.X.XX.X.X", "X.XXX.XXXXXX...XX...X.XX.XXX..XXX.XXX..X..XXXXX.XX", "XXXX.XX..X...X.X.X.XXXX....XXXXX.XXXX.X...XXX.XX.X", "XXXX....X..XX.X...XX.XX...XX.XXXXXXXXXXX...X.XX..X", "X.X..X.XX...XX..X.X.XXXXX.X.XXXX.XXXXX.X..XXXXX.XX", ".XX...X....X..X..X.....X..X.XX....XXX.X.X.X.XX....", "XX......X.X.X..XX.....XX...X..X..XXXX..X.X..X....X", "XXX..X.X.XXX.XX.X..XX..X.XX..XX.XXXX.XXXXX.XXX.XXX", "XXXXXX..XX.XXX....XX..XXXXX.XX..XXXXX.....XXX.XXXX", "XXXXX..XX.XXXX.XXXXXXXXXXXXXXX.XXXXX.....XXXXXXXXX"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> cake = {"X.XX....X.X...X..XX.X...X..XX.X...XXX.X..XX...X..X", ".............X...X.................X.............X", "..X.XX....X...X.........X.....X...........XX..X...", "X..X..........X......X.X...X....X.....XX..........", ".........X.....X...XX.X..X...X..X...X..........X..", "...X...X..............X....X.X...........X.....X..", "X........X......X........XX..X.X.X................", "X..X..X.X............X.........X.X...X....X....X..", "X.XXX....X.......X....X...X........X..........XX.X", "..X....X...X.XX..X..X.XXX.....X.....X.....X..X..XX", "...X.X....X........X............X.X.......X.X....X", "..X.X.........X....X.....X..................X....X", "..X...X...X.........X.....XXXX...X.X.XX.......X...", "......................X.X....XX........X.X.......X", "..X....X.....X.........................XX.....XXXX", "..X...X...................X........X..X..X........", ".....X...X..X....X..................X..XX.........", ".X.X....X..X....X..........XX.............X..X.X..", "X.......X....X.........X.X......X..X...X.........X", "X....X.X..X..X.....XX.......X....X.X.....XX.X..X..", "X..X........X..X......X....X.............X...XX...", "X.....X...X..XX......XX.........X..X..........X..X", "....X..XX..X..XXXX....X.......X..........X........", "X........XX..............X.........X......X......X", "X...X..X.X.X.................X..X.....X..X....XX..", "....XX.......X..............X.XX......X.X.........", "......X.X.............X..X...X....X...X....X......", "......X.......X.....XXX............X...X...XX....X", ".....X.......XXX.X..X.........X......XXX..XXXX.X..", ".....X.........XX....X....X..X.XX..X....X.........", "X.......X........X........X.XXX...............XX.X", "X.X.......XXX....X..XX......X.....XX.X..X.X....X.X", "..............X...XX...X.....XXX....X.............", "..X...........X..X.....X..........X..X...X..X.....", "X........X...XXX...XX....X....X.....X.......X..X.X", "..X..X..........X..X.............X......XX..X.X...", "....XXX.........X...X........X.X............X....X", "....X.......X...X...XX.X.X...................XXX.X", "...X.......XXX.XX..............X.X..X..X.X...XX..X", "X...X..X......X.X.......X......X.X....XX....X.....", "...X.X............X...X...X......X..X....X....X..X", "X.....XXX....X......X..X....X....X......X.....X..X", ".......X..........X..XX.....X.X.....X...X.........", "X........X...X........X.......X..X...X...X.X..X..X", "X.X.X........X..........X........X...X............", "X.....X...........XX..XX..........X.XX...........X", "..........X............X...X.X........X....XX.....", "..X.......X....X......X..X....X.......X..X.......X", "............................X........X.......X....", ".X.....X.XXX.....X...XX.X.XX.X......X...XX..X....X"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> cake = {".X.XXXXX.X.X....XX.X.XXX.X.X....XXX.X..X.XXX.X.XXX", ".X.X.X.XXXXXX.X.XX.X.XXX.....X.XXXXXXX.X.XXXX....X", ".....X.....X....XX....X....X....XX.....X..X..X..X.", "........X.............X.........X....X.....X.....X", ".....X..X.XX.X.XXXX.X.........XXXX.....X..X.XX....", "........X.........X.X.X.XXXXX.X.X....X.....X.....X", "....XXXX.X......X..X.X............X.X.............", ".X.....XXXXXX.X..X.....X.X..X..X.....X.X.........X", "X.....X..X......X.................X.....X.........", "XXX....X.........X..........X..X......X.X.....X.XX", "X.....X..X.....XXXX.X..X.X.....X.XX....XXXXXX....X", "................X.X..X..X.XX....XX.X..X.........XX", "X.X.X.X..X..X..........X..X.X.....X..X.XX........X", ".........X.....X................X.....X......X..X.", ".X.X....X....X.........X......X.X.X.....X....X....", "XXXX.X.............X........X.X.X.X.X.X.XXXXXXX.X.", ".X.....XX.....X.X.X.X.X.X.........X......X..X.X.X.", "X....XX.X.X.X.....X........XX.....X..X.X.....X..X.", "XX........XX....X.........X.X.....X..X.X.X.....XXX", "X....X.........X.XX........XX.....X..........X..X.", "X....X....XX.X.XX....X....XX....XXX.X.....X.....X.", "X.X.XX.....X.XXXX.X.........X.X.X.X.X............X", "X.X..X......X.XX.....X.....X....XX........X.X.....", "....XXXXX.....X.....X.X.....X....................X", ".X.....................X....X.X.X............X.X.X", ".X.X....X.....X..X.XXX.X.........X.X..X..X.....XXX", ".X..X.XXXXX.........X.XXX.....X.....X.........X.XX", "X.X.....X.X.....XXX.X..X.....XX.X.X.X.X.........X.", ".X.XXX....X.X.X.....X..X.X.X..X..X..X.X....XX....X", "X.....X.........XX................X.....X..X.X....", ".X..X.....................XXX.X..X.........XXX....", "X.....X.....X.X.XX.X.X............XX.X.XX....X.X.X", "XX....X.X..........X.XX....X............XX........", "....X.X.....X.....X..X.X....XXX.X..X.........X....", "X....X........X.....X.XX.X.X........X....X........", "............X.....X.............X........X.X.X....", "X.X.XX........X.........X.XX.X.X.X..X..X.XXX.X..X.", ".....X.X........X.....X..X.X....X.X.XX.....X.....X", "....XX........X.X.XX.X.....X....XXX.....X.XX....XX", ".X.XX.X..X.X.X.XX.....X.....XXX.X..........X.....X", "....X....X.....X.X....XX.X.XX.X......X..X..X.....X", "....X........X....XXX.X.X.X..X..X......X..X..X.XXX", "....X....XXXX....X........X....X....X.X.X........X", "....XX.X.....X........XX.X.X....X....X.X..X.....XX", "....XX.X......X.XXX.X.....X.....X..X......X.....XX", "XX.....X.XXXXXXXXX....X....XX.........X.XXXXX.X.XX", "X............X.........X.....X............X.....X.", "XX............XX.....X..X..X......X.....X........X", "X........XXXXX.....X.X.X.....X.X.XX.X.X.X.X.X.X.X.", "XXXXXXX.X.....XX.....X.XXX.X..X.X.X..X.XX........X"};
    vector<string> cutter = {".X.", "XXX", ".X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> cake = {".....X.XXXXXX.X.X....XX.X.XXXX.X..X.X....XXXXXX.X.", "XX....X.....X.XXXX.X.....XXXXX.X.....X....XXX.X.XX", "........X............X.........X.........XX.....X.", "XX....X........XX........X.....X.....X....XX....XX", "X............X.X.X.X.....X....XXXX.X..X..X......X.", ".X.XX.....X.....X.X.....XX....X.X.........X....XXX", "X....X.............X..X..X.XX.........X..X..X.....", "....X.....X.X.....X......X.XXX............X.X.X.X.", "XX.X.XX.X.........XX........X........X.........X.X", "....XX.....X.........XXX....XX.X......X.....XX....", "XX....X....X.....X.X....X.X..X..X..X.X.....X.....X", "....XX.....X..X.XX....XXX.X.X.X.X.....X.....XX....", ".X.........X........XXXX.....X..X..X..X..X.XX....X", "X....X.X.....X.X.XX.X......X..X..X..X.X.X.........", ".X.X....XX.X..X.................XX.X..X.....X....X", "XX.X.........X................X.........X......X.X", "....X.........X..X.X....X.X.....X....XXXX.X.X....X", "........XXX.....X.....X.X.X........X....X.X.XX....", "....X.....X..X.....XXXXXX.....X.....X.X..X.X....XX", ".....X.X.X.....XX.X.XX....XX.X.X....X........X....", "....X....XX........XX.........X.................XX", "XX....X........X....XX.X.XXX....X....X.X.X........", "....XX.X.XX....X.X.XX.............X..X.X....XXX.X.", "XX....X....................X....X....XX.....X.....", "X.........X..X.....XXXXXXX.X.....XX....X.X......X.", ".....X.X.X......X.X........X.X.X....XXX.....X.....", "X.........X.XX............XX.X..................X.", ".....X..........X..X.X.X.XX....X.X..X..X.XX.X.....", ".X.X....XX.X.....X........X.........X.X....XXXX.X.", "XXX.X.X.....X.............X.X.X.X.X.X..X.........X", "........X.....X......X.XXXX.X.XXXX....XX.X..X.....", ".X..X.....X.X..X.X....................XXX........X", "X............XXX.........X.XX.........X..X..X.....", ".X..X......X..X.X........X.....X.X.........X.X....", "XX.X.....X.X.X.....X..X.....X.....X..........X..X.", "XXX.X.X.X..X..X.....X.....X.X.....X.XX............", "XXX.X.XXXXX.X......X.X.X..X..X.........X.....X..X.", "....XX....XXX.X.....X.................X.XX........", "XX....X.....X..........X.XXX.X......X.X.....X.X.X.", "....X....................X.X.X.....X.........X....", "XX.X.XX....XXX.........X.........X....X.....X.....", "....X............X.................X......X.XXX.X.", "XX....XX....XX.X.X.X.X.X.........X....XXX........X", "....XX....XX....XX....X.X.....X.X..X.........X....", "XX....XX....X....X....X....X.X.XXXX.X..X......X.XX", "....XXX....X....XX.X.X.X..X..X..X.XXX........X.X.X", "....XX.....X.....XX.................X.............", ".....X.....XX....X.....X..X.....X................X", "....XX.....X.X.X.XXX.X.XXXX.X.X....XXXX.X.........", "XXXX.X..X.XXXX.X.X....XXXXXXX.X.X....X.X.........X"};
    vector<string> cutter = {".X.", "XXX", ".X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> cake = {"X.XX.XXX.XXXXX.XX.XXXXX.XX..XX..XXXX..XXXXXX.XX..X", ".X..X...X...X.X..X...X............X.....XX..X.....", "X.XX...........XX...........XX.....X...X.....X...X", "X..XX....X...X..XXX..XX....X..XX....XX..X...X...XX", "........X.X.X..X.XX..XX.........X.......X..XX...XX", "X......X...X.XX..X.....X.........X.........XXX.XXX", "X..X..XX......X.X.X..XX......X....X..X.X.....XX..X", ".....XX........X..XXX...X...X.......X...X.........", "X......X..XX..X..X........XX.......X.....X...XX..X", "X.......X..XXX.X.......X.X........XXX.....X...XXXX", "......X.....XX..X....X..X............X.........X.X", "X....X.....XX....X.......X.................X..X...", "X.........XX....X...X...X.......X...X.......XX....", ".X...X...XX.....X....XXXX........X..X...X.....X..X", "X.XXX...X.X....X......XXX...X..X.....X.X....X..X.X", "X..XX......X....XX.......X...XX.X............XX.X.", "....X..X...X....X..X.......X.XX..X.........X.X...X", "X....X.XX.X....X.....X...XX....X...XX...XX..X....X", "X..X...XXX......X...X.X.XX......X.X.XX....X.X....X", "......X...X........X..XX..X.....XX..XX...X...X....", "............XX.......X...........X...XX..X........", "X.X....X.....XXXX..XX............X....X..........X", "XX......XX.....XXXX...X..XX..X..X....X....X.X....X", "X........XX......X.....XXXX.X.X...X...XX.XX.XX....", "X...X.....XXX...X......XX..X...X....X.XX.X...X....", ".X...X....XX..XX.....................XX..........X", "X.....XX.XX....X....X......X.........X......X...XX", "X....X..XX......X....X....XX.....X....X...X..X...X", "....X............X.......XX......XX.X..XX.........", "...X....XX..X....XX.....X.......X..X.X.X.........X", "X.X.....XX.XX.....XX..........X.......XX...X....XX", "XXX....X..X.......X....XX....X..X...X..XX.XX.....X", "XX...XX.X..X...X......XX.......X...X..X...X.......", "XX...XX..X..X.XX.....X.......X.......X........X...", "X.X..X.....X...X......X...XXX...X...X..X...X...X.X", ".........XX.....X.......XX..X.....XX....X.X......X", "......X..XX.X..XXX.....X...........XX....X......X.", "X..X.XX....X..XX..X..X..X....X.X...XX.........XX.X", "X...XX....X..X.....XX.X..X..X...X............XX..X", "X.....X..XX.X.....XXX..X...X...........X....XX....", "X......XXX.......X...X..XXX......X..X...X...XX...X", "......X..X............X..XX..............X.X..X..X", "...X......X.X...X...X.....X..........X..XX..X.....", "X.XX......XX...X..XX.X.....X......X...XXX.X..XX...", "XX.....X...X.....X....XX....X....X.....X...XX..X.X", "X.....X....XX..X............XX..X..X.............X", "X...X..X....XX..XXX..........X.X....X......X......", ".X...X..........XX..XX..........X.......X...X.....", "X..X..X.X...X...X....XX.........XX..X..X.........X", "XXX.XXXX.XXXXX.XXX..XXXX..XXX..XXXXX.XXXX..XX..XXX"};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> cake = {};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> cake = {"XXX..XXXX.XX.XX..XXX..XX..XX.XX..XXXX..XX..XXXX.XX", "XX.....X....X...............X................X...X", "XXX..........XX.......X...XX..X..................X", "X..XX...X..X.XX.X...XX...X.X...XXX............X..X", "....XX.X..X....X...X.X...........XX.......X..XX...", "X....XX...............X............X...XXX..XX....", "X......X......XX........X...X.....X.X.X....X..X..X", ".X....X.......XX..XX......XX..X..X...X.........XXX", "X.XXX...........X...X......XXX..X.....X...X....XXX", "X..X...........X.....X.X.....XXX..X..X.X.XX...X..X", ".......X......XX.....XX..........X.XXX..XX...X....", "X..XX..XXX...XX.....X...............X...X.....X..X", "X..XX.X..XX.X..X..XX......X.XX..X........X.....X.X", "....X...X..X..X..XX.....X..XXX.XXX..XX....XX......", "X....X.X....XX..X........X.X..X..XXX......X...X...", "X..X...XX...X..X.X.....X..X.....X........X.....X.X", ".X....X..X.......XX..X..XXX...X...X.....XXX...X..X", "X.X.....X..X......X...XXX..X.X.X.X.XX.....XX......", "X.X....X..X.XX........XX....XX..XX..XX...X........", ".X.X.....X....X..XX..XXX......X.X....X..X..X.....X", "X..XX...X......XXX.XX...X......X....X.......X....X", "X.X..X.XX.X..XX.X........X....X....XX...X...X....X", "X.....X..X...X.........XX....X....XX...X.X.X......", ".................X..X..XX...X..X...X......XX......", "...X.X...XX..XX.XXXX....X..XX.......X.....XX..X..X", "X.X..XX...XX..XXX.XX.....X......X...X.....X....X.X", "XX....X........X.......X........XX............X..X", "XXX....X..XX..X.......X......X...X...X.....X.X..X.", "X..X....XX..XX.X...X.X......XX...X..XX.X....X....X", "....X...X.......X.X...X...X.XXX.X...XXX..........X", "X..X...X.X.......X..X....X.X..XX......X.X....X....", "X.X.......XX......XX............X........XX...X...", ".X............X...XX......X...XX.XXX...X.........X", "X..X..X...X...X..XX.....XX.XX.XX.XXXX............X", "X.X.X..XX..X...X...X...X.X.X....X.......X..XXX...X", ".X...X...........X....X...X.............XXX..XX.X.", "X..X.......X...X..X.....X..XX..X.X...X.X......X..X", "X...X....X.XX...X.X....X.X.XX...X...X.X..X.....X.X", "........X.X...X..X....X...X...........XXX..X.....X", "X..X...XX.......XX...X..X..X.......X.X....X.....X.", "XXX...XX.........X..X.XX..X........XX.......X....X", "XX....X......X....X....X......X.....XX...X.X.....X", "XXX..X.X...X.XX....X.......X.X..X.....X.X...XX...X", "X.XXX...XXX.XX.....X.......XX....X.....X....XX..X.", "...X.....XX.X.......X.....X.XX...XX...XX...XX....X", "........X..X....X.X.....XX...XX.X....XX.X...X...XX", "X.....XX..X....XXX......XX....XX.....XX......X.X.X", "X....X...X.......X.....X..X..X..XX.....X......X...", "....X.....XX.........XX....XX....XX......X........", "X..XXX..XXXXXXX..XX.XXXX..XXXX..XXXX..XXX.XX..XX.X"};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> cake = {"XXX..XX..XX..XX..XX..XX..XX..XX..XX..XX..XX..XX..X", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "X.................................................", ".................................................X", ".................................................X", "X.................................................", "XXX..XX..XX..XX..XX..XX..XX..XX..XX..XX..XX..XX..X"};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> cake = {};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> cake = {"X.XX.XXXXX..XX.XXX.XX..XX.XXXXXX..XX.XX.XXXX.XXX.X", ".X..X...X.....X...X......X..XX......X..X..X...X...", "X.XX.....X..XX......X..X...X......XX..X..X........", "X.XX.X...XX.XX.......X..X...X....XX..X..X.XX.....X", ".X....X.X..X..X..X....X.....XX.........X..XX....XX", "X.X......XX.X..X..X....X.....XX......X......X..X.X", "X.XX.....X...X..........X...X.X..X..X......X..X...", ".X..XX..X.....X...XX...X.X.X...X....X...X..X......", "X..X..XXXX..X..X..XX..X...X............XX.X....X.X", "XX.....X..XX.X..........X.......X......XX..XX...XX", "X.............X........X.X....XX.XXX.....X.X.....X", "X...X..X.......X..X...X.......XX..XX......X......X", "X..X..X..XX..XX....X.X.....X.X............X.....X.", "..........X.XXX.......XX..XXX.....X...X....X..X..X", "...........X..XX..X....X.XXX.....XXX..XX...XXX..XX", "X.....X...X..X..XX......X...X...X..X...XX...X..X.X", "X....X.X.X............X.......XX.......XX....X...X", "XX..XX..X........X...X..X....X..X..XX...XX.X..X.X.", "X.XX.........XX..XX.X..X.X.......XX......XX.X..X.X", "..............X.X....XX..X.......X.......XX...X..X", "........X......X.....XX.X....XX.XXX...X.X..X....X.", "X..X.....X.X..X..X...XX...X.X..XX.XX...X..X....X.X", "X.X..X....X..X....X.X....X.........X...X.X.....X.X", "X...X...X...X....X...X...X.X...X....X..XX.....X.X.", ".X.......X.X..X......XX.XX..X.XXX..X....XX...XX..X", "X..X....X...X.........XX..X..X..XX..X...XX..XX.X.X", "X...X..X.....X.............XX.....X.X..XX...XX..XX", ".....X........X.......X....XXX.....X...XX...X.X..X", "X...X...............X..X..X..XX....X.....X.XX.....", "XX.X..X...X......X.......X..X.......X.....X..X....", "XX..X..X.X.X.X..XX........X........X..X....X.....X", "X......XX..XX.X.XX....X......X..XX...X...X..X....X", "X.......X...X..X.X.....X.X...X..X...X..X..XX.X..XX", "XX.....X.....X....X......XX.X........XX.XXX...XX.X", "XX......X..X..X.X...X......XX...XX..X.X..XX...X...", "XX....X..X..X..X.X...XX...X....XXXXX.........X....", "X...X..X..X...X..X...XX..X.....X..XX.X........X..X", "X....X.......X....X.XX.....X........X.X..X..XX.XXX", "X..XX........X....X..XX...X...X....X........XX.XXX", "...X..X..XX...X........X.......X..X...........X..X", ".......XX...X..X..............X........XX...XX....", "X.X...X......XXX...X....X.XX.XXX...X..X..X..XXX...", "X.XX.X.X...X.XXXX...X..X..XXXX..XXX.X..X...X...X.X", ".X..XX..XX..X...X....XX..........X...X....X.....XX", "X.....X.X...........XXXX....................X....X", "X......XX.......XX.XX..XXX....X.X...X........X....", ".X.....XX......X..XX....X......X...XX...XX....X..X", "X........X.............................X..X..X...X", "X......X...X..X............XX..X...........XX.....", "XX..XXX.XXX.XX.XXXX..XX..XXXXXX.XXXX..XX..XXXXX..X"};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> cake = {"X.XX..XXX.XXX..XXXX..XX.XX.XXXX..XX.XX..XXX..XXXXX", ".X.......X......X......X....X......X...........XXX", "X......X.......X......X.X.........X...........X..X", "X....XX........X...X.X..XX.....X.......X...XX.....", "X....XX.........X...X..X.X.X..XX...X..X.X..X......", "....X.....XX...XX....XX...X.XX..X.X..X....X....X.X", "...X......X.X.XXX...XX...........X.......X.XX.XX.X", "X..XX....X...X...X..X............XX...X.XX..XXX.X.", "X....X.............X......X...X.X.XX...XX....X...X", "X.................X..X.....X...X..XX.....X.......X", "X...X.....X...........X...X....X.X.XX.......X....X", ".X.........X...X..X....X...X...XX...XX.......X..X.", "X.............XXXX.X.....X....X.........X...X....X", "X....X.X......X.X.........X.X...X........X.XX...XX", "....X...X.X..X............X..X.X..X.......X.XX...X", ".........XX..X...X..X.........X..X...........X....", "X..X....XX....X.XX.X..X..X.....X..X...X..X...X...X", "X.X.X..X.......XX.X..X.XXX......X..X.X.XX...X...XX", ".X...X..........X...X...X......X.XX.XX...........X", "X.....X.X..XX..X.X.X........X.X..XX.............X.", "XX.....X.XX..XX...XXXX..XX..XX..........X......X.X", "X.X...............X..XX.XX.X..X.......XX......X..X", "...X.........X...X.....X..X..X.X.......XX..X......", "....X.....XXX...X.X..X.....XX..XX..X....XXX.......", "X........XXX.......XX.X....X..X..XX....X...X..X..X", "XX...X..X...X..X...X...X..X.X...X..............X.X", "XX..XX........XX..X.....X....X.X..X...X.........XX", "X.X.X........X..X..X..X.......X....XXX..X......XXX", "X..XX......X...X..X....X.X..X..X...X..XX......X..X", ".X.X........X.X..X.......XX..X..X.X......X..X.....", "X.X....X...XX...X..X....X..X...X..XX......XX......", "X..X....X......X..X...X..XX...X....X..X..XX......X", "....X..........X.......XX................X.....X.X", "...X....X..XX.........X...........X...........X..X", "X........X.XX......X.X.......X...X...X....X.......", "X.X.......XXX...X...X...........XX....X..X........", "X..XX....XX.XX.X.........X......X...XX..X.....X..X", ".X...X..XX...X..X..X......XXX..........X.......X.X", "X.......XX.......X..X......XX..X.................X", "XX.......XX.....X.....X...X..X..X.XX..XX...X......", "XXX.....XX..X..X.......XXX.XX.XX.XX..XXX..X.X.....", "X......XX..........X....XX.XX.XX........X........X", "......XXX..........XX..X..X..X...................X", "X....XX..X..X..XX...XX..X..X..XX..XXX....X......X.", "X..........X...XX...X.X..X..X.X..XX..X..X......X.X", "......X..X.........XX..X..X..X............X...X..X", "...X...XX...X......X....X....X...XX........XXX....", "X.............XX.........X......XX...X.....X..X..X", "X..............XX......X.XX.X...X.....XX.......XXX", "XX..XXX..XXX..XXXX..XXX.XXXXXX.XXX..XXXXX.XX..XXX."};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> cake = {"X.XXXX..XXXXXX.XXXX..XXX.XX....XX..XXXX...XX..XX..", "XX......XXX.X...X.....X.X......X.....X.........X.X", "X.......XX.......X...XX...X...XX.X..X....XX.......", "XX.....XX....X..X..XXX.....XX...X.....X..X...XX..X", "X...X..........XX.X.X....X.X.........X..X.....X.XX", "X...X...........XX......X.X......X....XX.XX....X.X", "X..XX..X..X.X...XX.X...XX..............X..XX......", ".X.X....XX........X..XXX..X..XX.......X....X....X.", "XXXX..XXX...........X......X..XX......XX..XXX.X..X", "X.X.X..X.......X...X...................X..X......X", ".X..X..........X.XXXX...X.X...X....X..X..........X", "X..X....X..X..X.X.X..X...X.X.XXX.....XX...XX.X.XXX", "X.X..X.XXXX.XX.....X........X..XX......X.XX...X.XX", ".X....XX.XX.X....X..XXX...X...X.X...............XX", "X..........X.........XX.XX...X...X.X..X......X...X", "X.X......X.....XX........X..X.X....XX..X..XXXX...X", "XX.X....XX...X.X......X........X..X......XX..XX..X", ".X..X..X..X...XX..X.....X....X...X.X...........XX.", "X....XX.X...X.X....X.......X..X.X...X............X", "X.X..X...XX..XXX..XX..........XX..X.XX......XX...X", ".X.........X.XXX.XX.X..X.X.....XXX..........XX....", "X...X....X..XX..XX...XX...X...X.X.......X..X..X...", ".....XX...XXX.X............X.X...X....X........X.X", "X.........XXX...X....X....X..........X..........XX", "XX.......X...X.X..XXX.X..XX....X......XX.........X", ".X....X.......X........X..XX....XX..XX..XX..X....X", "X.............XX..X...X..X.XXX...XXX....XX...XX.X.", "XX.............X..XX.XX.X..XXX.X..XXX..X..X...XX.X", "X..X......X...X......X....X...X......X..X....X...X", "............XX.X........X......X.........XXX......", "X.....X....X....XXX.....XX.X..X.XX........X.X....X", "..X...X..X..X...XX.....X.X...X...XX.......X.....XX", ".....X....X..X..........X.........X...X....X...X.X", "X..XX.....X.........XXX..X...X.....XX....XX..XX...", "X.XX.X........X..XXX...X..X.X.......XX...X..X.....", "...X..X.X..X..XX.XX........X.......X..X.X..X..X..X", "....X......X.X..X.....X.........X.X....XX...XX...X", "X..X.XX...X...XX.....XX...X....X...X.....X.X......", "X.X..XX.......X.XX...X.X.XX........X.............X", "X........XX......XX.X....X.X...XX.X...X.......XX.X", "...X....XX...X.....X....X.X.XX.XXXX...X..X...XX.XX", ".....X.......X..........X...XX.X...X..........X..X", "X.....X.X.X...X....X.......X..X......X.XXXX....X.X", "X.....XX...XX....XX............XX..X..XXX..X.XX.XX", ".....X.X...X......X...X..X.X....XXX.XXX......XX.XX", "X...X..XX.X......X.X.X..X.........X.XX...........X", "XX....X.X..X.................X..XX.X......X......X", "X...........................X..XX........X......XX", ".X...X.X..X......X...X.....X..XX.....X.XX..X..X.XX", "X.XXX.XXXXXX..X.X.XXX.XX..XXXX.XX..XX.XXXXX.XX.XXX"};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> cake = {};
    vector<string> cutter = {".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> cake = {};
    vector<string> cutter = {".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> cake = {".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX."};
    vector<string> cutter = {".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> cake = {".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX.", ".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX."};
    vector<string> cutter = {".XX.XX.XX..XXX.XXXXXXXXXXXX...XXX.XXXXXXXXXX..XXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> cake = {};
    vector<string> cutter = {".X......................."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> cake = {};
    vector<string> cutter = {".X......................."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> cake = {};
    vector<string> cutter = {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX", "X.XXXXXX.XXXXXXXXXXXX.XXXXX.XXXXXXXXX.XXX.XXXXXXXX", "X.XXXX.X.XXXXXXXXXXXX.XXXXX.XXXXXXXXX.XXX.XXXXXX.X", "X.XXXX...XXXXXXXXXXXX.XXXXX.XXXX.XXXX.XXX.XXXXXX.X", "X.XXXX...XXXXXXXXXXXX.XXXXX.XXXX.XXXX.XXX.X.XXXX.X", "X.XXXX...XXXXXXXXXXXX.XXXXX.XXXX.XXXX.XXX.X.XXXX.X", "X.XXXX...XXXXXXXXXXXX.XXXXX.XXXX.XXXX.XXX.X.XXXX.X", "X.XXXX...XXXXXXXXXXXX.XXXXX.XXXX.XXXX.XXX...XXXX.X", "..XXXX...XXXXXXXXXXXX.XXXXX.XXXX.XXXX.XXX...XXXX.X", "..XXXX...XXXXXXXXXXXX.XXXXX.XXXX.XXXX.XXX....XXX.X", "..XXXX...XX.XXXXXXXXX.XXXXX.XXXX.XXXX.XXX....XXX.X", "..XXXX...XX.XXXXXXX.X.XXXXX.XXXX.XXXX.XXX....XXX.X", "..XX.X...XX.XXXXXXX.X.XXXXX.XXXX.XXXX.XX.....XXX..", "..XX.X...XX.XXXXXXX.X.XXXXX.XXXX.XXXX.XX.....XXX..", "..XX.X...XX.XXX.XXX.X.XXXXX.XXXX.XXXX.XX.....XXX..", "..XX.X...XX.XXX.XXX.X.X.XXX.XXXX.XXXX.XX.....XXX..", "..XX.X...XX.XXX.XXX.X.X.XXX.XXXX.XXXX.XX.....XXX..", "..XX.X...XX.XXX.XX..X.X.XXX.XXX..XXXX..X.....XXX..", "..XX.X...XX.XXX.X...X.X.XXX.XXX..XXXX..X.....XXX..", "..XX.X...X..XXX.X...X.X.XXX.XXX..XXXX..X.....XX...", "...X.X...X..XXX.X...X.X.XXX.XXX..XXXX..X.....XX...", "...X.X...X..XXX.X...X.X.XXX.XXX..XXXX..X.....XX...", "...X.X...X..XXX.X...X.X.XXX.XXX...XXX..X.....XX...", "...X.X..XX..XXX.X...X.X.XXX.XXX...XXX..X.....XX...", "...X.X..XX..XXX.X...X.X.XXX.XXX...XXX..X.....XX...", "...X.X..XX..XXX.X...X.X.XXXXXXX...XXX..X.....XX...", ".X.X.X..XX..XXX.X...XXX.XXXXXXX...XXXX.X.X...XX...", ".X.X.XX.XX..XXX.X...XXX.XXXXXXX...XXXX.X.X...XX.X.", ".X.X.XXXXX..XXX.X...XXX.XXXXXXX.X.XXXX.X.X...XX.X.", ".X.X.XXXXX..XXX.X...XXX.XXXXXXX.X.XXXX.X.X.X.XX.X.", ".X.X..XXXX..XXX.X...XXX.XXXXXXX.X.XXXX.X.X.X.XX.X.", ".X.X.XXXXX..XXX.X...XXX.XXXXXXX.X.XXXX.X.X.X.XX.X.", ".X.X.XXXXX..XXX.X...XXX.XXXXXXX.X.XXXX.X.XXX.XX.X.", "XX.X.XXXXX..XXX.X...XXX.XXXXXXX.X.XXXX.X.XXX.XX.X.", "XX.X.XXXXX..XXX.X...XXX.XXXXXXX.X.XXXX.X.XXXXXX.X.", "XX.X.XXXXX.XXXX.X...XXX.XXXXXXX.X.XXXX.X.XXXXXX.X.", "XX.X.XXXXX.XXXX.X..XXXX.XXXXXXX.X.XXXX.X.XXXXXX.X.", "XX.XXXXXXX.XXXX.X..XXXX.XXXXXXX.X.XXXX.XXXXXXXX.XX", "XX.XXXXXXX.XXXX.X..XXXX.XXXXXXX.X.XXXX.XXXXXXXX.XX", "XX.XXXXXXX.XXXXXX..XXXX.XXXXXXX.X.XXXX.XXXXXXXX.XX", "XX.XXXXXXX.XXXXXX..XXXXXXXXXXXX.X.XXXX.XXXXXXXX.XX", "XX.XXXXXXX.XXXXXX..XXXXXXXXXXXX.X.XXXX.XXXXXXXX.XX", "XX.XXXXXXX.XXXXXX.XXXXXXXXXXXXXXX.XXXXXXXXXXXXX.XX", "XX.XXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX.XX", "XX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> cake = {"........X..............X.......X..................", "...........X..................X..........X...X....", ".X.....XX........X.X......X......X................", "X..........X....X..........X.X................XX..", "X.....X............XX....X.X.X....................", "......X...............X....X.X..X.......X....X....", "..X......X....XX.X..XX..X.....................XX..", ".X...X...............................X...X....X...", "....................................X............X", "............................X........X......XX....", "X.....X...................X............X.......X.X", ".X.....X.......XX..........X..X.X..X..X......X....", "........X.X.................................X.....", "...................X.X......X........X.X..........", "......XX..................X........X.........X.X.X", ".X...X...X...........X...XX...................X...", "..X....X...........XX...............X..X....X.....", "..........................X..X.......X..........X.", "...........X.....................X...X............", ".....................XX.X....XX........X......X.X.", ".X...X.......X..................X..X.....XX.......", ".....X....................X...X..X..X.X...X.......", "...............................X.............X.X..", "...X...............X......X.XX..................X.", ".......X......X......X...X........................", "..................X................X.........XX...", "...X..................XX....X....X......X......XX.", ".....XX...............XX.................X........", "..........X......................X................", ".............X.....X.....XX..X..........X...X.....", "......X..................XX...........X...........", "X....X...............................X............", "X........X.X.X.X.X....X...XX........X.............", "...X........X............X......X.................", ".....................X.....................X......", "..........X......X......X....X....X...............", "X...........X.X..X.....X...X..XX.....X.........X..", "X.............X..X......XX...X...X.........X......", "....X.......X........XX..X...X..........X.........", "..X.......X..................X...XXX........X.....", "......................X...X....X..X...............", ".......X.......X...............X...............XX.", ".......X..........X....X......................X...", "...........X..X..........X.......XX..............X", "................X...........X..XX...............XX", "..XX................X............X............X...", "..........X..X..XX....XXX......X...X........X.....", "........X......X....X.........X..............X....", ".....X....X......X...X..X........XXX....X.........", "..................X....X...X........X.........X..."};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> cake = {};
    vector<string> cutter = {"X.", "XX", ".X", "..", "X.", ".X", "XX", "X.", "X.", ".X", ".X", "XX", "XX", "X.", ".X", "XX", ".X", "X.", "XX", ".X", ".X", ".X", "X.", ".X", ".X", "..", "..", "..", ".X", "..", "..", "..", "XX", "..", "X.", "..", "..", ".X", "XX", ".X", "XX", ".X", ".X", "X.", "XX", "XX", "..", ".X", ".X", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> cake = {"XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXXX.XX.XXXXXXXXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX..X..XXXX..XX....XXXXXX..XXX....XXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX", "XXXXX.XX.XXXXX.XXX.X.XXXXXXX.XXXX.X.XXXXXXXXXXXXXX"};
    vector<string> cutter = {"X.", "XX", ".X", "..", "X.", ".X", "XX", "X.", "X.", ".X", ".X", "XX", "XX", "X.", ".X", "XX", ".X", "X.", "XX", ".X", ".X", ".X", "X.", ".X", ".X", "..", "..", "..", ".X", "..", "..", "..", "XX", "..", "X.", "..", "..", ".X", "XX", ".X", "XX", ".X", ".X", "X.", "XX", "XX", "..", ".X", ".X", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.X.XX.X.XX..XX...XXX...XX...XXX..X.X.XX....XX.X", "X..X......X..X..X..XX.X..X....XX..X....XX.X.X..XXX", "X.XX.XX.XX..X.X....XXXXX.XXXX..XXX.....X.....XX.XX", "X.XX.XXXXXXXX........X...XX..XXX.XXXXX.X..X.XX..XX", "X....XXXX..XXXX.X.......X..XXXX...XXXXXXX.XXX.X...", "XXX....XX.XXXXXX.XX.XX.X.X..X..X.X..X....X..X.X..X", "X....XX.....XXXXXX.....XX.X.XX....XXX..XX..X..X..X", "X.XXX..X.X....XXXXXX.....X.XX....XX..X.X.....X....", "X...XXXX....X..X.X.XX.X..X.X.X...X...X..X..XX..X.X", "X..X.X...XX.XXXX.X...X..XXXXX..X..X...XXX..X.X.XXX", "X.X...X.X...X.XXXX..XXXXX...X....XX.XX..XXX..XXX..", "X..X.XX..XXX.X.XXXX.....X.XX.XXX...XX.X..XX.XX.XXX", "X...X..XXXXX...X.XXX.X..X.X.X.X.X.X..X.XX..XX.XXX.", "X.XX.XX.X..XX...X.X..XX..XXX..XXXX..X.X....X.X..XX", "XX..XXXXX..X....X.X...X.X...X.X...XXXXXXXX...X....", "X.XX.X.X...X..X..X.XXX.X.XX.XX.X.X.X.XXXX....X.XX.", "X..XXX....XX..XXX.X...XXX...XX.XX...X.....XXXXX.XX", "X.X.XXX..XX.....X.X.XX..XX.XXXX.X..X...XX...X....X", "XX.XX..X.X..X..X.XXXX.X.X....X.X.XXXX.......XXXXX.", "X.X........X.XX.XXXX.X.X...XX.XXXXX...XX.XX..XX.X.", "X.X.XX.XXX.X..XX........XX.X..X...X.XX.....X.XX.X.", "X.X.X.X..XX.XXX.....X.X.XX..XXX.X.XX......X....X..", "XX..XXX.XX..XX.X....X.XX..X......XXXX...XXXX.XXX..", "XXX.X.X..X.X.......X..X.X..X.XXX..X.XX....XXX.X.XX", "XX..XX.X.X.X.X....XX...XX.XX.XXX.XX.XX.X..XXXXX...", "XX.X.XXX..X..XXXXXXXX.......XXXX..X..X.X.....XXXXX", "X..X..X.X.X.XX.XXX...X..XXX.X..XXX.X...XX...XXXXXX", "X..X..X.XX.XXX.....X..XXXXX...X.X.XX....XXX.X...X.", "XXXXX.XX..XX..X..X.XXXXXX..X.XX.X...XX....XX..X..X", "X...XXXX.X...X..X..X.XXX..X..XX..X.X...XX....X..X.", "XX.X...X.X.X.XX.XXX.X.XX.X.XXX.X...X.XX...X.X.X.X.", "X.X..XXX.X.X...XXXX...X.X.XX.X...X..X...XXXX..X.X.", "XX..XX.X.XXXX..X..X..XXX.X....XX..XX.XXX.XXX.XX.X.", "XXXX...XX....XXX.X..X.....X.X.XXX..XXXXX.X.XX...X.", "X...X.XXXXXX.X..X.XXXXXX..X..X.XX..XX.X.XXX.X..X.X", "X.........XX.X.XXXXXX.......XX.......X..XX.X.XX.XX", "XXX.XX.XX.XXX..XX.XX..X.....XX.X....XXX..X.X..XXX.", "XXX.XX.XXX.....XXX.XX..XXX...X.XXXX...XXXXXX.XX..X", "XX......XX..XX.XX.X.X.XX..XX..XX....X.XX.X...XXX.X", "X.XXX.XX.X.X..X.XXXX...XXXX.X...X..X.X.XXX.XX.X.XX", "XX.XX...XX...XXX..X.X.X.X...XX.XX.XX.X.X.......XXX", "X.X....XX.....XXXXX......X...XX.X..X.XXXX.XX..XXXX", "X....X.XX.X.XX...XX.X.XX.X.X...XX...XXX.X..XX.XX..", "XXX.....X.XX..XX..XXXX....X.X.X.X.XXXXX.XX...X.X..", "XX...XXX..XXXX.XX......XX.X...X.X...XX.X.X..X...X.", "XXXXXX.XXX.X..X.X.XX..X..XXX....X.XX.XX..XXX.XX.X.", "X.X.........XXXXX.X....XX.X...X.X..X....XXX....XXX", "X.XX.XXXX.X..XX.X.......X.X...XXXX.X.XX.XXXXX.X...", "X.X.X.....X...XXX..XX...XX....X....XX.X..XXXX....."};
    vector<string> cutter = {"XX.X.XX.X.XX..XX...XXX...XX...XXX..X.X.XX....XX.X", "..X......X..X..X..XX.X..X....XX..X....XX.X.X..XXX", ".XX.XX.XX..X.X....XXXXX.XXXX..XXX.....X.....XX.XX", ".XX.XXXXXXXX........X...XX..XXX.XXXXX.X..X.XX..XX", "....XXXX..XXXX.X.......X..XXXX...XXXXXXX.XXX.X...", "XX....XX.XXXXXX.XX.XX.X.X..X..X.X..X....X..X.X..X", "....XX.....XXXXXX.....XX.X.XX....XXX..XX..X..X..X", ".XXX..X.X....XXXXXX.....X.XX....XX..X.X.....X....", "...XXXX....X..X.X.XX.X..X.X.X...X...X..X..XX..X.X", "..X.X...XX.XXXX.X...X..XXXXX..X..X...XXX..X.X.XXX", ".X...X.X...X.XXXX..XXXXX...X....XX.XX..XXX..XXX..", "..X.XX..XXX.X.XXXX.....X.XX.XXX...XX.X..XX.XX.XXX", "...X..XXXXX...X.XXX.X..X.X.X.X.X.X..X.XX..XX.XXX.", ".XX.XX.X..XX...X.X..XX..XXX..XXXX..X.X....X.X..XX", "X..XXXXX..X....X.X...X.X...X.X...XXXXXXXX...X....", ".XX.X.X...X..X..X.XXX.X.XX.XX.X.X.X.XXXX....X.XX.", "..XXX....XX..XXX.X...XXX...XX.XX...X.....XXXXX.XX", ".X.XXX..XX.....X.X.XX..XX.XXXX.X..X...XX...X....X", "X.XX..X.X..X..X.XXXX.X.X....X.X.XXXX.......XXXXX.", ".X........X.XX.XXXX.X.X...XX.XXXXX...XX.XX..XX.X.", ".X.XX.XXX.X..XX........XX.X..X...X.XX.....X.XX.X.", ".X.X.X..XX.XXX.....X.X.XX..XXX.X.XX......X....X..", "X..XXX.XX..XX.X....X.XX..X......XXXX...XXXX.XXX..", "XX.X.X..X.X.......X..X.X..X.XXX..X.XX....XXX.X.XX", "X..XX.X.X.X.X....XX...XX.XX.XXX.XX.XX.X..XXXXX...", "X.X.XXX..X..XXXXXXXX.......XXXX..X..X.X.....XXXXX", "..X..X.X.X.XX.XXX...X..XXX.X..XXX.X...XX...XXXXXX", "..X..X.XX.XXX.....X..XXXXX...X.X.XX....XXX.X...X.", "XXXX.XX..XX..X..X.XXXXXX..X.XX.X...XX....XX..X..X", "...XXXX.X...X..X..X.XXX..X..XX..X.X...XX....X..X.", "X.X...X.X.X.XX.XXX.X.XX.X.XXX.X...X.XX...X.X.X.X.", ".X..XXX.X.X...XXXX...X.X.XX.X...X..X...XXXX..X.X.", "X..XX.X.XXXX..X..X..XXX.X....XX..XX.XXX.XXX.XX.X.", "XXX...XX....XXX.X..X.....X.X.XXX..XXXXX.X.XX...X.", "...X.XXXXXX.X..X.XXXXXX..X..X.XX..XX.X.XXX.X..X.X", ".........XX.X.XXXXXX.......XX.......X..XX.X.XX.XX", "XX.XX.XX.XXX..XX.XX..X.....XX.X....XXX..X.X..XXX.", "XX.XX.XXX.....XXX.XX..XXX...X.XXXX...XXXXXX.XX..X", "X......XX..XX.XX.X.X.XX..XX..XX....X.XX.X...XXX.X", ".XXX.XX.X.X..X.XXXX...XXXX.X...X..X.X.XXX.XX.X.XX", "X.XX...XX...XXX..X.X.X.X...XX.XX.XX.X.X.......XXX", ".X....XX.....XXXXX......X...XX.X..X.XXXX.XX..XXXX", "....X.XX.X.XX...XX.X.XX.X.X...XX...XXX.X..XX.XX..", "XX.....X.XX..XX..XXXX....X.X.X.X.XXXXX.XX...X.X..", "X...XXX..XXXX.XX......XX.X...X.X...XX.X.X..X...X.", "XXXXX.XXX.X..X.X.XX..X..XXX....X.XX.XX..XXX.XX.X.", ".X.........XXXXX.X....XX.X...X.X..X....XXX....XXX", ".XX.XXXX.X..XX.X.......X.X...XXXX.X.XX.XXXXX.X...", ".X.X.....X...XXX..XX...XX....X....XX.X..XXXX....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.X.XX.X.XX..XX...XXX...XX...XXX..X.X.XX....XX.XX", "..X......X..X..X..XX.X..X....XX..X....XX.X.X..XXXX", ".XX.XX.XX..X.X....XXXXX.XXXX..XXX.....X.....XX.XXX", ".XX.XXXXXXXX........X...XX..XXX.XXXXX.X..X.XX..XXX", "....XXXX..XXXX.X.......X..XXXX...XXXXXXX.XXX.X...X", "XX....XX.XXXXXX.XX.XX.X.X..X..X.X..X....X..X.X..XX", "....XX.....XXXXXX.....XX.X.XX....XXX..XX..X..X..XX", ".XXX..X.X....XXXXXX.....X.XX....XX..X.X.....X....X", "...XXXX....X..X.X.XX.X..X.X.X...X...X..X..XX..X.XX", "..X.X...XX.XXXX.X...X..XXXXX..XX.X...XXX..X.X.XXXX", ".X...X.X...X.XXXX..XXXXX...X....XX.XX..XXX..XXX..X", "..X.XX..XXX.X.XXXX.....X.XX.XXX...XX.X..XX.XX.XXXX", "...X..XXXXX...X.XXX.X..X.X.X.X.X.X..X.XX..XX.XXX.X", ".XX.XX.X..XX...X.X..XX..XXX..XXXX..X.X....X.X..XXX", "X..XXXXX..X....X.X...X.X...X.X...XXXXXXXX...X....X", ".XX.X.X...X..X..X.XXX.X.XX.XX.X.X.X.XXXX....X.XX.X", "..XXX....XX..XXX.X...XXX...XX.XX...X.....XXXXX.XXX", ".X.XXX..XX.....X.X.XX..XX.XXXX.X..X...XX...X....XX", "X.XX..X.X..X..X.XXXX.X.X....X.X.XXXX.......XXXXX.X", ".X........X.XX.XXXX.X.X...XX.XXXXX...XX.XX..XX.X.X", ".X.XX.XXX.X..XX........XX.X..X...X.XX.....X.XX.X.X", ".X.X.X..XX.XXX.....X.X.XX..XXX.X.XX......X....X..X", "X..XXX.XX..XX.X....X.XX..X......XXXX...XXXX.XXX..X", "XX.X.X..X.X.......X..X.X..X.XXX..X.XX....XXX.X.XXX", "X..XX.X.X.X.X....XX...XX.XX.XXX.XX.XX.X..XXXXX...X", "X.X.XXX..X..XXXXXXXX.......XXXX..X..X.X.....XXXXXX", "..X..X.X.X.XX.XXX...X..XXX.X..XXX.X...XX...XXXXXXX", "..X..X.XX.XXX.....X..XXXXX...X.X.XX....XXX.X...X.X", "XXXX.XX..XX..X..X.XXXXXX..X.XX.X...XX....XX..X..XX", "...XXXX.X...X..X..X.XXX..X..XX..X.X...XX....X..X.X", "X.X...X.X.X.XX.XXX.X.XX.X.XXX.X...X.XX...X.X.X.X.X", ".X..XXX.X.X...XXXX...X.X.XX.X...X..X...XXXX..X.X.X", "X..XX.X.XXXX..X..X..XXX.X....XX..XX.XXX.XXX.XX.X.X", "XXX...XX....XXX.X..X.....X.X.XXX..XXXXX.X.XX...X.X", "...X.XXXXXX.X..X.XXXXXX..X..X.XX..XX.X.XXX.X..X.XX", ".........XX.X.XXXXXX.......XX.......X..XX.X.XX.XXX", "XX.XX.XX.XXX..XX.XX..X.....XX.X....XXX..X.X..XXX.X", "XX.XX.XXX.....XXX.XX..XXX...X.XXXX...XXXXXX.XX..XX", "X......XX..XX.XX.X.X.XX..XX..XX....X.XX.X...XXX.XX", ".XXX.XX.X.X..X.XXXX...XXXX.X...X..X.X.XXX.XX.X.XXX", "X.XX...XX...XXX..X.X.X.X...XX.XX.XX.X.X.......XXXX", ".X....XX.....XXXXX......X...XX.X..X.XXXX.XX..XXXXX", "....X.XX.X.XX...XX.X.XX.X.X...XX...XXX.X..XX.XX..X", "XX.....X.XX..XX..XXXX....X.X.X.X.XXXXX.XX...X.X..X", "X...XXX..XXXX.XX......XX.X...X.X...XX.X.X..X...X.X", "XXXXX.XXX.X..X.X.XX..X..XXX....X.XX.XX..XXX.XX.X.X", ".X.........XXXXX.X....XX.X...X.X..X....XXX....XXXX", ".XX.XXXX.X..XX.X.......X.X...XXXX.X.XX.XXXXX.X...X", ".X.X.....X...XXX..XX...XX....X....XX.X..XXXX.....X"};
    vector<string> cutter = {"XX.X.XX.X.XX..XX...XXX...XX...XXX..X.X.XX....XX.X", "..X......X..X..X..XX.X..X....XX..X....XX.X.X..XXX", ".XX.XX.XX..X.X....XXXXX.XXXX..XXX.....X.....XX.XX", ".XX.XXXXXXXX........X...XX..XXX.XXXXX.X..X.XX..XX", "....XXXX..XXXX.X.......X..XXXX...XXXXXXX.XXX.X...", "XX....XX.XXXXXX.XX.XX.X.X..X..X.X..X....X..X.X..X", "....XX.....XXXXXX.....XX.X.XX....XXX..XX..X..X..X", ".XXX..X.X....XXXXXX.....X.XX....XX..X.X.....X....", "...XXXX....X..X.X.XX.X..X.X.X...X...X..X..XX..X.X", "..X.X...XX.XXXX.X...X..XXXXX..X..X...XXX..X.X.XXX", ".X...X.X...X.XXXX..XXXXX...X....XX.XX..XXX..XXX..", "..X.XX..XXX.X.XXXX.....X.XX.XXX...XX.X..XX.XX.XXX", "...X..XXXXX...X.XXX.X..X.X.X.X.X.X..X.XX..XX.XXX.", ".XX.XX.X..XX...X.X..XX..XXX..XXXX..X.X....X.X..XX", "X..XXXXX..X....X.X...X.X...X.X...XXXXXXXX...X....", ".XX.X.X...X..X..X.XXX.X.XX.XX.X.X.X.XXXX....X.XX.", "..XXX....XX..XXX.X...XXX...XX.XX...X.....XXXXX.XX", ".X.XXX..XX.....X.X.XX..XX.XXXX.X..X...XX...X....X", "X.XX..X.X..X..X.XXXX.X.X....X.X.XXXX.......XXXXX.", ".X........X.XX.XXXX.X.X...XX.XXXXX...XX.XX..XX.X.", ".X.XX.XXX.X..XX........XX.X..X...X.XX.....X.XX.X.", ".X.X.X..XX.XXX.....X.X.XX..XXX.X.XX......X....X..", "X..XXX.XX..XX.X....X.XX..X......XXXX...XXXX.XXX..", "XX.X.X..X.X.......X..X.X..X.XXX..X.XX....XXX.X.XX", "X..XX.X.X.X.X....XX...XX.XX.XXX.XX.XX.X..XXXXX...", "X.X.XXX..X..XXXXXXXX.......XXXX..X..X.X.....XXXXX", "..X..X.X.X.XX.XXX...X..XXX.X..XXX.X...XX...XXXXXX", "..X..X.XX.XXX.....X..XXXXX...X.X.XX....XXX.X...X.", "XXXX.XX..XX..X..X.XXXXXX..X.XX.X...XX....XX..X..X", "...XXXX.X...X..X..X.XXX..X..XX..X.X...XX....X..X.", "X.X...X.X.X.XX.XXX.X.XX.X.XXX.X...X.XX...X.X.X.X.", ".X..XXX.X.X...XXXX...X.X.XX.X...X..X...XXXX..X.X.", "X..XX.X.XXXX..X..X..XXX.X....XX..XX.XXX.XXX.XX.X.", "XXX...XX....XXX.X..X.....X.X.XXX..XXXXX.X.XX...X.", "...X.XXXXXX.X..X.XXXXXX..X..X.XX..XX.X.XXX.X..X.X", ".........XX.X.XXXXXX.......XX.......X..XX.X.XX.XX", "XX.XX.XX.XXX..XX.XX..X.....XX.X....XXX..X.X..XXX.", "XX.XX.XXX.....XXX.XX..XXX...X.XXXX...XXXXXX.XX..X", "X......XX..XX.XX.X.X.XX..XX..XX....X.XX.X...XXX.X", ".XXX.XX.X.X..X.XXXX...XXXX.X...X..X.X.XXX.XX.X.XX", "X.XX...XX...XXX..X.X.X.X...XX.XX.XX.X.X.......XXX", ".X....XX.....XXXXX......X...XX.X..X.XXXX.XX..XXXX", "....X.XX.X.XX...XX.X.XX.X.X...XX...XXX.X..XX.XX..", "XX.....X.XX..XX..XXXX....X.X.X.X.XXXXX.XX...X.X..", "X...XXX..XXXX.XX......XX.X...X.X...XX.X.X..X...X.", "XXXXX.XXX.X..X.X.XX..X..XXX....X.XX.XX..XXX.XX.X.", ".X.........XXXXX.X....XX.X...X.X..X....XXX....XXX", ".XX.XXXX.X..XX.X.......X.X...XXXX.X.XX.XXXXX.X...", ".X.X.....X...XXX..XX...XX....X....XX.X..XXXX....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXX.X.XX.XX.X.X.XXX..X.XX.XXXXXX", "XXXXXXXXXXXXXXXXXXXXX.X..XX.XXX..X.XXXX...XXXXXXXX", "XXXXXXXXXXXXXXXXXXX...XX.XX..X...X..X.XXX...XXXXXX", "XXXXXXXXXXXXXXXXXXXX.X..XXXXXX.XX.XX.X.XXX.XXXXXXX", "XXXXXXXXXXXXXXXXXXXX..X..XX...X..XX.XX.XX.X.XXXXXX", "XXXXXXXXXXXXXXXXXXX.XXXX.XXXXX.XX...X.X..X.XXXXXXX", "XXXXXXXXXXXXXXXXXXXX..X.X.XXXXXXXXX.X..X.X.XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX...X..X.XXXXXXXX.XXXXXX", "XXXXXXXXXXXXXXXXXXXXXX...XX..XXX.X..XX.XX.X.XXXXXX", "XXXXXXXXXXXXXXXXXXX.X.XXX.X.....X.XXX.X.XX.XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X..X...X..XX..X...XXXXXXX", "XXXXXXXXXXXXXXXXXXX...XXX.XXXX.X.X.XX..XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX..XX...X.XX.XXXX.XX.XXXXXXX", "XXXXXXXXXXXXXXXXXXXX.XXX...X....X.X.XXX.XXX.XXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX...X.XXXXX..XX.XX.XXXXXXXX", "XXXXXXXXXXXXXXXXXXXX....XXXXXXX.X.XX.XXXX..XXXXXXX", "XXXXXXXXXXXXXXXXXXXXX.XX..XXX.XXX.XXXX..XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXX.X.XX...X.XXX..XXXXXX", "XXXXXXXXXXXXXXXXXXX..XX..XXXXX.XXX.XX.XX..XXXXXXXX", "XXXXXXXXXXXXXXXXXXX.XXXXXX.X...X.X.XXX...X.XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX..XX....XXX.XX.XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X..XX.....X.X.XX.X...X..XXXXXX", "XXXXXXXXXXXXXXXXXXXXX...X.X...XXX...X.X...X.XXXXXX", "XXXXXXXXXXXXXXXXXXXX......X.X.X...XXX.X.XX..XXXXXX", "XXXXXXXXXXXXXXXXXXX..X.X....X.XXXX.XXXX.X...XXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"XX.X.XX.XX.X.X.XXX..X.XX.", "XX.X..XX.XXX..X.XXXX...XX", "...XX.XX..X...X..X.XXX...", "X.X..XXXXXX.XX.XX.X.XXX.X", "X..X..XX...X..XX.XX.XX.X.", ".XXXX.XXXXX.XX...X.X..X.X", "X..X.X.XXXXXXXXX.X..X.X.X", "XXXXXXXX...X..X.XXXXXXXX.", "XXX...XX..XXX.X..XX.XX.X.", ".X.XXX.X.....X.XXX.X.XX.X", "XXX.X.X..X...X..XX..X...X", "...XXX.XXXX.X.X.XX..XXXXX", "XXXX..XX...X.XX.XXXX.XX.X", "X.XXX...X....X.X.XXX.XXX.", "XXXXX...X.XXXXX..XX.XX.XX", "X....XXXXXXX.X.XX.XXXX..X", "XX.XX..XXX.XXX.XXXX..XXXX", "XXXXXX.XXX.X.XX...X.XXX..", "..XX..XXXXX.XXX.XX.XX..XX", ".XXXXXX.X...X.X.XXX...X.X", "XXXXX..XX....XXX.XX.XXXXX", ".X..XX.....X.X.XX.X...X..", "XX...X.X...XXX...X.X...X.", "X......X.X.X...XXX.X.XX..", "..X.X....X.XXXX.XXXX.X..."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.X.XX.XX.X.X.XXX..X.XX.XXXXXXXXXXXXXXX.XXXXXXX", "XXXX.X..XX.XXX..X.XXXX...XXXXXXXXXXXXXXXXXXXXXXXXX", "XX...XX.XX..X...X..X.XXX...XXXXXXXXXXXXXXXXXXXXXXX", "XXX.X..XXXXXX.XX.XX.X.XXX.XXXXXXXXXXXXXXXXXXXXXXXX", "XXX..X..XX...X..XX.XX.XX.X.XXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXX.XXXXX.XX...X.X..X.XXXXXXXXXXXXXXXXXXXXXXXX", "XXX..X.X.XXXXXXXXX.X..X.X.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX...X..X.XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXXXX...XX..XXX.X..XX.XX.X.XXXXXXXXXXXXXXXXXXXXXXX", "XX.X.XXX.X.....X.XXX.X.XX.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.X.X..X...X..XX..X...XXXXXXXXXXXXXXXXXXXXXXXX", "XX...XXX.XXXX.X.X.XX..XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..XX...X.XX.XXXX.XX.XXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXX...X....X.X.XXX.XXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX...X.XXXXX..XX.XX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXX....XXXXXXX.X.XX.XXXX..XXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XX..XXX.XXX.XXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXX.X.XX...X.XXX..XXXXXXXXXXXXXXXXXXXXXXX", "XX..XX..XXXXX.XXX.XX.XX..XXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXX.X...X.X.XXX...X.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX..XX....XXX.XX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.X..XX.....X.X.XX.X...X..XXXXXXXXXXXXXXXXXXXXXXX", "XXXX...X.X...XXX...X.X...X.XXXXXXXXXXXXXXXXXXXXXXX", "XXX......X.X.X...XXX.X.XX..XXXXXXXXXXXXXXXXXXXXXXX", "XX..X.X....X.XXXX.XXXX.X...XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"XX.X.XX.XX.X.X.XXX..X.XX.", "XX.X..XX.XXX..X.XXXX...XX", "...XX.XX..X...X..X.XXX...", "X.X..XXXXXX.XX.XX.X.XXX.X", "X..X..XX...X..XX.XX.XX.X.", ".XXXX.XXXXX.XX...X.X..X.X", "X..X.X.XXXXXXXXX.X..X.X.X", "XXXXXXXX...X..X.XXXXXXXX.", "XXX...XX..XXX.X..XX.XX.X.", ".X.XXX.X.....X.XXX.X.XX.X", "XXX.X.X..X...X..XX..X...X", "...XXX.XXXX.X.X.XX..XXXXX", "XXXX..XX...X.XX.XXXX.XX.X", "X.XXX...X....X.X.XXX.XXX.", "XXXXX...X.XXXXX..XX.XX.XX", "X....XXXXXXX.X.XX.XXXX..X", "XX.XX..XXX.XXX.XXXX..XXXX", "XXXXXX.XXX.X.XX...X.XXX..", "..XX..XXXXX.XXX.XX.XX..XX", ".XXXXXX.X...X.X.XXX...X.X", "XXXXX..XX....XXX.XX.XXXXX", ".X..XX.....X.X.XX.X...X..", "XX...X.X...XXX...X.X...X.", "X......X.X.X...XXX.X.XX..", "..X.X....X.XXXX.XXXX.X..."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> cake = {"XXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X..XXXXXXXXXXX.XXXXXX..XXXXXXXXXXXXXXX..XXXXXXXXXX", "X.XXXXXXXXXXXX.XXXXXX.XXXXXXXXXXXXXXXX.XXXXXXXXXXX", "X.XXXXXXXXXXXXXX.XXXX.XXXXXXXXXXXXXXXX.XXXXXXXXXXX", "XXX.XXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXX.XXXXXXXXX", "XXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X.X.XXXXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXX.X.XXXXXXXXX", "XXXXXXXXXX..XX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X.X.XXXXXX.XXXXXXXXXX.X.XXXXXXXXXXXXXX.X.XXXXXXXXX", "XXXXXXXXXX.XXX.X.XXXXXXXXXXXXXXX..XXXXXXXXXXXX..XX", "X.X.XXX..XXX.XXX.XXXX.X.XXXXXXXX.XXXXX.X.X..XX.XXX", "XXX.XXX.XXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXX.X.XXX.XXX", "X.XXXXX.XX.X.X..XXXXX.XXXXX..XXXXX.XXX.XXX.XXXXX.X", "X..XXXXXX.XXXX..XXXXX..XXXX.XXXXXXXXXX..XXXX.XXXXX", "X..XXXXXXX.X.X..XXXXX..XXXX.XXXX.X.XXX..XXXXXX.X.X", "X..X..X.X.XXXXXXXXXXX..XXXXXX.XXXXXXXX..XX.X.XXXXX", "XXXX.XXXXX.X.XXXXXXXXXXXXXXXXXXX.X.XXXXXXXXXXX.X.X", "XXXX.XX.X.XX.X.X.X..XXXXXXX.X.XXXXXXXXXXXX.X.XXXXX", "X.X.XX.XXX.XXXXXXX.XX.X.XXXXXXXX.X.XXX.X.XXXXX.X.X", "XXXXXXX.X...XXXXXX.XXXXX..X.X.XXXX.XXXXXXX.X.XXX.X", "XXXX.X.XX...XXX..XXX.XXX.XXXXXXX.XXXXXXXXXXX.X.XXX", "....XXX.XX..XXX..XXXXX...XX.X.XX..XXXXX..X.XXX..XX", ".X...X...XXXXX...X.X.X..XX.XX.XX..XXX....X..XX..XX", "....XXX..XXXXXX..XXXX...XXX.XXXX..XXX....X..XX..XX", "XX.X.X...X.X.X..XX.X.XXX.X...XXXXXXXX.XXXX..XXXXXX", "X.XXXX.XXXXXXXX.XXXXX.XXXXX..X..XXXXXX..XXXXXXXXXX", ".X.X.XXXXXXXXXXXX..X.XXX.X...X.X.X.XXXXXXXXXXX.X.X", "XXXX..X.X.X..XXXXXXX.XXXXXXXXX.XXXXXX.X.XX.X.XXXXX", ".X.X..XXXXX..XX.X..XXXXX.X.XXXXX.XXXXXXXXXXXXXXXXX", "XXXX..XXXX...XXXXX..XXXXXX..X.XXX..XX.X.XXXXXXX..X", ".X.XXXXX..XXXXX.X...XXXX.XXXXX.X...XXXXXXXX..XX..X", "XX.XXXXX...XXXXXXX..XXXX..XXXXXX...XX.X.XXX..X...X", ".XXX.X....XXXXX.X.XXXXXX..XX...X.XXXXXX.XX...XXXXX", "..XXXXXXXXXXXXXXX.XXXXXX..XX..XX.XXXX.XXXXXXXX.XXX", "..XXXXX.XXXXXXX.XX.X.XXXXXX....X.XXXX..XXX.XXXXXXX", "..XXX..XXXXXXXX..XXXXXXXXXXXXXXX.XXXX..XXXXXXXXXXX", "XXXXX..XXXXXXXX..XXXXXXX.X..XX.XXXXXX..XXXXXXXXXXX", "XXXX...XXXXXXXX..XX..XXXXXXXXX..XXXXXXXXXXXXXXXXXX", ".X.XXXXXXXXXXXXXXXX..XXXXXXXXX..XXXXXXXXXXXXXXXXXX", "XXXX.XXXXXXXXXXXXX...XXXX..XXX..XXXXX.X.XXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XXXXXXX..XXXXXXXXXXXXXXXXXXXXXXX", "X..XXXXXXXXXXXXXXX.XXXXX...XXXXXXXXXXXXXXXXXXXXXXX", "X..XXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXX..XXXXXXXXXX", "...XXXXXXXXXXXXX..XXXXXX.XXXXXXXXXXXXX..XXXXXXXXXX", "XXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXX...XXXXXXXXXX", ".XXXXXXXXXXXXXX...XXXXXXXXXXXXX..XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXX.XXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"..X", ".XX", ".XX", "XX.", "XXX", ".X.", "XXX", ".X.", "XXX", ".X.", "XX.", ".XX", "..X", "..X", "..X", "XXX", "XXX", ".X.", "XXX", "XXX", "X..", "X..", "...", "XXX", ".XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> cake = {"XXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXX..XXXX", "X.XXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX.XXXXX", "X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX.XXXXX", "XXX.XXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXX", "X.X.XXX.X.XXXXXXXXXXXXXXX.XXXXXXXXX.X.XXXXXX.X.XXX", "XXXXXXXXX.XXXXXXXXXXXX..X.XXXXXXXXXXXXXXXXXXXXXXXX", "X.X.XXX.XXXXXXXXXXXXXX.XXXX.XXXXXXX.X.XXXXXX.X.XXX", "XXXXXXX..XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "X.X.XXX..XXXXXXXXXXXXXXX..X.XXXXXXX.X.XXXXXX.X.XXX", "XXX.XXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX.XXX", "X.XXXXXXXXXXXXXXXXXXXX.X..X.XXXXXXX.XXXXXXXX.XXXXX", "X..XX..XXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXX..XXXX", "X..XX.X.X.XXXXXXXXXXXX.X..X.XXXXXXX..XXXXXXX..XXXX", "X..XX.XXXXXXXX..XXXXXXXXXXX.XXXXXXX..XXXXXXX..XXXX", "XXXXXXX.XXX..X.XXXXXXX.X..XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX..X.XX.XXXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXX", "X.X.X.X...X.XXXX.XXXXX.XX..XXXXXXXX.X.XXXXXX.X.XXX", "XXXXXXX...XXX.XXXXXXXX..X..XXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XXXXXXXX.X.XXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXX", "XX..XXX.XXX.X.XXXXXXXX..XXXXXXXXXXXX..XXXXXXX..XXX", "XX..X.X.XXXXXX.X.XXXXXXXX.X.XXXXXXXX..XXXXXXX..XXX", "X...XXX.XXX.X.XXXXXXXXXXXXXXXXXXXXX...XXXXXX...XXX", "XXXXX.XXXXXXXX.X.XXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXX", "X.XXX..XXXX.X.XX.XXXXXXXXX..XXXXXXX.XXXXXXXX.XXXXX", "XXXXX..XXXXXX..XXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX", "XXXXX..XXXX.XX..XXXXXXX.....XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX..X..XXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX..X..XXXXXX....XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.X.XXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..XXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX...XXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXX..X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"..X", ".XX", ".XX", "XX.", "XXX", ".X.", "XXX", ".X.", "XXX", ".X.", "XX.", ".XX", "..X", "..X", "..X", "XXX", "XXX", ".X.", "XXX", "XXX", "X..", "X..", "...", "XXX", ".XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....", "XXXXXXXXXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...X", "XXXXXXXXXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....", ".XXXX.X.XX.XXXXX...XX....XX..X.XX.XXXX.X.....X...X", "XX..X.XX.XXXX.X.....X...X.X..XXXX..XX..X..XX....XX", ".X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXX", "XXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXX", "XXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXX", "XXXXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXX", "XXXXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXX", "XXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXX", "XXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXX", "XXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXX", "XXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXXX", "XXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXXX", "XXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXX", "XXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXX", "XXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXX", "XXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXXXXX", "XXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXXXXX", "XXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....", "XXXXXXXXXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...X", "XXXXXXXXXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XX", "XXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXX", "XXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXX", "XXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXX", "XXXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXX", "XXXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXX"};
    vector<string> cutter = {".XXXX.X.XX.XXXXX...XX....", "XX..X.XX.XXXX.X.....X...X", ".X..XXXX..XX..X..XX....XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> cake = {"XXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXX", "XXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXX", "XXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXX", "XXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXXXX", "XXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXXXX", "XXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXX", "XXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXX", "XXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXX", "XXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXX", "XXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXXXXXX", "XXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXXXXXX", "XXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXX", "XXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXX", "XXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXX", "XXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXXXX", "XXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXXXX", "XXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXX", "XXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXX", ".XXXX.X.XX.XXXXX...XX.....XXXX.X.XX.XXXXX...XX....", "XX..X.XX.XXXX.X.....X...XXX..X.XX.XXXX.X.....X...X", ".X..XXXX..XX..X..XX....XX.X..XXXX..XX..X..XX....XX", "XXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXX", "XXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXX", "XXX.XXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXXXXXXXXX", "XXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXXXXXX", "XXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXXXXXX", "XXX.X..XXXX..XX..X..X......X.XX.XXXXX...XX....XXXX", "XXXXXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXX", "XXXXXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXX", "XX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXXXXXXXXXXXXXX", "XXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXXXXXXXXXXXXXX", "XX.X..XXXX..XX..X..X......X.XX.XXXXX...XX....XXXXX", "XXXXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXX", "XXXXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXX", "XXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXXXXXX", "XXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXXXXXX", "XXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX.XXXX.X.XX.XXXXX...XX....XXXXXXX", "XXXXXXXXXXXXXXXXXXXX..X.XX.XXXX.X.....X...XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X..XXXX..XX..X..XX....XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".XXXX.X.XX.XXXXX...XX....", "XX..X.XX.XXXX.X.....X...X", ".X..XXXX..XX..X..XX....XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX..X.XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX..XX.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX...X.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX...X.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX..X..XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.XX..XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX..X.X.XX..XX..X.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX..XX...XX.XX..XX.XXXXXXX..X.XXXX", "XXXXXXXXXXXXXXXXXX...X.XXX..XX...X.XXXXXXX..XX.XXX", "X..X.XXXXXXXXXXXXX...X...X.XXX...X.XXXXXXX...X.XXX", "X..XX.XXXXXXXXXXXX..X..X..X.XX..X..XXXXXXX...X.XXX", "X...X.XXXXXXXXXXXX....X.....XX....XXXXXXXX..X..XXX", "X...X.XXXXXXXXXXXX.XX...XX..XX.XX..XXXXXXX....XXXX", "X..X..XXXXXXXXXXXX.XX.......XX.XX..XXXXXXX.XX..XXX", "X....XXXXXXXXXXXXX..XX......XX..XX.XXXXXXX.XX..XXX", "X.XX..XXXXXXXXXXXXXXX......XXXXXX..XXXXXXX..XX.XXX", "X.XX..XXXXXXXXXXXX..X.X.X...XX..X.XXXXXXXXXXX..XXX", "X..XX.X..X.XX..X.XX..X..XXX.XXX..X.XXXXXXX..X.XXXX", "XXXX..X..XX.X..XX.........X.XX.....XX..X.XX..X.XXX", "X..X.XX...X.X...X..XX.....X.XX.XX..XX..XX......XXX", "XX..X.X...X.X...X......X.X.XXX.....XX...X..XX..XXX", "X.....X..X..X..X.......X....XX.....XX...X......XXX", "X.XX..X....XX....X....X..XXXXX....XXX..X.......XXX", "X.....X.XX..X.XX...X...XX...XX.X...XX....X....XXXX", "X.....X.XX..X.XX...XXX.XXXXXXX.XXX.XX.XX...X...XXX", "X....XX..XX.X..XX....X.XXXXXXX...X.XX.XX...XXX.XXX", "X.X...XXXX..XXXX.....X.XXXXXXX...X.XX..XX....X.XXX", "X.XXX.X..X.XX..X.XX.X.XXXXXXXXX.X.XXXXXX.....X.XXX", "X...X.XX..X.XX..X.X....XXXXXXXX....XX..X.XX.X.XXXX", "X...X.X.....X.......XXXXXXXXXX..XXXXXX..X.X....XXX", "XX.X.XX.XX..X.XX..XX...XXXXXXXXX...XX.......XXXXXX", "XX....X.....X.....XXXXXXXXXXXXXXXXXXX.XX..XX...XXX", "X..XXXX.....X.....XXXXXXXXXXXXXXXXXXX.....XXXXXXXX", "XXX...X....XX....XXXXXXXXXXXXXXXXXXXX.....XXXXXXXX", "XXXXXXX.X...X.X...XXXXXXXXXXXXXXXXXXX....XXXXXXXXX", "XXXXXXX.XXX.X.XXX.XXXXXXXXXXXXXXXXXXX.X...XXXXXXXX", "XXXXXXX...X.X...X.XXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXX", "XXXXXXX...X.X...X.XXXXXXXXXXXXXXXXXXX...X.XXXXXXXX", "XXXXXXXX.X.XXX.X.XXXXXXXXXXXXXXXXXXXX...X.XXXXXXXX", "XXXXXXXX....XX....XXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXX", "XXXXXXX..XXXX..XXXXXXXXXXXXXXXXXXXXXXX....XXXXXXXX", "XXXXXXXXX...XXX...XXXXXXXXXXXXXXXXXXX..XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...XXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"..X.X", "..XX.", "...X.", "...X.", "..X..", "....X", ".XX..", ".XX..", "..XX.", "XXX..", "..X.X", "X..X.", ".....", ".XX..", ".....", ".....", "....X", ".X...", ".XXX.", "...X.", "...X.", "X.X.X", "X....", "..XXX", "XX..."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "..X.XXXXXXXXXXXXXXXXXXXXXXXX..X.XXXXXXXXXXXXXXXXXX", "..XX.XXXXXXXXXXXXXXXXXXXXXXX..XX.X..X.XXXXXXXXXXXX", "...X.XXXXXXXXXXXXXXXXXXXXXXX...X.X..XX.XX..X.XXXXX", "...X.XXXXXXXXXXXXXXXXXXXXXXX...X.X...X.XX..XX.XXXX", "..X..XXXXXXXXXXXXXXXXXXXXXXX..X..X...X.XX...X.XXXX", "....XXXXXXXXXXXXXXXXX..X.XXX....XX..X..XX...X.XXXX", ".XX..XXXXXXXXXXXXXXXX..XX.XX.XX..X....XXX..X..XXXX", ".XX..XXXXXXXXXXXXXXXX...X.XX.XX..X.XX..XX....XXXXX", "..XX.XXXXXXXXXXXXXXXX...X.XX..XX.X.XX..XX.XX..XXXX", "XXX..XXXXXXXXXXXXXXXX..X..XXXXX..X..XX.XX.XX..XXXX", "..X.XXXXXXXXXXXXXXXXX....XXX..X.XXXXX..XX..XX.XXXX", "X..X.XXXXXXXXXXXXXXXX.XX..XXX..X.X..X.XXXXXX..XXXX", ".....XXXXXXXXXXXXXXXX.XX..XX.....XX..X.XX..X.XXXXX", ".XX..XXXXXXXXXXXXXXXX..XX.XX.XX..X.....XXX..X.XXXX", ".....XXXXXXXXXXXXXXXXXXX..XX.....X.XX..XX.....XXXX", ".....XXXXXXXXXXXXXXXX..X.XXX.....X.....XX.XX..XXXX", "....XXXXXXXXXXXXXXXXXX..X.XX....XX.....XX.....XXXX", ".X...XXXXXXXXXXXXXXXX.....XX.X...X....XXX.....XXXX", ".XXX.XXXXXXXXXXXXXXXX.XX..XX.XXX.X.X...XX....XXXXX", "...X.XXXXXXXXXXXXXXXX.....XX...X.X.XXX.XX.X...XXXX", "...X.XXXXXXXXXXXXXXXX.....XX...X.X...X.XX.XXX.XXXX", "X.X.XXXXXXXXXXXX..X.X....XXXX.X.XX...X.XX...X.XXXX", "X....XXXXXXXXXXX..XX..X...XXX....XX.X.XXX...X.XXXX", "..XXXXXXXXXXXXXX...X..XXX.XX..XXXXX....XXX.X.XXXXX", "XX...XXXXXXXXXXX...X....X.XXXX...X..XXXXXX....XXXX", "XXXXXXXXXXXXXXXX..X.....X.XXXXXXXXXX...XX..XXXXXXX", "XXXXXXXXXXXXXXXX....XX.X.XXXXXXXXXXXXXXXXXX...XXXX", "XXXXXXXXXXXXXXXX.XX..X....XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX....XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX..XX.XX...XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX..X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX..X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX...X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X...XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX...X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX...X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"..X.X", "..XX.", "...X.", "...X.", "..X..", "....X", ".XX..", ".XX..", "..XX.", "XXX..", "..X.X", "X..X.", ".....", ".XX..", ".....", ".....", "....X", ".X...", ".XXX.", "...X.", "...X.", "X.X.X", "X....", "..XXX", "XX..."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> cake = {"XXXXXXXXXXXXXXXX.....XXXX.XXXXXX.X.XXXX..XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX.X.XXX.XXXX.X.XX..XXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX.XXXXXX.X..XXXXXXX.XX.XXXXXXXXX", "XXXXXXXXXXXXXXXXX.X..X..X.XX.X.X..X..XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXXXX.X.X.XXXXXXXX.XX..XXXXXXXXXX", "XXXX.....XXXX.XXXXXX.X.XXXX..XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.X.XXX.XXXX.X.XX..XXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XX.XXXXXX.X..XXXXXXX.XX.XXXXXXXXXXXXXXXXXXXXX", "XXXXX.X..X..X.XX.X.X..X.......XXXX.XXXXXX.X.XXXX..", "XXXX.XXXXX.X.X.XXXXXXXX.XX..X.X.XXX.XXXX.X.XX..XXX", ".....XXXX.XXXXXX.X.XXXX...XX.XXXXXX.X..XXXXXXX.XX.", "XXXX.X.XXX.XXXX.X.XX..XXXX.X..X..X.XX.X.X..X..XXXX", ".XX.XXXXXX.X..XXXXXXX.XX..XXXXX.X.X.XXXXXXXX.XX..X", "X.X..X..X.XX.X.X..X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXX.X.X.XXXXXXXX.XX..X.....XXXX.XXXXXX.X.XXXX..", "X.....XXXX.XXXXXX.X.XXXX..XXX.X.XXX.XXXX.X.XX..XXX", "XXXXX.X.XXX.XXXX.X.XX..XX.XX.XXXXXX.X..XXXXXXX.XX.", "X.XX.XXXXXX.X..XXXXXXX.XX..X..X..X.XX.X.X..X..XXXX", "XX.X..X..X.XX.X.X..X..XXX.XXXXX.X.X.XXXXXXXX.XX..X", "X.XXXXX.X.X.XXXXXXXX.XX..XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXX.....XXXX.XXXXXX.X.XXXX..XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXX.XXXX.X.XX..XXXXXX", ".....XXXX.XXXXXX.X.XXX....XXXXXX.X..XXXXXXX.XX.XXX", "XXXX.X.XXX.XXXX.X.XX..X.X..X..X.XX.X.X..X..XXXXXXX", ".XX.XXXXXX.X..XXXXXXX..X.XXX.X.X.XXXXXXXX.XX..XXXX", "X.X..X..X.XX.X.X..X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXX.X.X.XXXXXXXX.XX..XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.....XXXX.XXXXXX.X.XXXX..XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.XXX.XXXX.X.XX..XXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XX.XXXXXX.X..XXXXXXX.XX.XXXXXXXXXX", "XXXXXXXXXXXXXXXX.X..X..X.XX.X.X..X..XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XXXXX.X.X.XXXXXXXX.XX..XXXXXXXXXXX", "XXXXXXXXXXXXX.....XXXX.XXXXXX.X.XXXX..XXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X.XXX.XXXX.X.XX..XXXXXXXXXXXXXXX", "XXXXXXXXXXXXX.XX.XXXXXX.X..XXXXXXX.XX.XXXXXXXXXXXX", "XXXXXXXXXXXXXX.X..X..X.XX.X.X..X..XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXX.X.X.XXXXXXXX.XX..XXXXXXXXXXXXX", "XXXXXXXXXXXXX.....XXXX.XXXXXX.X.XXXX..XXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X.XXX.XXXX.X.XX..XXXXXXXXXXXXXXX", "XXXXXXXXXXXXX.XX.XXXXXX.X..XXXXXXX.XX.XXXXXXXXXXXX", "XXXXXXXXXXXXXX.X..X..X.XX.X.X..X..XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXX.X.X.XXXXXXXX.XX..XXXXXXXXXXXXX", "XXXXXXX.....XXXX.XXXXXX.X.XXXX..XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX.X.XXX.XXXX.X.XX..XXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XX.XXXXXX.X..XXXXXXX.XX.XXXXXXXXXXXXXXXXXX", "XXXXXXXX.X..X..X.XX.X.X..X..XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XXXXX.X.X.XXXXXXXX.XX..XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".....XXXX.XXXXXX.X.XXXX..", "XXXX.X.XXX.XXXX.X.XX..XXX", ".XX.XXXXXX.X..XXXXXXX.XX.", "X.X..X..X.XX.X.X..X..XXXX", ".XXXXX.X.X.XXXXXXXX.XX..X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> cake = {};
    vector<string> cutter = {".....XXXX.XXXXXX.X.XXXX..", "XXXX.X.XXX.XXXX.X.XX..XXX", ".XX.XXXXXX.X..XXXXXXX.XX.", "X.X..X..X.XX.X.X..X..XXXX", ".XXXXX.X.X.XXXXXXXX.XX..X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> cake = {};
    vector<string> cutter = {"X.XX.X.X.", "X.XXX.XXX", "XXXXXX...", ".X.XX.X..", "..X.XX.XX", ".XXX.XXX.", "XXXX.XX.X", "XX.XX.XXX", ".XXXXX.XX", "..XXXXXXX", ".XX..XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXX.XX.X.X.XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX...XXX.XX.X.X.XXXXXXX", "XXXXXX.XX.X.X.XXXXXXXXX.X.XX.X..XXX.XXX.XXXXXXXXXX", "XXXXX..XXX.XXXXXXXXXXXX..X.XX.XXXXXXXXXX...XXXXXXX", "XXXXXXXXXXX...XXXXXXXXX.XXX.XXX.XX.X.XX.X..XXXXXXX", "XXXXX.X.XX.X..XXXXXXXXXXXXX.XX.XXX..X.XX.XXXXXXXXX", "XXXXX..X.XX.XXXXXXXXXXXXX.XX.XXXXX.XXX.X.X..X.X.XX", "XXXXX.XXX.XXX.XXXXXXXXX.XXXXX.XXXXXXXX.X..XX.XXXXX", "XXXXXXXXX.XX..XX.X.X.XX..XXXXXXXXXXX.XX.XXXXX...XX", "XXXXXXX.XX.XX.XXX.XXXXX.XX..XXXXXX.XXXX...XX.X..XX", "XXXXX.XXXXX.XXXXXX...XXXXXXXXXXXXX..XXX..X.XX.XXXX", "XXXXX..XXXXX.X.XX.X..XXXXXXXXXXXXX.XX...XXX.XXX.XX", "XXXXX.XX..XX..X.XX.XXXXXXXXXXXXXXXXXXXXXXXX.XX.XXX", "XXXXXXXXXXXX.XXX.XXX.XXXXXXXXXXXXXXXXXXXX.XX.XXXXX", "XXXXXXXXXXXXXXXX.XX.XXXXXXXXXXXXXXXXXXX.XXXXX.XXXX", "XXXXXXXXXXXXXX.XX.XXXX.XX.X.X.XXXXXXXXX..XXXXXXXXX", "XXXXXXXXXXXX.XXXXX.XXX.XXX.XXXXXXXXXXXX.XX..XXXXXX", "XXXXXXXXXXXX..XXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXX.XX..XXXX.X.XX.X..XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXX..X.XX.XXXXXXXXXXXXXX.XX.X.X.", "XXXXXXXXXXXXX.XX.X.X..XXX.XXX.XXXXXXXXXXXX.XXX.XXX", "XXXXXXXXXXXXX.XXX.XXXXXXX.XX.XX.XX.X.X.XXXXXXXX...", "XXXXXXXXXXXXXXXXXX...XX.XX.XXXX.XXX.XXXXX.X.XX.X..", "XXXXXXXXXXXX.X.XX.X...XXXXX.XXXXXXXX...XX..X.XX.XX", "XXXXXXXXXXXX..X.XX.XX..XXXXXXX.X.XX.X..XX.XXX.XXX.", "XXXX.XX.X.X..XXX.XXX..XX..XXXX..X.XX.XXXXXXXX.XX.X", "XXXX.XXX.XXXXXXX.XX.XXXXXXXXXX.XXX.XXX.XXXX.XX.XXX", "XXXXXXXXX...XX.XX.XXXXXXXXXXXXXXXX.XX.XXX.XXXXX.XX", "XXX.X.XX.X...XXXXX.XXXXXXXXXXXXX.XX.XXXXX..XXXXXXX", "XXX..X.XX.XX..XXXXXXXXXXXXXXXX.XXXXX.XXXX.XX..XXXX", "XXX.XXX.XXX..XX..XXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXX", "XXXXXXX.XX.XXXXXXXXXXXXXXXXXXX.XX..XXXXXXXXXXXXXXX", "XXXXX.XX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXXXX.XXXXXX.XX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX..XXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XX..XXXXXXXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XX.X..XXXXXXX.XX.X.X.XXXXXXXXXXX", "XXXXXXXXXXXXXXX..X.XX.XXXXXXXXX.XXX.XXXXX.XX.X.X.X", "XXXXXXXXXXXXXXX.XXX.XXX.XXXXXXXXXXXX...XX.XXX.XXXX", "XXXXXXXXXXXXXXXXXXX.XX.XXXXXXX.X.XX.X..XXXXXXX...X", "XXXXXXXXXXXXXXXXX.XX.XXXXXXXXX..X.XX.XXX.X.XX.X..X", "XXXXXXXXXXXXXXX.XXXXX.XXXXXXXX.XXX.XXX.X..X.XX.XXX", "XXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXX.XX.XX.XXX.XXX.X", "XXXXXXXXXXXXXXX.XX..XXXXXXXXXXXX.XX.XXXXXXXX.XX.XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXX.XXXXX.XX.XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXX.XXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XX..XXXXX..XXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XX..XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"X.XX.X.X.", "X.XXX.XXX", "XXXXXX...", ".X.XX.X..", "..X.XX.XX", ".XXX.XXX.", "XXXX.XX.X", "XX.XX.XXX", ".XXXXX.XX", "..XXXXXXX", ".XX..XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> cake = {"XX.X.......X.XX.X.......X..X.......X.XXXXXXXXXXXXX", "XX..X.X...X..XX..X.X...X....X.X...X..XXXXXXXXXXXXX", "XXX........XXXXX........XXX........XXX.X.......X.X", "XX..X...X.X..XX..X...X.X....X...X.X..X..X.X...X..X", "XX......X..X.XX......X..X.......X..X.XX........XXX", "XX......X....XX......X..........X....X..X...X.X..X", "XX....X.X....XX....X.X........X.X....X......X..X.X", "XXXX.......X.XXXX.......X.XX.......X.X......X....X", "XX..........XXX..........X..........XX....X.X....X", "XXXXXXXXXXXXXXXXXXXXXXX.X.......X.XXXXXX.......X.X", "XXXXXXXXXXXXXXXXXXXXXXX..X.X...X..XXXX..........XX", "XXXXXXXXXXXXXXXXXXXXXXXX........XXXXXXXXXXXXXXXXXX", "XX.X.......X.XXXXXXXXXX..X...X.X..XXXXXXXXXXXXXXXX", "XX..X.X...X..XXXXXXXXXX......X..X.XXXXXXXXXXXXXXXX", "XXX........XXXXXXXXXXXX......X....XXX.X.......X.XX", "XX..X...X.X..XXXXXXXXXX....X.X....XXX..X.X...X..XX", "XX......X..X.XXXXXXXXXXXX.......X.XXXX........XXXX", "XX......X....XXXXXXXXXX..........XXXX..X...X.X..XX", "XX....X.X....XXX.X.......X.XXXXXXXXXX......X..X.XX", "XXXX.......X.XXX..X.X...X..XXXXXXXXXX......X....XX", "XX..........XXXXX........XXXXXXXXXXXX....X.X....XX", "XXXXXXXXXXXXXXXX..X...X.X..XXXXXXXXXXXX.......X.XX", "XXX.X.......X.XX......X..X.XXXXXXXXXX..........XXX", "XXX..X.X...X..XX......X....XXXXXXXXXXXXXXXXXXXXXXX", "XXXX........XXXX....X.X....XXXXXXXXXXXXXXXXXXXXXXX", "XXX..X...X.X..XXXX.......X.XXXXXXXXXXXXXXXXXXXXXXX", "XXX......X..X.XX..........XXXXXXXXXXXXXXXXXXXXXXXX", "XXX......X....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX....X.X....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.......X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX..........XXXXXXX.X.......X..X.......X.XXXXXXXX", "XXXXXXXXXXXXXXXXXXXX..X.X...X....X.X...X..XXXXXXXX", "XXXXXXXXXXXXXXXXXXXXX........XXX........XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX..X...X.X....X...X.X..XXXXXXXX", "XXXXXXXXXXXXXXXXXXXX......X..X.......X..X.XXXXXXXX", "XXXXXXXX.X.......X.X......X..........X....XXXXXXXX", "XXXXXXXX..X.X...X..X....X.X........X.X....XXXXXXXX", "XXXXXXXXX........XXXXX.......X.XX.......X.XXXXXXXX", "XXXXXXXX..X...X.X..X..........X..........XXXXXXXXX", "XXXXXXXX......X..X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX......X....XXXXXXXXXXXXXXXX.X.......X.XXXX", "XXXXXXXX....X.X....XX.X.......X.XXX..X.X...X..XXXX", "XXXXXXXXXX.......X.XX..X.X...X..XXXX........XXXXXX", "XXXXXXXX..........XXXX........XXXXX..X...X.X..XXXX", "XXXXXXXXXXXXXXXXXXXXX..X...X.X..XXX......X..X.XXXX", "XXXXXXXXXXXXXXXXXXXXX......X..X.XXX......X....XXXX", "XXXXXXXXXXXXXXXXXXXXX......X....XXX....X.X....XXXX", "XXXXXXXXXXXXXXXXXXXXX....X.X....XXXXX.......X.XXXX", "XXXXXXXXXXXXXXXXXXXXXXX.......X.XXX..........XXXXX", "XXXXXXXXXXXXXXXXXXXXX..........XXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".X.......X.", "..X.X...X..", "X........XX", "..X...X.X..", "......X..X.", "......X....", "....X.X....", "XX.......X.", "..........X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> cake = {};
    vector<string> cutter = {".X.......X.", "..X.X...X..", "X........XX", "..X...X.X..", "......X..X.", "......X....", "....X.X....", "XX.......X.", "..........X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.........X.XXXX...XX..X..X..X..X.XX.X.XXXXXXXX", "XX..XX.X......X......X...XXX.X..X..X.XX.XXXXXXXXXX", "XX.....X..XXXX...X...XX....X..X.XX.....XX.XXXXXXXX", "XX.XX...XXX.XXX..XX.XX..XX..X.....XXX.XX.XXXXXXXXX", "XX..XX.X.X...X.XX.....X.....XXXX.......X..XXXXXXXX", "XX....X....XXXXX..XX.X...XXXXXXXX..XX.X.XXXXXXXXXX", "XXXXX....X.....X.....XX.X..XXXXX.X....XX..XXXXXXXX", "XX...X.XXX.X.XXX.XX..........XXXXX...X..X.XXXXXXXX", "XXXX.XX.XXXXXX.XXXX.X......XXX...X..X.XXX.XXXXXXXX", "XX.X.X.X.X..XX...XXX.....XX.....X.X..X....XXXXXXXX", "XX.....XXXXX.X..XX....XXX..XXXX....X..XX.XXXXXXXXX", "XX..X.XX.........X..X..XX.X....X.XX.......XXXXXXXX", "XXXXXX....XX..X...X..X.......X.XXX...X....XXXXXXXX", "XX......XXXXX...XXX.X...X.XX.XXX.X..XXXXX.XXXXXXXX", "XXXX...X.XXXXX.XX...XX.....X.....XX....X.XXXXXXXXX", "XX.......XXXX.XXX..X.....XXXXXX....X..XX..XXXXXXXX", "XX..X.XX..X.X...XXX.X....X...XX....XXX....XXXXXXXX", "XX.X.....X.X.X.........XX.XXX.X....X.X.X..XXXXXXXX", "XX.X..X.X..XXXXXXXX.XXXX....X..X..XXXX.X.XXXXXXXXX", "XX..X..XX..XX..X.XX....X..XX...X.XXXXXXXX.XXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"XX.........X.XXXX...XX..X..X..X..X.XX.X.", "..XX.X......X......X...XXX.X..X..X.XX.XX", ".....X..XXXX...X...XX....X..X.XX.....XX.", ".XX...XXX.XXX..XX.XX..XX..X.....XXX.XX.X", "..XX.X.X...X.XX.....X.....XXXX.......X..", "....X....XXXXX..XX.X...XXXXXXXX..XX.X.XX", "XXX....X.....X.....XX.X..XXXXX.X....XX..", "...X.XXX.X.XXX.XX..........XXXXX...X..X.", "XX.XX.XXXXXX.XXXX.X......XXX...X..X.XXX.", ".X.X.X.X..XX...XXX.....XX.....X.X..X....", ".....XXXXX.X..XX....XXX..XXXX....X..XX.X", "..X.XX.........X..X..XX.X....X.XX.......", "XXXX....XX..X...X..X.......X.XXX...X....", "......XXXXX...XXX.X...X.XX.XXX.X..XXXXX.", "XX...X.XXXXX.XX...XX.....X.....XX....X.X", ".......XXXX.XXX..X.....XXXXXX....X..XX..", "..X.XX..X.X...XXX.X....X...XX....XXX....", ".X.....X.X.X.........XX.XXX.X....X.X.X..", ".X..X.X..XXXXXXXX.XXXX....X..X..XXXX.X.X", "..X..XX..XX..X.XX....X..XX...X.XXXXXXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.........X.XXXX...XX..X..X..X..X.XX.X.XXXXXXX", "XXX..XX.X......X......X...XXX.X..X..X.XX.XXXXXXXXX", "XXX.....X..XXXX...X...XX....X..X.XX.....XX.XXXXXXX", "XXX.XX...XXX.XXX..XX.XX..XX..X.....XXX.XX.XXXXXXXX", "XXX..XX.X.X...X.XX.....X.....XXXX.......X..XXXXXXX", "XXX....X....XXXXX..XX.X...XXXXXXXX..XX.X.XXXXXXXXX", "XXXXXX....X.....X.....XX.X..XXXXX.X....XX..XXXXXXX", "XXX...X.XXX.X.XXX.XX..........XXXXX...X..X.XXXXXXX", "XXXXX.XX.XXXXXX.XXXX.X......XXX...X..X.XXX.XXXXXXX", "XXX.X.X.X.X..XX...XXX.....XX.....X.X..X....XXXXXXX", "XXX.....XXXXX.X..XX....XXX..XXXX....X..XX.XXXXXXXX", "XXX..X.XX.........X..X..XX.X....X.XX.......XXXXXXX", "XXXXXXX....XX..X...X..X.......X.XXX...X....XXXXXXX", "XXX......XXXXX...XXX.X...X.XX.XXX.X..XXXXX.XXXXXXX", "XXXXX...X.XXXXX.XX...XX.....X.....XX....X.XXXXXXXX", "XXX.......XXXX.XXX..X.....XXXXXX....X..XX..XXXXXXX", "XXX..X.XX..X.X...XXX.X....X...XX....XXX....XXXXXXX", "XXX.X.....X.X.X.........XX.XXX.X....X.X.X..XXXXXXX", "XXX.X..X.X..XXXXXXXX.XXXX....X..X..XXXX.X.XXXXXXXX", "XXX..X..XX..XX..X.XX....X..XX...X.XXXXXXXX.XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.........X.XXXX...XX..X..X..X..X.XX.X.XXXXXXXXXX", "..XX.X......X......X...XXX.X..X..X.XX.XXXXXXXXXXXX", ".....X..XXXX...X...XX....X..X.XX.....XX.XXXXXXXXXX", ".XX...XXX.XXX..XX.XX..XX..X.....XXX.XX.XXXXXXXXXXX", "..XX.X.X...X.XX.....X.....XXXX.......X..XXXXXXXXXX", "....X....X.XXX..XX.X...XXXXXXXX..XX.X.XXXXXXXXXXXX", "XXX....X.....X.....XX.X..XXXXX.X....XX..XXXXXXXXXX", "...X.XXX.X.XXX.XX..........XXXXX...X..X.XXXXXXXXXX", "XX.XX.XXXXXX.XXXX.X......XXX...X..X.XXX.XXXXXXXXXX", ".X.X.X.X..XX...XXX.....XX.....X.X..X....XXXXXXXXXX", ".....XXXXX.X..XX....XXX..XXXX....X..XX.XXXXXXXXXXX", "..X.XX.........X..X..XX.X....X.XX.......XXXXXXXXXX", "XXXX....XX..X...X..X.......X.XXX...X....XXXXXXXXXX", "......XXXXX...XXX.X...X.XX.XXX.X..XXXXX.XXXXXXXXXX", "XX...X.XXXXX.XX...XX.....X.....XX....X.XXXXXXXXXXX", ".......XXXX.XXX..X.....XXXXXX....X..XX..XXXXXXXXXX", "..X.XX..X.X...XXX.X....X...XX....XXX....XXXXXXXXXX", ".X.....X.X.X.........XX.XXX.X....X.X.X..XXXXXXXXXX", ".X..X.X..XXXXXXXX.XXXX....X..X..XXXX.X.XXXXXXXXXXX", "..X..XX..XX..X.XX....X..XX...X.XXXXXXXX.XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"XX.........X.XXXX...XX..X..X..X..X.XX.X.", "..XX.X......X......X...XXX.X..X..X.XX.XX", ".....X..XXXX...X...XX....X..X.XX.....XX.", ".XX...XXX.XXX..XX.XX..XX..X.....XXX.XX.X", "..XX.X.X...X.XX.....X.....XXXX.......X..", "....X....XXXXX..XX.X...XXXXXXXX..XX.X.XX", "XXX....X.....X.....XX.X..XXXXX.X....XX..", "...X.XXX.X.XXX.XX..........XXXXX...X..X.", "XX.XX.XXXXXX.XXXX.X......XXX...X..X.XXX.", ".X.X.X.X..XX...XXX.....XX.....X.X..X....", ".....XXXXX.X..XX....XXX..XXXX....X..XX.X", "..X.XX.........X..X..XX.X....X.XX.......", "XXXX....XX..X...X..X.......X.XXX...X....", "......XXXXX...XXX.X...X.XX.XXX.X..XXXXX.", "XX...X.XXXXX.XX...XX.....X.....XX....X.X", ".......XXXX.XXX..X.....XXXXXX....X..XX..", "..X.XX..X.X...XXX.X....X...XX....XXX....", ".X.....X.X.X.........XX.XXX.X....X.X.X..", ".X..X.X..XXXXXXXX.XXXX....X..X..XXXX.X.X", "..X..XX..XX..X.XX....X..XX...X.XXXXXXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X..XX.XXXXXX..X...XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X.XXX.X.XXXXXXX.XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XX.XXX.X.X.XXXXX.XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX.X..XXXXX.XXX.X.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX...XXXX.XXXX....X.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX.X...XXX.X.XX.XX.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XX...XXX.X.X.X..XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXX.XX...X.XXXX.X.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX.X.XXX.XX.XX.XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX..X..XXXXXXXX..XX.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXX.XXXXX.X.X.X.XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X..X.XXX...X.X...XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.XXX..XXXXXX.X..XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX.X..X..X.X.X..XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.XX.X.XXX.XXX.XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X..X.X......XX....XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XXXXX..XX.XX..XXX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX...X..XXXX.X.X.X..XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X.XX.X.XX..X.XX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XXXXXX......X..X...XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX..XX...X..XXXXXXX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX..X.XX....XXXX.XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX..XXX...XXXX.X.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX..X......XX...XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX..X..XXXX.XXXX..XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX....X...X..X.XXXXX..XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.....XXXXXXXXXXX..XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X.XXXXX.XX...XXX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X..XX.XXX.X.XXX....XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.XX..X....XX.X.XX.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X.X...X.X.XX.XX..XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX.X.XXXXX.XX.XX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X.X.XXXXXXX.XXX..XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX...X.X.X..X..X..XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X.X.X.X.XX.XXX..X.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX..X...XXX....X.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X.XX.XXXXXX..X..X.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX..XX.XXX.XX.X.....XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X.X.XXX.XXXXXXX.XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX..X...X.X.X.X.XX.X.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".X..XX.XXXXXX..X...X", "X.X.XXX.X.XXXXXXX.XX", ".XX.XXX.X.X.XXXXX.XX", "XXX.X..XXXXX.XXX.X.X", "X...XXXX.XXXX....X.X", "XXX.X...XXX.X.XX.XX.", ".X.XX...XXX.X.X.X..X", "X.XXX.XX...X.XXXX.X.", "X.XX.X.XXX.XX.XX.XXX", "XX..X..XXXXXXXX..XX.", "X.XXX.XXXXX.X.X.X.XX", "XX.X..X.XXX...X.X...", "XXXX.XXX..XXXXXX.X..", "X.XX.X..X..X.X.X..XX", "XX.XX.X.XXX.XXX.XXXX", "X.X..X.X......XX....", ".XXXXX..XX.XX..XXX.X", "X...X..XXXX.X.X.X..X", "XX.X.XX.X.XX..X.XX.X", ".XXXXXX......X..X...", "X..XX...X..XXXXXXX.X", "..X.XX....XXXX.XXXXX", "X.XX..XXX...XXXX.X.X", "XXXXX..X......XX...X", "XXX..X..XXXX.XXXX..X", "....X...X..X.XXXXX..", ".....XXXXXXXXXXX..XX", "X.X.XXXXX.XX...XXX.X", ".X..XX.XXX.X.XXX....", "XX.XX..X....XX.X.XX.", "XX.X.X...X.X.XX.XX..", "X.XX.X.XXXXX.XX.XX.X", "XX.X.X.XXXXXXX.XXX..", "XX...X.X.X..X..X..XX", "X.X.X.X.X.XX.XXX..X.", "XXXX..X...XXX....X.X", "X.X.XX.XXXXXX..X..X.", "XX..XX.XXX.XX.X.....", "X.X.X.XXX.XXXXXXX.XX", "X..X...X.X.X.X.XX.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> cake = {};
    vector<string> cutter = {".X..XX.XXXXXX..X...X", "X.X.XXX.X.XXXXXXX.XX", ".XX.XXX.X.X.XXXXX.XX", "XXX.X..XXXXX.XXX.X.X", "X...XXXX.XXXX....X.X", "XXX.X...XXX.X.XX.XX.", ".X.XX...XXX.X.X.X..X", "X.XXX.XX...X.XXXX.X.", "X.XX.X.XXX.XX.XX.XXX", "XX..X..XXXXXXXX..XX.", "X.XXX.XXXXX.X.X.X.XX", "XX.X..X.XXX...X.X...", "XXXX.XXX..XXXXXX.X..", "X.XX.X..X..X.X.X..XX", "XX.XX.X.XXX.XXX.XXXX", "X.X..X.X......XX....", ".XXXXX..XX.XX..XXX.X", "X...X..XXXX.X.X.X..X", "XX.X.XX.X.XX..X.XX.X", ".XXXXXX......X..X...", "X..XX...X..XXXXXXX.X", "..X.XX....XXXX.XXXXX", "X.XX..XXX...XXXX.X.X", "XXXXX..X......XX...X", "XXX..X..XXXX.XXXX..X", "....X...X..X.XXXXX..", ".....XXXXXXXXXXX..XX", "X.X.XXXXX.XX...XXX.X", ".X..XX.XXX.X.XXX....", "XX.XX..X....XX.X.XX.", "XX.X.X...X.X.XX.XX..", "X.XX.X.XXXXX.XX.XX.X", "XX.X.X.XXXXXXX.XXX..", "XX...X.X.X..X..X..XX", "X.X.X.X.X.XX.XXX..X.", "XXXX..X...XXX....X.X", "X.X.XX.XXXXXX..X..X.", "XX..XX.XXX.XX.X.....", "X.X.X.XXX.XXXXXXX.XX", "X..X...X.X.X.X.XX.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> cake = {};
    vector<string> cutter = {"XXX....XXXXX.XXX..XXXXXXX", ".X.XXXXXX.X..XXXXXXX.X.XX", "X...XXX....XX.X.XX......X", ".XXX.XX.XX.XXXXX.X.XXXXXX", "XXXXXXX..XX.XXXXXXXXXX..X", "..X..XXXX..X...X...X....X", "XXXX.X.X.X.XX.X.X.X.XXXXX", "XXXXX.X.X.XX.XXXXXX..X.XX", ".XXX.X...XX.XXXXX...XX..X", "XXXX.X.XX....X.XXX.X..X.X", ".XX.XXX.XX..X.XXXXX.X....", "XX..XXXXX.XXXXXX.X.XX.XXX", "XXXX.XX..XXXX.XXX..XXXXXX", ".XXX.XXXXX..XXX...XX.X.XX", "XX..XX.X.XX..X..XXX.XXXXX", "XX.X.X..XX....XXXX.XXXXXX", "XXX.X.XX..X..XX..X.XXXXX.", "X.XXX.XXX.X.XX.X..XXXX...", "X....XX..XXXXXX.XXXX.X..X", "..XX.XXXXXXXX.XXXX.X.XXX.", ".XX...X...X.XX.X....XXX..", ".......X..XXX.X.X.XXXX..X", "XX.X...XXXXX.XX.XX.X.XXXX", "XXXX.XX.XXXXXXXXXXXX.XXX.", "X.XXX......XXXXXXXXX...XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> cake = {};
    vector<string> cutter = {"XXX....XXXXX.XXX..XXXXXXX", ".X.XXXXXX.X..XXXXXXX.X.XX", "X...XXX....XX.X.XX......X", ".XXX.XX.XX.XXXXX.X.XXXXXX", "XXXXXXX..XX.XXXXXXXXXX..X", "..X..XXXX..X...X...X....X", "XXXX.X.X.X.XX.X.X.X.XXXXX", "XXXXX.X.X.XX.XXXXXX..X.XX", ".XXX.X...XX.XXXXX...XX..X", "XXXX.X.XX....X.XXX.X..X.X", ".XX.XXX.XX..X.XXXXX.X....", "XX..XXXXX.XXXXXX.X.XX.XXX", "XXXX.XX..XXXX.XXX..XXXXXX", ".XXX.XXXXX..XXX...XX.X.XX", "XX..XX.X.XX..X..XXX.XXXXX", "XX.X.X..XX....XXXX.XXXXXX", "XXX.X.XX..X..XX..X.XXXXX.", "X.XXX.XXX.X.XX.X..XXXX...", "X....XX..XXXXXX.XXXX.X..X", "..XX.XXXXXXXX.XXXX.X.XXX.", ".XX...X...X.XX.X....XXX..", ".......X..XXX.X.X.XXXX..X", "XX.X...XXXXX.XX.XX.X.XXXX", "XXXX.XX.XXXXXXXXXXXX.XXX.", "X.XXX......XXXXXXXXX...XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XX.X..X..XXXX.XXX...XX.XXXXXXXXXXX", "XXXXXXXXXXXXXXX.X...X..X..X.XX.X..XX.XXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X...XXXX.......XXXX.X..XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX..X..X.X.XXX.X..XXX...XXXXXXXXXX", "XXXXXXXXXXXXXXX.X..X.XXX.XXXX..XXX.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.XXXXXXXX...X..XX.X..XX..XXXXXXXXXX", "XXXXXXXXXXXXXXXXXX.XXXXXX.XX..X.XXX.X..XXXXXXXXXXX", "XXXXXXXXXXXXXXXXX....XXXX.X........X.XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX..X.XXXXXX.......XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX...X.XXX.X..X.X.XX.X....XXXXXXXXXX", "XXXXXXXXXXXXXXXXX.XX....XX.X.XXXXXX.X.X.XXXXXXXXXX", "XXXXXXXXXXXXXXX.X.X.X.X..XX.XXXXX..XXX..XXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXX....XX.X...XX.XX.X.XXXXXXXXXXX", "XXXXXXXXXXXXXXX.XX.X...XX..X...XXX.X...XXXXXXXXXXX", "XXXXXXXXXXXXXXX...X.XX.X...XXX.X.XXXXX..XXXXXXXXXX", "XXXXXXXXXXXXXXX.XX...XXXXX..XXXX.X.XX...XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.XX.XXX..XXXXX.X.XXX.XXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XX..XXX....XXXXXXXXX..XXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXX.XX..XXX.X...X.XXXX.XXXXXXXXXX", "XXXXXXXXXXXXXXXX..XXX..XX.X..XX.X.X.X..XXXXXXXXXXX", "XXXXXXXXXXXXXXX..X.X...X...X...XXX..X..XXXXXXXXXXX", "XXXXXXXXXXXXXXX.XXXX..XXXX.XX.X..X..X.X.XXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXXX.X.XXXXX..X.XX.X..XXXXXXXXXXX", "XXXXXXXXXXXXXXX...XX.X.X.XXX....XX..X...XXXXXXXXXX", "XXXXXXXXXXXXXXXX..XXX.XX..XX..XXXXXX.X..XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".XX.X..X..XXXX.XXX...XX.X", ".X...X..X..X.XX.X..XX.XXX", ".X...XXXX.......XXXX.X..X", "XXX..X..X.X.XXX.X..XXX...", ".X..X.XXX.XXXX..XXX.XXXXX", ".XXXXXXXX...X..XX.X..XX..", "XXX.XXXXXX.XX..X.XXX.X..X", "XX....XXXX.X........X.XXX", "XX..X.XXXXXX.......XXXXXX", "X...X.XXX.X..X.X.XX.X....", "XX.XX....XX.X.XXXXXX.X.X.", ".X.X.X.X..XX.XXXXX..XXX..", "X.XXX....XX.X...XX.XX.X.X", ".XX.X...XX..X...XXX.X...X", "...X.XX.X...XXX.X.XXXXX..", ".XX...XXXXX..XXXX.X.XX...", "XXXX.XX.XXX..XXXXX.X.XXX.", ".X.XX..XXX....XXXXXXXXX..", "X.XXX.XX..XXX.X...X.XXXX.", "X..XXX..XX.X..XX.X.X.X..X", "..X.X...X...X...XXX..X..X", ".XXXX..XXXX.XX.X..X..X.X.", "X.XXXX.X.XXXXX..X.XX.X..X", "...XX.X.X.XXX....XX..X...", "X..XXX.XX..XX..XXXXXX.X.."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> cake = {};
    vector<string> cutter = {".XX.X..X..XXXX.XXX...XX.X", ".X...X..X..X.XX.X..XX.XXX", ".X...XXXX.......XXXX.X..X", "XXX..X..X.X.XXX.X..XXX...", ".X..X.XXX.XXXX..XXX.XXXXX", ".XXXXXXXX...X..XX.X..XX..", "XXX.XXXXXX.XX..X.XXX.X..X", "XX....XXXX.X........X.XXX", "XX..X.XXXXXX.......XXXXXX", "X...X.XXX.X..X.X.XX.X....", "XX.XX....XX.X.XXXXXX.X.X.", ".X.X.X.X..XX.XXXXX..XXX..", "X.XXX....XX.X...XX.XX.X.X", ".XX.X...XX..X...XXX.X...X", "...X.XX.X...XXX.X.XXXXX..", ".XX...XXXXX..XXXX.X.XX...", "XXXX.XX.XXX..XXXXX.X.XXX.", ".X.XX..XXX....XXXXXXXXX..", "X.XXX.XX..XXX.X...X.XXXX.", "X..XXX..XX.X..XX.X.X.X..X", "..X.X...X...X...XXX..X..X", ".XXXX..XXXX.XX.X..X..X.X.", "X.XXXX.X.XXXXX..X.XX.X..X", "...XX.X.X.XXX....XX..X...", "X..XXX.XX..XX..XXXXXX.X.."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX...XXX..XXXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.X....XX..XXX.XX.X.X.XX.XXXXXXXXXXXXXXXXXXXXX", "XXXXX.XXX...XXX...XX..X.X...XXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX...X.XXX.X..X.....XX.XXXXXXXXXXXXXXXXXXXXX", "XXXXX.XXXXX.....X.X.XXX.XXX..XXXXXXXXXXXXXXXXXXXXX", "XXXX.XXXX....X.X...X.X.XX.XX.XXXXXXXXXXXXXXXXXXXXX", "XXXX.XXX.X..XXXX.....XX...X.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX...X.X.X.XXX...XX.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX.X.X..XX.XX..X.XX.XXXXXXXXXXXXXXXXXXXXX", "XXXXXXX..X..X...XX..XX.XXX..XXXXXXXXXXXXXXXXXXXXXX", "XXXXX..X.X.X..XXX.X..XX.X.XX.XXXXXXXXXXXXXXXXXXXXX", "XXXXX.....XX...XX.X..X..XX..XXXXXXXXXXXXXXXXXXXXXX", "XXXX..X.XXXX..XXX.X...X...X..XXXXXXXXXXXXXXXXXXXXX", "XXXXX..XXX..X..XXXXXX.X...XX.XXXXXXXXXXXXXXXXXXXXX", "XXXX..XX.XX....XX.X.XXX..XX..XXXXXXXXXXXXXXXXXXXXX", "XXXXXX.X.XX.X.XX.XX.X.X.X.X.XXXXXXXXXXXXXXXXXXXXXX", "XXXXX...X.XXXXXX..X.X..X.....XXXXXXXXXXXXXXXXXXXXX", "XXXX.X.XXXX.X...X...X.....X.XXXXXXXXXXXXXXXXXXXXXX", "XXXX.XX..XXX...XXX....X..X.X.XXXXXXXXXXXXXXXXXXXXX", "XXXX..X.XX..XXXXXXXXXX.XXX.X.XXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.X.X.X.X..XXX.XX.XX...XXXXXXXXXXXXXXXXXXXXX", "XXXX...X.XX.X..XXX..XX.XX.X.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..XXX....XXXX..X.X..X.XXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX..X.X.X.XXX....X.X...XXXXXXXXXXXXXXXXXXXXX", "XXXXXX.....XXXXXXXX.X..X.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"XXXXXXXXXX...XXX..XXXX.XX", "X.X....XX..XXX.XX.X.X.XX.", "X.XXX...XXX...XX..X.X...X", "X.XX...X.XXX.X..X.....XX.", "X.XXXXX.....X.X.XXX.XXX..", ".XXXX....X.X...X.X.XX.XX.", ".XXX.X..XXXX.....XX...X.X", "XXXXXX...X.X.X.XXX...XX.X", "XXXXXXX.X.X..XX.XX..X.XX.", "XXX..X..X...XX..XX.XXX..X", "X..X.X.X..XXX.X..XX.X.XX.", "X.....XX...XX.X..X..XX..X", "..X.XXXX..XXX.X...X...X..", "X..XXX..X..XXXXXX.X...XX.", "..XX.XX....XX.X.XXX..XX..", "XX.X.XX.X.XX.XX.X.X.X.X.X", "X...X.XXXXXX..X.X..X.....", ".X.XXXX.X...X...X.....X.X", ".XX..XXX...XXX....X..X.X.", "..X.XX..XXXXXXXXXX.XXX.X.", "XXX.X.X.X.X..XXX.XX.XX...", "...X.XX.X..XXX..XX.XX.X.X", "XX..XXX....XXXX..X.X..X.X", "X.XX..X.X.X.XXX....X.X...", "XX.....XXXXXXXX.X..X.XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> cake = {};
    vector<string> cutter = {"XXXXXXXXXX...XXX..XXXX.XX", "X.X....XX..XXX.XX.X.X.XX.", "X.XXX...XXX...XX..X.X...X", "X.XX...X.XXX.X..X.....XX.", "X.XXXXX.....X.X.XXX.XXX..", ".XXXX....X.X...X.X.XX.XX.", ".XXX.X..XXXX.....XX...X.X", "XXXXXX...X.X.X.XXX...XX.X", "XXXXXXX.X.X..XX.XX..X.XX.", "XXX..X..X...XX..XX.XXX..X", "X..X.X.X..XXX.X..XX.X.XX.", "X.....XX...XX.X..X..XX..X", "..X.XXXX..XXX.X...X...X..", "X..XXX..X..XXXXXX.X...XX.", "..XX.XX....XX.X.XXX..XX..", "XX.X.XX.X.XX.XX.X.X.X.X.X", "X...X.XXXXXX..X.X..X.....", ".X.XXXX.X...X...X.....X.X", ".XX..XXX...XXX....X..X.X.", "..X.XX..XXXXXXXXXX.XXX.X.", "XXX.X.X.X.X..XXX.XX.XX...", "...X.XX.X..XXX..XX.XX.X.X", "XX..XXX....XXXX..X.X..X.X", "X.XX..X.X.X.XXX....X.X...", "XX.....XXXXXXXX.X..X.XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> cake = {};
    vector<string> cutter = {"XXXX.XXX.XXXXXXXXXX.XXXXX", "XXXXXXXXXX.XXXXXXXXXXXXXX", "XXXXXXXXXXXX..XXXXXXXXXXX", "XXXXX.XX.XX.XXXXXXX..X.X.", "XXXXX.XX..X.XXXX.XXXXXX.X", "X.XXXXX.XXXXXXXXXXXX..X..", "XX.XXXXXX.XXXXXXX..XXXXXX", "XXXXX..XXXX.XXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXX.XX", "XXXXXXXXX.XX.XXXXX.XXXXXX", "XXX.XX..XXXXX.XXXXXXXXXX.", "XXXX.XXXXXXXXXXXXX.XXXXXX", "X.XXXXXXXXXXXXXXXXXX..X.X", "XXX.X.XXXXXXX.XXX.XXXXXXX", "XXXXXX.X.XX.X.XXXXXXXXX.X", ".XXXXXX.XXX.XXXXXXXXXXXXX", "XXX.X..XXXXXXXXX.X.X..XXX", "XX.XXXX.XXX.XXXX..XXXXXX.", ".XXXXX...XX..XXXXXXXXXXXX", "XX.XXXXXXX...XXXXXXXXX..X", "X.XX.XXX.XXXXXX.XXXXXXXXX", "XXXXXX.XX..XXX.XXXXX.XXX.", "XXXX.XXX.XXXXXXXXXXX.X..X", "XXXXXX.XXXXXXX.XXXXX.XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> cake = {};
    vector<string> cutter = {"XXXX.XXX.XXXXXXXXXX.XXXXX", "XXXXXXXXXX.XXXXXXXXXXXXXX", "XXXXXXXXXXXX..XXXXXXXXXXX", "XXXXX.XX.XX.XXXXXXX..X.X.", "XXXXX.XX..X.XXXX.XXXXXX.X", "X.XXXXX.XXXXXXXXXXXX..X..", "XX.XXXXXX.XXXXXXX..XXXXXX", "XXXXX..XXXX.XXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXX.XX", "XXXXXXXXX.XX.XXXXX.XXXXXX", "XXX.XX..XXXXX.XXXXXXXXXX.", "XXXX.XXXXXXXXXXXXX.XXXXXX", "X.XXXXXXXXXXXXXXXXXX..X.X", "XXX.X.XXXXXXX.XXX.XXXXXXX", "XXXXXX.X.XX.X.XXXXXXXXX.X", ".XXXXXX.XXX.XXXXXXXXXXXXX", "XXX.X..XXXXXXXXX.X.X..XXX", "XX.XXXX.XXX.XXXX..XXXXXX.", ".XXXXX...XX..XXXXXXXXXXXX", "XX.XXXXXXX...XXXXXXXXX..X", "X.XX.XXX.XXXXXX.XXXXXXXXX", "XXXXXX.XX..XXX.XXXXX.XXX.", "XXXX.XXX.XXXXXXXXXXX.X..X", "XXXXXX.XXXXXXX.XXXXX.XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> cake = {};
    vector<string> cutter = {".....X...X.....X...X...X", ".XX.X.......XX..........", "..X...XX.X.XXX..........", ".X.XX.XXXX.X...XX.X.X..X", "......X..XX...X..XX.X...", "..X.X..X...XX.......X.X.", "X.X.X.X....X.........X..", "..X........X............", "XXXX......X.XX...XX..X..", "X..XX.X..XX.X...X..X....", "XXXX....X..X.......X....", "XXX........XXXX.....XX..", ".X....X.....X..X......X.", ".....X....X..XX.....X..X", "XX.X...X....XX..XXX.....", ".....X......XXXXXX..XX..", "..X......XX..........XX.", ".....X...XX.X.....XX....", "XXX...X.....X.X........X", ".X..X.X.........X.X....X", ".X..XX...X..XX..X.XX....", ".....X.XXX..XX.........X", "X.X.X..X...X...X.XX.....", "..XXX.X.X...X..X.X.X.X..", "....X.......XX.X.X.....X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.....X...X.....X...X...XXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XX.X.......XX..........XXXXXXXXXXXXXXXXXXX", "XXXXXXX..X...XX.X.XXX..........XXXXXXXXXXXXXXXXXXX", "XXXXXXX.X.XX.XXXX.X...XX.X.X..XXXXXXXXXXXXXXXXXXXX", "XXXXXXX......X..XX...X..XX.X...XXXXXXXXXXXXXXXXXXX", "XXXXXXX..X.X..X...XX.......X.X.XXXXXXXXXXXXXXXXXXX", "XXXXXXXX.X.X.X....X.........X..XXXXXXXXXXXXXXXXXXX", "XXXXXXX..X........X............XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX......X.XX...XX..X..XXXXXXXXXXXXXXXXXXX", "XXXXXXXX..XX.X..XX.X...X..X....XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX....X..X.......X....XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX........XXXX.....XX..XXXXXXXXXXXXXXXXXXX", "XXXXXXX.X....X.....X..X......X.XXXXXXXXXXXXXXXXXXX", "XXXXXXX.....X....X..XX.....X..XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.X...X....XX..XXX.....XXXXXXXXXXXXXXXXXXX", "XXXXXXX.....X......XXXXXX..XX..XXXXXXXXXXXXXXXXXXX", "XXXXXXX..X......XX..........XX.XXXXXXXXXXXXXXXXXXX", "XXXXXXX.....X...XX.X.....XX....XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX...X.....X.X........XXXXXXXXXXXXXXXXXXXX", "XXXXXXX.X..X.X.........X.X....XXXXXXXXXXXXXXXXXXXX", "XXXXXXX.X..XX...X..XX..X.XX....XXXXXXXXXXXXXXXXXXX", "XXXXXXX.....X.XXX..XX.........XXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.X.X..X...X...X.XX.....XXXXXXXXXXXXXXXXXXX", "XXXXXXX..XXX.X.X...X..X.X.X.X..XXXXXXXXXXXXXXXXXXX", "XXXXXXX....X.......XX.X.X.....XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".....X...X.....X...X...X", ".XX.X.......XX..........", "..X...XX.X.XXX..........", ".X.XX.XXXX.X...XX.X.X..X", "......X..XX...X..XX.X...", "..X.X..X...XX.......X.X.", "X.X.X.X....X.........X..", "..X........X............", "XXXX......X.XX...XX..X..", "X..XX.X..XX.X...X..X....", "XXXX....X..X.......X....", "XXX........XXXX.....XX..", ".X....X.....X..X......X.", ".....X....X..XX.....X..X", "XX.X...X....XX..XXX.....", ".....X......XXXXXX..XX..", "..X......XX..........XX.", ".....X...XX.X.....XX....", "XXX...X.....X.X........X", ".X..X.X.........X.X....X", ".X..XX...X..XX..X.XX....", ".....X.XXX..XX.........X", "X.X.X..X...X...X.XX.....", "..XXX.X.X...X..X.X.X.X..", "....X.......XX.X.X.....X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> cake = {};
    vector<string> cutter = {"X.X..XX.X.X.XX.XXXX...X.", ".XXX.XX..X.X.XXX..X.X...", "X...XXX.X.XX.XX.X.XX...X", ".XX...X..X.X.XX.XXXX..X.", "..XX.X.....X.XXX..X.....", "XX..XXX.X.X...X.X.X..X..", "...XXXX....XX.....XXX...", "X..XXXX.X.X.....X....XXX", "..XX..XX.X..X.X.X.XXX...", "X..XXX.XXXX......X.XXX.X", "XX..X.X..XXX.X.X.XXX..X.", "XX...XX.XXX...X.X.X.XX.X", "X.X..XXX...X....X.XX...X", "XXX...X..XXX.XXXX.X...XX", "XXXXX.X.XXX.....X...XX.X", ".XXXXX......XXXXX...X.X.", "XX.XXXXXX.XXXXXXXX.X..XX", "..XX.X..XXXX.X.XX...X...", ".......XXXX.X...X..X...X", "..XX....X..X.X.XXX.X.X..", "....X.X.X.X.X.....X.XX.X", "XX.X.X.........X.X.XX..X", "....X..X.XX....X..XX..XX", ".XX.......X.X..X.X..X..X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> cake = {};
    vector<string> cutter = {"X.X..XX.X.X.XX.XXXX...X.", ".XXX.XX..X.X.XXX..X.X...", "X...XXX.X.XX.XX.X.XX...X", ".XX...X..X.X.XX.XXXX..X.", "..XX.X.....X.XXX..X.....", "XX..XXX.X.X...X.X.X..X..", "...XXXX....XX.....XXX...", "X..XXXX.X.X.....X....XXX", "..XX..XX.X..X.X.X.XXX...", "X..XXX.XXXX......X.XXX.X", "XX..X.X..XXX.X.X.XXX..X.", "XX...XX.XXX...X.X.X.XX.X", "X.X..XXX...X....X.XX...X", "XXX...X..XXX.XXXX.X...XX", "XXXXX.X.XXX.....X...XX.X", ".XXXXX......XXXXX...X.X.", "XX.XXXXXX.XXXXXXXX.X..XX", "..XX.X..XXXX.X.XX...X...", ".......XXXX.X...X..X...X", "..XX....X..X.X.XXX.X.X..", "....X.X.X.X.X.....X.XX.X", "XX.X.X.........X.X.XX..X", "....X..X.XX....X..XX..XX", ".XX.......X.X..X.X..X..X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "XX.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "XXX.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "XX.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXX.........................X.X.X.X.X.X.X.X.X.X.X.", "XX.........................X.X.X.X.X.X.X.X.X.X.X.X", "XXXX.X.X.X.X.X.X.X..........X.X.X.X.X.X.X.XXXXXXXX", "XXX.X.X.X.X.X.X.X..........X.X.X.X.X.X.X.XXXXXXXXX", "XXXX.X.X.X.X.X.X.X..........X.X.X.X.X.X.X.XXXXXXXX", "XXX.X.X.X.X.X.X.X..........X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXX", "XXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.XXXXX", "XX.X.X.X.X.X.X.X.X.X.X....X.X.X.X.X.X.X.X.X.X.XXXX", "X.X.X.X.X.X.X.X.X.X.X....X.X.X.X.X.X.X.X.X.X.XXXXX", "XX.X.X.X.X.X.X.X.X.X.X....X.X.X.X.X.X.X.X.X.X.XXXX", "X.X.X.X.X.X.X.X.X.X.X....X.X.X.X.X.X.X.X.X.X.XXXXX", "XX.X.X.X.X.X.X.X.X.X.X....X.X.X.X.X.X.X.X.X.X.XXXX", "X.X.X.X.X.X.X.X.X.X.X....X....................X.X.", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XX.X.X.X.X.X.X.X.X.X.X.X.X........................", "X.X.X.X.X.X.X.X.X.X.X.X.XX........................", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXXX.X.X.X.X.X.X.X.X.X.X.X.."};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> cake = {};
    vector<string> cutter = {"X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X", "X.X.X.X.X.X.X.X.X.X.X.X.", ".X.X.X.X.X.X.X.X.X.X.X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................X", "XXXXXXXXXXXXXXXXXXXXXXXXXX........................", "XXXXXXXXXXXXXXXXXXXXXXXXX........................."};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> cake = {};
    vector<string> cutter = {"........................", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", ".XXXXXXXXXXXXXXXXXXXXXX.", "........................"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX................................................", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX................................................", "XX................................................", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX................................................"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX................................................", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX................................................", "XX................................................", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXX.XXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX.XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXX.", "XX................................................"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXX........................XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXX........................XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> cake = {"...X.XXX.X..XX.XXXXX.X.XXX.XXXXXXXXXXXXXXXXXXXXXXX", "..XXXXXXXXX.XXXX..XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XX.XX.XXXXXX.XXXX.XXX..XXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XX.XXXXXXXXXXXX.XX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXX..XX.XXXXXX..X.XXXXXXXXXXXXXXXXXXXXXXX", ".X.XXXXXXXXXXXX.XX...X..X..XXXXXXXXXXXXXXXXXXXXXXX", "XXXX..XXXXX.X.XXXX.X..XXXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX", "...XXX..XXXXX.X.XXX.X.XXX.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XXXXXXXXXX.X.XXXX.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XX.XXXX..X.XX..X.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XXXXXXXXX.XXX.X.X.X..XXXXXXXXXXXXXXXXXXXXXXXX", ".XXXX.XXXXXX.XXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.X.X..XXXXXXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXX", "XX.XXX.XXXXX.X......XXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XXXX.XXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "..XXX.XXX..X.XXXXXX..X.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XXXXXXXX..XXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX..XX..XX.X.XXXXXX.XXX..XXXXXXXXXXXXXXXXXXXXXXXX", ".X.X.XX.XX..XXXX.XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXX", "X...X..X.XXXXXX..XXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X..X.XXXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXXX.XXXXXXXXX.XX.X...X.XXX.X..XX.XXXXX.X.XXX.", "XXX.XXXXXXXXXXXXX...XX...XXXXXXXXX.XXXX..XXXXX.XXX", "X.XX.X.X.X.XXX...XXXXXXXX..XX.XX.XXXXXX.XXXX.XXX..", "XX.X.X.XXXXXXXXXXXXXXX.X..X.XX.XXXXXXXXXXXX.XX.XXX", "XXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXX..XX.XXXXXX..X.", "XXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXXXXX.XX...X..X..", "XXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXX.X.XXXX.X..XXXX.", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.", "XXXXXXXXXXXXXXXXXXXXXXX...XXX..XXXXX.X.XXX.X.XXX.X", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXX.X.XXXX.X", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XX.XXXX..X.XX..X.XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXX.XXX.X.X.X..X", "XXXXXXXXXXXXXXXXXXXXXXX.XXXX.XXXXXX.XXXXXX.XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.X..XXXXXXXXXXXXXX..", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXX.X......XXXX.XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.XXXX...XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX..XXX.XXX..X.XXXXXX..X.XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX..XXXXXXX..XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX..XX..XX.X.XXXXXX.XXX..X", "XXXXXXXXXXXXXXXXXXXXXXX.X.X.XX.XX..XXXX.XXXXXXXX.X", "XXXXXXXXXXXXXXXXXXXXXXXX...X..X.XXXXXX..XXXXX..XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX..X.XXXXXXXXX...XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.XXXXXXXXX.XX.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX...XX.XXXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XX.X.X.X.XXX...XXXXXXXX.X", "XXXXXXXXXXXXXXXXXXXXXXXXX.X.X.XXXXXXXXXXXXXXX.X..X"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> cake = {"XX.XXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.X.XX..XX..XX.XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "X.XX.X.XXXXXX.X.XXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXX", ".XXXX.XX.X.X.X.X.XX..X.XXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXX.X..XX.XX.XXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX", "X..XXXXX.XXXXXXXXX.XX..XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX...XXXXXXX.XXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX..X.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXXXXXXX...XX.XXXX.XXX..XXXXXXXXXXXXXXXXXXXXXXX", "X.XXXXXXXX..XXXXXXX.X.XX..XXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.X.XXX..XXXXX.XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX", ".X.XX.XX.X.XXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXX", "X.XX.XX..XXXXXXX.XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXX.XXXXXXX..XX....XXX..XXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXX.XXXXXX..XXXX.XX.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX.XXXX.X.X.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXXX.X.X.X..XX..XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XXXXXX...XXXXXXX.XX..XXXXXXXXXXXXXXXXXXXXXXXX", ".X.XXX..XXXXXX.XXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXX", "X.X..X.XX.XXXXXXX..X.XX...XXXXXXXXXXXXXXXXXXXXXXXX", "..XXXXX.XXXXXX..XXXXXXXX...XXXXXXXXXXXXXXXXXXXXXXX", "XX..X.XXXXXX..XXXXX..XX.X..XXXXXXXXXXXXX.XXXXXXXXX", "XXX.XXXX.X..XXX..XX.XX..X.X.XX..XX..XX.XXXXXXXX.XX", "X.XXX.X...XXXXXXXXXXXXXX.X..X.XXXXXX.X.XXXXXXXXX..", "XXX.XXXXXXX.X.X.X.XXXXX..XXX.XX.X.X.X.X.XX..X.XXXX", "XXXXXXXXXXXXXXXXXXXXXXX.XXXXX.X..XX.XX.XXXXXXXXXX.", "XXXXXXXXXXXXXXXXXXXXXXXX..XXXXX.XXXXXXXXX.XX..XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX...XXXXXXX.XXXXXX.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX..X.X.X.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXX.XX", "XXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXX...XX.XXXX.XXX..", "XXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX..XXXXXXX.X.XX..X", "XXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXX..XXXXX.XXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX.XXXXXXXX.", "XXXXXXXXXXXXXXXXXXXXXXX.X.XX.XX.X.XXXXXXXXXX.X.XXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XX.XX..XXXXXXX.XXXXXXX.XX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXX..XX....XXX..", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXX.XXXXXX..XXXX.XX.X", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.X.X.XXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.X.X.X..XX..XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXX...XXXXXXX.XX..X", "XXXXXXXXXXXXXXXXXXXXXXX.X.XXX..XXXXXX.XXXXX.X.X.XX", "XXXXXXXXXXXXXXXXXXXXXXXX.X..X.XX.XXXXXXX..X.XX...X", "XXXXXXXXXXXXXXXXXXXXXXX..XXXXX.XXXXXX..XXXXXXXX...", "XXXXXXXXXXXXXXXXXXXXXXXXX..X.XXXXXX..XXXXX..XX.XX.", "XXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.X..XXX..XX.XX..XXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XXX.X...XXXXXXXXXXXXXXXX.", "XXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXX.X.X.X.XXXXXX.X."};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> cake = {".XXXXXXXX..XXX..X.XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX..XXXX.X..XXXXXXXXXXXXXXXXXXXXXXXX.XXXXXX", "XXXXXX.XXXXXXXX.XX.X..XXXX.XXXXXXXXXXXXXXXXXXXXXXX", "XX.X...XXXX.X.XXX...XX.XXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..XXXXXX.XXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXXX..XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXX.X.XXXX.XXXX...XXX..XXXXXXXXXXXXXXXXXXXXXXXX", "X.XXX.XX..XX.XXX.XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.X..XX.XXX.XXXXX.XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXXXX.XX...XXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.X..XXX.X..XXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XX.XXXXX.XXX..X.X.XXX.XXXXXXXXXXXXXXXXXXXXXXX", "..XXXXXXXXXXXXXX.XX.X.XX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.XX..XXXX.XXXXXX..XXXXXXXXXXXXXXXXXXXXXXX", ".XXXXXXXX.X.X..XXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X.XXX.X.X.XXXXXXXX.XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XX.X.XXX..XXXX.X...XXXXXXXXXXXXXXXXXXXXXXX", "XX.X.XXXXX..XXXXXXX.XX...XXXXXXXXXXXXXXXXXXXXXXXXX", ".XX.XXX.XXX..XXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X.XX.X.XXX.XXXX..X.XXX.XX..XXXXXXXXXXXXXXXXXXXXXXX", "X.X...XXXX.XXXXXX.XXX.XX..XXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXXX.XXX.XXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.XXX..XXXXXXX.XX.XXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXX.X.XXXXXX..XXXXXX.XXXXXXXX..XXX..X.XXXX.XXXX", "XX.XXX..X.X.XXX..XXXXXX.XXXXXXXX..XXXX.X..XXXXXXXX", "XXXXXXXXXXXXXXX.X...XX.XXXXXX.XXXXXXXX.XX.X..XXXX.", "XX.XXX.XXXXXXXXX.XX.XXXXX.X...XXXX.X.XXX...XX.XXX.", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXXXX.XXXXXXX.X.XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX..XXXXXXX.XXXX", "XXXXXXXXXXXXXXXXXXXXXXX.XXXXX.X.XXXX.XXXX...XXX..X", "XXXXXXXXXXXXXXXXXXXXXXXX.XXX.XX..XX.XXX.XXXXX.XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.X..XX.XXX.XXXXX.XXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXX.XXXXXXX.XX...XXXXXX.XXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.XXX.X..XXX.X..XXXXXXXXXX..", "XXXXXXXXXXXXXXXXXXXXXXXXXXX.XX.XXXXX.XXX..X.X.XXX.", "XXXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXXXX.XX.X.XX.XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XX..XXXX.XXXXXX..", "XXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX.X.X..XXXXXX.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XXX.X.X.XXXXXXXX.XXXXX.XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XX.X.XXX..XXXX.X...", "XXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXX..XXXXXXX.XX...XX", "XXXXXXXXXXXXXXXXXXXXXXX.XX.XXX.XXX..XXXXXXX..XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XX.X.XXX.XXXX..X.XXX.XX..", "XXXXXXXXXXXXXXXXXXXXXXXX.X...XXXX.XXXXXX.XXX.XX..X", "XXXXXXXXXXXXXXXXXXXXXXX.XXXXXX.XXX.XXXXXXXXX.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX..XXXXXXX.XX.X", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXX.X.XXXXXX..XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXX..X.X.XXX..XXXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X...XX.XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX.XX.XXXXXXX"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> cake = {"...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "..................................................", "..................................................", "..................................................", "..................................................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX.......................XXXX", "XXXXXXXXXXXXXXXXXXXXXXX.......................XXXX", "XXXXXXXXXXXXXXXXXXXXXXX.......................XXXX", "XXXXXXXXXXXXXXXXXXXXXXX.......................XXXX"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> cake = {"X.XX.......................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "XX.X.......................XXXXXXXXXXXXXXXXXXXXXXX", "X.X........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "............................XXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "..................................................", "..................................................", "..................................................", "..................................................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXX........................X..", "XXXXXXXXXXXXXXXXXXXXXXX.......................XXXX", "XXXXXXXXXXXXXXXXXXXXXXX.........................X.", "XXXXXXXXXXXXXXXXXXXXXXX........................X.X"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> cake = {"XXXXXX..X..X.X..XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX..X..X....XXX.XXXX.X.XXXXXXXXXXXXXXXXXXXXXXXX", "X.X.XXXXXX..XX.XX.X..XXX.X.X..X..X.X..XXXXXXXX.XXX", "...XXX..X..XX.XXXX..XXX.X.XXXXXXXX.XXXXX.XXXXXX.XX", ".XXXX...X.XXXXXXX.X.XX..X..XXXXX.XXX.XXXX..XXXXX.X", "XX..XX..X..XXXX..X..XX..X..X..XX.XXXXXXXXXXXX.XXXX", "X..XXX....XXX..XXX....XXX.XXX.XXXXXXXXX.X.XXXXXX.X", "XXX..X..X..X.XXXX...XXX...X.X.X..XXXX.XXX.XX.XXX.X", "X...X..X..XXXX.X.XX....XXX.XX.XXXXX.XXXXX..XXXXXXX", ".X...XXX.X.X....X....XXXX..XX.X..XXXXXX.XXXXX.XXX.", "X..XX.....X.X..X.X.XXXX.XXX.XXXXXXXX.XXXX...XXXXXX", "X.XX..X.X.X..XX.X.X.XXX....XXX.X.X.X..X.XXXXXXXXXX", ".XXXX.XX.X..X..XXX.XXX..X.X..X.XXXXXXXXX.XXXXXXXXX", "XXXX.X.X..XX.....XXX....X...XXX.X..XX.XXX.XXX.XX.X", "X...X.X.........XXX..X......XXXXXXX.XXXXXXXXX.XXXX", "....XXX....XXX....XXX..XXXX..X..XXX....XXX..XXX...", "X..XXX.X.XX........XX.X....XXXX...XXXXXXXXXX..XXXX", "..XXXX...X...XX....X.XXXX.XXX.XXXXXX....XXXXXXXXX.", ".XXXX.X........X..XX....XXXXXX.XX..XXXX..XX.XXXXXX", "XXX.X........XX.X.....X......X.XXX.XX.XX.XXXXXXXXX", "XX.X..XX...X.XX.....X.X....XXX...X..XX.XXX...XXXXX", "X.XXXX..X.X.X..X...X..XXX.X..XXX.XXXXXX..XXXXX....", ".XX.X...XXXX..X.XXXX..XXX.XXXX.X.X.XX.XX..X.XXXXXX", "X..XX....X....X..X....X...XX.XXXXXX.XX.XXXX.XXXXXX", ".XXXXX.X...XX..XX....XXXX..X..XXXXX.XXXXXXX.XXX.XX", "X..X........X...X.XX.....X..XXXXXXXXXXXX..X.XXXXXX", ".X.X..X.....X.XX..XXX........X...XXX.XXXXXXXXXXXXX", "XXX.XXXX..XXXXXX.X.X..X.X....XXX.XXX.XX.XXXX.X.X.X", "XXX..XXX.X..XXXX.XXX.XX.XX..XXXX.XXXXXX.XXXX.XXX..", "XXXXXXXX.XXXXX.XXXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX..XX.X..XXXXXX.XXXXX.XXX.XXXXXXXXXXXXXXXXXXXXX", "XX.XXX.XXXXXXXX.XXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX..XXXX.X.X.X..X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..X.XXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXX.X..XX.XXX.XXX.XX.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXX.XXXXXXX.XXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.X..XXX....XXX..XXX...XXXXXXXXXXXXXXXXXXXXX", "XX...XXXXX...XXXXXXXXXX..XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XXX.XXXXXX....XXXXXXXXX.XXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXX.XX..XXXX..XX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXX.X.XXX.XX.XX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX...X..XX.XXX...XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.X..XXX.XXXXXX..XXXXX....XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.X.X.XX.XX..X.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXX.XXXXXX.XX.XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XX..XXXXX.XXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXXXXXXXXXXX..X.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.X...XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXX.XXX.XXX.XX.XXXX.X.X.XXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XXXXX.XXXXXX.XXXX.XXX..XXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> cake = {"XXX.XXXXX..X.XXXXXXXXXXX.XX.XXXXXXXXXXXXXXXXXXXXXX", "X..XXX.X.....XXX..XXX.X.X...XXXXXXXXXXXXXXXXXXXXXX", "..XX...XX.X.X.X..XXX..X....XXXX..X.XXXXXXXXXXX.XX.", ".XX.X..X.XX..X.XX..X.X..X.XX.XXX.X.XXX..XXX.XXX.X.", "XXXXX......XX.X...XXX.X..X...XXXXXX.XXXXXXX.X.XXXX", "XX.X.................X.....X.X.XX.XX.XX..XXXXXX.XX", "X.....XX.................X.X.X..XXXXX.XXXXX.XXXXX.", "X.X.X..X.XX..X......XXX....X.XX.....X.....XX....XX", "XXXX.......X.....X.......X.XXXXXXXX.XXXXX..XXXXX.X", "X.XXX........................X.XX.XX....XXXXX.XXXX", ".X..X.....X.......X..X.......X..XX.XXXXX....X.XXXX", "X......X..X.X.........X......XX..X.....XXXX.X....X", "X........X...........XX....X..XXXXXXXX..X.XXXXXX..", "..X....XX..XX..X.XXXX.X.X..XXX..X.X..XX.X...XX.XX.", "..XX......X..X.X........X....XXXX.XX..X.XXXXXXXXXX", ".X..X..X.X.........X.......X.XX.XXXXXXXXXXX.X.XXXX", "X...X....X....X.X..X.......X..X.X..X.X....X.XXX.XX", "X..X........X............XX.XXXXXX.X.XXXXXX..XX..X", "X.X.XX..X....X.XX..............X.X.XX.X..XXX.XXXXX", "...X.............X...X.XX.XXXX.X.XX.X.XX...X..XXX.", ".X.........................X.XXX..XXXXXXXX.XX.XXXX", "X.....X.........X..........X...XX......X.X.XXXX.XX", "X.X..XXX......X.X.....X..X.XXX..XXXXXX.X.X...XXX.X", "XXXX....X...X..........X.....XX......XXX.XXX.X.XXX", "XX.X...................X.X...XXXXXXXX.XX...XXXXXXX", "X..X..X...X..X..X..XX.........X.XXXXX..XXX...XXXXX", ".XX.X...X.X..X.........X...XXXX..X.XXX.XXXXXXX.XX.", "XXXX..X.X..XX.XX.XXX.....X.X.XXXXX.XXXX..XX.XXX.XX", "XXX.X.X.XX.....X.....XX......XXXXXXX.XXXXXX..XX.XX", "XXX.X.XXXXXXXX.XXXXX..XXXXX.XXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..X.XX.XX....XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.X..XX.XXXXX....X.XXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXX.XX..X.....XXXX.X....XXXXXXXXXXXXXXXXXXXXXX", "XXX..XX..XXXXXXXX..X.XXXXXX..XXXXXXXXXXXXXXXXXXXXX", "XXXX..XXX..X.X..XX.X...XX.XX.XXXXXXXXXXXXXXXXXXXXX", "XX.XX...XXXX.XX..X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXX.XX.XXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XX.X..X.X..X.X....X.XXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXXXXXXXX.X.XXXXXX..XX..XXXXXXXXXXXXXXXXXXXXXX", "XXX..X....X.X.XX.X..XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.X.XX.X.XX...X..XXX.XXXXXXXXXXXXXXXXXXXXX", "XX.X.XX.XXX..XXXXXXXX.XX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XX.X...XX......X.X.XXXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXX.X.XXX..XXXXXX.X.X...XXX.XXXXXXXXXXXXXXXXXXXXXX", "XXX.X..XXX......XXX.XXX.X.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.XX...XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX...X.XXXXX..XXX...XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX..X.XXX.XXXXXXX.XX.XXXXXXXXXXXXXXXXXXXXX", "XX.XX.XXXXXXX.XXXX..XX.XXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX..XXXXXXX.XXXXXX..XX.XXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> cake = {"XXXX.XXXXX.XXXX.X..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX..XX.XX..XXX.X..XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "X.XXX.XXX.XX.XXX.XX.X....X..XXXX.XXXX.X..XXXXXXXXX", "X..XXXXXX...XXX.X..X.X.....X.XXX.XXXXXXXXXXXX.XXXX", "..XXXX.X..XX.XXX..XX.XXX.XX.XXXXXX.XXX.XX.X.X..XX.", "XX.XX..X..X....X..X.X.X....XXXX..XXXXXX.XXXXXXX.XX", "X.XXX....XX...XX...X.XXX.XX..XXXXX.XXXX.XX.XXXXXX.", "XXXXX.XXX.XX..XX.....XX..X.X.X..XX...XX.XXX.XXX.XX", "X..XXX...X...XX.X.......X.X..XXXXXXXXXX..XXXXXXXX.", "..XXX..X..XX.X.X.XX..X...X..XXX.XX..XXXX...XX.XXXX", "XXXXX.X.....XXX..XXXXX...X....XX.XXXX.XXXX..X.X.X.", "XX...XX...XX.XX...XX..XX...XXX.XXX.XXX.XXXXXX.XXX.", "X..X.XXX..X.X....X.......XX.XX...XXXXX.XXXXXXXXXX.", "XX..XX.....X.......X..XX..XXXXXXXX.XXX..XX..XX..XX", "X.X.X.......X.....X.XXXXXX..XX..XXX..XXX.XX..XXXXX", "XX..X.......X.X.XX..XXX......XX..XXX...X.XXXXXXXXX", "X..X.X..XX.X.XX.XX.XX..X...X..XX..XXXX.XX.XXXXXXX.", "..X.XXXXX.XXXX..XXX..X.XX..XX..XX.X.XXXXX.XXX.X.X.", ".X.XX.......XX...X.XX.X.X..XXXXXXXXXX.XXXXX.XXXXXX", "X.X....X...XX...XXXX.X...XXXXXX.XXXXX.XXX.XX.XXX.X", "X..XXXXXX.X..XXX......X...X...X...XXX..XXXXXXXXXXX", ".X.XXX......X.....X.XX......XXXXXXX.XXXXXX.X.X.XXX", "X.XXX..X.X....X.XXXXX...X..XXXX.X.XXXX...X.XXXX.XX", "X.XXX.X.XX..X..X....XXX..XX...X.X.X..XXXXXXX..XX..", ".XX.XX..X.X..XX..XX.XX.X.X.XXXXXX.XXX.XXXXXXXXXXXX", "X.XXX.X..XXXX...X..X.X....XX..XXXXX.XXX.XXXXX.XXX.", ".X......X.......X..XX.X.XX..XXX.XXXXX.XXX.XXXXXXXX", "XXXX.X...XX....X.X.X....XX....XXXXXXX.XXXXXXXXXXXX", "XXX.XXX.X..XX...XX.XXX.XXX..X.X.XX..X.X.XXX.X.XXX.", "XXXXXXX.XXXXXXXXXX..XXXXXXXX.XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX.XX..XXXX...XX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XX..XXX..XX.XXXX.XXXX..X.X.X.XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.XXX.XXX.XXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXX", "XXXXXX.XX...XXXXX.XXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXX", "XXX..XXXXXXXX.XXX..XX..XX..XXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.XXX..XXX..XXX.XX..XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXX.XX..XXX...X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XX..XX..XXXX.XX.XXXXXXX.XXXXXXXXXXXXXXXXXXXXX", "XXXX.XXX..XX.X.XXXXX.XXX.X.X.XXXXXXXXXXXXXXXXXXXXX", "XX.XX.XXXXXXXXXX.XXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXX.XXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXXXXXXXX", "XXX.XX...X...XXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XXXXXXXXX.XXXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXX.X.XXXX...X.XXXX.XXXXXXXXXXXXXXXXXXXXXXX", "XXX.XXX..X.X.X..XXXXXXX..XX..XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXX.XXXXX.XXX.XXXXX.XXX.XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX.XXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXX.X.XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX.X.X.XX..X.X.XXX.X.XXX.XXXXXXXXXXXXXXXXXXXX."};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX.......................XXXXXXXXXXXXXXXXXXXXXX", "XXXXX......................X.XXXXXXXXXXXXXXXXXXXXX", "X.................................................", "...........................XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX...........................", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX......................XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX...........................XXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> cake = {"XXXX.XXXXXXXXXXXXX.XXXXX.XXXXXXXXXXXXX.XXXXXXXXXXX", "XXXXXXXXXXX.XXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXX.X.XXXXXXXXXX", "XXXXXX.XXXXXX.XX.XXXXXXX.X.XXX.XX.XX.XXXXXXX.XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXX", "XXXXXXXXXXX.XXXXXXXXXXXXX.XXXXX..XX.XXXXXXX.XXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX...XXXXXXXXXXX..X.XX.X.XXXX.XXXXXX.XX.XXXXXXXXX", "XXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X.XXXXXXXXXXXXXXXXX.X..X.XXXXXXXXXXX.XX.XXXXXXXXXX", "XXXXXX.XXXXXX.XX.XXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX..X.XXXXXXXXXXXXXXXX.XX.XXXXXXX", "XX.XX.XXXXX.XXXXXXXXX..XX..XXXXXXXXXXXXX..XXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.XX.XXXXXXXX", "XXX.X.XXXXXXXXXXX.XX..XX.XXXXXXXXXXXXXXX..XXXXXXXX", "XXX..XXXX.XXXXXXXXXXXXX..XXX..XXXXX.XX.XXXXXXX.XXX", "X..XXXXXXXXXXXXX.XXX.X.XXXXXXXXXXXXX.XXX.XXXXXXXXX", "XXXXXXXXXXXXX.XXXXXXX...XXX..XXXX.XXXXXXX.XXXXXXXX", "XXXXXXXX.XXXXXXXXXX....XXXXX.XXXXXX.XXX.XXXXXXXXXX", "XX.X..XXXXXXXXXXXX.XX.XXX.X..XXXXXXXXXX..X.XXXXXXX", "XXXXXXXXXXX.XXX.X.X.XX.XX.X.XXXXX.XXX.X.XXXXXXXXXX", "XX.XXX.X.XXXX..XXXX.XX..XX.X.XXXX..XXXXXXXXXXXXXXX", "XXX..X.XX.XXX.XX..XX.XXX.XXXXXXXXXXX...XXXXXXXXXXX", "XX.XXXXXXXXXXXXX.XXX..XXX.X.XXXX..XXXXXXX.XX.XXXXX", "XXXXXXXXXXX..X.XXXXXX.XX....X.XXXXXX.XX.XXX.XXXXXX", "XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXX", "XXX.X.X.XX.XXXXXX.XX..XXXXXXXXXXXXXXXXXX.XXXXXXXXX", "XXXXXXXXXXXXXX.XX.X.XXXXX...XXX.XX.XX.XXXXXXX.XXXX", "X..XXX.X.XXXX..XXXXXXX.X.XXX.XX.XXXXXX.XXX.XXXXXXX", "XXXXXXXXX.X.XX.X..X.XXXXXXX.XX.X.XXXXXXXXXX.XXXXXX", "XXXXXXXXXXXXXXXXXXX.XX.XXXXXXX.XXXXXXXXXXXXXXXXXXX", "XX.XX.XXXXXXXX.XXXXXX.XX.X.XXXXXXXXXXX.XX.XXXXXXXX", "XXXXXXXXXXXX..XXXX.XXXXXXXXXXXXXXXXXXXX.X.XXXXXXXX", "XXXXXX.X.XX.XXXXXXXX.X....XX...XXXX..XXXXXXXXXXXXX", "XXX..XXXX.XXXXXXXXXXXXXXXXXXXX.XXXXXXXX.XXXXXXXXXX", "XX.X.XXXXXXXXXXX..XX.XXXXXXXXXXXXXXXXXXX.XX.XXXXXX", "XXXXXXXXXXXXXXXXXXXXX.X.XX.XXXXXXXXXXXXXXX.XXXXXXX", "XXXXXXXX.XXXXXXXXXXXXX.XX..X.XXXXXXXXXXXXXXXXXXXXX", "XXXXX.XX.XX.XXX.X.XXXX...XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.X.XXXX...XXX.XXXXXXXXXXXXXXXXXXX", "XX.XXX.X.XXXX..XXXXXXXX.XXXXXXXXXXXXX.XXX.XXXXXXXX", "XXXXXX..XXXX.XXXX.XXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXX", "XXXXX.XXXXXXXXXXXXX.XXX.XXXXX.XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX.XXX.X.XXXX..XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXX.XXXXXXXXXXX", "XXXXX.XXX.X.XXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"XXX.XXXXXXXXXXXXX.XXXXXX", "XXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX.XXXXX", "XXXXX.XXXXXX.XX.XXXXXXX.", "XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX", "XX.X.XXXXXXXXXXX.XX.XXXX", "XXXXXXXXXXXXXXXXXXXXXXXX", ".XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX.XX.XX", "X.XX.XXXXXXXXXXXXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX", "XX..XXXX.XXXXXXXXXXXXXXX", "X.XXXXXXXXXXXXX.XXX.XXXX", "XXXXXXXXXXXXXXXXXXXX.XXX", "XXXXXXX.XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX.X.XXXXX", "X.XXX.X.XXXX..XXXXXXXXXX", "XXXXXXXXXXXXXXXX.XXXXXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> cake = {};
    vector<string> cutter = {};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXX.X.XXXXX.X.XXXXXXXXXXXXXXXXX", "XXX.X.XXXXXXXXXX....X.X.X.XXX.X.X.XXXXXXXXXXXXXXXX", "XX.X.X.XXXXXXXX......X.X.XXXXX.X.XXX.X.XXXXXXXXXXX", "XXX.X.XXXXXXXXXX....X.X.X.XXX.X.X.X.X.X.XXXXXXXXXX", "XX.X.X.XXXXXXXX......X.X.XXXX....XXX.X.XXXXXXXXXXX", "XXX.X.XXXXXXXXXX....X.X.X.XX......X.X.X.XXXXXXXXXX", "XX.....XXXXXXXX......X.X.XXXX....XXX.X.XXXXXXXXXXX", "XX.....XXXXXXXXX....X.X.X.XX......X.X.X.XXXXXXXXXX", "XX.....XXXXXXXX......X.X.XXXX....XXX.X..X.XX.X.XXX", "XX.....XXXXXXXXX....X.X.X.XX......X.X....X..X.X.XX", "XX.....XXXXXXXX......X.X.XXXX....XXX.X..X.XX.X.XXX", "XX.....XXXXXXXXX....X.X.X.XX......X.X....X..X.X.XX", "XX.....XXXXXXXX......X.X.XXXX....XXX.X..X.XX.X.XXX", "XX.....XXXXXXXXX....X.X.X.XX......X.X....X..X.X.XX", "XX.....XXXXXXXX......X.X.XXXX....XXX.X..X.XX.X.XXX", "XX.....XXXXXXXXX....X.....XX.............X..X.X.XX", "XX.....XXXXX.X............XXX.....X.....X.XX.X.XXX", "XX.....XXXX.X.X.....X.....XX.............X..X.X.XX", "XX.....XXXXX.X............XXX.....X.....X.XX.X.XXX", "XX.....XXXX.X.X.....X.....XX.............X..X.X.XX", "XX.....XXXXX.X............XXX.....X.....X.XX.X.XXX", "XX.....XXXX.X.X.....X.....XX.............X..X.X.XX", "XX.....XXXXX.X............XXX.....X.....X.XX.X.XXX", "XX.....XXX....X.....X.....XX.............X......XX", "XX.....XX.X...........X.X.XX....X.X.....X.X.....XX", "XX.X.X.XXX....X.XXXXXX.X.XX......X.......X......XX", "XXX....XX.X.....X.XX....X.XX....X.X.....X.X.....XX", "XX......XX.......X..X....XX......X.......X......XX", "XXX....XX.X.....X.XX....X.XX.X.XX.X.....X.X.....XX", "XX......XX.......X..X....XX.X.X.XX.......X......XX", "XXXX.X.XX.X.....X.XX....X.XX.X.XX.X.....X.X.....XX", "XXX.X.X.XX.......X..X....XX.X.X.XX.......X......XX", "XXXX.X.XX.X.....X.XX....X.XX.X.XX.X....XXXX.X.X.XX", "XXX.X.X.XX.......X..X....XX.X.X.XX....X.XXXX.X.XXX", "XXXX.X.XX.X.....X.XX....X.XX.X.XX.X....XXXX.X.X.XX", "XXX.X.X.XX.......X..X....XX.X.X.XX....X.XXXX.X.XXX", "XXXX.X.XX.X.....X.XX....X.XX.X.XX.X....XXXX.X.X.XX", "XXX.X.X.XX.......X..X....XX.X.X.XX....X.XXXX.X.XXX", "XXXX.X.XX.X.....X.XX....X.XX.X.XX.X....XXXX.X.X.XX", "XXX.X.X.XX.......X..X.X.XXX.X.X.XXX.X.X.XXXX.X.XXX", "XXXX.X.XX.X.X.X.X.XX.X.XXXXX.X.XXXXX.X.XXXX.X.X.XX", "XXX.X.X.XX.X.X.X.X..X.X.XXX.X.X.XXX.X.X.XXXX.X.XXX", "XXXX.X.XX.X.X.X.X.XX.X.XXXXX.X.XXXXX.X.XXXX.X.X.XX", "XXX.X.X.XX.X.X.X.X..X.X.XXX.X.X.XXX.X.X.XXXX.X.XXX", "XXXX.X.XX.X.X.X.X.XX.X.XXXXX.X.XXXXX.X.XXXX.X.X.XX", "XXX.X.X.XX.X.X.X.X..X.X.XXX.X.X.XXX.X.X.XXXX.X.XXX", "XXXX.X.XX.X.X.X.X.XX.X.XXXXX.X.XXXXX.X.XXXX.X.X.XX", "XXX.X.X.XXXXXX.X.X..X.X.XXX.X.X.XXX.X.X.XXXXXXXXXX", "XXXX.X.XXXXXXXX.X.XX.X.XXXXXXXXXXXXX.X.XXXXXXXXXXX", "XXX.X.X.XXXXXX.X.X..X.X.XXXXXXXXXXX.X.X.XXXXXXXXXX"};
    vector<string> cutter = {"X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXX", "XXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.X.XXXXXXXX", "XXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXX", "XXXX.X.XXXXXXXXXXXXXXXXXXXX.X.XXXXXXX.X.X.XXXXXXXX", "XX....X.XXXXXXX.X.XXXXXXXX.X.X.XXXXXXX.X.XXXXXXXXX", "X.X....XXXXXXX.X.X.XXXXXXXX.X.XXXXXXX.X.X.XXXX.X.X", "XX....X.X.X.XXX.X.XXXX.X.X.X.X.XXXXXXX.X.XXXX.X.X.", "X.X....X.X.X.X.X.X.XX.X.X.X.X.X.XXXXX.X.X.XXXX.X.X", "XX....X.X.X.XXX....XXX.X.X.X.X.XXXXXXX.X.XXXX.X.X.", "X.X....X.X.X.X......X.X.X.X.X.XXXXXXX.X....XXX.X.X", "XX....X.X.X.XXX....XXX.X.X.X.X.XXXXXXX....X.X.X.X.", "X.X....X.X.X.X......X.X.....X.XXXXXXX.X....XXX.X.X", "XX....X.X.X.XXX....XXX.......X.XXXXXXX....X.X.X.X.", "X.X....X.X.X.X......X.X.....X.XXXXXXX.X....XXX.X.X", "XX....X.X.X.XXX....XXX.......X.XXXXXXX....X.....X.", "X.X....X.X.X.X......X.X.....X.XXXXXXX.X.....X....X", "XX....X.X.X.XXX....XXX.......X.XXXXXXX....X.....X.", "X.X....X.....X......X.X.....X.XXX.X.X.X.....X....X", "XX....X......XX....XXX.......X.X.X.X.X....X.....X.", "X.X....X.....X......X.X.....X.XXX.X.X.X.....X....X", "XX....X......XX....XXX.......X.X.X.X.X....X.....X.", "X.X....X.....X......X.X.....X.XXX.X.X.X.....X....X", "XX....X......XX....XXX.......X.X.X.X.X....X.....X.", "X.X....X.....X......X.X.....X.XX....X.X.....X....X", "XX....X......XX....XXX.......X.......XX.X.X.....X.", "X.X....X.....X......X.X.....X.XX....XXXX.X..X....X", "XX....X......XX....XXX.......X.......X....X.....X.", "X.X....X.....X......X.X....XXXXX....X.X.....X....X", "XXX.X.X......XXX.X.XXX....X.XXX......X....X.....X.", "XXXX.X.X.....XX.X.X.X.X....XXXXX....X.X.....X.X.XX", "XXX.X.X..X.X.XXX.X.XXXX.X.X.XXX......X....X..X.XXX", "XXXX.X.XX.X.XXX.X.X.XXXX.X.XXXXX....X.X.....X.X.XX", "XXX.X.X..X.X.XXXXXXXXXX.X.X.XXX......X....X..X.XXX", "XXXX.X.XX.X.XXXXXXXXXXXX.X.XXXXX....X.X.X.X.X.X.XX", "XXX.X.X..X.X.XXXXXXXXXX.X.X.XXX......X.X.XXX.X.XXX", "XXXX.X.XX.X.XXXXXXXXXXXXXXXXXXXX....X.X.X.X.X.X.XX", "XXX.X.X..X.X.XXXXXXXXXXXXXXXXXX......X.X.XXX.X.XXX", "XXXX.X.XX.X.XXXXXXXXXXXXXXXXXXXX....X.X.X.X.X.X.XX", "XXX.X.X..X.X.XXXXXXXXXXXXXXXXXX......X.X.XXXXXXXXX", "XXXX.X.XX.X.XXXXXXXXXXXXXXXXXXXX....X.X.X.XXXXXXXX", "XXX.X.X..X.X.XXXXXXXXXXXXXXXXXX......X.X.XXXXXXXXX", "XXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXX.X.XX.X.X.XXXXXXXX", "XXX.X.X.XXXXXXXXXXXXXXXXXXXXXXX.X.X.XX.X.XXXXXXXXX", "XXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXX.X.XX.X.X.XXXXXXXX", "XXX.X.X.XXXXXXXXXXXXXXXXXXXXXXX.X.X.XX.X.XXXXXXXXX", "XXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXX.X.XX.X.X.XXXXXXXX", "XXX.X.X.XXXXXXXXXXXXXXXXXXXXXXX.X.X.XX.X.XXXXXXXXX", "XXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.X.XXXXXXXX", "XXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.X.XXXXXXXX"};
    vector<string> cutter = {"X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.X.XXXX.X.XXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXX", "XXXXXXX.X.X.XX.X.X.XXXXXXXXXXXXXXXXXXX....X.XXXXXX", "XXXXXXXX.X.XXXX.X.XXXXXXXXXXXXXXXXXXX.X....XXXXXXX", "XX.X.XX.X.X.XX.X.X.XXXXXXXXXXXXXXXXXXX....X.XX.X.X", "X.X.X.XX.X.XXXX.X.XXXX.X.XXXXXXXXX.X..X....XX.X.X.", "XX.X.XX.X.X.XX.X.X.XX.X.X.X.X.XXX.X.X.....X.XX.X.X", "X.X.X.XX.X.XXXX.X.XXXX.X.X.X.X.XXX.X..X....XX.X.X.", "XX.X.XX.X....X.X.X.XX.X.X.X.X.XXX.X.X.....X.XX.X.X", "X.X.X.XX....X.....XXXX.X.X.X.X.XX.....X....XX.X.X.", "XX.X.XX.X..........XX.X.X.X.X.XX..........X.XX.X.X", "X.X.X.XX....X.....XXXX.X.X.X.X.XX.....X....XX.X.X.", "XX.X.XX.X..........XX.....X.X.XX..........X.XX.X.X", "X.X.X.XX....X.....XXX..........XX.....X....XX.X.X.", "X....XX.X..........XX..........X..........X.XX.X.X", "......XX....X.....XXX..........XX.....X....XX.X.X.", "X....XX.X..........XX..........X..........X.XX.X.X", "......XX....X.....XXX..........XX.....X....XX.X.X.", "X....XX.X..........XX..........X..........X.X....X", "......XX....X.....XXX..........XX.....X....X......", "X....XX.X..........XX..........X..........X.X....X", "......XX....X.....XXX..........XX.....X....X......", "X....XX.X..........XX..........X..........X.X....X", "......XX....X.....XXX..........XX.....X....X......", "X....XX.X..........XX..........X..........X.X....X", "......XXX.X.X.....XXX..........XX.....X.X.XX......", "X....XXXXX.X.......XX..........X......XXXXXXX....X", "......XXX.X.X.....XXX..........XX....XXXXXXX......", "X.X.XXXXXX.X.......XX..........X......XXXXXXX.X.XX", ".X.X.XXXX.X.X.....XXX.X.X......XX.X.XXXXXXXX.X.X.X", "X.X.XXXXXX.X.......XXX.X.X.X.X.X.X.X.XXXXXXXX.X.XX", ".X.X.XXXX.X.X.....XXX.X.X.X.X.XXX.X.XXXXXXXX.X.X.X", "X.X.XXXXXXXXX......XXX.X.X.X.X.X.X.X.XXXXXXXX.X.XX", ".X.X.XXXXXXXXXX.X.XXX.X.X.X.X.XXXXXXXXXXXXXX.X.X.X", "X.X.XXXXXXXXXX.X.X.XXX.X.X.X.X.XXXXXXXXXXXXXX.X.XX", ".X.X.XXXXXXXXXX.X.XXX.X.X.X.X.XXXXXXXXXXXXXX.X.X.X", "X.X.XXXXXXXXXX.X.X.XXXXXXX.X.X.XXXXXXXXXXXXXX.X.XX", ".X.X.XXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXX.X.X.X", "XXXXXXXXXXXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXX.X.XX", "XXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXX.X.X.X", "XXXXXXXXXXXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXX.X.XX", "XXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXX.X.X.X", "XXXXXXXXXXXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX.X.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX."};
    vector<string> cutter = {"X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> cake = {"X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> cake = {"X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX...XXXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "..........................X.....................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "X....XX....XX....XX....XX....XX....XX....XX....XXX", "................................................XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> cake = {};
    vector<string> cutter = {"X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X.....................................", "XXXXXXXXXX.X.XX....XX....XX....XX....XX....XX....X", "XXXXXXXXX.X.X....................................X"};
    vector<string> cutter = {"X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X.", "X.X.X", ".X.X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....XXXXXXXXX", "X.....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "X.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "X.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "X.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "X.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "X.XXX.XXXXXXXXXXXXXXX.....XXXXXXXXXX.XXX.XXXXXXXXX", "X.XXX.XX.....XXXXXXXX.XXX.XXXXXXXXXX.XXX......XXXX", "X.XXX.XX.XXX.XXXXXXXX.XXX.XXXXX......XXX..XXX.XXXX", "X.XXX.XX.XXX.XXXXXXXX.XXX.XXXXX.XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXXXXXXX.XXX.......XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX......XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "X.XXX.XX.XXX.XXX.XXX..XXX..XXX..XXX.......XXX.XXXX", "X.....XX.XXX.XXX.XXX..XXX..XXX..XXX.XXXXX.XXX.XXXX", "XXXXXXXX.XXX.XXX.XXX..XXX..XXX..XXX.XXXXX.XXX.XXXX", "XX.....X.XXX.XXX.XXX..XXX..XXX..XXX.......XXX.XXXX", "XX.XXX.X.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "XX.XXX.X.XXX.XXX.XXX..XXX..XXX..XXX..XXX..XXX.XXXX", "XX.XXX.X.XXX.XXX.XXX.......XXX..XXX..XXX..XXX.XXXX", "XX.XXX.X.....XXX.XXX.XXXXX.XXX..XXX..XXX......XXXX", "XX.XXX.XXXXXXXXX.XXX.XXXXX.XXX.......XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXX.XXX.XXXXX.XXX.XXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXX.XXX.XXXXX.....XXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXX.....XXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXX", "XX.....XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.....XXXXXXXXX"};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> cake = {".....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.X.....XXXXXX.XXX.XXXXXXXXX.....XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXXXXXXX.XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXXXXXXX.XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXXXXXXX.XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX......XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXXXXXXXXXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXX.....XXXXX", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXX.XXX......", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.XXX.XXXXXX.XXX.XXXX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.XXX.X......XXX.XXXX.XXX..XXX.XXXX.XXX..XXX.", ".....X.XXX.X.XXX..XXX.XXXX.XXX..XXX.XXXX.XXX..XXX.", "XXXXXX.XXX.X.XXX..XXX.XXXX.XXX..XXX.XXXX.XXX..XXX.", ".....X.XXX.X.XXX......XXXX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.XXX.X.XXX.XX.....XX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.XXX.X.XXX.XX.XXX.XX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.XXX.X.XXX.XX.XXX.XX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.XXX.X.XXX.XX.XXX.XX.XXX..XXX.XXXX.XXX..XXX.", ".XXX.X.....X.XXX.XX.XXX.XX.XXX......XXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XX.XXX.XXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XX.XXX.XXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XX.XXX.XXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XX.....XXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXX.XXX...XX.", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXX.XXX..XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXX......XXX.", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXXXXXXX.....", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXX.XXX.XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXX.....XX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".XXX.XXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", ".....XXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX.....XXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "..................................................", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", "..................................................", "..................................................", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".................................................."};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "..................................................", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX...XX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", "..................................................", "..................................................", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX..XXX.", ".................................................."};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> cake = {};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> cake = {};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> cake = {};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> cake = {};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<string> cake = {};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<string> cake = {};
    vector<string> cutter = {".....", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", ".XXX.", "....."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    vector<string> cake = {"X.XXXXXXXXXXXXXXX.X.XXXX.XXX.XX.XXXXXX.XXXXXXXXXXX", "XXX..XXXX..XXX.X....XXXXXXX..XXXXX.XX.XXX.XXX.XXXX", ".XXXX.X.XXXXXXX.XXXXXXX...XXX.X.X.XXXXXXXXXXX.XXXX", "X..XXXX.X.XX.XXXXXXX.XXXXXXX.XXXXXX..XXXXXX.XXXXXX", "XX.XX.X..XXXXX.XX.XXXXXXXX.X...XXXX.X..X.XXXX.XXXX", "XXXXX.....XX.XX.XX..XX.XX..XXXXX.XXXXXXXX..XX.XXXX", "XXXXXXXXX.XXXXXXXXX.XXXX.XXX.XX.XXXXXX.X.XX..XXXXX", ".X.XX.X.XX.XXXX.XXXXXXXXX.XX.XX.XXX.XXXXX..XXXXXXX", "X..X.X.XXXX.XX.XXXX.XXX..XX.X..X..XXXX..XXXXX.XXXX", "XXXXXX.XXXXXXXX.XX.XXXXXXX...X..XX.X.X.XXX.XXXXXXX", "XXX.X.XX.XXXX.X.X..X.XXXX..XXX...XX.X.X.XXX..XXXXX", "XXXXXX.XXXXX..XXXXXXXXXXXXXXXX..XXXXXXXX..XXXXXXXX", "..XXXX.XXXXXXXXXXXXXXXXX.XX.XXXX.X.X..XXXXX.XXXXXX", "XXXXX..XX..XXXXXX...XXX.XXX.XXXX.XX..XXXXXXXXXXXXX", "XX.XXXXXXXXXX.XXXXXXX..X.XXXXXXXX.X.X.XX.XXX.XXXXX", "XX.X.XXXX..XXXXXX..XXXXXXXX.X.XXXXXX.X.XXXXXXXXXXX", "XX.XXXX.XXXX.X.XXX.XX.XXXXX.XXX.XXXXXX.XXX.X.XXXXX", "XXX.XXXXXX.XXXXXXXXX.XXXXX.XXXXXXXXXX.X..XXXX.XXXX", "XX.X.XX.XXXXX.XXXXXXX.XXX.X..XX.XXXX.XXXX.XX.XXXXX", "XXXXXXXX.XXXX.XXXXXXXXXXX.XXXXXX.X.X..X.X.XXXXXXXX", "XXX.X.XXXXX...XXX.XX....XXXXXXXXXXX.XX.X.XX.XXXXXX", "XXX.XXX..XXXXXXXXXXXXXXXXX.X.XXXXXXX.X.XXX.X..XXXX", "XX..XXXX..XX.X.XXXX..XXXXXXX.XXXXXXX.XXXX.XX.XXXXX", "..X.X.XX.X.XX.XXXXX.X.X.XX...XXX..X.XXXXXX.XXXXXXX", "XX.XX.X...X.X...XX......X...X....XXXX...X.XXX.XXX.", "XX.X.X.XX.X..XXX..X.X.X.XX....XX..X...XXX..XXXXXX.", "XXXX....XX..X.XX..XXXXXX.X.XXX.X.XXXXXX..X.X.XX.XX", "XXXXXX.XX.X..XXXXX.XX.XXXXXXXX.X...XXXX.X..X.XXXX.", "XXXXXXXXX.....XX.XX.XX..XX.XX..XXXXX.XXXXXXXX..XX.", "XXXXXXXXXXXXX.XXXXXXXXX.XXXX.XXX.XX.XXXXXX.X.XX..X", "XXXX.X.XX.X.XX.XXXX.XXXXXXXXX.XX.XX.XXX.XXXXX..XXX", "XXXXX..X.X.XXXX.XX.XXXX.XXX..XX.X..X..XXXX..XXXXX.", "XXXXXXXXXX.XXXXXXXX.XX.XXXXXXX...X..XX.X.X.XXX.XXX", "XXXXXXX.X.XX.XXXX.X.X..X.XXXX..XXX...XX.X.X.XXX..X", "XXXXXXXXXX.XXXXX..XXXXXXXXXXXXXXXX..XXXXXXXX..XXXX", "XXXX..XXXX.XXXXXXXXXXXXXXXXX.XX.XXXX.X.X..XXXXX.XX", "XXXXXXXXX..XX..XXXXXX...XXX.XXX.XXXX.XX..XXXXXXXXX", "XXXXXX.XXXXXXXXXX.XXXXXXX..X.XXXXXXXX.X.X.XX.XXX.X", "XXXXXX.X.XXXX..XXXXXX..XXXXXXXX.X.XXXXXX.X.XXXXXXX", "XXXXXX.XXXX.XXXX.X.XXX.XX.XXXXX.XXX.XXXXXX.XXX.X.X", "XXXXXXX.XXXXXX.XXXXXXXXX.XXXXX.XXXXXXXXXX.X..XXXX.", "XXXXXX.X.XX.XXXXX.XXXXXXX.XXX.X..XX.XXXX.XXXX.XX.X", "XXXXXXXXXXXX.XXXX.XXXXXXXXXXX.XXXXXX.X.X..X.X.XXXX", "XXXXXXX.X.XXXXX...XXX.XX....XXXXXXXXXXX.XX.X.XX.XX", "XXXXXXX.XXX..XXXXXXXXXXXXXXXXX.X.XXXXXXX.X.XXX.X..", "XXXXXX..XXXX..XX.X.XXXX..XXXXXXX.XXXXXXX.XXXX.XX.X", "XXXX..X.XXXX.X.XX.XXXXX.XXXXXX..XXXXX.XXXXXXXXXXXX", "XXXXXX.XX.XXX.X.XXX.XXX.XXXXX...X..XXXXXX.X.XXXXXX", "XXXXXX.XXX.XXXXX.XXX..XXX.X.XX.XXXXX.XXX.XXXX..XXX", "XXXXXXXX.XX.XX.XXXXXX.XXXXXXXX.XXX.XXXXXXXXXXX.X.X"};
    vector<string> cutter = {".XXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    vector<string> cake = {".XXX.XXXXXXXX.X.XXXX.XXXX.XX..XXXX.XXXX.XXXXXXXXXX", "XXX.X.XXXXX.XXXXXXXXXXXXXXXX.X..XXXXX.XXXXX.X.XXXX", "XXXX.XXXXX.XXX.XXX.XXXXXXX.XXXXXXXXX..XXXX.XXXXXXX", ".XXXXXXXXXX..XXX..XXXX.XXXXXXX..XXXX.XXX.XXX.XXXXX", ".X.XX.XXXXXX.XX.X.XXX.X..XXXXXXXXXXXX.XXXXXXX.XXXX", "XXXXX..XXXXX.XX.XX..XXXXXXXXXXX.XX..XX..XX.X.XXXXX", ".X.XXXX.XXX.XX.XX.XXXXX.X.XXXX..X...XXX...XXXXXXXX", ".XXX..X.X.X.XX.X.X.X.XXXXXXXX.XXX.XX.X.XXXX.XXXXXX", ".XXX.X.XXXXXXX.XXXX.XXX.X.X.XX.XX.XXXXXXXX..XXXXXX", ".X..XXXX.XX.XXX.XX.X.XX.XXXXXXXXXXX.X.XX.XXX.XXXXX", ".XX.XXX..XXXX.XXXXXXXXXXX..XXXXXXXXXXXXXXX.XXXXXXX", "X.X.XXXX.XXX....XXXXXX.XXXXXXXXXXXX.X..XXXXXXXXXXX", ".XXX.XX.XXXXX.XXX.XXXXXX.XXX.X.XX.X.XXXXX.XXXXXXXX", "X.X.XX.XXXXXX.X.XXXXX.XXXX.XXXXXXX..X.XX.XXXXXXXXX", "XXXXXXX.XXXXX.XX..XXXXXX..XXXX.XXXX..XX.XXX.XXXXXX", ".XXXXXXXX.XXX..XX...XX.X..XXXXXXXXX.XXXXXXXXXXXXXX", ".XXX..XXXX.X.XXXXXX.XXXX..X.XX.X.XXXX.XXXXXXXXXXXX", "...XXXXXXX..XXX.X.XX.XXXX.XXXXXXXXX.XXXXXXXX.XXXXX", "XXXXXXX.XXX.XX..XX..XXXX..X.XXX.X.XXXXX.XX....XXXX", ".X..XX.X.XX.X.X.XX..XX.XXXXXXXXXXXXXXXX.XXXXXXXXXX", ".X.XXXXX.XX.XXXXXXXXX.XXX..XXXXX.XXXXXX.XXXX.XXXXX", "..XXXXXX.XX.X.XXXXXX.X.X.XXXXX..XXXXXX.XXXX.XXXXXX", "XXX...XX.XX.XXXXX..X....XXXXXXXXXXXXXX.XX.XXX.XXXX", "XXXX...X.X.XXXX.X.X.XXXX..XXX..X..XX.X...XX.X.XXXX", ".XX.XX.....XX......XX.X.XXXXXXX..X..X..XX.XXX.X.X.", "XXXX.XXX..XXXX.XX..X.X..XXX..X...XX.XXXX..XX.X.XXX", "XXXX.XXXXXXXXXX..XX...XXXX.X.XXX.X..XXX..XXX..XX.X", "XXXX.X.XX.XXXXXX.XX.X.XXX.X..XXXXXXXXXXXX.XXXXXXX.", "XXXXXXXXX..XXXXX.XX.XX..XXXXXXXXXXX.XX..XX..XX.X.X", "XXXX.X.XXXX.XXX.XX.XX.XXXXX.X.XXXX..X...XXX...XXXX", "XXXX.XXX..X.X.X.XX.X.X.X.XXXXXXXX.XXX.XX.X.XXXX.XX", "XXXX.XXX.X.XXXXXXX.XXXX.XXX.X.X.XX.XX.XXXXXXXX..XX", "XXXX.X..XXXX.XX.XXX.XX.X.XX.XXXXXXXXXXX.X.XX.XXX.X", "XXXX.XX.XXX..XXXX.XXXXXXXXXXX..XXXXXXXXXXXXXXX.XXX", "XXXXX.X.XXXX.XXX....XXXXXX.XXXXXXXXXXXX.X..XXXXXXX", "XXXX.XXX.XX.XXXXX.XXX.XXXXXX.XXX.X.XX.X.XXXXX.XXXX", "XXXXX.X.XX.XXXXXX.X.XXXXX.XXXX.XXXXXXX..X.XX.XXXXX", "XXXXXXXXXXX.XXXXX.XX..XXXXXX..XXXX.XXXX..XX.XXX.XX", "XXXX.XXXXXXXX.XXX..XX...XX.X..XXXXXXXXX.XXXXXXXXXX", "XXXX.XXX..XXXX.X.XXXXXX.XXXX..X.XX.X.XXXX.XXXXXXXX", "XXXX...XXXXXXX..XXX.X.XX.XXXX.XXXXXXXXX.XXXXXXXX.X", "XXXXXXXXXXX.XXX.XX..XX..XXXX..X.XXX.X.XXXXX.XX....", "XXXX.X..XX.X.XX.X.X.XX..XX.XXXXXXXXXXXXXXXX.XXXXXX", "XXXX.X.XXXXX.XX.XXXXXXXXX.XXX..XXXXX.XXXXXX.XXXX.X", "XXXX..XXXXXX.XX.X.XXXXXX.X.X.XXXXX..XXXXXX.XXXX.XX", "XXXXXXX...XX.XX.XXXXX..X....XXXXXXXXXXXXXX.XX.XXX.", "XXXXXXXXX..XXX.XXXX.XXXXXXXXX.XXXX.XXXXX.XX..XXXX.", "XXXX.XX.XX.X.X.XX..X...XX.X.XXXXXXX.XXXXX..XXXXXX.", "XXXXXXXX.XXXX.XXXXXXX.XX.XX.XXX..XX..XX.XXXXXXXX.X", "XXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX.XXX.XXXXXX.XXXXXX"};
    vector<string> cutter = {".XXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    vector<string> cake = {"X....XX.X.XXX..XX.XXX.XX.XXXXXXX.XXXXXXX.X.XXXXXXX", "XX.XXXXX.XXXXX.XXXXXXXXXXXX.XXXXXXXX..XXXXXXXXXXXX", "X.XXXXXX.XXX.XXXXXXXXXXXXXXXXXXX.XX.XXXXX.X.XXXXXX", "X.XXXXXXX.XXXXXXXXXXX.XXXXXXXX.XXXX..XXX.XXXXXXXXX", "XXX.X..X.XXXX.X.XXX..XXXX..XXX.XXXX.X.X.XXXXX.XXXX", ".X..XXXXX.XXXXXXXX.XX.XXX.XXXXXXXXXXX.XXXXXX.XXXXX", "XXXX..X..XXXX.XXX.XXXXXXX.X.XX.X..XXXXX..XXX..XXXX", "...XXXXXXXXXXXX.X..XXXX.XXX.XXXXX.X.XXX.X.XX.XXXXX", "XXXXXX.XX.X.X.XXX.XXXXXX...XXX.XXX..X.X.X.X.XXXXXX", "X.XX.XXXXX.XXXXXXXXXXXXX.XXXXXX.XXXXX.XX.XXXXXXXXX", "XXXXXX..XX.XX..X...XXX..XXXXXXXXXX.X.XXXXX.XXXXXXX", ".XX...XXXX..X.XX..XXXX.XXXX..X.XXXXX.XXXXXX.XXXXXX", ".XXXX.XXXX.XXXXXXXXXXXXX.X.XXXXXXXXXXX...X..XXXXXX", "XXXX.XXX.XX..XX.XXXXXXXX.XX.XX.X.XXXXXX...X.XXXXXX", "XXXXXXXXXX..X.XXXXX.XXXXXXX.XX.XXXXXX..XXXXX.XXXXX", "X.XX..XX..XXXXX.XXX.XXXXXXXXXX.XXX..XXXXX.XXXXXXXX", "XXXXX.XX.XXXXX.XXXXXXX.X.X.XX.XXXXX..XXX..X.XXXXXX", ".XX.XX..XX.X.X.XXXXX.XXX.XX.X.X.XXXX.XXXXXXX.XXXXX", "XXXX..XXXX...X..XXXXXXXX.XXXXXXXXXXXX..XXXX.XXXXXX", "XX.XXX..X..XXXXX.XXXXXXXX.X..X..XX...XXXXXX..XXXXX", "XXX..XXXXXX.XXXXXXX.X.X.XXXXXXXXXXXXX.X..XXXX.XXXX", "XXX.XXXX.XX.X.XXXXXXX.XXXXXXXXXXX.XX..XXXXXXXXXXXX", "XXXX.X..XX.XX.X.....XXXX.X.XXX.XX.XX.XX.XX.XXXXXXX", "XXXXX.........XX......XX..XX.XXXX.XX.X..XXXX.X.XXX", "XXXX.X.X.XXX..X.X...X.XX.X.XXXX.XXXXXXX...XXXXXXXX", "XX.XX...XXX..XXX.XXXX.X...XXXXXXXXXX.XX.X.XX..X.XX", "XXXXX.XX.XXX..XXXXX.X..X..XX.X...X...XX...X..XXXXX", "XXXXXXX.X..X.XXXX.X.XXX..XXXX..XXX.XXXX.X.X.XXXXX.", "XXXX.X..XXXXX.XXXXXXXX.XX.XXX.XXXXXXXXXXX.XXXXXX.X", "XXXXXXXX..X..XXXX.XXX.XXXXXXX.X.XXXX..XXXXX..XXX..", "XXXX...XXXXXXXXXXXX.X..XXXX.XXX.XXXXX.X.XXX.X.XX.X", "XXXXXXXXXX.XX.X.X.XXX.XXXXXX...XXX.XXX..X.X.X.X.XX", "XXXXX.XX.XXXXX.XXXXXXXXXXXXX.XXXXXX.XXXXX.XX.XXXXX", "XXXXXXXXXX..XX.XX..X...XXX..XXXXXXXXXX.X.XXXXX.XXX", "XXXX.XX...XXXX..X.XX..XXXX.XXXX..X.XXXXX.XXXXXX.XX", "XXXX.XXXX.XXXX.XXXXXXXXXXXXX.X.XXXXXXXXXXX...X..XX", "XXXXXXXX.XXX.XX..XX.XXXXXXXX.XX.XX.X.XXXXXX...X.XX", "XXXXXXXXXXXXXX..X.XXXXX.XXXXXXX.XX.XXXXXX..XXXXX.X", "XXXXX.XX..XX..XXXXX.XXX.XXXXXXXXXX.XXX..XXXXX.XXXX", "XXXXXXXXX.XX.XXXXX.XXXXXXX.X.X.XX.XXXXX..XXX..X.XX", "XXXX.XX.XX..XX.X.X.XXXXX.XXX.XX.X.X.XXXX.XXXXXXX.X", "XXXXXXXX..XXXX...X..XXXXXXXX.XXXXXXXXXXXX..XXXX.XX", "XXXXXX.XXX..X..XXXXX.XXXXXXXX.X..X..XX...XXXXXX..X", "XXXXXXX..XXXXXX.XXXXXXX.X.X.XXXXXXXXXXXXX.X..XXXX.", "XXXXXXX.XXXX.XX.X.XXXXXXX.XXXXXXXXXXX.XX..XXXXXXXX", "XXXXXXXX.X..XX.XX.X.....XXXX.X.XXX.XX.XX.XX.XX.XXX", "XXXXXXXXXXXXX..X.XXX.XX..XXX.XXXXXXXX.XXXX..XXXXXX", "XXXXXXXX.XXX.XXXX.X.X.X.X.XX.X.XXXXXXXXXXXX.XXXXXX", "XXXXXX.XXX..XXX.XXXXXXXXX.X...XXXXXXXXXXXXXXX.XX.X", "XXXXXXXXXXXX.XXX.XXXXXX.X..X.XXX.X...XX..XXXX.X.XX"};
    vector<string> cutter = {".XXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    vector<string> cake = {"..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..............................................XXXX", "..................................................", "..................................................", "..................................................", "..................................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX..............................................", "XXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX....XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {".XXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    vector<string> cake = {};
    vector<string> cutter = {".XXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    vector<string> cake = {};
    vector<string> cutter = {".XXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    vector<string> cake = {};
    vector<string> cutter = {".XXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test160() {
    vector<string> cake = {"XXXX.XXX.XX.XXXXX.X.XX.XXXX...XX.XXXXX.X.XX.X.XX..", "XXXXX.XXX.X.X.X...XX.XX.....X...XXXXXXXX..XXXXXXX.", "XXXXXX.XX.X...XXX..XXX..XXX.X.XXXXXXXX..X.XX.X.X.X", "XXXXX.X.XXXX.XX.XX.X....XX.XXXXX..XXXX.X..XX.XX.XX", "XXXXXXXXX.X....XXX.XX..XXX.X.X.X....X..XX.XX..XXXX", "XXXX.X...X.X.....XXXX.XX.X.XXX..XXXX.X.XXXXX...XXX", "XXXX..XX..XXX..X....X.X...X.XX..XXXX...XXXX..X...X", "XXXXXXXX....XX.XX.XXXXX..XXXX..XX....X...X...XX...", "XXXX.XX..X.XXX.XXX....X...XXX.XX...XXXX..XXXXX.XX.", "XXXXXX.XXX.X.X..XXX..XXXX.X....XXX..X.X.XX...XX..X", "XXXXX.XX..X....XXXXXX.X......XXX.....XX.XX.XXX..XX", "XXXXXX..X..XXXXXX.XXX..X.X..X.XX.X.XXX.XXXX...XXX.", "XXXX..X.X..XXXXXX.X.X.X.X.XXXXXX.X...XXX..XX..XXX.", "XXXX..XXXXXXXX.X....X..X.X...X.X.X.XX.XX..XX.XXXX.", "XXXX.......X...X..XXX.XX.XX...X..XX.XX...XXX.XX..X", "XXXXXX..XXXXX.XX...XX.XX....XX....X..XXXX....XX.X.", "XXXX...XXX.XX....XX..XX..XXX.X.X.X..XXXXX..XX..XXX", "XXXX.X.XXXX.X.X..XX...X..XXXX..X..X.XX.XX..X.XX.X.", "XXXX....XX..X.....X......XXXX....XXX..X...XX..XX.X", "XXXX.XXXXXXX.XXX.X....X...X...X..XX..XXXXXXXXXX.X.", "XXXX.X.X.X...XX.X..X..X.X..XXXX..XXX.X..XXXXX.XX..", "XXXX...X.X.X..X.XX.XXXX.X..XX...XX..X.XX..XXXXX...", "XXXX..XX..XX.X..X..XX...XXX..X.X..X....X.XXXXX.XX.", ".XXX.XX.X..X....XX....X.........X....XX...XX...X.X", "X.XXX............X...........X....X...XX..XXX..XXX", "XX.XX.....XXX....X..X...X..XX...X...X.XX...X.X...X", "X.X.........X..X.......XX.X........X.....X...XXX.X", "XXXXX.X....XXX.XX..XXX.X.X.X....X..XX.XX..XXXXXXXX", ".X...X.X.....XXXX.XX.X.XXX..XXXX.X.XXXXX...XXXXXXX", "..XX..XXX..X....X.X...X.XX..XXXX...XXXX..X...XXXXX", "XXXX....XX.XX.XXXXX..XXXX..XX....X...X...XX...XXXX", ".XX..X.XXX.XXX....X...XXX.XX...XXXX..XXXXX.XX.XXXX", "XX.XXX.X.X..XXX..XXXX.X....XXX..X.X.XX...XX..XXXXX", "X.XX..X....XXXXXX.X......XXX.....XX.XX.XXX..XXXXXX", "XX..X..XXXXXX.XXX..X.X..X.XX.X.XXX.XXXX...XXX.XXXX", "..X.X..XXXXXX.X.X.X.X.XXXXXX.X...XXX..XX..XXX.XXXX", "..XXXXXXXX.X....X..X.X...X.X.X.XX.XX..XX.XXXX.XXXX", ".......X...X..XXX.XX.XX...X..XX.XX...XXX.XX..XXXXX", "XX..XXXXX.XX...XX.XX....XX....X..XXXX....XX.X.XXXX", "...XXX.XX....XX..XX..XXX.X.X.X..XXXXX..XX..XXXXXXX", ".X.XXXX.X.X..XX...X..XXXX..X..X.XX.XX..X.XX.X.XXXX", "....XX..X.....X......XXXX....XXX..X...XX..XX.XXXXX", ".XXXXXXX.XXX.X....X...X...X..XX..XXXXXXXXXX.X.XXXX", ".X.X.X...XX.X..X..X.X..XXXX..XXX.X..XXXXX.XX..XXXX", "...X.X.X..X.XX.XXXX.X..XX...XX..X.XX..XXXXX...XXXX", "..XX..XX.X..X..XX...XXX..X.X..X....X.XXXXX.XX.XXXX", "XXXXX..X.X.XXXX...XXXX..X...X.X.XXXX.XXXXX.X.XXXXX", "XX.X.X.XXX..XX.XXXXX.XXX.X....X.XXXX..XXXX.XXXXXXX", "XX.XXXXXXXX..XXXX..XXX.XX...X.XXXXXXX.XXXX...XXXXX", "....X..XX.XXXXXX..XXX.X.XX....XXXX..XX.X.XXX.XXXXX"};
    vector<string> cutter = {"XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", ".XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 160: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 160: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test161() {
    vector<string> cake = {"XXXX.XX.XXX.X.XXXXXXXXXX.XXX.XX.XXXXXXXX..XXX.XXXX", "XXXXXXXXXXXXX...XX.X..XXXXXXX.XXXXXX.X..XXX..X.X.X", "XXXXX.XXXXXX..XXXXX.XXXXXXX.XX..X.X..XX.X.XXX.X.XX", "XXXX.X.XX.XXXXXX.XXX.X.XX..XXX.XX.XXXX.XXXXXXXXX.X", "XXXXXXX.XXX..X.XXXXX.XXXX..XXX.XXX.XX...XXX.X.X.X.", "XXXXXXXXXXXX.X.XXXX...XXXX.XX.XXX.XXXXXX.X.XX...XX", "XXXXXXXX.X.X.XX..XX..X.XXX.XX.XXX.XXXXXXX..X.XXX.X", "XXXXXXXX.XXXXX.XX.XX..X..XXXXX.XXX.XXXXXX.XXXX.XXX", "XXXXXXXX.X.XX.XX.XXX.X...XXXX...X.X......XX..XXXXX", "XXXX.XXX.XXXXXXXXXXXX.XXXXX.XXX..X.XXXXXXXX.XX.XXX", "XXXXXX..X.XXXX..X.XXXX.XX..X.X.X..X.XX.XXXXXXXX.XX", "XXXX.X.XX.XXX.XXXXXX.XXX..XX.XXX.XXX..XXX.XX.XX.XX", "XXXXXXXX..XXX.XX..XXX..XXXX..XXXXXXX.XX.XXXXXXX.XX", "XXXX...X.XXXX..XXXX.X..X...XX.....XXX.XXXXX...X.XX", "XXXXXX.X.X.XXX.XXXX.XXX.XXXXXX.XXXX..X.XXXXXXXXXXX", "XXXXX.X.X.XXXXXXX.XX.XXXXXXXXX..XXXXXX.X.XXXXXX.XX", "XXXX.XX.X.XXXX...XX.XXXXX.XXXX.XX...XXXXX.X.XX..X.", "XXXXX.XXXXXXXXXXXXXX..XX..X.XXX...X..X.XXXXXX...XX", "XXXX.XXXX.XXXXXX.XXXXXXX...X.X...XX..XXX....XX.X.X", "XXXX.X...XX.XXXX.XXXX.XX.XX...X.X..X...XXXX.XXXX.X", "XXXX.XX..X..XXX.XXXXX..XXXXXXXXXXXXXX.XX.XXX...XXX", "XXXX.XXX.X.XXXXXXXXXXXX.XXXX.XXXX.XX..X.XXXXX.XX..", "XXXX.X.XX.....XX.XX..XXXX.XX.XX.XXXXXXXX.XXX.XXX.X", ".XX.XX..X.XX.X..XX.X.....X...X...XX...XXX..X.XXXXX", "XXXXXX.XX...XX....XXX...X.....X..X...XX..X......XX", "X.XXX..X...X.XX..X.XXX...X....X..X..X.XXX.X.X.XXXX", ".X.XX.XX..XX.XXX.X..X...XX..X..X...XXXXXXXXX.X..X.", "XXX.XXX..X.XXXXX.XXXX..XXX.XXX.XX...XXX.X.X.X.XXXX", "XXXXXXXX.X.XXXX...XXXX.XX.XXX.XXXXXX.X.XX...XXXXXX", "XXXX.X.X.XX..XX..X.XXX.XX.XXX.XXXXXXX..X.XXX.XXXXX", "XXXX.XXXXX.XX.XX..X..XXXXX.XXX.XXXXXX.XXXX.XXXXXXX", "XXXX.X.XX.XX.XXX.X...XXXX...X.X....X.XX..XXXXXXXXX", ".XXX.XXXXXXXXXXXX.XXXXX.XXX..X.XXXXXXXX.XX.XXXXXXX", "XX..X.XXXX..X.XXXX.XX..X.X.X..X.XX.XXXXXXXX.XXXXXX", ".X.XX.XXX.XXXXXX.XXX..XX.XXX.XXX..XXX.XX.XX.XXXXXX", "XXXX..XXX.XX..XXX..XXXX..XXXXXXX.XX.XXXXXXX.XXXXXX", "...X.XXXX..XXXX.X..X...XX.....XXX.XXXXX...X.XXXXXX", "XX.X.X.XXX.XXXX.XXX.XXXXXX.XXXX..X.XXXXXXXXXXXXXXX", "X.X.X.XXXXXXX.XX.XXXXXXXXX..XXXXXX.X.XXXXXX.XXXXXX", ".XX.X.XXXX...XX.XXXXX.XXXX.XX...XXXXX.X.XX..X.XXXX", "X.XXXXXXXXXXXXXX..XX..X.XXX...X..X.XXXXXX...XXXXXX", ".XXXX.XXXXXX.XXXXXXX...X.X...XX..XXX....XX.X.XXXXX", ".X...XX.XXXX.XXXX.XX.XX...X.X..X...XXXX.XXXX.XXXXX", ".XX..X..XXX.XXXXX..XXXXXXXXXXXXXX.XX.XXX...XXXXXXX", ".XXX.X.XXXXXXXXXXXX.XXXX.XXXX.XX..X.XXXXX.XX..XXXX", ".X.XX.....XX.XX..XXXX.XX.XX.XXXXXXXX.XXX.XXX.XXXXX", "XX.XXXXX.X..XX.XX...XX.X.X...XX.XXXXXX.X.XXXXXXXXX", "XX.XXXXXXXX.XXXXX...XX....X.XXXX.XXXXXX.X...XXXXXX", "X..XXX.X.XXX.X.XXX.X.XXX.XXXXX.XXXXXXXXXX.XXXXXXXX", "XXXX..XXXXXXXXX.XXX.XXX.XX.X..XXXXXXXXXXXX..X.XXXX"};
    vector<string> cutter = {"XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", ".XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 161: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 161: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test162() {
    vector<string> cake = {};
    vector<string> cutter = {"XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", ".XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 162: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 162: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test163() {
    vector<string> cake = {};
    vector<string> cutter = {"XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", ".XXXX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 163: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 163: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test164() {
    vector<string> cake = {"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXX", "XXXXXXXXXXX..XXXXXXXXXXXXXXX.XXXXXXXXXX.XXXXXXXXXX", "XXX.XXXXXX..XXXXXXXXXXXXXXX.XXXXXXXXXXXXXXX.XXXXXX", "XX.XXXXXXXXXXX..XXXXXXXXXXXXXXX.XX.X.XXXXXXXXXXXXX", "XXXXXX.XXXXXXXXXXXXX.XXXXXXXXXXXX.X.XXXXXXXXXXXXXX", "X.XXXX.XXXXXXXXXXXX.XXXXXXXXXXXXXXX.X.X.XXXXXXXXXX", ".XXXX.XXXXXXXXXXXXX.XXX.XXXXXXXXXX.XXXXXXXXXXXXXXX", "XXXX.XXXX.XXXXXXXX.XXXXXXX.XXXXXXX..XX.XX.XXXXXXXX", "XXXXXXXXXXXXXXXXX.XXX..XX.XXXXXXX..XXXXX.XXXXXXXXX", "XXXXXXXXXX.XXXXX.XXX.XXXXXXXX.XXXXXXX..XXXXX.XXXXX", "XXXXXXXXX.X.X.XXXXXX.XX..X.XXXXXXXXXXXXXXX.XXXXXXX", "XXXXXXXXXX.X..XXXXXX.X.XX.XXXXX.XXXXXXXXX.XX.XXXXX", "XXXXXXXXXX.XXX.X.XX.XXXXXX.XX..XXXXXXXXXXXX.X.XXXX", "XXXXXXXXX.XXXXXXXXX.XXX.XXXXXXXXXX.XXXXXXXXXXXX.XX", "XXXXXXX.XXXXX.XXXX.XXXXXXXXXXXX.XXXXXXXXXXXXX.XXXX", "XXXXXX.XXXXXXXXXXXXXXX.XXXXXXX.XXXXXXXXXXXXX.XXXXX", "XXX.XXXXXX.XXXXXXXXXXXXXXXX.XX.XX..XXXXXXXXXXXXX.X", "XX.XXXXXXXXXXX.X.XXXXXXXXX.XX..X.XXXXXXXXXXXXXXXXX", "XXXXXX.XXXXXX.X.XXXXXXXXXXXXX..X..XX.XXXXXXXXXXXXX", "XXXXX.XXXXXXXXXXX.X.XXXXXXXXXXX.X.XXXXXXXXXXXXXXXX", "X.XX.XXXXX.XXXXXXX.XX.XXXXXXXXXXXX..XXXXXXXXXXXXXX", ".XXXXXXX..XXXXXXX.XX.XXX.XXXXXXXX.XXXXXXXXXXXXXXXX", "XXXX.XXXXXXXX.XXXXXXX.X..XXXXXXXXXXXX.XX.XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXX.X.XXXXXXXX", "XXXXXXXXXXXX..XXXXXXXXXXXXXXX.XXXXXXXX.XXXX.X.XXXX", "XXXX.XXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX.XXXXXX.XXXXX", "XXXXXXXXXXXXXXXXXXXXXX.XXXXXXX.X.XX.X.XXX.XXXXXX.X", "XXXXXXXXXXXXXXXXXXXXX.XXXX.XX.X.XXXXXXXXXXXXXXXXXX", "XX.XXXX.XXXXXXXXXXXXXXXXXXXXXXXXX.X..XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXX..XXXXX.XXXXXXX", "XXXXXXXXXXXXXXXXXX.XXX.XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXX.X.XXXXXXXXX.XX.XXXXXXXXXXXXXXX.XXXXXX", "XXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXX.XXXXXXXXXXXX.XXXX", "XXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX.XXXXXXXXXXXXXXXXXXXXXXX.XX.XX.XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX.X.XXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXX", "XXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXXX.XXXXXXX.XX.XXXXXXXXXXXX.XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXX.XXX", "XXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.XXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 164: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 164: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test165() {
    vector<string> cake = {};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 165: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 165: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test166() {
    vector<string> cake = {"X...X.XXX.XXXXXXXX.XX..XXX.X...XXX...XX.X.XX.X.XXX", "...X.XXX.X.X.XXXX.XX..XX..X...X.X...XX.X.XX.X..XXX", "XX.X...X.....XX.XXX...X....XX.....XX............X.", "X.XXXXXXX.X.X...XX..X.XXX.X.X.XXXX...XX.....X.XXX.", "X..X...X.X.X..XXX....X...X....XXXXX..........X.XX.", "....X.X.X.X.XX...X.X.XX....XX.XX.X.......XX..X.XXX", "X.XX..X......X....X....XX.........XX..X....X.X.XXX", "X.XXX.XX......X..X...X....XX.X....X.X...X.X....XXX", "..X..X..X.XX..X.XX....XX..X...X.....X....X.....XX.", ".......XX.X.......X....X.....X.....X.XX.........XX", "..XX......X.X........XXXX.....XX...X.XX.XX..X.X...", ".X.X.X.......X.....X.X.....X....XX....X.......XXXX", "X..X.......XXXXX......X....X.XX.........X.XX..XX.X", "X.....X.....X....X...X.XX.X....XX......XXX..X..X.X", "X...X.X.X...XXX..X...X.X....X....X..XX...XX....XXX", "X...X.......XX...X.XXX.X....X.XX.X.X..XX.X..X..XX.", "....XXXX..X...X.....XXXX...X.X....XX.....X..X...X.", "XX.X....XX.XX...X.X.X..X.X.X.X..............X.XXX.", "X..X.X..X.........X....X..X..XX...X...XX.XX....XXX", ".....X....X..X.X..X.....X..XX..XXXX.......X..XXX.X", "X.X.....X.......X.....X...X.......X.X..X.X....XXXX", "XX.X........X....X.XXXX.X.X.XX.....XXX..X.......XX", "X.X.X.XX...X...X..X....XX...XXX.X........XX...X..X", "XX........................X......XX........X.....X", "X.X.X...XX....X......X........XX.XX...XX.X.......X", ".......X.XX..X....X....X..X...X....X..X.........X.", "...X.X.......XX.X.X..............X..X....X......X.", "......X.X.X.X....X...X....X..XX.........XX..X.XXX.", "XXX...XXXX.XXXXX.X.X..X.XX...X.XXXX.X...XXXX.XXXX.", "XXXXXXXXXXX.X.XXX..XXX.XXX..XXXX..XXX.XXXXXXXXX.XX", "XX.XXXXXX.X.XX.XXXXX.XX.XXXXX.XXXX.XXXX..XXX..XXXX", "XX.X..X.XXXXXXXXXXXXXXXXXX.XXXXX.X.XXXXXX.XXX...XX", "XX.XXXX.XX.XX.X..X.X...XXXX...XXXX..XXXXX.XXXXXXXX", "XX.XXXXXXXXXXXXX.X.XXXXXXXXXXX.XXXXXXXXXXXX.XX.XXX", "XXX.XXX...X..XXXXXXXXXXXXX..XXXXXXX..XXX..X.XX.XXX", "XXX.XXXXX.XXXXXXX..X.X.X.XX.X.XX.XXX...XXXXXXXXXXX", "XXX...XXX.XXXXXXXXXX.XXXXXXXXXXXXX.XXXXXXXXXXXX.XX", "XXXXXXXXXX..XXXX..XXXXXXXX.X.XX.XXXX.XXXXXXX..X.XX", "XX...XXXXXX.XXXXX.X.XXXXXX.X.XXXX.XXXX.XX.XXXXX.XX", "XXXX.XXXX.XX.XXXX.XXXXXXXX.XXXXXX.XXXX.XX.X..XXXXX", "XXXXXXXXXXXXXXX.XX.XXXX.XXX.XXXXX...XX..XXXXXX.XXX", "XX..X.XX.X..X.XX.X.XX.X.X.XX.XXXXXXXXXXXXXXXXXXXXX", "XXX.X.XX.XXXX.XXXXXXXXX.XXXXXXX.XXXXXXX..XXX..XXXX", "XXXXXXXXXX.XXXX.XX.X.XXXX.XXX.XX...X.XXXX.XXX..XXX", "XXX.X.X.XX.X.XX.XXXXXXXXXXXXXXXXXXXXXXX.XXXXXX.XXX", "XXXXXXXXXX.XXXX.X.XX.X.XXX..XXXXXX.XXXXX..XXXX.XXX", "XXXXXXXXXXXX.XXXX.XXXX.XXXXXX.XXXXXXXXXXXXXXXXX.XX", "XX.X.X...XXXXXXXX.X.XXXX.XX.XXXXXXXX.X.XX.XXX.X.XX", "XX.XXXXXX.XXX.XXXXXXXXXXXXXXX..XX..XXXXXX.XXXXX.XX", "XX..XXXXXXXXXXXX.X.XX.XX...XXXXXXXX..XXXXXXXXXX.XX"};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 166: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 166: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test167() {
    vector<string> cake = {"XXXXXXXXXX.X.X..XXXXXXXXXXX.XX.XX.X.XXXX.X.XXXXXXX", "XXXXXXXXX.X.X..XXXXXXXX.X..XX.XX.X.X.XX.X.XXXXXXXX", "XXX....X...XX.X.X..XXX.X.XXXXX.XX.X..X.XXX..X.XXXX", "X.........XXXXX.XXXXXXXXXX.X..XXX.XXXXX...XX..XXXX", ".XXXX.....X....X.XXXXXX.XX.X.XXX.XX.XXX.X.X...XXXX", "X.X..XX...X.XXX.X..XXX..X.XXXXXX.X.X.XXX.XX.XXX..X", ".X.XXX..X..XXX.X....XX.XX..X..XXXXXXXX.XXXXX.XXXXX", "XXXX...X.X..X..X..XX.XXX....XXX.XXXX..XX.XXXX.XXXX", "XXX...XX.XXX.XX.X.XX...X.XX..X...XX...X.XXX..X.XXX", "XX...X...XXXXX..X.XXX...XX.X.XX.XX.X.X...X....XX.X", "XX.XX..X.XX.X..X...X...X..XX.X.X.XX.X.X..XX....XX.", "XXX.XX....X..XXX.X...XX.X...XXX.X.XXXX.XX.X...X.XX", "XX..XX..XX.XXXXX.XX.....XX..XXX..XX.XX.XXX...X...X", "XX.XX..XXX.....X.X....XXX.XX.XXXX.X...XXX..XX.XX.X", "X.XX....XXX..XX.XX..XX.X..X...XX.X.XXXXX.....X.XX.", ".XX..X.X.X.XX.......XX.XXXX.X.X.X.XX....X....XXXXX", "XX.X.X.X...X..XX.XX.XX.XXXXX.X...X.X.X..XX.X....XX", "XXXXX..XXXXXX.XX...X...XXXXXX.XX..X..X.X....XXXXXX", "XX.XX.XX...X.XX.XX.X...X.XX...X.X..XX..XXX.XX...XX", "X....XX...X.XX.XX.XXXXX......X.XXX.XX..XXXX....XXX", "X..XX.X..XX.X......X...XX.X.XX.....XX.X.....X.XXX.", "XXX....XXXX.X.X..XX.X.XX.XXXXXXXXXX.....XXXXXX..X.", "XX..X..XX..XXXXXX.X..XX.X.XX.XXXXX.XXXXX....XX.XXX", "XXXX......X...X.....X.X..X.X.X..XX.X......X.X..XXX", "XX..XXXX..X...X......X.....XX.XX..XX...XXXXX..XXX.", "X..X....X...XX...X.X...X.X..X.....XXXXXX....X.XXX.", "XX.......XXXXX.....XXX.XXX..X...X....X.X...X...XXX", "XX..XXX.XXXXX.XX..X.XXXX....XX.X..XX..XXX..X.XXX.X", "XX.X.X....X..XXXX..X.XXX.XXXX..XXX.X.XXXX.XXX.XXXX", "XXXXXXXXXX.XXXX.XX..XXXXXX.XX.XXXXXXXXXXXXXXXXXXXX", "XXXXXX.XXXXXXXXXXXXXXXXXXX.XXXXX.XXXX..XX.XXXX.XXX", "XXXX.X.XX.XXXXXX.XXXXXX.XXXX.XXXX.XXXX.XXXXX.XX.XX", "XXXX.XX.XXXXXXXX.X.XXXX..XXXXXXXXXXXXXX.XXXXX.XXXX", "XXXXXXXXXXXXXX.XXX.XX.XXX.XXX.XXX.XXXXXX.XXXX..XXX", "XXXX.XXX..XX.XXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXX.XXX", "XXXX.XXXXXXXXXXXXXXX.X..XXX.XXXXXXXXXXX.XXXX.XX.XX", "XXXXXX.XXXXXX..XX.XX.XXXXXXXX.XXXX.X.XXXXX.XXXXXXX", "XX.XXX.X.XXXXXXXXXXX.XXXXXXXX.XXXXXXXXXXXXX...XXXX", "XXXX.XXXXXX.XX..XX.XXXXXXXXXXX.XXX.XXX.X.XXXXXXXXX", "XXXXXXX.XXXXXXXXXXXX.XXXXXXXXXX.XXX.XXXX.XX.X.XXXX", "XXXXXXXXXXXXXXXXXXXXXX..XXXXXXXXXXXX.XXXXXXXXXXXXX", "XXX.XX.XX.X.X.XX.XX.XXXXX.XX...X.XXXXXX.XXXXXXX.XX", "XXX..XXXX.XXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXX..X.XX", "XXXXXXXXXXXXXXX.X..XX.X.XX.XXXXXXXXXXX.X..XXXXXXXX", "XXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX", "XXXXXX..XX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXX.XX", "XXXXXXXXXXXXX.XXXX...X.X..X.XXX.XXXXXX.X.XXXXXX.XX", "XXX..XXXXXXXXXXX.XXX.XXXXXXXXXXXX..XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX.XXXXXXXXXXXXX.XXXXXXXXXX.XXX.XXX", "XXXX..XXX.XXXXX.XX.XXXXXXXX..XXX.X.XXXX.XXX.XXXXX."};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 167: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 167: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test168() {
    vector<string> cake = {};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 168: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 168: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test169() {
    vector<string> cake = {};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 169: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 169: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test170() {
    vector<string> cake = {"X..............................................XXX", "..............................................XXXX", "X.................................................", ".....XXX.......................................XXX", "X.............................................XXXX", ".....X............................................", ".....XX.....XXX................................XXX", "X.............................................XXXX", ".....XX.....X.....................................", "X...........XX.....XXX.........................XXX", ".....X........................................XXXX", ".....XX.....XX.....X..............................", "X..................XX.....XXX..................XXX", ".....XX.....X.................................XXXX", "X...........XX.....XX.....X.......................", ".....X....................XX.....XXX...........XXX", ".....XX.....XX.....X..........................XXXX", "X..................XX.....XX.....X................", ".....XX.....X....................XX.....XXX....XXX", "X...........XX.....XX.....X....................XXX", ".....X....................XX.....XX.....X.........", ".....XX...XXXX.XXXXX..XXX....X..........XX..X..XX.", "X..X....XXX...XXXX.XXXXXXXXXXXXXXX..XXX....X....XX", "..................................................", "XXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXX", "X....XX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXX", ".XXX..............................................", "XX.X.XXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX....XXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX..XXX................................XX", "XX...XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX..XXX....XXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXXXXXXXXXX..XXX.........................XX", "XX....XXX...XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX..XXX....XXX...XXXXXXXXXXXXXXXXXXXXXXXX", "XX...XXXX.XXXXXXXXXXXXXXX..XXX..................XX", "XXXX..XXX....XXX...XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXXXXXXXXXX..XXX....XXX...XXXXXXXXXXXXXXXXX", "XX....XXX...XXXX.XXXXXXXXXXXXXXX..XXX...........XX", "XXXXXXXXXXX..XXX....XXX...XXXX.XXXXXXXXXXXXXXXXXXX", "XX...XXXX.XXXXXXXXXXXXXXX..XXX....XXX...XXXXXXXXXX", "XXXX..XXX....XXX...XXXX.XXXXXXXXXXXXXXX..XXX....XX", "XX.XXXXXXXXXXXXXXX..XXX....XXX...XXXX.XXXXXXXXX.XX", "XX....XXX...XXXX.XXXXXXXXXXXXXXX..XXX....XXX..XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XX", "XX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XX", "XX.XXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 170: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 170: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test171() {
    vector<string> cake = {"X..............................................XXX", "..............................................XXXX", "X.................................................", ".....XXX.......................................XXX", "X.............................................XXXX", ".....X............................................", ".....XX.....XXX................................XXX", "X.............................................XXXX", ".....XX.....X.....................................", "X...........XX.....XXX.........................XXX", ".....X........................................XXXX", ".....XX.....XX.....X..............................", "X..................XX.....XXX..................XXX", ".....XX.....X.................................XXXX", "X...........XX.....XX.....X.......................", ".....X....................XX.....XXX...........XXX", ".....XX.....XX.....X..........................XXXX", "X..................XX.....XX.....X................", ".....XX.....X....................XX.....XXX....XXX", "X...........XX.....XX.....X....................XXX", ".....X....................XX.....XX.....X.........", ".....XX...XXXX.XXXXX..XXX....X..........XX..X..XX.", "X..X....XXX...XXXX.XXXXXXXXXXXXXXX..XXX....X....XX", "..................................................", "XXXX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXX", "X....XX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XXXX", ".XXX..............................................", "XX.X.XXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX....XXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX..XXX................................XX", "XX...XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX..XXX....XXX.X.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXXXXXXXXXX..XXX.........................XX", "XX....XXX...XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX..XXX....XXX...XXXXXXXXXXXXXXXXXXXXXXXX", "XX...XXXX.XXXXXXXXXXXXXXX..XXX..................XX", "XXXX..XXX....XXX...XXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX", "XX.XXXXXXXXXXXXXXX..XXX....XXX...XXXXXXXXXXXXXXXXX", "XX....XXX...XXXX.XXXXXXXXXXXXXXX..XXX...........XX", "XXXXXXXXXXX..XXX....XXX...XXXX.XXXXXXXXXXXXXXXXXXX", "XX...XXXX.XXXXXXXXXXXXXXX..XXX....XXX...XXXXXXXXXX", "XXXX..XXX....XXX...XXXX.XXXXXXXXXXXXXXX..XXX....XX", "XX.XXXXXXXXXXXXXXX..XXX....XXX...XXXX.XXXXXXXXX.XX", "XX....XXX...XXXX.XXXXXXXXXXXXXXX..XXX....XXX..XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XX", "XX..XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX..XX", "XX.XXXXX...XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    vector<string> cutter = {"X.XXX", ".XXXX", "XXXX.", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XXXXX", "XX.XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 171: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 171: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test172() {
    vector<string> cake = {"..", "X.", ".X"};
    vector<string> cutter = {"..", ".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 172: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 172: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test173() {
    vector<string> cake = {"X..", ".XX", ".XX"};
    vector<string> cutter = {".XX", ".XX", "X.."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 173: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 173: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test174() {
    vector<string> cake = {"X.", ".."};
    vector<string> cutter = {"X.", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 174: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 174: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test175() {
    vector<string> cake = {"..", "X.", ".X"};
    vector<string> cutter = {"..", ".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 175: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 175: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test176() {
    vector<string> cake = {".X.", "X.X", ".X."};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 176: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 176: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test177() {
    vector<string> cake = {"X.X"};
    vector<string> cutter = {".X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 177: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 177: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test178() {
    vector<string> cake = {"X.", ".X"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 178: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 178: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test179() {
    vector<string> cake = {"XXX.X", "XXXXX", "XXXXX", "XX.XX"};
    vector<string> cutter = {"XXXX.", "XXXXX", ".XXXX", "XXX.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 179: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 179: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test180() {
    vector<string> cake = {"X.X", "..."};
    vector<string> cutter = {"X.X", "..."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 180: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 180: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test181() {
    vector<string> cake = {"X..X", "....", "X..X"};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 181: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 181: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test182() {
    vector<string> cake = {};
    vector<string> cutter = {"."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 182: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 182: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test183() {
    vector<string> cake = {".X.", ".X.", ".X."};
    vector<string> cutter = {".X.", ".X.", ".X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 183: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 183: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test184() {
    vector<string> cake = {"XXXXXXX", "X.....X", "X.....X", "X.....X", "XXXXXXX"};
    vector<string> cutter = {".X.", "XXX", ".X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 184: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 184: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test185() {
    vector<string> cake = {"X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", "..................................................", "X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.", ".................................................."};
    vector<string> cutter = {"X.", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 185: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 185: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test186() {
    vector<string> cake = {};
    vector<string> cutter = {".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 186: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 186: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test187() {
    vector<string> cake = {"X.X.X..X...X..X", ".XX...X..X..X..", "..XXXXXXXX.....", "X.X............"};
    vector<string> cutter = {"X.X.X..X...X..X", ".XX...X..X..X..", "..XXXXXXXX.....", "X.X............"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 187: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 187: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test188() {
    vector<string> cake = {};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 188: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 188: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test189() {
    vector<string> cake = {"X.X", "...", "X.X"};
    vector<string> cutter = {"X.X", "...", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 189: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 189: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test190() {
    vector<string> cake = {"X.X", ".X.", "X.X"};
    vector<string> cutter = {"X.X", ".X.", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 190: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 190: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test191() {
    vector<string> cake = {"X.X", ".X.", "X.X"};
    vector<string> cutter = {"..", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 191: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 191: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test192() {
    vector<string> cake = {"X.X", "...", "...", "X.X"};
    vector<string> cutter = {"X.", "..", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 192: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 192: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test193() {
    vector<string> cake = {};
    vector<string> cutter = {"..."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 193: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 193: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test194() {
    vector<string> cake = {"XXX", "XXX", ".XX"};
    vector<string> cutter = {".X", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 194: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 194: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test195() {
    vector<string> cake = {"..XX", "...X", "X...", "XX.."};
    vector<string> cutter = {"..", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 195: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 195: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test196() {
    vector<string> cake = {"XX.", "X.."};
    vector<string> cutter = {"X.", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 196: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 196: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test197() {
    vector<string> cake = {".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", ".................................................X", "X.................................................", "X.................................................", ".................................................X", "X.................................................", ".................................................X"};
    vector<string> cutter = {".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 197: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 197: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test198() {
    vector<string> cake = {"XX", ".X"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 198: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 198: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test199() {
    vector<string> cake = {"...."};
    vector<string> cutter = {".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 199: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 199: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test200() {
    vector<string> cake = {".....", ".....", ".....", "....."};
    vector<string> cutter = {"XX.X", ".XX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 200: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 200: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test201() {
    vector<string> cake = {"X.X", ".X.", "X.X"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 201: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 201: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test202() {
    vector<string> cake = {"X.X", ".XX", "XXX"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 202: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 202: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test203() {
    vector<string> cake = {"XXX.XXX.", "........", "XXX.XXX.", "........"};
    vector<string> cutter = {"XXX.", "...."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 203: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 203: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test204() {
    vector<string> cake = {"X....", "....X"};
    vector<string> cutter = {"X..", "..X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 204: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 204: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test205() {
    vector<string> cake = {"X...XXX", "X.XX...", "...X...", ".XXX.XX"};
    vector<string> cutter = {"...", ".XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 205: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 205: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test206() {
    vector<string> cake = {"XX."};
    vector<string> cutter = {".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 206: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 206: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test207() {
    vector<string> cake = {"X.XXX.", "X..XX."};
    vector<string> cutter = {".X", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 207: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 207: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test208() {
    vector<string> cake = {};
    vector<string> cutter = {"..", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 208: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 208: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test209() {
    vector<string> cake = {"X..", ".XX", ".XX"};
    vector<string> cutter = {".XX", ".XX", "X.."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 209: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 209: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test210() {
    vector<string> cake = {"...XX..X...XX..XX.X..X.......X..X.X...X...X..X.X..", ".X....XX.X.X..X.XX..X.X.X....XX...X.X...XX.XXX....", "XX...X.X...X.X.....X..X.X.X.X..XX.......XX..X.....", "XXX..............XX.X.X.X..X...X.....X....X.XX....", "..XX...X.....X.X...XX....XX.X.X.X......XX.....XX..", "....X...X.X.X..X.X.XX..X....XX.....XXX...X...XX...", "..XX.X.X.....X.X......XX..X.X..X.X......XX.X......", "......X..X.X.X.X...X....X.X....X.XXX.X..X.XXX.X.X.", "X...X......X..X....X.X.X.X....X.X..X...........X.X", ".XX..X.X..XX.XX......X.....XXX..X....X....XX......", "X.X.X..X....XX..XXXX.X.X.XXXX..X...X..X.....X.XXX.", "X.....X...XXXXX.X.X.X......XX.X..........X...X.X..", "..XXX..X.XX....X.X..X...XX.X.X.X.X..........X.XX.X", "..XX.X...X........X.X..X...X....X.X.XXX...XXX..X..", "...XX...X...X...X..XX.X.XXXX....X.X.X.X.X.......XX", ".X.XXX.X.....X.X.X..XXX..X.X.X.......X.X.XX..X.X..", ".X.XX...X.XX..X...X........X......X.XX..X...X.XXXX", "X.X.XX...X.X.XX.X..X.....X...X..X...X...X......XXX", ".XX......XX.X.X..XX.....XXXX.XX.X...X..XXX....XX.X", "X.....X.X.X....XX...X.X..X...X.....X...XXX....XX..", ".XXXXXX.........XX....X.X.....X...XXX..X.X.X..X..X", ".XXX...XX........X....X..X.X.X...X.X...X.XX.X.X.XX", "....X.....X............XX.X.XX.X......X......XX..X", ".XX.X..X.X...XX...XX..XX..X...X.XXX..........XXX.X", "X.XXX.X.XX...X.....XX....X...X....XX......X....X.X", "...X.X..........XXXXX..XX..X.X..X...X.X...XXX.....", "..XX..XX.......XX..XX.........X....X....X.XX......", "XX.........X....X.XX....X....XX.X....X.....X...XXX", ".X..X....X...X.XXX.X.......X.X.....XXXX.XX..X.....", ".....X.....X....X.....X.XXXXX...XXX...X.X....X.XX.", "XXXXX..XXX..X..X.XX.....X..X...X.X.XX..X..X.X.X..X", "...X...XX....X...XX..X..XXXXX.......XXXX...X..X.X.", ".X..X.X.X.X..X...XX....X...X...X..X...X..XX..XX...", "..XX...XX.XX.........X.X.....X.X...........X...XX.", "X....XX.X.X..X..X.....X.XX.XXX......X.............", "X....X.X..........X.X..XXXX.....X......X.X..X...X.", "......X...X..X..XX......XX......X.X.XXX...XX.X...X", "......X......XX...X.....XXX......X..XXX....X......", "X.X...X...X.....X.X.X..XXX........X.......X...XX.X", ".....X.X........XXX.XX.......X.XX..X.........X....", ".XX..X...XX..XXX.X.......X..XX.X.X.....X...X......", "...XXX.XX...XX.X...X..............XX.XX....X.....X", "X..X.X.............X..XXX.X..X.X...X...X.X..XXX.XX", ".X..X....X..X....X......XX..XX.XX.X...X....X..X..X", "..X........X.X.....XXX..XXX....XX...X..X....X.....", "X....XX.XXX...X.X..XX.X............XXX.XXXXX..X..X", ".XX.X........XX.....X.XXX..X..X...X.....XX...X..X.", ".......X...X..X.....X.X..XX.XX.XX...X.X...XXX..XX.", ".X...X....X....XX...X..X.....X...X.........X..X.X.", ".XXXX....XX.X..X.......XX..XX.X...XX....X.....X.XX"};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 210: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 210: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test211() {
    vector<string> cake = {"X..", "...", "X.."};
    vector<string> cutter = {"X.", ".X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 211: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 211: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test212() {
    vector<string> cake = {};
    vector<string> cutter = {"....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "....................", "...................."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 212: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 212: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test213() {
    vector<string> cake = {"X..", "...", "..X"};
    vector<string> cutter = {"..", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 213: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 213: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test214() {
    vector<string> cake = {};
    vector<string> cutter = {".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 214: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 214: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test215() {
    vector<string> cake = {"X..", "...", "X.X"};
    vector<string> cutter = {"X..", "...", "X.X"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 215: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 215: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test216() {
    vector<string> cake = {"..XX", "X..X", "XXX."};
    vector<string> cutter = {"..X", "XX."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 216: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 216: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test217() {
    vector<string> cake = {"..", ".."};
    vector<string> cutter = {"X.", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 217: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 217: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test218() {
    vector<string> cake = {"XX.", ".XX"};
    vector<string> cutter = {"XX.", ".XX"};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 218: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 218: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test219() {
    vector<string> cake = {"XXX", "XXX", "XX.", "XX."};
    vector<string> cutter = {".X", "..", "X."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "NO";
    if(result == expected) {
        cout << "Test Case 219: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 219: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test220() {
    vector<string> cake = {"X.X", "..X"};
    vector<string> cutter = {"X.", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 220: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 220: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test221() {
    vector<string> cake = {"XXX", "XX.", "X.."};
    vector<string> cutter = {"X.", ".."};
    GogoXCake* pObj = new GogoXCake();
    clock_t start = clock();
    string result = pObj->solve(cake, cutter);
    clock_t end = clock();
    delete pObj;
    string expected = "YES";
    if(result == expected) {
        cout << "Test Case 221: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 221: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    test160() == 0 ? ++passed : ++failed;
    test161() == 0 ? ++passed : ++failed;
    test162() == 0 ? ++passed : ++failed;
    test163() == 0 ? ++passed : ++failed;
    test164() == 0 ? ++passed : ++failed;
    test165() == 0 ? ++passed : ++failed;
    test166() == 0 ? ++passed : ++failed;
    test167() == 0 ? ++passed : ++failed;
    test168() == 0 ? ++passed : ++failed;
    test169() == 0 ? ++passed : ++failed;
    test170() == 0 ? ++passed : ++failed;
    test171() == 0 ? ++passed : ++failed;
    test172() == 0 ? ++passed : ++failed;
    test173() == 0 ? ++passed : ++failed;
    test174() == 0 ? ++passed : ++failed;
    test175() == 0 ? ++passed : ++failed;
    test176() == 0 ? ++passed : ++failed;
    test177() == 0 ? ++passed : ++failed;
    test178() == 0 ? ++passed : ++failed;
    test179() == 0 ? ++passed : ++failed;
    test180() == 0 ? ++passed : ++failed;
    test181() == 0 ? ++passed : ++failed;
    test182() == 0 ? ++passed : ++failed;
    test183() == 0 ? ++passed : ++failed;
    test184() == 0 ? ++passed : ++failed;
    test185() == 0 ? ++passed : ++failed;
    test186() == 0 ? ++passed : ++failed;
    test187() == 0 ? ++passed : ++failed;
    test188() == 0 ? ++passed : ++failed;
    test189() == 0 ? ++passed : ++failed;
    test190() == 0 ? ++passed : ++failed;
    test191() == 0 ? ++passed : ++failed;
    test192() == 0 ? ++passed : ++failed;
    test193() == 0 ? ++passed : ++failed;
    test194() == 0 ? ++passed : ++failed;
    test195() == 0 ? ++passed : ++failed;
    test196() == 0 ? ++passed : ++failed;
    test197() == 0 ? ++passed : ++failed;
    test198() == 0 ? ++passed : ++failed;
    test199() == 0 ? ++passed : ++failed;
    test200() == 0 ? ++passed : ++failed;
    test201() == 0 ? ++passed : ++failed;
    test202() == 0 ? ++passed : ++failed;
    test203() == 0 ? ++passed : ++failed;
    test204() == 0 ? ++passed : ++failed;
    test205() == 0 ? ++passed : ++failed;
    test206() == 0 ? ++passed : ++failed;
    test207() == 0 ? ++passed : ++failed;
    test208() == 0 ? ++passed : ++failed;
    test209() == 0 ? ++passed : ++failed;
    test210() == 0 ? ++passed : ++failed;
    test211() == 0 ? ++passed : ++failed;
    test212() == 0 ? ++passed : ++failed;
    test213() == 0 ? ++passed : ++failed;
    test214() == 0 ? ++passed : ++failed;
    test215() == 0 ? ++passed : ++failed;
    test216() == 0 ? ++passed : ++failed;
    test217() == 0 ? ++passed : ++failed;
    test218() == 0 ? ++passed : ++failed;
    test219() == 0 ? ++passed : ++failed;
    test220() == 0 ? ++passed : ++failed;
    test221() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22874641&rd=14723&pm=11274
********************************************************************************
#include <iostream> 
#include <cmath> 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <string> 
#include <vector> 
#include <algorithm> 
using namespace std; 
 
class GogoXCake{ 
public: 
    int r1, c1, r2, c2; 
    bool visit[55][55]; 
    bool check(const vector <string> &cake, const vector <string> &cutter, int x, int y){ 
        for(int i = 0; i < r2; i++) 
            for(int j = 0; j < c2; j++){ 
                if(cutter[i][j] == '.'){ 
                    if(!visit[x+i][y+j] && cake[x+i][y+j]=='.')  continue; 
                    else  return  false; 
                } 
            } 
        return  true; 
    } 
    void cover(const vector <string> &cutter, int x, int y){ 
        for(int i = 0; i < r2; i++) 
            for(int j = 0; j < c2; j++){ 
                if(cutter[i][j] == '.') 
                    visit[x+i][y+j] = true; 
            } 
    } 
    string solve(vector <string> cake, vector <string> cutter){ 
        r1 = cake.size(); 
        c1 = cake[0].length(); 
        r2 = cutter.size(); 
        c2 = cutter[0].length(); 
        bool flag = true; 
        memset(visit, false, sizeof(visit)); 
        while(flag){ 
            flag = false; 
            for(int i = 0; i+r2 <= r1; i++){ 
                if(flag)  break; 
                for(int j = 0; j+c2 <= c1; j++){ 
                    if(check(cake, cutter, i, j)){ 
                        flag = true; 
                        cover(cutter, i, j); 
                        break; 
                    } 
                } 
            } 
        } 
        for(int i = 0; i < r1; i++) 
            for(int j = 0; j < c1; j++){ 
                if(cake[i][j]=='X' && visit[i][j]==true) 
                    return  "NO"; 
                if(cake[i][j]=='.' && visit[i][j]==false) 
                    return  "NO"; 
            } 
        return  "YES"; 
    } 
};

********************************************************************************
*******************************************************************************/