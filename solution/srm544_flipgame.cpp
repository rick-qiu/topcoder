/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11974
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class FlipGame {
public:
    int minOperations(vector<string> board);
};

int FlipGame::minOperations(vector<string> board) {
    int ret;
    return ret;
}


int test0() {
    vector<string> board = {"1000", "1110", "1111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> board = {"1111", "1111", "1111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> board = {"00", "00", "00"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> board = {"00000000", "00100000", "01000000", "00001000", "00000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> board = {"00111110001111000100011101110001000001101010110111", "00010011101111011110000001001101100011011111001001", "10010111110000100001000110011110100111000001010010", "01000001000001111110011011011101001011110011110001", "11110011111001011000100000110101100001001011001110", "01001011011000101110110011000100111010000001110100", "10100111001001111110111010010111001010111110010101", "01000011110000010111011001101000111000101110110110", "11011011100110000010000100000101100100011100011010", "10011101110001011101001000110000100100111100101100", "11111110101110111010111010101110001010001011010011", "11001010110100001000101010110100010011011000101000", "01001101100001110100100100111010110100111011110001", "10110000111000110010011001000010001011010111011011", "00101001100000100100010110100001111010000010000000", "00100101010000010100111100010010101111011100000000", "11100010011011111110011110000100111111101100001011", "11000100000101110001101001100001001010100001111110", "10101110100100111000111111001101100011000101100011", "11011100001110001110111001011011111110011100011010", "00111100001101101001100000101001100001010101011001", "10101010011111010111101011111011000111011011111010", "01000000000100011111000010111010001100000110100110", "10000111001011000110110101011000101100011110100101", "11001011101101101111010011000111110101011111010001", "00100101111010010110011100000001001000110101000100", "11000010111100011111110101011001100010010101001110", "00001001111111110110100010011001110010101001111010", "10110000001101010101010110111101001010110100010111", "11000001110110101001111111110010110101111001101000", "10100001100111101100110011001011110001101000110000", "11010111000101001100110010011001000001011010111110", "00111011000000100011000011100101100000101000000111", "10101010110011111001010100000100100110001111110110", "00110100001100010001101001101001111111010100111101", "00111101010000000000011010100111010001100100111010", "01111001000000001101001110110110101111110111101111", "00001001011101110100000000010101001011011000111110", "01011011101010100011111010001100110101110111101001", "11000010010111100111001010000101011010011100100111", "11010110000110001101100011111111100010100100100110", "00010111110100100110110100010100100100101010110001", "01000100111101000101010100000110010101100000111000", "01110000101010010100100011001010110000010001011011", "01101000000110010000110110110101001011000110010111", "00100110101110001010110100010000100101001001110001", "01000011101010011100100001110000000001110111101011", "11110000110011010110001001001000010010111010100100", "00111100111110001010100110100000010000100001100010", "11100111101000101111001000010001100100010001011010"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> board = {"01000111100100110000110011011000001110111110100010", "10100101110001000010101010000010101011101010111110", "00001011010100000010100111001101001110010001010001", "11100010110011111011110100100001100110111001001111", "10010011110011011101000100011011010110001101110111", "10001100010001100111010101111000100000110100011010", "01101011110110101000010111110001000010101010101111", "00111000001101011001111111000011001100000000010111", "00101001101101111101001001011100001100001101000101", "10111101110011001100011101111010001010110110111110", "01110001100110110100101111110010101100011101001000", "01111011111010000010110000110101110111011001011100", "01010101100110010101101011011111010101110010000001", "10110101111000001100111010011100011110001110011000", "01011011000100111111011011101001010001011000000111", "10001110000010101110011101001110010111110001010101", "11100001110010111011011011110100111101110000010010", "00111000010010110100101100101110011110110101100110", "11111010110101001001000111111011100100001011111011", "10011111011000110010010011101110111110110000010000", "10000010101010000001111101110111010101011011101110", "00011100111100110001011000101101000100010101001110", "00001011100100010111100111101010110110010110110000", "10110100100011001101111100100110000111000111110110", "00100001101100011000110001111010011011111101001111", "10000100000111100001011100101000001110011100110101", "11010110010110010100010110011010100010011110011011", "11000101111000100100000011011010111001100000110100", "10000101010101011110100101111000011000111100111101", "10100011111111100110111010111000111011000001100001", "10010110110100000010100101010100111010100100010101", "10001000111011001101111110011100000100000011010010", "01101110001110110000011111000111010011011001100001", "10001111010100001000001110100101101010111000010100", "10100110110101100001101100001011000101110011111101", "01110101001011101111011110010111101011101100110011", "01111000100100100111001100111001001111000100011000", "00000101110111100011100010011000111010111101000110", "10111110100011001011000101110011011001011001000110", "00010110010110100111000000010010111010101000001001", "01110000010001100110011011011010000111001000010011", "01101111111111100111111101011010001000000100101001", "11001000111011010111110010100110011001100000000010", "01000001100001101101100100100111110010010101000011", "10001101010101000110011101000111010110100011110111", "11110101100000110101101100110101010010110111100011", "01001000110110000101001110111010110000010111000001", "11010101100101000001110110000000001111100010001111", "10011010100010100111001110101101000100110100111110", "01100110000110101111100110001000100010010111011001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> board = {"11111101101110101011010101000111101010011101110001", "10110111011000001111000001001111111011010110011110", "01110111001100000010011101010110010011110001100101", "11001110100100100101101100011111110101100010101110", "00101010100100001100110110000001100100001010110111", "11001111001000111001000010101100111001000101110101", "10011011001000110101101101111101100010001000110011", "10111111110010011011101100000100011111001000001011", "00011101010110011101101001011111101010101101111100", "11111111100100011110001110111110100000100001011100", "11001000111101100000110010001110010100111001101111", "00110100011010011000001001101001001010111011011111", "00111100100110000111101100110000111111100111101110", "10101100111001010100000100101100101111010100000100", "01001110010100011101110101001111000000101000101100", "01111011110110011110010011010101111100001111110001", "01110010100101011010001101111011100101000110010001", "01001001001011011010101101001110010001000000101001", "11101011001001001110101101010100011101000001000110", "00001011010110111111110010110111111100011100011001", "11101011111110010001100000100111101010100001011100", "00111011010111010110110011101100001110001111101101", "11000000001101110011011010110011000001011111110011", "11011100100101000101000001011000011011010010101000", "11010010101010111000101110000111101001010111000101", "11110011000101100000001101000001110000011110010100", "10111011101101100100110010110000011111110110000010", "00000101001100010011000000111001001111101110110101", "01000110101100011011101011000010110010001010000011", "10000000000101101010001100010011110110101001011011", "10111011111000101001110100111001001100001101111001", "11111011001011010110001100010000110101111101001100", "01101110000001010011111111111100111010010010011010", "10010000111100110110010111100100111111001110001100", "01011000000100001011001100101100110101000110100111", "00010110001100010011111010011010101101011110110110", "01100110000011011010110010101100010001111010001111", "01110010010100101111011111010000111111010110101111", "11010110101001100000011111100101111100110100101001", "11110101100011001010100000100110001110000100111111", "10100101000011110110000100001101110010110110000010", "00001101100010001010000000101001111100001100011001", "11100011100100000000001110011101100010101101110111", "00111000000010111010101100110000110010010110011101", "01111101111000111100111001011111101010110111111010", "10100010010110100101011101000110010001101000110100", "01110011100000000111010001100100101111100001001101", "11011010000111101010010010000101010111100100010101", "11111001001101001111110101000110110111101000000001", "11101101000001001110001000111010001100011101101000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> board = {"00011111100101010001000111000111111011110101111101", "10111010101100100110000110100101000011111011011101", "00110101110101111000011111000101000100110111010010", "01100011010101101110111001111100101001111101001100", "00010011100101010111011010100100011111000101001100", "10110010001110101100100001000000101000111011001011", "11010101101000011011001011000110001101001111010011", "00100100111100010011001111111011101011110000011011", "00000001111111101100101100101011111111010010011001", "01011011101010011111011010111110010011010011111100", "11001011010111011010110100000001010100011110011001", "10011110010000010101111110101001001001101000011011", "10111000101011010100010100001001101110111010011100", "00000111001111010111101100011011000000110000101001", "10010101000000001010011100010000001101010100111111", "11010111101001100000110000010101100010010110101000", "01011110001011000000001001100110010001011110010101", "01110001101011011111110010010000010000000011101011", "10111111001100010101110011110100101100001001111000", "01011110100111110100110011011100100111101000001010", "01111000100000011000010110001101100010011110010001", "01010011111011110001001111000101011110101011110011", "00001010010100011011000111111010011000000111010101", "10000001001111000100110101101010001100110000010110", "11111011101100000001110110011110010001000011010101", "01000100000010001101001111001001101000010111111001", "11101000100111100011101101100111101010100111011011", "11101000101101101100101011110000000111110000011011", "10110110001001110001110111000011001110101011000111", "11111111100010010011111000010011111010110100001110", "11000010100101100110000100010101110100100111010011", "10000111000101100000111001111110000111101101001010", "10001111000000111011000000111100101000010101110110", "00110111010101001010110101000111100000000010110011", "01000011001100001000100111101100011100010100011111", "01001111011001111110010111101001100111001001010001", "11011100110110000111001001111110000000011111011100", "11111000011011100101110011010000110000010110010001", "00000000101001111001010111010111010000010001110001", "11110101110100111000110010011100010011100110101111", "00000100001111111111001101011000001111101110101100", "01111000011000101011011100011100001010011001001101", "00001100011110100011001010110101110011010010101000", "00101010110000101011000010001110101100110010111111", "10010001101111000100001011000101101110101101000001", "10101000001110010011010110111000001101000011100100", "11011100011011011001001001000011010001100101110011", "00110000000010010111100011111011010110001010001001", "10100101011111010010111111100000100110100011000010", "00010111100010111100111000011000110111010111011100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 86;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> board = {"00110111010100000111010101111011011010010001011011", "11000011001010110010011000101111101010010111001100", "01110001111100010110000110111000000001111101001010", "10101111110101011101100011000001101010100000011101", "00000101000001110101100011111010111011100111000100", "01000100101010001001111100111100100110000011111110", "01111001000110101101111110100011001011100001000010", "11110110101101111100011110001011011111000001100011", "01101010100110111011101101101000010111101110100111", "11000110010011001111011110000000110011001110001101", "00101000011101111001111011000010100011000110110100", "01001111101001110001001001111011010001001011110010", "10011011001111101100111010110010001110100101111111", "01000001000110011010111001000000010110011101111100", "11110000011010010111100101100111110011111110101000", "11010010001101010011110011111001111000011001011010", "01111110011000000111100100110011011110110101000000", "10001001101100010000000110101010000010101010011000", "11001100110101011111000100101000101100111000100100", "10111001011000010110000011001001010100110110000110", "11111101010000111011000010111001111101101101000101", "00110100100110011101010111000000101000100000100010", "11111001000100100101001110111011110100000001101101", "00101001111011010001000110100100000000110110001011", "10001001101101010010100011100001100011010011110100", "01001101100001000110110000011101010100000011100110", "10110100101011000110101010010111110011010110101011", "00011001010111111100100100010111001001010001010000", "11111100010001000000101001111110111001011110011000", "00110111010000111110101111110011000011001011001111", "11111110000000000110100111011011001010010000001110", "00100010100001011001011000010101100111110100010101", "11100111111010111111110110111010101111100010000001", "01001110100001010111001101010000000110100110111101", "00000011000000000010110010001110100001101001110101", "00001011111110101101111110110110000110011010110001", "00000110010010000010101011011110110111011111111001", "11011011001100110010110010111111100001101111110001", "01110000101001000010111010000111110111110110010101", "01000001101101011010010000111011101010111011111101", "00111000101001110110101000010100000000011100000000", "11110010011101101001000110010000111100010111011000", "00101011000101001001100111010011011001000111000111", "11010110110011100100010101001100110011001111101000", "11000111011011111100001101111111110101110111001011", "11010101110111101100110000110101000000110001010111", "10010101110100010010001110010011001000100101101010", "11011100101010110111111000011101101010100011111011", "00010100010011000110010001111010101001011110011101", "11000000000000000110111000111111111100111011111100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> board = {"10011111100100111010111110000101010000101000011011", "11000000011001011011000111100110111000111000010011", "10111110101110111000001011101000010100101000001011", "00011100011001110001110100001101010111101010111110", "01011011011110110101011010101010111110100001101000", "11010011011111010011011101110010000010101000110101", "00011001111011111101111100000110101111001101100011", "01010011101011010000110011001111001011011010001111", "10111111011001001010001000001111110011110000110011", "11010100011101100000000100001000011101100011110101", "01110101000001100001111001011011100011001101110001", "11111101000100000111011010110111000001001111011010", "01011110100010101101101101111100110110111011010101", "11001111010010000001110011110011100101110110011001", "11101000011000001011101001001111001010011000110010", "01100011111010101100101101110110111100011011011100", "11100110001011000011111110001100111001101110011011", "10110101111011011111010101110111111100000111010010", "00001111101110111101000010111011111111000010111110", "10011001001111110101100111100010011100011001001001", "00110011011111010001101100011101101101010001001010", "01011001100001110010010011101110001001001110001110", "00000101100111000000001011001110001101101011110010", "00101111000010011111001000101100000111000101010000", "00000100110010111000010101111101001001000000010100", "01110111001111000100101000110000110001011010000011", "01110011100010100101101011110011000011100101010110", "10110011001111010111001001111110110110110011111000", "01110000101100010001001111101111111100010101001010", "11101100011100001011110101100000110110100001110100", "11111000110011110001001101011010001111010011101100", "01111001111111000100011101111010100110110011110101", "00101100101111001011110001011110110100000101111001", "11011101000100000001000110100111000101100111111111", "00000001011011100001101110010001101000000111011010", "11010100111010110100011000100111000110110110110000", "10010110000011011000000011011011110101011100001011", "11111001101011011011111011011110110100011110110010", "01001010110110110111001010110011011111011101100010", "10000011111011101100110101110100110001111111000110", "11110111110101101101000111000100110010010101011100", "11111010110111111101011001110101111100100100001010", "01100001111011111010100000110000010110101010010101", "10101111010101000111011011010101000110000001000111", "11010010110110101111110111101100000000111010110111", "10111000011110010001100101011100100000110000010110", "11110010000100110010110110111010001100000110010001", "11100010011000110110111000100001100001011011000011", "00100011110101101010101111101110010000010000011111", "11010010101110111111000111011000000010011100000111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> board = {"01111010011100110001100011101000100101111110010011", "00000100101010010100011000000111111111000001110011", "10011100100110110110010111000000110010000000101000", "00101110001010011101100111110111010100010001111101", "11101110111101011110001101011110110101000001110101", "10001000010010011000001111011110100001101111110001", "01010100001011010000001001001101110001010111000100", "10011101101101010000100010011111000010000011001001", "00000100101001100011101111111110100010111000111100", "10101000100111011100011111010100001000001111110111", "00110100011000010101000000110001100101010111000000", "00100010011110000010000010110011101001111111100010", "11011101010111100011001010100101001111101000010100", "01110001000000011000010000110011001010011011111000", "11110110011011100101010100100000101000101010000011", "00010001110101010010110010100011101011000000101100", "11100100110111010111001111110101110011101011010101", "01101011000011111110011010101010110110101011100101", "00100111110001100101100011100100101000010101100100", "10011011111100011010110111000110011011000001010101", "00100011001001111111011000011111001010100000110011", "01010010101011010110000000101000101011011000001010", "00101110111000111010010001100001100111100100011011", "11101100101010010001010000011010101110010011001010", "00001001100111110111111011100100000100101101100010", "11010110001001111101011101100100101111000001111101", "11000111101000000100101001011101101101111110100110", "11111010011110010100010011101001111100010010110001", "11110011101110101011011100100010111000101000100101", "01101000001011010100011011010000001111011011000010", "01011111001101001110110101000000100001010010011010", "11000001001111111001011101101011010000011010100100", "10011100011111111110101100011000100001000101011001", "11110100100101010100110111001011001010010100101011", "01111110000011011111110010010111000100010001000001", "11001000010000111011010100101000011011111101101001", "11101000010100111011110001100000111011001011110001", "01101010110010001011100010010101001011101011000100", "00010001011010000101000100100101001000000111010111", "01111000110001001100111100110110001000110110100101", "10111001110100010001001011010011001111101110111000", "01011010000000100101111110010100100001100100010101", "11100001001011001000100001011010011010101110100111", "00011010001111001100101101000110111110001111110010", "11011010000001000100110011000110101010001111000111", "10110000010000011001110101101110110111000101001011", "10100101111100011001111011101000101001100101001100", "10110110100010110010100000010100100010111110111001", "00000001011101110111010010011010101110110011111101", "10011011011110111010001001111101001101001000101101"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> board = {"00100011000101010011000101100010100000001011011000", "00000111100011010101111011000110010101110100100000", "11111001011100111110110101010111010111111000111110", "01110000000011101101111010100100011111010100111000", "01001011010101110001111111111001111011010011010010", "10010010001110010000100101100000100111110101011100", "01100100101000010011110001101011110101110110010111", "01110100001011110101110000111100010101000100000110", "11010100000001010000011100110110100110110011010000", "01110011001010111000011100000110101001110111100000", "00110011100100010000100001111001001001010101010001", "00100001001110101111111111000000100011100111110101", "00010001100100000010010100111010111100111101010011", "01010100011001010111010110110100101001110111111001", "10101111010010010111110000000100001101011110111000", "00101000100001000101001111001010001110100011101101", "01111010100000010000101010011110101000011101010100", "11010110011001110011111001111110001010011011101101", "00101011110101101100001001011110111000111000110011", "10110001000100110111000001010000101111010101010000", "11010001010111110000111100001111111101001000000101", "01001101000011110011101001001011010101010110110111", "10001100001100101110110010001101001010010000101100", "11110000111001000001100110110011001110110000010001", "01001011100010110100011000011000000011101101110001", "11001111001101000001110000101110000110110000101111", "10111001001000101010101001100010010011111010011111", "00011111010111101111110000001010110001000010111111", "00111110000001100110111001011011111010001010011110", "00011010101011001100100101001111110010000100011100", "11000101001110100010110111011110001110000011010010", "11100000111101011111001100001001011000011100001101", "11101011101111010111101100101111011000111100111011", "11110101111011111000011011001011110100101111111010", "10111101001011011010111101000100000001010110001000", "10101011101101001001010100011001101011010101011001", "10110010001100111101100100110001001000010001010101", "00110100000100001011100010101001100011010000101000", "00110011111100001010100011110011000100001100111100", "10001101100010111010011100001010111111110000000010", "00101000110100100000011010111010001010011100100110", "10101110010101011101001110010001101110110000001111", "11001010111000010011101001110001111101010011011011", "00101110011110000000010110010101110111111100110111", "00101011100100101010001110110100000011100101100111", "10100111000001001010101010011011010011000011110111", "11101100000110110101011100000111001111100010100001", "10011010001101010111011111011111111000110000000000", "00011010110111101111001111010001110100001101110101", "10100000100100111010101011001111111110011001000100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> board = {"01101100010101101001001000011111111000111110101010", "10000111100011010100111111001011010101000100100111", "11000111010101100101110110010000101011101100000111", "11101111110010100001111110010110000100001110010011", "10101101101001101011011011110110110100001010000101", "10101101010101110110111110011000111011001111101011", "10011100111111000001000010000000100010101101110000", "11011100000000011011110100101100110001001110011011", "01000110111101110011111100011001000100100001001100", "11110110010000101100100001100100010100010101000001", "01001011011111111111001101100011011011010011000010", "01001011010001000110101010011100011011101010010011", "11010010100001001011100001010011001100001010100001", "00100010001101010010101010010001011000101100011001", "01110010101010100011000101100000001010111111111001", "01100011001011110111001100111000111101010110101111", "00111111101110000001011001010000111110011000111011", "00111101100100111000001000100000101100100101101101", "01010110111010111000101001000001001011011011111011", "01001100000011010101001011011111011011101010111011", "00000110110011011100000000011111101101101000011110", "10001101011100011011100100111100100001001010010000", "00011110001011011011100001001110000010011110000101", "10010001000101110001001011111000101000100111110010", "10010101000111011101011000001101100111001000101001", "10100001010100100011100100100111110011101001110100", "00101000001011001110101111000111000011010010111101", "00011111000100001010100010110000001011110101100100", "00101110001100000001000011001000100010010110001010", "10101101001100100111111101001000010110100100000101", "10010101100110001000010011101101101011001001010111", "00000111001001010111001010101110101100100011001110", "00001011001010110100101100100011001000011110111001", "00111110110001101010011111101001110010110110101110", "01110111001010001100011110011001011001101010100000", "11101011100000000000011000011010001000011100001111", "10011100010011010110100010110001000111100111110000", "00010111101000110011100010000111011101011000111111", "00000100111100011101101100110110000111100111001110", "10101011100001100001011111001100111000001011011010", "01100001010101011001110101010111101111110000100111", "01101111100110011101100001001011110011101100101001", "01000111001000101101011101010000110100011100101110", "00110011001001010111111000000001101001101100101000", "00011110011110110011111101110111111111011101111010", "00000000111000111010111001001001101011101100010000", "11001100000001110110110011111001100000001010010100", "00111001011111111001100101011100100000111000110110", "00111111101000000010000110111011011000101110110111", "10110000111111011011101011011001101111111011100110"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> board = {"01111100100001000101111111101101101000000001110000", "11101111101000101011000101011000000010011001011001", "01001001110111011100101011001111000010110010011110", "11110000010110010101110111011111000010111110011001", "10100010100101011101100001101001010111110111101110", "01011110001111000111000010011011111011100000011000", "00000111001111111001110101110101010100011010000000", "01110110100011100110100010110101000111111100011101", "11010100001111000110100000110010000000101110101101", "00100010100001011111000001000000100010001101111101", "10100010001001010001111101100001010000101110001101", "11110100101001001011011110100001101010101100011011", "00000010000111100000010100001010000011011100111101", "00001100111101000000010111100101110111001111011110", "11000001010010100001001111101000000010100101110111", "11110100011101111101000000111110011101010000100111", "11000110101101110101110100101001001011000110110100", "11100111000010001100101011000111100011100011010111", "10000011011101100100000010110111011100101110000000", "00001011001010110111001011101011101100001010011110", "01100010011101010010010011111110000011001110001001", "11000001110001100110100000000101101101011100001100", "00010001101101111001000111000011101010000100110101", "11000000101100001010010110000011010101011011000000", "10111000010100101000010111110101111001101110000111", "01101000101010001000000111011011110011011010110010", "00101110110110011010100110010010110100101000011111", "00101110011010011110011001010111100100011000001011", "00101000011111011011110110110100000111010111110101", "00101001110111001101100100110001001110001001010101", "01001101110010011001100111111101101100110000110101", "10000000100100100111110101001111101110011101111100", "10101010001000001011110000001100100000001000000101", "00100000011111000000000110001110010100101110100010", "10000001000100100100110010101101111000110000010010", "11011111100110001111101011101000101000110100011110", "11001111000110001110010011000111110111111010000011", "01110100111100101011111110110110010011010110100100", "10011011101001101110011011100000001001100110111010", "10101101111101010101101101000011011110101110100001", "10011110110000100010100100011100111111000011000110", "11110101000111011110001000010011101011101100110111", "00101101100101111000001100111000000001011100101010", "00111000110100110110000101111011101011110100101000", "11001010111000011010000011110010100110101111111111", "01011010110001010001100101000010101000111000011100", "01000010001000100100010000011000100110111001001010", "11100001101001100011111010001110111000001001100100", "11000000111001001011010110011011110101001011011101", "11111000001000100101001001011011110000110001010111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> board = {"111110001111000100011101110001000001", "101010110111000100111011110111100000", "010011011000110111110010011001011111", "000010000100011001111010011100000101", "001001000001000001111110011011011101", "001011110011110001111100111110010110", "001000001101011000010010110011100100", "101101100010111011001100010011101000", "000111010010100111001001111110111010", "010111001010111110010101010000111100", "000101110110011010001110001011101101", "101101101110011000001000010000010110", "010001110001101010011101110001011101", "001000110000100100111100101100111111", "101011101110101110101011100010100010"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> board = {"010011110010101101000010001010", "101101000100110110001010000100", "110110000111010010010011101011", "010011101111000110110000111000", "110010011001000010001011010111", "011011001010011000001001000101", "101000011110100000100000000010", "010101000001010011110001001010", "111101110000000011100010011011", "111110011110000100111111101100", "001011110001000001011100011010", "011000010010101000011111101010", "111010010011100011111100110110", "001100010110001111011100001110", "001110111001011011111110011100", "011010001111000011011010011000", "001010011000010101010110011010", "101001111101011110101111101100", "011101101111101001000000000100", "011111000010111010001100000110", "100110100001110010110001101101", "010110001011000111101001011100", "101110110110111101001100011111", "010101111101000100100101111010", "010110011100000001001000110101", "000100110000101111000111111101", "010110011000100101010011100000", "100111111111011010001001100111", "001010100111101010110000001101", "010101010110111101001010110100", "010111110000011101101010011111", "111100101101011110011010001010", "000110011110110011001100101111", "000110100011000011010111000101", "001100110010011001000001011010", "111110001110110000001000110000", "111001011000001010000001111010", "101011001111100101010000010010", "011000111111011000110100001100", "010001101001101001111111010100", "111101001111010100000000000110", "101001110100011001001110100111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> board = {"010000000011010011", "101101101011111101", "111011110000100101", "110111010000000001", "010100101101100011", "111001011011101010", "100011111010001100", "110101110111101001", "110000100101111001", "110010100001010110", "100111001001111101", "011000011000110110", "001111111110001010", "010010011000010111", "110100100110110100", "010100100100101010", "110001010001001111", "010001010101000001", "100101011000001110", "000111000010101001", "010010001100101011", "000001000101101101", "101000000110010000", "110110110101001011", "000110010111001001", "101011100010101101", "000100001001010010", "011100010100001110", "101001110010000111", "000000000111011110", "101111110000110011", "010110001001001000", "010010111010100100", "001111001111100010", "101001101000000100", "001000011000101110", "011110100010111100", "100001000110010001", "000101101001000111", "100100110000110011", "011000001110111110", "100010101001011100", "010000101010100000", "101010111010101111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> board = {"0000101101010000001", "0100111001101001110", "0100010100011110001", "0110011111011110100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> board = {"000110011011100100111110010011", "110011011101000100011011010110", "001101110111100011000100011001", "110101011110001000001101000110", "100110101111011010100001011111", "000100001010101010111100111000", "001101011001111111000011001100", "000000010111001010011011011111", "010010010111000011000011010001", "011011110111001100110001110111", "101000101011011011111001110001", "100110110100101111110010101100", "011101001000011110111110100000", "101100001101011101110110010111", "000101010110011001010110101101", "111101010111001000000110110101", "111000001100111010011100011110", "001110011000010110110001001111", "110110111010010100010110000001", "111000111000001010111001110100", "111001011111000101010111100001", "110010111011011011110100111101", "110000010010001110000100101101", "001011001011100111101101011001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 44;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> board = {"111110101101010010", "010001111110111001", "000010111110111001", "111101100011001001", "001110111011111011", "000001000010000010", "101010000001111101", "110111010101011011", "101110000111001111", "001100010110001011", "010001000101010011", "100000101110010001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> board = {"111001111010101101100101101100001011010010001", "100110111110010011000011100011111011000100001", "101100011000110001111010011011111101001111100", "001000001111000010111001010000011100111001101", "011101011001011001010001011001101010001001111", "001101111000101111000100100000011011010111001", "100000110100100001010101010111101001011110000", "110001111001111011010001111111110011011101011", "100011101100000110000110010110110100000010100", "101010100111010100100010101100010001110110011", "011111100111000001000000110100100110111000111", "011000001111100011101001101100110000110001111", "010100001000001110100101101010111000010100101", "001101101011000011011000010110001011100111111", "010111010100101110111101111001011110101110110", "011001101111000100100100111001100111001001111", "000100011000000001011101111000111000100110001", "110101111010001101011111010001100101100010111", "001101100101100100011000010110010110100111000", "000010010111010101000001001011100000100011001", "100110110110100001110010000100110110111111111", "110011111110101101000100000010010100111001000", "111011010111110010100110011001100000000010010", "000011000011011011001001001111100100101010000", "111000110101010100011001110100011101011010001", "111011111110101100000110101101100110101010010", "110111100011010010001101100001010011101110101", "100000101110000011101010110010100000111011000", "000000111110001000111110011010100010100111001", "110101101000100110100111110011001100001101011", "111001100010001000100101110110011111110110111", "010101101010100011110101001110111000110110111", "011000001111000001001111111011010110011110011", "101110011000000100111010101100100111100011001", "011100111010010010010110110001111111010110001", "010111000101010100100001100110110000001100100", "001010110111110011110010001110010000101011001", "110010001011101011001101100100011010110110111", "110110001000100011001110111111110010011011101", "100000100011111001000001011000111010101100111", "011010010111111010101011011111001111111110010", "001111000111011111010000010000101110011001000", "111101100000110010001110010100111001101111001", "101000110100110000010011010010010101110110111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 79;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> board = {"001111001001", "100001111011", "001100001111", "111001111011", "101010110011", "100101010000", "010010110010", "111101010000", "010001001110", "010100011101", "110101001111", "000000101000", "101100011110", "111101100111", "100100110101", "011111000011", "111100010111", "001010010101", "101000110111", "101110010100", "011001000101", "001001001011", "011010101101", "001110010001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> board = {"000010100111101011001001001110101", "101010100011101000001000110000010", "110101101111111100101101111111000", "111000110011110101111111001000110", "000010011110101010000101110000111", "011010111010110110011101100001110", "001111101101110000000011011100110", "110101100110000010111111100111101", "110010010100010100000101100001101", "101001010100011010010101010111000", "101110000111101001010111000101111", "100110001011000000011010000011100", "000111100101001011101110110110010", "011001011000001111111011000001000", "000101001100010011000000111001001", "111101110110101010001101011000110", "111010110000101100100010100000111", "000000000010110101000110001001111", "011010100101101110111011111000101", "001110100111001001100001101111001", "111110110010110101100011000100001", "101011111010011000110111000000101", "001111111111110011101001001001101", "010010000111100110110010111100100", "111111001110001100010110000001000", "010110011001011001101010001101001", "110001011000110001001111101001101", "010110101111011011001100110000011", "011010110010101100010001111010001", "111011100100101001011110111110100", "001111110101101011111101011010100", "110000001111110010111110011010010", "100111110101100011001010100000100", "110001110000100111111101001010000", "111101100001000011011100101101100", "000100000110110001000101000000010"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 56;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> board = {"0111110000110", "0011001111000", "1110010000000", "0001110011101", "1000101011011", "1011100111000", "0000101110101", "0110011000011", "0010010110011", "1010111110111", "1000111100111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 58;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> board = {"00001001100010001000000001000000000010000100100010", "00011010100000000000100000110010001000000010010001", "00000000100000010010100100001001000101000000111100", "00001000110000010001011100000010000010000000100000", "00001100010000000000001010000000000000000000000111", "00001011100100001101100100000000000100000010010100", "01000010000000000100000001000000000001000000000000", "01110000000100000000000000000101000001010010000000", "00010100001010000000000000000000000000000100000000", "00000100001000000000000011001001010010100010001010", "01000100011010010000110000001000000001110000010010", "10010001000000010000001000100010001000000000000000", "10000010000111000000010000100010001000010010000000", "01000001000100000100000100100100101010001001000001", "00000000000000010000001000111010000010100100000000", "00000100000110100000110000000000100000000000000100", "00100100100000000000000000001111100000100000010001", "01001010000000100010000001000010000100000000001100", "00010000001010000100000000000000100010010000001110", "00000001100010100000000000001100000010000001010101", "00100011100001000100010001001000011111010001100000", "10101010000000000001100100010000100000011000010010", "01000000011000000001000100000100100111011010011000", "10110011101110000001101000000000011100000100001000", "00011100100100000000000100000000000000000110000000", "00010001001010000000100000000000011010011000000101", "10001000010000101000000000000000000000000000010000", "00010000000000100010000111000000101100110000000000", "00100011000110100000000000000101110000000010000000", "00010000000001100010000000000000000110000010000000", "10000100000000000000000010000010000000110000100000", "00001000011000100100000001101110000000010100100100", "01100001000000100010100000000100000001010010100001", "00001110010000000000110000000000000100100000000000", "01100000011000000010000000000100100000100001000010", "10110000001001000000100000000100000010001000000001", "00000101000101000001010010001001000000001000000010", "00000000000010001000000010000000100101101000011010", "00101001001000000000010000110010001000000000001000", "10000001000000000010110010000000000000000000000000", "10001000010100000000001000010000100000000000000000", "00000000100001000010001000000000100000000010000000", "01000001010000001000000000000000001000001010001001", "00000010000000001001011001000001010000100010001000", "00000001100100001010110000000000010000001100100100", "00010000001000111000000000000110001110000100100000", "11100010010000001000000110000100000110101100100001", "00011000000100000000000001001100000100000111010000", "00011000000011000101001000000100001000100000100010", "01100000100001000000000001010010000000000000100100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 74;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 79;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> board = {"01100011010100000111100011110110000000000001001100", "10110101010001100010100101110100101111100011001001", "01110100010100110010100110010100110100010110010100", "00000000010001010110011100100000001001101100011010", "01001100010111001001011100110011011010110111010001", "00101110100100100100000000000000001000101010011000", "10100000010000000101001100000000111100011010000111", "01100001000010111010000000011111000010100110100110", "10101011101010111100011011001100000000011101101110", "01010010001011100010011000000001011010101000001111", "11110000111101101001100000010010010001110000000100", "10110000010011100000101010001100100101000010011110", "00110101111010001011001010101010100000001100101110", "00011110000010100010000011011010100000001000000011", "10011010010011011001101000001010011001010111000011", "10000010010100110001110000000110011000100010000100", "00111000100100000010100000100100001001110101111111", "01100000010000100011111010000010001100100000010000", "10001101011110011000001001101010100011000010111000", "11000000010100011011101000110101010000010010111110", "00000010000110101101011100000001000100001000101001", "11000001000101010001110110100101010100000010000100", "01001110000100001100101010001010000011000110011111", "00101111000100001101100110100101011010101101100001", "00100111001100011100011001100110001000100110110000", "00001000010111100000101000010010001000111010000111", "10000111111110100000000010001000001000011110010101", "00100100101000101011011010110001100000100101110110", "01000110000001001000000110011110000111001000001100", "11001001100111011000000000101001011100010110000011", "00001000000001110110110000111001111001101000001110", "00000111000001001000000011110011000001000100010101", "00110001001001101100001111100011001000001000011110", "00000001011000000001011111100101010000000100010111", "00101101110101000101001011000011000101011001000100", "10100100111000000010001110011000100001110100010010", "11101001000010000001101001011000000101100010111001", "00000100001000000100000100111101011100101010110101", "10010011101100011000001001001110101101010110000011", "01100101110010010111111101010101101001000010010111", "00100010000000101011000100000100011000100000001010", "10001100110101001010101100110110010001100101101100", "10001000000100001000101010100110000000100000011100", "01000100110001101000010100000000001111100000010000", "01110000000010000110001010010001101000010111010010", "10000100011111110000000000000100000110100000000010", "01000101000101000110000010010100110010101000101001", "11001000110101011000000010111001010111000010011101", "00111000111110100000001101000001100011110000000010", "11001010111000011110011010100101011100100101010001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> board = {"11111011111111101110111101000000010111100111011111", "00100100110101110110001000011101100010011110110110", "11111100111000000111011011000111101011111111001100", "10111110011000011111011011001111111101010001010000", "11011101101100010111111011110111000111111011011101", "11111100110111111101110011001111100101001000101111", "11110110110100010000111000111101111101001101011100", "10101100000101011110101100101001111110111011100101", "01111111100001011001001111011110011010110110101110", "11101111100011011111011100110101010100101011101101", "10110100101011111011110111001011110001111100111100", "01001101111101110010001101000001111001111111001110", "11111010101011001111100000011110110100011101110100", "01111011100111111110101110111011100001111000110110", "00011001100010010111010111101100010100011111111010", "00101000010001000110111110110100010001001010001111", "10110110101000011111000110111110110111001001011011", "11110010110101110110101101100001010100111110000011", "10000101001001101110011110100001100111101000010010", "11110010111011100111101111011001001011110101011001", "11110100000001110010111011111110110011111111101001", "00011111001111101010010011111000110101101111101110", "10010110100111100011011010111100111100010111100101", "01110011111001110101101011110000011011111100101000", "11111011101110010111000100000001011001010110111001", "01110111110110000101011111001111010011101010010010", "01111111001001100111001100111001101111101101110100", "01011010110110101110010110001010101101101111001010", "11100011110111000010011110111000000101100101010010", "11000011101010101101101000110111000110110101000010", "11111010111100110111010011101101000111010001001000", "11101101111001111101111001100111110110111111110101", "11011101111010010111001111101101110011110111111011", "00101011110110011101000101101101000111111011011110", "11011011000111101011111010100101001110111001101101", "11011010110111000100111010101001111110110011011101", "11111111110110011000011010111000101100111100111110", "10101111110111001110111111011101010101100101011110", "01000111010000000100100010100100010011111000100000", "11000111001010110111010101010000001001100100110110", "01010110111110011000011001011011111110110001111101", "01111100010100011010011111011001111111111101110010", "01101111111011111101010111101110110111110101111111", "11011011001001101011010010010111011101001101111011", "01110000001100110011011101010101111111101010101111", "10101001101111110111111111110011111110010100010100", "10001111011111100001111011011110101000111011110011", "00001001110101110110011011100101111100101111010001", "10011100100000101110010101100111000111110110110000", "10111101110101111010010100011101111111101011010000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 79;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 57;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> board = {"0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000", "0000000000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> board = {"0000110001100001010000001110111110100100000", "0010011010001000000101100000000000111000000", "0001000100010101011000010000000000000000000", "0000001001000110011000010010001100001000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> board = {"00100001001101010000010011101011011100000101101", "00000000000000000111010001011100011011000011001", "01010101111101101110000100011101011000001000000", "11101110111010101100011000111110100000100101010", "01000000100000101001100001001101000110010000001", "01100011110111001010000100011111100111100011000", "00101110000000110100110010011100000010001011110", "11001010011101100011000001101000101100000110111", "10000001011110100101001001000000010100000000100", "00111011111011111111000110000000001100001100000", "00101100101010010011111010001000000000100010001", "00101110010011000110110101010011000100111110110", "10100001100001000010000000010101101101000001101", "01110000110001011000000101111100000110101010110", "00101001010000010011011001010110101111111000110", "00001101010110110000010101000101000001101011011", "01010100110010011000100011110011000010010000011", "11000110011011001001010000000000000100001010011", "11100011000010000010110011010101100011101010000", "11000000100000100010110001100010001001011000100", "00000000000010101010000100100100011000100100010", "01100110100101000100101000111100000100000000100", "00011000111001100111100100001000010101100010011", "00010000010010010010000001010100001001001100011", "10001000000000000001010101101011000111100111010", "00100101111100100011100100001000111100001000000", "00001111001000001010011111111000000010000010011", "01001100110101000110101100001000101100111001001", "10110111000011101000001000010000100010110001010"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> board = {"111000011011010001011000", "100110100110001110001110", "010100000011000111101001", "101110101000111111100110", "100101110010110100110100", "011110000000100011000010", "100100100100111010110010", "111011101000111110100111", "111010001100011111010011", "100101000101000101001001", "000001001110111000011011", "001101000001000111101100", "010001001001100110111101", "011010101011100001001001", "111000011111100111101011", "101110000010001101001001", "100111010100001001010010", "010010000000011001110110", "001110110000101010001010", "011101011000111110001100", "101111101001101000110010", "111111001011001001101110", "101010001011001101100001", "010000001011110110111011", "101011010000000101010101", "000110111100100111000111", "100110001011110010100010", "111111011111101111010010", "010101101111011011010111", "100011001000010010010101", "000100001011100110000001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> board = {"111110101111", "010111100001", "100101110111", "010111010001", "101110001101", "110101010101", "111111100010", "011101101111", "100010101111", "111110111111", "010111100001", "111010011111", "001110010010", "101100111101", "110100110111", "110011001111", "101010110000", "111111110110", "001111000010", "110110000100", "101111101100", "110100100011", "111101101110", "011110101111", "010101111100", "010101110011", "101001010100", "001010101010", "111110011101", "111010111110", "001000101110", "111001101111", "000100111010", "111100100111", "100100001111", "101010100011", "011111101110", "011011011110", "010101100001", "110011110001", "011010101001", "011111110000", "110111011110"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> board = {"10111101110111", "11100011011111", "01010101011101", "00111111011110", "01101111010111", "10101111011101", "10011111110111", "11101111100110", "11110100111101", "10111100111111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> board = {"1111111", "0111111", "0110111", "1011011", "1101111", "0111001", "1111011", "1010111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> board = {"1111111111011111111111111111011111110111001", "1101111111101111111111111110110111101011111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> board = {"111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> board = {"0"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> board = {"1"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> board = {"00000000000000000000000000000000000000000000000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> board = {"01110011110110100000100110100101010010111001001010"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> board = {"11111111111111111111111111111111111111111111111111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> board = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> board = {"1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "0", "1", "0", "0", "1", "0", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "1"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> board = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> board = {"00000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000010", "00000000000000000000000000000000000000000000000100", "00000000000000000000000000000000000000000000001000", "00000000000000000000000000000000000000000000010000", "00000000000000000000000000000000000000000000100000", "00000000000000000000000000000000000000000001000000", "00000000000000000000000000000000000000000010000000", "00000000000000000000000000000000000000000100000000", "00000000000000000000000000000000000000001000000000", "00000000000000000000000000000000000000010000000000", "00000000000000000000000000000000000000100000000000", "00000000000000000000000000000000000001000000000000", "00000000000000000000000000000000000010000000000000", "00000000000000000000000000000000000100000000000000", "00000000000000000000000000000000001000000000000000", "00000000000000000000000000000000010000000000000000", "00000000000000000000000000000000100000000000000000", "00000000000000000000000000000001000000000000000000", "00000000000000000000000000000010000000000000000000", "00000000000000000000000000000100000000000000000000", "00000000000000000000000000001000000000000000000000", "00000000000000000000000000010000000000000000000000", "00000000000000000000000000100000000000000000000000", "00000000000000000000000001000000000000000000000000", "00000000000000000000000010000000000000000000000000", "00000000000000000000000100000000000000000000000000", "00000000000000000000001000000000000000000000000000", "00000000000000000000010000000000000000000000000000", "00000000000000000000100000000000000000000000000000", "00000000000000000001000000000000000000000000000000", "00000000000000000010000000000000000000000000000000", "00000000000000000100000000000000000000000000000000", "00000000000000001000000000000000000000000000000000", "00000000000000010000000000000000000000000000000000", "00000000000000100000000000000000000000000000000000", "00000000000001000000000000000000000000000000000000", "00000000000010000000000000000000000000000000000000", "00000000000100000000000000000000000000000000000000", "00000000001000000000000000000000000000000000000000", "00000000010000000000000000000000000000000000000000", "00000000100000000000000000000000000000000000000000", "00000001000000000000000000000000000000000000000000", "00000010000000000000000000000000000000000000000000", "00000100000000000000000000000000000000000000000000", "00001000000000000000000000000000000000000000000000", "00010000000000000000000000000000000000000000000000", "00100000000000000000000000000000000000000000000000", "01000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 99;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 98;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 99;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> board = {"0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000", "1111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 96;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> board = {"100000000000000000000000000000000000", "110000000000000000000000000000000000", "111111111100000000000000000000000000", "111111111100000000000000000000000000", "111111111100000000000000000000000000", "111111111100000000000000000000000000", "111111111110000000000000000000000000", "111111111111111100000000000000000000", "111111111111111111110000000000000000", "111111111111111111111111000000000000", "111111111111111111111111000000000000", "111111111111111111111111110000000000", "111111111111111111111111111100000000", "111111111111111111111111111100000000", "111111111111111111111111111111111100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> board = {"11110000000000000000", "11110000000000000000", "11110000000000000000", "11110000000000000000", "11111100000000000000", "11111111111000000000", "11111111111000000000", "11111111111110000000", "11111111111111110000", "11111111111111110000", "11111111111111110000", "11111111111111110000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> board = {"000000", "000000", "100000", "100000", "110000", "110000", "110000", "110000", "110000", "110000", "111000", "111000", "111000", "111000", "111000", "111000", "111000", "111100", "111100", "111100", "111100", "111110", "111110", "111110", "111110", "011110", "001110", "000110", "000110", "000110", "000110", "000110", "000110", "000111", "000001", "000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> board = {"1100000000000000000000000000", "0010000000000000000000000000", "1001100000000000000000000000", "1000011000000000000000000000", "1100001000000000000000000000", "1100001000000000000000000000", "1110001000000000000000000000", "1110001000000000000000000000", "1110000000000000000000000000", "1111110000000000000000000000", "1111110000000000000000000000", "1111111100000000000000000000", "1111111110000000000000000000", "1111111111000000000000000000", "1111111100110000000000000000", "1111111100110000000000000000", "1111111100011000000000000000", "1111111100011111000000000000", "1111111110000001000000000000", "1111111110000001000000000000", "1111111110000000100000000000", "1111111111000000000000000000", "1111111111000000000000000000", "1111111111000000000000000000", "1111111111111110000011110000", "1111111111111111100011111000", "1111111111111111110001111100", "1111111111111111111111000000", "1111111111111111111111000010", "1111111111111111111111111000", "1111111111111111111111111111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> board = {"01000000000000", "10000000000000", "11001000000000", "00101110000000", "11010110000000", "11011110000000", "11001000100000", "11001000000000", "11001000000000", "11111110010000", "11110111010000", "11111111010000", "11111011000000", "11111111101100", "11111110011100", "11111111100100", "11111111100100", "11111111111010", "11111111111010", "11111111111111", "11111111111111", "11111111111111", "11111111111110"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> board = {"01", "00", "00"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> board = {"1000000000000", "0100000000000", "1000000000000", "0010000000000", "0110110000000", "0110111000000", "0110111100000", "0111111110000", "0101101111000", "0000100111000", "0000100111000", "0000101000000", "0000101100000", "0000001100000", "0000001110000", "0000000100000", "0000000010100", "0000000010100", "0000000010100", "0000000011000", "0000000000110", "0000000000101", "0000000000111", "0000000000011", "0000000000001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> board = {"100010000000000000000000000000000", "111100001110000001000000000000000", "111111101011111000000111000000000", "111111111110011111011001110000000", "111111111111111000000110011000000", "111111111111111111111110000000100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> board = {"01100000000000000000000000000", "11110000000000000000000000000", "10001000000000000000000000000", "11001110000000000000000000000", "11011110000000000000000000000", "11101111111110000000000000000", "11101110101111100000000000000", "11111100111101100000000000000", "11111111100110111000000000000", "11111111111110111000000000000", "11111111111110111010100000000", "11111111111111111000001000000", "11111111111111111101010000000", "11111111111111111100110111100", "11111111111111111111000101100", "11111111111111111111111100000", "11111111111111111111110001000", "11111111111111111111111000110", "11111111111111111111111110100", "11111111111111111111111110110"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> board = {"0000000", "0000000", "0000000", "1000000", "1000000", "1000000", "0100000", "0100100", "0000110", "0000010", "0010010", "0001010", "0000110", "0000000", "0000000", "0001010", "0001011", "0001111", "0000111", "0000011", "0000010", "0000010"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> board = {"11000", "01000", "00000", "01000", "00000", "00100", "10100", "10100", "10100", "01100", "01000", "00000", "01000", "01000", "01010", "01010", "00110", "00011", "00110", "00000", "00001", "00001", "00001", "00000", "00000", "00000", "00001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> board = {"101000000000000000000000000000000000000000000000", "010000000000000000000000000000000000000000000000", "010110000000000000000000000000000000000000000000", "000110000000000000000000000000000000000000000000", "110001100000000000000000000000000000000000000000", "111000001100000000000000000000000000000000000000", "111000111110000000000000000000000000000000000000", "111001110010000000000000000000000000000000000000", "111001011101000000000000000000000000000000000000", "111100111101110000000000000000000000000000000000", "111110000010011111100000000000000000000000000000", "111111110111010100010000000000000000000000000000", "111111111011001010000100000000000000000000000000", "111111111011111101000100000000000000000000000000", "111111111001111100111111100000000000000000000000", "111111111001111100101101100000000000000000000000", "111111111110111100110001100000000000000000000000", "111111111111100000101111011000000000000000000000", "111111111111100000111111011100000000000000000000", "111111111111100000010001011111100000000000000000", "111111111111100000000000011111110000000000000000", "111111111111110000000010010111110000000000000000", "111111111111111000000000000011111110000000000000", "111111111111111000000001111100111111000000000000", "111111111111111111100001101100000111100000000000", "111111111111111111110001100001000111100000000000", "111111111111111111110000011100011111100000000000", "111111111111111111111100000110000111111000000000", "111111111111111111111100000110001001111000000000", "111111111111111111111111111111001001111000000000", "111111111111111111111111111011110000011000000000", "111111111111111111111111111011111100111000000000", "111111111111111111111111111100011100101110000000", "111111111111111111111111111100011110110000000000", "111111111111111111111111111100011111001000000000", "111111111111111111111111111110000010011101000000", "111111111111111111111111111110000011110010111000", "111111111111111111111111111111100011111110011000", "111111111111111111111111111111111111110100011100", "111111111111111111111111111111111111110101010110", "111111111111111111111111111111111111111101010010", "111111111111111111111111111111111111111100111001", "111111111111111111111111111111111111111110011110", "111111111111111111111111111111111111111111111001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> board = {"1000000000000000000000", "0100000000000000000000", "0110000000000000000000", "0110000000000000000000", "1011000000000000000000", "1010100000000000000000", "0010000000000000000000", "0111000000000000000000", "0010010000000000000000", "0011101000000000000000", "0101100100000000000000", "1000101000000000000000", "1000111110000000000000", "1110000101000000000000", "1111011001000000000000", "1111011110000000000000", "1111110001100000000000", "1111111001110000000000", "1111100010011100000000", "1111111100111000000000", "1111111101011000000000", "1111111111000000000000", "1111111110000010000000", "1111111111101000000000", "1111111111000010000000", "1111111111010010000000", "1111111111111001100000", "1111111111110010000000", "1111111111110000000000", "1111111111110011010000", "1111111111110000100000", "1111111111110000111000", "1111111111111110000100", "1111111111111111111000", "1111111111111111100100", "1111111111111111111100", "1111111111111111111100", "1111111111111111111100", "1111111111111111111110", "1111111111111111111100", "1111111111111111111111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> board = {"1000110000", "0001001110", "0000110100", "0000010111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> board = {"0100000000000000000000000000000", "0010000000000000000000000000000", "0011000000000000000000000000000", "0101010000000000000000000000000", "0001100000000000000000000000000", "0011001000000000000000000000000", "0010011000000000000000000000000", "0000010110000000000000000000000", "0000111111000000000000000000000", "0001111111000000000000000000000", "0000001001100000000000000000000", "0000000011000000000000000000000", "0000111011000000000000000000000", "0000101111100000000000000000000", "0000001111011100000000000000000", "0000011111001111000000000000000", "0000000011110111000000000000000", "0000001011110011000000000000000", "0000000000110011000000000000000", "0000000110111111000000000000000", "0000000110000100100000000000000", "0000000001000001000000000000000", "0000000001100000001110000000000", "0000000000100010001110000000000", "0000000000110010000001000000000", "0000000000000001110001100000000", "0000000000000000101101110000000", "0000000000000000110001111000000", "0000000000001000010000111100000", "0000000000000111000100011100000", "0000000000000011010110000110000", "0000000000000011011001110000000", "0000000000000011101110000000000", "0000000000000011101110111000000", "0000000000000001101111000110000", "0000000000000000000001001110000", "0000000000000000000001001110000", "0000000000000000000001001011000", "0000000000000000000000100101100", "0000000000000000000011111110000", "0000000000000000000000000101100", "0000000000000000000000000101100", "0000000000000000000000100011110", "0000000000000000000000000011010", "0000000000000000000000000100100", "0000000000000000000000000001111", "0000000000000000000000000000000", "0000000000000000000000000000011", "0000000000000000000000000000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> board = {"010000000000000000000000000000000000000000000", "101000000000000000000000000000000000000000000", "001000000000000000000000000000000000000000000", "001010000000000000000000000000000000000000000", "100011100000000000000000000000000000000000000", "101010000000000000000000000000000000000000000", "110010110000000000000000000000000000000000000", "110011110100000000000000000000000000000000000", "111000111100000000000000000000000000000000000", "111000010010000000000000000000000000000000000", "111100001110001000000000000000000000000000000", "111011000111100100000000000000000000000000000", "111100100110110111111000000000000000000000000", "111110111110111011111000000000000000000000000", "111111111111011100111000000000000000000000000", "111111011111101110111000000000000000000000000", "111111111111100111110100000000000000000000000", "111111101111100011100100000000000000000000000", "111111101111110111100100000000000000000000000", "111111101111111110000111100000000000000000000", "111111100111111111000011001000000000000000000", "111111100000001111000111001110000000000000000", "111111111110001111111000001111000000000000000", "111111111111001111111100000001000000000000000", "111111111111001111111100100000100000000000000", "111111111111000111111101001000100000000000000", "111111111111100111111111001111010000000000000", "111111111111111001111111000111111100000000000", "111111111111111000111111110100110111110000000", "111111111111111110011111011100011111110000000", "111111111111111111101111110100011111111000000", "111111111111111111100000111000100111111000000", "111111111111111111110000011100111011111000000", "111111111111111111110000011110100010111000000", "111111111111111111110000011110010011111100000", "111111111111111111111111111110001011000000000", "111111111111111111111111111111100111000000000", "111111111111111111111111111111111001000010000", "111111111111111111111111111100000000111010000", "111111111111111111111111111100000001011000000", "111111111111111111111111111111111100011100010", "111111111111111111111111111111111110000011110", "111111111111111111111111111111111111010001110", "111111111111111111111111111111111111000000000", "111111111111111111111111111111111111100111001", "111111111111111111111111111111111111111001111", "111111111111111111111111111111111111111100101"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> board = {"0000001000000110011011110000010"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> board = {"100000000", "000000000", "010000000", "011000000", "111000000", "011000000", "000000000", "000100000", "100000000", "100100000", "101010000", "110010000", "110011000", "000011000", "100011000", "100111000", "100110100", "100100000", "110010000", "111011000", "111011000", "110111100", "111000110", "111001010", "111110100", "111110100", "111110100", "111111110", "111101010", "111100111", "111100001", "111100101", "111100010", "111100011", "111100000", "111100001", "111111111", "111111110", "111111111", "111111111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> board = {"11100000000000000000000000000000", "11000000000000000000000000000000", "10001000000000000000000000000000", "00011000000000000000000000000000", "01010011100000000000000000000000", "11010011100000000000000000000000", "10110000000000000000000000000000", "11011100011000000000000000000000", "11100110011000000000000000000000", "11101111101000000000000000000000", "11100111110100000000000000000000", "11100110100000000000000000000000", "11111001100101000000000000000000", "11111001000000100000000000000000", "11111110000100111000000000000000", "11111001011010011100000000000000", "11111101011001001100000000000000", "11111100010000001100000000000000", "11111110001100100010000000000000", "11111111001100100011000000000000", "11111111011000100010100000000000", "11111111000011101010010000000000", "11111111111001101000011000000000", "11111111111100111000011000000000", "11111111111011010011000000000000", "11111111111011110000011110000000", "11111111111011101000011011000000", "11111111111011111101000000000000", "11111111111111111110000000010000", "11111111111110011111110100010000", "11111111111110001111011101010000", "11111111111110000110111111011110", "11111111111111111001101000011110", "11111111111111111001101100111110", "11111111111111111001110100111110", "11111111111111111110011011000110", "11111111111111111111000111011110", "11111111111111111111100001101010", "11111111111111111111111111111110", "11111111111111111111111111100110", "11111111111111111111111111111001", "11111111111111111111111111111010", "11111111111111111111111111111111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> board = {"000", "000", "000", "000", "010", "110", "110", "110", "010", "010", "100", "100", "000", "000", "100", "100", "000", "100", "100", "010", "011", "000", "100", "111", "101", "110", "110", "110", "110", "110", "110", "100", "000", "000", "010", "001", "001", "001", "001", "001", "001", "001", "001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> board = {"1000100000000000000000000000", "1010000000000000000000000000", "0001110000000000000000000000", "1101100000000000000000000000", "1101100110000000000000000000", "1101001000111111000000000000", "1001011011011111000000000000", "1011101011011111000000000000", "1010101011101111110000000000", "1110011000100001110000000000", "1100101101000110111000000000", "1100101011000000111000000000", "1100110001001101111000000000", "1100010010011111111000000000", "1111010000001000111110000000", "1111011100101000111110000000", "1111101111001110111111000000", "1111100111001111000011000000", "1111110111110111000101000000", "1111110111111111000101000000", "1111110000011100110100000000", "1111111100011000011010000000", "1111111111100111011111100000", "1111111111111111011111100000", "1111111111111110011111000000", "1111111111111101001111110000", "1111111111111111101111001100", "1111111111111111100100111100", "1111111111111111111000000110", "1111111111111111110000001010", "1111111111111111111110001010", "1111111111111111111111000110", "1111111111111111111111110001", "1111111111111111111110110011", "1111111111111111111111000010", "1111111111111111111111110001", "1111111111111111111111111110"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> board = {"011101000000000000000000000000000000000000", "011000100000000000000000000000000000000000", "100100001010000000000000000000000000000000", "101110000010000000000000000000000000000000", "111000001101000110000000000000000000000000", "111000100011101111110000000000000000000000", "111111110001110111111000000000000000000000", "111111110100110001111000000000000000000000", "111111111000000000000111000000000000000000", "111111111001000011000011100000000000000000", "111111111100010100110001100000000000000000", "111111111110111101111101110000000000000000", "111111111111101000000011111000000000000000", "111111111111111000010111100011000000000000", "111111111111111000110101100000000000000000", "111111111111111111101101100001110000000000", "111111111111111111111111011010000000000000", "111111111111111111111101101001101010000000", "111111111111111111111100001011011010100000", "111111111111111111111110001001000111111000", "111111111111111111111111110110100001111110", "111111111111111111111111111101010000111111", "111111111111111111111111111110010101011011", "111111111111111111111111111111110000111010", "111111111111111111111111111111111100011110", "111111111111111111111111111111111100001100"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> board = {"01100111010101110000000000011000111111111110000", "00000000000111111111111000000001011010000000000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> board = {"11010000000000000000000000000", "11000000000000000000000000000", "00010001000000000000000000000", "00110101000000000000000000000", "00000101000000000000000000000", "00000100111000000000000000000", "00100110000001000000000000000", "00111010010001000000000000000", "00010010100001000000000000000", "00001011101010000000000000000", "00000111111001100000000000000", "00000000110101000000000000000", "00000000110111110010000000000", "00000000000110110101000000000", "00000000001011100111000000000", "00000000000001100101000000000", "00000000000000001111110000000", "00000000000001101100000000000", "00000000000000010100100110000", "00000000000000011100100010000", "00000000000000000110100011000", "00000000000000000000100000000", "00000000000000000000011010111", "00000000000000000000000111000", "00000000000000000000000000001", "00000000000000000000000011000", "00000000000000000000000001101"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> board = {"001010010000000000000000000", "001010001100000000000000000", "110011001100111000000000000", "111111001100110111111000000", "111111111101011111111000100", "111111111111001100100011111"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> board = {"01110011111001000", "01101110111001101"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> board = {"1011011000000000000000000000000000000000", "0010111100000000000000000000000000000000", "1100001111111111110000000000000000000000", "0100111011000011111000000000000000000000", "0010111011111001111100000000000000000000", "0000001001010001011100000000000000000000", "0000000110011000000100000000000000000000", "0000000010111110001100001000000000000000", "0000000000111110110101001111000000000000", "0000000000111101111001101010110000000000", "0000000000011111110100111001110000000000", "0000000000001111110110111001101011100000", "0000000000000111111111011111000011100000", "0000000000000001111111110100101000100000", "0000000000000000000011111011110101110000", "0000000000000000000000000000001011111010", "0000000000000000000000000000000011001111", "0000000000000000000000000000000000010001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> board = {"0010", "0110", "0000", "0110", "1000", "1100", "0000", "0010", "0010", "0011"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> board = {"0", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "1", "0"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> board = {};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> board = {"0001", "0000", "0000"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> board = {"1001", "0000", "1001"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> board = {"10", "01"};
    FlipGame* pObj = new FlipGame();
    clock_t start = clock();
    int result = pObj->minOperations(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=15982182&rd=14736&pm=11974
********************************************************************************
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <map>
#include <queue>
#include <sstream>
#include <string>
#include <vector>
 
using namespace std;
 
const int MaxN = 57, NA = -1, MaxC = 0x3F3F3F3F;
 
class FlipGame
{
private:
 bool a [MaxN] [MaxN];
 int m, n;
 
public:
 int minOperations (vector <string> board)
 {
  int i, j, k, res;
  bool ok;
 
  m = board.size ();
  n = board[0].size ();
  for (i = 0; i < m; i++)
   for (j = 0; j < n; j++)
    a[i][j] = (board[i][j] == '1');
 
  for (res = 0; ; res++)
  {
   ok = false;
   k = 0;
   for (i = 0; i < m; i++)
   {
    for (j = 0; j < n; j++)
     if (a[i][j])
     {
      ok = true;
      k = max (k, j + 1);
     }
    for (j = 0; j < k; j++)
     a[i][j] ^= 1;
   }
   if (!ok)
    break;
  }
 
  return res;
 }
};
 
 
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

********************************************************************************
*******************************************************************************/