/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=5918
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class SafeJourney {
public:
    int fewestRoadCrossings(int width, int length, vector<string> horizontal, vector<string> vertical, string home, string work);
};

int SafeJourney::fewestRoadCrossings(int width, int length, vector<string> horizontal, vector<string> vertical, string home, string work) {
    int ret;
    return ret;
}


int test0() {
    int width = 6;
    int length = 4;
    vector<string> horizontal = {"2 0 6"};
    vector<string> vertical = {"2 2 4", "4 0 2"};
    string home = "1 3";
    string work = "5 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    int width = 6;
    int length = 4;
    vector<string> horizontal = {"2 0 6"};
    vector<string> vertical = {"2 0 2", "4 2 4"};
    string home = "1 3";
    string work = "5 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    int width = 4;
    int length = 5;
    vector<string> horizontal = {"4 1 3,1 1 3"};
    vector<string> vertical = {"2 1 4"};
    string home = "1 2";
    string work = "3 3";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    int width = 7;
    int length = 8;
    vector<string> horizontal = {"2 0 7", "4 0 7", "5 2 4,5 5 6", "6 0 4,6 5 7", "7 1 3"};
    vector<string> vertical = {"2 2 5", "3 0 6", "4 0 7", "5 0 5"};
    string home = "1 3";
    string work = "6 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    int width = 5;
    int length = 5;
    vector<string> horizontal = {};
    vector<string> vertical = {"3 0 2", "3 2 5"};
    string home = "2 4";
    string work = "4 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    int width = 100;
    int length = 100;
    vector<string> horizontal = {"10 0 100,20 0 100,30 0 100,40 0 100,50 0 100", "60 0 100,70 0 100,80 0 100,90 0 100"};
    vector<string> vertical = {"10 0 100,20 0 100,30 0 100,40 0 100,50 0 100", "60 0 100,70 0 100,80 0 100,90 0 100"};
    string home = "15 6";
    string work = "93 95";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    int width = 13;
    int length = 9;
    vector<string> horizontal = {"7 0 5,6 0 5,4 4 8,4 9 13,3 4 13,2 4 8,3 1 3"};
    vector<string> vertical = {"1 1 3,3 0 3,4 2 7,5 2 7,7 5 9,8 5 9,8 0 1,9 1 3", "10 1 3"};
    string home = "2 8";
    string work = "2 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    int width = 15;
    int length = 8;
    vector<string> horizontal = {"1 9 14", "4 0 2", "6 2 3", "6 9 12", "7 0 2", "7 7 14"};
    vector<string> vertical = {"3 0 7", "4 1 8", "7 0 7", "9 1 6", "12 4 6", "14 1 6"};
    string home = "10 4";
    string work = "1 2";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    int width = 622;
    int length = 622;
    vector<string> horizontal = {"1 1 2,4 4 5,7 7 8,10 10 11,13 13 14,16 16 17", "19 19 20,22 22 23,25 25 26,28 28 29,31 31 32", "34 34 35,37 37 38,40 40 41,43 43 44,46 46 47", "49 49 50,52 52 53,55 55 56,58 58 59,61 61 62", "64 64 65,67 67 68,70 70 71,73 73 74,76 76 77", "79 79 80,82 82 83,85 85 86,88 88 89,91 91 92", "94 94 95,97 97 98,100 100 101,103 103 104", "106 106 107,109 109 110,112 112 113,115 115 116", "118 118 119,121 121 122,124 124 125,127 127 128", "130 130 131,133 133 134,136 136 137,139 139 140", "142 142 143,145 145 146,148 148 149,151 151 152", "154 154 155,157 157 158,160 160 161,163 163 164", "166 166 167,169 169 170,172 172 173,175 175 176", "178 178 179,181 181 182,184 184 185,187 187 188", "190 190 191,193 193 194,196 196 197,199 199 200", "202 202 203,205 205 206,208 208 209,211 211 212", "214 214 215,217 217 218,220 220 221,223 223 224", "226 226 227,229 229 230,232 232 233,235 235 236", "238 238 239,241 241 242,244 244 245,247 247 248", "250 250 251,253 253 254,256 256 257,259 259 260", "262 262 263,265 265 266,268 268 269,271 271 272", "274 274 275,277 277 278,280 280 281,283 283 284", "286 286 287,289 289 290,292 292 293,295 295 296", "298 298 299,301 301 302,304 304 305,307 307 308", "310 310 311,313 313 314,316 316 317,319 319 320", "322 322 323,325 325 326,328 328 329,331 331 332", "334 334 335,337 337 338,340 340 341,343 343 344", "346 346 347,349 349 350,352 352 353,355 355 356", "358 358 359,361 361 362,364 364 365,367 367 368", "370 370 371,373 373 374,376 376 377,379 379 380", "382 382 383,385 385 386,388 388 389,391 391 392", "394 394 395,397 397 398,400 400 401,403 403 404", "406 406 407,409 409 410,412 412 413,415 415 416", "418 418 419,421 421 422,424 424 425,427 427 428", "430 430 431,433 433 434,436 436 437,439 439 440", "442 442 443,445 445 446,448 448 449,451 451 452", "454 454 455,457 457 458,460 460 461,463 463 464", "466 466 467,469 469 470,472 472 473,475 475 476", "478 478 479,481 481 482,484 484 485,487 487 488", "490 490 491,493 493 494,496 496 497,499 499 500", "502 502 503,505 505 506,508 508 509,511 511 512", "514 514 515,517 517 518,520 520 521,523 523 524", "526 526 527,529 529 530,532 532 533,535 535 536", "538 538 539,541 541 542,544 544 545,547 547 548", "550 550 551,553 553 554,556 556 557,559 559 560", "562 562 563,565 565 566,568 568 569,571 571 572", "574 574 575,577 577 578,580 580 581,583 583 584", "586 586 587,589 589 590,592 592 593,595 595 596", "598 598 599,601 601 602,604 604 605,607 607 608", "610 610 611,613 613 614,616 616 617,619 619 620"};
    vector<string> vertical = {"3 2 3,6 5 6,9 8 9,12 11 12,15 14 15,18 17 18", "21 20 21,24 23 24,27 26 27,30 29 30,33 32 33", "36 35 36,39 38 39,42 41 42,45 44 45,48 47 48", "51 50 51,54 53 54,57 56 57,60 59 60,63 62 63", "66 65 66,69 68 69,72 71 72,75 74 75,78 77 78", "81 80 81,84 83 84,87 86 87,90 89 90,93 92 93", "96 95 96,99 98 99,102 101 102,105 104 105", "108 107 108,111 110 111,114 113 114,117 116 117", "120 119 120,123 122 123,126 125 126,129 128 129", "132 131 132,135 134 135,138 137 138,141 140 141", "144 143 144,147 146 147,150 149 150,153 152 153", "156 155 156,159 158 159,162 161 162,165 164 165", "168 167 168,171 170 171,174 173 174,177 176 177", "180 179 180,183 182 183,186 185 186,189 188 189", "192 191 192,195 194 195,198 197 198,201 200 201", "204 203 204,207 206 207,210 209 210,213 212 213", "216 215 216,219 218 219,222 221 222,225 224 225", "228 227 228,231 230 231,234 233 234,237 236 237", "240 239 240,243 242 243,246 245 246,249 248 249", "252 251 252,255 254 255,258 257 258,261 260 261", "264 263 264,267 266 267,270 269 270,273 272 273", "276 275 276,279 278 279,282 281 282,285 284 285", "288 287 288,291 290 291,294 293 294,297 296 297", "300 299 300,303 302 303,306 305 306,309 308 309", "312 311 312,315 314 315,318 317 318,321 320 321", "324 323 324,327 326 327,330 329 330,333 332 333", "336 335 336,339 338 339,342 341 342,345 344 345", "348 347 348,351 350 351,354 353 354,357 356 357", "360 359 360,363 362 363,366 365 366,369 368 369", "372 371 372,375 374 375,378 377 378,381 380 381", "384 383 384,387 386 387,390 389 390,393 392 393", "396 395 396,399 398 399,402 401 402,405 404 405", "408 407 408,411 410 411,414 413 414,417 416 417", "420 419 420,423 422 423,426 425 426,429 428 429", "432 431 432,435 434 435,438 437 438,441 440 441", "444 443 444,447 446 447,450 449 450,453 452 453", "456 455 456,459 458 459,462 461 462,465 464 465", "468 467 468,471 470 471,474 473 474,477 476 477", "480 479 480,483 482 483,486 485 486,489 488 489", "492 491 492,495 494 495,498 497 498,501 500 501", "504 503 504,507 506 507,510 509 510,513 512 513", "516 515 516,519 518 519,522 521 522,525 524 525", "528 527 528,531 530 531,534 533 534,537 536 537", "540 539 540,543 542 543,546 545 546,549 548 549", "552 551 552,555 554 555,558 557 558,561 560 561", "564 563 564,567 566 567,570 569 570,573 572 573", "576 575 576,579 578 579,582 581 582,585 584 585", "588 587 588,591 590 591,594 593 594,597 596 597", "600 599 600,603 602 603,606 605 606,609 608 609", "612 611 612,615 614 615,618 617 618,621 620 621"};
    string home = "1 2";
    string work = "620 618";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    int width = 254;
    int length = 254;
    vector<string> horizontal = {"1 0 254,2 0 254,3 0 254,4 0 254,5 0 254,6 0 254", "7 0 254,8 0 254,9 0 254,10 0 254,11 0 254,12 0 254", "13 0 254,14 0 254,15 0 254,16 0 254,17 0 254", "18 0 254,157 0 254,20 0 254,21 0 254,22 0 254", "23 0 254,24 0 254,25 0 254,26 0 254,27 0 254", "28 0 254,29 0 254,30 0 254,31 0 254,32 0 254", "33 0 254,34 0 254,35 0 254,36 0 254,37 0 254", "38 0 254,39 0 254,40 0 254,41 0 254,42 0 254", "43 0 254,44 0 254,45 0 254,46 0 254,47 0 254", "48 0 254,49 0 254,50 0 254,51 0 254,52 0 254", "53 0 254,54 0 254,55 0 254,56 0 254,57 0 254", "58 0 254,59 0 254,60 0 254,61 0 254,62 0 254", "63 0 254,64 0 254,65 0 254,66 0 254,67 0 254", "68 0 254,69 0 254,70 0 254,71 0 254,72 0 254", "73 0 254,74 0 254,75 0 254,76 0 254,77 0 254", "78 0 254,79 0 254,80 0 254,81 0 254,82 0 254", "83 0 254,84 0 254,85 0 254,86 0 254,87 0 254", "88 0 254,89 0 254,90 0 254,91 0 254,92 0 254", "93 0 254,94 0 254,95 0 254,96 0 254,97 0 254", "98 0 254,99 0 254,100 0 254,101 0 254,102 0 254", "103 0 254,104 0 254,105 0 254,106 0 254,107 0 254", "108 0 254,109 0 254,110 0 254,111 0 254,112 0 254", "113 0 254,114 0 254,115 0 254,116 0 254,117 0 254", "118 0 254,119 0 254,120 0 254,121 0 254,122 0 254", "123 0 254,124 0 254,125 0 254,126 0 254,127 0 254", "128 0 254,129 0 254,130 0 254,131 0 254,132 0 254", "133 0 254,134 0 254,135 0 254,136 0 254,137 0 254", "138 0 254,139 0 254,140 0 254,141 0 254,142 0 254", "143 0 254,144 0 254,145 0 254,146 0 254,147 0 254", "148 0 254,149 0 254,150 0 254,151 0 254,152 0 254", "153 0 254,154 0 254,155 0 254,156 0 254,158 0 254", "159 0 254,160 0 254,161 0 254,162 0 254,163 0 254", "164 0 254,165 0 254,166 0 254,167 0 254,168 0 254", "169 0 254,170 0 254,171 0 254,172 0 254,174 0 254", "175 0 254,176 0 254,177 0 254,178 0 254,179 0 254", "180 0 254,181 0 254,182 0 254,183 0 254,184 0 254", "185 0 254,186 0 254,187 0 254,188 0 254,189 0 254", "190 0 254,191 0 254,192 0 254,193 0 254,194 0 254", "195 0 254,196 0 254,197 0 254,198 0 254,199 0 254", "200 0 254,201 0 254,202 0 254,203 0 254,204 0 254", "205 0 254,206 0 254,207 0 254,208 0 254,209 0 254", "210 0 254,211 0 254,212 0 254,213 0 254,214 0 254", "215 0 254,216 0 254,217 0 254,218 0 254,219 0 254", "220 0 254,221 0 254,222 0 254,223 0 254,224 0 254", "225 0 254,226 0 254,227 0 254,228 0 254,229 0 254", "230 0 254,231 0 254,232 0 254,233 0 254,234 0 254", "235 0 254,236 0 254,237 0 254,238 0 254,239 0 254", "240 0 254,241 0 254,242 0 254,243 0 254,244 0 254", "173 0 254,246 0 254,247 0 254,248 0 254,249 0 254", "250 0 254,251 0 254,252 0 254,253 0 254"};
    vector<string> vertical = {"1 0 254,2 0 254,3 0 254,4 0 254,6 0 254,7 0 254", "8 0 254,9 0 254,10 0 254,11 0 254,12 0 254", "13 0 254,14 0 254,15 0 254,16 0 254,17 0 254", "18 0 254,19 0 254,20 0 254,21 0 254,22 0 254", "23 0 254,24 0 254,26 0 254,27 0 254,28 0 254", "29 0 254,30 0 254,31 0 254,32 0 254,33 0 254", "34 0 254,35 0 254,36 0 254,37 0 254,38 0 254", "39 0 254,40 0 254,41 0 254,42 0 254,43 0 254", "44 0 254,45 0 254,46 0 254,47 0 254,48 0 254", "49 0 254,50 0 254,51 0 254,52 0 254,53 0 254", "54 0 254,55 0 254,56 0 254,57 0 254,58 0 254", "59 0 254,60 0 254,61 0 254,62 0 254,63 0 254", "64 0 254,65 0 254,66 0 254,67 0 254,68 0 254", "69 0 254,70 0 254,71 0 254,72 0 254,73 0 254", "74 0 254,75 0 254,76 0 254,77 0 254,78 0 254", "79 0 254,80 0 254,81 0 254,82 0 254,83 0 254", "84 0 254,85 0 254,86 0 254,87 0 254,88 0 254", "89 0 254,90 0 254,91 0 254,92 0 254,93 0 254", "94 0 254,95 0 254,96 0 254,97 0 254,98 0 254", "99 0 254,100 0 254,101 0 254,102 0 254,103 0 254", "104 0 254,105 0 254,106 0 254,107 0 254,108 0 254", "109 0 254,110 0 254,111 0 254,112 0 254,113 0 254", "114 0 254,115 0 254,116 0 254,117 0 254,118 0 254", "119 0 254,120 0 254,121 0 254,122 0 254,123 0 254", "124 0 254,125 0 254,126 0 254,127 0 254,128 0 254", "129 0 254,130 0 254,131 0 254,132 0 254,133 0 254", "134 0 254,135 0 254,136 0 254,137 0 254,138 0 254", "139 0 254,140 0 254,141 0 254,142 0 254,143 0 254", "144 0 254,145 0 254,146 0 254,147 0 254,148 0 254", "149 0 254,150 0 254,151 0 254,152 0 254,153 0 254", "154 0 254,155 0 254,156 0 254,157 0 254,158 0 254", "159 0 254,160 0 254,161 0 254,162 0 254,163 0 254", "164 0 254,165 0 254,166 0 254,167 0 254,168 0 254", "169 0 254,170 0 254,171 0 254,172 0 254,173 0 254", "174 0 254,175 0 254,176 0 254,177 0 254,178 0 254", "179 0 254,180 0 254,181 0 254,182 0 254,183 0 254", "184 0 254,185 0 254,186 0 254,187 0 254,188 0 254", "189 0 254,190 0 254,191 0 254,192 0 254,193 0 254", "194 0 254,195 0 254,196 0 254,197 0 254,198 0 254", "199 0 254,200 0 254,201 0 254,202 0 254,203 0 254", "204 0 254,205 0 254,206 0 254,207 0 254,208 0 254", "209 0 254,210 0 254,211 0 254,212 0 254,213 0 254", "214 0 254,215 0 254,216 0 254,217 0 254,218 0 254", "219 0 254,220 0 254,221 0 254,222 0 254,223 0 254", "224 0 254,225 0 254,226 0 254,227 0 254,228 0 254", "229 0 254,230 0 254,231 0 254,232 0 254,233 0 254", "234 0 254,235 0 254,236 0 254,237 0 254,238 0 254", "239 0 254,240 0 254,241 0 254,242 0 254,243 0 254", "244 0 254,245 0 254,246 0 254,247 0 254,248 0 254", "249 0 254,250 0 254,25 0 254,252 0 254,253 0 254"};
    string home = "5 245";
    string work = "251 19";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 470;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    int width = 221;
    int length = 222;
    vector<string> horizontal = {"0 0 221,1 1 220,2 2 219,3 3 218,4 4 217,5 5 216", "6 6 215,7 7 214,8 8 213,9 9 212,10 10 211", "11 11 210,12 12 209,13 13 208,14 14 207,15 15 206", "16 16 205,17 17 204,18 18 203,19 19 202,20 20 201", "21 21 200,22 22 199,23 23 198,24 24 197,25 25 196", "26 26 195,27 27 194,28 28 193,29 29 192,30 30 191", "31 31 190,32 32 189,33 33 188,34 34 187,35 35 186", "36 36 185,37 37 184,38 38 183,39 39 182,40 40 181", "41 41 180,42 42 179,43 43 178,44 44 177,45 45 176", "46 46 175,47 47 174,48 48 173,49 49 172,50 50 171", "51 51 170,52 52 169,53 53 168,54 54 167,55 55 166", "56 56 165,57 57 164,58 58 163,59 59 162,60 60 161", "61 61 160,62 62 159,63 63 158,64 64 157,65 65 156", "66 66 155,67 67 154,68 68 153,69 69 152,70 70 151", "71 71 150,72 72 149,73 73 148,74 74 147,75 75 146", "76 76 145,77 77 144,78 78 143,79 79 142,80 80 141", "81 81 140,82 82 139,83 83 138,84 84 137,85 85 136", "86 86 135,87 87 134,88 88 133,89 89 132,90 90 131", "91 91 130,92 92 129,93 93 128,94 94 127,95 95 126", "96 96 125,97 97 124,98 98 123,99 99 122", "100 100 121,101 101 120,102 102 119,103 103 118", "104 104 117,105 105 116,106 106 115,107 107 114", "108 108 113,109 109 112,222 0 221,220 0 220", "219 1 219,218 2 218,217 3 217,216 4 216,215 5 215", "214 6 214,213 7 213,212 8 212,211 9 211,210 10 210", "209 11 209,208 12 208,207 13 207,206 14 206", "205 15 205,204 16 204,203 17 203,202 18 202", "201 19 201,200 20 200,199 21 199,198 22 198", "197 23 197,196 24 196,195 25 195,194 26 194", "193 27 193,192 28 192,191 29 191,190 30 190", "189 31 189,188 32 188,187 33 187,186 34 186", "185 35 185,184 36 184,183 37 183,182 38 182", "181 39 181,180 40 180,179 41 179,178 42 178", "177 43 177,176 44 176,175 45 175,174 46 174", "173 47 173,172 48 172,171 49 171,170 50 170", "169 51 169,168 52 168,167 53 167,166 54 166", "165 55 165,164 56 164,163 57 163,162 58 162", "161 59 161,160 60 160,159 61 159,158 62 158", "157 63 157,156 64 156,155 65 155,154 66 154", "153 67 153,152 68 152,151 69 151,150 70 150", "149 71 149,148 72 148,147 73 147,146 74 146", "145 75 145,144 76 144,143 77 143,142 78 142", "141 79 141,140 80 140,139 81 139,138 82 138", "137 83 137,136 84 136,135 85 135,134 86 134", "133 87 133,132 88 132,131 89 131,130 90 130", "129 91 129,128 92 128,127 93 127,126 94 126", "125 95 125,124 96 124,123 97 123,122 98 122", "121 99 121,120 100 120,119 101 119,118 102 118", "117 103 117,116 104 116,115 105 115,114 106 114", "113 107 113,112 108 112,111 109 111"};
    vector<string> vertical = {"0 0 220,1 1 219,2 2 218,3 3 217,4 4 216,5 5 215", "6 6 214,7 7 213,8 8 212,9 9 211,10 10 210", "11 11 209,12 12 208,13 13 207,14 14 206,15 15 205", "16 16 204,17 17 203,18 18 202,19 19 201,20 20 200", "21 21 199,22 22 198,23 23 197,24 24 196,25 25 195", "26 26 194,27 27 193,28 28 192,29 29 191,30 30 190", "31 31 189,32 32 188,33 33 187,34 34 186,35 35 185", "36 36 184,37 37 183,38 38 182,39 39 181,40 40 180", "41 41 179,42 42 178,43 43 177,44 44 176,45 45 175", "46 46 174,47 47 173,48 48 172,49 49 171,50 50 170", "51 51 169,52 52 168,53 53 167,54 54 166,55 55 165", "56 56 164,57 57 163,58 58 162,59 59 161,60 60 160", "61 61 159,62 62 158,63 63 157,64 64 156,65 65 155", "66 66 154,67 67 153,68 68 152,69 69 151,70 70 150", "71 71 149,72 72 148,73 73 147,74 74 146,75 75 145", "76 76 144,77 77 143,78 78 142,79 79 141,80 80 140", "81 81 139,82 82 138,83 83 137,84 84 136,85 85 135", "86 86 134,87 87 133,88 88 132,89 89 131,90 90 130", "91 91 129,92 92 128,93 93 127,94 94 126,95 95 125", "96 96 124,97 97 123,98 98 122,99 99 121", "100 100 120,101 101 119,102 102 118,103 103 117", "104 104 116,105 105 115,106 106 114,107 107 113", "108 108 112,109 109 111,221 0 222,220 1 220", "219 2 219,218 3 218,217 4 217,216 5 216,215 6 215", "214 7 214,213 8 213,212 9 212,211 10 211", "210 11 210,209 12 209,208 13 208,207 14 207", "206 15 206,205 16 205,204 17 204,203 18 203", "202 19 202,201 20 201,200 21 200,199 22 199", "198 23 198,197 24 197,196 25 196,195 26 195", "194 27 194,193 28 193,192 29 192,191 30 191", "190 31 190,189 32 189,188 33 188,187 34 187", "186 35 186,185 36 185,184 37 184,183 38 183", "182 39 182,181 40 181,180 41 180,179 42 179", "178 43 178,177 44 177,176 45 176,175 46 175", "174 47 174,173 48 173,172 49 172,171 50 171", "170 51 170,169 52 169,168 53 168,167 54 167", "166 55 166,165 56 165,164 57 164,163 58 163", "162 59 162,161 60 161,160 61 160,159 62 159", "158 63 158,157 64 157,156 65 156,155 66 155", "154 67 154,153 68 153,152 69 152,151 70 151", "150 71 150,149 72 149,148 73 148,147 74 147", "146 75 146,145 76 145,144 77 144,143 78 143", "142 79 142,141 80 141,140 81 140,139 82 139", "138 83 138,137 84 137,136 85 136,135 86 135", "134 87 134,133 88 133,132 89 132,131 90 131", "130 91 130,129 92 129,128 93 128,127 94 127", "126 95 126,125 96 125,124 97 124,123 98 123", "122 99 122,121 100 121,120 101 120,119 102 119", "118 103 118,117 104 117,116 105 116,115 106 115", "114 107 114,113 108 113,112 109 112,111 110 111"};
    string home = "110 110";
    string work = "1 221";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    int width = 10;
    int length = 9;
    vector<string> horizontal = {"0 0 8,1 1 7,2 2 6,3 3 5,9 0 10,8 1 8,7 2 7,6 3 6", "5 4 5"};
    vector<string> vertical = {"0 0 9,1 1 8,2 2 7,3 3 6,10 0 9,8 0 8,7 1 7,6 2 6", "5 3 5"};
    string home = "4 4";
    string work = "9 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    int width = 1791029821;
    int length = 1066327528;
    vector<string> horizontal = {"66019636 28728629 1641083134", "985948314 28728629 1641083134", "312579623 682000305 1164066093", "360504883 969443304 1086679427", "357569420 889827108 1108003676", "731246864 476180744 1194955885", "762628451 309099211 1237489652", "928220590 28728629 1400509189", "67942931 266153757 1400509189", "434868825 969443304 1021809253", "514165519 785113587 1108003676", "317638027 785113587 1149084944", "309195840 615887472 1194955885", "279343342 476180744 1237489652", "856592018 266153757 1247085548", "514916587 682000305 1149084944", "440951362 889827108 1086679427", "609160181 615887472 1164066093", "128960768 309099211 1247085548"};
    vector<string> vertical = {"1400509189 67942931 928220590", "266153757 67942931 856592018", "1021809253 378205604 434868825", "1164066093 312579623 609160181", "969443304 360504883 434868825", "889827108 357569420 440951362", "1086679427 360504883 440951362", "309099211 128960768 762628451", "28728629 66019636 928220590", "1194955885 309195840 731246864", "1149084944 317638027 514916587", "1237489652 279343342 762628451", "1247085548 128960768 856592018", "682000305 312579623 514916587", "785113587 317638027 514165519", "1108003676 357569420 514165519", "1641083134 66019636 985948314", "476180744 279343342 731246864", "615887472 309195840 609160181"};
    string home = "980265576 378205604";
    string work = "266153757 980895176";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    int width = 201;
    int length = 1595;
    vector<string> horizontal = {"192 21 178,417 50 148,124 13 186,1149 53 146", "1278 38 163,3 0 199,1280 37 164,573 74 124", "958 81 118,237 31 169,986 78 121,10 1 198", "1362 27 173,727 95 103,992 74 125,63 8 191", "402 45 154,84 9 190,409 47 152,269 38 161", "613 84 114,474 60 137,767 97 101,1489 8 192", "1295 34 167,1288 36 165,603 83 115,792 99 100", "454 57 140,870 92 107,1090 61 137,860 94 105", "1257 40 160,877 90 109,96 10 189,1059 65 133", "1186 46 154,624 85 113,1216 43 157,1442 16 184", "274 40 159,915 85 114,500 63 134,515 65 132", "1371 24 176,591 78 120,1488 9 191,1050 67 131", "179 18 181,1490 7 193,1377 21 179,626 86 112", "1119 56 142,115 12 187,313 41 158,1372 23 177", "1157 51 148,412 48 151,801 98 101,1231 41 159", "536 70 127,356 42 157,1184 48 152,581 75 123", "1023 69 129,184 19 180,200 23 176,152 16 183", "846 95 104,103 11 188,194 22 177,423 51 147", "1197 44 156,700 91 107,532 68 129,211 27 172", "214 28 171,839 96 103,1516 3 197,20 3 196", "1068 64 134,187 20 179,267 37 163,1443 15 185", "1350 29 171,1347 31 170,1274 39 161,1512 4 196", "413 49 150,28 5 194,1580 0 201,209 26 173", "203 25 174,901 88 111,815 97 102,863 93 106", "1492 6 194,682 89 109,597 81 117,1357 28 172", "1000 72 127,1156 52 147,1118 57 141,433 53 144", "984 79 120,446 54 143,594 79 119,1398 19 181", "1053 66 132,258 33 167,529 67 130,1369 26 174", "969 80 119,1083 62 136,262 35 165,1479 11 189", "914 86 113,1098 59 139,45 7 192,249 32 168", "1370 25 175,686 90 108,35 6 193,942 83 116", "636 88 110,544 72 126,1106 58 140,486 61 136", "941 84 115,556 73 125,1120 55 143,266 36 164", "990 76 123,23 4 195,513 64 133,588 77 121", "527 66 131,874 91 108,490 62 135,406 46 153", "598 82 116,1091 60 138,1457 12 188,261 34 166", "909 87 112,130 14 185,429 52 146,1431 17 183", "467 58 139,883 89 110,1565 2 198,1189 45 155", "1185 47 153,991 75 124,155 17 182,1032 68 130", "770 98 100,989 77 122,715 94 104,944 82 117", "595 80 118,1373 22 178,1293 35 166,137 15 184", "631 87 111,1447 14 186,1394 20 180,714 93 105", "1161 50 150,1455 13 187,201 24 175,450 55 142", "708 92 106,1322 33 168,1487 10 190,1016 70 128", "534 69 128,584 76 122,379 43 156,1073 63 135", "1567 1 199,400 44 155,1430 18 182,453 56 141", "993 73 126,16 2 197,471 59 138,1127 54 144", "1226 42 158,1325 32 169,1505 5 195,1165 49 151", "272 39 160,224 29 170,729 96 102"};
    vector<string> vertical = {"7 45 1490,45 402 1189,157 356 1216,138 471 1091", "192 45 1489,128 534 1016,42 356 1226,178 192 1373", "146 429 1149,23 200 1372,1 10 1567,194 28 1492", "62 490 1083,106 708 863,164 266 1280,187 115 1455", "166 261 1293,49 413 1165,177 194 1372,151 412 1165", "103 727 839,171 214 1350,41 313 1231,129 532 1023", "40 274 1257,123 581 990,8 63 1489,181 179 1398", "196 20 1512,72 544 1000,120 591 984,32 249 1325", "48 412 1184,175 201 1370,134 500 1068,118 595 958", "61 486 1090,183 152 1431,67 529 1050,66 527 1053", "84 613 941,89 682 883,88 636 901,6 35 1492", "73 556 993,25 203 1370,38 269 1278,105 714 860", "29 224 1350,110 636 883,58 467 1106,186 124 1447", "132 515 1053,167 258 1295,104 715 846,131 527 1050", "179 187 1377,35 262 1293,31 237 1347,191 63 1488", "144 433 1127,160 272 1257,122 584 989,101 767 801", "14 130 1447,16 152 1442,150 413 1161,28 214 1357", "81 597 958,198 10 1565,12 115 1457,153 406 1185", "172 211 1357,193 35 1490,3 20 1516,68 532 1032", "55 450 1120,47 409 1185,140 454 1106,13 124 1455", "77 588 989,59 471 1098,93 714 863,148 417 1157", "2 16 1565,165 262 1288,174 203 1369,127 536 1000", "169 237 1325,199 3 1567,79 594 984,4 23 1512", "52 429 1156,115 603 941,124 573 991,5 28 1505", "9 84 1488,173 209 1362,44 400 1197,156 379 1197", "176 200 1371,163 267 1278,65 515 1059,96 729 839", "121 588 986,113 624 914,27 211 1362,63 500 1073", "155 400 1189,26 209 1369,87 631 909,54 446 1127", "37 267 1280,102 729 815,50 417 1161,135 490 1073", "170 224 1347,114 613 915,180 184 1394,83 603 942", "60 474 1091,159 274 1231,51 423 1157,70 536 1016", "20 187 1394,95 727 846,57 454 1118,119 594 969", "136 486 1083,78 591 986,112 626 909,69 534 1023", "98 770 801,107 700 870,158 313 1226,141 453 1118", "19 184 1398,22 194 1373,46 406 1186,189 96 1479", "184 137 1442,82 598 944,130 529 1032,190 84 1487", "64 513 1068,17 155 1431,10 96 1487,109 682 877", "143 446 1120,139 467 1098,92 708 870,11 103 1479", "91 700 874,116 598 942,154 402 1186,126 544 993", "56 453 1119,80 595 969,36 266 1288,201 3 1580", "24 201 1371,137 474 1090,33 258 1322,111 631 901", "15 137 1443,43 379 1216,117 597 944,18 179 1430", "53 433 1149,86 626 914,76 584 990,97 767 815", "0 3 1580,21 192 1377,182 155 1430,195 23 1505", "197 16 1516,168 249 1322,75 581 991,161 269 1274", "100 770 792,85 624 915,94 715 860,125 556 992", "188 103 1457,34 261 1295,185 130 1443,39 272 1274", "74 573 992,147 423 1156,152 409 1184,90 686 877", "108 686 874,133 513 1059,142 450 1119"};
    string home = "99 778";
    string work = "200 10";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    int width = 1975407745;
    int length = 1835572446;
    vector<string> horizontal = {"871088529 1014306327 1072357994", "1400461599 367887725 1491299648", "1346647086 541729556 1411469666", "1427594185 354832472 1502484699", "1030323892 853813937 1149589467", "962568541 1042232573 1072357994", "473456655 367887725 1434427541", "278673426 322973648 1562183345", "286262268 326317658 1502484699", "619057890 673627723 1161673016", "4865484 20152234 1808030843", "519794109 484344817 1411469666", "993107386 1014306327 1126724354", "1186370273 630395013 1300542596", "432637165 354832472 1491299648", "535078726 541729556 1364350740", "1287300010 565899990 1364350740", "605040046 630395013 1264317638", "1690473226 111547326 1700239234", "252228048 307663659 1595816277", "218162162 257527644 1614541577", "1724269883 71709774 1808030843", "71606197 110310182 1700239234", "1487941270 326317658 1562183345", "1524952129 322973648 1595816277", "178128242 175998638 1633455058", "1038495310 846112732 1152584435", "660207919 846112732 1149589467", "1674227620 165065999 1661670283", "177772304 165065999 1650470359", "26593011 71709774 1702156380", "250780224 295422696 1605533682", "1568417952 295422696 1614541577", "1265634605 598567127 1342885576", "658499038 737104917 1152584435", "518937927 369101346 1413337791", "1348560284 484344817 1413337791", "731496888 853813937 1126724354", "1528316299 307663659 1605533682", "1696250635 110310182 1702156380", "560675977 565899990 1342885576", "1607239083 175998638 1650470359", "1382607653 369101346 1434427541", "1145609777 673627723 1264317638", "581232039 598567127 1300542596", "112673152 111547326 1661670283", "1747028220 20152234 1961085302", "1054495982 737104917 1161673016", "1601934264 257527644 1633455058"};
    vector<string> vertical = {"737104917 658499038 1054495982", "1014306327 871088529 993107386", "598567127 581232039 1265634605", "1364350740 535078726 1287300010", "1605533682 250780224 1528316299", "307663659 252228048 1528316299", "369101346 518937927 1382607653", "326317658 286262268 1487941270", "20152234 4865484 1747028220", "484344817 519794109 1348560284", "295422696 250780224 1568417952", "1434427541 473456655 1382607653", "630395013 605040046 1186370273", "1126724354 731496888 993107386", "1961085302 4865484 1747028220", "846112732 660207919 1038495310", "175998638 178128242 1607239083", "1614541577 218162162 1568417952", "1661670283 112673152 1674227620", "1491299648 432637165 1400461599", "1808030843 4865484 1724269883", "853813937 731496888 1030323892", "1264317638 605040046 1145609777", "1502484699 286262268 1427594185", "541729556 535078726 1346647086", "71709774 26593011 1724269883", "673627723 619057890 1145609777", "1562183345 278673426 1487941270", "1413337791 518937927 1348560284", "1152584435 658499038 1038495310", "1072357994 871088529 962568541", "257527644 218162162 1601934264", "1149589467 660207919 1030323892", "1595816277 252228048 1524952129", "1342885576 560675977 1265634605", "367887725 473456655 1400461599", "165065999 177772304 1674227620", "1650470359 177772304 1607239083", "1702156380 26593011 1696250635", "1700239234 71606197 1690473226", "354832472 432637165 1427594185", "322973648 278673426 1524952129", "1161673016 619057890 1054495982", "1411469666 519794109 1346647086", "565899990 560675977 1287300010", "110310182 71606197 1696250635", "1633455058 178128242 1601934264", "1300542596 581232039 1186370273", "111547326 112673152 1690473226"};
    string home = "1042232573 914374025";
    string work = "1953088798 26593011";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    int width = 10;
    int length = 9;
    vector<string> horizontal = {"7 3 7,4 4 6,5 1 2,3 1 2,6 4 6,1 1 9,8 1 9,4 7 8", "3 3 7,6 7 8"};
    vector<string> vertical = {"1 5 8,4 4 6,2 3 5,9 1 4,6 4 6,9 5 8,3 3 7,1 1 3", "8 4 6,7 6 7,7 3 4"};
    string home = "1 4";
    string work = "5 5";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    int width = 9;
    int length = 10;
    vector<string> horizontal = {"1 5 8,4 4 6,2 3 5,9 1 4,6 4 6,9 5 8,3 3 7,1 1 3", "8 4 6,7 6 7,7 3 4"};
    vector<string> vertical = {"7 3 7,4 4 6,5 1 2,3 1 2,6 4 6,1 1 9,8 1 9,4 7 8", "3 3 7,6 7 8"};
    string home = "4 1";
    string work = "5 5";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    int width = 13;
    int length = 11;
    vector<string> horizontal = {"8 11 12,10 12 13,5 11 12,2 3 11,3 0 1,5 1 2", "2 12 13,4 5 9,5 7 8,3 4 10,4 12 13,3 11 12,1 0 12", "7 6 8,8 5 9,10 3 11,9 5 10"};
    vector<string> vertical = {"9 4 8,12 9 11,1 3 5,5 4 8,6 5 7,12 1 3,2 1 2", "2 3 11,3 2 10,4 3 8,8 5 7,10 3 9,11 5 10,11 2 4", "12 5 7"};
    string home = "7 6";
    string work = "1 2";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    int width = 11;
    int length = 13;
    vector<string> horizontal = {"9 4 8,12 9 11,1 3 5,5 4 8,6 5 7,12 1 3,2 1 2", "2 3 11,3 2 10,4 3 8,8 5 7,10 3 9,11 5 10,11 2 4", "12 5 7"};
    vector<string> vertical = {"8 11 12,10 12 13,5 11 12,2 3 11,3 0 1,5 1 2", "2 12 13,4 5 9,5 7 8,3 4 10,4 12 13,3 11 12,1 0 12", "7 6 8,8 5 9,10 3 11,9 5 10"};
    string home = "2 1";
    string work = "6 7";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    int width = 65359221;
    int length = 1038046157;
    vector<string> horizontal = {"167026495 53361495 64697897", "1029096427 31792438 48118961", "155983756 4395541 53361495", "953951473 33599104 46676230", "167026495 20949842 52834386", "1026721678 52834386 53361495", "559287105 11927684 20947371", "386603212 52834386 53361495", "1026721678 31792438 47996717", "559287105 52834386 53361495", "559287105 42188469 46676230", "1031607877 20949842 52834386", "386603212 22089296 48118961", "487652812 31792438 47996717", "1031607877 53361495 64697897", "386603212 4395541 11927684", "487652812 53361495 64697897"};
    vector<string> vertical = {"53361495 559287105 953951473", "11927684 386603212 559287105", "33599104 559287105 953951473", "53361495 155983756 386603212", "20949842 167026495 1031607877", "20947371 155983756 167026495", "53361495 1029096427 1035910072", "48118961 386603212 1029096427", "52834386 559287105 1031607877", "47996717 487652812 1026721678", "31792438 487652812 1026721678", "22089296 386603212 1026721678", "20947371 386603212 1035910072", "52834386 167026495 487652812", "46676230 559287105 953951473"};
    string home = "42188469 638881125";
    string work = "11927684 167026495";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    int width = 894539613;
    int length = 1337151459;
    vector<string> horizontal = {"1296875916 17500010 156046031", "899672021 510345461 709094926", "1055532105 163863811 793851737", "458836755 17500010 53686233", "1296875916 826256823 888238391", "1296875916 510345461 709094926", "762652454 53686233 837419366", "770066791 156046031 793851737", "1081843116 156046031 826256823", "1236517495 510345461 837419366", "1009556391 510345461 709094926", "1236517495 53686233 163863811", "887844955 163863811 793851737", "432399174 156046031 510345461", "458836755 156046031 888238391"};
    vector<string> vertical = {};
    string home = "53686233 432399174";
    string work = "692940288 903280892";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    int width = 2;
    int length = 13;
    vector<string> horizontal = {"12 0 2,5 0 2,6 0 2,11 0 2,7 0 2,0 0 2,4 0 2,9 0 2", "13 0 2,8 0 2,2 0 2"};
    vector<string> vertical = {"2 0 13,0 0 13"};
    string home = "1 10";
    string work = "1 3";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    int width = 13;
    int length = 2;
    vector<string> horizontal = {"2 0 13,0 0 13"};
    vector<string> vertical = {"12 0 2,5 0 2,6 0 2,11 0 2,7 0 2,0 0 2,4 0 2,9 0 2", "13 0 2,8 0 2,2 0 2"};
    string home = "10 1";
    string work = "3 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    int width = 2000000000;
    int length = 2000000000;
    vector<string> horizontal = {"1261350933 573386556 1969390061", "763525846 573386556 1969390061", "1177960698 573386556 1969390061", "655164309 573386556 1969390061", "1150362148 573386556 1969390061", "224651649 573386556 1969390061", "805450760 573386556 1969390061", "1105833561 573386556 1969390061", "1205583602 573386556 1969390061"};
    vector<string> vertical = {};
    string home = "1697071646 1180499561";
    string work = "1697071646 465756038";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    int width = 2000000000;
    int length = 2000000000;
    vector<string> horizontal = {};
    vector<string> vertical = {"1317007179 877132827 1960784022", "776021469 877132827 1960784022", "1242032422 877132827 1960784022", "760854777 877132827 1960784022", "1420783480 877132827 1960784022", "1030211254 877132827 1960784022", "216707709 877132827 1960784022", "1128041869 877132827 1960784022", "1852863051 877132827 1960784022"};
    string home = "494634036 1798844491";
    string work = "1395445296 1798844491";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    int width = 2;
    int length = 13;
    vector<string> horizontal = {"12 0 2,5 0 2,6 0 2,11 0 2,7 0 2,0 0 2,4 0 2,9 0 2", "13 0 2,8 0 2,2 0 2"};
    vector<string> vertical = {"2 0 13,0 0 13"};
    string home = "1 3";
    string work = "1 10";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    int width = 13;
    int length = 2;
    vector<string> horizontal = {"2 0 13,0 0 13"};
    vector<string> vertical = {"12 0 2,5 0 2,6 0 2,11 0 2,7 0 2,0 0 2,4 0 2,9 0 2", "13 0 2,8 0 2,2 0 2"};
    string home = "10 1";
    string work = "3 1";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    int width = 970181371;
    int length = 710733631;
    vector<string> horizontal = {"504726044 513202012 901800397", "253580030 513202012 901800397", "472742610 513202012 901800397", "697223602 513202012 901800397", "381160601 513202012 901800397", "702663703 513202012 901800397", "461681817 513202012 901800397", "391652011 513202012 901800397", "481904278 513202012 901800397", "258424614 513202012 901800397", "623943376 513202012 901800397"};
    vector<string> vertical = {"513202012 253580030 702663703", "901800397 253580030 702663703"};
    string home = "666478779 542097097";
    string work = "666478779 345270068";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    int width = 710733631;
    int length = 970181371;
    vector<string> horizontal = {"790856444 107457667 623164488", "243114149 107457667 623164488"};
    vector<string> vertical = {"431357217 243114149 790856444", "610742047 243114149 790856444", "314216332 243114149 790856444", "623164488 243114149 790856444", "107457667 243114149 790856444", "611403868 243114149 790856444", "463907950 243114149 790856444", "409106871 243114149 790856444", "145016635 243114149 790856444", "423169272 243114149 790856444", "300010308 243114149 790856444"};
    string home = "490195234 485151746";
    string work = "287072833 485151746";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    int width = 26;
    int length = 10;
    vector<string> horizontal = {"3 20 25,6 4 6,8 22 26,1 1 15,4 15 17,9 21 22,2 2 8", "8 2 8,1 20 21,0 0 18,2 21 26,3 3 7,7 20 21,6 21 23", "4 4 6,9 1 15,9 16 17,7 3 7,10 0 18,8 19 21,4 21 23", "7 22 25,2 19 20,8 15 16"};
    vector<string> vertical = {"26 2 8,25 1 7,4 4 6,21 4 7,6 4 6,8 2 8,18 0 10", "24 4 6,22 8 9,15 8 9,3 3 7,7 3 7,21 1 2,17 4 9", "21 8 9,20 3 7,1 1 9,22 6 7,16 8 9,20 1 2,19 2 8", "23 4 6,0 0 10,2 2 8,15 1 5"};
    string home = "5 5";
    string work = "22 5";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    int width = 723;
    int length = 634;
    vector<string> horizontal = {"476 33 249,240 285 601,180 285 601,137 249 679", "219 317 575,104 33 685,630 249 679,511 317 575", "336 33 385,407 28 691,476 679 685,471 33 249", "421 249 679,476 317 601,603 33 601,591 317 575", "471 285 601,195 317 575,401 317 685,336 679 685", "278 249 679,490 679 685,345 679 685,77 28 691", "490 575 601"};
    vector<string> vertical = {"679 137 278,33 104 336,685 104 336,249 476 630", "317 195 219,679 421 476,285 471 603,28 77 407", "575 195 219,601 490 603,575 476 511,285 180 240", "317 476 511,249 421 471,685 476 490,691 77 407", "33 471 476,317 336 401,601 471 476,679 490 630", "249 137 278,601 180 240,679 336 345,685 345 401"};
    string home = "385 490";
    string work = "385 207";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    int width = 13;
    int length = 16;
    vector<string> horizontal = {"10 0 11,11 0 10,7 6 13,9 1 13,3 4 13,14 0 11", "13 0 10,8 1 4,5 6 13,8 5 13,4 5 13,12 2 7"};
    vector<string> vertical = {"9 9 10,7 5 7,7 9 10,5 9 10,8 9 10,2 8 12,6 5 7", "4 14 16,3 3 12,10 9 10,7 11 13,2 14 16", "7 14 16,5 14 16,5 5 8,1 8 10,6 9 10,8 11 13", "9 11 13,3 14 16,10 11 13,4 3 10,6 14 16", "11 9 10"};
    string home = "1 12";
    string work = "8 6";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    int width = 8585;
    int length = 1711;
    vector<string> horizontal = {"1298 4758 7407"};
    vector<string> vertical = {"6391 142 1298,6388 1298 1568"};
    string home = "4930 1338";
    string work = "6601 885";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    int width = 8889;
    int length = 9279;
    vector<string> horizontal = {"1795 1749 4497,1709 4497 8617"};
    vector<string> vertical = {"4497 994 5518"};
    string home = "3448 2419";
    string work = "6168 1662";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    int width = 98133;
    int length = 32562;
    vector<string> horizontal = {"25242 3737 58386"};
    vector<string> vertical = {"29452 25242 27283,12344 10128 25242"};
    string home = "9144 27199";
    string work = "54830 20866";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    int width = 62016;
    int length = 39209;
    vector<string> horizontal = {"28401 44929 58603,22176 6514 44929"};
    vector<string> vertical = {"44929 5583 31344"};
    string home = "52073 11953";
    string work = "35314 30239";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    int width = 1841626492;
    int length = 1956920868;
    vector<string> horizontal = {"1925057337 391261795 504187161", "965327363 215526506 1121279062", "863231968 1221855984 1299949141", "965327363 1221855984 1408302566", "701564125 215526506 1408302566", "863231968 478195963 1121279062", "554499833 215526506 1408302566"};
    vector<string> vertical = {"504187161 230192006 965327363", "1121279062 230192006 1925057337", "1221855984 230192006 863231968", "478195963 554499833 863231968"};
    string home = "391261795 700650743";
    string work = "1299949141 463324541";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    int width = 1985187880;
    int length = 835803750;
    vector<string> horizontal = {"495420585 311741090 1679158499", "564945620 311741090 1436615792", "338089964 510504643 1436615792", "555450776 311741090 1970388511"};
    vector<string> vertical = {"1407321829 78060494 755296706", "1970388511 293910326 495420585", "1436615792 564945620 620791838", "1679158499 564945620 755296706", "510504643 78060494 755296706", "1436615792 338089964 555450776", "1679158499 78060494 555450776"};
    string home = "356191547 620791838";
    string work = "1115573458 293910326";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    int width = 18333359;
    int length = 11209823;
    vector<string> horizontal = {"1075505 10972889 13717455,4941744 2265504 12350103", "1112436 3248034 10012281,1230311 14560983 16920958", "1112436 10972889 16920958", "1230311 10972889 13717455,3382580 2265504 12350103"};
    vector<string> vertical = {"3248034 445017 1112436,12350103 1075505 4941744", "10012281 399831 1112436,13717455 399831 445017", "14560983 445017 1112436,12455659 3264842 6531037", "10972889 1075505 4941744,13717455 3264842 6531037", "16057707 445017 1112436"};
    string home = "9858798 6056146";
    string work = "9858798 445017";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    int width = 7746607;
    int length = 2783026;
    vector<string> horizontal = {"2179736 1580033 3619719,1012054 3330883 6825701", "773652 1314919 3619719,2039333 4144448 7683544", "2055526 1314919 1580033,996807 3330883 6825701", "2055526 4144448 7683544,397540 1580033 3619719", "2179289 1580033 3619719"};
    vector<string> vertical = {"3330883 996807 2055526,3619719 397540 773652", "3619719 996807 2214026,3622386 2179289 2214026", "3622386 996807 2055526,4297845 58141 1012054", "6825701 58141 1012054"};
    string home = "7644313 728907";
    string work = "1580033 728907";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    int width = 15724274;
    int length = 188251150;
    vector<string> horizontal = {"92319871 1554021 2289189,164195788 1554021 2289189", "149503013 6066660 8778067", "164195788 5422167 13264707", "149503013 2289189 4577113", "81460794 6066660 13264707"};
    vector<string> vertical = {"4577113 72734386 164195788", "5328786 81460794 182963028", "6066660 81460794 149503013", "13264707 81460794 149503013", "8778067 92319871 149503013", "5422167 72734386 164195788"};
    string home = "6525992 92319871";
    string work = "2289189 81460794";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    int width = 88679432;
    int length = 98173157;
    vector<string> horizontal = {"46048255 7019501 63713489", "82358540 27959919 31529245", "59063598 3958851 55383898", "90391960 7019501 31529245", "31399658 3958851 55383898", "66244796 7019501 31529245"};
    vector<string> vertical = {"27959919 8680392 11824757", "55383898 59063598 90391960", "31529245 66244796 82358540", "31529245 11824757 31399658", "55383898 8680392 11824757", "7019501 66244796 90391960"};
    string home = "7019501 11824757";
    string work = "27959919 67058252";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    int width = 1425;
    int length = 755;
    vector<string> horizontal = {"234 23 1399,439 23 1399,470 23 676,540 23 1399", "301 1167 1399,651 23 1399,286 23 441,657 23 1291", "247 23 1399,681 23 1399,4 23 1399,397 23 1399", "516 23 1399,292 23 1399,177 23 1399,407 23 1399", "74 23 1399,223 23 1399,91 23 1399,347 23 1399", "442 23 1399,239 23 1399,348 23 1399,574 1375 1399", "277 1011 1399,286 684 1399,301 23 1028,393 23 1399", "579 23 1399,277 23 879,378 23 1399,60 23 1399", "657 1306 1399,31 23 1399,602 23 1399,129 23 1399", "22 23 1399,182 23 1399,304 23 1399,753 23 1399", "148 23 1399,574 23 1014,484 23 1399,537 23 1399", "521 23 1399,500 23 1399,356 23 1399,470 695 1399", "43 23 1399,80 23 1399"};
    vector<string> vertical = {"740 4 753,151 540 753,544 4 753,23 4 753,629 4 753", "77 4 753,690 4 753,1232 4 753,879 4 753,1339 4 753", "384 540 753,468 4 753,1293 4 753,441 4 753", "1063 4 753,947 4 753,37 4 753,1196 4 753", "1247 4 753,384 292 521,992 4 753,1028 4 753", "866 4 753,795 4 753,311 304 753,1399 4 753", "526 4 753,1375 4 753,1308 4 753,1343 4 393", "161 4 753,1226 4 753,295 4 753,140 4 753,318 4 753", "568 602 753,1291 4 753,967 4 753,525 4 753", "1085 4 753,950 4 753,568 4 442,1227 4 753", "590 4 753,1126 4 516,510 4 753,391 4 753", "1256 4 753,1306 4 753,1014 4 753,350 4 753", "638 378 753,632 4 22,600 579 753,501 4 657", "1048 4 753,745 4 753,1343 579 602,240 4 753", "1234 4 753,684 4 753,1167 4 753,814 4 753", "792 4 753,163 4 753,986 4 753,955 4 753,771 4 753", "151 4 393,669 4 753,1141 4 753,1011 4 753", "429 4 753,1126 540 753,285 4 753,466 4 753", "962 4 753,485 4 753,638 4 182,995 4 753,126 4 753", "695 4 753,994 4 753,600 4 537,1372 4 753,384 4 177", "1236 4 753,147 4 753,1171 4 753,1007 4 753", "384 223 239,676 4 753,501 681 753,959 4 753", "311 4 234,1343 651 753,774 4 753,632 292 753", "584 4 753,242 4 753"};
    string home = "663 534";
    string work = "1185 638";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    int width = 1384;
    int length = 3643;
    vector<string> horizontal = {"3285 3 1374,1378 3 1374,982 850 1374", "2978 1358 1374,982 3 239,873 3 1374,2953 3 1374", "1600 3 1374,2561 926 1374,1252 3 1374,1625 3 1374", "995 3 1374,3068 3 1374,3338 226 1374,3338 3 6", "2823 3 1356,2541 3 1374,389 3 1374,1012 3 1374", "3476 3 1374,2654 3 1374,1297 3 1374,3642 3 1374", "2561 3 690,298 3 1374,3113 3 1374,2781 3 1374", "3439 1098 1374,207 3 1374,2757 3 1374,52 3 1374", "2215 3 1374,3330 3 1374,1599 3 1374,2104 3 1374", "48 3 1374,2140 3 221,3616 1137 1374,3474 3 1374", "1211 3 1374,2978 3 1356,365 3 1374,1649 3 1374", "2847 3 1374,3436 3 1374,2140 239 1374,3525 3 1374", "2694 3 1374,508 3 1374,3616 3 625,764 3 1374", "3439 755 926,2764 3 1374,2823 1358 1374", "1716 3 1374,990 3 1374,1648 3 1374,3439 3 741", "1565 3 1374,1652 3 1374,1172 3 1374,3263 3 1374", "2602 3 1374"};
    vector<string> vertical = {"862 48 3642,426 48 3642,572 48 3642,1077 48 3642", "499 48 3642,544 48 3642,552 48 3642,830 48 3642", "1245 48 3642,80 48 3642,424 48 3642,1098 48 1012", "101 48 3642,1101 48 3642,1218 48 3642", "623 3474 3642,1148 48 3642,338 48 3642,741 48 2602", "850 48 3642,605 48 1172,690 48 3642,1356 48 3642", "285 48 3642,221 48 3642,1098 2654 3642", "926 2561 3642,1358 3436 3642,1374 48 3642", "366 48 3642,316 48 3642,1119 48 3642,226 48 3642", "801 48 3642,625 48 3642,30 48 3642,694 48 3642", "605 1252 3642,340 48 3642,755 48 2140,239 48 3642", "971 48 3642,195 48 3642,32 48 2764,1358 48 365", "1166 48 3642,1316 48 3642,994 48 3642,926 48 1378", "1137 48 3642,741 2881 3642,6 48 3642,3 48 3642", "734 48 3642,1224 2881 3642,623 48 3285", "755 3474 3642,32 3439 3642,125 48 3642", "1225 48 3642,1110 48 3642,1224 48 2694,213 48 3642", "259 48 3642"};
    string home = "401 2248";
    string work = "233 2881";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    int width = 653;
    int length = 8353;
    vector<string> horizontal = {"6997 80 92,6997 480 653,2480 2 653,3815 2 653", "6012 2 653,4606 2 653,1553 2 627,286 434 653", "5 614 653,3133 2 653,6858 2 653,980 2 653", "5461 2 653,4271 2 285,5 2 101,4271 394 653", "1100 2 653,2209 2 653,8230 2 653,3681 2 653", "6997 2 36,1553 636 653,4475 2 653,5096 2 653", "7225 2 653,3792 2 653,1473 2 653,396 2 653", "1394 2 653,5952 2 653,286 2 121,5638 2 653", "8186 2 653,709 2 653,3965 2 653,4909 2 653", "7622 2 653,6340 2 653,2496 2 653,3661 2 653", "2798 2 653,4213 2 653,3272 2 653"};
    vector<string> vertical = {"223 5 8230,574 5 8230,394 5 8230,85 5 5096", "461 5 8230,306 5 3681,265 5 8230,269 5 8230", "2 4213 8230,572 5 8230,275 5 8230,151 5 6858", "480 5 8230,213 5 8230,519 5 8230,293 5 8230", "444 5 8230,436 8186 8230,564 5 8230,160 5 8230", "248 5 7225,146 5 8230,57 5 8230,553 5 8230", "331 5 8230,89 7225 7622,121 5 8230,340 5 8230", "546 5 8230,419 5 8230,151 7225 8230,145 5 3661", "260 5 8230,85 6858 8230,545 5 2496,320 5 2480", "14 5 2798,145 4606 8230,627 5 8230,614 5 8230", "250 5 8230,418 5 8230,306 4475 8230,434 5 8230", "636 5 8230,5 5 8230,514 5 8230,266 5 8230", "285 5 8230,320 7083 8230,534 5 8230,80 5 8230", "89 5 3272,232 5 8230,616 5 8230,254 5 8230", "618 5 8230,120 5 8230,14 4606 8230,488 5 8230", "2 5 3815,545 3815 8230,448 5 8230,92 5 8230", "132 5 8230,501 5 8230,103 5 8230,588 5 8230", "111 5 8230,436 5 6340,89 8186 8230,248 7622 8230", "101 5 8230,171 5 8230,36 5 8230,243 5 8230", "234 5 8230,49 5 8230,119 5 8230,653 5 8230", "22 5 8230,210 5 8230,97 5 8230,140 5 8230"};
    string home = "380 7083";
    string work = "375 2775";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    int width = 7365;
    int length = 6483;
    vector<string> horizontal = {"5730 10 6853,516 10 6853,2330 10 6853,4915 10 6338", "5382 10 6853,1842 10 6853,192 10 6853,3417 10 6853", "6328 10 6853,4250 10 6853,4515 10 6853", "3760 6595 6853,4915 6514 6853,2774 10 4583", "2774 6338 6853,3791 10 6853,3157 10 6853", "1082 10 6853,488 10 6853,6067 10 6853,5743 10 6853", "5817 10 6853,4871 10 6853,2752 10 6853", "5954 4277 6853,3760 10 3493,5954 10 3493", "2854 10 6853,2601 10 6853"};
    vector<string> vertical = {"1857 192 6328,3237 192 6328,1988 192 6328", "4277 192 3791,4232 192 6328,1624 192 6328", "4583 192 6328,1213 192 6328,10 1842 6328", "6062 192 6328,6595 192 6328,6853 192 6328", "6338 192 6328,1742 5743 6328,1073 192 6328", "4277 4250 6328,2068 192 6328,5872 192 6328", "4934 192 6328,1166 192 6328,6602 192 6328", "4231 192 6328,3210 192 6328,2538 192 6328", "10 192 1082,1742 192 4250,460 192 6328", "5592 192 6328,6514 3417 6328,568 192 6328", "6514 192 2854"};
    string home = "5601 3250";
    string work = "3493 2059";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    int width = 4698;
    int length = 1872;
    vector<string> horizontal = {"791 8 4641,1756 8 4641,1221 8 4641,801 2576 4641", "650 8 2558,118 8 4641,1573 8 4641,1344 8 2728", "1102 8 4641,612 4530 4641,1863 8 4641,1320 8 4641", "665 8 4641,1152 8 4641,201 8 4641,659 8 4641", "1820 8 4641,871 8 4641,198 8 4641,667 8 4641", "1139 8 4641,1131 3856 4641,1551 8 4641,1386 8 4641", "1669 8 4641,263 8 4641,269 8 4641,889 8 4641", "1483 8 4641,726 8 4641,1011 8 899,1546 8 4641", "1834 8 4641,540 8 4641,1796 8 4641,1307 8 4641", "1665 8 4641,1443 8 4641,612 8 77,961 4173 4641", "645 8 4641,1849 8 4641,332 8 4641,628 8 4641", "1131 8 77,1754 8 3700,1799 8 4641,86 8 4641", "754 8 2669,650 3376 4641,1344 4430 4641", "1754 3802 4641,250 8 4641,1401 8 4641,126 8 4641", "903 8 4641,612 390 647,66 8 4641,1664 8 4641", "727 8 4641,1202 8 4641,801 8 1724,699 8 4641", "711 8 4641,754 2860 4641,1011 3028 4641,961 8 3777", "1843 8 4641,1567 8 4641,1436 8 4641,1339 8 4641", "312 8 4641,1023 8 4641,1300 8 4641,1275 8 4641", "1268 8 4641,1226 2874 4641,152 8 4641,1500 8 4641", "1011 1006 1116,1715 8 4641,143 8 4641,1009 8 4641", "1226 8 2456,1211 8 4641,268 8 4641"};
    vector<string> vertical = {"3296 66 1863,4539 66 1863,2669 118 1863", "647 66 1863,8 66 1863,2160 66 1863,899 66 1863", "4289 66 1863,548 66 1863,3433 1546 1863", "379 66 1863,4582 66 1863,1502 66 1863,1078 66 1863", "2637 66 1863,1553 66 1863,3401 1820 1863", "2194 66 1863,797 66 1863,125 66 1863,1298 66 1863", "2427 66 1863,3700 66 1863,3882 66 1863", "2226 66 1863,3271 66 1863,563 66 1863,816 66 1863", "2874 66 1863,3705 66 1863,3618 66 1863", "3409 66 1863,759 66 1567,4494 66 1863,3856 66 1863", "3605 66 1863,4589 66 1863,765 1843 1863", "2576 66 1863,3401 66 754,3959 66 1863,3768 66 1863", "4641 66 1863,505 66 1863,539 66 1863,2839 66 727", "1549 66 1863,2558 66 1863,3804 66 1863,2498 66 332", "2406 66 1664,3300 66 1863,2860 66 1863", "4308 66 1863,2741 66 1863,2740 1820 1863", "2669 66 86,2498 650 1863,2205 66 1863,77 1664 1863", "219 66 1863,2383 66 1863,765 66 1820,3777 66 1863", "4173 1483 1863,4160 1546 1863,2839 1715 1863", "2406 1799 1863,1712 66 1863,390 66 1863", "3433 66 659,2294 66 1863,4530 66 1863,2456 66 1863", "3798 1834 1843,4160 66 1500,3988 66 1863", "1142 66 1863,3376 66 1863,896 66 1863,1006 66 1863", "1612 66 1863,1194 66 1863,4142 66 1863", "3800 66 1863,3802 1320 1863,3798 1849 1863", "4083 66 1863,474 66 1863,200 66 1863,77 66 1500", "1930 66 1863,1724 66 1863,2728 66 1863,3798 66 754", "4173 66 332,1406 66 1863,2510 66 1863,675 66 1863", "4362 66 1863,2797 66 1863,1749 66 1863", "759 1664 1863,4101 66 1863,2733 66 1863", "3802 66 1202,3028 66 1863,3289 1551 1863", "4430 66 1863,1116 66 1863,3289 66 1500", "3386 66 1863,2202 66 1863,2740 66 764"};
    string home = "187 764";
    string work = "1856 443";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    int width = 119;
    int length = 78;
    vector<string> horizontal = {"61 0 119,54 0 119,8 0 119,63 0 119,36 0 119", "19 0 119,9 0 119,62 0 119,34 0 119,28 0 119", "25 0 119,16 0 119,31 0 119,3 0 119,57 0 119", "74 0 119,66 0 119,33 0 119,46 0 119,48 0 119", "10 0 119,35 0 119,30 0 119,43 0 119,76 0 119", "15 0 119,7 0 119,12 0 119,39 0 119,65 0 119", "38 0 119,24 0 119,64 0 119,51 0 119,22 0 119", "44 0 119,1 0 119,77 0 119,68 0 119,20 0 119", "41 0 119,14 0 119,59 0 119,5 0 119,21 0 119", "11 0 119,70 0 119,55 0 119,32 0 119,53 0 119", "40 0 119,47 0 119,52 0 119,29 0 119,58 0 119", "67 0 119,72 0 119,17 0 119,50 0 119,4 0 119", "26 0 119,45 0 119,23 0 119,69 0 119,6 0 119", "27 0 119,13 0 119,18 0 119,75 0 119,73 0 119", "37 0 119,71 0 119,49 0 119,60 0 119,2 0 119"};
    vector<string> vertical = {"43 0 78,104 0 78,24 0 78,74 0 78,31 0 78,64 0 78", "52 0 78,101 0 78,87 0 78,81 0 78,51 0 78,56 0 78", "79 0 78,107 0 78,77 0 78,29 0 78,70 0 78,98 0 78", "94 0 78,110 0 78,78 0 78,75 0 78,8 0 78,22 0 78", "25 0 78,86 0 78,84 0 78,16 0 78,40 0 78,60 0 78", "82 0 78,91 0 78,19 0 78,6 0 78,39 0 78,109 0 78", "36 0 78,50 0 78,30 0 78,7 0 78,14 0 78,9 0 78", "47 0 78,113 0 78,97 0 78,59 0 78,49 0 78,33 0 78", "58 0 78,15 0 78,65 0 78,4 0 78,12 0 78,28 0 78", "61 0 78,63 0 78,99 0 78,66 0 78,3 0 78,80 0 78", "17 0 78,32 0 78,85 0 78,117 0 78,93 0 78,105 0 78", "5 0 78,26 0 78,112 0 78,27 0 78,1 0 78,96 0 78", "37 0 78,55 0 78,114 0 78,67 0 78,10 0 78,76 0 78", "34 0 78,2 0 78,18 0 78,53 0 78,72 0 78,108 0 78", "46 0 78,118 0 78,62 0 78,48 0 78,20 0 78,90 0 78", "68 0 78,83 0 78,102 0 78,13 0 78,69 0 78,41 0 78", "89 0 78,71 0 78,42 0 78,45 0 78,44 0 78,57 0 78", "11 0 78,95 0 78,92 0 78,103 0 78,38 0 78,73 0 78", "111 0 78,23 0 78,54 0 78,115 0 78,106 0 78,35 0 78", "116 0 78,88 0 78"};
    string home = "21 42";
    string work = "100 56";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    int width = 159;
    int length = 221;
    vector<string> horizontal = {"212 0 159,29 0 159,198 0 159,207 0 159,194 0 159", "151 0 159,25 0 159,217 0 159,14 0 159,70 0 159", "213 0 159,147 0 159,144 0 159,189 0 159,93 0 159", "38 0 159,185 0 159,109 0 159,51 0 159,46 0 159", "107 0 159,137 0 159,165 0 159,175 0 159,58 0 159", "65 0 159,2 0 159,203 0 159,106 0 159,161 0 159", "181 0 159,86 0 159,134 0 159,47 0 159,154 0 159", "23 0 159,81 0 159,211 0 159,191 0 159,166 0 159", "77 0 159,167 0 159,99 0 159,121 0 159,169 0 159", "155 0 159,89 0 159,36 0 159,186 0 159,5 0 159", "158 0 159,101 0 159,206 0 159,6 0 159,176 0 159", "74 0 159,173 0 159,162 0 159,11 0 159,1 0 159", "16 0 159,82 0 159,73 0 159,7 0 159,80 0 159", "123 0 159,187 0 159,111 0 159,153 0 159,34 0 159", "117 0 159,15 0 159,179 0 159,68 0 159,26 0 159", "193 0 159,170 0 159,112 0 159,133 0 159,188 0 159", "9 0 159,195 0 159,87 0 159,96 0 159,52 0 159", "61 0 159,118 0 159,164 0 159,35 0 159,66 0 159", "44 0 159,208 0 159,204 0 159,205 0 159,124 0 159", "119 0 159,63 0 159,127 0 159,88 0 159,171 0 159", "163 0 159,160 0 159,50 0 159,143 0 159,49 0 159", "95 0 159,45 0 159,75 0 159,60 0 159,32 0 159", "138 0 159,136 0 159,24 0 159,180 0 159,56 0 159", "116 0 159,196 0 159,168 0 159,105 0 159,57 0 159", "125 0 159,177 0 159,54 0 159,72 0 159,192 0 159", "209 0 159,8 0 159,182 0 159,69 0 159,149 0 159", "19 0 159,210 0 159,62 0 159,132 0 159,142 0 159", "220 0 159,41 0 159,214 0 159,174 0 159,31 0 159", "104 0 159,64 0 159,190 0 159,215 0 159,39 0 159", "141 0 159,156 0 159,199 0 159,126 0 159,148 0 159", "216 0 159,21 0 159,157 0 159,12 0 159,43 0 159", "59 0 159,27 0 159,94 0 159,184 0 159,150 0 159", "131 0 159,110 0 159,128 0 159,90 0 159,197 0 159", "37 0 159,108 0 159,100 0 159,219 0 159,79 0 159", "83 0 159,113 0 159,20 0 159,71 0 159,48 0 159", "40 0 159,201 0 159,13 0 159,115 0 159,28 0 159", "84 0 159,129 0 159,53 0 159,3 0 159,76 0 159", "183 0 159,159 0 159,4 0 159,139 0 159,22 0 159", "120 0 159,67 0 159,42 0 159,114 0 159,178 0 159", "33 0 159,78 0 159,30 0 159,18 0 159,200 0 159", "152 0 159,10 0 159,98 0 159,85 0 159,140 0 159", "122 0 159,103 0 159,172 0 159,17 0 159,146 0 159", "55 0 159,102 0 159,97 0 159,202 0 159,218 0 159", "91 0 159,92 0 159,130 0 159"};
    vector<string> vertical = {"108 0 221,122 0 221,82 0 221,74 0 221,154 0 221", "38 0 221,102 0 221,134 0 221,116 0 221,103 0 221", "1 0 221,85 0 221,73 0 221,148 0 221,78 0 221", "117 0 221,146 0 221,55 0 221,67 0 221,143 0 221", "129 0 221,75 0 221,68 0 221,112 0 221,54 0 221", "76 0 221,77 0 221,89 0 221,144 0 221,157 0 221", "25 0 221,115 0 221,5 0 221,13 0 221,93 0 221", "15 0 221,132 0 221,30 0 221,14 0 221,52 0 221", "64 0 221,59 0 221,44 0 221,3 0 221,86 0 221", "141 0 221,111 0 221,87 0 221,37 0 221,138 0 221", "66 0 221,23 0 221,142 0 221,131 0 221,88 0 221", "35 0 221,7 0 221,133 0 221,49 0 221,33 0 221", "158 0 221,98 0 221,119 0 221,70 0 221,79 0 221", "51 0 221,4 0 221,95 0 221,100 0 221,96 0 221", "43 0 221,92 0 221,124 0 221,60 0 221,62 0 221", "135 0 221,152 0 221,105 0 221,63 0 221,61 0 221", "140 0 221,65 0 221,114 0 221,99 0 221,18 0 221", "16 0 221,69 0 221,28 0 221,17 0 221,21 0 221", "126 0 221,36 0 221,137 0 221,121 0 221,155 0 221", "128 0 221,153 0 221,10 0 221,91 0 221,22 0 221", "118 0 221,156 0 221,41 0 221,45 0 221,83 0 221", "130 0 221,123 0 221,125 0 221,31 0 221,32 0 221", "57 0 221,81 0 221,50 0 221,71 0 221,113 0 221", "58 0 221,97 0 221,101 0 221,19 0 221,107 0 221", "46 0 221,90 0 221,20 0 221,84 0 221,110 0 221", "11 0 221,149 0 221,29 0 221,145 0 221,47 0 221", "24 0 221,94 0 221,106 0 221,56 0 221,8 0 221", "151 0 221,9 0 221,40 0 221,127 0 221,104 0 221", "42 0 221,150 0 221,109 0 221,80 0 221,12 0 221", "6 0 221,2 0 221,136 0 221,27 0 221,147 0 221", "120 0 221,26 0 221,34 0 221,48 0 221,72 0 221", "39 0 221"};
    string home = "139 145";
    string work = "53 135";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    int width = 63;
    int length = 24;
    vector<string> horizontal = {"13 0 63,12 0 63,17 0 63,4 0 63,5 0 63,1 0 63", "23 0 63,15 0 63,7 0 63,21 0 63,20 0 63,10 0 63", "14 0 63,6 0 63,11 0 63,18 0 63,8 0 63,19 0 63", "2 0 63,22 0 63,3 0 63"};
    vector<string> vertical = {"29 0 24,57 0 24,31 0 24,2 0 24,49 0 24,41 0 24", "13 0 24,56 0 24,34 0 24,47 0 24,54 0 24,45 0 24", "1 0 24,39 0 24,24 0 24,43 0 24,21 0 24,42 0 24", "52 0 24,25 0 24,15 0 24,50 0 24,4 0 24,19 0 24", "51 0 24,48 0 24,40 0 24,38 0 24,61 0 24,12 0 24", "36 0 24,22 0 24,59 0 24,8 0 24,46 0 24,32 0 24", "37 0 24,10 0 24,18 0 24,3 0 24,44 0 24,53 0 24", "23 0 24,6 0 24,17 0 24,26 0 24,28 0 24,27 0 24", "9 0 24,5 0 24,16 0 24,7 0 24,62 0 24,55 0 24", "20 0 24,60 0 24,33 0 24,30 0 24,11 0 24,14 0 24"};
    string home = "58 16";
    string work = "35 9";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    int width = 249;
    int length = 179;
    vector<string> horizontal = {"45 0 249,149 0 249,13 0 249,7 0 249,69 0 249", "28 0 249,44 0 249,98 0 249,84 0 249,130 0 249", "82 0 249,90 0 249,4 0 249,166 0 249,158 0 249", "78 0 249,109 0 249,5 0 249,148 0 249,37 0 249", "142 0 249,96 0 249,91 0 249,116 0 249,150 0 249", "74 0 249,147 0 249,88 0 249,25 0 249,49 0 249", "15 0 249,165 0 249,83 0 249,39 0 249,86 0 249", "159 0 249,110 0 249,154 0 249,121 0 249,71 0 249", "22 0 249,79 0 249,65 0 249,160 0 249,175 0 249", "143 0 249,112 0 249,61 0 249,58 0 249,43 0 249", "104 0 249,114 0 249,75 0 249,67 0 249,20 0 249", "93 0 249,106 0 249,127 0 249,168 0 249,152 0 249", "135 0 249,34 0 249,107 0 249,24 0 249,120 0 249", "47 0 249,126 0 249,171 0 249,46 0 249,122 0 249", "57 0 249,118 0 249,117 0 249,3 0 249,33 0 249", "8 0 249,141 0 249,85 0 249,133 0 249,173 0 249", "48 0 249,134 0 249,19 0 249,10 0 249,72 0 249", "18 0 249,38 0 249,26 0 249,138 0 249,70 0 249", "17 0 249,161 0 249,14 0 249,123 0 249,30 0 249", "51 0 249,155 0 249,64 0 249,169 0 249,108 0 249", "131 0 249,54 0 249,132 0 249,144 0 249,136 0 249", "23 0 249,42 0 249,63 0 249,66 0 249,81 0 249", "170 0 249,129 0 249,164 0 249,174 0 249,60 0 249", "89 0 249,97 0 249,100 0 249,76 0 249,1 0 249", "151 0 249,111 0 249,95 0 249,21 0 249,16 0 249", "177 0 249,125 0 249,52 0 249,137 0 249,62 0 249", "92 0 249,163 0 249,119 0 249,102 0 249,101 0 249", "50 0 249,178 0 249,105 0 249,27 0 249,162 0 249", "35 0 249,9 0 249,167 0 249,157 0 249,156 0 249", "53 0 249,59 0 249,80 0 249,153 0 249,41 0 249", "128 0 249,55 0 249,32 0 249,68 0 249,87 0 249", "139 0 249,40 0 249,29 0 249,103 0 249,176 0 249", "172 0 249,11 0 249,12 0 249,94 0 249,113 0 249", "2 0 249,140 0 249,124 0 249,99 0 249,56 0 249", "115 0 249,73 0 249,77 0 249,146 0 249,145 0 249", "36 0 249"};
    vector<string> vertical = {"45 0 179,216 0 179,66 0 179,205 0 179,93 0 179", "107 0 179,138 0 179,27 0 179,174 0 179,208 0 179", "100 0 179,128 0 179,179 0 179,156 0 179,21 0 179", "165 0 179,57 0 179,157 0 179,4 0 179,155 0 179", "220 0 179,221 0 179,23 0 179,238 0 179,7 0 179", "129 0 179,175 0 179,159 0 179,237 0 179,203 0 179", "219 0 179,115 0 179,6 0 179,229 0 179,169 0 179", "240 0 179,43 0 179,212 0 179,131 0 179,230 0 179", "59 0 179,52 0 179,105 0 179,148 0 179,214 0 179", "83 0 179,136 0 179,15 0 179,46 0 179,92 0 179", "132 0 179,168 0 179,215 0 179,231 0 179,78 0 179", "56 0 179,61 0 179,142 0 179,82 0 179,99 0 179", "247 0 179,167 0 179,101 0 179,37 0 179,228 0 179", "112 0 179,117 0 179,20 0 179,104 0 179,81 0 179", "44 0 179,63 0 179,134 0 179,109 0 179,246 0 179", "235 0 179,201 0 179,86 0 179,18 0 179,95 0 179", "36 0 179,206 0 179,30 0 179,210 0 179,190 0 179", "25 0 179,74 0 179,110 0 179,58 0 179,49 0 179", "244 0 179,47 0 179,135 0 179,111 0 179,224 0 179", "225 0 179,130 0 179,125 0 179,207 0 179,26 0 179", "146 0 179,200 0 179,192 0 179,145 0 179,144 0 179", "218 0 179,48 0 179,70 0 179,90 0 179,80 0 179", "5 0 179,204 0 179,1 0 179,87 0 179,34 0 179", "188 0 179,154 0 179,173 0 179,62 0 179,42 0 179", "194 0 179,96 0 179,51 0 179,11 0 179,139 0 179", "24 0 179,71 0 179,79 0 179,124 0 179,38 0 179", "16 0 179,232 0 179,55 0 179,119 0 179,162 0 179", "28 0 179,171 0 179,242 0 179,76 0 179,35 0 179", "10 0 179,40 0 179,176 0 179,17 0 179,31 0 179", "164 0 179,72 0 179,181 0 179,183 0 179,120 0 179", "222 0 179,196 0 179,211 0 179,243 0 179,184 0 179", "2 0 179,8 0 179,213 0 179,33 0 179,118 0 179", "170 0 179,102 0 179,163 0 179,91 0 179,114 0 179", "158 0 179,84 0 179,60 0 179,88 0 179,140 0 179", "197 0 179,193 0 179,3 0 179,9 0 179,245 0 179", "234 0 179,182 0 179,32 0 179,98 0 179,73 0 179", "217 0 179,89 0 179,149 0 179,50 0 179,67 0 179", "14 0 179,187 0 179,133 0 179,39 0 179,106 0 179", "97 0 179,53 0 179,223 0 179,227 0 179,103 0 179", "75 0 179,198 0 179,172 0 179,189 0 179,239 0 179", "226 0 179,113 0 179,122 0 179,69 0 179,191 0 179", "22 0 179,178 0 179,54 0 179,143 0 179,209 0 179", "180 0 179,141 0 179,12 0 179,121 0 179,186 0 179", "151 0 179,68 0 179,160 0 179,77 0 179,166 0 179", "150 0 179,94 0 179,241 0 179,147 0 179,236 0 179", "19 0 179,41 0 179,65 0 179,161 0 179,13 0 179", "85 0 179,108 0 179,137 0 179,153 0 179,127 0 179", "116 0 179,195 0 179,185 0 179,126 0 179,177 0 179", "199 0 179,123 0 179,233 0 179,152 0 179,248 0 179", "29 0 179"};
    string home = "202 31";
    string work = "64 6";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 161;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    int width = 163;
    int length = 148;
    vector<string> horizontal = {"63 0 163,118 0 163,72 0 163,38 0 163,106 0 163", "12 0 163,134 0 163,77 0 163,146 0 163,112 0 163", "136 0 163,100 0 163,138 0 163,113 0 163,96 0 163", "143 0 163,62 0 163,109 0 163,8 0 163,107 0 163", "97 0 163,125 0 163,44 0 163,85 0 163,87 0 163", "124 0 163,50 0 163,41 0 163,127 0 163,1 0 163", "5 0 163,27 0 163,32 0 163,91 0 163,46 0 163", "114 0 163,58 0 163,89 0 163,60 0 163,94 0 163", "98 0 163,140 0 163,51 0 163,137 0 163,108 0 163", "23 0 163,128 0 163,115 0 163,64 0 163,52 0 163", "7 0 163,123 0 163,90 0 163,61 0 163,9 0 163", "25 0 163,67 0 163,22 0 163,147 0 163,28 0 163", "139 0 163,42 0 163,75 0 163,66 0 163,65 0 163", "2 0 163,105 0 163,132 0 163,83 0 163,16 0 163", "70 0 163,73 0 163,141 0 163,13 0 163,48 0 163", "39 0 163,55 0 163,104 0 163,33 0 163,10 0 163", "15 0 163,57 0 163,36 0 163,56 0 163,120 0 163", "37 0 163,142 0 163,29 0 163,71 0 163,53 0 163", "20 0 163,126 0 163,102 0 163,92 0 163,78 0 163", "133 0 163,145 0 163,31 0 163,40 0 163,93 0 163", "117 0 163,69 0 163,110 0 163,6 0 163,86 0 163", "103 0 163,131 0 163,21 0 163,3 0 163,54 0 163", "4 0 163,80 0 163,68 0 163,95 0 163,116 0 163", "43 0 163,24 0 163,74 0 163,49 0 163,18 0 163", "111 0 163,81 0 163,144 0 163,35 0 163,34 0 163", "84 0 163,14 0 163,88 0 163,101 0 163,119 0 163", "135 0 163,76 0 163,30 0 163,59 0 163,17 0 163", "121 0 163,45 0 163,129 0 163,99 0 163,19 0 163", "122 0 163,26 0 163,11 0 163,79 0 163,82 0 163"};
    vector<string> vertical = {"115 0 148,30 0 148,63 0 148,116 0 148,112 0 148", "43 0 148,76 0 148,6 0 148,33 0 148,129 0 148", "109 0 148,154 0 148,21 0 148,23 0 148,95 0 148", "151 0 148,143 0 148,61 0 148,58 0 148,47 0 148", "96 0 148,52 0 148,18 0 148,128 0 148,59 0 148", "106 0 148,54 0 148,94 0 148,53 0 148,9 0 148", "14 0 148,161 0 148,134 0 148,39 0 148,125 0 148", "131 0 148,86 0 148,124 0 148,5 0 148,1 0 148", "28 0 148,60 0 148,123 0 148,67 0 148,69 0 148", "4 0 148,120 0 148,160 0 148,64 0 148,158 0 148", "111 0 148,74 0 148,141 0 148,22 0 148,82 0 148", "35 0 148,16 0 148,17 0 148,118 0 148,92 0 148", "162 0 148,90 0 148,65 0 148,122 0 148,68 0 148", "25 0 148,105 0 148,119 0 148,57 0 148,88 0 148", "146 0 148,80 0 148,113 0 148,7 0 148,99 0 148", "136 0 148,13 0 148,155 0 148,138 0 148,108 0 148", "45 0 148,26 0 148,97 0 148,38 0 148,152 0 148", "46 0 148,100 0 148,42 0 148,3 0 148,110 0 148", "127 0 148,51 0 148,89 0 148,137 0 148,41 0 148", "78 0 148,156 0 148,104 0 148,49 0 148,101 0 148", "36 0 148,75 0 148,11 0 148,40 0 148,24 0 148", "103 0 148,126 0 148,81 0 148,150 0 148,71 0 148", "135 0 148,44 0 148,37 0 148,73 0 148,55 0 148", "48 0 148,83 0 148,121 0 148,56 0 148,102 0 148", "148 0 148,77 0 148,12 0 148,130 0 148,10 0 148", "147 0 148,8 0 148,117 0 148,84 0 148,133 0 148", "87 0 148,144 0 148,66 0 148,91 0 148,93 0 148", "79 0 148,159 0 148,20 0 148,140 0 148,2 0 148", "98 0 148,50 0 148,149 0 148,31 0 148,157 0 148", "85 0 148,132 0 148,19 0 148,15 0 148,29 0 148", "145 0 148,27 0 148,139 0 148,70 0 148,142 0 148", "62 0 148,114 0 148,153 0 148,72 0 148,107 0 148"};
    string home = "34 130";
    string work = "32 47";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    int width = 154;
    int length = 242;
    vector<string> horizontal = {"188 0 154,163 0 154,232 0 154,220 0 154,114 0 154", "82 0 154,222 0 154,176 0 154,223 0 154,137 0 154", "70 0 154,200 0 154,76 0 154,236 0 154,10 0 154", "150 0 154,92 0 154,199 0 154,122 0 154,226 0 154", "5 0 154,31 0 154,27 0 154,204 0 154,100 0 154", "214 0 154,231 0 154,23 0 154,94 0 154,61 0 154", "206 0 154,7 0 154,63 0 154,50 0 154,14 0 154", "135 0 154,185 0 154,192 0 154,113 0 154,197 0 154", "152 0 154,97 0 154,2 0 154,138 0 154,36 0 154", "174 0 154,110 0 154,17 0 154,210 0 154,54 0 154", "33 0 154,34 0 154,6 0 154,178 0 154,194 0 154", "154 0 154,74 0 154,170 0 154,21 0 154,225 0 154", "125 0 154,180 0 154,216 0 154,181 0 154,83 0 154", "91 0 154,141 0 154,62 0 154,145 0 154,52 0 154", "147 0 154,101 0 154,26 0 154,202 0 154,189 0 154", "191 0 154,126 0 154,157 0 154,129 0 154,102 0 154", "49 0 154,230 0 154,240 0 154,99 0 154,208 0 154", "117 0 154,9 0 154,118 0 154,116 0 154,177 0 154", "20 0 154,235 0 154,98 0 154,106 0 154,75 0 154", "121 0 154,68 0 154,146 0 154,238 0 154,73 0 154", "168 0 154,90 0 154,155 0 154,233 0 154,13 0 154", "179 0 154,153 0 154,108 0 154,18 0 154,237 0 154", "143 0 154,105 0 154,1 0 154,104 0 154,93 0 154", "107 0 154,161 0 154,215 0 154,227 0 154,211 0 154", "109 0 154,162 0 154,60 0 154,55 0 154,41 0 154", "77 0 154,115 0 154,134 0 154,29 0 154,25 0 154", "56 0 154,239 0 154,165 0 154,203 0 154,16 0 154", "28 0 154,45 0 154,112 0 154,212 0 154,65 0 154", "120 0 154,171 0 154,234 0 154,183 0 154,79 0 154", "44 0 154,218 0 154,58 0 154,172 0 154,89 0 154", "217 0 154,124 0 154,219 0 154,85 0 154,15 0 154", "51 0 154,12 0 154,57 0 154,184 0 154,148 0 154", "127 0 154,30 0 154,140 0 154,132 0 154,131 0 154", "53 0 154,64 0 154,173 0 154,81 0 154,96 0 154", "67 0 154,224 0 154,80 0 154,43 0 154,207 0 154", "71 0 154,186 0 154,209 0 154,205 0 154,128 0 154", "3 0 154,69 0 154,119 0 154,160 0 154,187 0 154", "78 0 154,169 0 154,59 0 154,156 0 154,164 0 154", "37 0 154,133 0 154,84 0 154,166 0 154,167 0 154", "144 0 154,103 0 154,4 0 154,46 0 154,66 0 154", "182 0 154,228 0 154,86 0 154,190 0 154,35 0 154", "195 0 154,87 0 154,22 0 154,151 0 154,19 0 154", "241 0 154,149 0 154,72 0 154,175 0 154,123 0 154", "159 0 154,88 0 154,229 0 154,39 0 154,42 0 154", "47 0 154,193 0 154,221 0 154,48 0 154,32 0 154", "24 0 154,213 0 154,142 0 154,196 0 154,40 0 154", "198 0 154,8 0 154,139 0 154,95 0 154,38 0 154", "201 0 154,111 0 154,136 0 154,11 0 154,130 0 154"};
    vector<string> vertical = {"112 0 242,108 0 242,31 0 242,22 0 242,62 0 242", "6 0 242,121 0 242,130 0 242,58 0 242,37 0 242", "20 0 242,27 0 242,8 0 242,1 0 242,39 0 242", "71 0 242,38 0 242,115 0 242,101 0 242,129 0 242", "152 0 242,89 0 242,83 0 242,149 0 242,23 0 242", "49 0 242,139 0 242,92 0 242,120 0 242,56 0 242", "98 0 242,123 0 242,134 0 242,91 0 242,54 0 242", "34 0 242,61 0 242,116 0 242,25 0 242,35 0 242", "69 0 242,15 0 242,52 0 242,60 0 242,78 0 242", "135 0 242,132 0 242,30 0 242,64 0 242,128 0 242", "79 0 242,76 0 242,14 0 242,143 0 242,47 0 242", "41 0 242,107 0 242,144 0 242,93 0 242,94 0 242", "3 0 242,95 0 242,148 0 242,103 0 242,42 0 242", "145 0 242,46 0 242,114 0 242,50 0 242,48 0 242", "36 0 242,53 0 242,81 0 242,11 0 242,67 0 242", "102 0 242,133 0 242,86 0 242,126 0 242,19 0 242", "18 0 242,9 0 242,12 0 242,85 0 242,40 0 242", "55 0 242,105 0 242,65 0 242,127 0 242,73 0 242", "77 0 242,140 0 242,96 0 242,84 0 242,45 0 242", "147 0 242,87 0 242,74 0 242,125 0 242,70 0 242", "97 0 242,75 0 242,17 0 242,7 0 242,24 0 242", "88 0 242,151 0 242,63 0 242,26 0 242,4 0 242", "106 0 242,99 0 242,32 0 242,80 0 242,13 0 242", "122 0 242,21 0 242,59 0 242,150 0 242,137 0 242", "124 0 242,28 0 242,104 0 242,141 0 242,82 0 242", "113 0 242,33 0 242,138 0 242,119 0 242,118 0 242", "51 0 242,146 0 242,90 0 242,5 0 242,10 0 242", "100 0 242,131 0 242,153 0 242,109 0 242,66 0 242", "44 0 242,110 0 242,142 0 242,68 0 242,16 0 242", "111 0 242,72 0 242,57 0 242,136 0 242,29 0 242", "43 0 242"};
    string home = "117 158";
    string work = "2 158";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 114;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    int width = 198;
    int length = 58;
    vector<string> horizontal = {"15 0 198,28 0 198,51 0 198,2 0 198,23 0 198", "53 0 198,45 0 198,32 0 198,34 0 198,31 0 198", "44 0 198,38 0 198,11 0 198,20 0 198,57 0 198", "42 0 198,56 0 198,22 0 198,29 0 198,26 0 198", "19 0 198,9 0 198,3 0 198,8 0 198,16 0 198,30 0 198", "21 0 198,13 0 198,6 0 198,1 0 198,46 0 198", "48 0 198,43 0 198,40 0 198,10 0 198,35 0 198", "12 0 198,39 0 198,54 0 198,17 0 198,36 0 198", "5 0 198,27 0 198,52 0 198,47 0 198,14 0 198", "49 0 198,41 0 198,4 0 198,33 0 198,18 0 198", "37 0 198,50 0 198,55 0 198,7 0 198"};
    vector<string> vertical = {"76 0 58,17 0 58,173 0 58,128 0 58,159 0 58", "192 0 58,3 0 58,23 0 58,1 0 58,157 0 58,123 0 58", "126 0 58,174 0 58,184 0 58,49 0 58,14 0 58,27 0 58", "152 0 58,10 0 58,87 0 58,168 0 58,110 0 58", "115 0 58,171 0 58,146 0 58,82 0 58,177 0 58", "95 0 58,83 0 58,91 0 58,191 0 58,120 0 58,133 0 58", "197 0 58,39 0 58,140 0 58,131 0 58,5 0 58,53 0 58", "141 0 58,108 0 58,154 0 58,158 0 58,45 0 58", "160 0 58,56 0 58,149 0 58,124 0 58,73 0 58,69 0 58", "178 0 58,196 0 58,164 0 58,36 0 58,90 0 58,59 0 58", "55 0 58,144 0 58,166 0 58,122 0 58,119 0 58", "86 0 58,68 0 58,117 0 58,54 0 58,31 0 58,109 0 58", "52 0 58,97 0 58,65 0 58,48 0 58,114 0 58,12 0 58", "19 0 58,104 0 58,57 0 58,139 0 58,113 0 58", "147 0 58,145 0 58,42 0 58,125 0 58,106 0 58", "148 0 58,132 0 58,35 0 58,165 0 58,182 0 58", "22 0 58,61 0 58,136 0 58,99 0 58,190 0 58,129 0 58", "156 0 58,155 0 58,111 0 58,187 0 58,175 0 58", "78 0 58,150 0 58,118 0 58,130 0 58,38 0 58,20 0 58", "84 0 58,188 0 58,72 0 58,15 0 58,58 0 58,8 0 58", "37 0 58,79 0 58,67 0 58,153 0 58,34 0 58,88 0 58", "163 0 58,172 0 58,70 0 58,143 0 58,6 0 58,181 0 58", "135 0 58,94 0 58,183 0 58,134 0 58,121 0 58", "161 0 58,26 0 58,96 0 58,32 0 58,51 0 58,116 0 58", "71 0 58,185 0 58,16 0 58,176 0 58,4 0 58,194 0 58", "167 0 58,63 0 58,107 0 58,137 0 58,75 0 58,21 0 58", "162 0 58,81 0 58,101 0 58,77 0 58,50 0 58,138 0 58", "85 0 58,105 0 58,9 0 58,28 0 58,7 0 58,41 0 58", "186 0 58,13 0 58,44 0 58,100 0 58,24 0 58,151 0 58", "189 0 58,112 0 58,46 0 58,40 0 58,89 0 58,195 0 58", "64 0 58,74 0 58,127 0 58,179 0 58,43 0 58,169 0 58", "66 0 58,180 0 58,92 0 58,142 0 58,30 0 58,93 0 58", "2 0 58,102 0 58,80 0 58,33 0 58,62 0 58,170 0 58", "18 0 58,47 0 58,11 0 58,98 0 58,25 0 58,193 0 58", "103 0 58"};
    string home = "60 24";
    string work = "29 25";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    int width = 232;
    int length = 51;
    vector<string> horizontal = {"22 0 232,6 0 232,35 0 232,11 0 232,19 0 232", "4 0 232,31 0 232,21 0 232,14 0 232,32 0 232", "17 0 232,34 0 232,50 0 232,28 0 232,47 0 232", "41 0 232,45 0 232,9 0 232,44 0 232,42 0 232", "43 0 232,20 0 232,8 0 232,5 0 232,49 0 232", "15 0 232,36 0 232,38 0 232,18 0 232,26 0 232", "7 0 232,24 0 232,29 0 232,48 0 232,39 0 232", "30 0 232,12 0 232,46 0 232,27 0 232,37 0 232", "3 0 232,23 0 232,10 0 232,16 0 232,33 0 232", "25 0 232,1 0 232,13 0 232"};
    vector<string> vertical = {"177 0 51,170 0 51,89 0 51,215 0 51,208 0 51", "32 0 51,54 0 51,119 0 51,220 0 51,76 0 51,202 0 51", "53 0 51,136 0 51,30 0 51,156 0 51,148 0 51,17 0 51", "114 0 51,75 0 51,160 0 51,10 0 51,96 0 51,146 0 51", "164 0 51,95 0 51,134 0 51,66 0 51,200 0 51", "142 0 51,34 0 51,24 0 51,209 0 51,7 0 51,139 0 51", "162 0 51,70 0 51,71 0 51,4 0 51,227 0 51,62 0 51", "228 0 51,173 0 51,147 0 51,14 0 51,217 0 51", "231 0 51,40 0 51,35 0 51,172 0 51,22 0 51,192 0 51", "210 0 51,101 0 51,84 0 51,181 0 51,67 0 51,63 0 51", "29 0 51,206 0 51,55 0 51,48 0 51,222 0 51,86 0 51", "88 0 51,73 0 51,122 0 51,45 0 51,183 0 51,94 0 51", "117 0 51,224 0 51,133 0 51,15 0 51,225 0 51", "229 0 51,109 0 51,214 0 51,102 0 51,13 0 51", "18 0 51,59 0 51,223 0 51,69 0 51,104 0 51,151 0 51", "98 0 51,185 0 51,201 0 51,6 0 51,157 0 51,60 0 51", "176 0 51,36 0 51,50 0 51,154 0 51,175 0 51,2 0 51", "107 0 51,56 0 51,93 0 51,159 0 51,25 0 51,113 0 51", "31 0 51,82 0 51,105 0 51,190 0 51,182 0 51", "169 0 51,120 0 51,129 0 51,51 0 51,108 0 51", "28 0 51,179 0 51,218 0 51,158 0 51,171 0 51", "103 0 51,12 0 51,141 0 51,198 0 51,138 0 51", "68 0 51,85 0 51,149 0 51,207 0 51,191 0 51,33 0 51", "165 0 51,118 0 51,121 0 51,65 0 51,168 0 51", "124 0 51,193 0 51,195 0 51,23 0 51,125 0 51", "131 0 51,178 0 51,140 0 51,196 0 51,199 0 51", "150 0 51,216 0 51,79 0 51,78 0 51,153 0 51", "115 0 51,41 0 51,99 0 51,91 0 51,123 0 51,58 0 51", "74 0 51,132 0 51,112 0 51,72 0 51,189 0 51", "106 0 51,219 0 51,97 0 51,145 0 51,188 0 51,5 0 51", "130 0 51,44 0 51,144 0 51,161 0 51,64 0 51,20 0 51", "80 0 51,167 0 51,27 0 51,212 0 51,211 0 51", "128 0 51,180 0 51,143 0 51,230 0 51,126 0 51", "155 0 51,77 0 51,116 0 51,187 0 51,205 0 51", "47 0 51,163 0 51,197 0 51,204 0 51,49 0 51,26 0 51", "38 0 51,111 0 51,61 0 51,135 0 51,8 0 51,221 0 51", "194 0 51,3 0 51,174 0 51,87 0 51,21 0 51,127 0 51", "166 0 51,203 0 51,19 0 51,57 0 51,52 0 51,90 0 51", "110 0 51,81 0 51,226 0 51,37 0 51,92 0 51,100 0 51", "16 0 51,46 0 51,39 0 51,9 0 51,11 0 51,213 0 51", "1 0 51,83 0 51,43 0 51,186 0 51,137 0 51,152 0 51"};
    string home = "42 40";
    string work = "184 2";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 178;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    int width = 16;
    int length = 13;
    vector<string> horizontal = {"9 0 16,11 0 16,12 0 16,10 0 16,8 0 16,1 0 16", "6 0 16,2 0 16,7 0 16,4 0 16"};
    vector<string> vertical = {"5 0 13,14 0 13,15 0 13,3 0 13,4 0 13,1 0 13,8 0 13", "7 0 13,13 0 13,6 0 13,2 0 13,9 0 13,10 0 13"};
    string home = "12 5";
    string work = "11 3";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    int width = 120;
    int length = 181;
    vector<string> horizontal = {"47 0 120,128 0 120,152 0 120,97 0 120,155 0 120", "168 0 120,86 0 120,99 0 120,84 0 120,167 0 120", "71 0 120,154 0 120,53 0 120,137 0 120,67 0 120", "132 0 120,77 0 120,33 0 120,142 0 120,114 0 120", "24 0 120,74 0 120,92 0 120,170 0 120,175 0 120", "87 0 120,174 0 120,1 0 120,126 0 120,89 0 120", "144 0 120,110 0 120,30 0 120,52 0 120,83 0 120", "2 0 120,159 0 120,106 0 120,3 0 120,112 0 120", "76 0 120,166 0 120,73 0 120,11 0 120,9 0 120", "34 0 120,93 0 120,39 0 120,179 0 120,5 0 120", "42 0 120,31 0 120,57 0 120,63 0 120,72 0 120", "8 0 120,140 0 120,129 0 120,94 0 120,125 0 120", "147 0 120,12 0 120,51 0 120,28 0 120,82 0 120", "158 0 120,41 0 120,36 0 120,102 0 120,96 0 120", "50 0 120,17 0 120,133 0 120,46 0 120,122 0 120", "141 0 120,124 0 120,45 0 120,146 0 120,6 0 120", "177 0 120,64 0 120,95 0 120,153 0 120,16 0 120", "113 0 120,145 0 120,173 0 120,119 0 120,37 0 120", "134 0 120,169 0 120,104 0 120,43 0 120,59 0 120", "151 0 120,171 0 120,75 0 120,117 0 120,62 0 120", "115 0 120,121 0 120,44 0 120,116 0 120,131 0 120", "178 0 120,22 0 120,35 0 120,13 0 120,165 0 120", "90 0 120,20 0 120,150 0 120,105 0 120,157 0 120", "56 0 120,69 0 120,164 0 120,70 0 120,19 0 120", "88 0 120,120 0 120,21 0 120,118 0 120,176 0 120", "81 0 120,14 0 120,123 0 120,25 0 120,32 0 120", "149 0 120,55 0 120,38 0 120,135 0 120,78 0 120", "111 0 120,66 0 120,18 0 120,103 0 120,109 0 120", "7 0 120,49 0 120,100 0 120,91 0 120,139 0 120", "65 0 120,107 0 120,130 0 120,80 0 120,4 0 120", "143 0 120,108 0 120,54 0 120,27 0 120,138 0 120", "58 0 120,136 0 120,160 0 120,60 0 120,68 0 120", "172 0 120,29 0 120,26 0 120,10 0 120,162 0 120", "40 0 120,79 0 120,48 0 120,101 0 120,148 0 120", "15 0 120,127 0 120,61 0 120,85 0 120,161 0 120", "23 0 120,180 0 120,156 0 120"};
    vector<string> vertical = {"23 0 181,27 0 181,15 0 181,62 0 181,2 0 181", "51 0 181,70 0 181,93 0 181,72 0 181,61 0 181", "86 0 181,80 0 181,98 0 181,5 0 181,20 0 181", "85 0 181,110 0 181,97 0 181,25 0 181,90 0 181", "88 0 181,55 0 181,26 0 181,11 0 181,33 0 181", "83 0 181,107 0 181,32 0 181,36 0 181,29 0 181", "6 0 181,71 0 181,56 0 181,78 0 181,105 0 181", "63 0 181,47 0 181,113 0 181,87 0 181,111 0 181", "114 0 181,65 0 181,67 0 181,18 0 181,44 0 181", "79 0 181,59 0 181,8 0 181,109 0 181,89 0 181", "116 0 181,95 0 181,12 0 181,9 0 181,31 0 181", "48 0 181,112 0 181,37 0 181,99 0 181,17 0 181", "66 0 181,19 0 181,41 0 181,43 0 181,52 0 181", "35 0 181,64 0 181,76 0 181,39 0 181,84 0 181", "91 0 181,13 0 181,49 0 181,104 0 181,57 0 181", "103 0 181,3 0 181,73 0 181,115 0 181,16 0 181", "101 0 181,81 0 181,119 0 181,100 0 181,7 0 181", "50 0 181,94 0 181,53 0 181,38 0 181,22 0 181", "21 0 181,34 0 181,58 0 181,106 0 181,30 0 181", "92 0 181,4 0 181,118 0 181,96 0 181,74 0 181", "10 0 181,42 0 181,46 0 181,108 0 181,102 0 181", "60 0 181,40 0 181,68 0 181,117 0 181,82 0 181", "77 0 181,14 0 181,45 0 181,75 0 181,24 0 181", "54 0 181,1 0 181"};
    string home = "28 98";
    string work = "69 163";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 104;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    int width = 240503;
    int length = 619739;
    vector<string> horizontal = {"317146 5179 238293,537567 5179 238293", "358500 5179 238293,27640 5179 238293", "171689 5179 238293,75750 5179 238293", "297294 5179 238293,384951 5179 238293", "263680 5179 238293,282528 5179 238293", "566398 5179 238293,205131 5179 238293", "129078 5179 238293,471375 5179 238293", "289486 5179 238293,462813 5179 238293", "205493 5179 238293,399311 5179 238293", "584946 5179 238293,458295 5179 238293", "195092 5179 238293,458572 5179 238293", "276882 5179 238293,85729 5179 238293", "358017 5179 238293,125912 5179 238293", "587026 5179 238293,474735 5179 238293", "191193 5179 238293,478145 5179 238293", "72344 5179 238293,100990 5179 238293", "371325 5179 238293,457721 5179 238293", "195877 5179 238293,133718 5179 238293", "93787 5179 238293,287650 5179 238293", "11964 5179 238293,83808 5179 238293", "578886 5179 238293,203790 5179 238293", "45871 5179 238293,336193 5179 238293", "35470 5179 238293,274428 5179 238293", "558717 5179 238293,253402 5179 238293", "63747 5179 238293,283332 5179 238293", "334476 5179 238293,264168 5179 238293", "386142 5179 238293,312217 5179 238293", "430691 5179 238293,573852 5179 238293", "230219 5179 238293,66876 5179 238293", "560536 5179 238293,128196 5179 238293", "94157 5179 238293,383491 5179 238293", "605737 5179 238293,403912 5179 238293", "437397 5179 238293,79970 5179 238293", "392756 5179 238293,378266 5179 238293", "537640 5179 238293,358652 5179 238293", "70127 5179 238293,280204 5179 238293", "215434 5179 238293,430192 5179 238293", "383546 5179 238293,331855 5179 238293", "612746 5179 238293,251137 5179 238293", "553293 5179 238293,374031 5179 238293", "46009 5179 238293,236868 5179 238293", "44736 5179 238293,251090 5179 238293", "129008 5179 238293,185859 5179 238293", "57910 5179 238293,493521 5179 238293", "550082 5179 238293,320639 5179 238293", "141577 5179 238293,402156 5179 238293", "575875 5179 238293,165792 5179 238293", "497618 5179 238293,477782 5179 238293", "537145 5179 238293"};
    vector<string> vertical = {"186896 11964 612746,159457 11964 612746", "87406 11964 612746,238293 11964 612746", "144954 11964 612746,150214 11964 612746", "133675 11964 612746,74422 11964 612746", "78426 11964 612746,16561 11964 612746", "201210 11964 612746,163747 11964 612746", "145621 11964 612746,214178 11964 612746", "229415 11964 612746,159831 11964 612746", "36324 11964 612746,50486 11964 612746", "187035 11964 612746,154149 11964 612746", "179495 11964 612746,104067 11964 612746", "65926 11964 612746,134652 11964 612746", "203883 11964 612746,223292 11964 612746", "6076 11964 612746,15369 11964 612746", "21861 11964 612746,10119 11964 612746", "219248 11964 612746,159251 11964 612746", "5179 11964 612746,94704 11964 612746", "143092 11964 612746,112311 11964 612746", "70726 11964 612746,54931 11964 612746", "59865 11964 612746,52145 11964 612746", "69311 11964 612746,210748 11964 612746"};
    string home = "20766 424129";
    string work = "90829 224502";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    int width = 510446;
    int length = 350086;
    vector<string> horizontal = {"209051 6248 506990,65055 6248 506990", "253295 6248 506990,125572 6248 506990", "197963 6248 506990,318461 6248 506990", "279879 6248 506990,167057 6248 506990", "197515 6248 506990,307134 6248 506990", "268807 6248 506990,32845 6248 506990", "281344 6248 506990,206177 6248 506990", "10597 6248 506990,274191 6248 506990", "237127 6248 506990,217195 6248 506990", "74671 6248 506990,235427 6248 506990", "57359 6248 506990,89248 6248 506990", "190603 6248 506990,5169 6248 506990", "134666 6248 506990,289637 6248 506990", "258590 6248 506990,119787 6248 506990", "78836 6248 506990,217207 6248 506990", "142244 6248 506990,185910 6248 506990", "55116 6248 506990,41645 6248 506990", "214093 6248 506990,83006 6248 506990", "6420 6248 506990,180801 6248 506990", "211317 6248 506990,64026 6248 506990", "68070 6248 506990,255835 6248 506990", "173166 6248 506990,265299 6248 506990", "16161 6248 506990,296421 6248 506990", "133097 6248 506990,321133 6248 506990", "11107 6248 506990,48208 6248 506990", "196369 6248 506990,21497 6248 506990", "187424 6248 506990,83613 6248 506990", "60987 6248 506990,210407 6248 506990", "52700 6248 506990,284484 6248 506990", "98589 6248 506990,342609 6248 506990", "206602 6248 506990,130947 6248 506990", "110970 6248 506990,264648 6248 506990", "286166 6248 506990"};
    vector<string> vertical = {"389527 5169 342609,10312 5169 342609", "78129 5169 342609,276263 5169 342609", "340403 5169 342609,242194 5169 342609", "197231 5169 342609,170409 5169 342609", "74378 5169 342609,137113 5169 342609", "135566 5169 342609,198472 5169 342609", "122881 5169 342609,271500 5169 342609", "23031 5169 342609,81733 5169 342609", "412491 5169 342609,115525 5169 342609", "37929 5169 342609,441024 5169 342609", "398668 5169 342609,210187 5169 342609", "472192 5169 342609,291619 5169 342609", "222662 5169 342609,426124 5169 342609", "252575 5169 342609,100555 5169 342609", "60117 5169 342609,64036 5169 342609", "399835 5169 342609,17405 5169 342609", "120066 5169 342609,341870 5169 342609", "81517 5169 342609,275408 5169 342609", "501587 5169 342609,486612 5169 342609", "407493 5169 342609,24072 5169 342609", "174247 5169 342609,217116 5169 342609", "252419 5169 342609,200134 5169 342609", "506990 5169 342609,63456 5169 342609", "131738 5169 342609,199942 5169 342609", "74513 5169 342609,352298 5169 342609", "283055 5169 342609,217352 5169 342609", "274969 5169 342609,115103 5169 342609", "6248 5169 342609,140684 5169 342609", "183669 5169 342609,199904 5169 342609", "499125 5169 342609,487468 5169 342609", "33145 5169 342609,417555 5169 342609", "243364 5169 342609,172050 5169 342609", "148019 5169 342609,110672 5169 342609", "29852 5169 342609,101938 5169 342609", "405826 5169 342609,355627 5169 342609", "81481 5169 342609,146368 5169 342609", "451354 5169 342609,102408 5169 342609", "92203 5169 342609,40636 5169 342609", "57642 5169 342609,45519 5169 342609"};
    string home = "133931 22428";
    string work = "163326 202492";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    int width = 237331;
    int length = 910307;
    vector<string> horizontal = {"141622 203 237197,518139 203 237197", "188018 203 237197,622013 203 237197", "250516 203 237197,303617 203 237197", "223405 203 237197,832552 203 237197", "248566 203 237197,811360 203 237197", "501879 203 237197,611197 203 237197", "373620 203 237197,836864 203 237197", "750089 203 237197,457188 203 237197", "378800 203 237197,424398 203 237197", "476788 203 237197,412024 203 237197", "447315 203 237197,367977 203 237197", "212879 203 237197,229804 203 237197", "846147 203 237197,291274 203 237197", "542710 203 237197,802249 203 237197", "824760 203 237197,32461 203 237197", "629946 203 237197"};
    vector<string> vertical = {"124600 32461 846147,184646 32461 846147", "219485 32461 846147,199218 32461 846147", "44894 32461 846147,41778 32461 846147", "144995 32461 846147,169515 32461 846147", "87654 32461 846147,6250 32461 846147", "237197 32461 846147,143210 32461 846147", "96280 32461 846147,32992 32461 846147", "66777 32461 846147,32688 32461 846147", "179848 32461 846147,82632 32461 846147", "142109 32461 846147,128828 32461 846147", "24676 32461 846147,124574 32461 846147", "7928 32461 846147,9893 32461 846147", "35298 32461 846147,108525 32461 846147", "114339 32461 846147,176397 32461 846147", "221498 32461 846147,212681 32461 846147", "179568 32461 846147,191283 32461 846147", "9949 32461 846147,126106 32461 846147", "70757 32461 846147,177926 32461 846147", "22045 32461 846147,4762 32461 846147", "191307 32461 846147,75409 32461 846147", "203 32461 846147,225514 32461 846147", "54214 32461 846147,184704 32461 846147", "171502 32461 846147,8551 32461 846147", "167312 32461 846147,126089 32461 846147", "22198 32461 846147,44086 32461 846147", "30567 32461 846147,47583 32461 846147", "207256 32461 846147,121374 32461 846147", "43020 32461 846147,21136 32461 846147", "149327 32461 846147,184761 32461 846147", "70914 32461 846147,169123 32461 846147", "10527 32461 846147,105692 32461 846147", "4553 32461 846147,42530 32461 846147", "30543 32461 846147,87230 32461 846147", "104472 32461 846147,139161 32461 846147", "79134 32461 846147,196443 32461 846147"};
    string home = "23358 658169";
    string work = "121073 353790";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    int width = 524030;
    int length = 600162;
    vector<string> horizontal = {"304389 28215 520630,277677 28215 520630", "176163 28215 520630,32274 28215 520630", "262003 28215 520630,440754 28215 520630", "145186 28215 520630,442978 28215 520630", "399984 28215 520630,303069 28215 520630", "69550 28215 520630,239790 28215 520630", "8500 28215 520630,43188 28215 520630", "153667 28215 520630,592823 28215 520630", "547571 28215 520630,130671 28215 520630", "530912 28215 520630,483740 28215 520630", "390757 28215 520630,551016 28215 520630", "351659 28215 520630,258103 28215 520630", "414579 28215 520630,209259 28215 520630", "62499 28215 520630,566145 28215 520630", "338880 28215 520630,66285 28215 520630", "567992 28215 520630,227983 28215 520630", "563116 28215 520630,86337 28215 520630", "83543 28215 520630,12875 28215 520630", "444455 28215 520630,553684 28215 520630", "315480 28215 520630,22387 28215 520630", "538242 28215 520630,209824 28215 520630", "421663 28215 520630,286856 28215 520630", "492349 28215 520630,143811 28215 520630", "200473 28215 520630,221437 28215 520630", "443995 28215 520630,303093 28215 520630", "188127 28215 520630,317159 28215 520630", "599028 28215 520630,324170 28215 520630", "589304 28215 520630,261937 28215 520630", "446127 28215 520630,195044 28215 520630", "475505 28215 520630,215194 28215 520630", "344901 28215 520630,437510 28215 520630", "239359 28215 520630,5455 28215 520630", "18560 28215 520630,310029 28215 520630", "380887 28215 520630,562222 28215 520630", "8148 28215 520630"};
    vector<string> vertical = {"495187 5455 599028,429663 5455 599028", "28215 5455 599028,30437 5455 599028", "95527 5455 599028,93964 5455 599028", "140727 5455 599028,253588 5455 599028", "321793 5455 599028,520630 5455 599028", "204611 5455 599028,166071 5455 599028"};
    string home = "341042 195671";
    string work = "53989 81759";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    int width = 150118;
    int length = 824643;
    vector<string> horizontal = {"694924 4000 141406,157727 4000 141406", "66519 4000 141406,122034 4000 141406", "176948 4000 141406,96993 4000 141406", "170608 4000 141406,490126 4000 141406", "686158 4000 141406,706358 4000 141406", "564151 4000 141406,341627 4000 141406", "13008 4000 141406,792795 4000 141406", "515511 4000 141406,780648 4000 141406", "54178 4000 141406,134146 4000 141406", "309799 4000 141406,450417 4000 141406", "705487 4000 141406,551090 4000 141406", "192057 4000 141406,657012 4000 141406", "44145 4000 141406,314775 4000 141406", "318413 4000 141406,793594 4000 141406", "143811 4000 141406,438904 4000 141406", "69217 4000 141406,288267 4000 141406", "308101 4000 141406,808537 4000 141406", "549477 4000 141406,723773 4000 141406", "216236 4000 141406,251009 4000 141406", "774959 4000 141406,804036 4000 141406", "406972 4000 141406,441307 4000 141406", "250988 4000 141406,627922 4000 141406", "319553 4000 141406"};
    vector<string> vertical = {"57052 10922 810565,83273 10922 810565", "132070 10922 810565,22226 10922 810565", "129569 10922 810565,123651 10922 810565", "67858 10922 810565"};
    string home = "69293 305698";
    string work = "10792 50565";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    int width = 784605;
    int length = 586734;
    vector<string> horizontal = {"92019 21904 768112,289577 21904 768112", "90751 21904 768112,549490 21904 768112", "373078 21904 768112,250628 21904 768112", "169320 21904 768112,227541 21904 768112", "287415 21904 768112,392509 21904 768112", "395726 21904 768112,205316 21904 768112", "400951 21904 768112,479391 21904 768112", "77465 21904 768112,345654 21904 768112", "248456 21904 768112,324246 21904 768112", "411189 21904 768112,429519 21904 768112", "157377 21904 768112,494979 21904 768112", "428658 21904 768112,223997 21904 768112", "295690 21904 768112,524171 21904 768112", "406385 21904 768112,250673 21904 768112", "178490 21904 768112,296339 21904 768112", "439231 21904 768112,208090 21904 768112", "165916 21904 768112,472037 21904 768112", "339689 21904 768112"};
    vector<string> vertical = {"59984 28658 575283,24395 28658 575283", "321712 28658 575283,329703 28658 575283", "257339 28658 575283,500768 28658 575283", "96334 28658 575283,559500 28658 575283", "596319 28658 575283,480880 28658 575283", "35558 28658 575283,135020 28658 575283", "431700 28658 575283,217274 28658 575283", "623016 28658 575283,192073 28658 575283", "164348 28658 575283,499366 28658 575283", "650181 28658 575283,198927 28658 575283", "751148 28658 575283,361525 28658 575283", "193795 28658 575283,671478 28658 575283", "414426 28658 575283,165288 28658 575283", "555491 28658 575283,124322 28658 575283", "469841 28658 575283,497139 28658 575283", "707988 28658 575283,261925 28658 575283", "458547 28658 575283,391324 28658 575283", "367958 28658 575283,231164 28658 575283", "299714 28658 575283,356708 28658 575283", "167624 28658 575283,461055 28658 575283"};
    string home = "520641 132080";
    string work = "265022 228227";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    int width = 490521;
    int length = 832524;
    vector<string> horizontal = {"53464 9148 479321,12418 9148 479321", "294214 9148 479321,37391 9148 479321", "223305 9148 479321,709686 9148 479321", "492232 9148 479321,150862 9148 479321", "370668 9148 479321,726793 9148 479321", "300255 9148 479321,22540 9148 479321", "468149 9148 479321,131816 9148 479321", "701698 9148 479321,100152 9148 479321", "623518 9148 479321,719255 9148 479321", "299549 9148 479321,723802 9148 479321", "87454 9148 479321,96795 9148 479321", "233628 9148 479321,344483 9148 479321", "291638 9148 479321,121303 9148 479321", "603051 9148 479321,583049 9148 479321", "356457 9148 479321,229562 9148 479321", "771878 9148 479321,26068 9148 479321", "786312 9148 479321,600994 9148 479321", "559503 9148 479321,391500 9148 479321", "664056 9148 479321,4280 9148 479321", "332963 9148 479321,300703 9148 479321", "738315 9148 479321,291282 9148 479321", "579150 9148 479321,349159 9148 479321", "13640 9148 479321,279622 9148 479321", "82116 9148 479321,474920 9148 479321", "420663 9148 479321,755569 9148 479321", "647150 9148 479321,278902 9148 479321", "469568 9148 479321,314644 9148 479321", "809982 9148 479321,509830 9148 479321", "692355 9148 479321,179784 9148 479321", "559588 9148 479321,491960 9148 479321", "8745 9148 479321,123199 9148 479321", "53908 9148 479321,734493 9148 479321", "490950 9148 479321,479509 9148 479321", "715423 9148 479321,560521 9148 479321", "461354 9148 479321,6331 9148 479321", "391546 9148 479321,749767 9148 479321", "757537 9148 479321,105186 9148 479321", "586193 9148 479321,94253 9148 479321", "81717 9148 479321"};
    vector<string> vertical = {"242246 40 811351,42988 40 811351,238663 40 811351", "448428 40 811351,364700 40 811351,401974 40 811351", "28543 40 811351,460611 40 811351,409117 40 811351", "367282 40 811351,210047 40 811351,77079 40 811351", "37781 40 811351,370406 40 811351,325455 40 811351", "378958 40 811351,312494 40 811351,126323 40 811351", "263058 40 811351,175784 40 811351,439246 40 811351", "44801 40 811351,74445 40 811351,37649 40 811351", "302901 40 811351,122520 40 811351,107033 40 811351", "310969 40 811351,321945 40 811351"};
    string home = "176518 362753";
    string work = "67985 484658";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    int width = 312792;
    int length = 250132;
    vector<string> horizontal = {"36282 3151 296711,171943 3151 296711", "43868 3151 296711,23990 3151 296711", "165947 3151 296711,142750 3151 296711", "59760 3151 296711,71570 3151 296711", "196143 3151 296711,147933 3151 296711", "110750 3151 296711,137540 3151 296711", "221555 3151 296711,97749 3151 296711", "190912 3151 296711,18278 3151 296711", "195027 3151 296711,95955 3151 296711", "51665 3151 296711,67426 3151 296711", "128949 3151 296711,86310 3151 296711", "19473 3151 296711,156232 3151 296711", "54881 3151 296711,225005 3151 296711", "183319 3151 296711,161659 3151 296711", "138532 3151 296711,241046 3151 296711", "10203 3151 296711,34207 3151 296711", "220656 3151 296711,163232 3151 296711", "176552 3151 296711,74323 3151 296711", "195700 3151 296711,27714 3151 296711", "184825 3151 296711,32993 3151 296711", "64135 3151 296711,80356 3151 296711", "38926 3151 296711,88212 3151 296711", "169234 3151 296711,40568 3151 296711", "24481 3151 296711,99056 3151 296711", "18420 3151 296711,38583 3151 296711", "197692 3151 296711,22485 3151 296711", "241654 3151 296711,229884 3151 296711", "76176 3151 296711,16153 3151 296711", "32956 3151 296711,107738 3151 296711", "228970 3151 296711,87152 3151 296711", "11162 3151 296711,101492 3151 296711", "104780 3151 296711,59452 3151 296711", "215917 3151 296711,13788 3151 296711", "42122 3151 296711,80413 3151 296711", "248477 3151 296711,38283 3151 296711", "8204 3151 296711,165643 3151 296711", "199438 3151 296711"};
    vector<string> vertical = {"197024 7700 249119,130402 7700 249119", "243284 7700 249119,175089 7700 249119", "117811 7700 249119,75224 7700 249119", "109262 7700 249119,112751 7700 249119", "282631 7700 249119,208722 7700 249119", "165241 7700 249119,226268 7700 249119", "30719 7700 249119,44179 7700 249119", "115758 7700 249119,269751 7700 249119", "179823 7700 249119,15816 7700 249119", "170233 7700 249119,186889 7700 249119", "83425 7700 249119,85359 7700 249119", "290852 7700 249119,253148 7700 249119", "277125 7700 249119,42321 7700 249119", "141005 7700 249119,127516 7700 249119", "246965 7700 249119,272581 7700 249119", "98726 7700 249119,202927 7700 249119", "243587 7700 249119,280139 7700 249119", "168993 7700 249119,34075 7700 249119", "28483 7700 249119,196035 7700 249119", "256085 7700 249119,292920 7700 249119", "255562 7700 249119,21751 7700 249119"};
    string home = "18364 37428";
    string work = "196280 129793";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    int width = 198263;
    int length = 399395;
    vector<string> horizontal = {"200256 4473 191071,83279 4473 191071", "298511 4473 191071,63943 4473 191071", "289407 4473 191071"};
    vector<string> vertical = {"164027 37 344042,19537 37 344042,155182 37 344042", "76381 37 344042,148885 37 344042,182157 37 344042", "143485 37 344042"};
    string home = "161848 283727";
    string work = "138701 69101";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    int width = 826611;
    int length = 26539;
    vector<string> horizontal = {"18576 28071 804313,6228 28071 804313", "20576 28071 804313,18652 28071 804313", "14181 28071 804313,15188 28071 804313", "16587 28071 804313,23940 28071 804313", "6486 28071 804313,1988 28071 804313", "3901 28071 804313,1421 28071 804313", "8545 28071 804313,4848 28071 804313", "22530 28071 804313,16638 28071 804313", "15666 28071 804313"};
    vector<string> vertical = {"608188 385 25795,575455 385 25795,672092 385 25795", "281749 385 25795,34285 385 25795,620024 385 25795", "637436 385 25795,711695 385 25795,776608 385 25795", "705385 385 25795,178325 385 25795,399529 385 25795", "157452 385 25795,699891 385 25795,646895 385 25795"};
    string home = "703540 15128";
    string work = "505196 13072";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    int width = 433196;
    int length = 720046;
    vector<string> horizontal = {"115744 2760 417760,544778 2760 417760", "337472 2760 417760,218842 2760 417760", "543627 2760 417760"};
    vector<string> vertical = {"85519 69873 645350,22132 69873 645350", "138721 69873 645350,320087 69873 645350", "310020 69873 645350,74186 69873 645350", "25911 69873 645350,250961 69873 645350", "41717 69873 645350,347516 69873 645350", "387792 69873 645350,396567 69873 645350", "272334 69873 645350,225375 69873 645350", "111405 69873 645350,354202 69873 645350", "66122 69873 645350,407944 69873 645350", "200122 69873 645350,58620 69873 645350", "4852 69873 645350,64470 69873 645350", "15982 69873 645350,294898 69873 645350", "53517 69873 645350,377110 69873 645350", "355449 69873 645350,187097 69873 645350", "81823 69873 645350,218761 69873 645350", "223728 69873 645350,146823 69873 645350", "131809 69873 645350,364490 69873 645350", "363247 69873 645350,135291 69873 645350", "89415 69873 645350,408712 69873 645350", "89212 69873 645350,348856 69873 645350", "221135 69873 645350,69987 69873 645350", "262617 69873 645350,191881 69873 645350", "56122 69873 645350,115090 69873 645350", "348787 69873 645350,33305 69873 645350", "331163 69873 645350,330667 69873 645350", "140125 69873 645350,253919 69873 645350", "160139 69873 645350,352432 69873 645350", "411090 69873 645350,68741 69873 645350", "143592 69873 645350,310941 69873 645350", "380162 69873 645350,72891 69873 645350", "245660 69873 645350,56125 69873 645350", "350609 69873 645350,36592 69873 645350", "204643 69873 645350,341117 69873 645350", "410293 69873 645350,149827 69873 645350", "186069 69873 645350,223506 69873 645350", "149095 69873 645350,286452 69873 645350", "313845 69873 645350,263810 69873 645350", "56409 69873 645350,195462 69873 645350", "368364 69873 645350,409429 69873 645350", "136407 69873 645350,131167 69873 645350", "274217 69873 645350,269441 69873 645350", "391648 69873 645350,227445 69873 645350", "79888 69873 645350,200621 69873 645350", "322934 69873 645350,85491 69873 645350", "369328 69873 645350,296239 69873 645350"};
    string home = "89774 103788";
    string work = "4346 348337";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    int width = 637400;
    int length = 689488;
    vector<string> horizontal = {"433755 27061 629137,93063 27061 629137", "318262 27061 629137,190989 27061 629137", "384985 27061 629137,383016 27061 629137", "389917 27061 629137,26626 27061 629137", "492152 27061 629137,390130 27061 629137", "362596 27061 629137,313917 27061 629137", "431599 27061 629137,538953 27061 629137", "314477 27061 629137,436523 27061 629137", "365737 27061 629137"};
    vector<string> vertical = {"47793 26504 674672,136983 26504 674672", "571511 26504 674672,622406 26504 674672", "391541 26504 674672,468323 26504 674672", "611710 26504 674672,514973 26504 674672", "564077 26504 674672,428214 26504 674672", "232589 26504 674672,179414 26504 674672", "151994 26504 674672,402315 26504 674672", "511772 26504 674672,99367 26504 674672", "542228 26504 674672,544124 26504 674672", "168380 26504 674672,56651 26504 674672", "33851 26504 674672,383951 26504 674672"};
    string home = "116566 141103";
    string work = "504804 431161";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    int width = 1934923376;
    int length = 719716362;
    vector<string> horizontal = {"556835317 9022012 1884780547", "672989570 9022012 1884780547", "635861821 9022012 1884780547", "157877480 9022012 1884780547", "352494296 9022012 1884780547", "51268843 9022012 1884780547", "570103114 9022012 1884780547", "13949208 9022012 1884780547", "23397776 9022012 1884780547", "348613245 9022012 1884780547", "663745837 9022012 1884780547", "369857627 9022012 1884780547", "215574926 9022012 1884780547", "323823419 9022012 1884780547", "196763011 9022012 1884780547", "384691585 9022012 1884780547", "563772353 9022012 1884780547", "457337475 9022012 1884780547", "682069728 9022012 1884780547", "574791964 9022012 1884780547", "425446356 9022012 1884780547", "685432573 9022012 1884780547", "61310529 9022012 1884780547", "205516249 9022012 1884780547", "395482812 9022012 1884780547", "406783371 9022012 1884780547", "411045173 9022012 1884780547", "412590545 9022012 1884780547", "416762577 9022012 1884780547", "551524605 9022012 1884780547", "114365767 9022012 1884780547", "629549705 9022012 1884780547", "369099977 9022012 1884780547", "650296686 9022012 1884780547", "162911613 9022012 1884780547", "68714879 9022012 1884780547", "453789317 9022012 1884780547", "427325057 9022012 1884780547", "636976820 9022012 1884780547", "182348709 9022012 1884780547", "344175812 9022012 1884780547", "160497600 9022012 1884780547", "637614783 9022012 1884780547", "614350993 9022012 1884780547", "38693469 9022012 1884780547", "674642746 9022012 1884780547", "56736229 9022012 1884780547", "242927698 9022012 1884780547"};
    vector<string> vertical = {};
    string home = "516246746 316478998";
    string work = "845484943 593529059";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    int width = 712182110;
    int length = 779187889;
    vector<string> horizontal = {"82395705 27253479 703335621", "297732887 27253479 703335621", "101716687 27253479 703335621", "558124602 27253479 703335621", "663950208 27253479 703335621", "108707919 27253479 703335621", "113342185 27253479 703335621", "580988438 27253479 703335621", "278626237 27253479 703335621"};
    vector<string> vertical = {"93215727 82395705 663950208", "693107488 82395705 663950208", "661708306 82395705 663950208", "156786482 82395705 663950208", "75098533 82395705 663950208", "599621900 82395705 663950208", "236644993 82395705 663950208", "47421039 82395705 663950208", "206305084 82395705 663950208", "576295322 82395705 663950208", "70345435 82395705 663950208", "351793698 82395705 663950208", "127070435 82395705 663950208", "342412277 82395705 663950208", "425011881 82395705 663950208", "309741524 82395705 663950208", "182541847 82395705 663950208", "174729703 82395705 663950208", "413573813 82395705 663950208", "239568507 82395705 663950208", "414896100 82395705 663950208", "366748282 82395705 663950208", "703335621 82395705 663950208", "195850898 82395705 663950208", "470992837 82395705 663950208", "645015881 82395705 663950208", "602365506 82395705 663950208", "50293014 82395705 663950208", "539873765 82395705 663950208", "327990728 82395705 663950208", "96144496 82395705 663950208", "281650823 82395705 663950208", "405086838 82395705 663950208", "27253479 82395705 663950208", "268119375 82395705 663950208", "633213897 82395705 663950208", "98236135 82395705 663950208", "398035083 82395705 663950208"};
    string home = "498356202 123562272";
    string work = "517796189 123562272";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    int width = 1759118722;
    int length = 1636607026;
    vector<string> horizontal = {"1571899980 57714540 1753352388", "1610457978 57714540 1753352388", "1518140778 57714540 1753352388", "888694457 57714540 1753352388", "884432243 57714540 1753352388", "564146418 57714540 1753352388", "772212825 57714540 1753352388", "607944192 57714540 1753352388", "737144488 57714540 1753352388", "824562184 57714540 1753352388", "222019329 57714540 1753352388", "1549964422 57714540 1753352388", "303411531 57714540 1753352388", "230210262 57714540 1753352388", "377084095 57714540 1753352388", "269092775 57714540 1753352388", "575777098 57714540 1753352388", "293735143 57714540 1753352388", "779110940 57714540 1753352388", "502302666 57714540 1753352388", "517598631 57714540 1753352388", "1505778111 57714540 1753352388", "1409906260 57714540 1753352388", "876953229 57714540 1753352388", "1370760705 57714540 1753352388", "1006551342 57714540 1753352388", "790099278 57714540 1753352388", "435555448 57714540 1753352388", "241354345 57714540 1753352388", "648793177 57714540 1753352388", "170354428 57714540 1753352388", "704717134 57714540 1753352388", "1212345208 57714540 1753352388", "1047551234 57714540 1753352388", "1007830672 57714540 1753352388"};
    vector<string> vertical = {"245198948 85511986 1627090832", "1260406329 85511986 1627090832", "563235492 85511986 1627090832", "864649731 85511986 1627090832", "923523289 85511986 1627090832", "1059781306 85511986 1627090832", "586445671 85511986 1627090832", "1409681745 85511986 1627090832", "886987616 85511986 1627090832", "1516010883 85511986 1627090832", "753818811 85511986 1627090832", "318949009 85511986 1627090832", "287316460 85511986 1627090832", "661039729 85511986 1627090832"};
    string home = "266527690 1432357280";
    string work = "283518776 178080344";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    int width = 600528837;
    int length = 795443909;
    vector<string> horizontal = {};
    vector<string> vertical = {};
    string home = "477906808 220134440";
    string work = "269307498 236317807";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    int width = 254;
    int length = 254;
    vector<string> horizontal = {"2 0 254,3 0 254,4 0 254,5 0 254,6 0 254,7 0 254", "8 0 254,9 0 254,10 0 254,11 0 254,12 0 254", "13 0 254,14 0 254,15 0 254,16 0 254,17 0 254", "18 0 254,19 0 254,20 0 254,21 0 254,22 0 254", "23 0 254,24 0 254,25 0 254,26 0 254,27 0 254", "28 0 254,29 0 254,30 0 254,31 0 254,32 0 254", "33 0 254,34 0 254,35 0 254,36 0 254,37 0 254", "38 0 254,39 0 254,40 0 254,41 0 254,42 0 254", "43 0 254,44 0 254,45 0 254,46 0 254,47 0 254", "48 0 254,49 0 254,50 0 254,51 0 254,52 0 254", "53 0 254,54 0 254,55 0 254,56 0 254,57 0 254", "58 0 254,59 0 254,60 0 254,61 0 254,62 0 254", "63 0 254,64 0 254,65 0 254,66 0 254,67 0 254", "68 0 254,69 0 254,70 0 254,71 0 254,72 0 254", "73 0 254,74 0 254,75 0 254,76 0 254,77 0 254", "78 0 254,79 0 254,80 0 254,81 0 254,82 0 254", "83 0 254,84 0 254,85 0 254,86 0 254,87 0 254", "88 0 254,89 0 254,90 0 254,91 0 254,92 0 254", "93 0 254,94 0 254,95 0 254,96 0 254,97 0 254", "98 0 254,99 0 254,100 0 254,101 0 254,102 0 254", "103 0 254,104 0 254,105 0 254,106 0 254,107 0 254", "108 0 254,109 0 254,110 0 254,111 0 254,112 0 254", "113 0 254,114 0 254,115 0 254,116 0 254,117 0 254", "118 0 254,119 0 254,120 0 254,121 0 254,122 0 254", "123 0 254,124 0 254,125 0 254,126 0 254,127 0 254", "128 0 254,129 0 254,130 0 254,131 0 254,132 0 254", "133 0 254,134 0 254,135 0 254,136 0 254,137 0 254", "138 0 254,139 0 254,140 0 254,141 0 254,142 0 254", "143 0 254,144 0 254,145 0 254,146 0 254,147 0 254", "148 0 254,149 0 254,150 0 254,151 0 254,152 0 254", "153 0 254,154 0 254,155 0 254,156 0 254,157 0 254", "158 0 254,159 0 254,160 0 254,161 0 254,162 0 254", "163 0 254,164 0 254,165 0 254,166 0 254,167 0 254", "168 0 254,169 0 254,170 0 254,171 0 254,172 0 254", "173 0 254,174 0 254,175 0 254,176 0 254,177 0 254", "178 0 254,179 0 254,180 0 254,181 0 254,182 0 254", "183 0 254,184 0 254,185 0 254,186 0 254,187 0 254", "188 0 254,189 0 254,190 0 254,191 0 254,192 0 254", "193 0 254,194 0 254,195 0 254,196 0 254,197 0 254", "198 0 254,199 0 254,200 0 254,201 0 254,202 0 254", "203 0 254,204 0 254,205 0 254,206 0 254,207 0 254", "208 0 254,209 0 254,210 0 254,211 0 254,212 0 254", "213 0 254,214 0 254,215 0 254,216 0 254,217 0 254", "218 0 254,219 0 254,220 0 254,221 0 254,222 0 254", "223 0 254,224 0 254,225 0 254,226 0 254,227 0 254", "228 0 254,229 0 254,230 0 254,231 0 254,232 0 254", "233 0 254,234 0 254,235 0 254,236 0 254,237 0 254", "238 0 254,239 0 254,240 0 254,241 0 254,242 0 254", "243 0 254,244 0 254,245 0 254,246 0 254,247 0 254", "248 0 254,249 0 254,250 0 254,252 0 254,253 0 254"};
    vector<string> vertical = {"2 0 254,3 0 254,4 0 254,5 0 254,6 0 254,7 0 254", "8 0 254,9 0 254,10 0 254,11 0 254,12 0 254", "13 0 254,14 0 254,15 0 254,16 0 254,17 0 254", "18 0 254,19 0 254,20 0 254,21 0 254,22 0 254", "23 0 254,24 0 254,25 0 254,26 0 254,27 0 254", "28 0 254,29 0 254,30 0 254,31 0 254,32 0 254", "33 0 254,34 0 254,35 0 254,36 0 254,37 0 254", "38 0 254,39 0 254,40 0 254,41 0 254,42 0 254", "43 0 254,44 0 254,45 0 254,46 0 254,47 0 254", "48 0 254,49 0 254,50 0 254,51 0 254,52 0 254", "53 0 254,54 0 254,55 0 254,56 0 254,57 0 254", "58 0 254,59 0 254,60 0 254,61 0 254,62 0 254", "63 0 254,64 0 254,65 0 254,66 0 254,67 0 254", "68 0 254,69 0 254,70 0 254,71 0 254,72 0 254", "73 0 254,74 0 254,75 0 254,76 0 254,77 0 254", "78 0 254,79 0 254,80 0 254,81 0 254,82 0 254", "83 0 254,84 0 254,85 0 254,86 0 254,87 0 254", "88 0 254,89 0 254,90 0 254,91 0 254,92 0 254", "93 0 254,94 0 254,95 0 254,96 0 254,97 0 254", "98 0 254,99 0 254,100 0 254,101 0 254,102 0 254", "103 0 254,104 0 254,105 0 254,106 0 254,107 0 254", "108 0 254,109 0 254,110 0 254,111 0 254,112 0 254", "113 0 254,114 0 254,115 0 254,116 0 254,117 0 254", "118 0 254,119 0 254,120 0 254,121 0 254,122 0 254", "123 0 254,124 0 254,125 0 254,126 0 254,127 0 254", "128 0 254,129 0 254,130 0 254,131 0 254,132 0 254", "133 0 254,134 0 254,135 0 254,136 0 254,137 0 254", "138 0 254,139 0 254,140 0 254,141 0 254,142 0 254", "143 0 254,144 0 254,145 0 254,146 0 254,147 0 254", "148 0 254,149 0 254,150 0 254,151 0 254,152 0 254", "153 0 254,154 0 254,155 0 254,156 0 254,157 0 254", "158 0 254,159 0 254,160 0 254,161 0 254,162 0 254", "163 0 254,164 0 254,165 0 254,166 0 254,167 0 254", "168 0 254,169 0 254,170 0 254,171 0 254,172 0 254", "173 0 254,174 0 254,175 0 254,176 0 254,177 0 254", "178 0 254,179 0 254,180 0 254,181 0 254,182 0 254", "183 0 254,184 0 254,185 0 254,186 0 254,187 0 254", "188 0 254,189 0 254,190 0 254,191 0 254,192 0 254", "193 0 254,194 0 254,195 0 254,196 0 254,197 0 254", "198 0 254,199 0 254,200 0 254,201 0 254,202 0 254", "203 0 254,204 0 254,205 0 254,206 0 254,207 0 254", "208 0 254,209 0 254,210 0 254,211 0 254,212 0 254", "213 0 254,214 0 254,215 0 254,216 0 254,217 0 254", "218 0 254,219 0 254,220 0 254,221 0 254,222 0 254", "223 0 254,224 0 254,225 0 254,226 0 254,227 0 254", "228 0 254,229 0 254,230 0 254,231 0 254,232 0 254", "233 0 254,234 0 254,235 0 254,236 0 254,237 0 254", "238 0 254,239 0 254,240 0 254,241 0 254,242 0 254", "243 0 254,244 0 254,245 0 254,246 0 254,247 0 254", "248 0 254,249 0 254,250 0 254,252 0 254,253 0 254"};
    string home = "1 1";
    string work = "251 251";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 498;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    int width = 622;
    int length = 622;
    vector<string> horizontal = {"1 1 2,4 4 5,7 7 8,10 10 11,13 13 14,16 16 17", "19 19 20,22 22 23,25 25 26,28 28 29,31 31 32", "34 34 35,37 37 38,40 40 41,43 43 44,46 46 47", "49 49 50,52 52 53,55 55 56,58 58 59,61 61 62", "64 64 65,67 67 68,70 70 71,73 73 74,76 76 77", "79 79 80,82 82 83,85 85 86,88 88 89,91 91 92", "94 94 95,97 97 98,100 100 101,103 103 104", "106 106 107,109 109 110,112 112 113,115 115 116", "118 118 119,121 121 122,124 124 125,127 127 128", "130 130 131,133 133 134,136 136 137,139 139 140", "142 142 143,145 145 146,148 148 149,151 151 152", "154 154 155,157 157 158,160 160 161,163 163 164", "166 166 167,169 169 170,172 172 173,175 175 176", "178 178 179,181 181 182,184 184 185,187 187 188", "190 190 191,193 193 194,196 196 197,199 199 200", "202 202 203,205 205 206,208 208 209,211 211 212", "214 214 215,217 217 218,220 220 221,223 223 224", "226 226 227,229 229 230,232 232 233,235 235 236", "238 238 239,241 241 242,244 244 245,247 247 248", "250 250 251,253 253 254,256 256 257,259 259 260", "262 262 263,265 265 266,268 268 269,271 271 272", "274 274 275,277 277 278,280 280 281,283 283 284", "286 286 287,289 289 290,292 292 293,295 295 296", "298 298 299,301 301 302,304 304 305,307 307 308", "310 310 311,313 313 314,316 316 317,319 319 320", "322 322 323,325 325 326,328 328 329,331 331 332", "334 334 335,337 337 338,340 340 341,343 343 344", "346 346 347,349 349 350,352 352 353,355 355 356", "358 358 359,361 361 362,364 364 365,367 367 368", "370 370 371,373 373 374,376 376 377,379 379 380", "382 382 383,385 385 386,388 388 389,391 391 392", "394 394 395,397 397 398,400 400 401,403 403 404", "406 406 407,409 409 410,412 412 413,415 415 416", "418 418 419,421 421 422,424 424 425,427 427 428", "430 430 431,433 433 434,436 436 437,439 439 440", "442 442 443,445 445 446,448 448 449,451 451 452", "454 454 455,457 457 458,460 460 461,463 463 464", "466 466 467,469 469 470,472 472 473,475 475 476", "478 478 479,481 481 482,484 484 485,487 487 488", "490 490 491,493 493 494,496 496 497,499 499 500", "502 502 503,505 505 506,508 508 509,511 511 512", "514 514 515,517 517 518,520 520 521,523 523 524", "526 526 527,529 529 530,532 532 533,535 535 536", "538 538 539,541 541 542,544 544 545,547 547 548", "550 550 551,553 553 554,556 556 557,559 559 560", "562 562 563,565 565 566,568 568 569,571 571 572", "574 574 575,577 577 578,580 580 581,583 583 584", "586 586 587,589 589 590,592 592 593,595 595 596", "598 598 599,601 601 602,604 604 605,607 607 608", "610 610 611,613 613 614,616 616 617,619 619 620"};
    vector<string> vertical = {"3 2 3,6 5 6,9 8 9,12 11 12,15 14 15,18 17 18", "21 20 21,24 23 24,27 26 27,30 29 30,33 32 33", "36 35 36,39 38 39,42 41 42,45 44 45,48 47 48", "51 50 51,54 53 54,57 56 57,60 59 60,63 62 63", "66 65 66,69 68 69,72 71 72,75 74 75,78 77 78", "81 80 81,84 83 84,87 86 87,90 89 90,93 92 93", "96 95 96,99 98 99,102 101 102,105 104 105", "108 107 108,111 110 111,114 113 114,117 116 117", "120 119 120,123 122 123,126 125 126,129 128 129", "132 131 132,135 134 135,138 137 138,141 140 141", "144 143 144,147 146 147,150 149 150,153 152 153", "156 155 156,159 158 159,162 161 162,165 164 165", "168 167 168,171 170 171,174 173 174,177 176 177", "180 179 180,183 182 183,186 185 186,189 188 189", "192 191 192,195 194 195,198 197 198,201 200 201", "204 203 204,207 206 207,210 209 210,213 212 213", "216 215 216,219 218 219,222 221 222,225 224 225", "228 227 228,231 230 231,234 233 234,237 236 237", "240 239 240,243 242 243,246 245 246,249 248 249", "252 251 252,255 254 255,258 257 258,261 260 261", "264 263 264,267 266 267,270 269 270,273 272 273", "276 275 276,279 278 279,282 281 282,285 284 285", "288 287 288,291 290 291,294 293 294,297 296 297", "300 299 300,303 302 303,306 305 306,309 308 309", "312 311 312,315 314 315,318 317 318,321 320 321", "324 323 324,327 326 327,330 329 330,333 332 333", "336 335 336,339 338 339,342 341 342,345 344 345", "348 347 348,351 350 351,354 353 354,357 356 357", "360 359 360,363 362 363,366 365 366,369 368 369", "372 371 372,375 374 375,378 377 378,381 380 381", "384 383 384,387 386 387,390 389 390,393 392 393", "396 395 396,399 398 399,402 401 402,405 404 405", "408 407 408,411 410 411,414 413 414,417 416 417", "420 419 420,423 422 423,426 425 426,429 428 429", "432 431 432,435 434 435,438 437 438,441 440 441", "444 443 444,447 446 447,450 449 450,453 452 453", "456 455 456,459 458 459,462 461 462,465 464 465", "468 467 468,471 470 471,474 473 474,477 476 477", "480 479 480,483 482 483,486 485 486,489 488 489", "492 491 492,495 494 495,498 497 498,501 500 501", "504 503 504,507 506 507,510 509 510,513 512 513", "516 515 516,519 518 519,522 521 522,525 524 525", "528 527 528,531 530 531,534 533 534,537 536 537", "540 539 540,543 542 543,546 545 546,549 548 549", "552 551 552,555 554 555,558 557 558,561 560 561", "564 563 564,567 566 567,570 569 570,573 572 573", "576 575 576,579 578 579,582 581 582,585 584 585", "588 587 588,591 590 591,594 593 594,597 596 597", "600 599 600,603 602 603,606 605 606,609 608 609", "612 611 612,615 614 615,618 617 618,621 620 621"};
    string home = "1 2";
    string work = "620 618";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    int width = 100;
    int length = 100;
    vector<string> horizontal = {"10 0 100,20 0 100,30 0 100,40 0 100,50 0 100", "60 0 100,70 0 100,80 0 100,90 0 100"};
    vector<string> vertical = {"10 0 100,20 0 100,30 0 100,40 0 100,50 0 100", "60 0 100,70 0 100,80 0 100,90 0 100"};
    string home = "15 6";
    string work = "93 95";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    int width = 100;
    int length = 100;
    vector<string> horizontal = {"2 0 100", "3 0 100,4 0 100", "5 0 100,6 0 100,7 0 100,8 0 100,9 0 100", "10 0 100,11 0 100,12 0 100,13 0 100", "14 0 100,15 0 100,16 0 100,17 0 100,18 0 100", "19 0 100,20 0 100,21 0 100,22 0 100,23 0 100", "24 0 100,25 0 100,26 0 100", "27 0 100,28 0 100,29 0 100,30 0 100", "31 0 100,32 0 100,33 0 100,34 0 100", "35 0 100,36 0 100,37 0 100,38 0 100,39 0 100", "40 0 100,41 0 100,42 0 100,43 0 100", "44 0 100,45 0 100,46 0 100,47 0 100,48 0 100", "49 0 100,50 0 100,51 0 100,52 0 100", "53 0 100,54 0 100,55 0 100,56 0 100", "57 0 100,58 0 100,59 0 100,60 0 100", "61 0 100,62 0 100,63 0 100,64 0 100", "65 0 100,66 0 100,67 0 100"};
    vector<string> vertical = {"2 0 100"};
    string home = "1 1";
    string work = "99 99";
    SafeJourney* pObj = new SafeJourney();
    clock_t start = clock();
    int result = pObj->fewestRoadCrossings(width, length, horizontal, vertical, home, work);
    clock_t end = clock();
    delete pObj;
    int expected = 67;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=9906197&rd=8074&pm=5918
********************************************************************************
#include <algorithm> 
#include <iostream> 
#include <sstream> 
#include <string> 
#include <vector> 
#include <queue> 
#include <set> 
#include <map> 
#include <cstdio> 
#include <cstdlib> 
#include <cctype> 
#include <cmath> 
#include <list> 
#include <regex.h>  
using namespace std; 
 
// LIB CODE 
typedef vector<int> VI; 
#define PB push_back 
#define FOR(i,a,b) for(int i=(a);i<int(b);++i) 
#define SZ(v) ((int)(v).size()) 
#define FORSZ(i,a,v) FOR(i,a,SZ(v)) 
#define REPSZ(i,v) FORSZ(i,0,v) 
#define REP(i,n) FOR(i,0,n) 
template<class T, class U> T cast (U x) { T y; ostringstream a; a<<x; istringstream b(a.str()); b>>y; return y; } 
template<class T> vector<T> split(string s, string x=" ") { vector<T> r; REP(i,s.size()) { string c; while(i<(int)s.size()&&x.find(s[i])==string::npos) c+=s[i++]; if(c.size()) r.push_back(cast<T>(c)); } return r; } 
#define ALL(v) (v).begin(),(v).end() 
#define SORT(v) sort(ALL(v)) 
#define UNIQUE(v) (v).erase(unique(ALL(v)),(v).end()) 
typedef vector<VI> VVI; 
#define FORE(i,a,b) for(int i=(a);i<=int(b);++i) 
typedef pair<int,int> PII; 
typedef vector<PII> VPII; 
#define MP make_pair 
int DX[]={-1,0,1,0}; 
int DY[]={0,1,0,-1}; 
// REAL CODE 
 
 
 
class SafeJourney { 
public: 
  int fewestRoadCrossings(int width, int length, vector <string> horizontal, vector <string> vertical, string home, string work) { 
    VI x,y; 
    x.PB(0); x.PB(width); y.PB(0); y.PB(length); 
    REPSZ(i,horizontal) { VI z=split<int>(horizontal[i]," ,"); for(int j=0;j<SZ(z);j+=3) { y.PB(z[j+0]); x.PB(z[j+1]); x.PB(z[j+2]); } } 
    REPSZ(i,vertical) { VI z=split<int>(vertical[i]," ,"); for(int j=0;j<SZ(z);j+=3) { x.PB(z[j+0]); y.PB(z[j+1]); y.PB(z[j+2]); } } 
    { VI z=split<int>(home); x.PB(z[0]); y.PB(z[1]); } 
    { VI z=split<int>(work); x.PB(z[0]); y.PB(z[1]); } 
    SORT(x); UNIQUE(x); SORT(y); UNIQUE(y); 
     
//    REPSZ(i,x) printf("%d%c",x[i],i==SZ(x)-1?'\n':' '); 
//    REPSZ(i,y) printf("%d%c",y[i],i==SZ(y)-1?'\n':' '); 
     
    map<int,int> fx,fy; 
    REPSZ(i,x) fx[x[i]]=i; 
    REPSZ(i,y) fy[y[i]]=i; 
     
     
    VVI b(2*SZ(x)-1,VI(2*SZ(y)-1,-1)); 
    REPSZ(i,horizontal) { VI z=split<int>(horizontal[i]," ,"); for(int j=0;j<SZ(z);j+=3) { 
      int yy=2*fy[z[j+0]],sx=2*fx[z[j+1]],ex=2*fx[z[j+2]]; 
      FORE(xx,sx,ex) b[xx][yy]=-2; 
    } } 
    REPSZ(i,vertical) { VI z=split<int>(vertical[i]," ,"); for(int j=0;j<SZ(z);j+=3) { 
      int xx=2*fx[z[j+0]],sy=2*fy[z[j+1]],ey=2*fy[z[j+2]]; 
      FORE(yy,sy,ey) b[xx][yy]=-2; 
    } } 
     
//    REPSZ(i,b) { REPSZ(j,b[i]) printf("%c",b[i][j]==-2?'X':'.'); puts(""); } 
     
    VPII q1,q2; 
    { VI z=split<int>(home); printf("%d %d\n",z[1],fy[z[1]]); q2.PB(MP(2*fx[z[0]],2*fy[z[1]])); b[2*fx[z[0]]][2*fy[z[1]]]=0; } 
    while(!q2.empty()) { 
      swap(q1,q2); 
      while(!q1.empty()) { 
        int cx=q1.back().first,cy=q1.back().second; q1.pop_back(); 
//        printf("%d %d = %d\n",cx,cy,b[cx][cy]); 
        REP(k,4) { 
          int nx=cx+DX[k],ny=cy+DY[k]; 
          if(nx<0||nx>=SZ(b)||ny<0||ny>=SZ(b[nx])) continue; 
          if(b[nx][ny]==-2) { 
            nx+=DX[k],ny+=DY[k]; 
            if(nx<0||nx>=SZ(b)||ny<0||ny>=SZ(b[nx])||b[nx][ny]!=-1) continue; 
            b[nx][ny]=b[cx][cy]+1; 
            q2.PB(MP(nx,ny)); 
          } else if(b[nx][ny]==-1||b[cx][cy]<b[nx][ny]) { 
            b[nx][ny]=b[cx][cy]; 
            q1.PB(MP(nx,ny)); 
          } 
        } 
      } 
    } 
 
//    REPSZ(i,b) { REPSZ(j,b[i]) printf("%c",b[i][j]==-2?'X':'0'+b[i][j]); puts(""); } 
 
    { VI z=split<int>(work); return b[2*fx[z[0]]][2*fy[z[1]]]; } 
  } 
   
}; 
 
 
// Powered by FileEdit
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/