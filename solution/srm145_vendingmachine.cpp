/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=1130
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class VendingMachine {
public:
    int motorUse(vector<string> prices, vector<string> purchases);
};

int VendingMachine::motorUse(vector<string> prices, vector<string> purchases) {
    int ret;
    return ret;
}


int test0() {
    vector<string> prices = {"100 100 100"};
    vector<string> purchases = {"0,0:0", "0,2:5", "0,1:10"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> prices = {"100 200 300 400 500 600"};
    vector<string> purchases = {"0,2:0", "0,3:5", "0,1:10", "0,4:15"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> prices = {"100 200 300 400 500 600"};
    vector<string> purchases = {"0,2:0", "0,3:4", "0,1:8", "0,4:12"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> prices = {"100 100 100"};
    vector<string> purchases = {"0,0:10", "0,0:11"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> prices = {"100 200 300", "600 500 400"};
    vector<string> purchases = {"0,0:0", "1,1:10", "1,2:20", "0,1:21", "1,0:22", "0,2:35"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> prices = {"368 7960 8282 593 303 95 13 1230", "74 370 134 6316 8 535 61 2435", "9240 43 215 8853 37 42 92 6403", "482 687 508 9602 4345 5152 5624 3113", "70 5 6193 8 94 1323 5171 4776", "4237 7 7 1 636 736 1 8441", "516 2773 33 4772 1740 57 156 2800", "4739 35 99 5050 459 2 9104 2", "12 9029 5 91 95 7039 5 2", "6 1 83 3062 864 665 8500 1268", "7922 8347 58 1352 3753 133 4548 6", "2051 1 583 1399 8354 17 347 3115", "1094 5178 774 1 63 49 2 90", "966 8090 1 8467 356 148 7906 27", "9832 4 4 892 9128 34 5034 429", "5 5257 8949 35 276 1996 93 1", "6657 334 84 33 9908 2388 9332 85", "943 70 153 9488 998 6274 1 9180", "238 133 42 5 889 7576 9446 4254", "1424 9142 6685 58 57 6974 71 8258", "8 2236 63 4039 1 194 788 565", "6953 3 99 487 5 5952 7468 7639", "9846 8012 7705 8 7149 3 94 8608", "7853 5 4935 1296 66 9 4346 2277", "253 6836 89 7534 7304 8 1 70"};
    vector<string> purchases = {"1,7:7", "2,4:8", "11,4:10", "8,7:18"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> prices = {"9 284 4 8 5 5 533 7566 4491 132 3146 7 1391 8 11 2", "4 1 5 1597 9805 5500 6757 2921 8 2 95 1 9 4 5 6956", "9394 3311 819 3836 26 3537 8 5 1 90 1 7 4 7 1739 8", "8029 16 7 8 5 2 4 5 1 1 6 4978 5699 4309 5834 8036", "8900 1020 7630 7796 3 552 9 8 2 7860 4 16 9 4 44 1", "9 1340 4 3962 4 3171 5405 6312 4 9 6 4 4 1 813 917", "2420 7 3 8 2452 3216 5 3 9 9 8083 58 6 4 3871 9864", "8 4 9 4230 4 8034 9963 6703 4 9 9317 6 2 2998 91 9", "5 5820 7010 6 4 15 9 4009 8339 4 1376 3 6 6877 1 3", "3 8949 7 4664 545 5 1 5 3 462 3476 5 4697 7925 6 1", "4 5 6795 3193 424 870 2257 5 4 1 9 8 3669 6 3405 6", "93 1 4 5810 9689 7 5 3 9950 6616 2168 1 6 1 9 5348", "4890 385 1 5 9 8 9 8 566 1 3413 4 5256 5 5645 5678", "3 647 9596 3992 7096 1081 80 3 6 8 5 3 4 5 7251 21"};
    vector<string> purchases = {"13,7:5", "12,10:10", "4,15:15", "5,15:16", "5,11:21", "9,12:26", "11,6:31", "7,15:36", "8,12:37", "7,2:38", "6,0:43", "11,7:44", "3,5:49", "13,13:54", "9,7:59", "4,7:64", "9,11:69", "11,9:74", "12,13:79", "9,4:84"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 171;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> prices = {"2986 6734 4765 2431 5493 9181", "3418 1542 4528 6545 550 9813", "8138 461 1120 5286 2661 145", "8417 7149 4381 3616 5407 1898", "4064 143 6598 1692 7865 7465", "5678 7497 8822 7418 3989 7830", "4161 7335 501 7238 2093 6031", "7329 1351 2245 8603 9096 4429", "6803 8859 8031 639 2414 9029", "6829 1653 50 3306 7822 7190"};
    vector<string> purchases = {"9,5:1", "2,4:2", "5,2:7", "0,4:12", "4,2:17", "3,4:18", "8,1:23", "2,1:28", "8,1:33", "2,5:34", "8,2:35", "0,2:40", "7,1:41", "6,1:42", "3,5:47", "9,4:52", "3,0:53", "7,2:58", "8,3:63", "8,4:68", "6,0:69", "3,1:70", "7,3:71", "2,2:72", "2,3:77", "0,1:82", "7,5:87", "9,1:92", "3,2:97", "9,2:102", "7,4:103"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> prices = {"1 7 2 3 6 6 7 4 5 5 7 1 9 8 84 5 1 8773 9446 6 236", "3 6 4 1 9 3 2 7285 2 1 4 5 8 7 2 1 8 1 8290 3417 7", "7 1 2177 9 3 8 9735 3 1 4 5 1 7 5 6 3 2 6 3 8 5322", "4224 2 5 5 7 8 2089 3 9 6 9 5 4 2 8 9 3 2 4372 8 1", "8 9 2 909 3 2 2 9942 4 4 61 7 3 2132 2 3 1 8 9 4 5", "3 7 8 4 1215 3 5 7771 6 7 6 1 3 9 2 1 4197 3 2 6 7", "6 3963 9 6 4 6 5 5 5801 8 2 4 7 4008 1 5 4 9 7 6 8", "8 8 8 1 8711 5 2 5 6 2 9 1 3 2575 9 5 7 3 8 1 4656", "4 2 2 8 2 7 2 6 3455 497 7 6 99 4 9 9 8 8 2 2636 1", "1 4 5 3 5 7 6 4 5 1 4057 4 6 6282 3 4 7 7 8 1128 7", "8 2 9 5 5 3 7 4 56 3 2 9499 2617 3 3 7 4 6 3 5 829", "7 5 7 5 3 1717 9 2137 6 4 7 9 9613 2 7 3 6 4 3 5 7", "9 1 4 4 5 9 7 6 5 9516 2 7 1 2 8 9012 1 9 5 5768 2", "1 9 6 7 3 2 7916 5910 3 7 3 7 3 1 6 2 2 5 3 8102 6", "9 6 7 5 1 4 3 8 9 9 5 8355 2 9471 2088 6 4 7 1 4 1", "2 2 1 8 3 1200 5 7 5 5 3 7019 4 1 3 3 5 4 5 9 2344", "9 9 8 1 6 7818 3 7 9 4 7 7 8 3864 7941 9 7 5 6 8 1", "7 2 2 4 9 9 6 5223 8 5 2 4 5435 4 8 1 7 2174 7 8 3", "7 2 1 9 1 1 8 6 4 3282 4 5 7 5 6 4 1819 6 7 9469 8", "4 4 6 7 6856 3 5 4 2 451 5 1 6882 6 9 4 8 2 43 2 9", "7 9 61 6 1 711 6345 1 8 4 1 7 2967 9 4 4 2 6 2 6 3", "9 3707 3 6589 3 7 5 8 5 6 9 6 2 4 5 4992 6 5 2 4 8", "3 6561 9 6 7 8 3111 4 4 3 4366 8 6 7 9 3 7 9 7 5 1", "2779 2 5912 6 3 2 6 6 8 3 4 6 5 5 4 8 4 4634 1 6 2", "7 7 9 6 6 4 9 9327 4 6 6 7 9 9 5 7343 1 5011 9 3 4", "7 2 5 3031 2 5 9663 7 8 5 5 9 3 3939 5 2 3 6 9 8 2", "1 1 7 220 5 5 1 4 8 650 5 5 4 9 3 9 4 3 9730 8 329", "8794 4 3 7 2 8 3 7 7 9 6 8 3 4 7 3 9 7589 7 4 9510", "8 9 2 8 2 1 3 332 5 1 2 4709 8 3 4 74 5 3 5967 9 6", "9241 6 7120 3 6 9 3 8 9 7 6 3 2 6 8 4748 2 3 4 2 1", "5 1 2 2 7 3 3 3 4 9618 7 1200 1 9339 9 5 2 4 8 1 5", "7 2 2 4 829 83 8 7 3 6 9 9 7 6 3 1 6 5 4067 4 7552", "2370 7337 9 3 2 2 3 3332 5 6 3 6 5 9 5 2 3 1 3 1 6", "325 9637 1 5 8 5 2 6 7 2 5362 5 23 9 1 7 7 8 8 2 1", "5538 5 2 9 9 8 5 4 345 9 7 4 9 6 4494 8 3 14 5 8 5", "1729 6 8 6140 7 9 4 3 8 2 6059 3 3 7 1 2 5 4 3 6 4", "8076 4 7320 3 9 9 6 2 1 3 8 6 7 4 7 4 5 2 6 9687 4", "5 5260 7 3 9331 1 6 6 9 6 7 2 4 3293 6 1 1 1 5 7 5", "8 2 2026 9 6 9 2 3 9417 4 2 8 7 5260 5 1 3 9 4 1 3", "5 7 5233 8 6 4 2395 4 4 9 7 7 7 6 8 6028 1 1 3 4 3", "9 1 7 3 7 5 4372 2173 90 624 5 2 1 6 7 8 3 4 6 9 7"};
    vector<string> purchases = {"7,9:1", "8,7:6", "0,7:11", "35,8:12", "40,16:13", "28,13:14", "15,3:19", "35,16:24", "37,8:29", "19,7:30", "32,19:31", "40,17:36", "16,6:41", "22,19:46", "1,8:47", "1,9:48", "38,0:49", "6,20:50", "18,9:51", "12,13:56", "35,17:61", "39,9:62", "24,11:67", "9,16:72", "26,6:73", "33,10:78", "24,9:83", "14,18:84", "5,13:85", "9,3:90", "31,16:91", "4,18:92", "8,4:97", "40,9:98", "34,5:99", "6,18:104", "11,0:105", "20,7:110", "40,15:115", "24,19:116", "14,19:117", "21,5:122", "7,11:127", "26,7:132"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 318;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> prices = {"6 9 9086 4 7 3994 90 4 4 4089 7 8678 2 7517 7193 9", "1 3049 6 5 6 29 6485 2 9 8 9 7918 6 9557 3935 7473", "22 5862 8 1230 5 6662 1 1 7 9 9 4 9 8579 2831 1026", "4 3413 7793 191 9 8598 8 1 4 3244 9 7 574 2 8449 3", "2347 5852 8739 1099 7048 6 5 6 9 30 4 7 4 6538 3 5", "835 9 5 3 7 6761 3 5 7813 5890 6924 2 2 1 2146 222", "1 9 6 2518 4061 3002 9957 4 3 37 2581 2 1 2874 1 5", "6976 9 7197 9 5 6 1417 8 8 8 9 6582 60 2141 7 4857", "9 2138 8267 6 1 9 2 5 1898 5228 4 4 6 7033 6294 11", "7845 608 5228 5 5908 1268 999 4 9 9 3 4 8 9 6571 8", "5805 2 2542 2683 1 6091 3 8684 851 6 9 9 704 9 2 2", "4 8 2 9383 7 3590 8569 7 6 1678 6 6865 1 79 2 5246", "5483 6 4579 7945 8 2510 8 8031 4 4 49 7534 8 5 8 9", "4 1 1 4 2 4 9445 6987 75 3370 8009 1 2 2 1606 8911", "6133 3012 9 7 6 1 104 932 7 3 5214 9 3200 2263 8 6", "1 9621 1 5230 4856 4940 2 7 1 9063 1 8 4 6902 72 9", "8 1737 9 8 67 5700 4 8089 3 3 5346 4 3 9 2395 3719", "4 7 8 8 9 6448 99 5 8465 1902 1719 7311 9000 5 5 4", "6 6064 9906 94 7 4 4 8 1 6 1018 3518 8417 4444 5 4", "16 6 8 3 9 7 4 9 4 2580 9126 8968 9759 9069 3018 8", "333 1 239 2755 3 4 8 883 1332 892 7604 411 8 1 5 2", "7778 6 8 876 4 8 3 7 7135 8332 6997 6 5 7745 783 1", "3254 2 5 4 1 4 4 421 5989 7371 1 5235 1299 6 970 6", "9 2320 6 4 1 423 3 1 6 4141 465 1613 7107 8447 8 5", "7352 9804 2 2 1 5 1187 9555 9 4 8 1 4 4229 16 2733", "6 6548 6 6 9997 1 1 4 2 4 8 2902 5505 1977 4494 93", "4 8 5656 3501 3323 695 7 1 2121 265 2 6 8 4061 7 2", "6 2080 1373 3548 7532 6206 19 9158 7 7 4 5 1 8 8 2", "9 3 2 7 6 1190 3 6 7416 3906 6343 25 3914 5 2586 2", "1 5 2 6492 67 3 9 4 9348 4679 8591 8390 5014 7 9 7", "85 9245 1307 8 8 6 1 2 2 6573 4 1 1823 6205 7708 8"};
    vector<string> purchases = {"29,12:5", "22,5:10", "0,15:15", "9,1:16", "13,4:21", "14,15:26", "9,0:27", "8,8:28", "9,3:29", "26,0:34", "24,5:39", "14,13:44", "2,13:45", "4,3:46", "10,2:47", "7,1:48", "5,9:49", "2,7:50", "22,4:55", "18,8:60", "26,0:61", "18,9:66", "19,14:71", "8,1:76"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> prices = {"2 2 2 5 3169 9 695 5 5 2 4 3030 2 2 2 7 7 5318 2 1", "2 5 9 7 8638 7 8 2 7 9 7 8 3 3422 5 9 9 194 4 6166", "9 2 5 2 2 6238 4 5 7 6 8387 323 770 7 7 83 5 9 1 4", "1 1 1 9 1 1 1 1 5255 6 5 1 7 2631 139 7534 1 6 3 9", "3 8 3 5 9512 457 2 8452 5 3 6 2601 2 2 9 5 6 4 8 9", "5 5 2 2 8 9 7 4 1 4 9 9 1 9772 6943 7171 995 5 2 1", "5415 4 1 9 3 2805 4 3 3 6 2 301 6 4 2 3 9 6 5 7516", "5 6406 4 2 5 2 9 4 9 8 8 8 4 4 1 1681 9933 6 329 5", "9 9 5 1 8 9 1 4 4 3 3865 9 3242 9 5 235 5 5386 3 5", "9 1 1361 6 3 9 4 9476 3 1 1 1 8 3 7992 890 9 8 6 6", "733 290 4 43 5 2 1 9 7 5 7 2 7 2 9 7 4236 6139 8 7", "5 5 7 742 4 7 3 8 9 9 8 8 1971 6 5 1 6734 7324 8 6", "1 1055 9 2 4 6 5 582 2 6410 8 5 8 4 3 54 800 6 3 4", "1 6 8 7 1 9 9 6955 1 8 7 8 7636 2 8707 1 473 7 5 4", "2 792 9 4 1 6 5 2 6 8 8 1491 5145 8 3 1 4 8 6912 9", "7502 6 293 5 5 8 9 2 8 4 6375 8 2028 5 7 4 9 7 9 9", "2 4 3752 2 8 8 7 9 6904 1 5 184 9 6 1 1 2 4 5489 9", "2319 3 8 4 6970 9 1 7 1 1 4 7 4 6 995 6 5 5444 7 2", "9 7621 6 4 6 7 7 570 5 6 2 9 9 3 6 2 3 3 4357 3115", "3 5 3 1 6 3 8195 6 4 5317 8 7 3 992 4 6 1 8 5 8353", "8539 1824 8 2 6 1 7 2 4 4 5 2 5 879 2 1 4 5419 1 2", "3 3 3 6 3 9 831 6 5 5314 4 2 5527 9421 4 7 7 7 4 4", "175 3 8 3967 13 1 5 9 3 6 157 7 1 2 2336 5 4 9 8 8", "7 4 6103 565 8 2 7 8 9 4504 2977 8 2 6 1 6 5 1 7 2", "7 9 2 6364 8 1 1 9 4 1 3859 5 1 453 9996 4 9 2 1 8", "1375 815 6 6 3 9 3 5652 3 6 3 6 2 7748 4 2 7 1 4 3", "8 1 1 9 4549 8 2 5 6139 8 9 5 7 2567 1 4 7 8 200 7", "2 8 2244 4 666 7 5 7 2891 6 4 8 6 9165 1 3 3 3 9 6", "4 5110 891 5779 1 6 8 7 6 9 8 2 5 8 3 4 7062 9 4 8", "4 6634 5 6 7 3 6265 2 3 7 4 833 4 9634 2 9 8 8 8 8", "8 2 8 7 3 4 2 8149 1 8 5 4 576 6 4 8 6 5 7618 1268", "5 1 350 5 4 9 3 6 2 5 3 4 4567 7422 7 7 2 2 8001 8", "5 551 9608 8203 1 3 2 4 2 5 7 1 1 3 7 1 9 5 7498 7", "9 5361 3 4 3 2 7 6 5 780 8 7 2 6 9 2 1 3548 3 6982"};
    vector<string> purchases = {"1,16:1", "31,17:2", "28,7:7", "8,17:8", "13,14:9", "19,11:10", "11,17:15", "15,8:16", "20,2:21", "8,12:22", "25,13:27", "23,9:32", "22,12:37", "28,0:38", "4,7:39", "33,1:40", "11,13:45", "12,8:46", "5,18:47", "15,19:52", "10,15:53", "27,8:58", "30,7:59", "23,1:64", "7,17:69", "2,0:74", "14,1:75", "0,14:80", "27,1:85", "32,19:86", "32,7:87", "0,18:92", "31,6:93", "27,2:98", "2,9:99", "13,17:104"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 273;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> prices = {"392 1496 5 9183 5835 4699 2608 5653 7755 2178 6221", "5801 8035 8270 4668 7140 5127 7975 8211 799 4 8102", "5647 5729 7623 1375 1 125 1335 6310 3173 7755 4906", "4326 7922 5596 1544 4962 6948 453 8081 5309 8 1497", "1563 8403 9724 6160 7153 3135 7353 5 7592 429 7965", "1341 2474 1143 922 6182 4160 3039 2396 8236 5 3347", "2023 6427 9547 7995 1699 557 9 8664 9546 9621 5999", "756 2640 6062 6104 7935 2 4676 3145 2831 7322 4203", "2963 9 1106 4208 1800 5052 5828 2644 4936 4451 496", "518 5294 177 8636 615 3549 8264 4338 7779 958 904", "6596 8374 6386 798 216 2792 5581 2855 1750 902 132", "7208 7191 495 881 4941 911 502 9628 2264 2000 3126", "9972 8719 2449 242 7251 2815 9 7894 4526 6077 9234", "938 6047 1788 1169 8226 2300 4 9421 1919 1012 7872", "4210 3663 8 2926 4226 3352 2808 5522 5176 9064 777", "2655 8022 649 7533 146 6273 4195 7572 4412 3918 45", "20 1644 9930 59 6828 8729 6329 5194 7662 6351 1972", "4072 8348 2856 2827 9 8402 3443 6627 676 2894 3859", "4551 1909 3961 8201 821 8767 494 9068 68 3219 9724", "862 7738 9984 6750 6500 3924 77 9178 7046 490 8985", "427 4279 1 4003 9981 2803 2988 4278 2456 2160 8101", "1989 7878 416 9471 5336 8287 436 4202 78 7608 3388", "8514 59 1990 8219 96 2598 715 2526 7149 7617 7665", "1197 7568 6157 4017 5992 2441 6185 752 1378 6241 5", "5808 7 2357 8917 3626 2601 6911 1415 9569 297 6012", "4894 7663 6519 7558 6431 4441 1963 92 8496 13 6720", "1867 786 4417 3499 2655 6303 3 4564 2596 1824 6260", "1249 9391 275 3206 6649 4211 4408 7484 9 8567 9224", "5938 6571 353 6 3162 7916 1294 8382 7037 4290 2301", "8922 30 5450 133 5518 497 5702 6091 4938 5854 8168", "4010 4383 5572 2 2349 8289 975 2725 2997 8864 4269", "9521 1462 5708 2670 9262 2 6169 3546 7171 490 7724", "5097 3714 7892 772 9691 1 9234 6970 7364 8410 7607", "4419 9172 8753 6864 2723 4385 1317 2670 5 6115 663", "4179 4901 9291 1598 4 7757 5473 7330 331 6144 8642", "4257 1577 7455 793 9595 8521 1161 3177 961 2 7885", "5339 5449 2613 4132 8762 5512 5817 7784 715 7 5023", "4038 889 5965 2027 9 1166 8041 5476 1597 2345 1527", "5174 6153 9528 9465 8680 7591 1372 991 8644 7 5456", "3599 8262 4252 5973 2191 7067 2513 4 3006 361 2297", "1239 5365 8414 313 5584 7 6113 8382 1750 8656 6890", "8 3056 691 9819 9814 2817 1669 9650 9586 4921 6082", "8744 7891 2325 27 64 9581 9494 2101 3850 4524 7217", "9388 4135 4658 8773 2707 8360 3101 3542 4323 37 99", "918 2827 8072 6111 378 4037 5161 708 897 6161 7241"};
    vector<string> purchases = {"7,6:5", "31,5:10", "40,9:11", "10,2:16", "19,4:17", "5,0:18", "33,4:19", "23,4:20", "41,9:21", "33,4:26", "23,8:27", "37,8:28", "37,5:29", "33,8:34", "11,5:35", "16,5:40", "33,1:45", "21,9:46", "43,8:47", "20,4:52", "38,10:53", "38,4:54"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> prices = {"2553 6 2 6 7 2 7 8 5 8 6 2 5 8 7 7 7 9 8 4 6 2 3 5", "3 7 6 8 8 7 5 8 8 3 7 4 1 1 7 5 1488 2 7 1 9 8 8 7", "4 9 1 3 5 2 2 5 6 8 3 7 3 6 2 3 2 8 18 4 8 9 7 292", "8 6 9 8 9 9 9 6 4 5 6 9 8 2 2 1 7 3755 9 9 1 6 3 3", "3 7 4 4 2 9 1 6412 6 2 7 1 9 1 2 8 6 3 7 4 9 3 3 2", "8 4 4 1 9 8 2 8 8 7 8 3 6 5 6 8 9 4 4 1 1577 5 3 7", "5 5 6 6 7 8 9 3 7 4 2 2 7 7 5 8 1 6 1 6 6 5797 7 2", "7 5 9 3 8 6 4 9 4 6775 4 8 5 6 6 1 4 5 4 7 2 2 8 2", "6 4 3 6 8 1 7 7 3 6 9 3 1 1 9 3 3829 2 6 6 6 1 3 5", "5 3 7 9 1 8 4 6 3 5 9 1 7 4 3 5 3 4 8 7 1 8 4 3253"};
    vector<string> purchases = {"1,7:1", "8,9:2", "9,5:7", "7,0:12", "0,10:17", "0,22:18", "9,3:19", "4,16:24", "9,8:29", "6,19:30", "7,15:35", "7,1:40", "2,6:41", "3,21:46", "4,10:47", "1,1:48", "7,10:49", "0,9:50", "9,6:55", "6,23:60", "6,4:61", "7,5:62", "7,6:67", "2,15:68", "0,21:73", "3,0:74", "3,3:79", "6,2:84", "3,11:89", "2,7:94", "8,21:99", "0,13:100", "6,7:101", "2,14:102", "0,6:103", "3,7:104", "0,23:109", "7,2:110", "9,7:115"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 339;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> prices = {"6998 3034 3524 1915 5796 2184", "2654 2873 9503 8340 7027 8490", "8492 183 852 8119 1971 186", "7950 9479 1887 241 6525 3851", "7814 3362 7347 1951 6086 5687", "8332 2174 1048 4416 5892 2009", "9101 8419 2572 3024 9949 7801", "8183 3845 9617 2539 2427 4343", "2728 4773 718 2577 7046 3008", "8723 9277 1261 2996 8541 6192", "2084 9012 9792 4615 2524 9686", "8344 3910 7214 3150 6856 2091", "2371 2901 1771 1367 4019 5789", "3565 8066 1018 2807 1656 278", "9190 1532 4841 6361 2765 8119", "4566 803 1954 1950 2618 3525", "856 5592 9161 9983 4391 3536", "6029 7298 878 8122 231 6898", "5394 6243 4084 8249 9150 7209", "5228 7590 9686 7788 4101 9083", "3055 8553 5504 2313 3882 6427", "701 2227 2332 7135 3362 7440", "320 5872 2067 2761 8878 5696", "4309 9033 6831 3365 2694 8770", "2891 1345 8853 5836 9572 2916", "4859 2692 2790 7689 9899 4867", "5349 2227 6113 9034 6123 4679", "6698 4925 4055 7616 9990 9239", "5857 438 7 4695 4885 6592", "8888 1128 2888 3615 8457 1268", "1644 2334 4974 8561 6810 5406", "6731 1025 9443 3976 9390 8158", "236 6477 2501 7742 7631 3473", "1935 7280 4551 1347 3678 7187", "5855 3376 7918 2319 2535 8496", "9201 3615 1315 67 2776 7303", "8780 7625 4991 1205 3335 2582", "7280 8889 3931 2919 134 9698", "6622 9505 7104 9515 1096 3356", "7143 7692 8536 586 6238 6563", "5397 4564 5652 8232 1151 4242", "1389 6622 5894 2529 1147 7121", "8567 9115 8117 8968 687 4305"};
    vector<string> purchases = {"30,3:5"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> prices = {"8039 2240 7246 9996 279 2032", "8237 7203 966 9153 212 4037", "9144 8370 8735 4536 11 4782", "7632 3773 3572 753 3807 5070", "4334 1729 4885 598 3383 5732", "2016 9613 2631 2419 1976 7610", "7786 3903 6241 3265 9825 8838", "7487 3155 2324 2817 9559 5325", "6972 6175 5263 4146 1077 2839", "4286 7558 78 238 7604 4290", "6435 5080 3574 1920 1989 9227", "9070 3429 8904 6610 7123 4446", "8663 7822 9579 6664 7583 6443", "3571 5613 9058 5332 2228 773", "6915 5227 2359 329 9942 8871", "2374 2944 762 5025 5429 3424", "3241 9663 1499 7183 3304 6959", "2287 8321 1159 7131 7711 174", "2147 6686 5782 4157 3116 1354", "5302 9082 2318 9606 9321 3554", "635 3822 8304 7302 9689 6504", "7514 2020 4760 3181 5236 9738", "7037 2384 9466 6216 4273 1718", "603 4043 7471 7470 5260 1211", "5112 9410 5317 4606 4825 6168", "4512 5592 387 6075 6526 1228", "2655 9136 8737 6369 5122 9477", "3432 1104 256 3520 7188 4668", "4299 8182 6066 175 7975 6373", "5125 7035 8298 7465 4700 2261", "5769 3287 4904 9572 9275 1656", "8111 7621 5767 5803 4320 7731", "121 2628 4623 4891 7591 4854", "4415 7689 1673 7272 1788 8646"};
    vector<string> purchases = {"8,1:1", "29,0:6", "33,0:11", "15,5:16", "32,3:21", "19,2:26", "16,1:31", "7,1:32", "9,0:37", "18,0:38", "31,0:43", "8,3:44", "28,4:45", "16,3:50"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> prices = {"7998 3890 9119 1229 7723 6835 7789", "45 7922 5724 4385 5611 9786 5571", "1160 3656 2381 1597 8813 8316 9114", "6914 1078 7074 2222 3533 3802 5416", "8146 4604 8365 999 3371 3637 649", "3272 3010 2925 5832 9544 2622 9441", "9431 2192 5227 8044 7808 4632 3427", "4099 2045 4153 9518 1549 3046 1602", "4893 2885 2919 1909 4489 5890 9651", "8259 2126 1477 9056 586 5036 4414", "4127 6830 3399 8752 8104 8522 5906", "4921 5721 6889 6757 1196 1672 3470", "234 2364 982 5435 8677 31 8632", "604 8899 4557 2269 5838 1015 7983", "9355 3604 6526 301 3541 9450 6171", "9758 4688 2608 4550 1259 8328 2815", "4261 5222 3115 8772 6222 8709 9473", "3277 9736 2201 9451 2863 6063 2207", "7132 7891 9445 1158 8672 9419 6710", "9181 9235 3903 5296 760 2740 3177", "8086 1189 2987 8520 1282 7902 8414", "4971 1955 567 9257 2747 433 5879", "8733 3972 5257 8150 4245 1515 8367", "1448 6454 4794 5883 3876 6420 207", "6456 5225 4780 4991 3956 7544 8335", "8688 4094 9098 111 3734 464 2167", "8466 7148 7660 7693 6181 3212 3959", "3693 4591 1388 3925 8283 5142 3941", "953 5517 9048 4551 1691 1926 1662", "9407 9668 1838 6448 5427 7085 7103", "5948 3154 3338 4428 59 725 5982", "9738 2974 3934 5634 3526 1768 8997", "4482 738 7081 1087 1334 7988 4141", "3837 7468 3369 3959 6383 4518 3069", "4546 2694 6742 6251 494 3211 2755", "4673 9770 3688 6794 2723 9561 2249", "197 4915 9292 356 6162 6952 4729", "3072 1069 9136 5052 3536 9636 3888", "7288 4120 655 8190 4935 7521 5930", "6653 8524 7711 6035 420 555 8783", "1721 9982 3681 2205 5164 5388 2850", "2378 7188 6438 3160 9141 7861 2699", "3508 6796 8821 2989 4856 4723 7490", "8682 9056 7739 9551 6984 100 7923", "6803 2387 5432 1353 1292 9110 2037", "8484 8917 1706 4777 9583 3233 464", "45 4286 8240 4320 8708 5539 9068", "3773 7478 5736 3074 8457 5423 3470", "3970 9950 3323 3800 4367 5260 3662", "9236 3090 9973 1070 413 8282 2815"};
    vector<string> purchases = {"26,6:5", "13,6:10", "35,0:15", "13,4:16", "25,5:21", "22,0:22", "43,2:23", "15,5:24", "15,2:29", "4,6:34", "2,3:35", "38,0:36", "27,5:37", "0,5:42", "44,3:47", "27,2:52", "29,6:57", "0,2:58", "22,3:63", "42,3:68", "9,3:73", "38,2:78", "42,2:79", "29,1:80", "20,1:81", "1,0:82", "37,3:87", "32,0:88", "48,0:89", "46,5:94", "37,4:99", "31,1:100", "13,2:101", "23,4:106", "23,3:111", "37,3:116", "8,2:117", "14,6:122", "14,1:123", "36,6:128"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> prices = {"1 5 3 76 6 7 7 5 7260 6 6 3 5 7 2 8 2 6 8 7336 5 9", "7 4 8 5 2 1 4 1 7 4 8 7 89 2848 5 4 7 9 4 1 1 1815", "1 4 8 7 26 1914 3 5 8 5 5 2 3 3 2003 7 8 2 3 8 9 8", "1 8 5853 5 4 3 96 2 6 9 7 3 1 8 5 3 3 9 3 1 3349 5", "7 1 6 7 54 5 1 4 5556 9 3916 2 6 3 1 2 7 7 4 4 5 4", "1 4 8 2 7 3 9 83 3 8 4 6 7 6 2 2 3850 1029 5 8 2 8", "9 7 4536 8 1 4 6 6 8 9 5 1 1 8 3 6175 8 37 9 1 8 7", "7 7 7 7 5 6 2 4 2485 31 8 4 6 2 9 4840 9 1 1 2 8 2", "4575 3 4 9 39 4 5 4 3 2378 4 7 4 5 1 2 2 2 5 8 8 7", "8 8 9 1 9 5 6 8 7151 7 2 6 3 2 8 6 9219 2 60 8 6 2", "2 5 3 6 7 3 8 3 8 5 7 9801 5846 6 3 7 7 5 5 6 3 14", "2 1 2 8 6 1 7 9 2658 28 2 3 8 4 2 9 4129 1 9 1 4 6", "7 4 1 6 9601 230 8 9 8 5 1 4 2 7 4 523 9 7 5 2 4 2", "85 2 5 5 5 8 3822 9562 4 9 1 1 8 9 9 7 2 9 6 4 7 5", "5 2048 6 3866 9 27 7 6 9 4 5 2 5 7 9 4 6 9 6 4 4 1", "4 3 9 6 6161 8042 2 4 5 8 18 7 7 9 1 7 9 2 4 4 9 4", "6 2 2 7 6 8 8 1 8 8 3 4 3 2 640 9431 4 2 1 6 2 697", "9 7 9 3 6972 3827 3 8 3 8 5 3 6 5 9 3 40 1 8 2 9 5", "6 1 53 3014 1 1 7 7 8 5 7 9 4 9 4 7 8911 4 3 8 7 2", "7 9 3554 8 1 3 4 6 6 7 9971 7 6 5 1 5 1 4 8 1 2 53", "5 3 7 5 5 4 3 1 63 9900 2 4 4 5 4 7 3 8 4750 8 3 4", "3 1 7 4 3 9 9 1 5 6484 2 2 9 1 5 7 73 5657 8 6 2 7", "3 2 7 8 6 6 5 6 3372 5 22 7 3 1 1708 3 5 4 5 1 9 9", "6 6 9 2 4106 4 1 5 3 4453 24 2 3 8 5 4 9 8 2 9 7 5", "7 1 1 8 88 3 1898 4 3 3 2 3 1 7 9 6 3 4 3 7863 7 5", "4 8 7 7 7 9 7182 9 8 7 2 1 7 9 4 5261 9 83 9 2 8 1", "3 6 8 3 7 7 1 4 3 5 3 9 16 5988 5642 4 2 1 1 8 9 9", "8 7 8 9 5 1 5022 8 6149 57 8 2 1 7 3 5 4 2 9 9 8 1"};
    vector<string> purchases = {"24,16:5", "2,4:6", "17,1:11", "21,8:16", "12,13:17", "3,19:22", "20,14:27", "19,11:28", "3,21:29", "10,14:34", "2,15:39", "18,6:44", "9,19:45", "26,11:46", "3,19:47", "22,20:48", "20,3:53", "20,21:54", "20,17:59", "4,18:64", "3,5:65"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> prices = {"7868 90 2203 9137 2 943 3 1436 6150 3201 8140 4046", "9209 2268 7 6995 1691 9890 70 1332 3216 5 763 9515", "2336 549 56 5430 2 6 3107 5969 4080 2026 2022 4739", "1 9450 5394 5886 8838 1291 7600 6 3215 3 4318 2290", "5376 7 2689 4928 4414 8133 622 5036 9038 6705 69 1", "1 4630 763 3590 754 3097 832 2288 6586 6787 683 45", "4638 36 7896 2857 7756 4 595 7332 7 5953 1036 1143", "343 5380 3073 2370 8672 8 9559 6252 32 2901 4127 7", "4744 2979 2206 9970 2 7 7 1020 1529 8689 2944 4305", "8 1 7308 779 7975 1794 1478 4519 6480 1398 7446 20", "1347 763 8 9252 7 8421 4551 6698 6774 68 1242 4041", "443 9 5497 1 639 9005 6967 3856 6132 9071 874 4162", "6641 2086 9750 1872 1665 1375 5989 6 9 8 8107 8041", "165 9632 409 3947 3763 8 1720 5200 2 518 1527 2822", "3 1308 2269 6117 404 5 6829 2276 2383 7997 7924 40", "3 9119 332 1784 6560 4879 6 4071 39 8902 4671 5826", "1256 8844 6 1119 9 4167 8477 2233 5524 9614 6 2809", "8 6986 9052 849 937 8630 9342 1120 713 4005 5155 4", "6143 6319 3 2776 7137 3 7944 9713 6602 7597 4809 9", "1597 4432 3644 26 119 7022 3 7 1232 3256 4904 3737", "7 7 942 4915 2774 7327 4913 7728 64 3180 4254 6783", "1204 2259 3955 8980 853 4445 48 3675 6278 6426 6 6", "5080 5256 4662 6 96 7384 7893 5357 822 4 6422 9471", "39 1820 8967 5368 788 7 8 6979 8438 8443 5656 1518", "6 9451 9848 3310 2606 5981 1546 2026 7810 4697 7 1", "6 7506 9190 1812 4 5098 84 9217 3212 9649 1973 140", "9 5744 4 82 2814 6847 1579 1332 424 9769 6962 9982", "1 6 7 4823 5831 9126 5435 3254 2812 4994 6864 2209", "2546 6711 4496 1407 9269 4284 7012 87 8 6 343 9138", "6 4744 6327 3546 1147 2867 38 286 4 6234 6294 4930", "5107 5855 9013 4789 9064 773 9174 1243 1 4505 52 9", "3650 3916 2647 3258 9569 67 9754 4560 1 741 7 6289", "4646 3067 5597 407 7340 992 2 1600 399 4889 6 9231", "5241 3707 7378 6 1558 3652 1533 4 5101 5180 1 2033", "3709 7 8057 9691 2234 2165 2397 5445 6445 80 191 8", "981 5685 1362 3 7 2160 9862 1995 508 6198 9266 294", "9378 7600 1176 9275 2498 249 8542 34 4 5 7444 5043", "1 768 2560 198 7428 2940 9129 4563 595 4 5543 8175", "4048 6831 3963 1317 4 4 8283 2 3134 2878 7393 1464", "86 3617 3479 7779 9258 5455 9777 6 878 2 7829 3583"};
    vector<string> purchases = {"12,10:1", "4,8:6", "8,3:11", "13,5:16", "7,4:17", "8,11:22", "1,1:27"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> prices = {"923 6 8 7 3 2 7868 3 8316 5 65 7645 4143 5530 6192", "6 2 565 6 872 8513 5031 5901 8 8 8425 9 3989 7 562", "2871 6 3990 4579 4 6 4707 8852 5 5 3 436 68 7 8991", "5 257 4 4219 5531 9 8663 5 3 6880 4044 23 7 1 3113", "3500 1756 9 9 8 8 4525 6 1 7809 5206 6 2 4579 5277", "5 9 5010 5578 5 9790 6469 1 1 5 3628 6259 4 6 5204", "4 109 3933 6470 3584 34 2 3576 5 8787 4 1 9570 4 8", "2 7 4881 731 8270 8850 22 4296 5 2 1586 6 5 4 9058", "8323 4 99 2 6 1 3 4 6595 1573 5 581 6570 8443 6835", "6 9 8875 8042 9 6195 488 9679 8 9850 8441 6 1 3 72", "1 8024 3 7 3 7703 352 2 72 7484 6904 4 3986 3413 5"};
    vector<string> purchases = {"3,10:5", "7,10:10"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> prices = {"9 6 8 5 61 2 2 7 3 1 6 4 9 7 4 8 3 7 5 3 3 3 6 8 6", "2 3 9 7 3 8 5 5 3 1 7 1 8 9 3 5 5 7 51 6 2 1 8 3 4", "2 1 1 4 38 5 8 2 5 5 8 7 3 5 1 1 6 8 6 3 5 7 2 2 6", "8 8 3 2 4 12 3 6 3 7 4 1 4 5 2 6 9 7 1 2 1 8 4 3 5", "3 5 7 5 8 1 7 7 43 4 7 6 2 3 6 3 1 3 4 3 5 2 2 7 8", "5 9 5 9 7 1 7 7 8 3 1 2 5 3 1 6 8 78 3 1 4 3 7 2 9", "9 4 1 7 6 9 4 91 5 9 6 5 1 9 4 7 7 6 9 4 2 3 6 6 6", "8 2 3 6 68 8 9 7 9 9 9 3 8 7 1 9 2 7 3 7 8 8 1 5 3", "1 5 3 1 2 2 3 9 8 1 7 7 4 9 1 6 5 50 4 8 8 7 5 8 7", "8 3 4 5 7 6 8 82 9 1 4 6 2 6 5 4 5 2 7 9 3 3 9 3 5", "9 7 5 5 5 7 9 3 2 5 7 1 4 8 60 7 4 4 2 4 8 5 9 6 7", "1 6 7 1 7 6 9 5 3 4 7 4 3 86 2 4 6 4 9 2 3 3 5 3 9", "4 1 8 2 5 2 2 3 7 2 5 6 9 9 9 1 8 4 95 1 8 9 7 5 4", "4 3 7 6 5 9 5 1 9 6 3 2 4 7 7 8 5 26 7 5 7 5 1 3 9", "1 1 1 4 1 4 8 9 9 1 3 2 5 2 2 50 6 2 2 7 6 8 2 5 5", "4 6 3 7 9 7 7 2 3 5 1 8 3 2 3 7 6 31 5 4 7 1 6 4 8", "7 1 5 3 7 1 4 7 2 4 6 5 9 2 1 2 1 5 16 6 4 8 6 7 7", "1 7 6 9 9 5 1 9 2 7 9 1 92 4 2 6 6 5 5 1 4 6 1 4 8", "3 6 1 8 5 3 1 2 6 8 4 77 6 9 5 9 7 2 3 2 1 8 6 4 9", "3 3 9 3 4 4 9 2 3 4 3 3 5 3 1 9 4 4 8 5 5 1 3 24 2", "59 6 3 8 6 8 7 5 6 9 8 9 8 4 3 1 7 9 4 4 8 5 8 6 8", "3 8 2 4 6 6 9 8 4 8 9 3 6 6 3 84 7 3 9 7 8 4 6 8 1", "1 5 2 4 6 5 7 9 4 4 5 9 39 3 5 5 1 4 6 1 1 5 5 3 1", "5 8 27 1 4 4 8 2 5 7 6 5 3 7 9 2 3 8 7 9 8 6 4 7 9", "7 1 6 9 6 9 4 4 2 3 2 4 1 8 1 7 6 4 6 6 9 9 9 82 6", "1 6 2 8 9 9 1 1 5 5 9 6 3 5 1 2 1 2 33 2 9 6 5 9 4", "6 4 1 9 8 6 1 9 7 7 3 4 8 3 1 8 6 65 9 4 9 7 5 8 3", "6 27 9 8 4 2 6 3 4 1 6 6 3 3 1 8 9 1 7 2 8 5 9 1 8", "4 5 3 3 31 2 8 7 5 3 6 7 6 8 9 7 3 5 9 5 6 2 2 7 6", "3 8 82 2 6 2 7 8 9 7 4 4 1 7 1 4 7 7 8 7 9 9 5 1 2", "7 9 6 95 1 7 2 8 8 5 7 6 4 5 5 2 3 2 3 7 2 2 6 4 7", "8 5 3 3 9 4 3 4 9 5 4 9 91 9 4 2 5 3 9 7 9 8 8 1 1", "7 6 4 3 2 9 5 8 2 8 9 4 6 1 29 4 2 4 3 5 2 6 7 3 8", "8 9 4 8 5 4 58 6 2 4 7 3 2 6 7 4 6 9 3 9 8 7 5 5 6", "8 8 3 8 4 3 88 7 6 2 2 2 7 4 5 4 9 4 3 5 5 4 9 1 8", "7 3 8 7 3 6 6 1 3 8 4 8 4 9 7 3 9 1 90 7 2 5 1 8 2", "5 9 9 9 2 3 5 3 8 6 6 61 4 3 9 2 7 4 7 5 7 1 3 6 8", "3 2 5 8 6 4 2 3 1 7 7 9 5 5 4 5 1 3 3 6 9 6 8 1 73", "3 3 1 8 8 3 8 3 3 3 6 20 5 6 9 7 5 5 6 2 4 4 1 2 4", "7 2 2 2 4 3 7 1 9 6 6 4 3 7 2 54 9 2 3 1 4 7 8 7 5", "2 9 3 5 9 9 4 3 1 5 4 8 5 6 1 4 8 5 1 4 7 3 8 88 8"};
    vector<string> purchases = {"6,18:1", "11,23:6", "10,18:7", "17,8:8", "35,7:9", "18,8:10", "26,17:11", "35,8:12", "30,16:17", "7,8:18", "7,13:23", "37,4:28", "12,8:33", "30,16:34", "36,15:35", "1,0:36", "33,24:37", "2,18:42", "5,18:43", "30,23:48", "19,13:49", "13,3:54", "10,3:55"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> prices = {"9 3 6 5 7 214 1 2 5 2 6 349 2 8 7 9 1 4 5 7 4 7880", "2588 9 9 6 6 5 5 46 8 8 2 7 7 3 3172 8 3 3 8 3 7 5", "44 9 6 4 1 4 1105 6 2 8 2 4 4 5 7 9278 3 8 3 5 8 6", "3461 9 2 3 8 8 6 7 4 5617 4 8 9 1 6 1 1 9 3 17 4 7", "1535 7 3 5 6 9 2 6 7 22 1 3 4 5 9 3 5 2 7 3 1566 6", "6 4 11 6 3 5 2 8 3 4 8 8 7 1 9833 6192 8 8 5 5 5 2", "9 8856 9 6 3 1 9 6364 2 2 8 3 3 4 3 9 2 7 6 2 5 92", "9 8 6 6 4 9 7 9 8 9 6 733 1404 2 4 4 7 4 6 843 6 1", "7 5683 6 7 6 6 9 1 6 6 4 8 1 9 3 4 3 4 6 58 2 2147", "3 7 1 6 8 4 7 2 9943 5 3 7 9023 8 5 6 1 8 3 1 45 7", "6 64 8918 7 4 6 7 1 5 7 9 3 7 9 5 4768 3 4 4 8 2 8", "3 4 40 1 5 1 7 4 9 3494 8 2710 5 1 8 2 3 1 1 9 7 5", "9 4 1568 1 3 5 8 9 2 1 4 6 4 1 2265 8 5 4 3 4 61 1", "3 8 4 9980 6 9 7 1 9 6105 76 9 3 6 3 1 8 2 7 4 6 7", "3 8 8 1 6 6 3 8 7 7 3 1 1 3 2 730 5 2 3 1 7872 635", "8 5 7 6 3253 5 1 4 77 9 3 8 6899 3 2 7 6 2 9 3 8 4", "1406 2 1 4 4 9 6 7 70 3 1 3 4 6 9 7 9064 5 2 5 9 1", "4 2 1 9 40 9 8 5 2 8 3546 8 2 2 1 2 8 6 3 2 7705 6", "5 1 3 2 3 7 6 33 3 1 6 5 2 7 4 3141 4 3 8 5 5151 1", "1342 4 5 9 1 37 3 6 1 5 2 6 4 8 4 3 2 6657 7 9 2 1", "9 7 629 4 9681 8 5 2 4 8 5 6 4 7 2 5 4 1 2 4 614 6", "1 50 1 8 1061 5530 4 7 4 7 3 4 4 1 3 6 1 8 5 3 2 2", "4 6 5 7 4150 5 7 5 4 7 1 6 9605 6 1 1 4 6 4 2 7 89", "9187 7 9 4 2 6 1 4 4 2 9 7 7 7 3 5 8923 4 29 6 6 1", "4 3 7 4 693 4355 4 3 2 6 1 563 9 6 4 5 4 5 6 6 9 2", "1 5 4 97 850 5 9 7 7 9 3 98 6 8 2 8 1636 1 2 8 5 7", "2 2 2 8 5 2 6097 32 1 8 9 4 8 6001 8 6 1 7 8 6 2 6", "3275 5 9 13 5 6 7 8 6 6 9 5 5 8 3 2 4970 1 1 9 2 5", "2 9 6 25 8069 3 5085 9 4 9 8 3 8 6 7 2 9 5 5 6 1 5", "8 68 4 1662 1 1 1 6 7 7 2 1 2308 1 8 3 8 5 1 4 3 5", "6 9 9 5 3 3 4 1 2 7 2 9 3952 9 6 2 8 35 6 1 8966 9", "3 1 4 5 9 2 2 9 87 8 6 6 7 6 3 7 7 5 3383 4360 8 8", "2 6 8848 8995 7 8 4 3 1 9 1 4 7 4 3 2 81 6 7 2 4 6", "8 90 4 6827 1 7 2 2 4 5719 4 3 3 8 4 7 4 1 7 2 4 8", "69 8 9839 8 8 1 4 8 9 8 6 1 6 3 3 1 8 6093 3 3 9 6", "8 1 5 8 8167 6 5 9 62 4 2 9 2524 3 4 7 7 2 8 3 3 9", "2 5 2808 8 7 74 6 2 2 6 6 6 4 3 6 9669 9 2 9 8 3 5", "1 8 90 9 5 5 3 5 6688 9 9841 1 3 6 1 6 3 1 7 5 2 3", "9 6 3 4 2 7 5 3 3062 2886 3 8 3 91 2 7 7 4 2 5 3 2", "6 1896 9 9 3 1 4 2 4 9 7 8 8 1 6 7 91 2 1 1 5855 9", "2 4 2 6 5623 5 1 2 2 7691 6 4 79 9 2 3 9 8 4 1 4 5", "6 1 7 4 7 9595 3 9 1 3 3 9 2 3 8 8 9 9 5 6013 9 10", "7 2 8 4 3 6039 1 3 8 3 1 38 4 3104 4 3 9 1 9 8 2 9"};
    vector<string> purchases = {"40,19:1", "39,0:6", "22,13:11", "6,10:16", "9,9:17", "8,21:22", "29,15:23", "19,16:24", "2,3:29", "17,5:34", "27,5:35", "6,12:36", "18,10:41", "10,12:42", "29,13:47", "28,16:48", "34,17:53", "24,18:54", "4,17:55", "6,1:60", "18,3:61", "9,13:62", "35,9:63", "37,18:68", "11,17:73", "0,0:78", "10,13:83", "25,6:88", "26,10:93", "37,6:98", "26,4:99", "19,10:100", "7,16:101", "10,21:106", "1,6:107", "20,7:108", "7,14:113", "28,14:114", "2,18:115", "18,16:116", "12,12:121", "7,9:126"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 348;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> prices = {"3107 8876 7275 3006 2001 9907 9922 7360 5 5 5 6470", "6508 54 8121 4710 5 9532 8 272 8072 5624 6834 9430", "3 4 2 4346 7264 9235 6656 6291 9664 8453 9866 8546", "3 3414 8 5868 1500 3954 9805 1985 1215 3433 4 9634", "3 7301 5844 42 6024 322 1138 8233 2013 7122 3166 1", "2970 4 3 9931 5387 3678 9585 2914 9033 926 52 5283", "6142 9 5030 8996 1379 8092 8300 7747 8124 5964 5 9", "5 3 8401 7091 9148 5195 8714 3281 5006 5041 7539 9", "1043 7 9884 2904 7844 8132 6017 472 9594 71 7352 9", "3506 3 7979 1171 5 5 5601 1874 1763 6221 4368 1621", "2 7358 6330 1 3875 3459 7970 3201 7224 6874 4830 2", "579 5450 5146 1 7712 5384 3281 8505 6532 7713 65 8", "7744 9 2624 738 902 4468 4323 690 3076 519 4252 67", "9 3 8108 5543 6238 1111 5722 3236 9413 6 4786 3276", "1 1 6 4250 5521 3253 1368 2211 1903 3727 2757 9241", "9064 6667 972 193 9040 530 3 3540 9 5717 1522 6164", "5 4500 4421 1 1 4031 1093 1423 3443 9445 6982 3767", "5 3 3 4898 5892 8979 8016 3593 9827 3206 6306 4020", "1771 9451 6122 707 5 5 3862 828 4000 5339 7605 740", "3918 4078 2887 1645 5331 3986 151 171 5 1 3504 933", "3301 6 9068 748 5077 4 5380 2499 4195 2537 154 937", "2930 976 2979 3590 4174 8771 554 6027 606 8 5 5310", "6 8 116 2427 9226 6101 6833 6822 8551 4934 40 5774", "4309 1195 6622 2650 7144 7844 4033 8399 1 8 7858 8", "2999 1713 1608 7687 7123 1276 1 4332 4 6187 3 9060", "3768 9656 4819 7 5667 7 5640 3723 2 2249 1063 6334", "9884 70 8832 962 7559 9353 4234 9957 4651 4 4 4733", "2642 7131 6373 1 4 968 6589 976 3005 6729 375 2944", "4308 3 777 4434 4701 3 9898 9895 9743 4132 4297 17", "6147 9916 9820 8714 7 9 8493 2 5735 2658 3469 4986", "7244 2132 5857 749 665 3 3 220 5604 5393 1961 5109", "2 2 8709 6 2726 4324 2258 6682 4597 2193 8495 9052", "6776 7 5486 3 6 4669 5810 7668 6985 2116 6438 2229", "7753 9679 7604 2 937 9 39 6405 6463 2135 7715 2789", "7856 3300 8987 1282 3017 2250 7784 1 5 8563 5097 1", "5498 5568 6 1 9 5603 4157 3688 9094 3260 4940 8759", "152 9 3 1332 9348 8180 1969 198 7252 6717 350 6016", "8667 3899 32 6787 7013 9893 2921 694 7331 4 6 1859", "1 6 9486 9718 6391 962 8794 9150 5772 6981 8963 83", "81 9994 3426 509 3 9 5794 3235 8718 7912 4560 3687", "3495 5553 5822 1912 5 7387 1 8062 2169 8465 8 2461", "9122 4 3164 515 1 82 1299 9041 8067 6078 5117 1129", "9 3125 1 6563 5587 3510 6679 9875 6 4014 4620 8711", "1312 922 9644 65 3102 1 1 2735 8685 1284 7639 8695", "5792 1525 3132 7113 1 7 6742 5007 3 6146 1526 4319", "5299 9044 5021 7336 9 2 1258 1424 2 5282 3559 7402"};
    vector<string> purchases = {"25,0:5", "17,6:10", "41,5:15", "11,9:16", "8,3:17", "32,7:22", "0,3:23", "25,2:24", "35,11:29", "27,5:34", "17,4:39", "23,7:44", "35,8:45", "13,11:46", "11,1:47", "2,9:48", "6,8:49", "41,6:54", "42,4:59", "39,2:64", "25,3:69", "13,2:74", "38,6:79", "34,10:80", "1,11:85", "38,10:86", "14,2:91", "37,7:92", "20,11:93", "34,3:94", "45,8:99", "36,4:104", "25,4:109", "15,5:114", "22,10:115", "35,2:120", "21,8:121", "24,8:122", "41,8:123", "24,9:128", "36,0:133", "12,6:138", "27,9:139"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 202;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> prices = {"1 1 5 4 1 2 2 8 6 5 6 3 1 7 2 1 7 3 6 6696 8 8 2 2", "2 27 9 6 1 2 8 4 1 658 1 5 9 3 3 4 4 7 9 2 8 4 3 1", "9 3 3 7 6 8 9 9 3 7 2 1 1 2 7 8568 9 2 8 7 4 7 2 5", "5 5 2 8 4 9 2 4028 6 5 7 2 9 2 9 5 1 2 1 8 9 8 8 6", "4 6 2 3 6 5 1 5 5 4104 7 2 1 4 3 4 1 2 7 1 2 7 8 7", "9 1 3 1 2604 3 4 1 5 9 7 1 2 5 1 3 3 1 4 1 2 3 8 4", "3 1 1 6 3 4 2 3 1 7 4644 6 3 3 4 6 7 3 8 5 8 8 5 9", "9 3 1 4 5 1 8 4 7 7 1 4 9 4 6 7 9 9 3 5 4923 8 7 2", "5 5 4 1 5 8 6946 6 4 3 2 3 9 3 9 1 7 1 6 9 6 8 7 7", "6 9 2 6 4 7 5 1 1 9276 9 3 6 4 4 9 1 6 7 8 5 1 1 7", "7 3 2 7 1 1 4 8 6 5 6 9872 6 4 5 8 9 4 5 4 1 6 6 7", "1 2 1 8 7 9 4 3 7 4 1 4 4 1 4 9 9 5562 8 4 4 8 1 5", "2 5 8 8 9 1916 4 8 8 8 2 6 5 8 8 9 4 7 4 8 4 3 6 4", "2 6 8 7 9 1 8 6 4 7 7 6 4 1 2 1 4 9 8873 3 9 6 5 8", "7 8 3 6 1 3 1 5 7 1 7 3 4 9 7 8 5 4 6 5509 2 5 9 3", "4062 3 3 5 4 9 2 2 9 7 3 3 9 4 4 1 4 1 2 5 2 1 3 4", "8 2 1 7 7 6794 4 3 1 8 9 4 2 8 9 8 4 1 4 7 3 5 6 6", "3 7 9 6 5 6011 5 4 3 1 7 6 9 6 9 2 5 8 4 8 8 7 5 3", "9 4 3736 5 1 5 1 8 2 7 1 6 5 8 2 1 7 4 6 7 8 2 3 5", "7 1 2 2 3 1 2 2 5 2 6 2 2 4 8 9 6 6 3 6 3 3 7 9084", "6 765 7 9 4 7 4 9 8 4 4 8 5 3 4 4 9 7 1 52 9 1 4 7", "1 9 5 2 7 2 6 7 9 5 4 1202 8 2 5 5 9 6 2 4 2 9 7 6", "3 1 3 1 8 3 9 2 4 6 9 3 8 7 36 572 5 9 4 8 2 6 5 6", "6 1 9 2 2 1 2 4 9 6 2 5 6 5 9 1 734 8 4 8 70 9 1 6", "9 1 4 3 1 5 1 1 4 64 2 6 7 3 813 4 2 2 7 6 9 3 3 1", "3 6 8 8 6 1 3 471 6 6 5 1 6 1 9 77 8 8 7 6 3 2 4 4", "6 1 4 8 2 9 7 9 1 1 9 7 8 2 4 9 1 7 7 3 9084 9 5 6", "5 6 8119 8 8 9 2 1 1 2 8 2 5 4 1 7 8 8 5 1 8 4 1 2", "3 9 5 6 6 7 1 9 6 3 2 2 9 2 2 2905 6 1 3 1 6 5 5 3", "3 6426 3 2 8 3 1 4 8 8 2 6 2 4 2 6 8 1 8 2 6 1 1 3", "3 2 7 9 5 5 88 3 9 2 9 7 6 4 5 5 8 4 5 2 2 2 6 172"};
    vector<string> purchases = {"25,14:5", "0,8:6", "20,4:11", "9,4:12", "9,20:17", "11,7:18", "21,18:23", "23,2:28", "10,22:29", "12,1:34", "1,10:39", "3,0:40", "26,21:41", "7,15:42", "25,1:43", "24,9:44", "25,7:49", "24,8:50", "23,15:55", "16,15:56", "17,2:57", "16,21:62", "0,20:67", "10,1:72", "20,14:73", "8,21:78", "9,7:79", "15,21:84", "22,13:85", "4,8:86", "25,4:87", "28,23:92", "16,17:93", "27,2:94", "6,19:99", "11,3:104", "19,20:105", "16,19:110", "15,13:111", "10,9:116", "30,0:121", "6,0:126", "9,4:127", "3,20:132", "26,11:137", "1,8:138", "12,8:143", "3,23:148", "10,5:153", "19,10:158"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> prices = {"5 9 2 7 8 3 6 4 2 2 5 3 9 7 5 1 4 9 8 7 7 1 2 62 3", "6 8 5 2 5 7 9 1 8 9 1 3 92 3 7 1 3 6 8 3 5 5 8 5 1", "6 7 9 3 6 8 9 3 6 5 63 7 7 9 9 7 7 7 3 8 2 7 2 9 5", "9 9 3 9 3 1 7 3 2 9 3 4 3 8 6 7 3 1 4 7 6 9 4 1 69", "4 8 7 5 7 9 7 5 97 1 1 3 6 3 1 6 2 5 7 7 1 5 1 5 4", "1 4 8 4 2 6 8 96 5 5 2 7 1 1 5 7 7 8 7 4 7 4 3 2 3", "9 3 4 7 38 1 7 9 2 6 7 9 4 9 2 4 9 5 2 8 9 8 7 2 8", "4 8 1 8 3 7 3 4 9 9 9 5 1 9 7 7 8 21 7 8 6 1 5 4 6", "8 7 68 3 9 9 9 8 3 5 2 2 4 9 9 7 9 5 1 1 1 4 6 2 4", "7 4 2 8 2 9 3 8 7 2 3 4 8 6 5 9 8 5 6 3 7 42 8 7 9", "6 1 4 3 2 5 6 1 4 6 3 6 8 9 9 9 5 4 4 1 4 9 7 45 6", "5 8 5 4 6 2 7 4 4 3 1 6 2 8 7 7 7 10 2 6 6 2 6 5 6", "9 6 7 9 6 1 6 8 1 9 7 1 5 8 7 1 3 1 8 5 58 6 4 1 9", "4 7 6 9 9 9 7 7 9 7 4 82 6 2 1 6 9 2 7 6 2 8 5 6 3", "4 3 3 8 9 1 6 3 33 8 8 9 3 8 5 2 5 5 5 3 3 1 4 6 6", "7 6 3 9 4 7 4 7 8 12 8 8 4 1 8 4 8 5 2 4 8 8 8 2 3", "6 2 1 2 9 8 8 6 5 42 8 7 4 6 2 6 8 9 9 1 2 6 2 4 4", "1 9 6 6 3 1 8 2 1 4 1 1 9 2 36 9 3 7 5 7 6 9 3 3 3", "3 6 3 8 3 8 34 1 6 5 9 4 1 5 5 5 8 2 8 5 6 4 8 5 1", "9 5 9 5 9 12 4 8 8 7 7 7 5 2 5 7 8 5 2 6 6 8 6 3 2", "7 2 1 7 5 3 91 7 9 6 9 2 1 5 1 1 6 3 3 6 8 3 8 4 4", "4 6 1 1 4 3 3 4 9 3 2 3 9 79 7 7 3 9 7 6 3 8 2 9 1", "7 7 5 5 7 3 5 8 3 3 8 4 8 1 3 4 8 7 3 36 1 2 4 6 3", "4 7 1 9 5 3 2 4 5 9 6 9 3 5 6 3 8 68 1 2 6 2 7 4 9", "4 6 2 5 1 4 3 7 1 8 5 9 6 4 4 4 55 4 2 5 7 2 2 3 9", "3 4 8 4 9 2 9 34 5 5 6 1 8 6 6 8 7 2 7 2 3 6 7 5 8"};
    vector<string> purchases = {"3,20:5", "14,5:6", "3,9:11", "9,16:16", "0,0:21", "17,13:22", "0,19:27", "16,3:32", "19,6:37", "11,19:38", "6,15:39", "20,1:40", "13,10:45", "24,22:46", "9,5:47", "15,9:48", "7,17:49", "10,19:50", "0,20:55", "18,5:60"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 215;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> prices = {"4 9 6652 1566 7 4 4 1 8 1 3053 3 5 7 5 5 3 7 2 4 3", "3 2 6812 4 4 2 3 2 4 7 1 4 6 8 7014 9 7 6 2 9465 2", "2619 9 6 9 7522 7584 4 5 7 2 4 6 5 1 3 4 6 5 2 8 6", "6 2 241 5 1 2 2 3 1 3359 5 4757 6 7 4 96 4 5 9 2 9", "6 8 6 1 4315 5 5 3 4 7 312 6 5 1 3 6 179 1 5 5 714", "5 8 4 6 6 7 5 1588 4073 3 8 6821 1 5 7 2 4 2 6 6 1", "8 7 1 9 2 8 6808 3498 6 4 7 4 4 1 6 7 5 3 9 9 7608", "8 2 2 4 1 3 9 1 4 9 3 7405 7 9 8 8 3 5234 737 6 82", "8 5 6 7 4 4 9 1 4 5 309 93 5025 1 9 8 3 2 9 1566 9", "5 3 2 2 5 844 34 9935 8 4 6 5 7 2 1620 3 5 9 6 7 2", "9 3 3 4 3 6 6 3 1553 3 7031 3 5 4 3 8 8 4 5263 9 4", "5 9 9 6 1 3 9 7518 8 5829 1 9 4 1 8 3038 3 3 6 1 3", "8965 2 2 2 9 5 5 558 2 9 8 7 2 2 6 700 791 1 7 6 2", "5 7 7322 1 2 7 5 3 8 3 8 2569 5 7 6 6 3 4 9976 6 9", "8 5990 6 9847 9 4 1 7 3 2 3 9 9 70 2 1 7 8 5 6 738", "7 3 3 5 7 9 4 2 5 2 6775 1505 5 2 1 2 5 3 8 1 6987", "5 5 3 8 8 2 2 3200 4 7 4 5894 5 7 8 7213 3 3 7 5 4", "4 2 4 8 6 2 3 7 6 8 2 7 9 5 9273 1729 1774 5 8 1 5", "159 1287 6 5 4 2354 1 1 6 8 3 5 4 1 3 6 3 9 7 51 5", "9 6 7 3 5 8 18 6 2 7157 3 662 8 2 1 5 3 8489 2 5 9", "1322 3702 6 6 2 9 8 4 2999 3 8 2 5 3 9 8 9 8 1 6 6", "2 2 2022 4 5 2182 5 1 9 7 2673 9 4 9 4 5 6 5 6 5 4", "4 2 9 3 2 5 8190 78 4028 2 4 4 2 9 719 5 8 6 8 7 6", "2 6 1 6 3 9 3 1 5 8 3 7704 6458 6 2 8 2575 5 8 8 3", "1852 4 3 2 2 4 4 1 9 2107 9 6 4 2 9379 1 8 9 9 1 1", "4 8 3 3 7 5 5908 8 9 6 3 3 2070 3 5 6 83 2 9 2 772", "3 9 2433 6 8 7 9 1584 1 6 1662 1 4 4 3 9 5 8 7 5 9", "7 9 2 1 8698 2 6 3 1 3393 2 8 7 7 3 2 9 7 5 2 8679", "1 9 6 8 8 1 9 1 5 3 1 7 1 5207 9 2020 7 4 3879 6 5", "6026 3 1 9 2656 3 2 4 4 9 4 6 3 7 9 8 6 3 9448 8 3", "3 2 1 8 3738 2238 1 4 7 7 8988 9 9 6 6 3 7 9 8 8 6", "7 5 3 8 1 6 4 6 2 2 7 6560 6 8370 2 6 2 6 3 2480 9", "5 7 2 7984 4 8671 4 6 8 3 9 6 4 9768 1 2 5 6 8 4 8", "8 475 3 6 5 597 7 7820 3 5 2 9 2 2 1 6 814 6 6 1 6", "8 9639 7 1 1 7 9 5 6 3 4 7 9 4 58 9 5 535 8722 2 3", "1 8 8 3 3 1 5 5 4 3 7 8113 1 4 5 7 7 7196 4 3787 2", "9 1 4 7 2 2 8872 6 5 5 8 1 8 5 7 5903 5 9 8005 8 6", "4 4 5 1 3 2096 7 2 7 1 2 6 5 4930 6 3 6 2236 1 1 6", "3 9809 5 1 4 2 2028 1 1 5 1 8 8 4 1738 6 8 4 6 4 3", "5 8 6 1 170 9 9 9022 86 9 4 4 3 1 1 3 9 5 5 8436 9", "9 1 6 9 4 2 2393 1 2 9 5 2 5 1 9 9 95 2 2 5737 245"};
    vector<string> purchases = {"3,18:1", "34,8:6", "11,4:7", "20,20:12", "34,2:17", "19,5:18", "18,6:19", "21,18:20", "38,4:21", "38,5:22", "10,2:27", "7,4:28", "30,16:33", "12,16:34", "40,12:35", "40,0:36", "37,3:41", "12,18:46", "30,5:47", "15,5:48", "4,6:49", "12,1:50", "12,4:51", "30,2:52", "30,17:57", "27,17:58", "18,19:63", "35,8:64", "35,3:69", "24,9:74", "36,4:79", "7,0:80", "39,6:81", "11,9:86", "35,9:87", "36,5:92", "4,14:97", "12,7:102", "35,15:103", "23,10:104", "25,8:109", "13,9:110", "31,5:111", "31,8:116", "31,18:121"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 338;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> prices = {"9 2 6192 7313 9 2 2 1 1 6 3 4 2 4 1 9 5415 3 107 5", "1 3732 3 7 4 1 8 7 5 5697 4 4 2419 5 8 8 6 1 812 4", "3 7 4 9 6 9 360 3 7 4 5 2 9 4 2073 4 3 6400 7 5345", "9 5710 2 4 9 1 8 2 1 1 6 7 6 3802 7919 7 592 8 1 7", "7 4401 2 3 4 5 7 4 3 9 8290 8 4 3 4 3 2 301 1 3014", "4 1 2 3 2 6 6 8 1 8948 6199 971 7 5 8 5 8676 1 8 3", "1 3 7721 3 9 1 1 894 5 7 8 2 9 4 4 6626 8 2 5250 4", "7 2 7331 3 3 3 9 2193 4 2 1 462 3 6 6547 6 9 4 3 2", "3 2 3 8 7743 4 8 3 1 5 2 631 4 3 2 6 7 5087 5343 3", "5 2 1 1 7 9 6 8921 96 2 8 6 6 7557 4789 43 1 1 2 9", "8 6 9 2 7 3 7 4 3 5 1 6 7 840 2 6 7 5932 3272 6784", "9 2412 564 1 9 3 8 5 2 9 5 2 4 9 4 2 8 7644 6 4312", "6 7709 5 2028 31 5 6 1 4 5 7 4 3664 4 7 6 8 67 8 7", "4061 3 1 3 1 6 7 2 6 6 8 3 4 7 7 6224 9140 8 489 4", "6 8355 3 7813 824 4 6 7 7 4 7 6 8 1 9800 1 6 1 3 2", "5 2 5 8 8 2852 360 9 5856 7 8 1419 4 6 9 3 1 9 9 8", "7 4535 8940 3 3964 7 4 2 818 6 2 2 5 8 2 9 8 4 9 1", "2 5 7 6 6 1614 5 8 3 3 7197 1036 393 9 5 1 1 3 7 3", "525 1981 1 3 5 4 9 4 1 5 5 7 1258 8 7 9 3935 2 3 6", "5 4 4 8 6 2 3 9784 8 5 4 1 6 7 5173 3 807 9 7945 4", "5 4 4 610 9703 3 6 4 9 8161 7 7 8 9478 2 8 2 2 7 5", "7 2 6 2653 9 6400 4 618 9 5 1 5 2 1 9 4 9345 6 4 3", "5 1613 4 6 5 1 9 4 7 4 1 7780 9414 7 1 8 7 9 4 914", "3443 5 7 4 3 5 1 6 4 182 1526 5 8 5 2 1 7766 5 9 4", "5304 5 9 7 1 6 6 2 5 2303 8 4 3 2533 2 6 2 1 9 415", "644 3 7 1 2 6 7 1 8012 4 6 7 7 6 3 9749 3 1 9 7984", "4 948 3 9253 7 2 5 5 1735 3 8 7 3470 9 5 7 2 4 8 3", "7749 2 526 5 7 5 1 1 8 2 8 7 6 9 5 4 5315 1 7802 7", "2817 6 7 2 9356 2 3 8 2 7 7 6 6 4 3977 852 7 4 1 7", "9 3 8 57 8 5 8 5 6035 954 610 4 8 9 3 8 3502 9 5 6", "9 2 3432 3 4 4 8 3 5 9 815 1 6 5 4 7221 2674 3 6 5", "14 1 6 3 6 949 9 5 2 5 6 4 5 2 9995 7 1 9 9413 720", "3 6 722 4 2 6 1 7 6 8 8 4 8 7014 3 4002 2548 5 8 1", "2878 3 2 6 2 1 7 5 1 1 9 4 1 2 3573 3 1 3572 447 5", "3 4 4 7 2 9583 3 6964 5872 9 668 9 5 5 8 8 1 8 7 8", "6 9 2 8 9 7 3 7 9 1669 7 2 132 8 8251 7 7 6 6 3995", "3121 3 2 2 2 960 2 3 8 9 7 6 8 8 9 2 5820 2482 5 4", "1 1 5 5780 3 5661 5 5 7 7 9 1 1 7 1 495 6 7 5 7199", "1331 9 9 2 7 1742 9 8 7 5 9 7 1 3893 815 8 3 5 3 5", "7 3 9 4 4699 9623 1 6 9 2 1 5 9 9 1 2 121 8333 4 8"};
    vector<string> purchases = {"10,18:1", "36,13:2", "27,7:3", "10,15:4", "24,4:5", "23,19:10", "21,10:11", "15,3:16", "12,14:21", "30,6:26", "36,8:31", "6,11:36", "24,11:41", "6,15:46", "7,12:47", "8,0:52", "1,11:57", "23,2:62", "17,9:63", "32,1:64", "12,1:65", "30,19:66", "21,16:67", "39,17:72", "25,16:77", "0,19:82"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 208;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> prices = {"4499 143 4 4 1 2 6755 9 8 794 704 3728 4 6 9 4 295", "5 8 3 2 923 3 2 7 9 3 1397 1541 3454 8305 4984 1 6", "9072 4 4091 7745 5 6162 2 2 3714 8 8 893 8 7 9 4 7", "5030 7337 4180 25 4149 1 8 1 9 1 5 9 1027 4 2 1 10", "1 9 7 3 6010 4 6 3916 2366 2 406 2 4 7926 6 7155 7", "4371 4 5 4 9744 4 9 9403 715 7 2 4 2 8 5790 3 1250", "941 9 5453 9 4 9 4388 8 6 5 3 9 7 6992 2 1150 2579", "899 7 5193 8 7 6 2441 6 8 4 5492 2 9 1 9 4150 9013", "8 4 3 8 6227 5 4325 5060 928 7 6 5 8224 9815 8 6 6", "1 6 975 1 3 8 7460 5 8 8325 8 4740 4 7690 6005 8 9", "8 6 8 2030 2 4 1460 1 602 4 3 2466 2 7226 5 5 3323"};
    vector<string> purchases = {"0,8:1", "3,7:2", "0,2:3", "7,14:8", "5,0:9", "0,0:10", "10,12:11", "6,7:16", "1,8:21", "10,9:26", "1,6:27", "2,14:28", "4,4:29", "4,15:30"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> prices = {"3 8020 7552 3986 1285 63 4 2 6 2 4178 5 6472 5 7 7", "7417 5 4696 876 9422 3 8 2257 9 5 140 4832 3 1 1 1", "7382 463 1 8 7 8 1046 8 8 7 5 5546 4931 7576 497 2", "1 5 7105 2 4 2 4754 5581 8 51 4 1 8163 8 4144 3716", "9 9 636 3302 3 8 7 9276 2488 6334 247 6 6 1 7 5531"};
    vector<string> purchases = {"4,14:5", "0,5:10", "0,11:15", "0,7:20", "3,15:25", "1,13:30", "0,14:31", "1,14:32", "3,10:37", "1,6:42", "4,15:47", "2,9:52", "2,2:57", "4,12:62", "3,13:67", "2,11:68", "1,7:69", "3,12:74", "0,12:79", "4,11:84", "4,2:89", "3,14:90", "0,4:91", "0,3:96", "3,4:97", "0,6:102", "1,15:103", "4,13:108", "4,3:113", "3,5:114", "0,8:119", "1,0:120", "4,10:125", "4,0:130", "4,9:135", "4,5:140", "3,3:141", "3,11:142"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 282;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> prices = {"31 5 5 6 9 4 4 4 7 4 6 8 3 7 5 9 1 7 9 8 5 3 2 4 8"};
    vector<string> purchases = {"0,20:1", "0,11:2", "0,2:7", "0,5:12", "0,12:13", "0,21:14", "0,15:15", "0,6:20", "0,4:25", "0,7:26", "0,9:27"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 96;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> prices = {"5801 7637 9252 2549 7175 2345 7921 4316 1967", "7685 5713 4835 900 5384 6588 1117 1430 7826", "6406 5374 8141 1762 888 1398 3961 1827 7332", "1600 1206 8954 308 2640 3240 8741 478 5459", "6561 6399 8689 3831 2221 2108 3963 8887 9680", "3088 8786 1958 9605 7807 8452 2223 3624 5484", "6661 3359 9981 6125 9917 2619 890 7766 112"};
    vector<string> purchases = {"3,6:5"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> prices = {"8 7 4412 9 2378 9 5716 5 5 1197 3747 2 5957 7192 2", "4169 4729 4280 3 4233 4 6733 2529 9 6 2 2 6 7 3269"};
    vector<string> purchases = {"0,5:1", "0,6:6", "0,4:11", "0,3:12", "1,8:13", "1,9:14", "1,5:19", "1,12:24", "0,7:25", "1,13:26", "1,2:31", "0,11:36", "1,0:41", "0,14:42", "1,1:47", "0,10:52", "1,10:53", "1,14:58", "0,0:63", "0,8:68", "1,4:69", "1,11:70", "0,12:75", "0,9:80", "0,2:81", "1,3:86"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 129;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> prices = {"7321 5230 9949 2401 5467 9327 1530 46 4 5 4 2 2181", "2583 2620 7 6 7 594 528 1535 8167 2410 7991 5 8005", "7351 6896 421 3 497 5 5 1964 6941 1542 2823 7263 8", "1752 8 4362 6946 7 2168 6 49 2 5756 1280 6868 3421", "2 1593 5108 81 6020 3228 6652 6 9 3559 9064 6635 5", "8027 2839 4 644 4828 5230 541 2104 2790 3014 5 3 1", "8361 2498 422 1 3 7671 6648 4059 7 4 433 7860 2925", "7503 6072 1 9 4 4492 95 8945 8855 9915 7672 117 39", "319 8 4 3 977 4033 9638 7826 7318 5812 69 337 6463", "118 7866 1443 4 7656 5462 189 4566 3318 3176 3 7 8", "7 2522 9411 3034 926 1304 6796 3853 8 472 9 5942 6", "8 4 773 7315 2 5645 6606 887 2402 8510 1286 7595 5", "4 6 4 1172 9307 1 1518 9777 4651 702 672 4444 7029", "7128 5 9 97 4145 7105 4567 8 9874 1136 3185 9 6996", "882 5684 11 1 4742 6 9 9710 3014 6512 48 7470 7028", "8198 2714 6106 9061 5 8477 5459 6973 20 1 5 1 8500", "4 9 5352 3 1596 286 673 3 4610 5856 3566 6717 3301", "8 2698 5 9845 2 8404 8 3517 576 7618 7319 4443 935"};
    vector<string> purchases = {"10,12:1", "13,5:6", "1,8:11", "0,0:16", "10,8:17", "1,2:18", "17,7:19", "4,6:24", "3,8:25", "14,8:30", "9,10:35", "8,6:40", "4,1:45", "7,5:46", "16,1:51", "9,8:56", "2,0:57", "8,9:62", "16,4:67", "7,0:68", "16,8:73", "15,2:78", "3,1:83", "1,7:84", "12,10:89", "8,7:90", "2,9:91", "10,3:96", "6,10:101", "17,9:102", "11,0:103", "5,1:108", "13,0:113", "12,1:114", "15,7:115", "15,9:120"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 192;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> prices = {"9268 3287 8813 1041 5683", "8185 4183 8995 9039 345", "8762 8196 7617 9083 5247", "9783 2758 4692 8846 6259", "3846 1664 3748 7429 6580", "8125 9252 518 4654 1135", "309 2027 2775 2263 2579", "3048 2993 8754 3166 7848"};
    vector<string> purchases = {"7,4:5", "6,0:6", "2,0:11", "5,0:16", "7,0:17", "0,0:18", "4,3:23", "1,0:24", "2,4:29", "1,3:30", "0,2:35", "1,1:40", "4,0:45", "2,2:50", "7,1:51", "3,0:56", "0,1:61", "0,3:62", "4,4:67", "0,4:68", "4,1:73", "5,4:78", "3,1:83", "6,1:84"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> prices = {"8488 7782 2422 4789 8187", "2117 4172 5913 7493 1999", "326 1509 4285 2620 5530", "4390 4044 2704 4263 9390", "4091 2032 3236 1668 5744", "440 4081 3238 8571 5705"};
    vector<string> purchases = {"4,2:5", "5,2:6", "0,3:7", "5,4:12", "1,1:13", "1,1:18", "2,3:19", "1,2:20"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> prices = {"1 5 4 7 9547 4 6 4282 7610 5311 3 3 557 8 6 2 4508", "8 880 6315 8 7 8956 2 2 2498 9133 6 5 3 3 3773 1 1", "6235 4200 2423 3378 5 5 5 4 645 7 6 7 4 7 3476 7 4", "1 2 2 9 6835 2 5 2505 5 6 1 9118 753 5065 9 5 6469", "5 8 4 7243 2 7 8 2 1956 5 2070 7 4 6457 50 12 5730", "2141 105 2 1131 297 746 373 8 3 7 2 3304 4 5 9 3 1", "7719 6416 5 7 297 9 7700 3 5 1 4 2 3 7988 1 7 1655", "7280 8102 9 64 3 178 5 575 6534 2 6 8 8 7961 4 4 1", "8945 141 2125 9 2 1 5168 9 1 9 9 3 2 8726 5 5405 8"};
    vector<string> purchases = {"6,6:5", "4,7:6", "4,2:11", "4,16:12", "3,13:17", "6,8:22", "3,7:23", "0,11:28", "7,10:33", "2,15:34", "6,2:35", "5,13:40", "2,13:45", "4,1:46", "7,11:51", "4,13:56", "6,5:57", "2,6:62", "6,4:63", "5,13:68", "1,16:69", "3,14:70", "8,13:71", "4,12:72", "7,4:77", "4,9:82", "3,1:83", "8,7:88", "7,12:93", "1,2:94", "0,8:95", "8,10:100", "7,13:105", "4,3:106", "3,12:107", "4,4:112"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> prices = {"6583 3406 4210 955 9390", "4080 6637 4369 1091 1068", "3730 7102 1305 4865 6078", "3609 4052 1603 962 6274", "4316 6197 6674 9605 3961", "6245 5656 5167 4646 8482", "3377 3499 9676 2171 4331", "6167 7360 8224 413 5783", "8261 7042 5014 5256 3382", "2555 9661 2659 2624 4992", "6798 2882 9372 5264 2498", "5648 8169 3307 3113 463", "9189 8564 6171 1960 5130", "6363 2971 3340 93 2385", "8427 5842 9185 2152 1629", "8848 1872 5025 8935 8717", "8425 9074 5180 7016 4435", "4976 7861 5396 5144 2541", "8020 5174 1494 5752 5841", "8820 3932 8682 7252 2536", "4744 7089 4608 3663 1175", "9578 1644 5948 9104 3554", "6082 5646 8921 6773 3487", "1082 9527 3269 490 8430", "6191 5321 6605 9709 7600", "5803 6270 1447 7003 2605"};
    vector<string> purchases = {"20,1:1", "12,0:6", "20,0:7", "11,3:8", "5,2:13", "25,3:14", "1,0:19", "0,4:20", "16,2:25", "17,1:26", "1,3:31", "22,2:36", "8,3:41", "20,3:46", "12,4:51", "23,4:56", "20,2:61", "19,4:62", "19,2:63"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> prices = {"1 36 7 7 7 9 7 9 7 3 8 6 6 6 4 2 8 9 1 3 4 7 2 4 5", "7 5 1 4 1 9 3 9 2 3 2 5 8 25 4 8 8 4 7 7 4 3 7 4 3", "1 9 1 8 3 6 4 3 85 4 6 3 1 2 4 6 1 3 5 5 3 9 4 5 8", "5 9 9 7 1 3 7 4 9 7 7 1 4 8 1 6 2 1 5 3 3 9 55 4 2", "60 6 1 2 2 8 4 7 1 6 5 8 9 4 5 8 7 1 2 8 9 6 3 2 9", "4 7 8 8 1 9 9 6 8 4 4 4 9 2 92 8 6 8 4 1 4 9 8 7 8", "7 3 4 2 9 8 8 1 9 2 1 2 9 9 8 1 3 8 6 20 1 6 2 1 6", "1 5 3 2 2 2 6 4 5 33 1 9 1 3 3 6 8 6 2 2 2 3 3 3 2", "3 5 6 4 4 3 8 7 1 8 36 9 7 8 9 8 2 7 7 9 2 5 7 6 7", "2 8 4 5 1 5 3 2 6 7 8 1 2 1 3 91 2 6 4 7 9 5 4 8 8", "7 36 9 3 5 5 4 2 9 3 3 3 3 5 6 4 8 2 8 4 6 6 4 8 4", "1 3 4 6 7 4 7 13 8 8 1 9 1 3 8 4 9 6 4 1 1 8 5 4 2", "5 1 2 6 6 9 7 9 5 4 1 6 6 7 2 2 27 6 1 8 2 9 2 2 5", "3 5 7 2 81 3 5 1 5 9 6 9 5 7 4 1 5 8 5 5 6 2 8 4 3", "2 4 2 7 1 2 7 3 2 3 9 7 9 3 5 3 2 6 2 6 9 2 4 8 64", "3 5 7 1 9 85 4 5 8 8 1 8 1 3 8 1 6 4 2 4 1 2 4 2 1", "5 8 1 3 9 9 4 8 3 1 1 5 3 9 2 7 8 1 98 6 8 5 6 4 5", "4 2 4 5 7 1 2 4 8 9 9 4 9 6 8 7 5 4 88 9 3 5 4 4 8", "6 9 1 3 5 3 3 5 1 8 7 6 1 2 4 56 1 9 2 5 9 4 5 9 4", "7 2 4 4 4 3 9 6 7 1 1 3 4 5 1 4 9 4 7 6 8 2 12 6 6", "5 3 5 2 7 3 8 8 1 4 8 6 1 2 5 2 3 7 7 73 9 7 1 6 6", "9 8 7 53 3 8 5 1 6 7 3 5 7 8 9 7 5 4 3 1 8 6 5 1 4", "1 2 3 5 3 1 9 4 4 4 9 6 8 7 4 27 9 3 8 9 9 8 7 7 8"};
    vector<string> purchases = {"15,6:5", "2,4:6", "16,10:11", "4,10:12", "19,19:13", "13,4:14", "10,4:19", "12,12:24", "5,7:25", "14,20:30", "13,22:35", "19,17:36", "14,8:41", "19,22:42", "0,22:47", "2,12:48", "0,23:49", "17,0:50", "9,0:51", "10,19:52", "4,3:53", "13,0:54", "12,9:55", "8,6:56", "19,7:57", "8,21:58", "10,15:59", "19,8:60", "5,16:61", "6,15:66", "19,11:67", "21,12:68", "8,22:73", "11,20:74", "12,15:75", "5,22:80", "22,4:85", "15,13:86", "12,17:91", "12,22:92", "5,24:97", "9,21:102", "8,9:107", "16,12:112", "0,6:117", "2,24:118", "10,24:123", "16,14:124"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 409;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> prices = {"1 3453 4 5 4 6 6 716 5229 121 9060 9583 384 7 6449", "5728 5695 9 5050 2 4 7920 6197 5108 2 8778 7 9 9 5", "1 7063 6250 5 5 6944 2 776 2 7 4339 7029 1 31 7567", "5 5942 2356 824 7 1 3 8877 5973 8 9439 8229 5 2 87", "3287 8935 4031 2 1 5162 7 6 2026 8057 7 5 4 8449 9", "6 6306 8919 9238 4170 5127 1 2 6 3 5 3 4625 8593 4", "6 4817 3 7 1 7804 1014 1495 9764 7 6008 4638 2 8 6", "72 6 3 6328 4594 9259 6 8 261 8 9195 8 2504 9 6718", "7039 3699 8 1 4 9 1 4800 7041 7 1 6 5352 2676 2850", "9006 7 4971 1 6049 8 8 6 3886 8089 4620 7 2 6583 1", "3528 7 8 5867 8 5 6935 4255 4 8525 7 7899 1 3257 3", "1 2130 8308 2016 3020 4 6495 3 1 985 4 3 7 9718 72", "9498 8810 9 2 3 9234 2 2 2843 9 1095 1 6839 1 1344", "1 9 4 6234 1 8863 2 2410 7906 8559 5 3 1582 7166 9", "9 5 1 7 4669 9 7 9 9516 4446 2 7224 4990 9616 5205", "79 1084 1816 3534 8 5579 7 498 4 5 1 4296 1 7 6730", "4 7 3171 7 7158 6571 1208 1831 3 6 1 4556 9336 4 4", "2 6924 1 8650 5943 1518 7806 6 4 6 6606 6 5 1121 2", "1267 4 7580 9 7 1 6 2457 6 7 8135 4729 9310 7099 9", "1 3389 2030 9456 2 4853 6 3 4 2249 1 6138 9557 8 4", "5 8 7 1 1486 9131 9228 1 2951 2 7 1037 3 6279 3685", "1 3 3 7 62 5343 5650 9075 5483 824 6 5 1707 6817 8", "4 6 2087 2441 4 5929 4746 5717 4738 3 1 6 6 2588 5", "7239 8 876 401 1056 1014 4942 400 1 3 9 1 8 3 6963", "4 6379 9661 5984 8993 2037 8092 8 7 7 3 4807 6 7 4", "3 2916 2136 769 14 9096 9 9 7 9599 9909 7 9995 2 8", "8 3817 161 8766 5510 4 3 788 3 3188 331 2 6 1854 9", "7881 5984 444 7944 2 2 8 6 5846 7 44 9 2 3746 7892", "8 7 2 7876 5 8691 5 472 427 5688 1 6256 2279 728 5", "3547 6 2 2 3 5410 4 3748 8 8 8265 4 1874 1440 6099", "1604 34 5405 8470 6 76 7226 7 1 8 7649 79 4 7 7766", "1908 8 1 5538 9243 5 26 2 5268 704 3400 8 3 1031 3", "9025 53 192 2871 7 4414 7369 5 8613 8531 8 7 4 9 2"};
    vector<string> purchases = {"26,1:1", "27,9:6", "31,14:11", "5,11:16", "8,9:21", "28,14:22", "22,14:27", "2,6:32", "4,12:33", "29,0:38", "11,12:39", "1,10:44", "17,11:49", "7,3:50", "1,5:55", "0,9:56", "22,10:57", "18,5:58", "6,9:59", "12,12:60", "0,1:65", "9,2:66", "6,10:71", "31,9:72", "8,0:73", "19,8:74", "1,8:75", "23,0:76", "20,5:77", "16,14:78"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 201;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> prices = {"4443 6630 1413 4231 6983 1854", "8138 9625 9272 8868 4874 5320", "5115 527 5260 3364 1136 8770", "1042 3695 9287 1340 6602 812", "9266 4588 162 617 9777 3090", "6505 1663 8538 6133 5736 2191", "3930 8096 6403 2832 643 8238", "9853 548 9716 692 7101 5293", "2553 1163 7147 352 4255 2216", "8085 7350 2069 7729 4217 1491", "5295 4121 1586 7084 848 6671", "8475 9452 652 7760 3354 6036", "9420 6357 1021 4406 5703 5448", "5201 5285 177 9979 3305 8255", "8935 3890 8103 5743 45 8298", "6572 4811 1201 7678 9394 1915", "8347 8115 7134 2080 8171 3978", "8557 4103 3406 1108 374 5949", "423 1513 7421 5340 4720 218", "451 3911 6300 3093 6904 5989", "9242 7044 8054 9704 982 3182", "9101 40 9122 8330 3150 8451", "5748 2185 1764 9222 9755 7212", "5 21 6010 9849 6814 1106", "3293 1554 8965 6698 2161 4199", "1274 5003 3763 7144 1325 7250", "5881 705 5936 3593 8423 7498", "8112 6618 8645 8182 8487 8551", "3057 6804 8589 7165 5776 3011", "9608 5299 4835 3078 2104 8140", "5038 597 4303 7377 9531 3198", "6604 1590 4341 7718 2498 5152", "8752 5555 8223 6586 3995 8562"};
    vector<string> purchases = {"16,5:5", "24,3:6", "14,2:11", "4,5:12", "17,0:17", "8,5:18", "3,2:23", "3,3:24", "12,0:29", "12,1:34", "2,5:35", "22,3:40", "0,2:41", "11,4:46", "22,0:47", "21,2:52", "10,2:53", "22,3:54", "12,2:55", "20,5:56", "27,1:57", "6,4:58", "6,3:59", "5,5:64", "1,0:69", "20,0:74", "28,5:79", "6,1:80", "13,3:81", "16,4:82", "14,3:83", "20,1:88", "22,5:89", "30,1:94", "20,2:95", "32,1:96", "17,1:97", "32,0:98", "7,2:99", "31,0:100", "19,4:101", "26,0:106", "17,2:107", "2,1:112", "4,3:117", "3,4:118", "2,2:123", "16,1:128", "12,3:129"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> prices = {"7 7 5 9 3 2 1 6 3773 7225 7402 1 1 9 8931 4561 7 5", "5 3 6 4855 7 1 9 4819 7 4348 2 4 5 5 9 2 3998 3074", "6 4 8 3 6220 2 9645 9 4 2925 2155 9 7 1 4952 8 2 8", "5 6253 2 9 5 4867 5878 1342 4 2 9 7920 3 4 5 7 3 3", "1 5 5884 1 3 6 3875 1 3 8969 6 2592 6 1 5234 9 2 5", "5 7 7 1 9 3 2 5 4000 8 6235 2088 2 4607 6 7 5917 8", "1 97 3 8 3 2 1 6 8673 1205 267 6 5 5976 2 6732 5 1", "701 6387 1 8987 4 1 1 5 1 626 3 5 5 4866 537 8 5 6"};
    vector<string> purchases = {"0,6:1", "0,16:6", "0,5:11", "2,10:12", "7,16:17", "2,3:18", "7,13:19", "1,0:24", "4,8:25", "1,13:26", "2,6:27", "1,8:28", "0,6:29", "1,12:34", "1,1:39", "0,13:40", "4,17:45", "4,10:50", "5,7:51", "4,7:52", "6,17:53", "4,13:54", "7,17:55"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> prices = {"2167 6989 7037 7894 1586 5109 5282 1109 9726 6277", "8359 4315 2531 5755 2935 4741 205 1223 7129 1195", "9607 9151 6353 9852 7066 9028 3153 5113 9495 4899", "468 3703 2564 8468 5068 8050 595 49 4976 2607", "9947 2779 8517 2219 1596 9317 8414 1819 9636 6314", "3551 2319 8466 4777 6788 3046 9479 8986 5904 9642", "5548 8133 3466 6012 5695 3982 8210 4355 6249 7675", "3175 7679 2154 1144 1298 3992 9000 2905 768 7841", "6952 7946 6102 999 4997 9822 9106 6684 1722 9321", "8717 7147 2264 6473 4668 9915 5422 8431 4109 269", "6887 2216 8801 5684 7834 5212 2712 2814 7936 4789", "8850 9420 4797 7721 1055 8184 6771 8779 3100 6625", "7745 544 7838 2886 3136 9038 4586 6682 6912 1475", "2886 146 1178 5584 9768 1585 7489 5963 7307 6787", "7698 5855 7761 9927 3511 5940 3786 1893 1139 3725", "5008 6955 9845 4811 6354 2680 9730 584 251 7759", "7966 8408 6398 4973 1982 7837 1484 3388 4684 7269"};
    vector<string> purchases = {"13,7:1", "9,6:2", "11,3:3", "9,2:4", "9,5:5", "14,3:6", "13,4:7", "10,8:8", "7,8:13", "12,2:14", "6,6:15", "1,9:16", "3,9:21", "8,1:26", "1,4:31", "16,7:36", "14,8:41", "6,5:46", "0,6:51", "5,2:56", "11,7:61", "4,4:66", "11,8:71", "10,6:76", "8,9:77", "1,5:78", "7,5:83", "9,9:88", "2,9:89", "10,0:90", "1,4:95", "1,8:96", "14,4:97"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> prices = {"9644 5516 1720 9489 2488 1974 1444 8283 4582 60 92", "6065 2635 8617 5 822 3266 5272 5004 6315 7002 4178", "3435 6025 5276 1 3533 9072 9010 2121 7981 601 5541", "1220 9197 9349 3605 8287 826 7 4420 6513 9877 8320", "1202 8410 9272 5289 8682 4031 9 6028 3990 982 4078", "3697 5683 6 6865 8935 974 3188 2250 2831 5333 9506", "3674 1777 541 7406 6163 2047 4 3581 4826 9725 4394", "2863 1476 9179 1152 291 551 919 8469 4488 8689 443"};
    vector<string> purchases = {"4,0:1"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> prices = {"3 4 3 3 8 2 3734 1 2 8 9 603 9 2334 1731 2 8 2 1 5", "1 7506 9 5 643 8 2 6 8 4 8 9658 9294 5 9 4 6 5 4 6", "6 2 2 6 4 2 9504 5 3 1 6 5 9 6 7 9403 9 5 822 4310", "6 5164 7 951 9 2 1 5372 8 1 6 6 7 2 5 6 7 1 4570 1", "1 8 1 2 8 5 7177 1 3429 6 5 7 7 8 1 5043 3 958 6 9", "55 7 4 4 7 3 1 2 2 5 8 7537 6 11 1 7 5 5258 4089 8", "3903 5 23 2 9 9 7 1294 8 3 8 4 6 7891 1 5 6 4 8 60", "4 5 5 4 877 1 2 2 6 7 1 6 9 8 6 8315 5967 8398 8 9", "7 4 2 8 2 7893 545 6 9 7322 3 6 7 8 4 9087 9 1 4 4", "3 5 2 6 220 7 5623 5 6 9 8 1 9 5 9368 7 5 7 2 9373", "6 9 6289 8 3 3 5 8242 2 1 3 5 1 2 640 1027 8 3 6 7", "8 2498 2 7 5 7 2 8 4 2 3 1 3804 2 8936 505 8 3 5 1", "8 4 8 4 8 6 1 6 5 1094 5 23 1878 79 303 7 81 3 6 7", "68 6047 3 4 4 7 1689 8 6 804 938 2 1 3 5 8 2 1 4 2", "5 4333 6 3 8524 835 5 8 2 9 8702 7 8 4 5 8 6 3 4 6", "3 1960 7 8 3819 8 6 9 4 9 5 2 6 408 9 7 2 1 5 4819", "6 4 3 7 9 1 1 3 5 6 2 6873 8 6 8 4 1051 7888 791 7", "2 1 2 3 8 2 140 7 7 6 9 3 8 3 2188 719 69 6 8 8722", "1 9 4256 6 9 2 5 2 7 9518 6532 837 2 6 9 5 5 8 9 2", "2 2 2 4027 4 3 7841 7 8 6 6 9 1 7 6 759 5 5 5714 5", "132 4 7 9 7387 2598 2 5 6 1 5 3 2 2 6 7 9261 3 6 7", "5 1 9 4 1779 3 2 9 120 9 5 4 3 4 7 7 3776 1 7 9568", "9 7 9781 6 5324 8 9 6 2 3 3 4118 6 136 5 8 2 2 9 6", "2 1 5 6 7 9 3 7 6 4 1011 3050 135 5 5 1 6823 3 6 6", "5 3 4 1711 5 1931 4 9 6 4 7 2 4 4 7 3 9 3 2682 617", "6 8 2844 7 397 3 8 4 8 3 4 4515 8 1 4 6 1 4 6 7393", "1 2046 3986 9 5 2 940 7 6 1 2 2 8 6 9 7 4 4950 6 4", "9 1 8 3 8527 4079 7565 626 1 2 4 2 8 3 4 9 5 5 4 6", "9 5 8 3 5 8485 5 8 3917 2 9 9 4 8121 5 382 7 4 9 1", "7060 5663 566 6 2 5 1 1 8 8 6 3 7 4 2 3 7 6 9150 3", "1 3 4 4256 5 6 3 9 7 27 4 8 5901 9647 91 7 6 3 5 9", "1 4 6527 9 4 352 7 4 2 6 8 2 2 5 6 5 6452 5111 1 4", "7 4 6 8761 1 6 2 9 4 6 627 9 7 5 6 3140 1 6 2472 2", "1 1 5 2 1 2 9040 2 438 9 9 7 5 9 4 4379 3 6 4683 7"};
    vector<string> purchases = {"8,16:1", "23,7:6", "21,12:7", "19,10:12", "22,18:13", "33,18:18", "24,19:19"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 74;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> prices = {"5189 5 1 1 4 3 8 7 6 4 4836 2 7 8 87 1 3 5456 6179"};
    vector<string> purchases = {"0,10:1", "0,17:6", "0,11:7", "0,12:12", "0,13:13", "0,8:14", "0,0:15", "0,1:20", "0,14:21", "0,18:26", "0,15:31", "0,16:36", "0,9:37", "0,2:38", "0,3:39", "0,6:40"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 117;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> prices = {"1 7 5 1534 2 9 8 3178 95 4651 6 1 9 6495 1 5 4 6 2", "1 7 6 9 3893 6 4 4 9 9 3 7 8634 489 4 6 3206 566 7", "8 7 9 4611 8536 1 2 3 6 6 6 2403 99 8 1 9 8683 1 9", "3 9 8 6 4778 6055 3885 3 7 9 70 7 8 5 9 1318 9 2 1", "5 2 3 6414 81 1 9455 4 4 2 5464 5 6007 6 5 4 3 9 9", "968 4187 1815 1 9 1 8 3 7 6 8 2107 451 6 3 9 7 2 5", "8938 8 6 4 58 9 1 5 2186 5 9 8075 6 8 1 3 9500 4 3", "6006 7 82 6171 4 9 9 3 3 3 9 7 7 3415 1102 4 8 5 5", "7 5 6 3 3 7 3 2 6821 2 7143 6202 7 9 82 1065 7 6 4", "5 2078 6561 7 9 2 3581 4163 69 4 1 2 7 7 2 7 6 9 8", "2 98 1457 5 8 1 2928 7 5 7 8604 3 6886 8 5 4 4 2 6", "3 9 2 3 1 6 3 3 3 5498 3 4898 9 7763 3 2640 44 9 1", "5200 4 1 7 8 6 2 8 5 68 5 7 3 2701 6327 8 9 2 1202", "5 4 7 7 4 6919 6 8 4375 69 2567 6 2 5428 6 2 9 4 9", "3 6 2 3055 8410 2 4 6 3960 6 2 9 5 4 3595 1 85 9 2", "8 704 8654 5 3 4044 2 9 7 1 7 2 272 6 6 5 3925 8 8", "9 1 2505 5 6 3 2 6886 4 7444 6015 2 3 5 3 2 1 51 6", "5382 3239 9174 5 1 6 5 6 6 9 61 9 8 6 1 2 6 1 8613", "2 9 3 9 1186 192 6947 9437 4 1 6 534 8 3 1 6 2 9 1", "7225 3 5 4 1 81 6 6 5 9 2 6336 5 2 4848 1479 2 8 6", "8 6 4 1394 1 5 58 8 4 7484 8 6 1 4985 1 7 9 5 1123", "5 8 1 5 2 5 9 40 9341 7 2712 7 9 4 5735 6 1979 5 9", "1 6 3 8 3 70 7045 5796 2 8 6 9 7 7328 6 4 5 5165 6", "3 6 6 5 8 4 1 2 8 7 3392 6 3353 14 6 6048 3578 9 5", "2 1005 8086 2 2236 9 5 7 8 9 8 1 9 8 3 9 53 6537 4", "7 1898 7 6 6 4317 5 1 5 3 2611 4 62 5 7229 4 4 3 5", "4 4 35 8347 6 5 7 3 7309 1451 8267 5 1 6 7 4 3 4 6", "6 9 4 4 7428 5 1 4 9 4 9 2 8 15 8769 8699 4118 4 9", "7 7 2 5 3839 4 7 5 2 6114 128 4 8 5 383 7 5 2671 1", "7 8 3136 2 8 4778 8528 3473 15 5 8 8 9 2 6 4 3 4 5", "4 4201 7 8 5 7 39 3169 3 8600 9 2 2 6 4 9 8725 4 7", "1973 3217 92 3 5 7 8 4 2 5 8 7 5 1217 7 3 1411 2 5", "407 4 3 9618 5 3 7 386 9 4 7 8 5605 7 8 8 8 8 7449", "8 4 7 1 5669 28 2 9934 3546 8 3 4 5 1650 6 5 2 8 9", "1 7711 1 7 9 7 2 5 2 4943 1 258 1 1 2 3374 2 587 8", "5 7 973 377 9 1 4451 8 2236 7 6 2 5 7 9 6 6 4975 8", "6 9953 2 5821 3 8 9 6 5 57 2 7 9 7 7 4257 8310 7 1", "1 8 9 1717 1 33 4945 8 6002 7 7 3807 1 7 6 1 5 2 9", "36 5 8 6 1 8564 1 1 8298 7983 8 2 6 1 3 8 3 8994 5", "7 4 4 236 6 9960 1445 4917 5 6 3 1 637 4 7 2 3 2 4", "1 4 9 94 4 2 6 8 2492 2 7 4 4 6 3 7798 6716 3 8875", "2 83 8770 3 3031 4 80 2 3 7 883 7 9 6 8 5 3154 8 2"};
    vector<string> purchases = {"15,11:1", "31,7:2", "18,13:7", "41,8:12", "11,18:17", "31,11:22", "19,10:27", "33,6:32", "5,17:37", "1,4:42", "14,16:43", "0,2:44", "6,9:49", "30,9:50", "21,5:51", "28,3:52", "30,8:57", "38,11:58", "6,0:59", "12,18:60", "21,1:61", "1,12:66", "11,13:67", "16,14:72", "15,17:73", "23,7:74", "19,17:79", "19,12:84", "23,2:85", "30,8:90", "8,8:91", "28,1:92", "10,8:93", "15,10:98", "26,0:99", "27,11:104", "38,13:105", "35,6:110", "20,16:111", "26,12:116", "28,4:117", "38,8:122", "22,1:123", "12,12:128", "2,1:133", "19,6:134"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> prices = {"9 7 5 4 50 3 3409 1 7 6 2 5042 2 3 5 3 7 3 9 2 5 2", "1 5 8 8 4185 3 1 1 3 8 6 6 5 87 7 6 3 5 1 8 1766 1", "6 7 35 8 9 5 5 2708 2 8 2 4 6 3 6 9 8 3361 5 6 5 4", "7 5 3 2 9 1 5 8 7 9 8 9 5048 2 2 1 9 3 2 6730 2 94", "1 6 6 7 6554 2 2 4 7 7 2 5 6 41 4 9 3 9 1 3 7 4964", "2 8 8 2 9 6 4 5 6 85 8 1608 2 3 1 6 8 8941 4 4 5 7", "45 7 1 8 5 2 1 4 9 4 2 1 7 4 6 7 8 9 6 7783 1 1914", "69 3 4 1366 8 2 4 9 6 3 1 7 5 6 8 8 5 2716 1 2 9 7", "3 3032 4 4 7 3 6 6189 4 2 5 5 4 2 4 6 9 7 1 2 64 9", "1 1755 3 3 6 3 7 6 2 7 966 6 4 2 3 8 345 2 8 1 8 8", "9164 5 8 4 1 3 9 6 9 7 5 9 1 3 2 8771 6 6 6 2 99 2", "4161 33 4 8 7 1 9 9 6 9226 2 4 9 8 5 1 7 6 6 6 4 6", "7 2 3 4 8 7 4 9 2 8 1 4 3 1 5 66 5063 3429 3 7 8 1", "837 7 5 7 9 631 9 1 6 8 1 5 2 2 4 2 8 7197 3 8 7 4", "7 1 6 7 5 6 8 2 3 78 1 9 9 8 2 2 2369 8580 7 9 6 1", "639 1 7 1 8 7 4 1 4 9 3 4 2 2 7 6 7 7 3163 8 103 7", "991 5 8 4 6 3 9 4796 9 6 1 9 9 5 1 9 6 225 4 7 4 6", "9 5 5 9 8 2 7 5 7 4 1 5 3 616 2 7 1 1573 7 4 747 7", "8 1 1 9 7 4 3 7 3941 4 7 9 3 8 2 8136 49 7 7 8 3 9", "9 6 3 5 1 7 9 3683 9863 68 1 6 2 6 4 4 8 1 1 5 5 8", "5 9 3 6 6 4 7 2 46 8 9 8388 7 6 4 6 5828 3 1 5 2 4", "1 5 8 5 8 57 1421 5 7 9603 4 6 8 4 6 1 4 2 8 4 7 7", "7 5 6308 9 5 8 10 5 2 9 4 8 7 5 8 6197 8 4 3 9 3 6", "4 3 1 9 5 6 6 5 7 94 8 7 5 7 1635 7773 9 6 9 3 8 4", "4 5 5 1 19 6 5 8 5 8 2989 7437 7 5 4 5 9 1 5 3 8 7", "4 1 9246 6 6 5 2 1 3 2 2 9 1 4 9 7 871 1 7 6 125 9", "19 9 8 7 7 4 8 1 9 4258 8 3 5 1 9 4 9424 2 1 2 9 6", "8 9 1766 44 2 7 5 7 8892 6 4 4 9 4 6 4 2 9 7 1 6 9", "8 9 3 1 2 9 2 5383 8 7079 1 2 2 6 5 9 1 8 82 5 7 5", "4120 4 2 8 5 7 8 1 2 4 8 4 2 66 3 1 7 3 5 7 9 7739", "3 4166 55 2 4 3 6 2 3 1 31 9 5 659 4 6 2 2 9 9 5 8", "7 7 1 4307 9 9 4 3 2951 3 7 5 1 8 2 7 5 73 7 5 7 9", "6 7 2 3 9 3 3 2 6 5 15 3 6838 5 3 7 4 7 9 2 3842 3"};
    vector<string> purchases = {"9,1:1", "24,18:6", "12,18:11", "0,2:12", "8,5:17", "6,19:22"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 57;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> prices = {"100 100 100"};
    vector<string> purchases = {"0,0:0", "0,1:1", "0,2:2", "0,1:3"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> prices = {"100 100 100"};
    vector<string> purchases = {"0,0:10", "0,0:11"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> prices = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> purchases = {"1,1:1"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> prices = {"100 100 100"};
    vector<string> purchases = {"0,0:0", "0,2:5", "0,1:10"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> prices = {"100 200 300", "600 500 400"};
    vector<string> purchases = {"0,0:0", "1,1:10", "1,2:20", "0,1:21", "1,0:22", "0,2:35"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> prices = {"100 100 100 100 100 100"};
    vector<string> purchases = {"0,0:0", "0,5:1"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> prices = {"1 1 5 1 1"};
    vector<string> purchases = {"0,0:0"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> prices = {"100 200 300"};
    vector<string> purchases = {"0,0:1000"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> prices = {"100 300 400 600", "200 200 300 100", "500 200 300 200", "300 200 100 300"};
    vector<string> purchases = {"0,3:0", "2,1:1", "3,2:8", "0,2:15", "0,0:21", "1,1:30", "1,2:31", "1,2:36"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> prices = {"1 1 1 1 1 100 1 1 1 1"};
    vector<string> purchases = {"0,0:30"};
    VendingMachine* pObj = new VendingMachine();
    clock_t start = clock();
    int result = pObj->motorUse(prices, purchases);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=272072&rd=4530&pm=1130
********************************************************************************
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <queue> 
using namespace std; 
typedef vector<int> VI;  typedef vector<vector<int> > VVI; 
typedef vector<string> VS;  typedef vector<vector<string> > VVS; 
typedef signed long long i64;  typedef unsigned long long u64; 
 
vector<string> tokenize(string s, string ch) { 
  vector<string> ret; 
  for( int p = 0, p2; p < s.size(); p = p2+1 ) { 
    p2 = s.find_first_of(ch, p); 
    if( p2 == -1 ) p2 = s.size(); 
    if( p2-p > 0 ) ret.push_back( s.substr(p, p2-p) ); 
  } 
  return ret; 
} 
 
vector<int> tokint(string s, string ch) { 
  vector<int> ret; 
  vector<string> p = tokenize(s, ch); 
  for( int i = 0; i < p.size(); i++ ) 
    ret.push_back( atoi(p[i].c_str()) ); 
  return ret; 
} 
 
vector<vector<int> > tokmat(vector<string> s, string ch) { 
  vector<vector<int> > ret; 
  for( int i = 0; i < s.size(); i++ ) 
    ret.push_back( tokint(s[i], ch) ); 
  return ret; 
} 
 
class VendingMachine { 
public: 
int motorUse(vector <string> A, vector <string> B) { 
  int i, j, k, x, y, z, n, x2; 
  int ret = 0; 
  VVI a = tokmat(A, " "); 
  VVI b = tokmat(B, ":,"); 
 
  x = 0; 
  for( i = -1; i < (int)b.size(); i++ ) { 
    if( i >= 0 ) { 
      x2 = b[i][1]; 
      ret += (x2-x+a[0].size())%a[0].size() <? 
          (x-x2+a[0].size())%a[0].size(); 
      x = x2; 
      if( a[b[i][0]][x] == 0 ) return -1; 
      a[b[i][0]][x] = 0; 
    } 
    if( i == b.size()-1 || i == -1 || b[i+1][2]-b[i][2] >= 5 ) { 
      z = -1; 
      x2 = -1; 
      for( j = 0; j < a[0].size(); j++ ) { 
        y = 0; 
        for( k = 0; k < a.size(); k++ ) y += a[k][j]; 
        if( y > z ) { 
          z = y; 
          x2 = j; 
        } 
      } 
      ret += (x2-x+a[0].size())%a[0].size() <? 
          (x-x2+a[0].size())%a[0].size(); 
      x = x2; 
    } 
  } 
  return ret; 
} 
}; 
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/