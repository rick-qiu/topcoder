/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10266
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class HexatridecimalSum {
public:
    string maximizeSum(vector<string> numbers, int k);
};

string HexatridecimalSum::maximizeSum(vector<string> numbers, int k) {
    string ret;
    return ret;
}


int test0() {
    vector<string> numbers = {"HELLO"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZLLO";
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> numbers = {"500", "POINTS", "FOR", "THIS", "PROBLEM"};
    int k = 5;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1100TC85";
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> numbers = {"TO", "BE", "OR", "NOT", "TO", "BE"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "QNO";
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> numbers = {"KEQUALS36"};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZZZZZZZZ";
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> numbers = {"GOOD", "LUCK", "AND", "HAVE", "FUN"};
    int k = 7;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "31YUB";
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> numbers = {"T0000000", "P00000", "C0000", "D00", "E0", "R"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "T0PC0DER";
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> numbers = {"I", "LOVE", "TANYA"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "10LCUV";
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> numbers = {"93K7XFUCPTGJWUDCPQY9TW0Y9B7Q2PWXQUUTFEZEHIFRIB03HW", "NX73A16PXA5LUE6QUQGN7N6BU67EUBZ0OICX1KBI9FA2CL12DW", "WPPW7YHK88YBBIO1QF3SFDLR1IY4LYCV8QJF6DRXV3TFDOF8BB", "8GI5V4WHLITBU1FGPXZZRGE7CVSLSIJU5QU4RIFIM9JY5CZ61K", "SE4H3ZSWY9VZFUD9ZVI86BORAGLLVQ9X0M9NBWTN4DUHHQC4QB", "1OQMXFC9P5MM22BZ4PCGG85K1JQIDU4OWIN8ULTL36ATYJO5CO", "LA5PS8WEPQQGKIBKK3AJJKMIDZCAC16QD2P4JM2ZGJICLQ3W35", "LJ426OYAJQR1JA2KEEKTAXKOPH4JPRUHCSXUTWMHQRPQYZ3NSJ", "YQGL4F859I9MI7NF3HS5HX2P72MKU8WDF3M0OPU7FHJ3RJYKJC", "G33JGBHDE2RB4QJGXXFX9VAOX38S28WP90NTSV59PPAZ8EK7PT", "Y60VRNHNOB9IOKW1QTU10OOWUEE4MKESF1LE18U1RK3A0T3VI8", "AY4V2AXS7MIKMRHQB0LLDQ93MJV7TZOAN8TH8N1GLIU348BZFU", "5B0FWG84172JESCVRE90OUWDYUQIN72DP6CZFDPUY83FE4PFSX", "RNCDVS1CIJNA9LJEMGNK8HWH77V8ZU2M2YLMM9XYM02RWX5GQ5", "BXDSXXW4LP8HZE5LY8O8BVCA5OS9B76KAC3FTGS5RNH98JKD0V", "X4M33FMQNY4R6EDTR25PM05SMGQKLCBBPA1GI8S51RWMHIDE39", "78A12DEUOE2RIHO1JM96GRFY7NJZ7A8K3DVDB9INK9I27AXOU4", "8GVY77WXG6ONPGO8JQ6WIJ5Q3XZRWEF9GYWPLN4YXKQVGFLTLN", "HBVNDOL5JYHDJ609VLQY8ICT89QV8ZJBL3WJKAHUI3XR8W8OMP", "P3WQQW3CA4PCXNCDT875S8KEVL96J7ISFN03PWAM6HYDJ65YS9", "539TE7CZ7PHIG3OISCJ3QRV9PE9AU5SIEC97QYSUDWR1TJ65NM", "72EE9MCI4XWVQECERCA4Y5U38VJJJFBC8IACKR5P9U6KFRI4E8", "R84THEWU249MS9VCDGHS1RZE6BJWUPI6YZUNVRUHAVPJ9JXPNO", "1STASRSSNLENYON24GFXEYOZ5FAIXW6ZNSYP7QI58ZLSBEKAB1", "9KX798QWM0ZI0I5RRBZUC8NR4AS7KJ71B3ZVHXJ6B2W75DRM97", "1AQF41UN87FRX59Q99DZIRN31ZQU1BAAB1RNSDZP4P0Z20JMME", "FWGR8UHYS90MECZOXFPS0KL54BI5DNZ1QQ3MWCXHH03DYYDK9W", "SQLQDAOZN3OLILS52AQ1P4WJZA1IURDQT6S1W0J85B90E8PDV7", "3MRL6HW3IA1YA7IFSK7EKE59MA3S27W6N4RWHEEE2BNMM5HD5S", "SPX5AZO3RY1FJAYY5Z2EV2IIXHZ58MJLNVB1QF94HZSN15S7Q", "U891OKNOIPYT9WXR043VQVXTB1MVPO279SPEU36GTW49FBNY21", "ZYHAIHKWAQMZQCHNUFAFDI3RS7MLZF1TR700YTX2JQVE04PW6J", "GRNSHY1SRSUGV7XPEEIV1S2FOXDP7LN4L7LYOTTIXDQKM6ALJP", "IF5XITKWVG8YHIOJVEV9WDH2UI9N2X1XJXXXFG90BZ18EXHIB6", "TQ0V30Z8VOXOBX7KMS76S911YQHNIMX2Q9SVOKLTGFVUIEC8Y2", "4GGZ3N9W5V47UICIPRDISM32AAKTVF7ZF2TT4ZB8BOBHAQYO5B", "MW98WVZW5KVI584BPRFFEA57YEOKBIEU55FBX96IRTKF169Y65", "ZKXRCHMUKNREN1XY9WBMEVLJBWQNN5LLB98BWINGM819X37FG2", "6INPNKN9I63LL2PFQT786QNBJM7MFWA7OHAOOJ6M7T6D1V0CT4", "4J4YNK2LAOF3PWY91G7ZPT76I14MPDV6TB3BPF0TYT72AU7J3K", "I64ACGGK7BZ5D2VCJS2Z8JT11671M7XLN9J90HCHZ6LGRW9EM4", "414LCRJ4END5I0G65N4MFNFVZDIVD6B0D3KEZVIXA1QD49ISA2", "2RQGQA7228YECVJC1Y0Q2Y2TWWIQ5NFTSHBPEQ0YXD6M50DQFS", "M4JVHO4WPRH88VQV0P4SOQNPJG0JUU61WBKPZOQM8OETG0UKM5", "YDA5PRZFYD20BFSZ1RLYYBYQKJZNMWR95QEAO4U0PC89AA4B5Q", "2X3E64DAWU2N1MAGBE4FUMVZQB3GPV9LO5HAIZZUEIN9VB4GXV", "LG1OQR2L8E5S4OHGHK0HDTR3FOKXRYUDP1ZJCXV8S4ZINN2SDT", "4N8LIWWJEFII6Q11IFLJZ29AL22GODKQOI0F8T6XGA01U17GXN", "1JBNQ0CTVE9LF2V10FPIRMQC3R9IWDVD3NW6R4EOT6C3DPD57G", "SBSW40X7KMPVFRWG0NHYVZXO3NRK4RC9J9VNF1W9I1B70XBBZO"};
    int k = 18;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1B9KG009JCTTFOMNN3QI86HEHJENK39KL7NM34FCP3JZ7AYXF6H1";
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> numbers = {"BX1ZLKFS18WXSSMI159Z920L778ERL1SATY6J6T6RAKR57EOZ9", "NP8R1775H0K9MSW7GBU7XCVMEXUEBDOADIIB3FVEUZZX9DKVSO", "ZS2KXNYRYFTNMOZ9I0MFJTWZSGC9FFD4WPDGP4CTHCPH5O7H9M", "ZXXJUXTPN6ECSB49W774BTHB8T9GYD9IGZW2HWUMAS5UNJNELD", "R2BP1LYIRV7VHN46P7D6Q9VO30VVZKAZXNDN8IVF9P5MHK2IR5", "K9BQAGHTD07WPKKY7Y6HEC2J0XBD5HSDVUG7VMAY9FU0G2SE47", "Y91BRAVJQ8ZSMOT0ZDN70T8Y42UXO34UIO5UOJ58YZF031BXD", "VYTEF951WSMVSOUR6ECAF8ZT0LY8NM3UWXBDN2I496SAE05GPC", "6IV9WTSSFTS9EUAXSY3XOEBSMPVIZCMLI2U2MVORHYHXU0E601", "NRRC5TH4PQJCMLBJH8ANYOE4BJBYUYLD78F3PY4W4G0CTU8910", "I8S7R3J9VGQGTGWPTCUAHQWMMFRSTHYCID7EGY0CFBGTSPY7NE", "AETMIFNOAQ77SWZE4UK4BD0EX4EARK21OBKX29CAR2HA8137DI", "GEL1NQCGA8U6TRJIJCBNZIT1CH4UK8PVTUOADBCSTFU94J9WRU", "MGUNJWC9F3NKOTHVZ98BX35JJOPY5WHQZL97DSTYB83RUQO8MA", "BXJA92W0U6FCBQ4AJL7VQSZG53JEUZCWNEX7SC0IBY5H1SAX0F", "990RVNMB24OKIVE5AP7L37DMA3Q7G41C5Y6OIESSKK5N45ML9I", "RRIQV1QCSN7N02XZM7KZGG5YGCUUG8QEEPQI3P7XS2RIBFZAHV", "WEZSQW6ZYC3O40X1FMWODWNSZXBB5RLYGB6X5G0CF6MM5ZUAEV", "MKRUIFEBHOMANLC6FJ560EU5ATZVGRJR5LTRSW497JYM2SS1LV", "C2IKD68249RJXHTKU36KYKY16L1C6Q2Q9I1IWGOAIMMNRXLU0S", "KYBA6ELUHV2RQJAFF9XCUHGDMVEPUCH682BNDV045U4A2AQ6R6", "KEZQOY3TB5HM84N5M11TKZHI3BYJRJFYNFB48N6X5A0R3VIRL3", "ONT0S20DVEGR2LKE5XNTPINSCGW5WW8OTWNS1DWTSMSJIEDHRF", "RPDNR3ZX950Q6S05EQ080O6HL2Z3S3F0VHLBICX2RIGWOOS2TA", "98PO2VNXVM4RI4MCI73CN8TAZANRQFYV3UJ8X8L6VCECAB2E2Y", "TM7GS1P5NPH0BTL93GTLXCXV8S56MP007F39VRY0WDKQTEMM78", "AK3EA7VBFE59RJTPFU7WBT7SOKPVQSS1DCDQEN8CISU3MPF1QX", "SCOQ17ELNFCJY6PP0A2UUFT5B3JCYU3SHG6BI2EXP8KFVJBY1B", "9QXEQFL5C7D45B516HE2CSBEBUWTU1HNAM9AOM13IVXMZZDCEF", "41XHBYA0JBFG7IP4D93SGOEQVS8TS3QNN1UDYYV0F4O9YLA6BS", "G50P1ZOT2GUFD0QDTWUBBODZR5F153VG8V8T9NZJ41V0TQNHJL", "Y0JQ8DDB3EMFE3WC4OPNHILE3VRBD2T1QVAQ4EOMGSB4ZQZW0W", "PN206VOJ8MHZDYYP316ZDESN4G8LZ0M0D7QZ3DNZGS8BZ3SC6T", "SOONDZ60I3F93INNO41EVOYCJBFATHK4FRDW85WOQWWAYV666R", "936HK4VJKGZT4SP6MBF1XQIUXR2HDSO1J18PA9EM6LNZBHDN9J", "TY8Q2Y4HSRGDRP5JO5I9ZH4RLLJQBIKW6O0L9H2BRYDJ58UDX3", "RXZ795W4UVMWA87EQINWD62DTSPTZYD7WEK3FX4530GKSZFT42", "CSO468CIFBBA9M25ENJG52Y750V6A27462M8ZQ5SHE8WRYNZVK", "I3BAR85EVD6O8XKSVOQY9M3ALWV9A0ZR8BA7OR1ONRAPQZL62Q", "IVR0P1J2WQDDNO72N9MFM4QOI6ZPYPWXE3Z9IKKBNVCOPSH7", "C0QYMQKGNP2270TPATIFDEOE0KU7DB0R76E84JNHG2V3K4LA8B", "6O7XH8P8EOM22YHOU0YZTLJ60WQNDJ3PZRH8G3OP81GX9W4CBP", "N5P2Q5SQI7SCHX073VYS6Z7DVRONVR9E3PXO7J43NHUGRSL9I0", "AJQKT1XMQ9ADBXRTXMB5KMXCVP4V3TQGK0366KNL8PLG6TOB2K", "Q6B84NOQGM2H9IWBCW2P3UEWV3Q9BKMLE3813BE7EB7M1473Q4", "WDCMUQW9Z8PJO9HQSANFLSG1D8OQBCVLQQG8J2BN2CDQAMF84H", "N16ZTOH25FYLME94L3WODWAXB9E5Z2YBYFICF0PK1VRR0WT2TO", "NB9D206TRP32QQGRAC2M8UEA68GUDCBJ0PTC0DZO4Q2CHS0HME", "7VISUGNWM9JX7CHGNVSECO20EEXTJY0W512VFSG1CIKXNR268U", "AAD92VUYCBZOD6X6JET8RFTBERVM2HO0HVODHZH6P0AAZIB5SB"};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1C10ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZYM";
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> numbers = {"GEZQ9G3R84WY0BXF76JYQM5IMBPWVSN38OQX4RRNXBLO2GQ4HV", "IZGE5CFKB02LKVVQ6J4YYSHD4S7QLCD4WAUHLBCNFBJ9V9S93C", "J7TL2P4BV8ECPJZICB0XLP0EOXNHJ8VCKPSBKLCY0MXVF2RGJG", "CQ8M4LHAU920MOKRT8L5P557T3TXW6XFV7180YGOCRI9ZRSQ3K", "KC808RMOGQNX4YDTJ316LXVKBZD6L4BFOV5CTQSN4CW3NRVW1M", "QODI2R5HPPAFJZVESPV3OLW19D3NXUM4PLVGGUYENC7A69UALB", "YGHH3DVL4JEW5MSSLEHT0RFAQD2B3T744WBRC7MSAEJB73VSMH", "E2QT0Y8GF3U1CRY76CITX89B2C573TJHHHW8VX4EVJ3VXKIO0L", "QOYDOEZ26LLTGRRDJY91S3EIL10LF5J9EQEU8VQN4MSGX89KXA", "YAOKFUX4PKS4HO66QKL174PI424ET9MUFV7WOCEHDZ9NEH0HYJ", "G8LHBB9POB85FKT7U9DQ1CGYZAQW3LQ2IYIQ7WZ4QN3DEQVY2U", "2PPSKCLATIVNEMJOZRB06SZN0JXYYVD1PXYMFQAEYE26XU91EG", "E6XVL4EPM53186MY8KWERZ72Q0WNGQKMWQG8AGKBBLZO7QKDL6", "198YMJ1CK4UHM25W1F9LRD6UX7SAOOZTZ0FT47LNTIA56H4O6Q", "942ANUV8KHGB1M11KOIY5T5BKO6LNXI5I4GVCUFN2YTP7NMEF6", "F5RXQ9H0Z09BTBTCVH7DSHWK17NPDVALJJQID6X8CCBDXNG11V", "IDVYO4T5DHXYXO8DPDJ7PJD4WFY672N9N15IZL9S1H8UNWYEIN", "ANP3LUUL1RDVACEYTTG0TD608E97WP8UCYU9YYSXJUTHD7Q0NR", "QFB12837458WAP3WZEQV47VNUG9FYD3CH22XO53L3VZ2CDJC1Z", "MYZ3O1CZ52KM7UD5N5TIOKI23P9CAFZKQHB1OMOT7LEMQP405P", "11DS91DS9CPGQQIQTDSQQAFYHK0NE2ZMO4WORNIOTHNX97UXW7", "MCXAOJ6Z2IXTXSS35CWB5AK9PKJRZ7SIJ66BT61PHCHS75831L", "44QYKE4CK9LQH2MNXFI6ZXLHTOFIN0QYEMOEZZPCDLPKPHSU39", "AA35BCN6KPDPIM5Z8WEHYWZUQQ08KN61OQR86MS2ZHLPRJD0K3", "KL0JF1I7NJOI6JZ4OBE82AGJ7I1CJ0P4HFN1RD9XOJ2PK6HMQX", "U89Q5KVC1BOWMLIEAA23KRV4N4DUBQ5UYY8GM41AKIA55J78YG", "FJGLU3NF44IJD8WUTLSTXBMNGVZGEZDWY296YZCXU4YG3LEMUA", "Z5J4B7OPS961U5S6SA995P4HHEBPV69VXLJAW92U0DY5DY0F7L", "N4MF1ISTBQEMWMQLI9RP743OBCKATH2SSNIM71HGK3MAP1VIO8", "F16WAE7ZPAD0AF1QODOH0NWLVNLKAP49KKL6SDRSMCVU84L32J", "3UR4BD5FHS9FL917LFNSETXZGTNCEAUONP015V1JDEEXOXRLUU", "UAVER0EWMK5PB2X7W10VS384UEQST4I27037XDX4N8BKUO54H9", "PFBG0SZZT9HU8DHIBAX99KNO3U04ZPN8C134Q8PSUJ4I9MBT1Z", "U1OGX9IHISMWAXCECTFI9UEM9L898FZZEAF058C57QT43TANUG", "4L77WDIAG9L9780SULEU3B1RRHNT5638UOMRIHQFM9QO04OJ7L", "393E5B8JGA1Q4FPWVH5GUL0DVJW92QUJ5NCJTLHJX0GDPLRMS7", "JOX3DC14ROHQ40R1QREHB8CA2I8I45JQ396W0I86NNU6DMKJTV", "GJ00TTUWN3VXPU28ZPQSBWWUSUY4M4YKO2DSHS0KOH6I9AFEVV", "UM2X68IQABBQ9AW2Q38T4VL25GKPYFFI723DB2V1Q4GANE17Y0", "YZWLBDZHEQ5THF5RXSI1E7RG9MS19WE7BTDPG7TAUZBUY3KX16", "527TQD9J15R9WY0AVM7GVRGYIOVQSCP0XG4O6ZIUMKY2V1IVY0", "ECBR65J8H8SE67SRJUIJB7IWCT8W8FFWL8FBB0ZD47WZI4YZKI", "89HBDNMRDIGBEOWOEGKX6O9Z3NPLVDV3TJ4SQ1KSAGDB9Z3HIC", "N99LKKUJNUBIU8SRS7T76HDT2PKULL175A4FRN193OACFSOHE3", "N4H8LDH5ALG78CVAE9RO83Q713AQ1ABXZJQZHEIUJWFQE4EHH1", "NSCX336CPCET75E1BJ0RVDRRSPW0GZLJLRX3NGF1K2DU6472Q9", "PW7TMHKY0J1XMBW60NORWDFII6R8FVMALW1O2PDH3BLEBT3844", "G2YXIJFPSQZJSI7ASXDGGGJ1YE4ARVAO2S5KM7RGKVEZ5EMCSZ", "Z0QAPGDWBTNQ41ITEK8R5FRV4YT8ER7QOZRKZFEUV9N6OHPISF", "IN7TFV9ZYYNW6IFDP5SW23KES8KYGPR25KNSZZPIX70PM2JFF0"};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZYM";
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> numbers = {"H46CVCAMKTT6TZ8JWD7ISZ4792917STIFCD4WZIMZVK7RFM593", "GWCD1V8NIYK23AIK3XJQ24GEXWDP8H827O4YCW0I65QX0A84F7", "S8EY9LLTOUG62MI5OAE7OT2ES20CQ5IMDOR94DFTT8KQ6IDGM", "IC901VTNODWCMNNUGFWIA3M6YPUSBE2W0PC7OGP25S4BUKEM1L", "5SF4YDI8NP6X2P7DCRODC9P1NBIG77BD332N3NBYMXRHKCV7Y0", "3WHXDH9BXRF5HWKHLMUPN5FXITL682N562FE6S1M00D5663SKJ", "GZNK1DDVCNUOO59IZLX7CVD2GVH74MORSDEBQC1TV9OSZVUNGZ", "FDT27W16QYPIP85EU2Z8TZDM32DXLJOKADBHEPIXRBRROOD5TV", "KQLXZFU4BTB0023S0RHWB3S5YJMGTB1AHW0GWD2L4VVKBM7LAT", "K4WQE9OSVPD469338GACBYU6DD010AVYF5OXJF4CQ7FEPAW056", "D8HQAR1CYPNQOTJ05WLB9SRHVK07SO9XC1WC2D54JJ9DXBYYRX", "CNSMNQ5MGDSGOAHS97IN9ZR2TY2PCD0DW1745V735LB0721OON", "Q1YX1F7SWL4WGNT1RE9HG475ZD879VMZMU1QA87LFW8CK906FE", "2YWGLOOVVWFQYGT4ER1TGKVWCSWUUY1VR9ZD5DK5SJVLZAQU26", "AYJBT4PG100S3FR4RQMU28CQVXBMKS9RI2VX2I7RJJL2XJIZP0", "O6UFI8S91L8IB3Q6SZOBGCZ935MEQZV9TTWDW1Y7L9FFODHTJE", "Z2L3Z1EA037XT1GTF2SDRHRMOTZJV66PMOI06VSSOLTEJJXJWS", "3MJTTO6QY8FYSQFDME7UXS1KOLPKEV47CDP3CCY3JT8G7VKN3N", "O2UH7NZGCFZ619RHO7BIRMPBVK8XEGNHAQ1Z363O31O7Z94WW6", "6Z5VOHIRK4MYPQQ6AADEJK2YB6ISWVR3OKG8RRR1R75OBGORVH", "GDW6W6OTEU8TR300OYDBR19C7I3XVWDIKZYARFF8QNVDCFQZO1", "607ZF47MFM05T9OWOCBW31VU6A1ES43DUE8MHNXI97W4LMHP2J", "RF4AFB6OBFI28NAQJALEC26L8HHFJRDOTDUHAEKPOZNC9EJZDX", "QEPGETTZPG18VDNQGJKLOUPKCG2ZQUG1V1J4V5FHSE353W012W", "PWEPXV3UBL5OZQR8NZ25XWP0FDN77FOFCHD4WKTYF9AJRN3B34", "5F28UVMK9ZXL6EGYT68FT5LSO810H162XXQJWL18VMHTCM78L2", "HDRPSU28LODPIMVQSY0QPQJ6OXUA3H89A9QXPYAQS15YXW152R", "QRJ7EHTF82UCWEA670VFDLD22YJF5NG8Y44MSZPAZ3HMDC4716", "IFHFPB9BRYMZWQ08VU6WQ3FZ8K26FHHIOXUKOWR38ME0ASKGXH", "64R1RPNQ34WB634QXXLJITUW5VJVP371I83V5RKZ6N8060FHAA", "EJBDTJ5WNOXFES3KPWK4ZHNF4YV7WOM0FRV9KODKJU3MYVX4Y2", "Z59RJCAO3MMKS7NMTATRCM75GW386LRT4O0PFFHQ26GARPG6MT", "KIAZMHOCSP6EL8O12HO0FRBP0SO0T1NL022SUSR2SUDNDY9YLL", "4JYGW0NVSC5B6VPU5DV072M5B6L6BNXVEOSN6UI3JMIUDBELO8", "RARBKURI7Q7RSIOCR8VXKYGGBXA15DF4JSORN2LUQY5E1YSMO4", "6VFN76LGUN9MS0BRKBPPS57UC5W27SDDNDKBOUWYX6A1V06IES", "AJJ04WR0UZ3DO48X7VS59I753QAH7FJZQ53SK8CGK670HI73A1", "OK6PBGR1GYJ0TM6XWI2IVE2HXNOUBBKFL6STRJOQA6BTCGG5KX", "P238KZCE3GP1KEXWNNX7GUG5OHQ39UQG3OLRM63JPRTNJ888VK", "4T0Q50TQV5YYCABSTA0UILFALGIX5F2II3I4B3VC47P5B81D5J", "R4L96LASBFIFC25AD1HZ267QG1TVC2VP6FXGXDLTIF9WEB10AU", "UGM788XY4GYZ4FWKRCMBJSEHI8DZYE986GRGR4K4OXZUYSPLZ7", "A9LU4XIFXBP0H7Y7RZMRMKZY5ZACQZ5KX4M1I0LAA5VXG3B1T1", "5G26SXNBY3DHE5JUVH8QBA5YZJXMYJ9U0IONWW79OH96KX5HW4", "OYCKQQHUYR9IDRA5ZHAM1W1G9H20U6SYYDG0S1N7TUAXF7FKA0", "4LWTKBM51QO4XV2IK7K1OG2IOZTM9VNGLY29NXQ97MPL3RNNTE", "UIMWIRQ2TN36VS6NC0JJB5XG2ZHF61EMXRI88XESTWHJKUD8YD", "EUCM75TPPMWMNJLN6PNM9X65JW2BVZSCC11PQW5AO2S84J7PDY", "AUJH95L9JNHW5E9QXSR06CTGLJFPJYR23V3PJTIJU76NUN01QK", "921IUFU0CTZ1VL8BGYD3GIN33OARCGJ3TSYKWKTZTFE53J26RU"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "MM648FN4IA6REW45JEPWY2LMBROD6WZ23F3PWB32R1VW900A1CE";
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> numbers = {"SATOR", "AREPO", "TENET", "OPERA", "ROTAS"};
    int k = 4;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "4T354P";
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> numbers = {"FRACTURE", "OUTLINED", "BLOOMING", "SEPTETTE"};
    int k = 8;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "3ZYU5Z0GR";
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> numbers = {"ISICHADAMION", "SERRAREPINTO", "IRAASIMELEIS", "CRATIBARINSI", "HASINASUOTIR", "ARIBATINTIRA", "DEMASICOANOC", "APERUNOIBEMI", "MILIOTABULEL", "INENTINELELA", "OTISIROMELIR", "NOSIRACILARI"};
    int k = 12;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "BZTL5NZZ4U1FA";
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> numbers = {"AAHS", "AALS", "ABAC", "ABAS", "ABBA", "ABBE", "ABBS", "ABED", "ABET", "ABID", "ABLE", "ABLY", "ABOS", "ABRI", "ABUT", "ABYE", "ABYS", "ACAI", "ACCA", "ACED", "ACER", "ACES", "ACHE", "ACHY", "ACID", "ACME", "ACNE", "ACRE", "ACTA", "ACTS", "ACYL", "ADAW", "ADDS"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "WFHW5";
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> numbers = {"ZACKZAGSZANYZAPSZARFZATIZEALZEASZEBUZEDS", "ZEESZEINZEKSZELSZEPSZERKZEROZESTZETAZEZE", "ZHOSZIFFZIGSZILAZILLZIMBZINCZINEZINGZINS", "ZIPSZITEZITIZITSZIZZZOBOZOBUZOEAZOICZOLS", "ZONAZONEZONKZOOMZOONZOOSZOOTZORIZOUKZULU"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "4YOEZYOWWYP6OYPG1YPRIYV7XYVFCYW85YV69Z195";
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> numbers = {};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "13QKJFQKJFQKJFQKJFQKJFQKJFQKJFQKJFQKJFQKIC";
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> numbers = {"AZZZAAZZAZAZAZZAAAAZZAAAZAZZZAZZZAZZZAZZZAZAAAZAAA", "ZAAZAAZZAAAZAAZZAAZZZZZZAAAZAZZAAAAZAZAZZZZZAAAZAA", "AAZAAAZZAAAAZZAZAAZAZAZZAZAAAAZAAZAZAZAZAZZAZZAAZZ", "AZAAZZZAAZZZAZAAZZAZAAZZZZZAZZAAAZZAAAZZAZAZAAAZAA", "AZAZAAAZZZZZAZZAZAAAZZZZAAAZAZZAZAZAZAZAZAAAAAAZZZ", "AZZZAZZAZZAZZAAAAAZAZZAZZZAZAAZAAAAZAAZZAAAZZAAZAZ", "AZZZZAZZZAAAAAAAAZZAZZAAZZAAZZAZZZAAZAZZAZZZZAZAZA", "ZZZZAZZZZAZZZAZZZZZAZAAAAZAZZAAZZZZZZAAAZZZAAZZAAA", "ZAZZZAZAZAZZAAAZAAZAZAZAZAZZZAZAAZAZAZAZAZZAZZZAZA", "AZAZAAAAZZAZZAZAAZZAZZAAAAAZAAAAZAAZAZZAAAZZAZAAAZ", "AAAZZAZZAZAZAZZAAZZAZAZAAAAAAZZAZAAZAZZAAAZZAZZAAA", "ZZZZZAZZZZAAAAZAAAAAZAAAAAAZAZZZAAAZZZZAAAAZAAZZZZ", "AAAZZAAAZAZAAAAAAAZAZZZZZZAAZAAAAAAZZAAZZAAZAAZZAA", "AZZAZZAZZZAZZZZZZAZAAZZZZAZZAAZAZAZAZAAAAAAAZZZZAZ", "ZAZZAZZZZAAAAZZAAZZZAZAZAZZAAZAAZAZZZZZZZZZZZAAZAA", "AAAAAZZZAAZZZZZZAAAZZAZAAAZAAZZZAAAAAAAAAZZAAZAAZZ", "AAAZAZZAAZAZZZAZZAAZAAZZAAZZZZAZAZZAZZAZAZAZAZAAZA", "AAAAZAAAAAZZZZZZZZAZAAZZZZZAZZZZZAAAAAZZAAZAZAAZZA", "ZZAZAAZAAAZZZZZZZAAZAZZAAAZZZZZZZAAAZZZZAZAAZAZAAA", "AZZZAAAAZAZAAAAAAZAAZAZZAAAAAZZZAAZAAAZAAZAAZZAZAZ", "ZZZAZZZZAZZZAZZAZZAZAAAAAAAAAAZZAAZAZAZAZZZZZAZZZA", "AAZAAAZAZAZZAZZAZZAZZAAAAZAAAAZAAZAAAAZAAZAZZAAAAA", "ZZZZAZZZAZAAAZZAZZZZZAZAZZZAZZAZAZZAZZZZAAAZAZAAAZ", "ZZZZZZAZZZAAAAAZZAAAAZZAAAZAZAAZAZZAAZAZAAZAZZAZZZ", "AZZAZAAAAAZZZAAZAAAAAZZZAAAAAAAZZAZZAAAZAZZZZZAAZZ", "ZZAZAAZZZZZAZAZZAZZAAZZZZZAAZAZAZAZAAZZZZAAZZAAZZA", "AAAZZAAAAAAZAZZAAAZAZAAZAZZZAAAZZAAAAZZZAAZZZZZZZZ", "AAZZZZAZAAZAZAZAAAAZZZZZAAZAZZAZAAAZAAZAZAAAAZZZZZ", "ZAAAAAZAAZZAAZAZZZAZZZZZAZZZAZAAAZZZZAAAZZAAAAZZZA", "ZZAAAZZAZZAAAZAZZZZAZAZZAAAAAAAZZZAAAAZZAAZAZAAZZA", "AZAAZAAAAAZZZZAAZAZAZAZAZAZZZZAZAAAAZAZZAZZZAZAAAZ", "ZZZZZAAAZAZAAAZAAZAAZAAAZAAAZAAZAZZAAAZAZAAAAAZAZA", "ZAZAZZZAZAZZZAZZAAZZZZAAAAZAZAAAAAAAZAAAZZAZAZAAZZ", "AZZZZAZZAZAAAZAZZZAAZAZZAAAAZAZZAZZZAZAAAAZAAZZAAA", "AZAZZZZAAAAZAAAAZAZAZZAZAAZAAZAZAAZAZAAZAAZZAZZAZA", "AAAAAAAZAAAAZAAZAZAAAAAZAZZAAAAZAAAZZZZZZZAZZZAAZZ", "ZAAAAZAZAZZAAAZAAZZZAZZAAZAZZAZAZZAAZAZZAZAZAZZZAZ", "ZZAZAAZZZAAAZZZZZAAAAZZAZAAZAZAAAZAAAAAZZZAZAZAAAA", "ZZAAZAZAZZZAZZAAZZZZZZAAZAAAZAAAZAZZAZZZAAAAZZZZZZ", "ZAAZAAZAAAAAAAZZAAAZZAZAAAAZAAAAZAZZAZAZZAZAAZZAAA", "AZAZAAAZZZAZZAAZAZAAZZZAAZAAAZAZAAAAZZZZAAZZAAZAAZ", "AAZAZZAZZAZAZZZAZZZAZZZAZAZAZZZZZAZZAAAZZZZZAZAAZZ", "ZZZAZZAAZZZAAZAAZZAAZAAZZZAZZAZZAAZZAZZAZZZAAAAAZZ", "ZZAAAAAZAAZAZZAAZZZAAAZZZAZAAZAZAAAAZAZAAAZZZZAZAZ", "AZZAAZZZZAAAAZZZZZAAAZZAZZZZZAZAZZZZAAAAZAAZAZZAZZ", "ZAAZAZZZAZZZZAAAZZZAZAZAAZZAAZZAZZZAZZZZAZAAZZAAZA", "ZAAZZAZZZZAAZAZAAZAAAZAZZZAAAAAZAAAZZZAZZZAZZAZAZZ", "ZAAZZZAAAZZAAZZZAAZZZAZAZZZZAAZZAAZZZAAAAAZZZAZZZA", "AZZAZZZZAZZZZZZAZZAZZAZZAAAZZZZZZZZZAZZZAAAAAZZAAA", "AZZAAZAZAAZAAAAZAZZZZZZZAAAZAAAZZZZAZZZAAZAAZZZAAA"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "UTWIWE5O7FHIESL6QI81UDLP1LBP0PQIUXZTFEUPHZ576TX2EHK";
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> numbers = {"EGHFEIRAPNIRXHHCUUZQVAWIALSJLSLOWGRSWQICSVWZFAYNCY", "KZQTSMJFGAQZJJVRMCQZIXADCUMEYXZVHXNQCTMUQJFXEXGPUN", "CVCJNVUXRGDDSRUNNXNDORTFANPGOGLWVKNMIWIKGZODEQVMAR", "TUWBQJECDKFBDEYOAMBFOCBDZEXHUQNHFRVKHZKCZVVWAOZHYW", "KILMBSLRLKXGEPZZCFDQKGSLUNQHYZVGAVJWDPAUJFCBZAYKDB", "LPRBRADLDDBYRDEANLHMUISHHOYBATPFXTKAIZVOWJOSPBKEDP", "FXCENKDYGQAKYRIBXISAKEOWNXXSQZKGUIIGNIIXRYVMOBCAYN", "THSFDPHRTTFLGPVRAKZAJYPGOPIDPMGBCFXSSFOKWIPPFNEECV", "DMSBMYWWBGIIYJVTABXRDVSGQDXOGXIGGIOUJJIMRUZLUWNHQG", "PIZNGCHFRYYUZTIRTBNSNXYTTXRBAUPIUUGCPZVVHDYHLJPVUQ", "AXDJJIWSPTEAMRFMRFUSAAAYHNMIXUSGRTXVYTGZKKQPZEAPSW", "FHIPKSPXVVDOZVBHDZBRPYKVWISBHLRWWVALIRIZVAEIAWYIEP", "HGZODHWRCYIJAIKUESQFUYXWEVMIJVSFJAXYFWRPHDXDTXUGHK", "NIBATIDGPOPYORTHPEOWGLUMQBARKVLVFXXWMKAPFQQVOVLTER", "GULYOMVHNRWPMAWHNPLWYNNRAPJZWBMZFMYVEROVGQXDBKEOAS", "DXVLQXLDNASVLOGUGMRMNAJWEXVUKYEVQPZXMGUSNUHEYJFUBC", "SHQGVGGHGCOLHXGMTBHEHJMTSQBRBGHTUAEUSTDVWMLMEJIMBB", "JMOYXPIDBKZYJDCUJNXEWXAWPISRZJDNRWLTXGVQDDRQTIBNYK", "DVRSQWVNAIGJGKLIPRJRFNFVXWQVZZRQUQXWWPPPKNOGNTWZAK", "WOJQIREKOEDWXTSYONTIDZOUSTEEMYRETPBXJQBUMISFOCQJFZ", "OAPDLKXIFOUVWNBCWEOXKMKQBOJWDLSANPDAIYHLLMAGMULYAA", "XMKHHLLLLMRCLZQTLBLIORQPCMUKWRRECIEFOYZBKPRLLQIINC", "VZRDPXOTOOSUSSXGQOQNUGURYVHRBJJOQKQDSGAJXMIWOUCLOZ", "SHPKXZEPCWDHVVXAWYZIILFRURJQLWFVNULWDWZZRLJPMLNNZW", "HWCJRUUHZMXHUKGIKIKDAGIOKHBSQIUPARGGBZVFJBWXPNODPE", "IJGDZRGNQMSAFCHWEEHNNJJSXTRTIWKNRXPIZDJTOQKBPVZJAQ", "LLKLSUSITVIXBDBDISZAIUVIRGDCUBKLWDXLMDGRDUXEJKDKLY", "MGDKIXDEIDITIXKUTFTLDPXENXVWGDWGMYDJVUZLTGLFNBTXJB", "OUISMHDWPUSLRZOCJITINQDDCTZETYGCMDNRNEPCBGOFFGQEJP", "YSGKFOUXPTHCHWBHXFWQCRSUADDCLIHWWSJJUYZVGTOCBRXXWS", "OICBCBBSQHLGHFPRCSNHXUCPZRDGXXYGOXRWHXRXTZPKSRVQHQ", "KLAOKAKJKQBBTYYLMWOADPWKEEMTSCRDDERSHWFICNLPLSMROB", "UTVBARPTJMWEVGHVZOBKLQUOCFCBPTKBNYVERQNBXCXUBUOCQK", "IFTGSRXMWOEWTDPBFMMFRKMFBFGYGNZXULUWXSWDCHZBALMRDC", "QRQKGXEWDATCWPTZYWVJNMIBCAEHXQPJLTRZXZNUKBADHGTLBR", "TZGVREUJHELYZROATKAWAOLSXRFUWPGEEKWEJOOMNNWJDLNPHT", "QRCWFTWRYXMWZAFQUPWSAZFKJASVUOKIUCRTBDCDDSJRJUBRMV", "VXZGQKESEJZXUVDTGITUMMQYQUNIBLTCIFEPBJJYAOUNWQSKBO", "OLHZRBTUHBELLCGBBYKYPIGPLVYEVTNYDNSSPTBQCJTZACOSZZ", "WZAMSEDABTDNNSABAOZCCJOLLXRKWLOQTLBGJVDZXHYFJXHACO", "ZKLWGILJCAEDQXXHAZXWPMZUYQLLJWJOVECQBCIVCVYDFMTRXQ", "JKFMYEYGHQPUOQIQVRVAJVREWHPRJJZCQCTIHOETZUFXLYCSOU", "ANJNHKYCOQBUDLAWVGZUJLPNLHLGILJBFGQEHRCXZBYPPTLEHP", "PIGLLYYAYJMVFYTHRACKMFXLZOLETIQUCCXGPFFTNNAVUPEVQT", "GLARQIVWQMOBJLZSEJDPDIWGDNSWJVIUXBDPGOTUUQQOEHDABU", "SVUVUOOPTPEJVLWQISVGBIDARHJFFVPXZISCUUNKIXKGEBXILL", "THPLWEWCSNANHYCEYOPEKVBBIRGIRSVTYEYHKFWMNISWFOYKLQ", "RTMLGHSOMIICSLLFSVLEJLAJYOFFDCATIINJDJRYZRKUQOBBXC", "BPGMQAWNLZBEFDNWXAMGFYSYWQKIYLSDJLICDQTMURRUADZCZF", "WSUCKNMZKMMJNALHNHQSDDJRDVESTYYMBYDFQJZFJZVCJMZOYA"};
    int k = 13;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1A21AJXUU86RN6OR3EP2KZPKKKRO19YII6LRLJX0Y88KUHM2OZ55";
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> numbers = {};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZYM";
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> numbers = {};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DIZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZY6";
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> numbers = {"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZVZZZZZZZZZZZZZZWZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZFZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZLZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZTZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZKZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZHZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZNZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZBZZZZZZZZMZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZCZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZIZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZAZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZRDZZZZZZZZZZZZZZZZZZUZZZZZ", "ZZZZZJZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZX", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZSZEZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZYZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZPZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZOZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZQZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZGZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "19ZZZZZZZZZZFYJZZZOZZZWZZRDZAKBLZZZYYCZFZ2ZZIUZQZYO";
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> numbers = {"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX", "BCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY", "CDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ", "DEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZA", "EFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZAB", "FGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC", "GHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCD", "HIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDE", "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF", "JKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG", "KLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH", "LMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI", "MNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ", "NOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJK", "OPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKL", "PQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLM", "QRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMN", "RSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO", "STUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP", "TUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ", "UVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQR", "VWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRS", "WXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST", "XYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTU", "YZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUV", "ZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX", "BCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY", "CDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ", "DEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZA", "EFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZAB", "FGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC", "GHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCD", "HIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDE", "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF", "JKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG", "KLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH", "LMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHI", "MNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ", "NOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJK", "OPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKL", "PQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLM", "QRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMN", "RSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO", "STUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP", "TUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ", "UVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQR", "VWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRS", "WXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST", "XYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTU"};
    int k = 11;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "18100000000000ERPNLJHFDB9753100000000000ERPNLJHFDB7Z";
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> numbers = {"NO", "NO", "NO", "NO", "NO", "NO", "YES", "NO", "NO", "NO", "NO", "NO", "NO", "NO"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1BAG";
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> numbers = {"Z0", "Z11", "Z222", "Z3333", "Z44444", "Z555555", "Z6666666", "Z77777777", "Z888888888", "Z9999999999", "ZAAAAAAAAAAA", "ZBBBBBBBBBBBB", "ZCCCCCCCCCCCCC", "ZDDDDDDDDDDDDDD", "ZEEEEEEEEEEEEEEE", "ZFFFFFFFFFFFFFFFF", "ZGGGGGGGGGGGGGGGGG", "ZHHHHHHHHHHHHHHHHHH", "ZIIIIIIIIIIIIIIIIIII", "ZJJJJJJJJJJJJJJJJJJJJ", "ZKKKKKKKKKKKKKKKKKKKKK", "ZLLLLLLLLLLLLLLLLLLLLLL", "ZMMMMMMMMMMMMMMMMMMMMMMM", "ZNNNNNNNNNNNNNNNNNNNNNNNN", "ZOOOOOOOOOOOOOOOOOOOOOOOOO", "ZPPPPPPPPPPPPPPPPPPPPPPPPPP", "ZQQQQQQQQQQQQQQQQQQQQQQQQQQQ", "ZRRRRRRRRRRRRRRRRRRRRRRRRRRRR", "ZSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "ZTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "ZUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", "ZVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", "ZWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", "ZXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "ZYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"};
    int k = 18;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "11111111111111111110GWAO0BLV3AGLPSUUA";
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> numbers = {"YRYYRYYRYYRY", "YVYYVYYVYYVY", "YVYYVYYVYYVY", "YXYYXYYXYYXY", "YXXYXXYXXYXX", "YXXYXXYXRYXX", "YXXYXXYXXYXX", "YYXYYXYYXYYX", "XYYXYYXYYXYY", "XYYXYYXYYXYY", "XYYXYYXVYXYY", "XYYXYYXYYXYY", "VYRVYRVYRVYR", "VYVVYVVYVVYV", "RYVRYVRYVRYV"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "EJJJJJJJKLJJ5";
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> numbers = {"YRYYRYYRYYRY", "YVYYVYYVYYVY", "YVYYVYYVYYVY", "YXYYXYYXYYXY", "YXXYXXYXXYXX", "YXXYXXYXRYXX", "YXXYXXYXXYXX", "YYXYYXYYXYYX", "XYYXYYXYYXYY", "XYYXYYXYYXYY", "XYYXYYXVYXYY", "XYYXYYXYYXYY", "VYXVYRVYRVYR", "VYVVYVVYVVYV", "RYVRYVRYVRYV"};
    int k = 3;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ERRZRRRRRJRRD";
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> numbers = {"YYRYRYYYRYRYRYYRYYRYYRYYRYYYYRYYRYRYYRYYRYYRYYRY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYXYXYYYXYXYXYYXYYXYYXYYXYYYYXYYXYXYYXYYXYYXYYXY", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYYXYXYYYXYYYXYYXYYXYYXYYXXYYYXYYXYXYYXYYXYYXYYX", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "VVYXYXVVYXYVYXVYXVYXVYXVYXXVVYXVYXYXVYXVYXVYXVYX", "VVYVYVVVYVYVYVVYVVYVVYVVYVVVVYVVYVYVVYVVYVVYVVYV", "RRYVYVRRYVYRYVRYVRYVRYVRYVVRRYVRYVYVRYVRYVRYVRYV", "YYRYRYYYRYRYRYYRYYRYYRYYRYYYYRYYRYRYYRYYRYYRYYRY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYXYXYYYXYXYXYYXYYXYYXYYXYYYYXYYXYXYYXYYXYYXYYXY", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYYXYXYYYXYYYXYYXYYXYYXYYXXYYYXYYXYXYYXYYXYYXT8X", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "VVYXYXVVYXYVYXVYXVYXVYXVYXXVVYXVYXYXVYXVYXVYXVYX", "VVYVYVVVYVYVYVVYVVYVVYVVYVVVVYVVYVYVVYVVYVVYVVYV", "RRYVYVRRYVYRYVRYVRYVRYVRYVVRRYVRYVYVRYVRYVRYV6YV", "YYRYRYYYRYRYRYYRYYRYYRYYRYYYYRYYRYRYYRYYRYYRYYRY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYXYXYYYXYXYXYYXYYXYYXYYXYYYYXYYXYXYYXYYXYYXYYXY", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYYXYXYYYXYYYXYYXYYXYYXYYXXYYYXYYXYXYYXYYXYYX5YB", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYA", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "VVYXYXVVYXYVYXVYXVYXVYXVYXXVVYXVYXYXVYXVYXVYX2DX", "VVYVYVVVYVYVYVVYVVYVVYVVYVVVVYVVYVYVVYVVYVVYVVYV", "RRYVYVRRYVYRYVRYVRYVRYVRYVVRRYVRYVYVRYVRYVRYVRCV"};
    int k = 3;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "18BBBZBZBBBZBBBZBBZBBZBBZBBZZBBBZBBZBZBBZBBZBBWR9E";
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> numbers = {"YYRYRYYYRYRYRYYRYYRYYRYYRYYYYRYYRYRYYRYYRYYRYYRY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYXY1YYYXYXYXYYXYYXYYXYYXYYYYXYYXYXYYXYYXYYXYYXY", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXX2YXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYYXYXYYYXYYYXYYXYYXYYXYYXXYYYXYYXYXYYXYYXYYXYYX", "XXYYYYXX3YYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYY4XYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "VVYXYXVVYXYVYXVYXVYXVYXVYXXVVYXVYXYXVYXVYXVYXVYX", "VVYVYVVVYVYVYVVYVVYVVYVVYVVVVYVVYVYVVYVVYVVYVVYV", "RRYV5VRRYVYRYVRYVRYVRYVRYVVRRYVRYVYVRYVRYVRYVRYV", "YYRYRYYYRYRYRYYRYYRYYRYYRYYYYRYYRYRYYRYYRYYRYYRY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYVYVYY6VYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYXYXYYYXYXYXYYXYYXYYXYYXYYYYXYYXYXYYXYYXYYXYYXY", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXX7YXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYYXYXYY8XYYYXYYXYYXYYXYYXXYYYXYYXYXYYXYYXYYXT8X", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYY9YYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "VVYXYXVV0XYVYXVYXVYXVYXVYXXVVYXVYXYXVYXVYXVYXVYX", "VVYVYVVVYVYVYVVYVVYVVYVVYVVVVYVVYVYVVYVVYVVYVVYV", "RRYVYVRRYVYRYVRYVRYVRYVRYVVRRYVRYVYVRYVRYVRYV6YV", "YYRYRYYYRYRYRYYRYYRYYRYYRYYYYRYYRYRYYRYYRYYRYYRY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYVYVYYYVYVYVYYVYYVYYVYYVYYYYVYYVYVYYVYYVYYVYYVY", "YYXYXYYYXYXYXYYXYYXYYXYYXYYYYXYYXYXYYXYYXYYXYYXY", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYXXXXYYXXXYXXYXXYXXYXXYXXXYYXXYXXXXYXXYXXYXXYXX", "YYYXYXYYYXYYYXYYXYYXYYXYYXXYYYXYYXYXYYXYYXYYX5YB", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYA", "XXYYYYXXYYYXYYXYYXYYXYYXYYYXXYYXYYYYXYYXYYXYYXYY", "VVYXYXVVYXYVYXVYXVYXVYXVYXXVVYXVYXYXVYXVYXVYX2DX", "VVYVYVVVYVYVYVVYVVYVVYVVYVVVVYVVYVYVVYVVYVVYVVYV", "RRYVYVRRYVYRYVRYVRYVRYVRYVVRRYVRYVYVRYVRYVRYVRCV"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "16XXYK7JF3FLX7YLXYLXYLXYLXYMLXXYLXYLYLXYLXYLXYJJZ3";
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> numbers = {"Z", "Y1", "X2Z", "W5W1", "V9Q4Z", "UEGEU1", "TK1YF6Z", "SQHWGRS1", "RXREKB08Z", "R5TN5QP8Q1", "QENTIKYJHAZ", "PO95P2DKXTO1", "OYKWJDB7CVUCZ", "O9MBMTXW5IYIM1", "NLCPB73Y9DFK3EZ", "MXRCLVWUB424JBK1", "MATL9A0XGSY2ES8GZ", "LOIRO0QWJC54CDG8I1", "L2U8WCQ5MSSZ812S9IZ", "KHRENGDFH6068T1PH9G1", "JX9N8SX21OU62K8NRS6KZ", "JDCDLK44ZN5BWHOF40EEE1", "ITZ17YK0UNI6KL6QOWDZZMZ", "IB526QLGTSUOE0LJY7HLZNC1", "HSTX4JUVCZ1TPMKYE9A4DNOOZ", "HB137FB0HM2RVWYDFV0U9A10A1", "GTQ247VPH4GP411F2F5TF0QZ9QZ", "GCWC23NTRNC8EX0DNCQNLLQ8AH81", "FWJFQ1K5XVOW6I3D9PDWY04I26QSZ", "FGMWABILRXT7ABL9WFOJ124DK4K261", "F169E17365VE319OMJ8UI1296KFI3UZ", "EM534N5W2ZPIOY8EXWPLNJ16XDV2LR41", "E7IY1IIQ6WPT69A6IYSW1VI5QGH7J5CWZ", "DTBF3H07GPT3D30WCFU35TMNKQ0QBM7K21", "DFI3ODJ7993A9PXVG3E92NT0X5APLALCHYZ", "D22LKP5O1ZU6ZG7XKNAUTL57W85EVPAR5H01", "CP0IZ4GIDXUCSGRPN2NJYRK2OBX9GTLGEBJ0Z", "CCBIG5C1VJWIFOAXXFKWESSILNLC7CRUXX7HY1", "BZZ6XP6PTOCLX8MMZI5BIDZQ31XQV5F32ZAAG2Z", "BNZ7QRHJ3UO9BBE0CIN66VLQCYVT4A9NZWB05MW1", "BCB8J0Q1KQTL202MC64J0OQ4MLWXB5ZEBWEP5H94Z", "B0YXAHPBJ62RGY2JPTYEHO1EHZB0DUTEXKIAGBRVU1", "APXYD77M7MWOPH4H644G36DD3HBPDGYLIMXS5VG3Y6Z", "AF80EU0ELF9S0RNCOY0BN36ZQDUDO3HMX4AUDPKNU8S1", "A4SSEF6E6TUI8QVPC92BBG3SQNGJAFE5A76JJBV36EJ8Z", "9UNZM0R7SN0NQI4TMWT904NOXWT2R4YR4WZCZSJ8384PQ1", "9KTBMEQGKUDN2RMOT9WFR4J18YW9ODTSDS2DMSQOV4WL0AZ", "9B8IASBQ49J9FOV24GMJBDEI7PXDEPFYLEAB95XY69ROFAO1", "91X9SHJEE59Q69672C5WS213PI7G1AQIMSW0XWS083HWQVDCZ", "8SVCIP1UZR4GG2X0V9TQV9Z2LSP8L9FS4634WYV87VEEU4HZM1"};
    int k = 16;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1111110NMD55VATK96PRHFOY7AUTSZ50RI6T7TIOXP107YJ8PKM";
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> numbers = {"9EDWCCV83MCH429OXMLXUPO4Z1BDAIUSRM29S", "JU4ZJ5L1TYBS3KSS29CQ2Y3P2D6L0YQYHO9MFZO34BPT5UUPS", "KGLCAC2OGJ3U0DUG79VZ6LHHU0YIY9S", "BZT8ORFJJO97Q1DRH8UVX2RJ0OLY8SSFBE8IUVPXXF5S", "Q3YLUBQQI22NJAAX9ESY1BB1TBNKX8DJWPAB5S", "G183CCBHTYVK4O6ABTM6C1DS", "3JLXPT2PS", "19XTF1TS", "RS", "22T3LN72RSD6VD3ISHLRLS", "1JYNVLTBEJ3K0BL0SO8UAC1U87KEV3BSZZ93ZYXDDS", "KGLCAC2OGJ3U0DUG79VZ6LHHU0YIY9S", "7LIEEXZX4KXS", "CRE66I9S", "FJMMS2561AZK37U7YQGEVCIEA3O4MXA1ZSJ3ZP9PTS", "KGLCAC2OGJ3U0DUG79VZ6LHHU0YIY9S", "1NJCHS", "5LGSCZBXUPK015PA2FA88EL0TK1HIBZASQ3ZZW4XS", "4LDQPDS", "9UGXNORJLS", "A", "9EDWCCV83MCH429OXMLXUPO4Z1BDAIUSRM29S", "5LGSCZBXUPK015PA2FA88EL0TK1HIBZASQ3ZZW4XS", "KS300FYRPVNWPMZ7WW1O1S", "20J04O8M9M5RDDKMCE54EJNEP1GDI4B9NAU8N01S", "996S9BTZQYHRYJAEBB21YMSSOAZLR8FPLGJGRTT4MGD4HS", "Q3YLUBQQI22NJAAX9ESY1BB1TBNKX8DJWPAB5S", "17URV5ETG2U6PKZ0CNHRFDV8JAB3C2SEWHS", "GJDGXS", "176IV9XYCRMIRSXRY4HHLB2R3O270VOFXJF93366ZQPS", "RCN1HSSIGHS", "XBH84S76ANDLGBU8BWLSNVOGTWCZ4FYYJNJODS428U41S", "9EDWCCV83MCH429OXMLXUPO4Z1BDAIUSRM29S", "7PS", "QXIKR2JPUDDZRR6RJAPS", "198EXBVSHGPUNUK1S", "LFLS", "996S9BTZQYHRYJAEBB21YMSSOAZLR8FPLGJGRTT4MGD4HS", "YD6Y85NWBIMNKC0FRM0QNVK0VLS", "XU6U1ABLYMUIEMKHRGLDVD7P3QC4NHH9YLTS", "G183CCBHTYVK4O6ABTM6C1DS", "RS", "4GC8XFF6YBORLAPQVA85RCDTS", "YWHQLU3394E3QGSXDS", "RS", "4BGABSLFOD1VKW6E7NCK4PH3YT0PAD8SJXXB3X0P69S", "XBH84S76ANDLGBU8BWLSNVOGTWCZ4FYYJNJODS428U41S", "996S9BTZQYHRYJAEBB21YMSSOAZLR8FPLGJGRTT4MGD4HS", "4IUAJ6S1QVDV6NLS", "A"};
    int k = 19;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "100322121ZF4JID30U454YCRU42HB99C2KPT9RFRT9HQP96MV8";
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> numbers = {"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "1"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "100000000000000000000000000000000000000000000000000";
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> numbers = {"GKS52W7HA8HOUIHPY33P5QAM2R", "28ZS", "5Z7S8AJYUGMT02", "X562LX0Y5CFZ0NGXAJWU", "BZXDO984UE4IC", "8M1TSXE83SXXKOO6J0F3MHWFA26V1XRRK0DO", "HJ1XHW5OYC9JLHFMZK7KL5QE4TLNM61UN", "5DVJE2K2", "AKF7Z", "554UOK58FI83", "GSS8IOS0F8CT109BB6UO0Z4MSP0U1J9", "1UWFSADDDO6U6DU", "FA1N88Z2R2QSU9HRNSPUADIN", "UUE06QDJ2BVC", "K646OZIWY29D55JR6NMVS9OMGBYR2RXLJOGGXLI", "78AE1F8HWZ2IXA4M2E1GW", "A4HSFEAAK3V46", "85DPD3S0O5Y8U3ME9MXMD4FZCP4SF", "X4SE3Z09AF1KM05DW82UP9PU2CLI7KE8J2B", "PA953JLM71C6GB4K", "TBON3SE5", "XM52JG3YB9O0BBKU4SR97H4QFVBUGDON", "UNBXZY0", "MSH7EG98587RQZH3VZOS", "U8BPF6UFT69", "S6Y9QGSS0AGO3OPIEXTSXZZ9YSH9BAHQ0DMVG", "S1R2FE738FBYB", "DDP4OFEAKLV7PHTVY4", "Z2SKI5X5FKO9T", "8TQF35VBA1OXL8XN9HIB0XUAG0CGOJW1", "UJ0HE", "OHXIZNZTOY1X9FDT4J713YBM52W8", "XJIKL1XSUTYO0I26PW3NXMUENIT7FGG32TMF", "P7UHD27", "V3EFPW2B8EXWQ5AVTNZ8GS3MW7F627IKWLPYG1", "FJH785VY1YFD0LVT0PQKX4H79NI3L5O6A4M", "GUFL9Z2O2W4BHHRXB2", "1SGXEZNZOMCTPUDSRN9QI7880UOD24YJGPY4X", "VMA2YYDDE3YQW5C73SD", "X3H6AJ73HRISD8MV8R3R841FXQEB", "2WE5PZ3LNW57Y5ELWVUZ0TOLJUFGXBII9"};
    int k = 34;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1122202210120100S00U0U00T0W1SJRE1ZTSRZYN";
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> numbers = {"ZCS28VJ7PY4ZB1PUT9SZ1OFDZDEVZ90", "GA8GF0UVNFB1C6HI7Q061L6917YVOE6F", "OYGNDWM5QYR1I2WVDLMGX8OTZVIQ9GJ", "DR31SHTI0H8EAMEL5RZBL2EEFV32TAQF", "7S4XBVLWEYSSTS4GEKF1HCZ5FG8AH90", "4HM1A15I8IOI1PPO9Q4O43C4A5B7P", "DFNFQDV9S1V3ECW0D0AIN3KADM9", "9YQIT479ZGO0WLS575UB8EAZ6AX252C", "ECO6WO3AAVPDLLC62HIC9U2X055SGZ", "C9ECISR3QJ26F73567GG42M2385U5E", "HYQT62RI371XYKL1EDR2FDONK4O98D490", "JHQZY33D70JJVV7NWCSK9EDDN58VABZ", "V8WJSQDGJF7R6JMB7NDHVZ6HUZGUS1SPR"};
    int k = 26;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "22520ZWZU75UAYA6IVVTCRJJ09SW0MGARG";
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> numbers = {"ZUBJG4ZZD8NG4LJH28AA8NYG9A", "36C95AP5VQ21FBIH51FZZS9ECAP62GG", "XEURJSWSNZFCOHA9CB4P4JTE5P0V0SAHEX3I", "5RAIS2J7EO0225N0MNTXR19Z74X6GCIUESZ02M7", "QKP4OS5L4Q01POOHP", "BV2EOOJDI1ZHR1VNO74G9R3HY0YGT5", "YNNBOU8645286IR27I8AN"};
    int k = 14;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1001000010K8Y03EODU81JIOPZXV32GIPU7LLTOO";
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> numbers = {"WCADEWW5I820FBSRN4Q", "FVI6TA9Z5KDHD", "PIVUNVJQDLAWIR3FQD3QQ9CZ", "HRXCEHS", "U6G1FET18G8TH1DTD499GMXA", "FQ7D8BE", "JTHS3RMU1LJBBLTK5AYX60", "XM7QXYCXNB6Q", "PWR48PMXLMC0", "PEU87UFYO296FT6", "5W8VVZUCT9V", "BWPUTPB12", "FZ2IKEUUB2", "H4DWBV5AO66NLC6", "5MRFUAH73YK3A6"};
    int k = 35;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "201001000211211101ZZZZZZL";
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> numbers = {"PWGSA8XWOT7R458R4BZCFZBHFVZ7TWLOOYU9QQFY", "SELY0K4S5X2C762NKH1KTGMNK1W6E4CRU4T3EZ39OZH9PA", "I4ZIO0OOTQMG63A6D0RSWELMELF145CXPLI2EZ33LHQ8I1", "ANUZPPJ8M1E454B8C9DL2MSTTXM6NKADNM1X", "Y9ECHNACBDQNWWLC18WG8HKKZ6SFJCINKX8KCZ25AQ", "2EJVNID38GFZMB0DFFROGL3ZUVTAGWAOP9YMFW", "D2YGKXZMGC5MZR8B6HAVI70GID10C6FWCK4A34U14RB", "QXS476DU48QDAJ6KTQ1WDT50KE6A8VO212TUB", "P9TI526FIA9GI543PVALWDCS9O63YBEH3VACHB0O90", "40NUNDFMDMSD1DQ4WE3T3R1VNK9V5A6PNHQQAZ6JQ", "40558HWI79B2C7XZC1QCF29GZCGHAJNR2TH", "ZPWC7ILQ2SQRW011M16HVDNST3EWZCCY8CYLE", "C4WX4DSU4YSE1E50Y2PS544W9XXTTNK1JH6OTASTS9I", "255EDL4L98P3TK2NRUQT6I6U078IMMUSBI", "D7C8Y8K5XJXB8ETD7B3C6V7EICAX8SMP7DTVLIIVBT", "N8W945IATP84TM3EXDPC1T06MBHW7YLE3SJ3TW"};
    int k = 9;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "20021G9M1N7XWO0EHB5FE7ABKA2YX3EZ0RCCT589OD0QBX7";
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> numbers = {"T7M2WY878NWAXP9BIPSR31", "XHSUCNN7J6RZF", "1EYAXT3WC0W", "36HY5FMGCBTQB0PW8J8J", "LVT49OWNLYWKR", "91MLXDZ80Z38E0E", "KJJHZET0WFPXL5Q", "TZGCP5GSCR719HT8OH4K", "WZTTFJSTDXB58P1P7F605XIXFSO1", "LJFPZDBIBFCXRWAP62PXZXT", "D103E4QE31", "9QW46LYJNOPLZTI5U39JUIH5CL", "RM9ORSIB7DFG", "EI5V7MVFK8G0W1UY0AJ0AN7XPS", "5867NZ3H2E1H02UBF5YASM41", "WQI037T6LE48TFGPBWB4ZLQL", "87T21LGK0UF6O8UWK6PB196SPKK"};
    int k = 21;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1120210ZYJUDTGC009O653FQLZD2H";
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> numbers = {"NUCF6H3UTLY8N6OP35T324OWL4AHB48KNCJWKP4KNV", "XET6YJZI31U0N23F320ZG6HEIDGC4ZYBEPH031QQOI39", "OXQ1CZKLRIBCL6R9Q6RWK5UL99288Q1JTY4KV7", "5AV4IFASI9PFK1UOGM2BG4NB7ALTMK4RSOUL", "7P61UI31GDPAMHWQFM01S85Y369O1PZPQOAF", "GG4UL3F4TEWU0YE0FCMS1SQ3P7DQYR84ULBTJHCEQLXV", "BUP5BXC66WZYTTX76MQ56P4V635WP0Z43RL6AGGZ8DTG", "TQI1NVKQWA1SKAWR4OGHJ07TQ8O6W087CPXT4Y", "ALDO32RBTQA4OHWNH7P0E29IIVAD48J04Q4JCD39NYVLX", "B17YN83MQ5S210G0WXDOEPJZV8Z2KHO5SY2P49722", "SVF56TL9TFNDPU24W8LWX6AUEPSEWJ3FOQ59", "GTH0ZLOPP6YS4LJSR65CXOIE9KHASK3949JA9VISJ07I"};
    int k = 12;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1400CFE3B3GXB8YND8WFNXTT8R1QAZX8K83BE28KMTMVC9";
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> numbers = {"ZRU1EYXJQU1P04YBO5QZI0JPMQPE82EU", "9SXRV17X6A3I5O4HN2PCIB93MERZ", "NKVI59IQ1FCNTQ238IJ5TEXLWYOC", "7YE78JHESZ4TAHDS73CYD2YLVKYLR1BO", "V9QZ5RB7KAU8SAFKUI1QAWDAV04YPECF6I44", "T1T0E7RD4GBR5BLBOZLR04Z9ZTTK", "NV3MPM4VGZSBTODFWNLX4YUXQM9X7XZ", "Z0CESZ6QO6IC7XTDMM6RAQVELHTJSDSIWD", "XGIGAUXNQYAF0HNNO1E90HWZXRKC9NS88MCB4", "GZDAV7WZRLXN6OPIRLAMVPEH95X4643J3T0AML", "4F5L07ZBAPCN2JHLV56G0N3LG5K7CEGNZEL4M", "8Q7HS7C80KEKEFMLAOKSTUY80XE0IXX88", "A8NAI7DBK62OEEL00P7SN7A4ZFZC2V", "YR6WLJX14KX9B3SKMJXR8L0V0EI8SC3V0HV", "CLTW2C3VZTMZMZU8UDEUX5NSYLJKL032", "K6J86RVUF3Q75LZD0J4H1XLNQ0OXQZ5", "EWMO7L8VCZNRT6396PEOX9S04DPEKM0G39C3Y0", "SSESWLDJI7J71TCH08VSAEQSUUKEHC591DHJ", "GE3DGUC6VLG64RGPLGY8DBKTEYOJNM3QZ", "XIVEDH4AHYV9MLXC72QLCC4JKGUMX", "CJ1SIF193WUXB9GRGB7A3VXGH7SBHE", "LTOJDGA577RBCFRIL10N6K4KUX0Y7RC6", "T8B8884FNDOXXVYJJW167065LJJRU4J", "FLBUFO3HOCL0I3TFIZ3XJ6TZRRIY521A22", "HQ7DAZQZVI5NQ80HZDKVZJ2S28", "75IXZFUFST60VO9WWAZ76GUX", "AEK1BFQ0ON5ZFYR3Z6NOYDVINJBO27UY4NZ5", "U5L0ESMULSDRKJXH4RER6A6FGG", "YU1QC7S77YM6DJAHEPBEDY54U6FZFCC96JZKWQ", "9NGUT97XWGUUZTT9ANUOEOEVZZ", "D5WN1SFBX0OUTSKVZG068JTIBQR2SCK", "IKWOJ144QC0GIEKDJQWJFVS6FWMSOMISERE", "GC6YZL34TTG212X3J33JDV9FLGELBV1REVGUZXAL", "AUH8R2RKEPI1VQ6QA1MY7XH1ALDKH2WVORRTOBC", "5DKG0QJN5P2H3F3AF0QET1NUAGGD5J6NFIU", "Y1ZBB11135A0H5TXA59L6IRTWZJKNJ", "6135BNJ1Q73UD2M8CAYP64AA4WCFFHI093BNO1", "UYL5692IXTRDIXSA12H7LOJEP0I6DKX80", "1EPXHRDOUNPR7NLKN9R18SB8RYY5Z48DFKTIX", "F5G8EX8DSMQO4G2IX7BN13NR8", "5DABKQ5T1M5OJLS63ACDDUCD", "Z211S80M1SXJLBEFPOHFWY7CB", "VXRO9LL05D10FNHHZSXZ9UEQXV9P", "OSCZKNAE29KBGVHP5Z72DRWV972SB4H8PT8TOSDA", "NR19VB8IRA4TS9ZEWD3QHSPXQ"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1ZHZCROL10ME5THQBUJB6XRS1FJB0QKZP0VT52EGT";
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> numbers = {"FWKFEVUAICYVVG4SVGA2BRC8OE", "CDS298DL2JSPAG84", "WJHFEL08YIMR0UE", "5I5T039UR", "1SC2HTW8F45OXPMXVA6FJS4X", "4ULGIPE2GLY", "3UJ8G4K87117LTTTLI", "DWWDQZT3MBANO", "DBJTG", "F51RCYUHLR", "I3X9B3ARRCAHXTZTLB", "23QPV6L", "1AFAURPN8ZJY3JJLWHT", "J0MYQHPPLBDV8YB175", "6H2UBO3VXB9ZVK3", "ZMJUAX", "JXODV8AQ6CPV", "O9869GKRO14ITH9NQJ3D47AV", "VQBHPWB6CVYXYFAVI1S6SU", "5GQR6Q7YI0H2G8Y", "SQM7Z79PD92R4", "DERRX8", "H7FXTIYEYOFZIF", "VIDR7KSROQ5", "70HM0UQ7ARWPP5NBVMTW8P0Y1B", "HF62SKKFE2DQ1EPFPOMRDYH8WX", "JNBUT7IE", "SDAJL80CIUC1E4PY56JH1UL", "9MJL5HXDD2FLPQM3X5XNNCKURTN8", "86W36", "GTZDA", "HUMBAV8"};
    int k = 10;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "102ZZMMXZVMN4ZOJMPEA70FMXK9II";
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> numbers = {"GDTIRCCN", "IX2QY7P82KZ", "Q64RMYS", "GRASZB5", "2B10LE13TZ", "V4D84IVO6", "1D0MWSU7", "HJKACOMO", "IVF28KT1ME", "Z39RRD", "CYUMVIZLXC2J", "794G5GI4", "3G56WZKS9ED", "9O2V18U9S", "HRBQ175R"};
    int k = 27;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "122251ZXIFRSA";
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> numbers = {"P8R3TMJVI5EOXA", "H212B82M6NV9OPTE95X88W9VMFJJOKGXM", "2QBBZC0WG", "57PJ7T66UXO", "6ZOFHYER5DJ6OY", "1L4SEN8NFWKE", "ML5BUIB0AOWIA1T2CT4X63XUU7D395PMA", "2RO9DWWHS73QO2XSKH5", "SERKK4JTS3B61ZFQWNQMTF74", "WDUC7ZYEOE0JGDCLZ1", "CXL9DC6ZP8PRQPFVUEF30BRCQMV8RHG77A", "8U4HXMPUWRERLGEYJSR3", "PDH5YW215X", "GV8U3C02L4I8VZJG", "CNGHT9G2L8KHHIW9GF8C564D7JL", "NPYB1AMR5U1D2MP385DT22C23TXO17RO", "XK4LYG1KQDM6YJVI5B1WC", "54FZ081F", "ILBMALPKRLVY8", "UAQY9M0DPI7VLJQ", "T31USIX0J9RTA7M1N", "K8SQG689", "8JUL2HB8", "ZNIF7RF10SM2OQTSMWCRRUOHX2QVVG", "Y4SI0IEEG4U4SU4HQ17B9DQXNK", "82FD3KK0D7RKESHB07", "4AXVJDE1EAVK0NRKRDG", "46GG8HKD09M4T8GQ4EGFOEXI5WZV", "EEGEL60D14J0M4ZHZ5O439U98DWYFAZA", "DVZ0IYDEJ40P3F83G13", "GWVBY6I8002I4D0RJ79E2", "XT51DQQYPQPELL3RGJEX", "6Y1RL8ZKGUXGC000J78YFI281UWR7HKQ", "K9EAYUPM3", "U2F3SPYEKPN2RGLKDTQN", "AFJQRKXOC51KV7PTAHFDPFCT", "P2A8F4ITHZIG9VWDLD2", "DGNMT22J7Q04YIL38IFD7B24E5O615W", "D1QODLXUJMJZ6SVYJUJ", "DS2O021IVKGVQM6N90JDA", "5L5BJTMDDLZ7K1TCBVAJYVMQHLFUQMD", "54ABHCOC9B", "2F5IPZWO", "6TMXFX7A6V77HCC5LCEQG", "3KEPB7JJFCU6H2BZ2DDUMJSC1RRGFLNG", "4GNT7M98Z8RSQC9U3D4FYQ", "8BNDJVHNUQZMI", "SYG9GXUEGD", "AND528HTDZ3R31CET", "HZSYDS3Y1IJGCVGQ9EO288DR6ZZ"};
    int k = 8;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "122ZNZU3UCDKIUD4MDQ448P614XOINUWNI3";
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> numbers = {"ZRSQ4B0WNVX31D7JONIZTWLL154XSDLQJ8XG", "KV6P7403VPHKER47FXX6RFMW8FBUV3Q62EC", "IEMDADY3AE26JN8JJLMROS7YYC9G9IWUO", "JLJB451CZRJZT2UEDKVT2TYACU0QBVO", "3WVJN2N1YMTHOI369H97N9HVZHVP2PI", "8Z8UP1MEVKM8NK6GW3HK1TR887EHDYQ8CBX3K3MDQYMB", "ZFA8IBPRX337ZIKH8CVK29CGGEHDQSBLCRMA80IJ77Q6", "J16Y6AATZZ8ML9R0TPTUCZK6DWNHRD1N0PX01E", "A70CL4EN81MLSOOTEAHCKSB08R6UQOTTY", "BTLAVAGK9ASYICQR1IXOKVY85H52LCHD6IPVDZMPD89", "70BXHZ2JQ4KXAZT27HS8BE8LD1Z19ASX8LFD8Y970K81", "H8W4CWROYG022DND7Z0CZ22CXKQK2SKRHV8EW0WA9AK6", "SBANB6IEIUGPGAP59YZF4ISH26JO0SYZKY", "UXEJ6P9M83QV5I4YQM7PLTX757GFF3Y15FGYG1BG6E7E", "N0431XPXWP4MY8BLRB9TX3NM2H2ZPEB0WZVI1DV69NU", "2FZ8XXXM54ZSJWTU8I5PV72ZIT9E5O06TYPV", "BYM6IC4D1PWPJNYNLPDPALHX7EV1ILOPDS6C", "8YQFQMF6C0HO7ZEJ1MAHEPEZFKMI4QRQ89", "KMAJM8MM85I15OCUHYQFWMFHMWAHP8VW", "29XKQJW2QYLG1H2QQ7JO2M6K7D9TJT8X6FRMK", "J5TCJ5EB0V425E3HZHFU2E49IZ81STB", "20LG7Q1P9L64GMM6CJ0RYXSG2K70YD3OXWR26", "3YD9ABOG47M8D2J91PSL87CIIZM21OZKDJ9KOLBXCXX", "B760ESBVYC5LYNUQFLMJTXQFYRKJSE2HADONWLC7", "CIWRYNQEFYPE0C7WHXZRQJW7QLNA3SJRAPR7T", "F4FKLJSKIUA8HKQYKUSDSRQF4BDK72HT7T2HJQP", "9EINOYT3Z5COPHIYTK052BXB8WRO8P", "BHL1EQ6UQSCRXPLVU3DNV3U7UIWWWGS2H73KDWNQF4HP", "7NP3YQHTSFD4YR9JU0YXQN44OS7T50V5", "CD6DB5HK2ZGEJTGZH5ETHC27S608G042LZ5", "RHNL5TLDHE5KQNK0F1UJG1AOUG0BFVCXXBZHB4IBLY", "1BLS7BQDO6KY6HEREOYV32TKO133WEGCZHIMCM47LBAV", "PC6SGT8AMG2XE28QEQBBNF3Z0N18OKKHZXIHI", "1MBONYVCOSODSDEGLURN26N2ZMLL0ASUGNOH5M", "HZ47LV8M3P8J0FO78ZG4296HGMSW4TWZ4L0N", "3OAGKHDRAMCZYAUCOQK3RXCU9X90ME", "7UBO2VUN9HD9H4R9AV95TKYUAB269XLZ18HG3W05K", "P2GV1Y0KKXQVKCB8577FIIZMJ8TEZIL7HLQS3RUWVD", "ZOEYA8UIYQ7Q1A1MBK374J9WNGLYGC5G8RQ9J", "HX0WL5JJUOUPN0BAYFV70T26KEUKXY26", "C543R6XPC5AV9BEEJ1E0H8KBKJUKN88C", "CDZP010X3FQKD6F4B7ZKL6TCZ17BAXRAIUJ", "DX1FNDU969V9O0Y8B9RD6LLJ20PV4TSKDA4", "CMBAKPW97A1I2FUXC7Q22NIBNAM9TNAP19Q7", "ORG92AQECTZPJQWLW336C4IU5ZXHH60W7A2D", "CDL2E9P74RCZRJ6XM21S0WNO233624OJ7T8P88X4V3HD", "PXO5SS2C20VJBYQX4E3GB9AA8H85N47TE25XTL70W4W", "93U4CVDTEYPXAP0FZ5C0D3HBGJBN61EZU3", "AJMWGD690ELPEHHU7J1SCCCER0EBC6OX3F8YWA5DH", "IHJB2EOXO6GEPG1YEIQJJDFYW9JSD6X35"};
    int k = 14;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "83YYA9XFG0YUCQTQ5MFKXRUHYAELXAKK19H5T5GBHVCY1";
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> numbers = {"7HU4ZN1XP017TCAA", "M9IH8NLUCI3Z", "17IXHXQRQVU", "HNOXOJUWMICD", "8UW37371L05AI", "DV0F0U3UIG", "ZWPPM4RUXQ", "BUSG7VRNRPKO8TB1WDOII6HI9K9RM", "1H7SI4TYSRR30CCHYP8", "AJLTA5Q4WB5R33BIOFPP5PK4X33W", "JAEY3TM13XV55MXW4C1", "3Y55D2VVTGA4NJ34KKFU48J", "P1COU94LUA", "EZOH6FW3839", "HCBG9NDFTSQO8K7JN8XNC46YA74S5", "W5HF3U4PYJJ", "WI4QB0YGUOQAG9C56FNEY", "5N3VG2PLAC7RLY", "XW33GBPYCQOH7Z", "IE3HX8X368ZWMTQA2Q7", "3K7WW21TQD07LT58P", "QQ0TGK", "RW8UD2ZO5XWGR", "SS082Q5TJQ4U39K15ICFMWT", "9MAEF68", "NSHEXXN7A40CPHXAJA7", "IIBXTE5NFZUBZFHDP0U6O1Y", "IG4OH64DCYYC1503P941EN", "LQVLNYUMFLXEJGP6TFNIPS", "QZ369QIF97HDS", "JFAT7280A", "I30X3UO5XE0NMR9DPODPQ02J7N7", "ZS9LPBW22", "SZW97L4WRS", "EE7XL1RCRNQ0T", "VMCR68HE446E25L6VE3UGM0", "Z1984HGG", "Y5LNS0A1V3ZG", "1HTKXOD86858T", "AX8U99MBD5BK8V", "PHO5IS8DJ", "YZK3B6222JMR89C", "K2LVIJNVCY8", "WE8OT2DJG9MTZ03", "KVLR8GOUMC1T3CQZYS7", "91YIWXLJ6VY5WB7ZQPVL45R", "V33WW3VOC3O49093MX8SZ2B19SM", "DD8NJK5Z", "EIGETP19UUB8ZVDGZ2DUR", "AXNANO2CE"};
    int k = 6;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "2115OGFDYXE9834MS5HOZ7X8FGH2EU";
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> numbers = {"BBW4KKM13WA2VPJXSB0CO7H6FV6YL4LMIOLXZXERWD0", "UOC2VWSHY9COABHJOQ3M8AXJPCCZIJ3XS32QO", "267BYPRDZ90U6DYJFYBVIRK8HQU7X5E", "C8UIIYCJDQUDG0ZVSLWF0TWKXXFVPLDF8YV3", "2X9ENFASHA7HEOWVCZEQPF8ZZ7MUZJR5OX4W4TQN", "LYPVE3LLDN90IDTFGWI8D621DPK60E6", "7W7EMBANQD7OAHC21BIQBDDMJBYOZ62TC", "RFXAU85LYQLYT61RTB90B6AYZSZ010V", "ZCIVSQQMYO1C681VOSUTZGDEM38QGTYFW", "EH7VJKH63GGK5OYU8F1A4Z7U6RRUGI", "13O138S6AW0C4EN7GCFXOESKYGM7LF4IM75YJIZ3NAT", "17A7OAJJM0IABB1WLYMG26RJZ12XHZTI0", "97NCV824VJXGPLP5CHUJJ9SLL4IUMISG53", "BSRCN7HQM2CH5FBXXEE4B1RN8P1TD3", "FU1EJ3IHLD82CNUJGQKURLD17NHK5F0D1", "GXLO7T23MVU9TZ2QPURFICILSY19KT82QNV", "ZUJW9JLS86PCAHD0JIUA3E2OR1U03", "6122BMVY0A2Z432TDAGDV47NSNBSC4M1PN6D6OO0Q", "ST5EBL4J4ZU6HOSDALK6XL2P26M8R8LR9BOH66HK", "MDHZ3QOI3HY8TCRQ4X57PX4I6JD3U", "KAZVJMTVJ1J91NXTMZ28Z2OO5TVMF", "7991IF7M289M5FQ6S4WVHB5E46MPI7IU63NME69BY", "VGGT5RBLNTZEWFHZEAK3J9RQ2263S2X8X4W8TWI", "K4NP1TT8HMMOEXBREWCU6A2MGX6CI9OP818", "Q0YTBBNJ9GOAZNKT8E4ENX5G3ZDI2", "F0XP3MNRXB3VPU9QTRWXF6CHFNJH5Y4DQ", "5QTFHSVENL8MWY3UCCPJEWTYEWJDUTPUVSGWH10", "XB7AX49SH1OHPGZLLH471LL5AJ5WT25207LEYYD75", "VQT6RNIYVUUY7J7V47FZU5E606IZ4CGREN", "RX20K65F61N1Z9ABMTEA4RPSYQ4VMEZKK", "EY1JMHQRI8ITM06A36LQ2NMODPTQIBHPS5D", "SOCBMPBDA7EI2LY0ZINQ5W7IEQKJWSJO0MSKUJAID2F", "Z8YZ65U36QRT6RVF0RCJ0UUESB6M2XHALBLMSYR", "3N13BMDJ7UPM0EVFAV4B8WAB0OZTW", "REDZ2DPMLOAZXFHWBTKLZDFA5DYH640PP", "N5GNEJRUVOC9MCQPHK634X8O713PUT93PU8E6PMAR", "OT9B1CD2XXC0HPCQ666X501RI3KYAOSIU1AF8XJR", "BMCVYP3UIMWIO8CA3FNSDQTGDGSHE64G4BNAFU", "7IX2M85ELAAKK7DWM5GC6EUVW91OKQVTQIEM8PXF2", "AJG64FAQ53EP63VQDDCQS36RIHV0HVBP7HIML", "3TFGWRCTIQ9PORXSJNZVLLH7HUQ9OJ", "EHSSGWXF5XSD0OU3VJFYNZ2Q3PMZATJPH9B0P0BDHX", "468CEG30E42L4NNN8OKUD9VLV6O8V8Z64R", "TBB1SCEDULMXMNN4LP49I4V1IX4GWBG", "8T3O396SLLX0N4Z0TOQGGBNGZO7DAA7PN4NU9XIQ", "XC0Z1QSOYYQXJEZYX7F71YH4J6CWRQK", "1Q4OPQSK64TS5SDSZJGD0EG2PV297", "QAHYJ8W0968PHGPO1HWOHZ4I6GZTSA0", "UCNTTUAIIF3524WQE8Z5IXT2Q5URBKFDDMZ7FSVII", "9QZF7Z8XISAFIRMJORHKRRTEL7ZPEM5J5"};
    int k = 26;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "316430IXFC5N9FV90BKBE5PQKXDQD713EOPBRRKUZ0R8";
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> numbers = {"L1AUKX8C8MTPHNAZDLCIKVAK6VAV9OL", "ZYWYQG410T7LTCY5BFD2EZTC70RKO", "AH4SAKH9TVXGI28Z1CLW7H2UV2424Z", "XS7L4IDYO90DQ212YJ6XU0QHKQK8596PC7SV", "ID59D00EL50RTYQOWSD0PPGMR7KC9", "JAKS2A81GX6QY7ASQ4WD4D41RXT6", "S0OESJS6F0Q5WUS62U1UYZRWOGD1PTE3XCWY87GX8T", "HBTU2SAKR3KD0CUNI2FSO182Y1CUSHDR2", "EV6UTXRVQHYHEPBTKSAQ8S4TW0AIC86Y7Z3UX", "5MKOVUERG5ZBS2EO9NWJZQ3P3N04VQ0XWHTGVWK", "GXK720X5FGFYV2WQUGWRUVAFOAMTTX0L", "48VDWL9UHF0D8FAUKL3ZEB", "XVD2DEIVD1RVVQXDLSWV", "GAPE2Z5ZL3BKSV4DTKCWY", "J1PDKQANUKIXKVNCV2X7KU8CQU4VQNV7", "CW3XAFDF7APNFZ3K0X1C2WAW3HLXM", "RABP5VVNRQ52CF576HH47SV4EPDTIOL1DKF2NO", "TCIV1T6HHXPFI15NHM5", "3UQEGRIQSC4SO8Y08O58UX", "CX1Z5U7YOK1SY7H5VIEA2Z", "HUHKACCLW3OQRJ63UE2HH1PMS288KNSLI1HO988", "HEB4F6SIFERCWRQK2MGR8T8WTT3GRIH1NMF7HPR073", "NM932WG9X1NPOAG0T20FR1YVPZ7WEDE2G5G", "P11Q286IES22UDLSGMI7P", "87RAGHY5552A5IV323XK0JB", "RUE3BQEAU0MOM34WJZ7MRZ96J466V870D", "GQJ3OPDQ78GSM460F7GRIY3BNVPYU", "H25UAL9YIXUQW0WKZIB07TPW3022UZIW", "JR9ECV53FCY161UPBNI5BZC7G0CEB", "AQMQVQSIC7HQLXUH38W0W3L9IWON1NON6VF", "QH3XYBZWR5OME4WIOUEV3EEWIM6OKF8HQHPA41", "I1X8WFD60IB12E86CFXKXZPDPBA9", "XJZ11Y20Z0POB5POL47P61TNWU4IKFC2Q", "SQ9ZCGUDQRQHTBG1YTW43ONQTCMGEND0Y0EOSI2N", "C3HZ7DRPV2GDZV512NMLCP02PPNQMT", "IGR0NUAT2DNSYUWS0REY6I6JNLB4", "VGF0XCNWLZO1OED2Y1NM01RGKJQ4JMIHO9GH7P4TQ", "7M6MMYQELP0EH023LYH15QCFUR26JR", "KEX0ZTS70AW55PNB0GHFOGG4KP4", "PSG6UBA3A6M3G0CO0J7BYNY", "WIGD6CMUAPXE95QUKHZ6RHLHG3IRMSNB6T", "7PTZTAZE4BG7TKRF9K3U2ZPPY1T6ZPX52F725U0VG", "KUZKE8SWSB382W6SE093POEWY4LMFYKCXL3GA", "Z33QNHYMQCE3HQ4BFI1I4NEZ5", "8F2HN71AJU3PAFYEU3EMVRBDS4L0OQ6EZIY36LI", "Z682LI5QM802R8LYA51DRS6ZSTBH", "5I2SAW7QCBDCFTSRL26", "13M0EO21MRU0HDC96UOUJ9IL3RI2JX5I", "94LR5MS3FG9QT4BH5OAQKZ7LKGT6GX7F", "9JADEVC28S2K7DM7AY7N37FUQNY5K460BA33R2X78Y"};
    int k = 32;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "3213221210DNNW4XLZWQMPL5XO5X0WM9F042P1M6SHT";
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> numbers = {"4PWZVL0N", "N7NGSDUI", "V9HW", "IH0O", "UMUU", "LGLK8COBI1", "VQPFO", "HL5U4", "BJ2BDFY5MC", "8AIL", "4OZZWDLV", "3V51D", "4VVTDW4EOS", "M0UEVBV", "6RZZS2KAI", "IPR3QD", "NZODWNPZVY", "VY5CL1", "JXDXH", "2PM6OY40", "RGMU", "40006XKPFG", "DOPA", "HP2IK", "C72T", "JOBLKWC", "ERFY", "LB7M", "EEF8R8P", "WMA40R", "O1H7TTN", "FFY4GVB1R", "2I3R7QY5S6", "5254", "UKT7LGZZ5Z", "DT91ZJT", "GM5CPWGI", "VH4EQ9J5F", "P3CZ", "5TYTK0S", "B8KGP", "O09U6", "894PP", "6033", "EHMY2NUE", "199HJ", "UP7T", "JWGUV", "7IPDRD9M3N", "2KDAKCX0LC"};
    int k = 6;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "8SP78D132H3";
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> numbers = {"BQEYPGDII6B4U6D", "U0PVQEFTKXCWQ1WH8A4", "RW6JJHSA6OEHT3MQ2WAKNQ5VQ", "HPD1RK5OS88CFNF0E553OJ", "7M3FHIVO5Q2CNFTX80M", "JLDVQ0TNHSU7BAX31R", "YM7G49CI6WAP96A7C52Q84VR", "I7MD0IKSG3T4AZZCSEUE1", "TBBS8C465KFLUKSM6", "86RY3RXM7AJLZ86N", "SGVX836NGUXSS5GNA3QGQ7", "H0105EYZ7XXNEJVNGTFK", "KFHAOHB9SUMKABLBXWA1IX", "VW3Q39D7O6G28NAJN", "DLULN9OCM60GGXOUS1FP", "NSD5ZWJOC9GEC9R", "OW3TDE1GI8E99DAK", "5YXSUR9LUGP4OXYM8ZB2AC6EV", "VUTJ228GDR12MV2I", "W3YCS2DWVJTQII8RMVO", "CIDIN0E2PYGW", "PL9YFQQOLOLEG4S", "EHZP1HUSQ4AXUS", "DVB3614XXKMA48KEIQOJ", "QG7UKPW4EGIP", "NXZA9LHOOXSZDAUISHPQ8R", "DJD6KAPZ8U2H", "1YKC6XVPUGM3DFN9AW51", "GYZSBSF54S9MU04OS0W2T6", "1L45547T17M7BG7YFO", "HUP0641QFEJHFO9V0", "S9ZSDY86FV6RZN8AWOR8W", "QRXK9NVQ51S9AURTUS7", "1MOKENSGA0FHICCTQA7KU1", "NDO8SGSFOEI7S", "CVRRS6FXKMGA78OXURWO", "NCW7LPQEQWG3", "VOGTNEV2DV1ZVX93DB", "1GB35P9TZI11OT808F", "AFVRNU08DQ934GZXLY93RDVHN", "LO5IS0YKYSAY", "5U4177CZMF6L54C37XP", "NCMVZY19NEUU0Q5XCI", "9MESTQM2MA82", "6TL59T6Q1Y5Y55X0S3I0XF8", "GXJW2HT5WTOPZ1B4D0R141MWO", "J9FEORTDK8AG698FCW37DRKKB", "BF7Z3KEKUSD2SU", "NOU5KORLQRYV", "LRMOOC0E5OILUQMCIWSRPR8"};
    int k = 15;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "5122TB5B952S2UH6UQQOMPWT4O";
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> numbers = {"GYI6UZ", "L9LDOTK3ZOA9QVY8JQL13W0H", "GH428G5VH5KPF257SEL6C", "ZYI", "DRCYI6OBGX73RYLLNUYDSIKV", "7X", "2G64CD06O9DJRO8WKM26", "2NESKQLMTNKDHMNSQYFGB", "UATGQWX", "ODU2TF3Z3AWF", "2XR9KVFYYNL", "31KZRM4U44EB7N31MS", "2OKELQI5O7B2XLVU806WHGFXH", "1TNP2TEQIRF", "9ZUMHCHYN77ZCSUXAVTSWZ7ZC", "STNO", "KC21Z1RBNA914D3T", "SHEXKCLM37WS4AG6V", "RCF9J3J6AR", "3NXMD3OETF08N7S6EEO0ALID", "I5PS7LYOIFSJ75KBFUWT", "4E", "N9NNSBWUQB8T90A56", "9DFJRAZAFX96NQKBFSQS", "6LSHXKN0XH0V6IPC7CW1CMR1", "SO71HXWQK7XZT", "DCNE9HCOMBBH9HK3WYYNB08A", "97MQ6EVY", "M2J36MKAI6QK", "9JLXMO3ZY3SI71O", "8R5HJE5OVO7DCSHLM1N5LD11JD", "B9SGVHSFX1", "WUFUJSFO8ZHEEB6E34WIAO", "SNUGPIXBE2ZNZVXVASTPV5M5", "NUHCESX805SC7DRU9QJLWI4", "QVFB", "HGBCXY3EOSJZM0NM3Z886", "3H6J8SHDXQ461KV9XSIMCCVZ", "2KNEBBGTOGZ96Z2ZET3XJG5", "M28HSNG4M", "LPPQXDCUD", "9O6IZR7EYVTR", "YN7ODN0Q2TX1", "FICA", "ZDD6NC0RAA9VXE", "PFF8IYG1Z4SBEGJY54BNT3N0TQ", "6LG3QFBZY3LGN9JH2K", "HIWYNNQ", "ZP1HI18H7C8XT9WR6B1Y6KQQY6", "YEQYJGCMR38JUEQV"};
    int k = 32;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "327213301X2Z9AB1PX4B9CNGBBW";
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> numbers = {"9CHZQBN18OID2A0LRL0Q6GY2VKSPR9TMVW9WD2", "F2IDQ56X326WVY1ZAKA8A5CNPRWEX54N7ZSU9Z1XHOT", "1ZBICAG0QO8K8SAIWQKH1TDL3RHEQI0JD4U1IHGTZZRKJY", "8BWMO9SSBK40LY69CKPZLADOXGBXAHAN35T", "43EIBX382JI8U3WNJ2TRECGK9ZDYAT9RK31OH", "WJPVXSDYIR3B1TYCIMO6VHLZ2MP9VLU7OXS924", "D7YM382AG30WICFDIQNZ5VL025EX1HOW0XVKDND6R8EEGD", "FPZZ33Z9T3LABHQTF3XCS9LTT3QVJGDLWKMDMYALZ", "3ZD7HE0EPOP3SEEZFPM2OMZUACAS8CM010SLYZSJ", "WLTH2V4HYSUD6XDEITDD8ZHURF9C0YOLK81", "KRCBOWCF22JKEREZT2VFY2UI9I30RP4GCUYW1I80BEU", "FS8IXC9RUEMX4A2GFZOMWL3F0VH6II39V2WM", "6M20VIQVDDYF9ZRQAZDJEAXSG4IR32AUV26O", "FDZ14NAA2G6Q5ZZ3NTWJC7B5PAL1AKDACUXM7V7PKH38Q", "M81KE9LZNQ1VL9O3L7NA7ZEATNKQOJJ12I0", "PM4H08ADAC4858PKJC14IZKJYRP2R08NO9CIFB5SYENC", "92GSLY6XGQBZRC454G3QN52MCCQ9KVUGAGA", "4JP670VZ5A9408ITL6AI47F81JWF3UR94BJOXQ1FS728N", "G8KOYVQGD26YC8SNRQGD5SZ3DD3VMP5T2B8", "NLM3JP5BH76WFU7UXYE4M7EW7Y44HB2TOBQNVSQT5HH", "GOXXJU70WJD883S247JM37JEYNQUCEE8PSEX50W4", "2H70WPA040D5656PNGIC2DVGZ62FMJCEEEVA82C", "P7GCTXYU2RJAOCKFHKYYXR994V2UEJDFSCJP0", "4W2HY7EK4ZJVNQ0U3DI9CCRPQCDH2W39FMJF04E23ALGZU", "LOVIZD9HOV91RF7VKG9ESWK0576UBR1C0HGWO5QE7BUT", "9UHHM8PJKFZRPZATG8QELKHVU7VV20HLW6ELOPSTBDZG2", "OYCX6KOWY0PIRSP8Z7K299PS5FH3LRMH9JE4", "6CLT2BDYCBDPDM6VQ63U37J28N6YXAE14VM6TK8DBKYT0", "5J90R8YCWN4P8Q680TW4N4BIXM96Y0IKU3JIR", "8TKX3INEEWLPYK6UPFK24UI3YKB55DF0YV2HDVNNU1W3H3", "55IH1N9ITN0UUG3L10YZO24JZPXWW29996KB11GJF", "NIRZ3797INSHG21HWMOCA7XKNZ1IJBMFQLUPY9RM", "XF6R9T96DS8RXQ40TN07QQEFHCJD28BMI8SDV", "8HTMM8BWAPVPLQGLX81IPB18SFE2D1D33KXVXIHNS6A4", "LC1H3NY1468PJ5WJKLFKVI50YIYIR8J91L", "H39WVF2MYOX7UPIAY055BQQN9GNEDGYMO9TS09130ZZ9IY", "ZQ4H5TAPCRYUMF63ZPMOWQNOX7DCSYLOVY61EB", "Z6LKVQA39ZZWWA586D0HSVES2FMGB25E8M46UZBQUL08OSZ", "GRFJRH8W2Y21ZEKOFJYO6HYVR7ERUVFJUL0IB49O5SF", "BHIDXTXJA1B4F001C5X24M638NSZC70U9XTVNZ8", "AQL8PATIRONOIQDDHDFS96CNBTO7KBPD0FKT", "7GJLO3TO1046HW276I0BZ60A71JOVDOYBJHO6T1ZWK8N6J", "4P94HGAKHLFK1OZBCQJE2VDANQZD4J7JI4", "41T2KFNR4I4AMZRQSMLKKQ58JQVO8HMFK5G", "S66CSRWUVG4WWM5DIGK99CVGV43AZRZ1BB4U6CD4YZRI", "8Y5P5ZEHYFWAG7EORILNSYHPTS5SANLM4K25IL", "46ERGN8PY2ZLZ5HQEORBSA9VGD4H6MJMRFVO2I70OD", "QJDB7I35XL9W0Y2QG77EYGUZEGQT0H2FGGK", "PCSQVXGLB3WQS3N2B5LTIJ8NPY2HZ49NKZGM", "MHGMUCYLVU4VZFBL693S4MKR54YCWE17T3P"};
    int k = 15;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1640D9ZV9Z3E3G44MYMNLN3HU6KWI36J5DYL0NE5T3JOW4JD";
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> numbers = {"KUQPOEBBNWA60P6XB6VVM7QTID0P8EM5NBNTVFXBV082", "LDTH034W79DHW5LGG4LA6EI3U3XC26EXYQUWE3UNN1GA", "HLGHQF62WCWAKEGF9A5LCF5UAKIC9QL5PATVK59ADPUGG", "N1SN3DAS068WLFWUG0IF4XMLVGCGNRZ35KW3C5BRA6C9", "588FQIOMWPJQ01IP9WQV5AH2U3KZ3QXTEMMCT8EMOHIWP", "N11AMKUG4G9KLEJLDIJEHFL5O0B7AADCIZAQAMPD1IT0", "UIJVGZYMEZOMDX4D9UK3V8MJUXK8RGX6260VPDHWVFUUB", "1HIGPEM9QIDC003SA1EICBE0C3BNV8LC0GZPYT24QJ95", "BJH51VOS81XRA8JLHNTMX13CTZJEK5NAXC337LKHJ7Q2M", "SC6TC60YSL8P8NRJOR9GSKXT0A0PUCBO2TH9EI2XIHWJ", "Q0Q8MP6B6CXUHMUUQ54KHAY4CC76PBATO2M97HUNQ1Q35", "O5FLZCUPCDKUBO8O5AJEUAHAVS0G3WPRFFV7YEI7I1WV", "ROWAJ5D7W4VMB97QVSG1P08XZK5J8TC0U9SMO1MEMJHVV", "UYOB63R0NOODWM4Z4AMDTFNRY9F7SLCRK5AESQI1XX6RX", "6FNSTWTL7L10COUYLEHH682P85Y1M4IXYVZNKLS7EQ29", "BLFDLJL3OQG13SZVSMRVR28OGS7RHQUY9I6TD4SBT30GL", "33HA4U0BT7Z9V04UGPQ77KISRD4CFTM6Z2L0CCM996IBB", "KI5WGX9DS58WUV4NEQCMJAJQJKLOZT89MGAZXFDX6J91", "AS9YJIL622HMKUIGTU8P6BQ5AR0S2LQ4QI68PSJI4RN0", "ASE354MMMQDMJY5HFK5JVRUBQRPHGCGP907E3VVPJTJYB", "O8KUGI6MYFOZEHFLK4XE6ZXGI5U3EGHIRFOEV1KMK6SQ", "YGDJ06INQ56XNATJEUGJLINGCJDNLGJDD3AJPW8CKFCS", "8ODSU5GAQNBTMKDXMKAJJHFJ56LH4ZKGPO2G6LXM6LG8", "X38Q7EHLJXZZAXVX7GYEQVZQCYVMLS9GGLOMZ05RHKBK", "VVHHYE9A7E2A5UWSUDLYWK077AD06JDEZDUCSM0T7BVQ1", "3UX9CT9GF7SLCWQK4TY872NJXH800NTMWHRW0694D2FFW", "44GKJFCIZLLRY55YQYP47GC5IF28YKD5FY1EE3C5YWA6Q", "79JRPUWSBO6MW0YWGIUI4BF5LAEKYFPO745BYOB4H58IB", "SOJSYEQ51F8EMS5SSI89S87J9QANNLGQYQU04VZ2EJ24", "BBGAQCOKD7VG8HT9R4N8OEDDHDOCW8I625EL2W2QDQ8U", "LUVY4NVNZW2H92NLOXI009BYUNA0DS7YJR0PNZAZE4FPX", "5WAKCU9XWN34XSRAUN7PZAU22ZPKXZRZB63V0QJVC8Y33", "USC3RLN40X0SNP3PTZ4YPZFI9MUY5M038LV8JUGYV951", "RZO8LGAKW167K2VVH5G39MWD9PDSDIBRFB5SY0PC1DAI", "94VCI7QMSQEBFB3QAHH4MHKB8TMAR4ILS5XAZ1RFA0U37", "TJ29H8XT0GGY0KYRVTQ955RIFH2G7WF8JLA99PPMQD1ZN", "PLHZRNJ8G8OU2VVX5RMGAR0XTBD49PUSO8JB1TUEWSBQ4", "FKCOIUEZJVXW4DN7XVVD6R58EBQZCB5H1NTD0DWS8NV9", "KFEGE9O5QFMAWELNTCSO45TCWRD5TVS2RVO4GGM6GCHY3", "IUIV14KZH43X2H2IUJOHV7ROSTPFB2VAAXSNLDIXUHBFT", "O0SAYQGMRX9J3LXFMIDZU7XHD36KWQO4L9B78EHWTZFVP", "6OTJWF0JWKGBED31KW6YK9A9C8GWNSUWUQFNNSQK305C", "KD7MSCM9G8CQBZVCHXUGK2KFTZPDQEM28AACYWLWOLB6T", "PB48O6J9W88KGG8OYMBVVU4K02R8K3EBBUTU5NO2DJXDE", "KZFQ4AYV469BOG5ZF3SD3AXF88ZAUFX59YHO4TTV8VW5R", "LV5O04X1WF6FAKRO6VNVN592V53N3NQXTU4929SKQ1KEM", "WOGXEQ1WD6VI9T53SH5IG426OIO1BD9T4B0MNMET5886", "T5VD04UA85Q707Y4RFXZB37RXLWEOCPZQJWEKPP8FP321", "8GBU0XPPD3L940NTW9LH9RZ2YBUCHV94T6WR0MXTR8P6", "IEMVRDSEYWZVNUXB9FHQJDNYGVCQOSGBKDUGHK38AHRY"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "HLRJFOQM2IUAR0OG2RVEZ4SLDEE5CWNDCO2SYXZ6WET35O";
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> numbers = {"67GDHDQCCOHVFT4IV3XJIBBTIPETT34CDRKJFRHOKL0J4LAOSZ", "WMMTJEONGTAU9G4W5JXU8Q8TNGSB62HYEHAVKHUEL793Z908JQ", "W5T56NOLWDAZIDXAUVPDD5L7UX6I7A17IV11ERWD95G35CNKOQ", "CSMZ5ZAHNXHLEFTVX8K5IA4GSSENDZGFH3XFWKLMVYABNRDP5D", "KCEXIIE5SVJYCJJXS2H2G39H79TLNBNGP7GLK36CFTE2SKIPKG", "90684P6WR0GSKBQZXQ17V9J5J28GRQCUXYFAB4C8Z7VHR5JKJT", "WQ2TJ7V5WLH3RAH828CYU3D60QLSHFNVC33RJE4Z7AZO9EBD8I", "WA8VTH2OMEYAN9EFGPZXS6ISTGZB9ECE1K37M4RJXGN33CQCJT", "6H6F2WI0CLSHCM29B7TCLAEXTQEAOYYQMSJDFCH0RZFLP0ZRW4", "ZA49GNGES8FHBC0JM4LV6HQJSLBG05PFZEPDO05P7TY9AI02UN", "XHE338MLNJYVM4I7L4DZO07ZJ18CD606Q6XTLHAGAN1NATIDCR", "LGJ4LSZQDPSJ0AIFDKGHZR4CTHEYU3J9104L9X3BAV2ZTQ5PNW", "S025R4KA43CXJ14BCOU8TFA7SGDX2YGSIAPRKAKYPIUQKA3CDJ", "C5ZR5VJ4BAS2JP9738XQT41H9DQS9VS2163WZ191JAP9BPC0FD", "TML3PA267K6LJ1SIUZZVHVAQSQY3WT7OB8X0TQXSF5MDYIQX1M", "4E4X3CTDAKGLRDCYK6A77FY3PJH1A71EC1B0KJKHJ6ATDSQTVT", "DUDEPK6XHZI51F5VEZNMQTVC7APYG8JY5EUOQKG3U2MS8CV47U", "8RFY04R6A4NVMIO9U5XA1AXBF2VZJZWHE191A530EXXNMOP5QC", "H83PC690RS238RO4PX978O3053AYBEUO0FF7HI1HCNJVRZ8ILW", "UN4ORLO3DF6B2R7HYUD0KHUHSF6LMIXPAQHK0ARPY1H5PKMBYQ", "B45UF0H26TXUCBEV755KMKNWSDKLFNS31NC5F75EZYQB0U8CTE", "8BNDBU9ISWQVQTVALFKW75GD0AZMRXD06KERKQCUTBRC786U15", "ZZW8HZEKUO9Q7T3I094GS5BUKB2ZW3DIA9JV5Z97WOWVQK745V", "EM32PTGAE0OPYIXD6VVSOLHM5DOA2TQDG4YOBOECMEFDJCN8BX", "IRPX1GY2NMXA23QMY369NC6NUDQLUR0B9MV3J1ER1KIO629C3Z", "7RW3DICQGA2J30Y4FHL63IX35IMO88WONZCKEH4CO6ZEKVAH2K", "49Q3APMUHB3ZONZYIP3D2Q6BBFU7H9MT8YLCZJI02FA6OC6V68", "I9GFO6AF4CDZVGGJ6RAOU4JK3WBYZX2J5X4R1M9FXCQTI44X3K", "Y3LZU88VH6LNS2UD9I3KO2OSHEZLNES9PIS1M9VEF3OCFF36JO", "RH9DK7538CFNVQ619U2BJ555TZBY4ZRTZVGZ4CAN7XICQHFSHT", "38LWAOBGLEHGSMCJD9JXIR9X21F6ETKNAYWXZVEVMTOZUUX64G", "O5ARHRE4D0492IPXLL8XG2OB4DC17QDT0ZSXGT6BG6J9IPI273", "7B70RYSSUNB3CS7FU53ZO2ZI0BRYK2GM3CS5N8TDKYOLPUUYOI", "VOKQGAUPTA23K9DVY92UB19J3Q13A2KFKZ3SLJWRF9ITSCJI7Q", "HWETFQFLTVKZS537Q12TPA257882JTLODYOEP7JJ2YLRK8BT4S", "8JKLQD97WZJP4O90454L6QJPU777GFYFF06WDGCR5AL8GTWWNZ", "VY82TMO45Z1BZCCZC1FFLBZ2U2Q5RUO6RZOT6294D838CDLZVH", "MCWYSNZ8YQ8YP7K4COL0P6GTQE9PA2FWTYY8Q98RZI3ET0CSRU", "YF9WXIJGMELG70VY6U6FS2D4ULVXSLR6X9LCOFP0MHZ0ZR69WU", "9X0Z3JGRFS8RQ1MZ1PNGPSTA2UZ57I1JFC65A8WRV9SC884MLU", "9MVFQWRYLMTFC5X7AFBUCH4O06FIPS5JNPULB27RG89MLQKI3L", "3GUF5VKM5K34P6WA2VAWZR6RGMKMNHLW5MKH4CUDGQLJX27NSV", "HZWJVPY86C1XIR42YHIFZYV2NN6KSUYZAFHTH3VVY96TD8YFUJ", "2V9ZZHRNE53KMGL9449M0J2R8T9H4Z0VWEC6P21B8OW0E3VRPG", "KEA7XAS45B5P60C0XRJULI8KU7TFXOKLVCRG5TP274IC7LJRXT", "U3OK3IIC9YUGQYDV0RY8DFTBG3CJIAGD66KM0QDQT2QMZM8QRC", "V56J0OITZLJAGKI8V93R62SSVRLXNOFDWNM6QIJKGFKJMRFQNP", "745ID77DV5DIRI96FAEJAEHLRY5SPBBFGY2IA4TO2NMR26CU9J", "AUPQUQP2WZ5VSLLMCXK3DPDKDN2PVFPJDCY374FOSPXK8XTTHQ", "BHAVMIPX6OQPRNR6GZVL87H0DDJQALLC1EEBCJPUW6BWLRTQCW"};
    int k = 8;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "150MPG0GHX3JQ4SXEFNNY3MFNQG51GFASJ7ZPDA86EAFPWD0AMSR";
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> numbers = {"UBV7UV8Y0AL6R4ZD4IPRI1JJGLD9JAJR4D17UQP7NUKMPATCAS", "4BEGQL4XDB62NS5JCHVQVSUDVRRRX6TAJNIK17B1SF62MX4ZX8", "S6V2OFJ7JECM5ZJEJNAJ8VHP7BS0JYEKYEFI6D3GPES6TSIJST", "BHJ60C0S9NDPU11KHTO1FF0VWTC6KUSLNXC1QPZ4J2P2OUGJUL", "W5MQLSCOKK0GZJ1P7SNX16293NLGHU329ZNW84PT2UM3FFV968", "G65O9L48FCVONWZ5PJ4GLJEROF36RS0JFR769GWEKXHFKQJFDV", "EF8VNI946EZB07M5Q5GUSI8BL9IC9LO49EDYU8EUQZ8JBG7DTG", "FWO2IWYGNJSTV1DT66NN7BA49ZIY9TDIM5ELJC58EGVT9Q6EBJ", "1YDTGCTAZLJ0Q1E86CL301WW4MO267EWNRCMZW1LJJX5WBPTPA", "F8LGHHTG5DR1JB271H3VEQV3SM6M1A9L68DK1VQ3AFN1VBZDYK", "79S0YIOZMYB606RTCVLVS15LWTESLJMIHVJGKUB14YQGH2N586", "618BZK8VL14TKFWJ6KCKAZ4QDFP7CWURN78Q1NXTNRZC99MBL8", "4AWEDFNGZPLUYYP1L5U81973T8HVKRACAHHHWZQH332CHBGAV9", "OWFS478NDKHU7VU8U6WMY5VXLI848V1YM26643B6SCSZGK1UOQ", "9JPBM1ZHNXXEVSW8YT56BUZWHGH0GS54AVD8X12D6027EYOLJJ", "UAZD5NM2EUOBC0CBT6YUBUI6NJGND4ZGYYP1NQBWJILK1Z70X4", "OIG38UC552BP9THREXWFMHY1OVCW35CBNDXNLNQFR5I2LD389Z", "INWR45MCKK341NUJ28WGUCIE0R2U9R3855IE0PX70M7JWPU546", "4BJVWRZAL28U5BWJPP9QUBYTTGUAIG55WN090YKIG451RHLLOF", "BDKV08E7NFVZH573AV1M40P156V9UY2H56AB8MP6RMKP6H7AHA", "2FFY58PJV9M6JS6MQFFSJASDJZFL39OQYW6WXJ3GMAREWBMOE9", "HCD2M6ZVHU2PMQ3R1FM4IDIY8LZ2BB9IZV8ABKGV966E2Y8J0K", "BJCVH2IHI4CGNPPKVS6MOS6VPF3JU3HCODV8GJQBO0QNSBXGY3", "H7QAUNWR117D57H817LOXMZEQ95JNWHWPXQ4JFHRL5BTYUU85W", "DPOQMHOBN9SROBGTIFL9PGRYEABX2NLIQAZF2QJYL52CTXL2ZH", "LLA5OIEQGL05VJZ2UJ3NANNVRCCCONDTNWBLJXAFRO9OQI6UDR", "S4BL9O5E0XVGGRH3QCBQGNN3AIAYTH1KS7I0PM1UGDIBVF05GH", "US16WF63R6ET7OLRIETTLNSY4E4O8OUM9OS1LJZ2KK3JTB93XF", "VUCI0XWFXVFFDVPYW32JZE5PW85919KHECDLQZH89UEAAGVZ1P", "SM6F7LLPPVTD0GQVYSFHAT9ARZD972OCD193F6C71UWP96B5WK", "B25KV08MK8TOAIPCULP8VHAR9P6WGOJGG7J177MLGV2FNZ1IOB", "VXU59NTQZ1HP8QX28NP4FSLR3V0J4BYMFQJPX5Y83OGX3WWFVV", "LT6CF3K4VPS1JHL720654843FMFFG0T6700S4XN3ZNNFHBYMDF", "ZUHRDI5JBOZYI025PZQQ3RB4DAP4DNYD2Q5H0XQ4T7MU5E2P51", "PHDE723IOEK8VZBIWPARS5O9HDLBAS0U05XKCS79QZZKH9HSEB", "OBJP4ZMH0H5XBSWYK0IWECLECL2YIFGI1AD7W0XQQ79LLPC3KO", "PINP8AHZ2GHD0XJVI0PHRK8L5UXS6MHFESNVAJZBDPH4Z28BZ8", "SVY6XBQZUD3XEEGEAB1NMVSE7AF4AP6835OE4S64TBMKJBHFKY", "RSO8O9IWPSLVOZEZ1RAAR1VW14WIV623NDNIXWW1Z5W7Y8YN3D", "WBP3A4YG07W5HSLVFL8ESYPGJLL4MBJ8E66XG1NTR3JSRXMX4Z", "2CM0LF4BUFO10OAYG1J5VBUHQQBCT1ZGOLTWRWEWKNG44JPOND", "1CG37V8K1PHY5C2IE91P1S4JXG8RFV3GIQBLAFLJZQI7YKFDU8", "Q5SZV4TKZTN9V95SJP60C691OE4XPPZJ0ZRJN18E1P4JTXLU26", "TP8QUG6F7DYW1NMCJ71IP16HG4ULB7C70AY5FVP3O9O9BUS7RB", "XV2C2S06FI57I0V04QK4O3NUAJRAYXMERNCI7WE8VWTN35SF1B", "5OM7VQ854B0S3LB968RTQ01CGNGI7FPEN0BN6TJRZXVF1WFUV0", "15HRKS6C28Y4N7V8HKE4ZKTMZ282Y48DER6K4RC8X3CD73JXFT", "VGD1TYM1OCN48S5FLQV5RWKH3XE9JFCUGQO3EZWRIF7V33I10N", "YLKAZCAB2SY31USX3HEW0Z3IUT2DO7YTT8AWHL11HZXDZQT8JH", "DCNS8PB9WE4JT2ZGYKKA12E0MDLED4VL95QQJX4X4YL3AY4X5D"};
    int k = 26;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DV1WL474BLJH7GEJAWOTNXV58GM5C9N7G18KN5M7WQ95B691EB4";
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> numbers = {"T69AIJ3ZJIXYF3O5RB0NV791X04XAW9JO2IW87JE5UYCMC031W", "OPC2BV9SEKUGT3C90Y52NK11N1JHJ9HBXV4M33KHML2G49BLGD", "5KF0PRWGQ4C9QWQLGHBRK705RUH9V2IJB75XQANRIYI5VG3L60", "YEBCILDKDX7UJE7QDODQIVTKVLJ9L7AUOL4R1365E9K3C919E3", "379E8P249A1NGIXBXQLL94FHQ69TF589BUTK8STYGM7L88PGOU", "SY1HS9PXKPKX28GX6GJF6UQS7SPPUBY136FOEP6NOBEEQ7YISW", "R2TRMLDCRRDYX3NXCN6DY9687DA0V3X1JTDVH14P213K3O8M42", "A3DT2FB5896AGE3UFVVOFHZOAND79056ERY7BLEEWXZ9T8AMHD", "UAGPRD5LU0GJ92167G17FHDGNU5OR398KI93OHNRXZAJYS8ZNG", "HMDRMQSGBRRV5DDLVNLV7X7GUHCAQFK5DGS7QQIR0XYMEOVTMB", "UAQDMBWT7WDLGMQ3GHH0FFIG2LT5CKWOVT1QSV52AYLKE0541U", "JYWCSIAOYF1LYS3VGVXNHQIU14858L71GHE6DR6WIS5LD0R1WT", "O4MJHHEQTCX7H413C9BELNZX50NLF795A3AKPK7UU9ZCX53TAH", "JF2UUS9SESSCM4VL7EHIO8X9YS8I38HI8D0LLQ3S105C85AOLT", "LOD2GWA4VQG5YN5I1VE6LE8TRH5D4IF45QVJ72K27Q0BN5IE4T", "K50Z6TWJ95WKECC8428GJM101X55JB7DSE5EJOESAI8ERUZVJB", "9FKZCXYE5CP0OMA0U6LSNUGLAPAGHMZKHJG8PKIVXQYWC73019", "O5JORO1AENMAFL2B4TAA5CZ0GEVAJCLCQRCY6KVK9TTUYC1PM1", "V6G5DI3MYI7YSPERWVOWOYUEPYZZ23WTHMS1WBDOV2EB54LODB", "AH6BTQRNDRHX8P97K8V63KLWKA4HSL5J9F9SW2W758RVHTKRU0", "C8L7QUHSHJITWJUXVQR9OJECTFXBFCGDU77LFBBZ6JI33897B5", "D5HS2P17EZ579PYE6ST81HPAIHCDQ58L6LH2ERWSGAQY7JIFI1", "AHTWFTOWD5ARGNHYUVNRSKCBLR5MADDWVZSGE253NZO9EZT2N1", "FHV77PI6OWILP2ZTA87Q0RXM5YA6W49LQOGJ8M0L381YNJR860", "IS3460F66OLXZ4BRQY1NTB8OAS5HAKNNQKOWUZPMHDY9HP0ODR", "DIV9AH03BXIFYDDKCZT3VMSV2IO0GYOXTRL4U9MCLRQVCVQ5M0", "QUL89BIHO6MZ99H5BX999EMUPZ9ODZ726EEXT69SV1UC5D2V11", "6JCT9D97WQFU9QWGIL554UUT0Q3ICJITLTQC43GL4OKEJ25MXN", "GVLYP39NW8TOJZ8JBS0R7D1CM3JC6E5L73QKI1O07D394N5H6I", "H5VE5KXEUU9BQ34PFHETUR2TOX4VG66T9EKK9QJZROZFI3GADB", "QSH40YNXF0OWMFV9NGZT1IR1L3U9IVTZRCYWY4Q6BQ4ES3IJHJ", "J04ODNIGDXFC0FQZ18C1HVOWGOXPATF3DMM1GXK8ZUCNSFZ9IQ", "3YKQ6679LEJ2THHHT4155DTEK3QNTBG361ODAU2F4C4IQ3779E", "JI925QNPG2DTR9GFGRLF3ETZWJGKW4T0F38N8FWB7EEXWNTTBH", "3YKY5ZO93LGD5UT0PDIEMC707ABGCAVGIFQALS75C7U86ZQ3CO", "73S99QDYKB41LO9ATHB74H85M3FWA4Z39FP1U9F4B18JOVMJII", "W37665C1IL27QQ0CPCTK73WZ6X9RPXGZM9A284U6ESMGPDQ8JS", "4SRYLRZ4VLFXOLOEW6O0V8FI7RSBOEFGW1242WQO850CO4P4N1", "GJ9RPGEWA1UAI3WE798OS597TD97PCBXY5FW9HNGUT6RMNSOV3", "8FN0WGAS3R2HHMFND84G713JAXBUWYMWUUECEZTJ6P2HDT6OZK", "9JWOVEK0PSGS2W2CXIU7QRFE61ZL30TDOWDNVD9Q8NQHW4CTUA", "CM7YPG60MHVN5QGIWOZLAP3O0Y4NX13EX7AP52AJQLSHKCKI9X", "E1BVE1OQ0OQKEL81R7EBLBZ11KZRT9A4OORB478NY4PAFSV538", "AX5NKDDST8HUWZM8QRGNI5Z3JVJI1ADFU8GUUQGTDNPCUIG63E", "TOQ47BHNNERJCTTLE6MGZRIJ7NCAOUBS5O0F6BGBTTRKV6YAL0", "CJM5T1QOMG9AAV0RKIJDK744J6SZGBFQSE4JM5WJCHS99ZE0FP", "OAARQM79JU8XL5VV3HLIMJZJ3SOPBI5N2012P6XYOLMQ24ZTNG", "ZDIY67CZ95JWT4EO60T9NMZ46GTM7IBNO67KJ57EAW5W2RP75L", "UGK1SQYNUA9CFR3ZF6BS9XP8AKS03GEK88FTAPR117TXSS2343", "DQK6AG6KZEQWLUBYPFVZOVHWO26QLHMDE9XK8C9H5HVBP95FAU"};
    int k = 12;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "17VEU3KL5X6TVQON3M9WK7ZPG4PR4U55CL9P7QQ6PY383OC3KYUD";
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> numbers = {"ZQIOB2B9AM83JCSCKHV4SBNWIVTCFUW86AJZBGGFRGNC1MHYCP", "M3L1YHD0XYFWZ1NY0HFVQ5HUEFQY7LJKMRBW36OANQMF3VCVJ8", "5VRDLBCE6ZDNW0RKWP1SG5PC76RPSUXPNC4CHK6LY6EPNKTA2C", "QMXNVTQZFO5KMWZAA6BDWHNYSQWGAYP58LDY2L305MZYRS8MR5", "6I5BFRS50RPFXBS4YHOH6WE5PZ4BQCRQO52PPTN4RRH684RR9G", "UFU5ED6YERRR2WG1KZMARM0TOIXWVIPSKQPM719M10JP1KSZCC", "SJKLX1D1Z9F46AEPA5TQ30TAD9ZSC9XCA687YSDKO5VHONSRBY", "VLHV7DDTUM3H80DTSAU4663CODL4DN7AVRAXZCP8TLP66MG587", "705P8ZBYMPF8MD3LG7B0DXOJPX84N5I2AEM280ACL2S3Q1HF5N", "NAIJ0IMKB8Y5HK70GJPJG09X3VNEFD1FU2QLQLRM37GW0VKG4Q", "GTPP79SZPT78VTZNC1LANYCRGFJRFJE8DBEZ1CXRCDGYXRASVG", "LK4BQ4OJ2SD1DX94BQ8QFE05DI0LDQTBSJC4QTVEIX1L8WQCLE", "R2585BOVKQT7F4WNSNCMG2TKIMY3IWIBUCTJRBPACSF2QEO0O9", "5XS9MBYKTO5F55QE2IBR9KPD5J97K9S835J39P7D1924UO7W4H", "VNLC2JTKDKZFAXQD01WEVD0OXXFHJ0R5GYBSEX3NMEYQY0S74E", "5QFG9YAX11HAZH9XF36ITQMJ09XXWVT2L8988B5HN65KRG3P70", "P4CED6R4GBNDIO1879YNF1QJO6YR1SY9MTMIC37QS170QDQGAQ", "OZNLSITPLYKW1WDU1OU8KK78I2Q29ENXBOIRPWMBL97VCUPPBZ", "AR6AP4UYQKKIEVXIATR033CS7SDZLFKXJFG6BH0E5197HQZT23", "STLQPGXGBVTSNTUPYKR67GHR07PFJQXIX7VHMJ5GZIW155DBQF", "MBX105HG9FT6WULRU9TAEWAN6H3WPCKUO1EW6B7S62O5GDMYAX", "R1R6RVU3UAO1MW1T17PHHMN72R3DU062STSR2VWTZPMFRPTYA3", "K8C8HGDHK7LBQI1X3BA93OKMMBGC7ASY1PD4KZKF198NA3EBJ8", "3KKSZMY4B7NDWWBL19WCI7ERTP8GEGJDBRG1ANLK8PMTQ169LA", "M4CAJS8FSRCUFQN9KXPWWMQNI93WOZ8Q7QGYCXDTKTILSY5HDX", "XWS6QMIP2PG2FB10ZJOG1H46VAMXK9E8YAKCPUWYJPBEWEGE3E", "5A9JIV0UXOZMTWB8AJVZT89D4NPEZBSOUUTXINAMMWL4CS3OYV", "VE6AKJZJBCMIKTB1F3SUVF18IJ5QJT4ZT20SDHVRK1OEREQUFX", "PL7QF90WBFXVCUGAAIYPHRWI9LV19ROPQCKUELUE9NCX4240UU", "RA9TER9CLOSA6LLCV8TNYOQJKA9VC2G8VL6H8W8H3BWYM7UPI5", "PVC9HNWMUR9A3QGGVCEVNVTN4L96KRAC2F9CAZHI3WPZUC474E", "62938JYJ2XQTNE545BQXV9EIJE1H7VVQ59AIEDPMTJ1N4U53CF", "WT30OU1QZ8R102N79NYAUY2XESO3CAXZX5LL47UGRKQZCA7XHD", "7Z8R8LIFLCU17BWB6LO41JDLM2V2KMURWBDE12EQ3RLTPPDEG6", "MRFQ6UW1SAOLD8R4VPPYAAJEYJ80G6ZQGDGP4668X2MDBNE4FF", "G0W1YB8GKWQ6OPD9HC89SQHLJEDYOTVJ4O9A6U9ED5JA7YJKIX", "625RQRTMNPHABMF90A45O4TZGZ1Q8Z5BI6K9QZHHI2VR2XY31H", "MUFCEQFX2DT5GEPADYF1BP0XE1WVE6C34BXA2RT0ILI2YH1EV9", "J2ZS5BYYLQ4MOLBVCWM18UXG2T05PCA6BGDVV0NC3EQU2CLPWP", "ZQPL8VDWPACAXJ0C2T4AIGFS0607T922XDD6OSQUJIPNA884X0", "4WM9R7UGE5Y1GNVSGVCMYW4G8I32E03OJW51STXMBUBF48EW7U", "YT5YX4KPNAJBAJ7RFX4Z5HMJ5R2Z56G88D1GRSYSOL1KCEIFW8", "QDAJ2JVASK9XABQNU4KT50FGHSHW8D3U31NZ1DIFDS0R7FUBWB", "DJWXLKA0KCMNHSWMV8IMPT670K0Z51N7BGM9E9BG7ZQ5H4ULYC", "73PM29EQ5PJ7U981CZFWW21VJQYLFD9RS4DVQFG1FJDTMUH01D", "L8UG0MILOJI62L5YR2S638KBSPRMGKRXXEVRTL4TAEAWWR2QD9", "3DKB6JUP3OAQWDH4U3WC0EBF3JLHF6IQ1HXRPNDAAI5JIAZWTH", "SL2RQDSA3DJ204GJYJ09FKHX5XMD927JCV09HHLTW72XPK02XV", "QCCX22WGDTADJGIEP935ZJHODOQALQQ6FTSS2ZU7LRRPPS84ZG", "63Y69WP6L916JJY3RDYSVREZYA9W6XMTD2L414SNI4GI32Q4QI"};
    int k = 12;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1A84VR9XAR4R7AXJ0G6Y4NQHMDI5PG4OO1OY4KX04YWXXG9WGB4E";
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> numbers = {"9RM0GVP12X6D5RE7J5CQRCMN9D9IBZTHENFWTMM0U89MZUM78K", "DOIJ8DT53UKIPP66NYTH5ILWJTDNV86JU9J969GD4K1IWAH05A", "2OWAA7YB9A01AJRN12C7RR4KW24HFS0CCJI3HQ1XMZI0TJ6S63", "LSNKRPXA8SOL8ZIYTBQCHQXA8HARFASK22PDTAGJ29MMP3WVV8", "QOGPCUKTQCFBJI0PDLEI82P263AVNT77X5B94BXOLFJRLTLF9S", "VE8U0UKMIEWZ8R6C61JNEE52PKAIQ32A1LBMVT8R1OYDKTZAG4", "IJ1F31IV7SYLZLDUV4L3X447NCPIH1PRSB3M1I41CLNZW6GH4S", "T5NJKJB4GO3AWIUVTYJR3EXYXKBV9NN5T4Y051B2GW9HXDI1UO", "SM24CF1F4WT49C97NWWTBC74ERDIH5P86LZ61YB2CGUWRHBXG9", "5L78QEUMU69PHJKDCOAKAGMBJE8F92SXNURAGE0RZ8AHJ4WU8Z", "DG99EDT0BMU6JEASKPQLO1EOCS78MRP5WWRBZFIEBLD5IV4MYX", "HA3ROT513V1GO2YP7V0OJ8UEGEN23XRSJTA8QDN1LXHWNCX14D", "C0O7N7NBYRBGNYSA1VKSDBRSET6TO3JB0GDHH5W2TIGP71CY75", "E2GZE4COSOILL0U6PPJ7I8DMPOF64XN31G5YCPWLOHV5EAI449", "Y58JJMTQRVYITCLYO14K0DCMLS439VMWNFAKVNP1Z2OY6RROJ4", "FD78L1TPJ1KNTIO8KXX1BSPQ4N6SFFNQDHWE7UVBXMZV9X0HGA", "VRRFALG3MSOMOX6ECENFPW5OMA7COK1C099RWXTBPETL1X18S0", "XUHRWI9WKA8PYZ6J7GLHBI9L9PRTDOYHXR3YOLMMICW4LWMMTJ", "ROBVNOPI5OQABODY1ST3O5NG147V4ZDL1FKFTONEB4ZKGGXCN7", "W87B7XSC6923OFJPIWX0FMSM956TU503O1NSWJ2VV312UHFH7T", "3NKP198V9FWA2I2P2D6Y2W54XE7U1Y9AO918IPN3MOY00PQSM3", "1ZO4R8FPPPL2P3E0CE0XCD2MJFB15RSOQOO2SUBEDA75OO7OA6", "G4M3IED2Y37IT8MN13H2IWDC4806Z3ERI9GH6IE2SCQAR6I6UG", "J3BORHOZRBRESAF976SMJXGB8SES3ECPVOLGV3YLW8UVFHBXW9", "QZOXIJV6SA0XSORLI4PG1JLJN4E8IVT3IA2MBJT0CJ43E7HOWT", "BQGQO3CNAB5WU4THZT7IOS4GDHOPV7RX1AQNE8S2VGGO9PWY5V", "7RRJE5PAEVTNZH91U0050ND3KB10GN61ZU1HSNJOM5XGBHI3UJ", "GHCUP84005BV8YYYLD9L6KCHPP0KZ5WL1K22LPXC8R6CJ5NSLA", "O1POHGXF83VXEG8B7TN72Y40MZD1ZV2VMW8M0P7NCA1TEQVLFZ", "ER570FP0GJVGA98X48TGAH239KXSSWS2FUP9NK2HAYSQXGVVMF", "7OXVEQUABTW612A16R5PO0N64Y9TE7WT80ZIN2RBA4X7T07HNQ", "DOCD83OK8GLJOZIQWOMI1GOBQJI6S2ZVPXFKTN9KU5XW78OD4G", "VT71YSSHRHRIK53GAEQ9RGTS9TEPGBMLONLZ9Q2SAU3PJDM0WK", "H4DHTTQQYHP98JSPHQF3WATL3JR687QBFLF4FIK0CIVLJQ29J3", "QS30SUD92S4NQ023LX6XGKCSIC5HRPK0UDQRSMCAHTNJ63QQRJ", "NBXASMSWCKOPV96QRBPBUAW5KMSCGPW5EL9WJUIEWF9W58R9R7", "3TPU1AETDB5O8FUK5FDUVTOA17DC44SR532SD5SQQS0S1ABDHG", "ZWY7BVOPR4WN7L1A28KMVU48XAOPV3LU4IDJ96SYDMIKJL5J8K", "5GK9ZM51PH9ZMSWL4336QRCKYPAJ8NWY3GLTWT06VTSIZ0FU85", "7M02G268NJ4ZO6OOS9QHE233H4QOMTUINAODL46I8363OLKTKL", "EMS4G5SILA6EHHW8BE2WPWB02H4QWZVNOG2U7BMC54H4SSL0BK", "CHI226ZM0O9HI5YV0S1EWJB2IVQB4ID7UAGCB06MSKA22QNYCN", "2IRDHD78G2L0J7YDWPDYQAZQ8GBG8JHHN5F0M4IFX8GZRFMB86", "ACJG27YNN6IDU4ASHCK3WKZU2Y1WDUSOJPMIXPYT25FT4L4I11", "EWWQ4OUB4BL8YG4QUB3VPUH1141CEMIYRHB5AQ9FSTULTWZL82", "3DTY7XW0LC3LUZMPKFRZJKIP3ZQNG6YY2EF2BQNRF8N91SKMSM", "LDTQQP258LBQQW3ADTVZ8VSFEPI7Z2FHQH446DCRQOTLQ9AF0J", "1UMB2BJ0072FOVB81UOX9LQV9JUVVWYG8WRPVH5QDYHWFZF0WF", "ZJ6I8N3AIOMFZJYIB0W90I2WKW5OS4O6TWH3B19D5SGXN10OHK", "XQR81WD5CQ6UPU4G0VQ48OBPXZALNBVDWPNRNM9UNMD6PT6YML"};
    int k = 15;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1AGL6TZ5AIFDFRRN2Z881FIN2MYODFFJRVZFYC9J0DLMZXG7JGEP";
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> numbers = {"6H5X52NHPXW0Z7PETFGEQKNJAX5OW23TGRPFMB1ZFQ4QJ2THZK", "MX973UFO2UU3TXPLANEJTZN5QPBGRKZKCLSRAVKVQKHM1RREHM", "Z7EJNOZV0SHF8Q3DJT8ASGAL55S1AJGKS455KAWVP8IXQ67ZJ0", "K7NGS6CDLOPZG3Q9LLY1ASYWDNRH8F8FWU3611RUBLLIUMZ2YN", "VER1ZKM94ZFJMOAQJFG76OZ9G3VU9N8FYILEO484A8XWX2SZH7", "UOIZQYZ7U6BZHMOS8523I2PTTOELMYXGIPYUPHCLLB3F8CKHJE", "PZ0HE5UTGQD5H4UOINA6L2B2ACEEN1RIVJJWSB1X4EIJBXGPQW", "XQAFUAV2OWQB7KGZ2V88W7BY9LNT8PMKV8H9TQ18JBSOMA4NA5", "JFEG64MNFELC67OAQZHKJZSW5L244BHO0JH18Y5WWXJJ4LILAL", "BZ6FVF2YPY6UZSQH1VAW5DL79N3AJRYX07Q6UW12NU7SWM9U33", "8GK69M2FGCXD0YY5WCCHW8JE9T41NGCXZ40228X1AB2SCDD6SZ", "CDJ5VWZNG3KXEQ0M9F1H0913UF2NNZBW53QHV4KXIGVL7QJRUZ", "ABFYWELQ2H655SO37P3JPAFLYC94SNOE6VHMF4PODYSPIDPQ2F", "ENIH25PG8RPAF3B0EKLTKTP15IAJXQS1OLSJPZE3U3C9O3PFVN", "60KB39TFFEPV4UQMJOGB9ZATK777XJSVCN4WXG8CQFQ6NOKJBP", "U3EA115NGOI4U545FKQY9CWJU9L60UFFWLCDN6S0CWFKHZ3KIN", "QP2BMRA6QURXHN17W7895VEJOBZN1PXWNC08OX54479OU6S8LM", "ATCX74O657PK23GFSQY02VYB1XK5ZQXL72KUQ739RNRJG9TAPW", "7C153KTVG48LHZ91Y7S4E5GMML4OWXSE7ZSQH3UMWER9F3U4CX", "XZ637Z0FTI7BVTD2R591HIVGQ18JHJ70YN3YHHQ3A0H23E7RQ1", "8IKHTOC8M0MQZ9RGQW6V0DD9AOAZDHYBZIBUF51GWE82NJAQXQ", "L2TBJEHKO4M9TZXOKTMY8CO5B3ABVO1Z747NGBMGM8XBJWKDK9", "HNDJ3Z8NO33625Y6QG7HLV24RV7ZNGXA7EU7JVLBZXWXQTLIMS", "Y6EXY8Z5GQJQCRQTTBERWHBVZPJ0NMAMEFIA5SGTP51UNKDCP1", "ZSSZNQSBOKBEH5OQP9Q6BPYZOEB37ZR2GLC9KDBKGN0B4Q0T8U", "2O42SOH7NX5RV4KQ2R4QWWOO4RD9CYA8AH9FMZHISSKPUKN677", "IKWFTRM6EW0M213WE9MAPUKT4DXHMUX9N58QKQTQ93MW747XHB", "XD24PWD580Q0GVXQS75J1S87OYN1H11C8UPANBMUVF47HMMVQZ", "U4LVSK2Z6IRJ1I6UUX5MPLFMO9VDCV107OBASPEVR2H0JZAGK8", "L9PVO6YFG7NXWY1U8PU1ZO7LM2E7M6K1GWCOX24F5FY28AKWCD", "5URBDCVN9OW1Q99M5QN8RB1GUQ3VP7WSEZ7UAAJKA1L8METU12", "QVM3XG13SXKO5N1YW562GQJAL9H0GD3PARZ2XOXI6GJMCY42CN", "4MZA8Q0E914AUCMJJM2Z7C8JQKP9X77GOXMUPNM1JSGZIJ79TL", "83YM5D5T0I1WVY0J0S06VF68KNM87ECUN0CRA86L6677H65EC6", "Q0KYHI0JKHO02AFOVFV8DN9IJE0IY6M43WF8CLX1K18ZOUQZ76", "SJ430EMLR1E7N8UUDJ7RTR8GAUBME41RUSICAKKUWGT6DJ6PYP", "KDH25YIU2FCGFBPUHZ40JS7KGGEOYSG3D0XKJG7EBB9PXL92QQ", "J7JH32UCHOY2P9SV30QWDDPQO2D9DBEX4M6U3K9DBQ9Q4BEUHP", "BIAV9AHR5A2QMV6SKOW3TYHYDBIPJMJS2R85OFRPF1BS61F8TR", "4DYPRLMSUIE6K4M5675KKAUPHTOGB5W2O782YT1I3JCAB86F2H", "CRSN3RSSF2U4V2BAAJQCBQ4B9BYPD6Q69IIXI7WUED61Z77DTZ", "2DWPFLQC9XXXARPC5DVS81IHZDQRS8G0SKJ5CAUJV4SG6OUHTE", "W98MV9Q7LCTK25ILF2476IMU1VHY1B9JAYKLY4IIE2K2T1CB88", "1UVFA9X3BC95EOMZDT8REA557H9I2BFR1M5SQW0DGPOJETYVS0", "F8COILN3KI1SVA8L77SRKH16ML7X7I6PQOGKIK3SE6W948YRZO", "MPTJ5SC8YZE2CC3YMAM10FGB51CWQDCEK06TBFX7WQMDYXIE38", "Y3Q0ROPVAR7KSHAZFGJLJJ2J662AQG59SF62ZK6QK9USDE17C5", "QPPOB9LVPYARA4QOSM6P7PYUTAQZ3D4XCLE8HY9VYOCHA7Q01A", "GO414T9ZKF7TWV2MQ01N9YXMDIF7IC41FF3B8G2NLQ6JGG11W7", "Q0092KWWK87W2C6MXWH64TUU4K8RN77X20X9HG2AU6LZ0GORZD"};
    int k = 28;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DRUZDAXRXRF1G51AVPHVZ1NSNTQEM2NLNC1HH952MHDX5776TD5";
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> numbers = {"ARABDZGGZP6NUXHV6FP6C5WBK2Q7YI6Z9ER0QDD9P4YYRH8FFY", "Y7JOR0JRXFUVW3W68M3FUEW56BE2SMX2MZ1RU5LMT6O4ZCIMZ0", "P8PQ5THIBZ4DWXNDSQVHZZZMTUS40KQO1QTQRSF8Y4IWT9QIN8", "BRLCVBVR2TPGGHILWCODCU5BMFDLCGJ0VHL8POUMULFKJ9T0VN", "K0H9RGN68DTP6H4M9XGV3IQ46ACECCJ2RO2WT30ZTS130SN3JB", "B43A2IFUE2O369XW4OUMP4HZY7V8Y52DW0L69SJPNMX2K2CF72", "HBKE1FMOUOHW6HSBL25QBVC6RQGZK92L5B51XNGF82W374HXMY", "HOBDVTYE4DN123GS0MHJJXO5CQ7JP19OZH3UDLXI19SI2764Z1", "BGGHDQQCR30V8BFJHRPYEXAJZLTUBHV9IS1HYUU3TAYZBJ88Z1", "7GNJNBYT0GF0NTSO975A8JY2DGNWD7HE41XAIV19UQ44FM3B57", "XSXC91TK5X5WMWAENXYETJTNRVDVMIX1BYBMZGSIR4HI2B0MAD", "ZB89M2WRE1U4UR2JXU9SQZK0EFUQKHATF6VQKEWBC64N7UHB9G", "44PLPPHORZ5S1ABEX8WQCRXUA10AZE0HZJ7XV88RH7NGUJYQG4", "49R1AADQ0E3LL59DN0B4KPEJTPJMVEXJNVGKLE25IGI8ZDG8KF", "BNNHHDOGE9PXF0ADZUA1O6DLRK4FIT9JE4WGS1A4UA090Z9MS4", "U5YP2ZZBXANX1G7I406K5OFCQOQOO1AZT9TI769GRJ4H69R896", "QV7BS1ZN5G8ZDEKUZIMTJBOL8C3V5MZU8BRT6NAD1665MG2CCQ", "45Z60R9JDLFKSNUNSU2L1B5Y14LLKQFR39TYCQATDKUEH1B80H", "IG2A81U4F7L4QOSJVKRFAVUK2KWWSO5RDQ9SCHWD3GUZAMIMWB", "COM7JQEIYGYCWLLVITQXVTHBJ9SXZSVU0DB3YCW3IQMFAMIE4A", "45IP1XF4MJSV5XW9ENP011ZQJYQ6SJ129HFONOZGAV8TW5IYMS", "AC6TAP5OJW7SCTHXISOCI2TD6HU0732K301JR3GMJX61CMGP0O", "SF887FOA1S4V6U2D8ZBTA21LM82XNGBHA27F662RNRWYBUP5L8", "CQ9Q9HVT0NHJGXXDJ3NEPR744PXST664SSKYHZZU0V6SF5V2S4", "TD5W162M60D7H60RQCZ9J8MYOJ4N25KF29JZB5C2KAR7I5AFBU", "DCU0ZHUFZJLZEZIUIRZ9L5Q1KCC8UHUCQ0DKEHNQ9K0ZPANM7C", "OS6XUHWTHBMW4M4G4WGLOOUBVWR0LYOTYUWM9JOUMBI8IGV5QM", "6Z5HBOL9J2ZYOCIPTAPAZNBVIS0KJ6MWU90CQDY8H4950PIVKH", "F3BLCAMI9NKAKH50D8H4S9ALZY7AHNRA94I3GJTDP56ZHKZQ0Z", "N2O906PYHRCX6XMZR2J3CUYKWHUZ843FBQ8VDASJ8DS2NH8D3E", "PMRI9ZY05ECIXN46M3ECR6TH4XNEVV8EC8ZBRAPB5LMKFZJ94Z", "PYCMK00ONP185IBEDCLG9OOGOA1JID98HZJMKNN0OTSNBMX7HK", "U13401WP5NSA4KCA35TXL9950PAWBGL0J5LUTLVD0C5V5KUE74", "N72JBCILE3QOB1Z583MHF596PL01K7STG49F0MBGH4PKFN8QTH", "C914G3RONAYVLOUO5P4VX2V3SINVP5U7RRPELTOJOV6E1MOJWH", "20YAFLWP3ZGKFSQI5VX5PD2NM8QWUXXBQ8006DNO1JSXAERQ66", "DRT3OMJSNETM0BLSNZ96YVG3S8XN6L9Q4BH35Z5YFJX0B7C64Q", "J2ONQZQOUE7H0FN0IGSK8MYC8TVNV2FVK7SVT6CIWBMCSVEK50", "60BDHE54PR7VGLH6FTP52V6718OM50M24JTCWCLD0D7FBJDABA", "PQMIII9HEYJO7EGBPQOEFMCP2U0ZD8M651FWFNWOT82RT6ZD96", "5MJI6057IF378YDLAQ84V5O1EJK1XR2XYTG6GRUPW0Q86XWW49", "YEQCX7IH8APWVD8BCOD8NVH9J15SU3D74SKMH59DN48V9T0OBK", "NCNS0SL5KD5CUWLTPGLPH3P3W9DPBT0ST46JWSULKQZB78G738", "7TMHVXI0SGUGUPRVXWOAED35UWW9V3V90HWB8ZSKRJRG9TKG2M", "5LKQ3CVL03XRMGDZMXZAJ5W3MNNOZQTU6SFQZFQCVYZXSSX6L2", "TTWFL9WEH1HYLCXDU1US0ZBW5WUCDC8G1E42DKXVRFR3557C84", "HY0G5QXVC50S2XOG4GL5QHDLM3K03H25FL5ECOM79U44B356TH", "CINLTGMINTWWGZMTRSE9FH9TSA0HUMPR1QC3B4YUEFPYISRJLT", "WSCHMRHE60Y1L6EIU4SVG6MZXDQLJFM5B1EH2F9LPWN6MOAY3D", "WLLNELKUB0SMWOM6CWCYMJV84B5DD8VC6LY7GGJUAE7CAATCZF"};
    int k = 28;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DVCB4SUW5Q288EL3EGETZQZE4M5K0YQ0SV3UJYRU6KVKFXCFVG2";
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> numbers = {"VT8EI34SUW0X2S9A5ZZDJ9C0YXNQM0OB5CTBJDGDAJQBKG1KJV", "A81IBHTRKHGD8M8ZR2GVY51DIZ3D6NAGNYV4YXHAXG0VB50Z89", "YVGHGUUWWQVSQQP80DPCOJ26R90EBHGDOYA1LNQ1ZJ1ZJ29DN7", "3IAOUATGWW6IRGQDJQHGPFT9ZQ3KM5HZ6FGALXNIQZZTV14OKD", "7MRKYMU9M1TABYIX4A2LNR82XYO2Y1MSXYG08WSVUI09AYFQN2", "IGF9FH6ONJLYKU5WR74IGX4M7L19WFV6VTEO2MRQJ7MURLGWDD", "8GHV0TWJPOHLI1H1L8AL5NBDEJ3MYLC7NIJYY291H72GFGZN35", "CMGHN90JUM66ICC7PDA8FWR1FPQBNMR0TZDMPA12DU4URFHQDF", "J30Q2HRJXXFEWZPFNA1ZRUHY5OJRJKOW7TTU2I2AABIZHA3WMX", "N1AYT9L3R3IXHR0F4PZJET7PHTMCFQEBJRSBRFELDBT7MQ0ZT3", "MKIQCE6XKDJW075PPE0R3WGIN8JN6BVX4A1WWR5R6806B2NRJV", "VT61Z61333YVWTLZ5IN0SEXGJM6OBQLBZKITA34NFANNJ3BNDK", "Q0J7SX8TYNBA2KCBBZO8NB5MTBQH82DYKMKYEP6REGBRNMT2ZL", "S5RJZ5MGFDQOV3KPO1UK40W61GE8LXZGKUIYD1L085I3WTDYIC", "BCNKYDL2SDAA73YXU0GGFQ90990INFMR1RMUU0UCI58EL8560V", "CE7RYPXD11L4GYEA6X564MREP2T71IT0NP7XH7NO0FAFPPJJIL", "78ZDNLR606HH1P5UFDC9QEHALM10E2J6T89PR7X32JZPAWZ827", "O9FT77U1NRYZGEWIXBEGZTIDX66LT8VWO7KQSF1DCKHIMBKF9Q", "79WZTPR4SMG8XHG7X31C6RT4LJUA8H19LSF9ORFHRBV0NCZOS8", "5L248UIXKAIVLFPKYN23XO2IP0AAJ44BYYNT6BR77PP1BWWTW2", "RH3TX9OKYO6V0MVK5E2HT15S3V8F5JB8IFZFIVARB5WXR2Y4VW", "RU5J811Q5AUZNVS27KNU6JRUVWC5V7VI1SNJETB2GYL9HA1TZC", "9DDI4J2GAGQSFTLS0UPQL1RJGPKB413G6UJHUXG9Z7S8XKORNT", "IQOOV7DL3UL0GIBG5C2CYFWHPHBW6JEZY3RL333CRF5RVABTUZ", "8S4J44EDT5D7OJAT1SN2EIA8WC94MAYVJLWH05A4868OLUYFTT", "NCB7N2T6DKE0IOUFL4LLD50BK3M0O6B0A1KHJTH06NL1J4E274", "BI0VR8F8DTX7K50B9UT7PHUEHWW8TQLADCJZGDGA1AOPONTXA0", "VKYDL0N418EB2CJQVDRK6H2ZTRTJBIFE6AV2UKBYFSNZVBQIRF", "Y9AXV8WW0V9A6X5M645C3ZMAXEK1MKXBFMWVM8JF0TK74XV2SS", "4RV3H3I2I8XHO5XA2RNVGF234AT8F7ZV11C93UWRI7K689LDDP", "YOMTT4G5LMVHISD7UL9NASZ5YC1ADKRNR76BWDG091HIVLIFQS", "5GO11NQQJ3SJGPI37CDO6GCAZUF6GJI829FVM4MB55B7SR5TE5", "EAFC7JQIGSKNZ09LTJX85Y1DW0MMFL5D6BPX1NIQ8WYJW3QXCK", "H2K3GU653MFGRXD0M2NQT1I8NHW84D1SGARRVLJC00IBDDP2UD", "PN50CX3AN20HJ3C5SB7144EXIO6WRW5FYR2VGJBOUVL2Y87KP3", "Q2I6D7EYXAHVUMM0GAZVRWCKL7HRCNXRSAMDSWE99Z2DUJELL1", "JSTQI55O852CUU14UM2K4GM2QIHSD5PMHFZSR3314SLATBTXL0", "V3NRUJSCI2CGX4Z5L0NYLR73848LN70F3K7UHZDA4Y5CAY8NG6", "KVMKVLBJBVKGH4AASBLQHM6M7CQEN0DHRZNIJQTT2EOXBAZRJA", "CR1XKN1ZBC5IB6PF5RI7Z39WW427IVDTEL2EQXFSA1HP6XR83N", "GYERD89N5HWO1033AO985C7679IEYCUKAYVDWK9HL87ZAR2DIM", "O0WH72X7APOAOURR13SY28F33XXL5HSFWU5ASGLY5EXZJW2TRA", "K5IRZV8WH4HTKV83F6G0KCCAWPNO2VVY6DN3LPAPBZU9HBZYFL", "RR16BCNSAQ4X7VDWRCIY0R60VBBSCK7ZYWAY7V6Y8MQ697UN27", "DIZQNW79QZ7SR47LECC35AMB4PSERJI2V20TRMTOYKAG892RWX", "NKB3W8M6P9J3Z9FT4OFLO7F9CXVRQF2LXEOWJCM53S52N988T9", "79IKCFO1JSI5YCZ8YY3SXOD0QTG518BN5I6BZ7HENE3HF9Q2YT", "CQEVCM1MJB4FLLAKGCWDKZMM415ONQWPAUFN5HCBP903WS31WD", "796VMELJXAXIDKAHZCG394EPV2UJQV5P94C19F0AN96S3NFBRL", "C91YZM5RAET9AP47WU8XA5U9CYURLRILBGNSPLQGWTZHZ7XZXG"};
    int k = 30;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DZRI8YX96SQ1C1339MP4VHSP9WMCCRD0D5LIPGPZCSTTKLWJ5RI";
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> numbers = {"GU1J5I2FT4HUDGPG3FAE4RPLXKLL0KG291MR377FR9HUQ7BPB0", "PNIJ3PKOQAR5WZ3NVRVBX4PWH7X6OL3PMQGEWNB1PFOOBRAFPG", "841YA06UOS2USYURXGBMA86WR10TEKYX11T4XURDU0HPKU9X3T", "LDSLYK0E7246PA9LON6DLVWTSPVWAVRDL991UP0FZNSJ3V03SU", "4I7H48MKSO4U0K0VR3KQQENDRHRRDS99L6BUIQR4LJVHDXPOIC", "Q5QVK9Q067PYCVKBQP2TKJHWOQ32EPZV8P4Q5JJS1A5KJJ0A8K", "YHJJJZ1012TSZKT72EQV7WJ52M6VZY40NBAYRUK4KMPNM10TQN", "5FH0XNSTY9BV2ZWUBYUYPQKEHJVJHGXEL85U4SAUMM7ZPP4YKL", "WIZW0QZNPUNZQCF0ACZI7OVB8R38VJ9PB6GNP04BZWQ9P8WNS4", "PVUKQHXYRLDTNOYW4HGA7DQYOIP9KMIL7RMBA896RSN6THOQX3", "S6FXECERGPQ0YAEIZXAJ7ESFRWUHJY0B6CGI3L2X5SIVYN8Q8M", "DL5PI901KZGRDU2L5YZS6LCRSJX6VHR6WGG0C3354GV09NPRR8", "A8GPN3FY9HBNG7P6MXIOU077KRHNH1BDKIR7ENR2IRUFG0LOED", "3X0TJXMU6BQUIPV0ZDKQD2QR19VS5FNBVQXT1FFVSUT48KO9NS", "ZG12LXUDZOLPZN9EBDL0UH4714YF3N2PDF9H7K5T4HURQSMSEP", "39L78F8EP2XXYH3DAKGEI67KCQ1013G38DEJROEI90WGLI993N", "ARP7YJ9XK4PATT0JBJDZJQ20QJEEVN05T8WTT2EVD2JCETMYUM", "WF9Q4D6H098VNJZNYM6TF3VJO1Y65NG1G93EYTTUX0236AU422", "8JWEB8D6HRVTLJFGYAJ4B6M74FEIBAAE6YBE5Z9KZFTU8HHFUH", "M860H8WRAQUPWMGFMLNGQJDVSNLYHM4XFSGDRJM4NHC6R43358", "363AJML3JDD6HUG0XNKPRSW4TR8O27WF4LAEWQ3CRB401M1R3O", "P8MV7HZ3OUFWX5FKBA8CPI7WE2JIFSQR3UC5R2TWYAFKG1ESUR", "50UVK3PC6CAHZ7D9LIBUZ1YHDO5CGD99Y047S15BI0I58WJHD4", "X0VTP64U4UITVXDAH1SELNW6FOFL8LID9HEJUTGNT562W30I22", "UUJYOQOXU40EL0YLQU2HC6SSNN0OQS4ABRK42VU6IMF29AKQIL", "LEKF221Y03CLIDPNW0NS1UUNM39AUNT93Y2ZISHDM4EX2UKVFW", "9VI7CHEDAE609TF3CNHUCC1KSSPV79YU3VV8LT08KV9IH3HHNE", "UGY3RD37TAV5RUCZPPTB7NRQBSHPB9BY87WSQVBPREGWIPNYSO", "5FBYXUZ9VK1C1ANY0SE9LHSXAH5SFEGAK33XQX998DOAUUCGYC", "86XIZIRIPZTU77PGOLE5SPYM2THHNXPE1SIXN84E2GT8G6BHPA", "94D6SQASFVSTVTRSJGU791DLKCFPQR845DG6CVN6K6AGTXB9VU", "J1WIHZ9DQOGDCSG24HL7Y8U8BQR6FPUWGUTNFROUHTCY9NZOAH", "Z86AGE360C9P3JI0SA907HIEPOXSO186D10KSJ1TKCB6LV4NHO", "QRNA11YQBXASE32LKRO5QYLJK7HOBVWQ1QMQM7XX8EHZ7GL53T", "KV336T6JKMAOY3L902MZK32Y3R85C0L76S4WET3D2BOYPEZFIF", "7PIWCBEUKNZRLKRNAUC27CQZCTJ4WDE8VKCYEM6UBNX3M188XN", "5748CVL8X7MI88AL7A61GK78SI46VHDJOXJJ685P5CJ8A3GL2S", "DVSR7FI63A6PGLHA4CTZIM52VNX8LVWII3VE9TVGOHYMOFVMBO", "GTUORR6A1M6MDNXNGVRXZ1POSC4YOCJGJL2RYOD0B5TBCR9HSL", "26T1OH5JHXGZV7QP8TRLU6PJ1ED48U04RNCVKKLZ36ZHM7B6EY", "NMKI26W8YFKA3M3J9IAAIG82CYDMV5VLOTKR01I9SD3B475GRA", "DWIG3XN5V7QSR4WE5THLMFIUD4D51WBTONOY80F2DSGI3QEGZP", "8U9IWGGV65ND8OC7VSPOOAJJ9QDWZE07EOWS661UI89549UYAT", "MNPGI8T1ODD0RH2E0OGYMXQI56E37WTC3LZB973P83UCLJ5I4E", "VZAP2QFIWDEF7LS2E655UOM5I00R2SOQJ5WN3RI8RBUU2V29ZY", "MM64D7CP335HBGLS1H013MLQ866RXI10MOO9XYKRD7I6RXDFT5", "Z3QXLL2GX3WIY7EDZ0SHVVTK6ZDPC4QUKSARUE4RVYXDEQ6K4P", "IELP6P05SN1IMP3NFZZ46E6NQY17EO2RIRUU6GY304Y9K5C7W9", "7DYYQRJOW5LUVDH7BXR2CRRBFBFEGOEJP8RDMUQPJ2HBEVNPO4", "JDMIL5XA750E0XT4WZPKISM2I22H2MPOT7PVGRB5QDK4Z36OPP"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "P300PHREN5SWELYJ3OAHU03HMFYP1RXZV7G1SDVCN8OXIXD1KSL";
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> numbers = {"Q3ZJP4LAU2LSTUYCLDWRKEY8AF7A8XLOJCL3H8BS8CLSZ9NF6T", "73WWW42XWJYUH7A2KWM0TDVVOA2YTFFEFUM3LBKVVKO8CVS3V0", "I0MHVI78UITGDJX16YR5FBN4B5YSKSIWYOLD0LTDKDBKN6JC8B", "ZIVKFPNWKK6R8PZ0YRIQGGHX2NUMKWXX3I3CIRC3GT7GAI1JP9", "MPSZKJ4ITH1ZD7PGIDGP4A3UPC0ATYDIUJECDTWMDFKFQU0550", "P2Q0L1NSHPCMVHIBN0E784K0WO42VLZ1WD8IZCALOCFE9J4SM5", "UNNER6D57YT4X6TLEJL59P4D5FGLVZ197MYKQ7OAXA9ZY1CWN3", "XCTKZ79KVNZUB61G26M6U39YSQPLAL949D09E8ZQLXN2BP2C3O", "XYDR03ZGYSIJ050PG7NXR9SSWF9AVJOOHMFGKFS9P4S76YCC5T", "KANNTX5V1J5S6ZZ25GHIJKO88AHMM8GDNZWWV18V89DV4AE8JU", "2OIYDH2NHA8DLNRVHMDURGDLJV7Q0D2HG233FNFO5ZPAQY2XC0", "A4W0KS7J1N17YQ12RL0PHKW0JBIKUM3N17L7GF5ITQKJQ9LKO4", "CVNSD7YVR6XW8F8ME2AR494LKLL3GJKXN6W8MSXGK17E92NU6R", "4KXGLPL9V21IG4UJ8ZN5I9PPYHNIMO2JZJA7M1KXQH6X1OLXC5", "UM0OQUAT1Y3AMAB1WIQFCFACDO4VLLKFPXV6LNZGK6NFP77COQ", "TTW9JDGVCYHCEWXCXLD6SBPQPKPN6FD24APKEUZU2HNR0JM7SO", "D4HQYBCM0LJB27E3H8O38LWG902B8DL6L0XPTWT8730WUSLQ9U", "PRA3PCJG1N8NIGATJ859ZEPVHBBUZXK2ZS2DC3QETMF8NZFYY9", "AWWZ18EFMO7QWMZNN4OQJLGV4HFKYQ4R19UG0SUIEG751GY76U", "D86RGSKX58Y83BMYQQ5F0IMHTY1NPMHUCK9KW7USGMHRRWSFXC", "9P6PN7LRY7AIFEPC94K49FUVEQ4PZ1VLG3QV6MNUGDXJZ81330", "760WGAX0VIZ7PQGJO9X838DVZCRFWI3L8LYB29W2XJATGTOS5M", "2SCEMJRQ3KALVZY2UJ33KKDV700U8LYOEMX72ZWU7PKGQ5Q25F", "WO9CYYMSF7IYTBAL4J2HRBL3OTM2A994JWDT0WPGDHXZNK0Z7O", "TCWNJ07UKK2UNR7WOPD6HQJLXB5U57KIY5P4QATRR359Q8O0RB", "85KMARYPYRH1VVDMON6TA3VYLWD7R1LGAMLL0PGZN4IFG5A18F", "UD6QN81VF6K6WXM2095ACLQ6I39KPCPPMMJZLZ0DNPKTTWH9PP", "L1HV54CJ9YWGQGKYQM0RM2L9GU6T0DQP23TL6EHOAAYQMJXS7Z", "WLD1440PRUB1BG1TZE059T2KWMXPCNRINSGZ12UYOSP2ZR3TL8", "3H1AG1B0UTJNA3HVXUJ3Q9O9PARQ1CO6PG8GRP3KF20D8UI36S", "IX3VNNNEV0Z1AH77I6S6CD3TEN45I24NDJFCYH6MJJDXDADYWG", "19CS575U85TEBZ71QPQD4VYOZR652XOKOIKC6ZRXCCOXJVK22K", "UHWG6ZLQEJ21TQX2XURYSQ8T6ZON9M6HZS1E9CVPQHPVJELGN3", "CHUL2UJCQ2E9G1VP78Y0JG157THV5X3F3DXXQCD3QHQCL72DTB", "H8NTU3TIDSUA1OZWFXEF633II50P0A2FWYYOEUO0SAQD9SBZD5", "MGPCLYQ5EO2QKIEH6SGPI2O5DN2OBL5LIS6RV0HMPZMJ17KD7M", "EIGD9PT0RJ4E7RX66I40ZDCU9RT87KXFSFA295UVR6Y0Y8BDHQ", "1R42V37XXLGD12EB4TLZHQTV7IVFFO4V6R1IC06Q3ER73UE09H", "CA99065C8WBOWLMQ7X5WPQUMJ2QD1XFR3UEB6HWWUXWBOP7ZQL", "RV64VH15CY1YVBHH3M8XDA3P5V4WLLN49R5L9ISFFDMW7ZVGTC", "CMNJSNO5B1K7XYAZVCTSN1PUH0YVFUZO2MPPQ77OT6OCEMNMMH", "BRXJCPNAJA2BGFV0K5S0STD5C9E2KMFEXZN2TRRTSQ74M6ECXT", "G9HOFXBK21D5BY04PVBJ21DU21N1BF5TL520TI5MXB8MN40ITV", "CV3P5OUURCXYJM77HSML1MFCT1TIRC8PNZQ5S5OEKKVPCD1QTG", "2ZV7RGL9971NE5F34DD8D73ASA1BKT79Y6N1FWHG6LSKY64SAH", "DNQXO6ZMSAH6I0SS49ONMCMJWW4QVDZAVPXPPG88D7YHZVN4DW", "IO52Z7YEFB9L1JTHU7IKSABEEUCLW54G8QF2BHGVR3NX48KN3G", "3OK2IFQ6ACXQUIFROKRNQQYM9NX9ITLJWXF6LT8W28BYK7GK4N", "U4GA6CJWDJLWT4HFBC1SIIBO3FJ9RBPU0EROYU9BL19UEDH1TR", "TROWHLWSYE5OIGRWOAJQQUXE7B0KGQJ7NBHZ6UWQ5K3J69M84K"};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZYM";
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> numbers = {"GOOD", "LUCK", "AND", "HAVE", "FUN"};
    int k = 7;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "31YUB";
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> numbers = {"QWERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "FGDGTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "TJJRTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "ERYTYYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RTYTYUUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "VBCRTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "VBCXTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "YUKKUYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RJKSTLETYRASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RITUPEITGPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "REJTYPRIYGRPGFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "DFHGTRUIRPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "FGHIGTJHRIYGJHRIHGJTIOHGUIGHYAGF7890ABBBBBBBBBBB", "RTIRPTUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RETWERTIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RPIDTYJHPRUIYFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RTIJYIRIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RUTHRETHOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RUIHTGUORGASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "HJHRHTUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RGJTRIGJHPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "RUIHTUIRHIURETGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "4646546IOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "4565467IOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "3646TYU245ASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "23444YUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "10ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "A0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "B0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "N0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "D0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "F0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "G0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "H0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "J0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "K0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "K0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "L0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "O0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "30ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "40ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "50ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "60ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "70ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "80ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "90ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "Q0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "Q0ERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "QWERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB", "QWERTYUIOPASDFGHJKLZXCVBNM1234567890ABBBBBBBBBBB"};
    int k = 9;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "14132S8VA6HBGQE43WMIHPX7MC0TGZX4IF1GIEBPPPPPPPPPPA";
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> numbers = {"KEQUALS36"};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZZZZZZZZ";
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> numbers = {"TO", "BE", "OR", "NOT", "TO", "BE"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "QNO";
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> numbers = {"123456789ABCDEFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVWXYZ", "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZMNOPQRSTUVWXYZ"};
    int k = 3;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1ZZY8ACEGIKMOQSUWZ13579BDFHJLNPRTVXZ9BDFHJLNPRTVXY";
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> numbers = {"500", "POINTS", "FOR", "THIS", "PROBLEM", "KHANKIRPOLA", "MADARCHODCHDODDFDLKJFDLKJFDLKJDF", "SENSUA00000000000000000000000000000", "D0DDFKDFJK0101010101010101010101011010101010", "34930DLKDFLKJDFLKJDLJDLFJDFLJDLDFJDFLDKJFLDFKJD", "DLFJDFLJDFDLFJ"};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "100100000000100100000000000000000100100011011ZZP";
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> numbers = {"ZA"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZ";
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> numbers = {};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZYM";
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> numbers = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "100000AAAAAAAAAAAAAAAAAAAAAAAAAAAAA9";
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> numbers = {"1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345", "1234567890QERTYUIOPASDFJKLZXCVBNM12345678912345"};
    int k = 13;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DZZZZZZZZZZZZRMEDYB4ZENL6MJWBVI6TXZZZZZZZZZZZZYM";
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> numbers = {"ABCEEFHFKDKHDD", "JDHDKSHDDKHASD", "ODIWEID9E73UDKD9", "MANDJDKELWDIHE", "AMALDODUEJDKDKDKENFM", "KDKDID874HKDID7TJKD9DEL3KD0S9AJ283KDKD7HK4847"};
    int k = 13;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "100000000000000000000000009N3ZZPZE0ZZ8ZFZRYY8H";
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> numbers = {"Y0000000000000000000000000000000000000000000000000", "Y0000000000000000000000000000000000000000000000000", "Y0000000000000000000000000000000000000000000000000", "Y0000000000000000000000000000000000000000000000000", "Y0000000000000000000000000000000000000000000000000", "10", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "24567", "GHKMN", "CXD", "OOOPQ", "DFBV64366", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "12V0000000000000000000000000000000000000000DFBWDEUMZ";
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> numbers = {"7ZY4HSUIYKHTPFPN7Q30ROE94YXWQNBIBIX4ZJ7UBF2LXKL7TS", "XWAXL7BLPM4BE60A4E44E9EXYEUXLK9N0A0WYWZSO32JTAQUXH", "4BVUOU92TUHHWS6XTLLOA6HOZZ3MZSQYLGYA3N7XDBXF5HP2TC", "IY2YX80B6ZMNCHK3J92EVKE4O9OFC41IHJU2O8JZKPOJN9ITPA", "UKZR8TVKARWSCTDER1XFV3AZW0UUOW2H5Q1DO6YGQNAT2ZFS4R", "X683O2AQBTPICCTUQ3DBT0SHZK8QFD509XR7Y1QPGYXX48TUHH", "R9S057EPP8DOA9B374J1DDUPDBL4QD8AZU61W7QNTJ91C8WTT0", "7AUAD4CQ11R2DQKNCF98IQTLAXAE8EV5UBEPHMQCUQ0ZPQZ1U5", "TEZ4KH6KHVEVZXVG7KTX709H9ZWYE2WGZ8LEEAJHJKWNDMWEVO", "K18MEMJ2YLJWAON4SFSIA5MB0NJ60XYM9VL2XVDW78QMF8TD7H", "5GAGQMVR3NLSIKKJ87E5C1MADBTCUVZGPKXWHJ1QO0XO1O7CJS", "IAVD0W6XU1XF1L8QPW9CTTF91T74CBT6KYUG15WBFZB7NOVER2", "PVPF35HE62DVIAVLPQH2CDO1E05CD9JF2EZPCQOB01WPBK2Y9S", "8NTZOSTALXYPLI3SCQBBW9SDRDFGOLH01JNLTSLE9TJ75GCLSR", "B4JGVUIMNFOZHJINAVLOWINXV8UGU57RFA2FC4J8HNHKEU5YNH", "AWL0PKM6PR0S8VMRL3NZ85BLSF30R1H39142WKHU28Y6TRAOSV", "MBZ6TIPXSGFB1YCFQ2V1F5DS8B0EBLEKOGEQ1L49Y47X5GCHYI", "WSWMYNRFEL9VLAYUAYLLWO4QLIV2N040511G4K6A2Z50N4FHYX", "Z0M92O2BF1QR0BVFLP88X529EYT2X6GPZD3XPXMC3KXF336F8K", "DATA46S7VP7NAEXW1O4XD0HMVFSKA0VDERT7H3KHS5U6XD6K09", "XG3G9H6CS6AZXK8Y9YXG53ATO1LAJRISUMB7944QUPGCEH8SA1", "9W3WJIN2Q4B8XRMZIUJQASATQYUW51RAERU2OK6RS0M0J3ERG1", "OPGRW2L5AD4W4RYZB052IY2IKLYFRZ17R8M65W9IDWL96RI5T2", "XSDI946CJ5JLHWTV8YC4LT8DWMCUSCLOER7VXLVLPPGMVHCM9I", "ZO3X1LW4Y3OMYIUVM86BF4AWYVW6O1MNDX9RIUZYX483086R0N", "JFNAK2ZM5MUGRG7KSERHVER0ZKFIMG47YOEX46LLFAHO0VC7GN", "RV58JBW14LY9J11U0NYXWETXXZ1TMKK6P2THUI0DU35VVZ9NIQ", "866JEKZQDW7A668029IBZPU95YUMIXZWZADVTZQIL8AK08D8Y7", "17T4EKCTWEK0J8V8O5N1JL98CCJFUDBKIITNW670SNZPNU41SR", "LU4XDP4DR0YDEFBP1X052SQU6Z6TFT00C8VKXZYRCE6BBX42NF", "WO05M9ISGNW7C0IWN44PEUPIDV69TVOGIQ721635X7EGXJCDX0", "DBDQGFVXUGZ6KU5LD06NPGALJNL1COKJJEAZZ6C55TT9EIUS3F", "VQNPITL522704NAMM1VR9ZLMV7GYSJL2IQZCM0L5SBP3UZD24H", "71TBZGUR0AFEE1AFNGHKVOIA65DFBBSPPPTE2HT3Z2V5899OCP", "NY3L88TWHNAPYASARMCTO6DSDKHYHJUCOE812I7DEB0AJ9J1UG", "2VZG2Z47U7OV8DDDR05AS69W25E4B53DPO7X99XMZ5P00FPH41", "86KVL8O0RXGB0J4CV9JZJD07TUGFCCN134NCMCL0VYP2K0XQW0", "LGMT0EQ5HO7K0NN218PWJSP1GS76NMLUWWQ8TUA6NF17BWJ7HN", "75G5LP3M9V8AU4VTO0HETNAVQ0BOBE8E3HPUN9FAB2EBFGH0BF", "YUETLPZF52JH2HPYICSV4W1ZQ8TZ147NX7H1X9YR1AORBR9QFA", "YI6JH606J6GFDQGDQXZ26IJXDCQ5E3J9PU40PUOCX32LOUCJE7", "MCOZ3V3K5YTS7L9F074D9CC873GU76SH3DI6WRLJQZPTZPJ5KB", "GJWUNNV95MQ6OHREBFFUN52VIDVUFDHOSAM72656G9TEZMBUGQ", "4ZLZPBDUVJAPR3IRORMWQBW9BAZJ87VGRJ4FY78F7HBIPCQILP", "TTENYPU7RIQ523CABUVIUGUBF8D2IB4IA11BH1OHO695L0UFMH", "A1GYXMC8H6HB492VFN1YMBSB9BEKFMMU4NOZWX4WQ0ZSEVR936", "32G6ELTEGT1KIZDTLKNPN6WJ94IKSZJCHM6530FFSL1PM6XIJ1", "V6N9BRYDGBMN9FTAZ5HS1LVIMXVH3V3RCVE8QDMPG0FUYGQB5E", "3PC96Q2IKR5RKS6PZD6PAFPKL0T953INE8BAHKRJP7LN2XKBZ3", "HA16PRGH0MTWZ0CN4XYVEYRJKFMV2ALUHXZ424BQXJ6O06OFLY"};
    int k = 10;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "16BAQDE5SXTR4MVONYIZCHO4JJB76O7F6JWSNHM19BFAUL0DDPKV";
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> numbers = {"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "Z0ZZZZZZZZZZZZZZZZZAZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "50ZZZZZZZZZZZZZZZZZZZAZZZZZZZZZZZZZZZZZZZZZZZZZZZU";
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> numbers = {"ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "ZA", "YA"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DXM";
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> numbers = {"BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "47FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE";
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> numbers = {"ZZZZZZZZZBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCC"};
    int k = 10;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> numbers = {"ZZZZZZZZZZZZZZZ500", "ZZZZZZZZZZZZZXXXXAPOINTS", "POINTS", "POINTS", "POINTS", "POINTS", "POINTS", "POINTS", "ZZZZZZZFOR", "ZZZZZXXXXTHIS", "ZZZZZXXXPROBLEM"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "100000100101000ZZZTRFQAEL";
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> numbers = {"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> numbers = {};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "10ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZYZ";
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> numbers = {"13ZA12", "ZA2312", "ZZZ", "123Z", "12317Z"};
    int k = 3;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "2ZC0A7V";
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> numbers = {"A", "A", "A", "A", "A", "A", "A", "A", "YA"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "16R";
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> numbers = {"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "AAAAAAAAAAAAAAAAABBBBBBADFAZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"};
    int k = 10;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "C0ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZN";
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> numbers = {"HELLO"};
    int k = 2;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZLLO";
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> numbers = {"H", "G", "F", "E", "A", "B", "C", "D"};
    int k = 3;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "50";
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> numbers = {"ZZ", "YY", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "39L";
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> numbers = {"Y0000000000000000000000000000000000000000000000000", "YB000000000000000000000000000000000000000000000000", "YD000000000000000000000000000000000000000000000000", "Y0I00000000001000000000000000000000000100000000000", "YE000000000000000000000000000000000001020000000000", "YQ000000000000200000000000000000000010002000000000", "Y0XL0000000000000000009000000000000100000000000000", "Y0V00000000000000000000000000000000000000200000000", "XWW00000000000000000080000000000001000000020000000", "XVVV0000000000004000000000000000010000000002200000", "X0000000000000000000000000000000000000000000020000", "X0B00000000000000500700000000000100000000000000000", "X0D00000000000000000000000000001000000000000000000", "W0YY0000000000000060000000000010000000000000000000", "W0I00000000000000000000000000000000000000000000000", "W0J00000000000000000000000000000000000000000000000", "V0KK0000000000000000000000000000000000000000000000"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "G2LI1ZZZZZZZZZ12Z456Z789ZZZZZZZ1111111112222222ZZZJ";
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> numbers = {"ZA", "AZ", "BZ", "ZA"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "3BW";
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> numbers = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "Y0", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "29N";
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> numbers = {"ZY", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "Y"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "24T";
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> numbers = {"12", "12", "22", "22", "32", "32", "42", "42", "52", "52", "62", "62", "72", "72", "82", "82", "92", "92", "A2", "A2", "B2", "B2", "C2", "C2", "D2", "D2", "E2", "E2", "F2", "F2", "G2", "G2", "H2", "H2", "J2", "J2", "L2", "L2", "K2", "K2"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "EQW";
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> numbers = {"Y1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "2AM";
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> numbers = {"X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "Y0", "X"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "29N";
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> numbers = {"QQSQD2CIEP7O4W8BAR6AXBIYZXRTTBMGFZHJUEBWFJD1P88AZF", "QUR9XXDSQA0FIHYMVONTWQWP2W0LA7Q3FA0ZIOFZE48K9HZZWS", "QS2OWFX4NS0V7DCG7KFZ1VH4TAZ6UKEB4AUE1IMH78HKHP596U", "RMYF7GQBXPE24HP830DMD3SMLN6OAM3QFD3GI90GIV1C7IHDDQ", "PM7ID2THCESDJZTC4HG834II90QARUC8TJFUK3SK0I6SMY0J57", "D7Z1QG3AX5S3PYXOE7BYM2I1GD4QC32MBOKV1BBZ8RDRFD0YZP", "VUSTAI3QKTEQ698A9NZHONOOBRIVSDAOOOX7BUE687HL29C9G5", "L0490SHMBYFW3S6ZTA38TOM9PTIT1ORGI2L9KZEDDC2NN68C10", "89CYNF3OAY55FLIA019Y17KRLBX8B7487P0Z2OIKE87RV7US9N", "YZF1DX3WTBGZYMCJCN9TICA2KAL7D883W4SZ74YHWO0TFIQ8PA", "MH435O363HFA8MHVKS2BONLM2G0WJBY0JLFRON8ZU8G2N332NH", "JI26K4XHG49PJDU8R7ZBNTEGLS7FH08HD8W1U4SJ0EPL4EJ7CB", "I3XT3U5CPM0G450J5KETGJQ6N0I9CY3ZSK1DXALYX73KRK0YJG", "KVDKG5B9ORWOJNFPB27BZ32BE35RYH0HO9RF6XWTIHIY5ZHRW5", "M65DT5EPEXHPPEVXI4FBV4LT3V0VZE7WIMBTFQLMQREW24CE1I", "B0WHCP7OGJP54LZ0JWQE2UGLZNF2KKYAQ6N1FJYKPG2X829GNK", "FSUL9YMIV9ASN7TVGFVHJGC84TYTNHVB1W335V7USTIO422278", "F2JFOW956H7KXWIR050R4XWDKTBA86FRNTFJD5MZHAVOZJC1HP", "1JVXS55FNK41P5WK5HCQNXQVK64ZKDBKMI0WGQ4BN08ET6SQD7", "CAO75A1L9AQS9ZDPP838X7SDJ1JT2JDLTFSME6OI57UMN0VCOS", "72LPMOE6BZ3NNYCCKI2BVKOIBIUX8MHN69VRHK054BPEOB80CA", "4E08YREO9TFBARHXJJKQLQVMFP9459C6PP5M0QSXSV2D1ZOXA8", "15PHS7UU7SN2CKNXAPHZBD81B51Z6P7PIYD677KILVB7KIXMDA", "IV3NSA7YZNLMYSS18Y0MR1PQS87GO9K0H42CSAEMHNFSBKRLFB", "IFFO1LFX6ZYWXKPNIFC1V9EN12RTE64U3IQXBV7UXEQTMHV98D", "L78WVVN1DZB59GHCQM8HKCCE4AVKT0SL6KNRU898QUWI6NHDJ9", "ZYA5Z7PDM0MA6O4SP1AWUSHAIWTL2WFWY3YEPCWCAJEQM6M7I3", "74WHQGH0WDAM4E34NOBY596ELV3IGHM8YLTIH6LEEMZZ9ZFOH1", "D0WRZZWFJHIZTPAHYJRL5L4Y6QV2EVXNNZYUH2VP4UD329FMRP", "JEN1XSZZ55GJE0DRUMSIG5ZIGYY9IFJK5FLFD8INFF95GURFXF", "B01V7O79DTQNOVA6WNPYFQTWGWCG0RU50WPBYDVUB83SOB9XJ8", "ZUHJO8EYPH9KHCPX5LQP7ZWY6D4KAQGZUCUZF0Z3J3Q62O73Z5", "WBJJ3HPE85E79RF4GXBMZWMXZSEXL32FGG0QXUFFRES2K9OM3Q", "BNQL33VFG4H9R3EFP7M85OF0KIZDKRTYFJ7T9TKEKRTOSLQL28", "ET596RBZIA3910RF8OTZ8MV3VLC63XBGDD2EXMNX3SM16CGX7S", "EA0BSPD878QOHFA907KAJC5SO4XCDZXM04C8SJ0GY9JXV97588", "Z6OG76PWQ1YRH5NYZA9R7DCZED22I052HBK9Y9UFXY0FDZG8FC", "1C4SDON8WR0MCZOSI76AUOT1XYV867267L5XMJ594MKHZ5MB2V", "Y9DUKEOG8P99L6CC3ZURHLVCGNK2K95FS1KRWYQOWEUG4EB8EB", "HQN7N1EGNOI0EGIQYMEW1KB6OYBACHI8VV7KR6FH697WH79DN7", "A20VPYZ1P7VJIJLQDRR1RDBZDW7QTQJUB1W9L1CGVHXEWNI3DH", "SG2EDH69JBUGFZ7ZWIG8AFXZ1AY9RQEEH6KLLVRBT9S86QC8C3", "26HH3HK7LHJ7DLQIC0U0SWEBY1XVFKKI3K9WDLDET222QU3AK7", "GMC3XNT0VQ4MX8ZA77RCCDX14OTY1L2M4KLEU051OBQUUTTB66", "OTHLZTIZHLOZEBGIHEMI2JGJNTRI2GJEL697PBVOKVA0EHA552", "ZPCM845NPLRK1DMJFTS2JS4M1C5MMNLNKHIW30TZF41CCWFL35", "SNZXY5CJA6RX1OME1IDHNU9LN3SB4CET8IMPAEGPMVH7GUBWQR", "VXFRSU8UMR0JFJE206V9JYLISYCC2Z6OO6KFFYNLHYO3MQCV6A", "7GZYFI1KB73VGO4MK9UPHFHTOFRT7374W4K27SRV23NX3HNOL2", "AE68BX0CB2BVFK7OWWF3MHP3PRA3QWS6HNYL65WEM40I2PGXYD"};
    int k = 7;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1304SYHSUIJ5FW3YLCF2HNWCFTEGVBK65C4XHWY5XFH6AUPVU8I0";
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> numbers = {"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"};
    int k = 0;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> numbers = {"1", "Y"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1X";
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> numbers = {};
    int k = 36;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1DZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZYM";
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> numbers = {"I77Y0XYKZFUEO3E9OEGBLWHJ5QHEUCHG", "IIUJTN1TB7DFGCJ7KGKVQ", "EC81ZVOQQLRNQYTPDXSMSV40A1GR4", "6ITB9I6WC", "7X42ITIJECNP1OTX", "BUJ5MUWTRAZ934X8YLV65TI3Q", "JYBGC054AHZCO", "1MAEE8SO1REYKO5", "3GRSME87QZIQEAQ", "2APMRR", "FALB5WXOEICEF", "5Y77D14Z6SOGTHDWNX9GKY", "FQCO885JT7HPSYG9RQV9I", "7IGNYNG4Q3", "L8QXMYRCQAGCPZ", "8W5TMFD3RRVKIOXQRXDGK6IXK4BKONEJ", "EHJID4E2N7WUSL", "CD2ZEK13URJTO7XDLV4CRNW0FJ20FHZA", "Z3I7Y7U4D7K7AFDDM5QSC9OWZ1793F", "KQX1EBKL449WAGYEOPXFA0UKJ4NHQ", "Q69", "VHWP7QH255", "WPLKVVULS9EQS9UVCAGEAE4S8I", "F564", "M76AWN0G84JWCUF3", "BL7C1TV9FTENCWPVT1JFUKG71ZM8", "R0VBUWR095SGNINCPB6WXUAZQDMQUECIQ", "R1RXJWUMC3VGH5NGWQW60YQUWHJ6CE", "KCDGV78RP1L7ES7RH5OOXLGC8EKVKXKEQ", "USPL5OZCMO6U7C6SQ2ZLH5VCKU", "P6RMNALYSQL79A6ZIOU2US9MSW52WPS", "588STBTC0KREFLP", "SBPEQQV0YH6M1R4J21B7KISUPQL", "NR8OKVYX1Z", "7ZGU6DD0NETM40NOH3WW", "1S0D2", "C5MDR", "7E84CXIPJTWMWUSRQJANR0X"};
    int k = 27;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "2312210NV2Z0K2F5F2738DR3PJEVF709XR";
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> numbers = {"YZZZZZ", "Y"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "100000Y";
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> numbers = {"YA", "ZA"};
    int k = 1;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1YY";
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> numbers = {"500", "POINTS", "FOR", "THIS", "PROBLEM"};
    int k = 5;
    HexatridecimalSum* pObj = new HexatridecimalSum();
    clock_t start = clock();
    string result = pObj->maximizeSum(numbers, k);
    clock_t end = clock();
    delete pObj;
    string expected = "1100TC85";
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=19849563&rd=13696&pm=10266
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
#define SIZE(X) ((int)(X.size()))
#define LENGTH(X) ((int)(X.length()))
 
class HexatridecimalSum
{
public:
  int getD(char c)
  {
    if (c>='0' && c<='9') return c-'0';
    return c-'A'+10;
  }
  char getC(int v)
  {
    if (v<10) return char('0'+v);
    return char('A'+(v-10));
  }
  void add(string &A,string B)
  {
    for (;LENGTH(B)<100;B="0"+B);
    int m=0;
    for (int i=99;i>=0;i--)
    {
      m+=getD(B[i])+getD(A[i]);
      A[i]=getC(m%36);
      m/=36;
    }
  }
  string maximizeSum(vector <string> A, int k)
  {
    string R=string(100,'0');
    for (int i=0;i<SIZE(A);i++)
      add(R,A[i]);
    string G[36];
    for (int i=0;i<36;i++) G[i]=string(100,'0');
    for (int i=0;i<SIZE(A);i++)
      for (int j=0;j<LENGTH(A[i]);j++)
      {
        string T=string(100,'0');
        T[100-(LENGTH(A[i])-j)]=getC(getD('Z')-getD(A[i][j]));
        add(G[getD(A[i][j])],T);
      }
    sort(G,G+36);
    reverse(G,G+36);
    for (int i=0;i<k;i++) add(R,G[i]);
    for (;R[0]=='0';R=R.substr(1));
    return R;
  }
};

********************************************************************************
*******************************************************************************/