/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11306
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class ColoredStrokes {
public:
    int getLeast(vector<string> picture);
};

int ColoredStrokes::getLeast(vector<string> picture) {
    int ret;
    return ret;
}


int test0() {
    vector<string> picture = {"...", "..."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> picture = {"RRB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> picture = {"..B.", "..B."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> picture = {"...B..", ".RRG.R", "...B.."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> picture = {"G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> picture = {"GGBRGGBRRGRRBBGGRBBBBBGGBRGBBRRBGRRRBBGBGBRBBBRRRB", "BGGRGRRGRGGGGRBRGGRGRBGRBGBRGGBBGBBRGGRGBRBBRBRRBG", "GRRRRGBRGRBGRGRBGRGRBRRRGRGBGBRGGBGGRBRRBGRGGBBRBG", "GRGGRBRRBGRRBRBBBBRGGBRBGGGGGRGGRRBGGRRRBBBGGBRGGB", "BBBGRBBGRBBBGRGBBRRGGRGBRGGGRRBGBGGBGRRGBGBGRRRBBR", "BBRGRBRBGBGRBBGRGRGRGGGRGRBGRGRGGBBRBGRRBGGRGGBGRR", "RRRRBBBGBRBBBRBRGRBGBRBRRRRGRRRGBRBRBRBGRRRBRGGBBG", "BRBGBGRGBGBGGBRBBRGRGGGBBRRBBBBBGBBGRBGBGRRGGRBBRB", "RBGBRRBRBBGGRBRRBBGGRBRGGRBBRGBGGRRBRRGBGBBRGBBGBR", "GRRGBBBGBRBRBGBGGRGBGGGGBRBBRBGGBRRBRBBRGGRRRRRRBR", "RBRGRRBRRRGRRGGRRGGRGGBGGRRRRGBGBGGGBBBGGGBBGRBBBB", "BBBRBBRBBBRGRBGBGGBBGBBRRGRGGBGGGRRBBRGBRRRGRRBBGG", "RRRGRGBRBBGBRRRRRGGBGGBBGBRRGBGBRBGBBBBGBBGGBGGGRR", "GBRGBGBRRRBRRBBBRGBRRBRRRGGBRBRBRGGBBRBBGBBGBRBGRG", "RGBGGGGGGBBRBRRRGBRGGGGGRRBRBBRRRRRGBGRBRRRBGGGBRG", "RRGGRBRRBBGGRBRGRGRBGBRBBGBGRBBGRBRBRBBGBBBGBRBGGR", "GRRBBBBRBBGGBGBRRGBRRBRBBBRGBBGRBBRRGBBRRBRRBGBBBG", "RGRBRGRBGBRRGBGGRBRBBRBGBRBRRGGBBBRRBGGBGRRGRGBGGR", "BBBGBBRRGBGBBRGRRRRGRRGRRRGRBBRBGBBRRBRRBBRGGBRRGB", "BGRGGRGGBGBBGBBBRGBRGGBRGRRGBRGGRRGBRBGRGBBRRGRGGB", "GRRGRRGBBBBBRBBRRRGGBRRGRBGGGBRRBGBBBRRRRRGRGBBGBB", "BGRGRBBRBBBBBGGGRRGRBGRRRRBGBRBBGGGRBGGBGGBGGBBGRG", "RGRRRRBGBBRGBBBRBBRBRRGBGGBGBBBGRBRGBBBBGRBRRGRBRG", "RBGGGRGGBGGRRBBRBRGBGRGBRGBGBGRGRRGRGRBGRRGGRGRBBB", "RRBRGRBBBGBGBRRRBBBRRGBRRGRRGBGGRGRRRBRBRRRBBGGRBB", "BGRBBGBBRRRBGGRGBGGBGBGBRGRRGGRBBGBBGRRBRBGGBRGBGB", "RGGBBGBBRBGBRBBBBGGBBRBRGRRGGGRRRRGBBRGRBRGBRGRBGB", "GBRBGGRRGGGRRBBGBRRGGBBRGBGRBGRRGGBBGRRBRBBGRGBGGB", "GRRRGGBBRBRGBBRRGGGRGBRRRBBRRGRGRGRGBRGRBRBGRGRGGG", "BRGBRRBGGGRGRBRGRGRRRGRBBBGRGGBBRGGBRBRBBBBRGBGBGG", "RGBRRBGRBGRBGRGRBGBRBBGBBGGRBRBBGBBGRGRBRBBGRBRRBG", "GGBGBBBBGGGGGGRRRBRBGBGBBBBRGBGBGBGGBRGGRBBBBGBGGG", "GBBGGRRBBGGGGGGBBRBRGRRRGRGBGGBRRRRGBRBRBRBRGBGRGR", "BGRRBGGBBRGBRRGBBBRBBGGBGRBRBRGGGGRGGBBGGGRBRBGRRG", "GGGBBGGBGGBBGBGBBRRRRGGGGRGRBGBRGBBBRRRBBRGBGBRRBR", "GRGGRBRGGRRBRRGRGBBRBGRBGGBBBBBBGBRBGGGGBBGGGRRGGR", "BGBGGBGBBBRRBRRRRBBRGGGRGBRRRBRGGRBRGRRBGRGRRRBGGR", "BRRBGGBGGBGRRBGRBGGRGGGGBBRGGBGGBRGGGBRRRBGGBRBGBG", "BBRRBRRRRBRGRGRRBBRBBRBGGGGRBBGGBRRGRGGBGGGGRBBGBR", "RGGGGRRRGRRRBGGRRGGBGBGBRRBGGGRGBRRBGBBGRGGRRRGRBB", "RRBGRGGGBGBBRGGRGBRBRGBBBBGRBBRBGGRRRRGRGRGBRGRRRR", "RRBRRBRGGRGGRRBRRBRRBBBGRRRGGGRBBBRRGGBBGGBBRBGBRR", "BGGGBGGGGBBRBGGRRGBBGGGBRGRRGGBRGRRBGBGGGRBGGGBRRG", "RBGRGRBGBGBGGBRGRBGBRBBBGBBBBBRGRBBBBBGGGRBGGRRBRR", "GBGBBBGGRRBBRGBRGRBRBBBRBRGRRBGGBRBRBGRGBGRRGGGGRB", "RRGBBRRGGRRGGGGGBBGRRGGGGGRBGRRBBGRRGBGBRBBGBRGRGG", "GRBRGBGBRGBGBGBRGBRGBRGGGBBRBGBGGRBBGGGRRBBBGRBRGR", "BGBGBBRGRGBRRBGBBBBBBBGRGGRGGBGGRBGBRBRBGRRRRRBRGB", "RBGBGGGGBBBRBRBGRRBBGBRBGGGGGGGRRRBGRBBGBGBGBBGRBR", "BBBRBRGGGBBRRGGGGGGBBRGGGGBBGBBBRGGBGGBGBBBBRBGBRB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1181;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> picture = {"BRRBBBBBRRBBBRRRRBBBBBBRRRBBBRBBRRBBRRBBBRRRBBRBRB", "BRRRBBRRBRBRRRRBBRBRRRRBBBBRRRRBBBBRBBBBBRRRBBRRRB", "BBBBBBRRBBRRRRRBRBRRRBBRBRBBBRRBRBRRRBRRRBRRRBRRRR", "BBRRRRRBBBBBRBBRRRBBRRBRBBRRBRBRBRBRRRRRRBBRBRRRRR", "BRRBBRRRBRRBRBRRRBRRBRBRBBRRBBRBRRBBBBBRBRBBBBRBBB", "BRBBBRRBRBBRBBRRRRRRRBBRRBRRBBRRRRRRRBRBRRRRRRBRRB", "RBRBRBRBBRRRRBBBRRRRBRRBRRBRBRBBBRBRBBRBBBRBRBRBRR", "BBBRRRBBRRRBRBRBRRRBBBBRRRRRBRBBRBRBBRRBRRBRBBRBRB", "BBBBRBRBRBRBBBRRBBRBBRRRBBBRRRRRBRBRRBBRRRRRRRRRBR", "RBRRBBBRBRBRBRBBBRBRBRBRBRRRRBRRRRRRBRRRBRRRRBRBBB", "BRRRRBRRBBBBRBRRRBRBBBBBBRRBBRRRBRRBBBRBRBRBBRRBRR", "BBBRRBRRBBRBRRBBRBRRRBRBBBBRBBRBRBBRBBBBRRRRBRRRRR", "BBRRBBRRRBRBBBRBRBBBBBBRRRRRBBBRBBBRBRBBRRRBRRRRRR", "RRRRRBBRRBBBRRBRBRRRBBRBRRBRBBRBRBBBRBBBBRBBRBBBBB", "BBBRBRBRBRBRRRRBBRBBRRBRBRRRRBBRBBBBRRBBRBBRBBBRBR", "BBBRRRRRRRBRRRBBRBBBBBRBBRRRRBBBBRBRRBBBRBBRBRRRBB", "RRRRBRBBBRRBRBRRRRRBBRRBBBRBBRRBBBRRBBRRRRRRBRBBBB", "RRBRBRBBRBRBBRBBBRRRBRRRRBRBBBBBBRRRRBBBRBRBBRBBBR", "BBRRRBRRRRRRRRBRRBBBBBRBRRBRBBRRRBRBRRBRBBBBBRRRBB", "RBRRRBRBBBRBBBRBRRRBBBRRRBBBBRBBRBBRRRRRBRBBBRBRRR", "BBRRBRRRBBBRBBRBRBBBRBRRRRBBRBRRBBBRBBBBRRRBBRRRRR", "BBRRBBRBBRBRBRBRRBRBBBBBBBBBRRRBRBRBRRBBBRRRBRRRRR", "RRBRRBRBBRBBRRRRRRRBBBRBBRBBRRBRBRBBBBBBRRRRRRBRRB", "BRRBBBBBRBBRRRRBRBRRBBRBBBBRRBRBBBRBRBRRBBRRBRBRRR", "BRRBRBBBBRBRRBRBRRRRRBBBBBBBRBRBBRRBBBRBRRRBBBRRBR", "RBRRRRBRBBRBRRRBBBRRBBBBBRRRRBBBBBRBBRRRRBBBRBRRBB", "BRBRBBRRBRRRBBRBBBRBBBBRRBRRBRBRBRRBBRRRBRRRBBBBRR", "RBBBBRBRBBRRRRBBRRRRBRBRRRRRBBBRRRBBBBRBBRBRRRBBRR", "BBBRBBRBBRRBBBBBBRRBBBRRRBRRRBBRBRBRRRRBRRBBBBRRBB", "BRRRRRBBBBRBRBBRRRBBBRBBBRRBRRBRRBRRRBRRBRBBBBBBRR", "BBRRBBBRBRBBBBBBBRBBRRRRBRRBRBBBRBBBRBBRRRBBRBBBRR", "BBRBRRBBBBBBBBRBBBRRBRBRBBBBRRRRRBRRRBRBBBRBRBRRRB", "RBBBRBBRBBRRRRBBBRRBBRRRRRRBBBBRRBRRRRBRBBRBBBRRRB", "RBRBRRRBBRRBRRBRBBRRBRRRRBBRRBRBRRRRRBRRRRRRBRRBBB", "BRBRRRBRRBRRRBBRBRRRBRRBRRRBBBBBBRBBRBBRRRRBBBRRBR", "RRBRBRBBBBBBBBBRBRBBBRRBRRBBBBBBRRRRBRBBRBBRRBBBBB", "RBRBBBBBRRBRRBRBRRRBRBRBRRBBRRBRBRBBRRBBRRBRRBRRBR", "RBBBBRRRBRRBRRBRBBRBBBRBBRRBBRBBRRRBBBBRBBBRBBBBBR", "BRRBRBRRRRBBBRBRRRBRBRRRBRRRRRRRRRBRBRRBRRRBBBRRBB", "RRRBBBBRBRRRRRRRBBRRRBRRRRRRBRRBBRRRBRRRBRRRBRRRBR", "BRBBBRBBBRBBBBRBRBBBRRRRBBRBRBRRBRRRBRBRRBBRBBBRBR", "BRBBBBRRBBRRBBBRBBBRBRRRRBBRBRRBRBRRBBBRBRBBRBRRRB", "BRRBRBRBBBBBRRBRRBRBBBRRRRRRBRBRBRBBBBRBBRBBRRBRRB", "RRBBRBRRRBBBBBBRBBBRRBBRRRBRRRBBBRBRBRBRBBBBRBRRRR", "RBRBRRRBBRRBBBRBBBBBRBRBBBBRRRBBBBRRBRRBBBRRRBBRRB", "BBBRRBBBRRBBRRRRBRBBRBRRRRRBBBRBBRRRBRBBBBBRRRRBBR", "BBBRRRBBBBBRBRBBBRRBRBRBRRBRRBRBBBBBBRBRRBBBBRBRBR", "BBRRRRBBBRRRBBRBBRRRRBBRBBBBBRBRBBRRRRRBRBRRRBBRRB", "RRRRBRBBRRRRBRBRBBRBBRRRBBBRBRBRRRRRBRBBRRRRRBRBBB", "BRBRBBBBBRBRRRBBRBRBRRBBRBRRBRBRBRBRRRRBBBRRBRRRRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1260;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> picture = {};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> picture = {};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> picture = {};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 100;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> picture = {"BGGBBBBBGGBBBGGGGBBBBBBGGGBBBGBBGGBBGGBBBGGGBBGBGB", "BGGGBBGGBGBGGGGBBGBGGGGBBBBGGGGBBBBGBBBBBGGGBBGGGB", "BBBBBBGGBBGGGGGBGBGGGBBGBGBBBGGBGBGGGBGGGBGGGBGGGG", "BBGGGGGBBBBBGBBGGGBBGGBGBBGGBGBGBGBGGGGGGBBGBGGGGG", "BGGBBGGGBGGBGBGGGBGGBGBGBBGGBBGBGGBBBBBGBGBBBBGBBB", "BGBBBGGBGBBGBBGGGGGGGBBGGBGGBBGGGGGGGBGBGGGGGGBGGB", "GBGBGBGBBGGGGBBBGGGGBGGBGGBGBGBBBGBGBBGBBBGBGBGBGG", "BBBGGGBBGGGBGBGBGGGBBBBGGGGGBGBBGBGBBGGBGGBGBBGBGB", "BBBBGBGBGBGBBBGGBBGBBGGGBBBGGGGGBGBGGBBGGGGGGGGGBG", "GBGGBBBGBGBGBGBBBGBGBGBGBGGGGBGGGGGGBGGGBGGGGBGBBB", "BGGGGBGGBBBBGBGGGBGBBBBBBGGBBGGGBGGBBBGBGBGBBGGBGG", "BBBGGBGGBBGBGGBBGBGGGBGBBBBGBBGBGBBGBBBBGGGGBGGGGG", "BBGGBBGGGBGBBBGBGBBBBBBGGGGGBBBGBBBGBGBBGGGBGGGGGG", "GGGGGBBGGBBBGGBGBGGGBBGBGGBGBBGBGBBBGBBBBGBBGBBBBB", "BBBGBGBGBGBGGGGBBGBBGGBGBGGGGBBGBBBBGGBBGBBGBBBGBG", "BBBGGGGGGGBGGGBBGBBBBBGBBGGGGBBBBGBGGBBBGBBGBGGGBB", "GGGGBGBBBGGBGBGGGGGBBGGBBBGBBGGBBBGGBBGGGGGGBGBBBB", "GGBGBGBBGBGBBGBBBGGGBGGGGBGBBBBBBGGGGBBBGBGBBGBBBG", "BBGGGBGGGGGGGGBGGBBBBBGBGGBGBBGGGBGBGGBGBBBBBGGGBB", "GBGGGBGBBBGBBBGBGGGBBBGGGBBBBGBBGBBGGGGGBGBBBGBGGG", "BBGGBGGGBBBGBBGBGBBBGBGGGGBBGBGGBBBGBBBBGGGBBGGGGG", "BBGGBBGBBGBGBGBGGBGBBBBBBBBBGGGBGBGBGGBBBGGGBGGGGG", "GGBGGBGBBGBBGGGGGGGBBBGBBGBBGGBGBGBBBBBBGGGGGGBGGB", "BGGBBBBBGBBGGGGBGBGGBBGBBBBGGBGBBBGBGBGGBBGGBGBGGG", "BGGBGBBBBGBGGBGBGGGGGBBBBBBBGBGBBGGBBBGBGGGBBBGGBG", "GBGGGGBGBBGBGGGBBBGGBBBBBGGGGBBBBBGBBGGGGBBBGBGGBB", "BGBGBBGGBGGGBBGBBBGBBBBGGBGGBGBGBGGBBGGGBGGGBBBBGG", "GBBBBGBGBBGGGGBBGGGGBGBGGGGGBBBGGGBBBBGBBGBGGGBBGG", "BBBGBBGBBGGBBBBBBGGBBBGGGBGGGBBGBGBGGGGBGGBBBBGGBB", "BGGGGGBBBBGBGBBGGGBBBGBBBGGBGGBGGBGGGBGGBGBBBBBBGG", "BBGGBBBGBGBBBBBBBGBBGGGGBGGBGBBBGBBBGBBGGGBBGBBBGG", "BBGBGGBBBBBBBBGBBBGGBGBGBBBBGGGGGBGGGBGBBBGBGBGGGB", "GBBBGBBGBBGGGGBBBGGBBGGGGGGBBBBGGBGGGGBGBBGBBBGGGB", "GBGBGGGBBGGBGGBGBBGGBGGGGBBGGBGBGGGGGBGGGGGGBGGBBB", "BGBGGGBGGBGGGBBGBGGGBGGBGGGBBBBBBGBBGBBGGGGBBBGGBG", "GGBGBGBBBBBBBBBGBGBBBGGBGGBBBBBBGGGGBGBBGBBGGBBBBB", "GBGBBBBBGGBGGBGBGGGBGBGBGGBBGGBGBGBBGGBBGGBGGBGGBG", "GBBBBGGGBGGBGGBGBBGBBBGBBGGBBGBBGGGBBBBGBBBGBBBBBG", "BGGBGBGGGGBBBGBGGGBGBGGGBGGGGGGGGGBGBGGBGGGBBBGGBB", "GGGBBBBGBGGGGGGGBBGGGBGGGGGGBGGBBGGGBGGGBGGGBGGGBG", "BGBBBGBBBGBBBBGBGBBBGGGGBBGBGBGGBGGGBGBGGBBGBBBGBG", "BGBBBBGGBBGGBBBGBBBGBGGGGBBGBGGBGBGGBBBGBGBBGBGGGB", "BGGBGBGBBBBBGGBGGBGBBBGGGGGGBGBGBGBBBBGBBGBBGGBGGB", "GGBBGBGGGBBBBBBGBBBGGBBGGGBGGGBBBGBGBGBGBBBBGBGGGG", "GBGBGGGBBGGBBBGBBBBBGBGBBBBGGGBBBBGGBGGBBBGGGBBGGB", "BBBGGBBBGGBBGGGGBGBBGBGGGGGBBBGBBGGGBGBBBBBGGGGBBG", "BBBGGGBBBBBGBGBBBGGBGBGBGGBGGBGBBBBBBGBGGBBBBGBGBG", "BBGGGGBBBGGGBBGBBGGGGBBGBBBBBGBGBBGGGGGBGBGGGBBGGB", "GGGGBGBBGGGGBGBGBBGBBGGGBBBGBGBGGGGGBGBBGGGGGBGBBB", "BGBGBBBBBGBGGGBBGBGBGGBBGBGGBGBGBGBGGGGBBBGGBGGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 682;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> picture = {"RGGRRRRRGGRRRGGGGRRRRRRGGGRRRGRRGGRRGGRRRGGGRRGRGR", "RGGGRRGGRGRGGGGRRGRGGGGRRRRGGGGRRRRGRRRRRGGGRRGGGR", "RRRRRRGGRRGGGGGRGRGGGRRGRGRRRGGRGRGGGRGGGRGGGRGGGG", "RRGGGGGRRRRRGRRGGGRRGGRGRRGGRGRGRGRGGGGGGRRGRGGGGG", "RGGRRGGGRGGRGRGGGRGGRGRGRRGGRRGRGGRRRRRGRGRRRRGRRR", "RGRRRGGRGRRGRRGGGGGGGRRGGRGGRRGGGGGGGRGRGGGGGGRGGR", "GRGRGRGRRGGGGRRRGGGGRGGRGGRGRGRRRGRGRRGRRRGRGRGRGG", "RRRGGGRRGGGRGRGRGGGRRRRGGGGGRGRRGRGRRGGRGGRGRRGRGR", "RRRRGRGRGRGRRRGGRRGRRGGGRRRGGGGGRGRGGRRGGGGGGGGGRG", "GRGGRRRGRGRGRGRRRGRGRGRGRGGGGRGGGGGGRGGGRGGGGRGRRR", "RGGGGRGGRRRRGRGGGRGRRRRRRGGRRGGGRGGRRRGRGRGRRGGRGG", "RRRGGRGGRRGRGGRRGRGGGRGRRRRGRRGRGRRGRRRRGGGGRGGGGG", "RRGGRRGGGRGRRRGRGRRRRRRGGGGGRRRGRRRGRGRRGGGRGGGGGG", "GGGGGRRGGRRRGGRGRGGGRRGRGGRGRRGRGRRRGRRRRGRRGRRRRR", "RRRGRGRGRGRGGGGRRGRRGGRGRGGGGRRGRRRRGGRRGRRGRRRGRG", "RRRGGGGGGGRGGGRRGRRRRRGRRGGGGRRRRGRGGRRRGRRGRGGGRR", "GGGGRGRRRGGRGRGGGGGRRGGRRRGRRGGRRRGGRRGGGGGGRGRRRR", "GGRGRGRRGRGRRGRRRGGGRGGGGRGRRRRRRGGGGRRRGRGRRGRRRG", "RRGGGRGGGGGGGGRGGRRRRRGRGGRGRRGGGRGRGGRGRRRRRGGGRR", "GRGGGRGRRRGRRRGRGGGRRRGGGRRRRGRRGRRGGGGGRGRRRGRGGG", "RRGGRGGGRRRGRRGRGRRRGRGGGGRRGRGGRRRGRRRRGGGRRGGGGG", "RRGGRRGRRGRGRGRGGRGRRRRRRRRRGGGRGRGRGGRRRGGGRGGGGG", "GGRGGRGRRGRRGGGGGGGRRRGRRGRRGGRGRGRRRRRRGGGGGGRGGR", "RGGRRRRRGRRGGGGRGRGGRRGRRRRGGRGRRRGRGRGGRRGGRGRGGG", "RGGRGRRRRGRGGRGRGGGGGRRRRRRRGRGRRGGRRRGRGGGRRRGGRG", "GRGGGGRGRRGRGGGRRRGGRRRRRGGGGRRRRRGRRGGGGRRRGRGGRR", "RGRGRRGGRGGGRRGRRRGRRRRGGRGGRGRGRGGRRGGGRGGGRRRRGG", "GRRRRGRGRRGGGGRRGGGGRGRGGGGGRRRGGGRRRRGRRGRGGGRRGG", "RRRGRRGRRGGRRRRRRGGRRRGGGRGGGRRGRGRGGGGRGGRRRRGGRR", "RGGGGGRRRRGRGRRGGGRRRGRRRGGRGGRGGRGGGRGGRGRRRRRRGG", "RRGGRRRGRGRRRRRRRGRRGGGGRGGRGRRRGRRRGRRGGGRRGRRRGG", "RRGRGGRRRRRRRRGRRRGGRGRGRRRRGGGGGRGGGRGRRRGRGRGGGR", "GRRRGRRGRRGGGGRRRGGRRGGGGGGRRRRGGRGGGGRGRRGRRRGGGR", "GRGRGGGRRGGRGGRGRRGGRGGGGRRGGRGRGGGGGRGGGGGGRGGRRR", "RGRGGGRGGRGGGRRGRGGGRGGRGGGRRRRRRGRRGRRGGGGRRRGGRG", "GGRGRGRRRRRRRRRGRGRRRGGRGGRRRRRRGGGGRGRRGRRGGRRRRR", "GRGRRRRRGGRGGRGRGGGRGRGRGGRRGGRGRGRRGGRRGGRGGRGGRG", "GRRRRGGGRGGRGGRGRRGRRRGRRGGRRGRRGGGRRRRGRRRGRRRRRG", "RGGRGRGGGGRRRGRGGGRGRGGGRGGGGGGGGGRGRGGRGGGRRRGGRR", "GGGRRRRGRGGGGGGGRRGGGRGGGGGGRGGRRGGGRGGGRGGGRGGGRG", "RGRRRGRRRGRRRRGRGRRRGGGGRRGRGRGGRGGGRGRGGRRGRRRGRG", "RGRRRRGGRRGGRRRGRRRGRGGGGRRGRGGRGRGGRRRGRGRRGRGGGR", "RGGRGRGRRRRRGGRGGRGRRRGGGGGGRGRGRGRRRRGRRGRRGGRGGR", "GGRRGRGGGRRRRRRGRRRGGRRGGGRGGGRRRGRGRGRGRRRRGRGGGG", "GRGRGGGRRGGRRRGRRRRRGRGRRRRGGGRRRRGGRGGRRRGGGRRGGR", "RRRGGRRRGGRRGGGGRGRRGRGGGGGRRRGRRGGGRGRRRRRGGGGRRG", "RRRGGGRRRRRGRGRRRGGRGRGRGGRGGRGRRRRRRGRGGRRRRGRGRG", "RRGGGGRRRGGGRRGRRGGGGRRGRRRRRGRGRRGGGGGRGRGGGRRGGR", "GGGGRGRRGGGGRGRGRRGRRGGGRRRGRGRGGGGGRGRRGGGGGRGRRR", "RGRGRRRRRGRGGGRRGRGRGGRRGRGGRGRGRGRGGGGRRRGGRGGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 676;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> picture = {};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> picture = {".GG.....GG...GGGG......GGG...G..GG..GG...GGG..G.G.", ".GGG..GG.G.GGGG..G.GGGG....GGGG....G.....GGG..GGG.", "......GG..GGGGG.G.GGG..G.G...GG.G.GGG.GGG.GGG.GGGG", "..GGGGG.....G..GGG..GG.G..GG.G.G.G.GGGGGG..G.GGGGG", ".GG..GGG.GG.G.GGG.GG.G.G..GG..G.GG.....G.G....G...", ".G...GG.G..G..GGGGGGG..GG.GG..GGGGGGG.G.GGGGGG.GG.", "G.G.G.G..GGGG...GGGG.GG.GG.G.G...G.G..G...G.G.G.GG", "...GGG..GGG.G.G.GGG....GGGGG.G..G.G..GG.GG.G..G.G.", "....G.G.G.G...GG..G..GGG...GGGGG.G.GG..GGGGGGGGG.G", "G.GG...G.G.G.G...G.G.G.G.GGGG.GGGGGG.GGG.GGGG.G...", ".GGGG.GG....G.GGG.G......GG..GGG.GG...G.G.G..GG.GG", "...GG.GG..G.GG..G.GGG.G....G..G.G..G....GGGG.GGGGG", "..GG..GGG.G...G.G......GGGGG...G...G.G..GGG.GGGGGG", "GGGGG..GG...GG.G.GGG..G.GG.G..G.G...G....G..G.....", "...G.G.G.G.GGGG..G..GG.G.GGGG..G....GG..G..G...G.G", "...GGGGGGG.GGG..G.....G..GGGG....G.GG...G..G.GGG..", "GGGG.G...GG.G.GGGGG..GG...G..GG...GG..GGGGGG.G....", "GG.G.G..G.G..G...GGG.GGGG.G......GGGG...G.G..G...G", "..GGG.GGGGGGGG.GG.....G.GG.G..GGG.G.GG.G.....GGG..", "G.GGG.G...G...G.GGG...GGG....G..G..GGGGG.G...G.GGG", "..GG.GGG...G..G.G...G.GGGG..G.GG...G....GGG..GGGGG", "..GG..G..G.G.G.GG.G.........GGG.G.G.GG...GGG.GGGGG", "GG.GG.G..G..GGGGGGG...G..G..GG.G.G......GGGGGG.GG.", ".GG.....G..GGGG.G.GG..G....GG.G...G.G.GG..GG.G.GGG", ".GG.G....G.GG.G.GGGGG.......G.G..GG...G.GGG...GG.G", "G.GGGG.G..G.GGG...GG.....GGGG.....G..GGGG...G.GG..", ".G.G..GG.GGG..G...G....GG.GG.G.G.GG..GGG.GGG....GG", "G....G.G..GGGG..GGGG.G.GGGGG...GGG....G..G.GGG..GG", "...G..G..GG......GG...GGG.GGG..G.G.GGGG.GG....GG..", ".GGGGG....G.G..GGG...G...GG.GG.GG.GGG.GG.G......GG", "..GG...G.G.......G..GGGG.GG.G...G...G..GGG..G...GG", "..G.GG........G...GG.G.G....GGGGG.GGG.G...G.G.GGG.", "G...G..G..GGGG...GG..GGGGGG....GG.GGGG.G..G...GGG.", "G.G.GGG..GG.GG.G..GG.GGGG..GG.G.GGGGG.GGGGGG.GG...", ".G.GGG.GG.GGG..G.GGG.GG.GGG......G..G..GGGG...GG.G", "GG.G.G.........G.G...GG.GG......GGGG.G..G..GG.....", "G.G.....GG.GG.G.GGG.G.G.GG..GG.G.G..GG..GG.GG.GG.G", "G....GGG.GG.GG.G..G...G..GG..G..GGG....G...G.....G", ".GG.G.GGGG...G.GGG.G.GGG.GGGGGGGGG.G.GG.GGG...GG..", "GGG....G.GGGGGGG..GGG.GGGGGG.GG..GGG.GGG.GGG.GGG.G", ".G...G...G....G.G...GGGG..G.G.GG.GGG.G.GG..G...G.G", ".G....GG..GG...G...G.GGGG..G.GG.G.GG...G.G..G.GGG.", ".GG.G.G.....GG.GG.G...GGGGGG.G.G.G....G..G..GG.GG.", "GG..G.GGG......G...GG..GGG.GGG...G.G.G.G....G.GGGG", "G.G.GGG..GG...G.....G.G....GGG....GG.GG...GGG..GG.", "...GG...GG..GGGG.G..G.GGGGG...G..GGG.G.....GGGG..G", "...GGG.....G.G...GG.G.G.GG.GG.G......G.GG....G.G.G", "..GGGG...GGG..G..GGGG..G.....G.G..GGGGG.G.GGG..GG.", "GGGG.G..GGGG.G.G..G..GGG...G.G.GGGGG.G..GGGGG.G...", ".G.G.....G.GGG..G.G.GG..G.GG.G.G.G.GGGG...GG.GGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1258;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> picture = {".BB.....BB...BBBB......BBB...B..BB..BB...BBB..B.B.", ".BBB..BB.B.BBBB..B.BBBB....BBBB....B.....BBB..BBB.", "......BB..BBBBB.B.BBB..B.B...BB.B.BBB.BBB.BBB.BBBB", "..BBBBB.....B..BBB..BB.B..BB.B.B.B.BBBBBB..B.BBBBB", ".BB..BBB.BB.B.BBB.BB.B.B..BB..B.BB.....B.B....B...", ".B...BB.B..B..BBBBBBB..BB.BB..BBBBBBB.B.BBBBBB.BB.", "B.B.B.B..BBBB...BBBB.BB.BB.B.B...B.B..B...B.B.B.BB", "...BBB..BBB.B.B.BBB....BBBBB.B..B.B..BB.BB.B..B.B.", "....B.B.B.B...BB..B..BBB...BBBBB.B.BB..BBBBBBBBB.B", "B.BB...B.B.B.B...B.B.B.B.BBBB.BBBBBB.BBB.BBBB.B...", ".BBBB.BB....B.BBB.B......BB..BBB.BB...B.B.B..BB.BB", "...BB.BB..B.BB..B.BBB.B....B..B.B..B....BBBB.BBBBB", "..BB..BBB.B...B.B......BBBBB...B...B.B..BBB.BBBBBB", "BBBBB..BB...BB.B.BBB..B.BB.B..B.B...B....B..B.....", "...B.B.B.B.BBBB..B..BB.B.BBBB..B....BB..B..B...B.B", "...BBBBBBB.BBB..B.....B..BBBB....B.BB...B..B.BBB..", "BBBB.B...BB.B.BBBBB..BB...B..BB...BB..BBBBBB.B....", "BB.B.B..B.B..B...BBB.BBBB.B......BBBB...B.B..B...B", "..BBB.BBBBBBBB.BB.....B.BB.B..BBB.B.BB.B.....BBB..", "B.BBB.B...B...B.BBB...BBB....B..B..BBBBB.B...B.BBB", "..BB.BBB...B..B.B...B.BBBB..B.BB...B....BBB..BBBBB", "..BB..B..B.B.B.BB.B.........BBB.B.B.BB...BBB.BBBBB", "BB.BB.B..B..BBBBBBB...B..B..BB.B.B......BBBBBB.BB.", ".BB.....B..BBBB.B.BB..B....BB.B...B.B.BB..BB.B.BBB", ".BB.B....B.BB.B.BBBBB.......B.B..BB...B.BBB...BB.B", "B.BBBB.B..B.BBB...BB.....BBBB.....B..BBBB...B.BB..", ".B.B..BB.BBB..B...B....BB.BB.B.B.BB..BBB.BBB....BB", "B....B.B..BBBB..BBBB.B.BBBBB...BBB....B..B.BBB..BB", "...B..B..BB......BB...BBB.BBB..B.B.BBBB.BB....BB..", ".BBBBB....B.B..BBB...B...BB.BB.BB.BBB.BB.B......BB", "..BB...B.B.......B..BBBB.BB.B...B...B..BBB..B...BB", "..B.BB........B...BB.B.B....BBBBB.BBB.B...B.B.BBB.", "B...B..B..BBBB...BB..BBBBBB....BB.BBBB.B..B...BBB.", "B.B.BBB..BB.BB.B..BB.BBBB..BB.B.BBBBB.BBBBBB.BB...", ".B.BBB.BB.BBB..B.BBB.BB.BBB......B..B..BBBB...BB.B", "BB.B.B.........B.B...BB.BB......BBBB.B..B..BB.....", "B.B.....BB.BB.B.BBB.B.B.BB..BB.B.B..BB..BB.BB.BB.B", "B....BBB.BB.BB.B..B...B..BB..B..BBB....B...B.....B", ".BB.B.BBBB...B.BBB.B.BBB.BBBBBBBBB.B.BB.BBB...BB..", "BBB....B.BBBBBBB..BBB.BBBBBB.BB..BBB.BBB.BBB.BBB.B", ".B...B...B....B.B...BBBB..B.B.BB.BBB.B.BB..B...B.B", ".B....BB..BB...B...B.BBBB..B.BB.B.BB...B.B..B.BBB.", ".BB.B.B.....BB.BB.B...BBBBBB.B.B.B....B..B..BB.BB.", "BB..B.BBB......B...BB..BBB.BBB...B.B.B.B....B.BBBB", "B.B.BBB..BB...B.....B.B....BBB....BB.BB...BBB..BB.", "...BB...BB..BBBB.B..B.BBBBB...B..BBB.B.....BBBB..B", "...BBB.....B.B...BB.B.B.BB.BB.B......B.BB....B.B.B", "..BBBB...BBB..B..BBBB..B.....B.B..BBBBB.B.BBB..BB.", "BBBB.B..BBBB.B.B..B..BBB...B.B.BBBBB.B..BBBBB.B...", ".B.B.....B.BBB..B.B.BB..B.BB.B.B.B.BBBB...BB.BBBBB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 626;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> picture = {".RR.....RR...RRRR......RRR...R..RR..RR...RRR..R.R.", ".RRR..RR.R.RRRR..R.RRRR....RRRR....R.....RRR..RRR.", "......RR..RRRRR.R.RRR..R.R...RR.R.RRR.RRR.RRR.RRRR", "..RRRRR.....R..RRR..RR.R..RR.R.R.R.RRRRRR..R.RRRRR", ".RR..RRR.RR.R.RRR.RR.R.R..RR..R.RR.....R.R....R...", ".R...RR.R..R..RRRRRRR..RR.RR..RRRRRRR.R.RRRRRR.RR.", "R.R.R.R..RRRR...RRRR.RR.RR.R.R...R.R..R...R.R.R.RR", "...RRR..RRR.R.R.RRR....RRRRR.R..R.R..RR.RR.R..R.R.", "....R.R.R.R...RR..R..RRR...RRRRR.R.RR..RRRRRRRRR.R", "R.RR...R.R.R.R...R.R.R.R.RRRR.RRRRRR.RRR.RRRR.R...", ".RRRR.RR....R.RRR.R......RR..RRR.RR...R.R.R..RR.RR", "...RR.RR..R.RR..R.RRR.R....R..R.R..R....RRRR.RRRRR", "..RR..RRR.R...R.R......RRRRR...R...R.R..RRR.RRRRRR", "RRRRR..RR...RR.R.RRR..R.RR.R..R.R...R....R..R.....", "...R.R.R.R.RRRR..R..RR.R.RRRR..R....RR..R..R...R.R", "...RRRRRRR.RRR..R.....R..RRRR....R.RR...R..R.RRR..", "RRRR.R...RR.R.RRRRR..RR...R..RR...RR..RRRRRR.R....", "RR.R.R..R.R..R...RRR.RRRR.R......RRRR...R.R..R...R", "..RRR.RRRRRRRR.RR.....R.RR.R..RRR.R.RR.R.....RRR..", "R.RRR.R...R...R.RRR...RRR....R..R..RRRRR.R...R.RRR", "..RR.RRR...R..R.R...R.RRRR..R.RR...R....RRR..RRRRR", "..RR..R..R.R.R.RR.R.........RRR.R.R.RR...RRR.RRRRR", "RR.RR.R..R..RRRRRRR...R..R..RR.R.R......RRRRRR.RR.", ".RR.....R..RRRR.R.RR..R....RR.R...R.R.RR..RR.R.RRR", ".RR.R....R.RR.R.RRRRR.......R.R..RR...R.RRR...RR.R", "R.RRRR.R..R.RRR...RR.....RRRR.....R..RRRR...R.RR..", ".R.R..RR.RRR..R...R....RR.RR.R.R.RR..RRR.RRR....RR", "R....R.R..RRRR..RRRR.R.RRRRR...RRR....R..R.RRR..RR", "...R..R..RR......RR...RRR.RRR..R.R.RRRR.RR....RR..", ".RRRRR....R.R..RRR...R...RR.RR.RR.RRR.RR.R......RR", "..RR...R.R.......R..RRRR.RR.R...R...R..RRR..R...RR", "..R.RR........R...RR.R.R....RRRRR.RRR.R...R.R.RRR.", "R...R..R..RRRR...RR..RRRRRR....RR.RRRR.R..R...RRR.", "R.R.RRR..RR.RR.R..RR.RRRR..RR.R.RRRRR.RRRRRR.RR...", ".R.RRR.RR.RRR..R.RRR.RR.RRR......R..R..RRRR...RR.R", "RR.R.R.........R.R...RR.RR......RRRR.R..R..RR.....", "R.R.....RR.RR.R.RRR.R.R.RR..RR.R.R..RR..RR.RR.RR.R", "R....RRR.RR.RR.R..R...R..RR..R..RRR....R...R.....R", ".RR.R.RRRR...R.RRR.R.RRR.RRRRRRRRR.R.RR.RRR...RR..", "RRR....R.RRRRRRR..RRR.RRRRRR.RR..RRR.RRR.RRR.RRR.R", ".R...R...R....R.R...RRRR..R.R.RR.RRR.R.RR..R...R.R", ".R....RR..RR...R...R.RRRR..R.RR.R.RR...R.R..R.RRR.", ".RR.R.R.....RR.RR.R...RRRRRR.R.R.R....R..R..RR.RR.", "RR..R.RRR......R...RR..RRR.RRR...R.R.R.R....R.RRRR", "R.R.RRR..RR...R.....R.R....RRR....RR.RR...RRR..RR.", "...RR...RR..RRRR.R..R.RRRRR...R..RRR.R.....RRRR..R", "...RRR.....R.R...RR.R.R.RR.RR.R......R.RR....R.R.R", "..RRRR...RRR..R..RRRR..R.....R.R..RRRRR.R.RRR..RR.", "RRRR.R..RRRR.R.R..R..RRR...R.R.RRRRR.R..RRRRR.R...", ".R.R.....R.RRR..R.R.RR..R.RR.R.R.R.RRRR...RR.RRRRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 632;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> picture = {"GG.RGG.RRGRR..GGR.....GG.RG..RR.GRRR..G.G.R...RRR.", ".GGRGRRGRGGGGR.RGGRGR.GR.G.RGG..G..RGGRG.R..R.RR.G", "GRRRRG.RGR.GRGR.GRGR.RRRGRG.G.RGG.GGR.RR.GRGG..R.G", "GRGGR.RR.GRR.R....RGG.R.GGGGGRGGRR.GGRRR...GG.RGG.", "...GR..GR...GRG..RRGGRG.RGGGRR.G.GG.GRRG.G.GRRR..R", "..RGR.R.G.GR..GRGRGRGGGRGR.GRGRGG..R.GRR.GGRGG.GRR", "RRRR...G.R...R.RGR.G.R.RRRRGRRRG.R.R.R.GRRR.RGG..G", ".R.G.GRG.G.GG.R..RGRGGG..RR.....G..GR.G.GRRGGR..R.", "R.G.RR.R..GGR.RR..GGR.RGGR..RG.GGRR.RRG.G..RG..G.R", "GRRG...G.R.R.G.GGRG.GGGG.R..R.GG.RR.R..RGGRRRRRR.R", "R.RGRR.RRRGRRGGRRGGRGG.GGRRRRG.G.GGG...GGG..GR....", "...R..R...RGR.G.GG..G..RRGRGG.GGGRR..RG.RRRGRR..GG", "RRRGRG.R..G.RRRRRGG.GG..G.RRG.G.R.G....G..GG.GGGRR", "G.RG.G.RRR.RR...RG.RR.RRRGG.R.R.RGG..R..G..G.R.GRG", "RG.GGGGGG..R.RRRG.RGGGGGRR.R..RRRRRG.GR.RRR.GGG.RG", "RRGGR.RR..GGR.RGRGR.G.R..G.GR..GR.R.R..G...G.R.GGR", "GRR....R..GG.G.RRG.RR.R...RG..GR..RRG..RR.RR.G...G", "RGR.RGR.G.RRG.GGR.R..R.G.R.RRGG...RR.GG.GRRGRG.GGR", "...G..RRG.G..RGRRRRGRRGRRRGR..R.G..RR.RR..RGG.RRG.", ".GRGGRGG.G..G...RG.RGG.RGRRG.RGGRRG.R.GRG..RRGRGG.", "GRRGRRG.....R..RRRGG.RRGR.GGG.RR.G...RRRRRGRG..G..", ".GRGR..R.....GGGRRGR.GRRRR.G.R..GGGR.GG.GG.GG..GRG", "RGRRRR.G..RG...R..R.RRG.GG.G...GR.RG....GR.RRGR.RG", "R.GGGRGG.GGRR..R.RG.GRG.RG.G.GRGRRGRGR.GRRGGRGR...", "RR.RGR...G.G.RRR...RRG.RRGRRG.GGRGRRR.R.RRR..GGR..", ".GR..G..RRR.GGRG.GG.G.G.RGRRGGR..G..GRR.R.GG.RG.G.", "RGG..G..R.G.R....GG..R.RGRRGGGRRRRG..RGR.RG.RGR.G.", "G.R.GGRRGGGRR..G.RRGG..RG.GR.GRRGG..GRR.R..GRG.GG.", "GRRRGG..R.RG..RRGGGRG.RRR..RRGRGRGRG.RGR.R.GRGRGGG", ".RG.RR.GGGRGR.RGRGRRRGR...GRGG..RGG.R.R....RG.G.GG", "RG.RR.GR.GR.GRGR.G.R..G..GGR.R..G..GRGR.R..GR.RR.G", "GG.G....GGGGGGRRR.R.G.G....RG.G.G.GG.RGGR....G.GGG", "G..GGRR..GGGGGG..R.RGRRRGRG.GG.RRRRG.R.R.R.RG.GRGR", ".GRR.GG..RG.RRG...R..GG.GR.R.RGGGGRGG..GGGR.R.GRRG", "GGG..GG.GG..G.G..RRRRGGGGRGR.G.RG...RRR..RG.G.RR.R", "GRGGR.RGGRR.RRGRG..R.GR.GG......G.R.GGGG..GGGRRGGR", ".G.GG.G...RR.RRRR..RGGGRG.RRR.RGGR.RGRR.GRGRRR.GGR", ".RR.GG.GG.GRR.GR.GGRGGGG..RGG.GG.RGGG.RRR.GG.R.G.G", "..RR.RRRR.RGRGRR..R..R.GGGGR..GG.RRGRGG.GGGGR..G.R", "RGGGGRRRGRRR.GGRRGG.G.G.RR.GGGRG.RR.G..GRGGRRRGR..", "RR.GRGGG.G..RGGRG.R.RG....GR..R.GGRRRRGRGRG.RGRRRR", "RR.RR.RGGRGGRR.RR.RR...GRRRGGGR...RRGG..GG..R.G.RR", ".GGG.GGGG..R.GGRRG..GGG.RGRRGG.RGRR.G.GGGR.GGG.RRG", "R.GRGR.G.G.GG.RGR.G.R...G.....RGR.....GGGR.GGRR.RR", "G.G...GGRR..RG.RGR.R...R.RGRR.GG.R.R.GRG.GRRGGGGR.", "RRG..RRGGRRGGGGG..GRRGGGGGR.GRR..GRRG.G.R..G.RGRGG", "GR.RG.G.RG.G.G.RG.RG.RGGG..R.G.GGR..GGGRR...GR.RGR", ".G.G..RGRG.RR.G.......GRGGRGG.GGR.G.R.R.GRRRRR.RG.", "R.G.GGGG...R.R.GRR..G.R.GGGGGGGRRR.GR..G.G.G..GR.R", "...R.RGGG..RRGGGGGG..RGGGG..G...RGG.GG.G....R.G.R."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1163;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> picture = {"GG.BGG.BBGBB..GGB.....GG.BG..BB.GBBB..G.G.B...BBB.", ".GGBGBBGBGGGGB.BGGBGB.GB.G.BGG..G..BGGBG.B..B.BB.G", "GBBBBG.BGB.GBGB.GBGB.BBBGBG.G.BGG.GGB.BB.GBGG..B.G", "GBGGB.BB.GBB.B....BGG.B.GGGGGBGGBB.GGBBB...GG.BGG.", "...GB..GB...GBG..BBGGBG.BGGGBB.G.GG.GBBG.G.GBBB..B", "..BGB.B.G.GB..GBGBGBGGGBGB.GBGBGG..B.GBB.GGBGG.GBB", "BBBB...G.B...B.BGB.G.B.BBBBGBBBG.B.B.B.GBBB.BGG..G", ".B.G.GBG.G.GG.B..BGBGGG..BB.....G..GB.G.GBBGGB..B.", "B.G.BB.B..GGB.BB..GGB.BGGB..BG.GGBB.BBG.G..BG..G.B", "GBBG...G.B.B.G.GGBG.GGGG.B..B.GG.BB.B..BGGBBBBBB.B", "B.BGBB.BBBGBBGGBBGGBGG.GGBBBBG.G.GGG...GGG..GB....", "...B..B...BGB.G.GG..G..BBGBGG.GGGBB..BG.BBBGBB..GG", "BBBGBG.B..G.BBBBBGG.GG..G.BBG.G.B.G....G..GG.GGGBB", "G.BG.G.BBB.BB...BG.BB.BBBGG.B.B.BGG..B..G..G.B.GBG", "BG.GGGGGG..B.BBBG.BGGGGGBB.B..BBBBBG.GB.BBB.GGG.BG", "BBGGB.BB..GGB.BGBGB.G.B..G.GB..GB.B.B..G...G.B.GGB", "GBB....B..GG.G.BBG.BB.B...BG..GB..BBG..BB.BB.G...G", "BGB.BGB.G.BBG.GGB.B..B.G.B.BBGG...BB.GG.GBBGBG.GGB", "...G..BBG.G..BGBBBBGBBGBBBGB..B.G..BB.BB..BGG.BBG.", ".GBGGBGG.G..G...BG.BGG.BGBBG.BGGBBG.B.GBG..BBGBGG.", "GBBGBBG.....B..BBBGG.BBGB.GGG.BB.G...BBBBBGBG..G..", ".GBGB..B.....GGGBBGB.GBBBB.G.B..GGGB.GG.GG.GG..GBG", "BGBBBB.G..BG...B..B.BBG.GG.G...GB.BG....GB.BBGB.BG", "B.GGGBGG.GGBB..B.BG.GBG.BG.G.GBGBBGBGB.GBBGGBGB...", "BB.BGB...G.G.BBB...BBG.BBGBBG.GGBGBBB.B.BBB..GGB..", ".GB..G..BBB.GGBG.GG.G.G.BGBBGGB..G..GBB.B.GG.BG.G.", "BGG..G..B.G.B....GG..B.BGBBGGGBBBBG..BGB.BG.BGB.G.", "G.B.GGBBGGGBB..G.BBGG..BG.GB.GBBGG..GBB.B..GBG.GG.", "GBBBGG..B.BG..BBGGGBG.BBB..BBGBGBGBG.BGB.B.GBGBGGG", ".BG.BB.GGGBGB.BGBGBBBGB...GBGG..BGG.B.B....BG.G.GG", "BG.BB.GB.GB.GBGB.G.B..G..GGB.B..G..GBGB.B..GB.BB.G", "GG.G....GGGGGGBBB.B.G.G....BG.G.G.GG.BGGB....G.GGG", "G..GGBB..GGGGGG..B.BGBBBGBG.GG.BBBBG.B.B.B.BG.GBGB", ".GBB.GG..BG.BBG...B..GG.GB.B.BGGGGBGG..GGGB.B.GBBG", "GGG..GG.GG..G.G..BBBBGGGGBGB.G.BG...BBB..BG.G.BB.B", "GBGGB.BGGBB.BBGBG..B.GB.GG......G.B.GGGG..GGGBBGGB", ".G.GG.G...BB.BBBB..BGGGBG.BBB.BGGB.BGBB.GBGBBB.GGB", ".BB.GG.GG.GBB.GB.GGBGGGG..BGG.GG.BGGG.BBB.GG.B.G.G", "..BB.BBBB.BGBGBB..B..B.GGGGB..GG.BBGBGG.GGGGB..G.B", "BGGGGBBBGBBB.GGBBGG.G.G.BB.GGGBG.BB.G..GBGGBBBGB..", "BB.GBGGG.G..BGGBG.B.BG....GB..B.GGBBBBGBGBG.BGBBBB", "BB.BB.BGGBGGBB.BB.BB...GBBBGGGB...BBGG..GG..B.G.BB", ".GGG.GGGG..B.GGBBG..GGG.BGBBGG.BGBB.G.GGGB.GGG.BBG", "B.GBGB.G.G.GG.BGB.G.B...G.....BGB.....GGGB.GGBB.BB", "G.G...GGBB..BG.BGB.B...B.BGBB.GG.B.B.GBG.GBBGGGGB.", "BBG..BBGGBBGGGGG..GBBGGGGGB.GBB..GBBG.G.B..G.BGBGG", "GB.BG.G.BG.G.G.BG.BG.BGGG..B.G.GGB..GGGBB...GB.BGB", ".G.G..BGBG.BB.G.......GBGGBGG.GGB.G.B.B.GBBBBB.BG.", "B.G.GGGG...B.B.GBB..G.B.GGGGGGGBBB.GB..G.G.G..GB.B", "...B.BGGG..BBGGGGGG..BGGGG..G...BGG.GG.G....B.G.B."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1136;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> picture = {".RRB.BBBRGBB.RGGR..B..BRGGB.BG.BRR..GR...GGGBBGBR.", "BRGGBBGGBR.RGRR..GBGGRG...BRRGGB..BR.BB.BRGG..GRRB", "B....BRG.BRRGGGBR.GRGB.R.RB.BGG.R.RGGBRRR.GRRBGGRG", "..RGGGG.B.B.R.BRRG.BGR.RB.RRBGBRBR.RGGGRRBBG.RRRRR", "BRG..GGG.RR.G.RGGBRG.GBG..RRBBRBRR...B.R.R....G...", "BRBB.GRBGB.R..RRRRRGR..RGBRRBBRRGGGRRBG.GRRRRG.GRB", "GBR.G.GBBGRRRBBBGRGGBRG.RR.RBR.BBGBR.BG...G.RBRBRR", "BBBGRGBBGGR.GBG.GRRB.B.GGRRR.RBBRBGBBGG.RGBG.BRBGB", "B..BG.R.R.G...GRBBGBBGGG...RRGRR.GBRGB.GGRRRRGGGBR", "R.GR...R.RBGBR..BG.G.G.R.RGRGBRRRRGGBGRGBRGRGBG.BB", ".RRGGBRRBB..RBRGRBGBB.BBBGG..RGR.RG.BBRBGBR..RGBGG", "..BGGBRR..G.RGB.GBGGRBRBB..R..G.R..GBB..RGGG.RGRRR", "BBRG.BRGGBGB..RBG.B...BGRGRR.BBRBBBG.RB.RRRBRRRRGG", "GGGGGBBGGBB.RR.GBRRGB.G.RG.RB.GBGB..R....RB.RBBBB.", "B..RBR.G.RBGGRRB.R.BGR.R.RRGRB.GBB.BGR.BRB.R.B.R.R", "B.BGGRGGGG.GRG..RBB.BBGB.RGGR...BRBGR.BBG..G.RRR..", "GRGR.R...RGBRBGRGRR.BRRB.BGB.GR.B.RRB.GRRRGRBG.BBB", "GRBG.RBBRBRB.G.BBRRGBRRGRBRBBBB.BRRRRB..GBG.BRB.BG", "..RRR.GGRGRGRRBRR.BB.BGBGGBRBBGGGBG.GG.G.B...RGRB.", "G.GGRBGB.BR...RBRRG..BGRR.B.BR.BRB.RRGGRBGB..G.RRR", "..GGBRRGB.BG..G.R...G.GRGRBBRBRG.B.GB..BGGG.BRRRGR", "..RR..RB.GBG.G.GGBR...B.B..BRRG.G.R.RR...RGG.RGRGR", "GG.GR.G.BRBBGRGGRRGBB.G..RB.GGBRBR.B.BB.RRGGRGBRG.", ".RG.BB..RBBRGRR.G.RRBBR....GRBGB.BG.G.RRB.RR.RBRRG", "BGGBGBB.BGBRRBG.GRRGRBB.BB.BRBGBBGGB..G.RRRB..RGBR", "R.RRRG.RBBRBGRR..BRGBBBBBRRRGBB.B.G.BGRRRBB.RBRGB.", "BRBRBBGGBGRRBBGB..RBB..RG.GRBG.GBRGB.GRGBRGR...BGG", "GB.B.RBG.BRGRGB.GGGRBRBRGGRGBB.GGRBB.BG..G.GRR..RR", "...RB.G..RG.BB...GR.BBGGGBGRRB.R.GBRRGG.GRB..BRR.B", "BGRRRGB..BRBRB.RRG.BBG...GG.RR.RG.RGGBGG.G.B....GR", "B.RR.BBRBG..BB.B.R..RGRRBRR.G..BGBBBGBBRGGB.G.BBRG", "..G.GRB......BR...GGBG.RBB.BRRGGRBRRGBGBB.GBG.GRR.", "G...GB.R.BGGGRB..RG..GRRRGR.B.BGRBGRGGBRB.GBB.GGRB", "RBGBRGR..RR.RG.RBBRRBGGGR..GRBR.GGGGRBGGGGRGBGR...", ".GBRGRBRGBGGGBBGBRGRBRR.RRR.BB.BBGBBR.BGGRG.B.GRBR", "GR.R.R.B...BB.BGBR..BRGBRRB.BB..GRGG.RB.R.BGGBB.B.", "GBG.....RGBRRBG.GRG.G.G.GR..RGBR.RB.RRBBRRBRGBRGBG", "GBBB.GRGBRRBRRBRB.RBBBR..GRBBR..RRRB.BBG..BGB.BB.G", ".GR.G.RGGG..BRBRRR.G.GRG.RGGGGRGGG.RBRG.GRRBB.RR..", "GRG..BBRBRRRRGRRBBRGG.RRRRRGBGG.BRGGBRGRBRGR.RRGBG", "BR.B.GB.BRBBB.R.R...GRRR..GBG.GRBRGGBGBGG..R..BRBG", "BR...BGGBBRG...G.BBGBGRRR.BR.GGBR.RG.BBRBG.BGBRRG.", ".RG.G.RB.BBBGR.GGBGBBBRGRRGGBGBRBRBBB.G.BG..GG.RR.", "RG.BG.RRRB..BB.G.BBGRBBRGRBRRR..BG.GBR.R.BBBGBGGGR", "G.G.GRG.BGRB.BR..BB.R.R...BRGG....RR.GGBB.GGR..RR.", "BBBRG.BBGGBBGGRGBGBBRBGGGGR..BG.BGGRBG.....RRGGB.R", ".BBGRRB..B.G.GBB.GGBRBGBGGBGGBRBBBB.BGBRRBBB.GBG.R", "B.RGRGB..RGR.BR.BGGGRB.RBB..BRBG..GRRRRBR.RRRB.GG.", "GRRRBR.BGRGGBG.RBBGB.GGR.BBRBRBRRGGGBRB.RRGRG.R.B.", "BR.RBB..BRBRRGB.RBR.RRBBR.RR.GBG.RBGRRR..BRGBGRGGR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1249;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> picture = {"BRRBG..RRRGGGBGBBG..G.RRBRRR.RGGGBGGGB..GR..G.B.GG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> picture = {".................................................."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> picture = {"RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> picture = {"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> picture = {"G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G", "G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> picture = {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> picture = {".", "G", "G", ".", "G", ".", ".", "G", "G", "G", "G", "G", "G", ".", "G", ".", ".", "G", ".", ".", "G", ".", "G", "G", ".", "G", "G", "G", ".", "G", "G", "G", "G", ".", "G", "G", "G", ".", ".", ".", "G", "G", ".", ".", "G", ".", ".", ".", "G", "G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 42;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> picture = {"."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> picture = {"R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> picture = {"B"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> picture = {".BB."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> picture = {"...B..", ".BRGRR", ".B.B.."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> picture = {"...B..", ".BRBRR", ".B.B.."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> picture = {"GR", "BG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> picture = {"RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB", "RBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1275;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> picture = {};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1275;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> picture = {"RG.G.BBRGGB..BRRRRBR", "RR...RGGRRBG.BR.RGRG", "B.GGRRRG.GBG.GB.RR..", "GBBBBGRBRGBB..BBBRBR", "G.G.BB.G.GB.GRGBGR.G", "BRBR.GRBGB..RGR.BRGB", ".R.BR..BBGGGR.GBRRG.", "RBRBGBRBBBBBGGGRRBBB", "RGGRB.GR.GBG.GGR.RBB", "RGRGGBB.G.BBB.GBGB..", "GBBBGRG.BRR..BGRRBB.", "BR...GR.RRBGG.BGB.BG", "GGGGRB...G.GGG.BR.GB", "RRGBRBGRGBG.GBBR.GGR", ".BBRB.GRGBBRBRRBBBBR", "GBRR..RRRG..BRR.B.BR", "RBRR..G..RBBB.B.R...", "GGGRBGRGRRBRB.GGG.GR", "BGBGRB.B.BRRRRBB.R..", "..BBRBBRGGRRBGB.BRG.", "GR..GB..GRR..R.GBBBG", "GB.BRB..BGBGRRRBBGGG", "RGRRBG.BGBGG.BG.RBGR", "B.BRBBRB.RG.R.RGBRG.", "BGBR.B.RRBR.GGBGRGGR", "RG.RBRGRBGBRRRRBBB.B", "RBRBG.GGBB.GGBGRGRRB", "GGGGRBGBBBG..B....RB", ".GBG.G.RBRGBRRRRGRGR", "RRGR.RRG..GR.RB.BG.R", "RB..RGG..G.RGR.G.BRR", ".RRRB.G.GRRGBGBGGRGR", "BGG..BG.BRRGGBRBBB.R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 336;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> picture = {"B..GBBGR.RGRGRBRGGRBBG...RBR.RGBGR.BGRG.RR", ".B.GR.BR.GRB.BB.B.GG..GGBRRB..RBBGRBGRGGRG", ".BB.RG..GBRGRBGBB..RBRBB.GG.GB.R..GGGB.G.B", "RBR.RGGBGB.GRGGR.GB.BRBR.BBRR.GRBGRBGRRG..", "..RBBBB.BBBGR.R..BBBRRR.RGRRG.BR...BG.GR.G", "GG.RRGRGGG.B...BGRRGGRG.RGR.B.RRBRRRBBG.BG", "G.BBG.GG.BR.GG..GB.GGRBG.RBB.G...BRB.R..B.", ".R.RRRB.B..GBGB..BRGGRG...BGBBB..B.BB...GR", "GB...BG.RBBBB.RGBR.BR.GGBGGR.B.BG.BBRRGRRB", ".GRBRRBB.B..GGRGGR.RRR.RBRR..RGGRRBBBBRG.R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 206;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> picture = {"BBBRGBRBRB.B..B..RGB.BRBGBGGR", "B.GG..BBGRGG.RBR.R.B.BR.B..BR", "B.RRR.G.RBG..RBG.BG..RRBBBBGG", "BGGB.G.RGBR..R.GR.BGRRB.G.RB.", "GGR..GB..GBRBGB.RR.RBB..BRRGG", ".BRG.RRB.GGRR.RBBBB..GBB..RBG", "GG.BGGGGR.RGBB...RR..BRGBBRRB", "GRB.RR..GBRGRB.RBBB...BB.R.B.", "BBRGRBRBGB..BRBRBGRGB.RRR.BGR", "BG.R.BRBB.RRRBBRBG.BB.R..GGRG", "RBBBRRB.GB.RG.GGRG.B.GGRBRBRB", ".GRGGBRGGBBB.BBRGG.BGRG..B.BB", "G.GGBBBRG.B.B.RRRB.R.RRR.GB.B", "B....GBGG.G.BBRR.RG.RGBB.R..B", "R..BRRRB..R..BBR.BGR.B.GG.BR.", "BGR.R.RBGBGGBRG.RGRR.RGRG.RGB", "R.R..BRGRGGBB.RRRGR.BR..GBRGB", "R.BB.BGB.G..BRGB....G.BRRRBBB", "..B..GGBBR.G.GG.BRRGGRGR.RB.G", "...GRBGGGGG.B.BGBRBGRGR.BRBGG", "RRG.R....RRBBR.G..GBGBGB.GR.B", "..GG.RRRGB.GGRRBGBBRGRGGGRRB.", "GR.RRR.GB.R..RRGRBGBG.R.BB.GR", "BB.RB...BGBRRBRRG.G.BGBGBBGRB", "RR.B..BGG.RRR.G....BGB.R.GRBB", "RBRRRGRGB..BBR.BGGGB.GBBB.GBG", "GRR.RGGGGGRRRRR..BG.....RRR..", "B.G.GRGGBRBRG.BRGGB.RRG.....R", "BBGR.GRGGBGGBB.R.G.BB.BRB.BRR", "RBRGG..BBRGRG..GBBR.GB..BRB.R", ".RGBRRG..GRGBBRGR..RRGGGBGRGB", "RB.BR.BBBGGBGBGB.BRRBBBG..RGR", "RG.BGGBG..B.R.R.GR.RRRBGBBBB.", "GGRBRR..GG.RR..B..BR.GGRRR.BG", "BBG.GGBBRG.BRGRBRRBGB..G..RBG", "BG..BBR.GBRGR.RRR.R.GBRRGGR.G", "GRGRGRGGR.R.GG.GRRRRRGGBGBG.G", "G.GGBRBR.GR.B.BBRG.BBRR.GGRGB", "GBRG.RGGG.GG..RGG.GRRBB.GGGB.", "BGBB..BGGRBBGRBRGB.RBBB.BB.GG", "RR.BRG.RG.GRRG.BR.RR.BGRGR.G.", "RR.G.RGGGBGGRGB.RBGRRBGBGBBRB", "GB.RGR.GGGRBRG.GG.R.GBBBGG.BR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 633;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> picture = {".GGG.BR.G.GGGGGB.R..RBRBBBGG.G...G..GBB....RGR", "R...BG.RGBB.BRBBGGGGRBRRGB...GGBBRBBR.GRRB.R..", "BBG.GGB.G.BGRB.BRBB.GRRGR.BBR.BR.BBGRRG.RBR.GB", "RGRBBGBGG.BB.RBBRBG.BR.GGBRR.GRRRGRGRBGB.BR.BG", ".R.RRGGG.R.BBBGR.RBGRRR....RG.GBBBG.RBRBB.RRBR", ".RB.GGRRBGRGBGBBBRG.GRGBBRGBBBGBGB.RBBRR.BGBR.", "BGBRRR.GBRGB.BGGRRRBB..BBB.BGBGBRG.BGBRRG.GRGR", "BGGBGG.BBB..GRGBRBGBBBBGBRBRGR.RGB.BG..RGBBRRB", "R.R.GGRBGG..GB..B.RGRGBRG.RR..GGBGG.BG..RGGRR.", "BGGGGRR.G.BGBBGBG..RBR..RR.GRBG.R.BRGGG.RG.BBG", "BGGR.G.RGBRR.RRGRB.GRG....GBGGRGRB.GRBBGRBRR.B", "BRGBBRRBBGR.GBB..BBBG..R.GBGRG.RRRBB..R.G.GBG.", "BRR.GRG.RBBGBRRRBRGRG..B..GB.RB.BRRRGG.B.BGBBG", "GG..B....G..BG.R...GBG.R..RR.GGGGRBGR.RGBB.RG.", "BGGR..G..BBRR.B.BRB.RBGBBBB.GR.BRBGR.BR.BBBBBR", ".B...GR.GBB.GRRGGBRBBBBRBGBBBR.RRBBB.BBBRG.RGG", "GRRG.RBG..R.R.RB..R..BRGRGG.BBGRG...GG.BBRB.G.", "BR..RB.B.RRBB.BBGG.GRGBGGRR.RRBRGBGGR.G...GRBB", "BRGB..RBRGGRBGBGB..BG.RGBG...RGBGRBRRB.RR..BBR", "BG.B.BGGRR.BGRBRRRB.BRRR.GGR.RG.RRGRG..GGBGGBB", "GB.BB.BG..R.GG...B..BRBRRGBBGB.RGGG.RBR....BBG", ".GBBRRGB....RGG..GGBRBG.RGRB.RR.BRBRB..GB.GRBB", ".R..RG....RBGGRRB..BRGBBRRRG.RRBGBGRGGG.RB.RGR", "RB.BGGB.RR.BBBGBB..G.GBR..BBR.BRB.RRBGGRG..RRR", "BBGGRB.BBGBBGBG..B.BBG.GRBBBG.RBGGGRGB.GGGRG..", "GG.GRGGGRRB..BGB.G...BGBR.BR.GGGGG.B...GGB.RBB", "B.GBRGRBRR.GBGRB.B.BBGBRRGR.GRB..BRBRRRR..GB.R", "RBBG.BRBRRGBGBRBRR.G.RRGG.GBBRRBRBR.BRGGBBR.R.", ".BB..BR.G.R..B.RGRG.GGRBRBBG.BGB.BRRBRGGGBRBRG", "BB.GRBRBGBGRB.GR.G..RGBBGGG..G.RB.R.G.BGBBBBG.", "BRB...G.R..RGRG..GG.RBBBRGGRGRG..G.RG.BRGBB.G.", "...G.GBR.BG.BRGRBB.GGGGBGBRBB.BG...R..RBBBG.BB", "RGBGBB.GB.R..BRGBGGGRBG.GBGRBRRG.BBB.BR..BBRGR", "RBBG...RRBGBRBB.GGRBRB.R.RRBB.G....B.GG.RRGR.B", "R.GR.GR.RBB..BBG.GRGRGRRBR.RGRRRBRGGBGG.GBGBGR", ".BBBBG.BGR.RR.GRB..RGRR..G.GGRBGG.R.R.BB...BGG", "G..BBGBGGBGBRBGG.GGRG.GBGR..RG.R.RB.B.B.B.BBG.", "..R.R.BBBG..RGGGRGBRRR..B.BR.RG.BGR.GBGGBBG.RR", "G..GR.BBRBBB..B..BRB..RBGRBGG.R..RBGRR..RBG.RR", "RRB.RR.BRRBR...BBGBR.BBR.BRB.RRGB.GGR.BGR..BBG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 941;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> picture = {"...GG.BRRB.R.BBG.GB.GBRB.R..RBRB", "RR.RG.G.B..GG..BR.BB.RBBG.G...BB", ".R.BR.R.B..GR.R..RB.BB.BB.GBRGRR", "BRGRG.GBGRR.GGB.R..BRBR.B.RRGRGB", "BGB.BBGR.G.RR.GGBRR..BR...BG.B.R", "BRGRBBBRG..GRBGRBBB.BRGRGG.BGB.R", "...RBBRBBBGRRRRB.GBGRGRBR.G..B.B", ".RGRGRRBB.R.G..RGGGRGB.BBRRRB..B", ".RBG.R.BG.RB..RGG.BRR......B.RGR", "GBRGG.BB.GG.RRGRBGR...BBR.GRRR.R", "GRRGGGRRGRB.GBBR...RGBR.R.GB.B.G", ".BBRRG..RRBRRGBRRGGGBRBB.GBBGR.B", ".RRRB..B..GB.GG.GG.B..GBBGG.BGG.", "R.BB.GR.BRGBBG.B.RGRR.GBRBBBGGBR", ".BR..RBRR.G...B.RGRBGR.GRGGR.GR.", ".RB..BB.RB.BBB.G.G.GBBRGRG.BR.RB", "RGGR..BR.GRGBGRG..R..GGGBBBGRGGB", "..GBBGBRGRGBG.B.RBGGBR..RRG..RRR", "RRRBGBRRBB.GG...GGR.GG.BB.G.B.B.", ".R...G.R..RB.RR.B..RRRR.BG.BBR.B", "RRGB.GGGGR.B.BBBRGGB..R.GBR..B.G", "BR.GBBGGGBRGGRGB.BRRG.BGBB...R.B", ".GBBBRBBR.GGGRRGRGR.GGGRRRBGBRBG", "GRB.RBGBBRGG.GG..G.RRBRRRBBB.GGR", "BBR..GRGGBGG..GGGGG.GB.RGRGBB.R.", ".BGB.B.RR.BGBBGGGGRGRGRGR..G.GB.", "RGGRR.GG.RBGGGRBRRG.R.R.RRG.R.RR", "BGR.BB.RBRGRBGGBBG.RRRRGR.GR.BBR", "R...RRBGB.BR.BGRBBBBRRR...B.GR.G", "RRR.RRRRBR.G.B..GRRBBBB....RRRRB", "GBB.G.B.G.GGGGRB.GB..GR...BRBGBR", "BBBRB...RGBRGRRG..B..BGGGBRRBBGG", "GRGB.BBRGBRG.GG.GRGBGGRGG.R..G.G", "BGG.RRGBGRGBRGB..RBBBGB.R.BGRRB.", "R.B.G...G.RR..RBRRRRGG.R.GGB..RB", "RRBGBBGRGGBR.RRGB.RRRBBBGBRGBBRG", ".B.R.BR.B.GRGBGBBGRRBGGRRB.BRGR.", "G.RRBRBBGGR.GRBGBG.RGGGGBGB.GB.B", "BGR..BGGRB.RR.G.BGBRGR..GBRBGBG.", "GBBGB.G.BBG.BRR.GGBBBGRRGB.GBGRB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 637;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> picture = {".RBBRRGRRGGB.RRGBRRRRBRRG.GGGB.RBR.BBBBRBR", "RGRBGGRGRRBBBRRBR..RGG.RBBG.GR.BG.GB.GRR..", "BR...RGRGGG.R.BR.BGRGGGGGRRRB...RBBRG.G.RR", "GRGRRGGG.RGBBBRRBRBGB.GGRRGBBR..R.B.B..RRR", "BGBRB.GR.RG..GBG.BBGGGRGR..G..RR...GRBBB.R", "RBBGB..B.G.BRBR.RBBB.RRGBBR.BGGG...BG...R.", "BB.G.BRG..BRR..RBG.BGGR.GG..GRGRRRBGR.BGBR", "RGGRGB.RBRBBRGBGG....B.GBG.RBBGB.BRBBBG..G", "B.RGGRG.GGRGBG.RRG.RGRGRRG.BB.B.BGGGB.B..R", "G.GBBGRGBRGRR.RBBRBRRGGR.G.BGGRBRBB.RRB.GR", "GGGBB..B...B.GG..RGRBGBRGGBBGRGRBRBB.BRRR.", "GRBGGRBG...BGGRBBBG...BRGGG.R.B.BRBRBBR.BB", "BRBRRBRRRRR.BGGG.R.RG.GGGBRGRGBR.BRG.BGBGB", ".BRG..R.RRGBG..GBGR.B.BR.R.B.B...G.B.G.R.B", "G.BRBBBGGGBB.RGRRGB.BGRGRGGB.B..GRGRBBRG.G", "RR..BB.B.GGGB.RRRBR.GBR.RRBGBRR.RRRBR.RRRR", "G.RB.B.RBRGGBGG.BRBGBBBBGGBRBB.BRRR.BGGRBB", ".GBBR.BBRBB.BB.GGGBBBG.BG.G.GBBG.GGG.GR.G.", "...GGRGRBR.B.GGRB..GR.G..BB.BRB.GGGB.BGG.G", "GGBBG..B.BRRG.BRRBGG.B.RR.G...RG.GGG..GBRG", "R.R.R..G.RBR...B..GBRGBRBRGR.GBG..RBG.RBBB", ".BBGGRG..RGGRR.GBGR.RRGGBG.GGBR.R.GRRBB.RR", "...BBGRBRBGBBBGRG.GRRGBR.RBB.RGBGBGG.R.GBB", ".BR.B.RRBR.BR.RRRGRGRBRGB..R.BRGRBR.RR.GBR", ".BG.RR.G...BBR.B.BR.GG..R..R.BGGRBBR.RBBG.", "BB..B.RRRGBBBB.BBBGB.BB.RGBGBGRGG.RBGG.RGG", "BR.RGBRBGBRBG.RBB.RRR.RRBRRR.R.BGRR..RGBGG", "..RBR.GBBRGBRRGGBB..RGBBBBB.R.R..GRGRRRRGG", "..GBBRGBBGR...GG.RR.GGRG.BB.BG.BGBR.GRRRGR", "GRB...RBB.GGG.RRGBGGBBGB.RRRRRBGRR..GGGB.B", ".GRGGGB.BR..RG.B..BBG.GRBR.BRBBR.RRGGR..G.", "BGBGBRGBBRRRRB.GBB.RGG.BRGB.R.RGBRR.BBRGRB", "RRGGGBBRB.RBRG.B..BBBGG...G.BGBG.BRGRGGRRR", "GBRB.RB.BB..RB....RBGB.R.RGGBBRBB..G....BR", ".RG.RRRG.BR.G.R.GBBRRB.RBBGBRBG.GBRB.G.GBG", "..G.BRBRBGBBRR.B..RGBBB.GRBRB....B.BRRRBB.", "G...RR.RRR.BGRB.GR..RRRG.GBRBBB.BRG.BBGR..", ".BGB.GBGRBRR.B.BRG.GB.B.BBG.BGGRGGBBGBBGG.", "GBRBBRBRBBGGRGR.R.GB.B.GRBBBRGRR.GB.GRBRRB", ".RB.BRBRG.....GBBGGBRGRBB....RGGB.GGGG.GRB", "GGBRG.GBB.GB..GBR.RRGGG.BBB.BBGRR.RBG..B.B", "BGBR.GG.BRBB..RRGB.GRRBBGGRG.RBB..B.RBBGRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 924;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> picture = {".B....BBGBBRGGBGR.GB.", "G.BBRRRBBRGR.R.G.RBGB", "RRRRBRRGBBG.BGGRBG.BR", "R.BRG..GR.GRRBRRGB.GG", "BGB..BGBBGBRR.RB...GR", "GGRGGBBBBGG.RBBGRG..B", "BRRBB.GRGBGGG.BGRRGBG", "BGR.BR.GR.GBGRGBR.RRG", "RBBB..GBBGGGRBBGG.RRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 101;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> picture = {"BGBBB..G.R.R.BR.", "B.RBGRBBBBR.R.R.", "BRBRRBGGGGGRGGRR", "BBG.B.RRBRB.RBRB", "G.BBGR.GGRBRBB.G", "BG.BGRGB.BRBRRBR", ".RR..B.GR.GGRR..", ".RRRBBG.BGG.R.RR", "BB.BRGBB.RRBGG.B"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 79;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> picture = {"GR.RRG..RR.GBBB..BB.BB...BBGB.BR.GR.GBGRB.G", ".B.R.G..GGB..RR.RBBRBBGRBRB.RR..RR.B.BGG.GR", "RBRRGG.RG.RG.G.GRB.R.BRRBRRG.GBBRGBG.GBRRBB", "G.B.GR..GBGGB..GR.R.GBBG.GG..R.RBGGGRRBRGR.", "..GBRGRGGR.RBG.BRBRRR.GBBR..BRB.RGB.GGGR.BG", "GB.R....BBG.R.RRR..RGRGGBGBGB.RG.GBGBRRGRB.", ".R.RGRRB..BRG..RGR.RGB.BGB.GGG.GBBB.B..GGGG", ".BRG.G..G.GRGRBRR.BRBR.RBG..BGBG.G.BGGG.G.G", "RGBRRRG.RR..RBBB.GBRRBBB.RG.RRBB.G.GBRRRGRG", "RG..RR.R....GRGGGGG.GBG.RBBR..BBB.B.RRR.RG.", "R.GGBGGRGBGGR.BRRRG.B.R.GG.RRBR..GGB.G.B.BR", "G.RBBGR.RR.R....GRB.G.R.GGRGRG..R..BGBBBB.R", ".BRGGR.R..RRGR.BRBG.RBG..GBGBRR.GBBB.GG.BGG", ".B.GBR..GBR.G..BGBRG...BBRRGBGBBBRRRB.RGRR.", "RBB.RRR..GGGGGBGBGR..GR...RB.BGRG.B.RG.R.R.", "GRRBG..BRR..BBBGGGB.RRBBGGR..RBRBBG..RR...G", "GBBRGG.B.GGG..BBR..BRGBR.GBRGB..BRR...RG.RB", "R..BGBGRG.RG.RBRG...BGGRGR...BBG.BRG..BRGR.", ".GR..G.BBGR.B.R.BRG.RRGBRGRGB.GB.BGGG.RGRGG", "GGBRGGRBGGRBBGGR.G.B.GRBBR.R.GGB.GRR.GBB.B.", "GBB..RBR.GRBGRB.BGGGRRRBG...BBGB..GBRBR.G.G", "BGGR.GGG.BRRGG..GGG.G..GGB.B.GRR.R.R.RR.RB.", "G.GR.RRRGGRRBG.BRGBBBGGR..RBRB.RG.B.BGRR.BB", "..GBRGBBRRR....RR..BGR..RBBRG.BG.BGG..GBG..", "RR.BBBRB.GB..BBRBR.R....RGG.R.G.BBGGRG.RGB.", "RGRR.B..R..BGGBGGBBR.BBRRRG...RGBG.GGG.RBGG", "R.RG.GRBR..GG.GBBBRGBG.GG.RBRBRGBRRBG.G..GB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 607;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> picture = {"BBBGR", "BR.RG", "BBGR.", "GRBGB", "BBBB.", "BR.B.", "BRBBG", "R.G.B", ".RBR.", "B.BBB", "RBBB.", ".B.RG", "RGBGG", "RBRGR", "GBR.B", "RRRBR", "RGB.R", ".BRB.", "BB.RB", "BGG.G", "BBGRB", "BBG.G", "BRB..", "B...B", "GGBBB", "RR.G.", "BGB.R", "GBRRG", "G.RGG", "BRRG.", "RGRRR", "R.RBR", "GG.GG", "R.R.R", ".RGRB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> picture = {"BGB.BGRBBBBRR.GRRGRRRBBGGBBRGR.R.", ".BGGRGBBRGRBB...R.RBRGBRRB.GGGR.G", "G..GBBB.BBR...BBBBGB.BRRRRGRBRBG.", "RBRBBBBB.BGRRGGBB.GRRBBBRG..R.RRR", ".BB.B.G.R.GGRGGGBGB.RGBGGR.GRGRBB", "BRRGR.RGBRBRGR.RRRBR..RRBR.B...BB", "BGBG.BRRRBG.RBB.RBRGBB.RB.....RRB", "RBRRB.GBRGRGG..GBRGR.R...B.GGGRRR", ".RRGBBRBBBBBR.RGGRBRBGRBRBRBRRRBG", ".RRRB..R.GB.BGR.BB.G.RG..G...R.RB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 173;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> picture = {"GBRBBB.BBB.GBG.RR.R.GBGGGG", "R.B..GR...G.B..R.RBRRGG.GG", "RG.GGBBB.RBGB..G.RGBGGGGB.", "RRBBGRGG.RRRR.BB.RRGGRGBRG", "BRBG.B.BBB.RBG.BGBGGBR.BG.", "R..BBRRGRGBRB..BBBR.BRRGR.", "RR..GBR.BRB.R.BR.RBGGGBG..", ".R.BRRGG.GBRB.BRRR.GBGG...", "GRRGBBBR.GGRB.GRR.BGG.G.RG", "RBGBR.GRR.BB..RGRG..BGG.BB", ".RBGG..RR.GRR.GRBRB..RGGGR", ".BR..GG.G.RBGRR.GGRBBGRRRB", ".R.GRG.GBRBBRGG.R.B.RR.B..", "RRBRG.GRRBGRBGGR.GGGGG..R.", "BBRRG..BR..G.RBG.RGRBBB.R.", ".RB.BGBRGBBGGBR.GRGBGGGBB.", "GGB.BBRRBGR.R.B...GGBG.RRR", "RBBRB.RBGB.RR.R.G.R.BBB.GR", ".GGRGRBBR.RRB.BRGR..B.R...", "BRRGGRBGBGG.R.GGGRRR.GBRBB", "BGRBB.RGRR.RGBGRB.RBRB.B..", "..GB.R.GRB.R.B.RG..RBR.RRR", "GGRGGR.GGRRRGGR.G.GBBRBB.G", "BRG..BGBGGBBR.GB.RGRRGGGB.", "..R..RBRRBBG.RRGB..BBBGGBG", ".G.RB.BG.R.RG.GR.GBBGBBR.R", ".BRRRRRG.R.GB..BR.GR.RGG..", "RGGB.GRRGGRRGB..BRG..G.BGR", "GB.RGGRGG.G.GBRB.RBGBGG.R."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 400;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> picture = {"..R.RR", "..RG.R", "RBG.BG", "GGB.BB", "RBBGBB", "..RRR.", "R.BRB.", "RBBB.R", "..BRRR", "GGRGRG", "RG.B..", "GR..B.", ".BBGGR", "BBBGBR", "BBBBRB", "RGBRBR", "RR.R.G", "B.B.BR", "RBRBBR", "R.BRRB", "RRR.BR", "B.GB..", "..GGR.", "G.GBGR", "BRG.GB", ".B.GRR", ".R..GG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 89;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> picture = {"GBBRRRBBRR.RGGRRBBBRRBGRGG..RG..BGGBR..GBGB.RBR", "BBRB..BR.BGB.R.B.RBG..B..G.GBGG.GBRBGGRBGRGGRGR", ".GRRGGBRR.RRB.RRB..GGGRGRBBBRRGGBGRRGGR.BBBRBBG", "G.GGG...GGBGRGBBBBBB.RRGGBBBRGBR.RG....G.G.RR.B", "GGBRBRRBG.B.B.G.GR.BBRR.BBGRBRBGGBGR.BRGB.BGRB.", "R.G.G..RBGG..G.R.RGBB.BB..RB.RR.R..GRRRGBRRG.R.", "G.BGBGRR.R...BGRRGBRBRGGG..RRGRR.RRBBBRBG.B..B.", "RGGBRBRBBGRB.BBRBR.BRBBG.BG..R...B.RRR.GGR.RBBB", "BRG.BR.RR..RG.R..GRGBBG.BRRR.BBGGBRGG.GGRGRBG.R", "RG.R.GRRBGGGRRGRB..RBGB.G.BGBRGR..GBB....GG.RRG", "GBG.B.R.RRBB.BGG.BRGR.RG.BBBGGBB.BGRGRR.RBRGBB.", ".RRR...BGRG.GRR..RRGRGGRRR..RB.G.RRG.BRRBBR.RRG", "B.GGR.BB.GBBRRBB.B.RR.R.RGBBBBBRGBGBGGG...G..RB", "BBGGRRBGGRG...BGGBR.RBGGBRR.RRB.GRRGRRRRGBBG..B", "BBBRGRR.RRB..RBBBRG.R.BGR.RRBBBBBRBBBGGBR.GB.RG", "R..RG.GG.B.R.GRBB...BRBRGRGGGRBB.BG.BRG.B.GG.BB", "RRGGRR..RR.GGR.RBRG.G..GG..GRGBBB.GR.RG.GGRB.BB", ".RR.BB.RRR..R.G..GGRRRGBBGBG.RBRGG.BRGBRRBR.GRB", "R.RBG.BBR.BRBG..GGRGBB.RRRGR.R..B..GRGRBGBGGGGR", ".BBGR.BRBBR.RBRG..GRGBRRGG..RR..BRBBGBGRRGR.RG.", "BB.RR.GGBRG.BBB..B.B..B.RBG.GBR.RRGR.BBBBRRBG.B", "RBBGBRG.RRRRRGRRB.GBG.BG.RRGBRRBBRRGRRRGRGRBRBB", "BRGGR.B.GRGRRBBBBBGRBR.BG.RRBGGG.BR.BBB...BGBRR", "BR..RG...G..BBBGBRBBGGBG.BGG.B...BRGB.BBBRG.G..", "RGBGBGGGR.GR..R..BGRGG.RR..GB..B.BR...BBGGRBGBB", "GG.GRRRGBBGGRBGR....BGGRBBB..RGG..BR.RB..BBGGGR", "GBBRG.RGGBBGR.BRGG..BR.GRB..RGB.RBGGBBRRRBBRRB.", "GGGRBB.RBRRB.BBRGRBBRGG.BG..GB.RG..R.GBRBR.BR.R", "RBG.G.BGBGR..BRGB.BBRRRB.BRGGRGGB.GR.G.GRGB..GR", "RRB..B.G.BGRGRG.GBB.GG.BGG.R...R.G.GBRRB.GBBRR.", "G.GRB..BRBGRR..G...G..GB.BBBG.GBGBRRGRGGG.RRB.B", "RBB.BGGRGGBRB..GGGRBGGGGRBRRG..B.GG.RBRBG.GR.BG", "RGR.RGRGBBG.G.GGGRGBRRRBRRRBRRRRR.R.GGG..BR..BG", "BB..GB.B.GGGBGGRBRRBGBBRGRBG.B.BGRRRGG.RRBGRG.B", "..G...RR.GRBBRRR.RBGGBGB.BRGBG.R..GGR..BRB....B", "RR.GGB.GGG.RR.B.GBBGRBBR.BG.GGGRG.GRGBGBGRBRB..", ".RBGG.BR.R.BG.GGBRRR...RB..GGBRGG.R.BR.RRGRR..G", ".R.RRGB..GGBG..BBBRR..BRB.RBBBR..BB.R.BB.RRBB.R", "RRGBGBRB.R..BRB.R.G.RBG..G.BB.RRRBGBG..GGRGBGBG", ".BB.GBRBBG.BBGRRRGBGBRGBBBR.RBG..GRRR.GGRRGRRGG", "GGB.RRRBGB.B.GGBRB.GR..R.B..G.RRGG.BB.BGR...RGB", "GGGGGBBRR..BGB.RRRGBBRGGRGRRRG.RR.G.BR.GGRRGGRG", "BBBB.GRBGGBRGG.RG..GBRGG..B....R.BB.G.G.B.BBBBG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1041;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> picture = {".BBBRRGBRGRRR.GBRBR", "..G.BGR.RRR...BRRRR", "G..R.GGRRBBBGGBRBGR", "G.RG.B.BRRRRBBGRGG.", "BGBRRG...RR.G.BBBRB", "GB.G.BBR..BBRB..GBR", "G.RR.RGBBB...GRGB.R", "R.GGBBRRG.RBR.BB.RR", "BB.B.G..RBB.GRBGBRR", "BBBRGRRRBGB.RB.GR..", "BR.RRBRBBB.R.RGBGRR", ".BR.RRBGGBBBBGGGBBR", "RGRG.GBGGGRBR..GGG.", "B.G..R.BRBRG.GB.BG.", "BBRBG.GR.RB..BG..GB", "BGBRBGRG.B.GBBRG.GG", ".RR.RGB.GGRB.BBRGGR", "BRBBRR..B.RB.BG.BGG", "RGG.BG..BGB.GRG....", "B.RGRBRGR..GR.G..G.", "B.G.RBG.GBR.R.G..G.", "RGRG....RGGRBGBG..R", "B.B.RR.BBGBRG.BGRRR", "BB.BRGGR...RG.GBGRB", "BRR.RB.GRR.BR..R.GG", ".RBR.BB.BRGB.GGB.RB", "...RGGBGRBB.B.BB.BB", "RBRGGBG.R.RRGRGBGRR", "GR.RGBBG.BR..RRRR.R", "RBB.G.RRBGBRBG.RBB.", "GR.RBRR..BGB..RGBBR", "RR...G.GGBBGBB.BBRG", "BR.R.GG.RRGBR.RBRB.", "BRRRBBGB..GGG..GG.G", "...RRGR...BGGRRRRG.", "BBBGBBGG.B.RRRR.BRB", ".RGGB.GRBB.R.RBGRBR", "BR..RB.GBBB.BRGBG..", "RB.R.BB..RGRGGB.BG.", "RBRBGGRG.BGBB..G.GG", "RBR.RG.GRBGBBBG.RRG", ".GB...B.BRRB..GBBG.", "GB.RGBRG.B.R.G.R.GG", "BR.RR.RBGB.R.RBBG.G", "BGR.RR.GBBRB.BBB.RR", "GRBBGR.RGBBBBRBRR..", "GR.BGR.RG.G.BRGBR..", "RBBBB..B.RGG.G.B.RG", "B...RRB..RGRRGGGBBB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 491;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> picture = {"B.R.RG...RR.BBG.GB.G.BG.GG.R.BRRG.", "BGGGGG.BRRG...BRRRRB.G..GGGR.GGRRR", "RBB.RGRB.BGBRB.RRG.RBBBR.GGBGRRBRG", "..GGRG.RGBB..G.B.GGR.R.RBRGGG...BG", "RB..G...RBGBGB.GRGBGBRBBRR..RBB.GB", ".RRBRR.BRGRRG.RR.GG..G.RGBRGGRBBRB", "RBG.R..GRG.BB.RGBRBR..RBR.GBRRGGR.", ".G.R....RGRGG.B.GRGGB.GR.BGBGRBRGR", "BGB..BGGGB.GRGG.BG...R.GB..R.R.RR.", "RGG.G.GGR.RGRB.RRGG.B.RGBBGGGBBBB.", "R.RBGR.GB.B.RRBGGRBBG.GRRRRBGBGGR.", "RBGGBBR.GBBBBRBGR..B.G.BRBGGGG.R.R", "BBBB.RRBBR.RGGRGB.RRBRR..RBR..BBBR", "BGRRGB.GRGRBG.BB.GBRR.G.RGRGGBBBG.", "BG..BB.R.GBG.GR.RGBGBRR..RRR..RR..", "RGBGG.G..G.BRR.BRB.RG.BR.GB.B.G...", "BRRGRGGBR.RGG.GG..R.GGG..BRRBGB.BR", "G..B.BB.GBR.GR..B.BB..GRBGR.BR.GR.", "RRBBG.RG.B.RBBB..BGRGGGR.GGBRBRRRB", "RBRGBRR..RBGRGRGGRRR.BRR.GBGGGB.BB", "RGG.G.BRBRRRGBGGR.RGBGG...GGBBGBBB", "R.GGBR.G.GG.R.RR.BBBGG.RRBBRRRBB.B", ".RBGGGG.RBG.BBBBGGG.GGRRGGBRGBGRR.", "BRGBRRB.GBG.G.RBRRBGGBG..B.GGGRRRB", "GRRBG.RR.GGBGRR.RBB.R.GGGRB.GGGRGR", "BGGBRGRB.BBGGRGGGBGGBBR.G.G.G.BRRG", "RR.GGGGRGR.GRBBG.BB.BBRB..R.R.GBRR", "RRG.BR..GGG.RRR.B..BR..RR.B.BG..GG", "BRBGRBR.BGBGRGR.RRBRRBRB.GRGG.R.RB", "RBBRBBRRR.GGRGG.GGG.RGR..GB.BRG.GG", "BB..GGRBGB.GRBGB.BBGRGG.R..RGGGRBB", "GB.RR.RB.GBBR.BG.R..B.GRBRR.BRRGBG", ".RB.R.R.G.BG.G.GBRGRGRRRB..BRRGRGR", "GBB..RGBBG.GGBB.GBB.G..G.R.R.GB...", "R.BRG.GBRGB.RG.GRRR.BR..BBRRBRGRG.", "BRGGR.BGRBR.B.RRGGG.RGB..G.RG.GGGR", ".GGBBBGRBRR.GRBBGGRGGR.RRGR.RG...R", "..BB.RG..BRG..BGGBGGBB.GGRGGBRRRGB", ".BR..BGBBB.BGRGRGBR..RGBB.R.BGGRGR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 681;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> picture = {"B...BBRB.R.BB", "GBGB.GB..BBGR", "RGRRRBBRBGRGB", "B.RBB..RRGGGB", "G..B..R.RR.BG", "G.BBRBBB.GGR.", "RGGR.G.BGGG.B", "BBRR.RR.RRRGG", ".GGBBB.GB.RBG", "GBBBRGG.BG.RG", "G...BGBBB.RGB", "RBGG.R.BRBRR.", "GB.RRG.RBRRR.", "BR..GBRBBGG..", "BGB.GBBRGRR..", "BB.GRGRBRGR.R", ".G.RGBR.RRR.R", "B.GBBB.RRRBBR", "GGR.GG....GR.", "RR.BRGR.RGGBB", "BBGGBBGRRGGB.", "GGBBRRBRG.RB.", "RRGGGBGRGG.R."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 155;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> picture = {"GRRBRGRG", "BRGRGRRG", "B.B.BBRB", "B.BBRRBG", "..RRRR..", "RGGBGGR.", "R.BBGRGR", ".BBRRGGB", "RBRBGBBR", ".RB.RRB.", "GGRBBGGG", "BR.RRGGR", "RRRB.BBR", "....RGBR", "BG.RBBR.", "...GBGBR", "BG.G.RBG", "B.GRBGB.", "BGG.R..B", "GBRB.GBR", "..B...RB", "BGBRGR.G", "G.BGRBBR", "BB.BRGR.", ".BRRRGGB", "GG.GBB.G", ".GGRR.BB", "B.GBGRBG", "GR.B.B.R", "...GRG..", ".GGRB..B", "..GBRBBG", ".RB.G..R", "BGBGRBRR", "..GBBRBR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 154;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> picture = {"RBRBBGGBR.RRGR.RRRBGG.RGRR.RB", "GBR.BG.RRBGRGG.GR.BRRGRG.BRRG", ".BRRGRGGBBB.RBG.BG.B.BRB...BR", "R..R.R.RBGR.R.R.GGRB.GG.GGRRG", ".BR.GR.GBBGGB.GB.BRR..B.R..G.", "G.GBB.G.B.RRR..BR...BGRBBG.B.", "BG.RRGBBRBR.GBGG.RRGGGR.R..RR", "GBBRGRBB.G.R...BGBRRRG.GR....", "BBGG.B.RGGB..B.RR.GGRG...GRBG", "GG.GBGRG.RBB...GGGBBB.RG.RG..", "BRBGGRRR.BGB.B..BRBGBBBBGGG.G", "R..GRBB.B..GBB.RB.BBBBR.GGRGB", ".BG....RBBB.RGRGRGBR.RRG.R.BG", "GRGRRGGBRRRGGRRRBBG.BRG.RB.BR", "G.GBBR.GRRRG.BGG..BG.RBR.BGGR", "B.GBRBGRGBGRBRRRGRRGBGBRRBBBR", "RRGGG..RRGGGGRGGG.GB..RGGGGRG", "RGRRRBBRR..BRB..RRGGGGGBBRRGB", "G.G.RGGGRGBRG.GGGRR..RGR..BG.", "BB.R.GBBG.G.BBRGRBBRRGRRGG..G", "B....GRBG.RGGRGGBB.BBRG..GRGG", ".R..G.R.RRRGRGRRGGR..RB.G.GG.", "RGBGRRBBBBRGGGR.GRG.G.BGGRR.B", ".RBBGG.RRRBBGGR.RRBBGG.RGBRRB", "BRBBRGBGRBGBBGBGGRR.GRR..RBRB", "R.GBBBRBBG.BGRBRGBBB.B.GR.GRB", ".BBRGGG.GGRRGRGRRGG.BGBR..B.G", "GGRRRBBGRGGRB....BRGB.B.B.B.B"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 409;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> picture = {"GBGGR.RGGBGR.BBBRB.", ".BRB...B.GG.BGGGRGB", ".BR.G.R.R......RRBG", "B..GBGRRRR..G.BBR..", "BBGRB..BBRRG.GGBRGG", "GB.R..GBGBG.GB.GGGR", "BBRGGRRG.RB.BGR..G.", "R..BBGGBRBGRGR.GRGB", "BGGRBBR.GBRG.B.BBR.", "GB...BB...RG...G.GG", "BR..BBGGR.GBGRRGGR.", "BGG.RRGBBBRGGBGBRRR", "G.BRBRBB.GB.GRRBGG."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 128;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> picture = {};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 316;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> picture = {"BBB..GGRRB.GBRB", ".BRBRB.GGG.R..G", "G.GBBGBRBRB.G.G", "BBBB.BRRBR..B..", "R.G..R.B.GR.BBR", "BBGBRR.R.GBGB..", "GB.BBR.RBBBGB.R", ".BGG.BRGGB.GBRR", "R.GB..GBR..BB.R", "G..B..BGR.BBB.R", "BRBGGBBBB.BBB..", "RRBBRG.GBGGGG.G", "GGBGGBRGR....GB", ".BG...B.GRG..BR", "BGBG.GRR.R.G.GB", "RB.GBBGBR.GRBBG", "RGG.G.GGBG..BR.", "RGGR.BGB.RRRBGR", "BBB.B.GGGG.RR.B", "R.RRB.GBRGRRBB.", "RBBGBGGRRG.GGR.", "...R.BRG.RGBGRR", "RBBRGBRBBRGRGBR", "RBR.GRRGBB..BGB", "RRG..BGGG.BB.BG", "G...RBGRBB.GBRB", "B..GRG.RGG.RRRR", "BRBG..RGRRGBBGR", "GRRR.GRG.GGB.RB", "R.BG.RGB..GRGGR", "..BBRG..RRBB..G", ".BBGB.BBGGG..BR", "RB..GBG..GRR.GR", "B.RG.R.GBG.RGBG", "GBBGBR.RGRRR...", ".BBB.G.G.B.RRB.", "BB.GBGRRGBRRRBR", "RB.R.GGBGGGR..B", ".RRGG.GRBG..BRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 302;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> picture = {"RRBRR.G.G.G", "GGGGBBGBBGG", "G.RGB..BBGR", "BG.GBRR.RB.", "BRRRRGRG.GR", "G..B.GRBRRG", "RBRGGGGGGG.", "RR.BGRRBGGB", "BBRRRR.GRB.", "GGBRG.GBGBB", "BGB.BGBRRGG", "RRBGGRBRR.B", "GRG...BBGGG", "GRBGRGBRGBG", "R.GRR.B.G.R", "GRRR.GBGBRB", "GBR.RBGBR.G", ".GRRGGRBGBG", "BGG..RBB.GB", "GGR.RRG.BGR", "RB.RGG.RRRG", "BG...R.G.RR", "RGBRBG.BBBG", "BBGB.G.BRB.", ".RGR.RGG.RR", "G....RGR.BB", "RBBBBRRB.RB", "RRG.B...B.B", ".G.RBG..GB.", "..RRGBGB...", "BGGGRG.GGR."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 179;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> picture = {"RBBBB..BBG", ".GBRBGBGG.", "GRG.B.GGBR", "RGR.G.RGG.", ".G.B.BGGG.", "..R....BBR", "..RGGR..GR", "R..BBRBGGR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 39;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> picture = {".B.B.R.GBRBBBR.BGGBB.BRG.G.RGGG", "G.GRGGRBBGRRR.RRR..B.RB.BR.R.GG", "BB.RGRR...GBB..R.GR..GRR.R..GRB", "BGGG..R..RRRRGGRBGRRBRRBRRRRGB.", ".B..BGB.GRR.G.RRGGGRG.GB.R.R.RR", ".GGGRGRBGBGGGBB.RGG.GBB.RBBB..B", "RG.RB.RBG.RBRBR.BBBGGGB.GGRGGGR", "BBGB..RB.BR.BGRBRBGGBGBG.BRGBRR", "BBBGRR.GBBGGBRGR.B.BBRRGBG..RG.", ".RBGBRB.R..BGBR.GRR.BBBRBRBBGGG", "G.GRRGBBGRBRRGBBGBRRR.RRGRGR.GR", "BR.RR.BR.B.BGBB.R.GRBGRBBBBBBB.", ".RB.GB..RBB..RRG.GGGRGRGRB..RBR", ".GB.G.BRGRGR..GBGBGBGGGGBRGBB.B"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 235;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> picture = {"GGR.RRG...G.RBRR.BGG.B.G..RBRGBRBGBBG", "RBB.GRBR.R.BG.RGGG.G.B..GGGBGBGBG..RG", "RBBR.RGRR.B.BBRRGG..B....GBRGRBGGGRRB", "G.B.BRBGBGGRRRGBGBRRBB.GB.BG.GGGB..GR", "GRRB.BGG.....R.BGGR.B.RGBGRB.BB.BRGG.", "R.G.GGG.BGGBBRRBGRR.GRRBG...BR.BBGBBB", "..BRRBBRBBGG..RGRGRGBGBR.R.RBG...G.RG", ".R.BB.RRGBBB.G.RGRBGGRGRBB.GR.BBB..RR", ".GBRBGGRRRRGRGBGB..RG.....GBGRBGRRRGR", "BB.BBGBB.BG.GG..RRBB..RGBGRR..RRRBBBG", "BBR.GGR.B.BBGBG.RG.BRRRGG.B.RBRGG.RGR", "BGGRGG.BRBGRRRBRBRR.BRRGR.BGGRG.GRRRG", "B.B.RBBBBGR..G.BR.G.BGBR..GB.GRRRGBBG", "GB..GRBBRBRBRG..RRBR.GR...GRR.B.GRGRG", "GG...G.RR.GRGBRG.RRRBRB.RG.R.BGGRRGRR", "R.BRGG..RG.G.GRRBRRG.RBB.GGGBRBGR..GB", "GG..GRRBBBBBRRGB.GRG.RGG...B.GG.R.G.B", "GG.G.G.GRBBGR.BB.RBB.GG.BRRRG.BRR.GB.", "G...GRG.R..BGGRRBGGRRRR.G.R.B.RRRGR.G", "GBRGRG..R..B.BGBBGBG...G..BGGRBRRBRBR", "B.R.B.RB.RRRBRRB.GRGRRBRR.B.BRRRB..GG", "G.GRBGRBB.BG.GGR.GGRRGG.RBRGBR.BGRB.R", "RBGR...RBG.GRRR..RGBBRBB.RR.BRGRG.BBR", "GBRBRB.RGRBGBR.BG.RRGRBR.R..BR.GRBGGR", "RRB.GB.R.GGRGRB.RBR.....GRRBBB...GGRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 471;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> picture = {".BBRGBBB.BBBR.B.GBG....RGRGRBR", "RRGBBBBBGBRGB..G.R.BR.BG.G..B.", "RB.RRR.GBGGRGBGRB...G.GBR.BB.R", "BG.G.GBG.BR..R..RGBBRBBRBGBRBB", "RB..G..GB...RBBB.BBGRB.RRRBB.R", "RBRBBBR..RB.GRRB..RGRRRGGGRRGR", ".BBGBBGB..R.G.BB.GB.GR....BB..", "RRG..B...BGBR.R.R.RG.GR.R...GG", "BRBGB.GBGR.R.BRGBBR..RGBG.G.GR", "GRGBRRGRG.G.GRBGRGBBGRGRRGGG.B", ".GGR..BG.RBGBRG..GB.BGBB.GRRB.", "G.BRGRB.RGRBG..B..B..GBBR.RBBR", "RBBR.RBB.GG..BG.GBGBG.B.GRRRBR", "B.GBRBBR.B.GBG.RG...BGG.GB.BBR", ".R.GRGGBG.RRRGRGRR.G...GBBBBBB", "GBB.RRBR.G.G.BBBR.RR.GB.BBGRBB", "R..GGBRBGGRGBR.....GGB.RRBR.RG", "BBBRBBBGBBRR.RG.RRGB.GRR..G.R.", "BB..GBGBRGRRRGB.B.RGRBBGBBR...", "RG.GBGGBRB.RBGB..G.RGBBGBGRBRR", ".G.GGRB.BG..BG.BGRGRBRBBRGR.RG", "BBBGRGR..GRGBBBB.RRRGRG.RB.GBR", "R.BRG...GGB.RRBRRGBGBBGBBG.RGB", ".BBR.RR.BG..GRRGRGRBG...RB.RBR", "BB.G.GBRR..RBRGGBGRBBGRRBRRGGG", "RBRG...BR..B.GGG.RB.B.GRRRGBRG", "BB.RRBGBGGGRR.RRRGGRG.RRBRRGRR", ".BBGGGBBBGG..RBG.GRBGBBGRB.BBR", "BBB.R..GBG.GB..GGGGRRB.GGBGGB.", "G.BGG.BGBBGRRBBRGRGBBBBB.BGRBG", ".GBBBRR.GBGB.R...R.RG...GBG.GR", "BBRR.G.BG.BRBGB.BBGGG.RGBGBGBG", "RR..GRR.GR.RG.GGGGR.G.BBBGG.RG", "G..B.GB..RGGGGGRBGR.G.GRBRRRRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 542;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> picture = {"G.R.RRGR", "R..GBRBG", "B.R..RBR", "..G.G.GG", "BGGRGB.G", "RRBB.GRB", "RGRB..G.", ".BB.GBRG", "B.BRB.BG", "GRRB.RRG", "B.RR.RBG", "..RGG..R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 55;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> picture = {".BRBG.GRGGR.B..GBRRGG.G.GRGBGBRGG", "GGRRBGBB.B...BGRG.GR.GBBR.GRBBBBR", "....GRB..R.R..BB.G..R.GG.RB.RBGRR", ".GRR.BB..G.BGGRRRRGRG.R.RG.G.BGRG", ".RGGRR.GG.BGRBBGR.GGRGRGRGG.G.GGR", "BRGRB..RBGGBGRBGBRRBBBBR.R..BGG.G", ".BG.GGBR.GBBG.R..B.G....RRGB..R.B", "R.BGRRRBR..R.R.R.RBBGGBBGBBRBGB..", ".BG.RGB.RRRRR.RBBBGB.RR.RBG..G.RG", "R..GBRRG.BR.GBR.BBBBBB.GBBGB.GR.B", "GRR.GG..GGGB.BB.B..BGRBGB.R.BGBR.", ".R.BG.B..G..B.RGG.RGBRB..R...RBR.", "....RGRGBGBG..BGRBGGR..GGR.RGBRGR", "G.RRGB.GBBGGBGRRRBRR.BBR.GBR.BRBR", ".G.BRRR.G.RRG.GRGR.GGBRB..R.RR.RG", ".RG..BBBGR.GGBBRRRGRBGG..BRBBRBR.", "BBR.RBR..RGB.GB.RGG.BBBG.GRBRBGGG", "G.GGRRGR.G.GG.RB.BB.RB.R.....R.BR", "BRGGR.GGR.R..RR..RRBGBG..R.BG.BGG", "BRGGRRGR..BBGRBB.BRRBR...BBBBBGR.", "RBBRBGBGBRB.RRGGBR.RR.GBB.RR.RGG.", "GRBBBBRRRBBBRGBB.RGR.RGR..GR.GBG.", "G.BBBB.GRBG.G..GBBRBGBG.BBBBGRRRR", "G.R...G.BRGGGBRRGRG.BRR.RB.GG.BBB", "G.BRGBGGRBGGB.BBBG.G.BRGRBG.BBGRR", "R.G.RG.BG.G.G..R.RR..G.RBBRGBGR.G", "RBB..G..GBBGG.GBGBBGBRG.R.RGRG.BR", "GGRGBBB.R.RBGBRRBBRG.RRGB.BRGGBB.", "GB.GBGR.R..RRGGG..BBGRGBBGRBGRBR.", "GG.RRG..BBGRRBR..BBBBGRBB..BRRGRG", ".BBRGRGR.BGGBB.RRRBBBBBR.BG.GRRRR", "BGB..BGRGG.GGGRGBGGBGG.R.GB..GRRG", "BGRBGRGRGRB.RR.GB..R.BBG.RB.RRRBB", "G.B.RBBBBBRR.R.RG.GGBGRBRB.GGRRBG", "BBGRBGBG.GRBBRRRB.B..BBRGGRG..BRG", "RR..B.BRR..GGBGB.RGG..BRRGBB.GBG.", "BRBBRBRBGGGGB..RGG.G.R.GBRGGBRGBG", ".GRGRGG.GGG..GBGRRBGGRRBGRRG.BR.G", ".G..GBRR.BB.GGGBGBRBBRRGGG.RR.BBR", "BBG..G.GRBBGGG.G.BB.BG.BRG.RBRRGG", "GGBGG.GR..RGRGB.BGBBR.GBBRR.GRGRB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 728;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> picture = {"RGB..BBGR.RGRRRBRGGGBBBGRR..GGRRB..B...GG.", "GBRBG..G.G.RGBRBRGR..RGRRGGGRBRB.GGGGBR.BR", "RGBGGGBBB.RRGR.G.GBGRB..RGGB.RBGRRGRRRRGR.", "B.G.RRBG.BRGGGBRG.GRBBBRRRB.RRBBBBRBBGRR.B", "..GB.RRG.BRBB.BGR.R.RGBGG.BB.BG......GBRGG", "R..GGBB..BRGB.BRGB.GRG.RBR..RR.BGGGRBRGG..", "GR..GRR..RRGR.B.BG.G.BG..BRGR.GGBBGBRBRG.G", "GR.GG..BBGGBGR..GGBRBRB.RRBBRGB.GGGG.RB.G.", "BRG.B..RBGR.B.GBBG.GBGGRBGR..BG.GBB.B.B..R", "BRB.G..RBR.BR.RR.BGRRRRR.R.GGG.BGGBRGG.GRG", ".BGRBBRGGBBGB.BGGB....GB..RGBR.GB..GGGBRGG", "RG.R.G.GBG.R.BBBBGG..G.RG.G.B.GRGBBBBGR.B.", "BG..GBRRG.RR.GGGRR.G..RG.GGRBRBG..BGRBG.GB", "BGRRB.R.B.B.BGB.RGR.GBBGGRGR.R.GRRGRR..RRR", "BR.BGRGRB.RBRGG...B..RB...GRRBRRR.GGR.BGRR", "RGBBGBR.R.RGB.GG..BBRBRRBRRGR.RGBGRBRBBB..", "B.GRRGGGRBGRGBGBG.BBB.RGGG....BGG...BBGRGB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 363;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> picture = {"GRRGRG.RGBB..RRRRBGRB.GGBBR.B...R.RRG..GR.BG..RGGR", "RGR.R.R.GBBG.GG.RRGR.G.B..GBGGRGBRGR.GGGGRRR.R.BGB", "..BRG..G.BR.RGGBRRRGBRRB.G.B.B.GG.GGGRBGGRGGRGGBBG", ".BRBR.GR.B.RGBGR.BBRB.BG.RBR.RGBBBGBB.BBBR.BG...RG", "GBRR.BR.G.RRGRGB.RR.RGG.G.BRG.GBBRGG.BGRG.RB.B.BBB", "..BBRRRBBRRRBRRBGRBBR.GRGR..BBR.BGBRBB..R....GRBB.", "R..G.RRG.G.G..RBBGB.BBRRRR.G.GB..RRGGRRBG.GRRBR.GB", "BRRRR.RRB..BBRR..RG.R.RBG.GGR.BB.GRB.BRGBB.GGRRGRG", "GR.GBBRBRGG.G.GBBGRBRG..BBBGRRBBBG.GRRGG.BRG.RB.BR", "GR..BBGRR.GBGRRBGRB..BB...BB.RBBBG..RR.GR.BB.GGGBG", ".GRRRRB.GGR..R..GGRBBGG.G.BRBG.B..B.RR..BRRGBBR..R", "R.BRB.GB.G.BBRBBRG...BGBG.RB.RB.G.BGRG.BGG.BGRRRG.", ".BGR.BRBBGBRGGGRR.BR.RG.RR.BBGRGGGBR.B.BRB.B.GBRG.", ".BBRRB.GB.BG..RBGGGBGGBRBBRGB..BB.BRBR..BRG.G.RBG.", "R.RGGR.GGGGR.BBRGGRGGRRB.R..G..GBRG.GR.G...BBGGGGR", "GBRG..BRGGB.R.BGBGB.GRGRG.GBBGR..RGBRBGRGRBR.R.R.R", "RBR.GRBRGG.RGBGGGR.BRRR.G.GGGGGGBRR.GGBRRG.G.B.GRR", ".RB.RRGGGGBB.RG..GRR.R.G.B.RGBGRBRGRGRRRGRRRG.B.BB", "GRBGBRBGRBRBG.RB.B.GBR.GG.BRGRRGBRG.BB.BRRRRRRB..R", "RRGBGGGBRBRBBR.BRGGB.B.RR.GG.GBBBBGG.B.R.R..RRBB.G", ".B.B.GRRBBRBB.GBRG.RRR..GRRR.BGBGGBGRRGRBRBRGBGGBG", "BR.BG.BGR.B.B..RGBG.BR.GB.GRGB..B.BRR.GRBGRBR.RBG.", "RBB..BRGGRBB.R..BRRRGGGBBBGBG.BRBRGBGBBRRGG.GGGG.R", "BRBGBRBRB...G.R.GRRRGBBRGG.G.RG.RGR..BG.RRB.RRRGGR", ".RR..B.BRRG..GR.RBB.R...G.B.RGR.RBBRBR.GGGBRRR.RG.", "RBGGRGRGR.RRB.R.G.RGB.BRBGB.RGBBRRBBG.B..GB.B.BGBG", "R..BGRB.RBB..G.R.G.RB.GGGBRR.BBRBRRRRB.RB.GRGRR.BG", "BGGGRB..GGBGGBGR.GRGBBRG.RBGG.RRGGB.BB.BR.GB..G..G", ".BG..RG.G.BBRRGBB.RR.GGG.RBRBRBGG.RR.R.RRR.BGGBGBR", "GGGB..G...BBB.RBRGBB.B...RBRG..GRGBBB...BG.B.GRRG.", "GGBB.GG.RBRRBG..G.GRGR.BR.BBB.GRB.BRGRRBRBBG.B..BR", "RGR.GB.RR.BGR.R..B.BBB..GGB..GRG.B.BRRRRGRG.RBRGRG", ".GBGR.B.RBGRGRR.B...RGBG...GR..GBRBBRRG..GB.BBR.B.", "RBGRRGG.R...GGBBRB.GG.RBBRBBG.BBBGRRBRB.GR.G...B.G", "B.BGRBR..BRBGGGBBRRGRB.R.BBBBRBGGRR.R.BB..GB.RRBG.", ".BB.GRBR..R.BRBGGRGRGRRR..GGB.BBBRBBGR.BGGB.R.BRRR", ".RGR.BRRGBRRGRGRBRR.BGR.R.RBRB.G.R.BBR.R.GR.BBRG.B", "BBGRBR..RGB.GRGGBRGGRGRRG.R.BRBBGRRRG.B.GG.R..BBB.", "B.G..GBBR.RB.R..RGRRRRG..RB.GRB.B.RBGBB.GG...RG..G", "GGRG.B.G.B.RBBBGB..RBGR.BG.GBB.G..BB.BB.R.RGR.GBBG", ".R.G..RB.RB....G..GGB.GBGR.GBBRRRGRRGBGGBRR.B.RR.B", "R.GGR...BBBG.G.B.BGRBRR.RBGGR.B.B..GRGB..BBRGGR.GB", "...BRG.BGGGRRBBBGG..BR.BR.BBB.GR..GBGBB.RR.GG..GBG", "BG.GBRBGG.BRG.B.RB.GRRRB.RBRRRRB.BRG.G...BGGGBGB.B", "...BGRBR..GRGBRBGGGG.RRRRBGGG...GGRB.RBBGGR.RGGBRG", "RBGB.RR.GGGBBBR.BR...GGRRRR..GBG.RBGRRG.RGR..B..BB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1167;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> picture = {"BGG.RR...RBBRRBG..BB....G.BBBGBRR.RRG..RBG..GR", "RBGRRR.RGG.R..BGR..GGGGG.RRGRRBGRRRB.BGGG.BGGR", "GGB.RGGRGRB.BRGBRB.GRBRR..BGBGGGBRR.BGBBB.GGGR", "GRRBG..RB..RBGRGG..RBBBB.RRRBRR.BRGB..BBBGBR..", "B.GRBG.BRGRB...RB..B..RRGG.RR.BG.GG.B.BRBRG.BR", "RG.GB.BRGRB.GBBBR.R.BB.B.RG.BRGG.R...G.BGRG.GB", "BGR.RGG.BRRGGGRB.GR.BB..GB.B.B.GGBB.R.GBBGR.G.", "G...RG.BRRRR.GG.RGGRBG..GRB.RGRB.GGR.RBGBRRGBG", ".RR..GB.RBB.BB.BRRRGRGRB.GR.B.RGBGRR.GRB...RRR", ".BGRGGRR.GB.BB..GBBRB.R.BR.BBR.BGR..BBGGRGG.G.", "BR.BRGRB...G.BRGG..GBBRGB.GGRGBBB.GGBGGRRGGGBR", "R.B.BG.RB.RB.RG.GB.GRR.RGBGG.GGB.GG.BB..GBBRBR", ".B.GGGG...R.G..GGB.GGBBBGBB..BRR.GGBGBRBGG.R.G", "RGRBRRGBRGGBR.B.R.RB..GBGBRR.....R.GRRGGRRBRBG", ".GGGR.RGRBG.BB.R.BB..GGGR..G..GRB...RGRGGGGR.G", "GRG.R.BBRGGB.GB..BGR.R..RBRBRRBB.RGBRGR.B.GBR.", "R.RGRBGB.BBGBRBRBBRG.R.BGGGRGGGG.GGBGRGBBGGB.B", "R.GG..BGB.BRG.BRBGGBR.BBRGBRBBGRBRRRRRBGBBG.BG", ".R.GR.BGBG.GRG..GBGBRRB.G.B.G..R..BG.BBGRRGRRR", "BR.R.GG..RBR.RBGGRBG.B..GB.BBBRBB.BB.BBR.BBBRR", "RBRRB...RR.G.BGRBRRBGG.GGGGBBGBRBBRGGG.BBRGB.B", "RGG.R.GBGB.BRGB.BGGR..BB.BRRGGBRG.RBRGR.GR.G.G", ".R.RBG.RRRBBG.BGRRRG.GRGRBGB.RBRBBBBBB.GRRBG.B", ".RBRRB.B.B.BRRRGGG.BBGBGRGBGBB...BRRRR.BGG..RR", "G..BBGBG.BBR.BG.BB.GGG.GBGRRR.BGRGRGRBGGBBBRG.", ".RBBBG.RR..GRGBBRGBGB.BGGGBGG.RG..B..GRRBRGBGG", "RGB.GG..BG..GG.R.GBGG.R.RRGB.RRR.G.BRRR..GR.GB", "B.GBG.BBGGR.GB.G.B.BB.R.BRRBBRR..RGRR...G..G..", "BGR.G.GR...RR....G..RRRBRBBRG.BG.RBGBGBRGG...B", ".RGG.RBBB.BGB.R.RRGRRBRRRGRR..GBR..BGGGBBB.BRG", ".G.BGRRBGBBG.BBRBBR.GGGRGGRRGRRG..BR..BRGGRGBB", "R.GGGRRB.G..BBRRR..R...RGGBBR..RBG....RRBBGRBB", "RR.GGRRBRBBRR..G..R.G.BG..RBBGGRG.BBR.G.BGB...", ".G.BGRBGGRG.BRBBBGRB.RR..GR.BRRRRBR.BG.RRGGRBG", ".BGB.RBGBGRR.R.G.RRRGR.B..R..B.BRGB..GRBBRBRGG", "RGGR.GRGRGB.B.B.B.GGBG.BRR.B..BRG.BGRRGRRB.RB.", "RBBGG.GRR.RGRGBRGRGRRBB.BG.G.RRRRRGGBBGBBRRG..", "..RBRRR.RR.BGRGB.GB.BRBRBGBGBBBRB.GRBBR..G..B.", "GRG...BBRG.B.GBBB.RRB..B..GRG.B.R.RR.BGB.RR.RR", "B.GBR.BGGBG.BR.R.BB....BRBBGR...BG.BRRR.BGB.GB", "B..RG.GRGBGG...BRGBGRBG.RGBRGRRBGB.RBRG.R.RBRB", ".BGRBBG.RGBRGBG.B.GR.RGB.BBRRRBBB.GGGRBRRB..GB", ".RBGRRRR..BGRG.GBBB..GR..RRGGGRBB.RBG.G.RGG.RB", "G.G..BG.GRGRR.G...RRGRRRR.B..RG..BB..BGRBRBRRG", "BBB.R..G.BG.RGBG.R.RRB..GBG.G.B..RGGRR.R..GGRR", "B.GGGRRR.GRGR.G...BRRGRRBR.BRR....B..BGB..GB.R", "..GBRBBRRG.RRBGGGB..BBBBGRBRGGBBBG.RGR.RGBRGBB", "GRGGGRG.GRR.BRGB..BB.G.GBGRBGBBRRRBBGRGRR.GRGG", "GGG.BGGBGRG.GGGRR.R..RBG.RGB.GG.GB.GRRBG.BGR.R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1132;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> picture = {"GGRRGB.B.BR.GRBRGBBRR.RRR.BG.BRGBBGRRRGBGBR.RGRR", ".R...BGBRRGGR.BB.BBGG.RGG..GRRGBB.BBG.G..RRRG..B", "BBRR.G.BG.GG.B..RB.G.RGBRBGBBRBR.BGBRRBGBGGG....", "BBRBGBGBBGRBBRRBBRBRGR.GRRG.RBBGGRG.BRBBRRGRRGR.", "BGGRRGRBB..BBRB.GRRG.B.G..RRRRBBBRRBB..RG..RRBG.", "GRBGRBGBGBGGGBRRGRRBRGG..BB.GRBRRRB.GG.GB..GGGRG", "..BB..GRGGBBRRGGRGRGBRBRB.BBRBGRG.GG.RB.G.RRG..G", ".GB..B.G.R.R.RRBBB..BG.B.RBBGGG..G.RBR.G.GGBRGBG", "B.R.RBB...RB.RGG.GBRR.GBGRRGGGGRRRGBG.B..GRB.RGG", "BR.RR...RGBBG..RBGG.B.RR...RG..RG.RGG.BGG.RRRGRB", "RGGBBBRGG.RGG.B.B..RBGRRG.GBR.R..GGRBR.R.RGGG.GR", "RG.GGBBRRRRBGRRGGRR.GBGG.BGRBBB.RBRBR.B.RB.RBG..", "B.GB.R.BR..BRBR.R.RGRB.GGRBR.GGB.BR.R..GGBGBG.B.", ".B.BBB.RRBG.GGRGB..GG.BR.GG.RRGRR.RBRB..G.RB.B..", "BGGRBGBBBGGBG.BBR.RG.G...GGGRGB.GBGBBGRBBR.R..B.", "RRBBR.GBGBBG.BRBB.BG..GB.GR....BRB.RR.RRR.B..RRB", "BBRB..R.RGBBR...GGBG...G.BG..G..R.R..BGGG.BGBG.B", "R.BGRR.R..GB.GBRB.BBGR.GRGRBG.BBR.BRGR.RRRRB.RGG", "BRB.R.GBRGBGGGGGRRGGGG.RBGGR.RR...RGGRGGGB..RGGB", ".GG...BRRBG....GBR.GB.BRB.GB.BBRGBGRGBR.RBG.GR.R", "GBGBGBRG.GB.GRG..BG..R.GRRRRGBGG..RGG.BGGG.RGGRR", "......B.G.GGGB.RRB.BB.RRRBGGG.G.BGGGBR.GG..RBGBR", "BG.B.B.RRBB.RRBB.R.G.BR.B.BGBB.RBGRRGGR.BBBR.GBG", "GBGGRGB.G.GBBGGBBR.GBBRB....B.B.RGRGBBRGRBGBBBRB", "BRB..GGGBGB.B.GBG.B.RB.RBGR.GR.B.GBBRRR.RRGRBRGG", "RBB.R.RRBRRBGRGGR.RGB...GBGRR.G..GG..RBG..GBGBGB", "BGRB..B.BRBB..B.G.RRBBGBGR.RB.B..GGRB.RGBGGRGGBB", "G..R.RB..RRGGBRB..RBR..GB.GRBRBRGB.B..GBG.BG.BRR", "GGRBRRBGRGRBBRBBRBRR.G.RBB.BGGR..RBBBRRBRBBRG..R", "G..B.RGRB.R..R.B...BGB.BG..BGRRGG.BBRBRBBGBGR.B.", "RGRG.R.B.GRGR.G.B.R.B.BRRRRGGBRR.BBGRGR.RRRRGGBB", ".R.GG.RRRGRGGBR.GRBR.GBBG.BBB.RR..BRBRR.GRRBGRR.", "B...RGG.RR.B.BGGBBB.RRRGRGBG.B..RBBR.RGRB.GRR.RR", ".R.BGRGBGRBBB.RBR.GBB.B.BG.RRRR..GGGR..GR.RGGBRG", "RR.R.B.RRRBG..RRRR.RBRGG.GBG.BGGGBB.GBRBRRGGG.GB", "B.BRR..GBG.GGBBGGRBRRRRG...RG...RGRBGR.GGBG.BRR.", "G.G.RGRBGGRR.B..BRGG..GBRRBGBB.B.GGBRRBBRGBG.RRB", "RGBBB.R.BGBRGRRBRBBRB.BRRG.GG.BGRBBR.BRGBB..GBGB", "RBRGBBRGR.....BGRR..G.GBGGRBBRR.RBR.GBBRG...RR..", "B..GGGB.RRBG.BGR.RBGRBR.G.RR.RRBBRR.B.G..RB.RB.G", "..RG..G.BGRBG.GRG.RBB..BGRBGBBRBGRG.RBBBBRG.B.BR", "GRBRRRBRBRBBGBGG.GB..B.RRGBR.GBRRBB..R.BBBGB.GRR", ".GGBB.GRRRB..G.G..BRB.BB.BR...GG.BB.....B.GBGR.B", "...RRR.BBGBB.RBBRRGB.R.GRBB.G.RGBBGGR.RBR.BRRRGG", "R.GGGBBGRRBRGR.RB.R.BRBRGGBGBRG.GBRB..RRBG.GG.B.", "BGB.GGG.BBG.GG.BGBRB..BBGBRBBBG..G.GG.R.RB...G.R", "RBRGBB.BB.RGG..RGRBGBBBRR.GGGGBBBGGB.GGBRGBGGR.B", "RRRG..GGGRGRGGG.BBBB..RB.RG.GRRB.G.RGGBGRG.RRBBG", "BRBBBG.G.RGGBGRG...G..BB..B.GR.BBB.B.BBR..RBRRB."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1228;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> picture = {"GR..BR..BBRRBBB.RRGB.R.GGBBRRGBRG..R.RRB.BBGRR", "...R.GR..GB.RR.RB.GBGG..RGGGB.GG..RRRRRRBG.GBG", "BRBGBRRRRRB...GRGRBG.BRBBGB.G.BGRBGG.BG.R.G.R.", "..G..RBG..B..G.BGR.BGRGGG.GBBRRGRB.BGBGG.GRRBR", "RGR.RBBG.GBRBBB.R.GRB..BB..RBBBBG..GB.BRRBBR.R", "B.RRRGG...R.RBBRBRG..G.BRGRB.RBBBB.BB.BR.RR.GG", "RBRGR.B..BRRRRBGGG.B...RGRG.GRBB.GBGRBRG.GB.B.", ".GBBRRRGGRB.BGBR.GGBB.BBRRGR.RBRBGRBGGBGBB.B.R", "RRGBRRR..BGGRR.GG..RGBBBBBGRBBBGBRBBRBBB.GB.BR", "GRRBBBRBG.GGGGGBRBBGRG..R..GGR.BRRGBB.BG..RRBR", "RRBRBGBB..RBBBRB.BBBGRBG.RRG..GGR...B.BG.BRGBB", "GG.RRRGG.RGBGRRRBBB..GB.GBRGB.BBG..RBRRR.GG..R", "GGBG.BB..B.RRR.RGGB.B.GBBB.BRBGB...B.GR..RRR..", "GBB.BB.R.RGG.BRRR.GRBRBBRGG.RG.G.BR..G.R.G.B.R", "GBBRRGBBB.RBG.R.B.GRR.B..BGB.RRBR.B.GGG.G.BGRG", "RRGRBGG.BR..RRBGGG..RBGBBBGRRR.RB.BBR..GR.G...", "GB.BBBRGR.GGRGG.B.G...BRBRRR.RGGBB.BBRRRRRBBBG", "R..GGGGBBRG.RR.RBR.BRGG..BGGRBBRRGBRR.BBGBGBBG", ".GRGGRRB....B.GG.R.B.BBRBG.G.GBGB.BB.GGRRGG.RB", "RR.G.BRGRGB...G.GGBGBR...RGR.GR.BG.RBRG.BBBRRG", "GBG..B.R.BBRBR.GG.GGG.GBBRGGGR..R...RRRBB.GG.B", "GBR.GB..BRBBR.RBGR.GBRRRBBGR..RRBRBRGBBGRGRRGG", "GGB.G.RB.G.BBGGBBGBGB.BBGBRBRG.BBGBGRGBGGRBRB.", ".RG...BG..B.GBBR.BB.R.R.RBBB.BBB.BGGBGGRBGR.GR", ".RRGBBRBBBRRGBRG..BRR..BRGRRRG.BBBR.BBRGB.BBBB", "RBBBGRB.GB..GBGRRB.RRBRBBBGBGRGGB.BRGRG.RGRBRG", "RRGBGRB.GGRGGG.BBGBBR..R.GGB.BRG.GBB..B.GR...B", "RBRRGGBGR.GBG..BGBGRB..GGG.G.B.BGB.R.RGR.G.G.B", "GBB.GRBRB.BG.GBGGB.B..RRR.BGGG.R.BG.B.G.G.RR.B", ".BR.RGGBRR.G..BBG..BRRB......RRG..RRG.GBGR.G.G", ".GBR..GB.B.G..RBBBBBGRRB.GRG.RGRRRRG..BGBBGR.G", "RGBBB...BRG.GGRR.BR..BGBBR.B.GRBGB..RGRRBBGRGB", ".R.G..BR.RGGB...GRGRRB.GB..BG.GB.RGRBBGBGG.RGR", "..B.BGRG..B.RRGRRGBRRBB..RGRBGR.RRB..G.RBRRRRG", ".RG.RRRGG.BBRGRBGG.R.GRBG.B.GRGR.R.B.RRBBBR.BR", "GG.G..RBBGBGB...BGBRG.GGRB.GGGGGRRRBG.B.RB.B..", ".RB.RBGBGBRGBBRRBRBGGB..RBG.BRB.GBGBRGGBGBB.RB", "GG.B.G..RBRBGB.B..G..GBBB.BBR.GGB..RB..GGB.BG.", "RBGGBGGGRRBBBRBRG.RGGGBRB.GBRR.GBG..BBBGBBG..B", ".....BB.RGRR..RBRBRBG..B...RRR.R.G.BBRGGBG.GGG", "GRRB.BGRB...GG.G.RRBRRBGB.RRBR..GR.GBRRR..R.R.", "R.BRGBGGGBRBRRBBG..G..RRG.RBB...GR.GRBR.RBGBB.", ".BB..R.GBGGBBR.G.GB.R.BBBGRBGGRGGRRG.BGGBGGBGR", "GRGBGR...R.BGGGGB.RBRGBG..BG.GG.GBG...RGGBGGBB", ".GBB.GG.B.R.GGB.GGB.GBBBB..GB.R.BRRG.BB.RBGG..", "RBRG..GRR.G.GBBG.R..GRBBR..RB.BRB..R..RRBGG.R.", "G.GGBRG.GRR.B.RBBB.GRBBBGGR...B.RBB.RGBRR..GRG", "G.B.BBB.BGGGBRGGGRGRRG.RG.R.GRR..RGR.RGBBG.GB."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1126;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> picture = {"RRG.RRBRRRG.RGG....RRGRG.RB.GRRBGGGGBGBG.RBGGR..", ".RR..BRBGRBBRG.RGBGG.BBR.GGBGGR.GG..RRBGBB.G.R.G", "GGRBG.RRGGB.BBRBGBG.GGGBB..GBG.GRGBGBR.RBBG..GBB", "BBGGRGBBRR.G.R.RRRGBBB.GGBRBRR.RBG..RRRG..BRG.BR", ".R.BGB.GGRRRGB..GGGBBRGBGRBB..RRRRRGRR.GBGBB.GGR", "RBBR.BBGRRRBB.R.GRGRGRBBGRRRBRBRGG.GBRRR..B.R..B", ".BGGR.RBRGBBBGGRRGRBR..BRBRR.BBGBRGR.RGRGGG..G.R", "BB.R.GB...G..BB.GG.GRGB.G.B..RBBGGBGR..BBRGR.GRB", ".BBGGGRGGR.BRRRRRRGBGGBRR.BG..RGR.B..BRBG...RR.G", "G.GBBRBGBBRBBRBRGRGBR.GGRRBRGRRBGG.GBGGGBBBRRBBG", "RRR.GBGBB..RBGGBGR.RGR.RRBBGGG.BBG...G...B...R.R", ".RGRGGGGBGG..RG.G...BRGGRR.RGBG..RR.GRGG.RGGB.GG", ".GGR.GRGGGRGR.RGRRBGG.B.BBRGBR.R.BRGRBR.GRRB.RB.", "BGG.G.R.R...RRRG.RBGG.BGGRRGG...RG.R.GBBRRBR.GBB", "BG.R.B.BRBGGBGBRRRBRRR..BRG.R.RGGGBRGR.B.RGRGBRB", "RGR..GGBG.GGGR.RRBBBG..RRGBG......GRGGBBR.RRRR.G", "GRRRRRGGGR.RGBGG.BGG.GGR.BGR.RRRBGG.RG.RRGGBB..G", "RR..RGBBGB.BRGRGGGRR.GG.GRGBRGRRGBRRB...BRRGGRG.", "GRBB.B.GBBRGBGBR.B..R.RRBGGRG.GRR..BGG..GBG.R..G", "GBGRG.GB...B..GG..GRRR.BRBBBB.BBGRGRRRBGRRR.BGB.", "BBBBRRB.BRBGG.GR..RRR.RG..GBGGBGRB.BGBBBG.GGRBR.", "G.G.BRRGRBGB.BRGBRRB...R...G..B.GR.GGGBGRRBBB.GR", "GG.BR.BBBB.G.GBGRG...RGB..BGRRG..RBRRRGBGGGRRBBB", ".RRR.B.R.GBBGGR.B..GBBG.GBR.BRBBBBBGRGBBB.B..GG.", "R..BG.RGGBB.G.R.GRBRRRRBB.BGG..GGBB.RBBBBB..B.R.", "BGGGBRGGGBGRRGB.BB.RRBBGGRR.GRRBGBGGRG.RR.BBGGBG", "B.RGR.GGG.RBB.GRRRRGRGRBB..G.BR.RRGBGG..BBB.RRR.", "G.RGRR...GGGBGBRBRGGB.BRGBR.B..G..BBGRBGRRGGRBRG", "RGR.RG.BRRRGGBRBRGRBGG.G...GRB.GB.R..GGRGRBGGBBR", "RB.RR.GR.B.RG..BRRR.R.B..B..BGGGRBRG.RRGGRRB..BR", ".RR.RGBB.GGBRBBRR.BRBBRRRGRR.G..R.BGB..BGGBR.GB.", "GR.RRBRBR.BG.GGR..GGB.RBBG.RB.R.G.BGBG...GGBRGGG", "RGBR..RRBG.GR..GBRGRRBGRB.RGB..BRGGRRR.BRG..BBRR", "RB.RBRGBB..RRRRGB.G.GR..G.BGBBRRBRRRRBRRBGG.RGRB", "GBRG.RR.RRGRRBGGBB.GRGBB.GBRBBRBBGGBGBGRB...BGGB", ".BBBRRBRGR.RB.BR..RBGBGB.RRGGB.GRR.GR.BB..GRR.GR", "GG.B.GR..RR...GR....RB..B.G.GGBGRGBRGBRR.GGRRBRG", "RRG.BGGGGBBGBRRGR..B.BBRR.RBRGRRBGRRGR.R.R.BGR.R", ".GB.BBGR.RRRBRBBRRG..G.GGGGBGBRGR..BBGGRBRBRG.BB", "BGGBRBBBGBGB..GRRRGBRBGGRR.GGBBBRR.RGRG.B.BB.G..", "..R.RRRRGGRR.BGBR.GRGB.BG.GBR.RGGG.RRGR..G.GGG.B", "RBRBRBBG..RBB.BGGRGG..RRBBR.BBG..GBRRR.R.RB.RG.B", "...RB.R.RBBBB.B.BGBGRRGRGBR..BGRBRG.RRGG.GGBG.GB", "BBR..B.BGGB.RGGBGGG.RRR.G.RGGBG.R...RRGB...BBRGG", "..B.R.R...GGGGGRGRBGB.GR..GR.RRBGBB.GRRBBGB.B.GG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1107;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> picture = {"..RB..R.RBG.GBBB..G.GB...BGRBR..RR.GRBRGRB...", "GBGBGGBBGRGRRR..G.R.RR..BBB..GGBGB.GBR....B.R", "BGG.G...GBGRBBB.BRR..BB.GRG.GBRR.GBRGBGGRGBRR", "B.BR..RGGGGBBRGBRBG.R..G.BRG..RR.BB.G.G.RRRBG", "B.GGGBRBGBGRRB.G..BB.BRGR.BRRGRGBRB.GRRB.GB.B", "G..RG.BRBBBRGGGBG...GRBR.G.RGBGG.R.RBRBR.RRR.", "GB.GRBR.....R..GGBBB.GRRGRGG.GB.RRRG.GR.GB.BG", "BR.B...GRBGB..BGGBR..BGBG.G...GBRG.BBGBR.GGB.", "RR..BBGRGG.BB.RRB.GBRBRBRG.GGBBRBGBBG..GGRRRR", "R.G.BBGRBGGBGGB.....BRBR.RGG.B.GR.RG..BBRRB.B", "..G.G.BB.RR.RGR.B.GRRGRGBBGG.BRGBRG.R.BGR..GB", "RGRGB.GBBBBBGRRBR.GGR.RR......RGGRGG...RR..BB", "R.BRRBBG...R..BRB.GB.GRGBBGRBBBGBRG...GBRBGRB", "GG.G.GRRR..RGBRB..GGGB.BG.B..BB.R.GBGBG..RB.G", "G..GBGBRBRGRR.BR..B..BB.R.RGGGBR.RGGG....GBRB", "B.G..BRB.B.B.RRB.BBRG.RBRBR.GG.BG..RRRB.GGRRR", "R.R.GRRGG.GRB.RGR..BBBGRR.GRB.B..BGG..GRGGB..", "G.RR.BRRRBBGBBGBR..R.BG.G..BB.BGBBGR..BR.GB.G", "G.BBBRRBRR.BBBBR.R..RR..BBRBGGGB.BRBRR.GG..B.", "B.RRB.G..RRG.RBBR..R.RGRRGGBRRGBGB.BGRRGR.RRR", "GBB.GGRGBR..B.G..BG.GRGRR...B.BBGG.B.G..RB..R", "B.G.BRG.RBR.GR..GR.B.RBRG.RR.GBBBRBR.BB..RBBR", "RBRB.R.R..GG.RBB.GGB.RGRRBR.G..RGG.R..GGGBRRB", ".RGB..B.BGRR.GBRGRR.RGBGRRGR..RBG.BRBRRGRBGG.", ".BBGRBRR.GBGRGRGB.GBRB.BGRRG.RRGR.RGGRBGG..GR", "GBB..R.R.GRBRRGGGB.RGRR.RGGGRRBR.BBBBGGR.BBRG", "GGBBGRG..R.BG.RRRB.B.B.R..GRRB.R..R.R.BR.GGB.", "BGR.B.RRB.BGGB.GBBG.GGGBBBGGR.G.RR.GGBGBR...R", ".GGR.BBRGB....BBRB.GRGGRRGGRRRGGBGRGG.B.RRGG.", "GRGRB.....R.BRGB.RBR.G.....G..RGGB.GR..BRG.GG", ".GBRGBGG.RGGBBRBBBGGG.BGGGGRGR.R.G.RGGR.GBBBG", "RRB.GGB.RBGBB.GBBR.BRBB.R..B.B.G.GBRBBRGBBB.R", "RBRBB..RRR.GBRRRBRGGRGBR.RRG.....B.B.GBB..BBG", "BGBG..G.GGBBGGRB.B.BRBG.GRB.R.RGRBRBGRRGRG..B", "GB.R.BRBGBRR.BRRBGRGRRRB.BRG.BGGRR.GBBBRRBGG.", "GR.G..GB..BGBRBB.RGR.GBBRBGBRB.BRG.RBBRGBBRRR", "RB.R..GBR.BB.RGRRRGBBB.RBB.BB.B.GBR..BRRRGGBR", ".GGGGGB.R.GB.R.BGRBGRBGRBR.RBRRGB..GB.GBBG.B.", ".RGRBGR.B.RRRBRGBBRR.RR..RGR.GRRRR.GRRBRRGBB.", "GGGB.RBR.RGBB.GRR..GRRRG.GRB.R.RRGBGRRGRGBG.G", ".BBRGRGBB..RB.GRRR.B.RGG.GB.BB.BGGRRGG.G.RB.G", ".GRRGBGRGRBRRRRG.R.BBBGRGGGGRR..GBR..B.G.G.BR", "GGBGRBBG.BGBRGBB.RBGR.RRRBB.R.RRB.G.RB..BBRB.", "GRGRRGR.BGGGBRBRRR..BGGGRBBGBR..B.GBR.RGBR.BR", "GGR...BB.G.BBB.RR.GBBG.RB.RGGB...BRGBRGGB..GG", ".R.GGR.RBBGGGGRB...GRRBG..RGRRGBGRRGGBGRBGB..", "RGB.GRRBGB.RB.GG..BRG..RRR.GR.G....GG.GRBRRBR", "BG..GG..B.G.G.RB.BGRGGBRRBRBBRB.B.GB.RR.R.G.B"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1121;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> picture = {"BBGGGBBG.RB..R.GBGR.BRGGGRGRGGGR.BB.BB.RB..GBGGG", "GGBGRB.GR.RRBRBGBR.RG.BRGBBRRR.BB.BBBGRRGBRGGRR.", "R.BGGB..RBGGGBGG.BR.BBG.RG..R.RBRGBRBBBGR.BBGRGB", "GG.GRRB.RR.RBR.BBB.GRBGBBB.RBR..RGGRB.B.BGBR..GR", "RRRRBRBGGRBBRR.BBB.GG....RGB.R.GGGGGB.RBRRG..BGR", "GGG.G.BGBRBG.GR.RBBBB.BGR.B.GBBGGBBGGRRB....BRGR", ".GRRG.BGRB.RBGGGRRBB.RBR..BRGR.G.BRBB.BGRBBRBBBG", ".B.RB.BRGRBBG..BRBG.RGRGR..RR.B.B.RBRBGGB..G.BGB", "BR.BBRGBBRBR.GRRRRGGBRGB.RBGRBRBG.R..RBRB..GGG.R", "BBB..GGGB.R.RRRRBG.RGRB.G.GGBGBB.RBBGRBR.RBB..B.", "R.RBBGR.B.B.GRG..BRR.BRRGGR..BRBRB.GB.RRGBBBRRRG", "BBRBRRR.GGBBRR.RBRRRBG.BGRBGRBGBBRRR.BRRGR.GGGRG", ".RG.GRBG..RRGRRB.GBGBGGRBBBBBBB.BB.GRGGRRGRGRRGG", "BRRBG.BGBRBGR.GGR.BGBB...BBGRR.GB.BBBGG...GRB.GR", "G.BB.BG..BRBRGB..G....B..BBGG.GRRGBG..GGG.RBGG..", ".BR..RGGGBRGG.B..GR..BRR.GG.GG.....GRR.B..R.RBBR", "GG..GGR..RBR...GRBRRG.BG.BGB.B.GRGGGR.G.GBR..RGG", "RBBRBR.BRRRG.BG.RBRB..GRRGG.G.RGR..BRBR.RG...BB.", "B.BB.GG.RG.BRB.GBBRGG.RBBGGGGGRBBRGGRGRRR.GGBRBB", "R..BRR.B..RGRRR.GG.RBB.RGRB..RRR.GBRRGRG..GRRBGR", "GG.BRRR.RBBBBRRRBG.B...GBBR.GBGGGB.RB.B.BB..BRBR", "GRB.GBBBBBRBGGBRG.BBBG..RBRR.BGBBBBRRR.R.BRBGRBB", "BG.BGRR.BG.GGGGG..RGR.BBRRGGG.R.RR.B.RGGBRRRG...", "B.RGBRBBGRRG.BR.R...BGGBR.GB.RR.RB..BR.RRB.BR.G.", "GGR.R...RRBGRRGBR...GRGRB.RRG.RBB.B....R.GRGBRBG", ".RBBRRGGGRBRBGB.RGGRGRG.RBG.BGGR.GGGRRRB..GRRRBR", ".BGBRRGBRGB.GB.BRBGRGB.RBR.GG.R.B.GG..RRRBBR.RG.", ".BBGGRG.RRGBBGBGBGRRGRBRGR...RR....GG.GBR.RB.B.G", "RB.RB..GBBBBGGR..RGG.RRR.R.RGR.RRB.BGRRRB..RB..B", "RGRRBRBRBRBG.GBGGBRGBGRR.RGBG.BBBGRBRBB.RR.B.RG.", "..BGG..BRBRGRBGRGBBG.B..GGGB.BGRGG.BBBR.GGGBB.BR", "BB.RB.RGG.BRRGRBR.RRBBGBBGRGB.R.BRRRR.RB.BRBG..G", "GG.BGGRGGGGR.G.BB.RBRGBBGGG..BBB.R.RB.RGR...GBGB", "G.GGBRRBRBG..R.G.RBRGG.R.GR.BRRR..GB..GRGBGBG.G.", "BRG.G.BGBRBBBGRBBBGRGGRGRGRGRGGGB.BR.BR.R..GR.BB", ".BBBBB.RBR..GG.B.B.RBGG.GBBGB.RBRBGRRRR.BRBG.G..", "GGGRR.R...GBRGBB.GGBRBGRBGGRGBRBR.BR.GGBGB.R.GG.", "GG.BB.RRRRBRBRBGRGR.BR..R.G.B..GGG.BBGBBRG.RRGBG", "GGGB..G...RR.RGRRBG..RBG.GBRGG.BR.R.B.RGRGB..GB.", "BBRRGR.BGG.BGG..G.BGB.BR.GB.R.BGR.G.BRG.BGR.G.RB", ".RRGR.GRRBGGGRG.RBGGBBBGGG.B..BGRBBBGR.BGRG.G.RG", ".G..GBBBRBRG.RGGG.GGBRRB.BBRGRRBGBGRBGBG.B.GRR.B", "BGGGGB.RBG.BGG..BBG.B.RGGGG.RR.GGGRB.GGB..BBGGR.", ".GB.B..BGGGB.R.BB..BBRGRGBR.GBB.G.BG..BRGRGRRGGG", "GBR.GGGRBGBBRGRGGRGR.RGBGRGG.B.GBR.GBBRRGG.B.R.R", "BGGB..BGB.BRRRRRGBRGRRGGRB.RGBBBBR...RGGBBRRR..B", "BRGBGR..GG..RGBGBG.GRRGR.BBG.GGGRGGRG.GRGGB.G.BB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1144;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> picture = {".GBR.BGB...RRGBRGB.G.R...B.BBB.RBGG.RB.BGGR..", "RBBGGGBG...GBG.BGGBB.RB.RGBG..RB.RGB.RRBRBRGB", "RGBGGBRRBBGG.RBGG.GBRGRB.RGRBRRR.RGGB.GGGGBR.", "R.R.G.GG.BR.GGRRBGRRRGBGGRRBBBBBGRGG.RG.G..BG", "G.G.BRG.GBR..RGGGBR.R.BBRRGRGB.R.RRBRR.B.R...", "GBGG.BG.BG.GBRBGR.B..BRBB.GR.RRR.RBBGRRRGG.R.", "G...BBGR.G.RBBBGRRG.B.B.B.BGRBRB.BBGB.BBGBRR.", "BGRGRGR.RGBBBRBRG.RR.BGRGGGBRRBBRBRGBBGBRGR..", "GB.RGB.R.G.G.GBRBR.BGRR.RRGB.GBB.RBBRGGRGGGGG", "B.GGGBGGRBR.G...RRGBRBB.G.RRRGRRRR.G.BGRRRRR.", "B..GRB.RRB.BGRBGGRGRGBG.GBGBGG..G.GRB.GG.BB.R", "B.GRG....B..RGG.GGBRB..RGRRR.GBBRG.GG.GR.RBBR", "GRGRR.B.BGRRGRGRR.G..RG.R.BBRBBRB..G.BRGGBGRR", "GG..B...BG.RGRB..BGGBR.GGG...GB.BB..GBRGBRGG.", ".B..RBRBRBR.RBG.GRG.RB.BBRGBBB.GGGBRRGBGRBGBB", "..B.BG.RGR..GB.GRRRGGBG...RBRBG..BR..G.RGRRGB", "BGBRGBRG.GBGRRRR.B..BRB...BGGR.R.RRGRRR..BGGR", "G.GGB.BRGR.R.B.BBGG..G..RRB.BRR.B.RGRGR.R.G.R", "GBGRRGBBBRR.GBB.BB.B.RGBB.R.R..BGRBGGRG..GBRB", "RBB.BGGG.BR.GGRG...G.GRGG.GBGBBGG.BR.R.RR.BBG", "BRGBB..R.RBG.GRB.GR.BGGRRBG.BGB.BG.RRRGRRGR.R", "RBBBG.RGB..BGGRRBG..B.RBR..BG.GBBBRRBBB.RR..B", "RG.G.RRGBRRG..G.BRB...B.B.GR..GGR.RB.G.RB.GGR", "B..BGRGRGRGR.RBRGB.RGRRBRGRRG.RGBBBR.GGGRBGRR", "RR.BGRGR.GRBBGRRRRRGGR.RRGG.G..BGBRRGBB.B.BGR", "R.RB..GRBGBRGRBRB.GRG..BG..RRGRGBBBBGBR.R.B.R", "G.R.R.R.GGBG..GRR.RRBBRBR.RGR.BBGGGB..RBG..G.", "RBGBRB..GR.GR..GRRGRBRGG.R.BRGRBB.B..RRGGRR.B", ".BG..RRGG.BB..RG..GGBB.RB..RGGG.RBRG.GBRG.R.B", "RGBBRR...GRRRG....R.R.BBGR..GG.GGBR.BGGBGBGRG", "RR..G.BRRB.GRGR.G.RBGGRR.BB..RGBRBGRGBG.B.RG.", ".R..BGR.BR...BGRR.GBRRBRR.BGB..RRBR.B.GRBGR.B", ".RGB.RR.RRB.R.BRBRGR.RGRGBB.BR.BGRR....RBG.B.", "RBGGGGBGBRBB.BRBBRBB.GBBBBBGBGBG.BBBBGBB..GBR", "GG.RGRBR.GRBGBRBRG.GRGBGGBGRRR.GBGGBBRGBBBGG.", ".R.GBB.BRR.BBBRGG.GGRGRRRRB.BGR..GBRGR...R.RB", "BRB.BB.R.BGBG.GB.RB.BRBGGRB.BBGB..BRRRR.BGBGB", ".R.BBGG...BGRGRG.RGRBGB.GBG.B...BBRRG.R.RRBBR", "BBRBRBRBGBB.GB..BB..G.BG..BBRB.GBGRBB.GBBR.BG", "R.RR.R.GGBGGBGR.GRRBRR.BBG..GB..GRGR..GRB.R.G", ".GRRBRR.RRR.GB.G.RBBBB...GRRGRGR.BRB.GBGG.G..", ".BRB.BRRBBBRB.RGR.GB..G.BGRB.RBRGG.GGBR.GG.BR", "RRR.RBBRG.BRBRGRRR..BGGG.B.GGG.....RRR.BRBR.G", "R.GGBRGGRRRRBR.RR.RRGGBRGBBBRBGGG.R..GGRGB.GB", ".BG.RRBGRB.G.B..RGGRB.BRG.GR.G.RGB.GRBRRRGRG."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1030;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> picture = {"GRBRRG...GGB..BG.BB.BRGBRGBRG..GBR..GRRBGRG.B", "RGGRBGGR.BRR.GB.BG.GRG.R.GGB.RGRB.BBB..GBRGG.", "R.GB.RRB..BBBBBRBBGB.GGGGGBGR.GG.BG..RRGRBG.R", "BBBRBB.RBRBRG...BBRG.BGBBRBBBBRGGBRGBR.BG..RR", "R.BRBBRBGG.RG.RB.RG..GG.RGRBGRRGRB.RGRRBBBGRB", "BBG..B.BBBBG..RGBBGBBGRGGRGR.G.R.R.GBR.RR.GRR", "G.R.RRRGBBGBRB.G.G.BB.GB..BRRRGRGRR.GG.BBRRRR", ".GR.GGRG...BRR.R.G.BB.GB.R.GB..RBBB.GBBGGGBGG", ".GRG.B.RBGBBBGRRGGBGG.BRGGRBR.B.GRB.B.GG.GRG.", "RBBBRRBGBBBBRRGB.G.BBBBGG.GB.GG.BRB..BRGB.BR.", "GBG...BG.BRBBB...G.RG...RGGRGGBB.BRG.R.RG.BGR", ".RG..R.G..GRGR....RBRRR.RRRRRGR...RBRGBBB.RBG", "BR.BBBG.BRG.GR.BBRGR.BRRBRBRG..RGRGRGR.RGGRBG", "B.BBGG.RBRBR.G..B..GRBGGRRB.RRR.RRBBBRBR.RBB.", "GR.R.BRGGRBBGB.RBG..B.GBBGRR..GG.RRRR.B.BGGRG", "B.GB.GR..RB..BGRRBRGBBR.RBBRGBGBGGGG.BBB..GG.", "B..RRBRR.BRBGBGRRRGRB.BGR...BBRGGBRR...BR.BR.", "GR.GG..GBBB..BB.BBGRR.R..G..G.GBB.R..RRBG.RGG", "G.RRBRB.B.GG.GB.RRR.G..RR..B.RRGG.GGBBBB.GBBB", "BGB.GBRGBRRBGRGGRGBGRGBB.BRRRRRRBBR.G.G..G.RR", ".R.BRGRBRGR.BGRRBGRBB.B...RBGRGRBGR.BG.BGG.GR", "RRGR.GBRBBBGGRRGGR.GG.GRRBRBRB.RRR.BGGRR..RRB", "GBRG.RGRRGGBGGB..BRRBG.RRGRR.R.R..GGG...B.BGR", "...B.GGRGB.B.GBR.R.RBRG..RRGGB.B.RBGBGBBGB.GG", ".B.R..GGGBBBRB.GG.BBBBRGR.B...R.GGBRGGBB.RGRR", "BGBGGB..R.GG..BR.RGGBG.BG.RR.GRBGRGGRGG......", "R...R.BGBB.GGG.R.BR.R.GBB..RGGBRR..RBR.BRGRRR", "..BRRBGRB...RGG.GRR.GRRRBRBRR...G.R..G.RRRB..", "BRBRBGB..RB.B.GRBBGGRB..B.RG.BRG.RRGB.GB.GRR.", "B..G.BR.RBGB.RB.GGGR...GRBR.GBGRGGBGR..RBR.BG", "..GRGG.RGBRG.RGBGB.R.BGBBRGBB.RRRG.BBBGBBBBRR", "GRBRRB..G.RG..R.GRGGRRR.BB..RGGR.BRRGR.B..GG.", "BRBB...B.G...B.RGBG.G.RBRBBG.GRBRGBBR.GB.RRBG", ".GGRBG.BBBB...RGBR.BGRBG...BB.BGBGBGBBRGR.RR.", "BRG.GB.BGR.B.G..BB....GBRR.BR.GGBGGGGB.BRG.GG", "R.GGGRG.RGBRGGGBGB.RG.G.BRR.RG.BGGBB.GBG..BRG", "B.R.B.RRBBGB.G..GRR..R.GB.BGBBGRBRGRR.GGB.GB.", ".BGBBB.GRGRGRGRBGRBBGR.RBBGBBRGG.GBG.G....GGB", "B..R..B.R.RBGRB.GGR..GGB.R.GBRG..RBGGR.G.BGGG", "BR.RG.BGRGBRB.GBBBBB.R.GGBRRRRGBGBRBBBGR...GR", ".R.BBB.BBGB.BB.RBRGRGRRGGGRBGGGRBBGGBBRGBGBGR", ".BR.BRBBGGB..RGGR..G..R.RBGRR.GG.RBB.BRGRRRRR", "G.R.G.B...B.BRBB.BRRRBG..BR..BGB.RBRG...RRRRG", "RRRBB.G..RG.GGGRG.G...RGBGGRGBG.RGR.RB.BGRGGR", "G.RGGB.G.RRBBR.RGRBR...RB.B.BRG.B.G.BB.BR.BBR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1028;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> picture = {"..GBBR.BGGGR.GRGBRRGGB.R.GBGRRG.G..RB.GGB.RBRGBGRR", "RG.G...GBRRGB.BGG...G.RBGR.GGBBG..BRG.RGRBR.GRRRB.", "BR..G..RGBRRGBBRRR.GBG..RGG.BB...BBGRGBBRG.GRBGGRR", "RG.RG.BGRR.GGBRBG.BR.R.RRBRBBGBGGG..BGRGGGBBRGBRBG", ".B..R.R.BRRBBBBB.BG.G.R..B..RRGGGBR.BGRBBBBGBRBR.R", "BG.GBGRBGG..BG..BRG.R.RGB..GB..BGGRR.GGB.GGGB.B..B", "BBR.BGGR.G.GGGG..GGBRGRGBB..R.GGB.BBG...G.B..R.R.R", "R.RBRGBBBBRGGG.BRB.B.BGRRB.GGRG.BBRRB.G.BRB..BBBB.", "GRBRBB..GGRRGG.GGGB..RBR..GGBGBGGBRBRB.R.GRR..RBB.", "...GGGRRR.RRGBGBRRGBGBR.RB.BGGBGGGRR..G.GG.GBRBBRG", ".GB..R.BR.R.G.RGGBGB.RB..BGR.G.BGBRGBRGGR.G.R.R.BR", "RGGGB.G..RB.BRGBG.BB..B.RGBBR.BR.BB..RGRBRR..RG...", "GGRRG.BR.RBBRBGGBBRR..GRBB.B.R.B.B.RR.R.GBR.GBG..R", "GB.GRGGB..RGGBBR.RRBG.BG.RRG..GBBGRRBRGR.BGRGG.R..", "GGBRB.GGBGB.R.R.BBR.RRR.B.GRBGGRR.RGGG.BBG.R....GR", "RGG.B.BB.GRR.G.RRRRRG.BGRRRBRR.RGGBBG.BB.B.G.GB..B", "B.G...GRRRBGBBBG.B.GBR..RBG.GRR..BRGGGGRBBRRBGGG..", "..BR.G.B...R.BRRRRBRBRB..RRBRRBG.RBR...GRG.BBG.R.B", "B.R.GBBG.G..RBRRRRGGRRRBGGRGBRB.B..GBRRR.RB.GGG.BG", "B.RBRRBGG.B.BR.R..G...BGRB..RBB...GRGBBRG.G.RBRBRB", "RRBBRB...GGRGGGGGBGGGBG..GR.R.RRRGR.B..B.RB.BGRRBR", "R.GG.RRBBGBBBBRRG.G.BGRBB.RB.RB.R.GRG.GRRGGBGGRRRR", "BGRRGGBG.B.B.BG.RBRB.B.RG.BBRR.R..RGGGGGGG.BRGRR.G", "..GRGRRBRBRGRGR...GGRRBBRGBG..GBBRR.GR..BGBBRG.RBR", "RRG.BBR.G..RBGRBBG..BB.RBRGRRGGRBGBBB.GG...RRBBGGG", "BRGBG.R.RGGRGBRGGR.BGBBBRGRR.RRRB.GGRBBR..RG.G..RR", "G.RGG..BGRRR..RGB.GG.RG.G.GBRRGRB.BRB..B.RG.BBGGRG", "G.BGRBB.GRGR..RBBRRBBB..B.RRBBR.GBR.B.RG.RR.GRBRGB", "RB.RRGBBG...G.GB.BBRGR.BGBB..GRGGB.G..RGBRBRBRR.RG", "G.GRR.RRG.G.GB.B..RGR.BBBG.RB..RRG.GBGGBGGBR.GRBGR", "GGRBRRBRBRBRRGBBRGR.BG..R..R.GRRGBRRGRRBGGRBGBG..B", "B..GRR.GGBBGGBBBR..RGRGGRRGGGBRR.RRB..GBGBB.G.R.GR", "GGRGRGRBGG.GRRG.G.GR..GBBRRGRGGRR.GG.BRGBR.G..GGGB", "..BGBRBG.RBB.GBGRRBBRG.RGRBRB.BRBGRBRGRRGBRGB.GB.B", "RBR.RRRB.R.GGB.GR.R.G.BGR.BR..G.B..BBGGRBGBRBB.GRR", ".R.BRBBBGBGGRRRBB.RRG..RBBBB.BBGRGG.RB.RG.G.RGGBRR", ".RRRGBBGRRGB.RGR.GB..GBR.RRGGRRR.BBGG.R..RRR.R..G.", ".GGG.BR.RB.GRRGGBGGR.BRRB.RB.BRBGGRG..B.RGRG.RBBGR", "GBRBBBR..BRB.BGRG...R.R.BBGRR..GR.BRR.R..BGR...R.B", "RRGGB.GBG..BBR.GGBRRG.RG.BRRBBBBRRBB.RG...BGBGR.RR", ".GGBRBGBGBGBB..R.BB.GGG.RR.GB.B..BRGGR.RRGGBBBRRB.", ".BGG.RGRRR...R.BBG.GBGG.B.GG..R.RBGBRRGB.BG.B.GRRB", "G.RGGB.BR.RRRR.GBGBGB.RBBGGGRRGGRGG..GB.BB.GRG.RRG", "..GBGB.R.BGRRGBGGRRBR.GRBR.RRGBGGRGGGGBRRBGGBBBRGR", "BBRBGBGBGGRBBGGR.BBG.RGGGR.GRGB.GBG.RGG.GRBBGG...R", "GGGGGGRR.GBGGBBGBBBGRRGRBRGBRRRBG..BGG.GBB.BGR.GG."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1187;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> picture = {"GGGGGG", "GBBBBB", "G.....", "G.....", "G....."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> picture = {"RGR", "GBB", "BGG", "GGG", "BGB", "GRR", "RGB", "RRR", "BBB", "GGG", "BGG", "RGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> picture = {"...B..", ".BRBRR", ".B.B.."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> picture = {".BB."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> picture = {"G.GGGGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> picture = {"BBRGRBB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> picture = {"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 100;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> picture = {"G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> picture = {".BB", "B.B", ".B."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> picture = {"GGG", "BG."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> picture = {"GG", "GG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> picture = {"B.G", "..."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> picture = {"..R.", ".GRG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> picture = {"RRRR.....RRRRRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> picture = {"R.R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> picture = {"GG", "BB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> picture = {"RRGGGRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> picture = {"G.", ".."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> picture = {"B", "B", "G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> picture = {"G", "G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> picture = {".R.R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> picture = {"..B.", "..B."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> picture = {"RRRGRRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> picture = {"BBB", "BBB", "GGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> picture = {"GG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> picture = {"R.R", "..."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> picture = {"GBRBBBR", "BRGGRBB", "BRGGRBG", "BRGGRBR", "BRBRGBB", "BBBBBBG", "GGGRRBG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> picture = {"GBRGBGGBRBGG.BBGR", "B..BBBG.RRBRR..BR", ".GGRRRGBGB.RBBGB.", "G.BB...GBG.GR.GB.", ".RRRG.G.GRGBGGRGR", "GRRGRBGBB.BRR.GG.", ".GB.RRGBGBGBR..RR", "BGBBBBBB.RBBRGRGB", "G..RR..BB.R.G..RR", "R.BGRB.GG.BRGGGGB", "G.R.GB..RBBBGR.BR", "RRBGGRR...GBGGBG.", "G.RG.G.GRRRB..BGG", "GRBRR.R.BBBGBRRGB", "BRGBR...RRRG.R.RR", "RB.BG.RGG.GRG.RGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 157;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> picture = {"GGGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> picture = {"B....", ".GRG.", "GRGG.", ".BBB.", "....G", "....G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> picture = {"GBGRG", "RGBGR", "GRGBG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> picture = {"RRG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> picture = {"..GGGGG.."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> picture = {"GGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> picture = {"G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.GRG.B.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.GBGGGBGRG.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.GBG.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.", "G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 593;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> picture = {".....G.", ".....G.", ".....G.", ".....G.", ".....G."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> picture = {"GGG", "BGB", "GGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> picture = {"RBRBRBRB", "GGGGBGGR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> picture = {"R", "G", "R", "G", "R", ".", ".", "G", "G", "R", ".", "B", "G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> picture = {"GR", "BG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> picture = {"GGG", "G.G", "GGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> picture = {"GGG", "GGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> picture = {"RRRGRGR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> picture = {"BR", "G.", "BR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> picture = {"..R.", "..BG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> picture = {"RBR", "BBB", "RGB", "BGG", "GGG", "BBR", "BGR", "RGB", "BGR", "RGG", "BGG", "RGB"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> picture = {"RGR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> picture = {"RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR", "RBRBRB..GGGRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 110;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> picture = {"G", "G", "G", "G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> picture = {"RG", ".B"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> picture = {"GR.R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> picture = {"RB.GG", ".RBGG", ".BRB.", "..BRB", "GG.BR", "GG..B", "R....", "B....", "RR..."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> picture = {".R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> picture = {};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1247;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> picture = {"RG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> picture = {"G", "G", "G"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> picture = {"RBRGRRRRBBBGRGGRGGRBRG.BRBBGRGRR.RGRB.RRR.RRRG.B.R", "GGRRRRBBRR.GRGBRBRRBBRRBGRGGGRBGGBRBBRB.RRR.GRGGR.", "RGRRRRBGGRR.GGRRRR.BBG.RRRGBRBBG.RRRRGRRBBGGG.BRGG", "RGGRGRRRRRBRRBGRGRBRRBGRR..BRB..RRBRBBGBG.BGRGGRBR", "RRGBGRGRBRRGRBBBGGR.RBBG.B.RGBRR..RBBBRRGBBBRBBGRR", "BGBBBRGGBRRRR.GRBRRBGG.GG.RGGBRGBGBGRBRBGBRBRGRBGG", "R.RRRRG.RGRRBGGBRRGRRBBGGGBBBBGRGBBBRG.RRRGB.BRRBG", "GRG.BBRRBRRGRGGGBRRBB.RRGGRRRGGRGRBRBBRBRGRRRB.BRG", "RRGGB.GGBRBRR.R.GBGGGBRBGG.RRRGGBBRRRRRBGRBGGRBBBR", "GRRR..RRRRGGGRR.GRRRB.RG.RRGB.GBGGRRRR.GBBGRBRGGRR", "BRRBRGRGRGG.RBRRRRRR.BBBRGB.R.BBRGRBBRBGR.GGRBGGRG", "BB.GBBRGRRBGRBRRBGRRRR.BGBGRBRRGBGRRRBG.RB.RRG.GRG", "GGBRRRRRGRRGR.GGGRRBGRR.GRRGRBRRG.BBBBGRGBBGGBBGGR", "..RBR.RGBRGRRRRGBRR..RRGRBBGRRRRBRBGRRR.G.GBGGRBBR", "RRRRRBRRRB.BRB.GG.R.RRRR.RRGB.GGB.BBRB.GGBGRGGRRGR", "RGRRRG.RGRBGRGRBB.BGBGRGRRG.BBRBG.RGRBGBBRGBRBBGGB", "GRBRGRGBR.RBRBBRB.RG..RBBRGBRBGGGGBGBGGGBGGG..GRR.", ".GGRRGGGGRRGRRRRRGGGRRRRRRBGRGRB.GBBBGGGGRGBGGGGBR", "BBGGRGGRRGGBGBGGBGRGRBRGRGRGRRBRBBGGGGGGRRBGBBGR.R", "RRGGBGGRBGGBRRRGRGRGRRRGRBBRR.RR.RGBBBRRRBBGR.RGGG", "R.RBBGR.RRGGGRRRBBBGR.B.RRGRRGRRRBBGRRGRRGBRRRR.GR", "GR.BGG.BRRRRRRBG.BGBGBGRR.RRRBGBGBBR.GRGGRBGGBGRR.", "GBRRRRGBRGBRBGRRBRGR.RGB..G.R.RR.G.GRR.GGRRBBR.G.B", "R.RBBRGR.RRRBRBRRRRRRRGG.GGGRGBGBGGRGRG.RGRRGRGGGR", ".G..RGG.BGGRGGRR.GRGRRGGRGGRRGBGGBRGBRBRRRBBRRGBBR", "R.GGRBRBBRGGBBBGGRRGRGRGGRRGBRRGRRGGGBRRGRB.BGRGRG", "GRG.GGRBRBBGRBGRR.GBBGGRGBGBGBGR..BRBGRBGGGRRRRRB.", ".GG.RGRRR.GRGRGGBRRRRBRGBRRRRRGGGGRBGGGGGRRR.G.BRB", "BBR.BRGGGRGGRBRRRRR.RR.BRBRGB.BRRBBGRR.RRRGBGRRR.B", ".RRRGBRGRRRBBRRRBRRRRGGRRGBBG.RGBBBB.RRBRBRRBRGBRB", "GGGBGRRBGRGR.GGBBGBBRRB.GRGRRRGRRRRG.RGRRRRRGG.GB.", "RBGRG..BRBGBGBBRRBGRGG.BBGRBGRBGBGRG.GGRGGG.BGGRRB", "BBGG.G.RRRRGRBR.R.RRRRGGGGRBGGGR.GBGRG.RBGRBBBRR.B", "R.G.RRGGBRBGRGRBGRRRGBRRBR.RRRRGBBGGBB.GRBG.RBBBGR", "BG.BGRBBG.RRRRG.RRRBBRGGRBRRR.GRB.GGRRG.RBGRGGRRRB", ".BBRBRGBGGGGBRGG.RRRGBRBBGRBGRBGGGGGBRRRRGGRRGGRRG", "RRRGBRG..BRRGBBBRGBRBRGGBRBGB.RRRG.R.GR.RRGRRGGBGG", "GGGRBBRBB.GBGBGRBGGRBBGRBGGG.GRRBRRGGGGBGRR.GGBRGR", "RGRGRRRGR.GRRRRRRBGGBRRRB.RGRBRR.G.GBGBBRRRR.RBGBR", "RRRR.GGGBGRGGRRRRRBRBR.RRR.RG.BRG.GGRRB.GGRBRRRRRR", "RGBGGRBGG.RBRRBBR.RBGGBB.GBG.GRRRGGBBR.GRRGGRRGRBB", "RGR.B.GRBRRGRGRGGRRRBR.RRBRRRRRRRRRG.GRGRGGGRRBB.B", "GRGBBGGRRGBBR.GGGRGRG.GBRBRB..RRRG.BBBBRRRRGGRG.RG", ".GRRBBR.GRRRGBBRRBGRGGGBRRRGRGRBBRRRGRRGBGGRG.BGGB", "GGRRRRBG.GRGR.RGGR.RG.RGBBG.GGGBRGGGRRGBRGRRRGGRGR", ".RBBRGRG..BRGRRBRRBBBGGBG.GRRRRRGRRBGBRR.GGBBB.RBR", "BB..BG.GBBRRGRRRBRRRBRGRRGR.RRGRBBGRBGBRGBRGBRBRBG", "GGBRRBRGBBRGBRGRBRGGRRRGRBGGGB.RRBRRRGBGRRRBRGGGGB", "GGRRRRBBRBGGRGBGRRGBRRRRGBBGRGGB.BRRBGRRRBGGGRRRBB", "GG.BBRRGGRG..RGRGRGRGGGRRG.R.G.R.BGBRGBRBRRGRBBRBR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 1204;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> picture = {"G..B...", ".B.R.R.", ".B.B..."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> picture = {"RGRGGGGGG", "GRGRGGGGG", "BBRGGGGRG", "GGGGGGGGG", "RRRRBRRRR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> picture = {"RR.RR", "RR.RR", "GG.GG", "GG.GG", ".....", "GG.GG", "GG.GG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> picture = {"GR"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> picture = {"BBBBB", "BBGGG", "BBGGG", "BBGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> picture = {"R..R..R"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> picture = {"GGGGG", "GGGGG", "GGGGG", "GGGGG", "GGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> picture = {"GGGGG", "GGGGG", "GGGGG"};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> picture = {".G.", "RGR", ".G."};
    ColoredStrokes* pObj = new ColoredStrokes();
    clock_t start = clock();
    int result = pObj->getLeast(picture);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22263204&rd=14425&pm=11306
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
class ColoredStrokes {
public:
  int getLeast(vector <string>);
};
 
int ColoredStrokes::getLeast(vector <string> s) {
  int n = s.size(), m = s[0].length(), i, j, ans = 0;
  for (i=0;i<n;i++)
    for (j=0;j<m;j++)
      if (s[i][j] == 'R' || s[i][j] == 'G')
        if (j == 0) ans++; else
        if (s[i][j-1] == 'B' || s[i][j-1] == '.') ans++;
  for (j=0;j<m;j++)
    for (i=0;i<n;i++)
      if (s[i][j] == 'B' || s[i][j] == 'G')
        if (i == 0) ans++; else
        if (s[i-1][j] == 'R' || s[i-1][j] == '.') ans++;
  return ans;
}
 
 
//Powered by [KawigiEdit] 2.0!

********************************************************************************
*******************************************************************************/