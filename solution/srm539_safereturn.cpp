/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11805
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class SafeReturn {
public:
    int minRisk(int N, vector<string> streets);
};

int SafeReturn::minRisk(int N, vector<string> streets) {
    int ret;
    return ret;
}


int test0() {
    int N = 3;
    vector<string> streets = {"-234", "2---", "3---", "4---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    int N = 2;
    vector<string> streets = {"-12", "1-1", "21-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    int N = 3;
    vector<string> streets = {"-----7", "--1---", "-1-5--", "--5-1-", "---1-3", "7---3-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    int N = 2;
    vector<string> streets = {"-11", "1-1", "11-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    int N = 49;
    vector<string> streets = {"-2856935949296363317296813947187981785927784463848", "2-751231576449966852481499753571157837382384523139", "87-95652334996559687197545792475478858551432853657", "559-6636992228434959593387784772921281748452833362", "6156-914479312256161975832213195958412992619811252", "92669-22433753466579789528319258138374484275441928", "335312-8885129213115875849151222631857952239511567", "5126428-522447348188687362778975831721572759128194", "95394485-38917974538294224258733169533722954864687", "473973823-4663678769262785952192787354219597891522", "9642935284-143767681957817496887421269931833279462", "24923714961-27996648936152261527228859116675586266", "949215241642-3623362798284594661952816726734473231", "6968239773373-422376668568767147911714747187774272", "39542423967964-56465852822112642166169797832938851", "665356147769225-3634115923668176844317244713156943", "3694663848763263-652928788628515673983995426413412", "38691511576633466-76776955516462349259268236948337", "158567183684676357-2573315977519318715966523294599", "7279195889182654262-166527965667387857714787879213", "24159786229976819751-76822943652136777792838634946", "989978789653965127767-9431641738999522169578669822", "6173595742768825863669-849358782743411758559484716", "84538583278125897935848-78443988213527845991958941", "194832462815862285122347-6336787473412167454189219", "3957289245724823855721986-883293163291617249249553", "97772317294257166599963438-61447236983369777199716", "459811575596961621764454386-1611133512429168217919", "7324391882614728867531836311-545752594495455199195", "15471229718561615456677972465-68477972723457876794", "877795273982644716165388894146-2375755134414937736", "7152582532771726529728287371582-396137285235921951", "91499168174299186333197241217433-28572925989494629", "857253336822516474183941763357792-1613287111318734", "1781881197182164398769333363275681-443228614122323", "78824387532887139278754542955971564-39293516247758", "835817523565116185157212198197537143-8883714676844", "5781247134996497395772172132425723398-619736262769", "93579495729177729297717816344712922286-23719739732", "285498572131249496619654616292382829812-4813149595", "7218242229166774586429857799534557833934-614524989", "73446227958671874257855942714442916577786-14376843", "883517355937383123283759547655138111131111-6534799", "4422959947354723663788914978574591464693446-961386", "45888451882547914928664912121899431262715359-35994", "625314126978773514973685849197329124763427363-5924", "3333111841963486384949489997967148276299464155-319", "81632951654222894352987925791779673787759873993-76", "435652698266375413914214151199352325463984989217-2", "8972287472261213279362619369546194384925939644962-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    int N = 49;
    vector<string> streets = {"-8569549294123477164129244677119551784129969818723", "8-487889132629712679676317928485773971734656439789", "54-38214629758856785666677411787797928931461518215", "683-7342864853816832126961383718689519717634642774", "9787-497789562755595215613437391574913273243979782", "58234-11274128846555558827811159111816453697661698", "481491-8246875385662827342164687387399439941398227", "9942718-276451533756869813545773576861135812294259", "21687222-38977975512845412647999464357876361723151", "932687473-6413372461499241686197514423422168871167", "4294946686-752567697125244664986899632419777527919", "16785184947-67556462185455989678376127825482157981", "225562757156-7362539997474681473224179745137827443", "3983285173277-678215287385772265849511896475127251", "47887835935536-51221795623163916487194257935687962", "715154837765675-6224564115886139594251587119414312", "7266565352762816-888893799416171519584766586123337", "16785567546452228-77168822718626245266963319759174", "678395651696312287-2741136481557584397834939583849", "4952552621729514872-579176473115283434748964635944", "16612588841192758175-11737123981549591184768927762", "276215264928989696471-1795626188171538122159893338", "9666587959557754381911-667663388519356793928991524", "23696838422443617811776-22578923746656425645711163", "417612411445782192373962-9361759631168159925425989", "4771372321454535926675729-243351973145835217937564", "69434815666967184744166532-38211765539853553687898", "721831644868876811872267643-5377495894318939615754", "7813714576491236681336381385-335814521356326632725", "14773167919642911651913973233-68968635657278848233", "188195879987761372518882551736-4242111415789521378", "9578197397683569167518839117584-232864591443756447", "57765135458328455252515769748922-41963216418716293", "579871876197248914884714376916434-1697269925576272", "1379417644964974954391961355482211-126269432794845", "79959838346115125234553611585618961-17586266962964", "872111965232719586939355643923166921-8178443841931", "4189369173279141467418668594151437678-996892286556", "17972441844878257987117418833645222519-19158969343", "233175337212495866348292535155191668791-8235813474", "9417339562955677634842359538675169968698-299561618", "96462698317414915399719692593274494248122-21327946", "656349416678373181366524215327841236495392-8713332", "9614371218727559699489855739689385263285918-278227", "84569632785181641756989749666857757982985372-12479", "131476992725228125832991238134251796486162171-1464", "8982918431777774393573115775281666421693173821-399", "77277622119942933189735195877234228995346932443-97", "281789255618456137446326869523749746354714327699-2", "3954287917913122749428439484538732541634862794972-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    int N = 49;
    vector<string> streets = {"-6437215569928362221732568134511848111294937399647", "6-617242571256321969424287333969125664878372192284", "46-32437672683492428513245577234737158888549419711", "313-7566417755948133591467348887228733941714963231", "7727-626336882873913943316715214611972574993732265", "22456-82758917838994759224424772925753963367718454", "143628-2997654863884418855751933994385963184266776", "5276622-374512424315638827214243538564884774151882", "55643793-84674883894411489353664171214134931541537", "677135978-2394115666956147819829915168714337855238", "9127687442-263314566154655646251394857916476974937", "92678965632-49792667739683438358112531957626997181", "258581517964-2119295691762226297588839993153713194", "8635274244392-852198535198244649974642282786234821", "33498884813718-68586479552377611951992435245148745", "629473628119156-4782318141287383331779325633995119", "2128383435429284-397162436949659742782881558386112", "29419983865621573-59245218499947152287875454664389", "262319819666998895-9123261567977585242539676713333", "1983344546675862799-445996253128739198442392139514", "74559746491765431214-72765462981496494743714916784", "321945131553937164247-6386626669527216981132449686", "2431398816491598253526-218913364189296135894232576", "52243288416671514229732-17935258495277875679549815", "684612528458695431696811-6924456843386743979672658", "8757645797532821681656876-599396853284949818882196", "13537472386422329452469995-35262221787831438181826", "337412515143247849656213293-6897648328677225922398", "4378541439686477997326354956-112975496619792987669", "59282792682326636991963243281-62741889382377993193", "163817346255941854728665596916-7476668245356836833", "1947423349187913977819486627227-397577254956349424", "81726995193159937157451488269743-99459836947835826", "423212937191875345839289452474799-7367791883884495", "8578154815428411225967953318516797-629446778463851", "16179735218586977221422232734865436-75575852885311", "165375861653349788499197888298675627-6994251664441", "1483235448719229272846676478698797956-198655986729", "28895998179992438854791879866322874591-96479124356", "978476683115983287344837443718453947999-9428554189", "4881433444673255159231553917925461654869-456152678", "93579317934617265463718698427339987826444-53226879", "374196873372584355791397713297554875557255-9945239", "7294374417663653846242499885276673821598639-558629", "31497721589972193671942568199983884869151295-22593", "991631654579134986131434788289343868682552452-5139", "9293286115473485643969292212736954354644265825-516", "62722478529118711335765861836184848347316826515-54", "481365783338924118318871592969322951425877329315-8", "7411546278714159293446658668933465111969899939648-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    int N = 49;
    vector<string> streets = {"-1646454222473198381349514918222514189573714265936", "1-843689261599884561548842194253864652266265789867", "68-73468944153569835941277767815863629497765123659", "447-4225746531261946434688678393569288581153752549", "6334-481195975423983228176571346118964322994765274", "46424-84359685179387265788845431458785754624727843", "586288-3229885428796361316834489719315255168886498", "4985143-642637853189943275825866755771955478825913", "22971326-26248165333486567713516321178776112114263", "264495242-9153783946267741693588625486881389334461", "2146599269-983219938343795752592621593876522662139", "45159686219-92164386492881719671934921892377312519", "795378834589-3372654824623826463118468497448851396", "3931555783323-717648248126713719558434336787229694", "18524148172137-67641177575417569531794428333979469", "986627256816716-8417127695113639899763517735592429", "8491398353942778-482187464396191612291761573857759", "35899371399366644-68651981218796134821332894441764", "863488983438544186-3843143926172667563667464249544", "1156376936864817283-668816713681989255413715434294", "35942239423482111686-68913628925439164419399598951", "444326648649247285466-2139943399151168877742728326", "9814851367324877713882-636368319478212125979494424", "58261732577861564918916-97421522177875187627126876", "147878176498227968411339-6659985343881473536352759", "4278686571513655413639676-876646596186998365636672", "91765888767787413297693468-93838285681527289185277", "196774321951211191212462579-7446473337418728238327", "8478154533296373686383819637-326427947399514368175", "22833448555647561716933596843-39849932684214712445", "251943861897616399782912843423-4632776643433261542", "2353619668213999162159925686694-799427353353454142", "58851477366915586169414135244867-39485513223155864", "166615152223153913683577498724393-2433825996969715", "4439889515148819247991873653792992-714791763718576", "16629737145944772852112881639974447-49137339335335", "852868177892639692656617888343728314-2995377281554", "9298455186318443113548251617726753492-813619265296", "52453729788843457364481149543663587198-11145517576", "769825557879932163611728792198451293911-3331927771", "3671245561627687127397573878943335175313-213373269", "72719614135347375847379653275243297336132-71275147", "166592671827483379619472368211352963714317-5319221", "4553448829278735344592976598443336397951315-916159", "27177788136382958424574136123724197322593239-72492", "682562821361527954439292538361655613861277117-6971", "5932576544221992719488462658821459851577359626-952", "98652849241536447752934876231451875352572121499-39", "365474916631996256495227577274446173597764259753-3", "6799438331996499944416469277552245654661971921293-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    int N = 49;
    vector<string> streets = {"-9381316429421823175392998179697896723465684557214", "9-368499262285975946796948354257358598842512349993", "33-82834855465276758388594455826264419541625456728", "868-3316915935722415328395699364587594727371376999", "1823-995439516831493252173725628782349727942243455", "34839-62795146673269143662735615352253644991415521", "193196-8953285435213472773959256788615898924545256", "6946528-829858137913869733535596844272369825254913", "42894798-51861182445513944677445949128337236248344", "265139525-1751742847866193553167333732241335942381", "9255953911-326698758353365257661616288184687381629", "42495128873-55432979633149579554777722515314722842", "286314856525-6668556573976189865856894616121893495", "1555665811656-522763425388551463289684743328485581", "89278641176465-59214544574458581653815165835982322", "277237338493625-7263612617979232333158115329199767", "3562135722828297-165431334858952957178479879361447", "19744229487957221-98947275283381236279347191538486", "745196114457561669-5858717723786169987539641173927", "5685393357896343585-589538448861664813515133678268", "37332148583654564985-16291928766249924412417954721", "998254761653724134581-8186166279763216324882372732", "2688232936333542178968-615591459918272998361292964", "99531677913193563275216-53744272687677551485761453", "949976734964787137139815-4295829918396967678972462", "8845323343596847457816534-544853579912114149277268", "13467795652515498274915725-76494385863297747444191", "755923537557855758242694947-2788422188946925483721", "9459559573799189833886145462-948923256556244187539", "62836625416584529378724288479-84935713794845821128", "952621594665668358866757259848-3931121458399729931", "7764856657145312216169929348843-344993974836783341", "83257378936782639216279695349993-45652733297685425", "956885844317585353664618178223344-4777283634654645", "6847228493676933769493878952351454-474681842652983", "75453262172786811298922639812719674-69137198978432", "291945172382981577812177916851295776-3493172253169", "3894935282824458897346276238631327493-217611438977", "48577683321567114355439591295749726142-35811146545", "644224963481146174311295619459573883913-3282596112", "5217748971456355979524817476648433173753-196318245", "65639998236313838161483461792838268116821-41776438", "812749223381223279431868744244939349711894-3791864", "4251214565741859911372158975459674282112613-252666", "53432452293784913516932792441877666924153772-69678", "545741454482988963775796774882288557534917956-2762", "7966355482123529183842212743719354283866861292-917", "29794529336845374492779442175193469419512486679-43", "192952514824982648262365669232342483674143667614-2", "4389516341925127767812432811981155329752584682732-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    int N = 49;
    vector<string> streets = {"-7689462367252953369869328557977666365615393735157", "7-751779444935416389239299359552725286816679194357", "67-87312178287869166434977738666675983992412792743", "858-5574672319674117396483395772598225988285553633", "9175-488925456549822765861365523619481553915851396", "47354-79686377254281892446212488976676892579117441", "671787-8894223215876292834615871999822658933834611", "2924898-456835185832658353553981339836778448481691", "34169684-71621913864131255198822752451661862733161", "647728957-1477374693418297788923831867799257434249", "7482564611-946585679311869719984338287314426464737", "29234328649-31475362313564236372218876598987171552", "538157232743-7552572328167629851666858971413687833", "2579673517617-936882992929225145175828972989443587", "94865221935459-28787824565524365694971929269447327", "516745181787532-2834986266284187629755352738166541", "3694945534552682-925679328596494585577591961796159", "33118288866358789-44425431783364524125841231138785", "686128736976788324-7341214246472619491734215534774", "9967216243922274547-253517235228558388569547194629", "82437826143339896432-41393356683953336456585752229", "633969953111292872454-2326328297623169961916556398", "9946522818138246951312-564465377615997325181885937", "32948483228519523425335-77416794491298152383621444", "297864355966626623119267-8192325857725957211798718", "8973164357947956814736478-434926621585252454483497", "53733265177262525722334414-29862347594176389496876", "553961159813222898435261932-8641827189215172855118", "7985525388969544636568562498-286872131234861274193", "95675489899381314342623739862-18435629437262558565", "756728782287546896728979226481-6893232599498771944", "7262381123421557442837745621686-394115792536562532", "67656993783261665565966486388483-35796675495726733", "627917935331679282155219524273993-9985327365475811", "6558969921886549549833517177253459-127285833999536", "32924688482888975143319275511621791-11679264584527", "688287235687527572983699289832319821-3758238158264", "5635162617768815751869785549192565713-861935351861", "68995867673599935875493192122457632678-88982356769", "119859576919772594365625557133997287568-4112877163", "5628328819481292114961527265479257598184-887718457", "36429594824949279225591324318245438229918-69737698", "971817346528186363148188158766939636338186-4671924", "3925593827673998115756131492128655348522794-467846", "71758184744164417151758674482575749513387764-88134", "399551383367844693395582989575762798555713768-6762", "5423174134417376684426518365481265948167871786-827", "13763466127585351776239474811595785528714698178-77", "554394196435382458722934197196433132666659243627-4", "7733611119723771954998748768354231674193784642774-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    int N = 49;
    vector<string> streets = {"-5973538883638828823322853175619935664673293976416", "5-994982228333379786561316973598168852249386214572", "99-79899296666188896841417791262544832472691339867", "797-1747681374657813447387483743363754695211158954", "3491-279853821326466526654132678775454275412926934", "59872-11249658741849975664784789387616996562716478", "389471-4387494144166261793666695943684334588532243", "8297914-981399919661113122994364223594193968737373", "82268239-26228785575614857398977913952448795411945", "829854882-8799754578231829469349839521566318711138", "3861397168-464781449274351218399956877354425711272", "63638643274-66559573633349182927582217558695523127", "336725992966-1197327549638385136195716597777357431", "8364184989461-667321338823458923627475581485623778", "83163719777516-51179669357471512341119786128331413", "278524418585965-9491474832237967316312538356173934", "8987614954197719-135638117481429742924863465437395", "87884816554533141-43596717362883579878217465959461", "289164667747227934-6651269276926223652998318212947", "3663696158937191536-933187617627373267135683191165", "35845921622653646569-56112923677992254478595562332", "264427611373436739535-6369148242414227912485438712", "2117651341439894861366-156281357537668981165835349", "83436671883368381721131-61576738851696635246742529", "511856925254325311681656-4797561239843491617848484", "3677443279198372779729614-648198325634917328879941", "19741769342134424326912576-77695697482327356337166", "779838699618857386712487947-8524917263925872611138", "5313246489825817126738167878-778711954575781168223", "65276763933919594896623751657-88964988347583636687", "196478967492321628227453699278-1534776343679959231", "9823895479976327936772781854881-658387225742285645", "91537392989516337523945823697956-72921563977174862", "364678421358924147279135329116357-4339652567811343", "5843573339625716293324719577144824-948345436776217", "68874665958274139862226686429973939-19131219873124", "653551895271171127565269438658782341-3666717289713", "4224464421776592482747863423486719893-197843895735", "62462931453555758291499649395332563161-93947864322", "747979394655988361937183912274426543699-6899132891", "3925564386487168378582151775573532516736-136515679", "23624559734674134436541263387567954278981-77622199", "989116869129782566189864125788747631144937-8392959", "3611228858557586558355567862139277697379678-946434", "92319757477536314921548788361692187828815639-65688", "713521331112523735196334473163587177896312946-6884", "6498662711137313792128528971869541639542522656-897", "45899423912147493491373549112626832177386194688-36", "176537474372371396463142846328346412132979538893-9", "6274483358271834517522994168371523743521999484769-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    int N = 49;
    vector<string> streets = {"-5589651811143671429842647139395456266478827443473", "5-466671591337933673243875143556516721735258274492", "54-45568481186228337557681376182534827353149637498", "864-2251416676835326511888417147745359769439121474", "9652-287187996797848194991554234175248435566218394", "66522-84987173872382639572375116561724775589779436", "576588-1841111954741247965195274131739521465983523", "1181741-335183953216922797979972713599422568138763", "85441983-61244114133888513594898537167175668144796", "198188436-2915522764772175772165814712788419653692", "1116771512-357378377792246253358647776131316778651", "13169111293-32851467453268839134573457927397291587", "438797184153-3244594251827452952145368484756828886", "3766631345723-142891351595457526475357742772135666", "69287899153821-49261955231392766187154321855524349", "732397551275444-9864879175617953184133575644275852", "1385724342814299-532431744866667519253935742397739", "46338372173458285-89427259491154331841991421127796", "273248413676996638-2266948612263387542244666939245", "9376821634774114292-652514793199964216854815133833", "82551629877423984426-97397344838726878645587667453", "445193428795555732659-5677695163421537571289329288", "2371497282231159176275-488226676784486673255612113", "68689597512285217295364-66844291595728983412858233", "478897691746293745419786-8623418196395491947868288", "7518125735687515498477868-431547324225547134424447", "11345319572844368467362864-14956848324679849251512", "347157979753559169194924231-7177895319812442536274", "9367455942392727612345643147-364367315932968153237", "35112129813195796121816245913-35331626499377229761", "958431779653526565693679145763-6288278373597723875", "5627464285842663743983618767456-861874129734588264", "45571517586514115339747513883328-66519996674685852", "513476313147478813862289924963866-4681916272591951", "6645511374735574917461456485718164-197779335799888", "27832775177433112852854732333628561-12429493213285", "622542396175655354417382922112771891-5717269252799", "6179849972678743312687685549568491725-979215331922", "47374754171947359928656945689431997479-85257654923", "735637227832842739454778947139729172178-7597112992", "8539551258174215514451331792293966997957-637343861", "82145545643377867468522491849357623422256-42867625", "254368666119575442618851434467937739615934-9527166", "7899695889676254216579527492877442539577729-715594", "42612791167281523191636884251275657223613857-63273", "473217834579232792336215625352288991535146216-9277", "3471893843818545779379288416393851932142377539-771", "44443457766586387728421224522782898279998615227-52", "799793269958864539435813841736765588922962697775-2", "3284463362176692965338338724715421859232156437122-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    int N = 49;
    vector<string> streets = {"-1317236959855214242372654385581573223224148649223", "1-982835838729847752312919393624754373148318545921", "39-59289152922273946123919471835253153593125686729", "185-8418288749521829639912147438485276587529196995", "7298-425165174617187662576547479298238785391817414", "28244-23557159885922579848389448184667667191326658", "338122-7563223372427948993744441913882513887781939", "6598537-254958162866623542454966493622195229141534", "98121552-62538175189182747596418753397114664429654", "535865656-7216367386288122947225556496925599139338", "9828573427-615328451271164696137252251126994389786", "87971129526-85824564898763557778267928339691281477", "522475253118-4773814741483843886372725641299797675", "5929493886554-555269878978479621666245434412894941", "28256831133875-35335924127585648385327436627251956", "147218767622753-7769436693961811752837499324239918", "4731752257843557-142487894312376315923174254839286", "27981948134582371-38236596812926889324779484386595", "454282268856163643-8245396846954343336752463275165", "2269727696144959288-218911834739864268548713311643", "33166596122878944222-29124376448255814197532773832", "712367428879472383412-6174941377238776819718463956", "2239298328181846765896-986784277633317637219781637", "69995895711749168539119-42469533666577635196449425", "511174944266872999912784-6917547621355838299464378", "4992683272433873466144626-794976496455173648247966", "33415374596584593888397497-14648512322355943754539", "897448459495478611437486191-5996328724318793542357", "5317794467673951226461497445-891633539658212357277", "56844449421786683997432559698-65698246834726312195", "823374461237824172534773474996-3827954738617774833", "1458981685786181664987737686153-167946395725429873", "57242194752236373838226664536681-81176956693865935", "755898195556768518465336291239268-4147833871476778", "3435843336272652593458361628387714-341691981238322", "23122686342972389332873534375299113-59814997613671", "275736829952242322361717552234547445-8767619851693", "3336872276185577346846775524964667198-816516118293", "21557651191364441775186681336873986878-64173441284", "249886191223433977549133375153395391616-8441227411", "4837573545691469492879758358848563147648-479728246", "13153182659624632447572126972767689965144-44827367", "412299826999912258613119944912129789117474-7611992", "8859117949419274443328969833267531179631947-792693", "65618371413278228323747442753374842681427867-51348", "448912842388995338717684645451726731514222195-7756", "9566761199917419965133194742724956831817871217-126", "29794695637469992516896439532188973662242396371-64", "222915335387745189643532763579373727998146994526-4", "3195489448675168655326758697753358213341672386644-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    int N = 49;
    vector<string> streets = {"-6367129571592962357745997471934346493787325119363", "6-328788281433224517391896464244592226422474222397", "33-77577644815424864219743241952844977528827192384", "627-4281558158453444655155335799743846247782691743", "7874-892848465768777971121276829132556794416148726", "17528-26633174767778955633664558531376561221782622", "287892-2377473875397716955524359591487791986455367", "9871262-149921244635219392479855759544173777712959", "52658631-93958688943368245555122758743622899195254", "784543749-6614515777966616553243636343825472821185", "1148837936-651365778575289221888142951563117267717", "54814149966-83957834128532888697146115926988518353", "931567725158-5354731452816985121342474955944541871", "2358543184135-756521359498363873929135725291139876", "92447782653937-11371166433627957554295384333328217", "622566748165551-4797336824855276872441442226742571", "2443875485574614-682653174953816359739741362692796", "35847736977875376-48789683331961137443842898836111", "516477934773327984-7533279359197912913774446951527", "7744787537841117287-251662813651168258862756363935", "73269972395143136752-11112966167378871389667142414", "491575116672556358351-8282331975924178158312413449", "5195156986582966393118-319226515831557547312781283", "98711693262584481626123-61824297931236185745336533", "994523594183193278761816-8652518238485227217382887", "7635135256926834439222918-252966894722161862584857", "44232654552893689338932862-43173294165326976392518", "764376275528862553516322554-7363997928476866544449", "1415644953185375319361642237-389396462523416597597", "92978538128618928916195259133-62793853775415437552", "345925552489275716956719167686-2918898211412843517", "4429989523871376617175578633922-134686234695452813", "35871557761139583191398928293791-78719914631916724", "494433955344425753167233399999137-3658644974758664", "6243211986262942972884118447638483-762212391821862", "42985345739141247492815247194886767-34173823234264", "927457844451739434157753826265981563-6529992511993", "3676667433154551933818765258238698246-319419846311", "74527571685997347878315121345722962153-24816255934", "822496972262528444768548262727131417212-1114883519", "7287411325365542124298757166351444239941-754511674", "34874297841992323847633728984446693894817-48765558", "272812879718493269456114167611193792911154-8953199", "5472616792784136286672257266652514132964488-838156", "12161747182551376893147335355484978258285798-77328", "129948519261432493564183889493451523145816537-1186", "9221825251781982261323162424773268141653153871-443", "33377639217388257159442588545558768293956511314-28", "698422655815771791231483851495112666913175952842-9", "3743627945731671617549337789727344243149489686389-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    int N = 48;
    vector<string> streets = {"-4---35-3-43-44--3--24--4198-22-2---269-------7-9", "4-42--------4-6458976142-7-8-22--------385-8237-9", "-4--33-9918-6---48-9-9--133-4--6----9-2426----912", "-2--43-93-3---9-2-4-5--75--36-1--2--466-197121---", "--34-4-83929-2--4-3-8-18--1---5-3-4-79225--6---24", "3-334-29-48433--321-84--3---233-7-7--315-87-35---", "5----2-7-4-8--757-7---63865-45----6----472--1-1-5", "--99897--61252494---7-----374244---9312485----8--", "3-933----82---2--98-----349--9163-1-986-9-186821-", "--1-94468---87-----592--56--5-54-6-7-----9-----62", "4-8328-12--5-5279-27-1-----773--4-518----1-51-8-3", "3---9482--5---1936--64-845--42-4----99329-164-9--", "-46--3-5-8---9-7-----5-45--455-1---6683213-184865", "4---23-2-75-9----3--7---388---142-667-852123--1-9", "46-9--742-21------85-4----2---4--689-8-9851--1234", "-4----59--797----318-9-5-1-----79-322-139---6---3", "-5424374--93-------18-5-31---8-8-2--98---3-8-2-8-", "388--2--9--6-3-3--8982---89-2--66-3--8---9--2-53-", "-9-4317-8-2---81-8--6----6-2-763-9---2282-1-28-74", "-79------57---5819----6----75438--2-6231---68----", "26-588-7-9-6-7--886---94258-----6-2--73-59--74544", "419--4---2145-49-2------3--572-289-3664-2-3-68---", "-4--1-6---------5--69--2-7--7-3---61--31183-96-8-", "-2-78-3----84--5----4-2-42----67---2-----9--8-733", "4-15-38-35-453--3---23-4----94----5-2---5-5-41--7", "173---6-46-5-8-1186-5-72-----558-7-56-4--3-33--38", "9-3-1-539----82--9--8--------3-99--8---2--6------", "88-3---7--7-4-----27-5------264----111-29-2991-2-", "--46-244-5745----2-5-77-9--2-7--477--75-2--5-777-", "22---3529-325---8-74-2--45367-3-151---6-72-57-3--", "22-153-415---14---63--36-5-4-3-794--7---72--4-5--", "--6----464-414-78638-2-7-89---7-74--6-55-81-91---", "2---37--3-4--2-9-6--68----9-4197---5--443--3-4---", "---2-----6----6-2-9--9---7--7544--3----1---15-5-6", "----476-1-5--683-3-22-6-5---71---3--29---172-6526", "-------9-71-6692-----312-581----5-----344-5--6-77", "2-947--39-8967-29--6-6--26-1--76--2---2-----42--2", "6--693-18--98-8-882276-----17-----9-----2-477-628", "9-2621-26--338-1--23343--4--56-54--32--92-3-2-97-", "-34-2544---22593--81--1---22---541-4--9-77---8---", "-8215-789--91289--2-521-5--9277-3--4-227-37----1-", "-569-825-91-315-39--9-89-3---228--1----73------71", "---7-7--1--1-21---1--33-5-62---1--75-43-7--1--5-1", "-8-16---8-5613--8--6-----3-955--312--7----1-74--1", "-2-2-31-6-148--6-228769843-9-749-5--472----7--116", "-3-1-5--8---4-1-2-8-486-1--17--14-662--8---4---47", "779---182-89812--5--5--7----735--55--69---5-1--1-", "--1-2---16--6-3-837-4-83-3-27-----27-27-17--141-2", "992-4-5--23-5943--4-4--378-------66728---11167-2-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    int N = 44;
    vector<string> streets = {"----------83--68--29-953-5528-1724--5--3--4--2--8", "--6741-83181499---82-2181-1-5----2--93--5-58---91", "-6-3---454-98---351-2-76--189-----38-8---4----6--", "-73--9-98671--758-8461---77-7-62-6975-23941------", "-4----11---------741-----1--5-749---4---5-1--9-1-", "-1-9---9457---1----66965--3-943-2--------313-87-4", "----1--293-4-91-75-28-7-88--2691-95--11--8---77--", "-849192-8--73---4-972---81-97--2-4-7-9-81-4--1-56", "-358-498----67694---8---3-9-385-51-4----1--39-9--", "-146-53-----992-21---3-6973----2----946-83-372---", "88-7-7--------4--566-----89-3--1--7-----2-595---9", "3191--47----3--4----66---5-----33-63-3--8-9--7--3", "-48----369-3-148---56-77-34--329-4773131-1-----6-", "-9----9-79--1-12--9-5--4-6-39-25-68--4---7-12---9", "69-7-11-624-41--231-47-2664-28---1622-9-137-382-6", "8--5----9--482--6---2---2-4-----2376-628-----4---", "--38--7442----26-9-5--1--16----886-22566--832----", "--5-7-5--15---3-9-5-4-5625----7--1----764-8--9---", "28184--9--6--91--5-4--1-6481583-4913-899--48--3--", "92-41627--6-5---5-4-468-5149-1315--13-2----1-9---", "--26-6828--66542-4-4-4-628-7333--64------1-6-5---", "92-1-9---3-6--7----64-7852-6-74---2-31-----3-----", "517--67-----7---1518-7-6-68----98-219-642--572-9-", "386--5---6--742--6--686--49152-592-3-74--96-57--1", "-1----8839----62-26525--------1--14--1-4-5-3-588-", "5--71-81-785366-15418264----695--67-389-8-3634-2-", "5117-3--939-4-446-84--89---6-74-7-546----7-1-2---", "2-8----9-----3----1976-1--6-3-7-8--27-35-69--89--", "859759273-3--92---5-3--5-6-3-359-8--977-----75-3-", "-----46-8---3-8---8137-2-97-3--493933-8--3-6794--", "1--6739-5---22---73334--15475--75--1811257-759-6-", "7--24-12-21395--8--1--95----947-2--4-52--9----21-", "2---92--5--3---28-45--89--78-952---24325-------8-", "42-6--941---4613619-6--216--83-----64-915---8--35", "--39--5---767867--1-422-475--9------7-85-7--84---", "--87---74--37-262-31--13--42-31426---915-45---66-", "59-54----9--3-2-2--3-39--367938-447---3-4464-925-", "-38---19-4-314-65-8--1-718--7-153--9--1-291--349-", "---2--1--6--3-926792--64-9-37812298131--9-6--5666", "3--3---8----1--8669---4-4--5--2-5155----7-5-1-923", "-5-95--11828--1--4----2--8----5--5--4297--493-955", "--44-38--3--173-----1--95-76-379--7449-----4-2427", "45-111-4--59--7-884----6-3-9-------561654---91---", "-8---3--339--1--3-81635-361--67-----4---94--3--9-", "--------975--23-2-----75-3--775--88----13-93---37", "2---9871-2-7--84-9-95-275428599---4-935--21---15-", "--6--77-9-----2---3-----8--9-4-2---6246994---1-9-", "-9--1--5----6---------9-82--3-6183-6596252-9359--", "81---4-6--93-96--------1---------5----6357--7----"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    int N = 40;
    vector<string> streets = {"----364766--381-7139----175-7-7-968--32-6-----", "--6-----9-5--9-79-8------6--1-46-7--7--646-2-6", "-6--2---3742744-66------29--1718--6662-692-57-", "-----2--2-8--4-6-8--5-4-411-4-971--3-8-4--2--4", "3-2--98---8--4--8--82--33-27--2---7-9-7--5773-", "6--29-----622-1893--972-1-721-5365761631-1-4--", "4---8---4--1-236-1-8-96153-2--4-83-72-5-----1-", "7-------1--85-13-4-6-----62-91-------79132246-", "6932--41--71-9153-63-----8--937-----8-79114--7", "6-7--------93-282-2----6---5-7---15-675--4-8-5", "-54886--7----12-------7--24---4-11-6-19------2", "--2--21819--5------1--1-5-33--13---887--74-295", "3-7--2-5-3-5--1--6---4--9--3---5-2-1---4---1-6", "89444-2-9-1---54-9-4-76---123-63---7--9-7--273", "1-4--131122-15-73---26--19-----142-728-2---83-", "-7-6-86358---47-61----566158-3353-2---923----6", "796-89--32----36-284---45---226-6874--9-8778--", "1-68-314----69-12--615---71697-45783----8-2328", "38------62------8----1614-7-13-7-3--26-6-9----", "9---8-863--1-4--46---92--84--48-114997-9---8--", "---529--------2--1----6-5---6-7-545---257-58-3", "-----79-----476--519--4--3565-4-8-5-66-7-6--23", "---4-26---71-6-5--6264-------7--------836-429-", "----3-1--6-----64-1-----786--5-61--8-55-9-9647", "1-24315----59-165-4-5--7-----773--8-----28-433", "7691--368-2---91-7-8-3-8---149-414-682-1-6----", "5--127-2--43-1-5-174-5-6----9--------5-6----2-", "----722--5-332-8-6---6---1---2-48---1-727--4-3", "7114-1-99----3--291-65---49---42----8-2-3-616-", "--7----137-----32734--7579-2--84--9-3-2-2--174", "7419254-7-41-6-36--874--7---48---535-5557--61-", "-687-3-----35315-47----634-424--75-7---9-41546", "9--1-68---1---4365-158-1-1-8---7-857----7-8-2-", "67---53--11-2-2-87314----4----558-851-------56", "8-6-77---5-----278-455--8----93-58-6-7-7--3312", "--63-67---68177-43-9---8-6----57756--79463--4-", "-76-912-86-8--2---29-6---8-183---1---57-2--7-3", "3-28-6-7-717--8---67-6-5-25---5---775---25----", "2---7359759--9-99---2-85---7225----97--3--84-3", "-664-1-19---4-22--69573--162--59--74--3--1-7-8", "649----31--7-7-388--7-692--7327-7--622---11-2-", "-62-51-214-4----7-9--6--86-----4---3-5-11-7-1-", "---27--24-------72--5-49----6--18-3---8-17----", "-25-74-4-8-2128-83-88-264--41165--3-7-47------", "--7-3-16---9-73--2---2943-2-67142514----21----", "-6-4----752563-6-8--33-73--3-4-6-62-3-38------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    int N = 49;
    vector<string> streets = {"--9--27--4-3961-64--25-----5-54--35---67---47-7-52", "--7-3-645----5-9---59----617246--65-6-5522-7235---", "97--1545--1--35--9---14-----48-2-62--8--88429187-8", "----7951---3---82-44-4-25-9-9-61191--1----6-------", "-317-858--8231---85--595-9-3--5-7---236369-8--4-55", "2-598---76441-3151-73-9---3-4-7172-69-1--53----2-7", "76455---55--2-7-8--9---17-----3-8-294-8---51278--1", "-4518---9--4--32-348--5-268-449----6-8-137383----6", "-5---759---35---414469-2---598-49---5-19-34-7-33-4", "4----65---7291--3--7---74-3-5---75-359-6-3--6773--", "--1-84---7-3-1647--53---849-4----6-2-1-7--8---372-", "3--324-4323--43738--9--68-2--71--43-149-165-1-----", "9---312-59---1--7---25-477-8--2--4-8--64-1-5----9-", "653-1----1141--64-9-51---------3636436----7--7---4", "1-5--373--63---88--1-99-3-3-4--4--6---835-6---1886", "-9-8-1-2--47-68-4489--22--44-3-54359--284-7--5----", "6--2-58-43737484---9-97-573446-748-73-8-6-5--39--1", "4-9-81-31--8---4-----85824-6--47--894-32-1-1--762-", "---45--44----9-8----7--7---8-1-5497----11-1972-537", "-5-4-798475---199--------3-94343--8----135235-2399", "29---3--6-3925----7--99-71-9734984--143--8--3-7-38", "5-145---9---519-98--9---4------5--1--7----2---67--", "--4-99-5------9275--9--38519-888--75-8---4-64--9-8", "---25-1-27-64--2-87---3-297--4-9---2-3--7--5--9-3-", "---5--72-4887-3-52--7482-53821--42-5645-93-57-4-16", "-6--9--6--4-7---74-31-595-4-45-376-----9--1-8-5883", "-1-9-3-8-392--343-----1734-725-6-3-2---7--8-1-5537", "57--3---5---8--446899-9-8-7-3--93-2--928-11--53--7", "-249-4-4954---4-4--47---2423-37--5----6----7----7-", "548----48--7---36-133-84155-3-11-4--33--316----5-7", "46-65739---12----4-44-8-----71-2-7-31-422-439--326", "--21-1--4----34577539589-369-12--75-----4-2---8---", "---1778-97---6-44-4-8---47-3-----471524-----623-41", "3669-2---56443-38-9-4---263-54774---35-98--3-75---", "5521--2----3-665-878-17----2---57----6-19388------", "-----696-32-84-979----525-2---3-1---3--96-2----84-", "-6--294-55-1-3--34--1---6----31-53-3--2--9--34549-", "--813--8-914-6------47834--9-3--256---6-9----23384", "65--618-1--96-8283--3---5--26-4-4---26-2-6---969--", "75--3--1967-4-38-211-----978--2--919--2-1----2--2-", "-28-6--3---1--546-13---79----324-896-9-1-1--343623", "-28-95-733-61----1-58-4-3--1-1----3-9-6-1---8915-3", "--46-3534-85-7675-12-2---181-642--82---------6---2", "472-8-18----5----193--655---7-3--38---------561--8", "729---2376-1------753-4-781---9-6---3---38-5-72-9-", "-31---7--7---7-53-2--------5----27--429249667---2-", "758-4-8-373---1-97-276-94553---835--536-31-12--6-2", "--7--2--337---8--653-79--85--53----8439-65----6---", "5---5-----2-9-8--2393--3183-7-2-4--498-22---92---4", "2-8-57164----46-1-798-8-6377-76-1----4--3328--2-4-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    int N = 46;
    vector<string> streets = {"-1-----7-----19-3--3----3---------8--------6-7-43-", "1--5-3-73---3---1886-183-213-6-9-89-4-8-1-73-4-81-", "---4---74-794-12479-518-8285-743--3-49-4-6768-5592", "-54-75739--9--64-6-187----1----5------------79-76-", "---7---7495---3--8-6-3---49-11-9-56-3-423-7-5--41-", "-3-5----512--24----86-1-8--978-26--15--883----52-6", "---7----361-8-57-2-6--9529--5534-7-8-2343---7-----", "77737----26-5-289-9--3-99--2----71-925--2---7--79-", "-349453----82------533295-15-1--98---2-7------1-7-", "----9162---919-7845---8-----1--84521-7-----36127-9", "--7-5216---6-8--------84------716769-1565--739--41", "--99----896----44-56-8---2-2-73--486-56352257-7-9-", "-34---8521----37-4-582--------41----121--5-8-4541-", "1----2---98------89--667-4--422722-3---9---3--84--", "9-163452----3--6-6--9-728---6-9328-315---4-336--41", "--24--78-7-47-6-256-649------------768------26-75-", "314----9-8-4---2----9-35--9-37-2825--14-1--1443---", "-8768-2--4--4865--1642----575-34772--1--42-178-11-", "-89----9-5-5-9-6-1-7--------7--44-4--9----64--41--", "36-1686-5--65----67--6--52---18--67999-458-5-46914", "--58-6--3---8-9694-----5-9-1-4-8124-2--8--4-68269-", "-1173--33--826-4-2-6--1-2--3--786-282------87--936", "-88--19-288--6793----1-43---75----41--6-7---6-86-8", "-3----599-4--72-5---5-4-4-7---------79---93-1--8--", "3-8--8295-----8----5-234---464-635-7--61---4---747", "-22-4-9----2-4-----29-----9--9--455--8--2-3--84---", "-1819---1-------95-----7-9---494--8-51243--2---649", "-35--9-25--2-----7--13--4---9---352----64-92---745", "----175--1---46-357---7-6--9-----8---3------36--91", "-67-185-1--7-2--7--14-5-494---386488--36-752--7---", "--4---3---73429--3-8-7----9--3----3265-67--998-4--", "-935924--81-173-244-88--6-4--8----34-9----3-----4-", "-----6-7946--22-874-16--34-3-6---4-7-4---1479---3-", "-8--5-718574-28-27-62---55-584--4--4---6-----7-694", "893-6----268----5247424--582-833----7-----7---2492", "-----189-196-337---9-81-7----82474--5-9-2-331--576", "-44-35-2----1-16---922-7--5---6---75---8551----159", "--9---2527152-581199---9-81-3-594-----1--59----49-", "-8--4-3---561---4-----6-6-2--3-----9-1-38--34---4-", "--4-284-7-63-9-----48---1-46-66--6--8-3--4--6789-3", "-1--3832--55----14-5--7--234--7----25-8--2542-8---", "--6--3-----25-4--2-8---9-----7--1---55-42-2--82-3-", "-77-7------2------6-4--3-3-9-5-34-7319--52-26-8388", "636------375833-1145-8--4-22-29-7--3--3-4-2--4-6--", "--875-77-637--3247--6761----3-9-9--1--462-6---89--", "74-9-----19-4-6648-48----8--6-8--7-----7-8-4--2-94", "--5--5--12-758--3-462-8--4---7----2----8828-82-961", "485742-7-7--44-7-11969687-67--4--64514-9--369-9--7", "31961--97-491-45-1-193--4-449--43997594--38--96---", "--2--6---91---1----4-68-7-951----4269--3--8--417--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    int N = 45;
    vector<string> streets = {"---76-7----1------283212--9-9-6339---1---42-26-", "---6----562--2----6--926--7155545-3---5-----9--", "----8-8---417---7484----116485----9738---37--8-", "76--8--4796---12--1-779-----9--4---2--5---7---3", "6-88-24---8-1----964-6-72-2-35-6-5-939-1---42--", "----2---6---11-8-171-28--454--11-78-536-81-3-65", "7-8-4---9559-9---176-8-342751--71-77-----6866--", "---4-----31-276185-1-66-3----8-13-55-7--1-1----", "-5-7-69--1------613--3-41-3968-2--46--581--6756", "-6-9--531--7----51--92-93----9915686-3-98--4994", "-2468-51------96-9--8--6-2--12542--975836-368--", "1-1---9--7--9---3-321-6--9353-4--1---79763-3294", "--7-11-2---9---1513--1--61952-6-84-891--7197-17", "-2---197-------7---5-3-9-47------95--22-74----1", "---1---6--9----728---13-6----5---4--4-1-411---8", "---2-8-1--6-177-8483582-9------7-7--63-1555-5-1", "--7----865-35-28--5-373-11-91--1---2-347-642-14", "--4-9115119-1-84--9-1496--9---22--5-2995--8813-", "2681677-3--33--859--2-38984--1-6-8--4-2-----3-4", "8-4-4161---2-5-3-------13---67--25---3328------", "3--7-----981---5312----45---4-6291--728-7-7---4", "29-7628632--131874----6-------1-93-171-86--8-24", "12-9-8-6---6--32393--6-45224----265-2954-9-77--", "26--7-3-496--9---6814-4-6--1143--32--5--6-----8", "--1-2-4313--6-691-935-56--19946----7235-63--82-", "--1--42---2914--1-8---2-----2-94-124-------7293", "976-257-3--397---94---2-1---97-5-38-8--6-9--3-7", "-14--45-9--55---9-----419-----97-----6---1-79--", "95893-1-6-132---1--64--1929--44----99--5639--69", "-55-5--8892---5---17---44-7-4-37-3-4---48--88-9", "65---1---9546----2--61-369-943--------71----52-", "34-46171214----7126-2----457-7---4796-2-24781--", "35----13-52-8------2992----------2-46---3-98--4", "9---57---6-14947--851363-13--3-42-756--4--2---2", "-39--87548---5---5----52-28----7-7-25-----9-8--", "--729-75669-8---2----1--74--94-9452-9--68---6-9", "--3-35----7-9-46-24-772-2-8-9--66659-68---48-13", "1-8-93-7-35712-339-321953--6--------6--6848-6-4", "-5-5-6--5-89-21-49238-5-5-----72----8--5375--61", "----1---8937---175-2-84---6-541--4-6-65--84--8-", "-----8-118667745---876-66---68-23--8-83------7-", "4-3--16----314156-----9-3-913--4-----478--12139", "2-77--81--3-9-1548--7-------9--7929-4854-1-771-", "----436-64637---28---87--7-7-8-88---8----27--74", "29--2-6-7982---5-13---7-8239-851--86-6---17----", "6-8--6--59-91---13---2--29--6-2-----1-687317--3", "---3-5--64-471814-4-44-8-37-99--42-9341--9-4-3-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    int N = 47;
    vector<string> streets = {"-----2226-3-9-------4----6--8-7--2-7-8-46-68--7-3", "---29--6---3--37-2-1--8----9-71-912-3-2-1--3-2--8", "---97644---6-8--9-1-6-----2-7--9-87---9-1-1-9--1-", "-29-9----79--8-5551-4-7-11588416--3---52-3---99-8", "-979---9----6-88-12-5-8642---9-9-532-----69-68-35", "2-6-----42-9-9--93998-9967--96--4-9----2-46-7--5-", "2-4-----4--87--95--47-35----5--541-5--8-69--7---9", "264-9----71--81997-4-25-3-593-7--5----2-68-91--64", "6----44---25318--552-33---1884------56--66---583-", "---7-2-7--4--6-539-3---6-13--4---16--2--311--9981", "3--9---124------28-6-64-3-9-959---5-5--825-8--67-", "-36--98-5----246-8--4-14-1393-3265--5-7--8-8-6323", "9---6-7-3--------87--39-65---9----39---9958---1--", "--88-9-816-2------7--54-8-171--1529------7-2--7-6", "-3--8--18--4---4-12-9--3-36-8---6---1-69-67-392-5", "-7-58-99-5-6--4-789-82---999-4---285-931---473934", "--95-959-32----7-58-192122---9-8----2---28567---2", "-2-513-759888-185-2-59-9-6-76-3--------51---82-42", "--1129--5---772982-1--7--3577-82-6-------39--8---", "-1---944236-------1-----2---5524----5-24171439--7", "4-64587----4--9815-----4-3--9-9--1-4--87-5--64997", "-------23-6-35-299----946--55----21-8---8----2---", "-8-789353-4194--2-7--9--2---6-43---------44-6--9-", "----695--6-4--3-19--44----3395--26---96-91-2--44-", "---146-3--3-68--2--2-62----25-6567--2-21838----96", "6--127---1-15-39263-3-----1-6--9-11--4-538--9---7", "--25---51393-169--5----3-1-729--1877-294665-9--8-", "-9-8---98--9-7-9-77--5-32-7-6-1544--19467--9-9-59", "8-78-9538-93-18--67595695626-58----8---6-186-4--9", "-7-496--445-9--49--5---5--9-5--836-67-1---5----4-", "71-1---7--93-----3829-4-6--18---476-2-311--4--38-", "--969-5----2-1--8-24--3-59-5-8----19---541-61---9", "-9---44----6-56--------26-14-34----9-9----16--1-8", "218-5-15-1-5-2-2--6-12-67184-67---66--1----8-2--3", "-27339---65-39-8-----1---17---61-6-1-4232---33--4", "7---2-5-----9--5----4-----7-86-9961-43799--8--8-5", "-3------5-55--1-2--5-8--2--1-72----4-31-7-433-6--", "8-------62-----9-------9-429----9-433-6-9--628--5", "-295--82---7--63---28--62-94-13--12716-2---97---2", "4--2-2----8-9-91-5-47---15466-15--39--2-78--626-9", "611---66632-9---21-1-8-98367--14--2979-7-9---348-", "---364986158576-8-375-41386-1--1-------89-696-94-", "6-1-96---1--8-7-5-91--4-8-5-85--1---4----6-653-9-", "83-----9--88-2-46--4---2---96-4668-8369--96--1-4-", "--9-6771------3778-36-6--99----1--3-3276-65---2--", "-2-98---59-6--93-28942-----94----23--8-23-31---8-", "7--9----89631729----9--4------3-1--86--649--2--2-", "--1-35-63872---3-4--9-949-85-48---------8494-82--", "38-85-94-1-3-65422-77---67-99--98345-529---------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    int N = 40;
    vector<string> streets = {"--16--73-78--2-7-----3-8-9-------65548-5-4-2-", "---6718-358-3739-99-125747-5--75--9---492----", "1-----5-651-293-3---2-1--3-89-31-3-94-7-4----", "66---7797321-5-76-99-3--97-46--1--625-6222--1", "-7----1-514--8---969-3-5444-6-7--74---25-3-8-", "-1-7---4--65-4-8--5-94--81234--2-1-3-7-7---37", "78571--77----7-8873-----9--58--2-9----825-391", "3--9-47-3327-58---378-7--48-69-94--1-94-7--9-", "-3675-73-2-9--98--9-5-6-371-863--9--1---6----", "75531--32-9--8---28-99-3837---36--9-65-6361-4", "881246-2-9-364-8--696423-9-362-3--9--57-----3", "---1-5-79-3--2---99---1-537--6--7-8--1-35-64-", "-32-------6---9374--245-5-88----52----79836--", "27958475-842---83719--2---4--6--94----4-8-73-", "-33----89---9---5339-8---9--34-3-7---42---1--", "79-7-88-8-8-38--82---64--5-5--863--44-56---4-", "--36--8-----7358---8-43--5619--5--7-36572----", "-9--9-7--2-94732--58-34-8-1--1-5---81----6424", "-9-965339869-13--5--7-745-8-963-4-6-----42-2-", "---99--7--9--99-88--964------7-5--795----364-", "-12--9-8596-2-----79--17--5-51-52-8--41-65-75", "32-334---94-4-8643-6-------9-6-13-4----327-87", "-51----76-2152-434741-----22-952-9-3718---5--", "87--5----33-------4-7-----8-62-21517----2-534", "-4-9489-38-55----85------1-6-8-9-4-3----3-8--", "973741-47393--955-------1-6--3---3885773617--", "----42-817-784--618-5-28-6-9--843--312---9281", "-584-35---3-8--51----92-6-9-8--6---52-86--8--", "--9664868-6---3-9-9-5--6---8-1--9--551---4-4-", "-------96-26-64--167169283--1----3-34-24-7-8-", "-73-7---33-----8--3---5---8-----5----6-9--19-", "-511-229-63---3655-551229-46-----84956---75-8", "-------4---759-3--4-23-1--3-9-5---19-86-55--3", "6-3-719-9---247-------9543---3-8---5-475-3---", "59-64----998----7-6784-1-8-----41--512-----3-", "5-92-3-1-------4-8-9--37383553-9955-57-1--374", "4-45----16-----431-5--7--51254-5--15---6-241-", "8----7-9-551--4-6---4-1--72-1-668427--3-85--8", "-4762-84--7-74255---1-8--7-8-2--67---3---68-9", "59-2572--6-39--67----3---3-6-49--5-16---574-2", "-242--5763-588--2-4-62-236------5----8-5---9-", "4--23----6--3----62357---19-47-753--2567--4--", "------3--1-6671--4-6--558728--15---34-84-4-95", "2---8399---4-3-4-22478-3--8-489---371---9-9--", "---1-71--43------4--57-4--1----83--4-892--5--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    int N = 41;
    vector<string> streets = {"-26---62---98--8----2-956-1--48-6-5--3----5--63---", "2-19-7455--787-8--16-357-98-8-988-931-2-542-32----", "61---38--72-----9-521--57--9--1-1-7--1--976159-62-", "-9---548-7---18157----5---5244-95--4----2--6---749", "-----5--3492---4--319--6----7818--61-4--84311--881", "-7355---29-94---33235---2---4--391-87---1-4-74--7-", "6484----6127781--8-95-714----47---2271-959-9-875--", "25-8----8-----2-66--4--13-2---1--382977-77-42-4-53", "-5--3268-9-7-8-5--5---17-19-22-3--722-7-6--7------", "--77491-9--1--1872--3-6----3---164---7-7--9-2944--", "--2-9-2-----6-2-2---214-----641-------8139271163-3", "97--297-71--7--33-9-4-1658--16-3-9-13318-2-67---57", "88---47---67--55---76--4--42---9---443-385----4-89", "-7-1--8-8------584-1----21--519677-----987-5-35-56", "---8--12-12-5---9213-8-52-146-9-8--2-5132-74-8----", "88-14---58-355------4-774--6---2173---3-1-49955-2-", "--95-3-6-723-89--4112-28---3----4-4---19--9-21--26", "---7-386-2---42-4-2784---66599-7-6-98-9-5-----2172", "-15-32--5--9--1-12-----9-5-16195443-35------6--2-9", "-62-139-----713-17--71----62-37--8--1-6--5---7--77", "2-1-9554-3246--428-7---75--67-5-----86-14--33-91--", "-3--------1---8--4-1--4561--8--2-9-3-7--381--3----", "95-5--7-1641---72----4--69---585----28-7----3-3-9-", "575-6-117--64-578-9-75---75---6------5--8-----932-", "6-7--243---5-224----566--6-787-3-46-8578------9---", "-9------1--8-1---65--1976-6-28-62---934-----537-87", "18-5---29---4-1--6-6---5-6-2-18479--528-4419166---", "--92-----3--2-4635126---7-2-5-62-9---5-49--4-54-7-", "-8-474--2-61-56--96-78--82-5--9--67--9178-1564-92-", "4--48-4-2-46-1---913--5-781----246-4----5-52197--4", "891-1-71--1--99---975-86--869---9---5-77--8--19449", "-8-983--31-396-2-75--25-3642-2--37--52-7--1-3-9--5", "6815-9---6---7814-4------27--493-18-2-6---4---9381", "-----1-3-4-9-7-7-648-9--4-9966-71--3--54-35---36-4", "597-6-287------34-3-----6---7---8--4----7558516---", "-3-418222--14-2--9---3-------4---34-5--981757-8---", "-1---7792--34----8318-2-895---552--5-27548497---9-", "3-1-4-17-7-33-5---5-678553259--2----2--87-2-9-3---", "-2-----77-81--1319-6----748-1-7-65--7--49-4-679-96", "------9--718393-9---1-7-8--47-77-4-9584-7-7176-784", "-59281576-3-8821-5--43-8--4985----784797-35---2---", "-47-4-97--9257-----5-8----4------3518---3-7--6--61", "526-34---92---749----1----1-15814557424757---1----", "--161-947-76-549----3-----9452----859--1----3862-5", "-35-17-2-217---92-6-3-3--51-61-3--577967---3-22-37", "629--48--91--3851--7-3---365491---1---76-6182--39-", "3-----74-46-45-5-2--9-399764-7999368-39-2--62-----", "--678-5--43------12-1--3----9-4-36-----7---2-3--2-", "--2487-5---585-227-7--92-8-72-4-8---9-98-6--39-2--", "---91--3--3796--6297-----7---49514----64-1-57-----"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    int N = 40;
    vector<string> streets = {"-56---5-4-9---4-6--------352-3-999-69287--237-9-", "5----7---4----4-7--986-37--72-4---9931---32--1--", "6--2-5-21--8-6--7-8-9-3-1-5-------75-----148-6--", "--2-7-6-958864-21-34766-2-3-33-9-3--98-27----63-", "---7--9-682--5--9----8-----9-9652-75378668542392", "-75----152172-68---7-94968--8-1--783-4111-896--8", "5--69--11946--1-873--4-6----44161427526--2-6-3-3", "--2--11-763-57----6-6----5389-741-2-341-77--8--1", "4-196517-5-8--4-----6-4--38948342----79---3-4-3-", "-4-582965-3-5-------5-5---6--17--26--6-8221348--", "9--82143-3------316959--12----9-8----915-8-12-36", "--88-76-8----173--9-75-57---22-9--5--8------36-8", "---6-2-5-5----9-9----4------98-97-17-1-42-41-851", "--645--7---1---5822-4--1--1-----5-4---4---814---", "44---61-4--79--8826--194-2---96---2-8-81-32----8", "---2-8-----3-58-7--99---93-6--6717---1---394---4", "67719-8---3-9887--6---27-58--226-5-92--8-9-7---8", "------7---1--22---55--6--4---9-6--93-33-4--4---4", "--83--36--69-26-65---5--8-76477-262--86---9---34", "-9-4-7----9----9-5---859-3------61-----1--64166-", "-897---66557-4-9------88-3367-3-3--4--7---7-4--6", "-6-6894---954-1---58------213-6-2619-9--32---9--", "--36-4--45----9-26-58---2-7-8---53-38---537--87-", "-3---96----5-14-7--98---6-9-69-24--9---3------38", "-712-6----17---9--8---26---44-------32128-1-6---", "3----8-53-2---2354-33-----8---2-2---11-6--24--68", "5-53---386---1--8-7-3279-8-7-5-75-63-23319-59-2-", "27--9--89------6--6-61--4-7-977954--3------8-46-", "-2-3-8494--29-----4-73864--9-7-----84-5------51-", "3--39-4-81-28-9-297----9--577---1961-----46-9-2-", "-4--6117379---662-7-36---2-7-------839-6-851--92", "9--95-644--99--766-----2--79----7-9--5----5--54-", "9---2-112-8-75-1--263254-255-1-7--2-4-7-8-7-9-9-", "9--3-74--2-----75-61-63----4-9-----7-7-3-7----96", "-97-7822-6-5142--92--1----6--6-92----32-6---4-32", "695-537-----7---93--4939--3-818--7--6-14---587-3", "93-93-53------8-2-----8-31-34-3-4--6--1-5-1-----", "21-8742476981--1-38--9--212---95-73----22--4-2--", "8---81619-1--48--36-7---1-3-5---7-211----1-3-5--", "7--261---85-4-1-8--1---3263---6--3-4-2--2-8-8-6-", "---761-7-2--2----4---35-8-1-----8-6-52-2-3--7--5", "-31-8-27-28---339----23---9--48--7----1-3---4-3-", "224-58--31--4829--967-7-12---6557---1--8--------", "3-8-496--31-11-474-4-----458--1----5-43------2-6", "7---26-84423-4-----14---6-9--9--9-48---874---72-", "-1663-3--8-68------6-98----45--5---7-25----27-86", "9--39---3-3-5-----36--73-6261294993----6-3--28-3", "----2831--681-84844-6--8-8----2--623----5--6-63-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    int N = 42;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    int N = 47;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    int N = 41;
    vector<string> streets = {"---3-45-------1----------------2----------", "------5---------------7-------------------", "-----------8-----------------------1--2---", "3---------6--------------9------5---8-----", "---------------6---48---------------------", "4------7-----8-----------------5----------", "55-----9-------4-------------4------------", "-----79----------------------------1------", "-----------7-------7---4-6-2--------------", "----------6-------3--2-----48------------6", "---6-----6--------7----8-------6---------6", "--8-----7--------9------4-9-----6--1------", "---------------------------8-----7----1---", "-----8--------------7------------6-2-7----", "1--------------1--------5-----------------", "----6-4-------1-------------------93------", "-------------------8------5-----3-7--3----", "-----------9------------------------------", "---------37-------------------------------", "----4---7-------8-------------------------", "----8--------7-----------5-------9-5------", "---------2------------------2-------13----", "-7---------------------9----------4---5---", "--------4-8-----------9--9--8-----5-------", "-----------4--5-----------5---------------", "---9----6-----------5--9----1-------3-----", "-----------9----5-------5------2-------6--", "--------24--8------------------5--------8-", "---------8-----------2-8-1----------------", "------4---------------------------9---29-3", "--------------------------------8-5---7---", "2----5----6---------------25---------5---9", "---5-------6----3-------------8------6----", "------------76------9-------------------7-", "---------------97-----45-----95------1----", "--1----1---1-2-3----5----------------9----", "---8-----------------1---3----------------", "-------------7--3----3---------56-19------", "--2---------1---------5------27-----------", "--------------------------6--9------------", "---------------------------8-----7--------", "---------66------------------3-9----------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    int N = 43;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    int N = 40;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    int N = 40;
    vector<string> streets = {"----5-----------------------------------5------", "-----7-----------------------------------------", "----------6----3-----6-------------9-----------", "----------37--4-4--------6---29-7-------8----4-", "5--------------3-1-----------------------------", "-7------1------6-----------------------3-----8-", "---------7--------------------1------------9---", "----------6------2-7-----1------------7--------", "-----1--------8--------------------------------", "------7----------------------------------------", "--63---6------2-----------------------9--------", "---7--------3-8-------------7--6-5---2-9-------", "-----------3-------2----------7-------------2-6", "----------------68-----------------1-----------", "---4----8-28----6---------5--------------------", "--3-36---------------------63-------1----------", "---4---------66--6--------9--------------9---8-", "----1--2-----8--6---------------9----5-----9---", "----------------------------45-----------------", "-------7----2------------------3------8----8---", "----------------------6---------------2--8---84", "--6------------------------7--------7----5-----", "--------------------6------------5-------------", "----------------------------6------3--8------8-", "----------------------------7--6--5------9----6", "---6---1---------------------------------------", "--------------5-9------------5-1-6-------1---67", "---------------6-----7---------6---2-----------", "-----------7---3--4----67-------------77-------", "---2--------------5-------5---------4--88-5----", "---9--1-----7--------------------------4--5----", "-----------6-------3----6-16------4--2---------", "---7-------------9---------------7---------8--7", "-----------5----------5---6-----7-7----7-------", "------------------------5------4-7---------6---", "--9----------1---------3---2---------7--33-----", "---------------1-----7-------4----------------7", "-----------2-----5-------------2---7-------1---", "-------7--9--------82--8----7--------------3---", "-----3-----9----------------784--7-------7-----", "5--8-------------------------8-----3-----------", "----------------9---85--9-1--------3---7-----9-", "-----------------------------55----------------", "------9----------9-8------------8-6--13--------", "------------2----------------------------------", "---4-8----------8---8--8--6--------------9-----", "------------6-------4---6-7-----7---7----------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    int N = 41;
    vector<string> streets = {"------4----------------------2----------------", "-------------------------------------------7-3", "--------------------------------------1---7---", "----------------------------------------1-----", "-----------------------4-----5----------------", "-----------------4-------------1---7----------", "4----------------9------------3---------1-----", "--------2------2---13-------------------------", "-------2----------4----------------8----------", "---------------------------7-------------5----", "------------------------------------8---------", "---------------------8------------------------", "-------------------------------9--3-----------", "---------------8----4-----5-------9-----------", "---------------4---4-5--------3-----------8--7", "-------2-----84----------------------1-2------", "-----------------9------1----8----------------", "-----49---------9--2-----------83-------------", "--------4------------8-----------------------3", "-------1------4--2-----------------8----------", "-------3-----4---------1-----------85---------", "-----------8--5---8--------------------2--38--", "-------------------------4-------------764----", "----4---------------1-----4------28---------6-", "----------------1--------------------4--------", "----------------------4-----------------9-----", "-------------5---------4---9--7---------------", "---------7----------------9-------------------", "-------------------------------5----9---------", "2---5-----------8----------------------------8", "------3-------3-----------7---------7-5-4-3---", "-----1------9----8----------5-----------------", "-----------------3-----------------5----------", "-----------------------2----------8-----6-----", "------------39---------8---------8----1-------", "-----7--8----------88-----------5-----------5-", "----------8---------5-------9-7---------9-----", "---------------1--------4----------------4----", "--1---------------------------5---1---------2-", "---------------2-----27---------------------7-", "---1--1---------------6--9----4--6--9---------", "---------5------------4--------------4-----8--", "--7-----------8------3--------3---------------", "-7-------------------8-------------------8----", "-----------------------6-----------5--27------", "-3------------7---3----------8----------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    int N = 47;
    vector<string> streets = {"------3---3--8---1--------------------------5---", "-----8---------------8------------------------6-", "-----------73----8----3---------7----3----------", "--------------6--8--6-----------------1---------", "-------------4---------6--1------------1-7------", "-8-----------6-----------3----------------------", "3---------------------------------------4----4--", "---------------6--9-7--------------------------6", "------------------------4------------4----------", "----------------------------4--6-----8--4-8-1-5-", "3-------------1-3-------2------8--------8-------", "--7---------------7----2---4-39---9----------9--", "--3---------------------4-----------7-8---2-4-7-", "8---46----------1---------------------------6---", "---6------1-----4--6---1---------1--------------", "-------6-----------8----------1-----------------", "----------3--14-----------5-56--5-1--3----------", "1-88----------------6-528-------4---3-----------", "-------9---7---------8-1------------------------", "--------------68------6----------------------54-", "---6---7---------6-------5--7-----5------2------", "-8----------------8--------------6--------------", "--3--------------5-6--------5-----8-----------3-", "----6------2--1--21-------7---------------------", "--------4-2-4----8------------------------------", "-----3--------------5--------------7----1-------", "----1-----------5------7------2----------7------", "-----------4-------------------1---------6------", "---------4------5---7-5----------1---7----------", "-----------3----6---------------------3---------", "-----------9---1----------2---------------------", "---------68----------------1-----------------5--", "--7-------------54--------------------------3---", "--------------1------6------1------8------------", "-----------9----1---5-8-------------------------", "-------------------------7-------8--------------", "------------7----3-----------------------8------", "--3-----48------3-----------7-------------------", "---1--------8----------------3----------4--1---8", "----1-------------------------------------------", "------4--48--------------1------------4---------", "----7---------------2-----76--------8-----7-2---", "---------8--2----------------------------7---9--", "--------------------------------------1---------", "5--------1--46------------------3--------2------", "------4----9-------5-----------5----------9---9-", "-6-------5--7------4--3----------------------9--", "-------6------------------------------8---------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    int N = 43;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    int N = 45;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    int N = 45;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    int N = 42;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    int N = 42;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    int N = 43;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    int N = 44;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    int N = 43;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    int N = 49;
    vector<string> streets = {"-1756655384695616987336579949888612236211227655883", "1-------------------------------------------------", "7-------------------------------------------------", "5-------------------------------------------------", "6-------------------------------------------------", "6-------------------------------------------------", "5-------------------------------------------------", "5-------------------------------------------------", "3-------------------------------------------------", "8-------------------------------------------------", "4-------------------------------------------------", "6-------------------------------------------------", "9-------------------------------------------------", "5-------------------------------------------------", "6-------------------------------------------------", "1-------------------------------------------------", "6-------------------------------------------------", "9-------------------------------------------------", "8-------------------------------------------------", "7-------------------------------------------------", "3-------------------------------------------------", "3-------------------------------------------------", "6-------------------------------------------------", "5-------------------------------------------------", "7-------------------------------------------------", "9-------------------------------------------------", "9-------------------------------------------------", "4-------------------------------------------------", "9-------------------------------------------------", "8-------------------------------------------------", "8-------------------------------------------------", "8-------------------------------------------------", "6-------------------------------------------------", "1-------------------------------------------------", "2-------------------------------------------------", "2-------------------------------------------------", "3-------------------------------------------------", "6-------------------------------------------------", "2-------------------------------------------------", "1-------------------------------------------------", "1-------------------------------------------------", "2-------------------------------------------------", "2-------------------------------------------------", "7-------------------------------------------------", "6-------------------------------------------------", "5-------------------------------------------------", "5-------------------------------------------------", "8-------------------------------------------------", "8-------------------------------------------------", "3-------------------------------------------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    int N = 3;
    vector<string> streets = {"-545311-445", "5----------", "4----------", "5----------", "3----------", "1----------", "1----------", "-----------", "4----------", "4----------", "5----------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    int N = 3;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    int N = 3;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    int N = 2;
    vector<string> streets = {"-174", "1---", "7---", "4---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    int N = 3;
    vector<string> streets = {"-587", "5---", "8---", "7---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    int N = 2;
    vector<string> streets = {"-6355", "6----", "3----", "5----", "5----"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    int N = 12;
    vector<string> streets = {"-275215149477--", "2--------------", "7--------------", "5--------------", "2--------------", "1--------------", "5--------------", "1--------------", "4--------------", "9--------------", "4--------------", "7--------------", "7--------------", "---------------", "---------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    int N = 14;
    vector<string> streets = {"-57629152898568", "5--------------", "7--------------", "6--------------", "2--------------", "9--------------", "1--------------", "5--------------", "2--------------", "8--------------", "9--------------", "8--------------", "5--------------", "6--------------", "8--------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    int N = 7;
    vector<string> streets = {"-3161457", "3-------", "1-------", "6-------", "1-------", "4-------", "5-------", "7-------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    int N = 20;
    vector<string> streets = {"-52141918687786214318", "5--------------------", "2--------------------", "1--------------------", "4--------------------", "1--------------------", "9--------------------", "1--------------------", "8--------------------", "6--------------------", "8--------------------", "7--------------------", "7--------------------", "8--------------------", "6--------------------", "2--------------------", "1--------------------", "4--------------------", "3--------------------", "1--------------------", "8--------------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    int N = 17;
    vector<string> streets = {"-2263445424399389117", "2-------------------", "2-------------------", "6-------------------", "3-------------------", "4-------------------", "4-------------------", "5-------------------", "4-------------------", "2-------------------", "4-------------------", "3-------------------", "9-------------------", "9-------------------", "3-------------------", "8-------------------", "9-------------------", "1-------------------", "1-------------------", "7-------------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    int N = 18;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    int N = 1;
    vector<string> streets = {"-2-", "2--", "---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    int N = 3;
    vector<string> streets = {"---6--", "--21--", "-2----", "61----", "------", "------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    int N = 2;
    vector<string> streets = {"-3-1-", "3-4--", "-4---", "1----", "-----"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    int N = 3;
    vector<string> streets = {"--6-", "---6", "6--4", "-64-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    int N = 2;
    vector<string> streets = {"--4-9", "--5-2", "45--4", "-----", "924--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    int N = 2;
    vector<string> streets = {"--9-", "--2-", "92--", "----"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    int N = 2;
    vector<string> streets = {"-9-62", "9--46", "----3", "64--3", "2633-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    int N = 3;
    vector<string> streets = {"--3--2", "--1-4-", "31--6-", "----99", "-469-5", "2--95-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    int N = 3;
    vector<string> streets = {"-8-3", "8-48", "-4-4", "384-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    int N = 12;
    vector<string> streets = {"-856965326426577", "8-13938615785152", "51-7757935318918", "637-882818372368", "9978-91711426367", "63589-7917344529", "587217-977445711", "3698799-52716146", "21311175-8172148", "655817728-917749", "4733434719-32928", "28172441713-4611", "658264562724-926", "5193357117969-97", "75166214442129-1", "728879168981671-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    int N = 15;
    vector<string> streets = {"-8482274448362793882928356627", "8-489539934162536531872481564", "44-31839275612836129261397544", "883-2399562872379186958136178", "2912-545116589565682225846674", "25835-65997252592222143769731", "733946-3423568136256239779772", "4999553-946271426551168697213", "49251949-47396924533242915172", "437619244-7559861224244868186", "8452673677-564445267671739318", "31685252355-41358948659873456", "661785679564-2648929912451634", "2222928169412-855572978335365", "75835514984368-66826433543382", "933769322645456-2872619365681", "3669526641588562-537218272161", "85116225522995885-45694272798", "832882553264272734-9823884365", "2196226134789262759-374925319", "98292121226699462683-53296233", "276524364475173119275-4221338", "8218539824192839843434-352376", "34318776987843532289223-74554", "589346791637534677829257-7383", "6176699758931535224561247-287", "65516772113463361733233532-16", "264773717815368869613375881-1", "7448412326864521185938643761-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    int N = 6;
    vector<string> streets = {"-72899772331151", "7-9492663223258", "29-512579776654", "845-77728619294", "9917-1758594727", "92271-579427978", "765775-51267441", "7672575-3369541", "23988913-977248", "327654239-29958", "3271926672-9977", "13694779799-825", "126279452998-56", "5559274445725-5", "18447811887565-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    int N = 26;
    vector<string> streets = {"-8851757779855854256445227475811273242341393841959", "8-418967926698576612979927661892154434558988827528", "84-49765528453669627922471792531958224236476942649", "514-3262258552725382922774879733717826165939641227", "1893-962487476593339132729999594432526696528666799", "79729-18788779269318171914452785977356281756648775", "566661-4426523919116269169326322579394222279662797", "7752284-162782336414773877983516414786717357389969", "79524741-74958177576857421443969523177473114244186", "722588267-3385829243862481797795567641883532841272", "9688786243-546976326843679956425711486598243793353", "86454757935-83133862881157148217448951554634836286", "595577285848-7898144431483271442226526952918137987", "5832693285637-642513716115535145174424639256777336", "85675293189186-22439963266166793649329712339194944", "576296137273942-3779179972539411352496776421379373", "4695399679638223-451643712153514797135173473159899", "26633314523815474-71686192483813617842987274138629", "512831117426413757-2142741814814764945531758799853", "6272986463624399112-182634714271652215858649845495", "49991127888847916611-88892671392557256757743988918", "472237675648316748488-9894462296518369324462775893", "5922219372311639362289-276126877247712674128646139", "29477918446141297176882-19958157497992853563321261", "227721672875816719439971-6276877631313482138593957", "7714949711973562221424696-326822188135918578651581", "46789439479125151487641923-57385392525145252937781", "769795284954736358117625725-6635712137815266666697", "5129926337681569334412686676-427642697157533153321", "88575735974241745882328188364-27129512642645361697", "193398216921449111179975728322-8685154487818575697", "1213452695572531434126777255778-187126648992563111", "21974954557421637676552461376161-37432119935928992", "755137712614274591655149389142883-2949179972763693", "3487279437186492774278771822295772-254796677321532", "24285337164954341892237931516511492-13383382296763", "432225987485222934415619132391523451-6275674329616", "2446664671616496525569223557724629436-726782256671", "35216227485596771958736849181646117327-81775497423", "453698217895531778355275814154841798728-4892466465", "1865612733842926371874432855727899635614-611582484", "39495723152692344276741515225689996367786-35779496", "987325751343153277544626375634193778787913-4364367", "3869869742348691348932838826358252724252154-936628", "88966663287817131178976356961355973232445739-53581", "424464684493379753948742953656762629259687635-6354", "1721682941367749989585613176315383169676294636-418", "95627779123293938684981295763661965766444436534-17", "524297968758834792591936588929919936172689628511-6", "9897957962367643993583917117177123236135467814876-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    int N = 24;
    vector<string> streets = {"-96215233926156842339693897671885646242513759627", "9-2716836336683547426686288762561524116142798173", "62-631558222886119855993325482828178492844929141", "276-52383835678631825251732849719889188722946626", "1135-5637542331798639471894663364321988739263983", "56125-599468371464437983468215959668624786294856", "285365-17483631849797723557698973893887257848516", "3358391-2897655439774676631465536499382577647262", "36837972-834696287598481991326582467413973928359", "932854488-57332777939225547361869544518144434571", "2323468935-5362951193151917617137985791447922678", "66252837475-491868671478912391898866777386584512", "168633666334-91692936766648147131228743818328734", "5887373593699-8181959977582784163821966669828847", "63681115622118-997587973937837838832932811467265", "851674842798619-61124725789376578985891966911336", "4413964387569896-8429966414288685429492873857394", "27918499771821718-591256467329889797259324841319", "348864775916995145-29895735219392971258576728542", "3252339793973582292-9427984276542951321962399542", "96559774893169749199-324946698394792893455325258", "669249764214799792843-84249558914418777515937156", "9895782782576772659228-6642576474824648212558699", "36311336151867356657446-574264531653477763199515", "823784569599659744799265-76989211813849673851723", "9823965394114838163844477-9777266257467681673254", "78524871177282794754692469-297268454855328942582", "674862643363178323226552972-65791165963897946312", "7684619626194837821795768796-7993343799522591972", "12293585617174768996886497757-529728471448735217", "858739955818118568353945222795-18538666276884191", "8621657386393637889491731669921-9111691587269942", "51894936297813885922444116813989-579518611848262", "651836844598288947997486824137515-69225356846137", "4278269964862238297591251556423176-4547248555999", "64891839745681259711284337453881994-216858776485", "214196834577799842238764848974665252-25833829568", "4198828811974639955297474656976912412-7483189855", "26288472381736212981378797539161857657-189426739", "518777259143868983594527663854256328841-66176144", "1442385774481616727651167829247815453886-7679651", "32429677347689163462552331872867168833967-354832", "779922869495384988733951869957828857814163-96662", "5924694423282261542923595744938644572827759-2379", "98963487842488717189578913261549865699669462-723", "611698523565782333552165725392192194587168637-43", "2742851657713463914455912581719463986534536724-2", "73163662918247564922869534222712279585941229332-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    int N = 23;
    vector<string> streets = {"-2585437365118371589589692234714828689372664767", "2-141949837563391753597985114944435267415815474", "51-92945592164164564257268783962218128535916566", "849-7498463767996697341279621965891933678991731", "5127-897146861843516481698478373471839177455873", "49948-12985755923265679861366316213918146156137", "344991-3797556868529496144684694468759794972192", "7958723-437117528615334797234924992923841672538", "38541974-18893994541322382754341794687771491162", "639648931-8744355256775223817598291677688498195", "5723657788-721238854117542631947564746989231265", "15178751877-94221498636216676144125795774483374", "166665519429-8839656943986511227775952938477238", "8347156734148-557762946134861752119833382799493", "33198985932285-34789225322575216846681371433598", "796942629532353-3421862353942946342461774471846", "1146338845819743-328289255429518842137553594398", "57565256528467743-67976153813849968759879845278", "856916214559568226-1948783812125238239773581886", "9347659516486291871-389962432165837733757743794", "55234643371699282993-88749214399546665955199847", "895487932713442687488-6298695484451784875859636", "9771196425763652968986-457197473969158561827424", "69226817325291332179724-61229992984387438924682", "986796498241832555864956-3689323145914649724318", "2589814723266423533298713-831394266148587482798", "21764362786658594884261268-28621394296881818913", "318276835137167421131992832-3549555131566731389", "4431864447161152932245799183-521799558991441827", "79993369359127295811344933655-89216293289553583", "146671924944251414269879292428-5476475333447166", "4425364418747266895594323419195-721328456764138", "84284249725171838928549912357247-52978581615934", "231971699962714446334568469591725-6399651735311", "8581138241455962288761945645966126-644297844371", "62198979667798641727671391215243936-98249459211", "862331528749538635336858149359727949-6692234398", "9783989377652311799354874861835889486-797964279", "34561178769793375877985465859234562267-28872567", "713774947887387757755763488698358594992-6924725", "2558764118948214393755189716193611792786-113143", "68994196442447445857188974874547678429891-39147", "611955779938793794849522281345461345367213-3571", "4561562218137931451399744281137455494424393-417", "74578115112324583287864637938511933232571154-58", "676373936967399497894328191828633171976244715-8", "7461372825548386886476428839736841118975371788-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    int N = 26;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    int N = 25;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    int N = 24;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    int N = 48;
    vector<string> streets = {"----------------------------4---5-4------------6--", "-----------------8-----------1----------------7---", "---------------------------6----------------------", "-------5------9-----------------------------------", "---------------------------------------2----------", "--------4--------6--------------------------------", "-------------------------1------------------------", "---5----1--------------2--------------------------", "-----4-1---------------------------5--------------", "-----------------------------------------------3--", "----------------------------------------3---------", "----------------------6---------------------------", "-----------------------9--------------------------", "-------------------------5---68-------------------", "---9----------------------------------------------", "----------------------------------5---------------", "---------------------------------------------3----", "-8---6--------------------------------------------", "----------------------------------4---------------", "--------------------------------------------16---3", "-----------------------------------8--------------", "--------------------------5-------------7----6----", "-----------6---------------------------1----------", "-------2----9-------------------------------------", "-----------------------------------5--------------", "------1------5------------------------------------", "---------------------5-----9----1-----------------", "--6-----------------------9-----------------------", "4-----------------------------------------9-------", "-1-----------6-------------------1-------9--------", "-------------8-----------------------3-----4------", "-----------------------------------6--------------", "5-------------------------1-----------------------", "-----------------------------1--------------------", "4--------------5--4-------------------------------", "--------5-----------8---5------6-------6----------", "--------------------------------------6---7-----5-", "------------------------------3-------------------", "------------------------------------6-------------", "----2-----------------1------------6--------------", "----------3----------7-------------------5--------", "-----------------------------9----------5---------", "----------------------------9-------7-------------", "------------------------------4-------------------", "-------------------1------------------------------", "----------------3--6-6----------------------------", "-7------------------------------------------------", "6--------3----------------------------------------", "------------------------------------5-------------", "-------------------3------------------------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    int N = 45;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    int N = 44;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    int N = 43;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    int N = 25;
    vector<string> streets = {"-1222121112121212122212121122112122112222112212221", "1-122211122222211112121211111222112122112111121122", "21-11211112121221121211121221121112211211121221211", "221-2121112122112121112222122121212112111221212122", "2212-112112221121111112121111211121221112212212121", "12211-12222121122122221211122111121222121222112112", "211211-1222122122122212222122211112222211121212111", "1111221-111211211122111122122121121221222221211111", "11111221-21211221112121212122112212111211221221121", "121112212-1122211121111221122121221111121121111212", "2222222111-111122221111221221222222211122112212112", "12112112211-12222111211122111221212121211221111121", "222222211211-1111222122111222111211221211111122211", "1212112112121-222211211222112221211222222221221221", "22211112221212-11111211222211111112222111212121122", "112122212122121-1122212111211121112111222212221221", "2112122111221211-221122122112112221212211221222212", "11111111112122112-22212121212121222121221122122211", "212212221221211222-2111221111121212221122121221221", "2211122221112112122-221221221112212121222212212122", "21211221111212221212-12211121121122111111112212221", "121112112111211121121-1221121112222221222111122111", "2112212111112112221121-211111221122112112121211111", "12121221222112211122222-21212122221211111222221211", "212221221222122122221212-2121122222221222122211111", "1112112221121221211111112-122222111111111122111122", "11211111112121221212111211-11211122211111112212111", "212212222221211111122211221-1111111111211222121122", "2112122222112211221111121211-122212122221211122112", "12112121112212111111112112211-11112122112111112111", "122211121222121212212122221121-1222222111112112211", "2211111121211111211212122211211-122212121112222121", "11121111222222112222121221112121-21221121112212221", "211122121221111122112222212111222-2211221212222112", "2222112121221122122222212121222212-222222212111221", "11212222112122212121121221211122222-11211112211111", "121122221112222112221211211122212121-1121111222221", "2212122111111221211111211111222211211-121221121112", "21211122211222122212121121122111122211-11112222221", "211112121221121212221211211121122221221-2111122211", "2211211211211212112212212111121111211112-112122221", "11122212211212222112111211122111122112111-21212212", "112212222212121122211122221211111111121112-1122212", "2111221111211122121221122222112222221121211-212221", "21222122212112122122212221211112221221211212-11212", "122111112111222222211212111221121211222221211-2121", "2112222111212111221222111121222222112122222212-111", "21211111121122122221211211111121212121222222211-22", "221221112112122211222111121211122121212121121212-2", "1212121112211121211211111212211112111211122121122-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    int N = 24;
    vector<string> streets = {"-112212211221122222122211212212122221211122111111", "1-21122211112222112211211212122221212121111111122", "12-2222122211121221122121222122212212222211112211", "212-112112111112212222112212121222111122211221221", "2121-11121121212112112111222112221211212112222221", "12211-2122121112111111121111222121122122212121112", "222212-211221121121221221211112221111122111122221", "2211112-11222212221212221112211211222112212222212", "11212211-1112111112122212211211211212112221222111", "112212111-212212222222212121222211221122212111212", "2121112212-21211112121212222111212222212112111211", "21112222112-1121111111222111122111111112122112212", "121111122211-211121111112111111122222122112111212", "1211211212212-12211112212212222121222221222112112", "22211121111211-1121111121112222212212112221111212", "221222121211121-122111212112211121212111222112221", "2122111212111211-22221211221212221111112211112222", "21211122121121222-2121222122121112222212212222222", "221221112221111222-121212211221222221212112211222", "1212112212111111211-22221222221112111212111112111", "21221121222111112222-1222222121111211212221211221", "212221122211121111121-211221211211122111121211121", "2211112222221212222222-22121122121221112121211211", "11211222111211211212212-1212222122222211211212112", "111211112222221212212121-121122121121121211212221", "2222212121211211212222121-21221212222222111221121", "11212111122111112212222122-1122222121212122221122", "222221121121122212122112111-211212122222211211121", "2111121222111222212212121212-22221111212112221122", "12221211121212211222212222212-1221211211111212112", "222122211212122121111122212121-121211112212111211", "1222212222211121212112111222221-21122122221221211", "22122221111122122121112221212222-2111112122111112", "212211111121212112221112122211112-211211222122211", "2221211222212222122121221211122112-22122112112221", "21111212122122111221122222221112112-2212121121112", "122112122121222212111212121211121122-112212111221", "2121211111211211122221121222221112121-11222212211", "12221221121122111111111122121112112111-2212211221", "112222222222212122222121122221222122212-122221111", "1122121222111222221121122112112212112221-12211122", "21111111211212221111222111211112221212121-1122221", "211122121222221212211111112121212221222221-221112", "1112211221111111122122222222221211111222212-12211", "11122222211111111211111112212112121211121221-1222", "112121222112121222121112211112111221121112121-111", "1122212212222122222121212111112212212221121221-11", "12122121111111122221221122222111112121212211211-1", "121112121212222122211112112122112112111121212111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    int N = 25;
    vector<string> streets = {"-122211211221222111222111212212222221121122121112", "1-11122111112111222112221122122121111122212221121", "21-2122222212221122212212122221212112111212221122", "212-211121221112111121121222112112222111122112221", "2112-11111221211111121111211121212222212122221221", "12211-1112221221122211211112122122121211122221121", "122111-221112212121121122111121222112111212121112", "2121112-21212112121221222222212122221222122221122", "11221122-2222122122121221112112121121112222211211", "112112112-212122122221122221122122121221112222111", "2122221222-21212212211212211112221211112112121121", "21122211212-2112121222122121221111122211122212212", "122111222212-121121211122221121221221212221222122", "2121222111211-22222122212121111122211112211221221", "21211211221122-1122211112222112221212121112112112", "211211222222121-121221222221122222122211121212122", "1211111111211211-12122111111112221211212211121112", "12211222221222221-1221211112212211211211122111111", "122112112221122121-212221121221211122221121222111", "2121121212222122122-11221122121212112221122111211", "21122122221212122211-2121122121212112111222111211", "222111111112121121212-122222111212211221111112211", "1221121221211212122211-11222211211211212122212211", "12121122221221121122221-2122222211212121222212221", "112111221222222211111212-121212121121211121121122", "2112211212212122111112211-12212111121221122222121", "12221112121222221122222221-2121122221121211112212", "222212122111112112122222122-212112221222122111212", "2121111211121111122111222212-11222111212122211111", "12212221121221121122211211211-2212122121112112122", "221212122221112222111112221212-211221211122112112", "2121212111212122222222221111222-21221212122222121", "22111222222122222111111121212112-1121211121222112", "212222221211121211122211112222111-111122121122121", "2112211211212221221112221122112211-11222211212212", "21122212221221121121111122221222211-2221211122111", "112221211112112211222112111112111112-111211211111", "1111221212122112222212212212212221221-11112121211", "22111112121111211122121212221211122211-2221111221", "121121122121221121111121111221121221112-112221121", "1221112121112211211121121121111111222121-21122221", "21122212211221121222212222122122221111212-2112121", "222222222222112112122122121222221111121212-111112", "1221221222122212112111221211211221212112111-12121", "22212222122122112121111122111112221212122111-2121", "111211111212212211211222122112222222111122122-121", "1112211121121211111222221122111111211221211111-21", "12222212112122121111111222111212121111222212222-1", "212111221112212221111111212212212121111111211111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    int N = 25;
    vector<string> streets = {"-211121111121221122222211221111121222211122221222", "2-12221111211222112122111112222222222122221111112", "11-1211222112122112211112212222222121112211211221", "121-221212222222121121212121112211111221211122222", "1222-11221211121111221111221222211221111221121212", "22121-2121211221221221211111222112222112122112221", "111112-112111211222222212122121211211222222122211", "1122211-12212222222112111112221221212111112112121", "11212211-1112112221212111212112122122111121111222", "112211221-222121112112222222122111112211112212111", "1212221212-22212221122211112121112122121212212111", "21121111122-1212121212212212121122221111122122122", "112211122221-212122111112221121212211121222112211", "2212122211222-22212112111121221221211111122211211", "22222212121112-1222121121121212122222122121121121", "122211122122221-212122112211212122122122211211122", "1111122221211222-11121221222112211122122122221212", "21121222212221211-2222122212211121212212111121212", "222111221211222212-211121212212221222112121111222", "2121222121121111122-22211111222222112212212112111", "22122221112111222212-1212222111122211222121211111", "221111222222121212121-222121211222111211111122112", "2112122112221111211222-21122121112112112112122112", "11111111121111212221122-2111222122221112112112222", "112211211212211212112212-121122122122212122121211", "2121211122122112222121111-22122222122222112122221", "21122121121122212111222122-1122222222111111211122", "122111222222111122212121121-112221121222212211122", "1221221211111222122212121111-21121111122121122111", "12212222122222111112112222212-1121112112222221212", "122222112211112221221112222211-112111221121111121", "1222212211112211212212111222111-21212122112212222", "22211112211212221222221222222212-2221122212111121", "122112112122212211122222222111212-212122122121112", "2211222211122221122121121121111222-12121212211121", "22212211212211222121111222221111211-1121122121222", "221112122221112222221121222112121221-211222211221", "2112112112111111121222112212112111112-21222122122", "12121121112121222111211112122122222212-1221122112", "122112211111112222222122221222122211111-211221221", "1222212111212112111211111112121121212222-11211222", "22112221211222212121211121112221121222211-1222212", "211112221222221121121122221212122222221111-122112", "2121111112211212211121111122121211212112221-22112", "21122121111211212211122122112211121212221222-2221", "111212221222211111121222121121121111122112222-211", "2122222121112211222111122211121211122112221122-12", "21221212211211221121111212221122212222122111211-1", "221221112112111222211222112212121212122122221121-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    int N = 23;
    vector<string> streets = {"-122212222122122221221211212212222122221112212121", "1-12122112111221111122211111112121122222221112122", "21-2211221112222122121212121112111222221111111212", "222-222222121221222222122122212111212111122221112", "2122-21221221112212112111111221222121112211121221", "12122-2112122121212212221111111211221112111121222", "221212-221112211122221111212212222121111122111122", "2122212-21222111221211121111221111111112112111121", "21222122-2122111212111111222112112212111221122222", "221212112-122112222212112212221221111121222122112", "1111211211-11121111221122212211222122111212212121", "21122212221-1121112222122211222121211221112112212", "212112222211-111222121121222121121211112122211212", "1222112111111-21221111211222212121111222222111222", "22221211112212-1111121112122111221111221122122212", "212121111211111-211121112221112122122122121122112", "2112221222112212-22221221211221122121121211112222", "21221122121122112-1211112122112212212212211112122", "112222212212211121-112111221211122222211222111211", "2112122212221111221-22211112212121111211211212122", "22221121112221222112-1221112221222121111121122122", "121222111212111111221-122121112121112211112222122", "2221121111111211211221-12122121121111112122121112", "11121212112221112111221-2212121112211221121111122", "112211111222112212111222-212121112112222212122211", "2111112122222212212111122-12121212221222112212122", "11221111211122221221122111-1222211121212122222112", "211211212221222112122122221-221221122211122212222", "2112212212221211212221111122-11221112222121211221", "11112112121221112111212222221-1112111121121111221", "222211212112121212121211112111-221211222222112111", "2111222112211121121121111222212-22212111111222121", "22112121122222222122222111122122-2112221211111211", "211121212121111222212112221112122-212121212122211", "1122121121122111122111121211112212-11212112212122", "22212221112111122121211112221111111-1222221112222", "222211112121111212211211211221122211-111212121121", "2221111111121221122212122222212121221-22121111211", "22211111121212222111111222112221221212-2211121212", "121122121111221212111121222121211122122-212121112", "1211211122211211222211112111112122122122-11121222", "12121121221122221121212211222221111212111-2212111", "211211221222222111211221222211211221211212-112211", "2112111111212111111212111222211211211111121-21212", "11122211221111221111222121211112121121222112-2121", "221111112222112222122211222211221222111112212-122", "1121221121122221212111112112221122121221212211-21", "22112222212112112212221212122212112221112111222-2", "122212212212222222122222122211111122112221121212-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    int N = 23;
    vector<string> streets = {"-12222222112222121221122222212122222122122122121", "1-1212221221221212122111122121211121221222111212", "21-111122212221121111221211222211211222122222222", "221-11122222122212212111122121211212112122112122", "2111-1111221212122122211211222222122211112222221", "22111-222222211211211221212121111221112212222122", "221112-12121211121222222111222211122221112221121", "2222121-2222221212111112211122112112121112221211", "21221222-221121112222222111121121111121212222112", "122222122-12222221222121112211112211212221121122", "1212222221-1111121111112122221222121121111222212", "21221212121-121211221221222221121222221111111222", "222122221211-12121211211222211112112111122222122", "2222111222121-2122222221111211112121212122221221", "21122111121122-212221121221212112122222112121112", "121212121212112-21221112211222122221211112122111", "2121212112212212-1122221121112222211221121112222", "12122112211112211-221111111212112112222121222212", "211212212212222212-21212221222121111112112212122", "2211212122121222222-1111112122211111212212111122", "12122121221112112111-111211112111121122122212221", "112122212112221121211-22221112112112112222222122", "2121122122121221211112-2111111111111122121211111", "21111122212111121121122-211221221222211112112222", "212122121112212211212212-21111121112211111212222", "2212111111222121212112112-2121211121122122112121", "22121211122221111112111112-111212212121211122212", "212121211222222212211112111-21111211112221122112", "1222222221221112112211121212-1111112211211111221", "21212122111111222222221111111-121222121121111222", "122221211121111121121112122111-12211112121212111", "2111211121221112212111122111121-2122212211222212", "21112112122122222211121111211122-122121112222111", "212212111212111221111112112212211-11111212221112", "2211222111221222111121121211121221-1221221111221", "21122122111221211211121221212212211-111212122212", "122121211212122222121112211121121121-12212122221", "2221112221221121221121211221121121211-1222111221", "21221211121112211222222112121122111121-111221111", "121112112211111111121211112221121222221-12212211", "2222111112112211221122211212122111211211-1112111", "22222222211122221122221212111111221222121-221221", "112122222121221112212221211111222211112212-12122", "2121222222212222121112111122111222122121121-2212", "21222211212121122221221222221122211221122122-111", "122121121122121122112112212122121122221212121-21", "2122222112122211212222122211221111212211122112-2", "12221211222221212222121221221212121211111122112-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    int N = 25;
    vector<string> streets = {"-221212222112212212111112122221121121112122221221", "2-11112112212111222222221212122112121221211222211", "21-2212122222221222121112212222222221221112212211", "112-212212222222111122112222212212212121121111212", "2122-12121221111222111121221122122222221222222112", "11111-2112122221222211211121111222222222121212211", "222222-212111211221211212221212112111122121222122", "2112112-21121211112112121221221122121221222111121", "21212112-1212221212121212121211111122222222121212", "222212211-212121122112211222112221121221122122111", "1222211122-21112212222111121111222211121121121212", "11222212112-2111212222222122222221122221221221112", "222212112212-212111221212111222111112111221111221", "2122122221112-11111111222212221211111212212112222", "11221211221111-1111112221221222221112222211212122", "211211111121211-212222111211122121222111122121212", "2221222121221112-22221222111122212212111111212111", "12212221121111112-1112211221121222111221121122222", "222122122222111221-111211121111111211222221111111", "1211122111222112211-12121121211221212122222212112", "12221111212221122111-1121212111211222221212221222", "121211121222112212121-211222211122212212211111122", "1211122122122221222112-12222222121112222122212211", "12112112111212212112211-2211121121222112212121111", "212211212112221121111122-111212111222211121111211", "1222212212111222121122221-22222111222221222122222", "21122222222211211222122112-1122112111211121222212", "222211111212121111112221121-211222222212112211112", "2122112221122221111212212212-21212221222111212212", "22212112111222222211112212212-1221222222212221222", "122221211212212221111121222111-122212211221121221", "1122121112221221221221111112221-22221222212121212", "21212212122211221212122211121222-2221122221122112", "122222221121111122111211112221222-221121112211212", "1122221111211112212222122212222222-22122122222211", "22212212221211121111211222122212222-2122111222221", "111222112112212221122222221212211122-211222111222", "1221221222121221122122212222222211112-11112121211", "12222222222211211222212112112212222211-2112121212", "211112212111122111221222111222122122112-111222222", "1211211221122221112222121211122221112111-12122221", "21122222222221121222112122211121212121111-2221122", "212121122211121211122122121212121221222122-222111", "2221222111121121211221211122221112221112122-22112", "22112121222211121211211212211222212212222222-2111", "122122211211122122121121122121112122111221222-121", "2222121121212212121121212221222212222222211111-12", "21111122111122211211221112111221111221122211121-2", "111221212122122212122211122222122211212212121122-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    int N = 25;
    vector<string> streets = {"-211222212211211122112121222121121112221112111122", "2-22122212112222121222211211121222222111222212111", "12-2111212221211121221121221111221121211211222212", "122-221222111121222112222111221212112212221112221", "2112-21121211121222212221222111121221221222221111", "22122-2222221122121122211212121121122222221121222", "221112-121112211211121222222222112121121211112111", "2222121-11222212211212212112221112211211221112122", "11122221-2121111211212222212112221111121112222212", "222212112-112122122121111222121222211222222121212", "2121221211-12211112221211112222212121111222222121", "11211212211-1212112111212112211112211222211122221", "121111221221-212212221212211211121222112212221212", "2221112211222-12121212211221112212112112212122212", "12122211121111-2222212221212121111221221222212111", "121112121212222-212121121121122121211112121122112", "1112212221112122-22111222121221222212212211211222", "22222211121112212-1122212112121111221111222222222", "211221111222212221-221211111121112122111111112111", "1221211221212221112-12212121211122222121212122112", "12211221122121121221-2122212122112112111222111212", "221222122111122112122-122222222112221112221211211", "1212222221222221222211-11212122112222211121121221", "21222121211111222111221-2211111222121212111211222", "111211222112211122122212-121222221221211111112212", "2221222122112221111122221-11222221222122211212112", "21212121121112122112121121-1122212211221212111211", "211122222222112112112221111-122212112112112112212", "1112112211222111211212112211-12121222222212212122", "22121222122111222221222122221-2222212221122122111", "111111212121121211112221222222-222112221122121121", "1222111122211211211111122222122-11221111211212111", "22212211221121122112111222112221-2222221112122121", "121211221222121121222222112212212-211222211111222", "1211211212122122221212212221221222-11222112121221", "12212221112121211222122222112112211-1221122222112", "221212111111221121222121121222212111-221222212221", "2122221212121121211111222121222122222-11212211221", "21112221221211211112111112212221222221-2212122122", "111212111212221221111212121221111221112-221112221", "1222222212222221221222111221211212112222-22211111", "12122212122111221211222111111221111221122-2221122", "221121112221222112122111112222212122222122-222111", "1221211121212121221112121211211211122211222-22222", "11212211222222121212112111111221212211211222-2122", "122211222122122212221111221222122112212211222-222", "1122121122122211221122222122111112212212111212-11", "21121212112211112211112211112121222122221212221-1", "212112122211221222122112221221111212112112122211-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    int N = 25;
    vector<string> streets = {"-111112112121121222111211121122222221211222222212", "1-22122121121112212111221111221221221222211112121", "12-1121211111111112211211222122112221212111211121", "121-122211112211211222222121212121112212121212121", "1111-21121122211121211222111221212221212211121121", "12222-1121111111211212211221121222112112212221112", "221211-221121121221211111212222211122121222112121", "1122112-22212221221212221112222221222111211122211", "12112222-1211111122111212121212221212122222221222", "211111121-211211212111111222222111122122122212121", "1111111222-12121211222221212221112212222212212112", "22112121111-1222122221111212121111211222111122211", "111221121121-221222121121112112121212112212121122", "1112211212122-21211111221121121221122121122111111", "21111122112222-2221112212222222211121111112122212", "121111111112112-111121212222112211121212212122121", "2212122212212221-21222112221211111112121221112211", "21112122211221212-2112121211111212222211111112112", "222111112212211112-122221112112211111222221111211", "1122222211221111211-21112211222212221222222112111", "11121111112221122122-2211221212222221211111212222", "111212121121112122212-122211222211122221111112121", "2222221221211222112121-11212211121212112222221121", "12122112112122111221121-2111111122211221111112111", "111221112111112221121212-111121222221212211112121", "1121122112221122221222211-22112112111112221111222", "21221211221112222111211112-1221121121112112222221", "112111221222212211211121121-221121221211121122221", "1212212222211121211222211122-21111121211121212222", "22212222122212211112121121222-2211112111222211212", "212211222211212211222211121112-211112212212121221", "2211222221111222122222112111122-21122112222221112", "22121212211122111111212221221112-2212212211211211", "212122111121111112122112221111112-211121122121122", "2221211221222111121221222112111122-11112112112122", "22212122121112221212221121222112111-1112111211111", "111212222221221122111221111112222111-122222121211", "2222211111221112122222122112212121111-22112221222", "12111121222212112122121211111111121122-2222112221", "122222112222211211221121222111222122222-121211122", "2211222221212112212211212211122221112121-22121111", "21121121221112112122112112122212121121222-2112211", "211112212221222211121121112112221221222122-211111", "2122121122211111111121211121221221121212112-12122", "21112212211221221111112111221122121122112111-1112", "221211221222112222122212212221111121112112121-112", "2111111221121121212121111222222121112221121111-11", "12222121221121121111222122222121122112221112111-1", "211112112121212112112111121122121221121211122211-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    int N = 25;
    vector<string> streets = {"-121212121112111212212111121212111121211121222212", "1-11112222222211221111222112222222121121212222121", "21-2122111222112221111111111212121222111121111212", "112-222112222111212222211121112121112121212221121", "2112-21122122212111221122111111121221122122212212", "11222-2111111221121111221212211111122112222222122", "222212-211122221112121212121212212211211211112222", "1211112-11221112121122222122112122121121111121122", "22112111-2121122212112121112211211122212112122221", "121221112-221222112211111122111222121112112111122", "1222111212-11212122221221121121112122112111122122", "12222122221-1112221222221111121122122221111122211", "222221211111-111221111112211221211121121112221221", "1211222112211-21112211122112122222112111221122221", "11111221221112-2121212221212222122112212122221222", "112121122222112-121212112111112122211111111212121", "2222111121122111-21112112121211222111222112122121", "12211212112221222-2221212212222211112221212121212", "211211212221121112-121222221122212111221112111112", "2112211112221222121-21211212122111122221121222212", "11122122112211111222-2221122111122211111112111122", "211211122112112221112-221122121111111112211121111", "1212122211221121122222-12221122111212112121222122", "12112212212212211121221-2221221211121212221221112", "121121221111221222211122-111111221121121112111221", "1111121111112121122211221-22122211212112212111121", "21121122122111112121222212-2221122112121211212121", "121112122211122112122211122-211111221211212121211", "2221122121112121221111121122-12121111122212221211", "12111111112222211222122212211-2222122221212121121", "222211221111122212221121121122-111112212121212222", "1211112122112211222111122211121-21212111212222221", "12222112121212222111211121212212-1221112122112212", "121111221222122221212111112112111-211111211111212", "1121212111111112111121211212111222-12221221212222", "22212212222221111112111221121211211-2211111112122", "112212112122122112121121122112221122-122121112211", "2111112121121121222211121112122111221-12112211111", "12122112111221112222111121212211112121-1221111212", "111122112221112121111222121121212111221-122221211", "1212122111111211121112121222221212211121-21112222", "21212211111112211112112211111121212121222-2212221", "121222112211212122212111221222122111121212-212111", "2212221111112122111211221121212211211212122-21222", "22121212212222212212122211122212111111121112-2111", "221122212122121221121121112111222122211122212-111", "2121212121122221121211112112212222212122221211-12", "12121222222122222111212122211222112211112212111-1", "212122221221112112222122111111212222112121121121-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    int N = 49;
    vector<string> streets = {"-1121111111211212122222211112222122111212212212111", "1-211212221211221212111111211121122112121211121111", "12-21221211222212212212212221112122221122121122211", "212-1111122212211211221121122212122121212112122122", "1111-122212211222112211121221121122111122211111122", "12211-22112121221222122212112221111222121122221122", "112122-1221111111121121122212121122121221221212221", "1211221-121221212211122122211112221112222222111222", "12212121-21221121212211212221111122222212212111222", "121211222-2222122222122112221121222222222212212112", "1112221112-112122121121121212121212111122222112111", "22222112221-22212111112212122221111121211112212221", "112112122212-2211121121212122112122211111111112111", "1122111112222-222222112121212111122211211112111122", "22222212111222-11221121112211121122111112121211211", "121122112221121-1111212211211221111222211121211211", "2121211212221211-212121122221111221212222212222111", "12221212221112212-11122121112122211222112112222112", "211112211221222111-1122111122211221121111211111122", "2221221122111211211-211111112121121121222111122121", "21222111211111121112-12112122221221111211122121221", "211212221221212122211-2221222122221121121121221222", "2121121212121212122122-211221212211211112222121121", "21211211211221121111122-12221111211112122222211111", "111221221121121122111211-2211122211111112211211112", "1121122222122121211121122-212222221111221121111121", "12212122222112222111122222-22221222221122211111221", "112221112212211121212222112-2221211121222111222211", "2112122111222211122222111222-122222111112111112121", "21121211111211121121212112221-11222222221221121211", "221122211222112212122211222221-1121122121221222212", "2122111211112111121112212211211-121222212112222222", "11111112122111112221222222222211-22111212221212112", "222221222211222121222211122122222-1221212221221211", "2222212122212221111111111121221121-122221121122121", "11211211221122122211112111211212121-12211122212211", "112212212212111212221211112212221221-1222212112211", "1211121222111112221111121111122211221-222222122112", "21121122221212122112211112121212222222-22211221111", "122122221221111121121212122212211121222-1212122112", "2122211222211121221211222122211222112221-121212222", "22112122222111112121112221211221221122221-21221221", "112112221121112211112222121112212222121122-1212212", "2112121222221211221121221111111211122212111-121122", "21111221121211222211121221121122221211212221-12212", "122212111111111122122221111212221221122212121-2111", "2122112112222111221211111112212221222212212122-211", "11211122211211221111221111221222121221112221212-11", "111222222112121111222221122121121121111122121111-2", "1112221222111211122112112111112221111212212221112-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    int N = 48;
    vector<string> streets = {"-1122111222221212121121221221221222222112112112111", "1-211121112121122222111222111111222212221221111221", "12-11211122112212212222121221112112222121121222122", "211-1221111122212122111112211111221122221112221122", "2111-211111111122222111212121212222122122121212211", "11222-21211122121211122122211211121221112122211212", "121212-1221111221111221222112122222121221211112211", "1111111-212221121221111121122121122111122212112222", "21111222-22221211112211112121112122112221121221212", "212111212-1222121222222212122222222112111111211211", "2221111221-222212211122121111111111211211112112122", "21111112222-21122211111121122111212211211111212211", "221212122222-2112112122211121211121112222222112221", "1122121112212-121222111112122212221112212121211221", "21221121212111-12222111121111121212121212221111222", "121122221212121-2221221211221122122112111111122221", "2222211111222122-112121222112111121211112221122121", "12212212122212221-21221212111112112221111212111112", "221221121211122212-2212121122112221211222111122211", "1222211122112221212-111212112112222212122111112212", "11211121221111121221-11111211121122121111222112211", "212112211221211222111-2222212122121221122211121121", "1121121112212111112112-222122112121212121112121211", "22112121121121122212122-12211222121221221122122211", "222112221122112121211221-1111122222222122211122221", "1212222122111211221212221-211211121221121211121112", "21221211111111121111221212-11221122122221222122121", "212121122212221211211121111-1221121121111222222121", "1111112212121211212212211111-211122221222121112121", "21112211121122111111111212222-21222112111211112211", "211111221211112211112212212212-2121211222222221112", "1121212122111212122212222111112-111111221122222222", "22122121121212211122111121111211-21112221222121211", "221222222211221221222222222222212-1112221222211212", "2221212222121122121221112121221111-121212212212212", "22211211112211112222122222112121111-21112112111112", "212222211111112112112212222221111122-1121212221111", "2222211122112212111211212121121122111-121112212122", "12121121212222211121111211212122222111-21122111122", "122221222111211111221222222121222211222-1221122222", "2111221211112221212212112111212111221111-121221222", "12111122111121212211221122221221222121121-22112211", "122122112111222121112112112221222211112222-1112112", "2112121211212111121121221122112222222221121-112221", "11222211221212111111111111121122122122112111-11221", "112211112111111221211222222211222111211221111-1112", "2121212211222112212221122122221211211212122211-121", "12112222221222221122212221111212222111122212211-21", "122211121121222221111211212221121111122221122122-1", "1122121221211121121211111211112212221222212112111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    int N = 49;
    vector<string> streets = {"-2121221221222112122121111211112221112222211211112", "2-222121121212122222112111111122121121121121122221", "12-11222112122211111222112122111111111222222121212", "221-1212221122122121121112122211211112112121112121", "1211-112221221222212111122222122121111212221112221", "21221-22221211122221112111211221112221222122121212", "222112-2121212111112211122211222222111121211111112", "1122222-111121112221111212112211212211211221211212", "21122211-22212222222121212112212112122112121121221", "221222212-1212122221121122222121221111122111212112", "1121111121-111112212121222222222211122121222111111", "22112221221-11122212112212121211122212112221222212", "212221121111-1211111112122122211222221121121111122", "2222112122111-212122211111122221222211211212212212", "11212111211122-22122112211221122222212122222112122", "121222112212112-1111122112122121122111222222212211", "2212221222221221-211111212121122121211121122122221", "12112212222211112-12111221221112111212212122221212", "221212122211122111-2121121222111211122212212121211", "2211212121221221122-212212222111122122121122112112", "11211121111112111112-22211211112221122111111121112", "212211112221111211212-1112112221212212222221112212", "1221121111122122111221-211211111212221222111221121", "11111112212211212212212-11212211111112112122121212", "111121211221211112211111-2112112222221222222222212", "1122212222222112211212112-211211122112212111122112", "21112221122111211222212212-11221112212222122121221", "112221111222222222221111111-2121111111221221122211", "1122211222212212112212122112-212111221222212121112", "11121222212222111111121212212-12111121111212122212", "121122211221122221111211112211-1222111222211111112", "2211212121211121221121112111221-222111112212122222", "21121122122122211121222121111122-22211221222122211", "221121211212222221122111221111222-2122122221221112", "1111122221122222111212212221112222-111221212112122", "11111212111222212211122121212111211-21121212212212", "121112112121211111222121211122111212-1221222112122", "2112111121221121122222121221111112111-122122222122", "21212212111112121221122122222121212121-12212222222", "222112211221212221121221212221212222221-2212221221", "2122221122121122122112222221212212111222-121221121", "21212122112212221121121121122222222221221-22111211", "122222122122212222121212212211112211221122-1212121", "1121121111211222222211122121221221222222121-111222", "21111112121212121211112121111111121212222121-12211", "122112112112111122212122222222122211122221111-1121", "1212211112121222211212112212121221222221112121-111", "12212212211212122221121221221212211211221212211-12", "121221112111212121111121112111121121222221221211-1", "2121122212122221121222122211222212222221111211121-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    int N = 48;
    vector<string> streets = {"-1122211111221122122211122212211112222221111121121", "1-122212111222212112112222221212212212112222122122", "11-12222221221221111112222222222212222122122212112", "221-1221122221222221122221111222212222122121212112", "2221-221222221112211122111121211112221121121222221", "22222-11112122112111211112221212121121121221111212", "112221-1212112222212111222122112211112211212212112", "1221111-221212222212221111222122111111212222111121", "11212122-11212121211212212112122212121221221222211", "112221121-1212221112212222212111212112222222112212", "1112222111-112222111111212211112111121212212122211", "22222112221-11112121211212112112121221112121221112", "222222111111-1111111211212221111211121212112222212", "1211122222211-222122112222211122221212212112111212", "12221122122112-21122111112212221121211222122112121", "212211222221122-2222111112221111112221211212121212", "2212222211221212-122222221222212112111221112222221", "11122122211111121-11121212122112212222211112111112", "211211111112122221-2112212112122112211122112212211", "2211112212111222212-221112212212112222122111122122", "21111212221221112112-21221112211221122121221211212", "111221121111111122122-2121211211221121212111122221", "1222211122111211212112-111112221121122122121111111", "12221121222222112221211-21112221221211222112121112", "222211211211121121112212-2121212221111111211112112", "2221122122222222122211112-121111222211122122222112", "22211212122122222112121111-21212211211222212122211", "122122221111211222111111222-2212122122122221112121", "2121112222121121222221221112-211212212112121211112", "22222211111111212112222221222-11221211112111121111", "112211122111122111211122111111-1222122221122221112", "1222122221221211222211112122111-122212112222211112", "12221121221122111211221222212221-22111112112111222", "111112111112122111112222221212222-1121211221221111", "2222211122111112222211111212212221-221112212121212", "22222111111212221222111212212212112-11112222211121", "212222112122211212122221111211211221-2212122211211", "2222112112111211121221211112212211112-121211212122", "21111122222122222211121211211121121121-22212222222", "212222112211112121222122122211211111122-1121112111", "1222111212222221112212221222221221222121-211121222", "12111222222111121111211121221112122212212-11221212", "122222122212112111112121121221221212211211-1221122", "1221112212212222222111121221112221222121111-212222", "11222121211221112121211112112122121222211222-22222", "221121112122211221121212122112211221112122212-1222", "1222212122212121212212112222111111111222111221-211", "11112211222122122121221111211111212121212212222-12", "221121121111112121121211111211112112122121222211-2", "1222122112122212121221122211212221211221222222122-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    int N = 49;
    vector<string> streets = {"-1121211222212211222121122112122211111111111112121", "1-121222212112222122212121122112121221211122112222", "11-22222221221121121121112111221211112221211112122", "222-1122111212212121122111221121222212111222111121", "1121-211211212121221111112122221221121121222121222", "22212-22212222212221211222111222111211221112121222", "122212-1121212121112112211121222121212111211112212", "1222121-212111112111121212222212112111121112211121", "22212212-12122212222112211212112221122222211112121", "212111211-2212112211211111221222212221122111212211", "2211121222-221211122222121222112221211222211112212", "21222221122-12212221212211221122212112121222121122", "112112112121-1212212221122112222211121211121222211", "2212222122121-211112122112121211121112212212222112", "22121211212222-21122212112122121222112212212222111", "122121211111112-2112111122222222121121122121111222", "1212121222122112-221221122121121112222211221112122", "21112211221221112-11122211211222121221111122212211", "222222112122112121-2221112212212122211122222111112", "2211112121212222112-221211221212222112211212211111", "12111211122221212122-22222221211112121221212111211", "212211121121221122222-1122222212122221112212222222", "1212112121221221121121-122222122212122222211122112", "11111222211211111212211-12111211122221112212122221", "221112111121211221112221-2121112111221211221111212", "2121221211112222212122222-222122212212222211112221", "11121112222211121222222112-21122121222222212211222", "121221221222122221122221222-2211212221222211112212", "2211211221212122112112211212-122121212112222221211", "11212222121122121222221211121-12212112212121121111", "212222211212212222111121122121-2112212121212112122", "2211122222222112122212212221222-221221221121211222", "21222111222221211112112112121212-11111212222111221", "121221212121122212221212112121121-1222212221221222", "1112111212121121212222221212122111-212211111112111", "12121221122111112221121222222122122-21121222111121", "121121112211211222112222212211121212-2111222212212", "1122112121121221211211211221222112212-121212222112", "12211211212122212112212122221212222111-12111122212", "112122122222111211212121122211221112121-1121111211", "1111111122211222112112221222221122111121-121221121", "11222121212212212122222222222121221222111-12212222", "121221111112211222211111211122122212211221-2222212", "1212221211121221122222121121212121122211122-222111", "11111112121122211212121111212112121122112222-22222", "111122111112222111111222111122111211122121222-2121", "2221112122212221221112221212112111212221122222-111", "12112221122121121211221222222112221121221221211-11", "222222122112111221111212122111222212111122112211-1", "1221222111221212212112212122112212112221122121111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    int N = 48;
    vector<string> streets = {"-1211112122211121121122222222111111122112211121122", "1-221111222121121112122111221221221111121222112122", "22-21211211211121111111121211212211112211211121221", "122-2212122221222112121222111121222222211212121121", "1112-221112121122122122221112222121222111122221121", "11222-12122212221212122212221121221122221121122221", "111121-2221221222221212222211212121211221121111211", "2112122-222111211222112221111222211211212211111112", "12211122-21222112222112121111212211111122221221221", "221212222-2121121212211222222211212212211222112122", "2212221212-212221111222221212111221222111122212212", "21221221212-21112121212212121112111212112121222211", "121221212212-2212212122122121221212222222212111122", "1111121121212-212122111211222122112211221221211221", "11121222112122-22121122221222122212111221222111111", "222222211221112-1221112221222222212111211212111112", "1112212121122221-211121112122122212121221122111221", "11111222221121122-11211111221212121112222211222221", "211121222112122211-2221112212112211212221122122211", "1212221222112211112-212112111111121211211122122221", "11111121122211111222-22122222222222122222222111121", "221222111121212121212-2221211111222221121221221211", "2211222221222122111222-221112111212211222221111112", "21122222122212221111122-22221212221212221212112222", "212221222221212211112222-2221221211222111222111212", "2112122112122111212221122-112221221211111122112221", "22211221122112221221221221-21212222122211112221221", "221112111212222222112112212-2111221112122221121122", "2111211112211222212121211212-122222212221211211122", "12212122221121121211211222211-22111111222221221211", "121222121111222221112111221122-2221111112221112122", "1121212221121222222121121121222-211212112111221211", "12221212222121222121222222222122-21222212222222221", "121222211121111112122212122221212-2211122121221112", "1112111112112222211122211121211112-112222222221112", "11122122122222111122122222112112221-11121222111112", "211222111121211121112211212111112111-2121222222212", "2122221112222111122121122122211221212-222221222211", "11221222121122222222212211212211212112-11221211111", "121112212111222122212222111222111222221-2212211121", "2111111221122111121121211112122222211212-211112111", "22221112221122221211222221122221212222222-21222212", "121122212222122121222221221212212222222112-2122111", "1212211112212122212221122221111121222112112-111111", "11112111212212111211121111212212222122221211-11122", "212222112112111112221211112212122221221112211-1221", "1211121112221111122211121211112121112211222111-121", "11211221212212112222121222211212211122111211121-22", "222222112211221122122112122221212111111211112222-2", "2211111212212112111111222112212112222111121121122-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    int N = 48;
    vector<string> streets = {"-2121222211111121211221212222112211122111122112211", "2-211212222212212222122212111122211221121121111211", "12-22111112222122222112112111112221122221221112112", "212-1221122211211211211121212222221122122111122221", "1121-122122122111222221222111122111211111111112121", "22121-11211111121221111112111212212212122212211212", "211221-2112121122221211211111211111121222211212212", "2211212-222212221222111112111122221222212211221221", "22111212-21122111122121122222121112112211212111221", "121221122-1221112212211211111111211111222222112212", "1222212211-221221222111111111212212121121112222111", "12221112122-21212111221111111211212111211221111112", "112121212222-2221211121222221222222112221211212121", "1221211221112-121112112212122122121222111221211211", "12121112112221-21221112221212222212121222121222212", "212112221121222-1121222122111211111112222212122211", "1221112112121111-211111222112122122221112111122112", "22222222122121212-21122221212121121211221121211111", "122122222121112212-1222212212122212221222212212222", "1221211222211211111-212211112121111221222222112211", "21122121121211121122-12211121122221212112122221112", "221121112112211212211-1112121211221211122222122212", "1221111111111222122221-221122112122221121211122111", "22112121121122212222212-12212222122222211222121111", "111221112111212222111121-1111111111121211112111111", "2221221221112212212112121-222111122111212212122122", "21121111211121211221111212-22112112221211121211221", "211111112111221111112221122-1222121222221111111221", "2112111121111221222211221221-122112221221221222122", "11121221112221221111121211121-21212221111111211111", "121221122111222122222112111222-1111111212121111111", "2222221211212221212121221122211-221122111212211222", "22221212122221211121221111111212-12122112112221111", "112211121111221122112222121211121-1222111212121212", "1111121121222121212111221221221121-221112112212121", "12112212111112112222222211222211122-12122211211122", "222211221121122121221122212222122221-2111221111222", "2122121221112212111121121112111222122-122212111212", "11211122221221221222111222222121111111-12122221121", "122212211221212212221221111221111112121-2211122222", "1112122212111122212222111211112121221222-212112222", "11211222221222121122122212112112121222122-21212221", "222111111212122112122212112121211111212112-2122221", "2111121122211112112222122211111222211221212-111121", "11111222112122211221211111212212212211211211-11121", "111211121121112221112222121121112211112211211-2212", "2122212112212122212212211211211111211112222112-122", "22121222221112221122121111221112121122122221121-21", "111221122111211111211111122221121122212222222122-1", "1121122112121121212122111211211212122212211112211-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    int N = 46;
    vector<string> streets = {"-2221112221121211212212222121111221111222111221121", "2-212111122212221211221211212121211111212112111211", "22-22211121211222121121122221112111121221122211221", "212-1121211112211222212121122211111121211212211221", "1221-122211211211211111211221212212111112121112222", "11211-21222111112222211112121221112112222211222221", "111222-2112121112112122121221112111112212111222122", "2111212-212111222222122112121112211212121121221121", "21122212-11122112111112112221222212222121222121211", "222112111-2112111221121111112221211211222112212121", "1211122212-122122121211222221122121112111122212222", "12212111111-11211121122211111111111222111111211111", "211111212121-1122222221112211212122122121211122122", "1212111122211-111221111212212112222111122112121122", "22222112111211-22112212222222221122112221121212121", "122111121121212-1212211212222122121221111121221222", "1121122221212121-222121221212222212112222221112111", "22122212121122122-12111212122111211121121111222122", "112212121222221121-2211121221222211121111221122121", "2112122211112122222-222111121122111221211211222211", "22121211112121221122-22112222112212111221122221212", "122111221212211121122-1222121211211212122211221212", "2112112221121121111221-211121122212112212121122122", "22112111112212222211122-12121221121212111112211121", "212211211121112121211211-1222222212112111222221121", "2121121221212222121122121-122211122122111221211212", "12212121212122222121211121-22211111222121122111121", "212222222121112212222222222-2211222211222222122221", "1212111112111222221121112222-121222211112222211122", "11122211221121212121121222221-22122221121112112222", "121112112221112221221122211122-1211121122111221111", "1121212221212212212221212111121-111122221122111122", "22112112221112112221222121122121-22221222111121211", "211111111121222211111112121222112-2121221211122111", "1111221121112221211121212212221122-111221111121122", "11111112221211121112121211222211211-21212111121222", "112211112112211212221111122112222212-2212221212122", "1111122221222121211112222221111211112-222222221222", "22221221121111212112212111121112222222-21212111111", "212112122211222122112211112212222221122-1121112211", "2211222112111211211112211112212121122211-121122221", "11121211211121112122121122122111121122211-11221122", "112121122121112221212121222221121111221221-2111221", "1222111122211211111121122122221211111221112-211121", "21221222122211221212221222112121111122111212-22211", "211112222111221212222221211211212222121122112-2222", "1111222112212121222211211112121112112112211122-112", "12222211212111121112221112121211211212122121221-22", "212222221221222212211122212222121122221122221212-1", "1111212111212212121122211211221211222211121112221-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    int N = 48;
    vector<string> streets = {"-1211122112211121122112212222122221121122221112121", "1-122212121222222121221112222212121122221222221211", "21-11222221222222221211211122111121112112121122111", "121-1121212212112121211212212112111211212212111111", "1211-112122222121211212111111122222122111121212112", "12211-22222211211221222222122122112212111211111111", "212212-1122121111121111211212222212121111221222122", "2221221-112211112111122122122122122211212211222111", "11221211-21122222222121122122211221111221121221111", "122122212-2222211121212221122211111121211121212111", "2112222212-222112211212212122122111211122221221111", "22222212122-22111222211221212212212221111221111111", "122121212222-1121121112212112212212211221211111222", "1222211122221-112112221222121222211111122221211212", "12211211221111-22112221122211211222211221112111112", "222121112111212-1211112211221211212221222112222111", "1222111221211221-122111211121211212111212121221211", "11212211212211121-21122121121221222212121121222112", "222212212212211122-1212121112212122122221221221112", "2111111121121221211-121112122211112112212122121122", "12222211122212211121-11112121121222121111221111222", "121112122111122112121-2111112211211121211122111211", "2111221212212112122112-111122111212212222122222122", "21221221122222122111111-11222112221111122212111222", "111112122212122112211111-1221111122122111221222111", "2212121221212221111221111-122222221122211212122212", "22121121111211221111111221-22111121221222221212121", "222112122221121222122122222-1111211211222112111212", "2222122222222111112212221221-221122112222222111121", "12111121221222222222121112112-22112211112211211222", "211122221121121112112111121122-1122121221121112221", "2212222211222211112111121211121-112212212111112122", "21112121211222222211222212121111-22122122211112121", "222121122111112112212112222121212-1122221122212111", "1111222211122122222221212111222221-111221212221212", "11121212112221221211112111221212111-12112122222122", "221121211212111211212211222111212211-2112222112222", "1221221111111111122211212211211222122-212111212211", "12121112221121222122122112222122122112-12122222121", "221111112121222212211122112221212221111-2122122121", "2122111211211212211211221122221221122222-112221221", "22121222112222111121211222212211212121111-22121221", "222121212222121122222221212121211212212212-1222122", "1212111111111122111212221212211112222122221-122121", "12112122222112122221112121211211122212212121-22121", "122111222121111222221121221111111122112222222-2111", "2121212212111112121111212221112222122222112222-121", "12111111111122112111221212121221112122112211111-12", "211111211111211111122122112122222112212222222121-2", "1111212111112221122221221212121211222111112111122-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    int N = 47;
    vector<string> streets = {"-2222212221221121112222122222211121222121121111121", "2-111121112112222121111222111221112112112221121122", "21-12122122212112112211122212222112221222221212122", "211-2211112112111112112122212222212112122121222111", "2122-121222121122211222111211221122111121122211222", "21121-21222121212222122121122111111112111212221221", "122122-1212121222121122212121122122222122121212112", "2121111-211211212122211221221112222212111212122221", "21112222-12111121222111211122111212112111211222122", "212122111-1221122222211211112112222222121211221211", "1222222121-211222211111111122212222212221222221121", "21211112122-12122112121111221211121222121221121221", "211122211211-1221221212211111221212122221222111222", "1222111111121-211212221212121122221211122121212222", "12111222112122-11212211122221121121212222112211212", "221121212222211-1111211122212211112211212122211112", "1221222212221111-121122222112212222122222111221122", "11112211222122211-12221112111211122121211222122122", "121112222211211121-1112212122112212121122112222112", "2122121222121221121-121122111212112212222122211211", "21212112121122221211-22121122221121112211211212111", "211122211112121122122-2212222211212211212221121122", "2112222111112111212122-211222112221122222121222111", "12111122221122112121122-11112122212211222112222121", "222212121111112221122111-1222122212122121111212212", "2222112111111222222212111-122221111222212221121211", "21222112111211221111122121-22212222211222222222122", "211112222122122111212221222-2111221121211222211222", "2122121122211112212122222222-111211112121112211222", "22222111112221122212221112211-22221222112212111211", "122221211111222111112112221112-2121122111222112222", "1122112212211211212211222121122-122122111122112211", "11121112222122112121122221222211-21112121222121122", "211121221222122122112121112212222-1112122222112112", "1222212222212112222212122121111211-121212212222112", "21211122122212221112121212211211111-11121122112212", "212111211212211122211121221212221121-1121211112222", "2212122222222121211221212211222222111-212121212122", "11211111112121222212222212221111112112-12221211222", "212221211222222121221122212121112212211-2212221212", "1222112111111222212212221221121112211222-111212121", "12211212222221111211221112221221222121221-11221211", "222221211122221212121221122211222212122111-2121211", "1111221211212122122211121122222222221112112-211121", "11222221222112222122212221222111112112222212-22221", "121212122222111122211222122111112121111212212-1212", "1122112221111211122121222121112212222211211121-112", "11112212121222211112111122122222111221221221221-22", "222122122122221122111212112221212111222121122112-1", "1221212121112222222112112122212122222222111112221-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    int N = 48;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    int N = 46;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    int N = 48;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    int N = 47;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 47;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    int N = 47;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 47;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    int N = 46;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    int N = 46;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    int N = 46;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    int N = 47;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 47;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    int N = 48;
    vector<string> streets = {"-1111111111111111111111111111111111111111111111111", "1-111111111111111111111111111111111111111111111111", "11-11111111111111111111111111111111111111111111111", "111-1111111111111111111111111111111111111111111111", "1111-111111111111111111111111111111111111111111111", "11111-11111111111111111111111111111111111111111111", "111111-1111111111111111111111111111111111111111111", "1111111-111111111111111111111111111111111111111111", "11111111-11111111111111111111111111111111111111111", "111111111-1111111111111111111111111111111111111111", "1111111111-111111111111111111111111111111111111111", "11111111111-11111111111111111111111111111111111111", "111111111111-1111111111111111111111111111111111111", "1111111111111-111111111111111111111111111111111111", "11111111111111-11111111111111111111111111111111111", "111111111111111-1111111111111111111111111111111111", "1111111111111111-111111111111111111111111111111111", "11111111111111111-11111111111111111111111111111111", "111111111111111111-1111111111111111111111111111111", "1111111111111111111-111111111111111111111111111111", "11111111111111111111-11111111111111111111111111111", "111111111111111111111-1111111111111111111111111111", "1111111111111111111111-111111111111111111111111111", "11111111111111111111111-11111111111111111111111111", "111111111111111111111111-1111111111111111111111111", "1111111111111111111111111-111111111111111111111111", "11111111111111111111111111-11111111111111111111111", "111111111111111111111111111-1111111111111111111111", "1111111111111111111111111111-111111111111111111111", "11111111111111111111111111111-11111111111111111111", "111111111111111111111111111111-1111111111111111111", "1111111111111111111111111111111-111111111111111111", "11111111111111111111111111111111-11111111111111111", "111111111111111111111111111111111-1111111111111111", "1111111111111111111111111111111111-111111111111111", "11111111111111111111111111111111111-11111111111111", "111111111111111111111111111111111111-1111111111111", "1111111111111111111111111111111111111-111111111111", "11111111111111111111111111111111111111-11111111111", "111111111111111111111111111111111111111-1111111111", "1111111111111111111111111111111111111111-111111111", "11111111111111111111111111111111111111111-11111111", "111111111111111111111111111111111111111111-1111111", "1111111111111111111111111111111111111111111-111111", "11111111111111111111111111111111111111111111-11111", "111111111111111111111111111111111111111111111-1111", "1111111111111111111111111111111111111111111111-111", "11111111111111111111111111111111111111111111111-11", "111111111111111111111111111111111111111111111111-1", "1111111111111111111111111111111111111111111111111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    int N = 47;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    int N = 47;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    int N = 47;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    int N = 46;
    vector<string> streets = {"-----5------------------------------------------", "----------------------------9-----------8-------", "-------------------------------5---------------4", "--------4------------3-5------------------------", "-----------------------------93-----------------", "5--------------------------3--------------------", "----------------8---7---------------------------", "------------2----------------------------2------", "---4--------------9-----------------------------", "----------7--------------------------3----------", "---------7----------------------9---------------", "------------------------------------5------5----", "-------2-------------------------------------5--", "-------------------79------------------------5--", "------------------------4----------2------------", "----------------------------7-------------3-----", "------8-------------------4---------------------", "-------------------------------------1--------6-", "--------9-------------------------------------3-", "-------------7-------------6--------------------", "------7------9----------------------------------", "---3------------------8-------------2-----------", "---------------------8--1-----------------------", "---5----------------------7---------------------", "--------------4-------1-------------------------", "--------------------------------------63--------", "----------------4------7------------------------", "-----3-------------6----------------------------", "-9-------------7--------------------------------", "----9--------------------------------------2----", "----3-------------------------------------4-----", "--5--------------------------------------5------", "----------9----------------------9--------------", "--------------------------------9------------8--", "--------------------------------------------7--3", "--------------2---------------------------------", "-----------5---------2--------------------------", "---------3-------1------------------------------", "-------------------------6--------------8-------", "-------------------------3------------------5---", "-8------------------------------------8---------", "-------2-----------------------5----------------", "---------------3--------------4-----------------", "-----------5-----------------2------------------", "----------------------------------7----5--------", "------------55-------------------8--------------", "-----------------63-----------------------------", "--4-------------------------------3-------------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    int N = 49;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    int N = 46;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    int N = 47;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    int N = 31;
    vector<string> streets = {"-8-177678--7945152-84-865-47-82---7--2--72563-442-", "8-236114416158-82-79-5329--6964-23--8-1564-375-4-4", "-2-39-13572328796367-478-768-12-87-637-8256628213-", "133-1758-6-9894--9-13612-7--22-9-411-1125584695918", "7691--2267368--14774-99-84774764-7-335-2955-7-4472", "71-7--46133-271--285299752312---2-8584111177344-74", "611524-756976525-3222--51-666-489-9914689-39-71371", "7438267-5-74743-9885596-65-3399-1241-8363578898-96", "845-6155-11733-194-8--62216-867752-98-93-7-3353-14", "-176736-1-5772--5-7328-23-3883189-241567-89631-629", "-62-339715-7939--4551995-752-47-7279244297333--688", "71396-74777-35--84-55461927-28-815-211-58-71929559", "952882673793--75-34-38226763791418-3-18-836-5--182", "4889-7543235--61619949914467-69-72187-3-5-8291-793", "5-74-123--9-76-73--71-385-3-813-377667-834851--694", "189-1-5-1---517-9926---1585243882--21413-925-6--76", "526-4--995-8-639---997543-27572117426-5463-1-53426", "2-3972384-4431-9--834-67-44871-6--311-11337446-855", "-76-7828-75-49-2-8-175555391--3155-314-4---54596-6", "897145258355-976931-65--81329-844-4-6-369--8979769", "4--3-225-215341-9476-72933--1--8952-38159-52-7-347", "-54699-9-89489--7-557--565732592-7112481--84613611", "837199-66-96293-565-2--92-6644546---15-1635165-743", "6282-75-22512181475-959-93-2-6761-5-5-842949866--7", "59--851623-964553-583629-341-95-818143-711--2121-6", "--7742-51-7274-8-43135-33-1763--35546576--71---743", "4-6-736-635766352493-76-41--52-471-146---7-61864-1", "768-7163-82-37-27812-36217---415-84-6549-36-4523-5", "-9-2426388-27-8457-9124--65---3694895-767558742847", "86127--96348961371---5469324--6-4--8-79256-453-749", "242-6-49717-19382-38-9575--136--829645-73165-4-3--", "---94-8-78-84--816148246--456---54-4-5--1-853-794-", "-28--291597117321-549-61837-9485-7-2314-6-488-5965", "-3747--22-25827-7-5-57--15184-247-25-181-5632-4813", "7--1-894-27--17-43-421-585-48-9--2--6963812947-4-6", "--61359194923862213--1--141-986425--4768---------8", "-83-381-8121-7616116321546465-4-3-64---1---1919543", "2-715448-5411-74--4-845-3565-7551197--3896--354-49", "-1-1-163964-83-151-318-8-7-479--4866-3-564278-79-3", "-58221863725--834146511476-9627--138185-5-26617988", "76259193--98853-63-99-621---75316-8--965-692198924", "245551-5787-3-4933----391-73561--51--64-6-46256544", "5-685737-9376882-7--5854-7-65-68462---2294--2-8678", "6364-7983631-25514582419-16-8455839-1-7626--4368-5", "372673-83339591--449-6682-1475-3824-93861224-86255", "-589-47951-2-1-6565771561-85434---7-15-195-38--112", "4-2544183--9----3-99-3-62-622--754--947786866--1-1", "44194-3--665176-4867367-17438739984-5-999568211--1", "2-3177791285899725-6414--4--44-461--44-8247-51---7", "-4-824164989234665697137631579--53683938448552117-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    int N = 10;
    vector<string> streets = {"-286--29-9----7--67----7-4--6--7--4-----4----94-", "2-4--2--143-2--1-4957-1-----8--2-3---16---667---", "84-3-3-35---9-7--9-2-----7-18-278---7-3-----91--", "6-3-95---16--53--6-8--85-3-6-98--5--1--49-9--5--", "---9---3-895-581---78-8----6-684--25-2----7-781-", "-235---88-2997-27-8--2-6-1--9--2-4--19-8-----143", "2------29-5--58--2---22-5--1-------239-9-67-4-12", "9-3-382-1818-4-----894--5523---6611-15---8-1-2-6", "-15--891-7--8-8-4-21-6137--85--5-------9966--21-", "94-18--87---64--2-9-6--8--1----684--7---15------", "-3-69251------6-8----5--2--17--8---654-3--5-----", "----59-8------1----7---4---66-7----654--6-3----4", "-29--9--86---5----38---7----36-81-7--6---3--1-47", "---55754-4--5-75-833---8--586-54--9-61-7--62---7", "7-738-8-8-61-7----7-------6--824--6-13-2----4--4", "-1--12-------5--75----2---159918---3------597---", "-----7--428----7--381---965-96--81-1988-4--828-7", "6496--2------8-5---11-2-6-4--55------72188-----5", "79---8--29--337-3---4-6--3-5836--4768---42--5952", "-5287--81--783--81---27----7-6-----5---3696---1-", "-7--8--9-6------114--8--57--6--8296---946-------", "-----2246-5--------28------6------6--9-95----575", "-1-88-2-1------2-267-----547-------------6-4--1-", "7--5-6--38-478----------4------232--6438-9------", "------557-2-----96--5--4-3--6---8-5--------8-633", "4-73-1-5--------6-3-7-5-3--568-65--5264-84-82-65", "-------2-1---56154----4-------7--2--9622-75516--", "--166-138-16-8-5--57-67--5---8-45-6----26-94---9", "688--9--5-7636-99-8-6---66---523---85277--7--8--", "---96-------6-896536-----8-85----58---8----6----", "--288------7-521-56-------7-2---2--15921--5-29-3", "727-42-6568-8448----8--2-6-43---1-17--1627--74-3", "--8----6-8--1---8---2--385-5--21-8-8-8944---3-5-", "-3-5-4-1-4------1-4-9--2--2--5--8---3---1-8---6-", "4---2--1----796---7-66--5--6-8-1---52-68-6---28-", "----5-2---66---31-65-----5--8-178-5---7-82-2---9", "--71-131-755-61-9-8----6-29-5-5--32--2568----5--", "-1--2995--44613-87---9-4-66-2-9-8---2---5-541---", "-63-------------82--9--3-42-78219-675---5--4456-", "---4-89-9-3--72--1-349-8--227-164-8-6----7-99-5-", "4--9----91-6----484665---8-6---241-8855---76---3", "------6865--3----829--69-47----7--62---7---19--5", "-6-97-7-6-53-6-5---6------597-5--8---5--7--7-8--", "-6-----1-----2-98-----4-8854-6-----2-449617-6399", "-79-7-4-----1-472-5------21---273----149-9-6---9", "9-1581-22-------8-9--5--6-6-8-94--2-5-5---83----", "4---141-1---4-----51-71-36------568---65---9---4", "-----326---4774-752--5--35-9--33---9----35-99-4-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    int N = 47;
    vector<string> streets = {"-2133---3132322331--211121-1231312313312--1-2331--", "2-2213-31--3-121-1231311-21221-2121211221211--3-11", "12-321--1313123331-231-1323-2332-11322331-22321232", "323--23--2333122-231113---132-1-2-233133-223--1-21", "312--1-21-3112-13--3232321313213-1212233221--11311", "-3121-33-12332-2-12-2-1-21--31--2233322---332313-3", "---3-3-32312122213211-1--32-333212--23--312-312--1", "-3--233-2213212112---12-2--2-33332-22-3-2-312223-2", "311-1-22---32113133-223-2133-3113231-212212123-333", "1-32-132--31232--131-12331--31223-31-3132---321-3-", "3-133211-3-1-1331--13131---2-333233232331--1131231", "23331323311-3223-33-13--2231-23-11-121-3-3-3232221", "3-13131222-3-23-232-2-11312-1-32-22-3222---2232121", "2121222113122-1-121-3-1---3-21-1323-23212-2-131222", "2232--22123231-312-22-13223-2232-3-11-32233-1132-3", "313212213-33--3--23112-12231-3--12---2333--23-2331", "3-3-3-111-1-211--1-31113-33-331131121-1113-11--311", "1112-13231-332221-222-133-323--211-221-31--2-1112-", "-2-3-22-33-321-3-2-3---33-213212-3221-2-13-3311131", "-3213-1--11---21323---113-1211-33-21331132-32-131-", "2131221-2-31232112----1-12-1-22121-331223311-13-22", "13113--12113---21-----12223313-11323-22-3-22----13", "11-32112323-111-11-111--3211-3---3-1-33--12-132332", "111-3----31-1-313331-2--3333321--13-1--21-11-12313", "2-3-22-223-23-22-3331233-2-3122-213-23--211213-111", "122-113-11-21-223---22232-2231-33-2-2---231-21--22", "-1313-2-3--323333321-313-2-331312-313-1231-3313-32", "12-31--23-21---1-2121313323-13-2--123-32122-32---3", "2222333--3--122-3331-1-31331-112-21-131-3---123122", "313-21333132-1233-21233221131-3--332-333--2-231332", "1-311-3312333-3-1-1-2--12-3-13-322-23221-----33332", "322-3-23123-212-122311---3122-3-232213---3322212--", "11-2-2133321-3-131-321--232---22-12112123112---322", "221-12222-312232113-13311---23231--12111--32123131", "311223--333-23--1-22-2-3323113-22--3---231-12-1123", "123313-21121--1-2221331---12-222113-2-13123112231-", "31232322--32321-12133--122331-3112-2-2233231111231", "3121223-232123-2-1-3123-3---332321--2-3--22-311113", "123332-3113-22331-21223---13132-11-123-3312-112--1", "22333---2333212313-12--2--22-31-21233-3--12131----", "-11-2-32221--223111333-122313---3-313-3---33-2-2-1", "-2-22-1-1--3--3-3-323-1-1312---31-122211--13-21--2", "112213232----23-----122111-2-2-313-3322231-3-2---2", "-123-3-11-132--2123312-12-3----222111--1333-13313-", "2-3--232231221131-32--1-123312-2-1211313---1-2-31-", "3-2-13123233331--11-1-3131122332-2-2111122232-1121", "33111122-1122132-1113-22--3-3131-312112--1-3-1-33-", "1-2-33-33-2212233113--331---1332311321--2--1313-32", "-1321---333222-312312131123-233-232131-----31233-2", "-12113123-1112311-1-23231223222-213-131-122--1-22-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    int N = 3;
    vector<string> streets = {"-113", "1-12", "11-2", "322-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    int N = 7;
    vector<string> streets = {"-11-----", "1--1----", "1--1----", "-11-11-1", "---1--1-", "---1--1-", "----11--", "---1----"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    int N = 3;
    vector<string> streets = {"-11-", "1--1", "1--1", "-11-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    int N = 40;
    vector<string> streets = {"-2121212112121222221111212211121221112211112221221", "2-221212222111121212122122211211121112112122122122", "12-22212122112122122111211222211112212212121111122", "222-2222112211111111121122122211111221211112112222", "1122-122211221122121211211212212211111211112221111", "22221-22222112111121122212111212212112222221112121", "111222-2112112222111112122112222111212221211211211", "2222222-111112121111112221111122122221222211222122", "12112211-22121121112212112222221111121122222222211", "122112112-2222211111222111222122121112222211212222", "2222122122-212222112211222112121112112212122112222", "11122111122-22221112122122121212112222221211112212", "211121112212-1111222122221212212211221112121222211", "1121122212221-122211111111212212212111222112111222", "21111121122211-12222112121221211221121211111111121", "222121222122121-1112222211122121222111112221121211", "2121212111211221-111222212111222121122112212221222", "22111111111122211-11111112112112222111121221112211", "212122111111212111-1222122212112112121111111111211", "1221111121222122111-112121222121121221112221121212", "11112111222111122121-22112122211111121122221212121", "121212111212211221212-1122122211122112121221121211", "1211122222122122212221-211111112122122221222112222", "21212212112121122111112-22122122211122112211212121", "121211221122212111221212-1211122212122122211211111", "2212122121221111222122121-112112121221212122122211", "22212111221122211122111121-11122111222111112111221", "112211112212112211122212111-1121212221122212121112", "1122212122212212122222121211-122211221121122222121", "12222221211222212111221111111-22212221222212222212", "211111222221111221121112212222-2221221121212112122", "1111222212122211222111222221222-212221121111212121", "21112211111122221211111221122222-12212211112121111", "221111121211112222121221121111211-1221121222111222", "1121121211221212122112212112121221-222212212221111", "11221122111221111112111112222222222-12212222222222", "111211122112212121222122222222221221-2211211112111", "2221122112221111211112222121111121222-221112212221", "21222222122212211111112112111211212222-11122222112", "111112222212121112112221211222221211121-1112122122", "1221121222212212211221122212121111221111-222212112", "11111222221211122212222221121221122221112-21122221", "122112112121211212122221121121111212112122-2222221", "2212211121211211211111211222222122221222212-221221", "21112122221121112111211221112212112212212122-12211", "221121122111211221121211121222112122112212221-2221", "1212121222222111121121221211222211122222222122-222", "21121121222222122222122112211211121212111222222-11", "222212121221122121112122112121221212121212221221-1", "1222111212221211211211211112122112121122211111211-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    int N = 18;
    vector<string> streets = {"-1-----------------", "1-111--------------", "-1---1-------------", "-1---1-------------", "-1---1-------------", "--111-1111---------", "-----1----1--------", "-----1-----1-------", "-----1------1------", "-----1-------1-----", "------1-------1----", "-------1-------1---", "--------1------1---", "---------1------1--", "----------1------1-", "-----------11----1-", "-------------1---1-", "--------------111-1", "-----------------1-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    int N = 6;
    vector<string> streets = {"-11----", "1--1---", "1--1---", "-11-1--", "---1-1-", "----1-1", "-----1-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    int N = 8;
    vector<string> streets = {"-1---1---", "1-1------", "-1-1-----", "--1-2----", "---2----1", "1-----1--", "-----1-1-", "------1-1", "----1--1-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    int N = 33;
    vector<string> streets = {"-4-84265345652978157783687732374881823682448117398", "4-129775834-68684721655359613621686525441922236165", "-1-91468574652669948666152249976953957752511269825", "829-5193279561976749121159161898695967614682287194", "4915-617891532338934448455551189594168455548283836", "27416-292276391664889713174564378353921-2162617345", "676912-6749156168581-644426756581151818726986838-8", "5583796-129799334682192335894449536992351131394296", "38528271-88539364469578675363133145994994741385146", "437792428-7244152499347744339781436936432675216987", "5449179987-913327559413882482153573851639539923137", "6-655617529-67863383756424361548759152954973566954", "565633593416-4668349737858234259835658351144848439", "2821296994374-996284429592768397577563551912685116", "96693113313869-29426427343428-632736479248431325-7", "786736636526692-3155969675758562566395881668692882", "8496868442738693-127151125622691177669331731229991", "17979456445332411-2461-142649936999824821379322347", "524438886958482522-2873215569244972626352144135712", "7189481299939465742-921188611931941511445155884716", "766149-1534774491689-83715459169253-28827684287391", "856247697415322651728-23361996-5271981273355355724", "35618142873679791-3132-913227853484773181831628237", "63114343678485361121739-43757914625625416728926853", "855551437482594724181314-2945371677362311934514898", "7929572554248235525856332-518652774429963822257172", "76215468334327476656412795-91216932721317488879795", "314655796386362524615925419-6467251218615583393796", "2391165439214888299199775816-15447171-191483673381", "36981464171523-56929168936241-82999433939271915675", "727983543854596693436-51751658-2666265539119658579", "4168978931389732164195341267422-7419961351-3451269", "86965815145785251999224667924967-53824252744715242", "885993134375377679745782773579645-9797-99146-81644", "1635455656395736792131457421196139-865684266924771", "85991319998165636865-97634727429878-95269934258666", "225669899355564962212872622113692969-3512474289478", "3577821246128375946181352918-35647553-811496736298", "647641839469359838348214393619512-6258-89945112298", "84515-759335552832542781161193335986118-8158837647", "2124522142941141112573161375199529492198-795655352", "49565161765919867311638798454211712944917-88553762", "4218469347374146374585323288871-4463794598-4873919", "8212828115934238194545184283319346644658584-279875", "122226633295861623182369528369647-9227186582-6-547", "136881898126483922388522157971551825831355776-8264", "76973734563685229254758647933581514896275339-8-128", "31818382191941589377372881773652267642263798521-88", "962934-9483531-894119235979987764476799456174628-7", "8554658667749672172614738256159924168887229574887-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test160() {
    int N = 49;
    vector<string> streets = {"-1127241568345-545-774131529951783951771-941744564", "1-471-62264728817351243191-84476823362--863722-665", "14-9161627181537431-2866-19958556-39784995991-4-52", "279-3359767819698182921926317349666388823686651363", "7113-5-59395-4662--8996428419676377-14558276531192", "2-635-3111451644--4943872449146859287-4571-8592-2-", "4615-3-5-766552745-3371766539833378441117654313986", "1269515-463529122129731129339397497456763325415723", "522791-4-44-4316624451567489195852-8--5-6415238286", "667631764-678988-419328634-85-72249639-9991535-936", "8417946346-39-8-822918923189353642-18---4534991158", "37885565-73-54755272811-9626348-5421561-55-4527383", "4211-1524895-5257422247-88-62687-2-221273254652177", "5859465939-45-761399264879875145979393483-8133455-", "-8366421188727-5693573613571865493742656363-14-812", "5179647268-5565-6332984-8377472947-27827-629-34747", "47482-426-857166-6994-3768593-1758595846-644572--8", "5331--51242243936-9535899173-434267111348319258325", "-518-4-24127293399-4881793253176361766828737-2-448", "71-2893949922952954-7-76412797-3121642324858894649", "72299437531822794387-1-715738531298157993323392274", "4482937312814638-58-1-193177658683842896-387946837", "13616811589174643817-1-7295114-4-577266349-1365389", "31694771662--81-7976797-4691694261688978-136141148", "19-222627339873869941324-938564924-6-845921292-356", "5116846944168953813151969-3991177-3--995596244758-", "2-9344538-82-8775722775933-95779379557888557849778", "989119339896671793573711899--74927-788-5-81264634-", "94579199153325843-398616595--38-92982739454958822-", "548364839-546167-417554961773-29861259233711768--2", "1754763957388452137-38-4417482-587526-661775149458", "76596837826-7549746316429799-95-741562547389199816", "886635345245-994523128-627329887-37161-68881985495", "32-6797924242737866293514-7726743-31236-8867569287", "93367287-9-2-97-57118876-39-915173-913862223543513", "5393-84486112342917614786-578225119-54-44172167669", "16781745-385292751645228--5825666215-756363-8827-5", "72884-16-9-6136881627869897879-213347-9532112-6982", "7-4854175--1245243839967498-3265-68-59-84124731348", "1-925516-9--786764229638558593646-64658-38--72972-", "-89387736945333--8843-4-958-431788243343--98739676", "9656216349552-66637833912958577388216218--584-7125", "43987-52113-5832413528-3165141788627312-95-3771361", "17966845554441-949783716227291591732-14-883-84--24", "721655342395631-52-8393194865711955182777478-31699", "42-5391135925343752994642444864986468-323-743-1795", "4-4112358-1724-428-42651-796889959372619971-11-959", "56-31-9729131587-346283135732-4842567937613-679-33", "6656928283587514-244738458742-519816-84272629953--", "45232-6366837-27858947986-8--2865739528-65149593--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 160: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 160: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test161() {
    int N = 6;
    vector<string> streets = {"-11-----1", "1--1-----", "1--1-----", "-11-1----", "---1-1---", "----1-1--", "-----1---", "---------", "1--------"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 161: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 161: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test162() {
    int N = 6;
    vector<string> streets = {"-111--1", "1---11-", "1---1--", "1---1--", "-111---", "-1----1", "1----1-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 162: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 162: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test163() {
    int N = 3;
    vector<string> streets = {"-----7", "--1---", "-1-5--", "--5-1-", "---1-3", "7---3-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 163: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 163: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test164() {
    int N = 3;
    vector<string> streets = {"-112", "1--1", "1--1", "211-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 164: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 164: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test165() {
    int N = 4;
    vector<string> streets = {"-1---", "1-11-", "-1--1", "-1--1", "--11-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 165: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 165: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test166() {
    int N = 48;
    vector<string> streets = {"-2731952138969375868516745974438726252122761587768", "2-933794969737243629512146371126658155649886445614", "79-48239869173456925621927796994819514653735584431", "334-2546955791623284142247128448813415359529219317", "1382-193957732199457356842534471295361238987219689", "97251-93269286394538831175855295447722978847897853", "593499-1463768263177984966531775251729811519169381", "2496331-655873899825413515837437652572694971433233", "19899246-78453638534357787879571487215262716145351", "366556657-9263867894953651786333286561235983141166", "8995793589-218443763297671639315485338865357723911", "97177278422-31461617641141732117727963226757135573", "637938675613-2282867482154595148323864852114547332", "9731268333812-167454781549745391243958299246656427", "32461328684421-92974745688413659232237819746912398", "745299693646869-5897561487419638618464739593348669", "5363943987312725-187792185759773298444673485685895", "86924518587684981-79394759241892998756539941143627", "622853723961657987-3126154944187943682462685332728", "8954787544377447793-121191769214756974495645273642", "55613894392647757311-28649152646413285668484991257", "112453815594884699222-2357553967649376646277253118", "6212614373712151246182-311491878663114997125936553", "71928195766115641711633-11819636324815988899813174", "442447618574548885594511-6865438339574349447537351", "5677256571114987594197116-619577183654462552855293", "93715858876757447297154886-98252645391217112115941", "779235337833941154465591619-8234146165771875224256", "4168451796925539914923195988-165499288628468525444", "41944274533113667812698645221-77251218731713726911", "329479737311495379814673375367-1431113232447837546", "8648155713578198327467868724571-757273862726899756", "76882426424732262997466331614247-94281337497926669", "251194558882243199451462384495359-8497671398777493", "6893571276573328883639349356911748-859283481895192", "21543775253989244769231856312212248-26891733976759", "551162271636653645878711759681178952-1911496379753", "2545129251834874462456454415883317961-639489111281", "16632986228282876544669934276728362896-77225869482", "245537196362591373696498461723363789137-2663442218", "2939881425562999392586789271812271311972-834916878", "78759859793712754966421845184747434744268-38145544", "683284171855144984848729451761429983982633-9471786", "1659779163774663515547597225837678136953489-851783", "54522814117156936132929858125788978931849148-94197", "848119634423451484379531351222392797716414759-7233", "7549979351357628532313637554567967569192651147-263", "76436832319534368676215132924957641772428577122-69", "613185835617329692245157594541456995588174889366-4", "8417931316132789578278341316416693293128846373394-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 166: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 166: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test167() {
    int N = 44;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 167: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 167: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test168() {
    int N = 3;
    vector<string> streets = {"-322", "3-11", "21--", "21--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 168: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 168: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test169() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 169: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 169: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test170() {
    int N = 3;
    vector<string> streets = {"-1--", "1-11", "-1--", "-1--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 170: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 170: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test171() {
    int N = 4;
    vector<string> streets = {"-11--", "1--11", "1--1-", "-11--", "-1---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 171: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 171: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test172() {
    int N = 4;
    vector<string> streets = {"-1---", "1-111", "-1---", "-1---", "-1---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 172: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 172: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test173() {
    int N = 4;
    vector<string> streets = {"-11--", "1--11", "1--11", "-11--", "-11--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 173: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 173: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test174() {
    int N = 48;
    vector<string> streets = {};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 174: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 174: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test175() {
    int N = 3;
    vector<string> streets = {"-11-1", "1--2-", "1--2-", "-22-2", "1--2-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 175: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 175: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test176() {
    int N = 15;
    vector<string> streets = {"-111111---------", "1------1--------", "1-------1-------", "1--------1------", "1--------1------", "1---------1-----", "1----------1----", "-1----------1---", "--1----------1--", "---11--------1--", "-----1-------1--", "------1-------1-", "-------1-------1", "--------111----1", "-----------1---1", "------------111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 176: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 176: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test177() {
    int N = 3;
    vector<string> streets = {"-323", "3-1-", "21-1", "3-1-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 177: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 177: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test178() {
    int N = 3;
    vector<string> streets = {"--1-", "---1", "1--1", "-11-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 178: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 178: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test179() {
    int N = 4;
    vector<string> streets = {"-23--", "2--39", "3--2-", "-32--", "-9---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 179: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 179: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test180() {
    int N = 6;
    vector<string> streets = {"-111---", "1---19-", "1---1--", "1---1-9", "-111---", "-9-----", "---9---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 180: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 180: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test181() {
    int N = 5;
    vector<string> streets = {"-11---", "1--11-", "1--22-", "-12--1", "-12--1", "---11-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 181: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 181: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test182() {
    int N = 1;
    vector<string> streets = {"-111", "1-11", "11-1", "111-"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 182: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 182: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test183() {
    int N = 4;
    vector<string> streets = {"-11--", "1--11", "1----", "-1---", "-1---"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 183: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 183: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test184() {
    int N = 25;
    vector<string> streets = {"---6-5----------7-94------2------------------5----", "---97----9-38-3-------------21---2-2--8-8--7---2--", "--------------4-7--2----55-------------4-6------2-", "69--1--------------1----34-6---1--5-----1---------", "-7-1--9--2--7----------7--3----7-9----------------", "5------------1-5-----6--1--41--7-3---7------------", "----9-----6---59--8-----8-7-----------------------", "------------9-----9---7---9-----------8---------38", "-------------------5----2--3------7-----3---------", "-9--2------9-3------4-------84------6--7--------57", "------6----5------8--2---------7---------7--------", "-3-------95-------------7---2----------275-8----33", "-8--7--9-------7-7-----------------7-25--4--4-----", "-----1---3-----------5------------3---1-----9----2", "-34---5---------8-5--3-----1---53--------5-----3-6", "-----59-----7---3--9---------9--------------------", "7-7-----------83------9-2--92---------3---7-69--8-", "------------7------1--61-----------9---7--8-------", "9-----89--8---5-----5--4-99----4--1-----------2-5-", "4-21----5------9-1-----4----------------3----2---4", "---------4--------5--1--6-4---2----1--7-------9---", "-----6----2--53-----1-5-----7-8---44-3--5-6---6---", "-------7--------96---5--1--8---1-------1--2---4--9", "----7------------144--------6----------5------7---", "--53-18-2--7----2---6-1--------5---3-----1--9-----", "--54--------------9-------4---------5-----3------7", "2---3-79----------9-4----4------------------3--478", "---6-4--3-----1-9-----8-----8-4--------22---24-3--", "-2---1---8-2----2----7-6---8----5-------1---5--6--", "-1-------4-----9-----------------2-------36-----4-", "--------------------28-----4-------2---------4----", "---177----7---5---4---1-5----------3-3--3-78-6--87", "--------------3-------------5-------8-------6-2---", "-2--93-----------------------2---------55---------", "---5----7----3----1--4---------------91-251-------", "-2----------7----9--14--3-----23-----4-----81-96-8", "---------6---------------5------8-----94--------9-", "-----7------2--------3---------3--94--7----------2", "-8-----8----51--3---7-------------1-97---4-2--3---", "--4------7-2-----7----15---2-----5--4-------9--4--", "-8-1----3--7-------3-5-----21--3-52------------9-7", "--6-------754-5---------1----3----5---4----6------", "----------------78---62--3---6-7--1-----------88--", "-7---------8-------------------8---8--2--6--------", "------------49--6-------9-325---6--1---9----------", "5---------------9--2-------4--46------------------", "------------------2-9647--------2--9--3---8-------", "-2------------3-----------436------6---49-8------2", "--2----3-5-3----8-5-------7--4-8----9-------------", "-------8-7-3-26----4--9--78----7---8-2--7------2--"};
    SafeReturn* pObj = new SafeReturn();
    clock_t start = clock();
    int result = pObj->minRisk(N, streets);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 184: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 184: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    test160() == 0 ? ++passed : ++failed;
    test161() == 0 ? ++passed : ++failed;
    test162() == 0 ? ++passed : ++failed;
    test163() == 0 ? ++passed : ++failed;
    test164() == 0 ? ++passed : ++failed;
    test165() == 0 ? ++passed : ++failed;
    test166() == 0 ? ++passed : ++failed;
    test167() == 0 ? ++passed : ++failed;
    test168() == 0 ? ++passed : ++failed;
    test169() == 0 ? ++passed : ++failed;
    test170() == 0 ? ++passed : ++failed;
    test171() == 0 ? ++passed : ++failed;
    test172() == 0 ? ++passed : ++failed;
    test173() == 0 ? ++passed : ++failed;
    test174() == 0 ? ++passed : ++failed;
    test175() == 0 ? ++passed : ++failed;
    test176() == 0 ? ++passed : ++failed;
    test177() == 0 ? ++passed : ++failed;
    test178() == 0 ? ++passed : ++failed;
    test179() == 0 ? ++passed : ++failed;
    test180() == 0 ? ++passed : ++failed;
    test181() == 0 ? ++passed : ++failed;
    test182() == 0 ? ++passed : ++failed;
    test183() == 0 ? ++passed : ++failed;
    test184() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22868837&rd=14731&pm=11805
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
 
 
#define ALL(x) x.begin(), x.end()
#define fr(x, E) for (__typeof(E.begin()) x = E.begin(); x != E.end(); x++)
#define MP make_pair
#define PB push_back
#define FR first
#define SC second
#define ERR cerr << "ERROR" << endl
#define LL long long
#define LD long double
#define PII pair<int, int>
#define PIII pair<PII, int>
#define PDI pair<double, int>
#define PID pair<int, double>
#define SZ(a) (int)((a).size())
#define VEC vector
#define STR string
#define ISS istringstream
#define OSS ostringstream
#define CLR(a, b) memset(a, b, sizeof(a))
#define gmin(a, b) { if (b < a) a = b; }
#define gmax(a, b) { if (b > a) a = b; }
 
using namespace std;
 
int toint(STR S) { ISS iss(S); int temp; iss >> temp; return temp; }
int toLL(STR S) { ISS iss(S); LL temp; iss >> temp; return temp; }
template <class T> STR toSTR(T A) { OSS oss; oss << A; return oss.str(); }
int N;
struct Tbio{
  VEC<int> adj[1001];
  int ans[1001];
  int link[1001];
  bool vis[1001];
  void add(int a, int b)
  {
    adj[a].PB(b); 
  }
  void clear()
  {
    for (int i = 1; i <= N; i++) adj[i].clear();
  }
  bool find(int now)
  {
    fr(x, adj[now]) if (!vis[*x]){
      vis[*x] = true;
      if (link[*x] == -1 || find(link[*x])) { link[*x] = now; return true; }
    }
    return false;
  }
  int solve()
  {
    CLR(ans, -1); CLR(link, -1);
    int ma = 0;
    for (int i = N; i >= 1; i--){
      CLR(vis ,0); ma += find(i);
    }
    return ma;
  }
} bio;
int dis[1001][1001];
class SafeReturn {
public:
  int minRisk(int N, vector <string> a) {
    ::N = N; int n = SZ(a);
    for (int i = 0; i < n; i++) dis[i][i] = 0;
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++){
        if (a[i][j] == '-') dis[i][j] = 10000; else dis[i][j] = a[i][j] - '0';
      }
    for (int k = 0; k < n; k++)
      for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) if (dis[i][k] != 10000 && dis[k][j] != 10000)
          gmin(dis[i][j], dis[i][k] + dis[k][j]);
    for (int i = 1; i <= N; i++)
      for (int j = 1; j <= N; j++)
        if (dis[0][i] + dis[i][j] == dis[0][j])
          bio.add(i, j);
    return N - bio.solve();
  }
};

********************************************************************************
*******************************************************************************/