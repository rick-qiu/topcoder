/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10766
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class PythTriplets {
public:
    int findMax(vector<string> stick);
};

int PythTriplets::findMax(vector<string> stick) {
    int ret;
    return ret;
}


int test0() {
    vector<string> stick = {"3 4 4 3 11 5 12 9 4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> stick = {"20 21 3021 220"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> stick = {"28 19", "5 1035 21412 37995"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> stick = {"3 7 ", "4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> stick = {"26904 251615 147408 87884 124872 169519 226395", " 177364 328412 189588 241660 5655 654840 225675", " 519800 35856 43355 105939 126321 78995 91344", " 107625 56287 69452 528294 138244 836652 113960", " 528820 156984 27501 21672 74052 842759 149160", " 3405 262361 103587 230020 314084 44080 385313", " 5332 3657 227661 362848 5100 8008 3819", " 16688 396828 133045 12376 44799 6216 258940", " 50668 40715 15841 698904 55755 742494 40796", " 111108 567588 64419 168700 45885 269619 93863", " 104784 23521 34587 48503 24477 833909 60639", " 141491 233811 78520 118755 533776 400504 88319", " 448700 30340 37444 167835 327135 19065 25652", " 34060 148680 271416 4411 354940 5129 101", " 20880 58188 670956 360591 5595 505680 188487", " 2313 508300 20020 32984 683100 331425 340445", " 45008 320229 101380 684004 385216 408152 59325", " 64452 69388 34188 9752 377832 76172 147725", " 497352 22211 34365 38253 409116 35155 27816", " 628056 735572 234835 201699 12236 405867 48081", " 222300 428575 272363 396435 17572 73102 30099", " 614980 6437 80340 6345 24600 36816 132207", " 25553 122428 11544 43249 41313 42148 27936", " 27652 142715 6435 231217 104397 27713 66521", " 58533 25615 387723 103391 59052 118131 31595", " 44415 69460 29128 370905 166731 11484 261617", " 9617 216195 107272 197087 39767 208875 102185", " 74228 131428 324868 5687 334875 153725"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> stick = {"923 202461 332704 332948 459484 28875 84597", " 3772 194620 104980 313820 67348 18291 674681", " 49179 237429 163540 1196 257187 36579 397155", " 301392 57268 315 284380 27939 23115 424253", " 134692 454529 69 820 2835 129748 260", " 30388 988 6100 6771 236379 176115 757257", " 974346 338660 425940 35020 81988 64515 30459", " 99484 290019 80500 324268 250404 112539 286834", " 566040 369375 55149 736673 298644 859287 89500", " 370300 41140 363 778413 15101 173809 886677", " 51851 389363 409038 371812 12963 14259 17355", " 246773 8732 6699 1995 107859 42028 739948", " 189186 2852 19987 1155 81532 136947 881351", " 6195 1947 458919 7275 207326 87508 28", " 3381 147795 33532 94395 594634 75917 308", " 343875 242451 613163 131835 350160 223660 496763", " 33915 2668 70347 170355 201388 135604 4300", " 17829 222217 108661 88059 1180 40755 145299", " 197007 435 7316 1012 18868 221921 6765", " 122187 14691 12220 651 518477 28060 305588", " 61204 175371 45 68 51339 1275 4611", " 291375 12555 15052 140 1659 350132 123820", " 15604 150748 12460 25347 41475 342717 1221", " 128949 51 442117 493588 29260 26260 243219", " 104562 1892 260325 1725 16060 575616 232273", " 2068 509062 3315 12772 973399 67731 33611", " 437980 943297 8715 66675 962497 266462 76035", " 84700 3021 1365 10540 6052 247084 231340", " 127995 585091 120987 509740"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 68;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> stick = {"484002 14931 623369 41285 291856 6700 21789", " 178012 214777 5529 104799 120291 128800 48372", " 1725 42728 39179 86716 22892 14500 245068", " 14259 129747 69715 6981 446516 410475 36", " 58515 91675 7227 22833 62715 156520 256251", " 47084 12445 66552 78892 173052 91048 24531", " 338560 42160 26535 276640 1221 47428 3080", " 152036 428995 16320 915 3123 63600 12261", " 100368 8165 30388 7820 65593 3395 120695", " 62748 147628 166420 61659 242165 1152 129675", " 793972 2763 51171 94180 134079 651 4092", " 239560 78403 187695 348075 15260 361251 84175", " 67732 104236 6100 214332 4068 112684 60164", " 267484 40420 114609 4015 21573 8715 220977", " 7725 398961 94188 275187 222740 52060 1748", " 18260 86271 3388 4895 291795 142443 5835", " 323 704140 28371 496165 851599 189735 22557", " 16568 2236 191308 102051 98952 102396 44187", " 215764 14787 69245 373596 453348 185115 173116", " 16060 210740 6105 17331 259228 45076 4300", " 933880 366331 37516 673512 106323 10955 222053", " 152540 861332 134787 40348 70600 14740 82563", " 140056 332324 383635 32900 1755 140 7953", " 75548 177441 117665 52164 102333 46299 389427", " 219100 57828 132020 245427 2068 22029 167475", " 1989 37389 2448 100100 319373 259697 366836", " 34155 6771 290145 386692 2241 127715 47829", " 180675 403572 4648 143812 91635 106515 314615", " 155433 6232 9028 255651"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> stick = {"396508 956559 108624 410763 32199 324795 8715", " 429234 382045 16660 7275 30459 30831 156827", " 75988 640018 607332 26499 12555 6771 37084", " 975787 78903 141484 33915 2068 64515 28875", " 213 932345 2132 48741 84471 67348 1100", " 336159 374060 31395 21 897236 452056 6555", " 18144 1995 131835 62715 45 61180 308", " 1892 139539 72219 35020 684207 1365 315361", " 59187 499293 607328 89500 144628 651 22120", " 343875 506928 30388 52358 193040 17372 356329", " 63220 161259 15052 134079 112539 428033 216435", " 40297 282801 18291 35211 300516 13132 2379", " 544684 556588 565619 344835 76401 30652 5187", " 242740 312987 12052 243219 5610 5052 94659", " 12460 53009 324815 562588 170355 15555 28", " 87508 144795 437980 319708 510137 3021 150748", " 14259 104980 971668 310684 62875 8732 3153", " 96664 104808 988875 76035 303475 138580 17355", " 421724 251489 101132 161787 94395 305588 75", " 6195 127995 248256 302527 278728 455587 218886", " 220 260 41140 231340 33532 3772 6100", " 141 5115 245145 16060 435912 2852 42028", " 51339 31705 51 110019 435 18868 320835", " 818844 1155 3315 4300 197620 976126 803515", " 171263 379614 350132 1725 519854 340325 382901", " 303052 68 140 147628 235640 40755 1221", " 126863 167475 315555 912748 115578 1012 963900", " 81532 324268 735462 201388 995587 248216 384690", " 741732 1005 40348 2516"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> stick = {"285 26572 3381 165 23088 1220 551332", " 40035 10492 306220 13755 20139 230256 1420", " 18915 6555 1035 150748 83260 328179 7611", " 309099 25 1395 466011 594861 2860 23177", " 222740 885 40348 259228 208862 202091 115420", " 1505 271660 250852 232628 14740 748 280108", " 3741 461916 72712 132267 830571 797896 2349", " 397072 2691 7900 167475 14931 443492 610257", " 31755 98172 87483 286275 77740 863269 107859", " 759897 173500 346796 27588 627259 254013 208100", " 492700 84700 104835 212845 317883 36844 86095", " 76612 11972 9075 57909 120988 90260 22348", " 267915 153387 116715 101092 253379 312 600316", " 1612 266049 81915 40228 37995 332045 258572", " 55315 306075 1180 309628 24339 37701 109068", " 18245 989573 239364 595911 254044 137379 64515", " 107308 5355 3621 6580 13035 24915 111755", " 898735 225995 475948 286995 32032 823368 315172", " 7905 27939 61889 162316 33884 356 62715", " 324268 170355 4988 136184 2035 89835 17052", " 52 351915 10540 26668 7471 278859 7917", " 37335 379547 22540 65572 10412 147628 195", " 49468 504336 43155 807538 342635 31413 62828", " 446736 413595 651372 129675 138460 538780 271492", " 193292 142275 492 45045 96292 19635 1645", " 581572 41396 44499 822609 364589 14308 3675", " 47595 142635 1628 21412 152540 354464 158979", " 351495 532 17325 828 346035 117819"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> stick = {"222088 10815 38181 8855 860 56235 10947", " 594898 386692 19276 9275 77720 6076 362165", " 87429 43492 61180 10355 88060 166828 151515", " 404532 713328 81915 53795 309099 94395 376540", " 35211 314840 236851 83980 50908 100368 1863", " 62828 86487 39676 112948 8643 105 193292", " 88 50799 6693 44215 94804 329907 112101", " 222220 66861 45147 147628 5355 380835 4988", " 30740 988583 298455 187180 40755 488606 7872", " 8308 369260 731386 2225 177100 73875 286995", " 266476 270220 1515 243100 299915 203619 655180", " 14105 830934 715 1628 34419 1653 16779", " 13281 122739 208 9845 3604 545140 46228", " 146188 9860 156220 32109 46816 62715 256795", " 251739 107525 919083 31892 49468 702127 117665", " 119412 180195 1749 804449 201388 324268 917144", " 19272 504828 551332 13287 65572 30388 11235", " 6555 295659 83780 150748 25420 87508 64515", " 835075 213312 7535 324795 148332 12580 170355", " 94659 32045 3016 42076 47128 338955 273132", " 12095 25520 34804 62620 32095 318268 365308", " 158979 96940 21243 16995 61755 58308 264909", " 14508 263148 35020 104835 467260 3648 28059", " 84175 9789 85899 21432 253659 94107 33069", " 119739 1428 98769 225411 117075 250852 3861", " 685256 11448 37701 2324 147828 99940 223816", " 987272 885 40348 306220 13908 1443 572684", " 185115 137572 52155 673512 15580 538780 216435", " 138460 9075 267651 130997"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> stick = {"651 131835 8732 432944 31395 522823 668769", " 350132 158979 987221 20564 162408 50485 61180", " 883459 5115 17243 222220 96801 342179 324795", " 13468 493913 730448 1221 2660 104980 4300", " 240436 318275 185036 6771 950680 111125 64515", " 80301 309099 330577 13132 627 78412 28875", " 255201 750652 1947 238804 303052 27 30388", " 41140 961806 8715 312987 274830 133865 94659", " 384364 144628 387796 138460 6100 364866 362531", " 476866 1995 1564 135604 757305 297110 908795", " 70347 279027 136947 150748 87508 838021 170355", " 319348 562588 640344 2068 310684 723398 436331", " 530308 37084 46577 374544 306220 35020 37739", " 14259 538780 3315 245555 28 110019 757140", " 16060 336476 983504 142267 101132 364 35500", " 338722 375611 245657 12555 751856 76035 59187", " 539000 1827 302341 910043 686546 396508 859989", " 94395 68194 40755 161787 34827 128371 194151", " 422023 324268 704918 1012 25347 2805 15604", " 140 344835 645 405153 216435 744016 45", " 141484 730174 67348 578160 144795 259754 30652", " 544684 653830 219 4539 18291 213605 72895", " 1196 305588 15555 582634 127995 14004 559059", " 541000 883036 276816 201388 147 410914 498297", " 658687 62828 42627 5187 81532 213 343875", " 197620 174993 345793 894803 51339 51 250708", " 812 561988 119248 61204 35211 2516 382701", " 31755 308216 195619 152272 1725 427000 167280", " 798104 137800 18868 57459"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 55;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> stick = {"527200 219604 66675 52155 26715 67348 280840", " 365308 294483 391468 3196 741279 76035 612844", " 68068 129748 40348 34719 99381 155283 197788", " 254013 7791 383269 188332 32763 50908 663122", " 2685 86884 25756 9717 14355 175911 226156", " 6232 134079 128800 62212 9933 595 343875", " 30381 11235 28875 131835 327845 848816 2132", " 153387 1395 600316 146188 127444 3935 273700", " 4191 11972 371163 9400 274281 36195 6916", " 131595 7520 406011 491732 8517 104799 180195", " 14980 124347 572764 290667 19908 305588 53795", " 82348 22940 3725 324096 72867 15908 99588", " 68908 593620 217621 10788 405880 51604 44571", " 883514 230044 20995 4095 164634 182091 158763", " 117040 7068 33147 3315 19875 737005 58308", " 606556 75651 18868 77285 29315 812 8547", " 25996 348388 98115 6556 57268 26931 289668", " 105555 966323 85852 6555 9628 8300 31892", " 3861 187695 121204 1708 28059 467260 73875", " 652804 197403 236417 298329 32548 463556 62715", " 27244 381700 239560 50052 188020 26535 85692", " 14508 185115 3525 439203 474340 12035 4587", " 342916 92235 273981 276909 140740 631060 131532", " 141860 166828 462948 88660 147828 136675 54969", " 225411 117316 162316 185808 3795 177100 213195", " 9845 128 80595 46683 9635 312244 42728", " 35955 163060 18549 252651 74883 386692 107525", " 541600 4389 610512 167475 147628 19635 1053", " 9860 61347 149859 12644"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> stick = {"3111 94764 1685 78501 15260 197820 51992", " 370905 54520 140833 417040 86764 354036 639926", " 8908 421611 39431 276721 143439 56772 419964", " 27144 395068 5440 130900 376805 625116 37597", " 182508 107709 18981 438147 220129 129184 252960", " 171196 264909 271 905486 417339 28529 39715", " 2499 222740 374440 75815 359400 5675 9460", " 635660 10840 80568 16005 278800 28427 141220", " 1120 823872 6560 188573 93081 23560 241859", " 397308 131306 856840 109599 268801 164820 12639", " 540 91780 829101 132639 13277 407115 103140", " 87429 418155 146523 127465 77588 76923 110075", " 44500 419604 77935 111755 372251 334191 165388", " 433771 13332 365307 19092 6935 55315 7548", " 28884 92115 598104 66220 375669 22509 29120", " 362848 41769 10660 127699 1015 16600 65195", " 470428 496036 32604 36720 1848 863032 37100", " 121632 8307 17319 340060 19987 116235 127155", " 328179 106472 56760 198555 41880 64964 419520", " 204076 255148 183120 210820 110260 445809 114699", " 25323 66432 72800 7453 10488 649249 45741", " 303375 270655 1495 189409 80135 76835 109068", " 7923 11596 30528 31759 41349 63523 119691", " 73041 36835 154780 311860 6201 228475 220248", " 187056 54579 14964 512472 45951 282305 194292", " 113680 871108 629 240108 156909 361564 138288", " 314188 164500 46299 25452 11165 233 6351", " 156220 27588 49053 655180 264315 62415 4324", " 40828 247163 441935 355908"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> stick = {"1012 411820 61204 15729 3021 86581 618742", " 731147 645 127995 61180 150748 101019 55356", " 112539 33915 188551 556588 75 344835 25347", " 1995 573340 28 12460 308 77740 144628", " 206568 409688 3315 140 238804 894830 319708", " 445444 16059 29651 267456 269197 288127 185893", " 817216 229628 435 811871 320835 502864 250708", " 658696 208356 7540 170355 261844 1221 812", " 74093 110019 200447 45 641135 167475 110260", " 344433 60431 243219 562588 35020 81532 144795", " 754338 104980 54579 62715 998177 81489 313608", " 197620 756985 40348 861 78596 14259 231340", " 103256 21 895459 487756 448314 417164 89500", " 3772 312160 17355 80095 135604 42028 437980", " 18868 138729 472946 581700 226299 15052 898720", " 348574 228059 194550 254421 1515 7275 908996", " 4988 324795 19503 212380 343149 379980 147628", " 127739 30658 253167 2860 204820 220 147", " 269800 6195 69 44500 75988 470979 868476", " 28875 932707 371960 499885 651 279421 318920", " 64515 876275 130711 151249 523865 51339 306908", " 41140 887873 159852 223851 93411 413138 375409", " 6555 35211 104947 4300 33532 107850 30459", " 1947 67348 820080 364961 1365 18291 6771", " 51 324268 620 114699 934916 408199 333198", " 303052 292937 507060 136947 1892 15604 543579", " 24339 3741 260 1196 16060 7900 76035", " 8732 12555 70347 669090 813799 6100 2349"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 55;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> stick = {"89500 4704 55962 250708 148 20 906056", " 281600 6771 305588 309099 271927 991849 1605", " 16060 6195 343875 419582 120235 417396 150748", " 773693 33532 92964 223392 461890 157108 145020", " 831304 745240 820060 185476 785456 5495 544684", " 306220 765613 451903 13132 310684 3315 131835", " 158979 23501 435 400176 345850 699682 35211", " 87508 466917 625840 64515 844474 175865 5187", " 201388 499723 757476 33915 231340 75988 118939", " 35020 922395 1317 292881 128235 722665 907129", " 43492 5115 2516 21 360992 730575 52155", " 609672 594036 418394 394046 100448 314818 651", " 1725 30388 100345 40755 937939 276129 939408", " 73852 225617 1892 419073 161787 3021 42028", " 544308 57775 12460 18291 2068 20385 144628", " 63688 431363 2660 421623 277042 843693 15555", " 1365 19761 37084 15052 220 626820 213", " 243219 791009 538780 342565 94659 144795 405973", " 147734 83955 219 110380 323089 7275 139777", " 134289 324268 158959 285977 909446 57459 769193", " 90928 30459 67348 500208 35500 700582 112539", " 90565 170355 659400 4300 3772 230651 312987", " 17355 31395 30652 456661 1155 237327 854571", " 396508 292376 4539 18868 324795 878370 59187", " 200629 101132 231886 931642 350132 138460 220154", " 14377 141484 216435 527982 182679 274080 8715", " 213365 646168 311085 6107 76035 260 132145", " 830157 61180 70155 94395 2852 329329 491376", " 98197 28875 646914 19520"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> stick = {"279027 61180 796577 17837 384364 7540 103325", " 402814 44500 465164 65124 135604 1947 76035", " 91607 64608 41140 219 51 62828 254421", " 529828 5115 6100 279861 2860 324013 627564", " 140 861 25347 13132 306220 997365 144795", " 31395 27064 147628 20564 4988 913085 170355", " 706176 67348 320835 411820 313104 1564 3315", " 320461 34827 3021 880806 7900 226299 73822", " 556588 167475 1515 60076 692310 34183 956412", " 54579 89773 850777 399922 827627 8928 962245", " 848468 634832 185420 76591 31755 2852 112539", " 324795 35500 51339 260 197620 16060 212", " 6555 490579 660972 251069 258781 627 35211", " 2812 18868 309099 317224 1221 413960 150340", " 136947 62715 101132 212380 24339 217596 809243", " 868582 219513 636455 147 305588 204820 2349", " 77843 243219 454832 15555 364 316058 814582", " 789102 343875 837866 427867 138460 364080 14705", " 15604 40348 280599 365424 524728 14259 99780", " 319708 4539 110019 21 110260 626430 741647", " 75609 185036 114699 324268 1196 220 702193", " 702500 57459 144628 277888 651 195666 27", " 13468 12460 4300 231340 30459 18291 1155", " 238804 518129 38464 789259 2660 149425 6771", " 2805 64515 101019 150748 104980 22843 334614", " 620 16059 829815 35020 61204 311920 70347", " 1827 69 30652 108 120229 28875 158979", " 538780 575087 504356 437980 3741 89500 131835", " 77740 600342 886923 250708"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> stick = {"8468 167316 141484 20355 79212 152779 111244", " 653172 39597 331075 38591 120633 7144 41965", " 5901 59187 104907 25752 196295 145205 21093", " 372 148180 906636 42795 575824 81791 21412", " 254044 34595 11656 81988 836772 147795 546983", " 86979 88555 126005 209235 447220 63516 224848", " 583251 2944 10680 388212 104507 40004 228445", " 19856 287364 82948 104005 50828 13167 333899", " 5475 13345 49749 368524 104055 393672 59235", " 309244 1035 41132 543240 339465 333205 1135", " 20475 59700 52332 139551 309963 2547 505132", " 37275 675948 27132 16700 24124 3016 361045", " 273429 2835 316260 23343 98007 748 601396", " 74460 9052 70889 19952 114400 106601 129485", " 5187 602980 18012 76692 19061 22440 470412", " 25389 2668 1405 65866 12475 34780 25004", " 15785 76405 539596 23668 796 299280 326925", " 13287 282755 78916 38285 3567 582664 340767", " 21715 1863 146067 195 275716 51975 241820", " 39260 34069 367068 7917 38979 27176 383264", " 126588 33915 87483 51948 37084 38019 39468", " 303485 22605 4321 301623 18492 475020 106797", " 233988 11220 193478 534132 46816 10199 4228", " 603420 779820 85045 213108 582220 204459 36844", " 119163 69747 114595 10075 261664 350778 172396", " 32361 713592 38213 443352 124188 155363 415803", " 11628 34983 18048 254771 413883 1165 34655", " 157377 235149 8853 75988 9499 157635 120692", " 68172 7240 118932 330867"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> stick = {"134589 220 3315 2852 304085 14259 25347", " 324795 877670 20564 33532 135604 3021 232488", " 627 1564 147795 15555 7923 12460 1827", " 103179 15580 3700 14703 739322 422122 36340", " 980 2068 62212 197620 140740 80595 18868", " 101132 417425 786369 406623 76035 315 231340", " 332948 187060 157108 166920 972119 772082 139273", " 4420 147 8715 283251 2301 402212 197788", " 165854 170355 17355 1395 33915 611920 5115", " 42028 27272 6100 243219 213195 491732 30652", " 4828 521260 391468 340 324268 988 435820", " 81988 30388 44571 19875 15604 89500 15052", " 1947 253659 297579 83955 193638 19635 189360", " 1581 320272 52419 384364 158796 4700 189788", " 41140 1131 215924 246820 1221 705432 94136", " 96940 899092 37784 2835 668184 97180 13132", " 318861 68908 110019 182091 91739 8211 1275", " 102531 545380 150748 131835 1155 119739 97300", " 173619 279027 293020 150699 34827 201388 424605", " 7275 1196 11972 2812 75988 217806 794448", " 195360 332484 3069 129580 30940 707086 165", " 34419 46659 208019 39904 3885 381700 6195", " 67348 249296 6549 283133 172131 92235 4851", " 216435 31395 1892 112539 147712 331315 727501", " 493289 94395 216380 804889 70347 243100 28875", " 45732 805721 621220 532 64515 68 11739", " 354991 291 25899 30459 61204 104980 2668", " 91326 63460 14980 87508 40755 189 451285", " 185036 4180 155868 51339"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 72;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> stick = {"35500 37084 96152 298166 134903 35020 101132", " 138200 682644 14259 31755 243219 112539 1725", " 474622 75988 110019 139722 59187 139539 425049", " 2660 4988 131835 14578 12460 61180 167475", " 364 34827 63220 197620 766059 75 14841", " 953642 6195 617405 147628 2516 138460 260", " 20564 357564 347442 195983 216435 30459 347432", " 273574 89500 715616 334323 22560 152075 434272", " 937946 13468 44440 147103 319708 324795 5115", " 211915 389745 4539 396508 538780 35211 102760", " 104980 141484 150748 627 2805 220 138580", " 57459 1827 495145 16660 40755 140 170355", " 236856 438669 185036 64515 562588 13132 556588", " 1100 206271 206721 456608 805441 252840 623777", " 15052 343875 21 246209 158979 182748 1221", " 26499 155393 152743 89876 771822 324268 51339", " 309099 40348 46052 85632 258965 56011 320835", " 94395 437980 161787 162105 231340 33532 72219", " 308 30388 980117 458224 5187 30652 610013", " 313 141 219 8715 343754 391217 6771", " 6100 87038 16060 2068 1564 51 371552", " 177212 397742 151535 62828 305588 662376 201388", " 306220 651 86550 310684 312987 242740 427812", " 33915 535490 15555 4300 652669 517032 31395", " 190733 174709 384364 27 213 417616 17355", " 398268 38375 970765 87508 278313 544684 275617", " 6555 18291 41140 2379 386528 62715 435", " 3021 279027 530657 22221 350132 1515 906891", " 3772 94659 412119 133765"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> stick = {"34580 11155 371195 64935 473184 14685 9768", " 18768 222480 153105 3724 118695 711048 26505", " 204215 39260 106568 816 138387 11220 39201", " 76875 26332 98007 124012 27176 490780 291115", " 283278 27792 531328 845859 472935 91020 217035", " 347116 3116 13340 638388 152820 32032 7905", " 37335 297472 351795 73084 36105 12212 107139", " 421623 85932 54365 690343 35763 181608 222053", " 454443 173195 1020 292175 34408 89688 90636", " 250040 44488 568764 182172 121445 79516 358448", " 34132 121771 67875 406881 102396 507160 321565", " 33335 382900 187748 455163 249300 272025 46060", " 358308 256291 77973 612143 172620 101541 28684", " 218569 406587 14466 217119 52059 142964 15136", " 46973 53932 76936 29127 9243 312991 86979", " 21359 125771 11356 471027 789 199096 17499", " 473425 40005 635964 55632 378131 178555 816887", " 150945 7259 7189 141520 603420 32065 165620", " 373596 6363 96220 117348 252676 18315 239723", " 37128 24805 287 75203 227799 138840 18487", " 602980 9963 243972 51189 357540 88711 193155", " 23343 127380 9652 103820 13692 97778 274971", " 747581 176709 41548 24149 49608 304028 54219", " 611 100875 575824 82243 300268 146608 397435", " 173689 31255 69905 10385 74880 45621 857478", " 193572 594727 129940 249884 321468 91168 26036", " 34069 149000 431940 77532 66531 45500 79800", " 48165 712 53911 7379 5901"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> stick = {"707672 825807 66005 6771 232397 1947 3045", " 33915 204820 11115 824046 894652 107859 3741", " 3381 15604 150699 326452 525 29835 623804", " 455384 72875 31395 7900 712141 226299 185982", " 30459 52419 12460 35475 59187 103228 30652", " 429546 80137 1659 236379 241732 114699 145299", " 64437 318259 21580 213979 49179 135604 29492", " 212380 17355 360220 628066 92 427420 321033", " 3021 310684 23331 54112 730401 57316 35020", " 162510 27939 15308 369200 312987 30940 129580", " 509740 112539 580860 95763 15555 15052 611614", " 305588 220 7540 223660 403052 35211 27", " 99459 94659 498869 104293 653748 344997 364", " 125475 138075 627 136947 231340 33532 670616", " 772348 465228 61204 70347 111531 4300 950509", " 435 45026 110260 249899 318915 6195 24339", " 7420 350132 77740 126404 161787 20492 234916", " 779108 439034 3772 244035 575554 290019 2332", " 521260 527716 171446 16060 410141 153624 297579", " 10540 84700 45315 252901 62365 37084 422435", " 809027 272163 101132 5763 5084 42940 25899", " 243219 170699 16059 361072 10011 2163 429", " 81665 123820 263676 28060 645779 109052 254421", " 141484 25347 284380 109252 44500 20564 139635", " 2091 460 1564 730848 293020 101019 295948", " 54579 18291 5187 63387 150279 89500 2325", " 131835 343875 1827 2516 719975 453172 34827", " 185708 6384 160467 280047 238804 308 409318", " 634015 185036 2860 61180"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 68;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> stick = {"707407 94804 47365 63220 350132 147628 167475", " 147 1653 698096 973319 2516 295276 44500", " 302038 620 641979 110260 238804 33532 341809", " 561862 1005 144795 57517 34804 141068 228826", " 795559 556588 196320 18291 201067 312987 876142", " 672016 13132 645 990551 435 5115 100947", " 164892 222220 8306 279196 286145 429443 204820", " 40348 966257 161787 194351 573625 470744 144628", " 188339 402047 4503 319708 146547 10947 568232", " 135604 290208 61180 28875 242740 94659 1947", " 345088 291770 2132 331180 305588 1204 81611", " 342147 723442 34528 70347 361132 633241 361404", " 693309 75988 129837 136947 131835 861223 502524", " 114699 467549 6771 760795 6555 59187 3772", " 279288 5187 141 248652 83955 371129 308", " 63425 76035 213 927318 54579 45147 26499", " 216723 199634 291019 364657 139539 1196 812", " 310684 365057 983128 633484 95312 544684 16060", " 31395 642098 37084 33915 396481 764840 1100", " 569150 233892 254421 343875 322669 15555 101132", " 317213 16059 36505 978045 15604 688400 35020", " 88698 16660 662290 171405 969346 141484 6195", " 353944 42351 250708 320835 157384 335907 138580", " 3111 284415 721420 853808 628004 803627 25347", " 470597 72219 35211 178567 64449 17355 681598", " 3604 709057 251739 341107 102080 3315 18868", " 101783 2379 7540 30652 737372 262361 747697", " 4300 280171 61204 135997 799876 79926 62715", " 15052 67348 861 197487"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> stick = {"4300 100947 401860 314863 239607 861 150699", " 914936 6555 122187 141885 300015 242740 1012", " 3772 16660 98092 17355 61755 43492 247084", " 117733 438081 121899 3885 324397 5763 221835", " 127995 435 59187 2379 19875 147212 567272", " 16059 237037 68908 33532 320835 231340 499627", " 384364 6195 54579 43035 310684 18315 552890", " 1612 185036 12212 312987 285908 153876 12555", " 344835 5187 35211 10947 338955 139612 612438", " 167475 56547 845923 279196 13035 504348 89500", " 121716 26499 52419 249417 9198 138580 112539", " 396825 5829 19780 4988 4828 194331 16060", " 6771 136525 18291 92193 57316 747662 12460", " 780668 303052 206795 1564 20564 417339 37084", " 99484 318268 151515 1540 34804 3021 519431", " 20619 33915 293020 6075 137572 130637 213195", " 35020 7540 434444 44500 653925 40348 109395", " 26572 521260 220 8732 30940 544684 27795", " 272163 10395 620 81532 114699 153220 110260", " 391468 1995 67875 779517 129580 533826 251658", " 147628 1827 527716 139539 34827 5084 3604", " 90188 51051 95592 176988 35787 53932 257187", " 220143 92235 212802 319708 2355 2163 197788", " 94804 16684 308 630742 2013 146835 29212", " 260 141484 297579 638385 243908 3675 627", " 279027 741 15052 342147 30459 10492 6148", " 63220 552954 718504 45147 234916 282093 651", " 268755 404012 634273 62715 243219 72219 620673", " 95763 1316 161787 570555"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> stick = {"230020 2607 414675 1837 374644 4240 332469", " 178284 82804 17667 745412 19317 379095 472884", " 310660 24820 388680 70161 129220 252094 9945", " 37947 204079 548711 376128 170500 417252 38247", " 102388 137332 237188 399051 66163 35875 473484", " 379622 884936 101380 3663 91749 225365 233811", " 4216 394685 466036 449499 14091 3375 246015", " 180492 203343 4556 129140 2453 44571 80388", " 13884 509240 13780 2576 33605 6100 14973", " 651 90147 786580 292348 39508 44835 556", " 463024 1860 104331 691894 14331 255368 34528", " 43420 170140 118131 16060 107715 51339 325955", " 404700 102453 267651 47130 36375 293080 38180", " 9612 3232 381972 21164 1209 377709 279684", " 10400 50416 30956 109068 439660 204156 222171", " 857726 35708 23691 801804 1011 38055 53781", " 33069 392074 92901 8283 7448 14259 230109", " 17860 705 107331 83356 5005 7011 923356", " 102051 65608 179091 368763 111755 6549 224715", " 5096 629617 80427 206272 29729 24804 42483", " 54060 49755 992 139611 432228 16275 260813", " 30955 201483 85885 584260 166804 119948 99940", " 30163 33372 95425 4420 461652 649412 98500", " 10919 42955 51947 42380 337820 247908 55315", " 852 14160 496141 12580 46011 459360 469498", " 121275 10988 131532 44405 15087 61 41140", " 3333 14980 3619 557866 23408 210740 316780", " 305655 586980 4300 6771 62115 28024 56780", " 194704 268252 303 486164"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 84;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> stick = {"202461 29835 939482 109395 29212 15604 6699", " 12555 932260 141484 111662 63460 99446 80500", " 61204 127995 6555 150748 98092 226299 216435", " 70347 545380 116885 3741 544808 491202 820", " 185947 1995 50575 9628 386868 44620 155", " 81073 700 411820 319708 1947 138587 404012", " 78813 8715 318915 1196 324268 31755 40755", " 64515 379809 88059 1708 40348 22780 864040", " 87508 12035 51207 8732 26715 61755 129580", " 136675 170461 114699 243908 233109 28 550184", " 27939 324090 59187 15308 246820 320835 152905", " 468 150699 105555 188071 879128 81532 137572", " 8928 632432 960407 52419 6148 24339 45", " 37084 396508 36579 117972 43492 26260 148949", " 289668 310684 293020 4700 172454 825484 7900", " 525 37080 147628 212380 807648 254421 2451", " 223660 85692 72076 291 13468 62828 521260", " 77740 911619 2516 7540 161787 40535 10395", " 201388 594944 8140 7068 595 219868 557848", " 297579 101019 692566 30388 43035 204820 103228", " 324795 84700 110260 370880 167522 3525 16059", " 358511 92 24411 232995 8211 30940 54579", " 111361 489895 94395 163540 5187 151515 44500", " 25899 779717 270893 1012 806902 555 138075", " 147 126325 78625 4988 854916 135604 102531", " 107859 275787 3381 268755 6075 371711 10731", " 295948 167475 62715 6934 50143 25347 304363", " 283251 636660 10540 213 318268 236379 82348", " 427420 843280 878896 170355"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 72;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> stick = {"186189 17355 205352 435 213 30459 104980", " 832711 1365 1892 220 61429 343875 131835", " 760930 75988 222758 305588 51 556588 4539", " 430068 380779 440249 35020 3772 1204 112539", " 225499 2516 8715 388985 219 127856 506702", " 583347 138460 33532 562588 141484 127995 161787", " 312987 318197 42028 243219 51041 6195 507159", " 62715 843189 34804 216435 16276 8732 100946", " 165817 40348 790959 101132 170355 416776 231340", " 18291 89500 6771 281723 158979 962903 344835", " 309099 192576 340226 156494 319708 110019 37084", " 3604 326015 10947 31395 791966 94395 272065", " 1005 30388 6555 5187 303052 150748 12555", " 839918 30652 94804 51339 40755 324268 45", " 308102 197620 64515 1995 24660 102620 538780", " 312828 5115 100947 83955 15555 260 201388", " 59187 285411 411996 2812 380436 35500 902801", " 428290 16124 308 35211 364185 16060 147628", " 7275 140 916769 396508 1653 324795 934946", " 44825 61180 633885 486891 14259 28 677332", " 1725 899142 487660 797385 538290 526352 42244", " 29425 81532 72219 13132 21 1012 131979", " 960037 944571 12460 688473 33915 513601 420185", " 279196 404085 169197 6100 4300 1221 648128", " 87508 544684 20 959470 94389 370829 69", " 342147 165624 306220 165664 2660 150662 764081", " 45147 2068 3021 481768 2132 826334 41140", " 57459 651 688786 72317 625411 167475 15052", " 320835 310684 52052 443288"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> stick = {"311875 74115 455124 252168 256760 100947 219905", " 110825 115116 253552 596316 14925 219100 5945", " 225620 1012 334371 134748 2508 319780 562792", " 16072 111340 219480 491184 388152 83740 22540", " 78155 361095 2483 490818 5355 20165 12555", " 6132 440865 283613 9796 63011 188993 105435", " 68363 45675 260828 13855 7360 3485 255460", " 617542 347844 284867 41028 88572 49749 918579", " 295868 30785 5253 41272 634982 25071 27176", " 227445 81220 721308 98007 6751 6347 91191", " 2397 19885 783830 65044 27468 320571 18260", " 49468 23316 57909 226855 11289 322595 74195", " 261085 16988 191940 162099 394796 63085 5211", " 335787 41860 90375 107100 3995 249284 160569", " 83468 390609 44895 23343 331968 93483 276940", " 287835 18748 24531 147828 70812 215025 164749", " 73688 56547 525628 21280 230535 466011 3103", " 241763 172347 214551 300468 3565 36735 399435", " 81915 41172 453568 312356 37037 736252 116885", " 45261 113091 44979 290088 9672 24003 159873", " 44619 18249 274659 145396 264355 43555 331016", " 16308 279196 43392 334399 253825 129860 339796", " 280635 51359 893304 1995 34780 82600 24095", " 583616 589548 85224 36716 20868 292405 47560", " 1224 11400 319240 253708 412683 400007 70587", " 5304 4543 1628 39125 47596 49725 116772", " 41108 173500 67900 59048 422560 41447 11172", " 213408 381190 19032 575824 9021 364875 18156", " 8732 78684 25075 403052"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> stick = {"2852 279027 364 426423 15555 158979 57459", " 18868 244316 16060 2516 94659 97271 6195", " 20564 435 64515 216435 141484 182854 30652", " 103274 144628 1155 2660 334180 170355 844941", " 292227 6771 309099 872089 120042 87508 251811", " 8967 395929 2805 809925 217055 18291 3772", " 83955 5187 108745 76035 244523 67373 3987", " 985676 126671 486458 258377 67348 1564 33915", " 35500 396508 306220 31395 733352 28688 538780", " 393731 221280 100672 915793 8715 654207 157108", " 265679 544684 4539 446823 163513 19847 511036", " 883840 35020 275500 305588 1725 350132 833230", " 27403 213 314839 216980 385033 466697 2068", " 340828 365019 138460 552352 355908 61725 128012", " 310684 7181 61180 979768 13132 279043 226717", " 123772 34827 31755 992441 109785 980881 201388", " 30388 40755 394680 324268 479248 1827 343875", " 622136 74451 138535 778500 250708 222220 148681", " 27 144795 17355 33532 150748 196244 171985", " 695026 426192 59187 93596 333576 785032 4300", " 723580 146292 452251 512773 371085 213265 982701", " 304695 256368 435437 3315 37084 693342 312987", " 817916 94395 219 627 251739 13468 131835", " 14523 161787 357856 794272 630414 212520 264420", " 686280 958892 231577 218365 101132 790564 84961", " 760420 15052 75988 269169 827948 62828 636716", " 185036 35211 25765 164768 324795 655347 384364", " 52485 28875 988398 116880 803921 24373 5115", " 764263 672649 562588 238857"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> stick = {"612436 210740 176979 227715 245791 1767 8643", " 304896 2144 70975 446251 234596 61915 416760", " 650760 4144 2249 273132 43368 76368 148680", " 140740 221815 196348 80595 381700 79875 505680", " 36579 2453 41229 45092 4125 165435 60916", " 463795 21243 76540 650804 14632 108031 956643", " 375243 26260 133450 2231 33069 202516 40812", " 54735 336651 19045 75845 44571 213588 116435", " 140988 231093 142443 430360 173236 39676 145668", " 218277 142635 35433 87567 42380 229620 225387", " 62015 24435 1872 674472 54708 99940 124915", " 33892 298519 19276 15732 409148 14532 263523", " 9669 380900 4440 30856 701688 280108 11895", " 45076 120988 14541 80652 138169 106015 71148", " 4437 304612 182091 12580 262361 126260 6405", " 576220 204035 19635 17755 413969 4233 311892", " 91448 26860 17739 64647 181279 143812 152932", " 163248 482148 31323 51336 100084 95931 378120", " 375353 157235 212160 164960 5015 25908 198759", " 154869 801804 6699 537134 7268 317289 89628", " 332324 87249 25521 286275 11284 69377 5725", " 33655 13145 315736 427188 40285 200208 269519", " 6532 14880 370744 370668 24804 418876 70875", " 62212 36955 46360 104151 32163 227920 65688", " 46155 238931 28165 307615 218816 80500 97680", " 345231 672060 27473 146320 59160 622815 113611", " 213760 89187 884922 27048 98532 2420 21679", " 162864 16132 80275 376795 393049 15725 278588", " 102051 71795 1749 51947"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 86;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> stick = {"603840 27265 396180 8640 604468 36672 25452", " 7384 338691 140748 327305 41028 63085 120741", " 114400 3317 264771 519800 113035 8172 87505", " 187480 88068 6993 260865 166385 31892 38591", " 289668 81872 113960 10731 56100 22440 591914", " 132399 362806 12089 9881 5709 37101 49200", " 37672 55335 317471 146188 2451 409072 258955", " 12035 946651 234472 99057 37785 181815 49389", " 32361 31672 213274 46795 51712 60140 71508", " 22100 221672 168795 877128 269236 828 4060", " 115115 375277 406371 240108 15428 240285 18683", " 62205 131835 11772 36835 28200 14325 134620", " 8965 139551 454812 223720 54735 142748 126321", " 41376 434612 85692 13611 80487 80132 17751", " 242652 298820 96460 81508 7359 10199 784", " 549917 5675 597520 700 17236 101032 7240", " 201929 9840 5244 33176 12469 389865 360338", " 389635 114460 991546 9360 12719 411380 166875", " 362523 14445 276740 21463 415648 921796 57268", " 160461 303405 650829 40480 76323 95608 28475", " 8140 603756 144092 70812 108152 59712 129748", " 152640 2337 343052 12168 143621 41109 82425", " 24871 66675 94752 7557 300 375240 72105", " 101959 66243 52155 179949 12040 15489 311875", " 51205 136675 10455 181424 267441 180195 143871", " 312221 60639 86691 318681 398192 299715 32620", " 247420 473535 104175 165100 747102 723417 448120", " 169548 428421 25676 218120 57435 432724 580948", " 543240 7644 8791 324118"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 86;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> stick = {"19908 4420 247084 792103 35787 29492 1131", " 2548 42195 521260 301174 94395 418847 406684", " 297579 10731 87508 8140 24411 28 521486", " 121195 52419 12741 919093 515942 135604 4988", " 1947 253659 14980 37995 1995 22780 9635", " 97180 9435 319708 40286 416647 2013 131472", " 338660 15580 98787 30388 1012 15604 96940", " 44571 2068 40348 886757 12555 661100 16060", " 650612 27133 2332 633727 668283 34419 361035", " 83980 75075 99031 172131 30940 300548 44620", " 96292 109052 194620 6549 94659 18765 609482", " 453172 340 11115 631380 75484 23331 835784", " 6771 167475 655180 61180 3700 2301 67731", " 29260 7084 3069 3813 216435 325955 2760", " 398337 670999 2325 20619 89908 127995 156220", " 116348 4851 21412 454060 25347 439235 909", " 42940 7420 1035 87429 99484 850115 243100", " 23187 293020 35211 985565 2451 222220 700", " 10011 435820 324918 5060 21580 201388 45", " 257187 2091 386715 390775 569499 417252 459484", " 74732 415237 378288 20995 150699 716856 122187", " 222987 460 31828 189 320835 14691 77285", " 113355 6555 381700 957387 208684 242451 139635", " 2493 96555 264909 147628 129580 360932 35475", " 205335 182091 195 70347 136947 40755 81532", " 429 16684 4611 12220 119739 131532 781726", " 18291 206081 327878 780037 140740 238804 50052", " 748 8715 62715 8732 61204 105531 35020", " 609579 444935 327221 233109"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 76;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> stick = {"4828 52419 521260 441387 76035 92 732508", " 781572 370252 251739 664101 2301 150699 92235", " 68908 17355 222220 35211 458856 827699 29835", " 289668 740645 45147 345932 48425 41511 34804", " 157108 35020 391468 14259 2132 4180 2013", " 36340 27939 6100 51339 97300 343175 348388", " 3885 82979 418635 485669 7275 7068 260896", " 99484 15580 33532 14355 13406 32548 1180", " 3741 11739 318915 293020 16060 83955 138075", " 114401 12035 41140 6195 94804 104980 75988", " 103179 94659 62715 223660 61180 613971 247084", " 77740 46659 279196 3381 150748 257187 551240", " 226299 129580 212380 387020 7900 297579 96940", " 28875 155 158137 320835 459484 525 187060", " 6555 854977 110019 486156 170355 82681 37044", " 319708 10540 5612 342147 375340 35787 809873", " 342293 468 106331 562588 611976 658676 1221", " 840369 64515 176774 30940 132455 33189 136675", " 36195 147628 24477 388033 324268 291015 18868", " 324795 253659 595 67348 213195 101019 18291", " 870592 1581 581464 100947 186200 85692 10947", " 68068 59232 68 167475 24339 33915 131595", " 119739 34419 2739 546690 42028 236379 19875", " 107859 2852 295948 157267 734750 298947 15052", " 103228 243100 3604 16684 472341 3315 1155", " 140 122187 15308 294065 40348 980 197788", " 411820 84700"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 68;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> stick = {"518987 684618 286760 137632 20564 138460 68", " 699284 62828 72219 243219 303729 289893 188559", " 1100 75 435471 51339 16060 322385 75988", " 260 76035 605240 627 1155 306220 162480", " 216245 150748 324795 64515 3021 170355 220", " 393720 880352 63263 973169 840819 233680 435", " 4300 6100 188001 237513 79449 507744 517907", " 6195 55055 34827 375145 848548 635712 57459", " 578764 27 835242 279027 69 395742 277704", " 223517 604309 998256 2805 548731 136278 660546", " 900531 329148 183711 651 365160 84584 3772", " 231340 26499 942261 542227 16660 203633 2852", " 254777 33915 181125 415027 139539 144795 936528", " 658751 332922 538780 21664 104980 256852 309099", " 459842 51 219 2379 6771 308636 151016", " 251266 324268 670729 20 35500 650956 12135", " 141 17355 158979 35020 31755 483144 102084", " 610843 1564 957712 140 302659 400160 14259", " 198931 355933 2660 4539 215854 3315 67348", " 447539 221041 332157 409332 562588 41140 61180", " 859938 100809 89500 15052 677352 112539 931234", " 323340 931296 45753 63220 364 482828 144628", " 181378 255249 721566 292077 35211 211281 772358", " 242740 13468 21 33532 856422 126351 364850", " 12460 34914 28875 18291 376941 772297 552147", " 18868 391920 234370 423108 809634 332253 110019", " 639390 930952 197620 185036 557732 1827 1221", " 689118 789437 30459 710028 138580 487699 462885", " 682960 965452 384364 308"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> stick = {"72721 797922 223660 477638 409279 332948 2739", " 29835 1605 3525 241732 3700 9028 64515", " 144493 125475 651 105555 952597 7275 7900", " 222745 371812 172131 189 5115 6765 823360", " 6555 632332 27939 94317 101019 324268 805291", " 165106 20492 33915 315 140740 2860 4420", " 18291 31395 13132 3381 692056 85262 988", " 18673 26715 803980 1005 334478 232995 2132", " 435820 318915 84700 6771 244035 44571 236379", " 2812 288167 52052 139768 3741 109252 435252", " 400642 10540 165923 133036 30652 2835 236213", " 323950 9628 12772 525 235531 174435 14355", " 102082 293020 75988 630325 82475 915 266613", " 157108 3045 69 226299 82348 559436 34875", " 226943 30940 531193 422188 14980 16060 397155", " 380731 337421 52419 167475 582689 68068 2668", " 1275 83955 319708 4851 344061 182091 170355", " 13629 101132 134692 127836 303291 360057 17355", " 295948 333659 985544 124743 6549 806671 219868", " 40348 103228 15052 6195 911118 131595 41475", " 147795 52502 92 348388 147628 129580 33532", " 1892 159064 5612 48312 32548 45315 1131", " 150748 13515 502849 163634 77740 212380 321837", " 15555 62715 920401 260 297579 1755 131835", " 3069 72051 138075 36195 6997 87634 390296", " 570000 538534 365999 35020 1748 24339 340", " 150699 15308 521260 4869 4300 81988 1180", " 381700 176115 1365 97180 6052 42028 107859", " 403052 151827 271032 31108"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 68;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> stick = {"274924 370875 34715 307885 40348 12220 315", " 46979 88059 12700 875470 117316 8652 532", " 17765 464824 422583 320835 338140 29260 12972", " 2943 124 98643 18228 26532 44895 19635", " 8845 454443 142569 160300 20355 5883 3861", " 1395 163540 411700 9052 508 64515 150748", " 376987 137572 699830 6148 473148 77979 30099", " 9860 9579 115479 32195 7480 453568 1683", " 45724 106795 70059 566365 6916 16445 1629", " 42795 454060 43492 774263 69460 837390 342916", " 1275 158763 8155 542353 319708 62715 331075", " 82348 6493 555 338043 360251 624609 105555", " 80 202461 208257 9628 62212 467260 78287", " 82585 36579 85692 141274 3476 74639 76715", " 147628 1599 4075 698557 80595 168319 179139", " 32763 85 36340 13629 301371 12483 243100", " 52826 168800 26715 1148 568789 252676 5757", " 1708 10395 595 61755 170355 253659 324795", " 2835 215644 369005 324268 988 5576 103179", " 177100 14691 2025 2968 7068 454499 195552", " 266264 3724 443611 11956 97300 146224 371163", " 957 67731 81988 16340 230535 46659 4756", " 15549 46092 240260 3525 26607 9243 365224", " 213108 233508 187060 750280 2380 47260 189192", " 4611 147700 653268 20020 468 29892 2668", " 3612 107117 24940 136675 167475 28059 225348", " 34251 907753 49790 13761 11739 80500 12035", " 35847 397139 76905 59048 39 82251 1485", " 11972 225411 724718 41132"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> stick = {"80595 35020 2812 406561 480241 131501 88059", " 14980 110260 7275 43035 927828 5115 463220", " 1196 34465 30652 4420 513616 94659 317140", " 853407 423163 97297 28875 861 99484 59187", " 44500 965299 647036 163540 44562 23745 247084", " 111873 8715 80500 57316 6549 144093 451033", " 101132 12243 941329 570436 11972 6771 580317", " 165 94395 1725 121619 62212 42028 182684", " 940660 18868 312987 25347 688644 203973 49179", " 15555 135604 1155 37084 161787 109395 1276", " 620 195267 67348 459484 1892 26260 357", " 380851 251485 243908 16356 29212 76035 9676", " 381700 26643 19635 491732 140740 906527 2068", " 114699 122187 2852 999315 544999 6699 45968", " 30388 324268 932112 268755 449979 290019 591417", " 35211 5763 76715 180275 234916 144628 232847", " 36579 6075 559562 31395 386240 3069 147", " 413440 3243 56316 202461 56465 509740 35787", " 76 201388 356360 417193 95800 765250 1365", " 182091 2516 542745 5084 310684 540952 70347", " 801637 604073 28060 404012 16060 862334 36909", " 95763 54579 897694 5187 141484 61204 23408", " 527716 532 257187 16684 44571 18291 554904", " 150748 973989 411700 1659 185505 87508 143319", " 117325 3315 163975 123820 908594 245032 2013", " 1947 1395 874361 98092 64515 272163 15604", " 13132 61180 668028 170355 145299 211695 16059", " 25276 284380 2163 7540 326525 376329 131835", " 2975 40755 222220 669544"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 64;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> stick = {"24339 187060 77740 462444 442532 562588 50499", " 244915 350050 1221 256004 147212 6052 103179", " 42940 140 57133 687000 121204 221835 306220", " 10492 751632 408289 15580 35500 10804 112910", " 76035 18868 2301 439203 380372 57316 94715", " 441951 42195 129580 134692 89908 176115 7275", " 25899 310560 315 51 41140 317781 61347", " 21228 272163 158979 52419 9435 26643 76", " 19947 354844 332948 37105 26555 539216 297579", " 2091 219 31828 150748 3315 25276 137741", " 254904 313159 143779 285443 293020 1548 36340", " 144795 397155 513132 4539 10011 2852 124347", " 371812 9676 170355 12772 31395 96940 521260", " 95763 1581 1525 12243 93539 343343 46659", " 250728 129176 2660 13132 527716 481263 386715", " 15555 2860 131835 237805 6765 243100 293252", " 64515 30652 12317 234916 23331 7420 147795", " 319999 57459 3741 454060 194076 81988 84529", " 67348 1612 226299 150699 7752 473925 119739", " 101132 324795 259548 51339 11739 332148 76178", " 144628 3675 343875 101019 4180 28875 988", " 1276 34419 253659 716128 727188 51604 960418", " 5763 2835 2668 212380 184907 219604 27795", " 7900 275892 158508 460 720657 41475 357", " 7315 2163 41607 13035 96555 305588 961052", " 6100 836837 5084 56591 435692 26572 306458", " 3243 105357 324268 724152 80524 1275 97300", " 915479 30940 42028 150535 138460 104980 353282", " 300548 21580 14259 995734"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 72;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> stick = {"147795 22557 5452 31892 6164 952 78892", " 376540 93290 1275 300015 76612 284172 531072", " 178012 271492 20661 208684 2668 49780 5005", " 2628 338043 46148 24940 701998 936332 31995", " 324268 240260 324644 429123 91635 109145 136947", " 82467 75484 1965 98787 2852 41283 12035", " 23187 159 15604 19992 107823 39867 117", " 62620 119255 76035 128019 297092 82251 3476", " 24100 44 226781 3740 45724 59235 578452", " 375243 232628 332948 3795 40228 29928 10032", " 18172 673699 2373 28875 45076 110236 16985", " 7995 34444 495 792143 595 3075 13755", " 51040 414460 52155 16779 406636 39215 39820", " 5236 18868 319708 7252 136675 22015 133556", " 366602 170355 3813 12700 5757 180195 248200", " 111891 43155 5473 8468 118420 228021 18939", " 62828 336436 12267 116715 41236 203619 13083", " 114165 110523 17980 20235 11811 332324 51528", " 50828 40348 81988 172227 861168 14308 554604", " 320835 274924 13629 56507 12595 7068 64515", " 14145 1869 95361 187180 121899 142443 17181", " 868 61204 13677 3315 8235 150748 306075", " 215860 135604 67348 70347 4495 30955 61388", " 85692 1972 20475 17427 180675 147628 581572", " 79756 98643 72100 351915 558990 18632 146188", " 18915 903277 301371 2835 370605 32956 9951", " 31755 78195 25347 85899 473632 70395 468", " 549038 59619 9612 62715 299765 18676 1400", " 7084 263140 167475 6844"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> stick = {"17787 221120 200500 342147 58308 33532 290532", " 106795 208393 80181 369005 180675 67875 145", " 20995 178012 54315 389603 105555 146835 301499", " 9435 131532 2585 81532 30572 227448 612844", " 1725 297579 7683 18020 31995 422236 107525", " 181227 67083 696106 8732 170355 115 10120", " 14508 40755 61347 27552 150699 28060 82348", " 127995 5372 250816 139612 49179 9455 45147", " 15052 408 16472 123820 866123 176459 279196", " 78892 1288 64515 187480 143632 92637 294483", " 100947 124347 439203 6195 521260 17480 51308", " 226352 79060 30388 42028 160105 267441 46092", " 381484 59885 11289 91191 6612 703913 597520", " 225348 150748 24675 118636 77285 158763 117316", " 1995 319240 6916 22908 274155 4173 4964", " 21483 87508 283968 74772 8845 10152 65195", " 32763 27244 38688 56156 644644 300548 34615", " 7548 53932 12555 17355 219604 297092 9635", " 2068 525996 176100 1659 9717 232995 4011", " 69069 79815 8415 283632 484880 780668 147828", " 2875 99526 8652 293020 89908 7449 21027", " 91635 18315 1012 230044 9628 129580 18644", " 206787 107523 12155 389385 51604 293755 111215", " 269196 87987 121204 284380 190684 427626 255", " 42195 975273 11165 53795 74883 371163 50052", " 7275 64684 145299 98301 19092 5439 31828", " 1892 509455 219868 200548 26715 8715 9845", " 143871 33915 34804 96555 295711 342916 437248", " 75988 21280 19908 94804"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> stick = {"44500 4539 344835 2805 204820 73051 135604", " 24339 30459 306220 110260 70347 765610 309099", " 28875 101132 435 31395 254421 461403 797265", " 2516 25347 54579 33532 1012 18291 21", " 161787 257743 511270 7540 31755 20 281496", " 324795 23688 646573 2860 12460 192600 305588", " 28 509152 342804 30652 16060 324268 21879", " 791163 303052 796450 645 15052 237211 636897", " 11417 101019 87420 858919 30954 77740 35211", " 236460 212380 238804 378812 112384 7900 1947", " 350132 719443 153925 498889 907948 544684 131835", " 310684 158979 61204 136947 157108 450543 538780", " 15555 327645 672307 67348 380234 320720 138460", " 620 154605 37084 231340 83955 456844 382780", " 144795 2660 583043 1995 150348 147 19488", " 458080 8732 13468 343875 13132 3741 171395", " 179737 969183 5187 888408 35020 343207 8940", " 219 386804 30097 193200 337064 4300 18536", " 250708 75988 296584 62828 892165 57459 170355", " 45 89500 335300 583867 114699 7807 226299", " 102097 144628 43875 393205 548483 427185 138859", " 2349 179980 81532 20827 141484 365308 15604", " 746149 411820 220 338079 3021 61180 651", " 477728 3315 358587 1196 239039 314252 812", " 861 47859 213 127995 150748 112539 94659", " 3772 6195 6771 222220 562588 76035 504141", " 59187 357311 312987 12555 16059 17355 221503", " 245018 18868 35500 396360 382232 2201 5115", " 64515 243219 670772 33915"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> stick = {"54579 4539 164255 51 218841 68 403446", " 1012 114699 231340 545264 324268 226299 44500", " 911071 257868 144795 300387 847775 243219 688644", " 121989 170355 421621 217783 138460 21 6195", " 72219 1365 540545 2379 14259 197620 936771", " 948964 318092 7900 746392 28875 344835 309099", " 144628 7275 101019 174603 281392 2516 89500", " 75988 86449 182083 435596 150748 538780 30459", " 232339 2860 462092 562588 795559 17355 41140", " 607849 1995 365075 3772 2660 374954 768886", " 35211 6771 2349 35020 303052 3315 59187", " 35500 98945 3741 641504 312987 1892 15052", " 620 24339 246864 98272 42028 757828 219", " 77740 64515 5187 42453 276250 33532 806208", " 107908 158979 397224 20 2852 3021 16060", " 96801 4300 1155 47959 798376 260 860516", " 28 689998 35448 63220 254421 110019 310684", " 306220 37084 241963 165495 250832 1221 76035", " 33915 16059 110260 141484 83955 220 45", " 140 191330 81532 141 139539 323542 57459", " 134694 578506 1100 6100 553732 82276 594844", " 175263 51339 50924 212380 246308 150876 8732", " 443415 132441 12555 435 18291 559816 861", " 26499 157108 201189 403664 876954 18868 127995", " 204820 411820 324795 293509 138580 161787 503732", " 69 352226 227038 544684 982937 242740 67348", " 582116 236280 1181 16660 77775 12460 522295", " 767470 112539 104980 897751 651 181110 61180", " 213 481870 541057 7540"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> stick = {"19788 29315 334195 466164 18088 135603 164820", " 243747 288108 127349 76625 297485 71628 12596", " 22540 103075 315172 103140 163060 158468 12328", " 782808 141159 463712 315987 143148 274505 7011", " 94943 660222 490780 868213 147152 327845 3975", " 425 2156 120196 160324 399455 149787 2960", " 86112 152515 139128 475437 222855 158860 42315", " 13893 63147 6725 236292 208488 61388 369512", " 28776 593620 307064 164006 33217 173500 219505", " 162017 71295 68820 18172 86524 180072 564916", " 32264 90312 210749 53044 85768 462948 654724", " 120555 35035 16443 765559 14091 121735 468129", " 592240 175480 182988 127699 66531 21747 26931", " 11685 29500 67275 82715 166057 79929 355776", " 18796 32595 163236 35868 432677 20235 478815", " 68665 89268 1917 315951 168 259329 9483", " 6208 556608 103972 57909 80155 98787 359775", " 188727 180245 448876 230460 1740 107328 492428", " 99855 106808 6435 99588 196707 789 12093", " 90132 15747 13780 23187 978374 103415 24820", " 282735 165880 189007 122428 189507 299804 6165", " 8385 34580 57855 8372 63395 503919 5876", " 291468 45375 75484 7995 314940 51603 10775", " 34161 120467 267243 92568 252651 236342 417965", " 58072 136325 1701 208684 784420 317704 33288", " 147004 7469 303316 59 42185 10023 84227", " 853080 78453 201392 5543 25259 19388 25252", " 676092 216195 10653 433771 350172 88076 466011", " 333245 59364 59019 10396"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 86;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> stick = {"10011 10492 30940 27939 70347 181934 1100", " 1035 201388 94395 170355 31755 140740 137883", " 285 7540 37995 350132 860179 10731 3675", " 52419 134717 274155 23331 33069 293020 556706", " 258984 913307 180195 318915 1180 3795 62828", " 819597 182091 223660 112597 135604 22225 317781", " 136947 200548 305588 650612 16059 635864 54315", " 2091 14980 122409 81375 31395 31850 820833", " 714635 710832 460 452501 2325 241055 11115", " 41475 2379 109052 138075 53404 170115 52155", " 365308 283797 700 1725 343875 406011 29835", " 366849 902171 204276 562588 176115 60483 596068", " 15604 218027 24675 134692 10540 868 51308", " 12772 539388 253901 103228 93840 903868 152448", " 22780 21580 150699 324795 97552 397155 6549", " 62184 15308 453172 15555 84700 24411 96292", " 44620 107859 629628 72219 87508 324268 525", " 63220 381161 42940 30388 170568 21412 32409", " 129580 521260 114699 295948 40755 109829 64515", " 6052 1947 44571 139635 146188 16660 29492", " 92 61204 54579 501828 56256 195 101132", " 44500 5372 31892 30652 371812 381700 182853", " 380835 2739 5085 238804 2332 87309 95871", " 8715 8140 565506 297579 758302 7420 620", " 138580 26572 113355 35475 2451 2068 861", " 6765 27795 1612 150748 236379 3381 748", " 885201 143361 754126 274680 26499 13035 25347", " 110260 450795 233109 912069 131835 147212 141", " 45799 554450 4420 724224"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 72;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> stick = {"1300 339915 587734 101835 150195 2332 69148 140 15", "052 22755 176692 442035 3772 2332 435 13485 51339 ", "9548 231340 49125 112539 276212 71925 6100 126868 ", "164715 9548 437980 2325 89500 55948 11115 58275", " 252315 131572 58275 435 197620 129315 252195 49", "125 339915 18525 3772 2595 819 131572 2325 10183", "5 8228 40132 456548 104980 213572 252315 188235", " 30459 6195 98252 18645 456548 6195 12628 22035 77", "0808 89500 112052 203812 253275 27692 982330 61", "732 339915 8932 2595 128428 30459 55948 374108 6", "9412 18525 64875 14259 203205 15052 428835 41140 9", "8252 6195 89500 40132 15052 203812 69148 128428 14", "259 51 18525 14852 2325 618772 293188 213572 401", "32 71925 8932 32835 437980 129315 6188 293188 1882", "35 17355 11115 210795 69412 741748 267195 374108 2", "93188 695955 131572 9548 69148 545453 41140 72521", "3 55948 233932 51 112539 253275 2565 13635 713012 ", "442035 3772 159068 692452 429195 27692 55348 25", "65 4012 2595 101835 176972 243219 231340 853076 58", "275 22755 112052 374108 435 442035 911360 428835", " 243219 2332 253275 3772 203812 49125 22035 1882", "35 61732 126868 276212 276212 308739 164715 4224", "99 110019 110019 231340 150195 112539 41140 252195", " 2565 126868 14852 150195 17355 12508 127148 2931", "88 984555 203205 243219 140 1221 61732 14259 44203", "5 437980 58275 27692 878475"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> stick = {"23828 356308 27692 276212 1300 74932 442035 227", "188 1221 101835 30459 252315 21412 575452 140 1315", "72 12460 529268 49395 8932 529268 140 18532 3563", "08 252195 322995 2565 215355 14259 126868 984555 2", "10795 723769 332788 428835 339915 2325 713012 111", "15 442035 110019 21412 11115 18645 227188 19123", "5 11115 102315 37995 4012 49395 51339 150052 126", "28 437980 437980 456548 18532 26935 339915 356308 ", "692452 215355 2332 61732 190299 55348 55948 569", "071 4012 640927 64875 6100 648795 529268 6045 713", "012 22035 112052 648795 55948 69148 164715 197620", " 164715 128428 648795 128428 322995 437980 37995 9", "84555 1221 27692 69412 248452 252195 12460 3664", "36 2325 51339 456548 692452 442035 252195 20445 ", "18525 23828 41140 203812 101835 159068 128428 2", "03812 49125 20445 18532 1300 319060 428835 101835 ", "197620 3021 3885 706603 319060 213572 150052 3399", "15 18645 117572 11115 30459 3021 772285 98252 6914", "8 191235 129315 2565 8932 18525 159068 191235 4", "9395 12508 6045 13635 51 159068 215355 227188 71", "925 895697 131572 428835 23828 13635 422499 276212", " 84940 422499 203205 6100 220 18532 878475 6045", " 422499 190299 104980 112052 89500 27692 75308 ", "252315 231340 127148 18525 243219 14259 51 3799", "5 88325 203812 150195 12508 12508 379415 41140 30", "21 2332 150052 112539 150195 71925 47259 276212 2", "20 456548"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> stick = {"422499 692452 137020 506620 252195 243219 131572", " 687939 244180 110019 188571 244180 14259 252195 1", "37020 231340 64875 117645 18075 319060 231340 68", "7939 6100 14259 348411 5325 963028 133509 18857", "1 93141 348411 437980 812595 632260 227188 54435 7", "79812 348411 2565 2565 549268 243219 12628 412132", " 549268 261052 289731 140 159652 8932 117645 122", "1 741748 549268 347115 26228 282700 110019 691900", " 356308 104980 21315 422499 133509 289731 22035 ", "18075 197620 235155 215355 240572 322995 22035 610", "0 203205 276028 231340 104980 200595 104980 93141", " 3531 282700 18075 1221 252195 146091 265780 22", "6060 635835 197715 424780 265780 243219 22372 9", "84555 14259 356308 203205 412491 775971 752115 ", "424780 437980 110019 922131 1300 235155 292 2135", "72 347115 164715 632260 131572 2565 133509 276028 ", "55348 775971 21315 385588 12628 6100 632260 129315", " 222460 775971 5180 51460 137020 235155 480675 ", "8932 779812 200595 215355 41140 55348 188571 226", "060 222460 433155 922131 481971 292 136851 13685", "1 235155 412132 47259 692452 433155 126868 24321", "9 226060 22035 140 8932 227188 276028 93141 11764", "5 26228 514228 131572 160149 12628 203205 7275 ", "250708 595660 136851 164715 168340 452235 215355", " 131572 55348 506620 385588 350140 480675 398118 2", "36451 356308 51339 129315 244180 51 190299 250708 ", "506620 922131 51460 480675 265780 69148 250708 262", "28 282700"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 98;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> stick = {"227188 101835 71925 30459 758765 18525 112539 5142", "28 529268 203205 71925 11115 449595 12628 11115 69", "148 131572 7755 64875 110019 268178 41140 442035", " 1221 21412 6100 22035 692452 984555 7755 692452 ", "422499 12460 252195 12460 2565 12508 89500 713012 ", "213572 203205 437980 2565 49395 210795 13635 14814", "8 12628 55348 101835 21412 248452 128428 18525 1", "97620 339915 127148 150052 159068 47259 18532 1", "31572 10492 319060 312052 127148 322995 339915 ", "140 101092 422499 2332 142275 215355 6045 27692 ", "112539 37995 452235 12460 589210 984555 55948 407", "55 159068 2325 30459 37995 248452 452235 41140 111", "15 248452 12508 18645 22035 203812 70755 315172 ", "37995 437980 49395 319060 13635 514228 24915 1501", "95 243219 13635 112052 27692 190299 2332 51339 18", "532 18525 22035 190299 692452 142275 18525 19123", "5 159068 7755 142275 713012 101092 356308 104980", " 514228 197620 227188 128428 1300 69148 1221 42883", "5 215355 140 30459 30459 101835 104980 24915 18", "645 1221 315172 950675 741558 210795 12628 140 ", "422499 51339 927848 14259 2332 18532 315172 42883", "5 142275 110019 2212 984555 98252 213572 2212 11", "2052 210795 14259 8932 4012 51339 89500 12508 3", "64676 437980 456548 51 231340 6100 449595 17355 9", "25059 112052 648795 449595 41140 18645 49395 31", "2052 129315 6045 27692 203812 126868 98252 127148 ", "164715 276212"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> stick = {"252195 104980 244180 243219 480675 775971 69190", "0 190299 412491 215355 433155 5180 104980 412132", " 160149 41140 424780 5325 93141 322995 104980 2", "6228 319060 231340 133509 265780 5180 506647 14259", " 452235 231340 635835 133509 226060 322995 2657", "80 160149 51339 424780 595660 984555 691900 2260", "60 779812 1221 741748 922131 12628 197620 59566", "0 140 6052 289731 18075 47259 514228 8932 188571 ", "456548 164715 236451 752115 289731 213572 22372 ", "51460 93141 549268 160149 442035 282700 1300 11", "0019 93141 164715 963028 348411 200595 110019 3531", " 322995 12628 922131 412132 203205 692452 227188 6", "35835 632260 2565 456548 227188 22035 1221 131572 ", "779812 137020 6052 456548 215355 137020 55348 89", "32 741748 168340 265780 276028 514228 480675 4819", "71 140 159652 131572 356308 3531 51 289731 51339", " 350140 442035 348411 437980 203205 506620 252195", " 6100 200595 481971 292 21315 54435 282700 2565 ", "282700 437980 356308 161152 412491 549268 13157", "2 282700 692452 188571 190299 252195 276028 4224", "99 51339 292 168340 129315 244180 8900 137020 1", "17645 261052 215355 292 356308 812595 243219 51", "4228 22035 126868 117645 133509 922131 261052 41", "140 244180 480675 422499 164715 21315 188571 12", "9315 752115 136851 41140 55348 197620 433155 24057", "2 687939 692452 168340 452235 635835 775971 839", "882 243219 18075 741748 110019 240572 424780 21", "315 506620 26228 64875"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> stick = {"775971 203205 131572 243219 289731 89500 41140 ", "117645 110019 41140 30459 190299 235155 319060 2", "13572 350140 243219 984555 922131 506620 595660", " 452235 26228 481971 18075 250708 231340 252195", " 243219 93141 984555 137020 412132 6100 54435 1", "04980 292 126868 22035 963028 347115 112539 200595", " 322995 51 549268 136851 140 437980 197620 18075 ", "250708 632260 779812 922131 164715 131572 104980", " 231340 422499 5180 89500 160149 168340 691900 ", "133509 741748 356308 131572 200595 412491 89500 3", "19060 412491 775971 3531 14259 261052 1221 26105", "2 55348 26228 992349 2565 12628 692452 752115 3", "0459 226060 514228 691900 64875 549268 292 38558", "8 126868 190299 433155 347115 213572 144795 984555", " 55348 168340 635835 412491 231340 480675 741748", " 104980 265780 26228 276028 21315 22372 64875 2", "15355 159652 213572 775971 261052 506620 1300 2", "52195 129315 632260 160149 22035 437980 265780 42", "4780 319060 18080 481971 89500 41140 131572 931", "41 190299 144795 2475 168340 11228 452235 348411 2", "1315 159652 21315 8932 54435 240572 252195 5534", "8 112539 292 51460 133509 51339 14259 30459 51339", " 235155 635835 136851 110019 144628 452235 54435", " 101835 812595 227188 197620 14259 687939 5325 5", "1339 412132 356308 101545 8932 691900 22035 506620", " 112539 18075 595660 289731 385588 93141 226060 ", "159652 2565 160149 244180 215355 47259 5180 480675", " 437980 265780"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> stick = {"4012 6100 18525 8932 437980 82348 226060 11115 57", "2 23828 1221 27692 235155 104980 231340 51339 1647", "15 775971 243219 878475 112052 69412 101835 6924", "52 14835 197620 456548 18075 89500 21315 9628 4", "1140 26228 252195 190299 160149 456548 3525 1807", "5 41140 11115 58588 41140 26715 2565 361035 292 ", "210795 161913 164715 22035 452235 422499 575452 2", "26060 356308 51339 102315 984555 30459 54040 26105", "2 231340 140 64875 1708 775971 49125 110019 322", "995 252315 6100 319060 252195 692452 811966 9628 1", "3635 82348 168340 51339 12628 112052 11445 26105", "2 203812 54435 356308 514228 14259 47259 49125 23", "25 168340 5325 1300 110019 69412 12460 43508 47", "259 12508 7755 60915 127148 514228 129315 20445 ", "164715 11115 12508 2325 14259 2325 131572 292 104", "980 18075 21315 51 22372 5325 252195 11115 14835", " 110019 58588 422499 775971 26715 252195 64875 1", "05555 1221 27692 126868 30459 226060 227188 878475", " 126868 984555 129315 61732 1221 12460 102315 1", "2508 61732 2332 243219 104980 112052 27692 203205 ", "107640 126868 437980 55348 133509 26228 30459 98", "4555 55348 160149 18525 2332 18525 215355 81795", " 437980 12460 129315 946275 8932 452235 252315 2", "61052 8932 30459 213572 878475 101835 112539 20381", "2 422499 692452 252315 137020 69412 140 982303 2", "2372 456548 140 319060 2332 575452 168340 322995"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> stick = {"265780 2332 2325 197620 213572 14259 110019 16834", "0 26228 356308 852430 231340 101835 817206 210795 ", "51 231340 6100 632260 18075 725800 775971 21357", "2 168340 112539 422499 6100 9628 101835 339915 ", "61732 18525 89500 137020 5325 231340 197620 12508 ", "55348 878475 452235 110019 47259 112539 227188 7", "755 210795 3525 136851 200595 437980 69412 92213", "1 203205 226060 54435 878475 22372 140 64875 49", "125 322995 23828 2565 104980 514228 2332 452235 ", "456548 1708 281950 984555 137020 112052 252195 13", "00 452235 292 12508 197620 58588 1221 51 160149 ", "9628 7755 203205 102315 13635 716431 27692 1601", "49 89500 47259 322995 922131 30459 252315 1221 8", "78475 22372 456548 203812 11115 215355 3525 111", "15 261052 12508 21315 2325 514228 190299 54435 ", "21412 5180 12508 26228 322995 110019 81795 81795 5", "75452 133509 18075 54435 131572 129315 356308 632", "260 51339 5180 14835 7755 58588 203812 11115 2521", "95 14835 775971 89500 127148 575452 126868 27692 1", "36851 4012 30459 3525 485908 692452 2565 356308 2", "0445 210795 252195 2332 812595 164715 131572 57", "2 140 203812 265780 433155 294698 69412 112539 13", "1572 243219 58588 136851 22035 203205 2565 1708 ", "41140 412132 81795 8932 21315 319060 27795 1601", "49 213572 540434 508 265780 41140 575452 22372 126", "28 14259 4012 775971 168340 412132 514228 261052", " 159652"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> stick = {"24915 437980 18525 112539 89500 2212 6100 775971", " 15052 422499 150195 442035 159068 137020 1035 4", "012 248452 41140 748 51339 1035 465969 12628 3190", "60 150195 55348 11115 22035 6045 8932 17355 128428", " 1300 213572 14259 150195 210795 55948 110019 51", "339 69148 41140 17355 312052 12460 213572 98252 9", "84555 2565 692452 49125 21412 428835 648795 243", "219 47259 210795 21412 252315 17355 276212 203205", " 713012 737682 2325 209595 30459 101835 210795 2", "26060 15750 18525 529268 12508 252195 98252 41140 ", "2325 159068 339915 594720 203812 30459 195 21785", "4 243219 456548 126868 8932 191235 437980 243219", " 13635 49125 12460 70755 203812 112052 4012 23134", "0 195 37995 69412 47259 541228 98252 226060 6173", "2 748 140 30459 252315 37995 2325 51 748 49852 21", "3572 71925 984555 2565 4012 49125 18532 69412 1", "8645 1035 1221 112052 55348 15052 339915 159068 24", "915 49395 276212 27692 449595 2212 22035 339915 25", "2315 22035 456548 437980 862232 71925 156321 22", "6060 2332 112539 104980 131572 190299 133509 20", "3812 37995 356308 49395 2565 14259 6100 150052 ", "984555 127148 575452 442035 61732 319060 191235 2", "1412 878475 190299 422499 529268 197620 69412 98", "0324 231340 61732 89500 164715 276212 440572 51", "339 644642 878475 69148 55348 7755 22035 2212 42", "2499 69148 71925 8932 231340 1365 150052 312052"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> stick = {"8932 21 131572 101835 112052 140 713012 71925 21 ", "456548 3021 129315 14259 2325 14259 20445 20 10183", "5 8932 1221 69412 437980 6100 18645 1221 2565 69", "2328 55348 6195 220 49125 159068 428835 15052 12", "6868 203812 442035 98252 20 150052 437980 1035 27", "692 21412 18532 339915 71925 131572 4012 276212", " 437980 14259 878475 49395 140 81795 55948 66377", "5 71925 150195 51 23828 243219 2332 20445 49395 ", "8932 692452 12460 159068 435 6195 18645 69412 4224", "99 55948 220 164715 426857 1708 129315 22035 456", "548 442035 128428 1300 572 15052 575452 575452 21", "0795 112052 98252 164715 17355 3021 2565 529268", " 1221 129315 30459 572 1035 98252 231340 18525 ", "102315 3021 442035 220 18525 692452 81795 61732 6", "4875 191235 456548 37995 231340 213572 55348 17", "355 15052 422499 252195 51 243219 20445 18525 276", "212 150195 11115 22035 1300 206761 789640 15019", "5 252315 252195 23828 878475 102315 1708 21412 ", "6195 55948 159068 339915 1300 12628 227188 4224", "99 27692 3772 17355 55348 984555 6100 648795 51 1", "12539 2332 261668 2565 6100 20 529268 14835 155", "595 14835 140 648795 128428 23828 18645 112052 ", "69148 915979 58588 4755 21412 21 128428 203205 ", "3772 13635 89500 572 6045 14835 6100 385588 21 691", "48 127148 102315 22035 58588 37995 227188"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> stick = {"37995 101835 339915 12200 883845 140 7755 18645 10", "35 442035 58275 248452 21412 2565 15052 422499 401", "2 308 6100 878579 21412 8932 14852 150195 33991", "5 164715 231340 213572 32835 6100 456548 176692 ", "12508 339915 8932 437980 131572 8228 435 112539 32", "835 12508 70755 267195 18645 449595 1300 267195 9", "84555 197620 40132 127148 112539 618772 69148 3", "7995 3772 203812 106031 422499 22755 248452 3772", " 2332 41140 6100 137020 71925 188235 14259 21357", "2 203812 231340 14259 11115 435 312052 55948 5827", "5 6188 104980 140 1300 58275 210795 11115 197620", " 252195 695955 6188 435 13485 312052 267195 6195 2", "1412 558002 442035 1035 17355 3772 308 210795 1", "97620 449595 131572 213572 6195 312052 435 176692 ", "41140 374108 117645 14852 1221 6195 2325 15052 ", "984555 51 55948 127148 12508 15052 40132 692452 ", "18645 308 2325 456548 159068 276212 17355 13635 1", "59068 65212 110019 532948 98252 17355 51339 472", "59 9548 13485 51339 6188 456548 2565 69148 231340", " 9548 57428 2595 110019 14852 8228 37995 995561 77", "55 13635 110019 9548 188235 55948 248452 101835 11", "0019 1221 159068 276212 243219 275904 452188 7755 ", "51 442035 2332 8932 276212 449595 4012 252195 2", "2755 22755 58275 176692 1221 2565 46013 984555 32", "835 1300 227188 27692 984555 50908 422499 104980 ", "40132"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> stick = {"435 131572 40132 117645 6188 58275 13635 22035 203", "812 55948 12508 339915 252195 6100 248452 15052 10", "4980 6195 8228 203205 2332 428835 128428 6195 8456", "61 69148 315726 22035 2565 3772 159068 456548 8", "932 226060 71925 11115 164715 116012 2332 176692", " 618772 51 127148 17355 6100 442035 1221 190299 11", "115 984555 12628 203205 98252 140 713012 8932 2", "03812 1221 18645 2325 8835 89500 27692 267195 2135", "72 374108 41140 713012 127148 984555 28539 3283", "5 13635 40132 4012 231340 713012 7755 8835 8932 5", "95660 32835 210795 4012 32835 252195 2332 3772 ", "456548 428835 428835 112539 101835 890166 435 44", "9595 14259 435 51339 203205 5829 267195 267195 98", "252 12508 89500 55348 428835 8228 101835 2325 411", "40 18868 456548 176692 12628 58275 13485 2565 377", "2 422499 8835 248452 22035 248452 2595 350140 161", "955 197620 243219 12628 3772 692452 7755 190299", " 319060 13485 55348 449595 243219 618772 210795 43", "7980 11115 317492 2565 58275 40132 6188 618772 125", "08 30459 22755 456548 176692 695955 213572 14259 ", "8228 112539 128428 17355 231340 112539 7755 21079", "5 22755 346035 984555 4012 190299 15052 252195 1", "50195 98252 40132 442035 203812 9548 1221 17355 45", "15 442035 231340 110019 6100 2325 6195 131572 1485", "2 14259 131572 71925 437980 319060 41140 15052 2", "13572 16125 1300"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> stick = {"422499 27692 243219 1221 104980 319060 252195 2610", "52 26228 203812 210795 213572 2565 14259 8932 775", "5 2565 7755 437980 14835 126868 6100 64875 1892 42", "2499 20445 4012 51339 160149 137020 110019 322995 ", "437980 160149 112052 21412 226060 133509 227188 1", "8075 55348 265780 51 51339 164715 51 37995 1300 16", "0149 442035 181660 26715 265780 748 69412 22606", "0 224473 514228 127148 922131 21412 112052 102315", " 1300 11115 104980 41140 203812 26228 442035 25219", "5 388795 11115 13635 624937 456548 1035 81795 2032", "05 140 26715 265780 37995 261052 440115 2332 2382", "8 2332 112539 133509 102315 197620 213572 1221 5", "72 51339 203812 27692 127148 168340 22035 1708 10", "35 1708 452235 26799 164715 101835 190299 984555 ", "252195 748 210795 18525 12508 514228 203205 21357", "2 203205 12508 346915 27692 243219 133509 2565 10", "1835 64875 11115 49125 452235 922131 131572 8932 ", "21315 575452 18075 81795 261052 5355 632260 6100 ", "23828 319060 58588 984885 673409 252315 129315 ", "878475 231340 632260 12628 47259 2325 215355 243", "219 55348 3525 190299 572 356308 437980 18075 5", "8588 210795 82348 61732 9628 2332 263934 131572 ", "131572 231340 101835 140 6100 456548 197620 148", "35 12508 231340 13635 276212 104980 226060 47259", " 1221 18525 20445 26715 110019 775971 922131 8234", "8 112539 137020 1035 456548 276212 692452"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> stick = {"18645 2565 195 101835 2565 104980 276212 442035 1", "5052 140 12508 456548 47955 7755 6100 58275 8228", " 203812 165 293188 18645 713012 422499 231340 165", " 435 2325 449595 442035 276212 1035 276212 422499", " 984555 131572 41140 28 8228 14852 6195 267195 386", "308 6195 13485 188235 110019 131572 3772 1221 10", "1835 6188 8932 131572 18525 748 40132 30459 1120", "52 164715 253275 159068 14259 7755 3772 532 481", "506 692452 13485 27692 110019 13635 12508 532 1113", "9 30459 713012 69148 10492 2565 449213 89500 12508", " 51 889028 252195 51339 1300 937589 595660 42883", "5 210795 14259 127148 692452 695955 2332 648795", " 2325 13635 1300 41140 2595 532 112539 104980 43", "7980 253275 465868 6188 55948 618772 17355 748 69", "148 17355 128428 112052 55948 3772 12508 339915 51", " 18645 164715 6100 8932 71925 22755 128428 127148", " 386308 27692 51 12508 506771 8932 195 55948 110", "019 71925 248452 428835 58275 312052 150195 1035", " 11115 4012 618772 98252 18525 159068 11115 51339", " 1300 164715 6195 374108 12460 8228 267195 7192", "5 618772 422499 4012 233932 68228 437980 69148 23", "32 32835 253275 243219 435 708804 9548 8308 176692", " 8835 339915 2595 437980 51 748 37995 104980 214", "12 58275 267195 18525 104980 14852 40132 7755 18", "645 308 15052 442035 1035 70755"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> stick = {"127148 253275 71925 197620 449595 346035 231340 14", "259 140 984555 6100 69412 276212 150195 428835 304", "59 197620 69148 878475 197620 322995 140 713012 13", "00 443492 49125 195 51 49395 1035 356308 27692 203", "812 11115 55948 31395 12628 41140 49125 2332 2203", "5 126868 140 129315 252195 89500 190299 195 101835", " 7755 346035 493015 203812 252315 150195 356308 2", "76212 213572 312052 8932 142275 127148 973330 4565", "48 356308 443492 11115 18645 422499 190299 227188 ", "2212 12460 197620 1221 748 101092 243219 12508 422", "499 2332 456548 437980 248452 12508 61732 28 443", "492 104980 51339 64875 55348 69412 248452 1221 1", "4259 312052 55948 210795 442035 4012 2325 18645 1", "91235 1708 18532 55348 69412 445108 1300 159068 11", "2539 339915 203205 28 878475 191235 14259 575452 5", "1339 21412 64875 733692 30459 131572 504170 3229", "95 150052 12508 2332 18525 128428 89500 437980 14", "2275 2565 70755 22372 51 128428 112539 2565 252", "195 110019 231340 632260 142275 934589 13635 2107", "95 6045 49125 892353 346035 159068 692452 150052 ", "7755 6100 71925 1221 648795 339915 449595 984555 3", "7995 322995 692452 55948 150052 190299 41140 18525", " 2212 215355 529268 13635 243219 6100 195 315172 ", "164715 346035 18525 442035 112052 131572 150195 ", "11115 24915 112052 55948 315172 315172 191235 1", "12052 315172 356308 69148 7755"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> stick = {"51339 112539 3525 195 2325 9628 58588 12628 437", "980 226060 160149 292 47259 1300 26228 1708 12508 ", "1300 203205 26715 140 14259 55348 2332 133509 40", "12 102315 47259 195 11115 8932 168340 18075 46586", "8 49125 101835 276212 61732 213572 292 4012 1601", "49 26228 220 58588 4012 89500 51339 37995 13702", "0 126868 26715 1035 1300 442035 799603 692452 1", "221 13635 422499 203205 140 748 243219 129315 1049", "80 160149 456548 30459 51 49125 20445 197620 7759", "71 215355 23828 195 61732 203812 422499 110019 10", "1835 137020 40132 213572 514228 89500 21412 203812", " 22035 21412 775971 5325 1708 524995 41140 14835", " 292 30459 261052 984555 89500 41140 104980 572 45", "6548 27692 12460 710522 168340 112052 11115 9628 ", "220 456548 276212 422499 21 243219 28 220 319060", " 319060 51 2325 252195 37995 22035 28 101835 190", "299 356308 21315 6100 56235 243219 437980 2332 1", "4259 176596 164715 18525 190299 210795 30459 8179", "5 227188 2325 572 127148 203812 81795 37995 2521", "95 442035 3045 322995 575452 168340 984555 69412 ", "9628 452235 3021 131572 775971 2565 252315 6924", "52 231340 13635 252195 868611 2332 692452 984555 ", "21412 21315 14835 878475 265780 13635 20445 12931", "5 12628 3525 126868 1708 21 5325 81795 9628 4379", "80 481971 26715 572 23828 64875 3525 265780"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 95;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> stick = {"137020 964307 112539 126868 210795 51 112539 16", "8340 322995 104980 692452 26715 213572 244180 21", "9812 197620 131572 89500 12628 2332 136851 4012 ", "104980 18075 54435 308 5180 13635 164715 101835 44", "2035 26228 252195 215355 632260 49125 215355 2271", "88 102315 160149 984555 30459 164715 878475 69245", "2 27692 55348 3531 54435 112052 8932 456548 4124", "91 55348 89500 252195 265780 101835 276212 442035", " 1708 252315 58588 261052 27692 102315 12508 9628", " 5180 319060 572 64875 356308 608737 252195 4420", "35 775971 575452 265780 9628 200595 69412 23828 2", "325 5325 575452 252315 1221 140 252315 136851 11", "2539 200595 64875 18525 922131 1300 8932 261052 35", "25 575452 133509 18075 2565 292 93141 922131 55", "348 89500 61732 8932 2325 67348 22372 47259 43798", "0 227188 514228 878475 159652 632260 13635 102315", " 338694 61732 51339 82348 14835 81795 276212 775", "5 22372 61732 140 7755 299466 190299 41140 244180 ", "159652 164715 110019 23828 23828 51460 4371 98455", "5 220 129315 775971 356308 878475 174675 3531 23", "1340 49125 20445 3525 456548 12460 64875 3021 3", "22995 69412 922131 21315 422499 81795 687939 262", "28 12508 26715 21315 58588 452235 265780 456548 ", "22035 203812 6188 226060 159652 160149 422499 1", "2508 765411 127148 226060 6100 81795 203205 14259", " 243219 11115 3021 437980 58588 1221 168340 127148"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> stick = {"243219 21315 422499 2325 3021 4012 319060 2332 ", "164715 252315 203205 227188 69412 190299 12628 25", "2195 164715 6188 1300 168340 47259 91155 319060 ", "40755 276212 131572 984555 261052 12460 14259 21", "0795 81795 215355 41140 137020 47259 514228 140 30", "21 2325 49125 319060 575452 589101 322995 442035 ", "2332 197620 203812 220 12628 70755 27692 231340 7", "755 322995 449595 312052 168340 26228 775971 2332 ", "21 8932 81795 322995 248452 22035 20445 22035 30", "459 203205 12508 452235 422499 356308 1221 2131", "5 127148 387618 1221 210795 102315 226060 55348 6", "100 112052 64875 49125 252195 13635 126868 437980", " 351156 21 2325 104980 26228 140 248452 126868 13", "3509 449595 140 226060 20 350132 11115 692452 456", "548 213572 312052 51 356308 70755 20445 22035 1", "90299 58588 23828 692452 58588 252195 449595 57", "2 572 38092 20445 442035 197620 878475 437980 7", "75971 23828 18525 2565 456548 102315 129315 81795", " 312052 8932 61732 572 47259 12628 983684 101835", " 356308 8932 96195 21315 110019 220 51339 95109", "0 69412 213572 30459 984555 4012 70755 3021 604", "5 133509 164715 261052 240572 12460 422499 4012 19", "7620 312052 8308 160149 26228 11115 49125 137020 2", "27188 248452 215355 69412 218405 371812 89500 513", "39 220 18075 41140 1221 112539 11115 26228 34754", "8 203812 456548 190299 18075 129315"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> stick = {"51339 3021 449595 28365 276212 127148 6100 231340 ", "14259 70755 22035 5475 30459 140 248452 220 101", "835 252195 23828 131572 945891 356308 2332 10231", "5 575452 437980 3021 572 452235 1221 110019 14259 ", "20 322995 18075 6100 442035 110019 104980 25240", "1 248452 215355 21412 127148 131572 8932 104980 ", "575452 64875 21 508683 197620 14259 49125 26228 7", "95254 112052 220 190299 312052 104980 102315 69245", "2 197620 51 261052 37995 252195 18075 437980 456", "548 13635 356308 197620 61732 126868 21 55348 136", "35 69412 51 1221 20445 210795 4012 26228 18075 ", "12460 134084 12628 878475 18525 69412 12508 12931", "5 356308 41140 30459 22035 878475 12460 112539 442", "035 3021 452235 1035 2565 26228 140 1035 197620 20", "3205 1300 190299 61732 18525 422499 27692 12628 ", "37995 243219 41140 140 27692 18075 984555 61732 ", "23828 7755 252315 131572 20 69412 21412 70755 21 1", "10019 81795 572 8932 467656 261052 11115 514228", " 49125 89500 456548 81795 89500 1300 203205 1035", " 21412 215355 901709 10251 220 532 572 81795 20381", "2 422499 20445 215355 51339 51339 210795 514228 6", "100 20445 70755 532 23828 2325 276212 572 20 1504", "5 22372 437980 1221 227188 2565 322995 55348 25", "2195 37995 190299 49125 21412 112539 878475 21 4", "012 422499 7755 213572 566115 276212 164715"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> stick = {"126868 215355 51460 252195 3531 350140 8932 93141 ", "691900 687939 514228 252195 5325 22035 37995 27621", "2 424780 168340 276028 137020 131572 12628 1976", "20 1221 356308 289731 117645 514228 14259 6100 53", "25 452235 261052 812595 5180 51 168340 26228 126", "28 442035 18075 21412 30459 322995 215355 322995 2", "1315 159652 3531 240572 215355 984555 197620 20", "3205 3021 104980 3531 348411 133509 203205 348411", " 54435 112539 129315 691900 110019 51339 1221 24", "4180 22372 213572 64875 692452 452235 21412 32299", "5 261052 243219 595660 356308 2565 424780 227188 8", "12595 456548 775971 21412 112539 922131 12628 472", "59 437980 276028 433155 226060 26228 779812 16471", "5 265780 223276 140 190299 319060 807057 1845 35", "6308 110019 12460 51460 6100 160149 231340 2313", "40 159652 126868 110019 213572 452235 200595 5325 ", "8932 47259 984555 1035 64875 276028 12460 43315", "5 160149 136851 424780 412132 47259 54435 77981", "2 41140 481971 350140 37995 93141 131572 309625", " 481971 117645 514228 22372 126868 133509 20059", "5 190299 197620 1300 292 14835 140 203205 70552", "3 243219 506620 1035 89500 422499 64875 412491 256", "5 1300 693546 422499 244180 226060 289731 276212", " 265780 51460 129315 137020 18075 51 289731 319060", " 55348 595660 963028 687939 137020 261052 632260 ", "276212 22372 21315 348411 752115 422499 117645 2", "92 412132 1300 775971 437980 37995"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 96;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> stick = {"18525 322995 244180 168340 322995 112539 136851 2", "7692 137020 6100 20445 37995 356308 160149 19762", "0 164715 692452 226060 136851 13635 28 93141 1221 ", "775971 213572 164715 4012 572 902413 243219 2313", "40 51460 203812 226060 133509 49705 195 69412 632", "260 442035 319060 37995 1300 319060 252195 4114", "0 126868 243219 422499 422188 356308 112052 49125", " 18075 51339 11115 55348 112539 215355 248452 2", "565 37995 219868 1708 1035 213572 195 261052 92213", "1 687939 11115 2565 55348 110019 543004 252315 267", "15 715278 101835 575452 129315 210795 276212 632", "260 131572 265780 232995 96195 1708 9628 18525 203", "205 2332 8932 5180 20445 131572 2325 190299 227", "188 160149 14835 195 2325 244180 1221 101835 23299", "5 41140 232995 117645 452235 126868 49125 101835", " 89500 104980 8932 27692 23828 51460 195 203812 ", "28 64875 81795 422188 105555 168340 14259 43798", "0 4012 140 27692 82348 129315 21412 775971 14259 4", "22188 244180 261052 12628 232995 42212 2332 47259", " 127148 93141 51 112052 3525 102315 6100 51339 ", "456548 3531 47259 220660 433155 213572 748 28 203", "205 319060 687939 58588 47259 133509 137020 252", "195 514228 22035 984555 572 112052 127148 2332 18", "525 14835 64875 848715 2325 160149 61732 231340", " 252195 456548 878475 13635 21412 203205 456548 ", "269282 168340 69412 210795 21412 140 4012"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> stick = {"2565 51339 227188 159652 54692 20445 8932 11001", "9 837795 210795 51 23828 159652 226060 4012 45654", "8 213572 104980 9628 101835 6100 12508 136851 2", "03205 137020 115697 437980 81795 127148 437980 2", "52195 1300 51339 197620 215355 137020 878475 5325", " 14259 133509 41140 164715 1708 356308 265780 2005", "95 572 112052 632260 55348 26228 1221 133509 2271", "88 922131 129315 129315 18075 160149 140 22035 648", "75 243219 319060 58588 27692 878475 452235 61732 5", "14228 8932 168340 292 442035 102315 110019 4379", "80 226060 5180 12628 14835 136851 51 168340 575", "452 23828 54435 292 11115 456548 261052 922131 2", "565 104980 412132 243219 102315 292 575452 12508", " 21315 252195 14835 58588 616363 1221 200595 54", "435 2241 243219 412132 102315 23828 39944 11205", "2 47259 3525 2325 6100 21315 73875 575452 822540", " 572 200595 692452 140 47259 572 322995 159652 ", "210795 136851 18525 69412 3525 164715 876178 1902", "99 9628 49125 131572 25252 203812 1221 5180 252315", " 775971 456548 210795 5325 18075 442035 203205 204", "45 101835 126868 4012 20445 775971 26228 3525 719", "25 984555 22035 227188 1300 13635 632260 81795 1", "31572 692452 2332 7755 203812 168340 422499 775", "971 6100 137020 22035 197620 51339 18525 1708 2", "03812 129315 22372 437980 22372 21315 104980 87", "8475 27692 55348 422499 2332 2325 55348 47259"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> stick = {"159068 6045 11115 12508 12460 322995 12628 1221 77", "55 191235 164715 1300 422499 22035 437980 2212 16", "5 933066 3021 54435 69412 532 203812 2325 69148 22", "372 252315 6045 12460 191235 2325 407161 7755 112", "052 18525 129315 532 12508 126868 276212 26228 40", "12 456548 692452 231340 69148 261052 12460 165 18", "532 64875 252195 243219 18075 18645 203205 3120", "52 573268 12508 442035 339915 428835 713012 252", "195 127148 4012 132205 89500 339915 17355 14259", " 210795 252195 2332 127148 210795 231340 213572 9", "8252 6100 98252 150195 529268 55348 356308 11205", "2 197620 648795 13635 21315 20 220 41140 98252 70", "755 17355 18645 51765 452235 21315 140 6100 21 1", "01835 3021 514228 292 21 713012 12628 110019 248", "452 456548 101092 442035 4012 6045 14259 17355 4", "9125 131572 150195 456548 2565 213572 26228 449595", " 532 984555 2325 8932 2212 430453 55348 51 2332 55", "0714 692452 203205 112539 64875 55948 428835 198", "099 150052 428835 627913 220 150052 548725 2769", "2 2212 203812 215355 713012 5325 55948 220 112539", " 682075 71925 22035 18525 104980 110019 24915 1", "28428 98252 1155 312052 1300 22372 227188 41140 8", "9500 220 12628 49395 22035 1221 150195 49125 11115", " 61732 231340 159068 21 339915 30459 112539 70755", " 13635 55948 30459 69148 24915 422499 51339 3021 7", "755"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> stick = {"146091 236451 226060 687939 93141 775971 64875 2", "76212 164715 22372 385588 231340 322995 6100 289", "731 442035 51 687939 236451 437980 8932 347115 1", "4259 22372 984555 146091 412132 456548 89500 1694", "20 47259 348411 37995 424780 347115 963028 10498", "0 595660 261052 350140 348411 240572 356308 200595", " 55348 2565 22035 1221 385588 200595 51339 68793", "9 140 292 12628 282700 110019 481971 129315 276", "212 922131 452235 2565 164715 480675 22035 215355 ", "197620 37995 203205 5325 55348 276212 514228 5325", " 168340 424780 3531 632260 215355 352530 424780", " 169420 289731 632260 1221 5325 26228 18075 3563", "08 37995 160149 169420 549268 252195 227188 4806", "75 41140 200595 691900 812595 49125 243219 12460 ", "146091 549268 289731 632260 3021 265780 5180 35", "0140 22372 54435 213572 276212 741748 168340 412", "132 480675 244180 433155 385588 692452 595660 130", "0 412491 93141 136851 481971 422499 433155 456548", " 3021 549268 146091 133509 322995 30459 635835 304", "59 922131 1221 282700 12460 984555 692452 8932 ", "160149 51 348411 265780 51460 514228 117645 41213", "2 6100 347115 658155 5180 12460 752115 2565 982007", " 159652 244180 779812 775971 276028 203205 9630", "28 319060 89500 442035 136851 812595 51460 347115 ", "140 131572 922131 691900 514228 6100 188571 137020", " 190299 12628 18172 222460 213572 126868 779812 50", "6620 8932 21315 244180 322995 112539 3531"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> stick = {"70755 49125 137020 150195 89500 47259 101835 4912", "5 21412 41140 428835 1035 13635 106252 252195 4725", "9 252315 71925 1300 89500 1035 213572 61732 22035 ", "51339 98252 93141 47259 442035 14259 266475 7755 ", "252315 164715 5180 435 308 243219 692452 131572 ", "979279 55948 648795 252195 89500 15052 150195 3", "08 456548 14259 692452 22035 22035 319060 210795", " 13635 30459 2741 75 12628 276212 210795 37995 15", "9068 422499 203812 532 5180 435 69412 137020 984", "555 18645 312052 15052 213572 1221 140 75 3772 1", "2508 8932 3772 6195 18525 131572 2332 61732 55948 ", "51 41140 210795 51 529268 248452 276212 22035 559", "48 692452 127148 12508 30459 127148 713012 2762", "12 47259 339915 3772 37995 203205 21412 2565 52926", "8 6100 231340 18645 442035 197620 140 17355 4379", "80 51339 422499 12508 112539 449595 104980 2523", "15 18525 112052 69412 104980 170372 984555 1125", "39 532 37995 4012 69148 456548 150195 98252 190", "299 954377 55348 55348 253438 159068 1035 64879", "5 986893 190299 61732 2325 69148 110019 855188 1", "300 203812 7755 397888 17355 98252 137020 131572", " 49125 285799 37995 308 18645 339915 7755 12628 1", "28428 203812 17355 839896 231340 981353 164715 11", "115 319060 203205 55348 648795 914635 435 5548 207", "045 21412 165 21412 27692 159068 252195 6195 16471", "5 112052 1300 422499"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> stick = {"878475 51339 452235 12460 227188 210795 131572 42", "2499 195 6100 51339 112052 21412 190299 8932 77597", "1 356308 14835 197620 112539 514228 102315 203812 ", "133509 2332 104980 252195 210795 437980 775971 ", "69412 934008 21 775971 231340 261052 4012 28 8179", "5 748 322995 2325 164715 131572 215355 226060 140 ", "58588 51 18075 21 195 319060 190299 261052 1035 45", "6548 102315 14259 248452 22035 37995 276212 233", "2 112539 12508 215355 603625 58588 1221 493869 1", "2628 41140 47259 30459 197620 18075 61732 23828", " 203205 322995 4012 261052 49125 7755 64875 2038", "12 11115 69412 226060 1221 21 692452 276212 42883", "5 89500 252315 89500 11115 155595 356308 28 125", "08 452428 58588 23828 103040 129315 319060 164715 ", "47259 61732 456548 252315 20 319060 8932 1221 214", "12 3021 261052 7755 748 51339 47259 14259 8932 140", " 252195 243219 101835 140 13635 112052 984555 101", "835 27692 164715 14835 248452 878475 2565 18075", " 12460 519814 126868 190299 713662 428835 575452 ", "49125 331425 220 14835 37995 112052 18525 110019 ", "292 20445 572 1035 20445 81795 101835 127148 2271", "88 55348 572 41140 137020 442035 58588 252315 19", "5 13635 2325 452235 189435 197620 203812 1300 22", "6060 2565 748 226060 30459 6100 127148 1035 41140 ", "320979 7755 27795 20 213572 1035 575452 265780 4", "42035"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> stick = {"168340 200595 348411 350140 146091 452235 2565 ", "775971 2565 22035 456548 437980 691900 412491 6", "100 168340 197620 51460 55348 922131 117645 21315 ", "129315 140 265780 240572 110019 104980 748 244180 ", "12628 41140 93141 595660 442035 136851 433155 2", "22460 26228 5325 117645 51460 231340 21412 64875", " 678044 227188 160149 133509 41140 6100 748 137020", " 110019 203205 188571 51460 18075 195 424780 45223", "5 197620 131572 506620 5325 110019 1221 64875 2", "26060 8932 752115 197620 506620 3531 51339 51422", "8 481971 213572 252195 137020 64875 55348 222460", " 1221 292 514228 348411 131572 356308 51339 140", " 160149 26228 5180 1035 126868 28 356308 164715 ", "28 160149 41140 356308 104980 140 506620 22372 ", "243219 215355 412132 51 348411 514228 5325 322995", " 213572 47259 240572 137020 190299 243219 148 21", "5355 322995 126868 37995 289731 276212 55348 129", "315 687939 133509 687939 133509 195 203205 292 10", "35 692452 322995 21412 422499 236451 282700 14259", " 213572 129315 21315 159652 126868 240572 10498", "0 1221 168340 236451 22372 632260 26228 148148 63", "2260 203205 319060 37995 164715 136851 236451 1300", " 424780 350140 292 452235 54435 687939 146091 2", "2372 18075 289731 190299 422499 856557 222460 26", "1052 227188 190299 195 632260 779812 54435 5443", "5 779812 350140 261052 203205 14259 984555 8932", " 752115 437980 136851 21315"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> stick = {"23828 231340 12508 3772 150195 200754 2332 12628 2", "84915 1221 89500 3772 220 159068 30459 30459 16471", "5 485908 81795 3021 6100 164715 1035 13635 3021 ", "442035 243219 572 159068 49125 15052 51 131572 2", "20 4012 150195 15052 58588 1035 12460 220 203205", " 2565 37995 20445 529268 1300 442035 21 1221 1262", "8 713012 713012 6195 210795 252195 69412 55948 20", "3812 127148 8932 27692 6195 648795 4012 30459 9", "84555 2325 98252 164715 276212 13635 984555 1425", "9 220 41140 51 243219 3772 1221 21 6100 140 89500 ", "102315 69412 18525 213572 428835 21412 18645 748 ", "297451 27692 21412 435 55948 12628 213572 69148 ", "529268 21 55348 17355 112052 112052 2325 437980 98", "4555 55348 22035 20445 38639 422499 422499 37995 ", "456548 22035 37995 428835 14259 2332 127148 437980", " 252315 575452 131572 13635 150195 11115 252315 45", "6548 12788 648795 3772 692452 140 11115 713012 14", "835 645416 22035 21412 6195 437980 195 648795 2032", "05 18525 128428 326759 648795 339915 71925 339915 ", "276212 58588 435 12460 12460 6100 435 71925 15052 ", "428835 89500 878475 243219 529268 210795 54435 51", " 692452 18645 252195 442035 692452 878475 1300 1", "12539 276212 2332 61732 645 247134 23828 748 4012 ", "140 18525 213572 55948 3021 412132 203205 128428", " 27692 101835 69148 456548"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> stick = {"1300 51339 127148 456548 312052 319060 164715 748 ", "226060 356308 276212 319060 2325 126868 452235 ", "126868 312052 7755 4012 692452 575452 24723 2135", "72 210795 64875 104980 1035 514228 41140 231340 2", "96229 164715 775971 27692 69412 261052 175935 129", "315 514228 437980 2565 252315 322995 922131 9388", "52 215355 21315 126868 728772 27692 2565 102315 ", "261052 70755 129315 11139 110019 22035 81795 89", "32 47259 984555 160149 11115 58588 203812 176972 1", "4259 197620 452235 131572 51 210795 252195 190299 ", "127148 215355 422499 89500 21412 20445 14259 81795", " 456548 210795 2565 127148 69412 13635 203812 422", "499 101835 12508 265780 2332 41140 322995 131572", " 248452 20445 319060 102315 112052 13635 632260", " 112539 12460 101835 168340 101835 572 632260 1335", "09 26228 265780 203205 252195 136851 449595 472", "59 129315 23828 49125 136851 4012 41140 252315 49", "395 23828 276212 12508 64875 2325 805420 755862 ", "2325 65071 227188 878475 89355 632260 203812 126", "28 49125 356308 248452 922131 442035 1300 110019 ", "7755 491097 21412 61732 51 51339 572 30459 51339 6", "1732 140 6100 104980 94468 442035 231340 110019 22", "7188 1628 243219 437980 8932 18075 13635 30459 401", "2 27692 787593 37995 190299 47259 1035 197620 2622", "8 61732 55348 37995 55348 572 18525 6100 449595 10", "4980 252315 137020 836373 18075 1221 243219 131572"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> stick = {"7755 356308 2565 984555 110019 112539 12460 12508 ", "692452 312052 428835 110019 1300 197620 150052 43", "7980 41140 6045 131572 55348 215355 348195 13635", " 112052 3021 167619 150195 37995 21412 41140 2762", "12 1035 27692 6045 110019 127148 449595 22035 10", "4980 88420 159068 529268 442035 248452 126868 3045", "9 69148 18525 140 210795 11115 150195 449595 513", "39 713012 210795 203205 2332 140 51339 422499 130", "0 227188 129315 49125 89500 12628 1221 748 71925 ", "1035 126868 1221 150052 69148 71925 692452 6100 13", "1572 252195 101835 55948 111673 22035 648795 7755 ", "127148 51 51339 17355 227188 12508 71925 18525 111", "15 51 437980 248452 191235 4012 18645 12460 87857", "8 24915 14259 339915 104980 213572 713012 191235 5", "5948 8932 30459 203205 298994 302897 4012 159068 2", "212 11115 89500 128428 2325 428835 128428 11205", "2 203812 203205 322995 428835 30459 61732 4012 ", "252315 61732 49395 6100 61732 104980 984555 150052", " 339915 18645 13635 24915 49125 191235 213572 1268", "68 449595 12628 14259 243219 422499 713012 98252 2", "76212 6045 215355 231340 69412 813928 456548 9825", "2 2332 127148 150263 18525 18532 164715 12460 312", "052 2212 129315 64875 243219 13635 27692 243219 12", "508 27692 89500 442035 2565 6045 128428 14259 2", "10795 213572 197620 3021 450184 437980 252315 10", "1092 41140 129315 2212 2325 356308"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> stick = {"1035 7755 27692 477040 456548 37995 292 215355 304", "59 18075 58588 133509 18525 21315 575452 112539 ", "21412 190299 340862 8932 18525 168340 164715 19", "7620 81795 252195 220 112052 322995 442035 3229", "95 51339 129315 89500 452235 265780 51 30459 140", " 243219 261052 20445 252195 984555 51339 89500 2", "65780 2325 51 11115 2332 227188 30459 220 21412 2", "31340 23828 2325 356308 27692 140 7755 137020 2131", "5 127148 4012 575452 26228 12628 227188 356308 42", "2499 14259 69412 572 998450 23828 7755 437980 1", "04980 21412 1221 197620 101835 984555 442035 21", "315 140 127148 203812 213572 440115 64875 47259 2", "565 112052 514228 1300 129315 58588 203205 226060", " 424780 215355 4012 226060 514228 14835 203205 ", "101835 3021 210795 61732 110019 514228 210795 111", "15 632260 160149 213572 220 878475 110019 51 2769", "2 12628 6820 6100 23828 102315 213572 322995 22718", "8 21 456548 160149 131572 55348 101835 160149 2044", "5 102315 922131 692452 13635 22035 20445 437980 ", "1035 23828 292 508323 18075 252315 197620 18525 ", "878475 356308 49125 81795 572 66834 252315 4012 1", "04980 984555 248452 12460 41140 248452 775971 20", "3812 13635 69412 7755 265780 12460 248452 89500 2", "03812 243219 12508 12508 203205 129315 110019 126", "28 979340 21 3021 215355 252195 26228 126868 233", "2 319060 922131 133509 276212 131572"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> stick = {"168340 452235 18525 69412 51339 21412 572 632260", " 137020 51 322995 140 632260 89500 422499 12508 ", "356308 37995 243219 197715 28 632260 9628 575452", " 51339 47259 27692 195 276212 437980 456548 13702", "0 575452 23828 126868 319060 64875 2565 64875 1", "31572 2565 136851 231340 422499 265780 61732 37", "995 164715 58588 878475 127148 13635 197620 28 692", "452 164715 878475 210795 160149 195 356308 1221", " 8932 252315 81795 49125 129315 692452 2325 12714", "8 12628 18075 12508 984555 69412 150052 140 140 82", "1664 110019 190299 105555 456548 82348 18525 322", "995 878475 69412 1035 37995 105555 82348 160149 4", "52235 422499 81795 226060 101835 2332 112052 922", "131 89500 11115 112052 572 71925 20445 252315 21", "5355 984555 210795 133509 1221 595582 131572 2521", "95 203205 261052 61732 137020 442035 210795 8132", "92 1300 775971 49125 514228 243219 231340 4012 11", "115 378934 20445 213572 230419 3525 28 265780 45", "6548 41140 89500 14835 131572 101835 437980 11253", "9 55348 21412 102315 127148 2565 575452 1708 1111", "5 133509 203812 252195 168340 632260 195 58588 ", "203205 922131 104980 231340 203812 55348 265780 ", "112539 133509 102315 21412 14259 112539 1221 74", "8 243219 261052 437980 136851 102315 227188 14835", " 8932 748 922131 27692 22035 26715 41140 136851 1", "95 23828 6100 213572 1035 514228 252195 82348 11", "2539"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 96;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> stick = {"293188 164715 61732 984555 8932 437980 252315 71", "3012 1221 18525 6100 18645 150052 312052 70755 40", "12 127148 13485 6100 176692 2325 2595 456548 19", "7620 61732 231340 437980 2565 131572 55948 1284", "28 159068 276212 8228 32835 785126 8932 69148 2532", "75 17355 58275 101835 22755 311355 2565 104980 ", "191235 17355 27692 1300 14259 11115 51 210795 513", "39 128428 4012 692452 12628 6100 252195 32835 1", "3635 529268 18525 18525 55348 2325 112539 252195 ", "339915 55948 529268 14259 89500 213572 176692 3", "76335 267195 32835 61732 252315 695955 252315 49", "395 428835 110019 253275 58275 41140 984555 2198", "68 692452 191235 618772 374108 656066 456548 27692", " 51 6188 7275 529268 18645 14852 203205 8932 13157", "2 89500 374108 18532 339915 188235 243219 112539 ", "695955 25062 110019 2565 7755 131572 276212 1882", "35 2332 449595 37995 98252 6045 13635 159068 31205", "2 648795 112539 9548 4012 231340 5574 22755 1120", "52 276212 98252 71925 428835 140 8228 22035 112", "539 603997 442035 191235 243219 18532 2325 176692 ", "203812 150195 386308 8228 252315 12628 190299 19", "7620 14259 112052 150195 231340 89500 253275 2931", "88 386308 12508 22035 996092 276212 253275 1300 24", "4035 37995 104980 243219 18645 500115 101835 292 ", "248452 422499 9548 213572 422499 164715 386308 127", "148 22755 203205 15052 55948 112052 442035 252195", " 98252"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> stick = {"150195 220 442035 6100 51339 252195 2595 191235 27", "6212 437980 70755 312052 6045 276212 58275 5827", "5 231340 165 55948 203812 112539 69148 32835 54435", " 165 51 37995 12508 30459 13485 648795 8228 112539", " 500198 3021 21 8228 140 101835 248452 104980 71", "925 12460 231340 51339 21412 1221 442035 22755 1", "8532 220 618772 2595 243219 2325 267195 442035 6", "48795 12460 18532 1035 21412 51339 6045 456548 2", "67195 104980 276212 618772 203205 6045 210795 203", "205 49395 1035 213572 9548 8932 70755 529268 21 ", "150052 532 9548 4012 320595 437980 8228 213572 982", "52 13635 339915 14852 188235 210795 317852 1853", "2 7755 248452 41140 886511 1221 2565 532 2212 1", "76692 574275 3021 125104 293188 2332 176692 6100 ", "243219 2565 131572 14852 7755 267195 984555 6188 ", "2212 532 805420 456548 18645 449595 695955 752407", " 11115 293188 2565 248452 713012 127148 8228 20320", "5 21 203812 49395 252195 12508 8932 17355 14259 ", "648795 11115 477059 51339 374108 128428 43834 2", "2755 188235 32835 58275 618772 829211 131572 37995", " 220 188235 7755 6045 104980 213572 4012 211376 2", "20 1300 9548 837795 164715 55948 150052 197620 ", "13635 529268 49395 191235 748 70755 131572 2882", "5 127148 22755 213572 159068 2212 52 428835 89500 ", "541228 188235 529268 293188 692452 98252 2595 422", "499"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> stick = {"8932 18525 1300 248452 14852 104980 2325 1540 104", "980 7755 267195 13485 6188 140 71925 112539 129315", " 55348 319060 231340 159068 648795 984555 1300 ", "69148 150052 150052 150195 190299 213572 27692 692", "452 98252 422499 339915 374108 54692 159068 18532", " 422499 13635 252315 618772 692452 692452 6100 ", "150195 126868 89500 128428 164715 129315 49395 16", "4715 412491 203205 6188 11115 2332 9548 9548 2038", "12 128428 112052 422499 112052 253275 2325 13485 ", "69148 219812 2332 49395 64875 2325 529268 164715 ", "51 188235 131572 422499 127148 176692 140 127148 ", "213572 442035 984555 210795 191235 210795 13635 ", "6188 293188 51339 12508 253275 129315 197620 648", "795 837795 713012 190299 55948 101835 203812 12", "508 48478 104980 456548 71925 646992 2595 253275 ", "452235 18532 437980 328412 339915 55348 11115 6", "95955 69148 127148 805420 1300 4012 6188 32835 259", "5 4012 267195 386308 9548 13485 8932 150052 1268", "68 6045 176692 41140 442035 276212 89355 1221 2275", "5 8932 98252 18525 2332 49395 618772 14852 1018", "35 428835 140 442035 64875 386308 713012 27692 ", "51 22035 22755 243219 126868 51 374108 32835 719", "25 30459 190299 984555 12628 12460 51339 852471 3", "021 150195 210795 767754 648795 258631 110019 256", "5 695955 22755 203812 713012 12460 428835 126868", " 276212 14259 319060 252195 101835 7755 51339 1", "8645"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> stick = {"1221 51 1221 12508 61732 55948 23828 252195 617", "32 140 2325 112539 252315 22035 14259 529268 1300", " 18645 424780 27692 8932 69412 2565 55348 19762", "0 422499 437980 356308 575452 3772 227188 197620", " 243219 3772 51 159068 69148 13635 54435 984555", " 456548 1300 339915 428835 22035 14259 104980 43", "5 41140 456548 692452 203205 112052 150195 55348 ", "529268 322995 4012 41140 4012 1300 64875 422499 1", "31572 127148 101835 12628 308 104980 6195 150195 ", "437980 435 550896 456548 231340 164715 435 6100 25", "65 128428 22035 437980 252315 308 12508 191235 5", "72 203205 209788 824943 17355 27692 261052 126868", " 608792 13635 140 203812 750904 110019 159068 1", "2628 112052 55348 131572 15052 18645 11115 435 ", "442035 984555 22372 252195 878475 18525 191235 110", "019 23828 572 110019 20445 6820 6100 4012 648795", " 243219 17355 456548 442035 128428 12628 55948 49", "125 98252 11115 18525 15052 388106 231340 191235", " 308 2332 984555 2325 339915 51339 231340 35630", "8 14259 280494 102315 529268 8932 428835 128428 23", "25 61732 23828 422499 64875 213572 428835 11001", "9 6195 51339 112539 713012 13635 243219 49125 2332", " 20445 49125 71925 126868 81795 452235 197620 51", "4228 2332 41140 529268 11115 215355 112539 20320", "5 20445 18525 40132 442035 83475 129315 452235 1", "8342 215355 213572 210795 231340 98252"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> stick = {"18525 8932 104980 2595 41140 6188 51 164715 27692", " 12460 765351 191235 554583 22755 89500 231340 1", "1115 150052 293188 4012 252195 12508 176692 411", "40 30459 243219 110019 374108 422499 12508 52926", "8 15052 116948 70755 2565 104980 434849 442035 ", "2332 1300 22035 1300 91155 263438 529268 22035 12", "628 131572 339915 692452 339915 12460 51 164715", " 449595 4012 538159 70755 305588 69148 6100 719", "25 14259 442035 51 713012 452188 213572 51339 6", "92452 692452 1221 15052 98252 50132 575452 4012", " 456548 456548 164715 22755 456548 127148 128428", " 140 27692 7755 18532 252195 456548 189435 203812 ", "13635 984555 253275 18645 22035 4755 14852 2032", "05 389793 112539 32835 191235 18525 7755 17355 691", "48 695955 150195 419540 159068 188235 267195 203", "205 465215 7755 9548 435 308 3772 17355 351948 71", "925 31175 11115 428835 51339 2325 210795 12508 ", "41140 9548 188235 662594 427898 89500 174699 185", "32 27692 84315 11115 4755 13485 532 695955 8125", "95 248452 521654 55348 69148 6045 51339 293188 13", "635 499460 101835 18525 159068 14852 30459 2484", "52 131572 437980 618772 442035 27692 162344 49395 ", "312052 1300 248452 131572 374108 144360 435 252195", " 213572 112539 14852 13635 946275 55948 104980 ", "110019 55348 71925 89500 386308 2595 6188 12628 11", "2539 648795 22035 2595 984555 55348 6195 30459"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 89;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> stick = {"41140 12460 1300 481971 133509 412132 379100 2131", "5 51460 1221 775971 12460 93141 213572 64875 13685", "1 117645 433155 54435 240572 3021 55348 3021 1049", "80 692452 22035 984555 197620 779812 47259 11253", "9 687939 168340 422499 51339 687939 252195 3531 ", "168340 250708 779812 22035 114915 104980 12628 34", "8411 319060 779812 5325 203205 1300 1221 243219 4", "22499 76035 140 55348 549268 244180 144628 126868 ", "110019 227188 6100 131572 51339 200595 276028 2507", "08 412491 922131 54435 51 93141 812595 190299 5142", "28 220 775971 347115 244180 235155 2565 424780 126", "868 752115 51460 140 984555 292 963028 67348 5180", " 322995 22035 422499 131572 137020 3531 261052 14", "6060 691900 14259 18075 691900 200595 41140 213", "572 385588 213572 231340 160149 3021 235155 226060", " 452235 168340 480675 199155 412132 632260 1049", "80 261052 164715 235155 225945 687939 252195 51339", " 433155 265780 775971 41140 348411 64875 595660", " 133509 632260 244180 55348 506620 136851 93141", " 741748 250708 14259 261052 437980 144795 89500 ", "14259 30459 226060 433155 635835 159652 76035 518", "0 752115 12460 21315 8932 131572 76035 21 6100 ", "131572 322995 480675 220 514228 243219 595660 452", "235 112539 231340 452235 240572 240572 67348 25219", "5 129315 282700 215355 301852 386935 984555 3563", "08 26228 250708 922131 691900 549268 437980 1300", " 752115 51 481971 22372 159652"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 96;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> stick = {"215355 984555 2332 49395 713012 648795 12460 5133", "9 104980 131572 575452 203812 243219 159068 401", "2 210795 14259 220 437980 18645 27692 456548 77", "55 21 322995 129315 3021 164715 6100 102315 5180 ", "126868 2325 13635 18532 69412 126868 49395 243219 ", "129315 41140 322995 13635 220 692452 127148 231340", " 98252 112539 15052 18525 49125 150195 215355 10", "7188 878475 71925 12628 227188 213572 164715 982", "52 64875 18532 748 11115 241732 312052 1300 4012 3", "39915 2565 692452 422499 159068 55948 133509 3021 ", "191235 55948 89500 21 11115 128428 129315 102315", " 150052 635835 159068 150195 18532 252315 428835 ", "231340 127148 1221 61732 921125 171675 252195 5962", "36 150052 69412 318854 128428 8932 104980 449595 1", "7355 22035 449595 252195 112539 13635 437980 112", "052 231340 4012 14259 51339 128428 22035 104980", " 227188 131572 49125 3021 41140 210795 762836 210", "795 713012 322995 12628 575452 1300 71669 422499 9", "84555 55348 30459 108873 575452 529268 71925 220 ", "692452 69148 18645 101835 112539 21 529268 4939", "5 984555 69412 356308 17355 12460 67348 2565 203", "205 312052 8932 356308 22035 12508 428835 1300 32", "2995 713012 191235 71925 127148 51 140 126868 356", "308 51339 61732 248452 6195 878475 51339 55948 ", "12508 220 15052 12628 150195 422499 878475 1149", "15 49395 12460 428835 356308 18645 449595 648795"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> stick = {"195 984555 51339 30459 14259 190299 69148 2212 27", "692 12508 64875 51 160412 49395 11115 27692 2203", "5 8932 3021 2565 110019 197620 64875 213572 6914", "8 1300 13635 112539 164715 210795 529268 24915 90", "108 22035 2325 69412 11115 575452 64875 127148 ", "126868 6100 437980 210795 252195 137020 339915 ", "137020 27692 47259 197620 276212 8835 276212 23", "828 422499 150195 319060 692452 89500 12508 7192", "5 692452 210795 131572 142275 127148 137020 319060", " 442035 55948 55948 692452 6045 748 213572 4379", "80 648795 2332 195 231340 190299 190299 878475 136", "35 11115 2565 127148 159068 197620 61732 112052", " 428835 51 110019 748 4012 55948 23828 150052 45", "6548 126868 126868 243219 3021 30459 89500 140 1", "01835 954829 142275 102315 12508 150195 126868 111", "15 1221 8932 339915 24915 203812 18645 713012 2523", "15 112052 47259 428835 315172 20445 22035 666278 ", "49125 101092 71925 6100 252315 124239 47259 984", "555 140 2332 112539 713012 2325 104980 12460 60", "45 128428 12460 2325 69148 164715 575452 465844", " 64875 128428 18525 648795 37995 101092 2212 1100", "19 164715 529268 55348 1221 18525 55348 101092 1", "33352 2332 1035 2565 12628 203205 456548 41140 18", "532 49125 50132 24915 150195 47259 4012 12460 1", "91235 339915 8932 49395 21412 55348 55948 748 102", "315 243219 442035 18525 231340 37995 18532"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> stick = {"49395 4012 2325 8932 13635 423954 131572 8932 127", "148 131572 2332 2332 456548 252195 2565 11115 1", "3635 164715 2325 984555 13635 456548 4012 131572 8", "932 4012 13635 2565 984555 164715 2565 456548 1271", "48 252195 2332 692452 144795 13635 11115 2325 984", "555 2565 456548 4012 127148 2565 2325 456548 6924", "52 984555 984555 456548 456548 4012 50908 16471", "5 285177 456548 2325 2332 13635 4012 164715 984555", " 31755 778668 2565 8932 2325 4012 692452 13635 ", "127148 11115 127148 2565 252195 252195 692452 1", "64715 322172 169142 252195 13635 984555 11115 4565", "48 692452 4012 131572 252195 131572 2565 2325 2", "325 692452 131572 4012 8932 292 11115 13635 13635 ", "131572 164715 8932 129004 8932 984555 428835 92356", " 328978 984555 4012 252195 8932 33915 984555 89", "32 127148 252195 4012 984555 692452 2565 252195 1", "64715 131572 2325 2332 13635 127148 13635 692452", " 2565 2332 2325 4012 252195 127148 13635 2325 233", "2 252195 692452 131572 131572 556020 692452 4565", "48 131572 75795 2565 11115 252195 11115 13635 2332", " 109252 692452 456548 127148 456548 164715 12714", "8 127148 2325 4012 984555 2325 4012 636393 2565 ", "11115 127148 984555 11115 326563 2332 11115 692452", " 984555 692452 252195 2325 164715 131572 2332 4", "05748 8932 812776 127148 2332 313534 692452 2325 1", "64715 4012 692452 506572"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> stick = {"276212 37995 37995 52 252195 456548 252195 4495", "95 449595 76755 70755 449595 456548 442035 21412", " 52 276212 52 449595 7395 168011 252195 442035 ", "449595 456548 70755 276212 449595 21412 276212 27", "6212 276212 312052 312052 930357 456548 532 70755 ", "312052 532 165 52 37995 70755 252195 442035 37995", " 532 37995 252195 348411 37995 442035 52 21412 31", "2052 312052 276212 252195 920394 532 312052 27096", "7 488816 165 442035 456548 52 70755 276212 456548", " 165 290972 70755 320124 52 835841 70755 620022 ", "979743 52 312052 629975 532 252195 312052 165 4420", "35 989323 37995 37995 312052 312052 295003 52 2", "52195 21412 532 525043 52 165 165 21412 442035 ", "449595 21412 37995 532 70755 165 532 70755 4495", "95 35092 165 532 80265 21412 52 449595 312052 4565", "48 456548 165 52 70755 253275 613726 165 532 165", " 442035 37995 165 77331 70755 312052 52 252195 669", "2 52 52 488059 276212 456548 276212 449595 312052 ", "456548 456548 449595 2475 40132 456548 966445 165", " 252195 252195 449595 456548 442035 165 37995 1991", "55 449595 878894 635835 312052 21412 442035 4565", "48 252195 165 252195 456548 6765 558126 50085 21", "412 165 312052 21412 532 276212 442035 449595 2032", "05 21412 37995 2805 244035 449595 252195 456548 ", "252195 8835 312052 276212 442035 18075"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 82;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> stick = {"252195 30459 276212 30459 243219 252195 12460 4565", "48 437980 112539 429907 12460 437980 243219 302", "1 276212 437980 89500 276212 231340 98961 442035 ", "456548 131572 252195 442035 89500 2565 276212 131", "572 2565 30459 89500 131572 456548 131572 112539", " 442035 572 11115 252195 3021 243219 89500 243219", " 112539 3021 243219 276212 3021 276212 12460 131", "572 3021 437980 12460 89500 437980 276212 437980 ", "456548 12460 456548 243219 89500 442035 3021 27621", "2 45188 252195 442035 30459 112539 442035 138612 1", "2460 12460 3021 30459 442035 927627 109011 252195 ", "30459 3021 12460 51460 3021 276212 243219 30459", " 3021 146091 418606 112539 89500 119560 89500 9878", "60 2565 131572 112539 131572 112539 442035 23134", "0 32184 231340 456548 30459 442035 2565 629888 30", "21 252195 252195 131572 3021 442035 252195 696555", " 2565 231340 442035 112539 131572 131572 456548 13", "65 252195 47259 243219 276212 12460 456548 2521", "95 437980 456548 12460 252195 2565 243219 276212 3", "923 30459 231340 2565 231340 89500 276212 602993 1", "2460 89500 2565 437980 30459 252195 579766 231340 ", "545067 442035 276212 437980 2565 2565 456548 25219", "5 231340 243219 276212 89500 276212 327482 1125", "39 456548 442035 131572 456548 2565 231340 243219 ", "442035 913402 456548 89500 456548 30459 442035 2", "52195 442035 437980 12460 456548 12460 243219 3045", "9 231340 112539 437980 131572"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> stick = {"748 1035 12460 110615 21 220 37995 12460 879606 ", "89500 3021 30459 12460 21 3021 1035 37995 21 665", "55 30459 3021 276212 3021 220 89500 645 30459 21", "412 89500 596506 595660 37995 748 89500 195 379", "95 30459 5475 276212 30459 37995 220 1035 658155 ", "37995 748 37995 220 21412 622086 37995 21412 3021", " 1035 37995 419312 89500 21412 89500 195 195 497", "574 1708 276212 195 748 133509 276212 276212 21", "412 220 318166 220 220 195 12460 276212 21 68014", "0 1035 3021 37995 451011 819 276212 195 1300 195", " 195 748 37995 641378 21412 1035 220 366212 2762", "12 12460 12460 1035 1035 30459 37995 12460 1276", "79 89500 276212 21412 489897 12460 21412 748 12", "5475 3021 170959 3021 1035 3021 440115 276212 302", "1 276212 195 21 1035 748 21 30459 12460 37995 820", "56 30459 220 3021 21 197620 220 156069 1035 30459 ", "1035 12460 21 160597 21412 12460 89500 220 89500 ", "220 276212 30459 748 220 21 586151 424780 52851 ", "21412 195 276212 748 276212 30459 221988 21412 2", "1 1035 748 12460 276212 1035 21412 220 3021 37777", "4 105555 30459 208468 37995 21412 21412 3021 422", "188 21 55948 386446 89500 37995 76035 12460 195 ", "89500 3021 12460 37995 21 748 21 20492"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 79;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> stick = {"248452 312052 18645 248452 165 18645 98252 754831 ", "248452 248452 17355 449595 150195 312052 165 1505", "2 55948 159068 532 449595 15052 70755 532 312052 ", "17355 55948 70755 70755 18645 165 70755 449595 70", "755 55948 18645 248452 165 345735 15052 150195 ", "15052 449595 449595 15052 165 532 217313 449595 31", "2052 15052 70755 449595 6195 70755 449595 248452 4", "49595 31422 248452 6195 248452 98252 130513 15052 ", "6195 6195 98252 532 248452 15052 70755 94395 44959", "5 165 449595 159068 312052 17355 159068 55948 619", "5 6195 18645 17355 248452 102315 532 6195 165 619", "5 159068 532 159068 6195 150195 55948 165 18645 15", "0195 67348 532 248452 532 312052 532 449595 18645", " 17355 98252 18645 17355 70755 822307 98252 150", "195 98252 55948 159068 532 70755 70755 15052 15052", " 449595 233824 532 6195 813778 248452 6195 159068 ", "55948 312052 150195 752115 159068 165 449595 15906", "8 150195 6195 159068 15052 532 312052 98252 150", "52 70755 165 574964 18645 55948 18645 17355 31205", "2 18645 150195 159068 104453 532 190299 18645 24", "8452 15052 312052 165 109011 55948 150195 18645", " 98252 312052 532 312052 165 449595 165 18645 159", "068 98252 17355 17355 18645 165 532 248452 31205", "2 17355 159068 70755 55948 70755 150195 50085 98", "252 534508 248452 159068 64875 449595"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> stick = {"11115 11115 37995 2332 21412 2325 21412 21412 90", "4142 1035 276212 276212 2332 127148 284523 1035 ", "195 203812 203812 685444 195 1035 748 146091 4012", " 13635 276212 276212 2325 276212 1035 37995 1035 ", "127148 9058 210795 2325 21412 127148 491015 13635", " 4012 11115 11115 13635 203812 748 37995 1035 210", "795 195 748 210795 2325 99532 127148 11115 195 11", "115 127148 4012 2332 443708 195 21412 37995 4012 ", "11115 2332 4012 11115 13635 203812 2325 2325 986", "899 748 190299 2332 37995 748 276212 276212 748", " 11115 2325 3692 2332 131572 13635 4012 195 2107", "95 2332 1035 713832 11115 659782 4012 2325 1539", "03 4012 2325 4012 32374 422811 13635 13635 2325 23", "32 134830 11115 127148 276212 582495 195 210795", " 37995 244035 2332 210795 276212 11115 1035 233", "2 127148 2332 210795 37995 101655 994623 195 2038", "12 37995 1035 2325 1035 195 210795 276212 748 7", "48 4012 37995 11115 203812 276212 13635 21412 3", "7995 13635 195 210795 37995 203812 37995 11115 ", "210795 2325 13635 4012 210795 195 748 21412 195 2", "332 222460 2332 748 748 947943 4012 21412 5852 21", "412 4012 127148 2325 630128 203812 21412 203812", " 276212 525554 748 2332 748 127148 2332 961416 379", "95 748 1035 203812 195 4012 2325 127148 21412"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> stick = {"984555 243219 231340 243219 243219 437980 437980", " 422499 437980 252195 176692 131572 456548 98455", "5 243219 252195 164715 388981 131572 692452 23134", "0 422499 8932 422499 487123 481232 422499 51 69", "2452 131572 422499 51 1300 231340 422499 231340 2", "31340 984555 456548 437980 131572 231340 1300 130", "0 487303 164715 231340 252195 984555 11445 1300", " 812595 456548 131572 157132 164715 51 8932 9845", "55 422499 8932 1300 8932 8932 252195 691900 164", "715 51 984555 164715 1300 51 456548 984555 51 16", "7835 692452 1300 231340 2565 8932 243219 2565 685", "378 243219 8932 3680 984555 1900 422499 55132 6924", "52 422499 437980 692452 456548 437980 2565 164715 ", "8932 131572 243219 131572 1300 692452 243219 24321", "9 243219 1300 243219 252195 456548 164715 202121 ", "456548 301081 456548 8932 51 252195 231340 16307", "7 984555 456548 252195 1300 252195 164715 51 131", "572 437980 692452 984555 131572 51 164715 13157", "2 8932 570315 422499 231340 692452 243219 692452 2", "52195 2565 437980 358024 231340 38092 231340 24321", "9 8932 730080 210795 422499 437980 437980 243219", " 422499 692452 2565 418442 610132 2565 456548 4565", "48 437980 1892 437980 252195 626277 692452 7106", "8 243219 187826 274540 231340 252195 456548 8932 ", "14641 164715 252195 2565 2565 2565 437980 42249", "9 1300 231340 231340 2565 2565 164715 252195 243", "219 131572 51 164715"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 85;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> stick = {"112539 8932 231340 12460 243219 456548 37995 44", "2035 231340 231340 231340 112539 37995 2565 112", "539 30459 85635 131572 283193 252195 30459 2762", "12 2565 131572 456548 30459 231340 276212 37995 25", "2195 112539 49852 456548 442035 442035 231340 3", "0459 2565 112539 112539 89500 328051 243219 252", "195 456548 2565 243219 30459 231340 112539 89500 ", "30459 243219 202763 131572 89500 89500 89500 2762", "12 8932 679960 131572 42315 243219 276212 2565 30", "459 243219 89500 243219 442035 37995 442035 276212", " 37995 2565 231340 243219 37995 442035 2565 112", "539 30459 302932 456548 252195 12460 456548 252195", " 2565 37995 276212 131572 89500 12460 112539 895", "00 442035 442035 8932 276212 112539 8932 276212 8", "932 30459 231340 252195 252195 252195 947045 44", "2035 112539 112539 231340 131572 243219 2565 25", "2195 131572 442035 8932 30459 18172 112539 3799", "5 12460 2565 112539 12460 131572 2565 8932 8932", " 2565 343875 30459 2565 89500 276212 2565 243219", " 8932 2565 30459 267028 112539 276212 276212 3315 ", "276212 276212 73892 89500 37995 12460 12460 379", "95 243219 456548 89500 12460 89500 449595 8932 4", "56548 595660 231340 243219 89500 231340 12460 27", "6212 231340 12460 89500 8932 188571 37995 276212 3", "7995 243219 12460 8932 89500 37995 131572 37995", " 30459 8932 12460 30459 8932 456548 231340 456548 ", "131572 12460 162528 252195"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> stick = {"2565 2332 2332 252195 252195 252195 276212 44203", "5 56925 885362 8932 164715 276212 442035 13635 1", "64715 131572 131572 566115 94395 4012 11115 25219", "5 456548 276212 8932 131572 2325 203812 131572 ", "13635 2565 2332 210795 131572 456548 17252 2325 13", "1572 456548 2325 2325 131572 4012 11115 2332 44203", "5 4012 2332 8932 203812 13635 2325 2325 4012 893", "2 276212 2325 456548 11115 276212 2565 13635 2038", "12 8932 2565 276212 442035 127148 2565 8932 210", "795 4012 11115 210795 3692 2332 164715 127148 44", "2035 210795 164715 2332 13635 442035 164715 456", "548 442035 252195 4012 2325 11115 203812 252195 ", "127148 13635 127148 276212 11115 131572 295612 40", "12 8932 8932 252195 2332 2325 11115 276212 43315", "5 4012 456548 127148 127148 252195 2332 13635 4420", "35 210795 203812 4012 210795 210795 2325 127148 44", "2035 252195 127148 276212 456548 343875 8835 110", "717 127148 13635 2565 210795 131572 2325 442035 ", "835202 819 13635 2565 442035 164715 4012 164715", " 4012 442035 203812 203812 13635 11115 2325 44203", "5 164715 2565 8932 60992 8932 276212 276212 1271", "48 210795 276212 276212 131572 4012 2325 131572 ", "203812 2332 203812 11115 442035 164715 252195 2038", "12 11115 210795 456548 4012 2565 4012 164715 45654", "8 2332 131572 164715 456548 164715 8932 8932 8932 ", "210795 2565 2325 2565 2565"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 93;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> stick = {"748 112539 1300 28 243219 243219 112539 437980 5", "1 437980 243219 112539 748 75795 437980 231340 2", "76212 51 28 276212 51 37995 231340 437980 11253", "9 422499 437980 28 195 28 37995 412491 37995 19", "5 21412 28 276212 140 51 422499 51 748 276212 4", "42035 1035 748 51 1300 112539 437980 276212 195 7", "48 28 437980 276212 37995 195 1300 37995 1035 2", "1412 21412 442035 1300 442035 437980 51 51 44203", "5 442035 140 748 422499 276212 276212 140 243219", " 28 28 243219 437980 276212 437980 243219 195 140 ", "442035 1300 422499 28 442035 28 422499 422499 11", "2539 51 112539 442035 1300 437980 748 195 1300 19", "5 748 37995 243219 1035 37995 21412 276212 442035 ", "231340 231340 21412 1300 231340 243219 437980 1035", " 1035 37995 437980 422499 51 1035 140 422499 214", "12 276212 37995 112539 112539 231340 231340 78022", "6 21412 195 442035 231340 140 195 1300 21412 112", "539 276212 1035 748 21412 195 231340 276212 130", "0 748 276212 1035 1035 243219 243219 442035 231", "340 442035 1035 248452 231340 276212 195 243219 ", "195 28 140 422499 195 112539 140 231340 442035 2", "43219 422499 51 37995 1300 28 28 442035 231340 43", "7980 1300 140 243219 422499 748 190299 1035 112", "539 195 21412 140 422499"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> stick = {"89500 112539 89500 112539 231340 89500 231340 2", "31340 89500 243219 112539 89500 89500 243219 8950", "0 112539 89500 231340 243219 112539 243219 231340 ", "89500 89500 231340 243219 89500 89500 89500 231", "340 243219 243219 231340 89500 231340 231340 23134", "0 348219 89500 112539 231340 112539 231340 89500 8", "9500 243219 243219 89500 243219 112539 243219 895", "00 49125 112539 243219 231340 89500 112539 243219 ", "19995 231340 112539 89500 89500 112539 112539 112", "539 977223 112539 243219 243219 89500 243219 24", "3219 89500 112539 112539 243219 243219 89500 1125", "39 89500 231340 572 231340 112539 243219 243219", " 112539 112539 243219 231340 89500 243219 89500", " 112539 231340 112539 89500 89500 243219 231340 23", "1340 231340 112539 231340 243219 231340 231340 231", "340 112539 89500 112539 243219 231340 243219 685", "586 89500 112539 243219 112539 112539 89500 2313", "40 112539 243219 243219 112539 243219 231340 2313", "40 89500 243219 243219 231340 243219 89500 2313", "40 96220 231340 112539 231340 243219 3692 89500", " 89500 243219 112539 715270 231340 89500 112539 ", "89500 112539 231340 231340 112539 231340 231340 8", "9500 89500 61732 89500 112539 112539 112539 835646", " 243219 112539 112539 89500 112539 112539 89500 23", "1340 231340 14852 89500 231340 243219 54419 1125", "39 656867 243219 89500 231340 231340 112539 243", "219 243219 28875 89500 243219 243219 112539 360162", " 243219 112539 112539 231340"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> stick = {"89500 747863 12460 30459 112539 112539 112539 3045", "9 30459 12460 89500 12460 89500 89500 30459 112539", " 112539 30459 30459 112539 30459 12460 12460 895", "00 112539 12460 30459 30459 30459 112539 112539", " 30459 123580 30459 112539 112539 12460 12460 4", "34736 112539 12460 12460 89500 7275 89500 112539 ", "112539 12460 844092 89500 89500 30459 30459 124", "60 112539 89500 89500 12460 12460 112539 112539 12", "460 12460 112539 89500 30459 112539 30459 89500 ", "30459 112539 30459 12460 12460 89500 30459 30459 3", "0459 89500 30459 89500 22755 89500 235155 89500", " 89500 30459 12460 12460 89500 112539 7275 112539 ", "112539 89500 89500 112539 112539 112539 89500 895", "00 112539 947041 89500 117935 112539 30459 11253", "9 30459 112539 30459 112539 12460 12460 89500 1125", "39 112539 112539 30459 89500 12460 12460 12460 ", "12460 112539 89500 30459 112539 89500 611695 304", "59 112539 89500 112539 112539 89500 30459 112539 ", "112539 12460 89500 12460 783614 30459 89500 895", "00 314351 89500 112539 89500 30459 112539 112539", " 89500 112539 89500 30459 112539 30459 12460 89", "500 112539 30459 30459 12460 12460 12460 12460 ", "89500 30459 112539 12460 12460 12460 101092 8950", "0 12460 44165 89500 89500 89500 12460 30459 12460 ", "89500 12460 12460 12460 12460 30459 30459 30459 89", "500 89500 508 30459 30459 89500 30459 89500"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 92;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> stick = {"89500 3021 12460 30459 3021 3021 89500 3021 511", "428 89500 89500 12460 12460 12460 3021 89500 3021 ", "831317 89500 30459 89500 12460 30459 30459 3021 3", "021 428 30459 30459 30459 30459 12460 6052 30459", " 3021 12460 752115 3021 697936 30459 30459 89500 ", "89500 3021 3021 89500 30459 89500 12460 30459 213", "15 12460 3021 30459 89500 30459 30459 3021 1246", "0 3021 89500 30459 3021 89500 89500 207045 927653", " 89500 89500 30459 89500 55348 37875 30459 89500 3", "0459 3021 12460 292153 12460 30459 30459 726592 30", "21 89500 89500 12460 89500 143086 30459 30459 124", "60 3021 12460 169380 12460 12460 195167 30459 30", "459 3021 12460 12460 30459 3021 30459 699031 30", "459 12460 828881 12460 89500 3021 3021 89500 18", "92 826269 89500 12460 89500 30459 89500 3021 1246", "0 89500 3021 12460 89500 12460 89500 89500 3045", "9 30459 3021 89500 30459 89500 12460 12460 75853", " 30459 12460 3021 12460 12460 89500 3021 12460 895", "00 12460 30459 3021 3021 334875 12460 3021 30459 3", "0459 30459 3021 12460 3021 30459 89500 30459 98", "452 37995 30459 30459 89500 3021 89500 12460 3021", " 89500 12460 3021 89500 12460 3021 30459 12460 ", "12460 3021 89500 89500 357380 30459 89500 12460 1", "2460 3021 3021 261052 30459 3021 89500 12460 30", "21 12460"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> stick = {"89500 231340 112539 243219 112539 231340 231340 ", "112539 243219 60383 89500 89500 243219 231340 6", "92847 243219 89500 112539 243219 112539 231340 11", "2539 243219 89500 243219 89500 112539 231340 11253", "9 112539 112539 112539 89500 112539 243219 89500 ", "89500 243219 112539 112539 112539 89500 115995 ", "112539 112539 112539 231340 231340 89500 89500 2", "31340 89500 89500 971983 112539 89500 231340 11253", "9 231340 89500 231340 89500 243219 89500 89500 ", "112539 231340 89500 89500 89500 243219 89500 11253", "9 243219 89500 243219 243219 231340 112539 2432", "19 243219 89500 243219 112539 112539 89500 112539 ", "231340 243219 231340 243219 231340 1900 231340 8", "9500 231340 231340 112539 112539 112539 231340 2", "31340 89500 243219 89500 112539 89500 112539 231", "340 112539 231340 243219 112539 112539 243219 42", "5298 89500 231340 89500 231340 89500 231340 231340", " 531229 231340 112539 243219 89500 243219 243219", " 231340 243219 112539 89500 89500 112539 231340 1", "62435 89500 89500 112539 148148 578402 89500 24", "3219 243219 243219 89500 112539 302932 243219 243", "219 231340 89500 112539 243219 89500 112539 243", "219 243219 112539 112539 231340 231340 112539 2313", "40 231340 231340 243219 243219 89500 243219 24321", "9 112539 975148 231340 243219 112539 243219 89500 ", "112539 231340 89500 243219 243219 231340 231340 89", "500 231340 243219 89500 89500 231340 112539 89500 ", "243219 231340 231340 112539 112539"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> stick = {"89500 231340 89500 231340 231340 30459 30459 30459", " 30459 89500 231340 30459 89500 30459 112539 89", "500 648795 112539 89500 112539 30459 112539 112", "539 864506 30459 89500 89500 112539 112539 3045", "9 231340 994204 231340 89500 397155 30459 112539 2", "31340 231340 231340 112539 112539 33915 112539 1", "12539 30459 231340 231340 30459 30459 112539 23134", "0 30459 89500 89500 231340 112539 89500 231340 3", "0459 112539 231340 89500 89500 112539 112539 89", "500 231340 231340 261668 112539 112539 231340 89", "500 89500 30459 112539 373105 89500 231340 75555 ", "89500 764108 89500 89500 112539 30459 89500 8950", "0 233467 89500 231340 89500 112539 231340 89500 8", "9500 231340 112539 231340 89500 696929 112539 1", "12539 30459 30459 89500 112539 231340 112539 231", "340 89500 89500 89500 30459 89500 89500 89500 231", "340 231340 231340 112539 231340 30459 112539 231", "340 30459 30459 30459 231340 112539 30459 30459 ", "144628 231340 30459 89500 89500 30459 119207 23134", "0 30459 231340 30459 8835 112539 112539 89500 8950", "0 10492 112539 89500 112539 231340 30459 4755 2", "31340 231340 30459 89500 112539 36501 231340 304", "59 112539 89500 174699 30459 89500 30459 112539 23", "1340 112539 112539 89500 231340 30459 249925 3045", "9 610127 30459 112539 30459 30459 30459 30459 89", "500 112539 231340 30459 231340 30459 112539 112", "539 231340 30459 89500 112539 30459 89500"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> stick = {"437980 231340 5421 112539 243219 231340 243219 112", "539 437980 404803 231340 112539 231340 243219 1125", "39 243219 437980 231340 437980 437980 243219 43798", "0 551497 112539 841851 231340 243219 112539 243219", " 231340 231340 70755 437980 231340 61005 231340 2", "31340 231340 243219 231340 437980 839375 243219", " 112539 437980 437980 231340 437980 437980 24321", "9 231340 112539 231340 231340 243219 243219 805420", " 437980 243219 243219 700144 231340 243219 112539", " 437980 231340 231340 709490 243219 231340 2313", "40 231340 437980 112539 231340 243219 243219 11", "2539 243219 243219 437980 112539 112539 231340 112", "539 147416 231340 112539 8932 112539 231340 437980", " 479568 231340 437980 231340 243219 243219 11253", "9 112539 243219 914116 437980 437980 243219 2313", "40 437980 112539 437980 437980 112539 243219 112", "539 437980 532948 243219 42212 243219 231340 4379", "80 243219 2565 112539 243219 437980 243219 1125", "39 112539 437980 112539 112539 231340 231340 437", "980 112539 437980 437980 231340 231340 437980 4379", "80 112539 112539 424780 112539 231340 112539 2432", "19 112539 231340 112539 243219 243219 231340 11", "2539 1035 231340 437980 112539 112539 243219 69281", "0 252315 112539 112539 243219 231340 243219 2432", "19 112539 112539 437980 243219 243219 112539 23", "1340 231340 361573 231340 243219 284829 1365 43798", "0 112539 437980 632260 437980 112539 3021 45223", "5 231340 437980 159652 437980 683178 611970 112539", " 243219 437980 231340"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 86;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> stick = {"30459 584942 220 3021 3021 30459 12460 3021 220", " 220 12460 12460 673332 30459 30459 30459 12460 12", "460 220 30459 220 220 3021 220 30459 30459 220 61", "00 350132 495650 12460 3021 3021 12460 328118 1874", "0 12460 12460 12460 129315 396526 3021 30459 220 ", "220 220 3021 30459 30459 3021 31395 30459 30459 2", "20 225621 30459 278577 3021 3021 30459 341407 3021", " 220 374108 12460 3021 220 12460 12460 12460 1246", "0 12460 3021 3021 12460 3021 12460 220 12460 265", "772 220 30459 3021 21315 30459 220 12460 30459 30", "21 30459 12460 12460 3021 3021 12460 12460 220 1", "2460 220 12460 3021 220 826081 3021 30459 30459 12", "460 49395 12460 30459 220 30459 282700 12460 304", "59 12460 12460 220 220 12460 30459 30459 220 30", "21 102315 220 3021 220 30459 3021 220 12460 438", "139 30459 12460 3021 3021 985582 220 3021 15045 2", "20 12460 3021 12460 3021 12460 3021 3021 30459 2", "20 643654 226060 12460 30459 220 855588 220 2745", "40 3021 220 9548 90406 3021 30459 12460 19995 30", "459 220 41140 220 3021 220 220 3021 220 220 30459 ", "30459 220 30459 791012 220 3021 30459 12460 30459", " 82348 3021 3021 3021 836436 3021 3021 12460 304", "59 220 30459 3021 30459"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 83;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> stick = {"89500 89500 12460 203205 89500 3021 30459 89500 5", "9328 30459 486287 5852 30459 89500 3021 30459 302", "1 12460 30459 89500 3021 30459 405748 525858 12460", " 12460 12460 12460 3021 30459 89500 12460 76073", "9 3021 12460 84940 12460 12460 3021 12460 89500 12", "460 30459 30459 205755 3021 12460 89500 89500 302", "1 12460 205755 12460 89500 5081 12460 3021 58564 ", "12460 89500 164620 3021 213572 3021 12460 532 3", "021 30459 71925 6100 30459 30459 499613 3021 89500", " 3021 12460 89500 3021 3021 12460 109011 3021 304", "59 12460 89500 3021 30459 3021 89500 597311 30459 ", "30459 30459 89500 3021 30459 89500 30459 30459 895", "00 2212 12460 3021 89500 3021 3021 12460 12460 895", "00 1892 12460 3021 30459 30459 30459 30459 12460 ", "3021 706297 30459 3021 89500 3021 89500 3021 30459", " 794073 89500 89500 12460 3021 12460 30459 3021 ", "3021 30459 30459 12460 12460 89500 12460 3021 3", "021 89500 89500 89500 3021 89500 354877 30459 5", "86528 374108 89500 728907 12460 12460 3021 30459 ", "56925 402559 89500 30459 30459 89500 12460 30459", " 89500 3021 592472 89500 12460 30459 30459 8950", "0 30459 53037 12460 89500 3021 642225 727757 124", "60 12460 3021 89500 12460 818603 14835 12460 26715", " 3021 30459 89500 30459 30459 219868 30459 89500 1", "2460"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 82;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> stick = {"12460 30459 112539 112539 46228 30459 12460 304", "59 12460 112539 30459 30459 112539 89500 30459 112", "539 12460 12460 12460 747782 30459 30459 112539", " 12460 89500 30459 89500 30459 12460 30459 12460", " 89500 89500 89500 12460 89500 30459 112539 12460", " 89500 30459 112539 770503 89500 12460 89500 304", "59 12460 2325 89500 454132 30459 12460 12460 11", "2539 368439 112539 30459 30459 89500 112539 30459 ", "89500 30459 12460 30459 89500 12460 131572 1246", "0 12460 89500 89500 89500 726900 89500 112539 304", "59 112539 89500 12460 30459 89500 89500 28365 12", "460 89500 12460 30459 112539 30459 30459 89500 3", "0459 112539 89500 30459 112539 112539 89500 112539", " 247883 112539 12460 185999 112539 112539 30459 11", "2539 30459 30459 89500 12460 89500 30459 30459 112", "539 94395 65795 12460 7755 112539 30459 211624 ", "12460 112539 89500 112539 198099 170993 12460 1125", "39 285127 89500 112539 112539 89500 112539 112539", " 89500 89500 89500 12460 30459 12460 30459 12460 6", "29772 112539 112539 89500 112539 112539 12460 354", "392 12460 89500 12460 89500 112539 30459 89500 8", "9500 300103 112539 89500 89500 30459 12460 89500 ", "30459 12460 12460 12460 30459 12460 12460 11253", "9 112539 112539 112539 30459 89500 200664 154155 1", "2460 89500 112539 249377 30459 89500 30459 89500 ", "112539 112539 30459 12460 112539 12460 89500"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> stick = {"257701 3021 21 21 3021 20 21 21 20 20 20 220 21", " 220 21 20 20 21 20 21 878475 220 220 21 5355 21", " 220 896830 95060 3021 3021 3021 3021 21 3021 21", " 605879 20 220 20 20 3021 20 3021 220 3021 220 21", " 220 21 21 220 21 20 346262 20 21 3021 3021 220 30", "21 20 220 220 21 220 3021 20 220 3021 20 220 22", "0 220 3021 3021 593457 220 20 220 75684 20 3021 ", "21 220 3021 220 220 20 20 395750 3021 678224 461", "231 21 220 220 3021 20 3021 220 711946 500115 20 2", "0 220 20 20 20 21 220 20 21 20 3021 21 220 220 ", "3021 542629 704551 20 20 681189 2462 3021 20 20 ", "21 3021 3021 285 220 3021 220 3021 20 21 3021 21 8", "12595 20 3021 3021 20 3021 3021 21 220 20 20 220 ", "428 21 20 220 3021 596582 20 21 21 220 220 21 21", " 21 21 532 20 21 3021 435471 20 21 21 3021 302887", " 220 21 3021 220 21 220 3021 20 21 21 3021 21 2", "0 21 482023 220 20 20 21 21 21 21 20"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> stick = {"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 100;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> stick = {"330 440 330 560 330 792 330 1064 330 1800 ", "330 2464 330 3016 560 330 560 420 560 588 ", "560 684 560 702 560 900 560 1050 560 1161 ", "560 1344 560 1518 560 1551 560 1920 ", "560 2205 560 2418 792 594 792 715 792 806 ", "792 945 792 1056 792 1175 792 1344 792 1485 ", "792 1694 792 1855 792 2106 792 2310 ", "792 2850 792 3219 1064 2415 1064 2790 ", "1064 3648 1064 4998 1064 5727 1064 7410 ", "1800 190 1800 330 1800 405 1800 525 ", "1800 602 1800 671 1800 750 1800 960 ", "1800 1120 1800 1350 1800 1443 1800 1595 ", "1800 1625 1800 1785 1800 1890 1800 2176 ", "1800 2400 1800 2730 1800 2990 1800 3135 ", "1800 3375 500000 525000 1800 3850 1800 4320 ", "1800 4838 1800 5250 1800 5481 1800 5865 ", "1800 6355 1800 6630 1800 7392 1800 8000 ", "1800 8910 1800 9919 2464 330 2464 600 ", "500000 525000 5440 4080 5440 4500 5440 5244 ", "5440 5712 5440 6201 5440 7854 5440 8448 ", "9072 330 9072 1071 9072 1215 9072 1404 ", "9072 2304 9072 2646 9072 3425 500000 525000"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> stick = {"6 8"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> stick = {"115 252 275 6612"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> stick = {"175 400 17869 30056 16083 12879 8016 7644 15809 17", "69 32409 29950 13471 7099 2336 23225 21188 13712 1", "4351 19676 8907 26730 29686 25607 9190 7040 6336 6", "091 3445 3715 30182 3597 28888 17445 7906 31147 11", "649 30172 8167 19555 27469 29923 27343 16368 3860 ", "7299 4181 31349 23935 14736 6532 21023 16409 2870 ", "5487 29702 24745 16630 12067 29269 3776 6635 24538", " 32171 9102 2386 4465 19905 22521 1097 17692 32076", " 16625 23767 4697 23845 26109 20013 4642 679 9754 ", "7723 2663 5464 24262 30758 28091 8140 2392 25833 8", "46 26567 17042 1017 19227 4514 28793 27166 29282 4", "848 623871 203200 649803 227404 531765 426892 5691", "73 173964 328267 144156 713037 494284 696473 10713", "6 176473 190536 769223 246864 197087 271416 312245", " 434868 178723 114036 542841 826000 837199 687960 ", "852475 263388 315315 798172 161975 278472 895223 1", "11864 561653 650796 171785 296088 875135 58032 399", "55 37932 106387 136884 346063 291984 68971 681540 ", "451237 223884 38141 392460 339729 274120 75755 138", "852 446021 132300 256683 194756 593725 885492 5966", "19 544700 328141 809100 328015 602352 44031 636560", " 20355 391348 591157 418476 53341 845460 446091 71", "020 464225 120912 390609 256760 664333 187644 8933", "3 149556 647701 28980 491691 296380 734103 241304 ", "36585 27608 759295 57552 48389 415380"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> stick = {"999 499000"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> stick = {"7065 123 123 123 124 124 124 999999 612 ", "998260 512957 9891 998272 7065 1413 612", "5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ", "5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ", "5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ", "12 12 12 12 12 12 12 12 12 12 12 12 12 12 ", "12 12 12 12 12 12 12 12 12 12 12 12 12 12 ", "12 12 12 12 12 12 12 12 12 12 12 12 12 12 ", "12 12 12 12 12 12 12 12 12 12 12 12 12 12 ", "35 35 35 35 35 35 35 35 35 35 35 35 35 35 ", "35 35 35 35 35 35 35 35 35 35 35 35 35 35 ", "35 35 35 35 35 35 35 35 35 35 35 35 35 35 ", "35 35 35 35 35 35 35 35 35 35 35 35 35 35", " 998284 998272 612 1075 1075 1075 1075"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 62;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> stick = {"62 55 55 26 62 57 41 74 23 4 15 21 53 40 ", "68 47 97 32 52 73 948403 294906 163309 107588 ", "784609 790789 567887 367399 643457 752595 ", "9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12 185845 90372 9 12 9 12 185845 90372 ", "9 12 9 12"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> stick = {"900012 977915", " 900093 985124", " 900116 928587", " 900144 953167", " 900181 915420", " 900279 932720", " 900297 950104", " 900372 985205", " 900420 911309", " 900548 960405", " 900564 935773", " 900581 995460"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> stick = {"826950 634144 827160 632921"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> stick = {"889111 666000"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> stick = {"1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98", "1400 6 8 1401 98"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 38;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> stick = {"100005 143948"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> stick = {"33 56 544 783"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> stick = {"415 1615 3432 86112"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> stick = {"3 4 9 1", "2"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> stick = {"9 12 9 12 253043 443724"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> stick = {"20 21 220 99"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> stick = {"999999 2000"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> stick = {"35 12 5 612"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> stick = {"900200 76551"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> stick = {"500004 573853 500004 573853 500016 827113 500017"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> stick = {"994260 992909 999180 998579 996076 997293 991688 9", "99105 999180 998579 994260 992909 999180 998579 99", "6076 997293 991688 999105 991164 991627 996076 997", "293 994260 992909 994260 992909 997360 994191 9929", "76 996007 992976 996007 997360 994191 991164 99162", "7 999180 998579 991688 999105 994260 992909 994260", " 992909 991688 999105 997360 994191 997360 994191 ", "994260 992909 991164 991627 992976 996007 994260 9", "92909 991164 991627 994260 992909 996076 997293 99", "9180 998579 991688 999105 999180 998579 999180 998", "579 992976 996007 994260 992909 994260 992909 9916", "88 999105 994260 992909 997360 994191 996076 99729", "3 996076 997293 991688 999105 999180 998579 991164", " 991627 997360 994191 999180 998579 996076 997293 ", "999180 998579 991164 991627 997360 994191 999180 9", "98579 994260 992909 994260 992909 992976 996007 99", "6076 997293 996076 997293 997360 994191 992976 996", "007 991164 991627 994260 992909 992976 996007 9991", "80 998579 991164 991627 999180 998579 991688 99910", "5 991688 999105 991164 991627 994260 992909 994260", " 992909 996076 997293 997360 994191 991164 991627 ", "994260 992909 997360 994191 991164 991627 991688 9", "99105 992976 996007 992976 996007 991688 999105 99", "1688 999105 21 999105 997360 994191 996076 997", "293 996076 997293 991164 991627 999180 998579 9916", "88 999105 996076 997293 992976 996007 991164 99162", "7 997360 994191 996076 997293 999180 998579 994260", " 992909 991688 999105 991688 220 3021 20"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 100;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> stick = {"30 40 30 40 30 40 927903 738104"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> stick = {"60600 7", "9799"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> stick = {"97 26 877887 71 70 63 9 9 88 4 17 23660 927903 25 ", "26 75 49 23 95 76 21 137903 54 67 83 55 92 24 92 9", " 8 53 43 37740 98 21 74 70 95 738104 96 14 71 96 5", "2 86 7 45 99 64 56 907632 33 18 31 42 41 80 300003", " 803761 12 9 13 26 90 31 61 46 7 91 75 20 32037 24", " 400004 83 42 80 88 68 483296 72 15 42 716 99 46 1", "0 96 47 984064 41 657022 87 984064 89 68 57 29 79 ", "23660 17 5 21 96 60 51 92 94 72 12 34 99 28 39 25 ", "7 62 582874 66 20 57 31 100 84 759639 80 99 33 88 ", "82 41 56 51 34 803760 57 44 32 13 91624 53 95 76 3", "7 70 782463 31 40 43 25 52 12 91 73 80 4 23661 300", "003 32 50005 27 39 70 14 42 19 36 28 52 168954 4", "5 135111 55 60 79 64 96 24 52 39 53 64 65 13790", "4 890816 85 47 383446 29 339613 661377 100 80", " 220 112 220 50005 220 220"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> stick = {"3996 ", "997997"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    vector<string> stick = {"500004 573853 761125 ", "500017 594456 776785 ", "500021 552300 745021 ", "500088 549695 743137 ", "500004 573853 761125"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    vector<string> stick = {"999996 745003 999997 585996"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    vector<string> stick = {"9 12"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    vector<string> stick = {"661377 98", "4064"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    vector<string> stick = {"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 77;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    vector<string> stick = {"6", " 8"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    vector<string> stick = {"5 4 12 15 20 13 1 17 9 20", " 13 7 7 15 20 16 11 15 19 8"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    vector<string> stick = {"20 21 99 220"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    vector<string> stick = {"6 8 6 8"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    vector<string> stick = {"9863 992616"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    vector<string> stick = {"48 55 575 1512"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    vector<string> stick = {"978600 1399"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    vector<string> stick = {"927903 738104"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    vector<string> stick = {"51 140 1221 1300"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    vector<string> stick = {"950075 968748"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    vector<string> stick = {"1 3", "4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    vector<string> stick = {"52668 999999"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    vector<string> stick = {"231 520 2960 4209"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    vector<string> stick = {"249999 1000"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    vector<string> stick = {"1 754458", " 257836 1 1 152428", " 530723 1 1 769702", " 357925 1 1", " 1 160672", " 895481 324543", " 21040 163917", " 852281 1"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    vector<string> stick = {"390999 798400"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    vector<string> stick = {"137903 137904 803761 803760"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    vector<string> stick = {"927903 738104 3 4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    vector<string> stick = {"3 4 5 12 7 24 8 15 9 40 11 60 12 35 13 84 15 1", "12 16 63 3 4 5 12 7 24 8 15 9 40 11 60 12 35 1", "3 84 15 112 16 63 17 144 19 180 20 21 20 99 2", "1 220 23 264 24 143 25 312 27 364 28 45 28 19", "5 29 420 31 480 32 255 33 56 33 544 35 612 3", "6 77 36 323 37 684 39 80 39 760 40 399 41 840 1", "7 144 19 180 20 21 20 99 21 220 23 264 24 143 2", "5 312 27 364 28 45 28 195 29 420 31 480 32 255", "33 56 33 544 35 612 36 77 36 323 37 684 39 80", "39 760 40 399 41 840 32 255 33 56 33 544 35 61", "2 36 77 36 323 37 684 39 80 39 760 40 399 41 84", "0 43 924 44 117 44 483 45 1012 47 1104 48 55", "48 575 49 1200 51 140 51 1300 52 165 52 675 5", "3 1404 55 1512 56 783 57 176 57 1624 59 1740", "60 91 60 221 60 899"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 94;
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    vector<string> stick = {"12 9"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    vector<string> stick = {"6 8 8 8 8 8 8 10 10 11", " 739260 135531 3 4 4 3 56 90 12 33 44"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    vector<string> stick = {"997920 64449 962147 272520 799996 599997 994209 10", "7380 975600 219510 998445 5551 2 999410 33936 7999", "88 599991 873582 486640 960219 279180 799984 59998", "8 977760 20 9622 959976 279993 882330 470576 99887", "5 46848 989820 142128 976866 213712 806368 591360 ", "860808 508865 834834 550440 799972 599979 766395 6", "42312 945910 324312 98 5320 170489 997608 68544 95", "9595 281232 866000 499956 975205 221100 998640 512", "46 934928 354705 795648 605680 849015 528276 99932", "0 35490 6 8 ", "924725 380628 992035 125748 985320 170489 934928 3", "54705 881851 471420 798340 602", "109 996065 87912 976155 216692"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    vector<string> stick = {"5 11 12 60"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    vector<string> stick = {"998284 1413"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    vector<string> stick = {"3 4 5 12 16 12 16 12 16 3", "00000 9 12 4", "00000 300000 400000 3 4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test160() {
    vector<string> stick = {"44 240 44 240 44 240"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 160: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 160: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test161() {
    vector<string> stick = {"2 8 4 17 19 48 3 5 9 12 2123 1237 ", "12371 11 8976 1236 598349 5887 8969 ", "23 5 1 1 9 1 1 1 101 121 121 12 22 ", "99997 999", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "2 1 2 3 1 1 1 1 2 3"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 161: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 161: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test162() {
    vector<string> stick = {"100000 304500 100000 393750 100000 100000 997500"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 162: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 162: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test163() {
    vector<string> stick = {"2000 999999"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 163: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 163: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test164() {
    vector<string> stick = {"123456 404233"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 164: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 164: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test165() {
    vector<string> stick = {"3 5 4 12"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 165: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 165: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test166() {
    vector<string> stick = {"2 3"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 166: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 166: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test167() {
    vector<string> stick = {"3", " 4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 167: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 167: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test168() {
    vector<string> stick = {"6 8 8 8 8 8 8 10 10 11 3 3 4 99 1", " 739260 135531 3 4 4 3 56 90 12 33 44"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 168: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 168: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test169() {
    vector<string> stick = {"3 5 11 12 13 202 10", "202 201 21 220 220 20 21", "3 4 5 12 13", "20 3021 3021 220 28 1035 21412 37995 19 5", "4 3 5 14 13 202 7 4 13 19 220 220 222", "3 999999 12239 12498", "6 8 13 11 12 24 36 24 37 22 33 6 8 20"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 169: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 169: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test170() {
    vector<string> stick = {"6 8 10"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 170: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 170: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test171() {
    vector<string> stick = {"996076 997293"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 171: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 171: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test172() {
    vector<string> stick = {"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 91;
    if(result == expected) {
        cout << "Test Case 172: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 172: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test173() {
    vector<string> stick = {"999996 749997"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 173: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 173: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test174() {
    vector<string> stick = {"21 220 20 3021"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 174: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 174: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test175() {
    vector<string> stick = {"2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "21 22 23 24 25 26 27 28 29 30 31 32 33 34", "35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50", "51 52 53 54 55 56 57 58 59 60 61 62 63", "64 65 66 67 68 69 70 71 72 73 74 75 76 77 78", "79 80 81 82 83 84 85 86 87 88 89 90"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 175: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 175: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test176() {
    vector<string> stick = {"927903 738104 661377 984064 782463 890816"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 176: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 176: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test177() {
    vector<string> stick = {"29 341 341 420"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 177: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 177: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test178() {
    vector<string> stick = {"999996 755003"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 178: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 178: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test179() {
    vector<string> stick = {"65 72 2112 1295"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 179: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 179: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test180() {
    vector<string> stick = {"5 5 5 5 5 5 5 5 5 5 ", "5 5 5 5 5 5 5 5 5 5 ", "5 5 5 5 5 5 5 5 5 5 ", "5 5 5 5 5 5 5 5 5 5 ", "5 5 5 5 5 5 5 5 5 5 ", "12 12 12 12 12 12 12 12 12 12 ", "12 12 12 12 12 12 12 12 12 12 ", "12 12 12 12 12 12 12 12 12 12 ", "12 12 12 12 12 12 12 12 12 12 ", "12 12 12 12 12 12 12 12 12 12 ", "4 4 4 4 4 4 4 4 4 4 ", "4 4 4 4 4 4 4 4 4 4 ", "4 4 4 4 4 4 4 4 4 4 ", "4 4 4 4 4 4 4 4 4 4 ", "4 4 4 4 4 4 4 4 4 4 ", "35 35 35 35 35 35 35 35 35 35 ", "35 35 35 35 35 35 35 35 35 35 ", "35 35 35 35 35 35 35 35 35 35 ", "35 35 35 35 35 35 35 35 35 35 ", "35 35 35 35 35 35 35 35 35 35"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 180: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 180: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test181() {
    vector<string> stick = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", " 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35", " 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50", " 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65", " 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80", " 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95", " 96 97 98 99 100 101 102 103 104 105 106", " 107 108 109 110 111 112 113 114 115 116", " 117 118 119 120 121 122 123 124 125 126", " 127 128 129 130 131 132 133 134 135 136 137 138", " 139 140 141 142 143 144 145 146 147 148 149 150", " 151 152 153 154 155 156 157 158 159 160", " 161 162 163 164 165 166 167 168 169 170", " 171 172 173 174 175 176 177 178 179 180", " 181 182 183 184 185 186 187 188 189 190"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 181: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 181: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test182() {
    vector<string> stick = {"9 12 9 12 15 36 20 21 99 220"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 182: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 182: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test183() {
    vector<string> stick = {"585996 999997"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 183: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 183: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test184() {
    vector<string> stick = {"1035 6572 10275 21412"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 184: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 184: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test185() {
    vector<string> stick = {"21 20 99 220"};
    PythTriplets* pObj = new PythTriplets();
    clock_t start = clock();
    int result = pObj->findMax(stick);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 185: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 185: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    test160() == 0 ? ++passed : ++failed;
    test161() == 0 ? ++passed : ++failed;
    test162() == 0 ? ++passed : ++failed;
    test163() == 0 ? ++passed : ++failed;
    test164() == 0 ? ++passed : ++failed;
    test165() == 0 ? ++passed : ++failed;
    test166() == 0 ? ++passed : ++failed;
    test167() == 0 ? ++passed : ++failed;
    test168() == 0 ? ++passed : ++failed;
    test169() == 0 ? ++passed : ++failed;
    test170() == 0 ? ++passed : ++failed;
    test171() == 0 ? ++passed : ++failed;
    test172() == 0 ? ++passed : ++failed;
    test173() == 0 ? ++passed : ++failed;
    test174() == 0 ? ++passed : ++failed;
    test175() == 0 ? ++passed : ++failed;
    test176() == 0 ? ++passed : ++failed;
    test177() == 0 ? ++passed : ++failed;
    test178() == 0 ? ++passed : ++failed;
    test179() == 0 ? ++passed : ++failed;
    test180() == 0 ? ++passed : ++failed;
    test181() == 0 ? ++passed : ++failed;
    test182() == 0 ? ++passed : ++failed;
    test183() == 0 ? ++passed : ++failed;
    test184() == 0 ? ++passed : ++failed;
    test185() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22663117&rd=14157&pm=10766
********************************************************************************
#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;
 
const int MAXA = 10005, MAXB = 10005, MAXE = 100005, INF = 1000000005;
 
struct DfsMatch
{
    int A, B, eind, eadj [MAXE], eprev [MAXE], elast [MAXA];
    int start, vis [MAXA], prev [MAXB];
 
    inline DfsMatch ()
    {
        A = B = -1;
    }
 
    inline void init (int a, int b)
    {
        A = a; B = b; eind = 0;
        memset (elast, -1, A * sizeof (int));
    }
 
    inline void addedge (int a, int b)
    {
        eadj [eind] = b; eprev [eind] = elast [a]; elast [a] = eind++;
    }
 
    bool dfs (int num)
    {
        if (vis [num] == start)
            return false;
 
        vis [num] = start;
 
        for (int i = elast [num]; i != -1; i = eprev [i])
            if (prev [eadj [i]] == -1)
            {
                prev [eadj [i]] = num;
                return true;
            }
 
        for (int i = elast [num]; i != -1; i = eprev [i])
            if (dfs (prev [eadj [i]]))
            {
                prev [eadj [i]] = num;
                return true;
            }
 
        return false;
    }
 
    int match ()
    {
        if (A == -1 && B == -1)
            return -INF;
 
        memset (prev, -1, B * sizeof (int));
        memset (vis, -1, A * sizeof (int));
        int total = 0;
 
        for (int i = 0; i < A; i++)
        {
            start = i;
 
            if (dfs (i))
                total++;
        }
 
        return total;
    }
};
 
DfsMatch graph;
 
struct PythTriplets
{
    int findMax (vector <string> stick)
    {
        vector <int> even, odd;
        string all = accumulate (stick.begin (), stick.end (), string ());
        istringstream in (all);
 
        int len;
 
        while (in >> len)
        {
            if (len % 2 == 0)
                even.push_back (len);
            else
                odd.push_back (len);
        }
 
        int E = even.size (), O = odd.size ();
        graph.init (E, O);
 
        for (int i = 0; i < E; i++)
            for (int j = 0; j < O; j++)
            {
                long long c2 = (long long) even [i] * even [i] + (long long) odd [j] * odd [j];
                long long c = (long long) sqrt (c2 + 0.5);
 
                if (__gcd (even [i], odd [j]) == 1 && c * c == c2)
                    graph.addedge (i, j);
            }
 
        return graph.match ();
    }
};
 
 
 
// Powered by FileEdit
// Powered by moj 4.16 [modified TZTester]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/