/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=7246
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Terrorists {
public:
    int requiredCost(vector<string> roads);
};

int Terrorists::requiredCost(vector<string> roads) {
    int ret;
    return ret;
}


int test0() {
    vector<string> roads = {"0911", "9011", "1109", "1190"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> roads = {"0399", "3033", "9309", "9390"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> roads = {"030900", "304120", "040174", "911021", "027207", "004170"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> roads = {"0478122019605605828", "4040491862401574068", "7404844408554400297", "8040838953363789153", "1488086662874379878", "2943807364286037863", "2148670303668783223", "0849633082274287443", "1605660802489151560", "9283243220748921785", "6453826247055007108", "0056786784508094540", "5143468498580267507", "6547307219002018089", "0708738852096104849", "5409973711747840242", "8021882457155082070", "2695762468040844702", "8873833305807992020"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 72;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> roads = {"015841332118037473232854998290704", "102151536070178436260674855238507", "520588854293384787157459848840928", "815049593606012999218708943374715", "458409402675555828250728077873615", "118990477017587667999778908138762", "358544028751994205302062850334323", "335907204281268202212644095172922", "264327840730356551418190620766685", "102660727094706277473197463387302", "179071583904521121115078973534980", "803657110440594184216249400131043", "013055923755020332194219313539504", "378158965029201515986470095129584", "784257486614010359900921548014153", "447986225211353026698550558638748", "738926005728315200933949512570960", "367987521714259600638013778200505", "221229324412199696039221471220962", "365159011711980933307087559152024", "207809228356460838970901798150875", "864777061102249590209081514238836", "575027649974172541280800096248409", "449888240789901093171100198709321", "988909806494305557457501082562268", "954470592670194517759199807884283", "858378050330358828198468270362813", "228381317351510652211227583024333", "934773376833321370255340686204314", "080438426741994800020889242440176", "759767396390551795908843228331006", "002116228084085460627302681317002", "478552325203443805245691833346620"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 105;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> roads = {"087174459035093570354683731187560", "804124868386510177039717121343687", "740492401515834405270454119395983", "114059320045162228029886150754831", "729506767053358655800766137404628", "442960566424266622856069076260339", "484375017432495914358797906298224", "560266104343027494551227543685196", "981076740117013354460050014119879", "035004431012604580767574731905594", "381452341107386113755990800223777", "565534237270080022131402504697732", "058132400630039000815746980415204", "913656921088305962868903243041589", "304286573460950977353870521356387", "514266943510099073977593094058017", "770252195812067707225303334002507", "075852444032027370324542291749173", "302088354771883923034174165315793", "537205556653165722306085361364175", "490906810751583754460724020117528", "674870720594798535107040551351117", "815866925790407904782405385027622", "374669770402630332454050782949231", "711110950785925032130537074882696", "321537041300842939662588700847355", "119076634104031441510152400244782", "133742261926403007331309882030662", "849506981029145504161524844301527", "735440859537516829547179274010580", "569863218577253051715162637655039", "688323297973088107972123958628300", "073189469472497773358721652270900"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 100;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> roads = {"044967263", "409134231", "490642938", "916036261", "634306024", "742660550", "229205069", "633625604", "318140940"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> roads = {"048115567", "405412876", "850181674", "141093045", "118905984", "521350866", "586098060", "677486603", "764546030"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> roads = {"03158937131267545137198090190746460", "30537062922443121779912840749320714", "15087521390979156074951657618126429", "53806493872688300055644914652670937", "87760858683650763941402770216269797", "90548099471267218942569205657630551", "36295902279235514369291298149484574", "72138920392825609940734002177243516", "19386423045932895809761616866450255", "32978779404295341085494041193646485", "12023192540482275107279659338219010", "24966228924072790565519458582601143", "64785632398707793462453746279320293", "73980755252270659957804821906536177", "51137256832776048238512632409006305", "42506110947995400572999237672035816", "51603849515039800094667727746042943", "17009939801549250044197254626143472", "37754464080665379400741613853718657", "79451290957527824400849476699229225", "19964527742548596178046028296980951", "91540693697150196944401417943918994", "82142914149934297719610669790024638", "08697220606478627264046020876885015", "94517090145542332517216204295209708", "00740582619861277436879040186202696", "17662611813529467686297821017237058", "94151547693870074259949798107776369", "09826797638296926639630656770385936", "73162642462635000172990822273058908", "42276384541023034412812800378508556", "60609043069106652389084592765880161", "47497555240121389462996076039951006", "61239571581497014752593109563056009", "04977146550337563275148586896861690"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 130;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> roads = {"042011538984773890471776878", "407440944474798093957770722", "270110929848683077706881169", "041077329836558753279775608", "141709008417289235913971527", "100790866357292422230705155", "599308007785751442493875650", "342206009374359967214084666", "849986790924531292920426817", "948843739087434413169114968", "874315872804880095138203371", "448677544740575468553746283", "776522735485008776905920548", "798589553387007888083885168", "383892191405870773732511855", "800724492404787079105218445", "997532469196787705840898294", "037352272358683950617056235", "497292429115907186073274720", "750713912635083041707798151", "176930340983532507370558079", "778797804127985280275050021", "778770782104281195795506600", "601515546436051886488060610", "871651668932518422710066031", "726025561678465493257201302", "829875067813885545019100120"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 101;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> roads = {"04738172772708124618408989346703", "40291245707206162923369342115560", "72056875797223702024876419848120", "39507553789679668977162140983911", "81670046808444312613259012584117", "12850055407676391586618462954326", "74754505194705783589977362728946", "25536550335074651658177210977299", "77778413074369202916118514545135", "70980093709020939544912848053762", "27798745490653106213110646550816", "72264670306007740406991862858469", "00274707625000306779732775816153", "86394654903700360248807834824102", "11763376291733078761701487263284", "26061985030406705814666019451479", "42282131296060850888860114656041", "69096556952472788048999567187746", "12271885141074618403540147202962", "83473698643698148830261602231351", "43812691191978768952090210426540", "06765177111930066946908535364459", "89629877820127160901080469118565", "93410432586878401516254014763122", "84141661144673811640136105716727", "92902220486254794772059450242313", "31895979505888246122431772096185", "41488527455512655803261614903996", "65834487530864316721648362630633", "75191392178411240793545173196008", "06211249361650874465456221893004", "30017669526932491621095273563840"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 115;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> roads = {"07571849276660790337845514156", "70472436204571777326079716592", "54048318337891558266477237034", "77405374603214072203385897177", "12850571471320510924471944345", "84335075763742162135861889405", "43177704433440946377569185624", "96841540355542061525943683170", "22364743001588805844575384042", "70307635007748868036474331258", "64731335170116884553021041659", "65823745571086876641164696097", "67912444841805502843056672632", "01140202886650690059838288684", "77505190888856039615718093754", "97571646068709303842948767279", "07820261584620930281413449267", "33229135805680682027052521978", "32602372435445148206971561977", "76634575463139521760047688463", "80434859540108794090084636399", "47787664772653141574803157965", "59751193541468883217430228169", "57289816330662074556612054368", "11394888834978964268352507280", "46774953411628379118678470982", "15013461026066722994391329069", "59374027455938576776966688608", "62475540289724497873959802980"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 108;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> roads = {"0362508685671356411172915619", "3022759143370673020186502579", "6206820198983214083389238057", "2260564923369851117272608647", "5785035942494029115961023035", "0526303703822463252612486824", "8904530043930719290737586454", "6119970037484651878978262476", "8492404302808825899079524367", "5383233720401421935590926420", "6393489484051383650610440221", "7786923800501899791108093513", "1039420481110340051515057486", "3628047684383054001859195257", "5715261522894504692340411210", "6341939151390440501219935738", "4001122889670065022407081761", "1281159793595090202680644173", "1037520895011121220796460315", "1132967905615832467052803905", "7887613779101541089507490532", "2692127890085909706270871067", "9526045259400149064848093656", "1030288622495913846097909720", "5288366246037515140301390363", "6506084434254227713950673077", "1754325762218513671036526705", "9977544670136708135527603750"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> roads = {"066967779999879799876989978677796698989679877", "606989888896969686887898886686886687869668886", "660887677698898878689997879999886766987698767", "998089988978668666977876999768998769786689676", "688809987897996789677687687898989778767969967", "797990687669696878977878879687767686997788696", "786996076877686678868869879987876666699666797", "787888706778799979867678979979778866968677898", "987877660687989779676689678768767988876979676", "986986876077877897899866796768867867868978666", "999796778708868999777697676679797869879978896", "968879787780868869999996889968876686966669769", "898696679888066897867698779966886887987968676", "769699898766608796798667987667987766999889899", "998866699788680867986866788677867986696878899", "768678697898878088988968988769888878687888988", "987687777996996808896897866787786788799986878", "968698899799767880668688898678796779879769869", "886969886879879986089687776977896986978688786", "788777667979698896808979878978797876679999679", "679777876979786868980998676976797786898779978", "989868866869668986699086696898696678988797999", "899787678699966698879808896999977776889869876", "987678989676876878798680896998779679668788699", "988968896768797988786688086776998876966677796", "787987777978788869777999807888877697966979668", "869979998669978868686666670868796879676887786", "669786997769966776999899788078898669799697869", "789698876676667687777999786707999867977769766", "769887798898677978786898688870967786789769766", "788997877878898877877697987899086677696786679", "988986776697886889999977979996808697887677789", "666897687776677866677679876897680868867799887", "667776689886879877987676868687668086988768777", "986678668668868787878777797668796806899899888", "876986668796766889666869679976778660897666996", "989779698889996678968986996797688988079788788", "868869967676899897779886667978986899709976687", "997677986896796799898898666979677897990669997", "666697669996988897697787698677767786796069686", "769868677776687886897968778966879696876609799", "988998679889898869899798797799679896869990888", "887696786687688988769986767877678789769678086", "786769997696799876877979968666788789889898806", "767676786669699889698969686966997786877698660"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 315;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> roads = {"0799898896877967976769976996696867676797996", "7089666989988787797788796889976866688669787", "9808886968897669667798886768887796676766867", "9980876888986879988866979669787879677767866", "8688079787678879798867697968676696976969788", "9687707769668898667778799667668896689789689", "8666970767798986869669777878896887879686988", "8998777099789877779766886967668796989969669", "9868866907666879789988986689967796969976967", "6988797970798976669696696686986888888789999", "8989667767078798678767679866698667798766967", "7898769869707667869667867877798896887887667", "7876888968870889669688869788976879896696876", "9768889889768079899999697877866777767688987", "6867798777968706879869767866676787889788787", "7799986796879960769899866788798679676679669", "9769768776686887069786986778669986866689669", "7968966786766976606869669799868897779769879", "6778879999899999960799679796689786788686676", "7778876796766988787089669969789889689897879", "6896676689668969869807968999666886896686766", "9886789686778999699970997886979878697986778", "9789677896688678966699087968898996778889769", "7987997889766966867669809669678686878698669", "6669797666979776699987790788979787989799967", "9876968966887887777998967097867989688796768", "9866667688678768799698668908686697778666769", "6989878796678768896996898780867868766688678", "6987668699679867686769869868099986977869986", "9788769668997679668867977686909766796779896", "6677686876886668989969889767990797966796778", "8878688778688776987888967968977099868997868", "6697998998697787898887988896869909876869776", "7669667668769779676968667978667990897766768", "6666968998788786877686789677979888087769687", "7877787868989687678899778876796679807967889", "6867699998876796698967889886766867770887667", "7677976997786676676869867766877987798089699", "9666688678689887868988899968679966668806889", "7967996969676889996766989668996796977960999", "9788769699968976686877769776987877686689099", "9866888669667886677767666667897676886989906", "6776898979776779996968997898668868797999960"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 298;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> roads = {"0787899869688676977678896868999666898699", "7069789766878989976989686989999869876766", "8606699979776879868797667696678967996766", "7960767778989999899798688869877878776966", "8767066998689878696667767899878967868697", "9896609786876966987666866998668987877966", "9997690969976876797676679889888966979966", "8797979079979696978888966978768787888678", "6677986709678998679997976677999967769778", "9698869990766976887769766777979986877896", "6879689967097677978799798676876796797796", "8778877776907696669896667668688889789787", "8869966986770896678986777868678986689668", "6989898699668079898878977788988789979866", "7879767997799708766876796698867896879877", "6999866686766980777768796697796968797778", "9988697968966877077787666788876679999696", "7769989778767967706687677688698789898669", "7689677897898867760797898877979766868777", "6977666897789887767076686876878976877686", "7899667896998776889708779977689797876698", "8978766879966868777680877668779888798796", "8666786997767977668678067887989767978766", "9868667676967799679877607879667689896688", "6678769666877766678697770767788669997877", "8968898967668766768896887076977877889976", "6896998777766899887776876709998899677697", "8969989877688887887678797690689879688976", "9968868799866987869867967996089987687687", "9977768697787869797787868798808998878686", "9987888899688876689899978789980697786887", "6898999799789789677978766888996066967886", "6667686868988896786798686797899606977796", "6978776776696968996678799799787660899769", "8897889878776987988887989866687998098887", "9797677867988779996779799878878679907977", "8666879897799997988768867978786779870667", "6779699678776887667667768969668877896077", "9666966779986677967899687797888896876709", "9666766886678678697686687676767669777790"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 270;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> roads = {"086886967966889688698999978797869686888666", "807898997869767886796966688967668876996667", "670786696967788678887787976679679668679876", "887099997997887688787768668668997978678977", "898906867968997978777676788789877879879668", "686960787899867987789887977678966679666797", "996987096899669999776987679697896968878777", "699968908877999787968989687796969777888989", "776777680786999668699867798869687886966897", "989998887086877897887768989786676898679767", "666969978809766696966866989999878998999988", "697789976690697767997886777777687767687998", "877898699876066978876887669788868796689997", "868896699769606877989789899698697778779978", "978777999767660687769868769866868687799687", "686699976867986079769866788798776676776976", "887878986996778708667886899869796676867676", "868887978767877980998678888986987697697688", "678777796899897769078679988788899786767678", "998878769869786669709668698968886976987968", "867779689767699978890777789768868689976996", "997768998788878886667076798669867889977777", "968678886668886687767707689979678879977889", "967867797866798668987670968877978896786989", "969679667997687788967769099866967887977988", "787687789887696898898986908697987666698688", "886887978997999898889898980767778999697688", "796676678797768789797698867077898988966668", "967687996897896968866677696707766768798996", "779898769697886896888997677770799679868988", "866989896686868779888869997877066998998888", "667976968778696798986677687969608979787699", "989776697687878667968788778869680776779778", "686986978897776666796888869976997078967888", "876777678996978779878879869867977709779977", "668899876887687667669996769889896890779887", "896686889696677786799997966978977977077666", "897776786798879769687778799696987677707686", "869896886997999677776776787688879799770986", "668967798799996966699789966699867898669096", "667769789689978778769788888698897878688908", "676787797788787668886799888868898877666680"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 295;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> roads = {"0898667877976677968986876687697789976876869677", "8088686669976766896976887697968976896699677997", "9809688999666688969998688987798787799888797667", "8890788767689676696798899787996997977666976696", "6667069668968686868998997867876697897969766677", "6888606768678969989977779979878666888766966668", "7688960988698887897786699996787797766788679689", "8697679077788888668968888787998689696969877979", "7696668708769676996669979868899677988886887866", "7997888780796986999787787968899776786788877678", "9966966777069888986686869988698996898769888866", "7768679869606798696879968778898997978796976997", "6669888896960789967677889767798678788867768986", "6766698869877086678879879769667777888787876987", "7687868878898806877666766976669789676786799767", "7686697866889660667767778686797896877689686677", "9896898699969686066686887969778786886769787668", "6969689699896776608668768999876689996777887878", "8696897869667877680887997899879976796778969878", "9997997967686867668089787788889869898786888697", "8799978668877766868807967689968899689788878997", "6688876897697967687970889988878666876966987788", "8868976897898877879798066667788869877988997676", "7889979878668767869868606697968867899696679977", "6789799897989968787779660786777867799877697976", "6697899789977796998769667079669997876898888988", "8988679866876678699888698709767887868677876866", "7777796788887966999898776990668699668789789689", "6979887988687667788898797676098669776888778987", "9699778999999669777867867666906897678679989776", "7886687899888797869988887978860879798866877668", "7979667667996778769886888986688076988979989768", "8789969877997789887696666989697706998997866779", "9677767976678796696996977779979660996768789789", "9879887697897868897868887886767999099876698777", "7997986988978877899987799766779899906886796868", "6697786686888867666896799688688886960877888668", "8686977987778776777779968867868997888086787978", "7986668688696888677886897978876796787808769796", "6986968968967769978686867879896978667680988786", "8679796888897876789889966887798987678779069697", "6797667787876798886878979878787868998868607676", "9776669777868696779887797869897969868798970969", "6966666986899976688697699986976777786977669079", "7969768767698867677998777868876678766798976706", "7776789968676777888778676869768899788866769960"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 318;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> roads = {"07679798797978869986878689778988678889686969", "70899999678677667697797779676668996787789677", "68099687966789966879996686689967966866968999", "79906996766889896677867679879797967897986897", "99960867767877899896878679999788796868669796", "79698099788798968969686868688786666966786677", "99896907686678767799797989977679767699886696", "89767970677766779988679777766697997668967887", "76977766097676768987799969796789878868896779", "97666887907897796779687877978777789668876689", "78667867770887866997769676999768778878686778", "96788767688066786789989966886896677677986796", "77887976798606878697987896668779969969769969", "87997886677660677867798989786699899668997998", "86988977778786069668967966786698978978878766", "66699667696877609978678678678989996769987878", "97669879866687990988699667997978989779896679", "96868979979768699097696667866799787676676666", "89779698879896678909969868778768867767968978", "67976998797977888790898868898767797877888878", "87988676767997966698066876888779897989967977", "79967897986889679969609978797689866867868996", "87678679979978789698690867878789897776866689", "67666897986989966688898078697678678797697996", "87877687677698676666776706786878676666796696", "99699897976669687788687860999996798867766688", "76689697799867769878878679068878789977889899", "77879876979868879679897989607986977976989768", "86999876689686687688878769870998698867878976", "96977766777876699777767689899076866966688689", "86698879876979987966788779789708778768796867", "88778697978699898987999886868680686969667788", "69997679877698999787888667796876086698788689", "79669669787769798869969779879678808778777879", "86676677898799869777767868978686680667988797", "87888966868696977678987768998979676097977998", "88696696667766767767867966776666976909966976", "97678698888798899677976767767689887790868967", "67996789886979898698988677898676779998096989", "88686886978869789768666996887896878766907897", "69869667666697876688786766998867878768670997", "96987668767799786698996966879687687999989069", "67999798787969677677798998967868879976899607", "97976767998698689688769668986978997867977970"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 295;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> roads = {"08968999786697667869999869967678676886696688868979", "80666779989899988978997866777698977697676778978989", "96068887969986866897696686669969676978777969799968", "66606687878798679879786669698666679686876978868679", "86860988777987696698977779799869776898986898786677", "97869087698676699777799988876666676888896987697787", "97888806888769969986667688967977897988997877697679", "99778760887678696786879787678796888966666868666979", "79987688079968986777689768999887979767787878869898", "88677988709978796778788679877899689668678788688766", "69987887990989979669696897996766766668798798778776", "68979676999076969769786888998897998768886678786897", "99898767678706799977987998978767898689667786669866", "79687698889660778686866789668688767667668788677689", "69866696979977099867966878988786866877997868868889", "68679969897697909978899789699789689969979778878697", "78696996669998990997899989976678879896778697877777", "89886797776796899079676686779989968996679879997878", "67979788776678679707696696668786878689666779967979", "98798766789976787970776669896986979696898677986779", "99679768676798988667078677966889896776899698999668", "99987967889886699797706798868968799768797777697687", "97667979986676699666860769768778878887976799699977", "88667967768897879666677098899777676698876789776668", "66867888679898788896796909776699877879997878996767", "96699887897889899669789890777888999986689766787998", "97667896989996969768987877086978876779766988997778", "67699767979976897769666977807787969677666976899998", "77989678976888896986688967670969688799667978669688", "66968697887876776979897768979086788967679969787678", "79666679896968887888867798786809669876998998869876", "88969676796778698966988798879690696876668877887868", "69667688967987868989878689896766087697687899899886", "77777798786996687677997779768869806799677677867996", "67696678996887699889698679698896760798996769886669", "86968899766766898966778689767988677098986777697987", "89789886666686769989768978779677999909999878776769", "67868886788897796696687896979766798890768878878866", "66789896767866997668879896766696669997077868666786", "97778996879866977769997798666796879896709986686686", "66766676788678798968976679667988776698790668898876", "67998988877677876876677787999998867788896088767869", "87679876789788679777979876877697976777686807988687", "88988778888868887997879986868987979788868870897698", "89787666867766888999966797986788888678668798077796", "67968996687867677968999798996868968977689689708786", "88986776988697887776979667799797976768668787780897", "99966769877886867897669679796688896978768866778097", "78677877967968897777687669798776896866887689989906", "99897799866769977899877878888868669796666978667760"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 350;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> roads = {"07976967877677887899796677789698887866898", "70969696769787689677867979799688677896688", "99086698789786699698797699777679869997866", "76807687868778799797998968988966786987776", "69670678999666869897869666779999777667666", "96666069786896887779979887786968776867978", "69987606967968689888886668678876969766969", "76878960989889976879866679887878986777867", "87789799087869866686876879989786969997777", "76869868806897796768797897797888766868667", "79989679760999786777789778776967877798699", "67776898889068998687869687796676879778879", "78876968699608766877678966996987899887776", "77686689979880979776986686876997877768969", "86678869877979079799876878978878978879868", "88996887698967708966768886889788677766979", "79999796666869980787977886986988678698887", "86678788677687797069966668788699766986689", "97999787867877968608777667877688669788977", "97877989687776967980787688889668879998797", "78798988877869879977086686878769787787799", "96996786798678767678806777997677869897697", "67789966679986687677660976868978688667989", "69696866887696888666679096998677998676679", "77966867797868788668877908986767977687768", "79986789978766866878676680768769967678896", "77797768977798989788898997098669777698866", "89787878897997788878796986907997966867986", "99789687976666896879878868870898686797797", "66699988789699879666769677698086777986996", "98769677886789788986677766699806696966679", "88969868687677888988978779978660688777777", "86877799978888966768786999796766076677887", "87687768667797777667868976768798708996989", "77967696967997878699798877766768680766979", "88996877987787876979786666687997697089898", "69986667969786769889896787969867796807789", "66777767788878968688777678877667766970988", "86876998766879898697769678897967899879096", "98676766769776678879998769689977887988908", "88666897779969897977979986667697799898680"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 287;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> roads = {"0789789886698867669788669686689867898897879889789", "7079897777979777778679869988668667867686997986967", "8706897869987697687888778767898866767997897779886", "9960786996778678976699776978998767867888699769679", "7887088799876967797986667899986688989787867898768", "8998806677868677666997897966987677869877988978876", "9776860688866899696797996687786688689789768776779", "8789766078999968999766877767799989877867679968987", "8769978709766999798999979867699699898866769787699", "6796978890786886668998686877886897669689779689779", "6997888977099669897886799887969989967696998897879", "9787766968906879968798969767667776986897877667686", "8978686966960789669769676699779776877987887886686", "8766968998687087888998989889778888697988766766699", "6797679698678807677668666666978898799969988888766", "7778779896999770989996767879777989897777787689968", "6769766976896869067868976799888977997687897798898", "6787969996966878607979868969968987799699867977997", "9876766988789879770989997777766967898997697977789", "7686997799877969899069879688876887997988679796967", "8789899699896969678609697889867678967789787786668", "8989677698689886899990677679687689897697996699776", "6877689896796967989866076986689887978979997776769", "6677699778967866769797709887879987677778676699777", "9986776796996967687977690779796786966787898896668", "6979896788876868797686987099667777966878789799789", "8867968667869867967887887907998876996768889666797", "6878967777779969997899679970688677786988999699897", "6689997768967797897886687696088778969966767667897", "8699888998667777866768879698809768698989799696698", "9888676996979887886677996788890996898667676899768", "8687666968977889999866897786779066697676897786677", "6666878899877898786878888777769608679989997696688", "7767878997966889777789776767886680989796786778667", "8878986886998678978998969997968669076767977798997", "9666868796687999999969776698699978709866678688786", "8777999789767797798777876666988799690687887786697", "8698787886689997669976977879996697786087989677896", "9898878668998867899889778768686789668806667899888", "7678779769677897797897987888697696767760767666798", "8986897677988797886679968789776897968967077686996", "7999686767978688969789979889697998778866708989796", "9779788999877687777976768999796776787977780869777", "8977897976868786799776768766668767767686698097987", "8876977688968688977989799969699897988796886907666", "9699886879776689877669696969769668886796699770968", "7986787967866679897967776778867666976887977969077", "8687677897788966998667676899996786989989997866709", "9769869799966968879786978977788787767688667768790"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 348;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> roads = {"08789999898998679997868776778796777898998988666", "80867877677978667898867879796899999688889877789", "78098966666887696866869976976787889999989776679", "86907787689686876788686867997769996868977697687", "97870976999868879868676689888888796786787868796", "98979088877996987999696689686868966797999897897", "97687806977968769679776978987986889778999977669", "97676860998667778989869997698789779789976666887", "86669899098877777767866788987778677899978897688", "97689779906697689676997977787966769796799677997", "87699778860797976786767796768869777777669899997", "99868996867078976896667689767977986888677788769", "97886966799709899977678698678877796989998698897", "88768687777890688689898879687989886989967799776", "66688977769986087786776876787868668776766966889", "76977867787798807868688768766687766768677669979", "97669798796698770988997886698968897989886969687", "98878969767896789069898869876966678779798877997", "99686978678978868609796767769977789686679796979", "78688999766679688990687796669987986988688978897", "88866678897668769876076686989997886886899997677", "66687976696679789998706697766798687688767897679", "87966669677788687867660866987998679769689978966", "78986699797668878877668098689669796677889889867", "77768879879897768669896906789766899779686796996", "69679987876989686976676860979796776996797698979", "77998696977766776876979679098979898878667789666", "79798889886678869766868887909887787997989777977", "86678678778787768699967999890796886877868777869", "78778897798989869999979677987078898768868979779", "99868688766778686678999669789708689979879977787", "69798869869779878677788966976880667779877886898", "79897987677978678679866787878866096987699999787", "79899687767898669788887997988986907896766888689", "79966699797666867896679696876897670697876869686", "86987777877899779769867679898797986086798779999", "98968978997888768788886779797677899806889689876", "88986789967899689968689796877899767660777968689", "98997999976699768766876867698888678787078699967", "98878997796796678978968889686677967987706777879", "89977996899787676898979967798897966897860997967", "98768896868767969879989876777998988769679099788", "87796976979899666797997899877778986786979907987", "87678776779889699768778968977976989998977970977", "67667868699787896998669899698778766986989799076", "68789968899697878979776697676789888978676887709", "69976797877976997797796769679978796969797877690"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 328;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> roads = {"08696777669964897976868667968977677987677896979966", "80981669976798999699792769669889977875888968767986", "69067986787698686766739788979786966986988676787978", "98607897807698697987689879685769761889798987766988", "61770864777676869779688978998805866776798906789627", "76988094889966989797898857598661767868896699768999", "76896907897796879997778798469966678869669676976877", "79674470776796996889666498889787998887698769997968", "69787887067677678766499979966706866874778849669886", "67807897606698776858876897986698877766576798668966", "96777976760677668868677669997869889966779796666866", "97666977666066978697907696978778856798777768388289", "69997699797606899869678686166688877897669886878869", "48886666787660768997796976963976698686787896886688", "89668989676987077776697878066996996778768698897658", "99896879776796709676788697876896887777978987869869", "79679996868898790789888876669897689686878797664797", "96797798788689767088867637967487978999692849948187", "79687998656969778808869975077807698666687797978687", "69679779688797669880786797162996967666799859966069", "87766876486967678887066787688997976784989867876878", "69388976977079988668607789989829978887677787964996", "82998886967786788796670979997997796989768776876786", "67789874986669868697779097697088896067999969777767", "66877599796987797379887909997689688866869689680676", "79898788979666876757799790988616678778986869799986", "96969548999919086901699699089979465986878486816968", "66789968689766676676889998809768669668667897783978", "89958899667863669772897778990868680769796387866987", "98778697768769988489989066978098898699897066976967", "78860668096787999809929881766906977798075698797766", "79695167689886667776797896988860769996998869687684", "69978769888886986969997866466897097687898973679889", "77666679678579988796779987668976907868768996609999", "77616788679678679887686688590879770999796779638798", "98987888879786776966789087967679689079679989788887", "87887668766998778966888667866999869709969987880966", "75696897466876876966479768689986789990776887686999", "68977866757767798667967989867809877697079696976627", "78899969777768677989876968769979969767707987898876", "78888698869797888279978996876758886996970769986692", "89699667877788697878877968483068997998697076878868", "96780976499689989495687686898696797888986706989679", "68676969986866877979776999677689369977679660769697", "97777799666388886999898767878976666786989897098969", "76868679666878966476767789186798703888798786909839", "97769867986886794886646709636677998806686899890799", "99996989898286687160897769999976897899686866987096", "68782976866868569886798678678668899869279679639909", "66887978666998897779866766887764998769762897999690"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 325;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> roads = {"07786777867998089997668697477679798896666668793996", "70667985766889778786998777968999796799867968777686", "76066616788969688887799866899697968597987987769874", "86609776896666983696379876666577389486996779971696", "67690687598668688777679777897607979879966898868186", "79676086788978996778978778986786976867676986668658", "78178807699897897676748997967679669708799798666857", "75667670676687778669688762619769996866679967768867", "87785766059795689998968667663968689766698969858886", "66899897507870692887676959767687688977667969669966", "76868896970896689979777667687696887679699788977990", "98966986788097778867666766967998984796947987969783", "98666798979909997967789999679786979686976787769178", "89968877506790972776897979798978688699798898887666", "07696987666799079787979794686897897987668677988788", "87888997898797707887647789981698966977866779296699", "98838678929872970868787787788776838689898697868989", "97867766989897788066876969687688777977998768879798", "98897776987667886609766979788976688678978406668766", "76767869879776778690366889787398868677887679778968", "69736976967678967873076979784986297979966967789617", "69977748677689748766708798829997568767887868477885", "88999888867697977666680976097786867897768778777957", "67887797696799777998979087778738397976939668597998", "97677796656697988678797807628969888988869892886198", "77667872797699497999986770896967692669762689766997", "49868996676967697677780768087668367986886666996966", "76969861668679888888829729801279967789968769660996", "78967679377798618787497886710968986679879836876877", "69656767966979867693997799629082776697699660656876", "79970876689987997879898366676807899989666686689968", "99777699876868786868676897898270786777768689989679", "77939969668996898768258386399787086846979876997797", "99687769888878963786966989668798807989987798866977", "86899696987498768788787782776696670978661977977797", "87548878796766996966978996976697899069767787778769", "99987606677989878777769786887987487607866999998687", "69769786679669779787977689699797698970988779981999", "68999676666997688998987987898667996789075675878666", "66896797969479669978686366867966786668706868579977", "67766699879768868887678992689968971768560879878967", "69978979997978676746987686678666879797688084687807", "66879896668889779607667698663688797897767807776761", "88798687998778797869788829696069687799589470668796", "77798667869978928867747587968669989799858676089497", "97676666567668896767877986967588967798777876809887", "37918868897997868988977766606699767881898768990986", "96861688899716769779689919998896797769699877489087", "98798556869876898966185999697767979689676069988809", "66466877660386899868757887667689777979677716776790"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 327;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> roads = {"09678876798799697899078977699887797879779869977786", "90666999697488777867689876769697998776698671666788", "66099279882889876889798587889996806777668977788665", "76907969367861866697966679889997974699677799688797", "86970997489476778969778670768987899987796766996967", "89299068768896879689977689992765939689899689995763", "79769607978778788980997688669676788877796788696997", "69997870786866877779687767695667869996699888989767", "76834797068697878886767699987889786781687887618696", "99868678606878768972979469977776688796968991988757", "87279886860886998898999986768986789959998867998737", "74884878688086998796899789476686687793789667964777", "98867976978809686799786767998789768876676977817808", "98916686786690970628966879982797678766889978888668", "67887878879969098297379798976829873666977878889826", "97767787769987909967867966679768678876897878846988", "77668987888860890899971669769887889988661997666869", "88869697898776298098896967769766889367777769976867", "96896887879992969907786688676968699778777687679647", "97979909628698779870697789866969897966769989777698", "06797996799879389876098766779987987796776888488676", "78967798679986767989909468979079676976878899967787", "89868777799966971667890869896887886689898898776879", "98566667649778796967748097676676876789987767668768", "77877886968867966688666906988779877889979968666668", "76790987996979869789689760899869879687988688954873", "67887966997499967768798698068897669877926897678968", "96886969876798776676779789601898698669660887686778", "99998295778682699966996689810978869979889669878896", "86999766879677878799908678889097788387898687886996", "89998676878889268666878776997906976868676868999673", "77677567966697987689797699788760878678778696976988", "79898978767676868868968888668798079680677979077977", "99079386888867778899878777696877708996687888878876", "78649989689788389997766679989868980988766376687859", "87769689779787689379796786869386699060976891899698", "77798879895976678676978888767867898600688869999687", "96797976169366668786669997799788068000887272769796", "76667876699768986777788999968867667968097887688977", "79679999869878796776779878268977786788908676686798", "98876969788969771779688798609868776687780979677776", "86977678898699889769888796886686983882869077396778", "67796888896677779688899668986869787967877709686916", "91796988717778887979898788779786986192769790699668", "96769969699988886967497669668899086897666366079897", "76889998189618846777867665787897778996887989708789", "76886569888478966697876864868696787999867669980876", "77679797677786898866678768978969988667977796878068", "88696696953706286649787667679978775989797716987608", "68577377677788689778679883886638769876786868796880"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 318;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> roads = {"08887607775887976696888968802698878678696888878918", "80888768797779886845878986778774788879667698865886", "88078794796877879668568988677967889876777087729899", "88707987679779876769898666968769976898986976967898", "78870788880048779269897997778889781766669668679681", "67797088698778887766776867796679698986799778747676", "06988807666978687986769788298866997996467796796797", "78478870866666697668987929689778898797876696827998", "77768668096778869765879888668878616887776688967976", "79978966907999788668997787796757877863876186769977", "57690866670889968879870888889798627796989021968987", "87870796798067767866778797977789898876778899889868", "87774776798607767689779966679778678933789776997767", "79798886899770676969898679899787466667702899697769", "98887866879776079669768767178978989979688969899877", "78777889686667706897979977786998689788669997889876", "66969777988776960897668666886667887696979996978779", "68672796768869688066777767889887699788947596987876", "94666686667686699608966896978677976069978799838167", "65899668589699977680679976788689668876978989868976", "88588779898778796796066666897648879869697668887669", "87699768797779676767608869779966287696666688679988", "88887697970898898769680768876777799961787886776686", "99969879878796796789687096777079667998999786677869", "68869682888967676697666909698905288698986769868667", "86867789878769776766698690897863677888739978697997", "87697726678968178897878768079896668886679986666998", "07767998698779788878977799707768999987766797769886", "28788689869799866988796787970866768696676669668776", "67978687877777996866697098878067678962898969879876", "97668767759878796878467706966609788889696977761667", "84799968878987887779867953686790777886797677697967", "87897698686864968696827626697677096877778667967860", "78878999172976888976789687696787908666688988866799", "88961878677886997968979787898887680887968859999568", "68887997887896976708869968896988868086779784888988", "77796899869736789867696998889688768805977887698617", "89686667736637986896961888676296767650668798999079", "66796748789777669999667997676867769796058797386869", "96786967778780867477968983767999786776502699788679", "67769976669892899788767969966867888978820726787796", "86096776610878999579668779976996698787767098696169", "89876799882979699998688867896677685889992906697499", "88768866861969976699886698679977789478796860788788", "88796778979896889988867686676876989869377667066987", "76267492666899987836877769666769669899888998609964", "85979767798977998788796787698917769889687678690779", "98886679999877887819696869987869875960867147997099", "18998799778666777767688669987766696817679698867908", "86981678677879769676986977866677098879996998749980"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 328;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> roads = {"08678986996888867679787988699639669679679998688669", "80877676978908739979669778799719980687778996768976", "68078996998876899989989976872996997696866899976978", "77707789679697776696968667677895686787668866876787", "87870796698628966886889788696898638609783968797668", "96977067767888696087896376787799793998919996978797", "87989608498778376699799989978868888678689877688787", "66696780799977667778878687998988796167678997693768", "99966747064880969687969988886998778778986869988766", "97979699600867987968683877869876868976697766988796", "68898789400868608827807677796677989867899277893779", "89866879888066899998979168388971976866889784699689", "80792877866606867872696987996869866969879898769888", "88678887078660896976988996949686686792767998688986", "87879636996888099969979977688878977998886986968686", "63976976680969909766828869796866863898897777666888", "79966667978976990786767887969878977777886767797669", "69968067698989977098999869689908966799996967789987", "77898897862977668906789869887999687896878868778888", "99966798787826966860889778797797969679966766888994", "76998878968969987978066786866796978868696777769807", "86868997680798726988606830687977678999668969988798", "79989698937968987999660969789766968798699989486799", "97967396986199988887789098668078678988976895669969", "87768788877689768667836906699697667976299676966689", "88678697877876797998609860868688777997799777868997", "67866799887399679687867668067979679986787689997977", "99779879869894896889688696606679998697787379665786", "99276788696869869977679898760996676696719696077668", "67988789986986888997797066969064666789878869898997", "31999968977768767099976798779609897607797697767683", "99658988867196868897676878996490877689778666968789", "69966787789986989969969667696688077868386178768689", "68983989768768767686776767797697709659998976988878", "90768386889666737679888877986677790989369869869779", "66676961798897987786897999966766869069887698786689", "78980976776669997997699879899808658609799828677777", "97679887867692887969898867676979899990869779788989", "67867966968887888989666927777877393878086786987986", "77668187899876898976969799881797896896807778897199", "98683998679997676686689699779878689799670779863898", "99889989872789977987799867636866198687777087768988", "99966979667899876666768977879696776927877804675777", "86968677967488677786799567996976869889689740869889", "67987966998676967778794698960879798767988768077876", "86779789889968669878688666967966686878896676707732", "88667883883998867988986968757878889678773859770788", "69976777777689686989877969976967687679918978877069", "67786986697888886889099689786988877878899878738607", "96878778669986689784789997768739989979698879628970"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 329;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> roads = {"08688889979986887688997668869787677867696687668777", "80896788997978689696612668799269767779897789879798", "68048888876178769796806698867936997899979967986999", "89409166698796969668789786986976158997889687766889", "86890998609776668676679967974664988668979776699928", "87819067868787689667965964786988697696719668664968", "88869607774898269669977879867686666678896678587686", "98868770769977776845738576868967788998969879777977", "99866877098666798878766999778767997809887969969697", "79790676906886976906877986666687699966737699697878", "97689849860658797968788766864977887777778977759885", "99177789686026986686676666797666786766769879799796", "87797897685208766786867898776969989696797667969798", "68866787668680678989769676697617768966989986657776", "86796627797976078996767798786786676896775788899989", "88666867979867706889778077897779667696728878895486", "79998996867668860696687797968996796778986189988888", "66766668899679986095817656876997689778968077976666", "89967664706888989909777896689779768797978876697996", "86686795868669696590986794788781886896696898974669", "96876997787687776879067377837686726767608689167697", "91087673678766678178606898888805898867297679288698", "72699578678679787776760988881687768886977679686968", "66679985997686707687389068597968798679988858869867", "66986677986697979599798606892959677899068787476695", "88867496966686877664788860666668668898687878777661", "87899788768776789867888586077699794667966976886887", "69687866766979896788388996708776868929866926666678", "99764678864767678698781726780283776738796976666878", "72996969769696779977686996672079617068689979779796", "86376886687661879978808656978707799967896998977697", "79664867777697696791657898963970977627866867798976", "67919667968797667678787766787679046939692676896781", "76958968998886769868296976967197408096888996666897", "77788768797698676986688878486797680797777488866916", "87896669897769867778788688697096907089897669688666", "67996979067696997799668799623662399808989689697776", "79978688967666668876776998798877967980988864699696", "68989789877779779996629906987688687899088779967766", "99787196837698728679097868669896987988801978888736", "67999969778979586886877887666966287798810877987868", "67967668969869781088666878999998694668798089776766", "88687677697768878779877587727796798686777808988967", "79776889997976889768999878666987668994987980666996", "68976657967796889969126847866797868666989796066786", "67869687695965998797688677866779966899688786609668", "89669477979997958674786967666978666879787686690798", "77989969688777948696669866868769789676778799767099", "79982687978997888696996696877997891679636669869909", "78998867785686968669788751788676176666668676688990"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 319;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> roads = {"06856797789999966887828977879767779676819688689899", "60898778768669688976576762867997976798697878299787", "88079690887966767967867796879487868869698999866774", "59709966699899666899877988866761976899767767684999", "68990769867877669087999728998966966778677687688697", "77697079986789776898978676888867797378769996776697", "97966708797785879876768868879987376898667988698997", "78069980795866877989767798967729896799777769168666", "77868977078978663789767966789789693699696998868797", "86896899707886888899887797766788967987878796696896", "98797675870896966896886666686838886998888898866968", "96988778988077989799687876667697896669896866997998", "96697886789708517879978886878988769865139666987868", "99697956866780698996976988967689887666669893967466", "96766788689956077899670786698977878966799699677778", "68666777686819706867989976787666877798696969887868", "68769697386978760677673677928696986767666967986919", "89980889788789886078926996979278665879999989860966", "87698978899979967709867969798699768688999199799766", "76797869996996977890867795697679987868669698767886", "85889977788699696988098468679199877898880869889788", "27679766688877787266907777986788876678867698677869", "86779887776786093677870647667998086778968288898888", "97797687976889796997476067667976768767814976689796", "76982769696788877969674606776778864579867279769897", "72688688676668667695877760868869493667996897866679", "88889889776689679976696678068881789878789698999788", "76769876868676982799786676607987868697697767679688", "97968897966787878987967768870766916888986987778988", "79479897778696966266179978897097879994796986866778", "69866682883988769797989776886908676886796887977867", "77716779988789766899988689176780689867177106897398", "79899738698878889679880784789866087886396788787079", "77676979968968778668778669861778807898639676996678", "96866766376697876587766843986969770898989997278886", "67887387699686977868867756868988888066789899877986", "79697799989666696786977676798986899608698589966567", "68998889978956687988888797878467688680987788820977", "86676767688816766996889889769771369769068977916667", "19967667978936996996866169898997938898609866699681", "97877977688699966999078476976667699987890986889768", "68976997978868699916862928679981769857989048686777", "87968986999669966899698779968880879988768406787877", "88977689868663997998988697877676867998766860986767", "62866761868999689877868678967898792898968679097776", "89688796696986788696879866977679897762198888909869", "99648688866777776097978996998677768760699676790976", "87796696789984789978788786769783068959667787789077", "98799996996966761668868997888769778867686776767707", "97497776768886889666898679888878986677718777696770"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 332;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> roads = {"08887798878787779959778774769678859788898769638899", "80958873599698818988996787796667977979698779678776", "89067788869886897878998978696886868868766886778668", "85607609997697889088866979897879697776979796694758", "78770767176997886387961767306979878878978888776889", "78767076867689898669688869998818676777869962978969", "97806707899887687687898989676889896668687968769898", "83897670889997766788868627862769808778806968786898", "85891888079778796696887686969969766996967697697868", "79697698706789896669788979099966367899786962977396", "89976799960776586699386878666874647667898798676697", "76869689777068788718676778776868396888888699966986", "89899889787606986796878668798866687766796206699985", "78677977896860976896878867487699769963679887996989", "78888867785799086869776678679788999966879686687986", "71988986998887806767647766968877687796687986667897", "98796876666866660879685676499788966976998866867926", "99803667666778878066773697966887968688976688969898", "58788688969199667608886686638678988958765886999976", "98887978699866979680978798689766978377278869679869", "79989688873688766789066877798886677709687867636878", "79966896888777748787606796989869989979989688787789", "86861888786688675368660716866899867989857979768999", "77997896698768676667877097891777948696668887799778", "78776682877766767989791908729667772678669897796879", "47897997698887866768766780769889887868977868867979", "77683968906774694966798877083996797767878686887978", "69990976696798769638986926807688764968897768847697", "96676862996687989689896199370987889079967399879761", "66889887998886787867888768969086977698887965698776", "76877186667669878876869768988808797777637697999676", "87699899964869878786699779687680777938868967799876", "89868688736367969999698978778977089798688996769997", "57697790664986986687786478968797808897796806998869", "97878668677679976888797827749777980986678969696880", "79878767986879979693799668790679789076888961789966", "87677767996866697857078976667973998707698878809587", "89868788697863666887999688789878876670697698888970", "86799868978876869972698669889868676866079986966679", "99677680689897789767885667796836897899709766778966", "88698976768869978658797897877778868887990877687866", "77878999697628698688869888673969989986978099787876", "67898666969908886886687896869696906679867909980776", "99668288728967666869789778689577669188667990987687", "66767977696969668996677778888697796788976799077879", "37797768977699866697386996847999699808678888708889", "88846896776696777999678967779899986998687707780698", "87678988836999989898879789967768988959698876886028", "97658699699888892976789777796777968687766778789207", "96889988867659676869899899871666790670966667998870"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 336;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> roads = {"06689688679888789788878989789499988899709876869626", "60176877978886696889898779989776798778988569867277", "61089977697847894699767667869998996977888677978867", "87806636966688698967888799679296688769466998886688", "96960886869166608676987967967797699677299766627648", "68968087697869779669939869068777978877789787266798", "87738808697709798883996999819797688898667698889869", "87766780787898867898977768097966869977779618966776", "69698667096899968687697167779987878698841628777999", "77966998906966697877979799677978863769987678766696", "98769777660796776996861899487789689769077877676786", "88861878897076788974787966787877679777867087696967", "88486609969708667877767649786607956946777766866676", "86786998966680388897799764996669999888786699689986", "76866778967763007789696648668986688688777876689968", "89990796697868009677797667667729786677969147799978", "96488987876878790776827689768879796797897767971786", "78696688689988767068996076867792999798651676698897", "88967689879779877606829747766877670797866867764699", "89976938776477976860977887786786776878999688671767", "88789999698777678989069666986967897478929896672768", "79688397976869992927608696669999777886899898686678", "88787967791779677697980676697666679276786988279916", "97679897178967666078666099760896668686679776684969", "87696696699646468748697909797696879919976780776678", "99797998799694879677666990996869697777686788886966", "79869080764779667877966779068678666678399895796897", "88676619778889666668869699607427776989687777788876", "99997897977766878766697076870778677967787866878696", "47927779997866978787996868647096689797798966668868", "97999796878706827978696996727909589998789696768979", "96867776789779699276796669878690868779788669877686", "97966968886699677967876686676658087688867476786869", "89989786768759889977977679677886807696298784678668", "88689889839969866906779897667998770999888977898986", "87976889677798667778482697699797669076769766687879", "97767797966748879997787817786997899709999939086786", "98797787899768877878866697897789869690727868676989", "79842767890877798689987696367777828797093898597967", "08869867487678769569298778988988698692907887669977", "98869979177776797169996966977898788997370867976686", "85697766668076817686889777878966479798888087896777", "76796891277869746768998788976696787636986806888778", "69786788887769677678688608576669647698877760799188", "88986289776686679676662678778678768606569887037668", "66782686767968897967787878987667879887967989307944", "97867696766669991841269466688887688766796689770868", "62866787967969997867769969886896869879996771698098", "27684967998678678996671676979678668788678778646906", "67788896966766886797886986766896986969776788848860"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 320;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> roads = {"06986597983879878796778769689977166767676966668699", "60897778686198989986669977687997887988776896997896", "98099786999976966869997978996997988967768286476636", "89903998877165786787668756866976698769878776776678", "67930697979664669996676796988796778698587779696799", "57796099879686786769976896776966179669864698788769", "97899908688676978649788647997969878678968888876646", "78687980876999887799996669799999866768697899677989", "96989868068199686886988977867979666878999908896787", "88977787606876669898968978869767699878987988776788", "36979986860668898989788172689789976696696766797676", "81916669186089777778986794776859688397668777988898", "79766879976808794869898964796988987519786786296887", "98654669968980978988976789796667778978794517998799", "89976798668779087089887996868879969667786896866888", "78686878869797806616799877870669686688986877796799", "89669687698748760878679967997769897767679669879746", "79879767889789068088898986888666989882778668707969", "98689649898768817808789798587697386699796760982888", "66976999689898968880756967968876899961978676949767", "76966979997989876877084899776767876866666989698968", "76967789868897897985807977888988689776198648779946", "89786686888686799896470766996867788878688689798897", "79977866991797989979897097768976878786067977086786", "67759946777968976896976908698688866765778697969976", "97866679782449677687976780696803680677688999889896", "66989797886777889859789766069777677677698678868199", "88968799668799679886789699606697874796796776787788", "97668679799666807878686886960179948886697667882999", "99997999977896867668798968761008678989678786779487", "79979669768586766697686780797006878867066971675679", "77766699979987999676787683779860694966796995789993", "18967188669697968938867886689686087989868667987678", "68897776697887689889788768774779807978673999779676", "67888986696878967969698860748884770966697768967297", "79976667886359667869878776678989999068997949796676", "68669676779917686896677867798866876609668899869669", "78798988886798787291668657766976986890766666699781", "67785896996677796779616076676607866967096696866788", "77678669989689887797698678999769679966906688666876", "66887487976864669868688788867866837786660988668799", "98277688997775886676966969676799697986669099987867", "69877989086781976667848799776879696496988906878707", "66669889886767679806989779867615798996688960867689", "69476786877929878799677098878767979786866988098696", "69779877979899697084979868688778876969666876908869", "87666867667868669729898699872959797699668787880879", "68667769776887877987998798179469662667787876688079", "99379648887989894686649879989879779768879608967708", "96689969786879896987867666989793867691869779699980"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 320;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 193;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 193;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 169;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> roads = {"01999191111111919119911911991111119111191111111111", "10911191911111111111119191111111111911111191111111", "99019199911911111991119991111111111111111111119111", "91109999111111911111111191111911911111111111911111", "91990991911111911111119111111111111111191111111111", "11199091111191191991111111111111911111119111191911", "99999909919111991919911191111991191111111111111911", "11991190199111911191119911111119111911911111119191", "19919191099991919119191119111111111191111111911911", "11111119901911111911111111191911119911111111111111", "11111199910191119911111911919111111111111111111111", "11911111991011919119911991111111111111111111111111", "11111911919109911119111991911119111911111119119111", "11111111111190999919911911191119111111111111111911", "91199199911999011911991119111111111111111111111191", "11111991111119101119919919119119111111911911111911", "91111111919919110111911111119911111911119111111111", "11911991199119911019111111111111111191119199919111", "11911919111111111101991119119199111911111911111119", "91111191911999191910111111191191111111111191111111", "91111191111919999191019911119111111111111119111111", "11111111911111911191109919119191991119119991119111", "19919119111111191111990119911119111191111111111111", "91911119119999191111991011999111919911911191111111", "19991191111991111111111101191191191111119111111191", "11111111911111991191199110199111191911991111999111", "91111111119191111111119911091111119119191111991119", "91111111191119111119111999909119111991191991111111", "11111111119111199191991919190911911119911111119911", "11191191191111119111111111119099999111911911191111", "11111191111111111199191191111901911111111911119911", "11111119111199191191119111191910119111111191111199", "11191911111111111111191911119991011911911111911119", "11111191111111111111191199111911101911919111911119", "91111111191111111111111911911919110111111191991119", "19111119191191119191111919191111991019911119999191", "11111111911111111911119111191111111109191119111111", "11111111111111111111191111919111111990919111191111", "11111119111111191111111919119911991919091911119111", "91119111111111111111111119991111111191909111119991", "11111911111111119911191191111111191119190999119199", "11111111111111191191191111191991111111919099111111", "19111111111111111919191911191119119111119901199999", "11111111111191111911911111111111111991119910999191", "11191111911111111911111119911111999911111119019111", "11111911111111111111111119911911119919111199101199", "11911119111191111911191119119191111911999199910111", "11111991911119191111111111119191111111191191111091", "11111119111111911111111191111119111911199199191901", "11111111111111111191111111911119999111119191191110"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 105;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> roads = {"01191991111191111911911111111111111911111111191111", "10111191919111111111199191119911111111999111111119", "11011191111199111111191911111111111111191111111111", "91109999119111111111119191911111111111111111111111", "11190919911911199111911119111111111111111111111199", "91199019191911111191111111191111911111111111199111", "99991101999111111111111111911911199111991919111111", "11199910111119119991991111911111111111111191111191", "19119191011991111111119111111111111111111119191111", "11111991109191911119111191111119111119111111911111", "19191191190119111119111111911111111111919919111111", "11119911911019119111191119111111111111111911191111", "91911111991101919919919191911191911111191111119111", "11911119119910919111911111111111191911111111911111", "11111111191199099111111111111111119119911111111111", "11119111111111909191191999199111119111111911119111", "11119119111999990919919191111111119111119111111111", "91111119111191119011111911111199111119111111119111", "11111919111111191101911119191991111911111111119111", "11111111199191119110919191111111911111911111111911", "91119119111199119199099919111191919191191111111199", "19911119111911191111909199991199119911911911111111", "19191111911191119119990911919119119111911911111191", "11911111111111191911919099111191919911111111119111", "19191111191191199119191909199111199911911111111911", "11119111111911191191991990991119911191111111111911", "11191199119191111111199119019199191991111119191111", "11111911111111191191191199101919111999111119111111", "19111111111111191111119191910919911111111911111991", "19111191111111111191111111199019111119911191191911", "11111111111191111991991911911109191199199191111191", "11111111191111111911199119999990919119919911911111", "11111911111191111119911919119119099911111911991111", "11111191111119111111111191911191909919191991111919", "11111191111111999111999991111119990999919199119111", "91111111111119111191191991991111999019191911199911", "11111111111111111111911119991191119101911919191111", "11111111191111911911111111191999199910991191911111", "19111191119111911119199191111919119199099919119111", "19911191111191111111911111111191191919909111111119", "19111111119111119111111111111199119111990111199119", "11111191119911191111199111119119991991911011919191", "11111119111111111111111111111991199119111101199991", "11111191919111111111111111991111119191911110119911", "11111111191119111111111111111119911119111911099999", "91111911911911111111111111911911911991119191901191", "11111911111191191991111911111111119911919999910911", "11111111111111111119111199119911191911111199919011", "11119119111111111111919111119191111111111991991109", "19119111111111111111911111111111191111199111911190"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 97;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> roads = {"01191991119119111999111191111111191111111111111111", "10119119911119111191111111911191911911119111991111", "11011119111191191911111119119111191199119111111199", "91109919199911911911911111111111111111119111111911", "19190191911111919191191111111119191111111111111911", "91191091191111911911911991111111191119111111111911", "91119909999199111111911119111111119911111111111111", "19991190111111119119911111911119119111111111191911", "19119191019991111111111119191111111119111111191111", "11191991101119911191111911111999191119111911119111", "91191191910119111111111199119111911111111111111911", "11191111911091191111911111191111111111911111111119", "11911191911901199919999111111111111111111191111111", "99111191199110111111119119111111111111191111991111", "11199911191111099911111119111191111919119111911191", "11911111111991901191999111119111111111191111111191", "11119119111191910111991111111191911111191119111911", "91991911111191911099191111111111111111191111119191", "99119111191111191901199111111199911111119111111111", "91111119111191111910111991191111911911111911111911", "11191999111991199111091991111911191111119111111119", "11119111111191199991901199111919191111111111911111", "11111111111199191191110911191111911111911111111111", "11111911191111111119919019919119991999119111911111", "91111911119111111119991109111191111111111191111111", "11911191919119911111191990911999119191111111191911", "19111119111111111111111919019111111111111111111919", "11111111911911111119119111101999111111111111111911", "11911111119111191111111911910991111911991199199111", "11111111191111111111991119199099999111199111119119", "19111111191111919191111199199909919191911111111191", "11119119191111111191191919191990991919911911111911", "19111111119111119199119911111999099191111991111111", "91919911191111111111991911111919901119919991911119", "11111199111111111111111119111991910999991119119911", "19111191111111911119111911119119119011911911111111", "11911111111111111111111919111191919109111191911111", "11911911991111911111111911111119199190919199119191", "11111111111911111111119111119199199919019911911199", "11111111111119199911111111119911119111101999111199", "19991111111111911191911911111911191119910919911191", "11111111191111111119111111111119991911999019991911", "11111111111191111111111191119111991199191101199199", "11111111111111119111111111119111119119199910199919", "19111111111119911111191911111111191191919911011191", "19111119911119111111111119119111111111111999109199", "11111111191111111911111111119911119119111199190119", "11199919119111119119111119991119119111111919111011", "11911111111111991911111111111191111119999191991109", "11911111111911111111911111911911191111991199199190"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 105;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 89;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> roads = {"09999999191191191111111111911119911191111111111111", "90199919911111911119111911119111111111111111191111", "91019199911111911119111111111911111111111911111111", "99109991911911191191911111191111111111111119111111", "99990911119119111111111111911111111111191111111111", "99199011191119111191191111111111111119111111911111", "91991109911911111111111111111111111111111111111111", "99911190191199111191911119111111911111119111111911", "19991191011191111111111111111111111111111191111111", "91111919101911111111111111119911111119111111111111", "11119111110999991919919111919111111191911111111911", "11191191199019191191911111111111111111191111111111", "91111119919109191911911111111119111111111191111111", "11119919119990111911111111191111111111111111111111", "19911111119111011191191191119111111111991119111111", "91191111119991101999199111111111119119111111111111", "11111111111111110119111111911111119111191911111111", "11111111119199191091919111111191111111111111111111", "11191919111911991901991991119919111111111119111111", "19911111119111199110191199111199111111111911111119", "11191119119991111991099191111911111111911111111111", "11111911111111991199901191111919111111111111111119", "11111111119111191911910191999111191191111991119111", "19111111111111111191111019119111111111111111911111", "11111111111111911199999101111191911111191119911111", "11111119111111111119111910111119191111111111111111", "91119111119111119111119111099111191911911111111111", "11191111111119111111119111909111119111111111999191", "19111111199111911191119911990919911119199991111111", "11911111191111111191991111119019111111111111191111", "11111111111111111919111191111101191911191111111199", "91111111111191111199191119119910919111119111911111", "91111119111111111111111191119119011119111111191191", "11111111111111111111119119911191101119111111111111", "11111111111111199111111111191119110111111111111119", "11111111111111111111111111911191111091191911911111", "91111111119111111111119111111111111901911991111191", "11111911191111191111111111119111991110991911111119", "11111111119111911111911111911111111199011911111111", "11119111111911919111111191119191111919101911911111", "11111119111111111111111111119119111111110191111911", "11911111111111119119119111119111111999991011191111", "11111111911191111111119111119111111191119109911111", "11191111111111911191111191111111111111111190919911", "11111911111111111111111991191119111911191199011111", "19111111111111111111111111191911911111111911101111", "11111111111111111111119111191111111111111119110119", "11111119119111111111111111111111111111119119111091", "11111111111111111111111111191191911191111111111901", "11111111111111111119191111111191119119111111119110"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 81;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> roads = {"09999991111111111111111111111111111111111111111111", "90919111991119111919991111119119111111911111111111", "99019119991119911111119191111111191111111111191911", "91101111911111191119111111111111111111111191111111", "99910111111191111911111111199111111111111119111111", "91111091119199191911111111191111111111111111111191", "91111901999111111911111999111111111111111111111111", "11911110999119191111111191911111111911111111111111", "19991199019111111111111191111111111111191111191911", "19911199101119119991191111111911111191111111111911", "11111999910199119111111111111191119199111199911111", "11111111111011111111911111111111111119111911111111", "11119911119109991911119911111111111911111111111111", "19911919199190911999111991111111111911111111111111", "11911111111199019119111111911111111111191111111111", "11191919111191109991111911111911119119111119111111", "11111111199111990191191111111991111191111111111191", "19119991191199191099911919911111111111119191111999", "11111111191119199901911111111911911111111911119111", "19191111111119911910111191911911911111111111111111", "19111111111911111991091199111911111111111191111119", "19111111191111119111909911111119191111199111111111", "11911111111191111111190199111111111111111911111111", "11111191111199191911191091119911119199111111111111", "11911199911119111119919901111911111911991991911111", "11111191111111111911919110111911111119111119911191", "11111119111111911919111111099111111111919111111111", "11119911111111111111111111901111191191111911111111", "19119111111111111111111911910111911991911111919111", "11111111191111199199911999111011119111911111119191", "11111111119111119111111111111101911991111911111119", "19111111111111111111191111111110191119919111111111", "11111111111111111199111111119191099911111111911111", "11911111111111111111191111191119909111111111111111", "11111111119111191111111911111911990999911911111119", "11111119111199111111111191119191919091999919911191", "11111111199111119111111911199191119901191111991999", "11111111119911191111111919111119119110199111191191", "19111111111111111111111191919919119911011119111111", "11111111911111911111191191111111111999101911991111", "11111111111111111911191111911119111919110911911111", "11111111111911111191119191191191119911199091191991", "11191111119111111911911191111111111111111909919191", "11119111119111191111111119111111111911911190191919", "11111111119111111111111199119111911991199191099919", "11911111911111111111111111111111111199191919909191", "11111111111111111191111111119911111111111191990991", "11911111991111111911111111111111111191111919919019", "11111911111111119911111119111911111999111991199109", "11111111111111111911911111111191119191111119911990"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 73;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 162;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> roads = {"00009090900900990099909099999099900990999009090990", "00900009909009909990909009009999909000099900900099", "09000990099909900909009999090009099000009909990090", "00009009000009999099099090990909990900990999099999", "90090000909990009990090090090009009909090900999099", "00900000900999000909909090990090999900990900999099", "90900000009999900090009909990000900099909000990099", "09090000099990009999000900999009900999909009999900", "99009900009000000900999090009990990990009090909909", "00900009000090900090090900900900099909900909099909", "09909099900900909099099909999999090009990099099090", "90909999009000000999090990990990000000099909990009", "00009999090000900090990099090090009000909900090990", "09990990000000909009999900000009000900000900000999", "99990090099099009099009090900099009099990090900990", "90090000000000000009999009009990000909990999090009", "09099009009009900009000900000090099099909990099009", "09909909900900000009009000900099900999000000909999", "99099099099990900000990090900909000000909090090090", "90990909009909999900900099099090909009990009009909", "99000900900099090099099990909999090909009999990990", "00099000999999090090900090099900999009099099099990", "99990990909009990900900990999999999099009000009099", "00900099099909009000909099909909000090000009099999", "90999900900990900099999909090090009990990090900990", "99900090009090090009000990900090099990099009909999", "90090999099900900990909909000900090099090990990009", "90999999009990000009099090009990090099009909990000", "99000009909000090009999900090900000090999990900990", "09090000999900090090999900999000909090990000900009", "99000900909990999909909099090009900990090909000000", "99999009009009900990909900000090099000099909099900", "99090999900000000909099000000990009090000999009900", "00990900999000009000999009990009009990900999999009", "09909900090090909009099099000909990000999990990900", "90099909990009090900900099000090090009990990009000", "90000099900000909900009999999990990009900909999909", "00009099099000999909999000990000000990009099090000", "90090999099090999099000090009900099990000000000090", "99099900009900990009090099909999009900000909900990", "99900099900990009090999009099009009009000990990999", "09999900090999099000900000999099999990099090909009", "00090000909000999090990090909000999909009900090099", "90990009099900090009990909090099990099090000090990", "09909999900900900900900099999900099090099900090099", "90999999099990099090990900990009099099009099900990", "00099909999000009909099909000009990990000900000000", "90090009990099900909990999009009909090099009090090", "99999990009099900990999999009000000000999099990909", "09099990990909099909009909900900090090009990900090"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 162;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> roads = {"00990990099999909900090990099099990099900909090000", "00090009009090999900000090909000090990000909900000", "90009990099909999099009999990000099000090090099009", "99000909090999000009099099090090000099990090009900", "00900099090099099000090909990000990909990099090999", "90990090009099990990099090009990909909009999000009", "90909909909999990000090090090900900999099999009009", "09099090000999099909000000900999090099909009090000", "00000090099909909990999900999909009909990000909990", "90999000909909990909090090000900000900090999900909", "99900990990990909999990999000099009090000009900099", "90990099999099099099000009000990099909000090990990", "99099999009900090090090990909099900000009909999909", "90999999990900099990099909090099000990009909909900", "99900990999000009909999999000900909900099000000900", "09909999090999000000009900090090009009909090090909", "99909009909909900909990999990090999990999009009000", "99000909999009909009000090900909900090009999000099", "00900900909999000000000090009099099009990900009999", "00990009099900909900909000009090000090999990000090", "00000000909000909009000900009999099099900909000999", "90099990999099909000009999990900009909000900099009", "00990900900009990009090090090000090099090990909009", "90909000909099999000990099099099900900099099900090", "99990990099090909990099900909090009900090900009000", "00999000009909909000090900090909900009009000099900", "09909009900090009900090090099090099900009009990909", "90999090900009099000099909909099900999909990909990", "99000900900090000099900990990009090999090990090099", "00000999990900900900990009000090990009099999900099", "90090909009999099099900990990909009099009909090090", "90000009909099000990900909099090090909000900900900", "90009990000090909900000909090900009900099900999999", "99909009000900009090909000909909000990000090990999", "00900900909900999090990090900090900999000000009009", "09009990990909909000090990999009999000090999000090", "99090099009009009909909000099090099000090009090909", "90099999900900090090999009099999009000000900999900", "90099009900000099099900000090000000000000099000909", "00999090990000909099009990009900900990009909009000", "00000999000099999909000909990990900000090090000909", "99000990090099000999999090099999900909090099999990", "00999990090900090909009900099900090900909900999000", "99009999099099009900900900900990000990990900990099", "09000000999999000000009900990909990009000999090909", "90909009000990090000090009909090990099000999909900", "00990090900099009090099099090000909009090990090900", "00099000990999990090900009990009990099909900999099", "00009000909900000999900900099990990900000909000909", "00909990099090090990999000909900999090909009900990"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 135;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 54;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 45;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> roads = {"06787699778699698999686886787988898988887897788879", "60998688877796987967887888689986699776669766699687", "79079868998868788886799876997889898898798969898869", "89709778676679788798988788969696686988699867897669", "78990869766666666977977697789667668987668788969669", "66878069877697989886677789868689786778878687978787", "98676606869698977697966788989978989769666976779886", "98889960888786678687798977888869766797979678776966", "78967888086676696797886868676676787866768686967897", "77976768809766789789696796687987787797897699976777", "87866798690987789876698698997986987796777869987999", "67866667679079999999788866788698668866697899899988", "99676998768706799687667669798778789797797669989667", "96896786667960769688966997889898868769796886966977", "69776996677977079699768779688996888967669768877886", "98886877988996706986876687677789668788879986667768", "87886978699999960776669888768879778699678668666677", "99879866778966697098978679797899887967699797769798", "96897898987988987907996999888668879699787978797796", "97687677796978966870699789689988968667977687766778", "68799697866769786996096679866668788899778677766887", "88987769899866676799909769967868769688666976696778", "67987768668876869869690677886876986878998966877977", "88876779876869768697676076999886979778979687767988", "88789887699669788798767707679797866768779797966878", "68687987868697978999997670798796799966698999686766", "76997898669778667786898967076796987876676789696768", "88968688789898876988668979708669866687777978697979", "79799898677889878789676998680697889766677996976678", "99866698699678978869688877766078966689788776866688", "88896876788979987968667899969708879868688989987786", "86967989676888699988886676697880696669666879977777", "86866797779678867889779987988986089888767876688679", "99986886888686867876868769868679809688976896989896", "89868696777898888798896969769696990996669989977678", "97899777877877976966868779867686869067777698998897", "87988769699696689696987766786866889609798766877766", "86887897676679789797988886676989886790668889999679", "86766869787677686679769976676766796776067966696799", "86996767697999677987769779777886676796609896796966", "79898869877776998977868998677886769788790988786679", "87987696668868796796699679799798889678989067879878", "96668877896968686978776899879787798968698607966877", "76978768699996868787766779986699669869668770978788", "76889977999899866777768796669899699989677899068686", "89996777678986766696697668997687887979998767608766", "89879896767996776976667766676677897879666968880888", "86866789879969876777879987796677686876796887678069", "78666886979867867997877876677887797967967778868609", "97999766779877687868787886898867968769969878668990"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 344;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> roads = {"04593148151960765701715764177581160575302408694484", "40567253663411527894527789778317063780168409783785", "55033702899582672222223809118165919419691761128660", "96308043062172458597908719470818490494792131377138", "37380020921080161122461050383423356180174473409744", "12700098220833680033697428363299519978993978546560", "45042900217856341852561632535623381853997802456732", "83230800080346511203534949258930406279490736588638", "16809220018357762271677630556553038816118275142399", "56962218107784524071746777813143311783074942496095", "13921070870399069740264618786213809068979428427511", "94510883373054912111973023313994819115580707398720", "61878354589508293426931956787892602309819561501043", "01220366749480848155723635895047148196266363849774", "75641635750928027883332484856259321187717306169859", "62756841626194203025522570029562759689215574545877", "57281011249238730629898813979166325268717484991955", "78251082207141806005495644537120592272546687596049", "09292350774125822007102948495516200472240828344503", "14272323110165359570233629469130761020244349175727", "75294655672997358412036184388290799529834499902859", "12206963746732329903303349654954346356887833342454", "57381714764313228523630226552737354788414224107553", "77870469676096458696132091866143860263703719171314", "68015234371253871442842905013314490536516992625634", "49990829078365403489496150727231953206945110791681", "17143352587378809544365807087553892286517262221994", "77178635518189527396855612802941300407152966362079", "78803358636375699759842637720241684581095127189096", "53184269512980251151297132592040203843767394241271", "81612923541994566213953413544403236164096636062005", "17583930333427926060047341311030763169520994237845", "10943534038861373527733849836227056414894614673526", "66195180310104252906945695908036503135326759655223", "03906916819928195201964003204363630857851467152891", "57441982870131162240537252245811418012466745434108", "78198757186109886772258630808466135104369056315242", "50940839638596798220968366671349457240422534212150", "31671994109582727522884759510705838434070480243865", "06997999177816111444381014159692925662705207723296", "28124370849096757604474365725760461692050461083590", "44714987294753354683482791291369674705424056197111", "00637703742066078824932191662939156453806507194925", "89113826528713644789934920267464497564071670819138", "67134545144358159531931167231202661432270118079590", "98270458492904649947040729268463755311428991705457", "43879668267819951645227151129127352452333749950403", "47617576305707889057845366900208528121825191544051", "88634633991247575402555138979704229045699123950502", "45084028951034975937943441496155631820560158073120"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 172;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> roads = {"00332908266911358306927728039249170450402431066197", "00510445907634409062230995597974696435769425381007", "35056317268210081147475818717395003243710078637838", "31508538016709783304532072050062507418690552416285", "20680083969052345035055548334016430795990775736522", "94350053337576769482150641004697492532623773076698", "04138501760384078044095811912724513586278274359762", "85783310753086177780900613938043981214435957818395", "29209377099843116472512223144724313569669387476854", "60616365904903347276928438247861028888599369660204", "67869703940511960633581597767724679016230062645775", "96270530895083024412501971015062886868433213871922", "13105788401802038922862732460558465544384197464178", "14092646331320599587086754826926171241273585807981", "34073701139005076840978166800426818672877840399414", "50884677146239701685373149334568412395576590382920", "89135987670489610660328567951722815465240775287795", "30130407426495866077338355993579088834102352959049", "06403848773128486702070753803409660568786524665435", "62745240263227050720599392796385738945064009251443", "92450109595580933305063537181216394022526374819377", "23735590128068772379603039719559892100510447836436", "70525050281126838809330784630952693934942331979623", "79805686245977115373507048950276238055799698634886", "29174411239735646559338403219068377188627544738708", "85828113387124697532794830451772505541630849537008", "05703099127048839987176924080613683124128198143863", "39153013446162035909813515808479517755284148857351", "97704428477506041336190091080657946903383259677324", "29300670787059457543259207646070201618751806534450", "47961924262652262708155767175702231380027202592221", "94526743414286682995692682397020246544693766271446", "16054459306841848067386235659222072887304015098375", "79003918127867111863999370814034705053419914465655", "06370231389651825808423875376116250764092910537183", "44247552580852634859019015179635807031005915737706", "53419381681644796364203584250184856306677193287654", "05385264986841255485204581453804734160729572130763", "47769624652432852170559766123706340067067107167578", "06199273693387774086214923288529019072608959194012", "29000385990343760264602970843173492579780399002274", "44057729330215857350343658112827099915193047776657", "32757775866198497520743944945006111197059408751000", "15825347792375005249471849889626540532799780045570", "03647038466848332962889675186552045721110770019322", "68313751764760988565137333457397963383690754103888", "61766698605147927951969487377421857770742615930566", "10825673827919497044346870833424361767502605385084", "90382969507278129434732800652524758056717507286801", "77852825445281405953763688314016553643824700286410"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 191;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> roads = {"05698193448845483215533065700697270345995210925524", "50087027404854198940737725644450377408983846290636", "60090364777569327989618906470287073103556866986264", "98905623587175351711497775887698286162373461160824", "87050285883094611874805867278768029961835977526480", "10362069810393580274366113461603465906068501799632", "92628605320430872243859720168720203771631298119006", "37435950962193813329048228089048276994075335457464", "44758839065273020833011211743325881532892323405064", "40788126601637373311892420742634693813410046357012", "84773002510612223430716596387285125240008323594070", "88510341266089853253938301596739823198619065449469", "45679939731808512596168937951083611272088830108932", "54954303372980634900636620375938276730230644261058", "41336588032856079111308472792017458630664159654896", "89251871272513700801435005395139170049689604289259", "38711023033324900073628037178445922944809301157890", "29978223834259180002041484290573415501254745836985", "14817742313590107002653103237350787502888830498154", "50914439310360113220212406731604944130675098568017", "57648380087916346062087762311933174128126140791659", "33190654191363032451805319426397886885539188765979", "37875698126886858132750412584076177393270316501036", "07978172245396400414734074546448569451940951931602", "62076122129032703800611707448676945483798535921242", "55657308106170257436292470196510649280060394537584", "76482410773593731227345541096852855134745134643599", "04787668448957997933128449904672390005307974847037", "04078189327615258071164686640157323228237370923270", "64267670362709014536930465861035355187195247736782", "95896024238383134750397471575307750858758059848661", "70788308545938795304376860227570221724511151539333", "23020422861862419479181596833372067326265501494099", "77782607892217572184787644592552607658132864529216", "07369536135316802574467959503501770648027571149768", "34119979582127609551183442102187366090583446492867", "40066079314973344003289588302852254908044634186421", "58321614230820094120853130458784688080893453830696", "99538060840602668286152970732175210508057261283048", "98573637910183680587237496403951632849505590820865", "53635815208980499485690080577581527343750369695358", "28849523303086163780113953193201585464253068078753", "14667093242634500439481539377455067435696609288742", "06617185363504941508086154440791141643109890620055", "92915714435412621845775995689785451418286026094121", "29862915059406585396960323442343924983829782909915", "50606997574981497688151117373689499260305880490636", "56284604000490828910690625502763027846083770196061", "23628306617635959851573048937863916629465545213600", "46440264420928690547996224970213968716858325156100"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 176;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> roads = {"00082263134040802937368731342824182794880115050767", "00752659692620748559630797711975862062812591121542", "07016770001783647438810001625238336693427757455861", "85104410560986927746129319301856160395349334087194", "22640184285169534216966507128749101033304546852358", "26741062658336742687917227491028387923802054017335", "65718602120737658028601144105752804036285409100189", "39004220127940589569778977033072890894634763659190", "16052611063568694492146706841609784025804988792168", "39068522601085441780572445773062042068334974082038", "42105807310842436467845632476190384586451941368414", "06791379508013688117232096060657188647713958725133", "42886334684104596793042923055521495533796559209492", "00369670852340804093788362813409011062816445193927", "87695765644658084527344935741344340195488542852682", "04423458943890806048829672924386042452563577194755", "28774289416864460578568409079269700382959730067457", "95472605474170505092119131441322028235023074075470", "35341826986199247900258628440664253085806683889025", "79866789207733788200774318419650406110364536407928", "36819967158207385127047940715686736822030381083124", "63126107474348426157409411633588177613294220880152", "80096718625228498984790655471721880286144478485085", "77035219746093964163946039956310959246400718251669", "39010247043926370321415309202199815265337068039447", "17197747652632529188015990068219802938791027241606", "37631410874008790444764920097653653330275506532525", "41202903477651427441137506909462572463554157724978", "21518153136053149109531628790409544580061078801809", "89287070601654332366657312644001929000237387937293", "27354257069520486265882191560009239524278580247177", "45869822920719469240681099329190766623224742262578", "18311388703140307024718988655927079971411901888206", "86360809848891440250378510574236708870752074037953", "22601740424851020836670952324996980295943311073632", "70630908005650143201862229345056982011785039369057", "96993239268436958381218463368022779103835204570185", "42353364586732522550236658030043105130588190665081", "88433826834778459083021437250222479785061850408794", "81240083035191865206394039756372154838608145228436", "02794254441366839364044071541784123558180000049106", "15735047999954557065324700510357903021810090010265", "19534506874554473783827162057884071309540906633944", "51746493841895270436108887678702141940050060773598", "01408016703721810084084202578922800356420067044224", "52585105986209596780888534320346837676024137404599", "01572709228593247597305191241772873905889033440623", "75813311104149674409110646598215296010741295256061", "64695389631392855722258640270977053588930649292602", "72148590884327257058425976589378632751466548493120"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 167;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> roads = {};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 441;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> roads = {"08369155672232426656382333599582428317445821512471", "80365166491923234426594625778818963742768692118694", "33038465969563419469566177879856988515276279244649", "66309762497645341994883462619924483917328156883677", "95890772223877856445689916656149555487723273272435", "11477082855886332295729437629559278627114321963944", "56667808937817767945952947296822134857137332987487", "56522280479585447221638683783511487364563486792627", "64942894073371528897136661514645782974196612187285", "79692537705329354471599258423662558479743243627124", "21973579350428271965357595176357994213992687946623", "29568885334075254994185822347443266748486872843948", "32647818722701724415113843676759467584149444946125", "23357675198510397173416938218373988415143187339927", "42438374532273087748741366977623127692129213524715", "23145364257529802849225617969772663824476986888834", "64916277841447720867654594272429211942668933916555", "64494292849941788041665494253488257471227479625432", "52694942976917446405397537754344672974188884372488", "66945551715453897150786985556793319162823814225321", "35586796153114726637047955991688798896942255577396", "89688253395811425698408694532661217616121198423885", "24639928697536154576780471128577171238338113846784", "36149496625889365459964016416269736164771751399937", "32761348659243619938597104613938548496455814656422", "35726773185238674475541640999858715587612849585718", "57866627541362992275951469057519772191831477361352", "97715298127471767555932119508185131637546353714119", "98996963436768792346128639780318989663186785123543", "58891585663473674437665298513078678288691699525945", "81524521465457272849867635181706871212656743126576", "28649921527393329843817988958860215889674997272762", "49945214759249162263721757719682078486359317359153", "26885738859668261571917341738771709376922687611766", "83835847284678731729871685219815890656728554882124", "37594683942754689491862145166228436051737314726218", "14118256771481924776913698936818875507599773681889", "72577774493845242142668467173829666170562736887481", "47237115179411146218913746851666397755069731363863", "46722136949844276282423751348957522396606132195533", "58683473632693968783218152166164928792960657788937", "86212334626841299488211788437679365377716064455383", "29757238148748183781591514758949185173335601512538", "12963126237247363944583149735937774436127410456867", "51282997169893589632548365371512368768317454097324", "11487689824443281272724958612227518288698515906944", "28432372776369486525736965143562912617358526760325", "46664946216919785443387947315957171284859358393091", "79473482822422135382988321514476562188633836242902", "14975477543857545281654728293562364891337387445120"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 217;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> roads = {"099111", "909111", "990111", "111099", "111909", "111990"};
    Terrorists* pObj = new Terrorists();
    clock_t start = clock();
    int result = pObj->requiredCost(roads);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=263396&rd=10658&pm=7246
********************************************************************************
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include <queue>
using namespace std;
#define foreach(i,c)for(__typeof((c).end())i=(c).begin();i!=(c).end();++i)
 
// Maximum number of vertices in the graph
#define NN 64
 
// Maximum edge weight (MAXW * NN * NN must fit into an int)
#define MAXW 16
 
// Adjacency matrix and some internal arrays
int g[NN][NN], v[NN], w[NN], na[NN];
bool a[NN];
 
int minCut( int n )
{
    // init the remaining vertex set
    for( int i = 0; i < n; i++ ) v[i] = i;
 
    // run Stoer-Wagner
    int best = MAXW * n * n;
    while( n > 1 )
    {
        // initialize the set A and vertex weights
        a[v[0]] = true;
        for( int i = 1; i < n; i++ )
        {
            a[v[i]] = false;
            na[i - 1] = i;
            w[i] = g[v[0]][v[i]];
        }
 
        // add the other vertices
        int prev = v[0];
        for( int i = 1; i < n; i++ )
        {
            // find the most tightly connected non-A vertex
            int zj = -1;
            for( int j = 1; j < n; j++ )
                if( !a[v[j]] && ( zj < 0 || w[j] > w[zj] ) )
                    zj = j;
 
            // add it to A
            a[v[zj]] = true;
 
            // last vertex?
            if( i == n - 1 )
            {
                // remember the cut weight
                best <?= w[zj];
 
                // merge prev and v[zj]
                for( int i = 0; i < n; i++ )
                    g[v[i]][prev] = g[prev][v[i]] += g[v[zj]][v[i]];
                v[zj] = v[--n];
                break;
            }
            prev = v[zj];
 
            // update the weights of its neighbours
            for( int j = 1; j < n; j++ ) if( !a[v[j]] )
                w[j] += g[v[zj]][v[j]];
        }
    }
    return best;
}
 
class Terrorists {
  public:
  int requiredCost(vector <string> roads) {
    int n = roads.size();
    for( int i = 0; i < n; i++ ) for( int j = 0; j < n; j++ ) g[i][j] = roads[i][j] - '0';
    return minCut( n );
  }
};
 
// Powered by PopsEdit

********************************************************************************
*******************************************************************************/