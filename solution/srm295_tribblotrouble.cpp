/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=6094
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TribbloTrouble {
public:
    double terminates(vector<string> code);
};

double TribbloTrouble::terminates(vector<string> code) {
    double ret;
    return ret;
}


int test0() {
    vector<string> code = {"..T..", "T.S.T", "..T.."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> code = {".....", "T.S.T", "....."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> code = {"./..T", ".\..\", "S.../"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> code = {"...W..T", ".......", "...S..."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.125;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> code = {"..../T....T...T..", "/..W.W.....T.....", "....W...S.W......", "................."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> code = {"/..\", "S../"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.24999999999999986;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.75;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 2.44140625E-4;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> code = {"S"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> code = {".....", "./..\", "SW...", ".\../"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.010259037109956275;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> code = {"..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "...................../..\.........................", "..................................................", "..................................................", "................./...S../.........................", "..................................................", "..................................................", ".................\...W..T.........................", "..................................................", "..................................................", "................./...W..T.........................", "..................................................", ".................\...W............................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.20833333333333331;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.75;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.375;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4375;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.125;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.375;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6875;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> code = {"...........", "...../.....", "...........", ".T.W.W.....", "...........", ".S.W.W.T...", "...........", ".\.../.....", "...........", "...........", "..........."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5625;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.375;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.125;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.375;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.625;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.125;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.625;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9375;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4375;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.375;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> code = {"\...../..../.\/..T...\...../............\./.\/....", "\.\..........\.\./..T...../........\..\......../\\", ".....\.....\..\\....//....\./..\....../..././../..", "......./..........T.../.\.\...//./......\...\...//", "\../.\...../........//...W....T/...\./..\./.......", "../.\/...\.\.....\..../\.//....\..../.....\.\.....", "\.\........./...\....\.....\.......\...//...T.....", "..............\./.../\.\/......\/..........T.....\", "..\...\....\//T.............\.../.../...\..//.....", "..../.........\....\....\../././/..\\\.../.\\.//.\", "/../....//......./../........././...\./\.\..\../..", "\\./......///......\....../..../\\..\.\../\.../...", "/\.\.././......../.../..T...\\...\\\./../.../.\...", "/../\..\./.././.............\\./../.\\.//.T..\..\.", ".....\.\...\.././...\.///\\..\..........\/\.......", "...........\./....../....\.........../.../\./\./.\", ".\T../.\...../......\...\......\......./..........", "...../...\./\....\...../..../....\\....W./....../\", "./..\....../..\.\\./...........\.........\....../.", "..\/T\../.....//..\...\.../..../.../...\/..../.\/.", ".../.../\./...../......\.../.....//............/\.", ".../\.\\..../........T....\.............../..T./\.", "W\\/.\....\.......\\...\.W.......././..../.\.\.../", "\...../.T/./T...../.\././SW\....\\\\............T/", "..\......T../...\.../..\../.\....../T./.\..\.../..", "/....\...\..../\.\...\..\...\.\......./...././/\.T", "..T\../....././.../\./..//.............\......./..", "../...../.....././..././\/...\../\.\...../......\.", "..\....\.....\///..\...../../............\........", "/..../.\../........./...\./...\\...../....\/......", "\.....\.....//.\.......././T.\\..//../\W..//\..\..", "\..../......\\./.....\..\././.\.T../...../...\...T", "..\\.\......./../.........\........W\.\/.../......", ".T........T/...\..../..../..\\....\/...........\/\", "../......../...\../.\..\...\./..\../\..\...\......", "..W...........\...../.............../......./...\\", "/\......\.T....././..........T../\\...../\//..\\..", "\....\T....T......././........\.......\T..........", "../....../............\.\.../......\../.........\.", "\///.....\..T./.\.......///...././......T.........", "/.......//...../.W.//.\/........./.....T...\\.....", "....././........././...\..../...../.../.\...\.....", "\/\......../................../.../.\....\./......", "...........\.....\T.....\..\.........\..../\T.....", ".....\..\.\...\.W/..\\.../T..../..\\\\/...........", "./....\..T\.//.\T....\././\.../..//..\\\..\.......", "....\/.......T.......\..../..\\/...../......./..\.", "./\.\......./..........\.\.....T\\........\/../\.\", "/.........\..\/.\.../...\//........\..//\.....\...", "..../...\....\/.../...\...\../....../.\.....\....."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.8125;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.59375;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> code = {".....\../\/....T......./...\...../...T....\.\..../", "......\.../........\./\\/...\..\..\/./..\././.\.\\", ".\.T..\\/../...../\//../../........\...\..........", "\\.\./......./../T....//....\/....../.../\./\.....", "....T\./....../\..T.\........W./.....\./.././.....", ".....\...........\..\......../...\..W//.....././..", "./\.\.....\\/.....//./.\.\..\...T..\S.W./\./..\/./", "../.......\/////\..\......\\......../......../..W\", "......./............../...\.\......../..../\......", "......./........\./......../.../...\...T/./../\..T", "......../.......\.\..../......../../.......\/\../.", "......../....\..\\..\..\...././/../T././T..\..../.", "............\.......\.......\........./..W...\.\..", "........\.\...\\..\......\.././/../...........\...", ".../.../\/\...\\././\.../.\..../.....\..\.........", "\....//\..../.../............/.\/......\........\.", ".../...T.......//./..../.\.//\\.\.\.........../...", "/.../............../....\./.\.\\/..........\.\/\..", ".\./T..\../..\./..\.\./.T...../.../.....\......///", "./....\......././././............./.\...\.../..\..", "\//..\.\/./.\\....................../.............", ".\..\/./.../../\.....\.\../..../......../..\....\.", "\..\..\//.\.......\../..\.....\././/..........T/..", "...../..\............\.\/.......\..W../...........", "/\.\..\\/...\\/......T....T...\.....T//.\T..\.T/..", ".\.\..\.\/...../\./.../...//.\..../...//.../......", ".../.\................../............../..\./.....", "./.\...\..\.......\.../\.............\/../.../..//", ".\..../...\\..//\....\..\......\.....\.........\..", "\...//.\\././T....\T.\.././../....\...\..../..\/./", "\/\..\..\.\./\\.\/././......\\\.\.....T./......./.", ".\.............//.../.T\.../../..T..//.....\\//.\.", "../...\/...\/..\.T\/.........\.\..........\.......", "\.\.....\/../...............\.\\.T........./......", "....\.\\/../...../.............//......../.../T...", "/......\../..\\.\..\.........\.............././...", "./../.../...\.\/....../.\........./\.../..........", "\/.....\..//............../..\..\/../.\...\/.\/...", "........./....\./...../\.\....../\.../....../.../.", "...../\.W/../...T....\.T.\..../../....T\/./\..W...", "....../.\/...W./\.\........../....\.../..\......\.", "...\...../....\/........\../..\T\./\.....\\./.../.", "./..\....\..T...../.\..../...../...../..../.\\..\\", "//...../.\.T/..........\.\..\...\....../......\...", "/....\..\\....\\.\\//\.\.\.....//......./....\....", "...../\..\\..................//..T.././..\/./.../.", ".....\.\\................./../......\...\./....../", ".....T.\.\.......\....................T.......\...", "/......\/.T..../..\......./...........\...T\..\...", "\.........\...\.....\.\....\.....W.....T.....././\"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.375;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> code = {"TW...............................................W", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "/................................................/", "\................................................\", "SW...............................................W"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06666666666666667;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08333333333333333;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08333333333333333;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5833333333333333;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> code = {"...............", "...............", "...W..W........", "...............", "S..W..W...T....", "...............", "...W..W........", "..............."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03571428571428571;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> code = {"........", "../...W.", "........", "S.W.../.", "........", "..T....."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.16666666666666666;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> code = {"T......", ".......", "....W.T", ".......", "\S../.."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.375;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0013020833333333333;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 4.8828125E-4;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> code = {"W/WT", "SWW/"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03571428571428571;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> code = {"SWWW", "WWWW", "WWTW"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.07655502392344497;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.020833333333333332;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> code = {"WWT", "WWW", "WWW", "SWW", ".\/"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.035460992907801414;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4294041450777202;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.031088082901554404;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> code = {"TT..T", "TWWW.", "TWWW.", "TWWW.", "S/..."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3958333333333333;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> code = {"T...W....W..", "............", ".W.......W..", "............", ".W.......W..", "............", ".W..W....W.T", "............", "............", "............", "............", "\S.W...../.."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.28190376569037656;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> code = {"TTTTT.", "WWWWWT", "SWWWWT"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.14533492822966507;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> code = {"/.\...", "......", "\.W.T.", "......", "./S\.."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> code = {"/W.", "\WT", "TST", ".T."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9166666666666666;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.15277777777777585;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> code = {"WWWWWS", "WWWWWT"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.31698717948717947;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.5;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> code = {"...T..", "/S.W.\", "\\.W./"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.16666666666666666;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> code = {".WW.", "SWWT"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.016666666666666666;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> code = {"...T.", "TW.WT", ".....", "TW.W.", ".S.T."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.4833333333333333;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> code = {"./\", "TW/", ".S."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> code = {".W.W.T", "WWSWW.", "W...W."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.06274509803921569;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> code = {"W.W.W.W", "W..S..W", "W.W.W.W"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> code = {"WW", "WS", "WT"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3125;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> code = {"TW..W.T.W.", "..........", "..........", ".T........", ".W..W...W.", ".......T..", "..........", ".W\.W...W.", "\\\.S.....", ".T/.W.../."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.17500000000000002;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> code = {"./\", "TW/", "...", "...", ".S."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> code = {".T.", "/W\", "\W/", ".S."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.08333333333333333;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> code = {".T.T.", "TWWWT", "SWWWW", "TWWWT", ".T.T."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6666666666666665;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> code = {"/W/", "\WT", "/S\"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.16666666666666666;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> code = {"..S", ".WW", "TWW"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.03333333333333333;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> code = {"WWW", "WSW", "WWW", "WWT"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.1;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> code = {"TTTTT", "TWWST", "TWW.T", "TTTTT"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> code = {"/\/\..", "\WWW\.", "/WSW.\", "\WWWT.", ".\/\./"};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.3363715277777777;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.75;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> code = {"./\/\/\/\/\/\/\/\/\/\.", "/....................\", "\..........T........./", "/....................\", "\.........W........../", "/.......W..W.........\", "\.....W............../", "/.................T..\", "\..................../", "/.............T......\", "\..................../", "/...........S....W...\", "\.....WW..W........../", "/.......T............\", "\..................../", "/....................\", "\........W.........../", "/...........W..T.....\", "\..................../", ".\/\/\/\/\/\/\/\/\/\/."};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.9974489795918366;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> code = {};
    TribbloTrouble* pObj = new TribbloTrouble();
    clock_t start = clock();
    double result = pObj->terminates(code);
    clock_t end = clock();
    delete pObj;
    double expected = 0.25;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=272072&rd=9816&pm=6094
********************************************************************************
#include <iostream> 
#include <string> 
#include <vector> 
#include <algorithm> 
#include <functional> 
#include <numeric> 
#include <cstdio> 
#include <cstdlib> 
#include <cmath> 
#include <queue> 
using namespace std; 
typedef vector<int> VI;  typedef vector<vector<int> > VVI; 
typedef vector<string> VS;  typedef vector<vector<string> > VVS; 
typedef vector<long double> VLD;  typedef vector<vector<long double> > VVLD; 
typedef signed long long i64;  typedef unsigned long long u64; 
 
int dx[4] = {1, 0, -1, 0}; 
int dy[4] = {0, 1, 0, -1}; 
 
VVLD mat(43, VLD(43)), mat2; 
VS a; 
int wn[50][50]; 
 
int follow(int x, int y, int d) { 
  for(;;) { 
    x += dx[d]; y += dy[d]; 
    if( x < 0 || x >= a[0].size() || y < 0 || y >= a.size() ) return 1; 
    if( a[y][x] == 'S' ) return 1; 
    if( a[y][x] == 'T' ) return 2; 
    if( a[y][x] == '/' ) d ^= 3; 
    if( a[y][x] == '\\' ) d ^= 1; 
    if( a[y][x] == 'W' ) return wn[y][x]*4+3 + d; 
  } 
} 
 
class TribbloTrouble { 
public: 
double terminates(vector <string> A) { 
  a = A; 
  int i, j, k, x, y, z, n; 
  n = 0; 
  for( y = 0; y < a.size(); y++ ) 
  for( x = 0; x < a[0].size(); x++ ) if( a[y][x] == 'W' ) 
    wn[y][x] = n++; 
  for( y = 0; y < a.size(); y++ ) 
  for( x = 0; x < a[0].size(); x++ ) if( a[y][x] == 'S' ) 
    for( int d = 0; d < 4; d++ ) mat[0][follow(x, y, d)] += 0.25; 
  for( y = 0; y < a.size(); y++ ) 
  for( x = 0; x < a[0].size(); x++ ) if( a[y][x] == 'W' ) 
  for( int d = 0; d < 4; d++ ) 
  for( int d2 = -1; d2 <= 1; d2 += 2 ) 
    mat[wn[y][x]*4+3 + d][follow(x, y, (d+d2+4)%4)] += 0.5; 
  mat[2][2] = 1.0; 
  long double ret = 0.0; 
  for( i = 0; i < 200; i++ ) { 
    VVLD mat2(43, VLD(43)); 
    for( y = 0; y < 43; y++ ) 
    for( x = 0; x < 43; x++ ) 
    for( k = 0; k < 43; k++ ) 
      mat2[y][x] += mat[y][k]*mat[k][x]; 
    mat = mat2; 
  } 
  for( x = 0; x < mat[0].size(); x++ ) ret += mat[0][x]; 
  return ret; 
} 
}; 
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/