/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=12188
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class XorBoardDivTwo {
public:
    int theMax(vector<string> board);
};

int XorBoardDivTwo::theMax(vector<string> board) {
    int ret;
    return ret;
}


int test0() {
    vector<string> board = {"101", "010", "101"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> board = {"111", "111", "111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> board = {"0101001", "1101011"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> board = {"000", "001", "010", "011", "100", "101", "110", "111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> board = {"000000000000000000000000", "011111100111111001111110", "010000000100000001000000", "010000000100000001000000", "010000000100000001000000", "011111100111111001111110", "000000100000001000000010", "000000100000001000000010", "000000100000001000000010", "011111100111111001111110", "000000000000000000000000"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 105;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> board = {"1"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> board = {"0"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> board = {"00"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> board = {"01"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> board = {"11"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> board = {"0", "0"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> board = {"1", "1"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> board = {"1", "0"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> board = {"11", "11"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> board = {"01", "01"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> board = {"10", "01"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> board = {"11", "10"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 64;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> board = {"0000000000000000100001000000", "0000000000000000000000000000", "0100000000100001000100000000", "0001000100000000100001000100", "0000000001000000000000000001", "0000000000000000000000000000", "0000000000000100000000010000", "0100000010000000000000011010", "0000000000001000000000100000", "0001000000000000000000000000", "0100000000001000001000000000", "0000000000100010000001000000", "0000000010000000100010000000", "0010000010000010100000000000", "0000010000000000000000000000", "0000000000000000100010000000", "0000100001000000000000010000", "0000010010010000010010000000", "0000000000000000000000000100", "0000000010000000000000000000", "0000000100001000000000000000", "0000000000000000001000000000", "0100000001100000000000000000", "0000000001000000000000000000", "1000000000000000101011100000", "0000011000000101000000000000", "0000000000000100000000000000", "0000000000000000000000000001", "0000000100000000001000010000", "1100000100000000000100000000"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 129;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 232;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> board = {"00010000110100", "00100000001000", "10001100000000"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> board = {"111110011000000010111101000101010101100101100111", "000001111000001110100001100000100110010000000001", "001010011110011000010001000001001100100100000101", "101000100100010111000001000000100010001100010100", "010000010110010101001001010100011001110110011011", "101011010010010110111000100111011000010011111010", "011001100100100000001111000010000000100010000001", "100001000011101010111110001111100010010001010101", "000001100100011101000010100100000010010001100000", "000001010000100100100000111000000101100111010001", "010101110000010011000100110110010110010010101100", "010001111011110011000110001001010100000001101100", "101100011101101100000001000100111011000001000001", "101001010010110100000110101100011000000000001111", "001000100100000000100111000110100001010010001000", "100010100001001100011001001101101100111010001001", "000010000010100001110011010000001001110000001110", "010010100001100001110011001101101001110100000001", "010100001100110111101100000010111111000110000101", "001100001101000000111000000000010011111100001000", "000000101000011100011101000100100010000011000001", "011111000110100100000001010011110110101000100010", "000001101000000011001100100011100010100100011000", "011111000000101101111111000101000000110001100110", "110110000000100011010110001010001010001000100010", "001110000001110110011001111011101100000010011010", "001001101100101100000010010001101100100100011000", "101000110000000100100010100011001001010010010111", "111011101100110001000001100011111011011011001000", "001010100000000000011000001011001100111110010010", "000110000001001011001010111000000000000111011000", "110000100101001000001010011101100010100001001010", "011001001000001111000010100111010111111000110011", "101000001010110101001110000010100011011011100111", "111000001000000001011000000001001010011101011101", "001011100001011100001100110101011110011010000001", "110111101010000100001010100011011000011011111000", "101111001101010101000011011101001000100100010110", "100111001000010110100101011101010000000011010111", "111000100010011111101001100101000100010100000011", "101000011100100001001010111110011001001001000001", "101100101001000100000100100010010010110001101110", "110111100100110111100010000001000010110001010011", "000001100011011101100000100001000000000010010100"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 896;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> board = {"000110011001000111", "101100101100110110", "000000110000110111", "001000000110110001", "011110000110010101", "111111010001001010", "010000001100010010", "000001011000010100", "011010001000011100", "000001110101000100", "000001110110101010", "000000010111010101", "100100111010011011", "010101101011011000", "100101101101100100", "100111011000101011", "001101111010001111", "111010100100111010", "010100000000111001", "011011000010100110", "000001010001110010", "010110111101111001"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 195;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> board = {"110010000101010100111011011101101111010011000101", "001111110101111101111110101111111101100111101101", "001100111100101000110101001000101010111011011111", "011110101010110001010011011011010101010000001010", "000001101110101000001100011110001111000110011101", "110011111101011010010100101011010011111011111100", "100011001110101111011011010001111001000001100011", "111101101111010011100110001111110101110010101101", "011011111000110111010001100111101000100110010001", "100110011110111011101010011110111101011101010011", "100111110100001101010100100111100100000111101101", "010010111111010110100000111110111100011010111001", "111011110110110011101000000010101111000101010111", "001010111011011111010111111101111111110111101001", "011111110100011110110010101110111001010100111101", "111011011100010111100110011100101111010001111011", "101100100111000010111011101100001101010101010111", "111011010001000001001001001011111110011110010010", "100000111010111111101110000001001011110010110010", "101101111110111110111101010001011010101011111011", "101101010011110110111101111011111100010011100100", "011100111111111111100001001111010111101100101111", "111011111010111011110111111101111111111111111001", "101100110111010010110111101101110100101011001101", "101101000000001101011110011101011000101001111111", "101111011101101101101001111010111110101001111001", "011111011101111010101010110111111101011110101110", "111101011101111011110111111000011011101011111110", "100011101011110101111001011110010100011111101101", "111110110010000101111100111111101111110111111110", "010001001010001110111011100111111001100010111010", "101111111011110111111101011110111111100111010101", "001010011111110011110010000011011110111011100011"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 979;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> board = {"000", "011", "101", "100", "100", "100", "111", "000", "000", "111", "111", "001", "011", "110", "010", "110", "110", "111", "101", "110", "000", "010", "100", "111", "111", "011", "110", "111", "110", "010", "010", "011", "100", "111", "011", "001", "101", "011", "111", "111", "111", "110", "001", "111", "100", "110", "011", "111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 87;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1250;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> board = {"1111111111010111101", "1111111111111111111", "1111011101111011111", "1111111111110111111", "1111101111101111111", "1111111111111111111", "1011111110110111111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 109;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> board = {"11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1205;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 98;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 362;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 555;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 860;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1063;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> board = {"01000011111110101101111111110011101101000111100001", "01001100111101010010011110011100111001111000110010", "10000110001001101100110011110100110100101001100011", "01011110100110010101010010101110100010001110001011", "01010000000101000110111001011001001010101101101010", "00001011100001100100011001010000100011110110000010", "01000001101001101101000011000001001010000010010011", "01100000010111000100010011100011000111001100100100", "11010010001101111001001110111110011111101101100101", "01111011101010101111111000000100011111000011100101", "11100111010000111011000010110110000001010110010011", "11101010100100101000000010111010100010110011010001", "01000001101101001001010010110101010000110000000110", "10011001001001100111011111110000111010010010010110", "11101100000001110110100010000010010011010010101011", "11110100010111000010001110101101011011100010010011", "01010111100010110110111010101011100011011111001100", "10011010001011100111100101110011011000110100001111", "01011000100110110000001001011011000100000001000010", "10111111100000011011101001101111110010101111100100", "00101010001001101010011101101001111110111111111110", "10101110101000101010110110111011110010101011010111", "11110111000010110110011101000100111111010100111011", "00001101101111111111000111100110010000000000101101", "10111111110001111001101010001111111011010000111011", "00111011010010011010011111110011110001110110011111", "00011100100000000000000101011011100001010001001010", "10001111010110111001011110110111110111110010100111", "10001100001101111101110000100110101101001000110000", "10111101011111111110011111101011101000001111000001", "10000111100110101010110010000101010110011110100001", "10100010011110101111110111011001011111000101001011", "11100010011011000011101000110011010100101011111000", "11000101000000001011001100001011000010100100010110", "00011111001101011011011111101111100101101101000001", "01001011100000111110110011111101010010110110011111", "01110001011010010100000010111101101011011101010000", "10010111111110011010011010100111010101111010001100", "01110100100111000011111110100101111100001001101010", "00011100110000011011000010010101110000001100000111", "10000111110000100011100100001100010001011010000010", "01100001001100100111110000010101111000010110000011", "00110010011010001010101100000011010011100101011101", "00001000101011110011110011011101100010111010111111", "00011000100110000001110010110010011011101010100010", "11111101000010101110100111111111111011110101111111", "00001000010000001101000010011000010100100010010001", "00101101110001101001100010010100011011000000001101", "00110111010111101110111100000010100110100110011000", "11001011100000001011011111010011100101010000001011"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1299;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> board = {"11000110010010110011100100100010110111100001011101", "11110111011110001011110110001001010111010110111100", "10000011000111000101011111101010110011110000101011", "11111110001110111000110111000111110101000101111110", "11010101001110000001101001111001100101101100100111", "01110101010111011111110100110101111100011010010000", "01100111110000011101100000100111110100111011111100", "01000100011101110111000100111111101011101000010110", "11101001001111111010011000011010000001100111010101", "10101111100111101101111010111011000111011111101110", "01011101110100111100010000010110111101110110000101", "10111001011001010111101000111000111100101000110011", "11010111110100011111011111000001111101010110111011", "11001011110010000110110011101111011000010100100011", "01100111111011110111110000000101111111011000001011", "11001111000110011111010100100111111110111001011101", "10000101010110100101100000110000010110010101001001", "01111111100000011111011011101101110011110111000101", "10111110111010101011111000000000001110100110111110", "11101010110111011100111011111101101101011110011110", "10101101110011001011100010110110111010111010111111", "11000111010010100100101111001010011110100011011011", "11000110111111110110001101101111001101011010000111", "10110110111111111110110011011101101011111000110100", "00110110001010101110111111101010000101100111111000", "11110011100110110011001110000111010001111100100110", "00101101110111010000111010111101000111011011101001", "01011011101111001001100110011111111101100001011111", "11101011110011101111001101011000011100111010001001", "11000101100101110010100101111111001000110111011101", "01010110111110100101111100001011101001100011111001", "10100111110111111011000011111101111001101101011100", "00010101001101110010110101111101011110101011011001", "01011101110011011111111000101111010011001010011001", "10011111110010010111111111101011101110101111001100", "11011001111100100100001010111001011011110000001111", "11101101001011100011101011101111111100110111110110", "01010010000101011011101011010111110110110110101111", "01010001011001101111000011110101111111110111001001", "01101100101001110101010001101100111001111110111111", "00111110101011110010110110101110100111001000110000", "00010101110010110101010011111110101111110111010001", "10110110010111100000111100000010000110010110111100", "10111110101111001011000011011101011111111011101010", "10110001111000011010000100011100110110111101101011", "11001111111010110110110111001101111110011110101111", "11110111010111010001100001001101010010110100110110", "11101111111111010011011101011011011010111111100111", "11111000111001100101100101000111001101111101101111", "10111100100010101110010010111011100111000011101011"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1493;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1746;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1966;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2206;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2402;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 192;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1244;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> board = {"010", "010", "101"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2500;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2450;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2402;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> board = {"011", "011", "100"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> board = {"101", "101", "101"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 276;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2305;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> board = {"01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "10111111110111101011011100", "10111111110111101011011100", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "10111111110111101011011100", "10111111110111101011011100", "01000000001000010100100011", "01000000001000010100100011", "10111111110111101011011100", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "10111111110111101011011100", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "01000000001000010100100011", "10111111110111101011011100"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 456;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> board = {"111001110010110000010010", "000110001101001111101101", "111001110010110000010010", "000110001101001111101101", "000110001101001111101101", "111001110010110000010010", "111001110010110000010010", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "111001110010110000010010", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "000110001101001111101101", "111001110010110000010010"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 330;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> board = {};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 472;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> board = {"00110001", "00110001", "00110001", "11001110", "00110001", "11001110", "00110001", "11001110", "11001110", "11001110", "11001110", "11001110", "00110001", "11001110", "00110001", "11001110", "11001110", "11001110", "11001110", "11001110", "11001110", "00110001", "00110001", "11001110", "00110001", "11001110", "11001110", "11001110", "00110001", "11001110", "11001110", "00110001", "00110001", "00110001", "00110001", "00110001", "11001110", "11001110", "11001110", "11001110"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 180;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> board = {"00100000100000000000000", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000", "00100000100000000000000", "00100000100000000000000", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000", "00100000100000000000000", "00100000100000000000000", "11011111011111111111111", "11011111011111111111111", "00100000100000000000000", "00100000100000000000000", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000", "00100000100000000000000", "00100000100000000000000", "00100000100000000000000", "11011111011111111111111", "00100000100000000000000"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 286;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> board = {"11111110111011111011111", "11111110111011111011111", "11111110111011111011111", "11111110111011111011111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 65;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> board = {"0000101000101010000", "1111010111010101111", "0000101000101010000", "0000101000101010000", "0000101000101010000", "0000101000101010000", "0000101000101010000", "1111010111010101111", "0000101000101010000", "0000101000101010000", "0000101000101010000", "0000101000101010000", "0000101000101010000", "0000101000101010000", "0000101000101010000", "1111010111010101111", "0000101000101010000", "0000101000101010000", "0000101000101010000", "1111010111010101111", "0000101000101010000", "0000101000101010000", "0000101000101010000"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 173;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> board = {"10100100001111011110", "01011011110000100001", "01011011110000100001", "01011011110000100001", "01011011110000100001", "01011011110000100001", "10100100001111011110", "01011011110000100001", "10100100001111011110", "01011011110000100001", "10100100001111011110", "01011011110000100001", "01011011110000100001", "01011011110000100001", "01011011110000100001", "10100100001111011110", "01011011110000100001", "01011011110000100001", "10100100001111011110", "01011011110000100001"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 200;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> board = {"110101001111111011010111101111", "001010110000000100101000010000", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "110101001111111011010111101111", "001010110000000100101000010000", "001010110000000100101000010000", "001010110000000100101000010000", "110101001111111011010111101111", "110101001111111011010111101111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 343;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> board = {"110001011100", "110001011100", "001110100011", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "001110100011", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "001110100011", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100", "110001011100"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 346;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> board = {"101", "010", "101"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> board = {"000", "001", "010", "011", "100", "101", "110", "111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> board = {"000000000000", "000000000000", "101000000000"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> board = {"111", "111", "111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> board = {"10000000011111100", "11111001111001001", "11110010100101001"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> board = {"1", "1", "1", "1", "1", "0"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> board = {"0"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> board = {"00001111", "00110011", "01010101"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> board = {"001", "110", "111", "111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> board = {"11111", "00000", "00000", "11111"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> board = {"000", "100", "011"};
    XorBoardDivTwo* pObj = new XorBoardDivTwo();
    clock_t start = clock();
    int result = pObj->theMax(board);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=23037665&rd=15177&pm=12188
********************************************************************************
#include<set> 
#include<cmath> 
#include<stack> 
#include<cstdio> 
#include<cstring> 
#include<iostream> 
#include<algorithm> 
#include<cstdlib> 
#include<numeric> 
#include<vector> 
#include<ctime> 
#include<queue> 
#include<list> 
#include<map> 
#define pi acos(-1) 
#define INF 0x7fffffff 
#define clr(x)  memset(x,0,sizeof(x)); 
#define clrto(x,siz,y)  for(int xx=0;xx<=siz;xx++)  x[xx]=y; 
#define clrset(x,siz)  for(int xx=0;xx<=siz;xx++)  x[xx]=xx; 
#define clrvec(x,siz) for(int xx=0;x<=siz;xx++)  x[xx].clear(); 
#define fop   freopen("in.txt","r",stdin);freopen("out.txt","w",stdout); 
#define myprogram By_135678942570 
#define clrcpy(x,siz,y)  for(int xx=0;xx<siz;xx++)  x[xx]=y[xx]; 
using namespace std; 
class XorBoardDivTwo 
{ 
    public: int theMax(vector <string> board) 
    { 
        int n=board.size(); 
        int m=board[0].size(); 
        int res=0; 
        for(int i=0;i<n;i++) 
           for(int j=0;j<m;j++) 
           { 
               int mp[55][55]; 
               for(int k=0;k<n;k++) 
                  for(int l=0;l<m;l++) 
                      mp[k][l]=board[k][l]-'0'; 
               for(int k=0;k<m;k++) 
                  mp[i][k]=!mp[i][k]; 
               for(int k=0;k<n;k++) 
                  mp[k][j]=!mp[k][j]; 
               int count=0; 
               for(int k=0;k<n;k++) 
                  for(int l=0;l<m;l++) 
                     count+=mp[k][l]; 
               res=max(res,count); 
           } 
        return res; 
    } 
};

********************************************************************************
*******************************************************************************/