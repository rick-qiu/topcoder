/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2431
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Paths {
public:
    int secondBest(vector<string> graph, int from, int to);
};

int Paths::secondBest(vector<string> graph, int from, int to) {
    int ret;
    return ret;
}


int test0() {
    vector<string> graph = {"01111", "10111", "11011", "11101", "11110"};
    int from = 0;
    int to = 0;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> graph = {"1"};
    int from = 0;
    int to = 0;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> graph = {"X1119", "1X119", "11X19", "111X1", "9111X"};
    int from = 0;
    int to = 4;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> graph = {"X1119", "1X111", "11111", "111X1", "9111X"};
    int from = 0;
    int to = 4;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> graph = {"X1110", "1X111", "11111", "111X1", "0111X"};
    int from = 0;
    int to = 4;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> graph = {"X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXX", "X999999999999999999999999999X9XXXXXXXXXXXXXXXXXXXX", "X9999999999999999999999999999X9XXXXXXXXXXXXXXXXXXX", "X99999999999999999999999999999X9XXXXXXXXXXXXXXXXXX", "X999999999999999999999999999999X9XXXXXXXXXXXXXXXXX", "X9999999999999999999999999999999X9XXXXXXXXXXXXXXXX", "X99999999999999999999999999999999X9XXXXXXXXXXXXXXX", "X999999999999999999999999999999999X9XXXXXXXXXXXXXX", "X9999999999999999999999999999999999X9XXXXXXXXXXXXX", "X99999999999999999999999999999999999X9XXXXXXXXXXXX", "X999999999999999999999999999999999999X9XXXXXXXXXXX", "X9999999999999999999999999999999999999X9XXXXXXXXXX", "X99999999999999999999999999999999999999X9XXXXXXXXX", "X999999999999999999999999999999999999999X9XXXXXXXX", "X9999999999999999999999999999999999999999X9XXXXXXX", "X99999999999999999999999999999999999999999X9XXXXXX", "X999999999999999999999999999999999999999999X9XXXXX", "X9999999999999999999999999999999999999999999X9XXXX", "X99999999999999999999999999999999999999999999X9XXX", "X999999999999999999999999999999999999999999999X9XX", "X9999999999999999999999999999999999999999999999X9X", "X99999999999999999999999999999999999999999999999X9", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    int from = 0;
    int to = 49;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 459;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> graph = {"6X4XX50392", "95979050X4", "703X7X4218", "6602806624", "9828648374", "259507367X", "8810887807", "002378X847", "446X754724", "1128726659"};
    int from = 3;
    int to = 3;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> graph = {"19999", "99999", "99999", "99999", "99999"};
    int from = 0;
    int to = 4;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> graph = {"X11XX", "XXX1X", "XXXX1", "XXXX1", "XXXXX"};
    int from = 0;
    int to = 4;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> graph = {"01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01XX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01X", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01", "1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0"};
    int from = 2;
    int to = 1;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 99;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> graph = {"X"};
    int from = 0;
    int to = 0;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> graph = {"09XXXXXXXX", "0099999999", "0009999999", "0000999999", "0000099999", "0000009999", "0000000999", "0000000099", "0000000009", "0000000000"};
    int from = 0;
    int to = 9;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> graph = {"0123456789", "9012345678", "8901234567", "7890123456", "6789012345", "5678901234", "4567890123", "3456789012", "2345678901", "1234567890"};
    int from = 0;
    int to = 9;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> graph = {"01111111111111111111111111111111111111111111111111", "X0111111111111111111111111111111111111111111111111", "XX011111111111111111111111111111111111111111111111", "XXX01111111111111111111111111111111111111111111111", "XXXX0111111111111111111111111111111111111111111111", "XXXXX011111111111111111111111111111111111111111111", "XXXXXX01111111111111111111111111111111111111111111", "XXXXXXX0111111111111111111111111111111111111111111", "XXXXXXXX011111111111111111111111111111111111111111", "XXXXXXXXX01111111111111111111111111111111111111111", "XXXXXXXXXX0111111111111111111111111111111111111111", "XXXXXXXXXXX011111111111111111111111111111111111111", "XXXXXXXXXXXX01111111111111111111111111111111111111", "XXXXXXXXXXXXX0111111111111111111111111111111111111", "XXXXXXXXXXXXXX011111111111111111111111111111111111", "XXXXXXXXXXXXXXX01111111111111111111111111111111111", "XXXXXXXXXXXXXXXX0111111111111111111111111111111111", "XXXXXXXXXXXXXXXXX011111111111111111111111111111111", "XXXXXXXXXXXXXXXXXX01111111111111111111111111111111", "XXXXXXXXXXXXXXXXXXX0111111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXX011111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXX01111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXX0111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXX011111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0"};
    int from = 0;
    int to = 0;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> graph = {"01111111111111111111111111111111111111111111111111", "X0111111111111111111111111111111111111111111111111", "XX011111111111111111111111111111111111111111111111", "XXX01111111111111111111111111111111111111111111111", "XXXX0111111111111111111111111111111111111111111111", "XXXXX011111111111111111111111111111111111111111111", "XXXXXX01111111111111111111111111111111111111111111", "XXXXXXX0111111111111111111111111111111111111111111", "XXXXXXXX011111111111111111111111111111111111111111", "XXXXXXXXX01111111111111111111111111111111111111111", "XXXXXXXXXX0111111111111111111111111111111111111111", "XXXXXXXXXXX011111111111111111111111111111111111111", "XXXXXXXXXXXX01111111111111111111111111111111111111", "XXXXXXXXXXXXX0111111111111111111111111111111111111", "XXXXXXXXXXXXXX011111111111111111111111111111111111", "XXXXXXXXXXXXXXX01111111111111111111111111111111111", "XXXXXXXXXXXXXXXX0111111111111111111111111111111111", "XXXXXXXXXXXXXXXXX011111111111111111111111111111111", "XXXXXXXXXXXXXXXXXX01111111111111111111111111111111", "XXXXXXXXXXXXXXXXXXX0111111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXX011111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXX01111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXX0111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXX011111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0"};
    int from = 0;
    int to = 49;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> graph = {"01111111111111111111111111111111111111111111111111", "X0111111111111111111111111111111111111111111111111", "XX011111111111111111111111111111111111111111111111", "XXX01111111111111111111111111111111111111111111111", "XXXX0111111111111111111111111111111111111111111111", "XXXXX011111111111111111111111111111111111111111111", "XXXXXX01111111111111111111111111111111111111111111", "XXXXXXX0111111111111111111111111111111111111111111", "XXXXXXXX011111111111111111111111111111111111111111", "XXXXXXXXX01111111111111111111111111111111111111111", "XXXXXXXXXX0111111111111111111111111111111111111111", "XXXXXXXXXXX011111111111111111111111111111111111111", "XXXXXXXXXXXX01111111111111111111111111111111111111", "XXXXXXXXXXXXX0111111111111111111111111111111111111", "XXXXXXXXXXXXXX011111111111111111111111111111111111", "XXXXXXXXXXXXXXX01111111111111111111111111111111111", "XXXXXXXXXXXXXXXX0111111111111111111111111111111111", "XXXXXXXXXXXXXXXXX011111111111111111111111111111111", "XXXXXXXXXXXXXXXXXX01111111111111111111111111111111", "XXXXXXXXXXXXXXXXXXX0111111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXX011111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXX01111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXX0111111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXX011111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0111", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX011", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX01", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0"};
    int from = 0;
    int to = 1;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> graph = {};
    int from = 0;
    int to = 49;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> graph = {};
    int from = 0;
    int to = 0;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> graph = {};
    int from = 25;
    int to = 25;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> graph = {};
    int from = 0;
    int to = 49;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> graph = {"X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XX9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXX", "X999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXX", "X9999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXX", "X99999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXX", "X999999999999999999999999999X9XXXXXXXXXXXXXXXXXXXX", "X9999999999999999999999999999X9XXXXXXXXXXXXXXXXXXX", "X99999999999999999999999999999X9XXXXXXXXXXXXXXXXXX", "X999999999999999999999999999999X9XXXXXXXXXXXXXXXXX", "X9999999999999999999999999999999X9XXXXXXXXXXXXXXXX", "X99999999999999999999999999999999X9XXXXXXXXXXXXXXX", "X999999999999999999999999999999999X9XXXXXXXXXXXXXX", "X9999999999999999999999999999999999X9XXXXXXXXXXXXX", "X99999999999999999999999999999999999X9XXXXXXXXXXXX", "X999999999999999999999999999999999999X9XXXXXXXXXXX", "X9999999999999999999999999999999999999X9XXXXXXXXXX", "X99999999999999999999999999999999999999X9XXXXXXXXX", "X999999999999999999999999999999999999999X9XXXXXXXX", "X9999999999999999999999999999999999999999X9XXXXXXX", "X99999999999999999999999999999999999999999X9XXXXXX", "X999999999999999999999999999999999999999999X9XXXXX", "X9999999999999999999999999999999999999999999X9XXXX", "X99999999999999999999999999999999999999999999X9XXX", "X999999999999999999999999999999999999999999999X9XX", "X9999999999999999999999999999999999999999999999X9X", "X99999999999999999999999999999999999999999999999X9", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
    int from = 0;
    int to = 49;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 459;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> graph = {"X1", "XX"};
    int from = 0;
    int to = 1;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> graph = {"90X", "XX0", "5XX"};
    int from = 0;
    int to = 0;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> graph = {"X1", "0X"};
    int from = 0;
    int to = 0;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> graph = {"X1XXX", "XX13X", "XXX1X", "XXXX1", "XXXXX"};
    int from = 0;
    int to = 4;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> graph = {"X13", "X2X", "XXX"};
    int from = 0;
    int to = 2;
    Paths* pObj = new Paths();
    clock_t start = clock();
    int result = pObj->secondBest(graph, from, to);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8547850&rd=5072&pm=2431
********************************************************************************
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <utility>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <setjmp.h>
#include <ctype.h>
 
#define ll long long
#define ld long double
#define EPS 1e-9
using namespace std;
 
class Paths {
 public:
 int secondBest(vector <string> graph, int from, int to) {
  
// BEGIN CUT HERE
    static bool s_FirstTime = true; if (s_FirstTime) { s_FirstTime = false; run_test(-1); }
// END CUT HERE
 
  int best[64][2];
  memset(best, 1, sizeof(best));
  int i, j, k;
  int n = graph.size();
  best[from][0] = 0;
  int adj[64][64];
  for (i=0;i<n;i++)
   for (j=0;j<n;j++)
    adj[i][j] = graph[i][j] != 'X' ? graph[i][j] - '0' : 0x1010101;
  for (i = 0; i < n*2; i++)
   for (j = 0; j < n; j++)
    for (k = 0; k < n; k++) {
     if (best[j][0] + adj[j][k] < best[k][0]) {
      best[k][1] = best[k][0];
      best[k][0] = best[j][0] + adj[j][k];
     }
     else if (best[j][0] + adj[j][k] < best[k][1] && best[j][0] + adj[j][k] > best[k][0]) {
      best[k][1] = best[j][0] + adj[j][k];
     }
     if (best[j][1] + adj[j][k] < best[k][1] && best[j][1] + adj[j][k] > best[k][0])
      best[k][1] = best[j][1] + adj[j][k];
    }
  return best[to][1] < 0x100000 ? best[to][1] : -1;
     
 }
 
// BEGIN CUT HERE
  public:
  void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); }
  private:
  template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
  void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
  void test_case_0() { string Arr0[] = {"01111",
 "10111",
 "11011",
 "11101",
 "11110"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 0; int Arg3 = 2; verify_case(0, Arg3, secondBest(Arg0, Arg1, Arg2)); }
  void test_case_1() { string Arr0[] = {"1"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 0; int Arg3 = 1; verify_case(1, Arg3, secondBest(Arg0, Arg1, Arg2)); }
  void test_case_2() { string Arr0[] = {"X1119",
 "1X119",
 "11X19",
 "111X1",
 "9111X"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 4; int Arg3 = 3; verify_case(2, Arg3, secondBest(Arg0, Arg1, Arg2)); }
  void test_case_3() { string Arr0[] = {"X1110",
 "1X111",
 "11111",
 "111X1",
 "0111X"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 4; int Arg3 = 2; verify_case(3, Arg3, secondBest(Arg0, Arg1, Arg2)); }
  void test_case_4() { string Arr0[] = {"X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "XX9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXX",
 "X9999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXX",
 "X99999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXX",
 "X999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXX",
 "X9999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXX",
 "X99999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXX",
 "X999999999999999999999999999X9XXXXXXXXXXXXXXXXXXXX",
 "X9999999999999999999999999999X9XXXXXXXXXXXXXXXXXXX",
 "X99999999999999999999999999999X9XXXXXXXXXXXXXXXXXX",
 "X999999999999999999999999999999X9XXXXXXXXXXXXXXXXX",
 "X9999999999999999999999999999999X9XXXXXXXXXXXXXXXX",
 "X99999999999999999999999999999999X9XXXXXXXXXXXXXXX",
 "X999999999999999999999999999999999X9XXXXXXXXXXXXXX",
 "X9999999999999999999999999999999999X9XXXXXXXXXXXXX",
 "X99999999999999999999999999999999999X9XXXXXXXXXXXX",
 "X999999999999999999999999999999999999X9XXXXXXXXXXX",
 "X9999999999999999999999999999999999999X9XXXXXXXXXX",
 "X99999999999999999999999999999999999999X9XXXXXXXXX",
 "X999999999999999999999999999999999999999X9XXXXXXXX",
 "X9999999999999999999999999999999999999999X9XXXXXXX",
 "X99999999999999999999999999999999999999999X9XXXXXX",
 "X999999999999999999999999999999999999999999X9XXXXX",
 "X9999999999999999999999999999999999999999999X9XXXX",
 "X99999999999999999999999999999999999999999999X9XXX",
 "X999999999999999999999999999999999999999999999X9XX",
 "X9999999999999999999999999999999999999999999999X9X",
 "X99999999999999999999999999999999999999999999999X9",
 "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 49; int Arg3 = 459; verify_case(4, Arg3, secondBest(Arg0, Arg1, Arg2)); }
  void test_case_5() { string Arr0[] = {"X"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 0; int Arg2 = 0; int Arg3 = -1; verify_case(5, Arg3, secondBest(Arg0, Arg1, Arg2)); }
 
// END CUT HERE
 
};
 
// Powered by PopsEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/