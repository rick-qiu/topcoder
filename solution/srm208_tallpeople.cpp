/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2923
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TallPeople {
public:
    vector<int> getPeople(vector<string> people);
};

vector<int> TallPeople::getPeople(vector<string> people) {
    vector<int> ret;
    return ret;
}


int test0() {
    vector<string> people = {"9 2 3", "4 8 7"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 7};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> people = {"1 2", "4 5", "3 6"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {4, 4};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> people = {"1 1", "1 1"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> people = {"1 2", "2 1"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 2};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> people = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> people = {"1 1000", "1000 1"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1000};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> people = {"1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000", "1 1000"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> people = {"1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5", "3 4 1 9 8 2 3 4 1 4 5 8 4 1 1 3 4 5 7 8 3 4 2"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> people = {"9 5 8 5 5 5 1 4 5 7 9 3 3 1 1 5 1 6 7 1 4 6 7 4 8", "1 6 1 3 6 8 5 7 2 6 1 4 5 6 4 1 9 7 3 9 8 3 7 9 2", "4 9 4 4 7 5 4 7 8 1 7 6 2 1 7 7 4 9 6 6 5 6 4 4 4", "9 1 8 8 8 2 2 4 8 4 7 6 4 2 4 1 7 7 5 7 1 5 2 7 7", "4 3 6 5 8 8 1 8 2 7 7 3 8 9 7 9 9 9 5 2 1 6 2 6 9", "7 6 8 9 4 6 3 2 5 6 3 5 7 7 4 4 9 9 3 2 6 7 2 1 1", "4 9 9 6 6 8 5 5 4 5 5 8 3 5 1 4 6 7 2 9 5 8 4 4 5", "3 3 2 8 9 9 8 5 7 1 2 4 7 6 6 7 3 3 1 7 4 9 9 4 3", "4 4 3 5 4 4 6 2 5 1 1 2 7 8 3 1 9 2 4 2 7 9 7 1 4", "3 6 8 9 7 3 4 6 2 1 6 6 7 6 6 4 3 7 6 7 6 9 7 9 6", "3 5 3 9 2 3 6 9 8 3 4 8 7 8 9 1 8 9 6 6 8 9 9 9 1", "9 1 1 3 2 7 8 9 9 3 2 7 1 7 6 3 3 7 7 4 1 1 7 4 2", "8 9 4 7 6 5 2 3 9 1 2 1 4 4 1 9 3 7 8 5 1 5 2 4 9", "4 8 9 8 7 8 5 5 5 9 9 7 3 7 3 9 5 7 6 2 1 4 8 4 6", "4 4 2 9 8 1 9 4 1 8 4 5 2 9 8 7 8 9 4 7 4 4 9 3 8", "7 7 7 4 2 7 6 3 8 1 6 7 6 7 8 8 1 8 7 6 8 9 1 8 2", "5 7 3 4 6 6 8 5 1 2 4 7 2 7 7 7 3 3 8 2 8 2 4 7 1", "9 7 5 5 5 2 7 6 4 8 7 2 2 6 3 4 3 6 7 3 3 5 7 5 7", "1 9 1 9 4 1 6 1 5 8 9 1 7 4 7 4 3 6 4 4 2 5 7 7 2", "2 9 3 8 1 1 8 9 5 1 5 4 6 5 1 3 4 4 8 4 8 1 1 5 8", "3 7 4 6 5 2 4 4 1 5 9 2 5 2 1 6 9 8 8 5 2 3 2 7 7", "2 9 3 7 4 5 6 2 6 5 5 1 6 3 5 2 7 7 4 3 1 9 4 3 7", "7 1 7 1 9 1 7 6 9 9 2 4 4 1 8 3 1 5 5 6 6 5 5 8 9", "3 7 6 6 1 6 3 2 1 2 6 7 3 7 5 7 1 9 1 3 6 9 3 7 7", "2 1 5 7 6 5 7 5 3 9 7 9 8 5 9 3 1 1 5 2 2 2 2 3 5", "1 3 8 6 5 2 3 3 7 9 2 5 4 3 4 3 4 9 8 9 5 4 6 9 5", "8 2 1 2 4 2 1 9 3 3 4 2 9 1 5 6 6 8 8 1 2 2 3 5 3", "9 5 5 2 2 3 8 8 1 7 9 5 7 9 1 9 2 6 2 2 1 5 4 6 7", "5 7 3 4 6 4 3 4 4 2 9 6 5 7 4 3 7 7 8 4 7 6 7 3 4", "5 8 1 3 6 7 8 9 5 5 3 1 8 9 5 5 2 6 1 4 9 9 1 6 5", "7 4 7 9 3 1 8 3 9 2 2 8 8 8 3 3 2 1 8 7 2 3 8 1 4", "7 4 6 8 3 5 2 6 3 7 6 2 6 4 6 2 9 8 1 2 8 5 5 6 3", "2 8 3 1 3 1 7 9 2 9 4 2 1 8 8 4 7 3 8 1 6 9 8 1 1", "8 3 9 4 6 8 2 4 7 3 1 8 5 7 3 4 8 1 3 4 5 9 2 1 5", "6 8 2 1 1 1 2 5 3 3 9 2 3 4 1 6 9 9 5 5 6 3 5 9 3", "4 4 5 8 8 8 8 4 5 6 3 5 8 4 9 6 6 7 8 7 2 6 5 8 1", "7 2 5 3 3 9 6 5 9 6 9 8 9 9 8 8 4 5 1 6 3 1 2 9 2", "4 9 6 1 8 2 6 5 4 5 9 3 4 4 8 5 5 2 3 1 7 7 2 7 3", "7 7 2 6 9 4 9 7 3 9 1 1 9 5 1 4 4 7 3 2 5 6 1 2 3", "2 7 9 9 4 6 7 2 7 1 2 7 9 8 3 8 7 2 1 3 6 9 8 3 8", "4 7 6 2 1 8 6 7 1 1 8 5 9 2 2 8 1 9 8 5 2 1 7 4 3", "5 5 5 8 3 6 2 1 4 5 7 3 9 8 5 1 2 9 1 7 3 8 2 2 7", "7 3 3 3 2 7 5 6 9 2 8 3 1 8 9 8 1 7 5 2 2 4 7 8 7", "5 1 9 6 9 5 4 2 9 3 7 9 7 2 7 5 7 9 6 9 6 3 9 6 1", "5 4 8 5 1 1 2 8 7 8 8 9 6 3 8 6 9 3 8 7 9 8 4 4 8", "9 6 6 1 7 9 9 1 8 4 5 3 3 5 4 7 1 4 5 4 4 9 1 9 6", "1 7 6 9 6 6 6 3 5 8 4 9 1 8 5 6 9 7 9 5 7 4 4 1 7", "4 2 1 7 2 3 7 7 1 5 2 3 6 2 5 2 9 9 5 8 6 9 8 9 7", "4 5 5 1 4 5 6 1 9 8 1 2 4 8 6 9 8 7 4 3 6 3 2 1 2", "8 3 7 4 7 1 1 3 8 4 2 2 3 3 3 7 3 6 5 6 5 5 2 9 1"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> people = {"4 8 3 1 7 9 9 2 8 9 2 1 9 3 1 2 5 3 7 3 3 5 7 5 2", "5 8 3 4 8 1 8 4 4 3 9 6 6 1 8 3 5 4 2 3 1 3 1 7 8", "8 8 2 8 6 4 6 9 7 4 1 1 2 5 4 8 1 4 3 5 7 7 9 2 7", "8 1 9 3 3 2 3 8 3 6 5 4 8 9 9 3 1 5 3 4 8 8 9 1 4", "4 3 4 4 2 5 5 9 5 4 6 8 3 6 2 9 7 7 7 3 8 4 1 1 1", "4 4 5 2 3 3 3 7 5 5 6 5 4 5 5 6 9 9 3 7 1 7 7 9 2", "7 1 4 4 5 5 8 4 9 1 6 4 7 1 9 8 1 1 8 1 1 3 4 1 6", "5 2 4 7 3 8 3 7 8 8 1 2 2 7 7 1 7 6 3 8 8 7 6 7 3", "9 9 4 1 1 5 5 4 5 5 8 5 6 8 2 4 3 7 9 9 7 9 9 1 6", "2 2 3 5 4 1 6 6 4 7 8 4 1 6 7 7 9 7 8 1 6 1 2 8 3", "2 2 2 5 7 4 8 7 3 2 2 8 2 2 6 6 2 4 3 2 4 1 1 7 3", "8 3 7 8 6 7 9 3 3 3 2 7 6 6 8 2 1 9 3 2 7 9 9 7 9", "7 2 8 6 2 7 7 9 2 7 9 9 9 2 1 9 3 8 1 1 5 2 4 5 8", "6 5 6 9 7 3 6 2 5 3 9 3 5 6 3 4 3 2 6 8 8 4 2 2 8", "9 4 5 4 1 8 3 3 7 4 7 7 3 5 5 6 9 3 9 7 2 7 9 6 8", "5 4 6 7 4 3 2 8 2 7 6 8 2 5 4 4 2 3 5 2 9 4 9 9 4", "9 9 8 1 9 4 4 9 9 5 4 8 1 1 9 7 4 8 9 8 6 4 9 5 4", "2 6 2 3 2 9 7 4 1 3 6 7 1 5 5 5 2 1 7 9 2 6 4 6 6", "6 4 4 8 1 6 6 8 3 1 5 5 6 7 8 8 2 3 6 1 1 1 7 8 5", "2 7 2 6 2 7 3 9 3 3 3 4 1 6 3 8 1 9 2 9 5 2 1 6 8", "8 4 4 8 3 6 9 9 1 7 4 3 4 7 9 6 2 7 9 4 1 2 2 4 2", "2 1 7 6 3 2 2 1 6 2 1 4 3 1 8 5 6 5 3 5 6 5 7 8 7", "1 3 2 3 5 5 2 7 8 5 3 6 1 2 5 4 2 1 6 4 7 9 3 8 3", "9 9 8 8 5 8 1 7 7 2 9 7 1 6 1 3 8 2 5 7 8 9 8 9 5", "3 9 5 5 5 7 3 2 8 6 6 8 7 4 7 6 4 3 4 3 9 5 3 3 3", "7 6 9 5 4 2 9 3 7 7 5 9 3 9 4 9 9 4 6 1 9 4 5 3 4", "9 3 7 9 5 7 7 6 6 1 9 7 3 5 2 6 2 3 8 8 4 6 4 3 1", "5 7 1 5 6 6 7 6 2 5 1 2 5 9 9 9 4 2 7 8 8 7 1 1 9", "8 6 5 8 9 5 6 9 4 2 7 4 5 5 9 7 3 6 4 7 8 1 1 5 9", "8 7 2 1 9 3 5 1 6 4 3 4 4 2 7 1 2 4 3 9 7 8 5 7 3", "8 8 3 3 4 3 9 9 1 6 9 7 4 5 1 1 9 1 1 9 6 7 9 4 2", "6 3 1 6 3 7 9 7 5 5 4 3 3 5 1 4 8 8 9 1 9 3 6 2 5", "2 1 3 8 3 8 6 6 3 1 7 8 5 3 5 7 6 8 7 3 2 6 1 5 8", "1 8 5 5 1 5 8 7 4 7 4 3 7 5 5 7 9 1 4 7 7 1 3 3 3", "3 3 1 7 7 8 6 8 6 6 5 6 8 3 3 3 5 3 6 8 7 2 8 2 2", "4 8 5 9 1 4 7 7 8 9 8 3 8 6 5 6 9 2 8 9 4 7 2 9 6", "4 8 2 1 6 8 4 6 9 9 7 2 8 1 5 5 9 8 8 4 9 4 4 3 1", "7 9 9 7 3 2 9 3 2 9 8 1 2 3 5 4 7 1 6 2 1 3 1 2 8", "7 7 1 4 6 1 3 4 7 3 5 9 2 4 1 6 9 1 9 3 1 5 2 5 5", "4 9 7 7 4 3 7 1 3 7 5 2 7 3 2 6 1 5 5 8 3 7 1 6 6", "4 9 4 3 5 2 3 4 6 1 9 1 7 9 6 6 7 4 8 6 7 1 3 5 4", "9 4 2 8 3 8 3 8 1 2 5 8 5 3 3 2 2 1 6 7 4 9 7 3 4", "2 8 9 3 8 6 6 4 4 6 9 9 3 1 1 9 2 1 5 1 1 3 3 8 8", "8 9 2 1 3 3 3 4 8 4 9 4 3 4 7 2 8 3 8 6 4 3 8 6 1", "6 4 1 6 6 1 2 5 9 4 6 8 6 9 9 3 3 9 8 2 4 9 7 1 8", "4 1 4 8 7 4 1 3 5 8 8 8 8 3 2 6 6 8 3 6 7 9 8 1 2", "4 6 3 3 6 4 9 4 9 1 3 3 7 7 6 4 4 9 6 1 8 3 9 9 1", "5 6 4 9 1 3 1 3 4 1 8 9 1 2 3 7 1 7 4 9 6 3 8 4 4", "7 4 6 8 6 8 6 8 4 2 1 6 3 3 7 6 5 5 2 7 4 9 7 9 8", "4 3 2 9 2 9 5 9 6 8 4 1 8 6 3 9 2 3 1 9 4 8 2 5 8"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> people = {"5 6 3 6 4 9 2 1 6 2 6 8 7 7 5 3 2 6 9 9 7 1 3 6 9", "5 1 5 5 3 8 3 2 9 7 6 3 6 6 8 5 1 4 8 9 3 9 2 5 1", "7 7 8 3 2 6 8 4 8 4 8 9 1 3 4 8 1 2 6 7 9 6 4 1 1", "9 1 1 9 3 7 4 1 3 4 7 1 8 9 9 5 5 8 8 9 6 9 5 2 7", "7 7 9 9 2 2 5 4 6 2 8 1 1 5 4 7 1 6 4 2 7 2 1 5 2", "6 6 3 8 9 4 5 3 3 9 1 9 3 4 9 6 6 4 5 8 9 2 7 8 5", "1 6 2 4 1 8 2 2 8 6 3 8 7 5 4 1 4 8 1 7 1 3 3 7 3", "7 7 1 8 8 8 4 2 4 1 8 6 2 4 9 4 2 9 3 3 1 5 5 5 1", "3 5 4 4 6 1 3 2 8 1 6 8 8 8 2 4 2 7 8 7 1 8 7 4 4", "7 6 4 7 4 7 1 6 8 1 5 6 6 3 5 8 3 7 9 7 3 1 8 9 1", "8 6 7 1 5 7 7 1 6 2 6 5 9 5 7 9 8 4 5 6 7 1 3 7 9", "7 7 1 7 4 7 7 5 1 3 1 7 7 7 4 2 2 9 9 3 3 2 1 4 2", "3 3 5 9 7 7 5 6 1 1 8 2 4 6 3 4 7 8 5 2 8 7 4 2 4", "4 7 1 6 9 8 5 6 7 8 9 4 2 4 6 7 5 1 9 7 8 3 5 3 7", "9 9 7 9 2 5 4 6 5 6 4 2 6 8 6 8 1 6 4 9 7 2 8 3 8", "3 2 7 8 8 5 8 4 3 1 8 3 5 5 7 3 7 2 2 1 2 7 3 8 3", "9 6 1 1 6 5 3 3 2 5 3 6 3 2 5 2 4 1 9 7 9 1 8 3 1", "1 8 6 5 8 2 2 9 8 8 1 5 5 8 3 1 7 8 5 5 3 5 2 4 4", "8 2 4 9 2 3 1 5 2 4 2 8 6 7 9 5 2 6 4 1 4 2 9 6 8", "7 7 7 5 4 3 2 1 1 7 6 4 9 2 3 5 8 2 4 5 4 3 5 9 4", "4 4 1 4 6 5 3 7 5 2 8 6 7 2 7 6 4 2 1 8 5 3 7 2 7", "2 6 3 7 5 4 9 9 6 5 2 3 3 1 9 2 5 5 2 5 4 1 2 9 3", "9 5 3 5 8 7 1 9 2 4 5 2 9 4 2 5 8 2 8 2 7 5 6 4 3", "9 7 6 9 4 8 2 8 4 8 2 9 8 6 8 5 7 4 6 1 9 2 1 4 9", "1 2 1 4 2 2 5 2 8 6 4 2 4 3 1 5 5 7 3 6 2 7 8 4 3", "6 6 2 9 6 2 4 7 2 7 4 4 5 3 1 5 1 3 8 7 7 1 4 3 3", "7 8 4 8 2 8 6 2 8 9 7 2 3 8 9 4 9 1 2 5 5 6 3 5 9", "4 7 1 1 7 5 7 5 5 5 4 2 7 3 6 9 7 5 3 7 2 6 6 7 6", "1 9 5 4 3 6 5 6 6 3 7 3 7 1 9 4 8 7 2 5 5 5 3 4 3", "9 5 1 9 2 4 9 8 9 7 1 2 6 9 5 6 5 5 6 7 4 9 4 3 2", "3 4 9 4 1 3 7 4 7 1 5 8 1 3 5 8 6 3 4 2 5 6 8 5 2", "7 7 7 8 4 2 8 9 4 6 6 6 7 9 4 9 1 2 5 3 1 2 8 8 5", "5 2 9 8 2 8 1 6 8 2 8 2 1 1 5 3 2 6 4 1 8 1 5 7 1", "8 4 2 4 7 3 4 2 5 8 6 4 5 2 7 9 5 1 8 7 1 2 6 3 7", "2 4 9 7 8 1 8 9 6 2 4 4 2 4 5 6 3 9 1 7 4 4 8 2 7", "9 5 7 4 9 7 1 5 4 6 4 3 6 2 1 8 7 7 4 8 6 1 4 6 2", "6 7 6 7 3 6 3 6 6 9 8 2 7 7 1 5 7 3 3 9 1 4 4 5 4", "1 3 5 9 1 8 2 1 3 7 6 6 9 5 3 7 4 9 9 9 4 2 6 7 8", "3 3 9 5 3 4 9 3 9 2 5 5 5 4 6 3 1 2 4 5 2 3 7 8 8", "1 8 5 1 1 8 8 6 4 2 5 5 9 8 1 6 4 1 6 5 9 8 2 8 8", "8 5 2 6 7 4 4 7 7 3 8 3 2 9 9 9 5 8 8 5 2 2 3 3 6", "3 1 3 7 4 7 9 5 5 9 8 5 8 1 8 5 8 5 2 8 2 5 6 2 3", "9 8 6 4 9 1 9 4 8 7 1 4 8 1 5 7 3 8 8 1 9 7 2 2 6", "2 9 7 4 3 6 1 8 8 7 5 1 7 6 6 9 7 6 4 2 5 5 4 3 9", "5 7 5 8 3 7 7 6 3 6 6 9 7 5 3 5 9 5 1 9 5 5 8 2 7", "7 7 1 3 9 2 9 2 6 2 1 4 9 1 4 4 4 5 4 5 3 4 6 9 3", "5 5 5 8 3 4 7 5 4 6 1 5 1 4 2 3 1 9 1 9 3 4 9 4 2", "1 9 7 8 5 9 7 6 5 5 2 1 7 2 4 2 2 5 3 5 5 3 1 5 4", "3 9 5 1 4 5 3 9 8 9 5 7 3 8 1 2 6 9 7 8 3 4 9 4 1", "3 3 9 1 9 2 2 9 6 5 4 8 7 1 7 1 2 2 5 5 5 2 3 6 5"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> people = {"9 5 9 3 1 6 7 5 8 1 9 1 3 7 3 4 8 6 3 8 3 6 2 4 2", "1 5 4 1 6 7 5 5 5 8 3 5 5 3 3 6 9 2 2 7 9 2 6 3 6", "6 6 5 6 1 5 9 5 9 4 5 1 4 9 2 2 3 8 8 2 8 9 3 8 7", "5 2 8 5 7 9 1 8 8 7 9 8 5 4 5 1 8 3 9 7 5 3 8 5 1", "8 2 7 4 4 1 8 2 8 6 4 4 7 2 3 8 5 3 2 6 6 7 2 3 8", "7 6 9 5 3 2 2 7 5 5 2 9 3 3 9 5 9 7 3 8 3 1 2 6 9", "1 2 5 2 4 5 1 1 9 1 2 2 1 6 4 2 9 8 1 9 5 3 3 5 1", "9 2 1 5 3 5 8 6 7 6 8 8 9 2 5 3 3 8 1 2 3 5 1 1 9", "8 5 3 2 3 7 1 9 3 2 6 2 4 7 2 8 1 7 2 7 6 3 9 4 3", "1 6 1 6 5 5 1 6 9 5 7 2 8 9 3 9 6 9 7 1 9 2 1 4 4", "7 7 7 9 6 7 7 4 7 6 9 1 6 4 9 6 3 4 7 1 9 5 5 4 9", "4 9 3 9 2 8 6 6 3 5 3 2 9 7 7 3 7 6 5 7 9 6 7 2 7", "4 4 8 7 8 4 8 2 4 8 5 9 1 9 1 9 8 8 4 3 1 2 7 7 3", "6 1 2 8 8 6 7 5 9 8 4 4 4 8 2 3 5 9 2 6 9 4 2 6 5", "5 5 1 9 2 2 4 3 8 5 3 2 1 5 7 5 3 7 4 9 7 4 9 8 4", "3 3 8 7 5 6 2 3 4 5 8 4 6 7 9 9 9 3 3 6 4 9 4 9 6", "4 9 6 2 9 1 5 3 4 1 9 6 7 9 8 9 4 9 9 4 3 4 4 7 6", "8 9 5 8 1 9 2 3 4 1 2 1 3 9 9 1 4 6 4 1 5 8 6 3 1", "8 4 9 8 1 4 1 2 1 4 3 1 9 2 4 6 2 9 4 1 5 5 1 5 4", "1 7 3 6 6 3 8 9 8 7 4 1 2 7 1 8 9 2 9 3 2 2 6 5 8", "1 9 2 7 4 8 7 9 2 7 3 2 8 1 4 8 3 3 2 8 3 9 6 5 3", "4 8 1 6 1 4 2 6 9 1 9 5 2 8 9 5 5 9 2 7 3 5 9 2 1", "7 8 5 9 6 5 8 3 6 3 7 2 2 3 5 1 6 5 1 4 9 1 7 1 3", "1 1 3 5 6 7 3 3 9 1 9 6 7 7 6 9 7 9 8 9 7 3 6 6 7", "7 2 1 2 9 8 2 7 2 5 1 8 1 7 7 4 1 6 5 9 6 2 7 2 8", "9 9 1 5 6 4 2 8 4 4 9 1 3 6 2 3 8 6 6 6 6 7 3 6 8", "8 3 7 9 2 8 4 8 4 8 5 4 3 8 2 7 5 8 6 8 8 6 1 6 9", "2 2 6 4 6 8 9 4 1 1 8 6 4 3 9 5 6 4 4 8 5 4 9 9 3", "6 6 3 7 9 2 6 3 4 4 6 3 9 3 5 5 3 2 4 9 1 7 8 5 1", "8 8 5 5 5 6 1 2 1 4 7 6 5 9 8 5 6 2 4 8 2 3 1 3 7", "5 4 6 8 8 7 2 6 5 6 1 7 2 3 9 9 6 2 9 3 2 3 9 8 9", "7 5 4 8 1 8 4 8 4 7 9 2 5 2 2 5 1 8 5 8 8 9 6 7 3", "7 7 2 2 5 6 5 7 1 8 9 2 5 2 4 6 5 5 7 3 5 5 5 4 8", "1 9 5 5 4 1 6 3 8 2 2 3 8 2 3 1 3 9 8 3 3 9 7 9 4", "8 3 4 2 7 7 3 2 5 3 8 6 4 3 7 7 1 5 2 4 9 6 6 2 1", "3 2 2 8 6 2 3 5 7 7 7 8 2 7 6 5 2 4 1 7 6 9 9 2 7", "5 9 9 1 3 5 4 9 6 7 2 3 5 8 1 3 6 7 9 2 3 3 5 4 7", "8 9 9 2 8 7 1 5 4 8 4 9 1 9 3 4 5 8 7 7 2 8 7 4 2", "5 2 1 1 7 2 9 2 5 3 1 3 1 5 4 7 2 9 1 9 5 1 3 4 7", "7 4 6 9 6 2 9 5 1 2 9 1 5 2 1 1 2 4 1 3 2 6 4 6 5", "7 5 1 4 9 5 7 6 2 5 6 2 9 2 2 9 6 7 7 7 9 2 6 4 2", "5 8 5 5 9 5 4 6 7 3 9 8 2 6 6 5 9 8 4 5 1 9 2 6 9", "6 8 6 1 3 6 7 6 2 7 3 8 4 6 1 6 8 4 3 5 7 9 8 4 5", "3 6 3 1 5 2 6 5 1 8 7 4 3 1 5 3 6 8 4 3 7 8 3 3 9", "8 8 1 6 5 1 1 5 2 9 6 8 8 5 4 9 1 4 6 3 8 5 9 9 7", "2 9 6 8 7 7 5 6 6 6 4 6 1 2 1 4 4 3 5 6 3 2 7 2 5", "3 8 9 3 1 1 3 6 4 9 5 7 4 7 8 4 3 6 4 7 3 7 2 3 6", "3 7 4 4 5 3 7 3 8 8 7 5 2 6 3 2 6 3 3 9 1 3 7 2 9", "4 9 5 6 6 1 3 6 3 7 2 1 6 6 2 7 1 3 9 3 8 9 5 1 8", "2 2 5 7 9 8 7 6 7 6 1 4 5 1 5 2 7 2 3 4 5 9 1 8 2"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> people = {"3 1 5 6 4 2 6 1 8 4 4 7 9 8 2 5 8 7 5 1 2 4 1 9 3", "4 5 3 8 2 8 8 3 7 2 4 8 5 4 6 6 8 3 7 6 1 6 6 5 1", "6 5 9 3 6 6 3 4 5 4 8 8 8 1 6 4 9 1 4 2 2 6 2 7 6", "4 1 3 4 5 3 4 6 7 8 7 1 4 7 4 2 2 9 3 9 1 9 3 5 2", "1 1 6 3 5 1 7 1 1 2 6 2 1 8 2 3 4 4 8 4 7 4 4 3 2", "3 6 3 1 5 3 5 9 8 7 5 7 3 7 3 2 1 2 9 2 5 8 1 9 1", "3 2 3 8 6 1 7 8 7 9 3 2 3 1 4 8 8 1 8 6 9 6 1 8 6", "8 4 2 6 1 9 4 8 5 1 9 4 7 3 9 2 3 4 4 9 9 9 8 9 8", "8 6 9 3 7 9 7 7 3 4 8 3 1 3 6 5 8 2 7 5 7 5 1 3 4", "7 1 2 4 6 1 3 2 2 9 3 5 2 8 3 8 1 7 6 3 6 5 5 4 9", "3 8 2 5 9 2 2 4 8 7 1 1 2 4 6 1 9 9 8 2 6 3 6 9 5", "6 2 6 7 2 4 8 8 9 6 7 4 9 5 1 3 9 9 3 8 2 4 3 7 3", "8 5 6 1 4 5 3 9 6 9 4 2 4 9 5 5 6 3 2 6 1 2 6 4 2", "3 2 4 4 5 4 1 5 5 8 4 7 6 6 5 1 6 2 4 5 1 3 6 2 7", "1 4 3 2 9 5 5 4 4 9 7 7 1 9 6 5 7 8 7 9 7 3 1 5 8", "7 8 7 7 2 1 4 1 2 9 7 9 5 7 4 5 4 6 3 1 5 8 6 2 2", "7 6 8 2 9 8 2 2 7 8 6 2 4 6 5 4 9 8 3 4 4 1 6 3 4", "7 4 2 4 5 9 2 6 6 8 5 8 1 8 5 5 6 2 3 9 1 3 9 1 7", "8 3 2 1 2 1 6 7 2 2 8 1 7 7 8 9 8 6 7 8 4 7 4 5 9", "5 5 7 6 5 8 2 2 8 4 9 4 7 3 2 4 1 1 9 2 3 4 2 7 6", "4 8 2 2 7 3 5 6 7 4 8 9 7 8 8 1 7 4 7 9 5 7 8 9 9", "6 8 9 6 2 9 5 5 9 5 9 5 9 3 2 2 9 3 3 1 6 1 5 4 2", "7 3 9 7 1 3 5 1 4 1 9 6 7 6 2 9 9 7 6 8 3 2 3 3 9", "7 3 9 4 5 3 2 8 7 8 1 1 3 9 5 8 9 8 6 4 1 1 2 6 4", "4 4 5 6 9 4 9 5 9 5 4 7 4 4 5 9 4 8 1 7 2 2 7 6 9", "9 7 4 3 7 2 8 3 1 6 3 2 9 5 9 4 6 1 7 2 7 9 9 2 1", "2 5 1 6 7 6 5 6 9 5 2 3 9 3 6 9 2 2 3 9 7 9 8 3 8", "5 4 3 1 4 5 8 8 1 3 4 1 5 6 7 3 8 4 4 1 9 2 4 9 7", "9 4 4 9 4 8 8 4 7 1 5 3 4 1 1 3 9 2 8 7 5 9 4 6 5", "2 9 4 8 8 3 5 3 8 2 4 8 3 7 5 5 9 3 2 4 7 4 9 1 4", "1 3 5 6 5 1 4 7 2 7 5 6 3 6 4 6 7 1 8 3 4 2 6 8 1", "4 1 3 5 6 4 1 1 2 4 6 6 4 4 2 7 5 4 3 7 3 4 3 7 9", "7 4 2 2 6 9 9 3 5 4 8 3 2 3 6 1 9 9 6 1 3 4 9 5 9", "2 2 4 7 1 2 4 1 3 4 7 9 6 9 2 3 6 5 6 3 9 2 9 9 3", "4 3 5 6 2 5 8 8 8 4 2 4 9 8 5 1 6 5 5 2 9 4 1 9 6", "7 8 9 1 1 3 2 4 2 6 7 6 8 8 3 2 9 2 8 9 1 4 7 8 8", "5 5 2 5 5 1 4 7 9 7 1 8 4 6 1 7 1 2 4 8 5 1 2 9 3", "7 8 4 7 3 6 6 2 6 8 2 4 7 5 3 1 7 6 8 4 3 1 7 1 7", "8 4 7 8 6 7 8 5 6 1 5 3 2 3 4 4 9 5 5 4 3 2 9 4 8", "3 7 2 2 3 8 1 7 2 6 8 4 4 9 7 9 3 3 2 5 8 8 6 6 1", "8 8 4 9 4 8 4 4 7 7 7 4 3 3 6 5 8 4 7 8 4 8 8 8 5", "3 8 7 6 3 6 4 8 5 2 8 3 2 4 3 1 6 6 3 8 2 5 4 2 3", "8 3 1 3 3 6 4 2 7 2 8 1 5 5 7 7 2 8 3 2 8 2 5 4 1", "9 4 2 2 9 6 1 8 4 2 7 1 1 7 7 1 1 3 6 4 9 7 3 4 7", "7 5 6 5 6 3 2 9 3 6 7 7 9 5 5 5 6 3 4 3 2 6 8 6 2", "8 1 1 7 3 2 4 5 2 8 1 3 7 8 4 3 8 6 6 6 2 9 6 2 2", "6 4 2 7 8 6 2 9 4 7 9 5 8 8 5 3 5 2 4 9 4 9 9 1 1", "9 2 3 8 4 9 2 2 3 6 7 1 7 3 5 3 2 1 2 4 1 4 2 5 2", "1 8 5 9 6 9 3 4 9 5 7 1 8 6 9 8 7 6 6 2 4 6 9 1 6", "2 3 9 9 2 5 6 2 3 2 4 7 2 2 3 2 4 4 4 9 4 6 2 4 5"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 9};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> people = {"2 7 3 7 9 4 3 4 7 8 8 5 7 5 7 3 4 5 7 8 6 5 7 8 8", "1 2 9 2 9 4 3 8 5 2 1 8 1 8 3 4 9 3 8 2 5 8 1 7 1", "5 6 1 1 3 3 6 8 5 9 3 4 2 7 3 7 9 2 4 6 4 7 6 7 3", "9 9 2 8 3 9 9 1 9 6 4 2 6 4 4 8 1 7 3 9 8 3 1 1 6", "8 8 5 9 6 8 6 6 7 6 8 1 3 3 6 2 4 6 8 5 5 7 5 9 9", "8 2 1 9 8 5 3 8 2 6 5 7 2 9 5 4 3 8 7 2 7 3 6 7 4", "8 5 9 8 4 5 6 7 6 8 1 7 1 6 4 3 1 7 7 6 3 8 2 4 1", "5 2 1 1 3 7 4 5 3 1 4 5 2 2 6 1 3 1 6 2 8 7 4 3 7", "6 8 2 7 3 2 1 9 7 4 8 3 9 8 1 9 2 5 2 1 8 2 7 4 3", "7 9 3 7 2 7 8 6 3 2 6 6 2 8 6 9 2 1 8 7 5 3 9 9 8", "5 6 3 4 6 9 7 9 2 2 1 2 4 2 1 1 1 5 1 9 5 5 1 3 9", "4 1 6 1 2 6 6 7 1 9 1 2 7 9 6 8 1 5 3 3 2 3 2 1 3", "6 3 3 9 9 9 8 3 6 7 4 6 5 3 9 8 2 5 7 5 2 4 8 3 4", "8 7 4 2 1 9 4 6 4 7 2 5 2 2 4 8 5 4 6 6 9 6 2 5 7", "3 9 6 1 8 6 2 4 1 6 6 7 8 7 5 8 5 1 4 4 6 8 1 4 9", "9 3 9 1 7 8 6 9 8 1 4 4 8 7 1 1 5 6 9 5 9 9 1 9 8", "4 2 4 2 5 4 2 8 9 4 8 7 3 3 2 6 3 5 9 5 5 3 8 6 8", "7 7 3 3 9 1 2 6 5 1 2 2 4 7 8 9 1 1 8 3 3 5 4 1 5", "8 7 8 6 7 7 1 2 5 8 8 8 2 1 1 8 2 3 1 7 4 3 5 1 4", "5 3 8 4 7 9 4 2 4 8 6 8 6 5 6 4 1 8 6 9 6 6 9 2 6", "9 5 9 9 3 1 8 3 7 3 5 9 7 6 9 3 7 5 4 8 5 6 4 8 8", "9 4 1 2 7 3 9 2 1 9 4 5 8 6 8 4 2 8 8 9 1 6 4 1 4", "8 7 6 9 9 2 8 2 3 1 1 2 3 4 3 9 2 5 6 4 4 6 4 3 8", "3 9 8 7 8 6 5 2 6 4 7 2 6 7 8 7 4 6 5 7 2 8 1 3 9", "7 6 3 6 5 1 8 4 9 8 8 7 2 6 4 9 5 8 3 1 5 5 2 6 8", "7 5 3 7 8 9 5 6 1 3 2 6 7 5 5 2 2 5 7 7 2 9 7 8 5", "5 1 7 2 2 1 8 8 1 6 7 1 6 7 8 1 9 4 7 2 3 2 4 9 4", "8 7 4 3 4 7 2 9 2 3 9 3 7 8 5 8 9 9 1 5 5 4 6 6 6", "1 6 8 6 1 3 2 1 9 1 4 6 2 5 8 4 9 2 3 2 7 7 8 9 9", "8 7 8 6 1 4 4 6 4 9 8 9 8 7 5 4 8 6 9 9 1 4 1 1 8", "1 5 8 1 6 6 2 3 7 6 2 6 5 7 2 5 2 1 3 1 6 8 5 6 7", "9 9 2 7 5 2 2 8 8 1 1 5 2 1 9 1 4 2 1 6 5 8 2 5 8", "3 1 5 6 2 6 1 3 4 8 9 6 4 8 8 2 4 3 7 6 4 9 1 9 5", "2 6 7 6 2 4 4 7 7 2 6 1 1 4 3 5 1 5 1 9 2 2 1 3 4", "3 6 5 9 3 1 5 2 3 3 9 5 1 2 9 9 4 7 9 4 5 7 8 5 3", "8 5 3 4 8 5 5 7 8 2 5 8 2 2 2 7 4 6 8 8 4 5 6 4 2", "2 1 3 9 9 8 8 7 1 3 2 9 5 1 7 1 8 9 1 5 5 9 3 2 2", "9 2 6 3 4 7 5 2 1 8 7 3 4 1 1 4 2 9 8 2 7 6 5 9 9", "5 7 8 6 6 6 9 7 4 3 5 8 8 7 6 8 6 6 6 8 7 3 3 5 6", "6 3 1 7 6 1 7 9 7 2 6 3 2 1 6 8 9 8 1 9 3 9 9 6 7", "2 3 4 8 9 6 8 4 5 1 4 2 1 7 2 3 5 2 3 8 3 7 8 5 8", "6 1 1 2 9 7 1 5 2 3 2 5 1 7 3 1 5 3 9 7 7 1 2 3 8", "7 3 4 4 7 7 7 1 2 6 5 6 1 4 3 6 8 2 4 9 3 9 6 8 8", "9 2 8 3 7 3 3 1 6 1 9 7 9 4 9 9 1 6 9 3 9 9 4 3 7", "2 6 3 4 5 9 1 1 7 2 8 6 3 4 9 4 2 7 3 3 5 6 2 5 2", "9 7 3 6 1 3 1 5 8 1 8 7 6 9 2 7 4 8 4 7 6 8 8 5 2", "4 8 9 1 2 4 4 6 1 2 8 2 3 1 2 6 7 2 8 1 4 4 5 8 1", "4 9 2 8 1 8 7 5 9 9 3 8 6 9 4 2 5 9 4 7 3 9 2 6 1", "7 6 6 1 8 5 8 2 8 5 6 9 4 3 5 6 2 9 2 3 3 5 9 9 9", "1 4 4 8 1 7 5 6 4 8 1 8 6 4 8 1 2 3 8 8 3 8 9 2 8"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 9};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> people = {"2 2 7 6 8 9 9 4 6 9 4 2 4 3 5 6 3 3 9 4 9 9 4 5 4", "7 4 9 8 6 6 7 7 3 6 9 6 4 8 4 4 6 1 5 2 1 8 5 3 7", "5 8 1 3 5 1 3 2 4 1 4 5 7 5 1 7 6 8 2 1 7 9 3 5 2", "8 3 7 9 6 4 7 8 2 6 8 5 2 2 3 3 2 4 4 2 7 9 6 4 1", "2 3 1 2 5 7 2 2 8 2 6 7 5 5 3 1 9 2 7 3 1 7 3 4 6", "8 2 7 9 6 7 5 6 2 4 4 3 8 2 2 3 7 4 6 3 3 2 4 6 8", "8 7 9 5 8 7 6 8 7 3 9 2 5 4 2 2 1 7 5 7 5 9 3 2 6", "5 9 3 4 4 3 5 8 1 7 7 1 5 3 2 1 3 7 7 3 2 2 4 7 7", "4 4 2 7 8 9 1 1 7 3 4 5 8 7 1 1 7 4 8 6 7 8 8 8 5", "4 6 5 4 4 9 2 6 6 2 5 3 6 4 4 5 5 5 1 4 2 9 5 3 7", "2 6 7 7 5 5 5 6 4 2 7 6 6 7 1 3 3 5 1 2 8 6 1 9 5", "2 4 7 8 7 1 9 2 9 2 4 2 2 2 5 6 6 3 3 5 6 6 2 3 3", "4 6 6 8 5 3 5 2 2 3 4 5 9 4 9 6 4 9 2 2 3 6 2 2 9", "5 1 1 7 9 2 3 6 2 2 3 6 8 7 2 9 1 4 8 7 2 9 9 3 5", "6 1 7 3 4 1 3 6 4 1 1 9 7 4 6 5 4 4 3 5 2 7 6 8 3", "1 5 2 6 4 9 5 9 5 1 7 6 7 2 7 4 1 1 7 4 1 7 2 1 6", "8 5 7 8 7 9 5 1 1 5 9 1 6 6 8 8 3 4 9 6 2 7 7 9 5", "7 4 7 2 2 6 1 8 7 2 8 6 2 4 1 6 1 2 8 5 8 8 1 8 6", "3 5 2 9 8 9 3 2 4 6 8 6 1 1 7 2 5 5 2 8 3 1 8 9 1", "8 3 8 3 7 6 3 1 5 7 1 1 4 3 2 4 3 5 8 8 5 1 5 5 6", "7 5 8 2 8 7 3 6 8 9 3 3 6 7 1 7 5 4 9 5 3 9 3 3 3", "9 2 1 1 8 2 8 9 5 5 9 9 3 9 1 6 9 7 5 4 1 8 3 3 7", "9 9 9 7 4 6 1 1 2 1 1 7 7 2 2 9 8 2 4 4 5 6 2 9 7", "7 9 5 9 3 2 6 8 1 2 2 6 8 4 3 6 1 5 4 2 8 6 8 4 7", "7 2 5 2 5 6 2 3 6 6 6 1 6 5 1 9 5 2 8 4 8 1 3 7 2", "6 3 8 2 9 7 1 8 4 5 7 7 1 6 2 5 2 7 7 5 2 9 2 3 7", "9 1 8 1 4 4 3 6 3 9 3 9 2 4 7 4 4 3 5 1 7 6 8 8 9", "4 1 2 2 4 5 5 1 2 1 6 5 4 7 1 5 9 3 1 3 6 9 3 3 7", "7 8 9 5 7 6 2 6 4 4 6 7 5 1 2 3 6 5 4 6 1 9 8 8 5", "4 7 4 6 3 3 3 2 6 1 9 3 6 2 3 6 6 2 2 8 1 3 4 6 8", "3 7 7 8 4 2 5 5 3 9 5 8 7 8 7 4 3 4 1 8 3 8 2 9 4", "4 9 8 4 5 1 1 7 8 4 9 6 8 2 9 9 4 9 3 5 4 6 1 8 9", "3 6 2 4 3 9 7 5 6 2 7 5 1 7 6 1 7 6 6 1 8 4 3 2 9", "3 3 9 3 9 1 3 7 8 5 6 1 4 6 2 6 2 9 6 2 4 1 9 1 2", "5 5 1 7 8 6 7 3 4 1 3 3 5 1 6 3 2 1 9 9 7 7 2 1 2", "3 8 6 1 7 6 1 5 8 4 6 3 6 3 2 2 6 7 9 1 5 5 4 1 7", "1 6 5 6 2 2 8 2 7 9 1 3 3 8 9 1 6 3 9 5 7 3 8 3 5", "9 1 6 7 4 8 1 4 3 7 8 4 7 9 9 1 5 9 6 5 9 2 4 7 1", "8 6 9 2 8 2 5 7 7 6 3 5 2 9 8 4 3 9 8 8 6 6 9 6 1", "8 9 6 4 2 2 5 5 3 5 1 3 5 9 8 3 3 8 4 5 8 6 8 8 8", "6 2 6 5 2 4 1 1 1 9 6 5 8 6 4 1 3 7 5 4 2 5 8 6 2", "8 6 7 7 9 8 8 1 9 5 3 4 4 2 5 1 7 4 1 1 8 7 3 2 5", "3 5 7 4 6 4 5 3 4 7 3 7 6 4 1 1 7 6 5 6 8 9 8 8 2", "8 3 9 7 8 6 5 6 3 4 4 8 9 1 5 6 1 8 6 7 7 6 4 4 4", "5 5 8 3 7 9 9 5 9 2 3 8 9 1 4 9 3 3 8 7 7 5 2 5 8", "4 7 4 4 4 7 3 5 5 1 2 8 4 9 6 2 8 8 3 9 6 1 1 6 8", "1 8 6 6 4 2 4 9 5 8 8 9 8 1 6 5 8 7 9 8 8 8 3 8 4", "3 1 7 8 6 6 1 5 1 2 1 9 8 6 2 7 1 5 8 5 5 5 9 8 7", "1 6 7 3 6 1 6 8 6 8 1 5 1 8 7 7 5 3 4 7 4 9 9 6 7", "4 3 3 6 9 6 4 3 2 8 2 3 8 9 9 8 7 6 2 5 4 4 2 7 1"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> people = {"7 2 6 4 8 2 4 2 3 9 9 8 8 6 8 6 5 9 5 4 8 6 3 3 2", "3 2 8 9 6 1 8 4 5 4 6 7 7 8 7 4 1 7 3 6 2 6 8 9 3", "7 7 3 5 9 2 8 7 6 9 8 1 5 5 5 8 4 8 8 3 8 4 8 9 7", "8 9 8 8 7 7 8 7 8 7 6 5 7 8 8 8 9 9 7 3 8 1 1 2 7", "8 5 7 6 6 6 4 6 8 5 1 2 9 5 3 4 9 4 6 6 9 4 5 5 2", "3 4 9 7 6 5 5 7 1 9 4 3 6 7 3 2 5 7 4 5 9 5 5 9 8", "6 5 3 9 7 1 5 2 2 1 9 3 5 2 1 9 2 2 8 9 9 9 2 9 6", "4 1 1 1 8 5 8 1 3 9 3 5 1 7 1 8 8 7 7 5 2 4 9 5 2", "9 9 7 8 8 9 3 4 9 4 1 5 1 3 7 7 3 7 4 5 3 8 9 5 2", "1 3 2 2 8 6 5 5 4 5 6 3 5 1 2 2 8 8 3 1 7 6 8 8 9", "6 7 5 5 8 2 4 7 8 5 8 9 3 1 4 6 1 6 6 6 3 8 7 4 1", "2 7 7 1 8 9 8 9 5 7 2 5 4 2 5 8 5 7 1 8 9 9 9 5 1", "9 5 6 5 1 7 7 9 3 4 3 7 8 2 6 9 6 4 5 2 2 7 2 1 3", "6 1 3 4 6 5 1 8 9 7 9 4 2 9 2 2 1 1 2 3 5 8 7 9 2", "4 4 4 1 9 5 4 1 2 9 7 4 9 6 2 2 1 6 7 1 6 6 6 3 5", "3 6 7 9 2 7 4 1 4 9 2 9 5 8 3 4 6 9 1 7 4 1 1 1 4", "2 9 2 4 3 2 9 8 4 4 4 8 3 2 6 5 6 9 6 9 9 5 9 3 7", "1 5 8 2 6 8 9 7 5 2 9 8 6 3 3 7 2 5 3 5 3 3 6 3 8", "3 5 3 8 2 8 9 8 7 8 9 7 3 4 7 2 3 8 7 2 8 6 1 7 2", "2 2 7 2 9 6 4 1 1 9 8 5 8 7 9 1 1 5 8 5 7 1 1 4 3", "2 2 4 4 5 9 7 4 2 2 8 2 1 6 5 7 6 9 6 9 6 3 9 9 2", "5 6 2 6 5 8 1 6 9 2 1 2 4 2 8 4 3 2 5 4 1 8 7 5 6", "6 9 3 8 8 1 3 3 3 2 4 3 7 9 2 9 7 1 8 2 8 9 7 8 4", "6 4 3 4 9 4 2 9 5 8 8 6 2 8 9 4 6 6 7 7 8 7 9 7 5", "3 9 1 9 8 7 3 3 6 7 3 4 1 2 7 2 4 4 6 2 1 9 6 3 8", "3 2 8 3 6 4 6 2 1 1 8 4 3 8 4 8 5 2 1 9 4 4 2 5 1", "9 8 4 2 4 2 9 6 5 2 3 3 3 1 7 4 4 3 3 2 8 1 3 8 3", "1 4 3 4 3 6 8 4 3 3 5 4 3 9 2 9 1 5 7 5 3 7 7 2 2", "5 1 1 8 3 6 4 1 5 9 6 1 7 6 4 9 7 5 6 7 6 7 7 7 1", "6 3 9 5 8 2 7 7 7 3 8 2 8 4 6 8 2 2 8 3 4 9 3 4 3", "2 1 6 2 5 5 3 1 9 8 2 1 4 7 6 4 4 3 5 6 6 3 7 4 7", "7 9 9 3 2 6 7 8 4 7 4 9 4 8 8 9 1 4 5 7 9 1 1 4 4", "6 1 5 4 9 8 5 4 1 2 8 4 4 2 6 9 4 6 8 8 8 1 7 5 4", "2 1 4 3 9 9 5 9 8 9 9 9 6 1 1 6 1 4 7 6 2 3 3 5 7", "4 6 3 9 8 5 3 2 4 7 1 1 4 9 3 6 8 6 2 1 3 1 8 8 3", "8 5 8 6 9 5 7 9 1 7 5 6 9 1 1 6 8 4 9 7 5 7 8 5 8", "2 2 9 5 9 7 3 9 6 5 1 8 8 5 8 5 9 2 6 8 5 6 6 6 4", "1 6 4 2 9 2 1 9 8 7 6 3 6 8 4 5 6 6 5 9 2 9 9 1 8", "9 2 8 8 2 2 4 3 1 5 9 6 4 8 7 6 3 8 8 2 2 4 3 8 9", "2 5 7 3 3 7 3 1 3 1 9 3 4 6 6 3 1 9 2 6 6 9 3 4 1", "8 9 8 7 7 7 9 9 6 2 3 2 9 1 4 2 7 7 4 9 2 4 7 7 3", "1 8 2 3 4 7 5 4 6 8 2 7 1 3 9 6 2 1 1 8 1 3 5 7 8", "5 8 8 7 3 1 3 8 3 6 4 1 6 2 5 8 8 3 6 1 2 1 7 8 3", "9 5 8 6 6 3 8 1 4 2 6 5 7 8 6 3 4 4 2 1 4 1 8 3 3", "6 4 7 8 3 3 2 4 4 2 2 5 6 1 1 9 9 9 2 3 2 9 9 4 6", "6 3 2 7 9 8 3 7 6 3 4 3 9 9 2 4 4 3 7 1 9 5 3 7 8", "3 1 6 9 6 5 4 3 2 2 2 5 5 6 9 8 8 8 8 9 1 6 6 2 1", "5 4 2 4 6 6 4 4 3 1 2 2 4 8 2 9 8 6 2 4 2 4 7 5 2", "7 8 2 9 7 6 7 5 4 3 5 2 2 6 2 6 8 3 2 6 2 4 8 1 6", "1 6 9 1 7 2 8 2 6 1 6 1 4 9 5 3 7 8 9 2 3 8 4 3 1"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> people = {"8 6 8 9 5 6 6 4 1 8 6 2 8 5 1 8 6 8 2 2 7 3 6 9 7", "2 3 5 9 8 2 9 7 6 8 3 5 6 9 8 7 9 7 4 7 5 7 1 2 8", "9 5 8 1 8 2 2 4 1 7 8 4 1 5 7 1 9 6 6 8 4 7 6 4 6", "3 7 2 3 9 5 2 1 6 3 5 1 9 1 1 6 7 6 7 9 2 8 7 6 7", "1 4 8 7 1 4 7 6 1 4 5 1 8 7 2 7 6 4 7 2 5 5 7 4 6", "5 3 4 8 9 8 3 9 1 4 3 5 9 9 5 8 9 6 9 6 7 8 8 4 8", "7 5 9 4 6 3 1 5 7 1 3 5 9 5 6 6 3 1 3 7 5 1 8 9 1", "5 9 1 3 7 1 5 5 1 2 1 8 5 5 3 3 9 8 3 9 4 7 1 8 3", "8 4 9 2 2 2 6 5 6 7 2 9 8 9 3 4 5 5 2 2 1 1 2 6 9", "2 3 1 3 3 6 6 6 8 3 9 7 1 4 3 2 9 9 9 6 3 4 6 5 2", "3 6 4 3 5 5 6 2 6 8 6 1 3 3 8 9 7 8 3 3 7 5 5 4 4", "6 9 1 5 6 8 6 3 3 8 2 6 2 5 5 3 5 6 9 5 6 5 4 3 6", "1 1 8 5 3 7 7 2 4 1 9 4 1 3 7 6 6 2 5 1 8 7 1 3 3", "1 8 3 2 7 8 8 5 5 6 2 4 3 1 6 6 7 5 4 5 5 3 3 9 5", "3 9 5 8 1 6 4 3 3 7 5 2 3 7 8 8 2 5 3 1 3 9 4 3 1", "5 3 2 7 4 6 2 3 4 6 3 4 3 4 1 3 9 9 9 2 7 4 3 7 3", "5 6 3 4 6 5 8 5 4 1 2 9 3 7 3 2 6 2 4 2 1 4 1 2 8", "1 6 2 4 4 6 8 2 1 4 5 2 9 5 7 7 8 1 9 1 9 7 3 4 1", "3 6 5 8 7 9 4 9 7 2 3 7 7 9 8 6 4 6 7 6 2 2 7 1 5", "1 1 7 6 3 2 9 5 4 5 6 4 7 2 4 5 7 8 8 1 4 3 2 7 7", "4 4 9 4 9 8 3 1 3 7 9 2 1 8 1 2 6 1 2 6 1 4 2 1 6", "1 7 1 1 1 7 4 5 4 2 1 4 9 6 3 1 8 6 9 1 6 2 8 5 9", "1 8 8 2 7 7 4 1 3 1 8 3 6 1 2 2 5 8 3 3 3 1 1 1 1", "6 6 2 7 6 7 2 7 3 6 9 9 2 4 6 3 9 9 3 2 5 1 9 2 1", "9 5 5 5 5 1 6 8 3 9 7 4 6 5 1 6 2 9 1 8 1 1 9 4 8", "8 7 2 1 6 9 8 5 5 4 2 8 4 9 2 8 2 1 3 4 7 1 1 8 6", "8 8 6 6 3 2 5 2 7 1 4 5 9 1 7 2 6 6 7 2 5 9 1 7 4", "3 5 3 7 5 2 4 5 5 9 1 4 1 7 7 9 9 5 2 6 4 2 4 2 7", "8 4 6 9 8 8 8 2 6 2 3 9 4 5 8 3 1 6 3 6 6 7 1 7 9", "1 6 2 9 5 8 5 5 9 5 5 6 5 4 4 3 2 4 9 8 7 1 1 5 4", "8 2 4 1 2 5 5 9 3 7 4 5 9 6 4 7 8 6 9 9 1 8 2 9 9", "2 4 3 8 4 1 3 9 2 9 8 6 1 8 7 3 2 1 2 7 5 8 5 6 2", "4 5 7 8 3 2 7 1 7 8 7 2 4 3 8 4 5 2 3 6 1 6 2 4 8", "9 7 7 5 4 4 5 7 1 5 7 3 6 1 5 4 7 4 9 4 2 3 7 5 8", "1 8 8 6 8 5 4 9 1 7 8 2 1 5 5 8 8 4 4 3 4 6 3 8 6", "3 8 5 8 4 1 4 1 9 3 3 9 6 4 1 9 1 6 5 3 2 2 5 4 9", "4 8 2 2 2 9 9 3 9 4 6 8 6 7 4 6 9 1 9 1 7 5 9 1 4", "3 6 7 4 5 5 2 1 7 1 3 3 3 5 2 5 8 7 9 9 9 4 2 1 8", "5 7 6 4 4 5 4 2 8 3 3 7 7 6 8 1 7 9 3 6 8 1 7 9 5", "6 7 2 5 7 6 2 5 7 2 8 1 9 2 6 3 4 1 3 2 2 2 7 2 4", "3 8 3 5 7 2 8 7 5 5 8 7 7 6 1 7 3 7 7 7 6 1 7 6 9", "6 4 2 7 3 9 3 2 6 7 4 4 5 4 1 8 4 2 1 1 7 5 8 3 1", "9 6 4 1 5 5 7 1 5 5 8 6 4 2 3 2 6 3 6 1 9 4 3 8 8", "2 2 6 2 7 3 6 6 8 8 1 1 2 7 7 3 6 7 5 9 2 5 4 9 6", "9 6 1 3 7 4 5 4 1 1 3 6 2 5 4 5 1 7 6 2 8 5 7 4 1", "9 2 8 8 7 7 5 5 1 5 8 4 8 6 1 2 6 4 8 3 4 9 6 2 3", "1 9 6 8 9 2 8 7 1 3 5 9 8 7 7 4 4 5 5 8 1 3 4 4 4", "9 8 6 7 3 6 4 7 5 3 4 2 4 5 5 4 4 6 1 8 7 1 1 6 8", "5 7 8 9 5 2 5 3 6 2 4 4 2 2 7 4 8 4 8 4 2 4 8 9 3", "6 7 1 5 2 7 6 5 2 3 7 7 4 3 6 9 5 8 8 8 9 5 5 9 5"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 8};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> people = {"6 8 3 4 2 8 3 7 6 4 8 5 6 5 9 1 4 4 8 3 5 3 1 7 5", "1 5 6 8 1 5 2 2 7 6 3 8 9 8 3 6 7 4 9 9 7 8 7 9 2", "8 6 6 2 2 9 8 9 5 6 9 2 7 6 6 8 9 7 3 9 1 3 3 5 2", "1 4 9 2 5 2 2 8 2 1 1 2 6 8 3 7 9 8 9 6 6 7 4 8 1", "5 3 7 6 9 1 4 6 6 4 4 5 9 3 6 6 1 2 5 6 2 4 5 3 3", "8 2 5 5 3 8 3 6 8 8 5 8 1 8 9 1 5 2 3 8 3 1 4 9 1", "1 6 6 5 4 9 1 4 6 9 7 8 8 2 4 4 2 5 6 1 1 1 8 6 7", "5 1 2 4 4 1 8 6 3 7 5 6 9 3 6 1 4 3 5 4 8 5 4 8 2", "7 7 2 7 3 8 1 9 7 4 4 6 2 2 2 8 6 5 1 6 3 7 3 7 4", "5 1 2 9 6 2 9 4 4 8 3 1 9 4 5 7 4 8 3 1 4 7 1 3 1", "9 5 7 9 7 3 8 1 6 6 1 7 1 2 6 5 2 6 3 7 5 3 3 1 1", "5 3 8 6 7 7 4 2 8 6 2 7 4 2 7 6 1 3 8 1 2 8 5 3 9", "8 5 2 3 1 9 1 9 4 3 6 5 8 7 1 1 8 2 3 5 6 2 8 5 3", "8 8 7 8 5 2 3 7 3 9 6 5 5 7 4 4 3 7 4 1 5 7 6 3 1", "6 9 8 4 7 2 6 4 5 4 4 2 9 2 6 8 7 5 5 4 1 5 1 5 4", "9 8 1 8 3 9 1 6 6 5 8 5 4 5 9 6 1 9 6 7 7 1 9 5 8", "9 5 3 5 1 8 8 1 5 4 8 1 4 2 5 2 1 1 2 4 7 9 2 4 7", "3 5 8 7 9 2 8 2 6 5 5 8 5 7 6 5 9 6 7 4 5 3 3 2 2", "2 1 6 6 6 8 7 1 3 1 7 5 8 2 1 9 8 3 1 9 4 8 6 3 3", "3 6 8 5 5 3 6 7 9 8 4 7 8 7 9 3 3 8 8 2 9 5 4 6 1", "3 3 4 8 8 3 7 2 4 6 2 6 8 2 1 4 4 3 2 9 4 5 9 4 7", "3 1 5 5 3 7 9 7 6 3 1 2 4 9 4 4 9 6 4 6 2 6 6 6 3", "8 9 1 6 5 4 8 8 5 6 2 5 1 7 5 6 5 2 4 1 2 3 7 8 3", "1 7 6 9 9 5 7 5 4 3 2 4 9 5 5 1 2 7 9 6 9 6 1 8 8", "3 7 2 1 9 8 2 8 3 2 9 9 4 6 4 2 6 2 4 8 8 9 9 6 5", "1 6 5 9 7 6 6 2 6 7 3 7 9 5 1 9 4 7 9 4 1 7 9 5 1", "6 5 8 4 9 1 6 1 8 6 2 8 7 7 9 3 3 6 8 5 3 8 9 1 4", "6 5 1 6 3 2 4 8 1 5 1 1 8 9 3 9 3 3 3 3 3 9 2 3 1", "4 8 5 7 8 5 8 2 7 6 3 2 9 4 5 4 1 4 2 9 4 9 1 4 6", "2 4 1 8 1 2 2 1 4 5 3 8 8 3 3 8 3 3 4 5 8 2 9 4 7", "8 3 8 4 2 1 8 2 1 3 8 6 1 4 1 1 3 6 6 9 1 7 7 1 3", "5 8 3 9 9 8 5 6 1 5 6 8 8 6 3 3 5 4 2 5 5 6 8 7 8", "1 7 9 1 5 3 5 3 7 3 8 5 3 3 6 3 3 9 1 2 7 5 9 1 9", "7 3 8 7 4 3 4 5 7 1 8 1 3 5 6 8 5 4 1 6 2 6 2 1 3", "7 9 3 4 2 1 1 4 9 3 6 6 2 3 2 2 2 8 1 9 1 7 5 1 5", "4 9 6 8 1 2 6 6 8 7 3 6 2 6 9 5 5 6 3 7 4 2 1 1 9", "7 7 9 6 4 3 6 6 8 5 3 1 1 9 8 4 9 8 4 6 4 2 6 9 3", "3 9 3 8 3 9 9 5 4 8 6 6 7 4 8 7 1 9 4 2 7 8 6 3 4", "8 2 8 6 3 6 6 2 8 5 6 4 2 5 1 1 3 3 8 9 7 1 7 3 6", "9 8 8 6 5 3 7 1 5 2 5 3 6 6 2 7 4 8 4 5 7 9 1 1 5", "7 4 5 4 9 9 7 1 5 4 5 4 6 4 3 6 7 9 9 9 3 5 4 9 3", "2 8 6 6 5 3 5 2 1 7 9 4 6 8 2 2 9 9 7 3 4 5 3 3 7", "4 7 8 3 7 5 8 3 1 1 7 2 5 4 4 8 1 1 9 4 6 4 2 4 8", "1 9 6 6 4 3 2 2 6 3 8 7 6 2 1 1 1 1 8 3 3 5 5 4 8", "6 6 9 6 4 8 5 6 9 3 5 9 4 4 9 1 9 4 6 3 9 3 2 8 6", "7 7 2 4 4 5 1 1 7 4 7 7 6 7 2 8 6 9 5 1 2 4 2 8 6", "9 9 4 3 4 6 3 1 6 7 3 6 8 7 6 9 8 2 1 7 6 3 7 1 5", "6 3 3 1 7 7 2 8 5 7 3 1 5 2 5 5 7 1 6 2 3 9 6 5 2", "2 7 1 2 7 4 7 7 9 2 7 4 3 6 4 9 4 9 9 7 5 9 2 9 7", "7 8 2 7 7 1 4 1 4 3 9 8 2 1 9 8 2 8 7 6 2 8 4 7 6"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> people = {"2 7 2 8 2 3 4 2 9 9 8 6 4 7 8 5 4 2 2 1 6 7 8 8 6", "9 7 6 2 4 8 7 6 8 7 7 5 3 1 9 8 4 5 5 4 9 9 4 7 5", "4 8 7 9 3 5 2 9 3 9 7 8 7 1 9 5 6 4 6 9 6 8 6 9 9", "3 9 2 8 2 3 6 9 7 1 2 6 4 6 7 5 4 6 6 4 5 4 1 6 3", "7 2 5 4 5 6 2 7 5 3 9 8 4 8 2 1 8 2 1 4 7 5 6 5 7", "5 9 4 4 3 2 2 7 4 4 6 6 5 6 3 6 7 4 6 8 3 4 6 3 6", "9 8 3 4 3 1 5 7 1 6 9 7 6 9 9 5 9 1 1 3 4 5 6 1 7", "9 6 7 3 3 4 5 3 9 2 3 1 3 6 6 1 7 6 2 3 3 6 2 9 7", "1 6 6 3 7 8 9 3 1 6 2 6 9 6 8 4 1 8 9 1 8 5 7 6 4", "9 5 1 9 1 2 1 9 7 3 2 8 5 1 4 2 1 6 9 7 3 6 2 6 6", "2 5 8 3 4 8 5 3 8 8 2 4 4 5 3 5 4 1 5 6 5 8 4 2 6", "9 9 7 7 4 6 9 7 8 3 5 3 8 1 9 6 3 5 2 7 2 3 6 2 3", "2 3 8 8 3 5 5 5 3 4 5 7 9 6 5 4 7 5 9 3 4 7 1 7 9", "1 1 7 7 7 6 7 2 8 2 9 8 3 5 8 3 5 7 2 1 9 1 2 1 2", "5 8 4 7 9 1 9 2 8 6 6 6 9 2 1 9 7 6 7 8 5 8 4 6 9", "4 6 9 3 3 1 6 6 5 3 8 8 9 6 1 8 3 9 7 8 2 1 6 7 5", "1 7 1 7 7 6 2 3 8 1 1 4 9 8 4 6 3 5 4 9 5 2 1 3 7", "6 7 2 5 1 7 2 9 9 1 1 3 8 5 7 7 9 4 5 1 6 1 3 3 7", "4 5 3 1 5 6 6 3 6 1 8 9 9 4 3 1 7 1 5 9 6 6 8 8 7", "7 8 4 4 8 8 7 8 7 8 3 2 5 6 7 6 4 3 5 5 7 4 8 4 9", "4 9 1 5 5 8 5 4 8 4 2 7 5 8 9 4 7 4 5 2 6 3 1 6 4", "1 9 8 7 3 6 4 6 4 5 3 7 8 2 3 8 8 8 7 9 7 1 4 1 2", "1 4 9 3 2 3 5 2 4 6 7 5 2 5 6 2 3 1 5 4 1 8 4 7 2", "3 8 6 5 7 7 9 1 3 4 1 7 9 2 3 1 2 6 8 5 7 6 1 8 5", "8 2 8 1 4 2 1 1 9 9 1 6 2 8 8 6 3 1 9 1 7 1 1 6 4", "2 6 4 8 7 8 5 6 2 8 4 6 4 3 6 6 6 9 6 3 7 8 3 9 2", "3 1 4 4 7 1 8 2 8 3 6 2 1 1 4 3 5 8 8 2 7 2 9 4 3", "1 5 9 6 7 2 7 3 2 2 6 5 4 6 3 7 5 7 3 8 2 7 8 5 2", "4 1 1 1 5 8 2 5 8 4 3 1 4 3 3 6 5 8 1 3 9 4 2 3 1", "4 9 8 8 5 1 8 6 8 2 2 1 8 9 1 3 2 6 5 7 7 1 9 1 4", "5 7 8 5 6 7 7 5 9 2 9 4 9 2 3 7 1 1 3 3 7 8 8 2 1", "2 2 8 2 2 3 2 9 1 6 1 9 5 9 5 1 1 1 9 5 6 3 7 5 7", "5 4 7 2 2 5 3 2 6 7 7 2 8 3 6 1 8 5 9 9 5 7 7 3 5", "4 4 1 5 7 9 6 7 2 8 4 6 6 6 5 5 2 6 2 3 4 4 8 7 7", "7 9 7 6 1 7 9 9 8 3 5 1 4 4 9 6 2 6 2 6 5 2 9 7 6", "3 8 3 8 7 1 8 9 2 8 9 8 8 6 5 9 4 2 2 5 3 2 2 5 1", "9 1 7 5 2 5 1 2 7 4 9 5 9 8 4 1 6 1 7 9 3 4 4 6 3", "7 5 3 2 3 8 1 8 6 3 9 4 1 3 6 8 9 8 4 3 5 8 5 7 3", "6 9 4 1 6 5 1 9 2 2 4 3 3 2 2 3 4 2 5 2 4 3 5 1 7", "3 7 3 3 6 1 7 7 2 4 5 3 9 3 8 7 3 8 5 9 6 2 3 6 9", "9 8 7 9 2 2 7 4 1 6 9 5 7 5 7 5 1 8 6 5 9 1 5 6 4", "6 4 1 8 9 8 4 8 2 9 2 8 9 7 1 7 3 6 8 8 7 5 7 1 9", "4 2 3 6 6 4 8 6 2 1 2 1 2 2 7 4 6 1 1 2 9 8 1 3 5", "4 9 4 4 9 5 1 9 4 1 7 8 1 3 9 5 6 4 9 9 3 6 7 4 8", "6 8 4 7 9 6 2 4 2 7 4 3 1 1 7 9 2 5 2 1 1 5 5 6 6", "2 2 8 6 7 8 3 9 7 5 6 3 1 3 1 6 7 6 8 4 5 4 4 4 4", "5 8 7 3 7 1 9 3 5 9 9 1 8 1 2 2 6 9 3 1 7 5 6 8 6", "8 5 5 2 3 6 2 1 8 9 5 8 4 1 2 8 9 4 3 4 1 9 9 7 3", "3 8 1 5 4 1 4 2 4 5 6 2 6 6 9 7 2 2 5 1 3 6 4 1 7", "6 6 2 8 5 9 1 4 4 9 8 5 4 7 4 7 8 8 5 5 4 7 2 5 4"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 9};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> people = {"509 884 87 681 31 991 373 395 255 450", "411 720 187 289 860 513 290 461 743 12", "346 771 295 784 102 929 55 945 616 457", "671 351 813 150 110 163 805 489 16 30", "944 652 6 173 413 804 586 800 387 901", "190 607 471 578 560 627 135 594 334 290", "365 894 228 381 572 628 648 514 108 332", "911 865 385 60 523 145 705 461 100 234", "370 669 608 473 554 413 557 313 719 916", "674 949 56 15 357 589 560 419 902 191", "855 177 120 904 818 246 425 916 389 495", "915 100 685 632 276 689 676 283 570 151", "263 933 71 630 507 474 392 550 172 910", "56 482 479 118 515 958 171 672 393 667", "540 416 380 408 106 861 764 250 968 511", "78 555 721 904 698 936 969 483 546 763", "143 432 199 496 307 257 854 43 84 174", "560 279 661 390 71 105 71 924 469 690", "606 931 450 54 240 417 770 790 431 818", "917 487 513 174 487 404 178 518 106 24", "191 675 994 387 618 869 426 533 276 420", "414 937 61 327 899 573 70 729 640 112", "184 77 754 823 844 340 568 924 316 718", "27 512 644 166 426 679 829 470 634 134", "515 763 288 436 591 125 679 947 711 368", "163 748 630 181 971 46 683 564 249 65", "454 881 984 10 893 927 236 451 695 108", "771 412 767 222 744 506 997 340 540 694", "322 984 299 644 339 130 904 190 280 569", "415 113 206 807 32 306 718 1000 678 406", "282 370 191 139 544 202 941 958 609 763", "423 34 369 444 972 273 361 9 332 878", "553 79 195 870 685 891 236 121 499 915", "370 708 264 151 159 811 476 786 337 961", "543 407 411 161 533 182 172 314 785 242", "731 409 306 982 386 147 380 186 249 2", "755 660 17 281 98 532 744 362 154 518", "734 151 193 196 933 764 862 798 316 576", "547 96 793 88 689 736 121 499 275 725", "137 470 912 907 398 364 464 905 951 114", "221 437 572 1000 975 913 212 794 170 905", "853 177 493 439 187 810 923 34 783 217", "224 86 454 415 339 489 594 310 949 362", "115 993 711 369 472 426 334 386 962 490", "698 232 117 969 685 741 571 892 256 716", "181 565 569 208 565 740 622 114 473 640", "982 317 532 979 644 457 34 664 980 933", "344 644 10 966 441 216 962 330 854 158", "185 928 962 272 15 463 224 256 94 349", "418 343 15 390 353 821 861 951 873 371"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {313, 961};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> people = {"392 57 161 125 152 355 506 520 750 900", "711 270 921 532 286 269 751 969 398 833", "613 837 311 428 962 535 717 993 121 242", "921 998 564 384 313 649 52 559 951 1000", "122 262 342 313 104 770 742 680 824 159", "343 788 590 775 763 728 882 420 141 898", "435 151 965 401 1000 859 493 797 174 740", "229 713 106 348 490 627 767 174 516 59", "758 598 927 536 268 634 596 947 912 60", "157 331 663 461 447 707 962 184 139 290", "422 421 713 338 244 473 699 889 556 726", "813 881 428 52 209 482 250 133 573 968", "454 691 200 187 353 707 501 424 967 515", "635 505 292 77 55 97 407 832 829 446", "191 273 522 282 181 802 259 168 276 467", "382 398 607 907 745 413 829 210 252 810", "537 404 759 250 276 987 786 936 845 257", "819 903 188 182 139 45 209 216 238 671", "256 774 867 377 855 32 697 223 536 363", "359 485 190 987 385 778 517 332 180 948", "506 225 696 946 817 255 934 843 172 562", "722 242 540 865 507 623 998 757 25 553", "626 169 806 297 694 432 433 66 711 544", "355 54 590 110 844 437 324 892 368 726", "66 78 275 210 455 192 149 738 339 16", "652 770 804 25 950 434 557 625 69 329", "258 903 635 925 362 689 511 736 396 497", "766 861 352 287 276 120 79 76 991 759", "117 116 593 627 417 758 814 788 781 120", "154 791 668 388 148 163 207 895 574 293", "872 143 234 522 319 569 995 132 268 179", "810 958 194 120 342 474 792 914 628 573", "853 325 947 709 216 774 691 723 944 824", "553 474 717 482 827 326 716 974 916 666", "938 226 448 895 984 471 509 716 830 293", "625 185 997 949 52 642 840 982 832 597", "383 991 871 649 230 905 967 726 615 288", "314 300 591 982 538 721 647 878 708 521", "847 731 88 319 667 688 620 970 300 676", "266 733 138 830 370 521 513 957 118 751", "540 358 78 908 93 473 490 727 513 443", "698 775 662 142 638 332 298 177 798 665", "577 111 426 215 680 455 68 713 189 992", "697 990 835 652 789 67 704 460 720 150", "774 41 764 294 941 802 783 856 300 173", "433 314 529 237 332 693 654 659 179 599", "364 89 249 835 288 77 45 690 356 163", "133 219 417 949 360 280 785 884 707 666", "305 3 16 386 792 38 705 55 434 175", "371 384 845 212 862 971 1000 53 32 932"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {326, 938};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> people = {"180 238 853 461 405 728 997 28 572 244", "319 791 667 254 886 754 938 142 319 353", "933 174 278 445 605 621 837 113 513 821", "356 329 285 992 205 252 116 352 375 888", "51 460 545 880 206 717 681 467 871 661", "607 986 664 26 267 904 500 532 611 997", "177 18 111 196 787 866 948 617 26 587", "780 466 677 115 871 816 207 578 37 767", "486 292 522 120 49 303 448 470 234 29", "917 617 772 491 210 272 86 152 751 286", "644 622 710 92 204 335 137 577 666 860", "536 365 572 667 638 371 979 30 934 515", "574 225 214 717 385 363 957 615 395 973", "934 988 693 949 774 517 529 574 583 355", "789 118 909 955 962 952 510 725 622 197", "361 413 817 675 345 529 526 354 872 751", "520 498 439 12 551 491 823 879 778 650", "140 920 734 379 487 989 938 693 279 721", "483 507 642 118 505 34 466 761 503 347", "770 64 884 425 69 3 930 985 338 909", "652 34 976 231 615 334 898 695 888 917", "528 872 717 386 987 1000 391 969 208 839", "46 203 81 443 811 696 965 15 814 607", "71 386 11 381 290 300 744 782 18 350", "202 478 391 348 683 235 161 927 657 322", "96 393 174 832 428 183 50 479 342 811", "642 860 930 849 722 321 356 311 130 323", "174 799 432 659 906 897 757 936 999 597", "377 520 225 999 323 508 454 122 554 384", "464 420 742 694 117 553 746 492 813 980", "227 298 591 225 690 19 625 25 391 606", "168 123 231 233 169 169 712 438 892 42", "509 943 882 933 18 894 517 678 477 828", "217 172 928 983 94 171 306 491 466 423", "424 602 180 866 478 293 158 584 971 576", "894 314 615 327 910 558 881 705 334 785", "338 95 826 762 815 29 58 809 729 732", "823 642 636 778 653 516 165 847 494 593", "9 697 608 792 607 327 362 921 436 714", "980 526 618 675 650 752 654 160 605 461", "679 719 923 20 567 988 828 427 595 770", "218 943 138 706 997 960 42 572 528 617", "919 979 213 602 564 605 744 634 145 109", "61 371 555 602 429 860 567 839 325 197", "43 332 33 774 441 212 920 325 322 4", "409 13 374 411 523 969 721 860 749 6", "916 813 649 723 81 798 299 855 111 701", "164 506 723 101 468 857 403 344 455 66", "973 605 196 300 596 400 770 300 524 894", "689 433 770 857 445 912 216 344 892 768"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {355, 976};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> people = {"357 956 19 194 2 108 303 82 774 814", "473 927 173 364 5 791 310 698 73 687", "139 419 15 565 186 165 572 67 306 492", "323 354 958 509 737 598 866 260 231 198", "694 241 465 363 535 509 853 478 608 549", "948 604 552 450 895 498 62 940 657 820", "483 558 73 541 116 535 100 131 636 997", "785 803 68 714 617 935 127 971 897 833", "634 66 694 115 910 581 764 391 711 860", "527 324 324 24 841 855 897 494 832 120", "936 206 498 581 184 610 134 959 757 117", "906 854 515 863 30 328 117 532 113 327", "116 521 160 527 751 883 654 95 789 377", "871 883 906 382 329 795 588 664 817 396", "501 718 2 374 550 936 986 106 665 925", "534 432 417 122 885 693 184 240 220 265", "511 214 873 68 666 36 329 22 204 281", "887 1 475 173 634 609 643 790 39 27", "735 328 17 233 663 419 833 167 947 158", "538 743 71 831 981 231 40 362 561 147", "707 109 59 718 873 985 814 961 986 822", "498 584 530 535 490 280 812 908 636 402", "920 759 754 716 79 852 832 673 511 141", "268 596 146 855 870 326 236 482 597 67", "995 947 146 655 871 108 615 2 971 269", "379 226 439 571 264 851 304 956 827 519", "446 909 290 833 813 348 253 332 987 793", "810 106 495 483 127 200 35 157 830 827", "900 64 798 363 456 131 74 224 486 379", "635 57 556 364 739 91 370 864 361 121", "205 71 39 346 155 275 80 224 848 382", "646 545 753 671 733 206 938 825 404 496", "392 672 964 313 615 26 912 368 215 686", "643 345 657 965 855 948 168 79 531 986", "22 356 191 921 80 484 824 831 519 995", "548 340 128 704 567 890 424 153 461 664", "110 926 170 576 73 344 298 17 194 193", "529 455 750 59 998 560 71 351 467 276", "407 284 976 119 699 919 509 51 27 897", "816 468 49 591 210 195 676 274 610 904", "535 331 532 17 546 669 58 21 55 267", "7 55 536 233 694 811 818 838 678 47", "179 721 849 499 382 900 52 543 961 237", "210 758 578 759 548 438 333 596 105 183", "246 317 195 932 967 136 848 186 964 814", "549 706 58 53 795 699 186 853 82 312", "720 608 936 328 473 671 521 64 787 767", "166 855 740 868 884 939 546 129 582 233", "694 41 193 262 234 202 421 464 888 46", "108 193 327 376 515 13 72 823 968 288"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {329, 956};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> people = {"926 163 355 647 762 12 982 649 802 548", "143 838 199 804 545 439 885 519 446 140", "135 738 935 769 257 121 304 166 112 406", "868 249 952 606 911 76 165 258 649 695", "106 521 240 710 121 986 913 785 259 805", "208 762 921 174 193 666 873 233 264 645", "649 183 799 799 341 793 500 938 174 474", "749 541 67 821 647 555 601 823 741 254", "395 975 582 38 953 144 406 942 449 390", "198 614 743 866 325 703 184 585 752 918", "384 81 550 502 194 961 63 508 602 911", "623 39 84 969 153 594 278 808 324 736", "451 280 225 596 393 745 636 103 778 541", "60 453 9 492 676 15 793 547 215 805", "456 454 567 657 89 912 632 460 149 758", "493 163 64 574 521 772 720 568 433 222", "466 704 620 850 378 809 304 160 121 870", "217 713 682 776 503 278 607 526 526 810", "156 339 83 460 969 149 290 538 406 674", "68 324 730 638 728 649 680 759 616 428", "792 764 176 704 43 75 49 311 989 788", "54 954 591 213 964 380 376 566 4 302", "372 367 930 923 530 716 322 237 965 896", "499 746 429 694 47 885 855 422 525 237", "700 848 322 571 69 179 27 840 296 786", "880 537 718 553 82 237 893 652 777 711", "387 32 493 744 567 115 742 672 547 24", "212 692 542 182 737 204 409 241 764 812", "76 152 611 83 905 614 153 900 759 289", "949 993 704 939 997 275 805 61 482 718", "469 723 868 797 115 11 675 998 747 923", "90 473 171 606 351 700 189 540 471 919", "67 637 468 196 24 285 713 189 214 1", "409 88 956 753 488 745 532 954 406 686", "910 835 420 600 177 168 943 868 308 311", "451 882 99 157 282 237 802 830 348 349", "984 935 440 691 633 744 320 633 390 947", "256 833 42 497 993 214 107 653 403 840", "415 523 238 413 67 298 454 699 88 867", "568 907 333 740 371 948 977 980 122 542", "980 399 32 322 472 400 448 474 920 652", "649 942 262 271 586 886 959 280 199 950", "20 915 192 818 655 775 238 729 124 899", "683 875 757 603 687 94 840 324 648 827", "298 751 483 125 638 277 3 377 626 137", "187 504 580 660 645 618 928 723 919 520", "934 851 578 937 53 402 239 140 462 910", "758 399 678 6 826 772 47 270 137 877", "124 997 79 634 579 148 661 437 366 692", "995 857 292 104 185 766 45 94 942 733"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {320, 950};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> people = {"962 472 565 644 525 666 194 740 650 618", "412 745 303 620 326 240 916 231 230 274", "320 566 851 999 678 95 945 220 970 598", "705 928 134 67 61 236 866 148 433 672", "443 205 916 420 654 184 209 961 67 251", "796 517 435 600 39 856 967 937 878 310", "591 862 757 290 73 814 259 219 63 259", "698 540 698 563 540 379 390 324 139 540", "834 991 713 713 49 272 877 167 495 175", "343 779 910 526 571 891 539 457 277 399", "845 670 689 452 641 251 364 341 795 413", "193 438 343 864 941 587 850 378 313 923", "365 789 52 939 140 831 31 548 587 185", "655 989 586 642 125 704 392 484 297 730", "813 101 914 698 293 353 998 317 779 385", "26 46 8 452 331 751 915 783 849 308", "431 701 937 507 831 994 485 79 147 15", "962 379 886 102 353 58 448 707 159 48", "182 25 785 319 994 28 636 160 758 562", "238 193 573 536 493 922 75 335 979 400", "612 263 836 491 48 227 362 319 388 883", "907 668 211 146 53 556 87 336 312 678", "798 184 827 185 171 618 594 47 795 528", "789 330 690 694 637 846 262 676 140 956", "505 735 633 827 483 812 846 34 561 147", "608 217 733 413 831 469 662 91 739 184", "722 423 543 430 413 451 961 256 16 565", "25 983 251 461 587 206 980 648 841 168", "753 445 938 170 49 919 472 916 636 379", "227 23 376 822 50 451 127 233 169 279", "161 722 539 68 632 292 75 39 202 443", "727 439 878 926 397 746 483 693 647 831", "955 505 986 785 839 710 284 894 929 424", "528 172 999 715 681 896 958 435 913 882", "570 994 814 567 84 758 519 553 742 704", "844 936 126 660 645 617 785 725 609 809", "349 476 594 101 631 145 473 785 841 268", "127 635 82 210 893 942 767 584 294 429", "464 816 315 608 924 17 863 241 761 880", "265 846 284 536 855 599 540 176 752 549", "438 779 901 814 214 455 338 300 124 776", "427 529 439 942 493 376 265 802 899 844", "710 541 99 555 187 328 614 273 437 326", "214 612 952 259 777 67 73 150 463 647", "969 940 854 654 72 461 661 652 325 609", "442 229 754 647 544 944 496 279 129 764", "351 498 708 372 375 247 107 949 802 621", "129 438 786 673 503 834 100 877 872 724", "914 967 682 207 222 185 855 273 322 906", "1000 953 967 273 783 819 491 718 754 938"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {397, 956};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> people = {"234 198 602 6 46 566 307 166 556 727", "115 997 97 160 641 244 924 915 586 113", "381 438 809 420 220 440 475 393 118 529", "38 712 791 562 659 232 761 457 464 890", "986 750 740 479 70 293 740 355 684 340", "322 642 184 701 2 152 135 785 360 104", "605 112 942 661 642 346 940 480 293 943", "957 729 916 289 118 519 276 606 633 253", "117 933 664 199 464 247 35 499 916 126", "840 892 583 412 557 667 104 982 563 765", "420 124 309 466 566 959 570 803 781 49", "275 740 656 611 457 88 866 730 752 387", "292 601 692 244 960 83 786 115 297 800", "970 190 639 618 598 780 816 553 526 586", "895 92 251 354 831 454 272 624 880 543", "32 771 99 202 859 57 166 930 289 171", "44 377 43 613 727 812 722 329 423 209", "953 186 44 795 352 268 799 684 138 442", "25 692 671 344 129 562 496 753 653 599", "691 299 28 134 456 580 554 363 910 82", "487 815 18 719 893 129 397 431 119 887", "523 43 284 928 520 497 219 991 261 643", "641 523 26 32 194 188 279 498 139 961", "484 904 164 674 8 93 716 536 309 964", "784 483 568 599 790 126 875 526 587 763", "864 540 116 112 439 993 400 447 841 66", "961 327 873 387 634 414 502 244 21 754", "443 808 496 455 564 2 757 919 114 89", "429 650 856 626 74 196 136 164 325 961", "830 947 516 470 875 932 318 149 785 627", "419 877 157 619 197 320 685 169 669 570", "584 915 756 710 676 562 21 716 585 409", "619 520 653 698 133 193 170 86 341 891", "521 954 748 681 641 911 846 353 973 591", "711 109 739 763 488 325 941 858 722 669", "967 242 307 502 42 945 25 847 83 120", "251 210 670 182 445 182 990 454 446 60", "565 137 455 710 525 628 791 481 996 483", "191 299 872 850 442 972 910 811 606 336", "594 867 982 146 659 758 167 461 530 917", "327 902 175 103 794 320 26 199 669 310", "704 729 946 540 254 362 8 31 456 594", "47 373 606 802 69 368 797 101 665 727", "392 769 668 270 828 517 129 542 340 569", "809 874 489 328 500 706 629 368 76 414", "526 689 85 980 452 374 119 589 948 346", "903 637 339 417 280 706 840 688 800 761", "726 193 664 201 634 814 113 436 525 694", "203 340 213 768 84 251 663 594 521 224", "448 330 433 860 840 607 631 380 48 10"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {353, 960};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> people = {"772 528 989 92 801 570 821 140 784 887", "184 417 91 610 719 210 345 351 976 861", "415 302 274 836 16 900 395 67 130 809", "294 12 571 185 115 316 488 52 926 539", "502 173 510 139 484 953 458 771 665 771", "600 51 909 628 463 76 493 155 113 404", "647 836 154 661 467 749 162 649 536 288", "65 640 744 60 268 508 326 628 416 515", "144 835 725 846 540 192 783 437 910 245", "531 248 298 849 923 911 908 41 396 568", "391 532 884 831 215 908 540 985 161 273", "752 989 251 455 290 321 995 834 646 464", "885 569 697 649 472 259 841 511 206 65", "680 453 471 937 109 875 854 863 420 870", "789 1 659 653 125 135 991 773 73 150", "286 103 238 129 488 720 105 217 581 48", "472 636 111 39 760 84 332 775 76 300", "964 566 169 749 471 552 142 224 547 805", "904 657 169 189 853 596 192 537 215 598", "974 258 798 267 906 132 649 777 63 883", "270 514 393 105 571 879 13 246 722 426", "210 662 411 203 669 187 808 625 326 279", "675 212 995 569 694 288 543 560 25 75", "18 272 545 664 543 914 979 24 217 985", "385 548 530 810 32 628 980 179 746 426", "718 628 246 290 993 911 772 237 146 384", "614 576 665 344 729 964 563 840 746 189", "971 137 69 511 364 770 677 674 294 103", "492 580 826 413 848 197 171 761 681 482", "124 359 569 957 20 696 616 126 867 417", "497 96 226 866 678 603 145 204 952 150", "210 245 932 103 320 503 97 413 322 447", "288 104 59 636 313 760 685 236 462 54", "334 389 282 787 357 56 904 981 388 245", "620 338 411 976 129 769 900 958 79 754", "803 703 119 28 842 724 629 424 151 546", "732 782 756 477 977 470 767 487 276 429", "457 79 321 657 577 741 698 674 377 419", "377 845 774 466 38 398 61 697 1 575", "333 496 97 672 542 405 943 618 741 266", "477 364 576 782 531 575 559 301 430 54", "994 757 350 845 674 930 185 214 643 652", "206 562 370 108 684 852 666 164 923 320", "556 501 899 86 93 399 785 768 794 219", "160 354 4 966 666 419 956 848 157 207", "735 416 152 242 665 671 567 910 865 539", "199 873 836 227 455 288 990 280 138 530", "975 601 890 540 496 311 74 963 67 83", "446 969 845 507 972 15 182 105 521 837", "96 874 995 640 158 586 638 808 649 662"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {276, 964};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> people = {"885 441 974 85 165 675 464 722 434 77", "679 410 124 334 231 339 361 112 989 577", "14 218 227 95 131 140 909 249 828 635", "862 500 523 268 2 79 689 728 142 439", "999 289 171 569 772 9 537 680 171 131", "51 360 456 675 995 981 921 403 392 98", "858 162 96 554 967 135 37 255 202 648", "570 911 938 30 359 562 673 453 679 364", "251 823 274 954 696 561 203 685 335 565", "185 148 816 695 4 717 19 928 490 279", "601 675 423 936 119 853 482 213 239 5", "988 242 533 126 799 446 770 900 169 501", "395 717 743 728 110 203 188 605 81 962", "119 812 308 914 90 60 133 913 428 962", "699 266 591 397 380 455 549 124 896 578", "429 889 832 6 258 904 775 327 213 380", "123 884 206 739 898 148 991 223 576 684", "218 920 34 729 54 598 172 236 18 345", "722 792 685 741 988 981 763 157 33 630", "866 845 896 843 971 664 967 906 159 653", "576 939 736 173 160 657 267 10 149 691", "319 645 824 733 6 907 972 191 490 313", "104 109 674 767 400 896 242 647 258 781", "62 10 570 970 715 327 364 216 583 149", "499 875 474 107 452 539 278 959 56 39", "478 715 262 943 664 465 598 670 373 196", "28 999 679 786 333 60 962 319 987 850", "205 94 704 965 962 970 527 477 905 217", "339 873 424 652 149 501 374 640 386 271", "416 501 673 233 827 946 260 212 844 461", "361 918 823 943 124 790 512 500 889 393", "757 18 641 341 796 34 332 598 117 464", "803 452 536 929 600 672 731 827 888 118", "16 744 990 567 503 521 845 625 144 99", "792 399 375 233 662 986 185 324 113 996", "498 904 500 15 682 760 349 339 856 282", "677 384 408 392 988 863 825 337 765 220", "465 673 655 821 414 44 381 95 913 707", "588 164 168 313 458 480 508 177 966 659", "976 72 41 5 448 662 763 178 268 793", "934 90 216 241 54 386 350 959 715 800", "889 523 958 279 845 260 947 992 536 505", "621 274 504 520 624 85 553 896 947 808", "852 644 151 49 59 806 975 667 425 84", "416 425 718 941 87 482 570 610 751 482", "582 700 485 111 64 398 827 817 852 821", "589 865 22 704 797 998 628 464 303 777", "853 645 229 83 51 886 314 383 227 864", "624 80 421 91 850 701 318 77 587 698", "174 104 582 396 787 801 932 962 819 771"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {260, 970};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> people = {"579 307 263 757 293 528 199 218 509 815", "298 734 15 775 704 365 501 746 40 921", "408 11 275 152 352 773 106 992 633 372", "332 357 988 523 404 446 794 251 986 153", "385 843 881 982 27 326 133 808 338 934", "443 934 637 544 321 164 789 314 532 15", "584 606 473 787 613 803 96 915 871 828", "853 946 58 11 950 501 637 425 874 796", "248 10 751 653 992 563 620 431 435 168", "89 1000 919 770 188 682 926 336 426 73", "767 524 219 816 855 855 870 647 158 104", "230 533 227 91 28 297 341 39 603 892", "917 446 422 426 312 740 364 75 540 59", "202 297 233 135 86 120 373 653 157 823", "959 401 556 38 753 233 251 158 730 121", "56 932 633 595 173 329 318 444 370 32", "205 853 650 456 179 90 893 784 792 431", "493 313 428 269 434 389 409 249 634 251", "664 855 599 434 682 34 628 759 962 398", "852 513 51 982 368 184 584 799 625 975", "431 220 987 363 190 734 84 206 751 780", "206 206 629 163 420 84 55 30 599 492", "584 494 775 488 93 788 522 396 640 251", "170 32 560 557 688 515 569 314 41 398", "433 605 635 416 877 66 257 918 66 830", "564 984 923 37 720 298 969 632 301 61", "164 866 922 642 456 243 351 190 309 671", "68 146 580 215 303 433 451 154 628 127", "35 39 54 578 467 27 425 273 943 89", "611 222 246 588 641 264 717 346 444 521", "536 529 327 143 408 626 631 608 464 315", "310 109 226 254 291 967 34 701 582 596", "152 385 32 266 153 238 558 808 820 457", "414 437 973 832 799 87 97 451 656 994", "626 702 76 769 32 936 76 898 622 313", "877 412 101 94 12 447 484 110 731 562", "930 195 200 993 412 154 951 418 913 212", "852 487 26 963 672 71 403 549 926 132", "492 173 289 201 408 81 323 651 572 824", "652 368 958 962 994 956 421 364 656 304", "579 910 210 222 157 711 51 841 540 934", "462 651 513 936 627 384 807 690 755 424", "139 417 106 49 874 945 256 637 319 535", "363 886 899 845 560 220 192 249 852 819", "823 941 48 115 755 133 334 192 392 189", "72 236 197 700 270 84 265 376 973 975", "382 103 513 765 629 678 149 282 521 543", "135 957 996 307 674 573 322 960 518 780", "110 464 209 4 202 851 78 539 144 33", "177 867 320 283 212 740 600 752 462 135"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {384, 959};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> people = {"1000 1 500", "1 1000 500"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 500};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> people = {"10 2", "1000 3"};
    TallPeople* pObj = new TallPeople();
    clock_t start = clock();
    vector<int> result = pObj->getPeople(people);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 3};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=152347&rd=5854&pm=2923
********************************************************************************
#include <vector> 
#include <string> 
#include <algorithm> 
#include <cstdio> 
#include <set> 
#include <iostream> 
#include <map> 
#include <functional> 
#include <deque> 
#include <sstream> 
#include <numeric> 
 
using namespace std; 
 
vector< string > tokenize( string in, string kar ) { 
  string::iterator cp = in.begin(); 
  vector< string > oot; 
  while( cp != in.end() ) { 
    while( cp != in.end() && count( kar.begin(), kar.end(), *cp ) ) 
      cp++; 
    if( cp != in.end() ) 
      oot.push_back( string( cp, find_first_of( cp, in.end(), kar.begin(), kar.end() ) ) ); 
    cp = find_first_of( cp, in.end(), kar.begin(), kar.end() ); 
  }; 
  return oot; 
}; 
 
vector< int > sti( const vector< string > &foo ) { 
  int i; 
  vector< int > bar; 
  for( i = 0; i < foo.size(); i++ ) { 
    bar.push_back( atoi( foo[ i ].c_str() ) ); 
  } 
  return bar; 
}; 
 
class TallPeople { 
  public: 
  vector <int> getPeople(vector <string> people) { 
    vector< vector< int > > ppl; 
    for( int i = 0; i < people.size(); i++ ) 
      ppl.push_back( sti( tokenize( people[ i ], " " ) ) ); 
    vector< int > st; 
    vector< int > tl; 
    for( int i = 0; i < ppl.size(); i++ ) 
      st.push_back( *min_element( ppl[ i ].begin(), ppl[ i ].end() ) ); 
    for( int i = 0; i < ppl[ 0 ].size(); i++ ) { 
      int ctl = 0; 
      for( int j = 0; j < ppl.size(); j++ ) 
        ctl = max( ctl, ppl[ j ][ i ] ); 
      tl.push_back( ctl ); 
    } 
    vector< int > rv; 
    rv.push_back( *max_element( st.begin(), st.end() ) ); 
    rv.push_back( *min_element( tl.begin(), tl.end() ) ); 
    return rv; 
  } 
}; 
 
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/