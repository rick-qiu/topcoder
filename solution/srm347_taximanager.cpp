/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=7633
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TaxiManager {
public:
    int schedule(vector<string> roads, vector<string> customers);
};

int TaxiManager::schedule(vector<string> roads, vector<string> customers) {
    int ret;
    return ret;
}


int test0() {
    vector<string> roads = {"020200", "202020", "020002", "200020", "020202", "002020"};
    vector<string> customers = {"5 3", "2 4", "1 5", "3 2"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> roads = {"00020251090265906661", "00763002550100090081", "06003699000080062771", "00000710460400035310", "50000039119198350060", "66060004050810046028", "02333108565000200880", "40212560000209205231", "02601150098329905062", "00210383709951005203", "10111087340780827070", "05065800003095040140", "15604020082000100090", "83430030070580600750", "10588355007006001150", "14400080790005400536", "23400990400933060004", "11053016300602000090", "90040920084059282502", "61300007077904050900"};
    vector<string> customers = {"0 19", "4 16", "15 16", "4 18", "2 7", "9 15", "11 6", "7 13", "19 13", "12 19", "14 12", "16 1"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> roads = {"095222800320504", "107600288090501", "760973530769345", "963093337510830", "338404069255826", "291700050155264", "002783031709004", "404730701707712", "068870030090995", "320025180036103", "468695042801904", "233626561000105", "070014432197086", "887301000143802", "230852749990330"};
    vector<string> customers = {"3 6", "0 4", "2 7", "9 7", "13 9", "1 6", "7 13", "14 2", "8 7", "10 1", "11 13", "7 12"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> roads = {"00401", "50990", "00062", "08008", "03000"};
    vector<string> customers = {"2 4"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> roads = {"02002507209006769080003000000038710008270075752100", "70005000440300400058500002000487012560037200700206", "01009002000960002190090007600013701009090042752001", "60508022900009076080005000600000000060009122001660", "00000000000007000000068217000448002066200062060040", "76090003670040056900070760002006000002732008008662", "78530304800200090010020300426004600250190765017000", "00050000740800355020009480434409800000035000676071", "06600400065795008040500111800000050906003300900520", "71800609805419030000600046000008273000800000003100", "00940000450000000009703000080270000137000403640817", "06086340050070051402000900408038083000500000407073", "36027950000000900050500008630000000300013001000772", "50096070205800900200901100670001005801000206000637", "70250002000067000205000800100556010000099000203800", "00900600600003000040000602051720120018375030000955", "60770700002800000300830603081074009301620304000700", "00700000001003004010000809640255777020008535006055", "00900609090001090000700900690060000072300050099402", "00010000896000306010000051285095009030400480200132", "80580001000900360500000013000030802470270930700000", "10000000200790900981004002201808760072050009080685", "00109001008805900049950008001060000006130510600003", "97900003250600004070008000060005600470001400016260", "10050000409609000000600009104090006049250000080000", "09000021480000007750400100800020060518923050700500", "00007470005090001000010010063009800900801484000635", "50496301200000010693802230000090000030987013201000", "07001500006660600300627000900060286000000403880000", "65030101560624438080202040090086050000000000413012", "40610204023010087700000003000009003001403002080000", "40200004000900260907050030340450000340095000950990", "09600100050098490000101560000000068091009770000000", "04003001040309374350040000000201907000476600603794", "00072084000803002620520500890005800044550000400000", "70607087710000097000500500000003200005900000000000", "03509090000090300100800375000040000100560004007520", "62000000010000702083040000109376000000000002645000", "40050000056240000900063000034010200527001510000989", "00032014900997003008200060596870000870007000113150", "76007090004013800060200150002008104600090500020903", "01860005000808002000020000940007035000518000030083", "00000800000209990031004400000040090200004600700080", "00135810000090040930110070009850700040538000000102", "08700020270001404006094800402200949050210400044700", "10709368100080300000220040026634005508708010006900", "60620120000007005305020044000614006600568000000723", "80009007090530310003004000627000040008003401006002", "70000099001668800039970430083000058005301805907300", "82848000006002008330000700005088602020007001800060"};
    vector<string> customers = {"3 29", "6 26", "20 47", "26 45", "45 38", "40 12", "0 48", "39 40", "19 9", "15 36", "11 31"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> roads = {"02007500510010919000100022030010529002008100000031", "80005000206305090000410903037100030006050702807030", "00085095000009838008700007110008408000000020400570", "01000061100000006100000000902053005850000190005600", "01600861830012090000000000710060500009909003097000", "17000000805000000030008060200000085617000900308003", "40541400790030026412000000002530020030000309400500", "00030890503750093500001083084100000020804779909000", "13080802050617010049609083070006149004040000500003", "00000087500100084064006660010000050059508060102203", "00019900850609000064100009207000009004010050200610", "04000490050090705075570000100005634102006330630350", "01500405680000030380000028000007008770701010060005", "01020530176000201040005024120001035000103500000707", "02030071800004051500590760502007200070000912000810", "10074400400500700600006086615003007138050200804094", "13800982970650020860400000990068637403107900972083", "24039040494900090000069030107158614900009240037000", "00003000604703050002900007200207090000020580050030", "00200090000808154020042076760700302220003000706500", "07009000010800942644008091009000809000000024000000", "90929073040005000700000000000060460109000000056006", "00914500006005002000060030100700001047005103505009", "65940060400000208550002003000001006490300003906000", "00901000003037010304099800100742021046160000002800", "69090509800063100400005000001690000006075230260405", "57003300000100000000990079070000400050005000103070", "30000339908800600003840706100054700004020000000007", "00201007700500076401259007000800310627070000000000", "90000552430063050040005000090009800001002254042607", "09000481097700900306070080000305737000206018809600", "02522200010004800503060012006500082702000000000097", "28590020040108405006060001000403013337019416001200", "00026060606019500420472804299040305930280800018400", "00900090005800006460010000608007040007339008087250", "25220340002000990815000500018078720000000000060600", "00003202000700030941008037000000001006010260000448", "06000831060290003016001600306500800000420519000004", "39004006500600030600000204000180650056001080504000", "08032080091002120002604501044040063306000000000513", "11906802200000277600906004000220308932000870000000", "40701007409467400000900200020600080707600000090009", "91008600500500900080008881000009023100620300430000", "70000200113005007200764700968130036229000200000320", "00004106004000064000077187912200002461000680000900", "00300606603060026303000001100070900002004060000450", "40000097070000040000300403080000020017003002200090", "62028010963305080000005979409008370020400087046007", "08100010500820806057372074840103700340400000000800", "00483800690710500590000509030407004000700084740000"};
    vector<string> customers = {"7 44", "1 33", "11 43", "18 7", "41 24", "19 41", "5 24", "13 30", "6 39", "7 6", "35 39", "25 37"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> roads = {"02040000900000000550860010518300002620001900000030", "00096000007000030020010830429533019000213016010007", "03000007280705200506032020890975030000010000201000", "00900200522522200003079020800000098100080230010004", "00000053504400750000970030830577003262900080910000", "20000035800000076230000060000901010705010000200707", "70020000063908000960800003000030600700000018076090", "49000000040003090026000020000700302006315000090500", "00429708000099280000689087040108050650000000000000", "70907010007000890063934002007502000890888405600400", "00900020000060600050005090030100303020000740302099", "81050030000005505000605200344804208538000550507003", "06000106758802320040000000000052000126006063030400", "49577020027000000700051505000940550408570000363140", "06007070006084050060048816000006010781009026001070", "30070980500520000084000190300021092889703600900074", "09002002738900000000730000330702010410710000010009", "70030009094000600087340570800300000670804380387008", "01060000400000015005950000070743090080006660002605", "07463521081600450960007558004101904000000088201306", "02000000300214075200000230982050000570500010732000", "00000090090003010700000040600100000462016006405080", "50404212040608060070070501090850022002000800400061", "01002117004000072020500010090400550908000080024100", "00010070560000062005004001070808060500004009380003", "95009000000890000700300400260100004007057350000800", "00101060098301084603030030090073400400159036700800", "10900073009600100500500000000090005009209010450292", "00000002585050860102707041000000053036003002000080", "03080700017000020092800098000000490320000104507840", "00000004907004000020214444000100603052433507032002", "80002573009284057005085028190920007035200008622006", "02008024208000900000032012010000090030014075090884", "14077040602100001807040100035000003070090000000000", "19080000400734600500000040000002100020004010800043", "00040027869102960900012089000500058062263002602090", "10983000333000000004192209000855000009840020021660", "33760206607970008040100030046000806000020790803001", "30000597056002034718070001471072523040030507400840", "01005000700030090306310800070070080428001203030600", "00763000050732002405021106060700130003100002020005", "05000052500033734808703090060170008400999000008008", "33059180000020040080095300000094800000780601530000", "40050909050056570900052575400200210000900000000000", "05805003913000008000300750000000200800022030044974", "00090620060085220300800090250008544702067307000000", "00710910350307406008709000010005024109000906000503", "80005000000795000660007704031000201160070302061000", "44080000003850047060450090004056000081000400402400", "00003000001850001408404030500652058611785310100100"};
    vector<string> customers = {"39 46", "42 5", "36 11", "0 15", "6 13", "9 13", "12 36", "10 24", "30 6"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> roads = {"00000000208065004166700002500067700201408070601040", "00020000600010406010000130650050086020018081000100", "60006005680902502100000000708500900060057603870068", "10000000091005053303740721070374047065000400000612", "00000002400730360900000080004500608240003900070000", "00008060000188000004649000060061800770040609000000", "01103309070330000180901040980000700074031000804070", "40600000000409213605009000002379300061820002720301", "70006600060008991843006005719000208062979000069874", "02600000105909080098060001001020090070025019100500", "16000078000105010062707004376300821500090700316205", "02000009107060005400090170210700000900065050850060", "00089009200403970901208403040008030507300302430030", "00805361000000600000010005018000002709401804607500", "00296400007900054018000030703020208401240776106008", "00020000400060000255203070000000100003020597100080", "52607115104001100000075239570502030010072040000500", "64090010003000081050670100900090079800980000000990", "05041007000000600907003000092007870600602540506896", "06503040090800700060530206040180000040000585000060", "00045035730300070000000800005003095020000599290206", "33725070600108020000002040004001086060708070000505", "30005203962900600890000000702280100000204059098000", "00640006007060000007009050900000050605000709050000", "00000565099265007001889004000109000028300698000009", "00009095030028100060900900059013902202000076005206", "10004650106000000010763339000032078401200003400020", "52008500800000000000060076007005000200550023660003", "80682000870700990570658000800009034000700587427800", "50410080008300500683060040405000020004080040795020", "02736631035000000000046503800301003050000000030000", "16070005106501006206003906595620051334000001700046", "15158106210090000608800550830050000046005005403036", "00400116007087007409000085007165606600000009693800", "00000050400009000108040000060000150000080606359000", "01520000000200668210000036080236243005080000009107", "52097000700208018409490068220105082000050460000300", "00027090097969704401130800809000000020660510300085", "80810808213407098900057602000000007000000700890083", "01304300000050954030010300166000400701000530008485", "00083401089040309007000009057066597870900000434000", "60000090037500000410000700900049260909000000014090", "90004000266020009205000000049060440003300006002000", "53030100000000108008009002106010020036522900008000", "46007505306000200005230008800082300410076090000008", "40300035055001006000690380803043909200705100009000", "00230000406000063005061907823070258030210008600000", "80301030008060000176904004001380210000055000000009", "00070000509601044507000000000359022150500080302206", "00038800693201020386855900094904059050000770000320"};
    vector<string> customers = {"26 17", "48 17", "45 35", "47 3", "41 12", "20 25", "12 24", "29 24"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> roads = {"00398395203301076000010004000000010000000007090000", "60043801000307070004095050000000070201410140800000", "74071000370308000090890007003000200400300480301006", "30708002000750040050900002080090090050500830390400", "91000100706000000000000109003250000008320090400400", "09009000079700005724201700000037400007100500190630", "00702900033080000193000501046830050000801071890007", "50088080008606030300009600003000005600090053079550", "00090630061649020100000058081000480008000001010630", "00605000000080103074014900860008080031002007416090", "60100000000670457050002050190102016000030080000050", "04103080004001000760000000498060380000600805660066", "00080160950000607000477047085200109051077004070200", "01006060059000900001200070055013070070490870500004", "09042560020068040034087032031070103260804903655005", "03040800000370000000100006110002408085030019000001", "60100870710200690034108070000002199700887874200040", "91008646002004400050080006000003700098873070000900", "40700090070500004000082080482087070093060700450080", "70300005059000304090000001090000000106000000040431", "01460009020200340030006740050008960439700960100089", "00430442801000960000000500000090105220000000000000", "00084009007286800058000600006960944820000920680000", "30300080006000000003000000700607600060307260000004", "06709600705005900090074000470000005000071021079210", "00009000060610000010027800794640000007109920650370", "90700829680376809000000346000040008060015050338200", "74000020305000002640008020000003585731413900080000", "45090000998400400704005060000657800910100030407360", "90366982030009090004100010000000008000072500050670", "07000900930602000900600200050709300580324076000593", "00200800970000510600001900196400000040080170020635", "88010503006029009500100000300005001044050007010000", "38048000574425000400090000002007800210107356730005", "00080030005307004700260000000808010000100170580010", "37040000000541409430409025070808500070308380085600", "80850200000000005006300580015524001000900140200090", "40006009400000288505000897087200000590005056000490", "56810100000000050602100508000060030400006055008000", "98000609006105015400009308000000081005000040904005", "05400005000000080403060380000000741601020005005200", "42320002020000095132494500086160505114201005200700", "09000610859005500000050200031706002040206000205527", "00671006060800040083500507008100060410840920085080", "32892040990000000004020000000025525200000530039208", "90250002800000940090634780001197150805000000000370", "20004010800033000400007808000803006050809047050028", "06800004100005000070330840375461002000620607000005", "00007095200100500070278007090097980900003040095600", "70030040006000200000780040100001300900000000100000"};
    vector<string> customers = {"22 49", "28 27", "40 29", "30 47", "17 0", "20 22"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> roads = {"00000006002060076691200400000000000803990060974000", "20907006901000160203082002300400000060500005009507", "10060200600006000045316500200105000709409510000656", "14000080749060935050000800000004000406600031030415", "90000020002005730180300914803005001000600101464000", "61070069000709270897300034008005318000080219900069", "06026000000090808003000850505804360000022680000338", "00002150000700009069090610500100000198060710020090", "14405002000807002066203009000960057079083077080071", "00000000006500094297000040002205900033000320500067", "00302040110000006103009040000000001500881030000000", "00021001002006932000350609030079823020350107009009", "09070021000806091008402500000005086000000030800080", "08009050015200000417000800340007005109000110832100", "05080200700000005000202868329304006006000720520604", "00000009002065000080300091926007200053802088000370", "50090220005003000900010607000503062000010000000000", "00045342022000008000000000023957030000290000706000", "32080522904008021203004030060806990060009607102340", "52000160040200700070307000360005010606000000009000", "00900603000020080080081001020903000001307900200000", "50090155033900320800803009200080100740040363900230", "83000040000480003700790521000300060000307000020100", "30902000300010264100001000606520000000006700200000", "02900000000602000753680008331503105146711120200360", "00025071000326103460307000700000008309400027031001", "00100890005003250300009064058689071420009643600000", "00301040090088001608010200000861888019420086900000", "00090008000000080590303007090008000040900000001306", "04006000000800400007000303200007800091240004803021", "53001000000060000995000000070000905508009504212910", "00006100000400700031020609021000800420709070700109", "00070000507640060508103705990990062660001160012800", "00098100003040025000706685000003104042003630499408", "80304020400000010103000404000063000089002720085001", "00025690000509758053116000804650000009320035600396", "30700442509843300400800030288404020200055230040200", "24740023950400005000009809759000040170899500072001", "25050000810006208300120090346070600900070070802705", "30000013000200802677700900080125640450003190050806", "80302040010040151000000502097080400506000080546000", "52610000000609004001800070430401800000704004890009", "47109190000002031350004850004000600002880809840300", "00003090009700096554018210400000081520700000794007", "41800000007000000001050800344000570202042170048006", "04050400037000080103090090000235300001700730907600", "00055450079600520870906003140305900107000599000790", "50202580847906500394002000950090030001080003503033", "00006067000804620024340300090001056930000720001000", "06000900740000503308300607020603020700513703402000"};
    vector<string> customers = {"40 24", "24 32", "34 42", "34 17", "26 9", "6 5", "13 7", "10 22", "5 44", "1 3", "33 2", "37 14"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> roads = {"00600302002020800470000083810790000010050800020004", "00006078000808075911000476887098313550090671018070", "70090770079293203007090070030010003080199600700005", "48309000020408000279800600090047049009501030280090", "50800603003000401000801000018406006010300100575001", "00087050000080020044901709200000080532100000000097", "40002300807000000000240002966307705000800000801600", "38009130096766600047030036000106206400003000001858", "00610010003000006010188009008007162950000600050000", "30300584600503220016083670596934000048706090105080", "02075900000400060000504670000200600010000010704187", "10050203000000715051039009020500090000002008050060", "30001020707000009600500008000005000000468094000500", "07010010006330002520800207300200000000000502003508", "09000200000020080700030084151000660680000001003100", "00000000059000000588100500590000000127035000032000", "20420007800000000008200505700300030000070000700250", "00886104300616041080500537300000087055090005090500", "00004940300000000000900021420900000230210053402507", "41674200043000060080006600000000060306030200000000", "10302107002002001780089004080100030804000059304033", "10070006040001092047000006001000070105490053603030", "30045406500830900040020510720858980000000088535090", "30840600089000409006706000002861400400054071202070", "02004005960000302900051000800109400408230000005370", "90747000062884000000905000100081600601809700845000", "79800096010107097000000100010004800590020040100700", "08897708005308200001032407500060000049710000000833", "08800800130100087006034040000200208960400000400000", "04500000609006002007200190800090022026090465080000", "10000404007006046060305000000004178009061030000000", "00801008348001401708002301005900006740309003320686", "08009003840769900730880100000000060120089001600951", "00006355854003350000000400500200003600000600003000", "00963090000000700040000840894000000080040200970900", "70747100759014090900000290306702000000450740030350", "00000000044800307018210070040400806000000000620233", "06309930034000030700001304080820040250000400000640", "00000900685000065330100000430449000520006703020060", "01012030000008490820302000700000017870000000600100", "08990505530807800055096251060200007820000570828080", "08007220658200034100602798809790952010000008100081", "40000806000040056200550760039700008090080508022000", "50000065000900200920000096300606400402300070140030", "00302180881899000000300060033270008750060000000554", "00000056001780300000004800010300003000170506402950", "70017330085090142630003090920600010103000200000760", "01056000060086026085030707040090701741000005700003", "28004009000080000600092000000006154160000300300000", "03600090166001470700902200661000000833000005000020"};
    vector<string> customers = {"35 32", "36 6", "26 32", "47 42", "18 24", "36 9", "16 21", "37 16", "43 44"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> roads = {"00000500540080500707084290090999600001007000610909", "80500004385000000003506020140200000008058004900800", "10009229605020000410000017180005000262205000504070", "80000321502778200007000305600000600306520028380001", "80230006603810001070910008000060370097006000010000", "95005000070631304201190800002020003063304000247440", "32000602460030701000000620004002097480031176002007", "30010150000063028001279067502003900019060590300000", "36000080004002004130091000109509000000540001700000", "00208909000700030000044032027340655003005707104063", "00120076000080053702410099560100004060700034032924", "00000000480021012300006007066043006083008260106168", "00000001008901093009000604239000900040620860004080", "00090000553250003060000030500028908080925067040144", "10110400654050010000230001184036307079070270500050", "03000500160000005506034050510085800740420000080801", "06001290390593220200657901000035003805801000008080", "06015616000200020000400707003537080060007100004000", "00000000000090091000070702698023000080950058606329", "07010008200204600510000106001000650070090007302708", "05401000902000400790084600000000000000000000400600", "58100072671300007000800300857007002603000080200000", "00902380454000006082720002505540000301008600007073", "20061603013005710000260000030200510100840002006090", "02340097000709011881204506000002009009007779063006", "86809069170094740000005930100210080200057000010190", "04700105302079710042009070012002300002507900403000", "04017030200960008009019560004901500000510008000360", "60008772772000080808800037000129005503080008108248", "00045790000000000256010936600000808090000003100431", "00001410047050079528202000440000441030860009010840", "72020297910346503504944007600080909395601200503806", "70060000000532060700760020900880003080002000064000", "04800809589235007309009050000000700009044004700400", "00010000469005029670846037380058090020006000003016", "21600000004000180080470031808900009043800082010400", "05050030001057000912394604773005270005781044100004", "40805006366900034220007900860004006700379080640000", "04030020310729000684789760005800504509000000100000", "23011202010570409040505766558414000171004804038970", "08070400034000000524850903109081360739300000009000", "33510000010628000000072000001083100070208000904200", "00359301828000094022099000825304000090925000440490", "00030470000008000005600603200410000047090000800107", "70010890300700000000301900096080605489100012000000", "00050668010005080000090036057000000060070080000800", "00808000067899024621360099840000020100206767000700", "03006064338030800300880100006590800003000000008001", "50085000900090000300009000000659603006580865740708", "60027001100075209000600070620938000000060702000500"};
    vector<string> customers = {"19 14", "13 7", "32 1", "45 23", "34 25", "27 41", "19 23"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> roads = {"00000508050502000000000000703000020006400860020400", "00310600000330040504008060060020600900000001009009", "00005009208000020000505600030749425500406964010406", "00009066280300280000102300010737000690205900090082", "50200505910790001921008080050046070010650080017500", "00080000304780600008000040025303072480000018330197", "09004000000000531470000000510073060012609000000603", "89035200750000900005840000181406360037600009000100", "00520330078000042000084040909005680225008005160675", "30003550900049640673800000275400055001006000002904", "08250210600050068000002000106763606727580500000000", "90073054489007006086100980000000020000500100030025", "04006008000800060101069080010102816090060030380000", "80020006000900700000082020200006005970070010410000", "05076000022400008080800000400628030158080044907000", "00000487040140200080000500892000650310000062003006", "76210000005060000680012000150000220007706790001000", "99034609892000130085000000209608070610000000008007", "07400000206031270200600080600000001072200080022351", "03186700800080801000706043500100920020500020607158", "01400501294800030000054000060380970360077804009300", "09902000690000300900000300006450000097090606400603", "10078080002006000452400307090018090500010329000250", "31000203002000000007005000405048600001085641070050", "01500702020064306486028000019700009000500020200708", "10403000008730654095073010297000007003902700310460", "08270051804200202050006025030400510030005919000308", "50003007000080000460400001008000023082700804875030", "08007009200000001290000700040010001000649730206060", "00406008490004600510900001008003153500007826901270", "02580900938000000190091050920006000006602982090000", "80800014830960000010000904030000500502002900040200", "04002070020013010070807140000874029690530100290800", "00050001000008000210680270000754002344400090050792", "23007105808010740700327840010790430083485230218700", "00090000008003600100009009609060002070196094700606", "07070090250103537000008009000300150007002000056050", "79032003250805011000000730000210400000002498047000", "50032000001070007008953001000000045010003100000818", "09507100009000000380636100400005099057700000000722", "05071022300500000506090051606900055000090010906002", "80980244080596011030070080090448048000160070000004", "50100000080902100092000060600000010360003000016003", "80800005664200002008660000000610270400887000038000", "80666001005020802500002739109000072050800500005080", "06006390000030220081472080059831020070005705500000", "16918027005100200000804002803090024060050200000999", "60006000506070403040000900003000700221000071066041", "65033500010529006000240000000023700003850058090000", "90500000052060400233457959747764800910018003306760"};
    vector<string> customers = {"21 5", "7 18", "41 29", "12 33", "9 39", "15 0", "45 10", "6 30", "39 4"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> roads = {"07009500070007002000005605000003770900203730090000", "40200000096963800069801010805002000930006005010600", "08005110000700320081090300105006001000004700010192", "90200007056065183890043000002001200542550010000608", "28000039500009803000300000803134025647540006021470", "10603000470203200300280218282211700089290104000034", "01938100000935600203000030000100000009002000003100", "77005000980021000060060300000330050105820001303000", "00000306000004090440490010910087208050601260790700", "00069070800610000012486000080210000880108040009000", "05060409580023040000090800170050808001036200040008", "00797490800090300000005800350041000420000020005083", "09420540000300813200405059007908000089006000000600", "00260900000000060930018901030300300000000000600200", "80898010000400002204021660070002060009011084603009", "00104000002000700048000089009153095090281010009078", "00010371100005840900053006355900000380000000000680", "07436036400900000000093046226102770203080300000084", "08058063000053009702882702049980409820900540095025", "04000020002070405000500061060030007002500090100500", "83205020007885706070004000600059064000000000802201", "34006075700394480309800950800000084000000299000008", "01092001704080010193400000900090570390400803000716", "51072350000000095600000008024903300020669020720010", "50707020805103000960700000806040400500590035066008", "80070900590040200054020900090000207622100360700002", "00001534709064000000054200006060000050078000680000", "35000053083000620290002896401002301507380080000060", "73000000060032060809016276000302000003500740009025", "00050044943005004010005001000000071004006000101008", "58010000300007400000605100005600700004500333000078", "04000307160030009590007507404060300004000502403920", "00307052680032080008015820006050080366204000900660", "60000003066700000001010070500706000008004630030304", "01003005200106000000550630017001000300900945400568", "00495002057000600530006007000380050002210074180000", "03010602000025000000940000007950000905340500000004", "00000092013374000310703006800000002000443470000010", "00000640810922426104262000200103000389084006400051", "00004050053400600000074002054385000300700009400000", "00303527000310066558000054740940080104000100028614", "01005009001090900083060101030400003400090052750523", "05502397280490070512006523005000300003500402000500", "70740000527090030106060015608100100200306000500400", "06070200096400007004000320000000007028006080066003", "07500008080000677005464007000004202400070300800001", "30010040000000205003000002920000000230350800300000", "60000009603100612080420000070080000090000098606004", "03900860060085041400719800320062001090000000000404", "71007640200702098650000300000200610500105130080900"};
    vector<string> customers = {"23 47", "11 1", "44 43", "32 28", "30 11", "38 48", "30 22", "32 5", "12 9", "2 0", "26 17", "47 11"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> roads = {"00090208487000300000600042000006083170033227040330", "00300400090000336500030400480063957000003869070000", "00015093410409160390040500647000000440000066000900", "00400090047308087130009047809708006067800480902073", "00000703790006509003820000000032226200005700446908", "41194000002020960104720685000050223080001909544300", "05080004076080000260001000000000800000007090004068", "00643000600000804080000000193040000247740537420013", "00220804000800160080030000653700050026002041161999", "00061800000000170000000003000010000000290067800002", "07327778000004089400012906000618960700600303000000", "09575000829050004810000650200705400000100020000808", "80897609010005050160050000000008000047270000009510", "40600000026800071809151000606000690020200600099007", "70050070600060008028320610000000400130420080607090", "40003013008007004529004000600101800210400230006900", "30000010000050030507081006000785983008000600930011", "18006823543103000000300052070040600400900851009750", "00224333080590300900007301000000000054900050819504", "40404106000000000050480052100406000500001150208400", "61870080000080000096070706030640398004005601000640", "50000095001040450090100001010900000770100030850901", "56905000060909520000200006050080600040401050802560", "07999000003805500001901040460005050005106100030131", "00000081800305002095000002104010646007034600500070", "09700200096845600072020400020002056970775090827060", "78005904480000400008000540007602095000056760002330", "10040006020000053090098071200081000200007000000006", "60000700040500000490006303710900092009707100050006", "00640000340002024000587079000040907002030004700045", "46031004000020500006450052000004026090070700466080", "01666000000006065003005441630080040003003100595012", "00110010000716064050000000000000000507912051050450", "09200900838120605108004416008001000905193091000205", "80006055000900600000002700250742200000125170001000", "44002003000300007628650003070486001000010000048055", "50020005526601606870300002000030000000409200000080", "50000970847414030005004000030095021160090000008201", "00360000030403101623090191040804400040000530044164", "88500300305740500850031300024000000310000906503202", "70874080030080821002602020736803006000850192940660", "06301000076000303050450601060550000307004001970060", "93700299100060000810300009670270002000301000010700", "35030009090006050010000000341000040170005000000604", "00658840000208818006350020000506902030030723089200", "64900810053000047074007300008020800004760001000040", "80845550000008030410253841000720608900060104000070", "50800408006011100000053850090004307004020100801000", "65840000009007605000907009060022009070093925000800", "00726203000051000807000087000030300440800504131200"};
    vector<string> customers = {"31 3", "32 35", "46 7", "21 22", "46 23", "8 13", "48 25", "26 28", "14 4"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> roads = {"08040070158800300082300013000500200833200001507063", "00070250070304596410020050706000070027350059700690", "50001004001008006000032020000440690400400540208001", "06000314000000860000900800006700092130000000580000", "00060000073860030409200000030000000100906060501401", "29009000000088371403000004046000050030006000002690", "40037008420505406608000003900073000200006400200250", "00025500801540000600200000300400120000209500003010", "00000021070062990315007208039000059908862027268102", "08040290007090023000030080050030898505805000000006", "85000000070001690020590000003020500050002400005005", "20030500907000046001050068645001000260202000740000", "50000000009901030301082950000707099320430106330052", "30000922683000260070000020510000200286760060603000", "30070080903429060130417059020000000000036780096220", "90000060004009000030990007770230000070046670209010", "00420987005000040930207010940603010000200507909708", "43560300010059025050060500006070000000006007000865", "00000000002380804000051009041500207001030020060230", "00006007005590007370000900087070100900400706008053", "09030500900080070000000060700052902900053079002700", "50800130710000143400000000500085064040430209107877", "94040100071580300400900050990600000409062200200002", "04600030009206800160700071250800030040307060005000", "42044200040010730570070100004060000700091090990458", "60040880502020107005093900003600261070708041950000", "00200097000042085040009010099000000120900000507700", "00232305500005040705484419605606003805002065700000", "00900170050000779600007700600010000001100019800000", "60090000009396000007640800000000101401000060000200", "04300040400824000585800000970800348163870040000066", "00720970580090034740970000000000030005008005040500", "00090420108080400020050028960108061007020980006080", "10090755007000903080689661570901000600000560054020", "90053000000000592003080087066000000225000020900445", "11000200080807000904000006010220893001900060300028", "34001000001000518008000808460200006904100240050000", "00030000000210027808430330004000007000000200650306", "00300702700090000002060315059056009000007058300008", "00250707007069402483403800300010108379801077058037", "00690508030909347680002007010040300000000900000220", "90080000028010050884106200000090010160008003040906", "00000466100005008831050072487409000304007200000040", "04510074320003007056500000108054970097281070200000", "06028698004409790265900007350442000500800700060000", "23020070520470600004706060207027926009070000302454", "90510500001074000309393000501791006702205500030890", "43070200020000904006160005088027008404000140000006", "00900090825030704044008000070000001800009790302700", "07008206408003030006008021601050040003028000000000"};
    vector<string> customers = {"38 31", "16 8", "38 48", "22 38", "31 12", "32 20", "45 3", "30 0", "36 42", "38 14", "23 14", "45 15"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> roads = {"02049000400000093090450200310890405099100000090000", "00000960959420000170070480000708006809000008106180", "30001970405000503060331073808000000460080037000000", "01000470100190360121040303000000000800050305406973", "98700706084620900000300390003027000009550009000804", "80002005000500502003070220037650240000010007000089", "00405300200009605094000003000002830001000009008007", "30909010106060016370201000404500000600608710005700", "00047000005900801000500409082800000205400000067297", "93000005004073060000001210020000057228103000803805", "40970541020390681306000005110000000033906030010020", "70010700835051030840000091603010334500060020620069", "00880000170402390304098003084680022000065000209007", "70477000020000000779340800007040000060100500201880", "77015000000000000004000009000000980280006700004000", "40200850802718200058400000046057030100070410800000", "45020003075564020440160842542000000200096702090840", "04058008889001100001000003009000320019010730240065", "68100090030803049409430001007617032700035905090020", "80000403000401003000000201000800003056610000806595", "00106600000000712000096600045090705719000120550303", "70092335040000000050900803040008087007061907108265", "94007029007290000000080799030935500260030000903800", "00526000180621037400000000074900007403500331000131", "00070009300040007000008006000750009000004800061044", "02020046264070450000075000174006000100401000030479", "03902025800001478190720449001000009010043200000002", "95503003305080002000000400003000013008500032051070", "70900504880400038000407400010008005706530620307680", "00001005001040090701520800000000930400010015489000", "00105003000007070500005070569008097006601050100035", "02084000068000250044010000643900020000000000087140", "30000100060500020000034004005320001200607007130547", "00700000054980090400000063000003005051801000461040", "00220086868000701060009010051704020040732905000002", "50657009580639509690005607030044400003070001003040", "20807004509074410004840070505600001700710000905030", "08008007000405090799050850400033020350000960000009", "96095069200060005090420407210870500410002840000520", "00000040097500500005009903001000040001000308670040", "10006010005006905000060030000090500350000070708030", "28000030030052030670090000002008009000047001300472", "60900548460000950300000508000502009760007200000030", "00040806450230900501030990000000080000003000000040", "00070262005501810180000083010000104000700040006734", "10005025640000900060130000801000090106009700000031", "70003080000501380060008208300390340000006790000000", "30000240900750100008006029900000700907140700000012", "00001087030019600308003104000808803067733034000900", "02590112480721704959006000000000805210850708400610"};
    vector<string> customers = {"42 44", "26 42", "0 6", "34 49", "10 45", "7 47", "31 32", "35 6", "15 4"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> roads = {"00000000869175888605700070000009373000007704006600", "00004096501210414610563020059040004241007000000970", "90000000011000050260064000280000500009300006506101", "04801207007350103000000006000050000200257609010700", "03020008000810090820007400000160040080040008503606", "20020004000225015030000090903000060740000352000202", "48079400072900038000603600000002036000263000080480", "00500700005022000000000150060010503273801100038508", "99100990001010500006000310040009520003057356003815", "00230001007200018801062000880606600684060910680908", "46070830000240000325400060009466020307904007008253", "06320006080064710000070242082907000000000030470010", "54200992010301200919004329002049070302000833708200", "02209390822800006900000603000175000080490600050005", "00001908000010035637690032070010803406104000054007", "08007000103001000005032400030260800080130980020020", "20408906804000590700070060500060025001000700800220", "61509010613050607004004580200100007770106060095028", "00082006733020016000733006400003540700700000019057", "70027765629000640000030300000000500677005022120301", "47000008000448010900029060063964323090029000050030", "71000568100750002060004006850070000300100010202700", "03100006002750000056700033089007540006000620080108", "19000850016009570000300000000066510030000080786000", "64000070000079500007902100006050890057344056000000", "80000800640024630005364400205100648003900910300020", "20102400095395120002000280031257800900400550762030", "00900895000068000000177100000302990000000189500056", "69360030712585229505003301620302000086600050006065", "30020100000300000791000050009038705006649000000005", "00193700016000005630000070000003006707004073700280", "03080180109049030050000222000000889350900004149060", "57105000035607674406090119001462000009000099725000", "02880090003600000104041080801000500202060830000602", "00094070025000005000475660965406000000003801741004", "02008007000730050200000000040030501080050100001002", "82000008014909030079450100006006908000090841600000", "08090000800001200100300200237000506700948600009084", "60800160200506000902000007000754516403000006332600", "08060737736000021007008022000000801070503490010801", "00000030200270018020000194903400000520060440160000", "70007125500070305607010004906000675000100060000000", "20080000300007399861962000427455560290110109506040", "80003004431000006007000072510683105007044000003900", "04309500704052890008602050500700000616890304006320", "06000000006507408108003708070047008000007005002600", "00400010083500100605000000770850600742009865090044", "70804770003391000078210001700000100076008901800000", "00060049002240000040001000430490030600388100000900", "00304151060005000166937200262000005727003002022010"};
    vector<string> customers = {"40 44", "1 8", "21 37", "42 27", "16 34", "34 9"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> roads = {"05300020682050100000003130060005510000301300849004", "00002000006280079008100000000375001000006565100009", "00026008101290001066704905001000400946030963000400", "04908000014604020409070006000950422060800010309507", "07000000000020080002003902400029030003262000903900", "02000054062484302030085004000000301060410049005002", "92605002040282600000040700070030083870800158020740", "00364700207190000000270010000060007021101007010030", "20060068000426009800000400023001001037867237661396", "30080051508300000060710002002120270000100025203800", "02430300030008004000906050004100590657007000059810", "80000715787024030003060000209150020080006000700000", "00090700009900008598030173060000801074000720159000", "70007030050000730010002320510130810708930420701510", "00908400040507005860000109000000078841006300806000", "00800000090806007000000080700040100006009000000890", "01050080050020000009800039102333710605000700000700", "20106280405405006060000682007090608366009000000100", "00010900040045640901000046000000002000108400003080", "00016197110707201000070070400900080000007008000000", "01039302400600000850020007071267570004400000000000", "21500045000150240000900080000020002418429000502004", "00005000090000000507090100600608392505401009900000", "08000906910935005809002090510180030000000600000805", "00200700404500640080000700520100001108600079000700", "00000400400000919360205170520000008049600000286700", "60004036040005870200240070020450000960026070900031", "00500007900002090140001008503763080000000030603400", "60200006080001457600680075000331000070050000003000", "02506098020132501090071406507008804007500510023039", "00500204000062270000668398008100857022680003080103", "01000830305080005801041000003000000069954491009002", "07007670060060000008150804090020000901081024086008", "40840500030310660030000006202011000006330000400000", "09904000005651496067030003004000670090709700708560", "00740100800108000050000020330080040000659800050081", "00994149100050006000009000000423200904400802040700", "00100000406865760195040000003000000070040007637000", "03005300505976060809000532000000000301005010000020", "00503900080565050595000463801009010500009607010022", "14186085000002700068000512070004850038060208002400", "00350009566301040676903020304006760600300090046070", "90750406560408020000560004000370610008290100499106", "03038907240040098000040240009301000800007000060500", "05009480004000000000994410170000200200300000000001", "09007000003000000901910050206004000004000000903720", "48706166600000404909000040000036400016000008050009", "75050150908260000060400080002040020009050606006006", "06039490978030450201707007005009074680000902070701", "99063040000267656700590800003006439090060080706300"};
    vector<string> customers = {"23 25", "24 23", "48 6", "18 6", "32 31", "48 43", "25 14", "45 31", "21 24", "33 32", "35 28", "48 2"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 34;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> roads = {"00044040000300004000029220305041801020000308022000", "00304009000904000000000040020010700900007015700706", "09006000079007120000000005050080006000700096000400", "65400506930080000000061000500070313070638000300500", "00530606006063006099060051550000100200007901000003", "00517000064249065082073054000200076606800002701900", "00000000000030000700020696045070000000000000008104", "00000000005007000003860008102400400007000408860014", "00510000000900060060051001070730000200400025032080", "09041667009809482005053000500040453910002140043730", "35092000960202090210307100070008000000090400070501", "00070052290000100003000010016000208429600036004616", "96290000090700000008007600090144004005002300000051", "45070200804700816000053079000801302301010014000008", "00800480004000000020700003700080806000000309490404", "02218002048047901100080600099006370000001001040329", "00004004190454000500000104600998000030050063402008", "68020440099490803060008741780230200000086800000000", "05000201057882097000004000591994000001809362400603", "04400039001065000070084500083400008140308100150002", "92070090045037000000064400300200604080030950027008", "96320000700006020322202080050060340710020001955010", "10808001724202540050030070000201075000986048308240", "31568010700308226060000000030061300070201800908303", "08000000000009473106050100203002000004000073393000", "00100700000201802003000700000003004690030000002000", "01000605000080011000640764000000700000403050456000", "22488005359000000790640427200900006180000905738909", "04000800000005008503002944010300001450900500538000", "07070000031700000158090004502008002000000060700009", "03050020030470507000782020260000430199000000530284", "77208060060063005580020000407300900300000020960550", "40300000057239906920500909800021090309040000000509", "07004502400090400000700603020050000096004003030062", "73602460900020888790551000004240030000401180940964", "00700210807850800500002000007660805080000047020150", "00000407209000037330404080000578000000060099500000", "07001750003043090000006000703304900700000001500608", "04948650004058040107200031597390030000008008006507", "00158900940030000018840000008077007300000025294003", "00181000002017000300407200500080000705900003081040", "01456580910020996000030200414008007000890080007230", "00850930005051340800006090180560070168000300102008", "02700100080080104140800304000090303051090090430013", "00110850001000880840230909099070000600060400000000", "00068000500573090900100206000360005203081520303007", "00827073000000069777020006042800083048993688600005", "33310069015000059000739570095523000351001093009004", "05007401680902080079000504059050580400000010860000", "00002075700105090770280000909013700074000515048800"};
    vector<string> customers = {"34 10", "12 13", "4 30", "41 28", "9 38", "5 15", "17 28", "6 4", "48 44", "10 28", "20 25"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> roads = {"02800112050402009325000660500340000537668000009097", "40061309010745007600008412010600000500075440900017", "20000080160048038002009030090003020807081200005003", "00008200430020200153810760600700706069020006080000", "00500000709000053000605000060090066033000001076030", "62000030270000000100600007007810092700000061100900", "53300600100000006504060330100020000065000800090000", "00005600003719000090040053044620700051078003800900", "04470010090008250000000079231800950900310273004000", "00100006800760671000320512080360080106010002701658", "03630000700200006700206054010008000510100080090300", "40416700005070000008604800010030090006044003400000", "96300004591000000400600001706500544050042000905806", "52002403000000400260000100900050080502701080007000", "63702033000020040700904780029500700610160214000514", "00409320029906000060001050000005280000000051005347", "00095070017045000044010007500201202208420400000000", "09004000607205201042005130002009900001040549007202", "00101501072000000407070004219708000031029700114990", "50900023088406100090000600300000000030006047789309", "50030012730200310002083110080007001001700810989050", "50000306045000007000609000000380004000300330000001", "48090008806060199350300000006200705400000080800700", "00407003000504902900008010050006807900403490000070", "02300000314004846002700300443203200905030802000070", "09801700000023000130004000202700100900581012190000", "40050000004000204803000600006000000081000000001000", "00010000400000900900847003000603000703900052608030", "58006857007044778000901205300181203348005000100078", "61093000060144268620600205908060600200000107201007", "88002907080580000003540860000000200400096080029000", "78700004300300504730900002000050070480309780000005", "00460000775010090300590040000070065200805800430560", "41005405500030000590700402070740607905030000003600", "70510050067305000400845561993324700504000000000004", "24000003009995091600000050400700006005090000651033", "00800040000470480000000000810305090000906000010710", "70000003883000050001050008180000060000000098400000", "00078402500075980300004000400301000020080020500000", "01105805060470300300504000050001000834000000880908", "00000200670596600003003007817700000000010400005009", "40462004004506200000508009374330380170010046062300", "79800790000080090500000590000000000019060000301900", "00000490010080006600006762610100054008005840005010", "00736040220009809201000200500920900056000090000809", "00097614000060008005590015001050080900087000105218", "50490000350070005004015010277900900003200600400401", "13600406501077059490060020003735003509073060099024", "00950000000500900005060725049001792000530050100909", "70008003009001000904970870060000004494706990400100"};
    vector<string> customers = {"4 34", "32 46", "15 32", "0 3", "10 14", "25 43", "40 29", "0 1", "38 37"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> roads = {"00000004107702000060180862055000407060060550040000", "00000302010600000503000099109505000074000107360020", "04000000091000859620402000900830000500203040903000", "00001600703005069900060925000242067007026001000637", "60060000000000448004970258009000920231007040090060", "30000000092770409500007009000009083210304870300600", "00000503007003207000003000807008008001001866606168", "06214000001621001700007008090202008020100001607083", "01955000007000080977000861042004100175000000000280", "78409101002070800009880030028000031010000900050000", "00000000000600006026093050402317000180000200006700", "00000040001000400004300300704210080000407049863083", "70400502040101000102398002159030970060000010839360", "60000700620500926400310600150089300006300427800230", "60090300700060040000000096978300000003799001007800", "00005000213401600002080915600830001000000506020023", "00300060020000040001000700420100742407047006006948", "00400409999000205003206004300900200020008000085006", "08607820088040020101230001000600080790098040080016", "00052000010600049180005006800087062052080084000069", "01008018070080730806005009050000940665024004090001", "05060090500700000400904960055682500000080007080105", "00900400000170015000700000090251364300099510000028", "10000140790965070000400007030600830050080760008640", "03024901000000200401060700806722220600000010000500", "40405061076030002400045060630025900377400442003700", "00760010623040232510302040050000002000000000210857", "80008004004090707004498400000000000902000039030033", "00787070000870801004591004500110941071046600008080", "90101470703070373008000301980000528200800440103000", "20000005407006020092005880007407409791030062300200", "45060980005090103000020000001470393090470804667409", "00030000090020090850905008010030000403860440003980", "01100000970310024390000020209200000088017000990040", "00005000080600900000500530430070000720071200002000", "90093900500058402070026009048000080068000804780959", "00041000909000168400053078500005917006090009030770", "78000022600384020520000057003130200980040101098079", "30204690339092303000000300080060075500000236009940", "30003080010800012506602103610881063070001100080104", "80070400702097405023000020300480050080220050935420", "06004810054458080200200020000060224933006009050090", "04007040690850075300200001004400021030010000000690", "10007006005800500258500080992200094020000990003000", "42000007130300154400020000805004040009169300003002", "00010926342063000970403060000480010003709083700000", "09501000403000530030000400000064150090005078050900", "09200700000090932158090008000702990096020400590000", "86007200050000080360020020000500205086000424089004", "61622010002004006500600000500054608060007026050600"};
    vector<string> customers = {"43 3", "26 14", "6 17", "19 25", "11 42", "9 41", "5 27", "10 20", "29 32", "47 45", "4 23", "36 44"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> roads = {"03280000302336207002508204860060070500004440001002", "00000103000390620610145200073001700000207500007402", "05069007000600848407700560000489000420900020305005", "06908973100027090200463437070000210800002000130300", "20680020204032700900900008039000000439070020612007", "04802000370419021020498045017306010098742970001860", "04198006801651503006470000060253000000068682000090", "00050280484903920013502005110140909209802071200728", "20003061000000000000000001070950900070400044139153", "05000486000000008710000100600508007000600040900002", "30600040090707000139098802009504009833004487640810", "78730000070070001000004095080220005690750000028030", "80060091100200802090814600014003000020000050650102", "01500008030020500007002409000412000034280500700350", "06001000020060005000075100040200000320080002310100", "07604100000992500000000041047000025077008008506032", "00073001009701220000302860709009590900309000008100", "30800100008409100060945200001690000289502000040630", "00801080000000809806000010058252834008066060019260", "03002705040005000000000090002010470007160900565550", "70040201000380200900040470802010000006500000562530", "00086161069502600608001430037000002004766980200203", "03096200030007064001050350207060507250800007000706", "58080450300050700060090030085000000000400280300086", "41000006900008492000600000600800492506000005000246", "75000006066000070080040010980000809400025500000401", "00502000059009000060004902000004020040190300000010", "00060000004102830802060000006005200309000015964706", "80100088200072043128000100000000007022020709008800", "04030310104000003097000064822002024003460055001060", "04487113000205007560002087043706041002009180098800", "59020030700809690060900700901070700200065806008400", "04010024029091901832030000000010002000710400705211", "00006003102001007900200009601238300000200801009000", "06000802605427008338020400030900000008046000800930", "00305000020870965050204300361056046004101206500090", "08000400000028002964900920044924010800360480006150", "01009920740089120604077766700010022010066806400490", "20009047980240910051050004045000075000000008700000", "04000050327200040070043100909000043450007400800306", "00801900431000109000000100050055080150200800900042", "00100003021000800090008000022002000069448006016006", "70020000012551000663969017005686000004600200000020", "01500006005414300000020540503000070007000040200090", "05068910906910192300010090307750002800000040000000", "04719000010700904056310000002908009000323400006080", "53232600840762055000905006080430025003200090580010", "00160005000300000002500094900003062002040607030013", "78140010400600066460020030000301010006053900000009", "02031008008320300050080900018368902500710590034640"};
    vector<string> customers = {"48 41", "42 31", "19 7", "46 41", "18 39", "7 4", "34 17", "3 14", "48 36", "6 44", "37 12", "16 7"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> roads = {"07300000100300000100000200200050310030010450808007", "00006118110006119002059303303300004095000000039700", "00057592000205059600002080090000090060060709000709", "00000640019033847900807000041507000800049002907300", "07900090080080020461300560000120002000403000603368", "40000038260604897180310001910828000003075902800400", "03300004500005063006005070009000000206700039010090", "08060040509016500571100000200000100747500872007005", "01074200063808100070305700174950904904002080106050", "30000009000553158060940705080059500310000090048021", "00160000040810009070700000000010007309031550000000", "00300029000000200021000013000425080400702809008944", "00000360090900500850500420730008009503000758107608", "00000051230610600300006000500090009020410055533089", "00200013000204013007301000500074002006100130886870", "09959200000020503470310040518219500000000025900000", "00700070090090200670050046000700609008108072080060", "10900480020001099000200056060008509000904000406022", "50688267180005067000000600065290000900006003011500", "28040908703002000060430000000061804920201500060600", "00005002035040502300099350080001080090611006380020", "00109292110778950003000500000003200603500883030290", "04010300943014000200840047008092100603000005107207", "02007090500400080009204069004502703650000400003040", "40010009060085300540040502300080400700057000204805", "00541007000010645090000790000003102020001022078000", "20002005710000290500390000000750700500030500025500", "24802170002679031001700000900763006012154120000030", "00040000068010000600204091000400300300506004084007", "00412042790000090020000902000005709685210004002334", "30008000000002000500324107000005010915030030600208", "71800005000900189000395000003300003210108004089488", "31950242080000100108572307800570008836050090008850", "03500900204001090200000750450700200832504207000002", "79100160960000503610005280400089900478075000406000", "24900000050700706000200021400201247005200900000480", "04607002700000900900000278545060560200390005360060", "00072800099503000000713020060000916940012510900090", "55400000820530001802006750000105302205053197075100", "59037000015070074007007025909000100000000300050180", "07093720001710607075025151825080100700000001010808", "00060000773910010802000000092602200698020000307003", "05205033500502008800090005143355525655601009009062", "09009619160500707009130423203197000020905060089108", "10000000270640900000780000067870605590004002000000", "06074618001510350308970008600118680060007849606000", "93570005000000710009004009206174000940046851000800", "00953000563008060500000000200001020280050062700006", "44300027051299000001567002010000000057131100000009", "04006470066009800420334090090078500500000873009420"};
    vector<string> customers = {"49 2", "38 31", "39 37", "26 41", "43 5", "4 28", "14 0", "34 19", "28 25", "28 18", "15 27", "37 2"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> roads = {"00034709209000100000000047007000000804008007009060", "50230030600103010050039013000000008740400201000088", "00008760227801000209063000000050000935000650000000", "00306407180000800080100067290078708109350000000184", "80330800007886005030032009098000706740753000001080", "10060005044010006307000931270501500000820063259070", "80900000510070293201606100060020026309100056000006", "60897700860068008030002000000000088000096000700255", "90006702000000608070090070250090106070007000400290", "04000005000532200502630004008077002055050240000087", "00760980400027008001056205949047680000009026992003", "40650059030000068000050030202348304004050280051079", "00004420066100700605050000909000751051031000094100", "25025562000000000068008000004002000073007100570015", "22077208805004070600707590943030260005563060000000", "28310088037209001300170040006200700050200200407028", "00000660099000010070100004606757250598000000800909", "07065097540072620000000095087028908000490000700065", "00011043922529920900300092090000330865003864000570", "04030000105000000010009010080600900006000004000030", "00703606051500812000006009840000102089180001003080", "00435050077208100060300000006003600400607064468000", "03786061000740080605000000149090800280008923607065", "57360400606000000968420070203600097077010007005000", "00018000085904988200002009080800203062100084300016", "34004043060790600030602250096000006500453007008173", "93060000508000006160006020003020972490002918040040", "55007000070980024030290000007040800050530069203000", "74080300005304800000000030000016607800000030928140", "00003000090009050007102004200090007032300353801090", "00961000905000610008069202000306090000806064213041", "58060050080000000007000004705030083094090000006060", "68145700030100909726840000160100000000020098004004", "00260208508000543040503027502072000080000005900072", "20000000202570094969095009004569100527014000402000", "00009500332090000040005006070000000001290555002361", "99706000100281506062003510080090007601408006170960", "20500960000000345504058509027400707000009309060909", "46080001900103265600000960008018066001088906076300", "01203609006000008100014002027078962091501506000058", "20046001796000087002070000000840000023400024849000", "00000740324000301000004070506001300005006008111708", "00700002030820290009650603088007501300009706604001", "09074600730038000100381005052007000001920800045906", "20085539500206052901007050090480001050808000084000", "10000100001772020601053700000251320000600074008004", "04500760044100700730906170600300005084900290780282", "04200000200002048003075000020000073130000020838000", "10040204000230130403303000852631000000000607900008", "67084007000050000080009007601600000490200300402020"};
    vector<string> customers = {"31 13", "39 6", "46 35", "23 17", "16 6", "42 17", "5 43", "21 49", "16 0", "16 38", "38 28", "40 0"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> roads = {"06824790079000000008000002004360000600008300000150", "00000500050000000005400004005126300440917000012107", "00000000525092230800890500060000000003660000007200", "00306016300000500807080800208000003060080006403909", "00460007400525040054560000800000080030008600090000", "20300080400800001803740315005103600014006500000500", "08070900407646000800400010091090605700080200033000", "00086380007000038008023007680050009068003007000824", "00954500004003409000000980006552005000620204493400", "40000000009734009805408800700785000002080064160034", "00900900000070107588700706720506700010006537050055", "05302004001005050040055704700078203001096003001047", "00006040503000520000000203049509300009689219040746", "09090890700450035600800480066207000010000930814604", "70000075057000070190508085005000028285440200590500", "00000000072680001000584500730005005010000202901000", "10000050040400200900006456072000000000189000000000", "90002870402003700098700050000000020000106000550201", "40007000069038809000067901197705008030006012080000", "90060400000003048500203009740005500006300000065610", "00680938090850080350035503205040006000005090029000", "91409305300893568800009300200020308000208908000200", "01700028004200920207180002424690209801000200059082", "00050030706030070000640070464000200002000000004992", "00000077060822930000400200107800082038520000960300", "80000423400300407050000060002908706000060006500917", "37040080700020084000000012000900000626105000506499", "00102605791000700355509240003620000108000700000490", "00003004040029081015000200070009005107000003031960", "52601063000800020808054009082007060050051000108050", "00100000030000007000900013701906050001000742630509", "54068014080040050008130009005850099060000308000039", "80003010003009445000740980000009013006021300007600", "24002027001030670050244000006600600408097004707288", "30790020940000000705300001006000040900000406700068", "00570410090083070070390020009890680007600000028000", "08001080040400490806500606007300000000070102941136", "08000682906900000704000085060070005000040000062040", "00050200603000000000700600290204100050086043800045", "43621800209070011600005301006590000354800200206200", "00290001002900006000003011580630053000400000700007", "40150209000000004006000000000010700902050000006067", "60400000005070000700670000112010189001700002000200", "22053000500590807600900044004000600005005900000005", "04200000000000430100535600004004002040004790000808", "60080000094010008510000000070340061140800895300005", "30000002006190001604734100260701607009000605000020", "60800000070010000066050008023404107000900027071000", "05700079047709000840604008000560790023059020000001", "71050000735003097000080500385000000277702070005000"};
    vector<string> customers = {"45 20", "46 24", "36 37", "4 25", "22 13", "8 19", "33 31", "1 37", "15 20", "1 34", "47 14", "31 18"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 42;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> roads = {"02201000163808010000005000137007000900030000700762", "80000872910051500100004040066000200010090009000080", "10017200400000202005010000320087900097778960002400", "04000090600089090008800008460987000009001010900100", "95050010020019012522930800000000700404008007400000", "15350000010700017000100073840440000400833079710353", "60060607010078008814000006000003020600010000960052", "00000040403020064000400023904055069167501657509020", "02006231006680000004350060075001700300050500000000", "00870020000031223008401000001700041000430040909470", "09060010000006008940004076070708502043751000000000", "83800022020070000603002000000309002080400000200143", "00007406005500002010100700301340730800061003020700", "00600049420000200000790802007002007400003550004968", "28780000006030027249207003000000900049072500025079", "00903002407800000099012800650900681051942000460170", "78970040650057510003807019508030500261080020308070", "40869003615900000000009000000709052000000169360077", "93005870010008750500804720000895400130678004006000", "10000900400043905000031851260000020905200677004190", "06060005090003467000009740000000006701010500007050", "50000006206007050081008050800000005004000590810700", "70801000003008007000300068595200027001000142060005", "05070080400000820000090037000090410003401030050800", "28080402020026050000688003847200226195302800050914", "42090180014000034221020730100539590046222000327030", "90301200400010780520700403000000005965430407000004", "59239133300040000290295060000606700470007060600000", "40007900085700201045500000980050850190000900000940", "13074791000905000400205006097004400501026104250001", "60343046011096000792005000400009005250600400410070", "90000000000000262483416220074800000740506000220000", "80040020507037001001700100004000009008820000733000", "00000200500900800300808500004001008000600402025031", "14000000079000000504260014007000070000000750226500", "00000008909241855706005008301850402088000881209055", "00000308001090440189009009600309001406000020670831", "00700544001306800073000003053006650300850940200048", "70053730931000000130942080008009728000006505500079", "04306390190074005000800190108010085600800270060935", "00606000442900230885590002067003405000060600001074", "00090005065660290807979192004533360040200020009000", "09450090012078800756703000981001000050000002880079", "00610585000050000206007944020082040600000760268045", "30000702401606090000006482040600060892140020025408", "06000166000450000500060040054050709001400080000009", "00000040009004044900000913010067046520009008060000", "02764077004230685601953027004470807878736000000007", "00080053030783004032005405030940007430300704900003", "55000000210901120009609000520107010260027040210760"};
    vector<string> customers = {"33 41", "5 49", "20 35", "48 8", "46 43", "46 8", "21 33", "19 3", "12 44", "25 6", "19 16", "0 46"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> roads = {"09008040000609460000008007080300058003001040050827", "00701300180000190003000670091456000006109008004070", "04027798007400120040000080400090692902500000236500", "09704000514009600056070860108001001301000407027024", "00900006877160065092074006060371010008080006074200", "98010000000099030600000010030003422000770401500001", "03279001001300000949761608030050200140650080000227", "00702000120030060470300001070128000090000399401050", "00010030009000790800107000801370940000300003000689", "80096009600402500205070003004080811007672920860000", "60010000050004590020080083980000003003002000500303", "07020080437000151035200605600000097000390009090050", "01200030000006000860000500009022001100100095200960", "00020004320500700001000050787090000700200850106031", "70051000107070000010066817003000967007070000600005", "64090367202800300020000000000000380000040380043000", "30900580209012300003221600676006863000600060107190", "14019906300014052001000096337520340970030600700494", "02000200100624021504008000054003087100000009000080", "00010029000000130090020031200185070050100030008652", "00806080000000100008000440530010090009050000002140", "00710058703061010094200040785030000870700105900000", "09060400316393312000580500540042020004529780007340", "10202404390109410505803003770006708300080500005002", "00027000007800166430003900092309099000005907090889", "00036040000065090708055850010006399262062001000035", "40268000000480207080200260000090011600028540279700", "00187306000003502900000040400000400000307100003600", "00500403070009004407600000000750000080018072040045", "09400770706100269000800098384074000500000070640920", "00019030307039029380010050745105000731009076000998", "60038399000420000000500820030500000166000080009003", "43004010200000000000050400105020000300302500930140", "06500541240098142077290019007002008036009007500600", "20236030703500205009000002000004020750020708104002", "55088004066203008020005809300091600000050758001900", "64095300100250154460101082865608009009300000681200", "00000070080782603102981600000200000470080701904010", "06067000760200012806106510100217000902040901550007", "00064048000400650000000800070000010000908640000604", "00082000630000003029008020819000450095020000010603", "00010219299004305010427810136260029403702000000000", "35060029740090006860752600000086544018004700570400", "87900004600090054700450000937002000141508490615160", "70060309460000000036091745000090000010000980030174", "00040007001000020000000000631600005500510700007261", "70098380680090000005021309003010097009000000000098", "19005002090020090000600000800702430009088061602036", "86092006206003260674030000122080443800006000700700", "95360050000019026000905300752004700770000047069000"};
    vector<string> customers = {"10 3", "20 31", "30 21", "32 44", "25 11", "18 36", "24 23", "27 24", "32 1", "3 23", "18 43", "23 5"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> roads = {"00900600006908240716050030450000510670096004069006", "00124710800000607000004450026800900080120000629002", "04009800000719009001936003000010006003010400004000", "10400200266090030328700009050002000384004010130009", "53030090600200209000009400009000040006007820005020", "07800000970660930010702006750026500345001000300800", "00002006000007805020041000200804008380203500505302", "67010050592909070368090080800049004600000964049040", "30600030030300000067007600000001080028020005075001", "00000021003508000030530406060300000670000000200100", "00706230490400611170070778780010052002000705090020", "03048300350067600007006489006110001402046002000202", "03038030684400004203003040808046058060983504039000", "00000008000400697004020000084520050602301070542303", "00090094721908008005000406000700153720606002063080", "90001030187030000040030188061804000002340845004345", "00490200349190000040909050004006400801020034040105", "89030000038480200010011602000002780070000108506090", "08821006010073074005300916850350560905702000005301", "61902060000901009530400000900000432176080080000002", "90360700600400000007006005050001200100030409007700", "02000500000606706053904200080023900506600001003400", "45000012285200503507010080000700063109050030700105", "07538300000805000000416002000008070000003000048046", "00090020008216000106601000009000000000358844105004", "08070000736300000060550000940320000020880003950999", "30002080908560000727077003040310240500002500448152", "06092000030160090694770600705200400400087893630004", "00420031070008600190000200200693100002410000065705", "53090300205075006041000502001000009000466000000003", "00085050700000300008209001700000005300148007500080", "00500000719704030060000058004100806500000007920008", "00080000005050400800008601030001029040840005110070", "60000875170800305000070000020681006004230070070009", "00206600030000729400008107071100000894460730165400", "00000581008006050008037000953250800006130001662440", "33770735000100080700008010120000079004307001018067", "92020400078060000000007081009600530440050000005000", "00039592003166670008054200850065081048009001000206", "70412020000070000480002008203000000900400803662100", "00009050201300020000796310706006900000290069160002", "70570080140707200578000292100090400000020080630100", "95044000900500908800504000806000006606370600002850", "11600500000400003900007026100640380960000000400702", "30500093080500000006401003070020635990400000020000", "01042600020080000008020285405000005060006040000708", "00902731030009895689070038405225004040000000720900", "06470000075015300609300065010309000000780600602000", "10073720000001068700906060050007830000272260500003", "00910000580006080917000080606000400723103250001000"};
    vector<string> customers = {"8 43", "12 34", "45 38", "45 18", "34 18", "19 0", "16 0", "37 44", "12 3", "27 6", "30 33", "24 36"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> roads = {"01706600003000034000010700020200260087300208600007", "60193802018427400909830000000490110036070050044603", "90000300010009103809508700503004600000434090406602", "00000500700000000402070242110009000910405808002009", "50000008810054707080140500897207100900000800500909", "06000004900700200360006080140604908009000909260790", "00009005050805006053467000107076030187120306004708", "50604900020010200308000102060330950000094000506003", "50487087000230000700300185040900000000057060860206", "60027700906450957710408004763895050700000009040000", "40040891070003002000009069600805081103607000005000", "06000078520003007058600000000005040800910031040047", "60900060146009709600903707000620004400905805700002", "01003190500000680202090000090000100031215505070073", "07081040800082005071620061800000000067090004908210", "07020032076000006056049210799021000202003005666060", "39000000640001010990050003509607036604480000208964", "36206010600070000067073422000000006704503000870004", "30478000500054002000040000670640090900900020110860", "09007009700000500000120017009004900904050106066063", "03900106130061705052004006950017050000000003000050", "00150700307061792039404300553300006997870000580709", "00000040880401000780200000009000004965620005607000", "48300337749052339710902000050060000076305011888520", "01084030250000441000009005000039003000173202928009", "00010512060091480110000070260005090007800000300008", "76200200870004000490060002010590190000638007075100", "04000040000406010000076310004901083007000000090056", "70090440008002520520502093380005000900000019640000", "80000601000301809020070002000000000910000000200000", "80400000000810080910090040500403683000000062702000", "07927110000130002200000004270080211770100000000000", "00570088950806000308552058000000002030059200749093", "03000052300800058005370708340200005702500005401048", "00000703905090000107002100900521500060000006001600", "08004626710640024000006860400002800020360090402000", "62009000000265106030690257931020000304852065100300", "80705300081100034000700905000108072200130906267003", "00070600200000027000029081006640570706000098920395", "21190000300130908009060094003060070000600400914000", "80024600034400000582900090350060330060800080800772", "07040000009739510200600605900000000500004095100203", "91700070558330368304808005000060000500970008300000", "00003000009920340000766804009004007415710000080200", "17080647020003806035610020610900090010009010070600", "00003010020000210200100000907000400000084698000002", "00000590656730091800400390002000900530700007510500", "00746490330000000770040509300700300000930020030024", "04860020075000810300492000000061046013224202079204", "57000010018738400090009360280991000318020690000000"};
    vector<string> customers = {"46 1", "35 45", "20 34", "25 4", "8 46", "0 27", "5 42", "20 44", "42 0", "33 36", "42 7", "10 13"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> roads = {"00000099106105043074030060100058011044807000245018", "00240090030748700000090366400308000190000040079370", "01005500004800050073005000700040600094050043010650", "00706623050000200243000006600000000400800000000007", "60000720078100890600079000904060000000807085450106", "00022000900001310903400161270600000022008861780100", "10000301090000061670080000000703070000000051004000", "00870000212030000537009904200012008506860958000489", "50000023003000909357710071030380083055600100002800", "00002300000575090970609000254153009034000008314550", "21245000000000000282102001140002002081740008100756", "50300049000002006300001000334261000680000403960011", "00406086600000587020860600009004100000700202000405", "08003030040000005360499420379196092800400078000201", "00041100205000000000505000890040000055923014807006", "00070610006097900004624207000000000700880808020070", "00260032000000150900907623002410039070600098000000", "00000046551019937090020500003030280009035500000000", "00001500887500003001600360300501066030003105900002", "00008030403200508040525700058072230060030000080061", "09906000060085010960081152010084400100470008004000", "00300581050000038002009105000040356703027000000209", "05020726105000900008400900040500020004507695600500", "03076000105018000080300056000320010002482094000000", "60010907604600900051857000490042020000490000190001", "00000900024100200009800730000389000204080808000000", "30701616000708040009006000020000042511542602004004", "01157684603374345040007000000185060050590078094000", "50080030000406000770550575090063030300810394100701", "00900101050880133703200106705055308089085448030008", "00020708314509890300060700007004701073000771432000", "70070209214900309500000000499000860770800070037068", "46090007050000840006010100200120030100090200191400", "03020000100032207004500020019092000000906750090409", "56066006036000482302003700006740000500207300724000", "49000904638100800000008000007048500081000006000700", "09608100204750140080505312009000900903000000400800", "91302345387001085000000000030980200000000974036208", "00010106101001805280005006660489000430000049090303", "96710004390301730010443600490095104002900970550450", "08008060000070204069000641306200800038100010905758", "80807000680017000405400030040931900060100000079600", "00000400001000000302082800007202000982000300003066", "01060109032000200300700000050660000000090200000002", "01571000004000040000400900001500000470606000002901", "80099060580001300000095000008030170009691004009108", "06050302800306000130300140705930430080010659000060", "07359008000306000490000004003509060020050580000000", "10762000020000800600030000004001206370670049300008", "75696000001700701030049000157300007060000013008000"};
    vector<string> customers = {"24 33", "31 0", "48 22", "48 16", "17 47", "17 33", "0 20", "49 3", "18 25", "11 48", "18 28", "5 2"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> roads = {"00676004107000000083010000500000070059400400072040", "30821005000800090000020320729084080230000005000304", "07007620000027007007050070029200705980003400950600", "01000600500970149802026066000510040017005006006930", "70730002110080000000300009090000740020032005080000", "31002004214363700842005860067400200070003800800050", "07001609372008001700034600030021024084006039002000", "00250050704017009800000008904076020023025008320090", "63604000050030008040000301300000005270000000409042", "60000700900206000000001077006000029003280600003603", "00500090000005006003025025018000020300000500000200", "80226020000044080007005500505100030100407844008030", "56050090901700400080087005000001090005700900320002", "80209330220600150001000010050000002200020040845070", "60890000400000090400005051009764000020000200080407", "56307800004509008040008050000078177600000000760200", "43006000500160060287340000098305087000000060300300", "00020060050096061002000702400610611350058080000083", "06809003109009600800805009124060000090040000042060", "70030007009057990000200000302050000000200707004430", "30008607007008030790000240002006004000306008007001", "81645005800000030800000091096720407067021771280030", "57060920000085001095400000062506910900410070510900", "00702000001000906000639000003008000040001501000200", "00804365049340424098001000400530903000008200000858", "03392000937148400000004930029004098882800427000053", "00039040010000000680540600003000000018000081600000", "19250987947990306508007904300102707006008094006000", "01491200900000694080900050000100176400000090900300", "00007300005607006467026605030000000001014613940015", "08000098030090590401000680000300006939030000530000", "08703900100600038700040040506100008057600003060000", "30000330003060033000005500030002000909848009731400", "08090001009000690000000703000600000004000820005000", "70050006620000067900100100800000700090121506000090", "77750019600002004647005770000834018040187602000479", "04059606685708336100853146230480010806200200582002", "05507600000000000010020670005040020760192000955201", "04302908000009895407800003582100800670007080083040", "02023620700000038300375084604000000300000010000806", "02600200020390008007020060348930070557000720300020", "03600000930000970189000762067300000000000000093008", "00010503050900000003508300600700100020109000040005", "60901004809604494001090780030707122043000040000098", "84050606000000052060610095076000700260002300000000", "08060300760929003010035641506002003439128007008000", "10092841402050800801400011060020286900080940000000", "00053302011006830700160900360005930390070800750000", "30038003200060210700900009852006000003075007000000", "00500070010202050700070700070050004005402000040000"};
    vector<string> customers = {"21 1", "40 22", "23 1", "23 48", "20 17", "3 9", "31 14", "23 8", "31 14", "41 11", "14 0", "44 27"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> roads = {"00076000138280600201017000006007002083604360000003", "70060030740709007707900400000509000003050000791002", "00085003099000700904001600000600006004076432401080", "09000009600052630001847000056001490010320000012057", "00910001084100010710084000000000020700770500006027", "00000031000807400055000000209306014400200009000000", "09000000183026073000599400020048003100090180003054", "77080080070000907000086002000000008010263490090883", "00052060050048044401000470004002090451000000060980", "51408000000900703000000963402031000046040003800900", "11040044000800840005050500809900044080600000020020", "00070060160000700012800894037020000001013010590005", "80200320900000006520070200000000400030070890005003", "07079000020000930180000400400034700000008659760002", "80205290006091070038180000078008100001900010907201", "50000203300080108080050370014004000200120009004800", "07002100000900050074950082104000095006704830000004", "01400050007010050042505047000066040008371850000045", "01000010000000020007001140320060686400000090200751", "24000300143008050100000606080023000000030006300561", "56300050006874700000000024050108580500000000009048", "20009000420004063590000000000000160563300580004006", "00090005090067406580000010000008020609010002000006", "80023000074002900565032000001004050000002000158896", "00905010500007044000750106000308000048100000006430", "00607608000700008000729200898001061600000980998800", "00074040080020070036010006006313408011099330209000", "09000300047451540073029000001534080000290203010050", "09800010952604001030004600000010075100080000000011", "40900000200009202870705520825000600800990000040020", "00742350000000705800000097090006000000903090060000", "08420007078063601030000018055000000040205400600003", "23746040000033000064530000250001045050000077200070", "05010070030900000470000000000010801020001040400004", "00099000008007031670360008070007560000020070010459", "00597060406004041401808900850020008028000003000990", "09042000034005071008004201001000007006902709063009", "06080009006002002096044000002500504060200022106004", "63030906480006060400634770800443657400000000815048", "00100750090034410600001676087005900500702008900055", "60060000000900040008956174020070020901040000013388", "00378090607001081400800002050740722014084008300005", "20015904065083080719002030000008000600030005010309", "09000102009060000003008030000600050951110040030000", "00004000006600000900100300025060065175065906075016", "00020300000034325080000008000000000005260000000003", "70330500503507908060050009070000000008000170000390", "09020002190100002700008504340217000000000308000093", "50006401010605084060009960050750352080090663711000", "08550018110499080220650008050006600390084111693900"};
    vector<string> customers = {"34 13", "6 2", "0 43", "48 5", "26 11", "46 32", "22 27", "13 22", "31 7", "34 46", "13 35", "41 10"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> roads = {"00007400400104015700901047980008740620060002300893", "60105720047001006005071060000400044760603401000030", "40000605530000630000185960100000080700264309200010", "16802500062408600609072120020010610005095410000090", "50700601267005430000660009056160059205307000230130", "62306064000000900818165004000000004000003000000800", "07920200000047605407070090090000004070700000000810", "90000000000101100500391004103090008005000057820108", "54641700009250004000514564340650701405009607090003", "93004009000099637600000008960280593070000480039506", "15014109090000200409020010702854500040003010355880", "09065050207010630000000020300007400100100003005609", "42489600500006107030040000740883000047000070080506", "70020039501800001007716002804070354084003000086400", "50506002070056083029903040040675075030010000030006", "70007210406400904044000800200100086001300701097150", "00700766000042000016000800629007000004113070200022", "09004000700000211004007601090007000706000070000812", "00446100070060050004000080000089304500400200100000", "00000990000560600000990070503191006043674000000000", "00000909502000004000035498020407380050097400004515", "07204606662084010000300000700006620005405785031186", "08958097306600240765000741408900026107085305440265", "50260400001500084090080003000400602240295007031000", "09653084040300077009807800030000070002481005080007", "25703004002465360730406060306970108528022220000310", "06961026208360000461000090044904000072055000000506", "20040094070000608000800000000133000875800780000050", "09000080940036800469061005020000200570300100581407", "01010076005000060400033000002056000220804030410110", "00507031330300043002903709040000490280100000530008", "07402000000405550067600500088000000080000000340000", "98000000520108890410900010307475007011009305079040", "29030000004034022108000310531066009965074201000700", "00009072000607907008008050970208000000760000000045", "00706999000201039089005160000006919050500700501000", "00076375070823005098900004550160063000002000000306", "08904205080840000000700004470029274300002002101071", "80300660502000037002000700040006089002041100044700", "06700509930603000000302703902000508500900400000006", "30800005023309015065300036053800204394800303609000", "00005009060096964080009703882060003000200000300008", "84897070302000057040560800306000000001170002690014", "00900009078230002000000005000290031000002600809200", "06000005906000004008400060008000070090000490020000", "00002074480009617400008035400050900010890092008001", "70004499309806000500605000536090800500500707000005", "07000093420202500600660751200000040070060501000000", "03943100030100700040077700889708600023020043400900", "01060307000409376262560009900909050800007109130300"};
    vector<string> customers = {"5 20", "24 7", "46 38", "9 28", "19 30", "22 31", "21 14", "43 18", "13 18", "21 29", "48 14", "5 13"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> roads = {"00600006950771000000008007043004009005090050100500", "60008020050000605000970990400900730696080202000400", "00040000003150910001976020060000025005200936800981", "97000020000000030000703400600008006090003008000009", "00000600290000014303005006000008005000000003003686", "40507012096909006003040080800000030601827500400321", "01700900070000694070500028087005302006060061300045", "00004100006900370000090000300000000040007900007500", "07009030000000016004003000079805077000805002228704", "60740000408004040090000001349052091030001000072050", "00007234200700403505300901200000000090500400134500", "00883228032007408000080000150700300800209000010960", "00000000200007900087020202946008900072607407021050", "00002080050600802305600000980004004006309000838000", "07600706007004000000083070200017255910004100105004", "41005947107060000060788140400590008000902200004070", "00014750410007860001000540000100860706000904520009", "00902706060850029000900060063034604210000006700600", "08048085700464012400005899504000000797010104360474", "44000920320005000900350503044440000000000102003000", "70180900070040620005027090030104971009100000410063", "50010800058000301000000100310000300410440050006006", "01087742000003000030700806080303700600000407080090", "70097260200000762100000006180030000000100036000009", "31040080006001099200411003807001109509200000005106", "00200804580706104000047310000500000540008050030448", "00951300300182418000000070001096409000003000050434", "00003008504000000049051004901030010900015600924072", "00000040070000000013002216100440000000002000001301", "20076240006000078055216000080060280020472205004979", "05019029170700540000004190057002808900028000000001", "92092095103000610690500052700740000708903000000908", "06002047060020400600060040505000038000400040203097", "71602900500009508200600055309000000060000710005096", "96012010578700309400000900004070430006309404700090", "00110003900020070330086610030051960004102010600097", "15900070898401009500900000750040204809179800005280", "00648004090010845017070003070270350500996306740020", "00800505095007050098105388020718000000040070014000", "50009000000000002540610031210300500807000300500000", "66040000004010059203021000000040037451080863010000", "91791000716100006000008608864870407926020000100000", "04000235803700023700250900970040300000611006000098", "30080090000004070440014110000006644123709000140040", "00003040000650000031000085457201097858000000000675", "63308400900040890070011630100000805130000000603801", "00002001081036000020064700050000000909050900070006", "50003780930080600003000001078600060034050008150058", "19000000800007200080080720560029200070053069061008", "18600102029001007009800590510750702400840940035050"};
    vector<string> customers = {"25 3", "20 16", "46 34", "9 36", "5 39", "18 37", "32 29", "29 38", "29 4", "15 38", "28 36", "13 20"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> roads = {"00520600080800000900605100389700004500089242000609", "00000200537603660209004010600009034010000000096000", "00000038800400400006930000000077003027000403000090", "72500000912300740060200006026097603001000000043080", "86580070009400070273000000200027007050501069000950", "34200019900900670000800790000440300646400658009010", "23080004430051000561776341702095340000090400000683", "00000130001090000016009604905000221000004460120000", "90003010000007003105099890050770000003309108003090", "47090600000002701740800722088630065100300006000990", "07000300700050010020705001009100000811097014080008", "04902750000024709006196800000051001310006020009007", "00540300000300030000304640080110000959003030099521", "00003208048100704207000000000030008102402800000000", "05800076970400000000276630340012003015592805040042", "00007810001358000715050008103005304480909000012050", "51800000000034000901500040050080054061000047103800", "00600705000200000030000790257005000090000381050000", "42079066278670020400200100000080280058000072888093", "80710001040109050000010103000197203001000400300030", "23800180000000004008006090509603306080007600081078", "60010000202004145429600020380000000580220200682300", "00030000009000060978980005190030006005070200067000", "08007300001070812100000000040000440005000230348000", "00105714550800090408808506300450650003000000003080", "00013392407510021800206080920959099100805801273005", "01938500003600005040646082000020020008100000707005", "20000100000505007900030900003702000090085085091005", "09039570009458009002007160000012046000009703007017", "03150000049200089307019007309008033080002327000007", "06001020088048008506088006005000602010910400670806", "54000106000766000010340268000500007067087060000701", "40002008700082000020030500090000072822030540800208", "53000070010130760030000000001005006230000811082220", "00020111980372971220400290094601000040000009707214", "00000703030770060903010070027700100003261099000700", "00008252150900070800088100246500200200000090160004", "50009000900060270710073040000086100040002000884600", "08000408070000020172905450154052000009008010902005", "80040057100040000330350660102499060938000111490010", "50764000650235204012090801003844080334370403083011", "05020009908080476121002500605303845000609000606010", "30035601855006051560000001010005402060005003000060", "01000401000866000002001140000087200004760060006908", "80003000073060004000050020105600003390000027077010", "08810672390001096000000000005350018000314604000902", "40070900096034080600800960000767012900708800000000", "00000009044066080430706102770000004090000303001002", "00090482070073007478003189004080000060083000009700", "00701100000000798500000239000728030283040000501000"};
    vector<string> customers = {"6 14", "6 27", "19 34", "26 30", "12 41", "23 8", "46 27", "5 40", "38 22", "2 9", "6 36", "4 25"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> roads = {"00050600009807608000506000020870950008800000060003", "90070200200007005100002200402220107704090007000480", "00000762800289039004050620950540217037830980008003", "07000800800006810900043000800010000000620008000301", "47200070018125855030800702458374370063070147090060", "04501001101055000430300926027100020000500873330004", "00002000096552078031050008100614020900160040330892", "00901410170410080089102010700329081000100894600030", "93004020060094005804600000361046100700200000000380", "01000000108507600069040080450300000110007010046086", "60302070000061000300085007800301730000000487090002", "60490887060000900067687080800087080009500050000008", "05040000000000000018200040410026062000405800027520", "06000000050990002048070670171060040000021100028701", "03209500500180000000000360908880000004230000438400", "50878100206000000088005900205062560430087750000000", "00207150180007200610800000040014005600300105470104", "00005507009490303000006050004690000730000220200000", "06050970029800066802000164009410700520909400009011", "00060798900760200000004730500509009005030490502503", "10200571009000961050000000066800105280007001904001", "99000059200040000000500006000000040100000002000800", "00005380060501000000040000980000800116030900500028", "80400853008010030006705090009000193630900397500049", "97007002007600070020709900601960000000060054000000", "00000293062002925006119080600903020004041200000050", "00092200800710604001530000000000026000501060706310", "60046000052045082190070030001400510040909052310000", "05000000000510030300750606400501004044099013000890", "06900900005000000080072800070060009460009060000000", "00443507854060005386035080001400880640900170062509", "00590000090789130009080005226000046940000494094006", "60504500000031000500305001072004060002090000000000", "06027050590006061044102000030506000086700000080001", "23000500007007060000090250020705010505006300090008", "40100562012022002028000600906207025053660726750000", "01050010900007180851550009009080051400422000080402", "90058040702108030022016000600006680000707010890471", "00216800040570070201235040310430000006056007030014", "20000000070206000090000060605020767908003700000924", "46102441732020301310004100000090002053210400507000", "04024110200500000050001400609795280000507030030000", "00007005034200049860300000630077000030011000808200", "02040600200000000080007000050000100417004080020000", "00004000060900258000030764009001507030000400000000", "33302447002800070003800040002040205900000843000006", "05750520308000000470034008824900017009601823000000", "79430063074015160009004800302020400077235062007080", "00170000683080700081000002010503564309400100080000", "30047180000806089350020402000374087902838096000200"};
    vector<string> customers = {"12 28", "13 16", "30 39", "43 13", "32 10", "1 47", "45 33", "1 44", "41 39", "7 10", "36 6", "38 9"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 34;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> roads = {"02750009068080400000600482556916050007900085604070", "80300102220037050060200250083062002008039000102509", "70009806005420000400000090007062000603016013340666", "33000012040590408004360000510100030090050009020934", "80010000509002440030602340152780001000092070080320", "06001022040050901000309025001000155000660092005000", "07248000260005003840830027008020000410303056020790", "02036650600440000480102000029207600070010000710160", "03098082000320088001050001068007040980060010000021", "08002505300000326970000020000066102950800900006439", "42600000470046070042000000020600064008964000001022", "90110060379050405304008050000060290500087401064700", "00711200091002030785000060350509120064420200020634", "59020105700000000539406343070302002000087000090000", "85000076000600000000007000870700240015007010805000", "80280601070002008010020400500890500030000590000080", "68378000000570070022050800000059801000000100097080", "08174000000000830026701009000002040066004009290009", "07103089900008700002650000000204080890200002002007", "10900000500008030700250080208000160900000000000007", "03780006043004008000018460017700000009000709400089", "00006860001805270300600607090000003027000023070807", "00704000000630879000090050000305430208000040003020", "38072660203009905010000015020017001100607808040908", "90583400870878070070001001020004000090060060287805", "00000900206704080352075000500007006204060188040006", "00350080508002200004600030000000101566220071905007", "70000600310600800070554000900700100744001080000000", "40350010010008007100016101800403070021103007500000", "81060041040631010602000018607040009000000040003500", "00890500838327000160600079020000000600079802090703", "20085046010707000016019700050800925040006005000007", "05040000072010390037187000660700080000450000600000", "00984400077700030805900081800064000005000706010001", "04004010001008038408020100938070400614900405280030", "00920005050508099000250000082904300036007300064050", "07090010000045062504680897990601000700202900000000", "70008000082080900405010565006049070070025050300003", "00000070106000002850200000060675004000050073300007", "08090000027070900100909917703010470098000000056280", "80000000747640203580909000030678240206060749003000", "75060006505049000008300008503108084080075033007200", "18040005065070140387806005306300806080808803448570", "54701099892091090040004564002600020015805070008000", "00380594009400201000008700402002308018334070040037", "00006093026093100160000015220085600907640041000000", "00300964094840690004120000020000879700001000000403", "00400087540000006061082040000005761112041000168000", "42600000009005060238900100853900460000900006700000", "50718402060013200004000997580505603070090049104700"};
    vector<string> customers = {"35 11", "1 30", "16 18", "33 48", "32 15", "27 4", "13 34", "19 31", "0 13", "12 37", "48 28", "10 25"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> roads = {"00001300003000600625000870800009261010900060335700", "00281340090906340600013100770000140003010023720640", "10000100510100900008098407001010504503009206020053", "46000000100601880000630000300000520000086052020070", "24000870000800000003818040007004204234002982905042", "01449060006030866900920001080001001588000080802800", "75065303050037200029900700001340000005208400060080", "50082000209044300902000604430331000305003200009682", "00000603018008700007005003245203000010005503130860", "54302020800060040002880068100003521000075001060850", "60406907030000000000080701040069000030100580030000", "00122000004003070507930909373000600050004064300900", "00002001004000220304430106000500400000413023205652", "03095020600000000826089009002007640220099751506380", "00066007020501000540600002950559500020510604386930", "00060000347000000008003704090107305005413001020180", "00166001000005000500142840023604080802300050070004", "43000208700509040014200000000020000069010044852001", "03420660050050060000300900890008707027002005265600", "80050807936000000600590206000905070000050083505400", "01702000800950021000000000000090600004691025061235", "24100015009000001110002051000708000007403105020050", "00009009050900460015020400602500060160085141300790", "09024000200980050470548000920900000142049000200202", "20282000046100600001091300720048000009050608601603", "10020300082000600000000060099700004450700000240009", "03790960009092030090380022000009607090670000007211", "02992070502706071900060000603098000000910000060009", "08066040000190535090101510000530000908000000500190", "50000004000004004608006008021010100020400039000009", "07980000082500515006007430520600207101074660807000", "52000543007800080247030589760020007000007030003006", "05000081000023583300007902798480000354027070007500", "60000069000070039089004800046000003702000106000730", "60020012600000000075005007400067500697409043400300", "00840002004000008348571744005414899000505405009569", "00600041380900727003500000270000607400040600013001", "14374000080804800099901008002410002900047000663019", "00050000300500068070712429000400230220070030000500", "00526033407300520900340000900700503009400090006800", "06000052037300870606506535040490806000400100400606", "00903425660730300100010001247000081360009088075003", "02085007086088001000003048130005500034000604822000", "00008106006000029004905277287200402003034210007504", "00060204300008005000008200000000010007090210077540", "00091000050023003074000020324393000110270309009060", "00500250023000080002060900030000040006080096900100", "82800400403570609009150380080000128000690000027088", "00039000000000000084186519000077023006300300030704", "03000030020309944000052090074079007098630180000000"};
    vector<string> customers = {"14 35", "36 3", "13 43", "14 47", "9 20", "6 0", "27 28", "27 49", "15 8", "26 43", "21 5", "5 43"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 35;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> roads = {"00001000978008002019000670700020040700400780606088", "80030800459080000200145404000590380590600250007100", "00020000000061670000010609027060818704000000500000", "03202000000080063253080200001000001910009003344023", "27300100802808009005920000900000005900601970050035", "70709013000060365910000577001550306491107620707008", "88400000000050060080000750004010202000000068040570", "90270170000054954053008409706058477004100350000004", "06030050080090033030800010057004040000126706090700", "00000878004070513900626700646404009000042080272500", "60004806000506070506006027072750005130614306708560", "11900002501000000430000008031459027704400005001971", "40006252050107011030400010999004000080007360050050", "00007096001070080908430010200321663661800006800050", "38907000188000001033320904004400360068080050306008", "00000010092305107100200008300043040000900810106040", "10000085001308000500661528778900100100000602007600", "00208500330691000091079000080045000900000330067000", "89871100060656000007600549974040014060000096907070", "00730330740009755600001100032600801480800000066120", "00706040100249000209090820070000050052396707950000", "00710241000800000202000006001018746005460600085500", "00180000000930300000800850408505203287033200010400", "00000005470940945090404008074906208503000030190310", "90051109300607170560000008706030503060400070095318", "60990050070602300000070020009086200000070800400001", "90002000000006910102004500005000020000041005007062", "07315008320000340523350000702020060735906004400004", "06100905053009030600558306400520261900078004005075", "06208002530300806800700004007020700000208399000506", "93480065085407098390000060037004000069085500092900", "10000000200801000000081007040900040080297020250970", "00856906080001574000000690055030000301307062499600", "00102353201000000345071600003000500400000100175031", "55057000000000150000994000430007000007080006025071", "09800005010090040000809026069001249008023007000708", "08005507050400096060421000061053110800506070090000", "00000201103001500080010811850200083000200383000606", "00002070007050050000020009000606496816040008703209", "03901533670009600070000601906900000070009200743700", "47080018925000901559200067120000807010050230005016", "60018002800900070530004025000256000640029000039002", "05060006040001600350000700006090006002002000000090", "00000600002100005040000060000809000305021710530700", "00103000900006004600070000010009000880080809000700", "08400504801096000671700980100003980000990000508000", "40010508000404004900010038342453400407009000230001", "50004665140067900000090040021597000046990001000080", "00070060501006139030903002000000500000008304748000", "03400009020696210008005504033180078208300700001090"};
    vector<string> customers = {"40 32", "0 29", "33 24", "2 14", "15 47", "21 42", "19 48", "42 34", "4 49", "31 23", "33 3", "39 0"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 31;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> roads = {"00010400020020007038007990980060080005600642200051", "00002900000166061830905000860701007004200003000090", "00053605004090457460000750898007126099100380031065", "00008010008000045003832000040000059070060036081007", "80500067000681006070300005000000000833900070090007", "94800000000020866630058080402057033034006000536065", "05300105100630300300003039000074010500000060003090", "64043000000501050000040036209090058409003957066009", "00052000007067100995060903409503705006003908520040", "08000940100000070090090000180024050001060040500486", "30462061090000660350257003000060005758902008004001", "19400000508007700006503554600784480005002317000908", "01001180086700801040060029600900074113010023060040", "03100403062000007970822650004040800050009001505703", "26995000600054090468080709000812069002036086200303", "00401302001030002480300909050209331003000001000059", "47071040250950670750989009000800604080400002000530", "00716443401060299000000300500083108000087022405099", "06500670389000005009033000000000030500000046145900", "00007036007636000010009900022500016418800194009000", "38240700000003001002000670005700500000800090047102", "00002502405001000008000300020200901202090909850360", "00070200050001085640610740053600000020448640080009", "09590025293020080628315000422040007043507140000000", "00000000650010008009000109778300930005009326000000", "50499405208706470930074800243404065520640990096702", "20630024000990050677050005020800000300069800070010", "42080843002160010090611630003350040000548680000517", "70980055640640030000590080670076100100090344304080", "09990202510009404220800008009060710000503600000304", "40000990000910000070100008070207400000300000009090", "20000500900000085201300000003800300030000593900000", "81006000400810604407057061050007000009200000063020", "02001009002000200011046317006078000600070600001008", "80900005807020002379080006003230000000700000003005", "06207660907006000600040600021050502040001400003000", "03000300400408403812002070109000259002000000228212", "71000007100200209100025700010330090000904276600060", "90100010000029407008360000406000059090000050000000", "80003520090045006957900008954003098200200005870304", "00031000000000035000100304000001000060000098089000", "00000600400108020003003109000700001000003003950000", "00709506300560006003953001003628897600008000130008", "09300076002000000130347200050800509206868340008004", "61504078707000090030002040157020060000000000000700", "02080033000100808050000080762001230200107979605020", "00043007089600190092584350000284034390000000600380", "70001809740584005023600000000360020080010600050003", "90050000600053600103007805000108385608205074000000", "49094107000073000600100000609080050986100070377900"};
    vector<string> customers = {"26 5", "40 22", "3 41", "38 42", "29 24", "19 2", "42 44", "48 41", "11 8", "37 20", "35 5", "44 9"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 36;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> roads = {"09001701409004801011869058807052001000090000603007", "20630525060040008362530000000004000090660006503050", "04000460040050000005000001010500091207983000423000", "39409005400000490076010010199100000000001021020386", "79030010507051000001400734498890000090272002000509", "90601005000810022000405901100085000600000500177030", "08000000060000030070000201130061086060000008000300", "10008000807100305006401009000901000050092000030060", "30001008080600430089300700006007004080002009000010", "00000001007040000000780010132005055400025050000920", "20705080000008000000037813406810080061701020000000", "00100510920000106000601160041500176503000070040600", "10000506600003407000596090000000000041006704600540", "00918917320400900036400800790040341200007005283010", "08098009000095003701811050000880900020309064052505", "10690007057930001434200000040664052754350005020705", "57874000400020090034000235003009100902000095000000", "00000711020609487030060290000002060005010930708900", "50000466006347100700010000507090600710011390009000", "09000375800036600970030060730051806009000360409209", "03042400090030000001000700800000010765410090465709", "50000220000000334044000000010000094381700859840900", "07100050000100390060070009100049200559011091050365", "70200580100790280000010000202303080790910024078904", "00010002500900000047020009000000080019430342100000", "20097200003004051048510000074000008309000007857860", "00000000001000090000009000090815107090500028002000", "08409949214000000680009560000200032705800400003031", "00050030970660000000500005030500050712030355806002", "60076080050103007803020091200001073000200405060663", "90002030000640390200059000031201016002019500000140", "01000020080001010801068000967770080597000780100590", "10530000793360009000366081700000089007060006000015", "80032900063001000610001900008405004008070700030760", "82804090750008960018000060070020070001803808049700", "40315151000900000023070000650999007000634000082000", "50800909400705990007315240105065000200720721037038", "04500400007540705986000204180070000000030080606402", "10007020009504240000560000830002006220063702820800", "02600070021040270500461091000609090004500045000020", "90800800583000000260000035028708600650070649002988", "06000700530300006002002200463005846000690090815000", "00090791043000001041050724580264000000000200820860", "00086306001100703000000020744303186350694400700609", "80380025802060610045082000624002048457003480000091", "00209000080000249300700301760018080669260060007300", "03700015065200200808122000000300920090650599100100", "00050506000041902707200689005900090101000801009001", "01004700050003107795110084407900554312002680046000", "21503792009800000500056400008681508780212390080000"};
    vector<string> customers = {"46 20", "1 43", "38 22", "39 5", "5 18", "5 41", "1 13", "48 10", "34 31", "12 15", "37 0", "24 42"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> roads = {"07", "80"};
    vector<string> customers = {"1 0", "0 1", "1 0", "1 0", "0 1", "0 1", "1 0", "1 0", "1 0", "1 0"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 60;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> roads = {"09", "50"};
    vector<string> customers = {"1 0", "0 1", "1 0", "1 0", "0 1", "0 1", "0 1", "1 0", "0 1", "0 1", "0 1", "1 0"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 56;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> roads = {"053", "708", "250"};
    vector<string> customers = {"1 2", "2 0", "1 2", "1 0", "2 1", "1 2", "0 2", "1 0", "0 1", "2 0", "2 1"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 37;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> roads = {};
    vector<string> customers = {"0 48", "0 49", "1 23", "1 23", "49 2", "48 1", "49 0", "48 49", "35 25", "1 0", "43 47", "43 6"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> roads = {"00020251090265906661", "00763002550100090081", "06003699000080062771", "00000710460400035310", "50000039119198350060", "66060004050810046028", "02333108565000200880", "40212560000209205231", "02601150098329905062", "00210383709951005203", "10111087340780827070", "05065800003095040140", "15604020082000100090", "83430030070580600750", "10588355007006001150", "14400080790005400536", "23400990400933060004", "11053016300602000090", "90040920084059282502", "61300007077904050900"};
    vector<string> customers = {"0 19", "4 16", "15 16", "4 18", "2 7", "9 15", "11 6", "7 13", "19 13", "12 19", "14 12", "16 1"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 33;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> roads = {"01000019", "10100000", "01010000", "00101000", "00010100", "00001010", "10000101", "90000010"};
    vector<string> customers = {"2 3", "7 0", "5 0", "1 2"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> roads = {"095222800320504", "107600288090501", "760973530769345", "963093337510830", "338404069255826", "291700050155264", "002783031709004", "404730701707712", "068870030090995", "320025180036103", "468695042801904", "233626561000105", "070014432197086", "887301000143802", "230852749990330"};
    vector<string> customers = {"12 3", "7 5", "12 7", "5 3", "7 5", "3 12", "0 9", "0 2", "4 0", "7 0", "12 0", "12 0"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> roads = {"00020251090265906661", "00763002550100090081", "06003699000080062771", "00000710460400035310", "50000039119198350060", "66060004050810046028", "02333108565000200880", "40212560000209205231", "02601150098329905062", "00210383709951005203", "10111087340780827070", "05062134156067040140", "15604020082000100090", "83430030070580600750", "10588355007006001150", "14400080790005400536", "23511131516546060004", "11053016300602000090", "90040920084059282502", "61300007077904050900"};
    vector<string> customers = {"0 19", "4 16", "1 16", "4 18", "2 7", "9 15", "11 6", "7 13", "19 13", "12 19", "14 12", "16 1"};
    TaxiManager* pObj = new TaxiManager();
    clock_t start = clock();
    int result = pObj->schedule(roads, customers);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=10003664&rd=10671&pm=7633
********************************************************************************
#include <vector>
#include <string>
using namespace std;
 
int g[50][50];
int cs[50][2];
int rn, cn;
 
int cache[50][1<<12];
 
#define INF 0x01010101
 
struct TaxiManager
{
int go(int loc, int mask)
{
  if (mask == 0) {
    return g[loc][0];
  }
  int& ret = cache[loc][mask];
  if (ret != -1) return ret;
  
  ret = INF;
  for (int i = 0; i < cn; ++i) if ((mask&(1<<i))) {
    int d = g[loc][cs[i][0]];
    int x = g[cs[i][0]][cs[i][1]];
    ret = min(ret, x+d+go(cs[i][1], mask^(1<<i)));
  }
  return ret;
}
 
int schedule(vector<string> r, vector<string> c)
{
  rn = r.size();
  
  memset(g, 1, sizeof(g));
  for (int i = 0; i < rn; ++i) {
    for (int j = 0; j < rn; ++j) if (r[i][j] != '0') g[i][j] = r[i][j]-'0';
  }
  for (int k = 0; k < rn; ++k) {
    for (int i = 0; i < rn; ++i) {
      for (int j = 0; j < rn; ++j) g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
    }
  }
  for (int i = 0; i < rn; ++i) g[i][i] = 0;
  
  cn = c.size();
  for (int i = 0; i < cn; ++i) {
    sscanf(c[i].c_str(), "%d%d", &cs[i][0], &cs[i][1]);
  }
 
  memset(cache, -1, sizeof(cache));  
  int ret = INT_MAX;
  for (int i = 0; i < (1<<cn); ++i) {
    int c1 = i, c2 = (~i)&((1<<cn)-1);
    ret = min(ret, max(go(0, c1), go(0, c2)));
  }
  return ret;
}
};

********************************************************************************
*******************************************************************************/