/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=7476
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class CDPlayer {
public:
    int isRandom(vector<string> songlist, int n);
};

int CDPlayer::isRandom(vector<string> songlist, int n) {
    int ret;
    return ret;
}


int test0() {
    vector<string> songlist = {"BBAC"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> songlist = {"BACAB", "BCA"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> songlist = {"AAACBACBACBACBACBACBACB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> songlist = {"ABCDEABDECBAECDEDACB"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> songlist = {"ABCABCABCABCABCABCABC", "ABCABCABCABCABCABCABC"};
    int n = 22;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> songlist = {"AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAA"};
    int n = 1;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> songlist = {"JEDACABCDEGF"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> songlist = {"ILANOONAQIDEKCHPMFBLGJJBLAFPKQHODEINMCGGNMLHJABPOF", "QEDIKCGKAPJNLOCFMBQHEIDDIQHMKCFLOPNGJABEEOLCMIKQBP", "FNHGJADDGJHKQP"};
    int n = 17;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> songlist = {"PNCGHLIKJDBQEOMAUVVUAMHWSDFPIJGCLKNTEQBROORBSHCGVJ", "UAFNIDLWMPTEKQQKIPCMFVARJOHBNUSGDLWETTLQMPNFHRKBVO", "AJUWCSDGIEEISAQCFBRLJNWVOHUTPKMGDDGMUPSRHLIQEWNJCV", "BOTFKAAKODWVMIENGSQLHJPUCRBTFFACUPINMHWQDVTSLGEOBJ", "RKKJGOIWDUTLVMQAHEFSCNBPRRPNCFTUVJLDAGKQWMIHEOBSSL", "HTINMGVWKAPFUCDRJQEOBBOJSVDFGLAHIKWPNUCMRQTEERQIBL", "OHPAKDGCVSNFUMJWTTMJUSIVEKPDNHGCALBQOFRWWMFGSLUNCD", "QVEATBPJIHKORRMKHGELWFPVNDSQTACBJIUOOBIJEQFGMWHVLR", "TKDPNASCUUCSEOQVFTBWGDRMHKILPNAJJPIWGCKVOQDTREBUFS", "MHLNAANLCIVWFPRUJOTKBDEMGQHSSNQMLBDUKJOEFPHTVCWARG", "IIGANTUMBJSKEVHLOPFQDCRWWRKDQMVEIHBGOJNLUATFSCPPLF", "RKDVIEJTQGAOMBNHUWSCCSBKAVFMJQTOEGPLIRDHNUWWUSFRCK", "LOMPTAENQJGBDHVIIHUGJANKECRBMTQOLDPFSWVVWPITUJCQKR", "GHANDLEMBOSFFSBMAKNDLRHIGPWVQJTEUCOOCTAGJHDWKBSNRP", "VMLUIQFEEIQWUVLRTOBSGNDJAHMCKPFFLWCMAVNODUETBRQGSI", "JHKPPKBIMRFQLCUENAWDOTGVJHSSVJBPWNUACEQFGIODMRLKTH", "HTLNDWOICAERUJQGPKBFMVSSGTPDLWACUOMQENIJHRBKFVVFPJ", "RQMDGCATSUOELWHNIBKKINDHFEATUCOJGVLRMQSWPBKPMQICFV", "BDULONHGJERASWTTSDEJMHONUPVBLGFKRIQCAWWTCHLOFMGBPV", "UNKDJSIREQAAWRFMPOJVDCBGUQKHNSILETTVLINFHUDABCJQWP", "KROGSMEEMUBIRVADTJKCFLPHWNOGSQQEBNMHAIJKPORDUFLCTV", "WGSSGJCFHLURDOBAPKTINQMVWEEPVJTIFRHDAUOSCGBLNKQMWW", "QBTGFASPUJDRICENOHVKLMMSQIBNAFRGPJDWVHCEUTOKLMSLEK", "RWHVNCGQPJAFIDBUTOOTKBLGEJPNQHSVCRWFMIAUDDAFVMOPRN", "TGQWEHLJBCKISUUPIDQFTGENKJVROMAHBCLWSUPBHODGTKVIJE", "QFRNAMSCLWWUSONIGHBQJRPTEVFKADMCLLMSDTFJOQPBUIRWNH", "VGKEACCVEMGWRLQPJFHUSTONIDKBAASDGUVLHRJFKOPWCTQMIN", "EBBEMPGADVSHORFQCUWLTKIJNNJIUSLAMWHFBPVECDQRGOTKKN", "ILJFEWUPHBDCMVARQSGOTTOASLWVHNFKDUIPEBMCRJQGGRCMSL", "IEPFDAHWQUNVKTBJOOJNVLFWQEPTDAMRSUCHIKBGGBFIHTCSRE", "VNLQWPDJMAOUKKODMVCPTHFWBEGNIQSRJALUULAQVNFCMWHGOP", "BKTEDIJSRRJOPCEWUVMNLKBHQATGDFISSDAUTOVLKMCNWPBEJR", "HQGFIIFGSHRLMUPTNKDCABVWEQJOOVWEACLMKINTUPSGQBHRDF", "JJFDABKEGLNVWTMSUCOIHQPRRPDFIUENTBVMWLGKAHSOJQCCQR", "MSNAKGTPELHDBFJIVOWUUVIJBTFNHCMPSAEKDRGLQOWWQGFRJA", "EHCPTBKMSVUDILNOONLAJUSIPKQEBHRCTVGFWDMMDNARVLCBSF", "EIHGKPQTWJOUUJVTAKNCBLDRFEMSHPIGWQOOQIUKTSDNFCAVRL", "JMHEPGWBBWONTUJCVDFQIGRLKAHEPSMMWPNOVRCUGTBJQIFDLK", "HEASSKEHDBORNMJPUTWCFVQGILAACIFKUMNHBVJTSDEWROQGPL", "LCQKRSEHBATIVUFJDWPMNOGGCRLWJDKQABTEPSFUHIVMNOOIMV", "SACPETFWGDLQBKURJHNNIJEAKBGSFVHOTWPLDQMCRUURJMBDLG", "IVFCHESOKTAWPQNNWPADBVOCEISGKFMLHTRUJQQMTRFDWSCNVO", "IKGBLAEPHUJJHPIFKLSGQCBONVWRMDTAEUUEADKWQHBPIJCVOM", "LNRSTFGGFINWLCMPHKESBVUJDQROTAATNDGBQPVHISEFLCUWKJ", "MROORUJWSFPTAHVIEBDGQLCNKMMKUCFIORPVHABQWTSJGEDNLL", "OEGRJATFICUHPBKWQMVSDNNDGVOKFPJIHTRCEUABLWMSQQAJBL", "HCUVFDGIEOSRKPTWMNNMPTLQBIFVEJRCAGUDSHKWOOPKHUGENB", "LVSIRFCJADMTQWWQCABJPVNHSRGOIEKULFMTDDRAUCKGVQJIOF", "HSWNPELBMTTRBPSENFDJGKUOQIVHWCAMLLMAONHEIDGPKWSJQT", "FUBCVRRVLBDTJOHIGCMEFPWQSA"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> songlist = {"KHDFQIALMCJBRSPUBFCOLIKTQPDJMENHAGRSSUCETOKPQHJFAL", "IDRBMGNNGCAPTHLFJSOQDKUIEBRMMABECKQTHGOULSDJPFNIRR"};
    int n = 21;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> songlist = {"URJPKFOHMCGTEDALQSBNIIGPSWTAHOMJLRUKDCFEVQBNNVQAMO", "PIRHKGSTWLUCJDFEBBEDOJUALSKGTNRCPIWQMVHFFHBQWRPTNL", "SECKGOADUJMVIIVAJOHNCESDRLWTPKFBQGMUIUGKBFNWLAHDES", "OCTJPRQVMMHWRNQTCABKLDGEOSFUJPIVVIJUSEKHLBANCQMTWO", "DGRPFFPVJWOTMNHIUSCAEKBLQGDRRLGQPVBHAMOUNECJIFTWKS", "DDWKNAJBQEUOFVCTHLIRMPGSSGMJNQHRTBUEWKAOFDILVPCCPL", "ITWHSBKNOUGQJAMFDERVVRMDIJHQONUCLWTKGBSAPFEEFBGSJH", "NOCVDLKWTIRUMAQPPQAHWRGJLVNTDKOSEICBUMFFMBGWVETKNP", "JDCRLSHIQAUOFMIBVGRCDPJKONHTSWEQLAUULEIMJOKVPCFGNB", "RTHQDWSAAQFDEHMRLICGJPOKUNTVBWSSWFITKAPRJVHMCDQGOU", "LNBEENOLAPGJSMRHTQCIFDKUWVBBVWUONHGLCQAMRDJSEITPFK", "BTPSICDQHMVNUKGEALJRWOFFOWILQVEGSUKMNTPDCAJHBRRBWJ", "MFGKDNUQAHVOPTEISLCCOIQTKMVUFWGHJDNPRBAESLLREBJPUN", "MQTKOSIFVWDGAHCCEOPDIHLJKVUGMBTFSNWQARRDQWJBPOKGML", "IVUCTHFNSEAANSWTBCDUJLQOIGEKPMFVHRRFVMCSATJLNODWBI", "UGQPKEHHMKQUWFBSVDLJARNICGTPOEEOPCRQHSVJKWNIMABLUD", "FGTTUFEDHQJMRKNWSCOIBVPLAGGELBVJQKSWNOHRFUCTDIMPAA", "SMBDOCHFGJKVNTQRILEWUPPSKILTFNDWCABVJMHQRGEOUUNELQ", "PMJWBADKSIFTCVRHGOOGCPVANWIKQFDBSJLMUERTHHUREGMIFS", "OKBVQANJWLCDPTTNHWRAOSKVGDQBUIJFMECLPPLKQJFOISVRAN", "CTUWBGDEMHHNQBFIJCOVPTLKAGUWSRDEMHDCSIJLAGPVTFWKNO", "UQMBREEBSMUWHJKPTVNCLAQIGFODRREIBMWHCLKFVQUANSJPGT", "ODDSTGWJFBILEQRKHUVCMNPAOOAMVDUFWLRBEGSIQJTKHCPNNK", "MHBJLDSAOWUEGIRCVFTQPPFTSVCREONHKJGUAMWILDBQQWDTUV", "RHMJSEFAKGNLOICBPPBCIQLDFKVJSOHARGWNEUTMMUNGFAIHOJ", "KRCSDVQLPWEBTTOEGLMRIACJKHPNQSVFDUWBBUTERMNGJDIPAQ", "HLCOKVFSWBSITOCARDQEFMPNHGLWKJUVVJHDIATMNFOPSQCEBR", "LGKWUUWLBRPQVNFOMTSADIEHJCKGGKHJOSIAWVBPFQTNCDLERM", "UUMSELCQOVADBJPWKITNFGHRRHNUDVJCQSALBEMPOITWFKGGFO", "IRCAHDUBTSVQJMNEPWLKKLPSCQVODUHFTAMGRBIJNEWWEHIAUR", "PJKDFMTOLQCGBSVNNVSWLDOPTBHQKRMJFAGUIECCESUDOFNQHB", "RWGLIKJMTAVPPAJELFKWUGQDBCIHSNRMTOVVOJMAFPLUQKTHGI", "CSDNEWRBBNSDFCQIUKTJPMGHLOAWEVRRHEWAOIGJFSTPKBNMQU", "DLCVVRDHBQMGKWJAFPISTNOEULCCUHEOVWGBPTNQJFASMIRDKL", "LDHVSPWTMQGCOBNFURAEJIKKHJDMRUFNQAWOSGBCVTLEPIIPRH", "UVDWOAJMQNSGFCKBTLEELKBCIDPOHGMAUJWSVRQFNTTNEWRHOJ", "UMA"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 21;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> songlist = {"CBAFGGFACHDEBGHDFBACEEGADFBHCCHADGFEBBCDGFEAHHAFCB", "GDEEDFCBAHGGEHFBDACCABFGEHDDCEHFABGGCAHEFBDDECHAFB", "GGBACHFEDDFACEHBGGBACHFEDDEHGACFBBFDAHEGCCGEFBADHH", "ABCGEFDDCBHEGAFFACBHDGEEFHGDABCEDGCFHABBHEGACFDDCH", "GEAFBBDEGHCAFFAEHBGCDDCFHEABGGBAHEFCDDAEBFHGCCGBDE", "FAHHABDEFGCCFEGADBHHBFAGCDEEDBAGHFCCFBEAGHDDHCEFAB", "GGBDEHCFAAHCDBEGFFGHBECDAAHEGDBCFFHBADEGCCDEAGBFHH", "FBDCAEGGBACDHFEEADHBCGFFGCDHBEAAEBHGFDCCAGEHBFDDFG", "CAHEBBCAFGDHEEDCGAHFBBCHGEADFFDBHGCEAAEBGHFDCCDFEA", "GHBBGCAFEDHHEFBCGADDGEHBFCAAGBCEHFDDHEBCGAFFADCBHG", "EEGBCFAHDDEAHGBCFFCBDEHGAAGCDBEFHHGCBDAFEEFDHBAGCC", "FEBDGAHHCEDBFGAAGCBDHFEEHADCBGFFACGEDBHFDGECHABBAH", "CDFEGGFBDCEHAAGFBDHCEEDBFAGHCEHGFCBADDBEFGCHAACGDB", "FEHHFABDCGEEGCBFHADDGEBHCFAACEDBGHFACBFDGEHHDBCFGA", "EEGBFCDHAECDBHFAGGBDEHFCAABEHDFGCCGBHDFEAACFBHDGEE", "GFABDHCCEGHFADBBDAGCFHEEDBCHGAFFGEBDHCAAGEBHDFCCFB", "HGADEEHAGDCBFFEDGHABCCEADHGFBBEGDAHCFFBHEAGDCCEAHB", "GFDDEAGBFCHHCFADGEBBEDGACFHHFGEADCBBCFGAHEDDBFGAEH", "CDHEAFGCBBCFDEGHAAHEFDBGCCDHEFBAGGHBEDFCAAGDCFEBHA", "BGCFDEHHBFAGCDEEDAHGFCBBCFDEHGAAGHFEDBCCADFGEHBBAG", "EFCDHHDBAFGCEECADHGFBBEGADCHFFBGACDEHHEDACFGBBCDFE", "AHGGABFCEDHHCGBAFEDDHBGCEAFFAEBDCHGGABDEHCFFBGHDEA", "CFDHGBCEAAGFBCDHEEADBFCGHEHCBADFGGFCEHBDAADHBGECFF", "CAHDBEGGBAFDHCEEBDGFHACCGBHDFEAACFDGBHEEGCFDABHHBF", "ACDEGGEACDHFBBFGCEDHAAHBGCEDFFDBHGEACCADHEBGFCGEDH", "BAFFGBHCDEAACHDBFGEEGABFHDCCFABHGEDDCFHAEBGGEHBFAD", "CCEBDHAFGGEABHDCFFEGDBAHCFEAGCDBHHGDACEFBBHAGECDFF", "DEBAHGCCEFAHBDGGEFACBHDGHCBDFAEEACHBDFGGAHDFBECGEB", "AHFDCCEDHAGFBBFDHEAGCCFGBDHAEEHDBGCFAACGHBDEFAEBHF", "GDCCHEFGABDDBECAFHGGHBADCFEEHAGFBCDDCFGABHEECADFGB", "HHGDFCEABBAHEDCGFFABEHDCGGCDHBAEFFEHBADCGGDHFEBACG", "ABHEDFCCFEGAHDBBCHFAGEDDGCAHFEBBEHACGFDDFBCAHEGDHF", "BGACEECABDGHFFBGDHEACCABGHFDEECFGHABDDGAHCEFBBDGEH", "CAFFABDGECHHFGDABECHEBDGCAFHCBFEGDAADFEHGBCCDAHFEG", "BBGFHECDAADCFBHEGGHBCADFEEDAHBCGFFGAHEBCDDCFEHABGG", "BCHFDAEEGDBHFACEFBDCHGAABHCEDFGGFHBACEDDEBHFAGCCAB", "HGFEDDBCAGHFEEFHACDGBBDEHCAFGGFECAHBDDBFEACHGGACBF", "EDHGDBFAHCEGCHAEFBDDCFEBGHAAHDBGEFCCFEBDHGAADHBCFE", "GACHDBGFEEFADBGHCEABCGHDFECHBFGADDGBEHFCAACGHBDFEE", "GCBAHDFFECAHGBDDBGECFHAAHECDGBFABFECDGHHBDCEFGAAGD", "CBFHEEHBGCDAFFAEDGHBCCGHEDFABBADCHGEFFGAHDCBEEFHGD", "ACBBCEHDFAGGCBDEHFAGDCBAEHFFAGEDBCHHCBGAEDFFBE"};
    int n = 8;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> songlist = {"JCHLASEFGIDBTRUWWRTPOHKFEAJLCMSQDGVNBXIUUISVFGEJOR", "AKHMTWLDCPQNBXXBNPUWMSHILEKVATRFOCGDJQQGDUCSERTNIB", "OXPHMWAKVFLJJLVQIWCNHBOSGUARTMXDEKFPPFKEWLOAGIQVCH", "UTNBRJSMXDDMSQJUBRFCHWGPAOIVNKLTEXXTLKURQADFNGOCJH", "SIPVWBMEETVOAISJLFUWGQNCHDBRMKXPEVMRBLDPQJNAUFWSOH", "GTCIKXXKRCBGHFSNLVOUJWDQEMPAITTIJXGEDFOLBPKCMWSUQV", "NHARRAFUVMXOIPWGBKJESDCLTNHQQHCBLFESJIWVPMOKUTGDAR", "XNNXTODEUQSCLPHFBWVJKMGARIIRBEWFVSXLQHJNDPCUTKOMAG", "GAMSIJLNBDCKHQXVREWPFTUOOUTJELBKHXNQVWMCSRIDGAFPPA", "KSUILNVJEWMOTQHCXRDGBFFBGRNOTUMKPVCLWJIQHASEDXXDEI", "QVJFUTBMPKCNROWGHALSSLAFNQRBDUWXJIPKVMOCEGTHHLQMJK", "PSFIXAROBNDVUWCEGTTUCLIXBHNSFJRPADOKMQWVEGGPUMHDLF", "BRXSACWNJIOVKQTEEIQNGSMDACBLXPRWOHJUVKFTTKJCHPOEXG", "MBLNADWQRISUVFFVICMBPDEAGOHQNLSWXRTKJUUKTLXHBMQFVG", "EWRNDPOASCIJJAOWKGFTMRLHVPQEUNXBDSCIICDLWNPVQRAFEM", "JGBTOUKXSHHSXBDPTMJQEAVFCWGNLIROUKKMSDLIQTHEVPGOWA", "FJNCXBRUUMBKDAJLHITGQPONVFEWXCSRRSXNWEGHAUPQBJMIOV", "FDKTCLLCVBWXIRNHQGEPSJAOMFUDKTTKPNOHAEXSIVBMWJRGQL", "FUCDTCWFQGAPJMBRVEINXOSDHKLUTLKSPIRNBUCVFEXMWGOAQJ", "DHHQJLXSWPVRFNCUMEDBKGOAITTLABXKPQCSUONVFREDMJWHGI", "IHOMJCEQVPTNADFKRBLSUWXGGIOADHFQKMLTPNJEXRVBSWCUUC", "WOEQLTAKRXDFIMVNGPBSJHHSBUPWVRIELOXDTCKFAGMNQJJQSM", "OACKNTBWIEXHDPFLRUVGGKRCLFIEXAOBWJTSNHPQDMUVVURDXH", "ICOSWELBFAJGNKMPQTTPRAVNDFGESBLWCHIXOUKJMQ"};
    int n = 24;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> songlist = {"BGHKEIFDJANNIJOFBHGKCLMEDAAFHMLOBJINGKCEDDMCNJALOB", "IHFKGEEGKMLNJDBOAHFICCIKLJNBGEHDOMFAALIKHONCJEBDGM", "FFAEDIKCBMOJNGLHHEKJOMNBCFIDAGLLGBDNCKJFEHIMAOOAMH", "NCDJIFBGELKKOAGLDIJFMBCNHEEHNIDMOGKLFJCABBCFOJLHGI", "NMDEKAAKEGNIHCFJOBMDLLAGBIHFJCNKOEMDDAOKJNCLBHEIGF", "MDFNJKCHEOLBGMIADMLNBECOFJKAHGIIDEAFJBMGOLKNHCIBJD", "MOFAEGCLKNHHIFLOGEJMBKDACNNGALFBJEOIMDKHCCMGDFIJEN", "LOABKHHKMDLNIOFJBCEAGGAECBDMJONILKHFFGOIDAJECNHMLB", "KKBFOHACJDEGNMLIKLMDGHCAIBOJNEFFENAOGDCHIMLBKJJAIF", "EMHNGDCOLBKKOAMJGEHNFICDLBBAMCEFHGNIDJKOLLAFOHMNEG", "CIBDJKKJDNIEMGALHOCFBBLMOKNGIADJHECFFCENHOBMIAKGDL", "JFDMGBONKJALHEICCHEFLOJKBMNGDAIIDGFEJNMHLBOCKAAKDN", "FEHMCJIBLOGGDBMEJCHFNALIKOOKHLENMBCFDAJIGGIOAKJBDN", "MCFELHHLEBKIDJAOCNGFMMFLNCODKJAIGBHEEHNOFJMLDIACGB", "KKIGCNLODHEJMAFBKFEMHNGJIOBLDACCNDJFIEHGMKOBLAAGBI", "KNODJFHMCELLHNKJFGOBADIMCEECLDJOBAFGNKMIHHIFJNBCLE", "DOGKAMMAOBEFNCILDJHKGGKEFMILDBONAJHCCHALGIOFEBDMKJ", "NNACGHBIEKFOLDMJJMDLEFOKHGNIABCCDAFGOKNMBLEHIJJMDL", "KAFGHNBOEICCINJBMDFAHLGKOEEOKHMAFJIBCDNGLLOMDHFJNA", "KICBGEEGDCIFHBAMKJNOLLEKJHAOIGFBDCNMMLCIBGJNKOAHFD", "EEFHKBNOGADJICLMMCIJODAHFEKNBGLLBOMDHCFINAJKEGGANJ", "ILMBCFDOHKEEHFBLMGNJCIADOKKOFABJCLDNGIMEHKJFLECDBA", "GNHIMOOMIENGHKDJCALFBOLBAHGDEINJKCMFFONIHGJBELADKC", "MMCKIGLEHBJAFODNNACOKMBILHJGFEDDELOJABCIHMGKNFDKFG", "EHMBOAIJCLNNFCBIGHMDOAEJKLLKJMDBNFGCHAEOIILNACBFMO", "KJDHEGGEKJLNOIFABMCDHHDCFLEAKNOJBIGMMHFBJLCOEKDNAI", "GGIMBEKACJLFOHNDDHOMFIJEGAKLBCNNCOHDGMKJFEILBAABOD", "FNCIMGHEJKLLOJEAMFCIGDBHNKKDBEFIMOAJLCGHNNHMCKEJIA", "LBOFDGGNJBMAKIHFCELODDOLEGMJBANHCIFKKFOMALBIJHEGCD", "NNDMFJKBOILGHAECCBAHIMODKNFJLGEEGNJHKCBADIMFLOOLFG", "IDCHJNBKAEMMGFBCOILKDJNHAEEANDJKOLMCBFGIHEIJKAMHCN", "LODFGBBGFOHKIJMECLANDDBLCGIFJHEOKMANNACKEDBGIHJLOM", "FFMNGOKIEDJHBCLAALBNOGDEKJFHICMMFNHEJKDGBLAOICCLND", "AGKJEBHMFOIIKHCGBJFAEMDNLOONIFCJAGKBHEMDLLDOBJCKNF", "AGHIEMMEBADKNLCFOJGHIIEGONCLHAJDKFMBBFKGOJNALHEIDC", "MMCFIAHOELGBJNDKKBNHFILCGOAMEJDDMALGOFBKNCHIEJJEAD", "KOFHLBMCGNIINDMFCLKEHOBJAGGALHEKFCMDNIOBJJNODFAMGC", "KEILHBBLNECMFHKIAOGDJJOMIEKNBFALCHGDDGLANBMJOKIECF", "HHIBDNLOMAJKGECFFCKJLNHBOMAIDEGGECMNOKFJHBALIDDFLE", "NMOKIBHJCAGGCLIAEJFNKOHBMDDONJELCIKGFAHBMMCHIFJOLA", "KEGNDBBMAGFKNHLEOJICDDOJGMHEBKFNILACCANIHFBEOMKLDG", "JJCDHGMOINFEABKLLCAGJFOMBDNIEHKKEJANBGFDOIMCHLLACM", "IGDOKBFNJEHHLOKDBMGFIJENCAACNHJMFBIODLKGEEGOLNDAHC", "FIJMKBBKOHIDENAGFCJLMMLCDOGNIBFHKAJEEGDLBK"};
    int n = 15;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> songlist = {"FFEBDACGGCBDFAEGFEBDCAADEBFGCCEDGFBAAFDGEBCCFGBDAE", "EAGFDBCCADGEFBBCDGAEFFGDBEACCGBEADFFGBECADDCGBAEFF", "EGBDCAAFGCDBEEBCGDAFFBECGDAAFBGCEDDEGCAFBBCAEDGFFG", "EDCABBCEFDGAAFDBCEGGEFADBCCFDGABEEACDGFBBFGCEDAADF", "BECGGDBCFEAGBFCDAEGADCBEFFBACDGEEGDFCABBAEDGCFFCBA", "EGDDAFBECGGCABFEDDGCAFBEEGDCAFBBEGDFCABGFDEACCAEDB", "FGGBECADFFDBAGCEEDFBACGGFBEDACCAGFDBEEBCDFGAAFDEBC", "GGBFEADCCFAEDBGGBEDCAFFGCBDEAAFCBDGEEGADBCFFAEDBGC", "CAFEDBGGBFCDAEGABDCFEEFCDGABBFEDCAGGFBEDCAACFGBEDD", "AEGCFBDFAEGCBBCDFGAEEACDBGFFEABDCGGCBEFADDFECBGADB", "CAEFGGFEBACDDCEAFBGGEDACFBBGEACDFFGCEBADDABEGFCCGD", "BEAFFCBEDGAAGDCBFEEFBGCDAAECBGFDDFGBCEAABGCFDEEFCG", "ABDEBCAGDFFCDAEGBBFDCAEGGBCAFDEEBADGCFFCGBADEEFAGC", "BDDBAGECFFDAEGBCCBEFAGDDCABEFGGEDCABFFCADEGBBCDEGF", "AABDECGFFGCBDEAADBFCGEEGFDBACCDBAEFGGECBDAFGEDBFCA", "GFBEDACGDEBCFAAGDECBFFAGECDBBDAFEGCBDECGAFFGDEBCAA", "FBEDGCCABDFEGGABDCFEEFDBCGAAGEDBCFFBGEDACCADEGFBBC", "ADEGFFGCBADEEGBFDACCABDFEGGFDEBACCGEBDFAACDBEGFAGB", "CEDFFDEBGACCGEDBAFFGBDAECCFAEBDGGCEBFADDFEAGBCCBAE", "FDGGFADEBCCBAGDFEEFBCADGGEDCBAFFEBGCDAADGFBCEECBGD", "AFFAEDCGBFGCDBAEEABFDGCCEDGFBAAFGCDEBBFDECGAAGCFBD", "EECGBFDAADFEGBCCBDGAFEEFABDGCCGEAFDBBDEGCFAAFCEGDB", "BAFCEGDDGFABECCBFEADGGDBFEACGBEDFCAGFDEBACCAFGEDBB", "EGAFCDBFGDAECCFDBGAEEBCDGFAAGBECDFFGBDECAACBEFDGGD", "CAFBEGCFADEBBAFDCGEEBGAFDCCEGDAFBBGAEDFCCFEABDGGED", "AFBCCEFDAGBBCAFDEGBCADFGEBFDEACGGDAEFBCCBFEAGDCEAF", "DBGCBAFGDEEDCFABGGCAFEDBBFECGADDBFECGADBFAEGCCEAFB", "DGGFCAEBDDBAFCGEEDBGACFFEGABDCFEGADBCCFDBAGEEBAFCD", "GGFCBAEDDEFBCAGGADFEBCCFEGDABBDCGEFAADEBCGFFGBDAEC", "CABGDFECFEBGDAAFGEBCDDABEGFCCGEDBAFFGBEDCAAGDBECFF", "CBGDAEEABCFDGGDBAEFCCEBAFGDDGBEFACDGECFBAADEGFBCCF", "BGAEDDFBGECAACEDGBFFEADGCBBAGFDECCAGBDFEEFBCGADDGB", "CEFAAEDCGBFAGDBCFEEFGBACDDGBEFACCABGEFDDBEGCAFFABG", "CEDDBCFGAEEAFDBCGGCDBFEAACFDBGEECBAFDGGDCFEBAABDGE", "FCCFBEADGGDAFCEBBGADFCEEAFGBDCCDAEGFBBAGDCEFBDFAGC", "EBCGDFAEBFDCEGAAECBDFGADFBCGEEDCFBGAAGBEFCDAGCEBFD", "DBGECFAAFDEBGCCBADFEGGACDBFEEFBACDGGEFCABDDCFEAGBB", "GEFDCAACFEBDGGBEFCDAABCGFEDDBAGCFEECGDABFFADCBGEEB", "ACDFGEBDGFACCEFGDBAABGCFDEAFCGEBDDAGFBECDABFGCEEBA", "GFDCCDEFGABBEGDAFCCFAEDGBBGAFDCEEFDGBACCABFGDECAFG", "BEDDCBFGAEEGBCFDAADGECBFFCEBAGDFGCBDEAAFCGBDEEBCAG", "FDDFBACGEEFAGDCBBCEFDAGGBEFCDAGFCEBADGEBDFCAAGFBDE", "CCADBGFEEBDCAGFFGDCBAEEFBCGADDEAFCBGGFCAEDBBDEACFG", "GEFCABDDEGCFABBDEFACGGAFBECDDFEBGACCABGEFDDEBGACFF", "CEDABGGBEFACDGEADFBCCFEGDABBADFGECCEBFAGDDEAGFCBDF", "EBGACCAFEDGBBFDECAGGBFCEDAADEGFCBBCADGFEEFCGDBAADF", "GECBBCGAFEDDECAGFBBFDEGACBDGFECAACFGEBDAFECGDBBEGC", "AFDDAGBCEFFECGDBAFCEADGBBCEADFGGFAEBDCGDCEBFAABECG", "DFFDBGECAAFGDBECCABFDG"};
    int n = 7;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> songlist = {"DBEEDFCABBAFCEDDEABFCDCBEAFFCBDEAFACBDEEACDBFFEDCA", "BFADECBBCFDAEBAFEDCBFCAEDDACBFEEDBACFFCAEBDDFBECAD", "CBEFAABEFCDDBCFEAABFEDCCABDEFFCDABEEBACDFFDECABBDE", "ACFFADECBBCFAEDBFDCAEEACFDBBEFACDDCEFABBFDCEAACFDB", "EEBACFDDFCEABBCEFDAAD"};
    int n = 6;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> songlist = {"ADBCAADCBBDCAABCDACDBADCBBDACCADBBDACCBDAACBDDCBAA", "BCDACDBADCBBADCBDCAADBCCABDDBACDBCAACBDDBCAABDCCAB", "DDACBBCDAADBCCDABBDCABADCBACDDBACCBDACDABBDCAADCBB", "ACDDBCADBCAACBDDBCAABDCCADBBACDDABCDBCAACDBBCADBAD", "CCDBAADCBBCDAABDCCDBACDABBADCCADBCABDCDABBDCABADCB", "ADCCABDDCABBDCAABDCCBADDABCCABDDBCAACDBADBCCDABBCD", "AACBDABDCCADBBCDAABCDABCDDBCADCBADBCADCABBDCABCDAA", "BCDDCABBADCCBDAABCDDCABDACBBDACCDBAACBDABCDDCABBAC", "DDABCCADBBADCBDACCADBCADBBACDDBCAADBCCBDAABCDDAB"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> songlist = {};
    int n = 1;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> songlist = {"FFGDBCEAAFBGDCEEAFDGBCEBFCDGAAGDEBCFADBEGFCCBGEADF", "FBCEGADDABCGFEEDBACGFFEACGBDDBAEGFCCBFDAGEEBDFCAGG", "ECDFBAAEGDCFBBGCFDAEEAGFBDCCGEFABDDAEFCGBBACEDFGGA", "DEFBCGDFCEABBECAFDGGDCEAFBBFEDCGABGEDACFFCBGEDAFDC", "AGEBBEAGCFDDFCGEABBDEAGFCCABGEDFFDGACBEFECGADBFCGD", "BAEEFDBAGCCGEDBAFFADCEBGGBDFAECCDGFBAECABGFEDDEFGC", "BAADFGBECCABDGFEEFDACBGGEDACFBBCDEAFGBEDCGAFFGCEBD", "AADECGBFFCBEDGAAGCFEDBBCAEFGDDCFBAEGDEFBACGGABEDFC", "CEBFDAGCAGFBDEEDBGFACCBFAGDECGFBAEDDECBFAGGACBFDEE", "ABGDFCCBEDGAFFGBEDCAAFBDCEGGCBFDAEEBDACFGGBDAFECCA", "DBGFEECGAFBDDCAFEGBBAECGFDDACFEBGGBCAEDFFEADCBGGCE", "DAFBBFGACDEEDCBGFAADECBFGGFEDACBBAGEFDCCADEBFGGAEF", "DBCGBEACFDDFAEBGCDAFEBCGGCBEADFGCBEFADDGBFEACCGEAD", "BFFCDAEGBBGEAFDCCFEAGBDDAGBEFCCDEBGAFFCBEAGDFGBDEA", "CCADBFEGGCEFDBAGBAEDCFFBGDCAEEBDAGFCCAGEBDFFDGBECA", "AFGCEBDDBFGCAEEACGBFDEABDCGFFECGDBAFBDAGCEEGBAFDCC", "DFEBAGGACEBDFFGCDBEAAEBCDFGGBDCFAEEAGBCFDDFBACGEEB", "DFACGGEBAFDCCDGAEFBBEFDGACCGFBDEAAEBCFDGGDEBCAFFEB", "GACDDCAEBGFDBEFGACCADEGBFFCGEBDAFBEACGDDECFABGGCEF", "DABBECFDGAADEBCFGGBCFEADDAGFECBBDECFGAACEFBDGGDFBE", "ACCAGDBFEEGBCDAFFCDABGEEBAFDCGGCFBDEAAGFDBCEEDBGFA", "CCEBGFDAAFGDCBEEFGDCABBAGEFDCCDFEBGACGBAEFDDFEGABC", "DBECFGAAGBEDCFFDCBEAGGCBAEFDDBGEACFFGCAEDBBGFC"};
    int n = 7;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> songlist = {"TFBEEBTRHUIDWLCMSPONAVQKGJFFJGQPRBHWCLVOEUSDNMIKAT", "TIQMESDOHFRPVLJWCUBGNKAAIBUCHQPRDFSTOLVEWMJGNKKNPM", "LEQSFAHORIBTDUWVCJGGDVISUAMPONRFBHEKLTQWCJJQTUPGEH", "IMDBOANKRFSVLWCCDBVTRKPGNAFIMQHJUOSELWWDORQPBAFVTI", "SNKGMCHUJELLGUHMNCFQIODWVBAKSRTPJEEJRHAKCUGWLNOIQM", "DTBSVPFFPNBDEKTIJLUHWOQMAGRCSVVSCRLAKTJWHIFUEBONQM", "GDPPAGNSOHERUIKWTJVBFLQMCDDQENFAJHKOGRULWPTBIVSMCC", "QVNJPTKLWUFARDHOGEIMSBBMECVNRFPTJKULIDQWOAGHSSHGQV", "EJIDFUNPLTCRWMBAOKKOJRCWNGELHIQFDPVUTSMABBASIHVPDW", "QOEFTRJLUGCNMKKNWUVBROPLDEQSATHFJICGMMNPBJFKASEODH", "LRUVTWQCIGGCOQBVLUNDEJPSKWHRFATIMMICFHNRSDKUEVJGQP", "LBWAOTTOAVBLENUMFCJHPRDIKQGWSSKGCTMEPVORFUJILHABND", "QWWQVNSTKCMJARUGPEFIOHLDBBDKOIWTERSAPUMNGCQJVHFLLF", "HMTCSIUARBDGOPKWNJVQEEKVLPWDMUHSCTIROBGFAJNQQJAFMD", "HWKRLCESBUTPIVGONNOGVJATRBDLCPMFHSKUQIEWWNQHGKSCJP", "TBADUVFLMORIEENQMPFUADICOHTJWBVLKSGRRSKEPUDJAFNIWC", "OHMQBTVLGGVKTQDAHUNFSBMCPOWIEJRLLGJMSQFPUNDTIBCVHA", "WOEKRRFEOSTGUBDNLCIPMHJAQVWKKRVSFCDMPGITHNEOBLJUAQ", "WWQVBRLETMFHJSGNCPOIKDUAAUDQORESNWHKGJMCLBFPIVTTIF", "OKAQCGRHWJESUMDNBLPVVBLOWKSGDAJRCQFHIUMNETPPTGCQBH", "WDSOJRKAFIVLMNEUUEGIVSDRWKJPLOAQCFHBMTNNTMKFOAEPDG", "WUQJVIRLCHBSSBHCERGWTQDOIKMUPNVFLJAALRFCSQTKIEHOMB", "NWUPGVDJJDUPLBWMIFSQNKHOERTCGAVVACIMJHWDLNPUFBQKOS", "RETGGTSLOUKDCAINBPMHFQJWVREERUWKLOHMBDNPTACFIQJSVG", "GEWJPHCRDNBUKSLAOMTFIQVVGTLORDCEPWHUNAKSBJMFIQQSMV", "WBGACNUPTHKERLOJDFIIFDJOSREMNLVQCTKHGUBAWPPJAHULON", "VDQEKSICFTRMGBWWMGCPHKIREDOANQJVULSTFBWTJVUHOBQEMK", "RDGAIPNLSCFFLOPNGUTKAHVDJQEWMIBRSCCSEGNWJPVQITFAKH", "DLMUBORRNQLTVHPJGMIKFAECSWDUBOONRWPVQLHKMUFJGABESI", "TCDDAIBJLUOFMHKWENVGRPSQTCCQRAPOSKNDWUHJFELGVIBMTT", "QBGKLJOWDMNUHPSERCAIVFFVRALGSKENHMWTBOQJDUCPIIPDAJ", "QNOMTRLBKEHSWVFGCUUDFKIBSERJOTNLPAWHQMVGCCGQMAPFNK", "UROBIETLWHJVDSSDJPHERUBKQCNWFITGOAMLVVGAFNISQHWCRP", "JUEDKTBOMLLMEGNWRHQTUPCFJVDISAKBOOMQIRVHNGFUWLBTCP", "JESAKDDMQJFSUITOLRHPBVNGCWEAKKAEDNBFPWLOVTJGRUHSQC", "IMMIQNSKJLBTEUVAGRODHWFPCCFWVQNSKLJAURMGTEIDOBHPPH", "BVAMSTGUQLJRFKNCIDEWOOWNTICQMSRLHUPBAKGJVDEFFDVKQO", "BWUMGHRITASNLCPJEELHCUIGTRBQVMODAWKNSFPJJFRLHGIDOM", "BTVNQWEAUCSKPPNSCWAEVQIDORMGJBTHUFLKKLBSRJQIDGPNTC", "OAMVHEWFUUFEAGVCJQTRSPBIKONMLDHWWHAMOQKRBGSTJPVCDU", "FNIELLNABMUGFRQTWHKJVPDOCSIEESLCOWGKAMDQVPUHJRTBNF", "IIBMTRDPUVAKLHCOQJEGWSNFFSWGUJQODLPVHIAKTMRCBENNEM", "HTFOPVDLWSQAJIGURKCBBNQUTLHFAVSOPKWEIDCJGMRRGQCAVI", "JWSTPNLBFKHDEOUMMOEDWKNFGLVSQPAIRBCJHTUUKJNCBRVPQG", "DSOELFIWMAHTTMAIOPBVDRCGHKLEFNJQWSUUSRQNIFKPCHEOMV", "GBALTJDWWTLBMFVCRHSUQPIONKEGAJDDWIORHBUVPCSLQMTAFK", "NEGJJEMASTBQOCPUHRIVWLFKNGDDGKFJLBRSCUIAHEOTVMWPNQ", "QNBMGSRFJCIHKETLUDAVWPOOPDVNRCTHFLQJIEUMGSBAWKOWSB", "GJMTIDQNFHVKPCLUERAAOUCLNWTDPJGQBFVKMREISHHSIRTAKF", "EPWNJQGBVLDUOCMMOELAVTQKJFIRBNWPHGDUSCCUOABVMPGLIK"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> songlist = {"COAPQGEUDWXYYUEVKCGAZBJRFSIHMOTPNDLQWXXPNLHKGJUOEC", "YFRZMBSAVTIDQWWBPCOVAJFRLXYHUSEMZGNKTIDQQDETKFVWHL", "YUOMXJNBCAZGPRSIISEPHBVFMQXRCUTODYJLAWZNGKKGWAVOJM", "XDCYRPSTQUHEILFBZNNZWFIGDXUTBKYSRJAQOVHEMCLPNYCDEV", "XOKPUBAJHTZFQSIGRMWLLMHRYJSFPXUGBAQDVCNTOEIKZWWZMO", "ETUAPSRXNQBLDHGJCFVIKYYICOBEXGMLSQUZPWARHNDJVTFKKI", "WVJABQLZPGEMCOSUXHRDNFTYYTNKXRWCBZOQEJLUIVMGSADPFH", "HNMVUSRKXTBZJOWPCQDIGLEAYFFYIKGDECZBPUOXRJTHNSWVLM", "QAAYFCEXSBIJLKDZORGPTHQWNVMUUNHWCZKDBLARYSJXIGOEPT", "QFVMMNUIOACZGRDBSHLJVXWTYEPKFQQPNIYMTGLJDCUBZOKVWS", "HAXERFFZEPANLKTSCUBDQIWJMGVHOYXRRYNOEWMIDKFQSUBTVZ", "CAJPHLGXXLKANZRBSVWUIEQYTMDCJFOHPGGOHYFWDRMUXKAVZI", "ENLTSBCJQPPQCUOENLDHYAFXJVRWKIMSBZTGGZOAPFXHDUYJIW", "LNSERQVCMBKTTKIJCVRGZHNOWLPUAFEXSYDMQBBYMDCFWULINP", "ETORHJAKZVGSXQQSVAHZKDLUEMPNBJORCYFITGWXXTIBMYVEZO", "KQUSJRLDACNHFPGWWITCJNLOSREUAQKZHVDPXYMFBGWJIXEDKV", "NTSAQROLPUZCHGYMFBWFMYVPCSZJXANTOQBRKELIHUGDDGLAIT", "CBQVMRNWFPXKYZOEJHUSSUZJCOBYDTIWFRAMQPKNXGVLEHHBLV", "NTIJDAUKCFRSMWYPOXZQGEEGZFXPVUBWSRCDJTLNIMKAOHYQQE", "HOLTMWNSPCZFAJDGBIVXRUKYYKRPTVQNFMHJLASZGCWEBIXOUD", "DUOTEFGWSLHVYJBKQRNCMZAPIXXGPQNMROKLDBHYTJSUFCWVZA", "EIIACTMJKGPQUBXODYRSHFLWVNZEEWVXCIKGMJDUSYFRQBOHAT", "PLNZZNYVJKHMWRSDXFUGQEIBOATPCLLCTAONYESDXUHIVFGQJR", "WBKMZPPZBWRLIAQDEHNXTGUVOSFJCKYMMZKBFGTNQLROIXHAWE", "DPSUJVCYYCIUGRKWELNBMQSXZOAHDTPJVFFEJPKSQOZMYGBWNU", "ACRXILTDHVVHTQOGCRSWENKFYMLJABZXPUDIIDAXNFMSQYECOK", "RVGWJTBHZLPUUZLISXYJARMBFCNWQOGEKDTVHPPVQTEBGUNCIK", "JRSLWYFMZOAXDHHMXZQBVFJWKNTPGSULIERCOAYDDYACWXIPNB", "FJTQSVHGUZKLMREOOEAZGFBISNYDKXWQJTPHUVMLCRRCVIXHPY", "KBQZGTDFJUWNEOASMLLMSINEDKJQCBTGYPUFZVWRXHAOOMXWVZ", "BFTQDKNAYIPLUJGSRECHHCSXMWLBTDINUKQJAOYPVFZREGGERT", "FVPQACNLDXSBUMWKJHYIOZGIRKJCABNZDFLTHMPEUWQSVYXOOX", "FVWEADMTKCZRHGIPLNUQBJYSSYQEUXTLKIOHFVDMGRPZNWABJC", "CBIYVEMPRGAOSFZDQHKLTUNXWJJWDBSLPGOHZUAEIFMTRQKYCN", "VXXVCY"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> songlist = {"DKBLCEHPGNOTWVAAVOGQUKICMLWDJBFPSEHXTNRRTDEPUCBFAK", "OIGLWJVQSHMXNNXVSIPCROLKGEFATWDUQJHBMMBHXLPGASNEFQ", "TDCKVROIUJWWIUGKCQSDEPOFHANMVBRLTXJWRTPDQMKHSECAOB", "UGFJNIVLXWFIDOHKMUARGBJXCETSQNPVLLSWAHTXCERGQUDKBJ", "IOMFNPVVPCHMAWGJKDEXRQUIBTOSLFNNXSGEIHWDOUJKBVMRQA", "CPTLFFXNUDAGRMISWQJOKBLHVCPETTFDNVXBUKJWEHASORGILQ", "MCPPGMEUARKSFVWCOBNJXHILQDTTILHUXGQCSVFBRAOENWMJKP", "DDELSFXIQUTGCBVHAOKRWNJMPDMENSRAOFGTQXCWPLUVKBHJII", "KDSURHFVCEMQTNGPLOXAWBJJKWUVICGQETSXMDLHNPOBFARRAG", "OUMNCQIXESBVTWLDHPKJFFKBDHTOECNASXQLGUIRVWMPJJFMNR", "HUQKOXTLSPAGBICDWEVVEDMTNQRXFCUHLKBOPAGJSWIIGSTUHB", "RMNEQCXVLFKPDOAJWWJGICPUETVFHNKBQORLXDMASSXLFOQICG", "NKEHTPVUBRJWDMAAMWCJVBUIEOQKGHFTLNRXSDPPDSWVATGXEO", "NMUKJHBQCLIFRRCIDSKEGVNTOQUMHXWBJALPFFLJABOHNRKTVI", "QUCMEXGWDSPPDEFQUNLIORKJHTAXMBVCGWSSBNCXMQODTHFAJU", "EILRKVPGWWPVAMNIJUCBTEFHODQLSRKXGGXASQLTVNFDCWRIEB", "UHMOPJKKGPBWCDNXRQLFAEIVOTHSMUJJUWGDRCVBKPLINQAXFH", "EOTMSSJHIXQVFWKBNCLMGAPDRUOTEEOUXPAJMNBHSKCILWFGVD", "RQTTQVHFBXJMLSPWUCOANKGIERDDIEGWKNFPLVTUOMHJAXCBQS", "RRIBTXAMFHVGLPONSEWKDCUJQQJCSHKBNATPLXVIOWFMERGUDD", "UASFMQLHTNIJOXVKPWBCRGEECAVIPNMLUQSOFHJTKXDBWRGGWB", "LJKIUVCPEHMQSFNTAOXDRRDOVWICBUHKQAEJPMSTLFGNXXFMBQ", "SDRHOWJCPAKEIUVTLGNNGEFOAQXCSWMBPHVJDRIUTKLLREMXDV", "HWKPOCQFBGJSIAUTNNQLAHWJXPDCFVMKUIOGESBRTTQBSKOFIM", "ALVRHCEDUXGWPJNNDPGLQKBSIVFXTRHEOUMAWCJJPWSKTEHRLV", "DINBXOGQUFMACCAGUWBJERKLITVNXHDPQSFOMMOKPWGDRCNVLJ", "AEITUHXQSBFFTXPRAWIMCJVOLHGKDEUNQSBBXQNTGDKMHIOEWJ", "LVUCAPRSFFSNIUCOBWQXHLMVDJKGTAEPRREIAMOFTCVHNKXWLS", "BJQDUGPPEMDCJWKHVXLNQIOFATSBRUGGUROCANIMXQLDWEKJFV", "TPSBHGBURTHJCOQKDINLWXSMFEVPAAPBSWMTRJKOQHNLGVICUX", "FEDDEPXWCSITMHBJARQLKVNOGUFFUVBCKSLTJIHPAROMQXWNEG", "DDHENFBQCUAVPKMLTRIOSJWXGGWHRSNAFDQUPCBVKLOTIMJEXX", "EJMSQOBHVFDPCUNAKWGILTRRTQIJWNHCXSMDGFVPBAUOEKLLTO", "ISBXMQJWDCNHGRFPAVUEKKEU"};
    int n = 24;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> songlist = {"FEDCABBFECDAABCEFDDACBEFFEDBCAAFCEDBBDFECAADCBFEAB", "DCEFFEBCADDECBAFFABECDFBADECCAFDBEEBADCFFCAEDBFEAC", "BDDFCBAEECBFDAACFEBDDACFBEEDCFABBEACFDDFAECBBEFADC", "CDFABEEBFCADDBAEFCCADFEBCEAFDBBDACFEEACDBFFCDBAEEF", "DABCEFCADBBDFEACBAFCDEEDCBFAAFDBCEECADFBEFDBACCADE", "BFFCDABEEBADFCEFABDCECBFADDEABCFFDECBAFBDAECCABFDE", "ECDBFAACDBEFFDBCAEEABCDFFEBACDDABCFEEADBCFFCABEDDA", "ECBFFBDCAEECABDFFCBDAEEFBADCCDBFAEECFBDAAFBCEDDBFC", "AEEFBCDAABCEDFFEABCDDEFABCCDAFEBCEDAFBBFEDACCAFBDE", "EDBFCAABFDCEEFDBACCDEBFAADECBFFBEDCAACBFEDDAFBECCA", "FDBEEBFCDAADFCBEEBFCADDCBEFAAFEDBCCBEDFAAECBDFFECB", "ADDABEFCCEABDFFDAEBCCBAFEDDEBACFDEFABCCEFABDDBEACF", "DBAFECCBAEFDCBADEFCEABFDDBAFCEEBFADCEABFCDDECABFFD", "EACBBADEFCCABDEFFEBCADDFEBCAAFBEDCCDFAEBBECAFDDBAC", "EFFCABDEECBDFAAFCEBDDCEBFADFCABEECDBAFFDECBAAFCEDB", "ADEBCFFCADEBBAFCDEBDAFCEEBDCFAACDBFEEDBCAFFEADBCCB", "EADFFDEBACCBDAEFFDAEBCCBADFEEDACBFFEDBCAAFDCBEEADF", "CBBDECFAADCBEFFDACBEEDBCAFFABDECCEDBAFCAEBDFFDBCEA", "FEDBCAACDEBFFDECABBAFECDDAFEBCCDEFBAADBCFEEACDBFFE", "DBCAACDFEBBEDACFFDACEBBEFCADDAEFCBBCAEFDDBCAFEDFBE", "CAACEFBDDEFACBDEFBACCFBEDAAFCEBDDECFABBCEFADDEFCBA", "AFDECBBCFEDAADBEFCCAEBDFFBACEDDECAFBBDCAEFBECFADDA", "BCFEEADBFCCEFDBACBFAEDDCAEFBDCEBAFFCDBEAAFBDCEADBC", "EFFDBAECCEADBFFCEADBBDFCAEEAFDCBBDEAFCCFDEBAADCFEB", "BDFCEAABCEFDDBACEFFEDABCFBCDAEEFDBCAAFDBECCFADBECD", "FAEBCEAFDBBEFACDDEACBFFDAECBBFEDCAABDFECADBCFEEFBD", "ACCABFEDDCBAFEEFCDABBDCAEFFECBADDFACBEEDCBAFFECBAD", "DCFBEAAFDBCEEDFBACCBEFDAADCFEBBDCFEAAECBDFFBEDCAAC", "BEDFAECBFDACDEBFFEADCBBDFAECCDAEFBBDAEFCCFEABDDBAF", "ECCABDFEECDBAFEABDCFECBADFFBAECDDBAFECCFDBAEEACFBD", "EABDCFFDEABCCAEFDBBDCAEFFEBACDFBDEACCEBDAFCDEFBAAE", "FCDBADEFBCCEFADBBACFEDDCFABEECDAFBBFACDEEDFBACCDAB", "FECFBEADCAEBDFFDCEABFEBACDDCBFAEEAFCDBEDCFABBAECFD", "DACEBFFDCEABBDEFACBAFDECCEBFADDAEFBCDBECFAAEBFCDAE", "BFDCCDBFEAADFBECCDBAEFFECABDDACEFBBCFAEDDAFCEBDEFB", "CAABFCDEEFBCADDCBEFAABEFCDDEFABCCEABFDDBCAEFFADCBE", "EDFACBBCDAEFFBDCAEFCBEDAAECFBDABFCEDDABFCEECDBAFFE", "BCADFACBEDDEFCBAAFDCEBAFCEDBBDCEAFBFDCEAABFCDEAFEB", "CDDEAFBCDBFCAEEACFDBBFCAEDBCEDAFFBCDEAFABCDEECFDBA", "ABCEDFABFCDEEDCBAFFDCABEECDFABBADCFEEFCADBBFADECCE", "FABDDBECFAABCEDFFEABCDDBCFAEEADCBFFECADBBFECADDBFA", "ECCEFDBAAEFDCBBDEAFCBDACEFFDBAECFEBCADDAEBFCCDBEAF", "FEBCDAFCBDAEFDEABCCDEAFBBFDEACCBEADFFCBEADDFEABCCB", "DAEFFEBCADDFEBCAABFEDCACEFBDAFCEDBBEFDCAAEFCDBBFAE", "CDDFEBACDBFCEAAFCDBEEADFBCCEFABDDEFCABBECDFAAFDECB", "ACFBDEEDCBAFFBEACDDCAEFBBFACDEEBAFDCEFABCDDABCFEED", "CABFFACDEBBECDAFFABCEDDCBFAEECFDABECDAFBBFECADDABC", "FEDBCAEFFECBADDEBFCAADBFCEEFBADCCEABFDDFEBACDAFCBE", "DBEFCAAEFCBDDBEFCAACFDEBBDFEACCDEBAFFDCEABBDCAEFFD", "CABEED"};
    int n = 6;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> songlist = {"DFFBACEGDDEBAFCGGDFBAECGEBCFADGFCEBDAADBECFGGDCEBA", "FFAGECBDDAFBEGCCDBGEAFFAEGDBCFBGEADCCBAEGDFFDEBCAG", "GABDFCEEBFGDACEAFCDBGGBFDCAEECGDFBAABCEDGFAGEDFCBB", "FAGDECCEBFAGDDEFBCAGGFEACBDDFCEGABDFGCEBAADFECGBBG", "ADEFCCEGADFBBAGDCEFBGAFDCEEDGBFACCADBGEFFDGBACEEBA", "FGDCCDGFEABBGECFDAAECBGFDDGBECAFFACGBEDDEFACGBBEFC", "ADGBEAGCFDDFABEGCCEDBGAFCDEFBGAAFCEDBGGFACBDEEDAFG", "BCCBEFGADDFBECGAAFDBGECCAFGBDEEGBFDACCABDFGEEABDFC", "GGCFBDAEECDBGFAAFGDECBACEDFGBBAGDEFCCBFGDEAAECFGDB", "BAGEFCDDAGEBFCCGAEBDFFCGAEBDDBAEGCFFCEDBAGGCEDFABB", "AFDECGGFEABDCCDFEGABBAFEDGCCBDFEAGGCAFDEBBEDGAFCCE", "BGFDACDBEGFACDBEGAFFBCDGEAAEFGBDCCAGBEFDDGEACBFFAC", "GDEBFEDGBCAACBEGDFFGCAEBDDEFGCABDGFBCEAADCEFBGGFEC", "DABBFACEDGGDCFABEEDFGACBBFEGDACBADCGEFFEGCBDAFEDAC", "GBBAEFDCGGAEBFDCCABDGEFCBADGFEEBADFGCCGEBDFAAFBCGE", "DAEBFDGCCGBEAFDDFBCGEAAEFDBCGGEBADCFFDGEBACCGAEFBD", "DFAGECBBEGCAFDDBCFEGAAFCEDBGGECFDABBAEFGCDDBAFEGCC", "GDABFEEBCAGDFFBDEACGGCBDFEAAGDBCFEEGCBFADDEGBFCAAF", "DBGECCFGABDEEDFCABGGBECDFAADCGBEFFECDGABBFCEADGBCA", "EFGDDCBEAFGGAECFBDDBFCGAEEABDCGFFGBDACEEFGADBCCDEF", "AGBBGFCEADDACEFBGGCADEFBGCEDBFAGFEDABCCBFEDAGGDCEF", "BAABEFDCGGADEFBCGACEFDBBCGEAFDDAEBGCFFCBEDGAAFBCGE", "DDEABCGFDGCFBAEEADFGCBBGFCDAEECDAGFBBFAEDCGGDFEBAC", "CFEDGBACGADBEFFEBCGADDAGCBFEEBCGAFDDBAECGFFGEBADCF", "BGACEDDFCGABEEAGDBCFFCGEABDDACGEFBBDGFCEAAEGDFBCCB", "GFAEDCEGBDFAAFDEGCBBFGADCEEBAGCDFFCAEBGDDBFEGACCAD", "EGFBBACEDGFFGBAECDDABCGEFFCGBAEDFEBGDACCABGEDFFDBA", "CEGFGDBACEEAFBDGCCFBDAEGGAEDBFCCDBEGAFFBGDCEAAFCGD", "BEEDBFCGAAECDFBGGEFADBCCGADBFEEFADBGCCGBDFEAAEDBCF", "GGBEADCFFCGDBAEFABCEGDDEBCAGFDEACBFGGFBCDAEGADFCEB", "BEGFCADDEBCGAFFCGEDBAFDACEGBBGAFCEDDGFCAEBBEDCFAGG", "ACEBDFFABEGCDDCEBAGFFBEGCADDCEGABFFEDCGABBECDGFAAF", "GECDBBAFEGCDDCBFAGEEBFCDAGGADCBFEEABGDCFFCGBAEDFAC", "BGDEEDGCAFBBGACEDFFEBGACDFCAEBGDDCBGAFEEBGCAFDDAEC", "GBFFGCEDABBAGCFDEEFCGBADDABGCFEECFGBADDECGFBAAFGEC", "DBBDAFECGGCDEAFBBDGEACFFBAEGDCCEFABGDDGAFCEBBADGCF", "EECGDFABBCDGFAEEAGDBFCCEBADFGCFABGEDCBAEGDFFDAEBGC", "FDEACBGGCFEADBBADFGECCEAFBGDDAECFBGGBECADFFBCDEAGG", "CEFDBAABGFDECCAGEFDBBACEDGFFGBCEDAFGEADBCCFDBAGEEB", "DGCAFFDGCEABBACGDEFFCGABDEEDCBAFGGFBCEADGECFBDAABG", "ECFDDACBFGEEACGDFBBFAGCDEBDCGEFAACEBGDFFBGACEDDBCA", "GFEEBDCAGFFGEACDBBDEFACGGCABFDEECBDAGFFCDEBAGGADBF", "CEEBDAFGCCDBFAGEEDBFCAGGDBEFCAAFED"};
    int n = 7;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> songlist = {"BSQEEVBFJILMCGQPKTRODNUASHHADNQLKFVTEPMOGJCIRBUSSU", "BNCJGMPFLEIVTQHDORKAAUODPHQJEINCRSVTMGFBLKKLGRHSVI", "PCONQJEDUAMFBTTBMDQCPSJHIKOVGERUALNFFKUDQRPVBHIJGT", "OSCEMALNNFMKSVUTJDIBPAHOQRGCELLVPKHMQJNASUBDFITROG", "CEECPOIFHKNBAQGDSJRLMUVTTERILDNAGQHKCSBJPFUOMVVMOF", "KPCBHTGDINRQSAEULJJEUVADQNTCMOIPSGHRKFBLLFKEQMTNVR", "OUDJICPSHGABBDLPVJCGQTRNUEFOKISMHAAHCBOGPNUEJSTRLF", "IVQKMDDHLIEPNCTGUOBSRJFKVQAMMAGHCNUPTFODVEBSRJKLQI", "IQLKCJMBAFDNUTVESOHGRPIRGHQEAFPUBMCSKVNTODJLLJVGPN", "EQMHARBUCSFKIOTDDTOCSQNUGVBRPMJALFEHIKKIHCTBAJLORG", "FPUSQNDEVMMEHUTGKSFBORDALJIQNCPVVPDNJIEKMRBASOULHG", "QFCTTCHGNVBPIJEOAKRULMDQFSSFDOVUTHKECAMJIGBLRNPQQN", "ROLKSCMIGVTEFUHDJBAPQANLDUCMIGVPOKSBRHTEJFFEDMBUQK", "NOAVPCSGLIRHTJJTCUGLNOAVFMSBEKQPIRDHHRJLNBUOMCFAVK", "GSPEQTIDDJTEHLBCKUOVAMFQNPSRGIISJOTQFACKVEUPBLRHMN", "DGGMHTRAKECBOFLSPUJVIQNDDKTIVOFMSAHEUBLGRPJCQNNCPJ", "FBGSEUTMHDLVIORKAQQKDRTIGFHPMENVCJSBOLUAAUOHQJEGBF", "VIPLDMNSCTKRRKEUSNHIVFAPQOCDBGLMTJJTBCNDUPSOIEFKAQ", "MHVGLRJLGRQTIAKDNUOBMSEFCPHVVCMJGETONDQKURILAFBSPH", "HPFNIQVREKAOCLJTUMDBGSSGDPTOCQKEAILNRJHFMVUBBUSHKP", "LDECVQRIATJGNOMFFTNRPJIUVHLQSEDKACBGOMMOGBKPQFSRLU", "VITNDAHCJEEJCHLBSRPGVFUTMOKDQINAANEJOHUPTSRCLFKMGB", "VQIDABRVKJNTLDGMSUFCPOEHQIIQEUJCVLMDPGOKNASTBRFHHF", "RETKLPGOQVIDJUNMACSBBACTJNDFERQOMPKVLHIGUSSBGOCLRA", "TVEMDNIFKPQJHUUHNSPFQDOMLATCRIVEGKJBUKHSARFDOTCMPL", "QGIBNVEJJUVHDLQRKFSTPMANOGICBEEBHGMDNUJOTFRPQKAILV", "CSSCVINJPTQDUBGOMFAERHLKKQESFIMCGPNUBDTOVJARHLLRSO", "TMBNCGVPDQIAEKUJFHHFJUQENAMCPOBGVTRLDSKIISERCPTOQA", "FNBJUHVGLDMKKDLVGRBATFOUNCEISHPJQMMNJHVBRLOKCGAIDE", "TSFPUQQUPHTOLVIRJCAMFDBGSNEKKUNQDIVRGPCSJEMTOLBFHA", "AFERNKMQJSIDPUGVTCLBOHHOMLTJQPNSKDURVGIAEFBCCEFPRI", "UVDHLONQSKTGAMJBBKMADCEULOFQVNISPHGTRJJRMGKITNFBEH", "AUPQLSOCDVVDPRLTAHGQNFBMUEKJSOICCIEDJ"};
    int n = 22;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> songlist = {"GCDFEHBJCEADFBGIHHGJEFABCDIIGJFHEABCDDFBHAEJGICCIJ", "FAGHDEBBEDAHJCIGFFBCJADHGEIIEJADCBGHFFHDBAJGCIEFIG", "HJEADCBBDAEJHIGFCCGJABIHDEFFJDBAHCIGEEAHBGJDCIFFIA", "JCGEBDHHDAGIJFCBEEBJHAGFICDDCHAEFGBJIIHBAGDFECJJCE", "GIDBAHFFJCEDIHBGAAGDIFCEHBJJHECGDAIFBBFJCAHDIGEECJ", "DBAHFIGGEHABCIJDFFDJEGHABICCFGDEAJHBIIFEDGCHJABBDJ", "EHGFCIAABCDGEJHFIIFHBEGAJCDDCJGAEBIHFFIDBACEGJHFJD", "ACBIGEHFJGICHDABEEBADGCFHIJJHBDCAGEFIIECGJDBAHFFEA", "JDIGBCHHBAEIJDGFCCHBADIJEGFFAJCBI"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> songlist = {"SFMJDQOLUWXGGWQOJADMENYZCRIKSPVHFBLTUXXLKEFVHDZQAM", "NYRWISOGPCBJTUUJHGCXKOVZLQFSDMWRANEIPBYTTYSXJADHFW", "KGQLVOUZNRMCIPBEEBNICGRUYVOXFHAQKT"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> songlist = {"HAFCEDGBBDHIFCEAGBEICFHDGAABHFCGEDIIAEBCDGHFFEIDBA", "CGHHADFBEICGGCIHEFBADDCIFGAEBHHBIGFCAEDDHABEFGCIID", "CFHEAGBBHADFEICGGEHADFBICCEHFGABDIICHEGABFDDGHEABI", "CFFDGAHIEBCCEHIFGABDCGAFHIDEBCEFBAGIHDDHIGEBCFAADF", "ECGIBHHGADIEFCBBAHEDIGFCCFIHBAEDGCAEBIHGFDDACIHGBE", "FFEIDACHGBBFHAIDCEGGEFDCIAHBBFEDCIAGHHBAICDEFGGAEH", "CBDIFFIBCEDAHGGHAFDIEBCCBEHAIDFGGFAHIBECDDFBIAHEGC", "CGHAIDFEBBEDGIHFACCAFDHIBGEEFAICHDBGGFDAICHEBBEGCF", "DIHABEGFADHICCHDGEAFBIIBFAHGDECCEIBFAGHDDEFAGCBIHH", "BCDFAEGIIBDAFGCHEEHBDFAIGCCDIFEHABGGHFDICEABBGFAIH", "DECCEHGIDABFFBIHCGEDAADIGCHEBFFAGHBECIDDACHFIBEGGD", "BEAFHICCHEFABGDIICAEHDBFGGBHDEACFIGFIBEDACHHCBEDGI", "AFFIHGCBEDAAIGCDHBFEEGIHDACBFFBADHEGICCEAGFDBHICHB", "AFGDIEEDBGCHFAIEAHCDBGFIIFGBCDHAEEHFBIDGCAAEBIDFHG", "CCGBFEDIAHHADCBGEFIICHGDBAEFFEHBGDIACCDGEHABIFFIDC", "ABHEGGDBFACIHEEHIFBGACDDCIHFBGEAADFIHECBGGBFEACIHD", "DHFEGABCIDABGCEIFHHDECIGFBAAEGIDHFCBBCEHGDIFABECDH", "GAIFFIGBHCDAEEAHGICFDBBEHAICGFDDFCIEGABHDFGECHBAII", "GBFDCEHAAHFIGCDBEABDFIGECHHBEAFCGDIIEACFBHGDIGFCAB", "DEHIABECHFDGGDIEBCFAHGEFBHCIDAAEDHGFCIBBEGDAHCFIIC", "GBDHEAFFACBEDIGHFADEHGBCIIBFDEHGACCADHEIBFGGCDFIAE", "BHHBEIFGADCCDAGIFBHEEHBGICDAFFBCDEIGHAADIEFCBGHABC", "HEDFIGGIECDHABFFIEHCDBGAABDEICFHGGHDIEBCFAAEGIDCB"};
    int n = 9;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> songlist = {"FEIGCDJHBAKKFHIJDGCALEBBECKHFDIGJLAALGKIHFDCJEBBED", "LAGFHKCJIIJFKCBGAHLEDDEFGAKJBIHCLDHKAGJLFIEBCCDEHF", "JAGLIKBBKCLAHFJIEGDDGKICFJBHAELLFJHGDKICBAEELBAJFH", "GIDCKKLDJBAHFEGICCIDFJLAKEBHGGEAKILFCDJBHHEDGFAJLC", "IKBBIFLJHGEDCAKKADBGLIHJFCEEBHLGIKADJFCEFDBAKHCILJ", "GGLIFDBKEACHJJHKEBIDGFACLJFAHIGKLDBECCFBLKJAIGHDEE", "DFLJACBKGHIIEKCAJDGBLFHHIKAJCDFGLBEHDKFECAJLGIBBDH", "ALCFKJEIGGIAKFLJBCHDEEDHGBJALIKFCCDHEAIJBLKGFFKDIB", "EAJCLHGFLCBAIKEGJDHHDJKCLEAFIBGGDJFAKLHEICBBJEHGLK", "FICADDHCGJLFKIBEAAEDKCHIFGLBJJLHDIAKCGEFBBLACJEHDK", "GIFFIDKEHJBLAGCCIALFKGHBDEJJEAIHCFKGLDBBDLHEIKFACJ", "GGJHDFIBLAKCEEGKAFJHBIDLCEGIKJHFABCDLLICBKFGJAEHDD", "LEAKIFCBJGHHAEBCLFKJIGDDCJAFLBIKHEGGEHKJFLCABIDDIG", "KJAELFHCBBIEDCJKGLAHFFHLGKEAIDCBJJDCLGHFAIKEBBJHIL", "CKGFADEBDFCKIHELGAJJFBLGCKDIEHAAHDIKJFCGBELLEGHAFD", "ICJBKKBLCIGDEAHFJJBIAGLKDECHFFHGKDELCABJIIBHGEFKAD", "LCJJLDGAKIEBHFCCBHGAFIKEDJLLJCBKGFDIEAHHADIGCKBLJE", "FFDJKBEIGCHLAAHGKCEDJBIFLLFBEHADCGKJIIBHGCDAELFKJJ", "KACEDHIGBLFFLBGAIKHEJDCCLJEHFKIAGBDCBAEJGKHIFLDDLJ", "HBEAKGICFFDEGBJLCKAIHHIACBGDLKFJEEICHKBJGDLAFFAHJB", "LICGKEDDAHFLIBJGCKEEGCJKLHBIAFDDBHCIGJKLEAFFAKJLBE", "GCDHIIDCLKBEJGHFAAFHGJKLDBECIIEKLDJCGHBFAAFHKCBJLD", "IEGGAIHKDECBLFJJFLBHEIDGCKAAKJGIHCELDBFFILGAHECJKD", "BFCKJIBALGEHDDFAGKELCIBJHHJCIFDKELGABBDGLHACKFEIJJ", "IFADBGCHLKEEIBHFGKJDALCEBHJKFCAIGDLLDIKFCEBAHJGGJK", "LBCEFIHDAAJCKFEHBLIGDDCLEAHBKFJIGGALFHKBEDJCIICEKB", "HJDLFAGGIFHACEJDKBLLKEIFHADJCGBBGCJAEFHIDKLLHDJAEF", "CGIBKKBELDFAJCGHIIDCJEHFLBAGKKAIHLCJFBEDGGDLKHJIBA", "FECCEFHDILBJGAKKGEJCILHDBFAABDJHGICLKEFFEJAHGDIBLC", "KKCIDJGBAEHLFFCAHJBKIGDELLGCIFJHKBADEEDBHJKCIFGLAA", "GFIBCDJKHLEEJGIACDFKBHLLIBGKACDFEJHHJGDKFIACLBEEBL", "JGKDAIFCHHCLADEKBGJFIIFGELKBCDAHJJDCFGKELIBAHHIBGL", "EDKCFAJJHLIDAECKGFBBDCHEJILAKGFFKCLBHDIEAJGGALBHDF", "CKIEJJHIGCBKLFDAEJDFIGKAEBCLHHLJEIDKAGFBCCGDJAHKEL", "IFBBKLEJADIGHCFFKJGCLAEIBHDDHBIACGJKLEFDBIHFJKGCAL", "EELAIKBJFGCDHHDEJLCKGIFBAAJFCDHLEGKIBBEGLFIHDCJKAB", "KFIJDGHLCEAADCKBGFIHLJEEDKBFCIGHAJLLKGHCFEIABDJJEB", "AILDCFGHKKHGFABJIECLDDCGAIHFBKJELLEGCHDAIBFKJJKEHL", "AFGCBIDDHFJGLBKACEIIACHBFJGLDKEEKLJBCGHAFIDDHEKGBL", "CJAFIIJGLCDBKFAEHHJBAIDLCGKFEHBKLDCIAEJGFFJAIHCKBD", "ELGGLIHBCJKADEFFEDIJGLBAKCHHCJBGKFLDAEIIAHDLJEKFGB", "CCBJFAIHDLEKGGKFBDHACILJEEJDAFHICGBKLLKEAHIDJCFGBB", "GFLHJEAIDCKBCFIHJKGLADEBALCGHJKIFEDDAFKJLHGIBCEECB", "IGFAJHLDKKDLFIAGCJEBHHBLKCEFAIDGJJGDHLFKBAIECCEJAK", "LDHBGFIIFBJLKGEHACDDCJHFLIEBGKAAKHIDLFJEBGCCGFIDHK", "ALJBECGKDFHIALEJBBJLFDCHIGKEAAHCDIBFJLGKE"};
    int n = 12;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> songlist = {"BDCEAAFCBEDDFACBEDACFEBDEBCFAAFDBCEACFBDEEDBCAFFAE", "BDCFEBCADDFEBCAACBEFDDAEBCFDABFECCDFAEBBDEAFCBFECA", "DDFEABCDACEFBDEABCFFDBCAEEFBDCAACFBDEEABDFCEFBADCE", "DAFBCCBFEADCBDEFAADEFCBBEAFDCCFEDABBAEFCDDACFEBDEF", "CABBCEAFDDBACEFFEDBACCBDAFEEBDCAFFEDABCCADEBFFBECA", "DDCBEFADFBCEAACFDBEAEDFCBADFCBEEBCFADDECBFAAEDFBCC", "EADFBBFCDAEEFBCDAAFDEBCCDEAFBBFDECABEFADCCDAEFBBAD", "EFCCBAEDFFDBEACCAEBFDDFCBEAAEBDFCCAEDBFFADEBCCEAFD", "BBEFACDDBFAECCDEFABBAEFDCCDBFEAAEFBCDACFBDEEBAFCDE", "CBDFAAFDECBACFEDBBEAFCDDCFEABBEAFCDBEFACDDAFCEBBDC", "EFAACEBDFAECBFDDFACBEEACFDBBACFEDBECDFAAEBCDFFDABC", "EFCADBEECABFDDFEACBBADEFCCDBFEAAECBFDDACEBFFDCAEBB", "CADFEEDFACBBCFADEEDABCFECBDAFFDEBCAAFBDECCFADEBBED", "FCAABFECDDCEFBAACEFDBBDCAEFFCDABEECDAFBBFEDACCAFBE", "DCEBDFACBDAEFFBECADDAEBCFFCDBEAAECFDBACEFBDDABEFCC", "EBDAFCAEFDBBDCEAFBAEFCDDEFABCCBAFEDDABFECDEFCABBFE", "DCAAFECBDDAFECBDFEABCCBADEFFBCADEEBAFCDDCFABEECDFA", "BBCDFAEECFDBAEDAFCBBADFECCDABFEECDABFFEACDBBCEFADB", "AEDFCCFEBDAADECBFFECBDAADCEBFFDCEABBDFCEAADBFCEECF", "ABDDACFEBBCEFDAAFBCEDAFDECBBEDFACCFEDBAABCEDFADBCE", "FFBCADEEDCABFFEACDBBFADCEECBAFDDFABCEECFBADDFACBEE", "CFBADEABDFCCFBEDAAFCBEDABCFDEEDCABFFEBCADDABFCEDBF", "AECCEADFBBFECDAAEDCBFFECBADDACFBEEDACFBBFCDEABFEAC", "DBCEDFAACFEBDDCEAFBDFABECCEBFDAAEDFBCAFECDBADBECFF", "CDBAEEFBCDAACFEBDDFEACBBDCAFEEDBCAFFACDBEEBCFADDEF", "BCAADFCBEACBFEDDAFCBEEAFCDBBFAECDDCBFEADCFBAEEBADF", "CCFDBAEEADFBCEDFCABBACEFDBFDEACCFEADBBEADFCCDEAFBB", "FADECBEFADCCBEFDAABFDCEEAFDBCCAFDBEEDCFABBFCDAEEBD", "ACFECFBDAADBFECCAFBEDDEBFCAADFCBEEADBCFFBAEDCCABFE", "DDAFCBEEAFCBDDFCAEBBCDEAFFECADBBFCDEAAFBCDEEDBCFAA", "FBDCEECBFDAAFCEBDDBCAEFFDCABEEFBCADDBFCEAABFDCEADE", "BFCCFDEBAABFDECCBFADEECFABDDBCAEFFACBDEEABFCDDCEFB", "AABDECFFADBCEFCDEBAFDEBACFDEBCAAEFBDCADBCEFFEADCBB", "AFCDEBDEFCAACBFEDDEBCAFFABCEDDFCBAEEBFACDDCEBFAAFC", "DBEEABCDFFDAECBBAEFDCCABEFDDFEBCAABECDFFEBACDDFEBC", "AAFCEDBBCEFADBCFEDAADBECFACEBFDDCBA"};
    int n = 6;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> songlist = {"DPORBKGCEHLFMQUNSAVVSMNEQTGBDRKUJIFOCHLWPAAPBCSJRG", "TODKVMUEFQNIHWLLWJQTDEABKUMSRGVFPOCNIHHWVCUSGEMRKD", "QIATLBFOJNPPNFTUQASEDJIRHLGWCKBOVMMVONUWHJIRSPLAFK", "GEQCDBTTBDIFEKAPWSJUMORHGVQNCLLCDJSEHRAFKPBOWQUIMT", "VNGGNTMJUEQWOCFHBRKSAPVILDGLNASEKWRTCQMHIUJBODPFVG", "PDUEHJTSOQCRKMIALVWBNFFPLWUECMDSNTAHJQRVOKIBGGBKLJ", "CPTAEHNURMWDQSOFIVVFSBRMDNPUEAHQLKGWTJCOIVOFQRWGLP", "NSKDAHEMBUITCJJUFOWHAQNTRGSLDVKEBMIPCCBIHJKALGNSFT", "OVURDQEWMPPVAHKDRJOSFGICELTNBQUWMMWUQOACPRKSNDFIEL", "TVBGHJJHVTKEDQISWMNOACRUFPLBGGNLPVARMUCWJKIQDHESOT", "FBBAOEGDHKWICNSJUQVPRTMLFFLTVPHAUWNGEJCIKDQSROBMMF", "ORSECINVPWAUQTHLGJDKBBDGJCHNPQMEUSVAORIFWLTKKIWFUH", "GSVOPNEDMQJBCARLTTLNAQGJSEHCDUKVFWPBOMIRRBAOPDSVLN", "GUHJKCEWQTFMIILBTJDHAKUEGPNOSVQCRWFMMIWBVQSNOTHLAG", "UECDPKJRFFMECUDIATQHPNOGBKSVLWJRRWSFKAEUOIHBPDNGQC", "MVTLJJEVNQWUPGOKBIHSFDRACMTLLTUCPDSVIJBHKEGQOFNRAM", "WWMACVEGHILNDBSUKPQFTRJOOVWTDLACNGRIMBUSEHKQFPJJPF", "TRVUMGONQWICDLABSHEKKSHABLGDUQOJWIVNFPMCRTEEHNIPLG", "JCDQSBOUVFKWAMRTTRJALKOBCFNSGUQDHIEWPVMMVEDOIHFQTS", "GJURLBCNAKPWWPANLTSRIUEDBJGHMOCQFKVVRFQCENTGDIASLU", "JHBMPWOKKGFUMRHEQDICNASVJTBLPWOOEHLVUAQDRNGMFICWST", "BJPKKTJWAMVRUNFELDGHIPCSQBOOBNAMWKDGJLRVEUTFHPICSQ", "QOISFVNUETGJBMRLWDKHAPCCAWMQOIERNFDSUVTLBGKJHPPJWS", "EUTVNMDCQIFOKABLRGHPGRACMISWQVUEDNFTJOKLBHHLDKJUQR", "NEMCWVPSIFATGOBBDGIFOJPKEWMCAVLQNUSRTHBDNSUIPKVAOE", "CTMJLWGFHQRRGPFWUJVKNIOACLTBEDMSHQQSDMBPOKAFNJVREI", "CULWGTHHTGUFDKIEVJPRNSABCMLOQWWQLMBVPDJAFEHUONIKSR", "GTCCGQKNDJAVOMWEBRFI"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> songlist = {"EQGSPPSNEICTMHQDJKAOBFRLUGGULBFOHQJTAMIPDNKERSCCKN", "EMLGPOATDJIUQBHFRSCRLTOQGIMAPKDJNSEBHFUUFBETLCMDOQ", "PAKINGJSHRRFGECQIAPLDHTMKONUBJSSKUADGERLCIPHQFMONT", "BJJOMUDGPRESNCKLFIHQATBBORQFGUEJPNKMCLIHSDATTSDCIN", "PQEBJGKMUFLORHAAFMTLOKJGEPIUQBSCDNRHHRNBSQUFEKTJAP", "GLICDOMMOSBNFKTREPUIHJGALCDQQSBAGJIEHNRTMCUPKOFLDQ", "LKOPSBMGJRIEDNTHUAFCCFAKGEMJROBSLPIQDTNHUUCPIDQFOE", "MSHABRJGKLNTTNAJPICQSBDHREOFUGMLKKLBGJIPQRHNASDECO", "TUFMMFUJQDNBRLOIASGPEKCHTTSPKELAROINFDBJGMQUCHHCUM", "KNBOFTARPIDGEJQSLHSQIEPBCOUAFTLNDKGJRMMRHKSINBUEJP", "FAOQLCTDGGDLKHSBNPIRCEUJOQAFTMMTNIHUJGECLPSBKOAQRD", "FFDIQPOEJSCMGBUNLTKHRAAHDTSNBQKPEOCFMJGUILRRLANGPC", "FQHODMKSEBUJITTBLQPMSDOCHEFAKUGNRJIIJKNGFBHPCSAOQE", "DTMLURRSMDPIOGHAFBNJQKECTLUUOKQJPNADIHBRSGFMECTLLP", "QEMAGJRKOBSFNDHIUCTTUMADKQSBLPNRJEOGFHICCKHROUNJLE", "ABDTPSQGMFIIFHPUNDOLSJACEQBKTMGRRGFSQCJEOUHIKLNABD", "PMTTMQUOASLIJHKECDGNFBRPPRGIHDQAKLOTUSJCEMNBFFRCHD", "SKOJIEPATUQLGMNBBNQPAHKFDULGSITJORECMMCEPNLTIDKHQG", "SBUFOAJRRJNETGDSBQHCMKLIUPOAFFUDLHNCMSQBJERTKIGPOA", "APGELKDBRMSQHJINUTCOFFOTUGKLMARSEBNIJPDQCHHUNDOJBL", "KRFAMESITPGQCCQEUSFKJMHOBRADLNITGPP"};
    int n = 21;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> songlist = {"AABCABCCBACABBACCBAACBBACBCAABCABCCABCBAABCCABBACC", "BAACBBACCABCABBCAABCCBAACBBCABACCBAACBBCAABCCABBAC", "BCAACBBACCBAACBBACBCAACBACBBCAACBBCAACBBCABACCABCB", "ACBAABCCBAABCCBAABCCBAACBACBBACCBAACBBACCBAACBACBA", "CBBCAACBACBBCABCAABCCABBCAACBBCABCABACBACBCAACBBCA", "ABCCABCBAABCCBAACBBCAABCCBACABBCAABCACBBACCBAACBBA", "CCBACABCABBCABACBCAABCCBAABCABCABCABCCABBCAABCABCC", "BAABCCABBACCBAABCACBABCABCABCCABCABBCAACBBCAACBABC", "CBAACBA"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> songlist = {"CBADDEBCAACDBEEBCDAAECDBBAECDBACEDDACEBBAECDBDAECC", "EBADDECBAABCDEEDCBAAEDBCCEDABBACEDDBECAACBDEEDBCAA", "BDECAEBCDDCEBADBCAEDCBEAACDBEABEDCADCEBBADCEECBDAA", "DBCEACEBDAECDBBDCEAACBDEABECDDCEBAAECDBACBEDACBEDD", "EBCAACEBDACDBEABDECCEADBBDCAEEBCDAACBDEEABCDDABCEE", "CDBAEBADCCBEADDAECBBACDEEDCBAABDCEEDBACEDBCAACEBDD", "EACBBDAECBADCEBDEACCBDEAADCBEEDBACCABEDDABCEDBAECC", "DBAECBEDAACEBDDCEABDAEBCCBDAEEADCBEDBACCEBDAACEBDA", "CDEBBADCEEBADCEDBACCABEDDBACEECBDAADCEBAEDCBBEDACC", "ADEBBCDAEEDBCAADEBCCAEDBBEADCBDEACCAEDBBECADBACEDD", "BCAEDAECBBCDEAAECBDDACBEEBACDDEACBDEACBBDACEEACBDD", "BEACCABEDDECBAAECBDAECBDDABCEECADBEDCABBEACDDCBAEE", "ACBDDACEBBEADCCDABEEBDCAEBDACCADEBCADEBBACEDDCBAEE", "DABCCBDEACDABEEDABCCEADBCBEADDAECBDEABCCAEDBBADCEE", "CBDAAEBDCABDCEEADCBBCEDABDAECBDEACCEBDACEBADDECBAA", "BCDEEDBACEBDCAEBDACCBEDAADECBBCAEDDEBACDBACEEDABCE", "BDCAACBDEEABDCEDCABBAECDDCEABBCEADDCEBAABEDCCABEDD", "ABCEECDABBAEDCBCEADDEBCAADBECCDBAECADEBBDACEECDABB", "ADCEEBDACCEDABBDAECCEABDDCBAEDCABEECADBBEDCAAEDBCC", "DEABBCAEDDEBACCAEDBCAEDBBCDEAAECDBBDAECBDCEAABECDA", "CDEBBDECABDCEABECDABACEDDEABCDBCAEEADBCCDAEBBEADCC", "EABDDBEACCEBDAACBEDDBECADABECCEABDDECBAAEBCDDABECC", "EDABBCDAEEDCABBACDEEACDBBCDAEEABCDDECBAACDEBBEDCAA", "BCDEEDACBBCEDAADBCEEDCABBDACEEBDCAEADBCCBDAEEBCADD", "BACEDCEBADCBEAAECBDDAEBCCDABEEBACDDAEBCCBDEAACBDEE", "DCABBACDEEBDACEABCDDBEACCADBEEDABCCBDEAADEBCCBEADC", "D"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> songlist = {"IJCHHNMIFEGJBLDAKCCLAJBIHMGEFNDKKDAEILHBCJMGNFFGMC", "AHEDLIJBKNNKBJLHFEGMIACDDABGEFHJLMKNICCINHFAGKLJMB", "DECFNLGAHJIKEMBDDBMGFHCAJENLKIDLCBHAGJEIMFNKKNIJCE", "HAFLBGDMMBKCHJIGEALNFDDLMIJBCGNHEKAFFLEMDCJGNBIKHA", "AHBINCFMEGDLKJJKLBGNFHEMCIADDAFGMEHNCLKBIJJIFMKCGN", "AEHDBLLBMHKFCNEJIGDAADLBNKMEGCHFJIAJFHCNBMIGEKLDDL", "FHMCABKNEGJIIANEMJCBDFHKGLLGHNCIBJAMEDFKKLDBMCGNJA", "FIHEEHIDCJKFGLANBMMAKJHDEICGLFNBBNJHDCIKAEMLGFFGEM", "DCKIAJNHLBFHANJIEBCGMDKLLIAMJNFECHGBDKKDAIFJLNMCEG", "HBBHDKALFEJMNIGCCBLDFJHKEMAINGGNMCKEHFBDLJIAALGMFB", "KDCNHEJIIGLMKDBEFAHNCJJDNGABEKMIHFLCCFKJNEBAMLIHGD", "DHKFLMEJBAINGCCDFILBJMHNAKEGGEKHBCLNAIJDFMMJIBHLNC", "AKEGDFFNKELAHCMBJIGDDGKHAJCNBMLFIEDGFMBALCNKJEHIIH", "NJFLDGACKMBEEHMCJGADBILKFNNFKJADCEGBIHLMMLFABEJNIG", "CDHKKDGCBIJFNEHLAMMLGHNIDBKFCEJAAJCDBKMHLINFEGGEFM", "KDBCJLINAHHADIGJNMKFCLBEEALNHMBJFGIKDCCDLFGEMANJHI", "BKKMFCJNADLEGHIBBHDCEMKNFAJGLIIAGMNFCBDKEJHLLHECBK", "NIDAGMJFFINAGCKBDLEHMJJMDFIBKANGLEHCCHELKMJADIGFNB", "BNFMIDAGJ"};
    int n = 14;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> songlist = {"DABCABCABCABCD"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> songlist = {"DIBHGAEJFCKKFJDEGBIHLACCAEFDGJLHIBKCEIALDFJGHKBBED", "LFAJCIGHKKHELJICFBDGAAEDHCJKLIFBGGECIDFLHAJKBBKJAH", "ILDFCGEEKCHLFAIDJBGGBEAICLDKHFJJGKCLADIHBEFFEIGJLC", "KADHBBHFLICJGEKDAAFEIJBKLCGHDDGFBECIJKALHDBFHEIKJC", "GALLIGDJKFBCHEAALGKFDJICBHEEHBAJLFCIDGKKILHFJBDACE", "GGFLAJHBKDCIEEILFKBAHJCDGGDFKABHCLJEIIDJAKHGBLFCEE", "IDJGKFABHLCCLJAHKFGEDBIIADKLCHJGFEBBDFILHACJKGEEGJ", "BICHALDFKKDICHBEAJLGFFGLIDEBJCAKHHKJEIBLDFGCAACHFL", "IEBDJGKKJFHEIDABLCGGCLEIFHDAJBKKLDAHFCGEIJBBJLCDGF", "IAHEKKJHICFGLEDABBIDCKJEGLFHAAHLEBGJIKDCFFCDILJEHG", "ABKKAICJEHFLGDBBAGDJKFECHLIILHBEDJAKCFGGABKHEILJDC", "FFCGJAIHBKLEDDLBKGHIAJCFEEJLIDGHCBAKFFAJIGLBCHDEKK", "BHFGAILCJDEEILGKBFAHCJDDCKLAEBHJGFIIFJAKLEHBDGCCFB", "KHEJALIDGGJFKEIHCALBDDBLGEJHKIAFCCFAHLEIDBKJGGJICE", "LFHDAKBBDAEJLFCIHGKKEHDFBJALCIGGCFEADIBLHJKKJHBDCE", "FIALGGJDICFKBLHEAAEDIHCJFBKGLLGKAHJFIEBCDDBJGILKFH", "EACCKEGBIDLJFHAAHFKLCBIDGEJJECDLBGIKAFHHKAIGDLBCJE", "FFEBDLCKGAHIJJIHAEKLBCDGFFJBHLIKCAEDGGJIAFDLHCKBEE", "BGLHIFADJCKKJLHGAIDFBECKELFDBAJGHICCGHEFJLAKBDIIDE", "CAHLJGFBKKIDGFACHJELBBLKHDAGECFJIIJFLHADBKCGEEJCFA", "DKLBHGIIGFDKBHLACJEEJLHDFBKCAIGGEBKFDJHLCAIIKCHJGD", "ABFLEEKIJBGDCAHFLLHACBDIKJEGFFLJKDHACBIEGGIDCFAHJK", "LBEEFLDAHICGKJBBJHEIFAGKCDLLCHJAIEFBGKDDKJABELIHCF", "GGFEKAJDBLIHCCIDBAFJKEGLHHCEALIBDFJKGGKAECIFHDBLJJ", "DBALCFEKIHGGJADBLKCFHEIIEGLFJKBDCAHHADGBJKELFCIIAK", "GEJDLBCFHHFLAIKGJEDBCCJFHAKLDGIEBBDLGKJACHIFEEHBKA", "GLJDCIFFJDLGKAEHBCIICBDFJLGAHKEEKLGJCDBFIAHHAJECBI", "DGLKFFCHGIDJABELKKAECFDJBIHGLLHIBCGADFEJKKHIDGACLF", "BEJJLIGABECDFHKKHCDBIAEJLGFFLJKCHDAEIBGGBJEFCLAHID", "KKAHECJFLBGIDDGEKJHLCBFAIDHFLJEIKGBCAACGEJFLKIHBDD", "HEK"};
    int n = 12;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> songlist = {"NCAPYQTINQBECDJIUCHKAHLSPQRL", "YIKPN", "O", "IILPLDKGJKGNXJTPWOHEBWWLTDSYBXSCWYKCY", "SAUTSRDUNDKCSSDWRRIWUOJTBNTQYMHE", "VUGSHRCDRJOXAFSMOHTHHEEKXLQEWTWEOCXGKBFKOXBUUSRAO", "TYEOVKJPANYMISSOB", "DWGVGBABXUYPCMQKXYCE", "SEVNNJEUCLQXSX", "DWXQOOGNKGXXGMKFJKODWCODPUCRRCM", "UDDJPVWDHENDJ", "GEBHCDTTSPG", "GDHFLFQUTAAXFAK", "XMXHOPNFGXVSSAXERVFIMNTAP", "LBPKIPMCAJ", "PRTHLUABDPP", "TVKNPIDPYPVRXNKLPQSEGAFENHFGLSMQGH", "KIKQ", "CELEGNHQQHHTERXGEPURJMM", "GEPK", "AKDIPDGTQQQKMVFNAWFOVDHGDIQXONSWEIWIJAQEUG", "DJFHOIHMNBQBAUTRWJRCSKRPLLIWXYMPCIWSLTCUPQOT", "WYQTAAHXODAUOE", "PAOWPSYRKQHEJFBVXXBQJTYFYKPNLKLJHD", "BTMURVPGPNOCNVJWUOEXUPAOFOBMTBAYEF", "HWHIKFSJGOMOVVYACDYE", "JCRQ", "PJLLWELQFVOSQMGUV", "TMPTMLDBBFUCEVVWM", "FXINAQVQKJCSWTSWDJ", "YOWOQSNVHSGBVTLYPMUDPE", "FMNVLXFRJKPOVIEOLUOIWEBJDGVPRKDBTFNHYJSS", "HIRHIFQLLQJUBKLSPGVMVJLEFBGCYKWETMPI", "NKBFIBGTGVGBXNUSHSJAAXLQDDNUDSMLNCLTGNEEEA", "EYGKXDGPJELSJVQUJJKTLMA", "WOIHGXFY", "OTYTPMOWGKRVKF", "BVFGXVMFCHLKXSVMAEBQKTWMRUBVXGGNYSDMTNCGLCXBAJLE", "OGQIRWMNWTXANTSDHMGPFJDGIYRDRTSDUV", "SMLGFFEAPFAIBFNUXEYOKAGIMHSPKMCCGBUIPPTDHNXBWVN", "QSYEGJQBEN"};
    int n = 25;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> songlist = {"HFFEAFKCKEIFLHKFLHLEKKBJFDJLEDIGKDHA", "I", "KHGCKDDAIIDHHDIBJCDAKAJ", "JG", "CBGHLJBIBKBADFBBIAKCBJAFLIJBBKGADHEGKICFKFDABEJHGB", "IJJBC", "BGHHFGCFJIC", "HAFAC", "KGEKLKDJG", "JDHEBFLEBBBAEIFCJFEAGKDBGGADF", "BIELLFEAJLDFBFEGFKDLLEFDJHGHCCEE", "BHGCGBIKBCALIIAFEFLAEKEGGDDJGABDEJKEC", "CBJIHGICABBDJFHGLJF", "DJAEGGKIECKHAKED", "GFDDFDAJJBFLKFDADHGCGFGECFILBFHCDI", "FGBJLELKEJFCIKDAFFJHC", "DADGACBJA", "DHAFLHILFHKKEFBKKFFBGFBKACKGEBFJLLDBJI", "BILCEAHAFH", "JKLDLLGIKLLGIKKJHFBJBHHBFDAF", "BKFCKDBALJABLKIJLDKLBK", "JLIJGBAIDKJJILBFIKBCCAJHLFADHIGAECBDFAEJHHGK", "LAJILKKGDILKEAJA", "AHKEHLDEIHAJGHEDKEDDEFIDHALDLLKKLAIICKHGECKA", "EGKCGBKCFAFGHFLAJAEBFJLHLGKLKKHDFJBHDLDKELBILBAFDG", "AFKJEGL", "LAELB", "JAGIJDHBJDHECFBJJABIGBCHHLDGCEJAJHEAKKEBECJ", "EDHEIJBGKABCFBCGLCDBJBHGKHCKHLIGECJLLCCEJGBEBDC", "IIBLCLEECHCKLJGCKKJKHLBEAKBHAEFKAHKFDAHCJKGIKG", "EFGIFILCIKFDBJCEFEKCDJ", "EGEDHIADHHJDCIFHBLLHCCJ", "EBCKJGDLDKGDCCI", "JLHIIDKHCFELKELDHDGLKEFHEFIGJGKEDJ", "K", "LIHBLECKAICCGGJHHAIHHFEJJHLJLCBLDCGCLEEALLLBG", "HCKAIE", "BIKKCEEDIJJLJBJHLBKIACAEACBJALLAJDA", "IDKEIBCLELBGGECLIKLKKCGJEDHI", "IHGILHKFKFALJEIECGEHEKKIGDIBCCCDEKBLABFDI", "EDHBBFHDAILJLAHCEGJLIFHLDEALCLKKF", "BLCKCBJDFHJGJAIALBF", "BBKD", "BHEBDKJGIGKIAFFAKIBHBAKBKCIBLABI", "KHFCDKHGBGIJDJAJFJGFEADEJIADIGIIGDJBJHEGLJIGDDHD", "DKIJHJEIICDDELK", "IKKKKAFEACICIHKBCGCJKCCKHKFHCCDKDE", "IAIFAKHCKIFIJLDLKKDDLCJLCBEJJI", "GCDA", "IHGGFCIHCJBLDCLBHEHDHL"};
    int n = 12;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> songlist = {"GGEEHEHHAADCCFFBF", "CEHABHC", "DGEEDAFGGDDHBBFFFFBADAGHHCAEHBHHADHDEDGCGFHCB", "BEDCGAGFEDAHGDHHAAGGEDGAAEF", "EEHDEGHCCHEHAHEFAHBAEBFAEFHFDBDHB", "DCHDADECGGBFCDGGFEDAFHHBAEAEAGHAFBB", "FH", "EECADDBBBCEGGGFDGBEHDEBFCEH", "FHFDDGEEBAAAHCGEDACCFCFHHHADDCEDC", "FA", "EDGBHGEBEEGGD", "EGDHAAAECEGAEBDAEDGGFBBFEHHFDAHEABDDDFBEC", "HEEEEFHDDABBHEBAFBEA", "DHFEAHHBAB", "HHDBCD", "BFGDDHDCFEAAABAHDF", "FGHA", "FEBCAGEGFDBDFCCHGFDHGHDDCFE", "CFECFHCADGHEGECHHACBDBACCHEBDGFECBFEEBC", "ADFAFCACDBBADGBBGHEBGGGGGFCFDABDHEECC", "DBHF"};
    int n = 8;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> songlist = {"DFCEFAABFDECDBFCBAFADEFAFBBAEFEDEDAFDDBBBE", "EBACCEAFDFEFECADBBBBCBFA", "EBABEDDFFFAABDABCCEEDDBEACCBADEAE", "EBEAFAEBCAABFBFCBCABBEAECDDDADE", "F", "ABABEEECDDAECBBFACBCABFEEFD", "EFFFCACCDCCDCBFACECEFCAECADED", "BD", "BBCAFADBEAEBFAFADAEAFD", "ABEACBBFBAECACEBEDAEDEBABCEEFABFADDBDFBFFDDCEADAEF", "FECDCADCCDFBBEABCBBDFDBBCAEBAFEFEFBCAFADEAABEBCD", "ADDC", "EEDCEFEACFABEFABCCF", "AFEBAABCCBCCCCFDACEBBADCCCECCEAAEACCAAFBBEAAEC", "DDDDBBCEABDCCEEDECAFFADFBAFDEACAFFFEDABFAFBAFABF", "AAFE", "AFDB", "BCAFAECABBEFBDCBEDCADEEDEEBDCC", "ADCFCAACDDFFEADCDECDFFEAEDCEBBAC", "AAFAAFAADADFFDEDCCBFCCCCFADBAECFCBCE", "FDEEFDADBDEA", "EFADAEFDBCCCADAADAECFFCCEAED", "CDBECEFAFAFADEEAADFCFA", "AEDEEDFBECEFDFFFABABEDFEEAFBAFBEAAEFFDDBDDEFEDFB", "F", "DFAFEFAEADAFBEFABCBBBAAF", "EDFFDEAFBDCCFEFCDDACEACABCDBFCFBCFADABCDFAFFCB", "FBECFCDACECFAFEDBAECFDFFBEFFFFDBDDDD", "EFCFADAAEBEBAEFBEDCDABFDBBDCEEAFACAFFEFCEDFBBBDDE", "CDDBBAECFFCAACFBA", "DBCDEBCEDEAFFABEACECAEBEFBABE", "EFFFEDDCAEECAD", "EAAFBDFDEECAEC", "CBACDBAABBCFBCDCBAEBACAFCCCC", "BEAFEEFACEFADEBEFFEBADDAAFCFFBEEBDFFAECAFFDAFD", "AFAFBBEAACBFCBFEAFEFE", "FBFDA", "BABCDCEDACECDBBCCDDADEABDCA", "CFDBABEBFEB", "CDBFFBB"};
    int n = 6;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> songlist = {"LMXBPCVNYBBZXYQBFBTWDMMULVYQIVENZLFITGKPNBSIR", "XQQATQFBUSBBOGZMCVHTZECGSNPQGKNENHHLFEISEVCN", "DXEOHM", "EJKRFCFGSLTBKLAGKKBJXKPQVCCJQDRKOYHDMQEJNQGWZ", "ENKVMKLTKLINIMUUBRBBXLEM", "ZBUNPTIUANBPBCUBIAHKTOOY", "EVMVFQWUUFXCCCUTEX", "OJQUXTNZOMNAMJNGRP", "FKYFCOOXISXBZJDOTT", "WQIKUIQEX", "TEXIJJJOLDYITFMDIEKYCWTFTEMLPKSDQQXVVQJBVAPFLNFIBC", "FTQPRDJUFBECMKWMMXLGYKONLYGPTZPXGCWXBSSFPXY", "NWDNYBMLVCELEAQLDIHNHWKMXQTHSDMSVNXVGOBJMNPSHRK", "GTXJSJBWPSOZIVGRWFMQDBNVRNW", "NHRDGHQYTFIQEDAOGXIQQQBXVDDQZFIPWKDYQGWXEYGK", "LDJVRVMBEMGNJUJYTCUWQYELEBNICJSOBLBJWMGALP", "PLPUCTLZITDQIYHVOADRONQJP", "ZEXIHJAOZIZZBUOPKJVTTMQOOEWTFASKCTKMIWJAHMQHGSQV", "WRXKWRZUBKNNVGEDPAFZOKWMZMPK", "GNNGQNSUQGORNJQFFPXFGKOVUYJU", "JUWHXJUNFRRVZFGAFGAGVZHMRRWXNOAAL", "UQZDHXHB", "HQGTTUDVEWLCHUJNUTPQGLLFZVDKUXNIEBQMFKQNMSP", "WXMPYRJXJUQGHIJZFHDWHQTYFQCJDZTNRISSZDIE", "KUR", "XVVADFVH", "PCRFNQLOYPSVGLMKURLFQHHEMDQOMVWZGCUBPBEZKHMNSTWUM", "DJ", "GCEZCUWNFJARBUMYPTRVGEEIZP", "QNHSCDODGZKKSZRRFXOQHQLRCVVVJUMQBAPQGVSZF", "HPZDALUJVZMZETGJKZIGECNDWDYHL", "EGWVRMSUUTJGZCZTBZTATMRIWLZWZMZMCZVSAJK", "MIZFXJZAPKAIWGAGFRGVKSXHLYHUAIOOUJHVQLIBRDMUDRDF", "NQCOSIPFTVZNFCQINEQJTQI", "ZCVUPUDHEIHBNARQRTIODWVANDFLPW", "LNALAHHPPHCSHYVLWJJKYSPYNSOKH", "SVFFPXGYTZ", "VGFWTACCUU", "QFJVAFIOHCKDUCEXIEGUTVRINKGJPZVUVG", "EBKAFOIKAH", "HXAQQSJQWLLLGSEYLBCBWJOW", "YTCRKODRLNAMBFBMAICFLZOGMGV", "QJITBOCPLDPB", "NZDDRDPQSYJXWVZN", "LURLVABJSFPMQJBWPRDUS", "JHPQRAHTIVTXGECJOFMKOUFKNPZNPFZAZGSBPDLCEXNJ", "EODGAOJHLMQZFOYYYMVENZTMVEHXG"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> songlist = {"WENDGCVIQSCGJD", "JAIVSUFQJLDNOURESMHMTHMIWCEKLDT", "WBSFMCFLAUTKEWLHNMGLKQCCS", "JJQMH", "CULWFURQITCPIVPTCLMOKSCWRCAMLJULLB", "FBQHEJJNNRKD", "JFGG", "MDJFKWVIFKFFSNEPQHCNLELGIUVQOJL", "DQIGBMKDQMKVMPTTFKJCQUS", "UWLAI", "AVCSJV", "NCVBPMROQRSRJSOFRWFWKK", "BTAWQSWHMGNDRRGTPSWWCUWJVSASFGARGCREMNKHIT", "HDNFOPKUFGMPDKRJNLLQHQLSQIAWQVKVDNFHGCHQGUP", "FHLUKSHUQAJFCMULQPUTHRGTTTMW", "AMNIKLEDCSSCIGKDGNTQCHMELCDKQBOTPRAVDSBLLRUG", "JMHLLLLEKRLBCIJJN", "DLUDMPUBTSTHQEJSRSJJBCBDRWWILFDDKOC", "WFLQHGEVUTIKFLPKOWMTTNSWVVBNLSIUIUGLVCHA", "HESTBVKRTMQTGFETWESVUJFRSIWKADUEHT", "VFOPENTACEGBCITJPLLIAWHVARSUSBU", "MPARUHJBRKNGP", "GJQWPOCRUGEJPLPOUGB", "PCEJSDUBQRLFISVASKDCHUBEHGACIDRSVDADCCKEAUDSVJ", "IMHRFMPABQQHRNAQGPJWWKQEQ", "CCS", "KTUBBAGLBEUWLIAOGQKSK", "FEOJU", "OJWQBWUHPLURKHMLHTHI", "EJEEFOEPIPIUPBTGDEBJENUHROGNPOEPGKI", "N", "WNKEBAEEBKQGHCQMBL", "COECRVVV", "KDGOADKKFNQET", "HSQRAADAODOGUKIOORWVQOFCQKAQ", "KESWJUVFI", "TPRLLIATUFSRFTIIHIPMUVTNPDTKU", "ADBBUSEEWRBGNDJOJVSIIFPLTHMDKONSWIBNJNKBRRGNM"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> songlist = {"HGSLQDVHUBT", "TJCTMOKOPGAUBFSLKEHCBVRGQ", "SVLLUALOMUTHDHGELUQSUVMGONWDRDLUDSNPLG", "SOCILBOUEDCDQLEOUSHSQHFBKHLDIOJBKIEOMHO", "IUASQRACATKRWBHNPHKTPJSKJAPER", "UGUL", "TFQKPGQLHOVLDMFIUAURPKNMKCFMQV", "QBFONSPKFSENPCGEDW", "DSBJKUAWWBJFLUFVINEKEDMSECQGBQSIVLJWTPMVTMJNPB", "TNNEMQWNTLVWILVM"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> songlist = {"FFMHWULQOHLTESAJALVKRJDVHKDPOUSTSGEBRQQADFJU", "OQCBTMONHQAAIQQJBDKPSSFRAIKBGSPTRFDJKMNVKNEDAP", "SICSWSQCIONPFSESIHRMMTPHFOROBLVTUFBAHESF", "QPCDT", "LCBVQVCB", "QJKPCWAEBQMEJASFUTWHMOUGJP", "VOQHGWEEJJVMPUFKLVGCOTPEHHLSORNQGDKQTJTMM", "DPCMRRNNJEGMBDAQWGAOKEFJBUVWBDJKOJSPP", "LASFPFRBIIATNPHCHQOFGWHRWIRFTOHCOPVGNTLLMPKORR", "BWVLVWQOMODHLUTGCPWP", "GWHJKBSF", "HLBDBILHWAVLAGBFQNEDC", "BIAGUUIGBTJJEBHULBOUMGVOGEFDGEBWPIRAAL", "JJEUQDGRANDCUHMG", "PRFCRPSTGOOUWOSLCBFIFFNCDMKHJLIQG", "ERVTAFQNODWRMLWPENGTLJOFPRBPLPPUWHHFDVITMQ", "ADPVCHSPNLRFDRTFFAKSF", "GBKBODLFVJLEMOFRPQ", "RTTSUMSIQOHRBLBIIJPRPAATCCJJVLERRKIUVWALJI", "UIHHKNNNBICDVNBBJKFHBCKNBCJVQVFWECAKKENNU", "CEOEQBOCEOSRIFILPUUAPAQKOPVTIDEQFWPK"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> songlist = {"GEANLNADNEDFFCBLB", "NILH", "DAFEJDIIJJBGLCJKKCCMJLAAJNJANDCMNNFCAFBA", "GBEIBJLGLBENKCBDLMEKCJBNADBLNNMJB", "JDGNGNGNAEIFMBEKNDKHFNCJNAJ", "EDHKKAJHADJMIMNHHAKCJHBM", "KJKGNGFBHLIBEBJNBBDKCAB", "MBCEEELDLNBJGENLHDBFHGLHFFDHMFGJIMD", "KJEDGKLMGBCBKDDIDEGJAHNCIALIENEFFCFFMINLJCKLCHMDB", "JEFHJMFCBLLLKDNAJJFDNBJNE", "NLDNANMCGLA", "DAAMCAIGBIFLDFIEEMLJLCA", "CAKIJDJGCAHIHGBAJKL", "MDKHGEMCCJCJCI", "FCGLIGEECK", "EDMCLJGGGFDDGEECKEIKDJJ", "NLNCCNAMNFIFKFENCEBCHAGHDIKJNCNCLCGIDLBMHEMJ", "KCCFDFDCNKBIMMAMBIDGJKM", "IGBKLEE", "FBAADGEFBNAJKMEIKAEALBACDDAMDKCDB"};
    int n = 14;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> songlist = {"DACDABAEACACDADABDEEDDEDEBCACAADCACCCCDEB", "CBCBEBBEEECDBEBADAAAADAEDAECACEACABEADA", "DBDBEEAEDADCDEAAACDDAEBEBBBBEACBADDDCCDABAAAA", "CBEDEBCDDCCBEDEDBDCB", "DDCBCDEDECDCCDDACDBDDEBCBDBEDABACBBEDDEBEBEEEBCDDE", "BDDACC", "BABCEDEBBBAECBACCDEEBBABBADBAACEAEACB", "ACEDECDDEDCDABACDEECCBBCA", "BBBAEBCEDDBCCECCDB", "CBDEBEBDEACDBDDCEEAAADCABDCAABC", "CCAAAEECBDCECCDBABADDAACCDEBDBCCBAAECDCEA", "BDEAEBDBAACAEBEACDADEDEDCCBDAECDEDCEAACBEAEBEBDA", "CBBACAEEDEC", "BABDCBBBDADAB", "ACEEDDBDAEDBEBCBCD", "CBEAACBBCBCDDCBCBEBDDCBEACEBDCECE", "DBC", "AEECEADEADBEABCACDBEEEDAEDAAEADDAAEAB", "DAACCEBCDEAACCBCCECEEEEEAEEEEAADDBDB", "CEABADBBDDCEBABBEBAEDA", "AEDEADAEACBBAECADCDBADDADDEC", "DCBCDDBCDDCDAEBCCDBBEBCCCCDEABCDCEC", "CCEADADDBACABACDDBEBADDDEECCEACADDACAAEAC", "ACCEDDBBEAEBCDCEBDDBADEEABEDCDBBADCAECCDDDEEEBAD", "AEEEBEEDABEDEABEAADCDBBE", "CBBEEBDAEDECEEBBCBBAAACDADCEACABBEEEAEDADD", "EECCACEEEBCE", "BABAEDEDBAADBABCEECDADEACDCACABDCCCEBBABEDCDDDBAC", "ACCEDEADAEBBCACEBABCEDDDEBDCDCDBEAAEBBACDDCBAA", "EBDACBEAEDEDACDCBEDDBDCDBABBDDDBECAAEEBEAEDDAB", "DACCEEBECEDECABAECDEDCCCDADBBDBEACCADCDA", "CABDEABBCDDDAEC", "EADCDDACAAADCCDBEAEACBABD", "BA"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> songlist = {"KIJMKJBCGBKHAEEGIBCFKGC", "BGIDCEFHGFGKIAIKMJLF", "AGHDHHAMJBDICDGKLDCAAHEKFCJMFAHGMLHFFKDLEIKLHG", "AHLICHDHKLEBEGGFIMIIFLBCLCIGFEEE", "MEGCFGLMDC", "IJCDECEABFAMFGGBGJGIAKBILIHEHEMIGFKMJGJFLAH", "HLIBBCFDECB", "EBILEGBIAMLEGKKBDHEKGMFLKCKKEHKFK", "JG", "CJGAIJFJJHCAA", "LHBHI", "JJKICGEBLJAGAECCIJEFHJLGFEHFJHJGILHDGE", "GGECF", "IGJAFHCJICDJJLIDKCCHMJGGBJJGEFHDHMBHGBEMFLDBHMCM", "FHLEAKKCBLLDJDKAMELDMEBBDDMBIKLGMDAFDBAMBBFBDMIIB", "BKMLGILBGCCMHGGAKHLKGKIDJKBDIFBMHIMLDMEBA", "GLLEHHIFJECMLAMCGCDHIFEEFEGMLCAIGADGGKGM", "DGLKIGIMLJKMDBJAGGKHF", "KGHFKEKKEKCKLALDJFEH", "KEHKJFHIJGDMFBAGLHDGDHBCELIHCADLKAHFGELJHADCKFE", "ILBFLFCMLGEJAFCBCEHHJE", "AEAELBALIJAGDAGCJCIGFEJCLEA", "HBCKLHFABCFDJFCKJK", "GFGMFFCCIBFIAKGLAJGEAEFIEHJIFFKJKHADDDFKIJGD", "KDGBIDMDLDBDKGJDFAIGCDKKGHH", "LFJIKEKLMLHAAHABCIALEBMIBELCBFADCJ", "EM", "KILCIDEEKIKJCAJBKAFKADBELIHEIEFFHG", "MCDEBBHFDMKAFH", "EIMBLHHLJBDDJFABADJGDMDAFLBJBKMKEJ", "CI", "MDACHJLGKMCLCJAMJDFDEBCMJALBEKILACIJLEGBAB", "ML", "HLJBIGMFGELHKFAFAMIEFHBMKDGC", "FJFIKGMIMCAMBIKFFMMGG", "GDJBHBDDIEMKHJKCFLKMHFFAJAFADCMIBLFBMILKBH", "EEADEGGLMELGDGIFCFBFMFH", "DEBB", "DEABKE", "AEIIFHAMBLAELLDLGJLDDLJHH", "MAGAAIMMJAFHAJBGCEHGGJK", "MLLEI", "JI", "AABLACGLFGFFBBLBIGLGJMBAJJLMCDKJMKFHECLBKJFIHIIIB", "DKLH"};
    int n = 13;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> songlist = {"GNL", "GGLCK", "ACIKEFPNRCOCRILPBPDLHCGBKCHJKK", "CMHOKFB", "LNNGIGPAPGHHQFROQCKRJJKGADIDPHCIHI", "OIQKRQORNRHGLHDQJCKIAGFEG", "JHRKEBGQBFHRFPPFLHCJMPKEMRKKQJKDFKPCDKIF", "PLNHLEOFCCMAKK", "A", "ENPLAE", "QHLJAPQENJPEACRBIGDNBAAHEHQRLPQFH", "KMLIGGIILBGQHBBLMNGOEEBFFMEOIQDCMKHRBLANFGLFELHC", "OFOOHCIQJNRPIDNKFQGMDPLKRDMKARCIKEBRLDPKEGLRHNBKA", "MHML", "HKHECQPGHIBONALAHRNGOODFFMDFEFCHOPONKOEA", "IEKPBJAREEMFFOKNHIIHAQOICCIOIOFCMIKAAIGQHJQLNA", "BAMHFNLICFNDCBBOFOMMBA", "RDDMPNPLKQHPMMMFIMIFRHFOOJCRQQLLG", "EFPAEAMAACOQHEKPKBKBPLGNCJNNMBHCRIFIJMRCJDKOFNJ", "DQLLPMDFMFNCBOLOBFP", "ONKKAMIH", "LQJFQHACKOMCNBJNPIHGFQOADB", "QEINHBRQEHQHQENPKNAQEICJELKEJIKEBDFNEBFEONII", "IFAPCFFFBOINIONPGFPMA", "ACOKOHLQDOCGJJKNIEOBEJGL", "MPJRKQB"};
    int n = 18;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> songlist = {"KEEAIDABEEFKILAHECEEFJBEDIEEF", "DHMGDKCKFAMKIFLIFFKEKIEICHMAKEHHILJMJDLEMEAL", "MIGAMJGBHKHGFACAKABCLJIEHADBBLAFGILDIIGMEM", "BHIKAMKLBGCDGMJGHLMAEIDCLBKKG", "IJC", "AMJIMGEBIGHGKCAIJJIKIBJIGGFLCHKEF", "JEFDKHBKHFGDIAHBCCKLIFJHEKFAGIJKIBGIAEJD", "CFGEGBEGDFCCCMHFHBJMFLEHDGH", "KJJDAGCIMKFLJMMCFLJEKLCHKCFHFKLABCAFJIAB", "KBLJELCHDJIEGJGHCM", "IFGCAIFKAGCHAMMCAEBGFMHFLFGCEEEIIBAJ", "EBMHEBIDMCHMIGF"};
    int n = 13;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> songlist = {"KIEAKJKDCCBLEGKLIILCJGGBAGHAEFLBALLKHCADAHBEGJHBK", "IHGBEJBLLCEBLFHGDHBJBBGFLBGAAKFEACABFDKBBECFE", "FAGHEKEBAFLLBE", "LGGHACJFKGAIIECIJIBI", "EBCGBFDGDHDHKAKFKGGIDA", "AECBEKJJKFGKBDHCBAL", "HDBBECFLHDBGJELLDBF", "CHKIKAGJBIHAHCFKKELJDIIKKCAFKGDHAGEBBBGC", "GHA", "LIILCLKBAIKIDJDJBJHBKDAFHAJIALLGGGIGJJCFEBFLAL", "LGKGF", "KG", "EKJGFHHFHEIAFFADJDIHLAGJJDBAIGGKJCCFJIAICFABCDE", "BKCHFGJGGCHBHABHCDBEHFBCLBHBIAD", "JLIE", "ECLBFBICJGGLBCBJGGAKEJLDHBGBFIKGCKICCCLLI", "LJILG", "HICHKLELAICBEKIJIL", "AHLEEBIFJFDLEELDFIEDALKFJIBHDKFBBLLIDAABKLLG", "GF", "KBJGCIDAJBBLEBDBIDCLKKLCLCFJE"};
    int n = 12;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> songlist = {"VNBFBKWINBJRHUDAIBXEEZIYAGTSARWCXQZSLVQFGVYASXGEDP", "AHFGRBLERFJUEAMWSHXTSQIPUYQNPLATTVNWTXZACLGHEAIRPP", "OAOIVQAPRLTYZOOZWGYHWSSCQVIMOFTCDYZDEJYVNMCVJUKCVK", "OXQQLHWMOGZZAUENYXVWPWQKSTXRENHZUCLTSZNTFRHHJJIIPA", "JVHCYFZYPTNTVNKTXRNQVZVACUIFNYBZQVGZYCOEIMHQQDVNOU", "WXXUJJJMYHOVIRNMAEASXQDGFELKZSDDGPTAKIEJNEVXNFWVTE", "CCOSXFWUFNSNOIJPWKWFHTHSESOAZAWGXPWQJRUQHJGHSDJEWI", "PINUFHWIRZOIEODKNNNWHCOEXDUEEWNXHZNHGUZBIMIUSSTEVN", "CXNUARENIKIVWGBQOWNMXOYFVMKHYDKOQTRXGJLDQKPSSPTDLX", "OINNIHDJGYESLAXNAPATBCSELJXYKOBSLADGTROTSEWDUIJOUM", "BHBNCRSVELRNBSYEJAYJJWJXIIIWKXDFGJVXQWHSNDQPXMMOBI", "USRVNIMXZCSNUBSANETNDUZSDZFVDPCJCRNEKFMVSHUWSIBBZM", "LKLALCGSUHOQKTDBYENVPJARYFYRXHPSVLDNPQCYFYXDULLWPJ", "GAZJZFRUBUCHBXFZKGSIPMUHUJPUEPOZDQSATTJDZXYTDGPATK", "KTGJDPMDPOQCOPDYXMEFQLUVMCLUDNBISVGCBEZFMDCUYVWNUP", "NGYLHBVOUKRLXFUICGASSQREGPFGMWLMFIRAJRRKDUJJTAFJBT", "JSJZWRARJXRACOHITEQKZHLQTHMNNVVVCMVSZFIAWWWSKTWEQA", "CZEZLQZCMWTFIDSFWYMJJNDBIECDKNJOIQYJAKZOGMFOPWQIVF", "LJMIETKBRMQFWRMDHCQCOCRHZIAHCCKMJXJOPZKGNJQZPMBGRC", "STJBAPUHNCWWNNVYMCZKWKYTIWODMZGTJFLWKFEABQVOOMNTVA", "HCBLWYUJKFYRBKTDOVPYYRHYGMZEKNWQWBXEATFFVRSMPQCIYQ", "BDTLAVAJTYYTIFSLUBFRHMPARFADICLDMVCVORILYRTDJJCTMF", "RKWDUCCCRCARLRHIMOWUOUDWZDIKWRXBNIMRDWKWYVAMFZMPFG", "OHEWHMLADWSITMODKKANIXHIQWLAOLAVBIYIRXMRSCFAGXBYYM", "DWEUMSRFEXAUTASDPWFGCHUICKTNFVIVOMHPGICKEINIIMOBJP", "BLGQKKQDSPSGKZOLLTSWBMWMZHGFNFQFIBUSMGIKJTZJEBMNLR", "UCOLDSUPOSWJAGINZSIGBKLTZLUKKFAHHRSEVACQAGAXOSVZFF", "DFNWYHHBEBOBYIVKNDBWSECQGPKENYAERISMIPKUWKZPBAXCYW", "AEMRANSANVETPRJCHWOUTIXMNVAKLQPZAARNAQIQZRGNLZDFZY", "PUJBGYCFDXPEGBOHUWLSOBKFLHVRYDNOYNAMFGUXEJSBZONZKO", "TQRJMVOSEIJFUCRBTGTKVBSHQKVTTEFETWWGMXEUBKEKPAWGVW", "KRZEEOTXISMDURCOJRKTXPSPZMERABLLILRNSXAIVVWBJWCPKH", "LOOSUGXYOJUMBISVMZZJAWIVAWBKVZLVKWBKJDNPIBAJJFLYEZ", "GDKGFKGQSADTNRXOWSPLSBCGHCTONLFRNTPXVVTRAWLUXSFLMZ", "KQLPYLZMOGIFIGYVISNBIDJNFRBURSCMXVBVMPQULLPLQTAXNG", "BLWVZHQLEBYVKAKQEVQYLQFMWHVYBJEDJFXUUDRYSFAPUCQWGK", "WENJBMUZYNXBQVEDBURMKFLLMHHVILGSUMBWSQWEFWRCOCPBEZ", "YZZIGKHEASAWNNAHHTGKKEONBNIMLDWWQCEWLJKJBEZQWTOOME", "FTHDAYCLBWARKAHSEDFLPSOGWIEMRDDNWIMUSYPQKGBYWZIUXN", "YLQYNXXZVIVVJYKMSGOKUPINYFPYHOFMRKLKGVJEXKLKFJOWHH", "AQZNRMGDVGOMBNDRGMTLWMBDGFEOUTWJVMTRFSSEPKCEEFUIMC", "KNNEMJBRMBUYAEUQJQEUOMSRYNPELNBLOEAXDTGWUVISORAEQQ", "WESBVVOTENBDFXFAHOQSYEKTNRNQYMNIHDAYNRFLXCKQIEWBXC", "POWEDOPYDDLXJEVPMTPOLSBUTTGDFTCGGOYJXHLSXSIAOOBJTK", "TWMDJACAMJWUGRMQFEZQOMYCIHYCJFWAKLEUHPXVSVANEGDKWZ", "LHWVUHSDYVZVOWWLLIJRBYNOKCQTXLSSCRGCVYYIYJLDTJFKKL", "REWSIZWDHCSMZIDHVTJRKYJJLDEFHOKSKJTRLCCESMHXJXLLTC", "BQRJMHAJEJSZYNPPYCMOXZFWBLYOSYVLLOGRUFLBEZYXZYNOBW", "CCDXHPAKSEHJWFHXIUZNQWSDMNDZEYILAYPLMFLPJWPMFMSTYA", "BBGHEWUHJFLILBDSYVFWWFMVJEEIYUQPLSITVVUYPQDRHDOYNM"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> songlist = {"HIIFCFALDHFBKFLCKNDDHFDKAPCNNOGNHLOAKGPPLN", "DJODAFMJPBDEMKMLEFPBNLLC", "EHCGEGFEIMOIAEJPJNHOBIMGKCKDKBLHJA", "JILPMBKDBCNKNJLBIPLMKEPJGOECEBKFPNDEDKNLEFPEPHG", "BKNEJLOHPNLPBELGCMFMANON", "PDAONFADLHLLHIMGBA", "HKN", "HNLANAGCIKPGBBAEDKPJIAEPCALH", "KHMJJNHPMMBIMNMBNPBMPPHHNJIMECEOOBCOG", "KBKIDCOENGHK", "ECONAICAMDPGONEEPNBAJACPOIMOIIKDELECNIE", "KGIFHPGKEGEBAHCNDDOKOIFJDCKOEEILNFHKALBNEICGNHBGK", "AGBPFHKPGKOGHOOIDNDLMFINDHJIGBLHMMIFBGBKCNCEIPEHFE", "FPJIMPLMCJHNBJE", "CBNALFPKIDHIKDJBDDBLNPKONCPJLPFGOOEOJHJMIAOC", "HENLOGLHJNGBJC", "NGHLBPEE", "BDANIKKMIMCGK", "NEHLNFHH", "OHDGCLEKAJEPABGHLOKIMOE", "KBMLDCGIIIANLMNHJJEBHFHCNBFHFCOODNJHCEIKCDH", "DKHEPIMO", "LI", "MKFGJOFMFEKKJEFPDPPBBLIJ", "ODNELOBPPDNBLANKPGMCLDNFFAOPIKNGDCHKODF", "KGGCPHLIFFEDPNNOLDIDKFJGAAEFKPHACHHHEDLIOA", "GKIHILAGGIAFELFLNJIPOPNJHBLICCOJBDOCJLNBBKEI", "OKGJCJEAKADKOIIOKIFNCHHLFFBKJHLKAHK", "NIOPJJ", "IEBEEMFICPKNEANOKLEGCJCCCCNHBGACIJPEMCOKIC", "ON"};
    int n = 16;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> songlist = {"JUJZIYQQDKUHNEELCNRFENGNYYZGIOJFPFQDMHKZCVIN", "PTMIRTUKNLKPMLTPDCQGQZFCEZWBBTATXYWCVWPGLY", "WOEBAJXFUFDAMCIZQJQOTBO", "ESXLNVGAAWPOLUPDZWIUJTFHXUNB", "UEWSIJMHVA", "JAJLWCCQ", "MNDRSURPOFBLKZYQBFFOANPTJZZZMRROOIZANLHVTXKH", "ZRZGIRYECQSNTLZXPZVOGNWMVCVFUSGBDSZF", "OBVKBZMQHYWPAKIOFBEKUOADHEKCYOQAHBUNVKDSPFJYHRSVZZ", "SKWUNZUHHHMEABCVWONMXYHOSTWXST", "VBDHZHMRRCRNBRENCGFCCCFYZSKRYEYTOUXXYJUOMXD", "JLXNKEZHOOVEESHURQGWXNHCYGNISOLWZVJGMUIZBPWHACIN", "SBDPZKN", "FBNFPNCWYABUGEJXPMFZFYL", "HLUOEIEWDDOADPYOIBUSGMLQDVTP", "WUPTNFWHPOHJAQGCISTXWHJIIQKBBDYECIAGYEMJUWNWFHP", "UDFWAQTVOOVSKBZOTFYZHPAHYYWR", "IVUUGINSOIJINZHSPAQJLANSWMWKUDVNXGJXC", "VKBSBPBMFVBHKVATSHBVJBEEKVIJQSADOCMCGTILBB", "NFMGJYFDPZLQDPXRIH", "WGYHGQBDCBAJDFDKZQKTMMAWDMEV", "JBUNUVNBEHIKKRWDRHSTOWZPJVZGCPMYRBPEGHEOHLVISYZDD", "ZPO", "ORFKPBSNTHJCCNMVWWKA", "TSOSOWTNJVMTDMJGRUTBAHINP", "GUQ", "GHGEDOKATH"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> songlist = {"CGEADEEHAAHEBAFFBDACEBGEHGHAEFGGEGHFDAECCFHFHAH", "FHEADABDFFDBEHFHGEBBGBHECFGEGDCEEFDBAABEEFBEBBBAA", "DFDGEEHCBAGBFCGFFFDCABFEA", "CBBBBDEADBCCCCBBHBBFEHDEGEFHADAFAA", "DCDECGBEHDGHAAFEEGDDAHHAAFCBDCG", "FDB", "EEGHCBHB", "CEAH", "BHGHDCDDCDE", "EDAE", "CFEHEEGDBHEFDHFBGAFABBDBHFFAEDE", "HGHGEEHDHGACHECDAFDGHCFAEAGDBHEGEGEBGCHHB", "DBEFDHGGGFDEAHBFDECDDEAGECCHEHAFAEACAEGDBF", "BGGBDFFAADHDFHHACHDFFF", "EEAECCCGGBEFBCEFBFCBFDFBBEACHCDBBCDGBGCAEDFD", "DHEHCABHBFADFGGGECEGE", "BDEBCBAHCFFHCBAGGAGAFADCGCEC", "DDG", "AGGGEHDBBBEG", "GEBADGGHAECEBCEAHFGBECDFAAHGGF", "CFCDHHGEA", "DBCECAGHHHEFFAEEHGEEDEAEACFDBHEGAFGEEGEDG", "DBGHCCAEEEGGD", "FHCGHHBGDEHCGABEAAFBGGFDDDEGGGCEB", "HAHDBFDHF", "BFHBFHDEFGHGHBGACFFEGEDCCFDDBHBGEFGDGADDCHHDFHBF", "DEFCDGEAEHGFCBEAAEBDDHFGCFDFGFCABAGGAA", "AAFBHBHHFFDEEAFCBFCGGECCDFAABCCFEAGBGECADG", "DAHHDDBECBCBCBADCEDCFBGAADECGBBAGAHFADGFCGABEFCE", "HCCECAFGFHACAAAGECFACEEDEGCAFDAACHBCFAECGGCD", "BHCEHBDHDBAEEEFCDAEEBHADEGEDACCAGHDHGHCECEG", "CHDEBFAGCEGEFBFHHHGBFGAFGBEHDGHCAEDCHGEAB", "DHDHEACBADHGCABGBA", "GD", "FBEFEDBBFFHFHGCHBAHFEGAGFHCAHEBF", "AHFHEGCAADGHAGEDEDAEHCADCHHDAB", "BADCCBEDACGBEFBGCGFEHHBFEBHFACEAGBADDDCDGDBHGDC", "EFEAFAFHGDCBFCBEEEHAEBBDCDDAFDBEDBBGGBEECABFDBBCB", "ADDDADFDEDAGHAFCDDCCBEAADGDGDBGEBCBBHCFC", "BBDDBEBCCBDBAADBHDBHCECF", "HDHBDAGCHCGAGEHBCEGACCCGECGFBBBGDBHAHFFFBEH", "EFCBHGAEGEHEGCABGCAEGEAHBCFEBHHGGDCCHAGDEBHABHE", "DDHGADBFAFDEGFFGEGHDBCAGEB", "DFDCHAGAEBGDDGABAHFBEGGCFHEHFGEBF", "FDAFCDABFFACCHGFHEHEECHHGDABDDGAFGDCH", "HABHGEDEHBDGAGGA", "CBCGHF", "FHDDAHFEEFACDDDBDBBG", "EGDHADHHHCCDHADGEFDFCEGHBDEBGCEDGDDDC"};
    int n = 8;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> songlist = {"UELIAMGGJULLPKSQPOULBQBFBSKTSGMCEOOMBHAT", "TFHMDT", "DBATEATPQEMTQJBUBANNPPEKUFLDFGMME", "HABJTRTAAMNMENKUEC", "UGTNBPTPDCIPSIIMPCQASTMCNGPIAEPGMAHQBTTCCQNH", "AHPEMBUGNPUEJTRLKFUEJEM", "CDENEFTBOSMBTKLCEPUGLHAGDRQJPOBLLOBHUJOBLQEPCR", "AFCGIHUUJPSOREDURIGRNFJECUPJDSMQRCGTR", "GCMMUMMAKIDDAIUOARFKREFJUCDIF", "TRNLMDMOJDIEOT", "KUBUQRSG", "JQFTEEIMLBRQFFISFPFRPMPBHNOJKDTBAGOGENR", "GMMIPTEEFFJKDCBG", "NQQPIFGS", "FGBEIPLLUPEMCQRHOSIRUNDECSPJDEELLFJGLAEFAGJG", "NRQSAEUOKERCBEF", "HDEHTFPBQSSPLPDN", "JAJHNQHAJIRT", "LEIDOOCGLUEMCTTDKPITHCSBKDBOBSPCITIMCFJAR", "RTQCSTOQFLDBC", "PGKQTRSIDKHHSNQETITDKQOLHPQQG", "BUIFCLIKUKEUURIMOLGTQQGQFTFMPGJKKFNI", "NCKFGQCPQUMSUOSLEUNMRQKQUEPMKHSMKUGTSOOEK", "MCNADTQLQI", "RMLPKELCJQSORUNUJCHMJCS", "JAUOTONQGRLOUGQECGPIKQB", "QCMUPDURRAEHEOBEOLBIREEGIOARPBINNA", "KBOTTGRQ"};
    int n = 21;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> songlist = {"K", "NACVQTMFVENATBTUBGFRNEWCOCQEBSSBVNBUVUAKH", "HFBFFXPXVAMPSAXISEJUTBPIRRUOTQ", "GAVQCFRUDTCKXSMNPIMNBXEND", "VWKOQJOASXOKLRCNVGFOVQOQMVKVCWUMPCQJAQTXLXKGEVEVD", "IWERWU", "CPNLT", "XHJAECRUNJHFQURQRTCJSPXHKMTAX", "EDTVKRPVTSKCPJQTEHLGRQK", "TAMFBUCAXQQJOLKSOMWIQENBWIB", "XNGOU", "IVTTILX", "FEUANPLERJCWJPQNEBTPNBSFHOCXXJJOUMUWXGBIC", "DRCMJUUBGPBJWABQVWRKHAMTXG", "WBJTKODSXKVJUHVRHHMGBMBMX", "IMAUHVPCOSAIMXDKKDCGIURGRG", "IIROGGWTULPRUABLUOCVSBKREBERSGBMJ", "JRWEIFOXKUAXWRXXEWRCGKRIHWEFPOWISHCAUVDOE", "OKDELXLHXHPWUM", "QLTIAPRNQJKASKGWHMDWLQAAXVOFENXSAQDMSU", "KF", "UVOMAJOVHAPEQLOTQIMNGRMCLKEHHBUKMDJQELGWJRWSAEUQE", "PDUVGRUUXNESPTDKJWJNXSHBCAXDJETMDAPUNO", "BCQEVVIQDAHQXCOCICGXAGIFFSTQHJIIIFAJCGBVUUKJB", "M", "GOUVKSTKM", "EGOCILTILAIDFXFP", "DDLEGTWMMDVVJXGUTJBNGQLMUBKEJAQQPNJVHXT", "SKHPTITLVINADAHADMVHREQLNHAHVS", "DIWIRXNKHMKGAA", "TCWIDFI", "VQFBATHUQDOJ", "SPPUTBBE", "FKGPUHUWGPJXOLSQGMBUDJQKBOQEUMHBETTRGPB", "KNTBBEVPSMOOIIHSFSOEVTHJLHPQMKQEFVLFNG", "HKDIPF", "NRFDGDT"};
    int n = 24;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> songlist = {"BKNFGSBSPRPEFHOGRADVVULQ", "BCAOOASBMEABAF", "DNGDNPDRHEFIPNJCHK", "BJKKLSDNAMQCGMPOHPIQKTENLDPLTTUQRDFNLGJUMONSOOOF", "IALRRUVAQLEMDTUGUDLMVTBBHDPAUJ", "MNTDHVPVMKNODQDSITBLFGFLKLHGDPE", "DOKKNPIGLEFF", "NDHSNNKUKKSIOFEGVUPMKLJGMBFLVHRMJDAPRNUGSJGKQ", "DSMHKAKVCPILDFPLBIOHETPMBTDOISRABNLDOGOGHMP", "SAVCCKTLEOJCDCTVAJPCUQPASHHTJJISSAEQIIGFC", "EQFCQQKKOGBQ", "OOAMPKBKGDJACTLJPUCPVHKDPVMMDD", "JLNKRMCQJIFIJDPVGTPUFPRVVBOCALQPVEBELHOJSLHRJBDTQ", "NKMVURECJHNIUQP", "GUSCMLCN", "LEODNH", "KLIVRVBJOSIKJQILJVNFUDV", "BBGMHRRRHQLMKSDMNTVPNRSTKDLPLGQL", "KFVSKPNQERKHBGOKHAPB", "THVIASNQEVMTHULVIQAEKVG", "MNGDCQKESVPPRKTGRBNVMM", "KUAJI", "DLHGUUGITMIBEGNIHHSRJLBPFBBFNDHJEESNLGULSR", "JPASSDHO", "QVVRMRJUPRQJCNNIFALFLSGRMQOSBGJCDOEBRAGRJPKHJI", "QIHVECHSDUIGJSSCFCLGRU", "DCVFQICBAPPBAMVESGTREVGOMRCFFCPPHRQENEDARRUENDMKB", "VLRUECQINHISIQVVRCKKSOJBFVCDDFLRCQEAIO", "SLHGCOG", "NCBVHNMPOGMOQESDOQHABILSE", "LVRHLFVLI", "NCIKCNBSIGDCCFEUDKJNHIGFNINHLJUQ", "FM", "CGTJFJSLQVAFLCGJJSCNTA", "OJDFLBMLJDPJMCVMDLETGKJ", "NFIDDJDFNS", "BMERJPBH", "QSIDRLNJBPJIGMDQAMHU", "KIEUFKAKHCPSQKDUDKJLMB", "HQOFJNKVLJGCMSQRIGSNTQVFSOIFSHCJVKLJPK"};
    int n = 22;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> songlist = {"MEGKDIOAMJLGMMJNLJMNKDLJOFFNDAEJMBHGLLNGIDDJK", "FDEO", "OLLFGBDDHONMKDOCFLEBFOAKJEJBKNHLOFGDILCG", "NIBADL", "LNCOMLKOKNLHNDLMCAFGBBLMLMKIHFHCHMJFDFCALOHOGHN", "LOEHFCF", "DJIAEINNJBLEFLOFLHELCKFFHGCCIJGDKLLCBEJ", "LKJDFEKNECHFANKIMKCEKFKLNHOELMFMCNEDCEFEIKHIG", "EIFDMELDKBHKEDKNAEBIFMIHLJGMJOIBMHKBKMNBJNGG", "GHJHFIGFFNACBDINHIJILHEFE", "KHMJADCLDILJJMKBMKNHEANOLBNLJMMB", "OBKCIIMAOEOLEFBJIKNJEBNACOGEIIHHHBLJE", "GILMMFLGEBIGJEJEDIOCAKJCBCJI", "HKKDCGMKKCNCKBFIMMFGCKJFMNMKLGFMNIICIG", "NDHOMJ", "NKLHNNKEOAD", "NGOONDDBHBINFCKLKABMHBIIKNOJCD", "KBHCAKIEKHKIDGKDFHBJLCGILEADCMLEHNBMMLHJGAHEOOEOC"};
    int n = 15;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> songlist = {"FBIICHGIIDEDIFHEDDACCDBAACBIHBBACHIAIHAGGC", "HAHFAHGCDDECFCFCDAGABE", "GHCDDIGEHFG", "DHCCIIFIIGBEHGEFHDD", "HDCIEAGEEBCAHIIFCHEIBBDABIEHHAD", "GHCBGFFEBEDCGHBDBDDI", "HCDIDEAGEHFAEDCGGHEDBCCFGFFHBCHFHA", "CGC", "IIFADIFGHDE", "BDHDFABIBIIFDBBHHEBGABGAAEDCGIGG", "IGDIEABBFGIFBGCGHAHCFBEFHACFCHCFADEHHDAGGHDE", "BEDEHCCBFCCGFIICECH", "IBBGGGGGCDADBDIFHBA"};
    int n = 9;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> songlist = {"INKNKFAFLEGNJHJKIKLKGDLCADKAKIIFJCBDIIBDIGALDCAC", "MBFDKHJDBKMAAMDFMJAHFAGCJMJABDHGLECNGKBLAFAE", "KFDGKACGNKMKFEEANDNCINBHCNLECADFEHLCE", "NNKGEKNGBBDINNINKMLLMLKKDLBGIGCFFADBDCJDGGNEN", "NBFGDKHDHDAKHAEBEIMFGFCEEDFKHBLL", "DFLKAIMDHHHKHJADLBAHIGIABHEHBILDHEKGBGGCCLJL", "AENMLHKHAFJCJNHFG", "NABIHK", "JCMEHKHAHJFBMKAICIKJHCEGMLGJL", "HJCIKBCMDNJLGKHDFJB", "BHGAKCABDNJJIGMFDCCCAHMDID", "IKHBNNJBFNJBFBFDLAMALIMHMAFGHDGJBEMNKNLNFEALBJ", "GFJIKHADADMJNKLEENIJDB", "GJKLEFD", "LLFNIKJECCAMCDEABGIMBKKEFLCAADKEDHL", "LJJNANCJGCIJJJLKNJHHCHBFIGMJCEEIJGDEDEADBIGENKIEGM", "H", "DHNDDAJGCFCEFMCLGMIEMNB", "IMHMCCADJ", "NDDLN"};
    int n = 14;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> songlist = {"DABADAEEDDDDDBCDAEEBEAEBBCBDABCCEECBE", "AAADCBECBCEEEDCCCCAABABCECCDBACAACCBABADEEEDECBEDD", "ECEBDBCCCDCDBEECBEECEBBBAECEADAACBEECCEEDADAEAB", "CAABEBBCBBEBABBEBCDBCBAECDCCCAAEECCDBCB", "BAE", "AABEEADDCADDBBABDCDDDAADAEDCBADAAEBDCEBEDACBACA", "AADBACEDACBEBBBEBCEDCEBECEAEBEBAAECCAACEB", "DBACEBDDAEABECA", "EDADDEEBEAADBBBDDAEBDAEB", "BBABECDEBDEECDCC", "ACDDBCBAAEADDAAEEEDECDCEBCCDBEDEEDAADAEAD", "AAAABCBEA", "DCEDEEEACDCDB", "EEBCECA", "CDBADBABEEDBADBADBDCBECCCBAEDBDBDDBCEDBCCCDEEDDAA", "ADDBCDDCECCAABEEDC", "DEDABAEADEDABCCABCEBCBBEAEAEBDBD", "EDEBB", "ADDDBDBABABEBBE", "CECDACDBEAC", "DEDDCBECBDBBACCDBBEDBAEEADBDCBD", "CADCACCDACEABBEBBCEEABAEBDDDADBA", "ACBDECEAEDCBDDCAADCEDCEEDCBCBACCCACEDEBAC", "CBCBADDECEEDBCEBCDAADCDEEB", "EDEC", "AACCA", "CECCBDEAADCECBEBBCCACAAAACCDADAAADBCAABEECDEEBAAE", "BCCBEEBABBDBABBCBDDDCECECCCADEABDEBEBCDA", "DBACEDDDBAA", "AAEEADBCDCAAADCDA", "C", "EEEDBA", "ADCCDBEBCCDCDEBABABACBDCAADAACCDDDABCD", "CABDBBBABA", "AEEEEACAABBDAAEABCDECEDBCCDCCD"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> songlist = {"CGEJFBHJBHDDDDIDA", "AIJFBDICGHADBEJCCBHGCHCCHCECGJHHJHIDBDI", "AFDCIAAGGGCFFDAIBDDB", "ECAGFGEBCJCIJCIABIFIBEBFICIECCJJ", "BADFFDIGIAFEGIADCBI", "CIGJHFCEFCIDHCCEFHIIGDHJ", "JEIJFAHAHDEGADEJFDGIEADIICGDBGFEADJGBBGFBG", "FHHABDCB", "GFEAJCBBABAEBHCF", "BDEECHFIGECFFGHHCHGHIJIGBIAEAEBJCBAGDFGCFBCFAEJGC", "ECCCCJAEHAABIGI", "CGFACAGHEHJHEICJFGIJGEHDJEFJBJJGJJBBIDBGFGBBDGDAC", "JCFGACJBIBAFAJECFBD", "EBCJDDHGHHFBEBHEJJHHFBCJAAEIABGACE", "FFBBGHAAAFJBEEACDBJEIHAJJHECAEHJCCAHBCDHEDBJGHFCG", "EFFEFCJGBJJHJGCAAGACEADCCJDGIDGDAC", "BBCDAHDJAABAFBDJAHEFCDJEBBDJFJJJAGIGEDCEJHADD", "BDGGADFFECBGBEDEDDDDDAJGBAGEEAEFBAGCIIBJCGEJBIJIG", "GGACEIFHGJHAEBAFDIBGJGACDADGIFEEDJCBHHHAJH", "HIGJBDCBAHBE", "JEEADHCGABIDJFI", "JICJCCIGD", "IBEEDFEIACACDBCBEHCFGIGGJDBAIDJFEFF", "ECEJAIGEJFJBFCIEFAICECGCGJAFHJIICJBHDGJBIGAHJCBI", "GICCGBCJDGEAIJIGJDEGADFHCEF", "EHBFFFIBGCEADFGJEEAFHFFGGGIEFBDFHACHCJHGJ", "JEBBE", "JDEEFFHDAACEFDFDFGHDEH", "ABCGCACJDAEEDHBHIEIBBGBJA", "BCEFB", "EDGFBDFDJAHEJGFJADGADDCFHJHJJBHAJDDEGEBGBI", "CADDFAAFIFJGFCFHFCEJFFCBIFAGEFHGJGBBJICEFABA", "CHJJCCFCFFEHDAFIHDIGCJHJEJJBADCEJBHJFHBDJEABFA", "CAIDHFFHFAHCHJHGHAJHJAFIEIE", "DADFCJJFIBFFBEFBFAIEIA", "BHHGEBGDFBDACGIFAACACBBACFFBAJFFCGJIAGCIAJJFFA", "GGDHBAHHHIHHGIJBBFIBIHDFIECJCGHBJAHIC", "CFGBABGHIHDG", "CDJFGGAHDEGCFBABCGHFHDIDAEBGFHAE"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> songlist = {"BEEEJEM", "IKIFJKIKDDEFILEFIE", "BCIDKJJGNHKBANCJ", "AHKCAGJBFHNAIDNFBCMNFCIEKJKKJKGDM", "L", "GFMAKDAIALDANCCEKAALLAFJJEAEFMMMGEJIABBJ", "NLKNLGBMGIAHICFBDKACENDDHGEI", "LJJEEBJGFLLBIEFLEFD", "GEJENIAJHIIJFEDLNGFCF", "H", "EFJBAAILNGHBNDNEJFMFDBLNIDNECFLGMMJJIKKMCDECJIKLL", "EBNLHIEBIBCIAAJJHNFEBLBLCKJH", "JMJCEAGCHCFFILIKNIFAKKAAIIIGCIEK", "IDLNLFIDGJEHHL", "FMAHLBIMIDEIDDNJCLHAMDACBBBHJMEJHDEAFNIDKD"};
    int n = 14;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> songlist = {"HGGHAFFAFBIED", "CBCFJIBBJDDAHGGBEGHGJDIHCJHAGDDJGCBBGJFGIGJGGB", "ABABJCGAGCEHGJDIIBFECAFCHABAEHDAAGA", "DEDIGBHAFJBGFB", "AABHAFDCFAEIHABJEEGBEADFHECJEAHDEHBGEBDGGBBAJAEA", "EFJGEBDEDCGJGIDGBFABJJFJFBFGADAIJHEADFDGFEAJFI", "ICFAHEGJFCAABCDAGDIFADA", "EGDBA", "DADAFCFFGJDCFJFIHDAFBJCCICICJCJGICAICICDBCBD", "HHEJI", "JEFEJHCHHEG", "HFIIABFCDAEGDBDCAJF", "HDCGCGGFDIBJGGDDIECADHDJI", "BA", "HBHF", "EDGDFJBACEEDABIBJJICABHIDJJIDAHHIA", "ECEJFBIF", "BCGAGFEHHIEFDAGCAE", "FFCAGDCCDJHA"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> songlist = {"KNIOBLB", "OCHKAFJEBBQPJPGCGOIGNPABAAJLJJP", "NNGABMLEPJIAQRCFKMHCAJMNKJ", "R", "NKNMFNGFMFQJPDRQH", "PAOLIGLACHFFJQNLIROICODEBEIGCQQE", "JKOCOMGIFLOBLHHPDIEAKHLQEPHROQEKLOLMQDAEKEF", "DADDIKRGRMC", "DKPBDRKIHP", "RLJAHMMMLPEHLBKFOMA", "PLDCKDRBQRIQENDNCNMQODFGDOM", "EPLCNQBRKNOAKCDJOEE", "PHAMGFMQJCFGAHNPJOQBMBOEFEKOLGHHOAOQNHQOALQKAR", "MMHCLFEJINQCOKDRJAHDRGNPEDBLONQAG", "CGQBPLANJNKMLNEQNB", "HFPKRCGNCLNECHCIQECDEKFNJCFRKQ", "EPBAMIEBCGAKICEICLKKC", "EGEBMRRHPMBRCEBLQCLHEILMP", "ICREEABPMRRRREOCFPGJBDHEMRJREIAKKRERAN", "BJGMMGKFN", "OKNHONKLNEHOGLHLCFHFQDNOJ", "LFNOPDBMAMBPEAQDFOBKKEMPOENIEQEQQIPAOGJF", "EADEIFRDNMLNAMLDAONPQMHREPN", "FKLNJDFJIOEBKAGGIQEIMGQPDQKEEQIORCPNFBPPKNNED", "CICH", "LIKDBMMMKN", "IBDCBKMIDMRIGALAPIMAAIJPCQOREMOEBBALCPNKJBLLCBOG", "KRBMO", "BNCRPEMCQPANNOBLB", "NQCBCJDKADPDMAAERIOFEQKEQERCLPOEBAJ", "LEEQBLO", "GMCOKPHDGMQKQJKKNJKQNPIFLGNJDIFDCQLJHFEEQLQJ", "DNKDMFNJQLQQCHRQIPICDNDAEDAPHPBEOOECH", "PNBNLQIMLLHKRDBFCGHEJGIGLNJHCKLGK", "PHKODPHEOHLABMOMNGRNJPRRDJBBPFFQLCKO", "PJ", "PKKPLPPMOO", "IHRNPLJKALCBAHMIGJMARPMQOEGHJLHPOGNFJKGHO"};
    int n = 18;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> songlist = {"KJNSWVTFUGHAWGLCQCCDG", "JCVQTTQPOKCHDLOKBDJSCCP"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> songlist = {"TFBEEBTRHUIDWLCMSPONAVQKGJFFJGQPRBHWCLVOEUSDNMIKAT", "TIQMESDOHFRPVLJWCUBGNKAAIBUCHQPRDFSTOLVEWMJGNKKNPM", "LEQSFAHORIBTDUWVCJGGDVISUAMPONRFBHEKLTQWCJJQTUPGEH", "IMDBOANKRFSVLWCCDBVTRKPGNAFIMQHJUOSELWWDORQPBAFVTI", "SNKGMCHUJELLGUHMNCFQIODWVBAKSRTPJEEJRHAKCUGWLNOIQM", "DTBSVPFFPNBDEKTIJLUHWOQMAGRCSVVSCRLAKTJWHIFUEBONQM", "GDPPAGNSOHERUIKWTJVBFLQMCDDQENFAJHKOGRULWPTBIVSMCC", "QVNJPTKLWUFARDHOGEIMSBBMECVNRFPTJKULIDQWOAGHSSHGQV", "EJIDFUNPLTCRWMBAOKKOJRCWNGELHIQFDPVUTSMABBASIHVPDW", "QOEFTRJLUGCNMKKNWUVBROPLDEQSATHFJICGMMNPBJFKASEODH", "LRUVTWQCIGGCOQBVLUNDEJPSKWHRFATIMMICFHNRSDKUEVJGQP", "LBWAOTTOAVBLENUMFCJHPRDIKQGWSSKGCTMEPVORFUJILHABND", "QWWQVNSTKCMJARUGPEFIOHLDBBDKOIWTERSAPUMNGCQJVHFLLF", "HMTCSIUARBDGOPKWNJVQEEKVLPWDMUHSCTIROBGFAJNQQJAFMD", "HWKRLCESBUTPIVGONNOGVJATRBDLCPMFHSKUQIEWWNQHGKSCJP", "TBADUVFLMORIEENQMPFUADICOHTJWBVLKSGRRSKEPUDJAFNIWC", "OHMQBTVLGGVKTQDAHUNFSBMCPOWIEJRLLGJMSQFPUNDTIBCVHA", "WOEKRRFEOSTGUBDNLCIPMHJAQVWKKRVSFCDMPGITHNEOBLJUAQ", "WWQVBRLETMFHJSGNCPOIKDUAAUDQORESNWHKGJMCLBFPIVTTIF", "OKAQCGRHWJESUMDNBLPVVBLOWKSGDAJRCQFHIUMNETPPTGCQBH", "WDSOJRKAFIVLMNEUUEGIVSDRWKJPLOAQCFHBMTNNTMKFOAEPDG", "WUQJVIRLCHBSSBHCERGWTQDOIKMUPNVFLJAALRFCSQTKIEHOMB", "NWUPGVDJJDUPLBWMIFSQNKHOERTCGAVVACIMJHWDLNPUFBQKOS", "RETGGTSLOUKDCAINBPMHFQJWVREERUWKLOHMBDNPTACFIQJSVG", "GEWJPHCRDNBUKSLAOMTFIQVVGTLORDCEPWHUNAKSBJMFIQQSMV", "WBGACNUPTHKERLOJDFIIFDJOSREMNLVQCTKHGUBAWPPJAHULON", "VDQEKSICFTRMGBWWMGCPHKIREDOANQJVULSTFBWTJVUHOBQEMK", "RDGAIPNLSCFFLOPNGUTKAHVDJQEWMIBRSCCSEGNWJPVQITFAKH", "DLMUBORRNQLTVHPJGMIKFAECSWDUBOONRWPVQLHKMUFJGABESI", "TCDDAIBJLUOFMHKWENVGRPSQTCCQRAPOSKNDWUHJFELGVIBMTT", "QBGKLJOWDMNUHPSERCAIVFFVRALGSKENHMWTBOQJDUCPIIPDAJ", "QNOMTRLBKEHSWVFGCUUDFKIBSERJOTNLPAWHQMVGCCGQMAPFNK", "UROBIETLWHJVDSSDJPHERUBKQCNWFITGOAMLVVGAFNISQHWCRP", "JUEDKTBOMLLMEGNWRHQTUPCFJVDISAKBOOMQIRVHNGFUWLBTCP", "JESAKDDMQJFSUITOLRHPBVNGCWEAKKAEDNBFPWLOVTJGRUHSQC", "IMMIQNSKJLBTEUVAGRODHWFPCCFWVQNSKLJAURMGTEIDOBHPPH", "BVAMSTGUQLJRFKNCIDEWOOWNTICQMSRLHUPBAKGJVDEFFDVKQO", "BWUMGHRITASNLCPJEELHCUIGTRBQVMODAWKNSFPJJFRLHGIDOM", "BTVNQWEAUCSKPPNSCWAEVQIDORMGJBTHUFLKKLBSRJQIDGPNTC", "OAMVHEWFUUFEAGVCJQTRSPBIKONMLDHWWHAMOQKRBGSTJPVCDU", "FNIELLNABMUGFRQTWHKJVPDOCSIEESLCOWGKAMDQVPUHJRTBNF", "IIBMTRDPUVAKLHCOQJEGWSNFFSWGUJQODLPVHIAKTMRCBENNEM", "HTFOPVDLWSQAJIGURKCBBNQUTLHFAVSOPKWEIDCJGMRRGQCAVI", "JWSTPNLBFKHDEOUMMOEDWKNFGLVSQPAIRBCJHTUUKJNCBRVPQG", "DSOELFIWMAHTTMAIOPBVDRCGHKLEFNJQWSUUSRQNIFKPCHEOMV", "GBALTJDWWTLBMFVCRHSUQPIONKEGAJDDWIORHBUVPCSLQMTAFK", "NEGJJEMASTBQOCPUHRIVWLFKNGDDGKFJLBRSCUIAHEOTVMWPNQ", "QNBMGSRFJCIHKETLUDAVWPOOPDVNRCTHFLQJIEUMGSBAWKOWSB", "GJMTIDQNFHVKPCLUERAAOUCLNWTDPJGQBFVKMREISHHSIRTAKF", "EPWNJQGBVLDUOCMMOELAVTQKJFIRBNWPHGDUSCCUOABVMPGKKK"};
    int n = 23;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> songlist = {"ADEF"};
    int n = 12;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> songlist = {"CABBAC"};
    int n = 15;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> songlist = {"ABBACC"};
    int n = 25;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> songlist = {"ABACC"};
    int n = 15;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> songlist = {"ABCDEFGHABCA"};
    int n = 8;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> songlist = {"ABCC"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> songlist = {"AAA"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> songlist = {"CBABDCEBCDAEEDA"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> songlist = {"ABCABCAA"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> songlist = {"BBA"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> songlist = {"AAB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> songlist = {"BAAA"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> songlist = {"AABA"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> songlist = {"BACA"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> songlist = {"AAA"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> songlist = {"ADA"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> songlist = {"ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC", "ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC", "ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC", "ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC", "ABBBBBBBB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> songlist = {"BBAC"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> songlist = {"AA"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> songlist = {"AA"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> songlist = {"AA"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> songlist = {"BACAB", "BCA"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> songlist = {"ABBBBBBBB"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> songlist = {"ABBA"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> songlist = {"ABCBB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> songlist = {"AAACBACBACBACBACBACBACB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> songlist = {"ABCDEABDECBAECDEDACB"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> songlist = {"AAA"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> songlist = {"BBBABABABABAB"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> songlist = {"ABCDEFGHIJKLMNOPQRSTUVWXYZAB", "CDEFGHIJKLMNOPQRSTUVWXYZABCDE", "FGHIJKLMNOPQRSTUVWXYZABCDEFGHIJ", "KLMNOPQRSTUVWXYP"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> songlist = {"BBACB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> songlist = {"A", "B", "C", "D", "B", "A", "C", "D", "B", "A", "D", "B"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> songlist = {"BB"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> songlist = {"ZYZY"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> songlist = {"AAABC"};
    int n = 9;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> songlist = {"AAA"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> songlist = {"ADED"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> songlist = {"ABA"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> songlist = {"CDEFAAB"};
    int n = 6;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> songlist = {"A", "AB"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> songlist = {"CAABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ", "ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ", "ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ", "ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ", "ABDECFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJ", "ABDCEFGHIJABCDEFGHIJABCDEFGHIJCABDEFGHIJ"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> songlist = {"AAAAA"};
    int n = 7;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> songlist = {"ABCBC"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> songlist = {"AA"};
    int n = 9;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> songlist = {"BWJGCSQZWN"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> songlist = {"CDEBEGFG"};
    int n = 7;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> songlist = {"ABCDB"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> songlist = {"AA"};
    int n = 10;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> songlist = {"ABCB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> songlist = {"ABCAA"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> songlist = {"AAAAA"};
    int n = 12;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> songlist = {"ABCABCABCABCABCABCABC", "ABCABCABCABCABCABCABC"};
    int n = 22;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> songlist = {"ABCABCABCCABB"};
    int n = 3;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> songlist = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZA", "CDEFGHIJKLMNOPQRSTUVWXYZAB", "DEFGHIJKLMNOPQRSTUVWXYZABC", "EFGHIJKLMNOPQRSTUVWXYZABCD", "FGHIJKLMNOPQRSTUVWXYZABCDE", "GHIJKLMNOPQRSTUVWXYZABCDEF", "HIJKLMNOPQRSTUVWXYZABCDEFG", "IJKLMNOPQRSTUVWXYZABCDEFGH", "JKLMNOPQRSTUVWXYZABCDEFGHI", "KLMNOPQRSTUVWXYZABCDEFGHIJ", "LMNOPQRSTUVWXYZABCDEFGHIJK", "MNOPQRSTUVWXYZABCDEFGHIJKL", "NOPQRSTUVWXYZABCDEFGHIJKLM", "OPQRSTUVWXYZABCDEFGHIJKLMN", "PQRSTUVWXYZABCDEFGHIJKLMNO", "QRSTUVWXYZABCDEFGHIJKLMNOP", "RSTUVWXYZABCDEFGHIJKLMNOPQ", "STUVWXYZABCDEFGHIJKLMNOPQR", "TUVWXYZABCDEFGHIJKLMNOPQRS", "UVWXYZABCDEFGHIJKLMNOPQRST", "VWXYZABCDEFGHIJKLMNOPQRSTU", "WXYZABCDEFGHIJKLMNOPQRSTUV", "XYZABCDEFGHIJKLMNOPQRSTUVW", "YZABCDEFGHIJKLMNOPQRSTUVWX", "ZABCDEFGHIJKLMNOPQRSTUVWXY", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "BCDEFGHIJKLMNOPQRSTUVWXYZA", "CDEFGHIJKLMNOPQRSTUVWXYZAB", "DEFGHIJKLMNOPQRSTUVWXYZABC", "EFGHIJKLMNOPQRSTUVWXYZABCD", "FGHIJKLMNOPQRSTUVWXYZABCDE", "GHIJKLMNOPQRSTUVWXYZABCDEF", "HIJKLMNOPQRSTUVWXYZABCDEFG", "IJKLMNOPQRSTUVWXYZABCDEFGH", "JKLMNOPQRSTUVWXYZABCDEFGHI", "KLMNOPQRSTUVWXYZABCDEFGHIJ", "LMNOPQRSTUVWXYZABCDEFGHIJK", "MNOPQRSTUVWXYZABCDEFGHIJKL", "NOPQRSTUVWXYZABCDEFGHIJKLM", "OPQRSTUVWXYZABCDEFGHIJKLMN", "PQRSTUVWXYZABCDEFGHIJKLMNO", "QRSTUVWXYZABCDEFGHIJKLMNOP", "RSTUVWXYZABCDEFGHIJKLMNOPQ", "STUVWXYZABCDEFGHIJKLMNOPQR", "TUVWXYZABCDEFGHIJKLMNOPQRS", "UVWXYZABCDEFGHIJKLMNOPQRST", "VWXYZABCDEFGHIJKLMNOPQRSTU", "WXYZABCDEFGHIJKLMNOPQRSTUV", "A"};
    int n = 26;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> songlist = {"A", "B", "C", "D", "C", "A", "B", "A"};
    int n = 4;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> songlist = {"AAAB"};
    int n = 2;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = -1;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> songlist = {"ABA"};
    int n = 5;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> songlist = {"AABCD"};
    int n = 6;
    CDPlayer* pObj = new CDPlayer();
    clock_t start = clock();
    int result = pObj->isRandom(songlist, n);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=7446789&rd=10667&pm=7476
********************************************************************************
#include<algorithm>  
#include<sstream> 
#include<string>  
#include<vector>  
using namespace std;  
   
#define FOR(i,a,b) for(int i = (a); i < (b); ++i)  
#define REP(i,n) FOR(i,0,n)  
#define FORE(it,x) for(typeof(x.begin()) it=x.begin();it!=x.end();++it)  
#define pb push_back  
#define all(x) (x).begin(),(x).end()  
#define CLEAR(x,with) memset(x,with,sizeof(x))  
#define sz size()  
typedef long long ll; 
struct CDPlayer 
{ 
  bool check(const string& a, int left, int right) 
  { 
    bool app[26]; CLEAR(app,0); 
    for(int i = left; i < a.sz && i < right; ++i) if(app[a[i]-'A']) return false; else app[a[i]-'A'] = true; 
    return true; 
  } 
  int isRandom(vector <string> songlist, int n) 
  { 
    string S; 
    REP(i,songlist.sz) S += songlist[i]; 
    for(int st = 0; st < n; ++st) 
    { 
      bool valid = true; 
      valid = valid && check(S, 0, st); 
      for(int begin = st; begin < S.sz; begin += n) valid = valid && check(S, begin, begin + n); 
      if(valid) return st; 
    } 
    return -1; 
  } 
};

********************************************************************************
*******************************************************************************/