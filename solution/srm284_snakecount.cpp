/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4435
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class SnakeCount {
public:
    int number(vector<string> image);
};

int SnakeCount::number(vector<string> image) {
    int ret;
    return ret;
}


int test0() {
    vector<string> image = {"11111111", "00000010", "11100000", "00010001", "10110011"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> image = {"110111", "110101", "000110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> image = {"111", "101", "111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> image = {"111", "111", "101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> image = {"110000", "001111", "000000"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> image = {"11111111", "11111111", "11111111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> image = {"1111111", "1000001", "1111110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> image = {"11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000000001", "11111111111111111111111111111111111111111111111111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> image = {"1110111110111111101", "1011111111101000110", "1111110110111011100", "1111110111111011000", "1111111101011111011", "1111111111111111011", "1101110111101001111", "1111111110111110111", "0110011101111101111", "1010110111011111110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> image = {"1111111010111", "1111101101111", "1111101101111", "1111101011111", "1010111110010", "1111101110101", "1111011111111", "0011010110011", "1010111000111", "0111111101111", "1100101111011", "1011111011111", "1101111101101", "1101111011110", "1011001111110", "0100111111111", "1111111111011", "1100101111011", "0111111111111", "1010111111111", "1001011111111", "1111000110111", "1111110111111", "1011111110111", "1111111011011", "1111111101101", "0111011111110", "0111011111101", "1011111110111", "1111111101100", "1111111111111", "1111111010110", "1110111111111", "0001110101111", "1111011110101", "1111101010011", "1111111011111", "1111000111111", "1101111011100", "1011111111001", "1011111010010", "1011111011100", "1111110101111", "1011111111110", "1100001001011", "1110010110111", "0000011110110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> image = {"111000111000111000111000", "000000000000000000000000", "101010101010101010101010", "101010101010101010101010", "000000000000000000000000", "101010101010101010101010", "101010101010101010101010", "101010101010101010101010"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> image = {"011", "101", "110", "011", "111", "110", "101", "001", "111", "010", "111", "011", "111", "101", "111", "010", "111", "111", "111", "110", "101", "111", "011", "100", "000", "101", "011", "011", "111", "111", "111", "101", "111", "110", "010", "111", "001", "100", "101", "101", "111", "110", "111", "111", "111", "101", "111", "111", "111", "010"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> image = {"11111111110111111111111110011001111111011", "11111111101101100100001111001011111101101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> image = {"1010011", "1100101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> image = {"110", "101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> image = {"101", "110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> image = {"10", "10", "11", "00", "01", "01"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> image = {"10", "10", "11"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> image = {"0000000000000100001000000010101000000000000", "1000100000011010000110001101001000000000000", "0000110010001100110100000000001000000000110", "1001000010000000100001000001100000001000010", "0010011110000000000001000011000001000000100", "0011000010101001101101110000001000010000100", "0101001100000110010001000000000010010010000", "0001101010001011101100000010000000001000010", "0000100010001011010000000011010101000010100", "0010000000000110100000011000100101110000001", "1011000000000000001110100100001000000000010", "0001001010010001101000000011110011010000001", "0101100101100001100000010000011100000010100", "0000001100000000010001000100001000101100000", "0001010110011010001001100100100011001010100", "0100000000001000101000101010111000000101011", "0100010000100000000000000100000010000010000", "0110000000011011000101000001001000010100000", "0000100000101000101101100010001001001000000", "0100001100100000110000000001000100100000011", "0101100000000000001010100000100100000110001", "0000100001000000000100001000100000000000000", "0101010100000101101000000000100000010011011", "1000000100000000000001100000000011000010000", "0000000010000101000000001000000010000011010", "0100010000101001010000001000001000100100000", "1101000000000101101001101001000010011100101", "0000000010010000001001000000000100000011000", "0000100000000100001100000000001100011000001", "1000100100000011000000100000011101101000010", "0100001010000011100010000100001000000000001", "0110000000001000000010000101101010000000101", "0100010000000000010000000000000000010000010", "0001010001001000001000010000000000011000010", "1000101000000001100001000000000000101000010", "0000001000000000001110000111001000000001010", "0010000100101001000000000001011000000000010", "0000000011000000001000011000000001010010000", "1000001010010000100010000000001000101110100", "0100010011000000010110000010010010001100010", "1001000001010001000000000001101100000000010", "0110001010001001010010000000000010000010000", "1001100010100001001100000001100011000001010", "0100001101000011011100000000000000100000001", "0101010010000100100001000010101001001000100", "0010000110100001001111000010101001000000111", "0010011101100011010010000011010100000001100", "1000000001100101010100100010000010000011010", "0001100000100010000100010000000000110000011"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> image = {"100100000100110000101100000110111001010001010", "000000001000101010001110001110001110110100000", "000000001001001001001100001001001001010001010", "000111000000010010000000011101100010000010010", "100000000000010011000110000000110000000000000", "000000001111000110000011001000000100100000100", "000110001000010000000101010000011000000100100", "000000010000000001000000100000010010101100000", "011100101010101001000000010000001001100000010", "100010000100000001000100000101000010000000000", "000101001100000000000000000010100010100110100", "000000000000000000100100000000001001000100000", "100100010000011000001110000000100100101001000", "011000110001000000011000111000110000001100000", "000000000011101000010000000000000000010000000", "010100000010010000000000100000000001000000010", "001000001101000001011101000000000000100000100", "000000000000110011100100010000000100001111011", "000100010000000000001000000000011010001100100", "000000110100001100000001111110100100001001000", "100000010010100100000110000000000010000010000", "110111000000100100100000000000001010010100100", "001000110000000100100001000010000010000000000", "000000000101001000101000101110000000100000100", "001000100000000000100111010011010001000110000", "010000000000000110001000001011010001000010000", "110000110010000010000010001000000101010000000", "000000001010101010000010101000001010010001000", "000000000000010000010011000010000010000110000", "010100010000000111100000000000101000000010000", "000110011001000010000111100000000000001101101", "000000000000000000001001000000001100000001100", "001000110000100000000000000000010000001100000", "000000000001010000000000000000000010000110000", "100000010001100000001000000000100011000000011", "011000001010000010000100000011000000001111000", "110000000000010110011000001010100001101000110", "000001001000100100111000101001100000000010000", "001100000001010000001000100110001001000000100", "001001101011000001010100100100000000001000101", "010000000000001100111010000001001100000001100", "001000001010001100001101001000101000100100000", "000100000010001000010100000001000000000000001", "000110100000010000010100000001001100011000001", "010000001000000000000010000001000100010001000", "110000000010111000101000101000000000100010000"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 317;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 50;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> image = {"11111111111111111111000000000011111111111111111111", "10000000000000000000000000000000000000000000000001", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000", "11111111111111111111000000000011111111111111111111", "00000000000000000000000000000000000000000000000000"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> image = {"11111", "10001", "11111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> image = {"100000111", "010111001", "110001111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> image = {"011110001111001101110111010100011", "110000000010001110100101010100010", "000110000100100011110111110101010", "110101001110000001010010011100110", "100000001111110100000010001000101", "110100101000100110001010001100010", "100100101011001100001110100111101", "000000001000010100111101010110111", "101001101101010100001101001000101", "111001111001010101101100101110001", "011111101111100110010011011111011", "011101001110000101011001001011001", "110011000011111001111000101110111", "110101000010011101000100111011101", "100001010010000011101100011000101", "100011101011101100111100100011100", "000100010010001101011100010010110", "011000111010111010011101001000001", "001010111001101001110110010001111", "101011011010111110001011101100010", "011010111110100000001100010011101", "000000000001011100100100011111110", "110011111110100100101100110011100", "110011111000111000101011111001110", "101011110010101100000101011010110", "000011101101110011000101000100100", "011001001101011110011000000000101", "111000111010101011100101110110001", "111000111011111100011110011110011", "101100100101000010101010111000010", "110100010000111111111010011001001", "100100110001010001001001010011101", "110101000001011111110100101011110", "001110111010111100111010001000011", "000110111100001100010111110110000", "000110001101000011100100001100001", "000011111000001111011001000011110", "010010101010010011100000011101101", "100110011110101001111001100100011", "100101111000110110011101011001001", "010000000101011011010001111110001", "010101101111110110101000101101111", "011110001010011111000000000101100", "011100000101101100010010000100100", "011110100100001001110110100010011", "001100000111111001111010010110101", "101100111011110110001111001011010", "011000100111110100000001101110010", "000111100000010011000101111011011"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> image = {"100011011111011100001001010100000000", "010011100010101100100110010111011111", "110010000000001101010011101010101001", "001100011101000100000000110110110101", "100010001110100110100000010001110110", "110011110001000001001100100111011010", "001110110111011101110011001010010001", "111011101010111111010010000011001100", "001100000111000110111011100111111010", "101000001111100100001110100101011101", "011001010000000110000101110100000001", "010000001111010001110000011100101011", "010011110101100000010010000101110000", "011111111000010101001011101010010100", "101000111111001011001111001110001101", "110101010100001110101111111101100110", "001111001000010101110101110010000010", "011111100110000010010000000001010001", "001101000101111100001111110101000001", "011001110101110101100101110111111101", "100000100001001011110011100000010001", "100010011111100010010111101000010110", "001010111001111000111001110101100100", "011000101110100010001010101010111101", "010011010111100111100000111000000100", "100011001100110100000010001111011010", "000000101001010000000101101000110010", "000100001001010101110101001110001110", "001111100100110000101101000100000001", "111001111111101011101000000010111011", "100110000000100110100101011110001110", "110000011010110010000111010110100101", "101000011110011100100000011111111101", "000011101101011100101110011011101000", "010001010100011001000010100010100101", "010110110101100011100111101010101011", "101100010101110101001011000101100101", "110101101101111011010101101111000100", "111000101110111111011001011001010110", "011111000110111111001111011010011101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> image = {"110001010110000011011001101000010111111001011", "101000001010000000001111010110000101000011110", "101010110010110110111110101011101101100010101", "111001100100101001000111100000101110110110001", "100110001101000010000011110000010110000000010", "101110011010010000000110101010001101100100111", "100000001000011010110110101010101111001000001", "101111110110010100110010100001100011111110100", "011001011011011101101001001001010000011001000", "001001011010011001111011000011100010001100101", "011001101000111010111100110010000001100110101", "000111110100001110110100001101100110111110101", "000101111110011010000010101101010001110011010", "100101010011000100011010111110001010001101101", "110010111111110100110000110110011111011111010", "000101100101110001110100100011010101111001100", "111000111001001010011111011101110010111111000", "100011010100010011010111100111101000111100011", "100101100100001101000101010111000001110001010", "000011010001111111000101110110011010001111110", "001110111010111101001001011101000000011010101", "100111011100101001110010101111100100011100010", "111011110000011010110011011011001000001100010", "110101101010010011111101111011000011010001010", "000111100001010001010101111111010110010001010", "001011110100001111101000101000101001111010110", "010010110101000000101111011000001110111111100", "000011000001110110101111001110100110011100001", "110111110110110000010100000101110011011001101", "010101000001001111011000010111100110111100101", "010101001110110000111010110000110100100111010", "010011000001100000000100011011100000100010111", "111100000110001101100111111100010101010010011", "110000110011111000000100101011010101111010010", "011011111011001100110001011111101001000101000", "000000000110011000001101111101100000110110000", "100000110110100100010000011111101000010100110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> image = {"0100000101100101101111111011010001100", "0001001001011001101101001001110000001", "1111101010010001101010011101001011100", "1000010000101011010111100101110101111", "1011111101101110011001111100011111101", "0010000111101110101100100100000110011", "1011011000110010101011101001001010100", "1100000110011101001100111100101101010", "1000101011010010001001011101101001000", "0010001100011100010110100110000000010", "0011101101111100011100110101101111010", "0010010110000100000100101110100000111", "0111111110100111010111101110001111101", "1011010001101110110101101001101010101", "0011110010101001010101000111000110011", "0001010000001100101011010100000100101", "0010000100100011001100100101110110001", "1110111111010101110100000010010001110", "0101001100010010000001111011001000000", "1001010111111110110110011011101011101", "1000001101001001011010010101010000001", "0111110010010000110010100011101011010", "1000101011111010110011111111111011000", "1111110001101001010101011000000001111", "1001100011001100110000110101001000011", "1101000000011001100110110101000000100", "0000010010101100011010001110011000010", "0000101100110010010111011110011011100", "1110001000000000111101111001011111100", "1111111011101101000101000101000001111", "1001001101000011101011000010001000111", "0010011000100101000000110000010001101", "0010111010111101111111010000010111001", "1101100000100000101011011001111111100", "0001001101001010110011110001100001101", "1001111001011010110111000010100001010", "1010100001000000011001001110110110000", "0000110101011001111101100010101001000"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> image = {"001100011111011011010111001110110000110", "111101100010111110000011100111001010101", "001111101111110101111100111101111110000", "100011001110100010011011000100001011110", "101100011100011010001110110100010101010", "110110010101101100100111101011001000100", "110100110100110010111010001000110011101", "011010100111110010011000110001000101111", "001101110110001111101101111001100011000", "000101001000001001101000101011001001111", "010000000000100010001100000100001111101", "001111000110010100010100001010000101011", "000000011010111100001011101100110011011", "110100101011100001111011110011101100010", "101000011000001000000101010001101111100", "100111001010111111100100011100010011000", "110000111101101101110000001001010110110", "001011011001111100001000111111000011011", "001001100001110111011001001110010111011", "010101011101110010101100100010010001111", "001110011010111000100100010011001001100", "100110010110111111011111101111010110011", "001101000101011101101010001001101001101", "011110100000000000110110000110100110000", "010000000011011101001011001001000011010", "000110111100111111001100111100110111011", "000011010010110000100111100111100100100", "001010110100011110000101101101010010110", "100110101001111101100001110101110010111", "000001100000000110100101110110011011000", "110100100000011111111010001111010101001", "000110000000101110001110010001001001110", "001110111011001110101011110000110010110", "110101110111101001111000101001111111110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> image = {"001011001100000100010000001101010", "110111110010010110100101010101011", "110100010110110000100100110010100", "000110000010000010001000110001000", "100101000011000100010011101000000", "011000010110011001101000101011010", "100000011010000111011000100111110", "000011010000111110001110110100001", "000100011010001101101110011100101", "111001010100001111101101101001010", "001011010010001000110111010001000", "110001110000000011100001000100010", "110011100110111001111001111010100", "001111100001010000110010101001101", "101110011110010010001000011010111", "000110111010110110000101011100101", "101100011000010100110000000010111", "010111011010000011110101101000000", "010101100101100010111101111010101", "011000001000011000100111101000100", "001011011100110100011000100111110", "000101111101010011111111111001001", "110110000000011101111010000101011", "101000001000010011001110001101000", "000111010010110000111111011101011", "000101000111111100111111100011111", "001011101101011010111110011100111", "111110010011000001010001000011111", "010001101001100011010111111011000", "101100111101110100011011110100001", "111101001001101011000011011100000", "101110001111101100101101101001001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> image = {"0001011000110000010110110101110", "0001111101001001010011111110010", "0010100000100101110110010010000", "0010110110100001100101000111111", "1101110000101001110100101011001", "0000001111001111000001100100100", "0010100011100000101111001000100", "1000010001001000100001000010010", "0111110010011011100111011000000", "0001001100100100011110011101100", "1001110001101100100100001101000", "1111100111011000011100110011101", "0001100111101000010100010011100", "1111111100011110001111011001000", "1011111010000000100100000001100", "0000001100111100100010001101000", "1100000001001000101100011000111", "0011111111111000110100000110110", "0011100010101000111111111110001", "0100111001000101000011111010010", "1010110111011100110011001111100", "1001110010011011010010011000001", "1010011100010011101101100111101", "0111111101011110010010110011010", "0100010010111101101110101111101", "0110011101100011011101110111001", "0010010110101000110000000011111", "0100001000100000100010001101111", "0100101110111110001000011101111", "1110001000001010011010010000000", "0101010110001000000001110001110", "1000010111000011111010111111000", "0100001000001100001101110000110", "0101001000010111000010110000101", "1011100011110011101011110110100", "0010001101100001101000011100000", "0000001010110010100111100010100", "0110011111001101100100111101001", "1110000100001001010110001101111", "1101110100010100000001101101001", "0110000110001100011001101111100", "0001011010101100011110000111011", "0101101010101001001001011110111", "0110001011110111001011111011111", "0010100101000001001011001010110", "1011010101110000101011000000110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> image = {"00010011010010010010110111101010", "10001011100001010010110011110001", "00100010010110001001000100111100", "10011101101100000100011101101111", "10000101011111001010010110110110", "11001111011110100100101110000011", "11100001110000100010010101100100", "00100111011001100100000010011000", "10110101000101110101100101001001", "01000111011111010100010110010011", "10010000101011011111100111001000", "01100011100100011010001111011110", "00111010101010110001111010111110", "01000110101011000100001100110010", "10001011000011000110000101011101", "11100001101101111110010111100100", "00111000110111100110100001100001", "00101010011100010101011011100111", "00101111000100001011100011011011", "01010001010100001100111001110100", "01000100110000101110011100110000", "10111111100101010000100010011000", "11010000000010001111110000111111", "01110011111110011001000110011110", "10001001011101110101111111110001", "01101111100011011001001110010000", "00100111000100000001111001110111", "01000100010100000101111010111010", "01101101011100001111010011000101", "01110100011011000101100100000011", "10110101100110111010011111100101", "01010000000100010011110010000111", "00001011101010011000011010100010"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> image = {"011001111111111001001101110101111", "111110011010001110101000011111111", "001010100110101111101100000000100", "010001111001010010001101100000101", "011101001010111110000111111100010", "110111110110110100011110101001110", "011110001101011001011100010001100", "100101110011011010011111110100001", "010100010010101100010011011011000", "001011110000110100100011011100000", "100110101001111101010010100110110", "010000011010111011111001001110011", "010010011110000111111100111000001", "000110110101110110000010000010001", "000000011001101001100100000100000", "101101110000010110111001101110001", "100100011000001010111000000101001", "001000101001010101010110111011011", "011010110001110001101010010100000", "011000011111101001101101010101001", "101111001100100101100001111000111", "111110101000100011011101010011001", "000000110110001100000110000101010", "001101101101111001001110111101000", "011000101111110101001110110010100", "100011011000001011111100011111010", "011010100111100001001001101110010", "011010100110100110001111110111101", "010111001100001001111101100100111", "110011010100010110001111000110011", "110110010100011101101100110000101", "111111001001111000101100100100111", "011111011101011010111100101110001", "000101000010000110111000111001101", "110000010100011110111101001011000", "101110100101101011010110110010111", "000010001001010000100100011010100", "010001011011001011101011000110010", "110001110000110101111100100100000", "010110010011011100011000001010101", "100100100100100000011111111001001", "010101101101000110101100111011010", "111010101111101011010100111101110", "011000000010101001100001101011111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> image = {"010110001101101011110010011111", "110100011000000001110111100101", "100010110110000110001100010011", "100010100011111000110000000100", "000001111110100000100011111110", "010100010010110110111101011101", "011110010000010001110010110111", "111000010010000111011101001000", "000001111001000101110111000000", "110110000100001101111011110011", "001101101100110000011111011010", "011110111001011001010101001001", "101010010001110101000000000111", "010001001100000011000011010000", "011110111010010001100010101110", "111110100011010110111100110000", "010100100111111011010000000110", "001101010101011110111110001110", "010010110011111000011111100101", "110001111010000110101100010110", "000110000001000000010000000101", "010000010101010101010111010010", "110000101101101110110111100011", "111100101111010000000110101011", "111000110001011101010011110111", "100001000000010010000011010100", "011000111001011101000100010111", "000100010111111100010101101111", "101010111111100100000111000011", "110111110100100010000101000010", "000111100011000100010101111111", "110100011001101101011101101100"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> image = {"101000101011000100001000111011010011100111111111", "101001010100010111001001110110110101011010000001", "011111011000101101001001100001001000001001000101", "000000001111000100011101000100111110001100011010", "110111110100110001011000110101011011000011101101", "001111011111100001011010001000010110100100001110", "111101011100000110110100111001110000111100110101", "000000101011100001110100101111010100010000000001", "100011001000001101011000000110100111011011010010", "000001100110111010111011001000011001110011110011", "010000111111001010110101111101101010100101101111", "000010110011100100000101000101010111101001111101", "100101010111000010110001101111101011000011100110", "100110110100100111100000100110000000001010011011", "100111010111000110010000100000101010111001100111", "111100011110111111101001000101111010010110100100", "010001100010001100100111110111000011010101001110", "101111010011011100101100101010001110011011000111", "111111100011011010101101111111011010010010110110", "111011100001101001000001000111011100011011011010", "011000101100101011100000011111010100011100100111", "000110001101011110011011101011111111101101111110", "010110011010000001100101011001001111011110110100", "011001101011001000001010011111011110001010111101", "000111001111000011101011000010011101000001100001", "000110001001010001101000110000100011010010111101", "110100101000001000111011101011110101110001101001", "110000100011101110010100011011001111110000110001", "100000101111101101010001000100001000011000101000", "001010100010011100011010111100111010011100001100", "101000011100101110011011000001101111001110000101", "101101010101000000110011111010010011010111001010", "010111011011010101100111101000001000000111011100", "100101111000001100101101101101011001110001111001", "111011001111001100010001001111100101000110001101", "010101000001010001000101100011100110010111011111", "000111011101010100000001101110100011100011110011", "101101011000011001111100010010100101001110001111", "001000000010110011101111010111111011011001011011", "011011011101111101110011101101010011111010011011", "110001011100111000001101110000101111011010101010", "110001111001100011101010101001011110001101001001", "110100010001101101111110101001101011011010000111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> image = {"001111000111011010111110010110", "011110010100011010001001000010", "000101001010000101001011111000", "100011101110000101111010111110", "011000110001110101110001111101", "101100101101100111001100000111", "000011110101101000101101001000", "111001101110000000011010001101", "010000100111000101010101011001", "000011110000001110011101011111", "100010100011100100100001011010", "101110110010000001000010010000", "010111000010011101011000100010", "100101111101011000110110011111", "110001111100110011001101011100", "000000110010101011011000100111", "010111100000010000010101010010", "000011101101000001111111000001", "010000110010100000001111111100", "101111111110110101000011110111", "000000100111011011101110101011", "000010001101010000011100110010", "101000101110100010001100110000", "110111011101101110101010100100", "000101010101101011001101001000", "111110001010101110100011011111", "111111101001101011100101110110", "010010110100000101100101100011", "101101101101101000011101011001", "101101110000000100101100010000", "001000101010000101110000101011", "110000111010011110101010001010", "100010001111110001010100100101", "001010110001100000010010101101", "100110011011001101101100100111", "000110010001001100100000101011", "000101001101000010011010000100", "110101100101101101010100111001", "100100001011000110110101011101", "000000101101111001100110000000", "110111000101111001011010001110", "001000010101001000110110010111", "101010000000110111110001000100", "101010111011110111100010000111", "101110011001101100010111000011"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> image = {"1101000010000100100000011100111", "0011010101010100000100001000000", "1111101000111001000001010111100", "1011010000101000110101000011111", "1001011111100010111001010000110", "1011110101011101101111001101100", "0011101010101010001010010101110", "1001000000001010110001000010111", "0111011001011001000110101001100", "1110101101001110000101111001001", "1001000101100001010100101010111", "0001000000000011001001110010010", "1011100111111101101000101000011", "1101000000010011010001000110111", "0101111111000001001011011101011", "1010011011101110111101000111000", "0011001101111001001000001100110", "1011100011110111111101110100001", "1011001101010111011000101000001", "1000110011001101111011101000001", "1011001011000101100101111001000", "1111101101111110110010001001010", "1010000010011111000110100100000", "0100010100110010111011010000100", "1110111111000001100011111010110", "0011000011011011101110100101100", "1011000011110001011101000100101", "1111110110000110111101011000001", "0001010111111011100100010101001", "1101101110001010010000101001111", "0101001101001100111100100111010", "0110001000110000001111011100001", "1100001110011001010010110101010", "0001110110101000000000110110010", "1110100010100001101011100011110", "1111000010010001100000111101011", "1100110110101110100001000010001", "1010011001000001011110111011000", "1010111001111111001101011100001", "1011100100001011111010100110101", "0001110110100100100100110111100", "0011001101010101011110010111111", "0110100011001000001010011000101", "0101100110001011111111100000101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> image = {"01111111111000101001100011110101010001010", "11010101100110101110111111100011011101101", "10000000111110000011011101110101000001111", "11100000011111110100010101100111101111011", "11100110010110011110100001010010100001001", "10100011001000001010010101101001110101111", "01110000110111001111110101011101001101111", "11000111101111000101100011110001111110001", "10010010101111111011100100010101001101100", "01110000110101000110001111010010100100101", "11111010100011000100111101010000011011101", "11000011010100011100101010010111101100001", "01011110100011110111101110111010100100111", "01101101010101010010010000000001000000110", "10000111000001110111110011001100011110100", "11001110101011100000111110101011111000010", "11111001101000111000101100010011011101000", "00110110000101110000001111010101111101001", "01000001101011110000111010001110110011111", "00011111110100000001011011110000101100001", "11011100010000101111111110000000101000101", "10001011101011100111111000101001111001001", "11001101001001101010001000011011000101011", "01100110001010000101111000011001001111110", "01001000000000010101000010010010011101110", "11001010010100010101100010000111101111000", "11111010101001010101101001001111011100000", "00100111011100100001001001000011100011100", "10100011101000100010110101100100000100111", "11100010111010110101011010001011000001101", "00100000111101101110100110100010110101011", "00101010100011011010010101110101100111110", "00000000101111111100110101000110001101011", "00001001111110101101110000110111011100110", "01111111000010100111001100011101010001001", "10010001011101001110011100010100111001011", "01011101101110010001010010110110000100000", "10101100000001101101010000001000111111111", "11000101100101011111001010101011000110101", "01001001110100111100011011101001111011010", "00001110010111000101101010001001100101110", "10110001011100101101110011000110110010101", "00010101000100010101111001101010100011001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> image = {"11100101000111010100010011010001101000110", "11011010101111010100011111101011000101010", "01011000000111101100100100111000010111110", "00011110011001001100101110100001110000000", "10111110110000010010101110011111001000001", "00011001001011011011011110000110000000011", "00011011110010100000000100110101011011001", "00110100000011000111010110100000101100100", "10111111111100001100001110111010111110101", "00101011011010010110101111000000100110101", "00110111110100001100110010000110101000101", "10000000001110110000101010100011111000010", "01010101000001001111001101011110000100011", "11110001100000001000000110101010000011010", "01110110011101100011100010000000010101001", "10100010100001111111001010111100000000100", "11110111101110101000111011000001010101100", "01110000000010000011100111110111101111101", "10001101100110000110101100101011010011110", "10010001001100010100111111010011101110100", "00001110001100110111010111111110111000110", "10011101000001010111100000001011110011011", "00111100111101001101010111001010100000111", "00011100011110010110111000001011101111000", "11001101110010001011001100101001111100100", "01001000010010010101101000100000000000000", "00110000101101101001010001001010100011100", "00100110101111110111111011010100001110011", "10101100000101101100000101101100101110111", "01010000011000000111100001111100000100101", "11111101101010110111000001111010101110100", "00001011011000011110101001000110010001110", "11010110001110100110111001110001100000001", "01001010110111100110101001110101010110001", "00001101101111101110111001101111000001011", "10101010101010010000110011111000011010001", "11101100110010100001001100100000010100101", "11011110100010111000001100111110110010101", "01000000010011000000100001001110111001101", "11110001011010111110010011111110101000010", "01001011000100100000110000010010101010010", "00001011001001110110001000101011101010110", "11100000010100000001101110110001101110111", "10010111011010000010010110100000111000111", "11001110001000000000101001000001011010001", "01000000010101010001011101110101011111011", "11010100010000100001101001001010000011010", "01000000010111010001011111010000001000101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> image = {"111101111111100111011000011001", "111001010000101100100000011011", "000001100101100100001000000110", "110100110110001101010011110101", "101000011101110011100101100111", "110011010000010011100011110011", "000111111101101011100000100101", "110111001010110110011011101111", "100010100000010011110011011111", "111001101010110001100010011011", "001100010000111001010100110001", "001000010101001101011100000010", "110001010001010010101011001001", "011010101001111101110001100111", "000100000010100101111001000100", "100000110111011000001011000110", "011110111011000001100101001111", "110010010101010111010010101110", "010011011000000110000101111100", "000010101001110101011010110011", "001010110110000110000100011110", "110000010110000001110010010101", "101010001100010001011000000100", "110011100000001010010000001110", "100111101101011000101101010111", "000010100010000111111000110010", "001110101111101100111010100000", "101010100001111000010100011010", "000010001000110010000011110111", "111100011011110101001111110101", "010111000111011100100010110101", "010100010110010110000010100001", "110100110100111010000111101010", "110110001010011110000111011101", "111110110110000011000000111101", "111001101010001110001110010001", "101000110000001001100111111101", "000101111110110110100100100001", "100101000010000001111001111011", "110010101111101001100100011110", "111111111101110011010111111001", "011110011111001101001001110001", "011100000110110110010010101100", "000110101110101100111101100100", "100000110101010111100110100011", "011111111110100101000001110010", "101000000000000111100011100100"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> image = {"00111100000111110110000100001000001101101110", "11000101010001000101010100011000010111011000", "10100001010010001110101010101000010100110100", "01001011110110001101110100101100111001011111", "10110010100010100110000110001111000111111010", "10000100101011000100011101111000111111011110", "10111110110001011110000111110010101011001100", "11011010011001000101100000101010011110011000", "01111101110010111011100111100000000110111100", "10111000111110111000001011010110100110011100", "10111011010110010001001010111111101100110100", "01100111010011110000111011101110000000100010", "00001011010101100111111111001000111010000011", "00100000101110110101101011110010110110101001", "10101111010100111000010000110010011101111010", "11100011111011010001111110001001110111101110", "11111111101001101100111111010000110011000010", "10110110010010011011111110000001111011110000", "10110001100111000110010000010011110111110110", "00001000011100000011111101100101011010001011", "10001100011010010110100011001101100010010101", "10110001111110101100011110100111110001111101", "10011110111001010101110011001010001111001110", "00100011000000110010100111000001010111011011", "00011011110111111000011110001101001111010111", "11011100101110111011100101001100000100000110", "01100110110111100000101011111101011000000010", "01010111101010110011100001001000001100001110", "01000011011011000011001110001011110110101101", "11010010001011000101111100110100010111100001", "00100001000111100100010110011001101001100000", "00010011111110000000101010100110111110000110", "10000001101001111000011010100000010101010110", "10101011010000101000000010101100111010000001", "00000100110010000100001101111010010010101001", "10001011110001111100000101101110000110011001", "00111111111110011100101100001110101001111001", "11001100001110011001001000111001111111010010", "11101110101111101001100101001100100010111000", "01000111110011001001001001000001100110101000", "10001101001011111000111000101010110110110010", "11011001110000110000000110011110011010001110", "01111010100111010011000110100100001101010000", "01011000010111001100000010000100101101111100", "01111111001110110110001000010110001100011001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> image = {"11111001010011000011011110001111010", "00011111010010110110100011010001100", "10001111100011111100011010111100100", "01000000001111011000011111010010010", "01111011110101101000100001011000011", "11110011010101011000001001100010100", "10101101110111011111010100110001010", "11110100111010010000100000011111110", "01111000100011000110100010111010011", "10100001100111000110010001100011101", "10100000110111010010000110111000001", "10000010101101111110111001110110100", "00011111001001111101110010001001000", "11101110100010000000011011110000100", "01101011010001011000001001001000001", "00111111101000010101010101100000100", "11101011000010100001010110110101011", "00011111100000010010111111010100001", "01010101101101100010101100110001111", "01000111110100000001101100101011011", "00000101101100100010001010100010001", "10010011011111010011111011010001100", "10110100111111101111101101110111010", "01010001111000110000011011010001110", "01110110000100011100100110011110110", "10101111100000101000001010001101100", "11010100101111011000001110100011011", "00010001010110011001111011100110000", "00111101101010010001111100111010110", "01101110000000000010111010111010110", "10110101111100110111010111001110000", "10101100111110011001110001111110111", "01000000110000010001111010101001010", "00110000111100111010001100011001111", "10110101011000111000101111111000001", "01110110001001011110110101010001000", "00010011111110010011010000101001011", "01110010011110001101101100011111101", "11011111101101011101010011100011100", "00011000000000100011011000111000000"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> image = {"011101010011000111011011001011110010001110", "000011000111010000100100011111011000110011", "100010111111100000000011011111110011101011", "100110101101111101000001111010110110000010", "110110110011010010100100110000111001101010", "010111101111011001111111010000111011110000", "011011000001100100111100111000011000011110", "110101001001011000000101100010011001101010", "111111101000000001110111010110111000110010", "101011111100001001001111010110100010100011", "100101100101010111101000111000111110101101", "100000111101101001000011011100101011101101", "100111101100001111100101001100000111000111", "001001011010001011110010001011111101101110", "011110001000110000100101110110010110000100", "100001011010111010100110001000001000001101", "001001011110110101001100011100100111101100", "110111011101101110001110111001111110111000", "100110100101000100001111000110000100101010", "101001000000011100110000101100111001011010", "110100000010001010000010111100001101001101", "110011011001010010001011111111000000100100", "010000011111001000110001100101001001100001", "011111100001101101000101001100000010111010", "011011000011100101101110101001010100100111", "001110100111110011010100110010111111011011", "010100101010001010100000011000101101110010", "000111101110111000000010101110011011100000", "110011111000011111111001011100011001001111", "000011010101111001110010000100110100000110", "001111001110101011101011011010100000101101", "101001011111111100110101001000011100000101", "010110111111101100010001010110001010100001", "010111110000010111010010010111001110001011", "001011001010010110010101110001001011111001", "110000000000011100001000110101101011111001", "010101101100010001010111011110111111101100", "100100111111100011101111010000110000011100", "011001000100010000110000011110000110011010", "010101000010110000010110010101101000000101", "011111100110010111110110110011000001000010"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> image = {"110110111111111100101100111000001111", "110011101000101111000011111101110001", "110101010010010111110011111010100001", "111011001111101101001100100011000110", "110001110100011000010111001011111001", "000111110011001101100010111111011010", "101100001101101001101010101110001100", "011000001001100110111111101000100000", "111011010110111100111100000000010010", "101010110110111000101100101011000111", "000111011111000010100010100000101101", "000100010010000110111001100111110010", "000100000111010010110010110000000100", "101011011110001110111001111101111000", "011011011000010100101000101001111011", "101010100000000110101111111111000011", "111101010111110110100000101000011000", "001101101111111011101011010010101011", "000001011110111011100001101000101100", "001110110111110111110001001001110101", "011110000011001101110110011001011001", "011000010100010100111100101010111001", "101111110010100101000001101010001001", "110010101111001101011100010010000011", "110001111000010101000110100111001010", "101111110101100101010111110111101111", "010000001011001111110001111011100011", "110101001100000110110111010001011110", "011000100111001011111001000011100101", "011111111101110001111001101110011111", "000010001111101100001111000010001111", "011111000100110111101011001100010110", "001101001001100001000001110001010011", "011101010010100110010000110100001101", "011011101100000011110110000000110111", "100110101011001001100100110100011010", "010111101111010111110101100010011001", "010000111101101011110111110001000100", "101011011010111001100111001100000100", "111001100001001111000100100101100101", "110011100001110001111010110001100100"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> image = {"0001100000100101001001110101001111111010011001101", "0010001110000101001111001001010100101110011011011", "1000011011100110001011110000100011001110010010010", "0011101101000101100001011111011010111011110100000", "1110010101101101101010100101100000100011100011111", "1111001011001111110010101010101011011010000101100", "0001111000110101001110011001010111110110101000010", "1111110011101100001010100101100110000101101001000", "1100100110000110101010000010111011010001011111010", "1001110011100010000001010100100001101010100111000", "0000110011100000100001111000110011001110011100010", "1000110100100010100001010000011100011111111010001", "0001011011111111010101011001100100000111011110111", "0010001001110111100010101000011001011010001001111", "0010010100101111101110110111101100000100000110010", "0101000101101010011110011101100011100000111110000", "0011000101011101101010010111011111010100011011100", "0101100001011011001100011010001010000111011100000", "1010010110000101010011000001010010011110010100111", "0001111100000001011011110000010010100011010010000", "0011000000000000111010010110100101101100100010010", "0110101101111110110110000001111010111110110011101", "0100001110100101111010010100010011000001011011101", "0100000101000001100100101010010101010101111010100", "1111010001101111001111100010001101011100110010101", "0110101011010110001011100100110000001101011010101", "0011000011110111011010001000011001101001111110111", "0011110111011001010000110010010000101111100010000", "1100111110000111001110001101110000000010111010010", "0101110010111110010111101010010000001111000110011", "1000010100100010001000100101110001110101101001111", "1101011101001001111101101001101001110100001101110", "1010010111110011000101011000010101001010001000010", "1100100101011010000000011000011001000010011011000", "1100011110010010010010010010101100101110111010001", "0110111111110101101101011101101100110100100010110", "1111000001110001111000011111010100011010111110101", "0101110111111001101100110001100110111101111110110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> image = {"100000000100111101000011110000011001", "101111110001011101100000110101100010", "000101110100111011110111110000110101", "101000011100010011011111010100011101", "110110111111011000001100110010110010", "001111010111000000100111110101101111", "011111011001000101011000010001010010", "101010111101111100001100110110011101", "101001111100101001011010011101010101", "110110111110001010100001101100110101", "011100110001001110001110000010000110", "101110100000000111011100011100110111", "111011111111101101111001011000101010", "000010111110101000010010011111010000", "111101000111010000011001010100001000", "000100100101010101010001001001011001", "110100000100110010010101111000000101", "000011110101100000011010010101111111", "001000001001010100010001110011110101", "110111101000011100101101001101101110", "010101011010101111111000100000010111", "101111100010001010101101011101010101", "000011000010110000000100000111110000", "001010100011111111101011101100110001", "001001100110011011101100010101101110", "111100101011010101100010011100101101", "111111101101111111010001010110111001", "011010010100000100001000001100000111", "000101011110110100111001011011010101", "111010011011011011010011100011000101", "101011100000000001110101110000011111", "000010010001100011101001001001000011", "011101011010110100110001111111100110", "001110101011010000001100100111000010", "100101010000111001000110010011100001", "110001110010001011100101001001101101", "100100100101100001010011110110000011", "011000010001110111100011101010111001", "110000100000000000100000100111000110", "111111110100001110001001001010001110", "001000011110100111010001010010001000", "000000111101111010100100011010101111", "011100010100000011100001011101000100", "010011100001010110101000000000001110", "000000000111100010011011101011000111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> image = {"11000010001011110100000100011010101101100011", "01111101000111001011001100001101001101101011", "01001110010111111101001111011011010000110111", "11010011000000011001011000000000011111011010", "11000101010100001111101111110000111111000001", "10011100011000110011011001001101111101101000", "11001110011110001110110101101100101000111011", "00111110011010100000110010110100010001111001", "11101101011100010101101100010111101001011100", "10000110110001010101001100100100110111111001", "00000010110100000000110101100100001001001110", "01110011011000100110101111111000110010110010", "10101111100101110110001110010001111111111100", "00001101110010011111111110100101001101100011", "00111010101111011011100010100000001010100101", "11100110011000101110101001001101111110011110", "00001101010111000100000111011110101100010111", "01101000101001011001001011010101111011110000", "11001111111010110000000011110011111010011000", "10001101100101110000111001000101110110101100", "11111001000010010101001011111110001101001010", "01101011101010000000111010010101000000111111", "10001011011111001101100100101100100001011111", "11100001011010001000100011001100110100110111", "01111100111000001011101011000000010110100001", "01101111001101111110000001110100001110110001", "11111110000101010110001010001001110100100001", "01010111001011001001001101111001000111010101", "10100001001011100100101000001011010001011101", "10101010100111001100101110111001011000000100", "11010000110000000010000001100001101100100100", "01001011000111000111100101100000000001101101", "10000100010100011000101111101011111011110000", "01010110000110110110000111100110001110000000", "11110010101110010011011111000011000110011001", "00100010101100111111000100110010001011001000", "11001000011010011101111001111011011010000001", "00010101110100011010110110111101001111101011", "11101111001100100010001011011011101110011110", "11010101110101100000000110100111111110011101", "10010000000111011101101111101011101001111101", "11001000100000110010101110100100000010011111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> image = {"001111110100110111010001100100010", "110110011010011001011100001010011", "111000100100001100110100011001001", "101010101101100111010001110111001", "001111101100111010000100011000011", "101010010000000100111110000111000", "100000001011111010011101111011001", "001110000001010011000001000001001", "101111110110001001010110110000101", "010101001010111100100011111000000", "101001110110001111100000011010101", "100010001111010010011010101110111", "101110101000111111110100110010001", "111111101011100011100111001011111", "101100110010110010000000000100110", "101111001100001010000011000000101", "110110111011100010011111001011010", "010011110010010001101101111000100", "011000101111010100010001001011011", "011001101001001000101101011101000", "001111100000011111010100010010000", "110101011001110111010011111011110", "101001100111010101001001110011101", "010110001001111011110010101100010", "111110000100000101110101010100011", "010011000010111001111100101101010", "110000110010011001001101111011010", "010100101000011011101001101100100", "110111001100110100110111010011011", "001001101010000001000100000101111", "101010001001111101111001000001110", "000101111010111000111100111001010", "111001110000001111111011000000100", "101010101100010011110001000000010", "001010011000010111101100100100110", "010001010001101010001111011111000", "010111010111001001111110010000100", "100111011110011010000100010000000", "011001001000111000101011001101000", "100111111000010011010001001010100", "101011110001101011100100110001011", "111111011010001001100011100010010", "001100011011111111001011110110010", "010110101011100001010001000101110", "000000110001001111000101000100011", "101011010011001110000110100100111", "001111111110010111001111100110110", "010111010011100100010100110111010", "110001100010111001101010101010001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> image = {"1111101001110100110110000101011011101000", "1001111110100110001011100011100011111011", "1101010110001011101100101100110110011010", "0011011000101000100101011001011000001001", "1001001100101101111000100101110110011110", "1011101110101000001111000011101001100010", "1110110101010110111111110110000011100010", "0010101101010111110101111110001000111110", "1001101010111010110001000111001110010010", "1011100100010000010011011000101101100001", "0100101010000111110100000111001000011100", "1000001110001010010010101100010111011000", "1110110010000001011110110110011000001101", "0011100111110011011100010100101110100011", "1010110001110101100001100101101011110101", "1111000111110011111111111100010011000011", "1101000100001010010010001011010100110000", "0000010010111100111000000101011111110010", "0011100110110000001011100001011111111001", "1011101110010111100111001001100000001011", "0111011001110101010111100111001100111111", "0101010001011000010100100000111100111000", "1110110010001000111001011100001110010010", "0100000110111000100110000010011100111000", "0110100111110110001010100101010000001000", "0111101110100010000000110101010010010111", "1000001100010110111110011101010011101011", "0000000010101010101100011011111111000001", "1001000011010011001111110000001110110000", "0010110001110001010011101110001101111111", "0011010101110011011100010001010111100110", "1101100011000010101111000100100110010100", "0000101110001010011010011100100000110010"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> image = {"0011101011011001101101110000010000", "0001101011010011110010100110001001", "0001011110000001110010101100001110", "1010000111010001100101110001001011", "1111110011100000000100001010100111", "1010011001010010110000001111001011", "1010101000001001101000000000011110", "1111101000001011001001101100010111", "0010101011011010011101011110100111", "1100000010011111001001100101110010", "0111011000110011011110110001111111", "1000010000100011011010111110111010", "1110011001100001001110010100100101", "0100111110111101011000000101100111", "0011011100111010001000010101110011", "0010000111110010001011010110010000", "1100111100010011010000001100111000", "1001001110111001011101011111010001", "0100011100101000111010101100010011", "0101000010011110001001001011010110", "0011110101011110011100010010101101", "0101010111010100010011100011000100", "0111111011010001010111101000010111", "0011100000111001011100011001010011", "0000100100010011011100110011100111", "1111011011001100101110010101111011", "1000001010110011100010101111110001", "0101011010010001110110111010011000", "0010000110001011111000000010100011", "0100000000011100100001000000001100", "1101001101100101110011100001000001", "1011111101100101010111000011111110", "1010000100010101110100110111101011", "1100001101111100011010111010000001", "0101111010110011110011101000011010"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> image = {"101110110101010010001111110100100110111001", "100111110111110001100001110111110110010001", "010100010011010101011111011011100010000011", "110100001101101010111110110010010010010000", "000111000011010011011110011110010000010111", "011101100101000111110101111011110111110100", "010101100011100100001101010001010100001001", "110101010100100001011000010000110101010100", "101010001101011010101101100010011100110110", "001100001101101000001111111001111000110000", "001110111100101110010011000100101101000101", "011011110001000000010111000011110110000000", "110100000010001010100011100111110110101010", "110101100111001010110010101111101010011010", "011100101010011010010001000000011110100101", "101011100111111110010011100010001111100111", "101000001101001001011110011000111001011101", "110000111110110010001111110111100010110111", "111000101001110000011001000101010010111010", "001001101001001010011000011111110000100100", "001111011111110011111111110010000101001000", "101001100011111001000000010010001000111011", "010110110110011101000100001011111001100101", "000010000000110111110011110001111100101110", "001110001111011101110010110010110101000011", "100011111001100011001011010101000111101010", "100110000000000110000111011101100010011111", "011110101100101100001011110010111111101010", "000111111001010011011000000110110001000100", "000100001101011010000011100100011010110111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> image = {"100010111001010001010100101000000", "100000000010000110010010110110000", "001011100000000000000111001100100", "100010111101100001101010010101101", "010001101111110000100100110010101", "100111111000001110101110101011110", "111010111100011101111101010110010", "110011000100101101110110000110000", "000111110001011100110000110110101", "000111001011010100110010011010011", "101100010001001111111111010100001", "000101010111111110000000001010010", "110111110011110101111011011001010", "000111100111101110000110011101100", "010001010000100000100010011000100", "001111001100100100000101101111001", "000010110100011010111100001001010", "001011001100010000000011001111011", "011010101110111101100101011101010", "010100101110000110111000010001000", "101000000001101011010111111100011", "111101000011110011110001001011111", "101100001101110110001110001011011", "110000001011111111010010101110110", "110010001010010011000110100001100", "110101011011101110011101101001110", "101001100100110111111001111110101", "001010011110001110011110000101101", "010011011001111100111010101110001", "001010000000111110110111101011001", "111011010011110100111000011011101", "001110101001101001110001010010011", "111100110000110101010011011001000", "001010100001100011000001110011100", "011101010011101101101000010110111", "000110011010001100000101101011000", "010011111110100000111000111011101", "001001000110011111010100000100101", "110011000011101100101000001000001", "010101111000111000101111101101110", "001110111111110001010001111111000", "101011111010111010101000010011101", "010010011101011011100010101000010", "000011100000110010011110001011101", "011100110110111000010000010111000", "011101110100011000001000111100111", "000110110010101010001110000011001", "011011001101010111100110000110111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> image = {"0010110100010101110100010001010011", "1110110111010100000100110100001000", "1010000001010100011000001110100011", "1110111110000010100010100100010110", "1110001000011000001010101010000110", "0011000001101111011001100000011000", "0011000001100000010101010110101001", "1000000101000110100101011101011101", "1011110111010110111110101100110001", "0110000001000111011111011010001000", "1010000001100111001111101111001010", "0100000001111000110110000001010111", "0011100001100001011001010001100001", "0101001111111100100111010101111000", "1010011000110100101111100010011110", "1011000000010110100100110100100111", "1000011101101110101111111111001110", "1000000000111000100111110110110000", "0110000001000011010111011000011111", "0011000010100010001001000010110101", "1111100000101000010110111001000010", "0100101101010001011011000010011111", "1110011101100010110100100101110110", "1001110010011100110110111110101001", "0101010000000000110010011010101011", "1100000110111101010101111000100110", "0001010111110101011101100101111101", "0001111001110101101100000101001100", "1001011110011011111000011011100100", "0010111000110111010000111111011001", "1110010111001000111000110111001000", "0001010111110111001010001000010010", "0000110100011001011001001011000111", "1011001001001011100000110001101001", "1011110100110000111010001011010111", "1010100011011000110001000010111101"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> image = {"0101010100011100011010101101111111000", "1111111110111100101100011111000101111", "0010101101000010100111111000100001000", "1110101101000110101001001001111110001", "1000000010000001000000011001100000010", "0000100100011100010110111100011011000", "1011001111010111101010000100010111101", "0001001111000010001001110101101110011", "0011101110000010100010000010011001001", "1110110101010001010110011111110100111", "1101000100110011011010101011000010110", "0100011000100100001010110011001111001", "0101001011000011101111010111001001000", "1001011001010011000101001100111001000", "1011011100010001110000010000001010100", "0110100101110100010100001110000111111", "0110001001111000111010111110010011010", "1011011000101010000100001000101000111", "0111111000101110110101001000001010010", "0111111011101010001010101111111000011", "1101111100110100000001010000100100101", "0101011101101111000011010101110001010", "0110101001101110010001101010010000110", "1010000110100011110010101110001100010", "0101110000000111101111010110101100111", "1010010000101101010010000100111000010", "0010001000010111011000001001011001111", "0010100011111100110000000101111100011", "0110000010000101000100010110111111001", "1111110111110110100000111000010110101", "0101100111000111010100100111101000010", "1110001010001001101110010001000111010", "0101011111001110110110111101100000111", "0001110110101100001100000111011010001", "0101001010110111001111111100010010011", "1010110010101111100111010000000101011", "0001011001011001110011011100100010010", "1000011111100111111001011110110101110", "0010010011010100100000110111011010011", "1100000001100100010110110000011011101", "0010000010101100011011111111000110110", "1110110001101110001010110011110000111", "0111100011111111111101111011010110110", "0101011110100110000010100100110101100", "0001010101100011100010001101000101000", "0011010011110000011110111110100100001", "1010001100010111101111100010000111101", "0101101110101110001100101001011100010", "1111100100001011001001010000100011001", "0010100100100110111110010101000101001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> image = {"0010001111110110011000110111111001", "0100101100000010110001101100100010", "1011111100010110000000100001000110", "1110011010001000101011000110011110", "0001001001011011111001100001100001", "0001111110111001101011101011110010", "1001001100100111001111001000001011", "1100001000001010110011101100101111", "1111011100110001001001101001101000", "1001111101101111110100010001011010", "0111011110010111101010010101001010", "0001000101101110011011001100110100", "1100101111101000111011110110110100", "1101100101100101000010100000100110", "0101101011011100001111011000000001", "0001111000100101001101011100010101", "0100001000100010101010101111100111", "0100001001010110101001000111100001", "0011010101010110110010101011001100", "1111001100100001000100101010010001", "1110100101011101101011111101111110", "0101100000110010101001110011110101", "0110110011010010100001110011111100", "0101111011010111101110011111111010", "1100110011001110011110001001011000", "1101111000010100110011001100000000", "1111001000001000110111111101010010", "0111100001000101100100011000101001", "1100000011000111010000111100111000", "1101011111100110001001000000111100", "1001110110101000111101110101000010", "1101000111110111101100101110101101", "1101110110001111100100010000100001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> image = {"0010011000011000110001101010010", "1101000011100011110011000100110", "0001111010001101110010011010011", "1011011111110110011001110000011", "0011000011011101100000001101000", "1001011101000000100111010001000", "1001110001000111001110101000001", "1111110111001010011000100011100", "0111011101011110100010000001000", "1100001110100101101110100000010", "0110010010000111010001011110100", "1000001100001111001010111100111", "0100110001011101101110011011101", "0110011011011010111100111111000", "1000010000111011100111110010100", "0011110010111110000100110110101", "1100111111110111100110011111010", "1110000111001011010111010111000", "1111101100100111000010101101111", "0111011001111101011111100100100", "0110101101011011100110000010100", "1000101110001100011001011010010", "0010011110000001110010011000010", "0100000010011101110101100011100", "0111010110011000010111010011000", "0110010010110001001111100101001", "1100000110001001010101100010101", "1011111011100110101011011010001", "1111111111011010110000100001011", "0111000110000100110101011010111", "0010111010010001011000100110110", "1100011010110011110011111100111"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> image = {"111010111110010001011101000011", "100101101110000000001011000100", "111010001011100111110111100100", "010100001010110110100101010001", "000010110110111011100010000101", "101010001110011100011011000110", "110100011110111011101010101010", "101100010111110100001100010110", "101010110001100101001101100000", "010100111100111110111111011110", "101000101001100010111100101111", "100101100001110100110101011110", "001010011000100111000110011000", "010001111001000001101000100010", "101000111000100001001011111111", "001010001011101010011011110011", "110011100100101100011111110001", "001000110010011010100100101111", "010100010110110011000011000011", "111001000000110000100101100010", "010110001111110010000000101010", "110100110110111010010111011010", "111001001111110000110000111001", "100111000111010110011011010011", "101011011011001001000111101110", "100100010000101010101111011011", "110010111100000110001001100100", "110000111011100000100011010010", "010010010000110010000011010010", "100010100100010000000110001011", "001000000010110000001001111111", "110111101110011100010100100011", "001100010110001001010111001001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> image = {"00101110001001001101000001100111101010010000111", "11111001101000111111001101000001001101000100111", "10110000101111110111100111110000111111000110100", "01111100111100111010000111101111101100011010110", "10010010111110110111111111000000011011000001000", "11110010000101010100100111101110000100100001011", "01100001001101010101011011001101111110101000000", "10101100111100000110000111100101011011111111001", "10111100100100001110110110111010010110011001001", "10100110010011010110110110101001010011001000110", "01110100100110111100110101011000000100111101000", "10110110110000101110100001100001100011010000101", "10011101011110011001100010000111101011110011010", "10111100011100101001010000110001110111110111010", "01111110110011110110000010011110111111011001110", "11111111110111000111101001100000101101011110011", "11000110010000011011000011001110111010100010110", "00101000111110010011100100000000011100111010101", "10010011111100001110111011111010111111001100010", "00000110111011111010101010110011111001000011101", "01101101011111010110000101100011011111000000000", "01100000101100011110001001000101000100001111011", "10010111101001001011010011001110100000000100101", "11110010111110000100100111110000101011010010001", "00111101011011001110011111010110101111010111100", "10110101011100001011110111011010011010101001010", "00110101011000001100101011100011001110001010100", "01111111011110010111110001111101000001101011001", "11001011001101010100111011011110011110011111011", "01011101111010110000101011110100000111001010111", "10001111110101100011001101001000000111110101111", "00001111010000101011110001000010111000100100100", "10000001110100010110010010001010110110011111011", "10101000111111000101000010010111110110110111110", "01000111110110000010000001101100001011011001010", "01100100010100101000111000101101110001101111110", "01011100010111010100111100110111100011100110100", "11011011110000100000101011111010000010000010110", "11111010001010000101111101100111000010111110101", "01001110101101100101111010110111101100101001101", "11010010010001000100010001111010111101001101100", "10000110000101100010011110111110111011101110010"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 316;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 317;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> image = {"10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "10101010101010101010101010101010101010101010101010", "00000000000000000000000000000000000000000000000000", "11011011011011011011011011011011011011011011011011", "10010010010010010010010010010010010010010010010001"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 292;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 276;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> image = {"11111111", "00000010", "11100000", "00010001", "10110011"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> image = {"001011001", "011011101", "110010000"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> image = {};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> image = {"110111", "110101", "000110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> image = {"1111111110", "1000000001", "1111111110"};
    SnakeCount* pObj = new SnakeCount();
    clock_t start = clock();
    int result = pObj->number(image);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=8446426&rd=8081&pm=4435
********************************************************************************
#include <algorithm> 
#include <iostream> 
#include <sstream> 
#include <string> 
#include <vector> 
#include <queue> 
#include <set> 
#include <map> 
 
#include <cmath> 
#include <cctype> 
 
using namespace std; 
 
#define ALL(i,v) for(unsigned (i)=0; (i)!=v.size(); (i)++) 
#define MAXN 64 
 
#define X (x+dx[k]) 
#define Y (y+dy[k]) 
 
#define NEI8 for(int k=0; k<8; k++) 
#define NEI4 for(int k=0; k<4; k++) 
 
int dx[16] = {-1,0,0,1,1,-1,-1,1}; 
int dy[16] = {0,-1,1,0,1,-1,1,-1}; 
 
int ar[MAXN][MAXN] = {}; 
int vis[MAXN][MAXN] = {}; 
int S = 0; 
int N,M; 
 
int ok (int x,int y) { 
    if (x < 1 || y < 1 || x > N || y > M) return 0; 
    return 1; 
} 
 
int dfs (int x,int y) { 
    S++; 
     
    vis[x][y] = 1; 
 
    int c = 0; 
    NEI4 { 
         if (ok(X,Y) && vis[X][Y] == 0) c += ar[X][Y]; 
    } 
     
    if (c==0) { 
       NEI4 { 
            if (ok(X,Y)) c += ar[X][Y]; 
       } 
       if (c == 1) return 1; 
       else return 0; 
    } 
     
    if (c==1) 
    NEI4 { 
         if (ok(X,Y) && vis[X][Y] == 0 && ar[X][Y] == 1) { 
            return dfs(X,Y); 
         } 
    } 
    return 0; 
} 
 
class SnakeCount {  
public:  
int number (vector <string> K) { 
    memset(ar,0,sizeof(ar)); 
     
    N = K.size(); 
    M = K[0].size(); 
    int ans = 0; 
     
    ALL (i,K) { 
        ALL (j,K[i]) { 
            ar[i+1][j+1] = K[i][j]-'0'; 
        } 
    } 
 
    for (int i=1; i<=N; i++) { 
        for (int j=1; j<=M; j++) { 
 
                if (ar[i][j] != 1) continue; 
            int c = 0; 
            int x = i; 
            int y = j; 
             
            NEI4 { 
                if (ok(X,Y)) { 
                   c += ar[X][Y]; 
                } 
            } 
 
            if (c == 1) { 
               memset(vis,0,sizeof(vis)); 
               S = 0; 
               if (dfs(i,j)) { 
 
               int flag = 0; 
    for (int i1=1; i1<=N; i1++) { 
        for (int j1=1; j1<=M; j1++) { 
            if (vis[i1][j1]==1) { 
               x = i1; 
               y = j1; 
               NEI8 { 
                    if (ok(X,Y) && vis[X][Y]==0 && ar[X][Y]==1) { 
                       flag = 1; 
                       goto done; 
                    } 
               } 
            } 
        } 
    } 
    done:; 
     
    if (flag == 0 && S>= 3 && S<=20) ans++; 
 
               } 
            } 
        } 
    } 
    return ans/2; 
}  
 
 
  
};  
 
 
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/