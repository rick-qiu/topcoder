/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=2356
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class TeamBuilder {
public:
    vector<int> specialLocations(vector<string> paths);
};

vector<int> TeamBuilder::specialLocations(vector<string> paths) {
    vector<int> ret;
    return ret;
}


int test0() {
    vector<string> paths = {"010", "000", "110"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> paths = {"0010", "1000", "1100", "1000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3};
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> paths = {"01000", "00100", "00010", "00001", "10000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {5, 5};
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> paths = {"0110000", "1000100", "0000001", "0010000", "0110000", "1000010", "0001000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3};
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0};
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {50, 50};
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {50, 50};
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 49};
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> paths = {"000000001000000000000000000000000000000000000", "000001000010010000000000000010001000000001000", "000000000000000000000000000000000000000001000", "000000000010000000100000000000000000000010000", "000000000000000000000000000000000000000000000", "000000100000000010100000011001000000000000100", "000100001000000000000101000001000011000000100", "101010001000010000000000100000000010000100000", "000000100000000001000000000010000000000000000", "000000000001000000000000000000010010000001000", "010000000000000001000001000000000000000101000", "000000000000000000000000000001110000000100000", "000000000000000000100000000000000000010000000", "000000000000000000000100001001000000000000000", "000000100000000101000000000100000000000001000", "010000001000000000000100010000110000000000000", "001000101000000000000001010000000000000000000", "000000000000000000001000000000000000000000000", "000001000001000000000000000000000000100000000", "000000001000010001000100000000000000000000011", "000000000000000000000000010000001001000000010", "000000000001100011000000001000000000000100000", "100000000000000000010000000000000000001000000", "001000000000000000101000000000000100110010010", "000001010000000000100000000000000000000000000", "000000001010010000000000000000000000000000000", "000000000000010000000000000000000000000000000", "010000000000100001100000000000001001010101000", "000001000100000000000001001000000000000000000", "000000100000000100000000001000000000100001000", "000010010000000000000000100000000000000000000", "000000000000100100000001100001000001000000101", "000000000000000000001001100000000000000100000", "000000100000000001000000010000000001000001000", "010001000000001000000000000100000000000000000", "000000000000010000000000000000000000000001010", "000000000000000000100100000000000010000000000", "000100000000001010000000000000000000000000000", "000000010000000000101000100100011100000100001", "000000000000010100100000000000000000000000000", "000000000000000000000100000001000000000000001", "000000000001010010000000000000000000000100110", "000000000000010000000000000000000000110100000", "000000000000000100000000000010000000100000000", "101000000000000000000001000010000101000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {45, 1};
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> paths = {"000000001000000000000000000", "000000000000000000000001000", "010001000000000000001000100", "000000010000000000000000000", "000000000000000000000000010", "000000000000100000001000000", "000000000000000010000000000", "000000000000000000000000000", "000000000000000000100000000", "010100000001100100000000000", "010000010000100000000000010", "100000100000110000001001010", "100100001000000000001000000", "000100001000000000000100000", "000010000000000010000000000", "000000000000000001000000000", "000000000010010000000100001", "000000000000001000000100000", "000000000010100000000000000", "000000000000000000101100000", "001000000000000000000000001", "000000000000000000100000000", "000000000000000000001000001", "001000000000000000000000010", "000000101000000000100000000", "000000100001000000100000000", "000010001000011000000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1};
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> paths = {"001", "000", "010"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> paths = {"00000000", "00000010", "11000000", "00001000", "00000000", "00100000", "00100000", "00001000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0};
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> paths = {"0000000", "0001000", "0100100", "0010001", "1000010", "1000000", "0000110"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 1};
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> paths = {"00000000001000", "00000000000000", "10000010001001", "00000000000000", "00000000011000", "00000000000000", "00000000010000", "00100100000000", "10000000000000", "11000110000000", "01000000000000", "01000001000000", "00000000000000", "10000000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0};
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0};
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> paths = {"000", "000", "000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0};
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> paths = {"0000000000000000100", "0000000001000000010", "0000000000000000001", "0000000100000000000", "0000000100100000000", "0010000000000000000", "0000000100000000000", "0000000000010000100", "0000000000000001000", "0000000000000000010", "0010001000000000000", "0000000001000010000", "0100000000000000100", "0000000000000000010", "0010000000000000000", "0000000000000000100", "0000000000000000010", "0000000000000000000", "0000000000000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0};
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> paths = {"0000000110000000000100000000000000000000", "0010000000100001001000100000000001000100", "0000000100000000000000100010000000000000", "0010000000001010000000000100100001000000", "0000000000000010101000000000000000000000", "0100000010000000010000000000000100000000", "0101000001011001000000010000100000110010", "0000000000001110000010110110000101001011", "1001010001000000000010000000001010010000", "0000000100000010001000000000010000000101", "0000000000000000010000000000000000000100", "1000000100000100010000000000100000100000", "0000000000110100000000000000000000001000", "0000011100001000100000001000000100000001", "0100000000000000000100000000000000000000", "0000000100001000100000000000100000000010", "0000011010000000000100100000000001000010", "0000010010000000001000100001100000000000", "0000100010100000000000000101100000000100", "0000000000000000010000000001000100000000", "0100000000000000010000101000000000100000", "0000000010000000000100000010000100010010", "0000000000000000000011000000000000000000", "0001000100000010010000000010000000000001", "1000110000000100000000000101000001000000", "0000000000001000000000001001000100100110", "1000000000000000101000000000000100110010", "0101000010100000010001000000000000000000", "0000100000100000101101000000000101000010", "0001000000000000000000000010000000100000", "0000000010001000000100000000000100001100", "0000000000100101010100000000100001000000", "0000000100100001000000000000000001010000", "0000100000000011000010101000011010000010", "1100000000000000001000000010000001000000", "0000000000010010000000110000100001000000", "0101000000000010000000001001110001000000", "0001000000000001000000000010000000110000", "0000100000100001000100000000100000000000", "0011000000000000000000000000000010000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {40, 40};
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> paths = {"000000100100101000", "100110010110000000", "000110100100000000", "000001000000010011", "110101000101101000", "000000000000000000", "000001000010000100", "000000000101001100", "100011100000100001", "100000000000001011", "011000000000000000", "000000010000000000", "000000000000000100", "000001000000000000", "001000000000000101", "101000100000010000", "000000001011100000", "000100000110010000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {16, 1};
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> paths = {"0100000000000000000010100", "0000001000000000010010000", "0000000000000100000000001", "0110000000000000000010000", "0001000000000000000000000", "1000000000000000000000000", "0000010000000100000000000", "0000000000000000000000000", "0000000001100000000010000", "0000000000001000000000000", "0000000010000000000000000", "0000000000000010000000000", "0000000000000000000000000", "0000000000000000010000010", "0000000000000000000000000", "0001000000000000000000000", "0000001000000000000100001", "0010000000000000000000000", "0010000000000000000000000", "0100000000000010000000000", "0000000100000000000000000", "0000000000000000000100000", "0000000000001000000000000", "0000000000000000000000000", "0001000000000000001001000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0};
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> paths = {"000011100001000", "000100011001010", "110000000000000", "000000000000010", "100000100110000", "000000000001001", "000000000000000", "100000000100000", "000010000000000", "000000000000000", "000000110000000", "000100001000000", "000100000000000", "001000010100000", "000001010000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0};
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> paths = {"000000110000000000000000001000000000000000100", "000000000000000000000010000000000000000000000", "000000000010000000000000000000000000000111000", "000000000000000000110000000000000000000100000", "000000010000010000000000000000000000000000000", "000100010000010101000000001010000000000000101", "000000000000000001000000000100100000000000000", "001000000000010000010000001000001001101000001", "010001000001100000000000100000000000100000000", "000000000000000000100000010001010000011001000", "000000000001000000100000000010010100101100000", "010101000000000101000000000001100100101000000", "000000000001000000000000101100001000101000001", "001000000110000000000000000000000010000001001", "000000000000000101100000000001000000000010100", "000010000000100000000100000000000000000100010", "000000001010100000001000000000100000001010100", "000000000000000000000000000000000000000000000", "000000000000001000000000101000000000010001000", "001000000000000010000001000000001000000111000", "010100010100000001010100100000000010100000000", "000000010000000000000000000001000000000000010", "000000000001001100000100000000000010000010000", "010000001000000000100000000010000010000000000", "000000100000000000000000000001000010000100000", "000000000000000010010010000000000000100010000", "000001100000000000011110000001000000000000000", "011001100000000000000000000001100000010000000", "000000000000000000000000100001010000110000000", "000010000101000010000100001000000000000001000", "000100000000110000000000000000000000010010100", "000000100010000000000000010000000010000001010", "100000010101000000001000000000000000000100000", "000000000000000000010000011000000000000000011", "000010000000000000000000000100001000011000000", "100000000001000100000001010000000000000000100", "110000010100000101001000000001100000000000100", "000010000000000000000000011000001010100011100", "100010010000000000001000000100000000000001000", "000010000100000001001000000000000100000000000", "000000000000000000000000000000000000000100000", "000000001101000001011000000000000000000000000", "000000000000010000010000001010000000000000000", "000000010000000001010000000000000000010000000", "000000110000001001000000000010001000000110100"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {44, 1};
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> paths = {"000000100000001000", "100100010010000000", "000010100100000000", "000001000000010011", "100100000101101000", "000000000000000000", "000001000000000100", "000000000101000100", "100011100000100001", "000000000000001011", "010000000000000000", "000000010000000000", "000000000000000100", "000001000000000000", "001000000000000101", "001000000000000000", "000000001011100000", "000100000110000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {16, 1};
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> paths = {"00001000010000100000000000", "00000010001000100000010000", "01000000000100000000001110", "00000100000000011000000000", "00010001000010101000000001", "00000011000001000000100000", "00000100000100001101000000", "00000000010000000000000010", "00000010000010000000000000", "00000001001100100000100000", "00000001000000000011000000", "00000000011000000000000000", "00100000000001000000000000", "01000000001000000001010000", "00100000000000010000010100", "00000011000001100000100000", "00010000100000000000000000", "00000000010000000000000001", "00000000000000100000000000", "00000000101000001000100000", "00000000000000000001010010", "00000000100000000000000000", "00000001001000000000000000", "00000000000000010000000000", "00001000100000010000000000", "00000000000000100000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 25};
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {31, 1};
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> paths = {"000010000111100001000100000000000000000000000", "000000000000000000000000010000000000000100100", "000000000000000000000000000000000010000000001", "000010000010011000000000001000010010000000000", "000000000000100000000000100000000000000001000", "011100000000000010000010000000000000000010010", "010000000100000000110000000000000000000000000", "000010000000000000000010100000000000000110000", "010110100000000010000000000010101100100000000", "000000000000000000000000000000000000000000000", "000000000001000000000100000001000000010010000", "000000001000010100000000000000000100000010000", "000000000000010000000001100010000000000000000", "000000100010000000000010000000000010001010100", "000101000000000000000000010000000000000001011", "000000000010000000010000000000000000000100000", "000000000000000000000000000010000000000100100", "001001100000000000000000000010000000000001000", "100000010010000010000001001001010001000000000", "000001000000000000100000101000000000010010001", "100000000000000101100000000000000000000001101", "000000100000000000000000000010000001000000000", "000001000001000001000000100010000000000000000", "000000000100100001000000001000000001000000000", "000000000000000000000000000000001000000000100", "000010001010100001100000000001010000001000000", "000001011000010000000000000100010000100001000", "001000010010010010100000000010000000000000000", "000000000000000000001001000000000000010000000", "000000000000000000001001000100000000100011000", "000000000000000000000000101001000000000000000", "000000000000000100000010000100100000000010000", "000000001001000000000000000000000001000000100", "000000000000000000010000010000000000000000001", "000000000000000000000000000000000000000000100", "000000100000000001000100001100000000000010000", "100000000010100010000000000000000000000001100", "000000010100000000000000001000000000000000010", "000010000000010000000010010000010000000000100", "000100000000000000000000000001000110000000001", "010100000000000000001000001000010000000000110", "000000000001000000000010000010110000100000010", "000100000000000000000110001000000000001100000", "000000000001000001000000011000000100000100000", "000010000000000000001000000100010000000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {44, 1};
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> paths = {"00001000000000000000000000000", "00000010000001000000000000001", "00000010000000000000000000000", "00000001000010001000000000100", "00000000000011000100100011001", "01100010000000000000000000000", "00000000101000010000000000000", "00000000000000000000010010000", "00000000000000000000000010100", "00000100000110100000010000110", "00000001010010000000000110000", "00000001000000010000000000100", "00000000000000000000000000100", "10100001001000000100000000000", "00100001000000011000000001000", "00010000100010001000010000100", "00000000010000000000000000100", "01000010000000001000000000000", "00000000100000000000010000100", "01000000000000000000100001011", "00000101000001000000000010000", "00001010000000000000000000000", "00000000001010010000010000000", "01100000000000100000000000000", "00000100001000100000000000101", "00100011000000010000000000000", "10101000010000100000100000000", "00000000010000000000000000000", "00010000000000000000011000010"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 27};
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> paths = {"0000000010100010000000000", "0000000000001100001000000", "0000000100000000000100010", "0000010101000000001000001", "0100000000001000000000000", "1011000001001000100001000", "0100000000010010000010110", "1000011000100000110001000", "1011001000001011000010100", "0001000010000000100100000", "0001000000000011011000000", "0000000000000000000000000", "0000000000010000001001100", "0000000000110010000101001", "0011100100000001011000000", "0000000000001100000000001", "0001001001000000000000100", "0000000100000000000000000", "0100110000010001000001000", "0010100001000010000000000", "0000010000000000100100000", "0000010000000000000010001", "0000100000000000010010010", "0010100000000000000011000", "0000001000001101100000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {24, 1};
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> paths = {"0000100010010011001100010001", "1000001100000000000000000000", "0001011000011000100001000010", "0100000001001000000000000000", "0000000011000100000000000000", "0010000100100110100000000000", "0000000100000000000000001000", "0000000000100000000001110000", "0000000000010000000000001000", "0000000000000101000100100011", "0000000110010000001000000000", "0000010000000000000000000000", "1001000001010000001010000000", "1000011000000001100100000001", "0000000000100001000000010000", "0000000000010000000001000000", "0100001000000000000000001001", "0000001110000100000010000110", "0010000000000000000000000100", "0000000000000000100010100000", "0000001000010000000000000010", "0000100000010000000000001001", "0100000100000010000100000000", "0001000000000000000000000100", "1010100011000000001000000000", "1001001000010010000000000000", "0010011000000000000000000000", "1000000000000001000001010000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 27};
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> paths = {"0000001000000010000000000100", "0000000010000001000000100011", "0000100000100000100000000001", "1110001000000010000000000100", "0001010000000001000000001100", "0000001000100100011000100000", "0011000000000010100100000100", "0000000010001000000000000000", "0000000000100010000010000000", "0000000000000001000001000010", "1110000000000010000100000010", "0000010000000000000000001001", "1000000000000000000000001000", "0000000001000000000100000001", "1000000011000000000001001000", "0111100000000010000100000000", "0000000000001000000000101000", "1100000000000001000000000011", "1000010000000000000000000000", "0000000001000000000000000001", "0000000000001000010000100000", "1000000000000101001000000001", "1000000000101000000010000000", "0000000000100010100000000100", "0000001001000001000000000000", "1011000000000000110001000000", "0000000000000000010101010000", "1000000000000101000010001100"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 26};
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1};
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> paths = {"01101000010000000000", "10000001101000000000", "00000000100000000000", "00000000000000000000", "01000000000000000010", "10000001100000000000", "00100001000000001010", "00000000000010000000", "01010000001001000100", "00000001000001000000", "00000010000110000010", "00000001000010110000", "01100000100000000001", "10100001000000000000", "01010000000011010100", "10000100010010000000", "10000001010001000000", "00010000010000100001", "00000001100000100000", "00000000000000001010"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {19, 1};
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> paths = {"000000000000001001000", "000000000101000100100", "000000000000000000000", "010000000001110001100", "010001000110000000001", "000000000010001100000", "000001000010010000001", "010100000010000010010", "000000100000000000000", "000001000001000000000", "000000000001000000010", "000010000000000011101", "001000000001000000000", "010001000000000000100", "000010010000000001001", "100000000001100000100", "000100001010101101000", "000000100000000000000", "100001001000100101000", "010001000000000010000", "000100000000010110000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {20, 1};
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> paths = {"00100000000000000011000000000", "00000001000000010000000000000", "00000100000000000000000100000", "00100000000000000000100000000", "00000100000000000000000000100", "00000010100000010000000010000", "00000000010000101000001100000", "10100000000000000000000000000", "00001000000000000001001000010", "10101000000000001000000001000", "00000000100000000101000000000", "00000100100000000000000010001", "00000000000000000000000000000", "01000000000000000000000000000", "01100000000000000001000001000", "01000000000101000000000000000", "00000000110000000000001000000", "00010000000001000000100000100", "00000000000000000001000000000", "00000010001000100000000000010", "00000000000000000000000000000", "00000000000010100000000100010", "00000100000000000000000000100", "00100000000100000000000010000", "00000001101000100000000000010", "00000001100000000001100100000", "00000000000000000000000000000", "00100000000001000000000001100", "00000000000000100000110000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {26, 0};
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> paths = {"010010110000010010001001000000011000000", "000000000000000000000000000000000000000", "010110001110100100001000011001000000000", "000000000000000000101000101000011000000", "001000010000000101010000000000000000000", "000000000100001010000000000000010000000", "100001010000100000010010010000000001001", "100000000100000100000000100000001000000", "100000000000000000000000100100000101000", "000000000011000000100000010010100000001", "000000010000000000010000110000100000000", "010000001110000001000000000000010000100", "100101010001001000000010000111000000000", "000100000000000000110000100100101000010", "000000000010000100000000000000000000010", "000100000000000000001000000000111000000", "000110000000001000000000000001000000100", "100001000110010000000000101000100000000", "000000000000100000001100000000000001001", "000010100010100000000000000010001000000", "000000000000010001100001010011000100000", "000000000000100000001000010000100000010", "001100000100000001000000000000000000100", "111000000001000010100000000100000000010", "010000000000000000001000000100011000100", "010000100010000000000000100100001000000", "010000011000000010000000000000001010000", "000000100100000001110000010000000001000", "001000000000000010011000100000000010001", "100000000000000011000010000000000000001", "011001000000010000000010000010000000001", "000000010010010000000001101100001100000", "000000001010000000010100101000110000000", "011100001000000000000010000000000001101", "001000000000001000001000010100100100000", "000000110000011000000000010000000000000", "100000000000001000000000000000010010001", "000011000100001000001010100001001001000", "010000001010000000010000010000000100000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {38, 1};
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {47, 1};
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> paths = {"01010000000001001000", "00000110100001000000", "00000100000001100000", "00000001100000000000", "00100101000000000100", "00000000000000000100", "00100100010000000000", "01001000000001010001", "10010001001111000100", "10000010000010111101", "00000000000100000001", "00101001000000000000", "00100000010000000000", "01000010001100101010", "10000110000000000000", "00000000001111000100", "00001000110101000010", "00000000000000000000", "00000000100000100000", "00000000000000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {17, 0};
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> paths = {"000000000010001000010000", "100000000010000001000010", "110010000000100000001000", "000010100000000011000100", "000000001000000001000100", "010100000000001000100000", "000001000010000000001101", "000000000000011000000000", "001001000100000000000000", "000001100000000010000000", "001010100000100010001000", "000000100000100000100000", "101010111000000000110000", "011010000000000010100000", "001000000001000001011001", "010100001100000000100000", "000000011000001000000100", "000000010100100000001000", "010101000001100001000101", "000011000000010000000000", "000000000000001010100000", "000001000000000000000000", "000100000000000001000000", "000000011000000000010000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 23};
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> paths = {"0000001000010000", "0000010001000000", "0101110010000000", "0000000000010000", "0000000100100100", "0000000000000111", "1001010000011000", "0010000000100000", "0101000000100000", "0000000000100110", "0000010000000010", "0000000000001000", "1000000001010000", "0000000000100001", "1001000000000000", "0001000000010010"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {3, 11};
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> paths = {"0000000000000000000001", "0000000000010010000110", "0000000000000000000000", "0000010000000001100000", "1000000000010110100000", "0000100100000000000000", "0000000001100101000000", "0000000011000000001101", "1000000000000001000110", "0001001000000000000000", "0000000001000101000001", "0010110000000100000100", "0000000101000000000000", "0000000010000010010010", "0001010010001000000000", "0000100000000000000000", "1000010000000000000001", "0000100001001100000000", "0000000000000000000000", "0000000000000000000001", "0000000000000000100000", "1000001000000101000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 0};
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> paths = {"000100010000000100000", "000000000110010010000", "110000000000000000110", "000000000000010001010", "000000010001000000000", "000000000000000000000", "000000000110000000000", "000100000000100000000", "000000100000000101000", "000000000000001000000", "000000100000000010000", "100100000000000100000", "000000000010001100000", "000101000000000010000", "000101000001100000000", "100010100000100000000", "100000100000000001000", "000000000001000010000", "000001000000000110000", "000000000000100000000", "100000000010000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 1};
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> paths = {"0000010001000101000010000011", "1001000000000000000100010000", "0000010000000010100111000000", "0100000000001000000000000000", "0000000010101100000000000000", "0001000000100000000000000000", "1010000000000000000101010000", "1000010010100000100000010010", "0100110000000001110001000000", "0100000000000001010000001010", "0001000000010001100001001001", "0101010000100001000000010000", "1010000011000000100000000001", "0100000001100000100000000000", "0100000011000101000000000010", "0000000000000100100000000010", "0000000000010000000001001100", "0100000001000001000000000001", "0010100000000001000000000001", "0001000010000001100000000000", "0000001000010100000000001010", "0000000000000000000100010000", "0000001001000000100010000000", "1100100100000100000000000000", "0010100011000000000100100001", "0100000010000100000000010010", "0000000000001000000001000000", "1000001000000010000000000000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 27};
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> paths = {"00", "00"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 0};
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> paths = {"00", "10"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> paths = {"01", "10"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {2, 2};
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> paths = {"01", "00"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> paths = {"010", "000", "110"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 1};
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> paths = {"0110000", "1000100", "0000001", "0010000", "0110000", "1000010", "0001000"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {1, 3};
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> paths = {"011101", "101010", "100101", "110010", "101101", "101110"};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {6, 6};
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> paths = {};
    TeamBuilder* pObj = new TeamBuilder();
    clock_t start = clock();
    vector<int> result = pObj->specialLocations(paths);
    clock_t end = clock();
    delete pObj;
    vector<int> expected = {0, 22};
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=7477775&rd=4740&pm=2356
********************************************************************************
#include <string> 
#include <cstdarg> 
#include <set> 
#include <utility> 
#include <vector> 
#include <queue> 
#include <bitset> 
#include <map> 
#include <functional> 
#include <sstream> 
#include <algorithm> 
#include <iostream> 
#include <cstddef> 
#include <cstring> 
#include <cctype> 
#include <cmath> 
#include <cstdio> 
 
using namespace std; 
 
typedef vector<int> VI; 
typedef vector<VI > VVI; 
typedef vector<double> VD; 
typedef vector<VD > VVD; 
typedef vector<string> VS; 
typedef vector<VS > VVS; 
typedef signed long long s64; 
typedef unsigned long long u64; 
typedef pair<int,int> PII; 
 
#define all(a) a.begin(),a.end() 
#define out(x) cout<<#x<<" = "<<(x)<<endl; 
#define out2(x,y) out(x) out(y) 
#define out3(x,y,z) out(x) out(y) out(z) 
#define fillchar(a,i) memset(a,i,sizeof(a)); 
#define fori(i,max) for(int i=0;i<(int)(max) ;(i)++) 
#define for2i(i,min,max) for(int i=min;i<(int)(max) ;(i)++) 
#define forv(i,a) fori(i,(int)(a.size())) 
#define forv2(i,j,a) forv(i,a) forv(j,(a)[i]) 
#define forIter(i, c) for(typeof((c).begin()) i = (c).begin(); i != (c).end(); i++) 
 
void xd(VS &c) { 
  forv(i,c) cout<<c[i]<<endl; 
} 
 
template<typename T> 
vector<T> make0() { 
  return vector<T>(0); 
} 
template<typename T> 
vector<T> make1(const T &a) { 
  return vector<T>(1,a); 
} 
 
template<typename T> 
vector<T> make2(const T &a,const T &b) { 
  vector<T> r(2); 
  r[0]=a; r[1]=b; 
  return r; 
} 
 
template<typename T> 
vector<T> make3(const T &a,const T &b,const T &c) { 
  vector<T> r(3); 
  r[0]=a; r[1]=b; r[2]=c; 
  return r; 
} 
 
template <typename T>  
void sortref(T &a,T &b) { 
  if (a>b) swap(a,b); 
} 
 
template <typename T>  
void sortref(T &a,T &b,T &c) { 
  if (a>b) swap(a,b); 
  if (a>c) swap(a,c); 
  if (b>c) swap(b,c); 
} 
 
template <typename T> 
int sgn(T x) { 
  return x<0 ? -1 : x>0; 
} 
 
string lc(const string &x) { 
  string r=x; 
  for(size_t i=0;i<r.size();i++)  
    r[i]=tolower(r[i]); 
  return r; 
} 
 
string uc(const string &x) { 
  string r=x; 
  for(size_t i=0;i<r.size();i++)  
    r[i]=toupper(r[i]); 
  return r; 
} 
 
int gcd(int a,int b) { return b?gcd(b,a%b):a; }; 
u64 gcd(u64 a,u64 b) { return b?gcd(b,a%b):a; }; 
 
u64 tohop(int a,int b) { 
  static u64 cache[68][35]={{1}}; 
  if (a<0 || a>67) return (u64)-1; 
  if (b<0 || b>a) return 0; 
  if (b<a-b) b=a-b; 
  u64 &r= cache[a][b]; 
  if (r) return r; 
  return r=tohop(a-1,b-1)+tohop(a-1,b); 
} 
 
int positionn(string source,string t,int n) { 
  int i=0; 
  while (n && (i=source.find (t,i))!=-1)  
    if (--n) i++; 
  return i; 
} 
 
VS phanstring0(const string &s,const string &th) { 
  VS r; 
  int i=0,j=0; 
  for(;;){ 
    i=s.find_first_not_of (th.c_str (),j); 
    if (i<0) break; 
    j=s.find_first_of (th.c_str (),i); 
    r.push_back (s.substr (i,j-i)); 
  } 
  return r; 
} 
 
VS phanstring1(const string &s,const string &th) { 
  VS r; 
  int i=0,j=0; 
  for(;;){ 
    i=s.find_first_of (th.c_str (),j); 
    if (i<0) break; 
    j=s.find_first_not_of (th.c_str (),i); 
    r.push_back (s.substr (i,j-i)); 
  } 
  return r; 
} 
 
template<typename A, typename B> 
B atob(const A a) { 
  stringstream os; 
  B b; 
  os<<a; 
  os>>b; 
  return b; 
} 
 
template<typename A> 
int to1int(const A a) { 
  return atob<A, int>(a); 
} 
 
template<typename A> 
double to1double(const A a) { 
  return atob<A, double>(a); 
} 
 
template<typename A> 
string to1string(const A a) { 
  return atob<A, string>(a); 
} 
 
VI doi1VI(string s) { 
  VS p = phanstring1(s,"-0123456789"); 
  VI d; 
  forv(i, p) d.push_back (to1int(p[i])); 
  return d; 
} 
 
VD doi1VD(string s) { 
  VS p = phanstring1(s,"0123456789.Ee-"); 
  VD d; 
  forv(i, p) d.push_back (to1double(p[i])); 
  return d; 
} 
 
VI doi2VI(VS s) { 
  VI d; 
  forv(i, s) d.push_back (to1int(s[i])); 
  return d; 
} 
 
template<typename A> 
VS doi2VS(const vector<A> s) { 
  VS p; 
  forv(i, s) p.push_back (to1string(s[i])); 
  return p; 
} 
 
VD doi2VD(VS s) { 
  VD d; 
  forv(i, s) d.push_back (to1double(s[i])); 
  return d; 
} 
 
template <typename T>  
ostream &operator<<(ostream &o,const vector<T> &v) { 
  o<<"\n{"; 
  if (v.size()) o<<' '<<v[0]; 
  for(size_t i=1;i<v.size();i++)  
    o<< ", "<<v[i]; 
  return o<<" }\n"; 
} 
 
template <typename F,typename S> 
ostream &operator<<(ostream &o,const pair<F,S> &p) { 
  return o<<"\n("<<p.first <<","<<p.second <<")\n"; 
} 
 
template <typename F,typename S> 
ostream &operator<<(ostream &o,const map<F,S> &p) { 
  o<<"\n%{\n"; 
  for(typename map<F,S>::const_iterator i=p.begin();i!=p.end();i++) 
    o<<i->first<<"->"<<i->second<<endl; 
  return  o<<"}%\n"; 
} 
 
u64 factorial(int i) { 
  u64 s=1; 
  while(i>0) s*=i--; 
  return s; 
} 
 
int thoa(int i,int j,int m,int n) { 
  return (i>=0 && i<m && j>=0 && j<n); 
} 
 
template<class T>  
T min2(const T& a,const  T &b) { 
  return a>b?b:a; 
} 
template<class T> 
T max2(const T &a,const T& b) { 
  return a>b?a:b; 
} 
 
template<class T> 
T minday(int num,...) { 
  va_list a; 
  va_start(a,num); 
  T s=va_arg(a,T); 
  for(int i=0;i<num-1;i++) { 
    T s1=va_arg(a,T); 
    if (s>s1) s=s1; 
  } 
  return s; 
} 
 
template<class T> 
T maxday(int num,...) { 
  va_list a; 
  va_start(a,num); 
  T s=va_arg(a,T); 
  for(int i=0;i<num-1;i++) { 
    T s1=va_arg(a,T); 
    if (s<s1) s=s1; 
  } 
  return s; 
} 
 
int min2(int a,int b) {return a>b?b:a; } 
int max2(int a,int b) {return a>b?a:b; } 
double min2(double a,double b) {return a>b?b:a; } 
double max2(double a,double b) {return a>b?a:b; } 
int min3(int a,int b,int c) {return min2(min2(a,b),c); } 
double min3(double a,double b,double c) {return min2(min2(a,b),c);} 
int max3(int a,int b,int c) {return max2(max2(a,b),c); } 
double max3(double a,double b,double c) {return max2(max2(a,b),c);} 
 
int tmpi,tmpi1; 
char tmpc,tmpc1; 
long tmpl,tmpl1; 
string tmps,tmps1; 
 
int dx8[]={-1,-1,-1,0,1,1,1,0}; 
int dy8[]={-1,0,1,1,1,0,-1,-1}; 
 
int dx4[]={-1,0,1,0}; 
int dy4[]={0,1,0,-1}; 
 
class TeamBuilder 
{  
public:  
  int d[100][100]; 
  vector <int> specialLocations(vector <string> paths)  
  {  
    int x, y, z, i, j, k, l, n, m; 
    forv2(i, j, paths) d[i][j] = paths[i][j] - '0'; 
    n = paths.size(); 
    fori(k, n) fori(i, n) if (i!=k && d[i][k]) 
      fori(j, n) if (j!=i && k!=j && d[k][j]) d[i][j] = 1; 
    VI kq(2, 0); 
    fori(i, n) { 
      int dem = 0; 
      fori(j, n) if (i!=j) dem += d[i][j]; 
      if (dem == n-1) kq[0]++; 
    } 
    fori(i, n) { 
      int dem = 0; 
      fori(j, n) if (i!=j) dem += d[j][i]; 
      if (dem == n-1) kq[1]++; 
    } 
    return kq; 
  }  
   
  
};  
 
 
 
// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003]
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/