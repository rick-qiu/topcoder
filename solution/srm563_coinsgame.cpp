/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=12330
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class CoinsGame {
public:
    int ways(vector<string> board);
};

int CoinsGame::ways(vector<string> board) {
    int ret;
    return ret;
}


int test0() {
    vector<string> board = {".."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> board = {"##.#", ".###", "###.", "#.##"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> board = {"####", "#..#", "#..#", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> board = {"#.#.#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> board = {"........", "........", "........", "........", "........", "........", "........", "........"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 688856388;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> board = {"#..#", "#..#", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> board = {"###", ".##", "..#", "###", ".##", "..#", "###"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 54;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> board = {"##", "##"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> board = {".#....#....#..", "#.#..#.#..##..", "...##...##..#.", "...#.........#", "#..#........#.", ".#.#.#...#.#..", "#.##........#.", "...#.........#", "...#..#.#...#.", "#..#...#...#..", ".#.##.......#.", "..##.#...#...#", "...#..#.#.#.#.", "...#...#...#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 165612282;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 150087966;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 194136388;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> board = {".#....#....#..", "#.#..#.#..##..", "...##...##..#.", "...#.........#", "#..#........#.", ".#.#.#...#.#..", "#.##........#.", "...#.........#", "...#..#.#...#.", "#..#...#...#..", ".#.##.......#.", "..##.#...#...#", "...#..#.#.#.#.", "...#...#...#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 165612282;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> board = {".#....#....#..", "#.#..#.#..##..", "...##...##..#.", "...#.........#", "#..#........#.", ".#.#.#...#....", "#.##........#.", "...#.........#", "...#..#.#...#.", "#..#...#...#..", ".#.##.......#.", "..##.#...#...#", "...#..#.#.#.#.", "...#...#...#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 25725342;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> board = {".#....#....#..", "#.#..#.#..##..", "...##...##..#.", "...#.........#", "#..#........#.", ".#.#.#...#....", "#.##........#.", "...#.........#", "...#..#.#...#.", "#..#...#...#..", ".#.##.......#.", "..##.#.......#", "...#..#.#.#.#.", "...#...#...#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 51450842;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> board = {".#....#....#..", "#.#..#.#..##..", "...##...##..#.", "...#.........#", "#..#........#.", ".#.#.#...#....", "#.##........#.", "...#.........#", "......#.#...#.", "#..#...#...#..", ".#.##.......#.", "..##.#.......#", "...#..#.#.#.#.", "...#...#...#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 102901853;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> board = {".#....#....#..", "#.#....#..##..", "...##...##..#.", "...#.........#", "#..#........#.", ".#.#.#...#....", "#.##........#.", "...#.........#", "......#.#...#.", "#..#...#...#..", ".#.##.......#.", "..##.#.......#", "...#..#.#.#.#.", "...#...#...#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 205803862;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> board = {"###################################", ".................#.................", ".................#.................", ".................#.................", ".................#.................", "###################################", "......#............................", "......#............................", "###################################", ".................#.................", ".................#.................", ".................#.................", ".................#.................", ".................#.................", "###################################", "......#............................", "......#............................", "......#............................", "###################################", ".................#.................", ".................#.................", ".................#.................", ".................#.................", ".................#.................", ".................#.................", "###################################", "......#............................", "......#............................", "......#............................", "......#............................", "......#............................", "......#............................", "......#............................", "......#............................", "###################################"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 156369431;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 518849857;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 594145770;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 105710441;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> board = {"###################################", ".................#.........#.......", ".................#.........#.......", ".................#.........#.......", ".................#.........#.......", "###################################", "......#............................", "......#............................", "###################################", ".................#.........#.......", ".................#.........#.......", ".................#.........#.......", ".................#.........#.......", ".................#.........#.......", "###################################", "......#............................", "......#............................", "......#............................", "###################################", "..........#......#.................", "..........#......#.................", "..........########.................", ".................#.................", ".................#.................", ".................#.................", "###################################", "......#...#......#.................", "......#...#......#.................", "......#...#####..#.................", "......#.......#..#.................", "......#.......#..#.................", "......#.......#..#.................", "......#.......#..#.................", "......#.......#..#.................", "###################################"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 537827790;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 8238370;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 986412280;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 886609733;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 158746803;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 317691881;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 755705879;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 970529672;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 32912876;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 559029400;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 78223981;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 505464680;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 856224951;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 60770048;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 189009237;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 756041659;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> board = {"...........#......##......##....#.......", "...........#......##......##....#.......", "...........#......##......##....#.......", "...........#......##......##....#.......", "...........###..######..#####..##.......", ".............#..#....#..#...#..#........", ".............####.....##....####........", "........................................", "........................................", "........................................", "........................................", "........................................", "#######.................................", ".....##.................................", "......#.................................", "......#.................................", "......#.................................", "#######.................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "........................................"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 395080458;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 191790506;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 3021083;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 3021779;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 604370701;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 585345785;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 237254171;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> board = {"...........#......##......##....#.......", "...........#......##......##....#.......", "...........#......##......##....#.......", "...........#......##......##....#.......", "...........###..######..#####..##.......", "............##..#....#..#...#..#........", "..#..........####.....##....####........", "..................................#.....", ".......#................................", ".................................#....##", "...................................###..", ".................................##.....", "#######.......#.#....#...........#......", ".....##............#.....#.......#.....#", "......#....#....................#.....#.", "......#.........................#..###..", "......#.....#.#....#.........#.#..#.....", "#######...................##.#####......", "......#.....................#...#.......", "......#....................#.....#......", "......#.....................##....#.....", "#######................#..#..##.###.....", "......#...................##########....", "......#............#.....#..#.....##....", "......#....................###.....#.#..", ".....##......#................##..##..##", "#####.#.......#...........#.###########.", "......................................#.", "..............#.....................##.#", "....................................#...", "..........#...#....................##...", "...................#...............#....", ".............#....##..............###...", ".................##.##.............####.", ".........#...#.#.#....#...........#....#", "................#.....#...........#.....", "...............#.......#..........#.....", "...............#.......##.........#.....", "..............#.........#.........#.....", "..............#..........#........#....."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 275775728;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 380110629;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> board = {"...........#......##......##....#.......", "...........#......##......##....#.......", "...........#......##......##....#.......", ".......#...#......##......##....#.......", "....#......###..######..#####..##.......", "......#.....##..#....#..#...#..#........", "..#..........####.....##....####........", "..................................#.....", ".......#................................", "....#..##........................#....##", "...................................###..", "...........#.....................##.....", "#######.....#.#.#....#...........#......", ".....##............#.....#.......#.....#", "......#....#....................#.....#.", "......#.........................#..###..", "......#.....#.#....#.........#.#..#.....", "#######...................##.#####......", "......#.....................#...#.......", "......#.......#..#....#....#.....#......", "......#............####.....##....#.....", "#######..#..........#..#..#..##.###.....", "......#.............#..#..##########....", "......#.....#......#...#.#..#.....##....", "......#...........#.#.#....###.....#.#..", ".....##......#......##........##..##..##", "#####.##......#...........#.###########.", "...............#....#...#.............#.", "..........#...#.#...................##.#", "........#..#.#...#.......#..........#...", "..........#..#...#.................##...", "....#.........###..##...#..........#....", ".....#.......##...##..##..........###...", ".......#.........##.##.............####.", ".....#.#.#...#.#.#....#...#.......#....#", "................#....##...........#.....", ".......#.......#.......#..........#.....", "...#.....#.....#..#.#..##.........#.....", "..............#.........#.........#.....", "..............#..........#........#....."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 143094863;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 870174637;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> board = {"...........#......##......##....#...#...", "...........#......##......##....#...#...", "...........#......##......##....#...#...", ".......#...#......##......##....#...#...", "....#......###..######..#####..##...#...", "......#.....##..#....#..#...#..#....#...", "..#..........####.....##....####....####", "................#.....#....#.#.#..#.....", ".......#..............#....#....#.......", "....#..##.......#.....#.....#...##....##", ".......................#....#.###..###..", "...........#....#.......#....##..##.....", "#######.....#.#.#....#.##....#...#......", ".....##............#.....#.###...#.....#", "......#....#...............#..#.#.....#.", "......#...................#...#.#..###..", "......#.....#.#....#.......#.#.#..#.....", "#######...................##.#####......", "......#.....................#...#.......", "......#.......#..#....#....#.....#......", "......#............####.....##....#.....", "#######..#..........#..#..#..##.###.....", "......#.............#..#..##########....", "......#.....#......#...#.#..#.....##....", "......#...........#.#.#....###.....#.#..", ".....##......#......##........##..##..##", "#####.##......#...........#.###########.", "...............#....#...#.............#.", "..........#...#.#...................##.#", "........#..#.#...#.......#..........#...", "..........#..#...#.................##...", "....#.........###..##...#..........#....", ".....#.......##...##..##..........###...", ".......#.........##.##.............####.", ".....#.#.#...#.#.#....#...#.......#....#", "................#....##...........#.....", ".......#.......#.......#..........#.....", "...#.....#.....#..#.#..##.........#.....", "..............#.........#.........#.....", "..............#..........#........#....."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 338788442;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> board = {".#.#.#.#.#.###########...#...#.........#", ".#.#.#.#.#.#..#..#...#...#####.........#", "...#...#...#..#..#...#####...###########", "############..#..#...#...#...#.........."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 400952373;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> board = {".#.#.#.#.#.###########...#...#.........#", ".#.#.#.#.#.#..#..#...#...#####.........#", "...#...#...#..#..#...#####...###########", "############..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 700467794;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> board = {".#.#.#.#.#.###########...#...#.........#", ".#.#.#.#.#.#..#..#...#...#####.........#", "...#...#...#..#..#...#####...#####.#####", "############..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 400960531;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> board = {".#.#.#.#.#.###########...#...#.........#", ".#.#.#.#.#.#..#..#...#...#####.........#", "...#...#...#..#..#...##.##...#####.#####", "############..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 801921553;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> board = {".#.#.#.#.#.###########...#...#.........#", ".#.#.#.#.#.#..#..#...#...##.##.........#", "...#...#...#..#..#...##.##...#####.#####", "############..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 603843577;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> board = {".#.#.#.#.#.########.##...#...#.........#", ".#.#.#.#.#.#..#..#...#...##.##.........#", "...#...#...#..#..#...##.##...#####.#####", "############..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 207687929;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> board = {".#.#.#.#.#.########.##...#...#.........#", ".#.#.#.#.#.#..#..#...#...##.##.........#", "...#...#...#..#..#...##.##...#####.#####", "########.###..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 415375996;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> board = {".#.#.#.#.#.########.##...#...#.........#", ".#.#.#.#.#.#..#..#...#...##.##.........#", "...#...#...#..#..#...##.##...#####.#####", "####.###.###..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 830752109;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> board = {".#.#.#.#.#.########.##...#...#.........#", ".#.#.#.#.#.#..#..#...#...##.##.........#", "...#...#...#..#..#...##.##...#####.#####", "##.#.###.###..#..#...#...#...#.........#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 661504343;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> board = {"........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 291111972;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> board = {"........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 200339356;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> board = {"........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 635404139;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> board = {"........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "########", "....#...", "........", "....#...", "....#...", "....#...", "........", "....#...", "....#...", "....#...", "....#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 797267998;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> board = {"........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "########", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 447744067;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> board = {"........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "########", "....#...", "....#...", "....#...", "#####...", "....#...", "....#...", "....#...", "########", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 491413479;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> board = {"........", "........", "........", "........", "########", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "........", "########", "....#...", "....#...", "....#...", "########", "....#...", "....#...", "....#...", "########", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#...", "....#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 186411905;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> board = {"...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#..", ".#....#....#....#....#....#....#....#...", "#....#....#....#....#....#....#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 934320175;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> board = {"...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#..", ".#....#....#....#....#....#....#....#...", "#....#....#....#....#.#..#....#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 467160046;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> board = {"...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#..", ".#....#....#....#....#....#....#....#...", "#....#....#....#....#.#..#.#..#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 233579941;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> board = {"...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#..", ".#....#....#....##...#....#....#....#...", "#....#....#....#.#..#.#..#.#..#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 308394767;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> board = {"...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#..", ".#....#....##...##...#....#....#....#...", "#....#....#.#..#.#..#.#..#.#..#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 327098484;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> board = {"...#....#....#....#....#....#....#....#.", "..##...#....#....#....#....#....#....#..", ".###..##...##...##...#....#....#....#...", "#....###..#.#..#.#..#.#..#.#..#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 505110657;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> board = {"...#....#...##....#....#....#....#....#.", "..##...#.........#....#....#....#....#..", ".###..##...##...##...#....#....#....#...", "#....###..#.#..#.#..#.#..#.#..#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 505110683;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> board = {"...#....#...##....#....#....#....#....#.", "..##...#..............#....#....#....#..", ".###..##...##...##...#....#....#....#...", "#....###..#.#..#.#..#.#..#.#..#....#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 10221596;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> board = {"...#....#...##....#....#....#....#....#.", "..##...#..............#....#....#....#..", ".###..##...##...##...#....#....#....#...", "#....###..#.#..#.#..#.#..#.#..#.#..#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 505110602;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> board = {"...#....#...##....#....#....#....#....#.", "..##...#..............#....#....#....#..", ".###..##...##...##...#....#....#....#...", "#....###..#.#..#.#..#.#....#....#..#....", "....#....#....#....#....#....#....#....#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 20443459;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> board = {"...#....#...##....#....#....#....#....#.", "..##...#..............#....#....#....#..", ".###..##...##...##...#....#....#....#...", "#....###..#.#..#.#..#.#....#....#.......", "....#....#....#....#....#...##...###...#", "...#....#....#....#....#....#....#....#.", "..#....#....#....#....#....#....#....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 505110710;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> board = {"..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", "..............................", ".............................."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 248534187;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 160066316;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> board = {".#...................#.", "#.....................#", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", ".......................", "#.....................#", ".#...................#."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 970905774;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> board = {".#...................#.", "#.....................#", ".......................", ".......................", ".......................", ".........#.............", "........#.#............", ".......#...#..........."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 947607104;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> board = {".#...........#...#...#.", "#.............#.#.....#", "...............#.......", ".......................", ".......................", ".........#.............", "........#.#............", ".......#...#..........."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 529612561;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> board = {"...", ".#.", "..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 247;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> board = {".....", ".###.", ".#.#.", ".###.", "....."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 131054;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> board = {".....", ".###.", ".....", ".###.", "....."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 524268;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> board = {"...#.", ".###.", ".#...", ".###.", "...#.", ".###.", ".#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4194281;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> board = {"...#...#...", ".###.###...", ".#...#.....", ".###.###...", "...#...#...", ".###.###...", ".#...#....."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 793419005;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> board = {"...#...#...#.", ".###.###.###.", ".#...#...#...", ".###.###.###.", "...#...#...#.", ".###.###.###.", ".#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 586838037;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> board = {"...#...#...#.#.......", ".###.###.###.###.....", ".#...#...#.....#.....", ".###.###.###.###.....", "...#...#...#.#.......", ".###.###.###.###.....", ".#...#...#.....#....."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 323008838;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> board = {"...#...#...#.#.....#.", ".###.###.###.###.###.", ".#...#...#.....#.#...", ".###.###.###.###.###.", "...#...#...#.#.....#.", ".###.###.###.###.###.", ".#...#...#.....#.#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 584389923;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> board = {"...#...#...#.#.....#.#....", ".###.###.###.###.###.###..", ".#...#...#.....#.#.....#..", ".###.###.###.###.###.###..", "...#...#...#.#.....#.#....", ".###.###.###.###.###.###..", ".#...#...#.....#.#.....#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 380580268;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> board = {"...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".###.###.###.###.###.###.###.", "...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 428582137;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> board = {"...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".###.###.###.###.###.###.###.", "...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".............................", "............................."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 529612561;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> board = {"...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".###.###.###.###.###.###.###.", "...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", "...............#.#.....#.#...", "...............#.#.....#.#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 142693621;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> board = {"...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".###.###.###.###.###.###.###.", "...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".........#.....#.#.....#.#...", ".........#.....#.#.....#.#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 785673254;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> board = {"...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".###.###.###.###.###.###.###.", "...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".....#...#.....#.#.....#.#...", ".....#...#.....#.#.....#.#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 946418170;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> board = {"...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".###.###.###.###.###.###.###.", "...#...#...#.#.....#.#.....#.", ".###.###.###.###.###.###.###.", ".#...#...#.....#.#.....#.#...", ".#...#...#.....#.#.....#.#...", ".#...#...#.....#.#.....#.#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 486604375;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 822187475;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 506098747;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> board = {};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 47250659;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> board = {"####", "####", "####", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> board = {"####", "#.##", "####", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> board = {"####", "#..#", "####", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> board = {"####", "#..#", "##.#", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> board = {"####", "#..#", "#..#", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> board = {"####", "#...", "#..#", "####"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> board = {"####", "#...", "#..#", "##.#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 57;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> board = {"####", "#...", "...#", "##.#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 120;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> board = {"#.##", "#...", "...#", "##.#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 247;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> board = {"#.#.", "#...", "...#", "##.#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 502;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> board = {"#.#.", "#...", "...#", ".#.#"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1013;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> board = {"#.#.", "#...", "...#", ".#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 2036;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> board = {"..#.", "#...", "...#", ".#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4083;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> board = {"....", "#...", "....", ".#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 16369;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> board = {"..#.", "#..#", "....", ".#.."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 4083;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> board = {"...#...", "...#...", "...#...", "###.###", "...#...", "...#...", "...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 438952201;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> board = {"...#...", "...#...", "...#...", "#######", "...#...", "...#...", "...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 719476087;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> board = {"...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "#######################", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "#######################", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "#######################", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 734499337;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> board = {"...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 76423984;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 682368143;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#...#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 106108068;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".......#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".......#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 748785799;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...........#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".......#...#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 839076045;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...........#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...........#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 1085048;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".........#.#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".........#.#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 221441818;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".........#.#...#...#...", "...#.#.#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".........#.#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 424834643;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".........#.#...#...#...", "...#.#.#...#...#...#...", "###########.#.#.###.###", "...#...#...#...#...#...", ".........#.#...#...#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 849669680;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> board = {"...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", ".........#.#...#...#...", "...#.#.#...#...#...#...", "###########.#.#.###.###", "...#...#...#...#...#...", ".........#.#...........", "...#...#...#...#...#...", "###########.###.###.###", "...#...#...#...#...#...", "...#.......#.......#...", "...#...#...#...#...#..."};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 372595241;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> board = {"..##.#.##..#.#.#....#.#..###.#.######.#.", "#....##..####.#.#..##...###.#...#.#...#.", ".##.#.#####...##.#.##...####.#....###..#", ".##.##....#.##....##.#..###.##...#.#....", ".#####...#.####.#.#####......#.#.#...##.", "##.#..#...#..#####...#.#.#####..#...##..", "...##.######...###..#.#####..#.#.#...##.", ".#...####.###.#.#.#.#.#.#..###...#.###..", "##....####..##.####...#...#.######..####", "#.#....#.#...##.####..#.#####.#.#.#..#..", "..###....####.#...###....###.#.....##...", ".#....#..##.#.###.####.##.#.##....##.#.#", "....#.###.########....#.##..#.#....####.", ".##..#.#..##......#.#..#.#.#.###.#..#..#", "...#####...##..###.#..#...##..#.####..##", "######..###.##....###.##.#.####.#...#...", ".....##...#..#...#...##.###....##.#..#..", "###.....##..#.####..####.##.#...#.##..#.", "#.#.##.####.....#.#.#..####...######.##.", ".#####..##..#...####.#..#..#.##...##..##", ".#.#######...#.######..##..######.###.##", "..####.#.####......##..#...##.#..##.###.", "....#.##..#.#.####.#....#..#.#...##.....", "##..#..####.##.#....#.##.##.#.###...####", ".#.....#.#..##.#...#.#...#..##.##..##.#.", "####....#.#.#.##...#.#...##..##.###..#..", "###.###....##.###......#..#..##..#.#....", "##.#.##.#..#.....#.#..#.###....##...##..", "..#....#.#.#.#.#..##.###...#..##.###.#.#", "#....#..#..##...#..######.#....##.#.####", "#...##...#..#.#..#.#..##..#...#.#..##.##", "#..##.#..##.####..#.##.##.#....##.#.####", "#.##..#..##..#..#...#......##..###..##.#", "#...#.#..#.#..###.....###..#....#.#.##.#", "###......###...##..#...........########.", "###.##.##.#.#.##.....#..#######.#.##.#.#", "..####.#.#...#..#...###.....##.#..###.#.", ".#..##.###..#.#..####.####..##...#.#####", "##.###.#...#.#.#.#...#..##.#.#...###.##.", "..#...#..#...#..#..##...#.##.#.#.....###"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 581084406;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    vector<string> board = {"#.###.###", "#...#...#", "#########"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 243;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    vector<string> board = {".........", "..###....", "#.#.#.#.#", "#.###....", "......#.#", "#########", "..#..#..#", "..#.##.##", "###.##.##"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 92942994;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    vector<string> board = {"#...#...#", "####.####", "#########"};
    CoinsGame* pObj = new CoinsGame();
    clock_t start = clock();
    int result = pObj->ways(board);
    clock_t end = clock();
    delete pObj;
    int expected = 63;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22263204&rd=15185&pm=12330
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
class CoinsGame {
public:
  int ways(vector <string>);
};
 
const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};
const int md = 1000000009;
const int N = 2626262;
 
vector < pair <int, int> > w[44][44][4];
 
char was[44][44][44][44], g[1616][1616];
 
int xa[N], ya[N], xb[N], yb[N];
int x[1616];
int id[44][44];
int wsw[1616];
 
int CoinsGame::ways(vector <string> board) {
  int n = board.size(), m = board[0].length(), i, j, ii, jj, d, e;
  for (i=0;i<=n;i++)
    for (j=0;j<=m;j++)
      for (d=0;d<=4;d++) w[i][j][d].clear();
  for (i=0;i<n;i++)
    for (j=0;j<m;j++)
      if (board[i][j] != '#')
        for (d=0;d<4;d++) {
          int xk = i+dx[d];
          int yk = j+dy[d];
          if (xk < 0 || yk < 0 || xk >= n || yk >= m) xk = n, yk = m; else
          if (board[xk][yk] == '#') xk = i, yk = j;
          w[xk][yk][d].push_back(make_pair(i,j));
        }
  memset(was, 0, sizeof(was));
  e = 0;
  for (i=0;i<n;i++)
    for (j=0;j<m;j++)
      if (board[i][j] != '#') {
        e++;
        xa[e] = i;
        ya[e] = j;
        xb[e] = n;
        yb[e] = m;
        was[i][j][n][m] = 1;
      }
  i = 1;
  while (i <= e) {
    for (d=0;d<4;d++) {
      int sz1 = w[xa[i]][ya[i]][d].size(), sz2 = w[xb[i]][yb[i]][d].size();
      for (int p1=0;p1<sz1;p1++)
        for (int p2=0;p2<sz2;p2++) {
          int xxa = w[xa[i]][ya[i]][d][p1].first;
          int yya = w[xa[i]][ya[i]][d][p1].second;
          int xxb = w[xb[i]][yb[i]][d][p2].first;
          int yyb = w[xb[i]][yb[i]][d][p2].second;
          if (!was[xxa][yya][xxb][yyb]) {
            e++;
            xa[e] = xxa;
            ya[e] = yya;
            xb[e] = xxb;
            yb[e] = yyb;
            was[xxa][yya][xxb][yyb] = 1;
          }
        }
    }
    i++;
  }
  int nn = 0;
  for (i=0;i<n;i++)
    for (j=0;j<m;j++)
      if (board[i][j] != '#') id[i][j] = nn++;
  for (i=0;i<nn;i++)
    for (j=0;j<nn;j++) g[i][j] = 0;
  for (i=0;i<n;i++)
    for (j=0;j<m;j++)
      if (board[i][j] != '#')
        for (ii=0;ii<n;ii++)
          for (jj=0;jj<m;jj++)
            if (board[ii][jj] != '#')
              if (!was[i][j][ii][jj] && !was[ii][jj][i][j]) {
                g[id[i][j]][id[ii][jj]] = 1;
                g[id[ii][jj]][id[i][j]] = 1;
              }
  int ans = 1;
  for (i=0;i<nn;i++) ans = ans*2 % md;
  for (i=0;i<nn;i++) wsw[i] = 0;
  for (ii=0;ii<nn;ii++)
    if (!wsw[ii]) {
      i = 1; e = 1;
      x[1] = ii;
      wsw[ii] = 1;
      while (i <= e) {
        for (j=0;j<nn;j++)
          if (g[x[i]][j] && !wsw[j]) {
            e++;
            x[e] = j;
            wsw[j] = 1;
          }
        i++;
      }
      int cur = 1;
      for (i=0;i<e;i++) cur = cur*2 % md;
      cur = (cur+md-1) % md;
      ans = (ans-cur) % md;
    }
  ans = (ans+md-1) % md;
  return ans;
}
 
 
//Powered by [KawigiEdit] 2.0!

********************************************************************************
*******************************************************************************/